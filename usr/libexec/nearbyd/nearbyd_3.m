void *sub_1001768A0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008542C0[a1]);
}

void *sub_1001768B4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854308[a1]);
}

void *sub_1001768C8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854328[a1]);
}

void sub_1001768DC(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)a1 + 31))
  {
    int v9 = sub_1003A82F0(a1[16], a2, a3, a4, a5, a6, a7, a8);
    sub_1003A8354(v9, v34);
  }
  else
  {
    sub_100004950(v34, "N/A");
  }
  sub_100054E28((uint64_t)v31);
  sub_100056628(v32, (uint64_t)"AOPRoseError. ", 14);
  v10 = sub_100056628(v32, (uint64_t)"Status:", 7);
  unsigned int v11 = *a1 - 1;
  if (v11 > 0x19) {
    v12 = "UNDEFINED";
  }
  else {
    v12 = off_100854348[(__int16)v11];
  }
  size_t v13 = strlen(v12);
  v14 = sub_100056628(v10, (uint64_t)v12, v13);
  sub_100056628(v14, (uint64_t)", ", 2);
  v15 = sub_100056628(v32, (uint64_t)"Subtype: ", 9);
  unsigned int v16 = a1[1] - 1;
  if (v16 > 0x13) {
    v17 = "UNDEFINED";
  }
  else {
    v17 = off_100854418[(__int16)v16];
  }
  size_t v18 = strlen(v17);
  v19 = sub_100056628(v15, (uint64_t)v17, v18);
  sub_100056628(v19, (uint64_t)", ", 2);
  v20 = sub_100056628(v32, (uint64_t)"Ticket Id: ", 11);
  if (*((unsigned char *)a1 + 28)) {
    std::to_string(&v30, *(unsigned __int16 *)((char *)a1 + 29));
  }
  else {
    sub_100004950(&v30, "N/A");
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v21 = &v30;
  }
  else {
    v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v30.__r_.__value_.__l.__size_;
  }
  v23 = sub_100056628(v20, (uint64_t)v21, size);
  sub_100056628(v23, (uint64_t)", ", 2);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  v24 = sub_100056628(v32, (uint64_t)"Rose Error Code: ", 17);
  if ((v35 & 0x80u) == 0) {
    v25 = v34;
  }
  else {
    v25 = (void **)v34[0];
  }
  if ((v35 & 0x80u) == 0) {
    uint64_t v26 = v35;
  }
  else {
    uint64_t v26 = (uint64_t)v34[1];
  }
  v27 = sub_100056628(v24, (uint64_t)v25, v26);
  sub_100056628(v27, (uint64_t)", ", 2);
  sub_100056628(v32, (uint64_t)"[Arg1: ", 7);
  std::ostream::operator<<();
  sub_100056628(v32, (uint64_t)", Arg2: ", 8);
  std::ostream::operator<<();
  sub_100056628(v32, (uint64_t)", Arg3: ", 8);
  v28 = (void *)std::ostream::operator<<();
  sub_100056628(v28, (uint64_t)"]", 1);
  std::stringbuf::str();
  *(void *)((char *)v31
  v32[0] = v29;
  if (v33 < 0) {
    operator delete((void *)v32[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v35 < 0) {
    operator delete(v34[0]);
  }
}

void sub_100176C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100055100((uint64_t)&a16);
  if (*(char *)(v16 - 49) < 0) {
    operator delete(*(void **)(v16 - 72));
  }
  _Unwind_Resume(a1);
}

void *sub_100176CE0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008544B8[a1]);
}

void *sub_100176CF4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854510[a1]);
}

void *sub_100176D08@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854558[a1]);
}

void *sub_100176D1C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854578[a1]);
}

uint64_t sub_100176D30(uint64_t a1, int a2, __int16 a3, long long *a4, double a5)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 40) = a2;
  *(double *)(a1 + 48) = a5;
  *(_WORD *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = *(void *)((char *)a4 + 19);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  long long v7 = *a4;
  long long v8 = a4[1];
  uint64_t v9 = *((void *)a4 + 4);
  *(void *)(a1 + 136) = 0;
  v10 = (void *)(a1 + 136);
  *(v10 - 1) = v9;
  *(_OWORD *)(v10 - 3) = v8;
  *(_OWORD *)(v10 - 5) = v7;
  v10[1] = 0;
  v10[2] = 0;
  sub_10015042C(v10, *((const void **)a4 + 5), *((void *)a4 + 6), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a4 + 6) - *((void *)a4 + 5)) >> 3));
  memcpy((void *)(a1 + 160), a4 + 4, 0x181uLL);
  return a1;
}

void sub_100176DE8(_Unwind_Exception *exception_object)
{
  v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100176E08(uint64_t a1, int a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(_WORD *)(a1 + 48) = *(_WORD *)a6;
  *(_WORD *)(a1 + 50) = a5;
  __n128 result = *(__n128 *)a6;
  *(void *)(a1 + 72) = *(void *)(a6 + 16);
  *(__n128 *)(a1 + 56) = result;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  return result;
}

uint64_t sub_100176E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  __int16 v10 = a2;
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = a9;
  *(unsigned char *)(a1 + 40) = 1;
  *(_WORD *)(a1 + 48) = sub_1003A82F0(*(unsigned __int16 *)(a3 + 20), a2, a3, a4, a5, a6, a7, a8);
  *(_WORD *)(a1 + 50) = v10;
  __int16 v19 = sub_1003A82F0(*(unsigned __int16 *)(a3 + 20), v12, v13, v14, v15, v16, v17, v18);
  __int16 v20 = *(_WORD *)(a3 + 26);
  long long v21 = *(_OWORD *)(a3 + 48);
  *(_WORD *)(a1 + 56) = v19;
  *(_WORD *)(a1 + 58) = v20;
  *(_OWORD *)(a1 + 64) = v21;
  long long v23 = *(_OWORD *)(a3 + 96);
  long long v22 = *(_OWORD *)(a3 + 112);
  long long v24 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 160) = v24;
  *(_OWORD *)(a1 + 176) = v23;
  *(_OWORD *)(a1 + 192) = v22;
  long long v26 = *(_OWORD *)(a3 + 32);
  long long v25 = *(_OWORD *)(a3 + 48);
  long long v27 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 96) = v27;
  *(_OWORD *)(a1 + 112) = v26;
  *(_OWORD *)(a1 + 128) = v25;
  *(unsigned char *)(a1 + 208) = 1;
  return a1;
}

uint64_t sub_100176EE8(uint64_t a1, __int16 a2, uint64_t a3, double a4)
{
  *(double *)a1 = a4;
  *(_WORD *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a3 + 20);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a3 + 21);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a3 + 23);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 28);
  double v6 = sub_10039CC60(*(unsigned int *)(a3 + 28));
  uint64_t v7 = 0;
  *(double *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v8 = a3 + 96;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  do
  {
    uint64_t v9 = (_DWORD *)(a1 + v7);
    v9[8] = *(_DWORD *)(v8 + v7 - 64);
    v9[16] = *(_DWORD *)(v8 + v7 - 32);
    v9[24] = *(_DWORD *)(v8 + v7);
    v7 += 4;
  }
  while (v7 != 32);
  return a1;
}

uint64_t sub_100176F8C(uint64_t a1, __int16 a2, uint64_t a3, double a4)
{
  *(double *)a1 = a4;
  *(_WORD *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a3 + 20);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a3 + 21);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a3 + 23);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a3 + 25);
  LOWORD(a4) = *(_WORD *)(a3 + 26);
  *(double *)(a1 + 24) = (double)*(unint64_t *)&a4 * 0.01;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 28);
  double v6 = sub_10039CC60(*(unsigned int *)(a3 + 28));
  uint64_t v7 = 0;
  *(double *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  do
  {
    *(_DWORD *)(a1 + v7 + 48) = *(_DWORD *)(a3 + 32 + v7);
    v7 += 4;
  }
  while (v7 != 32);
  return a1;
}

uint64_t sub_100177034(uint64_t result, __int16 a2, uint64_t a3, double a4)
{
  *(double *)__n128 result = a4;
  *(_WORD *)(result + 8) = a2;
  *(unsigned char *)(result + 10) = *(unsigned char *)(a3 + 20);
  *(unsigned char *)(result + 11) = *(unsigned char *)(a3 + 23);
  *(_WORD *)(result + 12) = *(_WORD *)(a3 + 24);
  *(_WORD *)(result + 14) = *(_WORD *)(a3 + 26);
  for (uint64_t i = 28; i != 116; i += 44)
  {
    v5 = (_OWORD *)(result + i);
    _OWORD *v5 = 0uLL;
    v5[1] = 0uLL;
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    uint64_t v8 = 0;
    uint64_t v9 = 50 * v6;
    uint64_t v10 = a3 + 50 * v6;
    uint64_t v11 = result + 44 * v6;
    *(unsigned char *)(v11 + 16) = *(unsigned char *)(v10 + 28);
    *(_WORD *)(v11 + 18) = *(_WORD *)(v10 + 29);
    *(_WORD *)(v11 + 20) = *(_WORD *)(v10 + 31);
    char v12 = v7;
    *(_DWORD *)(v11 + 24) = *(_DWORD *)(v10 + 33);
    do
    {
      *(_DWORD *)(v11 + 28 + v8) = *(_DWORD *)(a3 + 46 + v9 + v8);
      v8 += 4;
    }
    while (v8 != 32);
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v12 & 1) != 0);
  return result;
}

uint64_t sub_1001770F0(uint64_t a1, int a2)
{
  if (a2 >= 2) {
    sub_100412B64();
  }
  return *(unsigned __int8 *)(a1 + 44 * a2 + 16);
}

uint64_t sub_10017711C(uint64_t a1, int a2)
{
  if (a2 >= 2) {
    sub_100412B90();
  }
  return *(unsigned __int16 *)(a1 + 44 * a2 + 18);
}

uint64_t sub_100177148(uint64_t a1, int a2)
{
  if (a2 >= 2) {
    sub_100412BBC();
  }
  return *(unsigned __int16 *)(a1 + 44 * a2 + 20);
}

uint64_t sub_100177174(uint64_t a1, int a2)
{
  if (a2 >= 2) {
    sub_100412BE8();
  }
  return *(unsigned int *)(a1 + 44 * a2 + 24);
}

uint64_t sub_1001771A0(uint64_t a1, int a2)
{
  if (a2 >= 2) {
    sub_100412C14();
  }
  return a1 + 44 * a2 + 28;
}

void *sub_1001771C8(void *a1, char *a2)
{
  v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_10017727C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_100177290(unsigned __int8 *a1)
{
  int v2 = *((_DWORD *)a1 + 6);
  v3 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider] _printDebug timestamp_event:", __p, 2u);
    v3 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((unsigned __int16 *)a1 + 25);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider] ticket id: %d", __p, 8u);
    v3 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "Remote";
    if (!v2) {
      v5 = "Local";
    }
    *(_DWORD *)__p = 136315138;
    *(void *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   source: %s", __p, 0xCu);
    v3 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003A8354(*((unsigned __int16 *)a1 + 24), __p);
    int v6 = v43 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)buf = 136315138;
    v45 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   status: %s", buf, 0xCu);
    if (v43 < 0) {
      operator delete(*(void **)__p);
    }
  }
  int v7 = a1[1];
  std::locale v8 = qword_1008ABDE0;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v9)
    {
      sub_1003A8C44(*a1, __p);
      uint64_t v10 = v43 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)buf = 136315138;
      v45 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   rf channel: %s", buf, 0xCu);
      if (v43 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  else if (v9)
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   rf channel: UNKNOWN", __p, 2u);
  }
  int v11 = a1[40];
  uint64_t v12 = qword_1008ABDE0;
  BOOL v13 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (!v13) {
      goto LABEL_30;
    }
    uint64_t v14 = *((void *)a1 + 4);
    *(_DWORD *)__p = 134217984;
    *(void *)&__p[4] = v14;
    uint64_t v15 = "#sp,[Solution Provider]   mach_absolute_time_sec: %.6f";
    uint64_t v16 = v12;
    uint32_t v17 = 12;
  }
  else
  {
    if (!v13) {
      goto LABEL_30;
    }
    *(_WORD *)__p = 0;
    uint64_t v15 = "#sp,[Solution Provider]   mach_absolute_time_sec: UNKNOWN";
    uint64_t v16 = v12;
    uint32_t v17 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, __p, v17);
LABEL_30:
  int v18 = a1[16];
  uint64_t v19 = qword_1008ABDE0;
  BOOL v20 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    if (!v20) {
      goto LABEL_36;
    }
    uint64_t v21 = *((void *)a1 + 1);
    *(_DWORD *)__p = 134217984;
    *(void *)&__p[4] = v21;
    long long v22 = "#sp,[Solution Provider]   mach_continuous_time_sec: %.6f";
    long long v23 = v19;
    uint32_t v24 = 12;
  }
  else
  {
    if (!v20) {
      goto LABEL_36;
    }
    *(_WORD *)__p = 0;
    long long v22 = "#sp,[Solution Provider]   mach_continuous_time_sec: UNKNOWN";
    long long v23 = v19;
    uint32_t v24 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, __p, v24);
LABEL_36:
  int v25 = a1[208];
  uint64_t v26 = qword_1008ABDE0;
  BOOL v27 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  if (v25)
  {
    if (!v27) {
      goto LABEL_42;
    }
    double v28 = sub_10039CC60(*(void *)(a1 + 108));
    *(_DWORD *)__p = 134217984;
    *(double *)&__p[4] = v28;
    uint64_t v29 = "#sp,[Solution Provider]   r1 timestamp: %.9f sec";
    std::string v30 = v26;
    uint32_t v31 = 12;
  }
  else
  {
    if (!v27) {
      goto LABEL_42;
    }
    *(_WORD *)__p = 0;
    uint64_t v29 = "#sp,[Solution Provider]   r1 timestamp: UNKNOWN";
    std::string v30 = v26;
    uint32_t v31 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, __p, v31);
LABEL_42:
  v32 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v33 = *((unsigned __int16 *)a1 + 29);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   r1 cycle_idx: %d", __p, 8u);
  }
  int v34 = *((unsigned __int16 *)a1 + 24);
  unsigned __int8 v35 = qword_1008ABDE0;
  BOOL v36 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  if (v34)
  {
    if (v36)
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   round trip time: INVALID", __p, 2u);
      unsigned __int8 v35 = qword_1008ABDE0;
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      v37 = "#sp,[Solution Provider]   turn around time: INVALID";
      v38 = v35;
      uint32_t v39 = 2;
LABEL_53:
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v37, __p, v39);
    }
  }
  else
  {
    if (v36)
    {
      uint64_t v40 = *((void *)a1 + 8);
      *(_DWORD *)__p = 134217984;
      *(void *)&__p[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#sp,[Solution Provider]   round trip time: %llu rose fast ticks", __p, 0xCu);
      unsigned __int8 v35 = qword_1008ABDE0;
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v41 = *((void *)a1 + 9);
      *(_DWORD *)__p = 134217984;
      *(void *)&__p[4] = v41;
      v37 = "#sp,[Solution Provider]   turn around time: %llu rose fast ticks";
      v38 = v35;
      uint32_t v39 = 12;
      goto LABEL_53;
    }
  }
}

uint64_t sub_1001777E4@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  sub_100054E28((uint64_t)v425);
  sub_100054E28((uint64_t)v422);
  sub_100054E28((uint64_t)v419);
  v428.__r_.__value_.__s.__data_[8] = 9;
  int v4 = sub_100056628(v420, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  sub_100056628(v4, (uint64_t)"'ticket id': ", 13);
  v5 = (void *)std::ostream::operator<<();
  int v6 = sub_100056628(v5, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  int v7 = std::locale::use_facet((const std::locale *)&v428.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)&v428.__r_.__value_.__r.__words[1]);
  std::ostream::put();
  std::ostream::flush();
  v428.__r_.__value_.__s.__data_[8] = 9;
  std::locale v8 = sub_100056628(v420, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  BOOL v9 = sub_100056628(v8, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    p_uint64_t size = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    p_uint64_t size = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v11 = v429;
  }
  else {
    uint64_t v11 = v428.__r_.__value_.__r.__words[2];
  }
  uint64_t v12 = sub_100056628(v9, p_size, v11);
  sub_100056628(v12, (uint64_t)" sess id': ", 11);
  BOOL v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = sub_100056628(v13, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  uint64_t v15 = std::locale::use_facet(&v416, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v416);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  uint64_t v16 = sub_100056628(v420, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  uint32_t v17 = sub_100056628(v16, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t size = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t size = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v19 = v429;
  }
  else {
    uint64_t v19 = v428.__r_.__value_.__r.__words[2];
  }
  BOOL v20 = sub_100056628(v17, size, v19);
  sub_100056628(v20, (uint64_t)" cycle_idx': ", 13);
  uint64_t v21 = (void *)std::ostream::operator<<();
  long long v22 = sub_100056628(v21, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  long long v23 = std::locale::use_facet(&v416, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v416);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 48;
  uint32_t v24 = sub_1001771C8(v420, &v428.__r_.__value_.__s.__data_[8]);
  *(_DWORD *)((char *)v24 + *(void *)(*v24 - 24) + 8) = *(_DWORD *)((unsigned char *)v24 + *(void *)(*v24 - 24) + 8) & 0xFFFFFFB5 | 8;
  v428.__r_.__value_.__s.__data_[8] = 9;
  int v25 = sub_100056628(v420, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  uint64_t v26 = sub_100056628(v25, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v27 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v27 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v28 = v429;
  }
  else {
    uint64_t v28 = v428.__r_.__value_.__r.__words[2];
  }
  uint64_t v29 = sub_100056628(v26, v27, v28);
  std::string v30 = sub_100056628(v29, (uint64_t)" mac_addr': 0x", 14);
  *(void *)((char *)v30 + *(void *)(*v30 - 24) + 24) = 16;
  uint32_t v31 = (void *)std::ostream::operator<<();
  v32 = sub_100056628(v31, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
  int v33 = std::locale::use_facet(&v416, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v416);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  *(_DWORD *)((char *)&v420[1] + *(void *)(v420[0] - 24)) = *(_DWORD *)((unsigned char *)&v420[1]
                                                                          + *(void *)(v420[0] - 24)) & 0xFFFFFFB5 | 2;
  std::stringbuf::str();
  int v34 = sub_100056628(v426, (uint64_t)"Range Result (Part 1 of 2):", 27);
  std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
  unsigned __int8 v35 = std::locale::use_facet((const std::locale *)&v428.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
  std::locale::~locale((std::locale *)&v428.__r_.__value_.__r.__words[1]);
  std::ostream::put();
  std::ostream::flush();
  BOOL v36 = sub_100056628(v426, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
  v37 = std::locale::use_facet((const std::locale *)&v428.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
  std::locale::~locale((std::locale *)&v428.__r_.__value_.__r.__words[1]);
  std::ostream::put();
  std::ostream::flush();
  if ((v418 & 0x80u) == 0) {
    locale = &v416;
  }
  else {
    locale = v416.__locale_;
  }
  if ((v418 & 0x80u) == 0) {
    uint64_t v39 = v418;
  }
  else {
    uint64_t v39 = v417;
  }
  sub_100056628(v426, (uint64_t)locale, v39);
  v428.__r_.__value_.__s.__data_[8] = 9;
  uint64_t v40 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  uint64_t v41 = sub_100056628(v40, (uint64_t)"'mach abs time (sec)': ", 23);
  *(void *)((char *)v41 + *(void *)(*v41 - 24) + 16) = 6;
  v42 = (void *)std::ostream::operator<<();
  char v43 = sub_100056628(v42, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
  v44 = std::locale::use_facet((const std::locale *)&v428.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale((std::locale *)&v428.__r_.__value_.__r.__words[1]);
  std::ostream::put();
  std::ostream::flush();
  v428.__r_.__value_.__s.__data_[8] = 9;
  v45 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v46 = sub_100056628(v45, (uint64_t)"'mach cont time (sec)': ", 24);
  *(void *)((char *)v46 + *(void *)(*v46 - 24) + 16) = 6;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
  sub_100004950(__p, "UNKNOWN");
  sub_10017BAE4(&__dst, (uint64_t)__p, (std::string *)&v428.__r_.__value_.__r.__words[1]);
  if ((v429 & 0x80u) == 0) {
    uint64_t v47 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v47 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v48 = v429;
  }
  else {
    uint64_t v48 = v428.__r_.__value_.__r.__words[2];
  }
  v49 = sub_100056628(v46, v47, v48);
  v50 = sub_100056628(v49, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
  v51 = std::locale::use_facet((const std::locale *)&v412, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
  std::locale::~locale((std::locale *)&v412);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  if (v415 < 0) {
    operator delete(__p[0]);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v52 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v53 = sub_100056628(v52, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v54 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v54 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v55 = v429;
  }
  else {
    uint64_t v55 = v428.__r_.__value_.__r.__words[2];
  }
  v56 = sub_100056628(v53, v54, v55);
  v57 = sub_100056628(v56, (uint64_t)" timestamp (sec)': ", 19);
  *(void *)((char *)v57 + *(void *)(*v57 - 24) + 16) = 6;
  v58 = (void *)std::ostream::operator<<();
  v59 = sub_100056628(v58, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24)));
  v60 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v61 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v62 = sub_100056628(v61, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v63 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v63 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v64 = v429;
  }
  else {
    uint64_t v64 = v428.__r_.__value_.__r.__words[2];
  }
  v65 = sub_100056628(v62, v63, v64);
  v66 = sub_100056628(v65, (uint64_t)" sess status': ", 15);
  sub_1003A8354(*(unsigned __int16 *)(a1 + 96), __p);
  if (v415 >= 0) {
    v67 = __p;
  }
  else {
    v67 = (void **)__p[0];
  }
  size_t v68 = strlen((const char *)v67);
  v69 = sub_100056628(v66, (uint64_t)v67, v68);
  v70 = sub_100056628(v69, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(void *)(*v70 - 24)));
  v71 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if (v415 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v72 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v73 = sub_100056628(v72, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v74 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v74 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v75 = v429;
  }
  else {
    uint64_t v75 = v428.__r_.__value_.__r.__words[2];
  }
  v76 = sub_100056628(v73, v74, v75);
  v77 = sub_100056628(v76, (uint64_t)" sess type': ", 13);
  sub_1003A8080(*(unsigned __int8 *)(a1 + 100), __p);
  if (v415 >= 0) {
    v78 = __p;
  }
  else {
    v78 = (void **)__p[0];
  }
  size_t v79 = strlen((const char *)v78);
  v80 = sub_100056628(v77, (uint64_t)v78, v79);
  v81 = sub_100056628(v80, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(void *)(*v81 - 24)));
  v82 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if (v415 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 48;
  v83 = sub_1001771C8(v426, &v428.__r_.__value_.__s.__data_[8]);
  *(_DWORD *)((char *)v83 + *(void *)(*v83 - 24) + 8) = *(_DWORD *)((unsigned char *)v83 + *(void *)(*v83 - 24) + 8) & 0xFFFFFFB5 | 8;
  v428.__r_.__value_.__s.__data_[8] = 9;
  v84 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v85 = sub_100056628(v84, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v86 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v86 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v87 = v429;
  }
  else {
    uint64_t v87 = v428.__r_.__value_.__r.__words[2];
  }
  v88 = sub_100056628(v85, v86, v87);
  v89 = sub_100056628(v88, (uint64_t)" winning_tx_antenna_mask': 0x", 29);
  *(void *)((char *)v89 + *(void *)(*v89 - 24) + 24) = 2;
  v90 = (void *)std::ostream::operator<<();
  v91 = sub_100056628(v90, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24)));
  v92 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  *(_DWORD *)((char *)&v426[1] + *(void *)(v426[0] - 24)) = *(_DWORD *)((unsigned char *)&v426[1]
                                                                          + *(void *)(v426[0] - 24)) & 0xFFFFFFB5 | 2;
  v428.__r_.__value_.__s.__data_[8] = 9;
  v93 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v94 = sub_100056628(v93, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v95 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v95 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v96 = v429;
  }
  else {
    uint64_t v96 = v428.__r_.__value_.__r.__words[2];
  }
  v97 = sub_100056628(v94, v95, v96);
  v98 = sub_100056628(v97, (uint64_t)" UWB channel': ", 15);
  sub_1003A8C44(*(unsigned __int8 *)(a1 + 368), __p);
  if (v415 >= 0) {
    v99 = __p;
  }
  else {
    v99 = (void **)__p[0];
  }
  size_t v100 = strlen((const char *)v99);
  v101 = sub_100056628(v98, (uint64_t)v99, v100);
  v102 = sub_100056628(v101, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
  v103 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if (v415 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v104 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v105 = sub_100056628(v104, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v106 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v106 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v107 = v429;
  }
  else {
    uint64_t v107 = v428.__r_.__value_.__r.__words[2];
  }
  v108 = sub_100056628(v105, v106, v107);
  v109 = sub_100056628(v108, (uint64_t)" Band select': ", 15);
  unsigned int v110 = *(unsigned __int16 *)(a1 + 369);
  if (v110 >= 0x100)
  {
    sub_1003A8C74(*(_WORD *)(a1 + 369), __p);
    if (v415 >= 0) {
      v111 = (const char *)__p;
    }
    else {
      v111 = (const char *)__p[0];
    }
  }
  else
  {
    v111 = "N/A";
  }
  size_t v112 = strlen(v111);
  v113 = sub_100056628(v109, (uint64_t)v111, v112);
  v114 = sub_100056628(v113, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v114 + *(void *)(*v114 - 24)));
  v115 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v115->__vftable[2].~facet_0)(v115, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if (v110 >= 0x100 && v415 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v116 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v117 = sub_100056628(v116, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v118 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v118 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v119 = v429;
  }
  else {
    uint64_t v119 = v428.__r_.__value_.__r.__words[2];
  }
  v120 = sub_100056628(v117, v118, v119);
  v121 = sub_100056628(v120, (uint64_t)" NB channel': ", 14);
  int v122 = *(_DWORD *)(a1 + 372);
  sub_100004950(&v412, "N/A");
  if ((v122 & 0xFF0000) != 0)
  {
    std::to_string(&__dst, (unsigned __int16)v122);
  }
  else if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_100002DE4(&__dst, v412.__r_.__value_.__l.__data_, v412.__r_.__value_.__l.__size_);
  }
  else
  {
    std::string __dst = v412;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v124 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v124 = __dst.__r_.__value_.__l.__size_;
  }
  v125 = sub_100056628(v121, (uint64_t)p_dst, v124);
  v126 = sub_100056628(v125, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v126 + *(void *)(*v126 - 24)));
  v127 = std::locale::use_facet(v411, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v127->__vftable[2].~facet_0)(v127, 10);
  std::locale::~locale(v411);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v128 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v129 = sub_100056628(v128, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v130 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v130 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v131 = v429;
  }
  else {
    uint64_t v131 = v428.__r_.__value_.__r.__words[2];
  }
  v132 = sub_100056628(v129, v130, v131);
  v133 = sub_100056628(v132, (uint64_t)" range (m)': ", 13);
  *(void *)((char *)v133 + *(void *)(*v133 - 24) + 16) = 6;
  v134 = (void *)std::ostream::operator<<();
  v135 = sub_100056628(v134, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v135 + *(void *)(*v135 - 24)));
  v136 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v136->__vftable[2].~facet_0)(v136, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v137 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v138 = sub_100056628(v137, (uint64_t)"'ME range unc (m)': ", 20);
  *(void *)((char *)v138 + *(void *)(*v138 - 24) + 16) = 6;
  *(_OWORD *)&v412.__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 520);
  sub_100004950(&__dst, "N/A");
  sub_10017BAE4(&v412, (uint64_t)&__dst, (std::string *)&v428.__r_.__value_.__r.__words[1]);
  if ((v429 & 0x80u) == 0) {
    uint64_t v139 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v139 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v140 = v429;
  }
  else {
    uint64_t v140 = v428.__r_.__value_.__r.__words[2];
  }
  v141 = sub_100056628(v138, v139, v140);
  v142 = sub_100056628(v141, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v142 + *(void *)(*v142 - 24)));
  v143 = std::locale::use_facet(v411, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v143->__vftable[2].~facet_0)(v143, 10);
  std::locale::~locale(v411);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v144 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v145 = sub_100056628(v144, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v146 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v146 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v147 = v429;
  }
  else {
    uint64_t v147 = v428.__r_.__value_.__r.__words[2];
  }
  v148 = sub_100056628(v145, v146, v147);
  v149 = sub_100056628(v148, (uint64_t)" azimuth PDOA (deg)': ", 22);
  *(void *)((char *)v149 + *(void *)(*v149 - 24) + 16) = 6;
  *(_OWORD *)&v411[0].__locale_ = *(_OWORD *)(a1 + 256);
  sub_100004950(&v412, "invalid");
  sub_10017BAE4((std::string *)v411, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v150 = &__dst;
  }
  else {
    v150 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v151 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v151 = __dst.__r_.__value_.__l.__size_;
  }
  v152 = sub_100056628(v149, (uint64_t)v150, v151);
  v153 = sub_100056628(v152, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v153 + *(void *)(*v153 - 24)));
  v154 = std::locale::use_facet((const std::locale *)&v428, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v154->__vftable[2].~facet_0)(v154, 10);
  std::locale::~locale((std::locale *)&v428);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v155 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v156 = sub_100056628(v155, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v157 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v157 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v158 = v429;
  }
  else {
    uint64_t v158 = v428.__r_.__value_.__r.__words[2];
  }
  v159 = sub_100056628(v156, v157, v158);
  v160 = sub_100056628(v159, (uint64_t)" elevation PDOA (deg)': ", 24);
  *(void *)((char *)v160 + *(void *)(*v160 - 24) + 16) = 6;
  *(_OWORD *)&v411[0].__locale_ = *(_OWORD *)(a1 + 272);
  sub_100004950(&v412, "invalid");
  sub_10017BAE4((std::string *)v411, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v161 = &__dst;
  }
  else {
    v161 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v162 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v162 = __dst.__r_.__value_.__l.__size_;
  }
  v163 = sub_100056628(v160, (uint64_t)v161, v162);
  v164 = sub_100056628(v163, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v164 + *(void *)(*v164 - 24)));
  v165 = std::locale::use_facet((const std::locale *)&v428, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v165->__vftable[2].~facet_0)(v165, 10);
  std::locale::~locale((std::locale *)&v428);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v166 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v167 = sub_100056628(v166, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v168 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v168 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v169 = v429;
  }
  else {
    uint64_t v169 = v428.__r_.__value_.__r.__words[2];
  }
  v170 = sub_100056628(v167, v168, v169);
  v171 = sub_100056628(v170, (uint64_t)" SOI RSSI (dBm)': ", 18);
  *(void *)((char *)v171 + *(void *)(*v171 - 24) + 16) = 6;
  v172 = (void *)std::ostream::operator<<();
  v173 = sub_100056628(v172, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v173 + *(void *)(*v173 - 24)));
  v174 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v174->__vftable[2].~facet_0)(v174, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v175 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v176 = sub_100056628(v175, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v177 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v177 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v178 = v429;
  }
  else {
    uint64_t v178 = v428.__r_.__value_.__r.__words[2];
  }
  v179 = sub_100056628(v176, v177, v178);
  sub_100056628(v179, (uint64_t)" anchor time offset raw (r1 ticks)': ", 37);
  v180 = (void *)std::ostream::operator<<();
  v181 = sub_100056628(v180, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v181 + *(void *)(*v181 - 24)));
  v182 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v182->__vftable[2].~facet_0)(v182, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v183 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v184 = sub_100056628(v183, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v185 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v185 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v186 = v429;
  }
  else {
    uint64_t v186 = v428.__r_.__value_.__r.__words[2];
  }
  v187 = sub_100056628(v184, v185, v186);
  sub_100056628(v187, (uint64_t)" anchor time offset (ps)': ", 27);
  sub_100030494(*(double *)(a1 + 296));
  v188 = (void *)std::ostream::operator<<();
  v189 = sub_100056628(v188, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v189 + *(void *)(*v189 - 24)));
  v190 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v190->__vftable[2].~facet_0)(v190, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v191 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v192 = sub_100056628(v191, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v193 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v193 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v194 = v429;
  }
  else {
    uint64_t v194 = v428.__r_.__value_.__r.__words[2];
  }
  v195 = sub_100056628(v192, v193, v194);
  v196 = sub_100056628(v195, (uint64_t)" AOA first path SNR - center (dB)': ", 36);
  *(void *)((char *)v196 + *(void *)(*v196 - 24) + 16) = 6;
  *(_OWORD *)&v411[0].__locale_ = *(_OWORD *)(a1 + 192);
  sub_100004950(&v412, "invalid");
  sub_10017BAE4((std::string *)v411, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v197 = &__dst;
  }
  else {
    v197 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v198 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v198 = __dst.__r_.__value_.__l.__size_;
  }
  v199 = sub_100056628(v196, (uint64_t)v197, v198);
  v200 = sub_100056628(v199, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v200 + *(void *)(*v200 - 24)));
  v201 = std::locale::use_facet((const std::locale *)&v428, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v201->__vftable[2].~facet_0)(v201, 10);
  std::locale::~locale((std::locale *)&v428);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v202 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v203 = sub_100056628(v202, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v204 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v204 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v205 = v429;
  }
  else {
    uint64_t v205 = v428.__r_.__value_.__r.__words[2];
  }
  v206 = sub_100056628(v203, v204, v205);
  v207 = sub_100056628(v206, (uint64_t)" AOA first path SNR - vertical (dB)': ", 38);
  *(void *)((char *)v207 + *(void *)(*v207 - 24) + 16) = 6;
  *(_OWORD *)&v411[0].__locale_ = *(_OWORD *)(a1 + 208);
  sub_100004950(&v412, "invalid");
  sub_10017BAE4((std::string *)v411, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v208 = &__dst;
  }
  else {
    v208 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v209 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v209 = __dst.__r_.__value_.__l.__size_;
  }
  v210 = sub_100056628(v207, (uint64_t)v208, v209);
  v211 = sub_100056628(v210, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v211 + *(void *)(*v211 - 24)));
  v212 = std::locale::use_facet((const std::locale *)&v428, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v212->__vftable[2].~facet_0)(v212, 10);
  std::locale::~locale((std::locale *)&v428);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v213 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v214 = sub_100056628(v213, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v215 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v215 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v216 = v429;
  }
  else {
    uint64_t v216 = v428.__r_.__value_.__r.__words[2];
  }
  v217 = sub_100056628(v214, v215, v216);
  v218 = sub_100056628(v217, (uint64_t)" AOA first path SNR - horizontal (dB)': ", 40);
  *(void *)((char *)v218 + *(void *)(*v218 - 24) + 16) = 6;
  *(_OWORD *)&v411[0].__locale_ = *(_OWORD *)(a1 + 224);
  sub_100004950(&v412, "invalid");
  sub_10017BAE4((std::string *)v411, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v219 = &__dst;
  }
  else {
    v219 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v220 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v220 = __dst.__r_.__value_.__l.__size_;
  }
  v221 = sub_100056628(v218, (uint64_t)v219, v220);
  v222 = sub_100056628(v221, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v222 + *(void *)(*v222 - 24)));
  v223 = std::locale::use_facet((const std::locale *)&v428, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v223->__vftable[2].~facet_0)(v223, 10);
  std::locale::~locale((std::locale *)&v428);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v224 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v225 = sub_100056628(v224, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v226 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v226 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v227 = v429;
  }
  else {
    uint64_t v227 = v428.__r_.__value_.__r.__words[2];
  }
  v228 = sub_100056628(v225, v226, v227);
  v229 = sub_100056628(v228, (uint64_t)" carrier freq offset (ppb)': ", 29);
  *(void *)((char *)v229 + *(void *)(*v229 - 24) + 16) = 6;
  sub_1000304A4(*(double *)(a1 + 240));
  v230 = (void *)std::ostream::operator<<();
  v231 = sub_100056628(v230, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v231 + *(void *)(*v231 - 24)));
  v232 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v232->__vftable[2].~facet_0)(v232, 10);
  std::locale::~locale((std::locale *)&__dst);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v233 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v234 = sub_100056628(v233, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v235 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v235 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v236 = v429;
  }
  else {
    uint64_t v236 = v428.__r_.__value_.__r.__words[2];
  }
  v237 = sub_100056628(v234, v235, v236);
  v238 = sub_100056628(v237, (uint64_t)" AOA first path index - center (dB)': ", 38);
  *(void *)((char *)v238 + *(void *)(*v238 - 24) + 16) = 6;
  *(_OWORD *)&v411[0].__locale_ = *(_OWORD *)(a1 + 320);
  sub_100004950(&v412, "invalid");
  sub_10017BAE4((std::string *)v411, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v239 = &__dst;
  }
  else {
    v239 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v240 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v240 = __dst.__r_.__value_.__l.__size_;
  }
  v241 = sub_100056628(v238, (uint64_t)v239, v240);
  v242 = sub_100056628(v241, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v242 + *(void *)(*v242 - 24)));
  v243 = std::locale::use_facet((const std::locale *)&v428, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v243->__vftable[2].~facet_0)(v243, 10);
  std::locale::~locale((std::locale *)&v428);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v244 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v245 = sub_100056628(v244, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v246 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v246 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v247 = v429;
  }
  else {
    uint64_t v247 = v428.__r_.__value_.__r.__words[2];
  }
  v248 = sub_100056628(v245, v246, v247);
  v249 = sub_100056628(v248, (uint64_t)" AOA first path index - vertical (dB)': ", 40);
  *(void *)((char *)v249 + *(void *)(*v249 - 24) + 16) = 6;
  *(_OWORD *)&v411[0].__locale_ = *(_OWORD *)(a1 + 336);
  sub_100004950(&v412, "invalid");
  sub_10017BAE4((std::string *)v411, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v250 = &__dst;
  }
  else {
    v250 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v251 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v251 = __dst.__r_.__value_.__l.__size_;
  }
  v252 = sub_100056628(v249, (uint64_t)v250, v251);
  v253 = sub_100056628(v252, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v253 + *(void *)(*v253 - 24)));
  v254 = std::locale::use_facet((const std::locale *)&v428, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v254->__vftable[2].~facet_0)(v254, 10);
  std::locale::~locale((std::locale *)&v428);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v255 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v256 = sub_100056628(v255, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v257 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v257 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v258 = v429;
  }
  else {
    uint64_t v258 = v428.__r_.__value_.__r.__words[2];
  }
  v259 = sub_100056628(v256, v257, v258);
  v260 = sub_100056628(v259, (uint64_t)" AOA first path index - horizontal (dB)': ", 42);
  *(void *)((char *)v260 + *(void *)(*v260 - 24) + 16) = 6;
  *(_OWORD *)&v411[0].__locale_ = *(_OWORD *)(a1 + 352);
  sub_100004950(&v412, "invalid");
  sub_10017BAE4((std::string *)v411, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v261 = &__dst;
  }
  else {
    v261 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v262 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v262 = __dst.__r_.__value_.__l.__size_;
  }
  v263 = sub_100056628(v260, (uint64_t)v261, v262);
  v264 = sub_100056628(v263, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v264 + *(void *)(*v264 - 24)));
  v265 = std::locale::use_facet((const std::locale *)&v428, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v265->__vftable[2].~facet_0)(v265, 10);
  std::locale::~locale((std::locale *)&v428);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  if (*(unsigned __int16 *)(a1 + 382) >= 0x100u)
  {
    v428.__r_.__value_.__s.__data_[8] = 9;
    v266 = sub_100056628(v426, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
    v267 = sub_100056628(v266, (uint64_t)"'remote_tx_antenna_mask': 0x", 28);
    *(void *)((char *)v267 + *(void *)(*v267 - 24) + 24) = 2;
    if (*(unsigned __int16 *)(a1 + 382) <= 0xFFu) {
      sub_10000AE44();
    }
    v268 = (void *)std::ostream::operator<<();
    v269 = sub_100056628(v268, (uint64_t)",", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v269 + *(void *)(*v269 - 24)));
    v270 = std::locale::use_facet((const std::locale *)&v428.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v270->__vftable[2].~facet_0)(v270, 10);
    std::locale::~locale((std::locale *)&v428.__r_.__value_.__r.__words[1]);
    std::ostream::put();
    std::ostream::flush();
  }
  v271 = sub_100056628(v426, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v271 + *(void *)(*v271 - 24)));
  v272 = std::locale::use_facet((const std::locale *)&v428.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v272->__vftable[2].~facet_0)(v272, 10);
  std::locale::~locale((std::locale *)&v428.__r_.__value_.__r.__words[1]);
  std::ostream::put();
  std::ostream::flush();
  v273 = sub_100056628(v423, (uint64_t)"Range Result (Part 2 of 2):", 27);
  std::ios_base::getloc((const std::ios_base *)((char *)v273 + *(void *)(*v273 - 24)));
  v274 = std::locale::use_facet((const std::locale *)&v428.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v274->__vftable[2].~facet_0)(v274, 10);
  std::locale::~locale((std::locale *)&v428.__r_.__value_.__r.__words[1]);
  std::ostream::put();
  std::ostream::flush();
  v275 = sub_100056628(v423, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v275 + *(void *)(*v275 - 24)));
  v276 = std::locale::use_facet((const std::locale *)&v428.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v276->__vftable[2].~facet_0)(v276, 10);
  std::locale::~locale((std::locale *)&v428.__r_.__value_.__r.__words[1]);
  std::ostream::put();
  std::ostream::flush();
  if ((v418 & 0x80u) == 0) {
    v277 = &v416;
  }
  else {
    v277 = v416.__locale_;
  }
  if ((v418 & 0x80u) == 0) {
    uint64_t v278 = v418;
  }
  else {
    uint64_t v278 = v417;
  }
  sub_100056628(v423, (uint64_t)v277, v278);
  v428.__r_.__value_.__s.__data_[8] = 9;
  v279 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v280 = sub_100056628(v279, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v281 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v281 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v282 = v429;
  }
  else {
    uint64_t v282 = v428.__r_.__value_.__r.__words[2];
  }
  v283 = sub_100056628(v280, v281, v282);
  v284 = sub_100056628(v283, (uint64_t)" SOI RSSI 2 (dBm)': ", 20);
  *(void *)((char *)v284 + *(void *)(*v284 - 24) + 16) = 6;
  *(_OWORD *)&v411[0].__locale_ = *(_OWORD *)(a1 + 176);
  sub_100004950(&v412, "invalid");
  sub_10017BAE4((std::string *)v411, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v285 = &__dst;
  }
  else {
    v285 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v286 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v286 = __dst.__r_.__value_.__l.__size_;
  }
  v287 = sub_100056628(v284, (uint64_t)v285, v286);
  v288 = sub_100056628(v287, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v288 + *(void *)(*v288 - 24)));
  v289 = std::locale::use_facet((const std::locale *)&v428, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v289->__vftable[2].~facet_0)(v289, 10);
  std::locale::~locale((std::locale *)&v428);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v290 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v291 = sub_100056628(v290, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v292 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v292 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v293 = v429;
  }
  else {
    uint64_t v293 = v428.__r_.__value_.__r.__words[2];
  }
  v294 = sub_100056628(v291, v292, v293);
  v295 = sub_100056628(v294, (uint64_t)" OC SOI RSSI 2 (dBm)': ", 23);
  *(void *)((char *)v295 + *(void *)(*v295 - 24) + 16) = 6;
  *(_OWORD *)&v411[0].__locale_ = *(_OWORD *)(a1 + 488);
  sub_100004950(&v412, "invalid");
  sub_10017BAE4((std::string *)v411, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v296 = &__dst;
  }
  else {
    v296 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v297 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v297 = __dst.__r_.__value_.__l.__size_;
  }
  v298 = sub_100056628(v295, (uint64_t)v296, v297);
  v299 = sub_100056628(v298, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v299 + *(void *)(*v299 - 24)));
  v300 = std::locale::use_facet((const std::locale *)&v428, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v300->__vftable[2].~facet_0)(v300, 10);
  std::locale::~locale((std::locale *)&v428);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v301 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v302 = sub_100056628(v301, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v303 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v303 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v304 = v429;
  }
  else {
    uint64_t v304 = v428.__r_.__value_.__r.__words[2];
  }
  v305 = sub_100056628(v302, v303, v304);
  v306 = sub_100056628(v305, (uint64_t)" mms val status':  ", 19);
  LOWORD(v428.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 466);
  sub_100004950(&v412, "N/A");
  sub_10017BB20(&v428, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v307 = &__dst;
  }
  else {
    v307 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v308 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v308 = __dst.__r_.__value_.__l.__size_;
  }
  v309 = sub_100056628(v306, (uint64_t)v307, v308);
  v310 = sub_100056628(v309, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v310 + *(void *)(*v310 - 24)));
  v311 = std::locale::use_facet(v411, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v311->__vftable[2].~facet_0)(v311, 10);
  std::locale::~locale(v411);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v312 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v313 = sub_100056628(v312, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v314 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v314 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v315 = v429;
  }
  else {
    uint64_t v315 = v428.__r_.__value_.__r.__words[2];
  }
  v316 = sub_100056628(v313, v314, v315);
  v317 = sub_100056628(v316, (uint64_t)" nb demod chain: ':  ", 21);
  LOWORD(v428.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 504);
  sub_100004950(&v412, "N/A");
  sub_10017BB20(&v428, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v318 = &__dst;
  }
  else {
    v318 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v319 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v319 = __dst.__r_.__value_.__l.__size_;
  }
  v320 = sub_100056628(v317, (uint64_t)v318, v319);
  v321 = sub_100056628(v320, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v321 + *(void *)(*v321 - 24)));
  v322 = std::locale::use_facet(v411, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v322->__vftable[2].~facet_0)(v322, 10);
  std::locale::~locale(v411);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v323 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v324 = sub_100056628(v323, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v325 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v325 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v326 = v429;
  }
  else {
    uint64_t v326 = v428.__r_.__value_.__r.__words[2];
  }
  v327 = sub_100056628(v324, v325, v326);
  v328 = sub_100056628(v327, (uint64_t)" nb rx0 elna hg: ':  ", 21);
  LOWORD(v428.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 506);
  sub_100004950(&v412, "N/A");
  sub_10017BB20(&v428, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v329 = &__dst;
  }
  else {
    v329 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v330 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v330 = __dst.__r_.__value_.__l.__size_;
  }
  v331 = sub_100056628(v328, (uint64_t)v329, v330);
  v332 = sub_100056628(v331, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v332 + *(void *)(*v332 - 24)));
  v333 = std::locale::use_facet(v411, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v333->__vftable[2].~facet_0)(v333, 10);
  std::locale::~locale(v411);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v334 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v335 = sub_100056628(v334, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v336 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v336 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v337 = v429;
  }
  else {
    uint64_t v337 = v428.__r_.__value_.__r.__words[2];
  }
  v338 = sub_100056628(v335, v336, v337);
  v339 = sub_100056628(v338, (uint64_t)" nb rx1 elna hg: ':  ", 21);
  LOWORD(v428.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 508);
  sub_100004950(&v412, "N/A");
  sub_10017BB20(&v428, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v340 = &__dst;
  }
  else {
    v340 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v341 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v341 = __dst.__r_.__value_.__l.__size_;
  }
  v342 = sub_100056628(v339, (uint64_t)v340, v341);
  v343 = sub_100056628(v342, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v343 + *(void *)(*v343 - 24)));
  v344 = std::locale::use_facet(v411, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v344->__vftable[2].~facet_0)(v344, 10);
  std::locale::~locale(v411);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v345 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v346 = sub_100056628(v345, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v347 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v347 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v348 = v429;
  }
  else {
    uint64_t v348 = v428.__r_.__value_.__r.__words[2];
  }
  v349 = sub_100056628(v346, v347, v348);
  v350 = sub_100056628(v349, (uint64_t)" nb tx antenna: ':  ", 20);
  LOWORD(v428.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 510);
  sub_100004950(&v412, "N/A");
  sub_10017BB20(&v428, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v351 = &__dst;
  }
  else {
    v351 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v352 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v352 = __dst.__r_.__value_.__l.__size_;
  }
  v353 = sub_100056628(v350, (uint64_t)v351, v352);
  v354 = sub_100056628(v353, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v354 + *(void *)(*v354 - 24)));
  v355 = std::locale::use_facet(v411, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v355->__vftable[2].~facet_0)(v355, 10);
  std::locale::~locale(v411);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v356 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v357 = sub_100056628(v356, (uint64_t)"'", 1);
  sub_10017BA84(&v428.__r_.__value_.__l.__size_);
  if ((v429 & 0x80u) == 0) {
    uint64_t v358 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v358 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v359 = v429;
  }
  else {
    uint64_t v359 = v428.__r_.__value_.__r.__words[2];
  }
  v360 = sub_100056628(v357, v358, v359);
  v361 = sub_100056628(v360, (uint64_t)" cycle skipping':  ", 19);
  LOWORD(v428.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 512);
  sub_100004950(&v412, "N/A");
  sub_10017BB20(&v428, (uint64_t)&v412, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v362 = &__dst;
  }
  else {
    v362 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v363 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v363 = __dst.__r_.__value_.__l.__size_;
  }
  v364 = sub_100056628(v361, (uint64_t)v362, v363);
  v365 = sub_100056628(v364, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v365 + *(void *)(*v365 - 24)));
  v366 = std::locale::use_facet(v411, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v366->__vftable[2].~facet_0)(v366, 10);
  std::locale::~locale(v411);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v412.__r_.__value_.__l.__data_);
  }
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v367 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v368 = sub_100056628(v367, (uint64_t)"'toa peak snr (dB)':", 20);
  LOWORD(v411[0].__locale_) = *(_WORD *)(a1 + 452);
  sub_100004950(&__dst, "N/A");
  sub_10017BB20((std::string *)v411, (uint64_t)&__dst, (std::string *)&v428.__r_.__value_.__r.__words[1]);
  if ((v429 & 0x80u) == 0) {
    uint64_t v369 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v369 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v370 = v429;
  }
  else {
    uint64_t v370 = v428.__r_.__value_.__r.__words[2];
  }
  v371 = sub_100056628(v368, v369, v370);
  v372 = sub_100056628(v371, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v372 + *(void *)(*v372 - 24)));
  v373 = std::locale::use_facet((const std::locale *)&v412, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v373->__vftable[2].~facet_0)(v373, 10);
  std::locale::~locale((std::locale *)&v412);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v374 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v375 = sub_100056628(v374, (uint64_t)"'toa peak index high res':", 26);
  LODWORD(v411[0].__locale_) = *(_DWORD *)(a1 + 454);
  sub_100004950(&__dst, "N/A");
  sub_10017BB5C((std::string *)v411, (uint64_t)&__dst, (std::string *)&v428.__r_.__value_.__r.__words[1]);
  if ((v429 & 0x80u) == 0) {
    uint64_t v376 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v376 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v377 = v429;
  }
  else {
    uint64_t v377 = v428.__r_.__value_.__r.__words[2];
  }
  v378 = sub_100056628(v375, v376, v377);
  v379 = sub_100056628(v378, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v379 + *(void *)(*v379 - 24)));
  v380 = std::locale::use_facet((const std::locale *)&v412, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v380->__vftable[2].~facet_0)(v380, 10);
  std::locale::~locale((std::locale *)&v412);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v381 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v382 = sub_100056628(v381, (uint64_t)"'toa peak signal level high res (dB)':", 38);
  LODWORD(v411[0].__locale_) = *(_DWORD *)(a1 + 458);
  sub_100004950(&__dst, "N/A");
  sub_10017BB5C((std::string *)v411, (uint64_t)&__dst, (std::string *)&v428.__r_.__value_.__r.__words[1]);
  if ((v429 & 0x80u) == 0) {
    uint64_t v383 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v383 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v384 = v429;
  }
  else {
    uint64_t v384 = v428.__r_.__value_.__r.__words[2];
  }
  v385 = sub_100056628(v382, v383, v384);
  v386 = sub_100056628(v385, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v386 + *(void *)(*v386 - 24)));
  v387 = std::locale::use_facet((const std::locale *)&v412, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v387->__vftable[2].~facet_0)(v387, 10);
  std::locale::~locale((std::locale *)&v412);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v388 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v389 = sub_100056628(v388, (uint64_t)"'nb rx status':", 15);
  LOWORD(v411[0].__locale_) = *(_WORD *)(a1 + 448);
  sub_100004950(&__dst, "N/A");
  sub_10017BB20((std::string *)v411, (uint64_t)&__dst, (std::string *)&v428.__r_.__value_.__r.__words[1]);
  if ((v429 & 0x80u) == 0) {
    uint64_t v390 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v390 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v391 = v429;
  }
  else {
    uint64_t v391 = v428.__r_.__value_.__r.__words[2];
  }
  v392 = sub_100056628(v389, v390, v391);
  v393 = sub_100056628(v392, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v393 + *(void *)(*v393 - 24)));
  v394 = std::locale::use_facet((const std::locale *)&v412, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v394->__vftable[2].~facet_0)(v394, 10);
  std::locale::~locale((std::locale *)&v412);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v428.__r_.__value_.__s.__data_[8] = 9;
  v395 = sub_100056628(v423, (uint64_t)&v428.__r_.__value_.__l.__size_, 1);
  v396 = sub_100056628(v395, (uint64_t)"'mms rx status':", 16);
  LOWORD(v411[0].__locale_) = *(_WORD *)(a1 + 450);
  sub_100004950(&__dst, "N/A");
  sub_10017BB20((std::string *)v411, (uint64_t)&__dst, (std::string *)&v428.__r_.__value_.__r.__words[1]);
  if ((v429 & 0x80u) == 0) {
    uint64_t v397 = (uint64_t)&v428.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v397 = v428.__r_.__value_.__l.__size_;
  }
  if ((v429 & 0x80u) == 0) {
    uint64_t v398 = v429;
  }
  else {
    uint64_t v398 = v428.__r_.__value_.__r.__words[2];
  }
  v399 = sub_100056628(v396, v397, v398);
  v400 = sub_100056628(v399, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v400 + *(void *)(*v400 - 24)));
  v401 = std::locale::use_facet((const std::locale *)&v412, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v401->__vftable[2].~facet_0)(v401, 10);
  std::locale::~locale((std::locale *)&v412);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v429 < 0) {
    operator delete((void *)v428.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v402 = sub_100056628(v423, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v402 + *(void *)(*v402 - 24)));
  v403 = std::locale::use_facet((const std::locale *)&v428.__r_.__value_.__r.__words[1], &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v403->__vftable[2].~facet_0)(v403, 10);
  std::locale::~locale((std::locale *)&v428.__r_.__value_.__r.__words[1]);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  std::stringbuf::str();
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  __dst.__r_.__value_.__s.__data_[8] = 0;
  v404 = (char *)operator new(0x30uLL);
  *a2 = v404;
  a2[1] = v404;
  a2[2] = v404 + 48;
  uint64_t v405 = 0;
  a2[1] = sub_10017D674((uint64_t)(a2 + 2), (long long *)&v428.__r_.__value_.__r.__words[1], &v431, v404);
  do
  {
    if ((char)v430[v405 + 23] < 0) {
      operator delete(*(void **)&v430[v405]);
    }
    v405 -= 24;
  }
  while (v405 != -48);
  if ((char)v418 < 0) {
    operator delete(v416.__locale_);
  }
  *(void *)((char *)v419
  uint64_t v409 = v407;
  v420[0] = v407;
  if (v421 < 0) {
    operator delete((void *)v420[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  v422[0] = v406;
  *(void *)((char *)v422 + *(void *)(v406 - 24)) = v408;
  v423[0] = v409;
  if (v424 < 0) {
    operator delete((void *)v423[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  v425[0] = v406;
  *(void *)((char *)v425 + *(void *)(v406 - 24)) = v408;
  v426[0] = v409;
  if (v427 < 0) {
    operator delete((void *)v426[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10017B590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v65 - 121) < 0) {
    operator delete(*(void **)(v65 - 144));
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_100055100((uint64_t)&a30);
  sub_100055100((uint64_t)&a65);
  sub_100055100((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

void *sub_10017BA84@<X0>(void *a1@<X8>)
{
  int v2 = *((_DWORD *)sub_100007D00() + 186);
  if (v2)
  {
    if (v2 != 1) {
      sub_100412C40();
    }
    v3 = "r2";
  }
  else
  {
    v3 = "r1";
  }

  return sub_100004950(a1, v3);
}

std::string *sub_10017BAE4@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (result->__r_.__value_.__s.__data_[8]) {
    return std::to_string(a3, *(double *)&result->__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) < 0) {
    return (std::string *)sub_100002DE4(a3, *(void **)a2, *(void *)(a2 + 8));
  }
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  return result;
}

std::string *sub_10017BB20@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (result->__r_.__value_.__s.__data_[1]) {
    return std::to_string(a3, result->__r_.__value_.__s.__data_[0]);
  }
  if (*(char *)(a2 + 23) < 0) {
    return (std::string *)sub_100002DE4(a3, *(void **)a2, *(void *)(a2 + 8));
  }
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  return result;
}

std::string *sub_10017BB5C@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (result->__r_.__value_.__s.__data_[2]) {
    return std::to_string(a3, SLOWORD(result->__r_.__value_.__l.__data_));
  }
  if (*(char *)(a2 + 23) < 0) {
    return (std::string *)sub_100002DE4(a3, *(void **)a2, *(void *)(a2 + 8));
  }
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  return result;
}

void sub_10017BB98(uint64_t a1)
{
  sub_1001777E4(a1, &v5);
  uint64_t v1 = v5;
  int v2 = v6;
  if (v5 != v6)
  {
    v3 = qword_1008ABDE0;
    do
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = v1;
        if (v1[23] < 0) {
          int v4 = *(char **)v1;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sp,\n[Solution Provider] %s", buf, 0xCu);
        v3 = qword_1008ABDE0;
      }
      v1 += 24;
    }
    while (v1 != v2);
  }
  *(void *)buf = &v5;
  sub_10017D7B4((void ***)buf);
}

void sub_10017BCA0(uint64_t a1)
{
  int v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider] _printDebug responder_superframe_stats:", buf, 2u);
    int v2 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(unsigned __int16 *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider] ticket id: %d", buf, 8u);
    int v2 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100412DA8((uint64_t *)a1, v2);
  }
  int v3 = *(unsigned __int8 *)(a1 + 104);
  int v4 = qword_1008ABDE0;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (v5) {
      sub_100412D2C((uint64_t *)(a1 + 96), v4);
    }
  }
  else if (v5)
  {
    sub_100412CE8(v4);
  }
  int v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 timestamp: %.9f sec", buf, 0xCu);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *(unsigned __int16 *)(a1 + 18);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 sess id: %d", buf, 8u);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 mac_addr: 0x%llx", buf, 0xCu);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    sub_1003A8354(*(unsigned __int16 *)(a1 + 16), buf);
    if (v32 >= 0) {
      uint32_t v17 = buf;
    }
    else {
      uint32_t v17 = *(unsigned char **)buf;
    }
    int v18 = *(unsigned __int16 *)(a1 + 16);
    *(_DWORD *)int v33 = 136315394;
    int v34 = v17;
    __int16 v35 = 1024;
    int v36 = v18;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 sess status: %s (%d)", v33, 0x12u);
    if (v32 < 0) {
      operator delete(*(void **)buf);
    }
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    sub_1003A8080(*(unsigned __int8 *)(a1 + 20), buf);
    if (v32 >= 0) {
      uint64_t v19 = buf;
    }
    else {
      uint64_t v19 = *(unsigned char **)buf;
    }
    int v20 = *(unsigned __int8 *)(a1 + 20);
    *(_DWORD *)int v33 = 136315394;
    int v34 = v19;
    __int16 v35 = 1024;
    int v36 = v20;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 sess type: %s (%d)", v33, 0x12u);
    if (v32 < 0) {
      operator delete(*(void **)buf);
    }
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 cycle_idx: %d", buf, 8u);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *(unsigned __int16 *)(a1 + 42);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v22;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 interval_ms: %d", buf, 8u);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v23 = *(unsigned __int16 *)(a1 + 44);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v23;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 superframe_size_250us: %d", buf, 8u);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v24 = *(unsigned __int8 *)(a1 + 46);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v24;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 tx_mini_slot_size_250us: %d", buf, 8u);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v25 = *(unsigned __int8 *)(a1 + 47);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 rx_mini_slot_size_250us: %d", buf, 8u);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v26 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 tx_preamble: %d", buf, 8u);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v27 = *(unsigned __int8 *)(a1 + 49);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v27;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 rx_preamble: %d", buf, 8u);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v28 = *(unsigned __int8 *)(a1 + 50);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v28;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 num_access_slots: %d", buf, 8u);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v29 = *(unsigned __int8 *)(a1 + 51);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v29;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 poll_rx_status: 0x%x", buf, 8u);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v30 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v30;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 poll_rssi_dbm: %.3f", buf, 0xCu);
    int v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_100412C6C(a1, v6);
  }
  int v7 = *(unsigned __int8 **)(a1 + 72);
  std::locale v8 = *(unsigned __int8 **)(a1 + 80);
  if (v7 != v8)
  {
    int v9 = 0;
    uint64_t v10 = qword_1008ABDE0;
    do
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v9;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   rx packet #%d info:", buf, 8u);
        uint64_t v10 = qword_1008ABDE0;
        ++v9;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = *((void *)v7 + 1);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v9;
        *(_WORD *)&buf[8] = 2048;
        *(void *)&buf[10] = v11;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]       r1_rx_packet[%d]_rssi_dbm: %.3f", buf, 0x12u);
        uint64_t v10 = qword_1008ABDE0;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *v7;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v9;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]       r1_rx_packet[%d]_rx_status: 0x%x", buf, 0xEu);
        uint64_t v10 = qword_1008ABDE0;
      }
      v7 += 16;
    }
    while (v7 != v8);
  }
}

void *sub_10017C498@<X0>(int a1@<W0>, void *a2@<X8>)
{
  int v2 = "Unknown";
  if (a1 == 1) {
    int v2 = "Remote";
  }
  if (a1) {
    int v3 = (char *)v2;
  }
  else {
    int v3 = "Local";
  }
  return sub_100004950(a2, v3);
}

void sub_10017C4C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9 = a2;
  __int16 v116 = sub_1003A82F0(*(unsigned __int16 *)(a1 + 20), a2, a3, a4, a5, a6, a7, a8);
  char v115 = sub_1003A7FD8(*(unsigned __int8 *)(a1 + 24), v11, v12, v13, v14, v15, v16, v17);
  uint64_t v126 = *(void *)(a1 + 75);
  unsigned int v111 = *(_DWORD *)(a1 + 64);
  double v114 = sub_10039CC60(v111);
  unsigned int v18 = *(unsigned __int16 *)(a1 + 56);
  unsigned int v19 = v18 & 0xF;
  if ((v19 & (v18 >> 4)) == 0xF)
  {
    double v20 = 0.0;
    uint64_t v108 = 0;
    double v109 = 0.0;
    double v21 = 0.0;
    double v22 = 0.0;
    long long v110 = 0uLL;
    double v112 = 0.0;
    double v113 = 0.0;
  }
  else
  {
    double v112 = (double)*(char *)(a1 + 69);
    double v113 = (double)*(char *)(a1 + 68);
    double v23 = (double)*(char *)(a1 + 70);
    *(double *)&long long v110 = v23;
    LOWORD(v23) = *(_WORD *)(a1 + 84);
    *(double *)&unint64_t v24 = (double)*(unint64_t *)&v23;
    *(double *)&uint64_t v25 = *(double *)&v24 * 0.01;
    LOWORD(v24) = *(_WORD *)(a1 + 86);
    *(double *)&unint64_t v26 = (double)v24;
    double v22 = *(double *)&v26 * 0.01;
    LOWORD(v26) = *(_WORD *)(a1 + 88);
    double v21 = (double)v26 * 0.01;
    uint64_t v108 = v25;
    double v109 = (double)*(__int16 *)(a1 + 58);
    double v20 = (double)*(__int16 *)(a1 + 60);
    *((void *)&v110 + 1) = 1;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unsigned int v29 = v18 >> 4;
  double v30 = (double)*(__int16 *)(a1 + 46);
  double v31 = (double)*(__int16 *)(a1 + 48);
  __int16 v107 = *(_WORD *)(a1 + 62);
  char v106 = *(unsigned char *)(a1 + 83);
  int v105 = *(unsigned __int8 *)(a1 + 97);
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  unint64_t v120 = 0;
  char v32 = (unsigned __int8 *)(a1 + 98);
  do
  {
    unsigned int v33 = *v32++;
    v28 |= (unint64_t)v33 << v27;
    v27 += 8;
  }
  while (v27 != 40);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  double v36 = v31 * 0.25;
  v37 = (unsigned __int8 *)(a1 + 103);
  do
  {
    unsigned int v38 = *v37++;
    v35 |= (unint64_t)v38 << v34;
    v34 += 8;
  }
  while (v34 != 40);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  double v41 = v30 * 0.25;
  v42 = (unsigned __int8 *)(a1 + 108);
  do
  {
    unsigned int v43 = *v42++;
    v40 |= (unint64_t)v43 << v39;
    v39 += 8;
  }
  while (v39 != 40);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  v46 = (unsigned __int8 *)(a1 + 113);
  do
  {
    unsigned int v47 = *v46++;
    v45 |= (unint64_t)v47 << v44;
    v44 += 8;
  }
  while (v44 != 40);
  if (v19 == 15)
  {
    uint64_t v48 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v49 = *(__int16 *)(a1 + 42);
      int v50 = *(__int16 *)(a1 + 44);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)int v122 = v49;
      *(_WORD *)&v122[4] = 1024;
      *(_DWORD *)&v122[6] = v50;
      LOWORD(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 2) = 15;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#sp,Ignoring AOA hypothesis primary with az %d el %d intunc %d", buf, 0x14u);
    }
  }
  else
  {
    int v51 = *(__int16 *)(a1 + 42);
    int v52 = *(__int16 *)(a1 + 44);
    v53 = (double *)sub_100028A48((uint64_t)&v120, 1uLL);
    double v54 = (double)v19 * 0.0666666667;
    double v55 = (double)v51;
    v57 = &v53[7 * v56];
    double *v53 = (double)v51;
    v53[1] = (double)v52;
    v53[2] = v54;
    *((unsigned char *)v53 + 24) = 0;
    *((unsigned char *)v53 + 32) = 0;
    *((unsigned char *)v53 + 40) = 0;
    *((unsigned char *)v53 + 48) = 0;
    v58 = v53 + 7;
    v60 = v118;
    v59 = v119;
    if (v119 != v118)
    {
      do
      {
        long long v61 = *(_OWORD *)(v59 - 7);
        long long v62 = *(_OWORD *)(v59 - 5);
        long long v63 = *(_OWORD *)(v59 - 3);
        *(v53 - 1) = *(v59 - 1);
        *(_OWORD *)(v53 - 3) = v63;
        *(_OWORD *)(v53 - 5) = v62;
        *(_OWORD *)(v53 - 7) = v61;
        v53 -= 7;
        v59 -= 7;
      }
      while (v59 != v60);
      v59 = v60;
    }
    uint64_t v118 = v53;
    uint64_t v119 = v58;
    unint64_t v120 = (unint64_t)v57;
    if (v59) {
      operator delete(v59);
    }
    uint64_t v119 = v58;
    uint64_t v64 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)int v122 = v55;
      *(_WORD *)&v122[8] = 2048;
      double v123 = (double)v52;
      __int16 v124 = 2048;
      double v125 = v54;
      _os_log_debug_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "#sp,AOA hypothesis primary: az %f el %f unc %f", buf, 0x20u);
    }
  }
  if (v29 == 15)
  {
    uint64_t v65 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v72 = *(__int16 *)(a1 + 71);
      int v73 = *(__int16 *)(a1 + 73);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)int v122 = v72;
      *(_WORD *)&v122[4] = 1024;
      *(_DWORD *)&v122[6] = v73;
      LOWORD(v123) = 1024;
      *(_DWORD *)((char *)&v123 + 2) = 15;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#sp,Ignoring AOA hypothesis alt1 with az %d el %d intunc %d", buf, 0x14u);
    }
  }
  else
  {
    double v74 = (double)v29 * 0.0666666667;
    double v75 = (double)*(__int16 *)(a1 + 71);
    double v76 = (double)*(__int16 *)(a1 + 73);
    v77 = v119;
    if ((unint64_t)v119 >= v120)
    {
      unint64_t v79 = 0x6DB6DB6DB6DB6DB7 * (v119 - v118) + 1;
      if (v79 > 0x492492492492492) {
        sub_1000267C4();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v120 - (void)v118) >> 3) > v79) {
        unint64_t v79 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v120 - (void)v118) >> 3);
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v120 - (void)v118) >> 3)) >= 0x249249249249249) {
        unint64_t v80 = 0x492492492492492;
      }
      else {
        unint64_t v80 = v79;
      }
      if (v80) {
        v81 = (char *)sub_100028A48((uint64_t)&v120, v80);
      }
      else {
        v81 = 0;
      }
      v82 = (double *)&v81[8 * (v119 - v118)];
      v83 = &v81[56 * v80];
      double *v82 = v75;
      v82[1] = v76;
      v82[2] = v74;
      *((unsigned char *)v82 + 24) = 0;
      *((unsigned char *)v82 + 32) = 0;
      *((unsigned char *)v82 + 40) = 0;
      *((unsigned char *)v82 + 48) = 0;
      v78 = v82 + 7;
      v85 = v118;
      v84 = v119;
      if (v119 != v118)
      {
        do
        {
          long long v86 = *(_OWORD *)(v84 - 7);
          long long v87 = *(_OWORD *)(v84 - 5);
          long long v88 = *(_OWORD *)(v84 - 3);
          *(v82 - 1) = *(v84 - 1);
          *(_OWORD *)(v82 - 3) = v88;
          *(_OWORD *)(v82 - 5) = v87;
          *(_OWORD *)(v82 - 7) = v86;
          v82 -= 7;
          v84 -= 7;
        }
        while (v84 != v85);
        v84 = v85;
      }
      uint64_t v118 = v82;
      uint64_t v119 = v78;
      unint64_t v120 = (unint64_t)v83;
      if (v84) {
        operator delete(v84);
      }
    }
    else
    {
      *uint64_t v119 = v75;
      v77[1] = v76;
      v77[2] = v74;
      *((unsigned char *)v77 + 24) = 0;
      *((unsigned char *)v77 + 32) = 0;
      *((unsigned char *)v77 + 40) = 0;
      v78 = v77 + 7;
      *((unsigned char *)v77 + 48) = 0;
    }
    uint64_t v119 = v78;
    v89 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)int v122 = v75;
      *(_WORD *)&v122[8] = 2048;
      double v123 = v76;
      __int16 v124 = 2048;
      double v125 = (double)v29 * 0.0666666667;
      _os_log_debug_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "#sp,AOA hypothesis alt1: az %f el %f unc %f", buf, 0x20u);
    }
  }
  char v90 = sub_1003A8CFC(*(unsigned __int8 *)(a1 + 90), 1, v66, v67, v68, v69, v70, v71);
  double v92 = 0.0;
  if (v9)
  {
    uint64_t v93 = 65537;
    if (v9 == 1)
    {
      LOWORD(v91) = *(_WORD *)(a1 + 54);
      double v92 = (double)v91;
    }
  }
  else
  {
    uint64_t v93 = *(unsigned __int16 *)(a1 + 54) | 0x10000;
  }
  __int16 v94 = *(_WORD *)(a1 + 91);
  __int16 v95 = *(_WORD *)(a1 + 93);
  __int16 v96 = *(_WORD *)(a1 + 95);
  __int16 v104 = *(_WORD *)(a1 + 22);
  double v97 = sub_10039CC60(*(void *)(a1 + 25));
  *((void *)&v101 + 1) = *((void *)&v110 + 1);
  *(double *)&long long v101 = v20;
  *((void *)&v100 + 1) = *((void *)&v110 + 1);
  *(double *)&long long v100 = v109;
  *((void *)&v99 + 1) = *((void *)&v110 + 1);
  *(double *)&long long v99 = v112;
  *((void *)&v98 + 1) = *((void *)&v110 + 1);
  *(double *)&long long v98 = v113;
  sub_10039E8D8(a9, v116, v104, v115, *(_WORD *)(a1 + 33), *(unsigned char *)(a1 + 35), &v126, 0, v97, (double)*(int *)(a1 + 38), v41, v36, (double)*(int *)(a1 + 50), v92, v114, (uint64_t)&v118, v98, v99, v110,
    v100,
    v101,
    v107,
    v111,
    v106,
    v108,
    *((uint64_t *)&v110 + 1),
    *(uint64_t *)&v22,
    *((uint64_t *)&v110 + 1),
    *(uint64_t *)&v21,
    *((uint64_t *)&v110 + 1),
    v90,
    v102,
    0,
    0,
    0,
    0,
    v94,
    v95,
    v96,
    v103,
    v105 | ((v105 != 0) << 8),
    v28,
    v28 != 0,
    v35,
    v35 != 0,
    v40,
    v40 != 0,
    v45,
    v45 != 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    v93,
    SHIDWORD(v93),
    0);
  if (v118)
  {
    uint64_t v119 = v118;
    operator delete(v118);
  }
}

void sub_10017CC7C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(void *)(v1 - 224) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10017CCA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9 = a2;
  __int16 v12 = sub_1003A82F0(*(unsigned __int16 *)(a1 + 20), a2, a3, a4, a5, a6, a7, a8);
  char v20 = sub_1003A7FD8(*(unsigned __int8 *)(a1 + 24), v13, v14, v15, v16, v17, v18, v19);
  uint64_t v129 = *(void *)(a1 + 75);
  unsigned int v21 = *(_DWORD *)(a1 + 64);
  double v120 = sub_10039CC60(v21);
  unsigned int v22 = *(unsigned __int16 *)(a1 + 56);
  unsigned int v23 = v22 & 0xF;
  if ((v23 & (v22 >> 4)) == 0xF)
  {
    double v24 = 0.0;
    double v25 = 0.0;
    double v26 = 0.0;
    double v27 = 0.0;
    double v28 = 0.0;
    long long v116 = 0uLL;
    double v117 = 0.0;
    double v119 = 0.0;
  }
  else
  {
    double v119 = (double)*(char *)(a1 + 68);
    double v117 = (double)*(char *)(a1 + 69);
    double v29 = (double)*(char *)(a1 + 70);
    *(double *)&long long v116 = v29;
    LOWORD(v29) = *(_WORD *)(a1 + 84);
    *(double *)&unint64_t v30 = (double)*(unint64_t *)&v29;
    double v28 = *(double *)&v30 * 0.01;
    LOWORD(v30) = *(_WORD *)(a1 + 86);
    *(double *)&unint64_t v31 = (double)v30;
    double v27 = *(double *)&v31 * 0.01;
    LOWORD(v31) = *(_WORD *)(a1 + 88);
    double v26 = (double)v31 * 0.01;
    double v25 = (double)*(__int16 *)(a1 + 58);
    double v24 = (double)*(__int16 *)(a1 + 60);
    *((void *)&v116 + 1) = 1;
  }
  int v110 = *(__int16 *)(a1 + 46);
  int v112 = *(__int16 *)(a1 + 48);
  int v111 = *(__int16 *)(a1 + 99);
  __int16 v115 = *(_WORD *)(a1 + 62);
  char v114 = *(unsigned char *)(a1 + 83);
  int v113 = *(unsigned __int8 *)(a1 + 98);
  v121 = 0;
  int v122 = 0;
  unint64_t v123 = 0;
  int v118 = v21;
  if (v23 == 15)
  {
    char v32 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v33 = *(__int16 *)(a1 + 42);
      int v34 = *(__int16 *)(a1 + 44);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)double v125 = v33;
      *(_WORD *)&v125[4] = 1024;
      *(_DWORD *)&v125[6] = v34;
      LOWORD(v126) = 1024;
      *(_DWORD *)((char *)&v126 + 2) = 15;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#sp,Ignoring AOA hypothesis primary with az %d el %d intunc %d", buf, 0x14u);
    }
  }
  else
  {
    int v35 = *(__int16 *)(a1 + 42);
    int v36 = *(__int16 *)(a1 + 44);
    v37 = (double *)sub_100028A48((uint64_t)&v123, 1uLL);
    double v38 = (double)v23 * 0.0666666667;
    uint64_t v40 = &v37[7 * v39];
    double *v37 = (double)v35;
    v37[1] = (double)v36;
    v37[2] = v38;
    *((unsigned char *)v37 + 24) = 0;
    *((unsigned char *)v37 + 32) = 0;
    *((unsigned char *)v37 + 40) = 0;
    *((unsigned char *)v37 + 48) = 0;
    double v41 = v37 + 7;
    unsigned int v43 = v121;
    v42 = v122;
    if (v122 != v121)
    {
      do
      {
        long long v44 = *(_OWORD *)(v42 - 7);
        long long v45 = *(_OWORD *)(v42 - 5);
        long long v46 = *(_OWORD *)(v42 - 3);
        *(v37 - 1) = *(v42 - 1);
        *(_OWORD *)(v37 - 3) = v46;
        *(_OWORD *)(v37 - 5) = v45;
        *(_OWORD *)(v37 - 7) = v44;
        v37 -= 7;
        v42 -= 7;
      }
      while (v42 != v43);
      v42 = v43;
    }
    v121 = v37;
    int v122 = v41;
    unint64_t v123 = (unint64_t)v40;
    if (v42) {
      operator delete(v42);
    }
    int v122 = v41;
    unsigned int v47 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)double v125 = (double)v35;
      *(_WORD *)&v125[8] = 2048;
      double v126 = (double)v36;
      __int16 v127 = 2048;
      double v128 = v38;
      _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "#sp,AOA hypothesis primary: az %f el %f unc %f", buf, 0x20u);
    }
  }
  unsigned int v48 = v22 >> 4;
  if (v48 == 15)
  {
    int v49 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v50 = *(__int16 *)(a1 + 71);
      int v51 = *(__int16 *)(a1 + 73);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)double v125 = v50;
      *(_WORD *)&v125[4] = 1024;
      *(_DWORD *)&v125[6] = v51;
      LOWORD(v126) = 1024;
      *(_DWORD *)((char *)&v126 + 2) = 15;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#sp,Ignoring AOA hypothesis alt1 with az %d el %d intunc %d", buf, 0x14u);
    }
  }
  else
  {
    double v52 = (double)v48 * 0.0666666667;
    double v53 = (double)*(__int16 *)(a1 + 71);
    double v54 = (double)*(__int16 *)(a1 + 73);
    double v55 = v122;
    if ((unint64_t)v122 >= v123)
    {
      unint64_t v57 = 0x6DB6DB6DB6DB6DB7 * (v122 - v121) + 1;
      if (v57 > 0x492492492492492) {
        sub_1000267C4();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v123 - (void)v121) >> 3) > v57) {
        unint64_t v57 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v123 - (void)v121) >> 3);
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v123 - (void)v121) >> 3)) >= 0x249249249249249) {
        unint64_t v58 = 0x492492492492492;
      }
      else {
        unint64_t v58 = v57;
      }
      if (v58) {
        v59 = (char *)sub_100028A48((uint64_t)&v123, v58);
      }
      else {
        v59 = 0;
      }
      v60 = (double *)&v59[8 * (v122 - v121)];
      long long v61 = &v59[56 * v58];
      double *v60 = v53;
      v60[1] = v54;
      v60[2] = v52;
      *((unsigned char *)v60 + 24) = 0;
      *((unsigned char *)v60 + 32) = 0;
      *((unsigned char *)v60 + 40) = 0;
      *((unsigned char *)v60 + 48) = 0;
      uint64_t v56 = v60 + 7;
      long long v63 = v121;
      long long v62 = v122;
      if (v122 != v121)
      {
        do
        {
          long long v64 = *(_OWORD *)(v62 - 7);
          long long v65 = *(_OWORD *)(v62 - 5);
          long long v66 = *(_OWORD *)(v62 - 3);
          *(v60 - 1) = *(v62 - 1);
          *(_OWORD *)(v60 - 3) = v66;
          *(_OWORD *)(v60 - 5) = v65;
          *(_OWORD *)(v60 - 7) = v64;
          v60 -= 7;
          v62 -= 7;
        }
        while (v62 != v63);
        long long v62 = v63;
      }
      v121 = v60;
      int v122 = v56;
      unint64_t v123 = (unint64_t)v61;
      if (v62) {
        operator delete(v62);
      }
    }
    else
    {
      *int v122 = v53;
      v55[1] = v54;
      v55[2] = v52;
      *((unsigned char *)v55 + 24) = 0;
      *((unsigned char *)v55 + 32) = 0;
      *((unsigned char *)v55 + 40) = 0;
      uint64_t v56 = v55 + 7;
      *((unsigned char *)v55 + 48) = 0;
    }
    int v122 = v56;
    uint64_t v67 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)double v125 = v53;
      *(_WORD *)&v125[8] = 2048;
      double v126 = v54;
      __int16 v127 = 2048;
      double v128 = v52;
      _os_log_debug_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "#sp,AOA hypothesis alt1: az %f el %f unc %f", buf, 0x20u);
    }
  }
  unint64_t v68 = sub_1003A8F28(*(unsigned __int16 *)(a1 + 90));
  if (!v70) {
    __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", 674, "channelBand.has_value()");
  }
  uint64_t v71 = v68;
  if ((_BYTE)v68)
  {
    if ((v68 & 0xFF000000000000) != 0)
    {
      uint64_t v72 = HIDWORD(v68) & 0xFF00;
      uint64_t v73 = BYTE4(v68);
      LOBYTE(v74) = 9;
      uint64_t v75 = 0x10000;
      goto LABEL_41;
    }
    long long v86 = "channelBand.value().uniiBandChannel.has_value()";
    int v87 = 690;
LABEL_64:
    __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", v87, v86);
  }
  if ((v68 & 0xFF0000) == 0)
  {
    long long v86 = "channelBand.value().uwbChannel.has_value()";
    int v87 = 683;
    goto LABEL_64;
  }
  uint64_t v75 = 0;
  uint64_t v73 = 0;
  uint64_t v72 = 0;
  unint64_t v74 = v68 >> 8;
LABEL_41:
  double v76 = 0.0;
  uint64_t v107 = v75;
  if (v9)
  {
    uint64_t v77 = 65537;
    if (v9 == 1)
    {
      LOWORD(v69) = *(_WORD *)(a1 + 54);
      double v76 = (double)v69;
    }
  }
  else
  {
    uint64_t v77 = *(unsigned __int16 *)(a1 + 54) | 0x10000;
  }
  __int16 v78 = *(_WORD *)(a1 + 92);
  __int16 v106 = *(_WORD *)(a1 + 96);
  int v79 = *(unsigned __int8 *)(a1 + 24);
  char v109 = v20;
  __int16 v108 = *(_WORD *)(a1 + 94);
  if (v79 != 27)
  {
    if (v79 == 26)
    {
      __int16 v104 = *(unsigned __int8 *)(a1 + 101);
      __int16 v105 = *(unsigned __int8 *)(a1 + 102);
    }
    else
    {
      __int16 v105 = 0;
      __int16 v104 = 0;
    }
    goto LABEL_53;
  }
  __int16 v104 = *(unsigned __int8 *)(a1 + 101);
  __int16 v105 = *(unsigned __int8 *)(a1 + 102);
  unint64_t v80 = sub_1003A8F28(*(unsigned __int16 *)(a1 + 103));
  if (!v81)
  {
    long long v88 = "mmsChannelBand.has_value()";
    int v89 = 735;
    goto LABEL_67;
  }
  if ((_BYTE)v80)
  {
    long long v88 = "mmsChannelBand.value().band == Rose::BandSelect::UWB500MHz";
    int v89 = 736;
LABEL_67:
    __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", v89, v88);
  }
  if ((v80 & 0xFF0000) == 0) {
    sub_10000AE44();
  }
  unint64_t v74 = v80 >> 8;
LABEL_53:
  uint64_t v102 = v77;
  char v103 = v74;
  __int16 v101 = v78;
  uint64_t v99 = *(unsigned __int16 *)(a1 + 106);
  uint64_t v100 = *(unsigned __int8 *)(a1 + 105);
  uint64_t v98 = *(unsigned __int16 *)(a1 + 108);
  if (*(unsigned char *)(a1 + 116))
  {
    if ((v79 & 0xFE) != 0x1A) {
      __assert_rtn("convertToLibRoseType", "RoseRawMeasurement.cpp", 754, "isValidSessionTypeForMmsValStatus");
    }
    uint64_t v82 = v71;
    __int16 v83 = *(unsigned char *)(a1 + 116) & 7;
    __int16 v84 = 256;
  }
  else
  {
    uint64_t v82 = v71;
    __int16 v83 = 0;
    __int16 v84 = 0;
  }
  __int16 v97 = *(_WORD *)(a1 + 22);
  double v85 = sub_10039CC60(*(void *)(a1 + 25));
  *((void *)&v96 + 1) = 1;
  *(double *)&long long v96 = (double)v111 * 0.25;
  *((void *)&v93 + 1) = *((void *)&v116 + 1);
  *(double *)&long long v93 = v24;
  *((void *)&v92 + 1) = *((void *)&v116 + 1);
  *(double *)&long long v92 = v25;
  *((void *)&v91 + 1) = *((void *)&v116 + 1);
  *(double *)&long long v91 = v117;
  *((void *)&v90 + 1) = *((void *)&v116 + 1);
  *(double *)&long long v90 = v119;
  sub_10039E8D8(a9, v12, v97, v109, *(_WORD *)(a1 + 33), *(unsigned char *)(a1 + 35), &v129, 0, v85, (double)*(int *)(a1 + 38), (double)v110 * 0.25, (double)v112 * 0.25, (double)*(int *)(a1 + 50), v76, v120, (uint64_t)&v121, v90, v91, v116,
    v92,
    v93,
    v115,
    v118,
    v114,
    *(uint64_t *)&v28,
    *((uint64_t *)&v116 + 1),
    *(uint64_t *)&v27,
    *((uint64_t *)&v116 + 1),
    *(uint64_t *)&v26,
    *((uint64_t *)&v116 + 1),
    v103,
    v94,
    v82 | 0x100,
    (v82 | 0x100uLL) >> 32,
    v73 | v107 | v72,
    (v73 | v107 | (unint64_t)v72) >> 32,
    v101,
    v108,
    v106,
    v95,
    v113 | ((v113 != 0) << 8),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    v96,
    v104 | 0x100,
    0,
    v105 | 0x100,
    0,
    v100 | 0x100,
    (v100 | 0x100uLL) >> 32,
    v99 | 0x10000,
    (v99 | 0x10000uLL) >> 32,
    v98 | 0x10000,
    (v98 | 0x10000uLL) >> 32,
    v102,
    SHIDWORD(v102),
    v84 | v83);
  if (v121)
  {
    int v122 = v121;
    operator delete(v121);
  }
}

void sub_10017D640(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(void *)(v1 - 224) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10017D674(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  int v4 = __dst;
  uint64_t v11 = __dst;
  __int16 v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100002DE4(v4, *(void **)v6, *((void *)v6 + 1));
        int v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)int v4 = v7;
      }
      int v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      __int16 v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10017D734((uint64_t)v9);
  return v4;
}

void sub_10017D720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10017D734(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10017D76C(a1);
  }
  return a1;
}

void sub_10017D76C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void sub_10017D7B4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10017D808((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_10017D808(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t sub_10017D858()
{
  sub_10039D144();
  v0 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  uint64_t v2 = std::string::append(&v38, ".bin");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1008A1EA8 = v2->__r_.__value_.__r.__words[2];
  xmmword_1008A1E98 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A1E98, (void *)&_mh_execute_header);
  sub_10039D144();
  int v4 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = std::string::append(&v38, ".bin");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1008A1EC0 = v6->__r_.__value_.__r.__words[2];
  xmmword_1008A1EB0 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A1EB0, (void *)&_mh_execute_header);
  sub_10039D144();
  std::locale v8 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v10 = std::string::append(&v38, ".bin");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1008A1ED8 = v10->__r_.__value_.__r.__words[2];
  xmmword_1008A1EC8 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A1EC8, (void *)&_mh_execute_header);
  sub_10039D144();
  __int16 v12 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v38, ".bin");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1008A1EF0 = v14->__r_.__value_.__r.__words[2];
  xmmword_1008A1EE0 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A1EE0, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v16 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v38, ".bin");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1008A1F08 = v18->__r_.__value_.__r.__words[2];
  xmmword_1008A1EF8 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A1EF8, (void *)&_mh_execute_header);
  sub_10039D144();
  char v20 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  unsigned int v22 = std::string::append(&v38, ".bin");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1008A1F20 = v22->__r_.__value_.__r.__words[2];
  xmmword_1008A1F10 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A1F10, (void *)&_mh_execute_header);
  sub_10039D144();
  double v24 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  double v26 = std::string::append(&v38, ".bin");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1008A1F38 = v26->__r_.__value_.__r.__words[2];
  xmmword_1008A1F28 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A1F28, (void *)&_mh_execute_header);
  sub_10039D144();
  double v28 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  unint64_t v30 = std::string::append(&v38, ".bin");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1008A1F50 = v30->__r_.__value_.__r.__words[2];
  xmmword_1008A1F40 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A1F40, (void *)&_mh_execute_header);
  sub_10039D144();
  char v32 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  int v34 = std::string::append(&v38, ".bin");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1008A1F68 = v34->__r_.__value_.__r.__words[2];
  xmmword_1008A1F58 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A1F58, (void *)&_mh_execute_header);
}

void sub_10017DE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10017DEFC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854598[a1]);
}

void *sub_10017DF10@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008545F0[a1]);
}

void *sub_10017DF24@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854638[a1]);
}

void *sub_10017DF38@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854658[a1]);
}

uint64_t sub_10017DF4C(uint64_t a1, int a2, int a3, long long *a4, int a5, char a6, int a7, int a8, void *__src)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 1) = a2;
  *(_DWORD *)(a1 + 4) = a3;
  long long v12 = *a4;
  long long v13 = a4[1];
  *(_OWORD *)(a1 + 36) = *(long long *)((char *)a4 + 28);
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 52) = a6;
  *(_DWORD *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = a7;
  *(_DWORD *)(a1 + 64) = a8;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 72) = -1;
  *(_WORD *)(a1 + 80) = -1;
  *(unsigned char *)(a1 + 82) = 0;
  *(void *)(a1 + 83) = 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 91) = 0;
  memcpy((void *)(a1 + 96), __src, 0x198uLL);
  if (a2 == 100) {
    sub_100412E24();
  }
  if (!a3) {
    sub_100412E50();
  }
  if (*(unsigned char *)(a1 + 153) || *(unsigned char *)(a1 + 207) || *(unsigned char *)(a1 + 209) || *(unsigned char *)(a1 + 353))
  {
    *(unsigned char *)a1 = 1;
    sub_10017E01C(a1);
  }
  return a1;
}

void sub_10017E01C(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RoseServiceRequest::assignChannelDiversitySettings", buf, 2u);
  }
  if (*(unsigned char *)(a1 + 209))
  {
    if (!*(unsigned char *)(a1 + 207)) {
      goto LABEL_15;
    }
    int v3 = *(_DWORD *)(a1 + 64);
    if (v3 && *(unsigned __int8 *)(a1 + 206) != *(unsigned __int8 *)(a1 + 208))
    {
      if (v3 != 1)
      {
        if (v3 == 2)
        {
          int v4 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long v9 = 0;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RoseServiceRequest::assignChannelDiversitySettings - Channel diversity preference RoundRobin_P2S", v9, 2u);
          }
          if (*(unsigned char *)(a1 + 120))
          {
            *(_WORD *)(a1 + 118) |= 4u;
          }
          else
          {
            *(_WORD *)(a1 + 118) = 4;
            *(unsigned char *)(a1 + 120) = 1;
          }
        }
        return;
      }
      long long v5 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      __int16 v8 = 0;
      int v6 = "RoseServiceRequest::assignChannelDiversitySettings - Channel diversity preference RoundRobin";
      long long v7 = (uint8_t *)&v8;
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 207))
  {
    goto LABEL_15;
  }
  *(_WORD *)(a1 + 208) = *(_WORD *)(a1 + 206);
LABEL_15:
  if (!*(unsigned char *)(a1 + 211)) {
    *(unsigned char *)(a1 + 211) = 1;
  }
  *(unsigned char *)(a1 + 210) = 0;
  long long v5 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v10 = 0;
    int v6 = "RoseServiceRequest::assignChannelDiversitySettings - channelDiversityPrecondition is false";
    long long v7 = v10;
    goto LABEL_19;
  }
}

uint64_t sub_10017E1BC(uint64_t a1, int a2, int a3, long long *a4, int a5, char a6, int a7, int a8, void *__src)
{
  return sub_10017DF4C(a1, a2, a3, a4, a5, a6, a7, a8, __src);
}

uint64_t sub_10017E1C8(uint64_t a1)
{
  if (!*(unsigned char *)a1) {
    sub_100412E7C();
  }
  __int16 v9 = 0;
  int v1 = *(_DWORD *)(a1 + 4);
  if ((v1 - 5) >= 2)
  {
    if (v1 == 4)
    {
      if (*(unsigned char *)(a1 + 153)) {
        sub_100412F00();
      }
      if (!*(unsigned char *)(a1 + 207)) {
        goto LABEL_19;
      }
      int v3 = *(unsigned __int8 *)(a1 + 206);
      if (v3 == 5)
      {
        int v4 = (__int16 *)((char *)&v9 + 1);
      }
      else
      {
        if (v3 != 9)
        {
LABEL_19:
          if (!*(unsigned char *)(a1 + 209)) {
            return HIBYTE(v9) | (v9 << 8);
          }
          int v2 = *(unsigned __int8 *)(a1 + 208);
          goto LABEL_21;
        }
        int v4 = &v9;
      }
      *(unsigned char *)int v4 = 1;
      goto LABEL_19;
    }
    if (*(unsigned char *)(a1 + 207)) {
      sub_100412ED4();
    }
    if (*(unsigned char *)(a1 + 209)) {
      sub_100412EA8();
    }
    if (*(unsigned char *)(a1 + 153))
    {
      int v5 = *(unsigned __int8 *)(a1 + 152);
      if (v5 == 5)
      {
        int v6 = (__int16 *)((char *)&v9 + 1);
        goto LABEL_27;
      }
      if (v5 == 9)
      {
        int v6 = &v9;
LABEL_27:
        *(unsigned char *)int v6 = 1;
      }
    }
    if (v1 == 1 && *(unsigned char *)(a1 + 120) && (*(_WORD *)(a1 + 118) & 4) != 0) {
      __int16 v9 = 257;
    }
    return HIBYTE(v9) | (v9 << 8);
  }
  if (!*(unsigned char *)(a1 + 353)) {
    sub_100412F2C();
  }
  int v2 = *(unsigned __int8 *)(a1 + 352);
LABEL_21:
  if (v2 == 5)
  {
    long long v7 = (__int16 *)((char *)&v9 + 1);
    goto LABEL_25;
  }
  if (v2 == 9)
  {
    long long v7 = &v9;
LABEL_25:
    *(unsigned char *)long long v7 = 1;
  }
  return HIBYTE(v9) | (v9 << 8);
}

uint64_t sub_10017E308(uint64_t a1)
{
  sub_100054E28((uint64_t)v17);
  sub_100056628(v18, (uint64_t)"[Role]: ", 8);
  int v2 = *(unsigned __int8 *)(a1 + 1);
  if (v2 == 100)
  {
    int v3 = "Unspecified";
  }
  else if (v2 == 1)
  {
    int v3 = "Responder";
  }
  else
  {
    int v3 = "Initiator";
  }
  sub_100004950(&__p, v3);
  if ((v16 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = v15;
  }
  sub_100056628(v18, (uint64_t)p_p, v5);
  if ((char)v16 < 0) {
    operator delete(__p);
  }
  sub_100056628(v18, (uint64_t)", [UseCase]: ", 13);
  sub_10017DEFC(*(_DWORD *)(a1 + 156), &__p);
  if ((v16 & 0x80u) == 0) {
    int v6 = &__p;
  }
  else {
    int v6 = __p;
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v7 = v16;
  }
  else {
    uint64_t v7 = v15;
  }
  sub_100056628(v18, (uint64_t)v6, v7);
  if ((char)v16 < 0) {
    operator delete(__p);
  }
  sub_100056628(v18, (uint64_t)", [MacMode]: ", 13);
  sub_10017DF10(*(_DWORD *)(a1 + 4), &__p);
  if ((v16 & 0x80u) == 0) {
    __int16 v8 = &__p;
  }
  else {
    __int16 v8 = __p;
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v9 = v16;
  }
  else {
    uint64_t v9 = v15;
  }
  char v10 = sub_100056628(v18, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  long long v11 = std::locale::use_facet(&v20, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v20);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v16 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  *(void *)((char *)v17
  v18[0] = v12;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10017E618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void *sub_10017E668@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854678[a1]);
}

void *sub_10017E67C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008546D0[a1]);
}

void *sub_10017E690@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854718[a1]);
}

void *sub_10017E6A4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854738[a1]);
}

BOOL sub_10017E6B8(int a1)
{
  return (a1 - 3) < 4;
}

uint64_t sub_10017E6C8(unsigned int a1)
{
  return (a1 < 7) & (0x54u >> a1);
}

void *sub_10017E6E0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854758[a1]);
}

void *sub_10017E6F4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008547B0[a1]);
}

void *sub_10017E708@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008547F8[a1]);
}

void *sub_10017E71C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854818[a1]);
}

void sub_10017E730(char *a1@<X0>, uint64_t a2@<X8>)
{
  long long v10 = xmmword_1004B6A10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1008A2948, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1008A2948))
  {
    sub_100166764(&__src);
    std::random_device::result_type v7 = std::random_device::operator()(&__src);
    dword_1008A1F80[0] = v7;
    for (uint64_t i = 1; i != 624; ++i)
    {
      std::random_device::result_type v7 = i + 1812433253 * (v7 ^ (v7 >> 30));
      dword_1008A1F80[i] = v7;
    }
    qword_1008A2940 = 0;
    std::random_device::~random_device(&__src);
    __cxa_guard_release(&qword_1008A2948);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1008A2950, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1008A2950))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10089E190, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1008A2950);
  }
  std::mutex::lock(&stru_10089E190);
  __int16 v4 = word_1004B6A86[sub_1001667D8((uint64_t)&v10, (uint64_t)dword_1008A1F80, &v10)];
  int v5 = *((_DWORD *)sub_100007D00() + 144);
  if (*a1 == 5) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  sub_100188B74((uint64_t)v9, v5, v6, 0);
  sub_100188EB8(v9, 0);
  LOWORD(__src.__padding_) = 256;
  BYTE2(__src.__padding_) = sub_100189268((uint64_t)v9);
  HIBYTE(__src.__padding_) = 1;
  char v14 = sub_100189270((uint64_t)v9);
  char v15 = 1;
  char v16 = sub_100189278((uint64_t)v9);
  int v17 = 151062785;
  char v18 = 1;
  __int16 v19 = 0;
  char v20 = 1;
  __int16 v21 = 0;
  int v22 = 201395201;
  char v23 = 1;
  __int16 v24 = 2;
  char v25 = 1;
  char v26 = 0;
  char v27 = 0;
  char v28 = 0;
  char v29 = 0;
  char v30 = *a1;
  char v31 = 1;
  int v32 = 1;
  __int16 v33 = 0;
  char v34 = sub_100189280((uint64_t)v9);
  char v35 = 1;
  char v36 = sub_100189288((uint64_t)v9);
  char v37 = 1;
  char v38 = sub_100189290((uint64_t)v9);
  char v39 = 1;
  __int16 v40 = 0;
  char v41 = 1;
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  __int16 v46 = v4;
  char v47 = 1;
  __int16 v48 = v4;
  char v49 = 1;
  int v50 = 17891601;
  char v53 = 0;
  __int16 v54 = 0;
  char v55 = 0;
  __int16 v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  char v64 = 0;
  char v67 = 0;
  char v68 = 0;
  char v69 = 0;
  char v72 = 0;
  char v73 = 0;
  char v74 = 0;
  char v78 = 0;
  char v80 = 0;
  char v81 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v92 = 0;
  char v97 = 0;
  char v98 = 0;
  char v99 = 0;
  __int16 v100 = 0;
  char v101 = 0;
  char v102 = 0;
  char v104 = 0;
  char v107 = 0;
  char v52 = 0;
  uint64_t v51 = 0;
  char v63 = 0;
  int v62 = 0;
  char v66 = 0;
  int v65 = 0;
  char v71 = 0;
  uint64_t v70 = 0;
  uint64_t v75 = 0;
  char v77 = 0;
  int v76 = 0;
  *(_DWORD *)((char *)v79 + 3) = 0;
  v79[0] = 0;
  __int16 v94 = 0;
  int v93 = 0;
  int v95 = 0;
  char v96 = 0;
  v103[0] = 0;
  *(_DWORD *)((char *)v103 + 3) = 0;
  char v106 = 0;
  int v105 = 0;
  uint64_t v110 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  LOBYTE(v11) = 0;
  char v12 = 0;
  sub_10017E1BC(a2, 0, 1, &v11, 4, 0, 3, 0, &__src);
  std::mutex::unlock(&stru_10089E190);
}

void sub_10017EB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::random_device a21)
{
}

uint64_t sub_10017EB80@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)sub_100007D00() + 144);
  if (*a1 == 5) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  sub_100188B74((uint64_t)v7, v4, v5, 0);
  sub_100188EF4(v7, 0);
  __int16 __src = 257;
  char v11 = sub_100189268((uint64_t)v7);
  char v12 = 1;
  char v13 = sub_100189270((uint64_t)v7);
  char v14 = 1;
  char v15 = sub_100189278((uint64_t)v7);
  int v16 = 151062785;
  char v17 = 1;
  __int16 v18 = 0;
  char v19 = 1;
  __int16 v20 = 0;
  int v21 = 201395201;
  char v22 = 1;
  __int16 v23 = 3;
  char v24 = 1;
  char v25 = 0;
  char v26 = 0;
  char v27 = 0;
  char v28 = 0;
  char v29 = *a1;
  char v30 = 1;
  int v31 = 1;
  __int16 v32 = 0;
  char v33 = sub_100189280((uint64_t)v7);
  char v34 = 1;
  char v35 = sub_100189288((uint64_t)v7);
  char v36 = 1;
  char v37 = sub_100189290((uint64_t)v7);
  char v38 = 1;
  __int16 v39 = 0;
  char v40 = 1;
  char v41 = 0;
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  __int16 v45 = 75;
  char v46 = 1;
  __int16 v47 = 1000;
  char v48 = 1;
  int v49 = 18874625;
  char v52 = 0;
  __int16 v53 = 0;
  char v54 = 0;
  __int16 v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v63 = 0;
  char v66 = 0;
  char v67 = 0;
  char v68 = 0;
  char v71 = 0;
  char v72 = 0;
  char v73 = 0;
  char v77 = 0;
  char v79 = 0;
  char v80 = 0;
  char v81 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v96 = 0;
  char v97 = 0;
  char v98 = 0;
  __int16 v99 = 0;
  char v100 = 0;
  char v101 = 0;
  char v103 = 0;
  char v106 = 0;
  char v51 = 0;
  uint64_t v50 = 0;
  char v62 = 0;
  int v61 = 0;
  char v65 = 0;
  int v64 = 0;
  char v70 = 0;
  uint64_t v69 = 0;
  uint64_t v74 = 0;
  char v76 = 0;
  int v75 = 0;
  *(_DWORD *)((char *)v78 + 3) = 0;
  v78[0] = 0;
  __int16 v93 = 0;
  int v92 = 0;
  int v94 = 0;
  char v95 = 0;
  v102[0] = 0;
  *(_DWORD *)((char *)v102 + 3) = 0;
  char v105 = 0;
  int v104 = 0;
  uint64_t v109 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  LOBYTE(v8) = 0;
  char v9 = 0;
  return sub_10017E1BC(a2, 1, 1, &v8, 1, 0, 1, 0, &__src);
}

void sub_10017EE48(char *a1@<X0>, uint64_t a2@<X8>)
{
  long long v16 = xmmword_1004B6A20;
  long long v17 = xmmword_1004B6A20;
  long long v15 = xmmword_1004B6A30;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1008A3320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1008A3320))
  {
    sub_100166764(&__src);
    std::random_device::result_type v12 = std::random_device::operator()(&__src);
    dword_1008A2958[0] = v12;
    for (uint64_t i = 1; i != 624; ++i)
    {
      std::random_device::result_type v12 = i + 1812433253 * (v12 ^ (v12 >> 30));
      dword_1008A2958[i] = v12;
    }
    qword_1008A3318 = 0;
    std::random_device::~random_device(&__src);
    __cxa_guard_release(&qword_1008A3320);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1008A3328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1008A3328))
  {
    __cxa_atexit((void (*)(void *))&std::mutex::~mutex, &stru_10089E1D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1008A3328);
  }
  std::mutex::lock(&stru_10089E1D0);
  int v4 = *((_DWORD *)sub_100007D00() + 144);
  if (*a1 == 5) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  sub_100188B74((uint64_t)v14, v4, v5, 0);
  sub_100188F30((unsigned __int8 *)v14, 1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1008A3338, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1008A3338))
  {
    word_1008A3330 = sub_100189214(v14);
    __cxa_guard_release(&qword_1008A3338);
  }
  LOWORD(__src.__padding_) = 257;
  BYTE2(__src.__padding_) = sub_100189268((uint64_t)v14);
  HIBYTE(__src.__padding_) = 1;
  char v25 = sub_100189270((uint64_t)v14);
  char v26 = 1;
  char v27 = sub_100189278((uint64_t)v14);
  __int16 v28 = 2561;
  char v29 = 1;
  char v30 = *((unsigned char *)&aGhijlmnoqrstvw[14] + sub_1001667D8((uint64_t)&v15, (uint64_t)dword_1008A2958, &v15));
  char v31 = 1;
  __int16 v32 = 1024;
  char v33 = 1;
  __int16 v34 = 1024;
  int v35 = 65537;
  char v36 = 1;
  __int16 v37 = 3;
  char v38 = 1;
  char v39 = 0;
  char v40 = 0;
  char v41 = 0;
  char v42 = 0;
  char v43 = *a1;
  char v44 = 1;
  int v45 = 4;
  __int16 v46 = 256;
  char v47 = sub_100189280((uint64_t)v14);
  char v48 = 1;
  char v49 = sub_100189288((uint64_t)v14);
  char v50 = 1;
  char v51 = sub_100189290((uint64_t)v14);
  char v52 = 1;
  __int16 v53 = word_1008A3330;
  char v54 = 1;
  if (a1[17])
  {
    uint64_t v6 = sub_1001667D8((uint64_t)&v16, (uint64_t)dword_1008A2958, &v16);
    std::random_device::result_type v7 = aGhijlmnoqrstvw;
  }
  else
  {
    uint64_t v6 = sub_1001667D8((uint64_t)&v17, (uint64_t)dword_1008A2958, &v17);
    std::random_device::result_type v7 = a345689Bc;
  }
  __int16 v55 = v7[v6];
  char v56 = 1;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  char v62 = 0;
  v63[14] = 0;
  __int16 v64 = 0;
  char v65 = 0;
  __int16 v66 = 0;
  char v67 = 0;
  char v68 = 0;
  char v69 = 0;
  char v70 = 0;
  char v71 = 0;
  char v74 = 0;
  char v77 = 0;
  char v78 = 0;
  char v79 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v88 = 0;
  char v90 = 0;
  char v91 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v95 = 0;
  char v96 = 0;
  char v97 = 0;
  char v98 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  __int16 v110 = 0;
  char v111 = 0;
  char v112 = 0;
  char v114 = 0;
  char v117 = 0;
  memset(v63, 0, 13);
  char v73 = 0;
  int v72 = 0;
  char v76 = 0;
  int v75 = 0;
  char v81 = 0;
  uint64_t v80 = 0;
  uint64_t v85 = 0;
  char v87 = 0;
  int v86 = 0;
  *(_DWORD *)((char *)v89 + 3) = 0;
  v89[0] = 0;
  __int16 v104 = 0;
  int v103 = 0;
  int v105 = 0;
  char v106 = 0;
  v113[0] = 0;
  *(_DWORD *)((char *)v113 + 3) = 0;
  char v116 = 0;
  int v115 = 0;
  uint64_t v120 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v8 = *((void *)a1 + 1);
  long long v9 = *(_OWORD *)(v8 + 16);
  long long v21 = *(_OWORD *)v8;
  long long v22 = v9;
  uint64_t v23 = *(void *)(v8 + 32);
  int v10 = a1[16];
  v18[0] = v21;
  v18[1] = v9;
  uint64_t v19 = v23;
  if (v10) {
    int v11 = 5;
  }
  else {
    int v11 = 1;
  }
  char v20 = 1;
  sub_10017E1BC(a2, 1, 2, v18, v11, 0, 3, 0, &__src);
  std::mutex::unlock(&stru_10089E1D0);
}

void sub_10017F304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::random_device a31)
{
}

uint64_t sub_10017F37C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)sub_100007D00() + 144);
  if (*a1 == 5) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  sub_100188B74((uint64_t)v9, v4, v5, 0);
  sub_100188D44(v9, 0, 1);
  __int16 __src = 256;
  char v17 = sub_100189268((uint64_t)v9);
  char v18 = 1;
  char v19 = sub_100189270((uint64_t)v9);
  char v20 = 1;
  char v21 = sub_100189278((uint64_t)v9);
  int v22 = 184617729;
  char v23 = 1;
  __int16 v24 = 0;
  char v25 = 1;
  __int16 v26 = 0;
  int v27 = 65537;
  char v28 = 1;
  __int16 v29 = 2;
  char v30 = 1;
  char v31 = 0;
  char v32 = 0;
  char v33 = 0;
  char v34 = 0;
  char v35 = *a1;
  char v36 = 1;
  int v37 = 0;
  __int16 v38 = 257;
  char v39 = sub_100189280((uint64_t)v9);
  char v40 = 1;
  char v41 = sub_100189288((uint64_t)v9);
  char v42 = 1;
  char v43 = sub_100189290((uint64_t)v9);
  char v44 = 1;
  __int16 v45 = 0;
  char v46 = 1;
  __int16 v47 = 50;
  char v48 = 1;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  char v54 = 0;
  v55[14] = 0;
  __int16 v56 = 0;
  char v57 = 0;
  __int16 v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  char v66 = 0;
  char v69 = 0;
  char v70 = 0;
  char v71 = 0;
  char v74 = 0;
  char v75 = 0;
  char v76 = 0;
  char v80 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  __int16 v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v106 = 0;
  char v109 = 0;
  memset(v55, 0, 13);
  char v65 = 0;
  int v64 = 0;
  char v68 = 0;
  int v67 = 0;
  char v73 = 0;
  uint64_t v72 = 0;
  uint64_t v77 = 0;
  char v79 = 0;
  int v78 = 0;
  *(_DWORD *)((char *)v81 + 3) = 0;
  v81[0] = 0;
  __int16 v96 = 0;
  int v95 = 0;
  int v97 = 0;
  char v98 = 0;
  v105[0] = 0;
  *(_DWORD *)((char *)v105 + 3) = 0;
  char v108 = 0;
  int v107 = 0;
  uint64_t v112 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v6 = *((void *)a1 + 1);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v13 = *(_OWORD *)v6;
  long long v14 = v7;
  uint64_t v15 = *(void *)(v6 + 32);
  v10[0] = v13;
  v10[1] = v7;
  uint64_t v11 = v15;
  char v12 = 1;
  return sub_10017E1BC(a2, 0, 2, v10, 1, 0, 3, 0, &__src);
}

uint64_t sub_10017F650@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)sub_100007D00() + 144);
  if (*a1 == 5) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  sub_100188B74((uint64_t)v9, v4, v5, 0);
  sub_100188E80(v9, 0, 1);
  __int16 __src = 257;
  char v17 = sub_100189268((uint64_t)v9);
  char v18 = 1;
  char v19 = sub_100189270((uint64_t)v9);
  char v20 = 1;
  char v21 = sub_100189278((uint64_t)v9);
  int v22 = 184617729;
  char v23 = 1;
  __int16 v24 = 0;
  char v25 = 1;
  __int16 v26 = 0;
  int v27 = 65537;
  char v28 = 1;
  __int16 v29 = 2;
  char v30 = 1;
  char v31 = 0;
  char v32 = 0;
  char v33 = 0;
  char v34 = 0;
  char v35 = *a1;
  char v36 = 1;
  int v37 = 0;
  __int16 v38 = 257;
  char v39 = sub_100189280((uint64_t)v9);
  char v40 = 1;
  char v41 = sub_100189288((uint64_t)v9);
  char v42 = 1;
  char v43 = sub_100189290((uint64_t)v9);
  char v44 = 1;
  __int16 v45 = 0;
  char v46 = 1;
  __int16 v47 = 50;
  char v48 = 1;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  char v54 = 0;
  v55[14] = 0;
  __int16 v56 = 0;
  char v57 = 0;
  __int16 v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  char v66 = 0;
  char v69 = 0;
  char v70 = 0;
  char v71 = 0;
  char v74 = 0;
  char v75 = 0;
  char v76 = 0;
  char v80 = 0;
  char v82 = 0;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  __int16 v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v106 = 0;
  char v109 = 0;
  memset(v55, 0, 13);
  char v65 = 0;
  int v64 = 0;
  char v68 = 0;
  int v67 = 0;
  char v73 = 0;
  uint64_t v72 = 0;
  uint64_t v77 = 0;
  char v79 = 0;
  int v78 = 0;
  *(_DWORD *)((char *)v81 + 3) = 0;
  v81[0] = 0;
  __int16 v96 = 0;
  int v95 = 0;
  int v97 = 0;
  char v98 = 0;
  v105[0] = 0;
  *(_DWORD *)((char *)v105 + 3) = 0;
  char v108 = 0;
  int v107 = 0;
  uint64_t v112 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v6 = *((void *)a1 + 1);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v13 = *(_OWORD *)v6;
  long long v14 = v7;
  uint64_t v15 = *(void *)(v6 + 32);
  v10[0] = v13;
  v10[1] = v7;
  uint64_t v11 = v15;
  char v12 = 1;
  return sub_10017E1BC(a2, 1, 2, v10, 1, 0, 3, 0, &__src);
}

uint64_t sub_10017F920@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)sub_100007D00() + 144);
  unsigned int v5 = a1[11];
  if (*a1 == 5) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  sub_100188B74((uint64_t)v20, v4, v6, 0);
  if (a1[87]) {
    BOOL v7 = a1[86] != 0;
  }
  else {
    BOOL v7 = v4 == 201 && v5 == 4;
  }
  sub_1001890B8(v20, v7, a1[85]);
  __int16 __src = 256;
  char v24 = sub_100189268((uint64_t)v20);
  char v25 = 1;
  char v26 = sub_100189270((uint64_t)v20);
  char v27 = 1;
  char v28 = sub_100189278((uint64_t)v20);
  *(_DWORD *)__int16 v29 = 201395201;
  *(_WORD *)&v29[4] = 1;
  *(_WORD *)char v30 = 0;
  *(_DWORD *)char v31 = 201395200;
  v31[4] = 1;
  __int16 v32 = 7;
  char v33 = 1;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  char v37 = 0;
  __int16 v38 = 0;
  int v39 = *((_DWORD *)a1 + 23);
  __int16 v40 = 0;
  char v41 = sub_100189280((uint64_t)v20);
  char v42 = 1;
  char v43 = sub_100189288((uint64_t)v20);
  char v44 = 1;
  char v45 = sub_100189290((uint64_t)v20);
  __int16 v46 = 1;
  char v47 = 0;
  LOBYTE(v48) = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  LOBYTE(v52) = 0;
  char v53 = 0;
  LOBYTE(v54) = 0;
  char v55 = 0;
  int v56 = 0;
  char v57 = sub_10017FE08(v5);
  char v58 = 1;
  char v59 = *a1;
  char v60 = 1;
  __int16 v61 = *(_WORD *)(a1 + 1);
  int v62 = 256;
  char v63 = 1;
  __int16 v64 = 256;
  long long v65 = *(_OWORD *)(a1 + 60);
  *(_WORD *)char v66 = 1;
  char v67 = 0;
  uint64_t v70 = *((void *)a1 + 5);
  long long v9 = *(_OWORD *)(a1 + 24);
  long long v68 = *(_OWORD *)(a1 + 8);
  long long v69 = v9;
  char v71 = 1;
  char v72 = 0;
  char v73 = 0;
  char v76 = 0;
  char v79 = 0;
  char v80 = 0;
  char v81 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  char v90 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v95 = 0;
  char v96 = 0;
  char v97 = 0;
  char v98 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  __int16 v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v116 = 0;
  char v119 = 0;
  char v75 = 0;
  int v74 = 0;
  char v78 = 0;
  int v77 = 0;
  char v83 = 0;
  uint64_t v82 = 0;
  uint64_t v87 = 0;
  char v89 = 0;
  int v88 = 0;
  *(_DWORD *)((char *)v91 + 3) = 0;
  v91[0] = 0;
  __int16 v106 = 0;
  int v105 = 0;
  int v107 = 0;
  char v108 = 0;
  v115[0] = 0;
  *(_DWORD *)((char *)v115 + 3) = 0;
  int v117 = 0;
  char v118 = 0;
  uint64_t v121 = 0;
  uint64_t v120 = 0;
  uint64_t v122 = 0;
  int v10 = *((_DWORD *)a1 + 14);
  if (!v10) {
    sub_100412F58();
  }
  if (!v31[4]) {
    sub_100412F84();
  }
  if (!v31[2]) {
    sub_100412FB0();
  }
  if (v31[1] <= 0xBu) {
    sub_100412FDC();
  }
  if (v31[3] <= 0xBu) {
    sub_100413008();
  }
  unsigned int v11 = a1[11];
  if (v11 == 4)
  {
    unsigned int v12 = *((_DWORD *)a1 + 20);
    if (v12 - 11 <= 0xFFFFFFF5) {
      sub_10041308C();
    }
    __int16 v13 = sub_1001661A4(v10, v12, (unint64_t)v31[1] >> 2, (unint64_t)v31[3] >> 2);
    if (!v53) {
      char v53 = 1;
    }
    int v14 = *((_DWORD *)a1 + 20);
    __int16 v52 = v13;
    if (!v55) {
      char v55 = 1;
    }
    __int16 v54 = v13;
    if (!BYTE1(v56)) {
      BYTE1(v56) = 1;
    }
    LOBYTE(v56) = v14;
    if (!HIBYTE(v56)) {
      HIBYTE(v56) = 1;
    }
    BYTE2(v56) = v14;
  }
  else
  {
    if (v11 != 5)
    {
      if (v11 <= 3) {
        sub_100413060();
      }
      sub_100413034();
    }
    if (*((_DWORD *)a1 + 20) != 1) {
      sub_1004130B8();
    }
  }
  if (a1[88])
  {
    if (!v67) {
      char v67 = 1;
    }
    *(_WORD *)&v66[1] = 1024;
    __int16 v48 = 150;
    char v49 = 1;
  }
  else if (a1[89])
  {
    if (!v30[0]) {
      v30[0] = 1;
    }
    *(_WORD *)&v29[5] = 768;
    if (!v31[0]) {
      v31[0] = 1;
    }
    *(_WORD *)&v30[1] = 768;
    *(_DWORD *)&v31[1] = 18874656;
    *(_DWORD *)&v29[1] = 17367305;
  }
  else
  {
    if (!v30[0]) {
      v30[0] = 1;
    }
    *(_WORD *)&v29[5] = 0;
    if (!v31[0]) {
      v31[0] = 1;
    }
    *(_WORD *)&v30[1] = 0;
  }
  int v16 = *((_DWORD *)a1 + 12);
  int v15 = *((_DWORD *)a1 + 13);
  int v17 = a1[90];
  if (a1[84] && sub_10039CE84(v4))
  {
    LOWORD(v62) = 264;
    int v18 = 1;
  }
  else
  {
    int v18 = 0;
  }
  LOBYTE(v21) = 0;
  char v22 = 0;
  return sub_10017E1BC(a2, 0, 4, &v21, v15, v17 != 0, v16, v18, &__src);
}

unint64_t sub_10017FE08(unsigned int a1)
{
  if (a1 >= 6) {
    sub_1004130E4();
  }
  return (0x40403020100uLL >> (8 * a1)) & 7;
}

uint64_t sub_10017FE3C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[77]) {
    char v4 = a1[76];
  }
  else {
    char v4 = -1;
  }
  int v5 = *((_DWORD *)sub_100007D00() + 144);
  unsigned int v6 = a1[11];
  if (*a1 == 5) {
    unsigned int v7 = 1;
  }
  else {
    unsigned int v7 = 2;
  }
  sub_100188B74((uint64_t)v17, v5, v7, 0);
  sub_1001890F0(v17, 0, a1[85]);
  __int16 v8 = 0;
  uint64_t v9 = *((int *)a1 + 13);
  if (v9 <= 6) {
    __int16 v8 = word_1004B6B38[v9];
  }
  if (*((_DWORD *)sub_100007D00() + 186) == 1) {
    v8 |= 0x20u;
  }
  __int16 __src = 257;
  char v21 = sub_100189268((uint64_t)v17);
  char v22 = 1;
  char v23 = sub_100189270((uint64_t)v17);
  char v24 = 1;
  char v25 = sub_100189278((uint64_t)v17);
  *(_DWORD *)char v26 = 201395201;
  v26[4] = 1;
  __int16 v27 = 0;
  char v28 = 1;
  __int16 v29 = 0;
  *(_DWORD *)char v30 = 201395201;
  v30[4] = 1;
  __int16 v31 = v8;
  char v32 = 1;
  char v33 = 0;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  __int16 v37 = 0;
  int v38 = *((_DWORD *)a1 + 23);
  char v41 = 0;
  LOBYTE(v42) = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v40 = 0;
  uint64_t v39 = 0;
  __int16 v46 = 30;
  char v47 = 1;
  __int16 v48 = 5000;
  char v49 = 1;
  int v50 = 18874625;
  char v51 = sub_10017FE08(v6);
  char v52 = 1;
  char v53 = *a1;
  char v54 = 1;
  __int16 v55 = *(_WORD *)(a1 + 1);
  int v56 = 256;
  char v57 = 1;
  char v58 = v4;
  char v59 = 1;
  long long v60 = *(_OWORD *)(a1 + 60);
  *(_WORD *)__int16 v61 = 1;
  char v62 = 0;
  long long v10 = *(_OWORD *)(a1 + 8);
  long long v11 = *(_OWORD *)(a1 + 24);
  uint64_t v65 = *((void *)a1 + 5);
  long long v63 = v10;
  long long v64 = v11;
  char v66 = 1;
  char v67 = 0;
  char v68 = 0;
  char v71 = 0;
  char v74 = 0;
  char v75 = 0;
  char v76 = 0;
  char v79 = 0;
  char v80 = 0;
  char v81 = 0;
  char v85 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  char v90 = 0;
  char v91 = 0;
  char v92 = 0;
  char v93 = 0;
  char v94 = 0;
  char v95 = 0;
  char v96 = 0;
  char v97 = 0;
  char v98 = 0;
  char v99 = 0;
  char v104 = 0;
  char v105 = 0;
  char v106 = 0;
  __int16 v107 = 0;
  char v108 = 0;
  char v109 = 0;
  char v111 = 0;
  char v114 = 0;
  char v70 = 0;
  int v69 = 0;
  char v73 = 0;
  int v72 = 0;
  char v78 = 0;
  uint64_t v77 = 0;
  uint64_t v82 = 0;
  char v84 = 0;
  int v83 = 0;
  *(_DWORD *)((char *)v86 + 3) = 0;
  v86[0] = 0;
  __int16 v101 = 0;
  int v100 = 0;
  int v102 = 0;
  char v103 = 0;
  v110[0] = 0;
  *(_DWORD *)((char *)v110 + 3) = 0;
  int v112 = 0;
  char v113 = 0;
  uint64_t v116 = 0;
  uint64_t v115 = 0;
  uint64_t v117 = 0;
  if (a1[88])
  {
    char v62 = 1;
    *(_WORD *)&v61[1] = 1024;
    __int16 v42 = 150;
    char v43 = 1;
  }
  else if (a1[89])
  {
    if (!v28) {
      char v28 = 1;
    }
    __int16 v27 = 768;
    if (!v30[0]) {
      v30[0] = 1;
    }
    __int16 v29 = 768;
    *(_DWORD *)&v30[1] = 18874656;
    *(_DWORD *)&v26[1] = 17367305;
  }
  else
  {
    if (!v28) {
      char v28 = 1;
    }
    __int16 v27 = 0;
    if (!v30[0]) {
      v30[0] = 1;
    }
    __int16 v29 = 0;
  }
  int v12 = a1[90];
  int v13 = *((_DWORD *)a1 + 12);
  int v14 = *((_DWORD *)a1 + 13);
  if (a1[84] && sub_10039CE84(v5))
  {
    LOWORD(v56) = 264;
    int v15 = 1;
  }
  else
  {
    int v15 = 0;
  }
  LOBYTE(v18) = 0;
  char v19 = 0;
  return sub_10017E1BC(a2, 1, 4, &v18, v14, v12 != 0, v13, v15, &__src);
}

__n128 sub_100180238@<Q0>(int *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  char v6 = a2;
  if (a2 != 102 && a2 != 106) {
    sub_100413110();
  }
  if (*a4)
  {
    if (!a4[2]) {
      sub_100413320();
    }
    if (!a4[3]) {
      sub_10041334C();
    }
LABEL_9:
    if (!a4[8]) {
      sub_10041329C();
    }
    if (!a4[16]) {
      sub_1004132C8();
    }
    __int16 v9 = 1;
    goto LABEL_12;
  }
  if (a4[2]) {
    sub_1004132F4();
  }
  if (a4[3]) {
    goto LABEL_9;
  }
  if (a4[8]) {
    sub_100413270();
  }
  __int16 v9 = a4[16];
  if (a4[16]) {
    sub_100413244();
  }
LABEL_12:
  if (a4[27]) {
    v9 |= 2u;
  }
  if (a4[28]) {
    __int16 v10 = v9 | 4;
  }
  else {
    __int16 v10 = v9;
  }
  if (*((unsigned char *)a1 + 19))
  {
    if (*((unsigned char *)a1 + 16))
    {
      __int16 v11 = v10 | 0xC0;
      int v12 = *((unsigned __int8 *)a1 + 17);
      BOOL v13 = v12 != 0;
      char v14 = v12 - 1;
      if (v13) {
        char v15 = v14;
      }
      else {
        char v15 = 0;
      }
    }
    else
    {
      char v15 = 0;
      __int16 v11 = v10 | 0x80;
    }
    if (*((unsigned char *)a1 + 18)) {
      __int16 v10 = v11 | (*((unsigned __int8 *)a1 + 18) << 8);
    }
    else {
      __int16 v10 = v11;
    }
  }
  else
  {
    char v15 = 0;
  }
  int v16 = *a1;
  int v17 = *((_DWORD *)sub_100007D00() + 144);
  int v24 = sub_1003A8CFC(*((unsigned __int8 *)a1 + 4), 1, v18, v19, v20, v21, v22, v23);
  char v25 = v24;
  if (v24 == 5) {
    unsigned int v26 = 1;
  }
  else {
    unsigned int v26 = 2;
  }
  sub_100188B74((uint64_t)&v30, v17, v26, 0);
  if (a4[20])
  {
    if (!a4[22]) {
      sub_1004131C0();
    }
    if (!a4[24]) {
      sub_1004131EC();
    }
    if (!a4[26]) {
      sub_100413218();
    }
    sub_1001891D8((unsigned __int8 *)&v30, a4[21], a4[23], a4[25], 0, 0, 0);
  }
  else
  {
    if (a4[22]) {
      sub_100413194();
    }
    if (a4[24]) {
      sub_100413168();
    }
    if (a4[26]) {
      sub_10041313C();
    }
    sub_1001806F8(v26, (uint64_t)&__src);
    long long v30 = __src;
    int v31 = *(_DWORD *)v35;
  }
  LOBYTE(__src) = *a4;
  BYTE1(__src) = 1;
  BYTE2(__src) = sub_100189268((uint64_t)&v30);
  BYTE3(__src) = 1;
  BYTE4(__src) = sub_100189270((uint64_t)&v30);
  BYTE5(__src) = 1;
  BYTE6(__src) = sub_100189278((uint64_t)&v30);
  BYTE7(__src) = 1;
  BYTE8(__src) = sub_1003A7C10(*((unsigned __int8 *)a1 + 5), 1);
  BYTE9(__src) = 1;
  BYTE10(__src) = sub_1003A7C10(*((unsigned __int8 *)a1 + 5), 1);
  *(_WORD *)((char *)&__src + 11) = 1;
  HIWORD(__src) = 0;
  *(_DWORD *)&v35[1] = 0;
  char v36 = 0;
  __int16 v37 = v10;
  char v38 = 1;
  char v39 = 0;
  char v40 = 0;
  char v41 = 0;
  char v42 = 0;
  char v43 = v25;
  char v44 = 1;
  int v45 = *((_DWORD *)a4 + 8);
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  char v52 = 0;
  char v53 = 0;
  char v54 = 0;
  char v55 = 0;
  char v56 = 0;
  v57[14] = 0;
  __int16 v58 = 0;
  char v59 = 0;
  __int16 v60 = 0;
  char v61 = 0;
  char v62 = 0;
  char v63 = 0;
  char v64 = 0;
  char v65 = 0;
  char v47 = 0;
  uint64_t v46 = 0;
  memset(v57, 0, 13);
  char v66 = v6;
  char v67 = 1;
  char v68 = sub_1003A7C10(*((unsigned __int8 *)a1 + 5), 1);
  char v69 = 1;
  int v70 = v16;
  char v71 = 1;
  int v72 = 16777472;
  __int16 v73 = *((_WORD *)a1 + 3);
  char v74 = 1;
  __int16 v75 = *((_WORD *)a1 + 4);
  char v76 = 1;
  char v77 = *((unsigned char *)a1 + 10);
  char v78 = 1;
  char v79 = *((unsigned char *)a1 + 11);
  char v80 = 1;
  char v81 = *((unsigned char *)a1 + 12);
  char v82 = 1;
  char v83 = *((unsigned char *)a1 + 13);
  char v84 = 1;
  int v85 = *((_DWORD *)a4 + 1);
  unsigned __int8 v86 = a4[8];
  int v87 = *((_DWORD *)a4 + 3);
  unsigned __int8 v88 = a4[16];
  __int16 v89 = *(_WORD *)(a4 + 1);
  char v90 = *((unsigned char *)a1 + 14);
  char v91 = 1;
  char v92 = *((unsigned char *)a1 + 15);
  char v93 = 1;
  char v94 = v15;
  char v95 = 1;
  char v98 = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  char v106 = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  __int16 v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v124 = 0;
  char v127 = 0;
  char v97 = 0;
  int v96 = 0;
  *(_DWORD *)((char *)v99 + 3) = 0;
  v99[0] = 0;
  __int16 v114 = 0;
  int v113 = 0;
  char v116 = 0;
  int v115 = 0;
  *(_DWORD *)((char *)v123 + 3) = 0;
  v123[0] = 0;
  int v125 = 0;
  char v126 = 0;
  uint64_t v130 = 0;
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  int v27 = *a4;
  LOBYTE(v32) = 0;
  char v33 = 0;
  sub_10017E1BC(a5, v27, 3, &v32, 1, 0, 2, 0, &__src);
  *(_OWORD *)(a5 + 68) = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 9);
  *(__n128 *)(a5 + 77) = result;
  return result;
}

uint64_t sub_1001806F8@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  char v4 = sub_100007D00();
  int v5 = (unsigned __int8 *)sub_100188B74(a2, v4[144], a1, 0);

  return sub_100189160(v5, 0);
}

uint64_t sub_100180748@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = a1[52] | a1[53];
  BOOL v5 = a1[49] == 0;
  BOOL v6 = a1[51] == 0;
  if (v4)
  {
    BOOL v5 = 1;
    BOOL v6 = 1;
  }
  if (v5) {
    __int16 v7 = 0;
  }
  else {
    __int16 v7 = 8;
  }
  if (a1[50]) {
    v7 |= 6u;
  }
  if (v6) {
    __int16 v8 = 0;
  }
  else {
    __int16 v8 = 16;
  }
  __int16 v9 = v7 | v8;
  if (*a1 == 5) {
    unsigned int v10 = 1;
  }
  else {
    unsigned int v10 = 2;
  }
  __int16 v11 = sub_100007D00();
  sub_100188B74((uint64_t)v18, v11[144], v10, 0);
  sub_10018919C(v18, 0, a1[48]);
  __int16 __src = 256;
  char v22 = sub_100189268((uint64_t)v18);
  char v23 = 1;
  char v24 = sub_100189270((uint64_t)v18);
  char v25 = 1;
  char v26 = sub_100189278((uint64_t)v18);
  int v27 = 184617729;
  __int16 v28 = 1;
  __int16 v29 = 0;
  int v30 = 0;
  char v31 = 0;
  __int16 v32 = v9;
  char v33 = 1;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  char v37 = 0;
  __int16 v38 = 0;
  int v39 = *((_DWORD *)a1 + 14);
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  v51[14] = 0;
  __int16 v52 = 0;
  char v53 = 0;
  __int16 v54 = 0;
  char v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v62 = 0;
  char v65 = 0;
  char v66 = 0;
  char v67 = 0;
  char v70 = 0;
  char v71 = 0;
  char v72 = 0;
  char v41 = 0;
  uint64_t v40 = 0;
  memset(v51, 0, 13);
  char v61 = 0;
  int v60 = 0;
  char v64 = 0;
  int v63 = 0;
  uint64_t v68 = 0;
  char v69 = 0;
  uint64_t v73 = 0;
  char v74 = *a1;
  __int16 v75 = 2817;
  char v76 = 1;
  int v77 = *((_DWORD *)a1 + 1);
  char v78 = 1;
  int v79 = 16908546;
  __int16 v80 = 258;
  __int16 v81 = *((_WORD *)a1 + 4);
  char v82 = 1;
  __int16 v83 = *((_WORD *)a1 + 5);
  char v84 = 1;
  __int16 v85 = *((_WORD *)a1 + 6);
  char v86 = 1;
  int v87 = *(_DWORD *)(a1 + 14);
  __int16 v88 = *((_WORD *)a1 + 9);
  char v89 = 1;
  __int16 v90 = 76;
  char v91 = 1;
  uint64_t v12 = *((void *)a1 + 4);
  uint64_t v92 = *((void *)a1 + 3);
  char v93 = 1;
  uint64_t v94 = v12;
  char v95 = 1;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  __int16 v103 = 0;
  char v104 = 0;
  char v105 = 0;
  char v107 = 0;
  char v110 = 0;
  __int16 v97 = 0;
  int v96 = 0;
  char v99 = 0;
  int v98 = 0;
  *(_DWORD *)((char *)v106 + 3) = 0;
  v106[0] = 0;
  char v109 = 0;
  int v108 = 0;
  uint64_t v112 = 0;
  uint64_t v111 = 0;
  uint64_t v113 = 0;
  if (v4)
  {
    if (a1[52]) {
      char v13 = 3;
    }
    else {
      char v13 = 0;
    }
    BYTE1(v96) = 1;
    LOBYTE(v96) = v13;
    __int16 v97 = a1[55] | 0x100;
    HIWORD(v96) = a1[54] | 0x100;
    int v14 = 6;
  }
  else
  {
    int v14 = 5;
  }
  int v16 = *((_DWORD *)a1 + 10);
  int v15 = *((_DWORD *)a1 + 11);
  LOBYTE(v19) = 0;
  char v20 = 0;
  return sub_10017E1BC(a2, 0, v14, &v19, v15, 0, v16, 0, &__src);
}

uint64_t sub_100180A9C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = a1[52] | a1[53];
  BOOL v5 = a1[49] == 0;
  BOOL v6 = a1[51] == 0;
  if (v4)
  {
    BOOL v5 = 1;
    BOOL v6 = 1;
  }
  if (v5) {
    __int16 v7 = 0;
  }
  else {
    __int16 v7 = 8;
  }
  if (a1[50]) {
    v7 |= 6u;
  }
  if (v6) {
    __int16 v8 = 0;
  }
  else {
    __int16 v8 = 16;
  }
  __int16 v9 = v7 | v8;
  if (*a1 == 5) {
    unsigned int v10 = 1;
  }
  else {
    unsigned int v10 = 2;
  }
  __int16 v11 = sub_100007D00();
  sub_100188B74((uint64_t)v18, v11[144], v10, 0);
  sub_1001891D4((uint64_t)v18, 0, a1[48]);
  __int16 __src = 257;
  char v22 = sub_100189268((uint64_t)v18);
  char v23 = 1;
  char v24 = sub_100189270((uint64_t)v18);
  char v25 = 1;
  char v26 = sub_100189278((uint64_t)v18);
  char v27 = 1;
  __int16 v30 = 0;
  int v28 = 0;
  char v29 = 0;
  int v31 = 0;
  char v32 = 0;
  __int16 v33 = v9;
  char v34 = 1;
  char v35 = 0;
  char v36 = 0;
  char v37 = 0;
  char v38 = 0;
  __int16 v39 = 0;
  int v40 = *((_DWORD *)a1 + 14);
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  char v49 = 0;
  char v50 = 0;
  char v51 = 0;
  v52[14] = 0;
  __int16 v53 = 0;
  char v54 = 0;
  __int16 v55 = 0;
  char v56 = 0;
  char v57 = 0;
  char v58 = 0;
  char v59 = 0;
  char v60 = 0;
  char v63 = 0;
  char v66 = 0;
  char v67 = 0;
  char v68 = 0;
  char v71 = 0;
  char v72 = 0;
  char v73 = 0;
  char v42 = 0;
  uint64_t v41 = 0;
  memset(v52, 0, 13);
  char v62 = 0;
  int v61 = 0;
  char v65 = 0;
  int v64 = 0;
  uint64_t v69 = 0;
  char v70 = 0;
  uint64_t v74 = 0;
  char v75 = *a1;
  __int16 v76 = 2817;
  char v77 = 1;
  int v78 = *((_DWORD *)a1 + 1);
  char v79 = 1;
  int v80 = 16908546;
  __int16 v81 = 258;
  __int16 v82 = *((_WORD *)a1 + 4);
  char v83 = 1;
  __int16 v84 = *((_WORD *)a1 + 5);
  char v85 = 1;
  __int16 v86 = *((_WORD *)a1 + 6);
  char v87 = 1;
  int v88 = *(_DWORD *)(a1 + 14);
  __int16 v89 = *((_WORD *)a1 + 9);
  char v90 = 1;
  __int16 v91 = 76;
  char v92 = 1;
  uint64_t v12 = *((void *)a1 + 4);
  uint64_t v93 = *((void *)a1 + 3);
  char v94 = 1;
  uint64_t v95 = v12;
  char v96 = 1;
  char v101 = 0;
  char v102 = 0;
  char v103 = 0;
  __int16 v104 = 0;
  char v105 = 0;
  char v106 = 0;
  char v108 = 0;
  char v111 = 0;
  __int16 v98 = 0;
  int v97 = 0;
  char v100 = 0;
  int v99 = 0;
  *(_DWORD *)((char *)v107 + 3) = 0;
  v107[0] = 0;
  char v110 = 0;
  int v109 = 0;
  uint64_t v113 = 0;
  uint64_t v112 = 0;
  uint64_t v114 = 0;
  if (v4)
  {
    if (a1[52]) {
      char v13 = 3;
    }
    else {
      char v13 = 0;
    }
    BYTE1(v97) = 1;
    LOBYTE(v97) = v13;
    __int16 v98 = a1[55] | 0x100;
    HIWORD(v97) = a1[54] | 0x100;
    int v14 = 6;
  }
  else
  {
    int v14 = 5;
  }
  int v16 = *((_DWORD *)a1 + 10);
  int v15 = *((_DWORD *)a1 + 11);
  LOBYTE(v19) = 0;
  char v20 = 0;
  return sub_10017E1BC(a2, 1, v14, &v19, v15, 0, v16, 0, &__src);
}

uint64_t sub_100180DEC@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5 = *((_DWORD *)sub_100007D00() + 144);
  BOOL v6 = sub_100007D00();
  int v7 = sub_1003D2DE8((uint64_t)v6);
  sub_100188B74((uint64_t)v69, v5, 2u, v7);
  int v8 = a1[43];
  BOOL v9 = a1[43] != 0;
  if (a1[43]) {
    char v10 = a1[47];
  }
  else {
    char v10 = 0;
  }
  if (a1[48]) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = a1[43] != 0;
  }
  if (a2) {
    char v12 = 85;
  }
  else {
    char v12 = 51;
  }
  if (v11 && a1[47] == 0) {
    char v13 = v12;
  }
  else {
    char v13 = v10;
  }
  char v64 = v13;
  sub_100189128(v69, v8, a1[45]);
  if (a1[46]) {
    char v14 = v9;
  }
  else {
    char v14 = 1;
  }
  if (v14)
  {
LABEL_17:
    int v15 = 0;
    goto LABEL_22;
  }
  if (!a1[15] || !a1[13] || !a1[17])
  {
    char v59 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004133D0(v59);
    }
    goto LABEL_17;
  }
  int v15 = 1;
LABEL_22:
  int v16 = (__int16 *)(a1 + 22);
  if (!a1[24]) {
    int v16 = &word_1008A1F7A;
  }
  int v17 = (unsigned __int16)*v16;
  __int16 v18 = sub_1003A9058(v17 | 0x10000u);
  long long v19 = (__int16 *)(a1 + 18);
  if (!a1[20]) {
    long long v19 = &word_1008A1F74;
  }
  __int16 v20 = *v19;
  if (a1[68])
  {
    uint64_t v21 = (char *)&aGhijlmnoqrstvw[15] + 3 * *((int *)a1 + 16) + 1;
    LOBYTE(v22) = *v21;
    LOBYTE(v23) = v21[1];
    char v24 = v21[2];
  }
  else
  {
    sub_100166764(&v70);
    std::random_device::result_type v25 = std::random_device::operator()(&v70);
    std::random_device::result_type __src = v25;
    for (uint64_t i = 1; i != 624; ++i)
    {
      std::random_device::result_type v25 = i + 1812433253 * (v25 ^ (v25 >> 30));
      *(&__src + i) = v25;
    }
    uint64_t v165 = 0;
    *(void *)&v71[0] = 0x1B00000000;
    char v27 = (unsigned __int16 *)((char *)&aGhijlmnoqrstvw[15]
                             + 3 * (int)sub_1001816DC((uint64_t)v71, (uint64_t)&__src, v71)
                             + 1);
    unsigned __int8 v28 = *((unsigned char *)v27 + 2);
    unsigned int v22 = *v27 | (v28 << 16);
    std::random_device::~random_device(&v70);
    unsigned int v23 = v22 >> 8;
    char v24 = v28;
  }
  if (word_1008A1F72 == v20)
  {
    char v62 = 0;
    char v63 = 0;
    char v29 = 0;
  }
  else
  {
    if (a1[37]) {
      char v30 = a1[36];
    }
    else {
      char v30 = v22;
    }
    char v63 = v30;
    if (a1[39]) {
      LOBYTE(v23) = a1[38];
    }
    char v62 = v23;
    if (a1[41]) {
      char v29 = a1[40];
    }
    else {
      char v29 = v24;
    }
  }
  BOOL v31 = a1[44] == 0;
  char v32 = sub_100189270((uint64_t)v69);
  if (!v31) {
    v32 |= sub_100189288((uint64_t)v69);
  }
  if (a1[44])
  {
    char v33 = sub_100189270((uint64_t)v69);
    char v34 = sub_100189288((uint64_t)v69) | v33;
  }
  else
  {
    char v34 = sub_100189288((uint64_t)v69);
  }
  BOOL v35 = a2 != 0;
  LOBYTE(__src) = v35;
  BYTE1(__src) = 1;
  if (v15)
  {
    if (!a1[13]) {
      sub_10000AE44();
    }
    BYTE2(__src) = a1[12];
    HIBYTE(__src) = 1;
    if (!a1[15]) {
      sub_10000AE44();
    }
    char v74 = a1[14];
    char v75 = 1;
    if (!a1[17]) {
      sub_10000AE44();
    }
    char v36 = a1[16];
  }
  else
  {
    BYTE2(__src) = sub_100189268((uint64_t)v69);
    HIBYTE(__src) = 1;
    char v74 = v32;
    char v75 = 1;
    char v36 = sub_100189278((uint64_t)v69);
  }
  char v76 = v36;
  char v77 = 1;
  __int16 v80 = 0;
  int v78 = 0;
  char v79 = 0;
  memset(v81, 0, sizeof(v81));
  char v82 = 1;
  char v83 = 0;
  char v84 = 0;
  char v85 = 0;
  char v86 = 0;
  if ((v18 & 0xFF00) != 0) {
    char v37 = v18;
  }
  else {
    char v37 = 9;
  }
  char v87 = v37;
  char v88 = 1;
  int v89 = *((_DWORD *)a1 + 28);
  __int16 v90 = 0;
  if (v8)
  {
    LOBYTE(v91) = sub_100189280((uint64_t)v69);
    BYTE1(v91) = 1;
    BYTE2(v91) = v34;
    HIBYTE(v91) = 1;
    char v38 = sub_100189290((uint64_t)v69);
  }
  else
  {
    char v38 = 0;
    int v91 = 16777472;
  }
  char v92 = v38;
  __int16 v93 = 1;
  char v94 = 0;
  if (a1[34]) {
    __int16 v39 = *((_WORD *)a1 + 16);
  }
  else {
    __int16 v39 = 99;
  }
  __int16 v95 = v39;
  char v96 = 1;
  uint64_t v97 = *((void *)a1 + 10);
  char v98 = a1[88];
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  v103[14] = 0;
  __int16 v104 = 0;
  char v105 = 0;
  __int16 v106 = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  memset(v103, 0, 13);
  __int16 v110 = *((_WORD *)a1 + 36);
  char v111 = a1[74];
  char v114 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v128 = 0;
  char v130 = 0;
  char v131 = 0;
  char v132 = 0;
  char v133 = 0;
  char v134 = 0;
  char v135 = 0;
  char v136 = 0;
  char v137 = 0;
  char v138 = 0;
  char v139 = 0;
  char v140 = 0;
  char v141 = 0;
  char v142 = 0;
  char v113 = 0;
  int v112 = 0;
  char v116 = 0;
  int v115 = 0;
  char v121 = 0;
  uint64_t v120 = 0;
  uint64_t v125 = 0;
  char v127 = 0;
  int v126 = 0;
  *(_DWORD *)((char *)v129 + 3) = 0;
  v129[0] = 0;
  int v143 = 0;
  __int16 v144 = 0;
  if (a1[1]) {
    char v40 = *a1;
  }
  else {
    char v40 = sub_100189298((uint64_t)v69);
  }
  char v145 = v40;
  char v146 = 1;
  if (a1[3]) {
    char v41 = a1[2];
  }
  else {
    char v41 = sub_1001892A0((uint64_t)v69);
  }
  char v147 = v41;
  char v148 = 1;
  char v42 = (__int16 *)(a1 + 4);
  if (!a1[6]) {
    char v42 = &word_1008A3340;
  }
  __int16 v149 = *v42;
  char v150 = 1;
  LOBYTE(v151) = 0;
  char v152 = 0;
  if (a1[29]) {
    char v43 = a1[28];
  }
  else {
    char v43 = 4;
  }
  char v153 = v43;
  int v156 = 0;
  *(_WORD *)v154 = 1;
  char v155 = 0;
  __int16 v157 = 0;
  __int16 v158 = v17;
  char v159 = 1;
  __int16 v160 = 0;
  if (a1[27]) {
    char v44 = a1[26];
  }
  else {
    char v44 = 16;
  }
  char v161 = v44;
  *(_WORD *)std::string::size_type v162 = 1;
  char v163 = 0;
  memset(v164, 0, sizeof(v164));
  if (!v82) {
    sub_100413378();
  }
  if (a1[48])
  {
    __int16 v45 = *(_WORD *)&v81[5];
    if (a1[42])
    {
      __int16 v45 = *(_WORD *)&v81[5] | 1;
      *(_WORD *)&v81[5] |= 1u;
    }
    char v46 = (__int16 *)(a1 + 8);
    if (!a1[10]) {
      char v46 = &word_1008A1F76;
    }
    __int16 v151 = *v46;
    char v152 = 1;
    if (a1[31]) {
      unsigned __int8 v47 = a1[30];
    }
    else {
      unsigned __int8 v47 = 72;
    }
    __int16 v160 = v47 | 0x100;
    *(_WORD *)&v81[5] = v45 | 2;
    *(_WORD *)&v154[1] = word_1008A1F72;
    char v155 = 1;
    int v156 = 16777472;
    __int16 v157 = 256;
    int v48 = 7;
  }
  else
  {
    if (a1[55]) {
      unsigned __int8 v49 = a1[54];
    }
    else {
      unsigned __int8 v49 = 6;
    }
    LOWORD(v164[0]) = v49 | 0x100;
    if (a1[57]) {
      unsigned __int8 v50 = a1[56];
    }
    else {
      unsigned __int8 v50 = 10;
    }
    HIWORD(v164[0]) = v50 | 0x100;
    BYTE1(v164[5]) = 1;
    LOBYTE(v164[5]) = v64;
    *(_WORD *)&v154[1] = v20;
    char v155 = 1;
    BYTE1(v156) = 1;
    LOBYTE(v156) = v63;
    HIBYTE(v156) = 1;
    BYTE2(v156) = v62;
    HIBYTE(v157) = 1;
    LOBYTE(v157) = v29;
    __int16 v51 = *(_WORD *)&v81[5];
    *(_WORD *)&v81[5] |= 2u;
    if (a1[60]) {
      *(_WORD *)&v81[5] = v51 | 3;
    }
    __int16 v52 = (__int16 *)(a1 + 8);
    if (!a1[10]) {
      __int16 v52 = &word_1008A1F78;
    }
    __int16 v151 = *v52;
    char v152 = 1;
    __int16 v53 = operator new(1uLL);
    __p = v53;
    unsigned char *v53 = 1;
    char v68 = v53 + 1;
    char v67 = v53 + 1;
    unsigned __int8 v54 = sub_1003A8B68((unsigned __int8 **)&__p);
    if (a1[59]) {
      unsigned __int8 v55 = a1[58];
    }
    else {
      unsigned __int8 v55 = v54;
    }
    if (__p)
    {
      char v67 = __p;
      operator delete(__p);
    }
    if (!HIBYTE(v164[5])) {
      HIBYTE(v164[5]) = 1;
    }
    BYTE2(v164[5]) = 0;
    int v56 = sub_1003A8BD0(v55);
    int v57 = sub_1003A8BF0(v55);
    if ((v56 ^ 1 | v57))
    {
      if ((v56 | v57 ^ 1) == 1)
      {
        if ((v56 ^ 1 | v57 ^ 1)) {
          sub_1004133A4();
        }
        if (!HIBYTE(v164[5])) {
          sub_10000AE44();
        }
        BYTE2(v164[5]) |= 8u;
        __int16 v58 = 1;
      }
      else
      {
        __int16 v58 = 29;
      }
    }
    else
    {
      __int16 v58 = 253;
    }
    if (a1[52]) {
      __int16 v58 = *((_WORD *)a1 + 25);
    }
    *(_WORD *)&v162[1] = v58;
    char v163 = 1;
    if (a1[31]) {
      unsigned __int8 v60 = a1[30];
    }
    else {
      unsigned __int8 v60 = -60;
    }
    __int16 v160 = v60 | 0x100;
    *(_OWORD *)&v164[1] = *((_OWORD *)a1 + 6);
    if (a1[48]) {
      int v48 = 7;
    }
    else {
      int v48 = 8;
    }
  }
  LOBYTE(v71[0]) = 0;
  char v72 = 0;
  return sub_10017E1BC(a3, v35, v48, v71, 1, 0, 3, 0, &__src);
}

void sub_1001816A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, std::random_device a20,std::random_device a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001816DC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  int v4 = result - *a3;
  if (result != *a3)
  {
    unsigned int v6 = v4 + 1;
    if (v4 == -1)
    {
      return sub_100166A18(a2);
    }
    else
    {
      uint64_t v8 = __clz(v6);
      uint64_t v9 = 31;
      if (((v6 << v8) & 0x7FFFFFFF) != 0) {
        uint64_t v9 = 32;
      }
      unint64_t v10 = v9 - v8;
      unint64_t v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0) {
        ++v11;
      }
      if (v11 <= v10) {
        unsigned int v12 = 0xFFFFFFFF >> -(v10 / v11);
      }
      else {
        unsigned int v12 = 0;
      }
      do
        unsigned int v13 = sub_100166A18(a2) & v12;
      while (v13 >= v6);
      return *a3 + v13;
    }
  }
  return result;
}

uint64_t sub_1001817A0()
{
  unsigned __int16 v1 = 272;
  word_1008A1F70 = sub_1003A9110(&v1);
  unsigned __int16 v1 = 263;
  word_1008A1F72 = sub_1003A9110(&v1);
  unsigned __int16 v1 = 1031;
  word_1008A1F74 = sub_1003A9110(&v1);
  word_1008A3340 = word_1008A1F70;
  unsigned __int16 v1 = 1;
  char v2 = 0;
  __int16 v3 = 5;
  char v4 = 1;
  word_1008A1F76 = sub_1003A8F90((unsigned __int8 *)&v1);
  unsigned __int16 v1 = 6;
  char v2 = 0;
  __int16 v3 = 2;
  char v4 = 1;
  word_1008A1F78 = sub_1003A8F90((unsigned __int8 *)&v1);
  unsigned __int16 v1 = 2304;
  char v2 = 1;
  LOBYTE(v3) = 0;
  char v4 = 0;
  uint64_t result = sub_1003A8F90((unsigned __int8 *)&v1);
  word_1008A1F7A = result;
  return result;
}

void *sub_10018188C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854878[a1]);
}

void *sub_1001818A0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008548D0[a1]);
}

void *sub_1001818B4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854918[a1]);
}

void *sub_1001818C8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854938[a1]);
}

double sub_1001818DC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = off_100854848;
  return result;
}

void sub_10018191C(uint64_t a1, uint64_t a2)
{
  char v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, a2);
  }
  else
  {
    unsigned int v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100413414(v6);
    }
  }
  std::mutex::unlock(v4);
}

void sub_1001819B8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001819CC(uint64_t a1)
{
  *(void *)a1 = off_100853108;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_100181A10(uint64_t a1)
{
  *(void *)a1 = off_100853108;
  std::mutex::~mutex((std::mutex *)(a1 + 24));

  operator delete();
}

void *sub_100181A74@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854C50[a1]);
}

void *sub_100181A88@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854CA8[a1]);
}

void *sub_100181A9C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854CF0[a1]);
}

void *sub_100181AB0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854D10[a1]);
}

uint64_t sub_100181AC4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  *(void *)a1 = off_100854968;
  *(void *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v9 = dispatch_queue_create("com.apple.RoseServiceProvider.RoseScheduler", v8);
  uint64_t v10 = *a3;
  unint64_t v11 = (std::__shared_weak_count *)a3[1];
  *(void *)(a1 + 120) = v9;
  *(void *)(a1 + 128) = v10;
  *(void *)(a1 + 136) = v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = *(void *)(a1 + 128);
    unint64_t v11 = *(std::__shared_weak_count **)(a1 + 136);
  }
  *(void *)(a1 + 160) = 1018212795;
  *(void *)(a1 + 144) = a2;
  *(_WORD *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 154) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  uint64_t v15 = v10;
  int v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1001872DC((void *)(a1 + 208), &v15, *(void *)(a1 + 120));
  if (v16) {
    sub_10001A970(v16);
  }
  uint64_t v12 = a4[1];
  *(void *)(a1 + 240) = *a4;
  *(void *)(a1 + 248) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[RoseScheduler] database is nullptr. Normal opreation is not possible.");
    goto LABEL_14;
  }
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[RoseScheduler] Scheduler owner is nullptr. Normal opreation is not possible.");
LABEL_14:
  }
  return a1;
}

void sub_100181C88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v4);
  unsigned int v6 = (std::__shared_weak_count *)v2[31];
  if (v6) {
    sub_10001A970(v6);
  }
  v2[26] = off_1008550E8;
  int v7 = (std::__shared_weak_count *)v2[28];
  if (v7) {
    sub_10001A970(v7);
  }
  std::condition_variable::~condition_variable(v3);
  uint64_t v8 = (std::__shared_weak_count *)v2[17];
  if (v8) {
    sub_10001A970(v8);
  }
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void sub_100181CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x100181CD4);
  }
  JUMPOUT(0x100181CD0);
}

uint64_t sub_100181D0C(uint64_t a1)
{
  *(void *)a1 = off_100854968;
  char v2 = *(NSObject **)(a1 + 120);
  if (v2) {
    dispatch_release(v2);
  }
  __int16 v3 = *(std::__shared_weak_count **)(a1 + 248);
  if (v3) {
    sub_10001A970(v3);
  }
  *(void *)(a1 + 208) = off_1008550E8;
  char v4 = *(std::__shared_weak_count **)(a1 + 224);
  if (v4) {
    sub_10001A970(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 160));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5) {
    sub_10001A970(v5);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_100181DB0(uint64_t a1)
{
  sub_100181D0C(a1);

  operator delete();
}

uint64_t sub_100181DE8(uint64_t a1, uint64_t *a2)
{
  char v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *a2;
  *(void *)(a1 + 72) = *a2;
  *(void *)(a1 + 80) = a2[1];
  *(void *)(a1 + 88) = a2[2];
  *(void *)(a1 + 96) = a2[3];
  *(void *)(a1 + 104) = a2[4];
  *(void *)(a1 + 112) = a2[5];
  if (!v5 || (sub_10018680C(v5, a1), (uint64_t v6 = *(void *)(a1 + 80)) == 0)) {
    __assert_rtn("SetupProxyObjects", "ProxyObjectConsumerBase.h", 49, "proxyObj != nullptr");
  }
  sub_10018680C(v6, a1);
  uint64_t v7 = sub_1001868AC(a1, (void *)(a1 + 72));
  atomic_store(v7, (unsigned __int8 *)(a1 + 152));
  std::mutex::unlock(v4);
  return v7;
}

void sub_100181EB8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100181ECC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 96);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72)) & 1) == 0
    && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10041355C();
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 8);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = v3.__d_.__rep_ + 10000000;
  while (1)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 153));
    if (v5) {
      break;
    }
    if (std::chrono::system_clock::now().__d_.__rep_ >= v4) {
      goto LABEL_16;
    }
    if (v3.__d_.__rep_ == -10000000)
    {
      v6.__d_.__rep_ = 0;
    }
    else if (v3.__d_.__rep_ < -9999999)
    {
      if ((unint64_t)v4 >= 0xFFDF3B645A1CAC09)
      {
LABEL_14:
        v6.__d_.__rep_ = 1000 * (v3.__d_.__rep_ + 10000000);
        goto LABEL_15;
      }
      v6.__d_.__rep_ = 0x8000000000000000;
    }
    else
    {
      if ((unint64_t)v4 <= 0x20C49BA5E353F7) {
        goto LABEL_14;
      }
      v6.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
    }
LABEL_15:
    std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 160), &__lk, v6);
    if (std::chrono::system_clock::now().__d_.__rep_ >= v4)
    {
LABEL_16:
      atomic_load((unsigned __int8 *)(a1 + 153));
      break;
    }
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(a1 + 153));
  if (v7)
  {
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2) & 1) == 0
      && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_1004134F4();
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9) & 1) == 0
      && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_1004134C0();
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10) & 1) == 0
      && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_10041348C();
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11) & 1) == 0
      && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_100413458();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100413528();
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
  return v7 & 1;
}

void sub_1001821D0(uint64_t a1, const void *a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] Scheduler handleServiceRequestAsync", v6, 2u);
  }
  memcpy(v8, a2, sizeof(v8));
  unsigned __int8 v5 = *(NSObject **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1001822D8;
  block[3] = &unk_1008549A8;
  block[4] = a1;
  dispatch_async(v5, block);
}

void sub_1001822D8(uint64_t a1)
{
}

void sub_1001822E8(uint64_t a1, __int16 *a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RoseScheduler::handleNewServiceRequestInternal", (uint8_t *)&__p, 2u);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] Servicing dequeued service request. Passing message to AOP scheduler.", (uint8_t *)&__p, 2u);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10017E308((uint64_t)(a2 + 4));
    unsigned __int8 v5 = v11[1] >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    char v32 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request: %s", buf, 0xCu);
    if (SHIBYTE(v11[1]) < 0) {
      operator delete(__p);
    }
  }
  if (*((_DWORD *)a2 + 3) != 2)
  {
    __int16 v7 = *a2;
    LODWORD(__p) = 1;
    WORD2(__p) = v7;
    memcpy(v11, a2 + 4, sizeof(v11));
    char v12 = 1;
    char v13 = 0;
    char v14 = 0;
    char v15 = 0;
    char v18 = 0;
    char v19 = 0;
    char v22 = 0;
    __int16 v23 = 0;
    char v24 = 0;
    char v25 = 0;
    __int16 v26 = 0;
    char v27 = 0;
    char v28 = 0;
    char v29 = 0;
    char v30 = 0;
    char v8 = sub_100183388(a1, (uint64_t)&__p);
    if (v22 && v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    if (v18 && v16)
    {
      int v17 = v16;
      operator delete(v16);
    }
    if ((v8 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_23:
    __int16 v9 = *a2;
    LODWORD(__p) = 1;
    WORD2(__p) = v9;
    v11[0] = 13;
    LOBYTE(v11[1]) = 1;
    LOBYTE(v11[2]) = 0;
    LOBYTE(v11[9]) = 0;
    LOBYTE(v11[10]) = 0;
    LOBYTE(v11[13]) = 0;
    BYTE4(v11[13]) = 0;
    LOBYTE(v11[14]) = 0;
    BYTE4(v11[14]) = 0;
    LOBYTE(v11[19]) = 0;
    (*(void (**)(void, void **))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), &__p);
    goto LABEL_24;
  }
  if (sub_100183A3C(a1, 0, a2)) {
    goto LABEL_23;
  }
LABEL_13:
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100413590();
  }
  sub_100189B7C(*(void *)(a1 + 128), (unsigned __int16)*a2);
  __int16 v6 = *a2;
  LODWORD(__p) = 1;
  WORD2(__p) = v6;
  v11[0] = 9;
  LOBYTE(v11[1]) = 1;
  LOBYTE(v11[2]) = 0;
  LOBYTE(v11[9]) = 0;
  LOBYTE(v11[10]) = 0;
  LOBYTE(v11[13]) = 0;
  BYTE4(v11[13]) = 0;
  LOBYTE(v11[14]) = 0;
  BYTE4(v11[14]) = 0;
  LOBYTE(v11[19]) = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), &__p);
LABEL_24:
  if (LOBYTE(v11[9]) && LOBYTE(v11[7]) && SHIBYTE(v11[6]) < 0) {
    operator delete((void *)v11[4]);
  }
}

void sub_10018263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a22 && a20 && a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100182684(uint64_t a1, __int16 a2, long long *a3)
{
  long long v3 = a3[2];
  long long v4 = a3[4];
  long long v5 = a3[5];
  long long v14 = a3[3];
  long long v15 = v4;
  long long v6 = a3[6];
  long long v16 = v5;
  long long v17 = v6;
  long long v7 = a3[1];
  long long v11 = *a3;
  long long v12 = v7;
  long long v13 = v3;
  char v8 = *(NSObject **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100182748;
  block[3] = &unk_1008549C8;
  block[4] = a1;
  __int16 v18 = a2;
  dispatch_async(v8, block);
  return result;
}

void sub_100182748(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 240);
  if (v3)
  {
    int v4 = *(unsigned __int16 *)(a1 + 152);
    double v5 = sub_10039CC9C();
    sub_10029453C(v3, v4, v5);
  }
  unsigned __int16 v6 = *(_WORD *)(a1 + 152);

  sub_1001827AC(v2, v6, (long long *)(a1 + 40));
}

void sub_1001827AC(uint64_t a1, unsigned __int16 a2, long long *a3)
{
  unsigned __int16 v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "RoseScheduler::handleStartServiceInternal", buf, 2u);
  }
  sub_100189774(*(void *)(a1 + 128), a2, v55);
  if (v56[640])
  {
    memcpy(__dst, v56, sizeof(__dst));
    if (__dst[3] > 8u) {
      return;
    }
    if (((1 << SLOBYTE(__dst[3])) & 0x6C) != 0)
    {
      if ((sub_100183A3C(a1, 1, (__int16 *)__dst) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100413630();
        }
        *(_DWORD *)buf = 1;
        unsigned __int16 v27 = a2;
        v28[0] = 11;
        LOBYTE(v28[1]) = 1;
        LOBYTE(v28[2]) = 0;
        LOBYTE(v28[9]) = 0;
        LOBYTE(v28[10]) = 0;
        LOBYTE(v28[13]) = 0;
        BYTE4(v28[13]) = 0;
        LOBYTE(v28[14]) = 0;
        BYTE4(v28[14]) = 0;
        LOBYTE(v28[19]) = 0;
        (*(void (**)(void, uint8_t *))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), buf);
        if (LOBYTE(v28[9]))
        {
          if (LOBYTE(v28[7]) && SHIBYTE(v28[6]) < 0)
          {
            uint64_t v10 = (void *)v28[4];
            goto LABEL_29;
          }
        }
      }
    }
    else if (((1 << SLOBYTE(__dst[3])) & 0x192) != 0)
    {
      *(_DWORD *)buf = 2;
      unsigned __int16 v27 = a2;
      memcpy(v28, &__dst[2], sizeof(v28));
      char v29 = 1;
      long long v7 = a3[5];
      long long v34 = a3[4];
      long long v35 = v7;
      long long v36 = a3[6];
      long long v8 = a3[1];
      long long v30 = *a3;
      long long v31 = v8;
      long long v9 = a3[3];
      long long v32 = a3[2];
      long long v33 = v9;
      char v37 = 1;
      char v38 = 0;
      char v41 = 0;
      char v42 = 0;
      char v45 = 0;
      __int16 v46 = 0;
      char v47 = 0;
      char v48 = 0;
      __int16 v49 = 0;
      char v50 = 0;
      char v51 = 0;
      char v52 = 0;
      char v53 = 0;
      if ((sub_100183388(a1, (uint64_t)buf) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_10041369C();
        }
        int v11 = 1;
        unsigned __int16 v12 = a2;
        uint64_t v13 = 11;
        char v14 = 1;
        char v15 = 0;
        char v19 = 0;
        char v20 = 0;
        char v21 = 0;
        char v22 = 0;
        char v23 = 0;
        char v24 = 0;
        char v25 = 0;
        (*(void (**)(void, int *))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), &v11);
        if (v19 && v18 && v17 < 0) {
          operator delete(__p);
        }
      }
      if (v45 && v43)
      {
        char v44 = v43;
        operator delete(v43);
      }
      if (v41)
      {
        uint64_t v10 = v39;
        if (v39)
        {
          char v40 = v39;
LABEL_29:
          operator delete(v10);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_1004136D0();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_1004135C4();
  }
}

void sub_100182B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47)
{
  if (a47 && a45 && a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100182B88(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 120);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_100182C00;
  v3[3] = &unk_1008549E8;
  v3[4] = a1;
  __int16 v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100182C00(uint64_t a1)
{
}

void sub_100182C10(uint64_t a1, int a2)
{
  __int16 v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RoseScheduler::handleStopServiceInternal", buf, 2u);
  }
  sub_100189774(*(void *)(a1 + 128), a2, v43);
  if (v44[640])
  {
    memcpy(__dst, v44, sizeof(__dst));
    if (__dst[3] == 2)
    {
      if ((sub_100183A3C(a1, 2, (__int16 *)__dst) & 1) == 0)
      {
        double v5 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
        {
          sub_100181A88(__dst[3], buf);
          if (v22[1] >= 0) {
            long long v7 = buf;
          }
          else {
            long long v7 = *(uint8_t **)buf;
          }
          int v8 = 136315394;
          *(void *)long long v9 = v7;
          *(_WORD *)&v9[8] = 1024;
          *(_DWORD *)&v9[10] = a2;
          _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to schedule %s ranging stop for ticket ID: %d", (uint8_t *)&v8, 0x12u);
          if (SHIBYTE(v22[1]) < 0) {
            operator delete(*(void **)buf);
          }
        }
        *(_DWORD *)buf = 1;
        *(_WORD *)&uint8_t buf[4] = a2;
        v22[0] = 10;
        LOBYTE(v22[1]) = 1;
        LOBYTE(v22[2]) = 0;
        LOBYTE(v22[9]) = 0;
        LOBYTE(v22[10]) = 0;
        LOBYTE(v22[13]) = 0;
        BYTE4(v22[13]) = 0;
        LOBYTE(v22[14]) = 0;
        BYTE4(v22[14]) = 0;
        LOBYTE(v22[19]) = 0;
        (*(void (**)(void, uint8_t *))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), buf);
        if (LOBYTE(v22[9]))
        {
          if (LOBYTE(v22[7]) && SHIBYTE(v22[6]) < 0)
          {
            unsigned __int16 v6 = (void *)v22[4];
LABEL_26:
            operator delete(v6);
          }
        }
      }
    }
    else
    {
      *(_DWORD *)buf = 3;
      *(_WORD *)&uint8_t buf[4] = a2;
      memcpy(v22, &v44[8], sizeof(v22));
      char v23 = 1;
      char v24 = 0;
      char v25 = 0;
      char v26 = 0;
      char v29 = 0;
      char v30 = 0;
      char v33 = 0;
      __int16 v34 = 0;
      char v35 = 0;
      char v36 = 0;
      __int16 v37 = 0;
      char v38 = 0;
      char v39 = 0;
      char v40 = 0;
      char v41 = 0;
      if ((sub_100183388(a1, (uint64_t)buf) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100413770();
        }
        int v8 = 1;
        *(_WORD *)long long v9 = a2;
        *(void *)&v9[4] = 10;
        v9[12] = 1;
        char v10 = 0;
        char v14 = 0;
        char v15 = 0;
        char v16 = 0;
        char v17 = 0;
        char v18 = 0;
        char v19 = 0;
        char v20 = 0;
        (*(void (**)(void, int *))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), &v8);
        if (v14 && v13 && v12 < 0) {
          operator delete(__p);
        }
      }
      if (v33 && v31)
      {
        long long v32 = v31;
        operator delete(v31);
      }
      if (v29)
      {
        unsigned __int16 v6 = v27;
        if (v27)
        {
          char v28 = v27;
          goto LABEL_26;
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100413704();
  }
}

void sub_100182F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47)
{
  if (a22 && a20 && a19 < 0) {
    operator delete(__p);
  }
  sub_100183548((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_100182FEC(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 120);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_100183064;
  v3[3] = &unk_100854A08;
  v3[4] = a1;
  __int16 v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100183064(uint64_t a1)
{
}

void sub_100183074(uint64_t a1, int a2)
{
  __int16 v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] Canceling enqueued service request. Passing message to AOP scheduler.", buf, 2u);
  }
  sub_100189774(*(void *)(a1 + 128), a2, v41);
  if (v42[640])
  {
    memcpy(__dst, v42, sizeof(__dst));
    if (__dst[3] == 2)
    {
      if ((sub_100183A3C(a1, 3, (__int16 *)__dst) & 1) == 0
        && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        sub_100413810();
      }
    }
    else
    {
      *(_DWORD *)buf = 4;
      __int16 v23 = a2;
      memcpy(v24, &v42[8], 0x1F8uLL);
      v24[504] = 1;
      v24[512] = 0;
      v24[624] = 0;
      v24[632] = 0;
      char v27 = 0;
      char v28 = 0;
      char v31 = 0;
      __int16 v32 = 0;
      char v33 = 0;
      char v34 = 0;
      __int16 v35 = 0;
      char v36 = 0;
      char v37 = 0;
      char v38 = 0;
      char v39 = 0;
      char v5 = sub_100183388(a1, (uint64_t)buf);
      unsigned __int16 v6 = qword_1008ABDE0;
      if (v5)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = 67109120;
          int v8 = a2;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] Cancel Service: Success canceling service request, ticket ID: %d", (uint8_t *)&v7, 8u);
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_10041387C();
        }
        int v7 = 1;
        LOWORD(v8) = a2;
        uint64_t v9 = 12;
        char v10 = 1;
        char v11 = 0;
        char v15 = 0;
        char v16 = 0;
        char v17 = 0;
        char v18 = 0;
        char v19 = 0;
        char v20 = 0;
        char v21 = 0;
        (*(void (**)(void, int *))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), &v7);
        if (v15 && v14 && v13 < 0) {
          operator delete(__p);
        }
      }
      if (v31 && v29)
      {
        char v30 = v29;
        operator delete(v29);
      }
      if (v27 && v25)
      {
        char v26 = v25;
        operator delete(v25);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_1004137A4();
  }
}

void sub_100183344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a22 && a20 && a19 < 0) {
    operator delete(__p);
  }
  sub_100183548((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_100183388(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if (v2)
  {
    unsigned __int16 v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7)
    {
      uint64_t v3 = sub_100187D88(v7, a2);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_10041391C();
      }
      uint64_t v3 = 0;
    }
    std::mutex::unlock(v6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004138E8();
    }
    return 0;
  }
  return v3;
}

void sub_10018344C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 sub_100183460(uint64_t a1, uint64_t a2)
{
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x279uLL);
  sub_1001865E8(a1 + 680, a2 + 680);
  sub_100186684((__n128 *)(a1 + 720), a2 + 720);
  __n128 result = *(__n128 *)(a2 + 776);
  *(void *)(a1 + 789) = *(void *)(a2 + 789);
  *(__n128 *)(a1 + 776) = result;
  return result;
}

void sub_1001834C4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 712)) {
    sub_100413950(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001834E0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 768))
  {
    unsigned __int8 v2 = *(void **)(a1 + 728);
    if (v2)
    {
      *(void *)(a1 + 736) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 712))
  {
    uint64_t v3 = *(void **)(a1 + 688);
    if (v3)
    {
      *(void *)(a1 + 696) = v3;
      operator delete(v3);
    }
  }
}

uint64_t sub_100183548(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 728))
  {
    unsigned __int8 v2 = *(void **)(a1 + 688);
    if (v2)
    {
      *(void *)(a1 + 696) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 672))
  {
    uint64_t v3 = *(void **)(a1 + 648);
    if (v3)
    {
      *(void *)(a1 + 656) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void sub_1001835A0(uint64_t a1, uint64_t *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100413964();
  }
  uint64_t v16 = *a2;
  int v17 = *((_DWORD *)a2 + 2);
  sub_1001752CC((uint64_t)v18, (uint64_t)(a2 + 2));
  long long v4 = *((_OWORD *)a2 + 6);
  long long v23 = *((_OWORD *)a2 + 5);
  long long v24 = v4;
  v25[0] = *((_OWORD *)a2 + 7);
  *(_OWORD *)((char *)v25 + 13) = *(_OWORD *)((char *)a2 + 125);
  char v5 = *(NSObject **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_100186924;
  block[3] = &unk_100854A80;
  block[4] = a1;
  void block[5] = v16;
  int v7 = v17;
  sub_1001752CC((uint64_t)&v8, (uint64_t)v18);
  long long v13 = v23;
  long long v14 = v24;
  v15[0] = v25[0];
  *(_OWORD *)((char *)v15 + 13) = *(_OWORD *)((char *)v25 + 13);
  dispatch_async(v5, block);
  if (v12 && v11 && v10 < 0) {
    operator delete(__p);
  }
  if (v22 && v21 && v20 < 0) {
    operator delete(v19);
  }
}

void sub_100183710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,char a45)
{
  if (a45 && a43 && a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100183740(uint64_t a1, long long *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100413964();
  }
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  long long v4 = *(NSObject **)(a1 + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_10018699C;
  v5[3] = &unk_100854AB0;
  v5[4] = a1;
  dispatch_async(v4, v5);
}

void sub_100183804(uint64_t a1, long long *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100413964();
  }
  long long v4 = a2[1];
  long long v7 = *a2;
  long long v8 = v4;
  char v5 = *(NSObject **)(a1 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1001869AC;
  block[3] = &unk_100854AD0;
  block[4] = a1;
  dispatch_async(v5, block);
}

void sub_1001838C0(uint64_t a1, long long *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100413964();
  }
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  long long v4 = *(NSObject **)(a1 + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_1001869BC;
  v5[3] = &unk_100854AF0;
  v5[4] = a1;
  dispatch_async(v4, v5);
}

void sub_100183984(uint64_t a1, uint64_t *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100413964();
  }
  uint64_t v4 = *a2;
  char v5 = *(NSObject **)(a1 + 120);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_1001869CC;
  v6[3] = &unk_100854B10;
  v6[4] = a1;
  v6[5] = v4;
  dispatch_async(v5, v6);
}

uint64_t sub_100183A3C(uint64_t a1, int a2, __int16 *a3)
{
  v6[0] = off_100854B40;
  v6[1] = a1;
  v6[3] = v6;
  v5[0] = off_100854BD0;
  v5[1] = a1;
  v5[3] = v5;
  uint64_t v3 = sub_100187318(a1 + 208, a3, a2, (uint64_t)v6, (uint64_t)v5);
  sub_100186CEC(v5);
  sub_100186AB0(v6);
  return v3;
}

void sub_100183B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_100186CEC((uint64_t *)va);
  sub_100186AB0((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100183B24(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal AOPRoseEvent", buf, 2u);
  }
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100413A48();
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "[AP Scheduler] handleEventInternal AOPRoseEvent unspecified type");
    case 1:
      uint64_t v5 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] received SchedulingTaskStatusUpdate event", v12, 2u);
      }
      if (!*(unsigned char *)(a2 + 92)) {
        sub_1004139C4();
      }
      sub_100184000(a1, (unsigned __int16 *)(a2 + 80));
      break;
    case 2:
      uint64_t v6 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] received SchedulerError event", v13, 2u);
      }
      if (!*(unsigned char *)(a2 + 140)) {
        sub_100413998();
      }
      sub_100183DA0(a1, (unsigned __int16 *)(a2 + 104));
      break;
    case 3:
      uint64_t v7 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] received InfrastructureStatusUpdate event", v11, 2u);
      }
      if (!*(unsigned char *)(a2 + 72)) {
        sub_1004139F0();
      }
      sub_100184B64(a1, (int *)(a2 + 16));
      break;
    case 4:
      long long v8 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] received TimeConversionStateUpdate event", v10, 2u);
      }
      if (!*(unsigned char *)(a2 + 100)) {
        sub_100413A1C();
      }
      sub_100184E7C(a1, (int *)(a2 + 96));
      break;
    default:
      return;
  }
}

void sub_100183D78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100183DA0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100413AE4(a2, v4, v5, v6, v7, v8, v9, v10);
  }
  if (*((unsigned char *)a2 + 28))
  {
    long long v11 = *(_OWORD *)a2;
    long long v28 = *((_OWORD *)a2 + 1);
    uint64_t v12 = *(void *)(a1 + 144);
    int v14 = 5;
    LOBYTE(v15) = 0;
    char v17 = 0;
    char v18 = 0;
    char v22 = 0;
    char v23 = 0;
    char v24 = 0;
    char v25 = 0;
    char v26 = 0;
    int v29 = *((_DWORD *)a2 + 8);
    long long v27 = v11;
    char v30 = 1;
    (*(void (**)(uint64_t, int *))(*(void *)v12 + 16))(v12, &v14);
    if (v22)
    {
      if (v21 && v20 < 0) {
        operator delete(__p);
      }
    }
  }
  unsigned int v13 = *a2;
  if (v13 <= 0x1A)
  {
    if (((1 << v13) & 0x48F801C) != 0)
    {
      int v14 = 12;
      __int16 v15 = 0;
      char v16 = 0;
      char v31 = 0;
      char v32 = 0;
      char v33 = 0;
      char v34 = 0;
      char v37 = 0;
      char v38 = 0;
      char v41 = 0;
      __int16 v42 = 0;
      char v43 = 0;
      char v44 = 0;
      __int16 v45 = v13;
      char v46 = 0;
      char v47 = 0;
      char v48 = 0;
      char v49 = 0;
      if ((sub_100183388(a1, (uint64_t)&v14) & 1) == 0
        && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        sub_100413A7C();
      }
      if (v41 && v39)
      {
        char v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        if (v35)
        {
          char v36 = v35;
          operator delete(v35);
        }
      }
    }
    else if (v13 == 22 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_100413AB0();
    }
  }
}

void sub_100183FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a22 && a20 && a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100184000(unint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100004950(__p, off_100854E08[*((int *)a2 + 1)]);
    uint64_t v5 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    int v6 = *a2;
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "++ RoseScheduler::handleServiceRequestStatusUpdate (%s), ticket id: %d ++", buf, 0x12u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  int v7 = *((_DWORD *)a2 + 1);
  switch(v7)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_100413E24();
      }
      unsigned __int16 v8 = *a2;
      uint64_t v9 = *(NSObject **)(a1 + 120);
      *(void *)__p = _NSConcreteStackBlock;
      *(void *)&__p[8] = 0x40000000;
      *(void *)&__p[16] = sub_100183064;
      *(void *)&__p[24] = &unk_100854A08;
      *(void *)&__p[32] = a1;
      *(_WORD *)&__p[40] = v8;
      dispatch_async(v9, __p);
      goto LABEL_13;
    case 1:
      char v18 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] RangingDidStart", __p, 2u);
      }
      if (!sub_100189CB4(*(void *)(a1 + 128), *a2, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100413C1C();
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "RangingDidStart: Failed to update service request state to Active");
      }
      goto LABEL_39;
    case 2:
      int v14 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] RangingFailedToStart", __p, 2u);
      }
      if (!sub_100189CB4(*(void *)(a1 + 128), *a2, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100413C84();
        }
        __int16 v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v15, "RangingFailedToStart: Failed to update service request state to Inactive");
      }
      goto LABEL_43;
    case 3:
      char v16 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] RangingStopped", __p, 2u);
      }
      if (!sub_100189CB4(*(void *)(a1 + 128), *a2, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100413D54();
        }
        char v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v17, "RangingStopped: Failed to update service request state to Inactive");
      }
      goto LABEL_43;
    case 4:
      uint64_t v12 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] RequestInvalidated", __p, 2u);
      }
      if (sub_100189CB4(*(void *)(a1 + 128), *a2, 0))
      {
        int v13 = 0;
        int v11 = 1;
LABEL_44:
        int v21 = 1;
LABEL_45:
        sub_100189774(*(void *)(a1 + 128), *a2, __p);
        char v23 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          sub_100004950(buf, off_100854E08[*((int *)a2 + 1)]);
          char v24 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          int v25 = *a2;
          *(_DWORD *)int v61 = 136315394;
          char v62 = v24;
          __int16 v63 = 1024;
          int v64 = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#coex,RoseScheduler::handleServiceRequestStatusUpdate,shouldUpdateCoexProxy- event_type(%s), ticket_id(%d)", v61, 0x12u);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
        }
        if ((_BYTE)v52)
        {
          memcpy(buf, &__p[8], 0x278uLL);
          __int16 v26 = sub_10017E1C8((uint64_t)&buf[8]);
          char v27 = 9;
          if ((v26 & 0x100) == 0) {
            char v27 = 0;
          }
          int v28 = (unsigned __int16)(v26 & 0x100) >> 8;
          if (v26) {
            unsigned __int8 v29 = 5;
          }
          else {
            unsigned __int8 v29 = v27;
          }
          if (v26) {
            LOBYTE(v28) = 1;
          }
        }
        else
        {
          unsigned __int8 v29 = 0;
          LOBYTE(v28) = 0;
        }
        sub_100185E48(a1, 2, v29 | (v28 << 8));
        if (v13)
        {
          if (!sub_10018A0BC(*(void *)(a1 + 128)) && !sub_10018A1A8(*(void *)(a1 + 128))) {
            goto LABEL_72;
          }
          *(_DWORD *)__p = 1;
          __p[8] = 0;
          __p[16] = 0;
          if ((sub_100185EF0(a1, (uint64_t)__p) & 1) != 0
            || !os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_72;
          }
        }
        else
        {
          if (!v21) {
            goto LABEL_72;
          }
          if (sub_10018A0BC(*(void *)(a1 + 128))) {
            goto LABEL_72;
          }
          if (sub_10018A1A8(*(void *)(a1 + 128))) {
            goto LABEL_72;
          }
          *(_DWORD *)__p = 2;
          __p[8] = 0;
          __p[16] = 0;
          if ((sub_100185EF0(a1, (uint64_t)__p) & 1) != 0
            || !os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
          {
            goto LABEL_72;
          }
        }
        sub_100413B80();
LABEL_72:
        *(void *)&uint8_t buf[4] = *(void *)a2;
        int v30 = *((_DWORD *)a2 + 2);
        *(_DWORD *)buf = 1;
        *(_DWORD *)&buf[12] = v30;
        uint8_t buf[16] = 1;
        unsigned char buf[24] = 0;
        buf[80] = 0;
        buf[88] = 0;
        buf[112] = 0;
        buf[116] = 0;
        buf[120] = 0;
        buf[124] = 0;
        buf[160] = 0;
        (*(void (**)(void, uint8_t *))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), buf);
        if (v11)
        {
          uint64_t v31 = sub_100189F68(*(void *)(a1 + 128));
          unint64_t v32 = sub_10018A294(*(void *)(a1 + 128));
          if (!v31 && v32 <= 1 && *(unsigned char *)(a1 + 260))
          {
            char v33 = qword_1008ABDE0;
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__p = 0;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] No active service requests, Informing AOP proxy object that UCM had received a R2 GPIO trigger blanking request", __p, 2u);
              if (!*(unsigned char *)(a1 + 260)) {
                sub_10000AE44();
              }
            }
            int v34 = *(_DWORD *)(a1 + 256);
            *(_DWORD *)__p = 15;
            *(_WORD *)&__p[4] = 0;
            __p[8] = 0;
            __p[512] = 0;
            __p[520] = 0;
            __p[632] = 0;
            v51[0] = 0;
            char v54 = 0;
            v55[0] = 0;
            char v58 = 0;
            *(_WORD *)char v59 = 0;
            v59[2] = 0;
            v59[5] = 0;
            *(_WORD *)&v59[6] = 0;
            *(_DWORD *)&v59[8] = v34;
            v59[12] = 1;
            v59[16] = 0;
            v59[20] = 0;
            dispatch_time_t v35 = dispatch_time(0, 50000000);
            char v36 = *(NSObject **)(a1 + 120);
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 1174405120;
            v40[2] = sub_100185FC8;
            v40[3] = &unk_100854A28;
            v40[4] = a1;
            memcpy(v41, __p, sizeof(v41));
            sub_1001865E8((uint64_t)&v42, (uint64_t)v51);
            sub_100186684(&v46, (uint64_t)v55);
            *(_OWORD *)char v49 = *(_OWORD *)v59;
            *(void *)&v49[13] = *(void *)&v59[13];
            dispatch_after(v35, v36, v40);
            if (v48 && v46.n128_u64[1])
            {
              unint64_t v47 = v46.n128_u64[1];
              operator delete((void *)v46.n128_u64[1]);
            }
            if (v45 && v43)
            {
              char v44 = v43;
              operator delete(v43);
            }
            if (v58 && v56)
            {
              int v57 = v56;
              operator delete(v56);
            }
            if (v54 && v52)
            {
              char v53 = v52;
              operator delete(v52);
            }
          }
        }
        if (buf[80] && buf[64] && (char)buf[63] < 0) {
          operator delete(*(void **)&buf[40]);
        }
        return;
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100413DBC();
      }
      return;
    case 5:
      char v20 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] JobStart", __p, 2u);
      }
      if (!sub_100189CB4(*(void *)(a1 + 128), *a2, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100413BB4();
        }
        char v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "JobStart: Failed to update service request state to Active");
      }
LABEL_39:
      int v11 = 0;
      int v21 = 0;
      int v13 = 1;
      goto LABEL_45;
    case 6:
      char v22 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] JobStop", __p, 2u);
      }
      if (!sub_100189CB4(*(void *)(a1 + 128), *a2, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100413CEC();
        }
        char v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, "JobStop: Failed to update service request state to Inactive");
      }
LABEL_43:
      int v11 = 0;
      int v13 = 0;
      goto LABEL_44;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100413E64(v7);
      }
      char v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v37, "RoseScheduler::handleServiceRequestStatusUpdate got unexpected status update");
    case 14:
      uint64_t v10 = qword_1008ABDE0;
      int v11 = 0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_72;
      }
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] TriggerCommandUpdated", __p, 2u);
LABEL_13:
      int v11 = 0;
      goto LABEL_72;
    default:
      goto LABEL_13;
  }
}

void sub_100184A94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100184B64(uint64_t a1, int *a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100004950(__p, off_100854D30[*a2]);
    uint64_t v5 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v25[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RoseScheduler::handleRoseInfrastructureStatusUpdate, status: %s", buf, 0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  switch(*a2)
  {
    case 0:
      sub_100413F2C();
    case 1:
    case 5:
    case 6:
      atomic_store(0, (unsigned __int8 *)(a1 + 153));
      break;
    case 3:
      std::mutex::lock((std::mutex *)(a1 + 8));
      atomic_store(1u, (unsigned __int8 *)(a1 + 153));
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 160));
      std::mutex::unlock((std::mutex *)(a1 + 8));
      break;
    case 4:
      sub_100413F00();
    default:
      break;
  }
  *(_DWORD *)buf = *a2;
  sub_100175338((unsigned char *)v25 + 4, (uint64_t)(a2 + 2));
  uint64_t v28 = *((void *)a2 + 6);
  int v6 = *(_DWORD *)buf;
  if (*(_DWORD *)buf == 3)
  {
    if (*(unsigned char *)(a1 + 154))
    {
      int v6 = 3;
    }
    else
    {
      int v7 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "NB not available, Ready to Ready_UWB", (uint8_t *)__p, 2u);
      }
      int v6 = 4;
      *(_DWORD *)buf = 4;
      LODWORD(v28) = 4;
      BYTE4(v28) = 1;
    }
  }
  *(_DWORD *)(a1 + 156) = v6;
  LODWORD(__p[0]) = 2;
  BYTE4(__p[0]) = 0;
  char v9 = 0;
  int v11 = v6;
  sub_100175338(v12, (uint64_t)v25 + 4);
  uint64_t v16 = v28;
  char v17 = 1;
  char v18 = 0;
  char v19 = 0;
  char v20 = 0;
  char v21 = 0;
  char v22 = 0;
  char v23 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), __p);
  if (v17 && v15 && v14 < 0) {
    operator delete(v13);
  }
  if (v27)
  {
    if (v26 < 0) {
      operator delete(*(void **)((char *)&v25[1] + 4));
    }
  }
}

void sub_100184E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a22 && a20 && a19 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v22 - 72))
  {
    if (*(char *)(v22 - 73) < 0) {
      operator delete(*(void **)(v22 - 96));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100184E7C(uint64_t a1, int *a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a2 ? "Ready" : "NotReady";
    sub_100004950(__p, v5);
    int v6 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    uint64_t v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RoseScheduler::handleTimeConversionStateUpdate (%s)", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  LODWORD(__p[0]) = 4;
  BYTE4(__p[0]) = 0;
  char v8 = 0;
  char v10 = 0;
  char v14 = 0;
  char v15 = 0;
  char v16 = 0;
  int v17 = *a2;
  char v18 = 1;
  char v19 = 0;
  char v20 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), __p);
  if (v14 && v13 && v12 < 0) {
    operator delete(v11);
  }
}

void sub_100185000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
}

void sub_100185034(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal RoseBluetoothEvent", v6, 2u);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      if (!*(unsigned char *)(a2 + 18)) {
        sub_100413F58();
      }
      sub_1001850F8(a1, (unsigned __int16 *)(a2 + 12));
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100413F84();
  }
}

void sub_1001850F8(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2 = *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16);
  int v3 = 1;
  unint64_t v4 = v2;
  char v5 = 1;
  if ((sub_10018636C(a1, (uint64_t)&v3) & 1) == 0 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100413FB8();
  }
}

void sub_100185198(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal RoseCoexEvent", (uint8_t *)&v19, 2u);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  switch(v5)
  {
    case 0u:
    case 1u:
    case 4u:
      uint64_t v6 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        if (v5 > 4) {
          int v7 = "N/A";
        }
        else {
          int v7 = off_100854D68[v5];
        }
        int v19 = 136315138;
        uint64_t v20 = (uint64_t)v7;
        char v14 = "Not expected to handle coex event %s";
        char v15 = v6;
        goto LABEL_26;
      }
      break;
    case 2u:
      char v10 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal RoseCoexEvent: R2ChannelToTriggerGpioBlankingChanged", (uint8_t *)&v19, 2u);
      }
      *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 260) = 1;
      uint64_t v11 = sub_10018A334(*(void *)(a1 + 128));
      char v12 = qword_1008ABDE0;
      BOOL v13 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v13)
        {
          int v19 = 134217984;
          uint64_t v20 = v11;
          char v14 = "[AP Scheduler] handleEventInternal Service requests count = %zu, cannot send a set config now to trigger GPIO blanking.";
          char v15 = v12;
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v19, 0xCu);
        }
      }
      else
      {
        if (v13)
        {
          LOWORD(v19) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal Informing AOP proxy object that UCM had received a R2 GPIO trigger blanking request", (uint8_t *)&v19, 2u);
        }
        if (!*(unsigned char *)(a1 + 260)) {
          sub_100413FEC();
        }
        int v16 = *(_DWORD *)(a1 + 256);
        int v19 = 15;
        LOWORD(v20) = 0;
        BYTE4(v20) = 0;
        char v21 = 0;
        char v22 = 0;
        char v23 = 0;
        char v24 = 0;
        char v27 = 0;
        char v28 = 0;
        char v31 = 0;
        __int16 v32 = 0;
        char v33 = 0;
        char v34 = 0;
        __int16 v35 = 0;
        int v36 = v16;
        char v37 = 1;
        LOBYTE(v38) = 0;
        char v39 = 0;
        if (sub_100183388(a1, (uint64_t)&v19))
        {
          if (!*(unsigned char *)(a1 + 260)) {
            sub_10000AE44();
          }
          *(_DWORD *)(a1 + 264) = *(_DWORD *)(a1 + 256);
        }
        else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
        {
          sub_100414018();
        }
        if (*(unsigned char *)(a1 + 260)) {
          *(unsigned char *)(a1 + 260) = 0;
        }
        if (v31 && __p)
        {
          int v30 = __p;
          operator delete(__p);
        }
        if (v27 && v25)
        {
          char v26 = v25;
          operator delete(v25);
        }
      }
      break;
    case 3u:
      char v8 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal RoseCoexEvent: R2NbChannelIdxToTriggerGpioBlankingChanged", (uint8_t *)&v19, 2u);
      }
      if (*(_DWORD *)(a2 + 16) == 2 && *(unsigned char *)(a2 + 22) && *(unsigned char *)(a2 + 26))
      {
        if (*(_DWORD *)(a1 + 264) == 2)
        {
          int v9 = *(unsigned __int16 *)(a2 + 20) | (*(unsigned __int16 *)(a2 + 24) << 16);
          int v19 = 16;
          LOWORD(v20) = 0;
          BYTE4(v20) = 0;
          char v21 = 0;
          char v22 = 0;
          char v23 = 0;
          char v24 = 0;
          char v27 = 0;
          char v28 = 0;
          char v31 = 0;
          __int16 v32 = 0;
          char v33 = 0;
          char v34 = 0;
          __int16 v35 = 0;
          LOBYTE(v36) = 0;
          char v37 = 0;
          int v38 = v9;
          char v39 = 1;
          if ((sub_100183388(a1, (uint64_t)&v19) & 1) == 0
            && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
          {
            sub_10041404C();
          }
          sub_100183548((uint64_t)&v19);
        }
        else
        {
          int v17 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v19) = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "GPIO blanking was not triggered on NB, Caching NB channel indices to request blanking when pending set config request goes through.", (uint8_t *)&v19, 2u);
            if (!*(unsigned char *)(a2 + 22)) {
              sub_10000AE44();
            }
          }
          if (!*(unsigned char *)(a2 + 26)) {
            sub_10000AE44();
          }
          int v18 = *(unsigned __int16 *)(a2 + 20) | (*(unsigned __int16 *)(a2 + 24) << 16);
          if (!*(unsigned char *)(a1 + 272)) {
            *(unsigned char *)(a1 + 272) = 1;
          }
          *(_DWORD *)(a1 + 268) = v18;
        }
      }
      else if (*(unsigned char *)(a1 + 272))
      {
        *(unsigned char *)(a1 + 272) = 0;
      }
      break;
    default:
      return;
  }
}

void sub_10018561C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100185650()
{
  v0 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "[AP Scheduler] handleEventInternal RoseSecureElementEvent", v1, 2u);
  }
}

void sub_1001856B8(uint64_t a1, int *a2)
{
  unint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a2;
    if (v5 > 5) {
      uint64_t v6 = "Unknown";
    }
    else {
      uint64_t v6 = off_100854D90[v5];
    }
    int v7 = v33;
    sub_100004950(v33, v6);
    if (v36 < 0) {
      int v7 = *(uint8_t **)v33;
    }
    uint64_t v8 = a2[1];
    if (v8 > 8) {
      int v9 = "Unknown";
    }
    else {
      int v9 = off_100854DC0[v8];
    }
    sub_100004950(&__p, v9);
    if (SHIBYTE(v29) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)buf = 136315394;
    std::random_device v70 = v7;
    __int16 v71 = 2080;
    char v72 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[RegulatoryEvent] type: %s, reason: %s", buf, 0x16u);
    if (SHIBYTE(v29) < 0) {
      operator delete(__p);
    }
    if (v36 < 0) {
      operator delete(*(void **)v33);
    }
  }
  switch(*a2)
  {
    case 0:
      if (!*((unsigned char *)a2 + 8)) {
        sub_1004140AC();
      }
      unsigned int v11 = a2[1] - 1;
      if (v11 > 6) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = *(_DWORD *)&asc_1004B6EC8[4 * v11];
      }
      sub_10018672C((uint64_t)v33, v12);
      sub_100183388(a1, (uint64_t)v33);
      goto LABEL_44;
    case 1:
      if (!*((unsigned char *)a2 + 8)) {
        sub_100414080();
      }
      *(_DWORD *)char v33 = 10;
      *(_WORD *)&uint8_t v33[4] = 0;
      char v34 = 0;
      char v51 = 0;
      char v52 = 0;
      char v53 = 0;
      char v54 = 0;
      char v57 = 0;
      char v58 = 0;
      char v61 = 0;
      memset(v62, 0, 3);
      char v63 = 0;
      __int16 v64 = 0;
      char v65 = 0;
      char v66 = 0;
      char v67 = 0;
      char v68 = 0;
      sub_100183388(a1, (uint64_t)v33);
      goto LABEL_44;
    case 2:
      if (*((unsigned char *)a2 + 8)) {
        goto LABEL_25;
      }
      goto LABEL_50;
    case 3:
      char v15 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[RegulatoryEvent] Narrowband disallowed", v33, 2u);
      }
      *(unsigned char *)(a1 + 154) = 0;
      int v14 = 1;
      goto LABEL_51;
    case 4:
      BOOL v13 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[RegulatoryEvent] Narrowband allowed", v33, 2u);
      }
      int v14 = 1;
      *(unsigned char *)(a1 + 154) = 1;
      goto LABEL_51;
    case 5:
      int v16 = a2[1];
      if (*((unsigned char *)a2 + 8)) {
        BOOL v17 = v16 == 8;
      }
      else {
        BOOL v17 = 0;
      }
      if (v17)
      {
        if (!*((unsigned char *)a2 + 21))
        {
LABEL_50:
          int v14 = 0;
          goto LABEL_51;
        }
        char v19 = *((unsigned char *)a2 + 20);
        *(_DWORD *)char v33 = 9;
        *(_WORD *)&uint8_t v33[4] = 0;
        char v34 = 0;
        char v51 = 0;
        char v52 = 0;
        char v53 = 0;
        char v54 = 0;
        char v57 = 0;
        char v58 = 0;
        char v61 = 0;
        LOBYTE(v62[0]) = v19;
        *(_WORD *)((char *)v62 + 1) = 1;
        char v63 = 0;
        __int16 v64 = 0;
        char v65 = 0;
        char v66 = 0;
        char v67 = 0;
        char v68 = 0;
        sub_100183388(a1, (uint64_t)v33);
LABEL_44:
        if (v61 && v59)
        {
          unsigned __int8 v60 = v59;
          operator delete(v59);
        }
        if (v57 && v55)
        {
          int v56 = v55;
          operator delete(v55);
        }
        goto LABEL_50;
      }
      int v14 = 0;
      if (*((unsigned char *)a2 + 8) && v16 == 3)
      {
        int v18 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v33 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "NBConfigurationChanged due to Country Chagned", v33, 2u);
        }
LABEL_25:
        *(_DWORD *)char v33 = 11;
        *(_WORD *)&uint8_t v33[4] = 0;
        char v34 = 0;
        char v51 = 0;
        char v52 = 0;
        char v53 = 0;
        char v54 = 0;
        char v57 = 0;
        char v58 = 0;
        char v61 = 0;
        memset(v62, 0, 3);
        char v63 = 0;
        __int16 v64 = 0;
        char v65 = 0;
        char v66 = 0;
        char v67 = 0;
        char v68 = 0;
        sub_100183388(a1, (uint64_t)v33);
        goto LABEL_44;
      }
LABEL_51:
      uint64_t v20 = *(void *)(a1 + 144);
      *(_DWORD *)char v33 = 3;
      uint8_t v33[4] = 0;
      char v35 = 0;
      LOBYTE(v37) = 0;
      char v43 = 0;
      uint64_t v45 = *((void *)a2 + 2);
      long long v44 = *(_OWORD *)a2;
      char v46 = 1;
      char v47 = 0;
      char v48 = 0;
      char v49 = 0;
      char v50 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v20 + 16))(v20, v33);
      if (v43 && v41 && v40 < 0) {
        operator delete(v39);
      }
      if (!v14) {
        return;
      }
      int v21 = *(_DWORD *)(a1 + 156);
      if (v21 == 3)
      {
        if (*(unsigned char *)(a1 + 154)) {
          return;
        }
        int v25 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v33 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Ready is switched to Ready_UWB because NB is not available", v33, 2u);
        }
        uint64_t v23 = 0x100000004;
        int v24 = 4;
      }
      else
      {
        if (v21 != 4 || !*(unsigned char *)(a1 + 154)) {
          return;
        }
        char v22 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v33 = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Ready_UWB is switched to Ready because NB is available", v33, 2u);
        }
        uint64_t v23 = 0;
        int v24 = 3;
      }
      *(_DWORD *)(a1 + 156) = v24;
      LODWORD(__p) = v24;
      v28[0] = 0;
      char v31 = 0;
      uint64_t v32 = v23;
      uint64_t v26 = *(void *)(a1 + 144);
      *(_DWORD *)char v33 = 2;
      uint8_t v33[4] = 0;
      char v35 = 0;
      int v37 = v24;
      sub_100175338(v38, (uint64_t)v28);
      uint64_t v42 = v32;
      char v43 = 1;
      LOBYTE(v44) = 0;
      char v46 = 0;
      char v47 = 0;
      char v48 = 0;
      char v49 = 0;
      char v50 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v26 + 16))(v26, v33);
      if (v43 && v41 && v40 < 0) {
        operator delete(v39);
      }
      if (v31)
      {
        if (v30 < 0) {
          operator delete(v29);
        }
      }
      return;
    default:
      goto LABEL_50;
  }
}

void sub_100185D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36)
{
}

void *sub_100185E34@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854E08[a1]);
}

unint64_t sub_100185E48(unint64_t result, int a2, __int16 a3)
{
  uint64_t v3 = result;
  LOBYTE(v6) = 0;
  char v8 = 0;
  __int16 v9 = 0;
  if (a2 == 2)
  {
    __n128 result = *(void *)(result + 128);
    if (!result) {
      return result;
    }
    if (HIBYTE(a3)) {
      __int16 v9 = a3 | 0x100;
    }
    int v5 = 2;
    uint64_t v6 = sub_10018A33C(result);
    int v7 = v4;
    char v8 = 1;
    return sub_100186444(v3, (uint64_t)&v5);
  }
  if (a2 != 1) {
    sub_1004140D8();
  }
  if (HIBYTE(a3))
  {
    int v5 = 1;
    __int16 v9 = a3 | 0x100;
    return sub_100186444(v3, (uint64_t)&v5);
  }
  return result;
}

uint64_t sub_100185EF0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if (v2)
  {
    uint64_t v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v7 = *(void *)(a1 + 80);
    if (v7)
    {
      uint64_t v3 = sub_1001870BC(v7, a2);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_10041391C();
      }
      uint64_t v3 = 0;
    }
    std::mutex::unlock(v6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004138E8();
    }
    return 0;
  }
  return v3;
}

void sub_100185FB4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100185FC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_10018A334(*(void *)(v2 + 128));
  if (v3)
  {
    uint64_t v4 = v3;
    int v5 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 134217984;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] Service requests count = %zu, cannot send a set config now to trigger GPIO blanking.", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    int v6 = sub_100183388(v2, a1 + 40);
    if (!*(unsigned char *)(a1 + 788)) {
      sub_100414104();
    }
    int v7 = *(_DWORD *)(a1 + 784);
    sub_1001860E8(v2, v6, v7);
  }
}

void sub_1001860E8(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = qword_1008ABDE0;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Successfully sent set config to trigger GPIO blanking on UCM event", (uint8_t *)&v11, 2u);
    }
    *(_DWORD *)(a1 + 264) = a3;
    if (!*(unsigned char *)(a1 + 260)) {
      sub_10000AE44();
    }
    if (*(_DWORD *)(a1 + 256) == a3)
    {
      *(unsigned char *)(a1 + 260) = 0;
      if (a3 == 2 && *(unsigned char *)(a1 + 272))
      {
        int v6 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = *(unsigned __int16 *)(a1 + 268);
          int v8 = *(unsigned __int16 *)(a1 + 270);
          int v11 = 67109376;
          int v12 = v7;
          __int16 v13 = 1024;
          int v14 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[RoseScheduler] Sent setConfig to trigger GPIO blanking on NB, Informing AOP proxy object that UCM had received blanking request for NB channel indices %d -> %d", (uint8_t *)&v11, 0xEu);
          if (!*(unsigned char *)(a1 + 272)) {
            sub_10000AE44();
          }
        }
        int v9 = *(_DWORD *)(a1 + 268);
        int v11 = 16;
        LOWORD(v12) = 0;
        LOBYTE(v13) = 0;
        char v15 = 0;
        char v16 = 0;
        char v17 = 0;
        char v18 = 0;
        char v21 = 0;
        char v22 = 0;
        char v25 = 0;
        __int16 v26 = 0;
        char v27 = 0;
        char v28 = 0;
        __int16 v29 = 0;
        char v30 = 0;
        char v31 = 0;
        int v32 = v9;
        char v33 = 1;
        if ((sub_100183388(a1, (uint64_t)&v11) & 1) == 0
          && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
        {
          sub_10041404C();
        }
        if (*(unsigned char *)(a1 + 272)) {
          *(unsigned char *)(a1 + 272) = 0;
        }
        if (v25 && __p)
        {
          int v24 = __p;
          operator delete(__p);
        }
        if (v21)
        {
          if (v19)
          {
            uint64_t v20 = v19;
            operator delete(v19);
          }
        }
      }
    }
    else
    {
      char v10 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Potentially got a new UCM while sending the previous set config, not resetting pending channel", (uint8_t *)&v11, 2u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100414130();
  }
}

void sub_100186350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10018636C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if (v2)
  {
    int v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7)
    {
      uint64_t v3 = sub_100187E1C(v7, a2);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_10041391C();
      }
      uint64_t v3 = 0;
    }
    std::mutex::unlock(v6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004138E8();
    }
    return 0;
  }
  return v3;
}

void sub_100186430(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100186444(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 152));
  if (v2)
  {
    int v6 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    uint64_t v7 = *(void *)(a1 + 88);
    if (v7)
    {
      uint64_t v3 = sub_100166E50(v7, a2);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_10041391C();
      }
      uint64_t v3 = 0;
    }
    std::mutex::unlock(v6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004138E8();
    }
    return 0;
  }
  return v3;
}

void sub_100186508(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100186520(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 6;
  *(_WORD *)(a1 + 4) = *(_WORD *)a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(unsigned char *)(a1 + 640) = 0;
  *(unsigned char *)(a1 + 672) = 0;
  *(_WORD *)(a1 + 680) = *(_WORD *)a2;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 688) = 0;
  sub_10016D488((void *)(a1 + 688), *(const void **)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 16) - *(void *)(a2 + 8));
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 728) = 1;
  *(_WORD *)(a1 + 736) = 0;
  *(unsigned char *)(a1 + 738) = 0;
  *(unsigned char *)(a1 + 741) = 0;
  *(_WORD *)(a1 + 742) = 0;
  *(unsigned char *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 748) = 0;
  *(unsigned char *)(a1 + 752) = 0;
  *(unsigned char *)(a1 + 756) = 0;
  return a1;
}

void sub_1001865CC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 672)) {
    sub_100414164(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001865E8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  sub_100186634((void *)a1, a2);
  return a1;
}

void sub_100186618(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32)) {
    sub_10041417C(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100186634(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    unsigned __int8 v2 = result;
    *(_DWORD *)__n128 result = *(_DWORD *)a2;
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
    __n128 result = sub_10016D488(result + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 16) - *(void *)(a2 + 8));
    *((unsigned char *)v2 + 32) = 1;
  }
  return result;
}

__n128 *sub_100186684(__n128 *a1, uint64_t a2)
{
  a1->n128_u8[0] = 0;
  a1[3].n128_u8[0] = 0;
  sub_1001866D0(a1, a2);
  return a1;
}

void sub_1001866B4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48)) {
    sub_10041417C(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1001866D0(__n128 *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48))
  {
    a1->n128_u16[0] = *(_WORD *)a2;
    a1[1].n128_u64[0] = 0;
    a1[1].n128_u64[1] = 0;
    a1->n128_u64[1] = 0;
    sub_10016D488(&a1->n128_u64[1], *(const void **)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 16) - *(void *)(a2 + 8));
    __n128 result = *(__n128 *)(a2 + 32);
    a1[2] = result;
    a1[3].n128_u8[0] = 1;
  }
  return result;
}

uint64_t sub_10018672C(uint64_t result, unsigned int a2)
{
  *(_DWORD *)__n128 result = a2;
  *(_WORD *)(result + 4) = 0;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 512) = 0;
  *(unsigned char *)(result + 520) = 0;
  *(unsigned char *)(result + 632) = 0;
  *(unsigned char *)(result + 640) = 0;
  *(unsigned char *)(result + 672) = 0;
  *(unsigned char *)(result + 680) = 0;
  *(unsigned char *)(result + 728) = 0;
  *(_WORD *)(result + 736) = 0;
  *(unsigned char *)(result + 738) = 0;
  *(unsigned char *)(result + 741) = 0;
  *(_WORD *)(result + 742) = 0;
  *(unsigned char *)(result + 744) = 0;
  *(unsigned char *)(result + 748) = 0;
  *(unsigned char *)(result + 752) = 0;
  *(unsigned char *)(result + 756) = 0;
  if (a2 > 0xE || ((1 << a2) & 0x6D00) == 0) {
    __assert_rtn("AOPRoseCommandMessage", "AOPRoseCommandMessage.h", 68, "message_type == AOPRoseCommandMessageType::SystemOn || message_type == AOPRoseCommandMessageType::RefreshConfiguration || message_type == AOPRoseCommandMessageType::LPEMEnable || message_type == AOPRoseCommandMessageType::SystemOff_AirplaneMode || message_type == AOPRoseCommandMessageType::SystemOff_RestrictedRegion");
  }
  return result;
}

void sub_1001867E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(a10 + 728)) {
    sub_100413950(a10);
  }
  sub_100414190(v10, a10);
  _Unwind_Resume(a1);
}

void sub_10018680C(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[ProxyObjectBase] Given nullptr event consumer.");
  }
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(void *)(a1 + 8) = a2;

  std::mutex::unlock(v4);
}

void sub_100186898(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001868AC(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[2];
  if (!v3) {
    sub_1004141AC();
  }
  sub_10018680C(v3, a1);
  uint64_t v5 = a2[3];
  if (!v5) {
    sub_1004141AC();
  }
  sub_10018680C(v5, a1);
  uint64_t v6 = a2[4];
  if (!v6) {
    sub_1004141AC();
  }
  sub_10018680C(v6, a1);
  uint64_t v7 = a2[5];
  if (!v7) {
    sub_1004141AC();
  }
  sub_10018680C(v7, a1);
  return 1;
}

void sub_100186924(uint64_t a1)
{
}

__n128 sub_100186934(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_1001752CC(a1 + 56, a2 + 56);
  __n128 result = *(__n128 *)(a2 + 120);
  long long v5 = *(_OWORD *)(a2 + 136);
  long long v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a1 + 152) = v6;
  *(_OWORD *)(a1 + 136) = v5;
  *(__n128 *)(a1 + 120) = result;
  return result;
}

uint64_t sub_100186994(uint64_t a1)
{
  return sub_1001753EC(a1 + 56);
}

void sub_10018699C(uint64_t a1)
{
}

void sub_1001869AC(uint64_t a1)
{
}

void sub_1001869BC(uint64_t a1)
{
}

void sub_1001869D4()
{
}

void *sub_1001869E8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_100854B40;
  result[1] = v3;
  return result;
}

uint64_t sub_100186A30(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100854B40;
  a2[1] = v2;
  return result;
}

uint64_t sub_100186A5C(uint64_t a1, uint64_t a2)
{
  return sub_100183388(*(void *)(a1 + 8), a2);
}

uint64_t sub_100186A64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100186AA4()
{
}

void *sub_100186AB0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100186B38()
{
}

void *sub_100186B4C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_100854BD0;
  result[1] = v3;
  return result;
}

uint64_t sub_100186B94(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100854BD0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100186BC0(uint64_t a1)
{
  return sub_100186C14(*(void *)(a1 + 8));
}

uint64_t sub_100186BC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100186C08()
{
}

uint64_t sub_100186C14(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 152));
  if (v1)
  {
    uint64_t v4 = (std::mutex *)(a1 + 8);
    std::mutex::lock((std::mutex *)(a1 + 8));
    if (*(void *)(a1 + 104))
    {
      uint64_t v2 = sub_10018ADD0();
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_10041391C();
      }
      uint64_t v2 = 0;
    }
    std::mutex::unlock(v4);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004138E8();
    }
    return 0;
  }
  return v2;
}

void sub_100186CD8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_100186CEC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100186D70(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 696) = __p;
  operator delete(__p);
}

void sub_100186D78(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = __p;
  operator delete(__p);
}

void sub_100186D8C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_error_impl(a1, v13, OS_LOG_TYPE_ERROR, a4, &buf, 0xCu);
}

void *sub_100186DC0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854EC0[a1]);
}

void *sub_100186DD4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854F18[a1]);
}

void *sub_100186DE8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854F60[a1]);
}

void *sub_100186DFC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854F80[a1]);
}

double sub_100186E10(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = off_100854E90;
  return result;
}

uint64_t sub_100186E50(uint64_t a1)
{
  *(void *)a1 = off_100853108;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_100186E94(uint64_t a1)
{
  *(void *)a1 = off_100853108;
  std::mutex::~mutex((std::mutex *)(a1 + 24));

  operator delete();
}

void sub_100186EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, a2);
  }

  std::mutex::unlock(v4);
}

void sub_100186F74(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_100186F88@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100854FF8[a1]);
}

void *sub_100186F9C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855050[a1]);
}

void *sub_100186FB0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855098[a1]);
}

void *sub_100186FC4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008550B8[a1]);
}

double sub_100186FD8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)a1 = off_100854FB0;
  return result;
}

uint64_t sub_100187014(uint64_t a1)
{
  *(void *)a1 = off_100853108;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_100187058(uint64_t a1)
{
  *(void *)a1 = off_100853108;
  std::mutex::~mutex((std::mutex *)(a1 + 24));

  operator delete();
}

uint64_t sub_1001870BC(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    sub_1004141D8();
  }
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_10018713C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100187150(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if (v2 == 1)
  {
    if (!*(void *)(a1 + 88)) {
      sub_100414204();
    }
    if (!*(unsigned char *)(a2 + 192)) {
      sub_100414230();
    }
    std::mutex::lock((std::mutex *)(a1 + 24));
    if (!*(unsigned char *)(a2 + 192)) {
      sub_10000AE44();
    }
    uint64_t v6 = *(void *)(a1 + 88);
    long long v7 = *(_OWORD *)(a2 + 96);
    v13[4] = *(_OWORD *)(a2 + 80);
    v13[5] = v7;
    long long v8 = *(_OWORD *)(a2 + 176);
    long long v9 = *(_OWORD *)(a2 + 144);
    v13[9] = *(_OWORD *)(a2 + 160);
    v13[10] = v8;
    long long v10 = *(_OWORD *)(a2 + 128);
    v13[6] = *(_OWORD *)(a2 + 112);
    v13[7] = v10;
    v13[8] = v9;
    long long v11 = *(_OWORD *)(a2 + 64);
    v13[2] = *(_OWORD *)(a2 + 48);
    v13[3] = v11;
    long long v12 = *(_OWORD *)(a2 + 32);
    v13[0] = *(_OWORD *)(a2 + 16);
    v13[1] = v12;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v6 + 24))(v6, v13);
    std::mutex::unlock((std::mutex *)(a1 + 24));
  }
  else if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MotionProxyObject] Ingest event of unspecified type.");
  }
}

void sub_100187268(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_10018728C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855140[a1]);
}

void *sub_1001872A0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855198[a1]);
}

void *sub_1001872B4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008551E0[a1]);
}

void *sub_1001872C8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855200[a1]);
}

void *sub_1001872DC(void *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *double result = off_1008550E8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = a3;
  return result;
}

uint64_t sub_100187318(uint64_t a1, __int16 *a2, int a3, uint64_t a4, uint64_t a5)
{
  switch(a3)
  {
    case 0:
      sub_100187B24((uint64_t)v19, a4);
      uint64_t v7 = sub_100187BBC((uint64_t)v18, a5);
      long long v8 = v19;
      LOBYTE(a2) = sub_10018764C(v7, a2, (uint64_t)v19);
      long long v9 = v18;
      goto LABEL_6;
    case 1:
      sub_100187B24((uint64_t)v17, a4);
      uint64_t v10 = sub_100187BBC((uint64_t)v16, a5);
      long long v8 = v17;
      LOBYTE(a2) = sub_100187788(v10, a2, (uint64_t)v17);
      long long v9 = v16;
      goto LABEL_6;
    case 2:
      sub_100187B24((uint64_t)v15, a4);
      uint64_t v11 = sub_100187BBC((uint64_t)v14, a5);
      long long v8 = v15;
      LOBYTE(a2) = sub_1001878F4(v11, a2, (uint64_t)v15);
      long long v9 = v14;
      goto LABEL_6;
    case 3:
      sub_100187B24((uint64_t)v21, a4);
      uint64_t v12 = sub_100187BBC((uint64_t)v20, a5);
      long long v8 = v21;
      LOBYTE(a2) = sub_100187514(v12, a2, (uint64_t)v21);
      long long v9 = v20;
LABEL_6:
      sub_100186CEC(v9);
      sub_100186AB0(v8);
      break;
    default:
      return a2 & 1;
  }
  return a2 & 1;
}

void sub_100187484(_Unwind_Exception *a1)
{
  sub_100186CEC((void *)(v1 - 104));
  sub_100186AB0((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_100187514(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4 = *a2;
  int v8 = 4;
  __int16 v9 = v4;
  memcpy(v10, a2 + 4, 0x1F8uLL);
  v10[504] = 1;
  v10[512] = 0;
  v10[624] = 0;
  v10[632] = 0;
  char v13 = 0;
  char v14 = 0;
  char v17 = 0;
  __int16 v18 = 0;
  char v19 = 0;
  char v20 = 0;
  __int16 v21 = 0;
  char v22 = 0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  uint64_t v5 = *(void *)(a3 + 24);
  if (!v5) {
    sub_100027894();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 48))(v5, &v8);
  if (v17 && __p)
  {
    char v16 = __p;
    operator delete(__p);
  }
  if (v13 && v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  return v6;
}

void sub_100187638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10018764C(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4 = *a2;
  int v8 = 1;
  __int16 v9 = v4;
  memcpy(v10, a2 + 4, 0x1F8uLL);
  v10[504] = 1;
  v10[512] = 0;
  v10[624] = 0;
  v10[632] = 0;
  char v13 = 0;
  char v14 = 0;
  char v17 = 0;
  __int16 v18 = 0;
  char v19 = 0;
  char v20 = 0;
  __int16 v21 = 0;
  char v22 = 0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  uint64_t v5 = *(void *)(a3 + 24);
  if (!v5) {
    sub_100027894();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 48))(v5, &v8);
  if (v17 && __p)
  {
    char v16 = __p;
    operator delete(__p);
  }
  if (v13 && v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  return v6;
}

void sub_100187774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100187788(uint64_t a1, __int16 *a2, uint64_t a3)
{
  if (!*((unsigned char *)a2 + 624)) {
    sub_10000AE44();
  }
  long long v4 = *((_OWORD *)a2 + 37);
  long long v18 = *((_OWORD *)a2 + 36);
  long long v19 = v4;
  long long v20 = *((_OWORD *)a2 + 38);
  long long v5 = *((_OWORD *)a2 + 33);
  long long v14 = *((_OWORD *)a2 + 32);
  long long v15 = v5;
  long long v6 = *((_OWORD *)a2 + 35);
  long long v16 = *((_OWORD *)a2 + 34);
  long long v17 = v6;
  __int16 v7 = *a2;
  int v11 = 2;
  __int16 v12 = v7;
  memcpy(v13, a2 + 4, 0x1F8uLL);
  v13[504] = 1;
  char v21 = 1;
  char v22 = 0;
  char v25 = 0;
  char v26 = 0;
  char v29 = 0;
  __int16 v30 = 0;
  char v31 = 0;
  char v32 = 0;
  __int16 v33 = 0;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  char v37 = 0;
  uint64_t v8 = *(void *)(a3 + 24);
  if (!v8) {
    sub_100027894();
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v8 + 48))(v8, &v11);
  if (v29 && __p)
  {
    char v28 = __p;
    operator delete(__p);
  }
  if (v25 && v23)
  {
    char v24 = v23;
    operator delete(v23);
  }
  return v9;
}

void sub_1001878E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1001878F4(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4 = *a2;
  int v8 = 3;
  __int16 v9 = v4;
  memcpy(v10, a2 + 4, 0x1F8uLL);
  v10[504] = 1;
  v10[512] = 0;
  v10[624] = 0;
  v10[632] = 0;
  char v13 = 0;
  char v14 = 0;
  char v17 = 0;
  __int16 v18 = 0;
  char v19 = 0;
  char v20 = 0;
  __int16 v21 = 0;
  char v22 = 0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  uint64_t v5 = *(void *)(a3 + 24);
  if (!v5) {
    sub_100027894();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 48))(v5, &v8);
  if (v17 && __p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
  if (v13 && v11)
  {
    __int16 v12 = v11;
    operator delete(v11);
  }
  return v6;
}

void sub_100187A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100187A2C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) == 2 && *(unsigned char *)(a2 + 56) == 0) {
    sub_10041425C();
  }
}

void *sub_100187A58(void *a1)
{
  *a1 = off_1008550E8;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_100187AA4(void *a1)
{
  *a1 = off_1008550E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

uint64_t sub_100187B24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100187BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100187C54@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855260[a1]);
}

void *sub_100187C68@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008552B8[a1]);
}

void *sub_100187C7C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855300[a1]);
}

void *sub_100187C90@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855320[a1]);
}

double sub_100187CA4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)a1 = off_100855230;
  return result;
}

uint64_t sub_100187CE0(uint64_t a1)
{
  *(void *)a1 = off_100853108;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_100187D24(uint64_t a1)
{
  *(void *)a1 = off_100853108;
  std::mutex::~mutex((std::mutex *)(a1 + 24));

  operator delete();
}

uint64_t sub_100187D88(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    sub_100414288();
  }
  __int16 v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_100187E08(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100187E1C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    sub_1004142B4();
  }
  __int16 v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_100187E9C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100187EB0(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 8)) {
    sub_1004142E0();
  }
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  sub_1001752CC((uint64_t)&v7, (uint64_t)(a2 + 2));
  long long v4 = *((_OWORD *)a2 + 6);
  long long v12 = *((_OWORD *)a2 + 5);
  long long v13 = v4;
  v14[0] = *((_OWORD *)a2 + 7);
  *(_OWORD *)((char *)v14 + 13) = *(_OWORD *)((char *)a2 + 125);
  std::mutex::lock((std::mutex *)(a1 + 24));
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &v5);
  std::mutex::unlock((std::mutex *)(a1 + 24));
  if (v11 && v10 && v9 < 0) {
    operator delete(__p);
  }
}

void sub_100187F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21)
{
  std::mutex::unlock(v21);
  if (a21 && a19 && a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100187FBC(uint64_t a1, int *a2)
{
  if (!*(void *)(a1 + 88)) {
    sub_10041430C();
  }
  long long v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 88);
  int v13 = *a2;
  sub_1001751A0(v14, (uint64_t)(a2 + 2));
  long long v6 = *(_OWORD *)(a2 + 186);
  long long v25 = *(_OWORD *)(a2 + 182);
  long long v26 = v6;
  long long v7 = *(_OWORD *)(a2 + 194);
  long long v27 = *(_OWORD *)(a2 + 190);
  long long v28 = v7;
  long long v8 = *(_OWORD *)(a2 + 170);
  long long v21 = *(_OWORD *)(a2 + 166);
  long long v22 = v8;
  long long v9 = *(_OWORD *)(a2 + 178);
  long long v23 = *(_OWORD *)(a2 + 174);
  long long v24 = v9;
  long long v10 = *(_OWORD *)(a2 + 154);
  long long v17 = *(_OWORD *)(a2 + 150);
  long long v18 = v10;
  long long v11 = *(_OWORD *)(a2 + 162);
  long long v19 = *(_OWORD *)(a2 + 158);
  long long v20 = v11;
  long long v12 = *(_OWORD *)(a2 + 146);
  long long v15 = *(_OWORD *)(a2 + 142);
  long long v16 = v12;
  sub_1001881DC(v29, (uint64_t)(a2 + 198));
  memcpy(v30, a2 + 218, sizeof(v30));
  sub_1001751F8(v31, (__n128 *)(a2 + 302));
  memcpy(v35, a2 + 332, sizeof(v35));
  (*(void (**)(uint64_t, int *))(*(void *)v5 + 16))(v5, &v13);
  if (v34 && __p)
  {
    __int16 v33 = __p;
    operator delete(__p);
  }
  sub_1001882E8((uint64_t)v29);
  sub_10015DC28((uint64_t)v14);
  std::mutex::unlock(v4);
}

void sub_100188144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100188190((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100188190(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1320))
  {
    int v2 = *(void **)(a1 + 1280);
    if (v2)
    {
      *(void *)(a1 + 1288) = v2;
      operator delete(v2);
    }
  }
  sub_1001882E8(a1 + 792);
  sub_10015DC28(a1 + 8);
  return a1;
}

unsigned char *sub_1001881DC(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[72] = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    sub_100188234((uint64_t)a1, (long long *)a2);
    a1[72] = 1;
  }
  return a1;
}

void sub_100188220(_Unwind_Exception *a1)
{
  sub_1001882E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100188234(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10016D19C((void *)(a1 + 24), *((__int16 **)a2 + 3), *((__int16 **)a2 + 4), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_10016D82C((void *)(a1 + 48), *((void *)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 5);
  return a1;
}

void sub_1001882D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10016D794((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001882E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = (void **)(a1 + 48);
    sub_10016D6F0(&v3);
    uint64_t v3 = (void **)(a1 + 24);
    sub_10016D794(&v3);
  }
  return a1;
}

void *sub_10018833C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855340[a1]);
}

void *sub_100188350@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855398[a1]);
}

void *sub_100188364@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008553E0[a1]);
}

void *sub_100188378@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855400[a1]);
}

void sub_10018838C(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 5) = 0;
  long long v15 = (unsigned char *)(a1 + 5);
  *(unsigned char *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = 1;
  int v2 = +[NSUserDefaults standardUserDefaults];
  [v2 dictionaryRepresentation];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v4)
  {
    int v6 = 1;
    uint64_t v7 = *(void *)v19;
    *(void *)&long long v5 = 136315394;
    long long v14 = v5;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v3);
        }
        long long v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if ([v9 isEqualToString:@"CheckFPSNRsOkForSensorFusion"])
          {
            *(unsigned char *)(a1 + 4) = [v2 BOOLForKey:@"CheckFPSNRsOkForSensorFusion"];
          }
          else if ([v9 isEqualToString:@"CheckPDOA"])
          {
            unsigned char *v15 = [v2 BOOLForKey:@"CheckPDOA"];
          }
          else if ([v9 isEqualToString:@"CheckFPSNRs"])
          {
            *(unsigned char *)(a1 + 6) = [v2 BOOLForKey:@"CheckFPSNRs"];
          }
          else if ([v9 isEqualToString:@"CheckFPIndices"])
          {
            *(unsigned char *)(a1 + 7) = [v2 BOOLForKey:@"CheckFPIndices"];
          }
          else if ([v9 isEqualToString:@"CheckAoaCirDataEvent"])
          {
            *(unsigned char *)(a1 + 8) = [v2 BOOLForKey:@"CheckAoaCirDataEvent"];
          }
          else if ([v9 isEqualToString:@"CheckToaCirDataEvent"])
          {
            *(unsigned char *)(a1 + 9) = [v2 BOOLForKey:@"CheckToaCirDataEvent"];
          }
          else if ([v9 isEqualToString:@"CheckTimestamps"])
          {
            *(unsigned char *)(a1 + 10) = [v2 BOOLForKey:@"CheckTimestamps"];
          }
          else if ([v9 isEqualToString:@"CheckRSSIs"])
          {
            *(unsigned char *)(a1 + 11) = [v2 BOOLForKey:@"CheckRSSIs"];
          }
          else if ([v9 isEqualToString:@"EnableAoaHypotheses"])
          {
            *(unsigned char *)a1 = [v2 BOOLForKey:@"EnableAoaHypotheses"];
          }
          if (objc_msgSend(v9, "isEqualToString:", @"MmsValStatus", v14))
          {
            int v10 = [v2 integerForKey:@"MmsValStatus"];
            switch(v10)
            {
              case 1:
                int v6 = 1;
                break;
              case 3:
                int v6 = 3;
                break;
              case 7:
                int v6 = 7;
                break;
              default:
LABEL_33:
                long long v11 = (id)qword_1008ABDE0;
                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
                {
                  if (v6 == 1)
                  {
                    long long v12 = "Nominal";
                  }
                  else if (v6 == 7)
                  {
                    long long v12 = "Stricter";
                  }
                  else
                  {
                    long long v12 = "Strict";
                  }
                  sub_100004950(__p, v12);
                  int v13 = __p;
                  if (v17 < 0) {
                    int v13 = (void **)__p[0];
                  }
                  *(_DWORD *)buf = v14;
                  long long v23 = v13;
                  __int16 v24 = 1024;
                  int v25 = v6;
                  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Required min mmsValStatus = %s (%d)", buf, 0x12u);
                  if (v17 < 0) {
                    operator delete(__p[0]);
                  }
                }

                continue;
            }
            *(_DWORD *)(a1 + 16) = v6;
            goto LABEL_33;
          }
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }
    while (v4);
  }
}

void sub_100188798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1001887D8()
{
  if ((byte_1008A3350 & 1) == 0)
  {
    v0 = +[NSUserDefaults standardUserDefaults];
    uint64_t v1 = [v0 objectForKey:@"UwbRangeBiasOffsetMeters"];

    if (v1)
    {
      int v2 = +[NSUserDefaults standardUserDefaults];
      [v2 doubleForKey:@"UwbRangeBiasOffsetMeters"];
      qword_1008A3348 = v3;

      id v4 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 134217984;
        uint64_t v7 = qword_1008A3348;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UwbRangeBiasOffsetMeters set to %.2f m", (uint8_t *)&v6, 0xCu);
      }
    }
    byte_1008A3350 = 1;
  }
  return *(double *)&qword_1008A3348;
}

void sub_100188900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_10018891C()
{
  if (byte_1008A3360 == 1) {
    return *(double *)&qword_1008A3358;
  }
  double result = sub_1001887D8() * 1.0e12 / 299792458.0;
  qword_1008A3358 = *(void *)&result;
  byte_1008A3360 = 1;
  return result;
}

uint64_t sub_100188980(uint64_t result, int a2, unsigned int a3, int a4)
{
  *(void *)(result + 12) = 0;
  *(void *)(result + 4) = 0;
  *(_DWORD *)double result = a2;
  if (a2 > 99)
  {
    if (a2 < 113) {
      goto LABEL_6;
    }
    if ((a2 - 113) < 9)
    {
      *(_WORD *)(result + 12) = 257;
      *(_WORD *)(result + 16) = 257;
      return result;
    }
    if (a2 == 200)
    {
LABEL_6:
      *(_WORD *)(result + 12) = 257;
      return result;
    }
    if (a2 == 201) {
      *(_DWORD *)(result + 12) = 16843266;
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        int v4 = 67371531;
        goto LABEL_44;
      case 1:
      case 2:
      case 3:
        goto LABEL_30;
      case 4:
      case 5:
      case 6:
        int v4 = 67371275;
        goto LABEL_44;
      case 7:
      case 8:
      case 9:
      case 10:
        if (a3 >= 2)
        {
          if (a3 == 2)
          {
LABEL_30:
            int v4 = 67373067;
LABEL_44:
            *(_DWORD *)(result + 12) = v4;
          }
        }
        else
        {
          *(_DWORD *)(result + 12) = 67372036;
        }
LABEL_45:
        __int16 v7 = 260;
LABEL_46:
        *(_WORD *)(result + 18) = v7;
        break;
      case 11:
      case 12:
      case 13:
      case 14:
        if (a3 >= 2)
        {
          if (a3 == 2) {
            *(_DWORD *)(result + 12) = 16843266;
          }
        }
        else
        {
          *(_DWORD *)(result + 12) = 16843009;
        }
        __int16 v7 = 257;
        goto LABEL_46;
      case 15:
      case 16:
      case 17:
      case 18:
      case 23:
        if (a3 >= 2)
        {
          if (a3 == 2) {
            *(_DWORD *)(result + 12) = 67371522;
          }
        }
        else
        {
          *(_DWORD *)(result + 12) = 67372036;
        }
        if ((unsigned __int16)a4 == 6) {
          char v5 = 5;
        }
        else {
          char v5 = 4;
        }
        if (BYTE2(a4)) {
          char v6 = v5;
        }
        else {
          char v6 = 4;
        }
        *(unsigned char *)(result + 16) = v6;
        *(unsigned char *)(result + 17) = 4;
        goto LABEL_45;
      case 19:
      case 20:
      case 21:
      case 22:
        if (a3 >= 2)
        {
          if (a3 == 2) {
            *(_DWORD *)(result + 12) = 67371522;
          }
        }
        else
        {
          *(_DWORD *)(result + 12) = 67372036;
        }
        if ((unsigned __int16)a4 == 6) {
          char v8 = 5;
        }
        else {
          char v8 = 4;
        }
        if (BYTE2(a4)) {
          char v9 = v8;
        }
        else {
          char v9 = 4;
        }
        *(unsigned char *)(result + 16) = v9;
        *(unsigned char *)(result + 17) = 4;
        __int16 v7 = 258;
        goto LABEL_46;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_100188B74(uint64_t a1, int a2, unsigned int a3, int a4)
{
  return sub_100188980(a1, a2, a3, a4);
}

uint64_t sub_100188B7C(uint64_t result, int a2, int a3)
{
  int v3 = *(_DWORD *)result;
  if (*(int *)result <= 99)
  {
    if (v3 > 0x17) {
      goto LABEL_17;
    }
    if (((1 << v3) & 0x87FFFF) != 0)
    {
      if (a2)
      {
        char v6 = *(unsigned char *)(result + 15);
        *(unsigned char *)(result + 4) = v6;
        *(unsigned char *)(result + 5) = *(unsigned char *)(result + 14);
        *(unsigned char *)(result + 6) = v6;
        char v7 = *(unsigned char *)(result + 13);
        *(unsigned char *)(result + 7) = v7;
        char v8 = *(unsigned char *)(result + 12);
LABEL_9:
        *(unsigned char *)(result + 8) = v8;
        *(unsigned char *)(result + 11) = v7;
        goto LABEL_17;
      }
      BOOL v9 = a3 == 0;
      uint64_t v10 = 15;
      if (a3) {
        uint64_t v10 = 13;
      }
      uint64_t v11 = 14;
      uint64_t v12 = 12;
    }
    else
    {
      if (a2)
      {
        char v15 = *(unsigned char *)(result + 13);
        *(unsigned char *)(result + 4) = v15;
        *(unsigned char *)(result + 5) = *(unsigned char *)(result + 12);
        *(unsigned char *)(result + 6) = v15;
        char v7 = *(unsigned char *)(result + 15);
        *(unsigned char *)(result + 7) = v7;
        char v8 = *(unsigned char *)(result + 14);
        goto LABEL_9;
      }
      BOOL v9 = a3 == 0;
      uint64_t v10 = 13;
      if (a3) {
        uint64_t v10 = 15;
      }
      uint64_t v11 = 12;
      uint64_t v12 = 14;
    }
    if (!v9) {
      uint64_t v11 = v12;
    }
    char v5 = *(unsigned char *)(result + v11);
    char v4 = *(unsigned char *)(result + v10);
    *(unsigned char *)(result + 4) = v4;
    goto LABEL_16;
  }
  if (v3 <= 199)
  {
    if ((v3 - 100) < 0x16)
    {
LABEL_4:
      char v4 = *(unsigned char *)(result + 13);
      *(unsigned char *)(result + 4) = v4;
      char v5 = *(unsigned char *)(result + 12);
LABEL_16:
      *(unsigned char *)(result + 5) = v5;
      *(unsigned char *)(result + 6) = v4;
      *(_WORD *)(result + 7) = 0;
      *(unsigned char *)(result + 11) = 0;
    }
LABEL_17:
    if ((v3 - 113) < 9 || (v3 - 15) <= 8)
    {
      *(unsigned char *)(result + 9) = *(unsigned char *)(result + 17);
      *(unsigned char *)(result + 10) = *(unsigned char *)(result + 16);
    }
    return result;
  }
  if (v3 > 996)
  {
    if (v3 == 997 || v3 == 999)
    {
      *(unsigned char *)(result + 11) = 0;
      *(_DWORD *)(result + 4) = 0;
      *(unsigned char *)(result + 8) = 0;
    }
    goto LABEL_17;
  }
  if (v3 == 200) {
    goto LABEL_4;
  }
  if (v3 != 201) {
    goto LABEL_17;
  }
  if (a2)
  {
    char v13 = *(unsigned char *)(result + 13);
    *(unsigned char *)(result + 4) = v13;
    *(unsigned char *)(result + 5) = *(unsigned char *)(result + 12);
    *(unsigned char *)(result + 6) = v13;
    char v14 = *(unsigned char *)(result + 15);
    *(unsigned char *)(result + 7) = v14;
    *(unsigned char *)(result + 8) = *(unsigned char *)(result + 14);
    *(unsigned char *)(result + 11) = v14;
  }
  else
  {
    uint64_t v16 = 15;
    if (a3) {
      uint64_t v16 = 13;
    }
    uint64_t v17 = 14;
    if (a3) {
      uint64_t v17 = 12;
    }
    char v18 = *(unsigned char *)(result + v17);
    char v19 = *(unsigned char *)(result + v16);
    *(unsigned char *)(result + 4) = v19;
    *(unsigned char *)(result + 5) = v18;
    *(unsigned char *)(result + 6) = v19;
    *(_WORD *)(result + 7) = 0;
    *(unsigned char *)(result + 11) = 0;
  }
  return result;
}

uint64_t sub_100188D44(unsigned __int8 *a1, int a2, int a3)
{
  sub_100188B7C((uint64_t)a1, a2, a3);
  uint64_t result = sub_100188D7C(a1, 0);
  if ((result & 1) == 0) {
    sub_100414338();
  }
  return result;
}

uint64_t sub_100188D7C(unsigned __int8 *a1, char a2)
{
  int v3 = *(_DWORD *)a1;
  if (*(int *)a1 <= 199)
  {
    if ((v3 - 100) < 0x16) {
      goto LABEL_11;
    }
    if ((v3 - 11) >= 0xD)
    {
      if (v3 >= 0xB) {
        return 1;
      }
      uint64_t result = sub_1001892A8(a1);
      if (!result) {
        return result;
      }
      if ((a2 & 1) == 0)
      {
        uint64_t result = sub_10018936C(a1);
        if (!result) {
          return result;
        }
      }
    }
    else
    {
      uint64_t result = sub_1001892A8(a1);
      if (!result) {
        return result;
      }
    }
    return sub_1001893D8(a1);
  }
  if (v3 <= 996)
  {
    if (v3 != 200) {
      return v3 != 201 || (sub_1001892A8(a1) & 1) != 0;
    }
LABEL_11:
    uint64_t result = sub_1001892A8(a1);
    if (!result) {
      return result;
    }
    return sub_1001894C8(a1);
  }
  if (v3 != 997 && v3 != 999) {
    return 1;
  }
  uint64_t result = sub_100189460(a1);
  if (result)
  {
    uint64_t result = sub_1001894C8(a1);
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_100188E80(unsigned __int8 *a1, int a2, int a3)
{
  sub_100188B7C((uint64_t)a1, a2, a3);
  uint64_t result = sub_100188D7C(a1, 0);
  if ((result & 1) == 0) {
    sub_100414364();
  }
  return result;
}

uint64_t sub_100188EB8(unsigned __int8 *a1, int a2)
{
  sub_100188B7C((uint64_t)a1, a2, 1);
  uint64_t result = sub_100188D7C(a1, 0);
  if ((result & 1) == 0) {
    sub_100414390();
  }
  return result;
}

uint64_t sub_100188EF4(unsigned __int8 *a1, int a2)
{
  sub_100188B7C((uint64_t)a1, a2, 1);
  uint64_t result = sub_100188D7C(a1, 0);
  if ((result & 1) == 0) {
    sub_1004143BC();
  }
  return result;
}

uint64_t sub_100188F30(unsigned __int8 *a1, int a2)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 <= 99)
  {
    if (v2 > 0x17) {
      goto LABEL_20;
    }
    int v4 = 1 << v2;
    if ((v4 & 0x87FFFE) != 0)
    {
      if (a2)
      {
        unsigned __int8 v5 = a1[15];
        a1[4] = v5;
        a1[5] = a1[14];
        a1[6] = v5;
        char v6 = a1[13];
LABEL_9:
        a1[7] = v6;
        unsigned __int8 v7 = a1[12];
LABEL_19:
        a1[8] = v7;
        a1[11] = v6;
        goto LABEL_20;
      }
      unsigned __int8 v3 = a1[13];
    }
    else
    {
      if ((v4 & 0x780000) == 0)
      {
        if (!a2)
        {
          a1[4] = 8;
          a1[5] = a1[12];
          *((_WORD *)a1 + 3) = 8;
          a1[8] = 0;
          goto LABEL_14;
        }
        unsigned __int8 v11 = a1[15];
        a1[4] = v11;
        a1[5] = a1[14];
        a1[6] = v11;
        char v6 = 8;
        goto LABEL_9;
      }
      if (a2)
      {
        unsigned __int8 v8 = a1[13];
        a1[4] = v8;
        a1[5] = a1[12];
        a1[6] = v8;
LABEL_18:
        char v6 = a1[15];
        a1[7] = v6;
        unsigned __int8 v7 = a1[14];
        goto LABEL_19;
      }
      unsigned __int8 v3 = a1[15];
    }
    a1[4] = v3;
    a1[5] = v3;
    goto LABEL_12;
  }
  if (v2 <= 199)
  {
    if ((v2 - 100) >= 0x16) {
      goto LABEL_20;
    }
    goto LABEL_4;
  }
  if (v2 > 996)
  {
    if (v2 == 997 || v2 == 999)
    {
      a1[11] = 0;
      *((_DWORD *)a1 + 1) = 0;
      a1[8] = 0;
    }
  }
  else
  {
    if (v2 == 200)
    {
LABEL_4:
      unsigned __int8 v3 = a1[13];
      a1[4] = v3;
      a1[5] = a1[12];
LABEL_12:
      a1[6] = v3;
LABEL_13:
      *(_WORD *)(a1 + 7) = 0;
LABEL_14:
      a1[11] = 0;
      goto LABEL_20;
    }
    if (v2 == 201)
    {
      unsigned __int8 v10 = a1[13];
      a1[4] = v10;
      a1[5] = a1[12];
      a1[6] = v10;
      if (!a2) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
  }
LABEL_20:
  uint64_t result = sub_100188D7C(a1, 0);
  if ((result & 1) == 0) {
    sub_1004143E8();
  }
  return result;
}

uint64_t sub_1001890B8(unsigned __int8 *a1, int a2, int a3)
{
  sub_100188B7C((uint64_t)a1, a2, a3);
  uint64_t result = sub_100188D7C(a1, 1);
  if ((result & 1) == 0) {
    sub_100414414();
  }
  return result;
}

uint64_t sub_1001890F0(unsigned __int8 *a1, int a2, int a3)
{
  sub_100188B7C((uint64_t)a1, a2, a3);
  uint64_t result = sub_100188D7C(a1, 0);
  if ((result & 1) == 0) {
    sub_100414440();
  }
  return result;
}

uint64_t sub_100189128(unsigned __int8 *a1, int a2, int a3)
{
  sub_100188B7C((uint64_t)a1, a2, a3);
  uint64_t result = sub_100188D7C(a1, 0);
  if ((result & 1) == 0) {
    sub_10041446C();
  }
  return result;
}

uint64_t sub_100189160(unsigned __int8 *a1, int a2)
{
  sub_100188B7C((uint64_t)a1, a2, 0);
  uint64_t result = sub_100188D7C(a1, 0);
  if ((result & 1) == 0) {
    sub_100414498();
  }
  return result;
}

uint64_t sub_10018919C(unsigned __int8 *a1, int a2, int a3)
{
  sub_100188B7C((uint64_t)a1, a2, a3);
  uint64_t result = sub_100188D7C(a1, 0);
  if ((result & 1) == 0) {
    sub_1004144C4();
  }
  return result;
}

uint64_t sub_1001891D8(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7)
{
  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[7] = a5;
  a1[8] = a6;
  a1[11] = a7;
  uint64_t result = sub_100188D7C(a1, 0);
  if ((result & 1) == 0) {
    sub_1004144F0();
  }
  return result;
}

uint64_t sub_100189214(int *a1)
{
  int v1 = *a1;
  __int16 v2 = -408;
  if (*a1 > 199)
  {
    if ((v1 - 200) >= 2 && v1 != 997 && v1 != 999) {
      return v2;
    }
    return -420;
  }
  if ((v1 - 100) < 0x16 || (v1 - 3) < 0x15) {
    return -420;
  }
  return v2;
}

uint64_t sub_100189268(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_100189270(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 5);
}

uint64_t sub_100189278(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 6);
}

uint64_t sub_100189280(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 7);
}

uint64_t sub_100189288(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100189290(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 11);
}

uint64_t sub_100189298(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

uint64_t sub_1001892A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

uint64_t sub_1001892A8(unsigned __int8 *a1)
{
  int v2 = a1[4];
  if (v2 != a1[6] || (v2 & ~a1[5]) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100414550();
    }
    int v3 = 0;
  }
  else
  {
    int v3 = 1;
  }
  int v4 = a1[7];
  if (v4 != a1[11] || (v4 & ~a1[8]) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041451C();
    }
    int v5 = 0;
  }
  else
  {
    int v5 = 1;
  }
  return v3 & v5;
}

BOOL sub_10018936C(unsigned char *a1)
{
  if (!a1[7] || a1[6] != 4 || a1[11] != 2) {
    return 1;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_100414584();
    return 0;
  }
  return result;
}

BOOL sub_1001893D8(unsigned char *a1)
{
  if (!a1[7] || !a1[19] || (a1[4] & a1[18]) != 0 && (a1[5] & a1[18]) != 0 && (a1[6] & a1[18]) != 0) {
    return 1;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1004145B8();
    return 0;
  }
  return result;
}

BOOL sub_100189460(unsigned char *a1)
{
  if (!a1[4] && !a1[5] && !a1[6]) {
    return 1;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1004145EC();
    return 0;
  }
  return result;
}

BOOL sub_1001894C8(unsigned char *a1)
{
  if (!a1[7] && !a1[8] && !a1[11]) {
    return 1;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1004145EC();
    return 0;
  }
  return result;
}

uint64_t sub_100189530(uint64_t a1, int a2)
{
  if (!a2) {
    return 4;
  }
  int v3 = *(_DWORD *)a1;
  uint64_t result = 4;
  if (v3 > 99)
  {
    if ((v3 - 100) < 0x16 || v3 == 200)
    {
      if ((a2 & ~*(unsigned __int8 *)(a1 + 12)) != 0) {
        return 4;
      }
      else {
        return 2;
      }
    }
    else if (v3 == 201)
    {
      int v7 = *(unsigned __int8 *)(a1 + 14) | *(unsigned __int8 *)(a1 + 12);
      if ((v7 & a2) != 0) {
        unsigned int v8 = 2;
      }
      else {
        unsigned int v8 = 4;
      }
      if ((a2 & ~v7) != 0) {
        return 4;
      }
      else {
        return v8;
      }
    }
  }
  else if (v3 < 0x18)
  {
    int v5 = *(unsigned __int8 *)(a1 + 12);
    int v6 = *(unsigned __int8 *)(a1 + 14);
    if ((a2 & ~(v6 | v5)) == 0)
    {
      if ((a2 & ~v5) != 0 || (v5 & a2) == 0)
      {
        if ((a2 & ~v6) != 0 || (v6 & a2) == 0)
        {
          if (((v6 | v5) & a2) != 0) {
            return 3;
          }
          else {
            return 4;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

void *sub_100189610@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855680[a1]);
}

void *sub_100189624@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008556D8[a1]);
}

void *sub_100189638@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855720[a1]);
}

void *sub_10018964C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855740[a1]);
}

double sub_100189660(uint64_t a1)
{
  *(void *)a1 = off_100855430;
  *(void *)(a1 + 8) = 850045863;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_WORD *)(a1 + 112) = 1;
  return result;
}

void *sub_1001896AC(void *a1)
{
  *a1 = off_100855430;
  int v2 = (std::mutex *)(a1 + 1);
  sub_10002AC70((uint64_t)(a1 + 9));
  std::mutex::~mutex(v2);
  return a1;
}

void sub_100189700(void *a1)
{
  *a1 = off_100855430;
  int v1 = (std::mutex *)(a1 + 1);
  sub_10002AC70((uint64_t)(a1 + 9));
  std::mutex::~mutex(v1);

  operator delete();
}

void sub_100189774(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, unsigned char *a3@<X8>)
{
  unsigned __int16 v8 = a2;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v6 = sub_10016F024((void *)(a1 + 72), &v8);
  if (v6)
  {
    memcpy(a3, v6 + 3, 0x288uLL);
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    *a3 = 0;
  }
  a3[648] = v7;
  std::mutex::unlock(v5);
}

void sub_1001897F4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100189808(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, unsigned char *a3@<X8>)
{
  unsigned __int16 v8 = a2;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v6 = sub_10016F024((void *)(a1 + 72), &v8);
  if (v6)
  {
    memcpy(a3, v6 + 4, 0x278uLL);
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    *a3 = 0;
  }
  a3[632] = v7;
  std::mutex::unlock(v5);
}

void sub_100189888(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10018989C(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  unsigned __int16 v9 = a2;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v6 = sub_10016F024((void *)(a1 + 72), &v9);
  if (v6)
  {
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7) {
      sub_100027894();
    }
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v7 + 48))(v7, v6 + 3);
  }
  std::mutex::unlock(v5);
  return v6 != 0;
}

void sub_100189940(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100189954(uint64_t a1, uint64_t a2)
{
  int v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  for (uint64_t i = (void *)(a1 + 88); ; (*(void (**)(uint64_t, void *))(*(void *)v6 + 48))(v6, i + 3))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
      sub_100027894();
    }
  }

  std::mutex::unlock(v4);
}

void sub_1001899E8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100189A00(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v7 = *(unsigned __int16 *)(a1 + 112);
  *(_WORD *)(a1 + 112) = v7 + 1;
  unsigned __int16 v9 = v7;
  if (((v7 + 1) & 0x10000) != 0) {
    *(_WORD *)(a1 + 112) = 1;
  }
  unsigned __int16 v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Generated ticket_id for request. ID: %d", buf, 8u);
  }
  memcpy(&__src[6], a2, 0x1F8uLL);
  *(_DWORD *)buf = 0;
  __int16 v12 = v7;
  memcpy(v13, __src, 0x1FEuLL);
  v13[510] = 0;
  v13[622] = 0;
  v13[630] = 0;
  sub_10018A4B4(a1 + 72, &v9, &v9, buf);
  *(_WORD *)a3 = v7;
  memcpy((void *)(a3 + 2), __src, 0x1FEuLL);
  *(unsigned char *)(a3 + 512) = 0;
  *(unsigned char *)(a3 + 624) = 0;
  *(unsigned char *)(a3 + 632) = 1;
  std::mutex::unlock(v6);
}

void sub_100189B68(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100189B7C(uint64_t a1, int a2)
{
  unsigned __int16 v16 = a2;
  int v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "deleteServiceRequest for ticket id %d", buf, 8u);
  }
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v6 = (void *)(a1 + 72);
  int v7 = (uint64_t *)sub_10016F024((void *)(a1 + 72), &v16);
  if (v7)
  {
    sub_10002A67C(v6, v7);
  }
  else
  {
    unsigned __int16 v8 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100414620((uint64_t)&v16, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  std::mutex::unlock(v5);
  return v7 != 0;
}

void sub_100189C98(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100189CB4(uint64_t a1, int a2, int a3)
{
  unsigned __int16 v19 = a2;
  uint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updateServiceRequestState for ticket id %d", buf, 8u);
  }
  int v7 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  unsigned __int16 v8 = sub_10016F024((void *)(a1 + 72), &v19);
  uint64_t v9 = v8;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == a3)
    {
      uint64_t v10 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Asked to update service request to same as current state", buf, 2u);
      }
    }
    else
    {
      *((_DWORD *)v8 + 6) = a3;
    }
  }
  else
  {
    uint64_t v11 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100414690((uint64_t)&v19, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  std::mutex::unlock(v7);
  return v9 != 0;
}

void sub_100189E1C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100189E38(uint64_t a1, int a2)
{
  unsigned __int16 v16 = a2;
  int v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "recordPowerLogSubmission for ticket id %d", buf, 8u);
  }
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v6 = sub_10016F024((void *)(a1 + 72), &v16);
  int v7 = v6;
  if (v6)
  {
    *((unsigned char *)v6 + 664) = 1;
  }
  else
  {
    unsigned __int16 v8 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100414690((uint64_t)&v16, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  std::mutex::unlock(v5);
  return v7 != 0;
}

void sub_100189F4C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100189F68(uint64_t a1)
{
  v3[0] = off_100855480;
  v3[3] = v3;
  uint64_t v1 = sub_10018A008(a1, (uint64_t)v3);
  sub_10018A7C4(v3);
  return v1;
}

void sub_100189FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10018A7C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10018A008(uint64_t a1, uint64_t a2)
{
  int v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  int v5 = *(void **)(a1 + 88);
  if (v5)
  {
    LODWORD(v6) = 0;
    do
    {
      uint64_t v7 = *(void *)(a2 + 24);
      if (!v7) {
        sub_100027894();
      }
      uint64_t v6 = v6 + (*(unsigned int (**)(uint64_t, void *))(*(void *)v7 + 48))(v7, v5 + 3);
      int v5 = (void *)*v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::mutex::unlock(v4);
  return v6;
}

void sub_10018A0A4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10018A0BC(uint64_t a1)
{
  int v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "countActiveSensorFusionRequests called", v5, 2u);
  }
  v6[0] = off_100855510;
  v6[3] = v6;
  uint64_t v3 = sub_10018A008(a1, (uint64_t)v6);
  sub_10018A7C4(v6);
  return v3;
}

void sub_10018A194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10018A7C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10018A1A8(uint64_t a1)
{
  int v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "countActiveWantsMotionRequests called", v5, 2u);
  }
  v6[0] = off_100855590;
  v6[3] = v6;
  uint64_t v3 = sub_10018A008(a1, (uint64_t)v6);
  sub_10018A7C4(v6);
  return v3;
}

void sub_10018A280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10018A7C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10018A294(uint64_t a1)
{
  v3[0] = off_100855610;
  v3[3] = v3;
  uint64_t v1 = sub_10018A008(a1, (uint64_t)v3);
  sub_10018A7C4(v3);
  return v1;
}

void sub_10018A320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10018A7C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10018A334(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t sub_10018A33C(unint64_t a1)
{
  sub_1001670C8((uint64_t)v8);
  int v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  for (uint64_t i = *(uint64_t **)(a1 + 88); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 6) == 1)
    {
      switch(*((_DWORD *)i + 11))
      {
        case 1:
          if (*((unsigned char *)i + 41)) {
            __int16 v5 = 2;
          }
          else {
            __int16 v5 = 1;
          }
          if (*((unsigned char *)i + 41)) {
            __int16 v4 = 2;
          }
          else {
            __int16 v4 = 20;
          }
          break;
        case 2:
        case 4:
        case 5:
          __int16 v4 = 3;
          goto LABEL_14;
        case 3:
          __int16 v4 = 9;
          __int16 v5 = 2;
          break;
        case 6:
          __int16 v4 = 12;
LABEL_14:
          __int16 v5 = 1;
          break;
        case 7:
          if (*((unsigned char *)i + 41)) {
            __int16 v5 = 2;
          }
          else {
            __int16 v5 = 1;
          }
          goto LABEL_21;
        case 8:
          if (*((unsigned char *)i + 41)) {
            __int16 v5 = 1;
          }
          else {
            __int16 v5 = 2;
          }
LABEL_21:
          __int16 v4 = 16;
          break;
        default:
          __int16 v4 = 0;
          __int16 v5 = 4;
          break;
      }
      a1 = a1 & 0xFFFFFFFF00000000 | *((unsigned int *)i + 122);
      sub_1001670DC(v8, 1, v4, 1, v5, a1);
    }
  }
  uint64_t v6 = sub_100167160((uint64_t)v8);
  std::mutex::unlock(v2);
  return v6;
}

void sub_10018A47C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_10018A4B4(uint64_t a1, unsigned __int16 *a2, _WORD *a3, const void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((unsigned __int16 *)v12 + 8) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = operator new(0x2A0uLL);
  void *v12 = 0;
  v12[1] = v8;
  *((_WORD *)v12 + 8) = *a3;
  memcpy(v12 + 3, a4, 0x288uLL);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_10018A6DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10018A6F4()
{
}

void *sub_10018A708()
{
  double result = operator new(0x10uLL);
  *double result = off_100855480;
  return result;
}

void sub_10018A740(uint64_t a1, void *a2)
{
  *a2 = off_100855480;
}

BOOL sub_10018A768(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1;
}

uint64_t sub_10018A778(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10018A7B8()
{
}

void *sub_10018A7C4(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10018A84C()
{
}

void *sub_10018A860()
{
  double result = operator new(0x10uLL);
  *double result = off_100855510;
  return result;
}

void sub_10018A898(uint64_t a1, void *a2)
{
  *a2 = off_100855510;
}

BOOL sub_10018A8C0(uint64_t a1, int *a2)
{
  BOOL v3 = sub_10017E6B8(a2[18]);
  int v4 = *a2;
  __int16 v5 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((unsigned __int16 *)a2 + 4);
    uint64_t v7 = "false";
    if (v4 == 1) {
      unint64_t v8 = "true";
    }
    else {
      unint64_t v8 = "false";
    }
    v10[0] = 67109634;
    v10[1] = v6;
    __int16 v11 = 2080;
    if (v3) {
      uint64_t v7 = "true";
    }
    uint64_t v12 = v8;
    __int16 v13 = 2080;
    float v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ticket ID %d active: %s, wants sensor fusion: %s", (uint8_t *)v10, 0x1Cu);
  }
  return v4 == 1 && v3;
}

uint64_t sub_10018A9BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10018A9FC()
{
}

void sub_10018AA0C()
{
}

void *sub_10018AA20()
{
  double result = operator new(0x10uLL);
  *double result = off_100855590;
  return result;
}

void sub_10018AA58(uint64_t a1, void *a2)
{
  *a2 = off_100855590;
}

BOOL sub_10018AA80(uint64_t a1, int *a2)
{
  int v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 68);
  __int16 v5 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((unsigned __int16 *)a2 + 4);
    uint64_t v7 = "false";
    if (v3 == 1) {
      unint64_t v8 = "true";
    }
    else {
      unint64_t v8 = "false";
    }
    v11[0] = 67109634;
    v11[1] = v6;
    __int16 v12 = 2080;
    if (v4) {
      uint64_t v7 = "true";
    }
    __int16 v13 = v8;
    __int16 v14 = 2080;
    float v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ticket ID %d active: %s, wants motion: %s", (uint8_t *)v11, 0x1Cu);
  }
  return v3 == 1 && v4 != 0;
}

uint64_t sub_10018AB78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10018ABB8()
{
}

void sub_10018ABC8()
{
}

void *sub_10018ABDC()
{
  double result = operator new(0x10uLL);
  *double result = off_100855610;
  return result;
}

void sub_10018AC14(uint64_t a1, void *a2)
{
  *a2 = off_100855610;
}

BOOL sub_10018AC3C(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

uint64_t sub_10018AC4C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10018AC8C()
{
}

void *sub_10018AC98@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008557A0[a1]);
}

void *sub_10018ACAC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008557F8[a1]);
}

void *sub_10018ACC0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855840[a1]);
}

void *sub_10018ACD4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855860[a1]);
}

double sub_10018ACE8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 850045863;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = off_100855770;
  return result;
}

uint64_t sub_10018AD28(uint64_t a1)
{
  *(void *)a1 = off_100853108;
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void sub_10018AD6C(uint64_t a1)
{
  *(void *)a1 = off_100853108;
  std::mutex::~mutex((std::mutex *)(a1 + 24));

  operator delete();
}

uint64_t sub_10018ADD0()
{
  return 0;
}

uint64_t sub_10018ADD8(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10018AE28(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10018AE78(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10018AEC8(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10018AF18(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10018AF68(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10018AFB8(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

BOOL sub_10018B008(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

double sub_10018B01C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3 == *a2) {
    return 0.0;
  }
  for (uint64_t i = v2 + 24; i != v3; i += 24)
  {
    if (*(double *)(v2 + 8) < *(double *)(i + 8)) {
      uint64_t v2 = i;
    }
  }
  return *(double *)(v2 + 8);
}

double sub_10018B05C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if ((const void *)v3 == v2) {
    return 0.0;
  }
  unint64_t v9 = 0;
  uint8x8_t v10 = 0;
  uint64_t v11 = 0;
  sub_10018C2F0(&v9, v2, v3, 0xAAAAAAAAAAAAAAABLL * ((v3 - (uint64_t)v2) >> 3));
  if (v10 == v9)
  {
    double v7 = 0.0;
    if (!v9) {
      return v7;
    }
LABEL_9:
    uint8x8_t v10 = v9;
    operator delete(v9);
    return v7;
  }
  double v5 = 0.0;
  int v6 = v9;
  do
  {
    double v5 = v5 + v6[1];
    v6 += 3;
  }
  while (v6 != v10);
  double v7 = v5 / (double)(0xAAAAAAAAAAAAAAABLL * (v10 - v9));
  if (v9) {
    goto LABEL_9;
  }
  return v7;
}

double sub_10018B110(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (long long *)a2[1];
  uint64_t v4 = *a2;
  if (v3 == (long long *)*a2) {
    return 0.0;
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a2) >> 3);
  unint64_t v6 = v5 >> 1;
  unint64_t v8 = sub_10018B008;
  sub_10018C36C(v4, v3, (uint64_t (**)(long long *, long long *))&v8, 126 - 2 * __clz(v5), 1);
  double result = *(double *)(*a2 + 24 * v6 + 8);
  if (((*((_DWORD *)a2 + 2) - *a2) & 8) == 0) {
    return (result + *(double *)(*a2 + 24 * v6 - 16)) * 0.5;
  }
  return result;
}

double sub_10018B1C0(uint64_t a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    return -200.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  __p = 0;
  long long v27 = 0;
  long long v28 = 0;
  double v5 = -200.0;
  do
  {
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    if (v6 == *a2) {
      goto LABEL_34;
    }
    int v8 = dword_1004B73E8[v4];
    do
    {
      if (*(_DWORD *)(v7 + 16) == v8)
      {
        if (v3 >= v28)
        {
          uint8x8_t v10 = (char *)__p;
          uint64_t v11 = (v3 - (unsigned char *)__p) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            sub_1000267C4();
          }
          uint64_t v13 = v28 - (unsigned char *)__p;
          if ((v28 - (unsigned char *)__p) >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            float v15 = (char *)sub_100056BF0((uint64_t)&v28, v14);
            uint8x8_t v10 = (char *)__p;
            uint64_t v3 = v27;
          }
          else
          {
            float v15 = 0;
          }
          BOOL v16 = &v15[8 * v11];
          *(void *)BOOL v16 = *(void *)(v7 + 8);
          unint64_t v9 = v16 + 8;
          while (v3 != v10)
          {
            uint64_t v17 = *((void *)v3 - 1);
            v3 -= 8;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          __p = v16;
          long long v27 = v9;
          long long v28 = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v3 = *(void *)(v7 + 8);
          unint64_t v9 = v3 + 8;
        }
        long long v27 = v9;
        uint64_t v6 = a2[1];
        uint64_t v3 = v9;
      }
      v7 += 24;
    }
    while (v7 != v6);
    if (v3 == __p)
    {
      uint64_t v3 = (char *)__p;
      goto LABEL_34;
    }
    long long v23 = 0;
    __int16 v24 = 0;
    uint64_t v25 = 0;
    sub_10015036C(&v23, __p, (uint64_t)v3, (v3 - (unsigned char *)__p) >> 3);
    if (v24 == v23)
    {
      double v21 = 0.0;
      if (!v23) {
        goto LABEL_30;
      }
    }
    else
    {
      double v18 = 0.0;
      size_t v19 = v23;
      do
      {
        double v20 = *v19++;
        double v18 = v18 + v20;
      }
      while (v19 != v24);
      double v21 = v18 / (double)(unint64_t)(v24 - v23);
      if (!v23) {
        goto LABEL_30;
      }
    }
    __int16 v24 = v23;
    operator delete(v23);
LABEL_30:
    if (v21 > v5) {
      double v5 = v21;
    }
    uint64_t v3 = (char *)__p;
LABEL_34:
    long long v27 = v3;
    ++v4;
  }
  while (v4 != 3);
  if (v3) {
    operator delete(v3);
  }
  return v5;
}

void sub_10018B3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10018B3FC(uint64_t a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    return -200.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  __p = 0;
  char v47 = 0;
  char v48 = 0;
  char v43 = 0;
  long long v44 = 0;
  uint64_t v45 = 0;
  do
  {
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    if (v5 == *a2) {
      goto LABEL_50;
    }
    int v7 = dword_1004B73E8[v4];
    do
    {
      if (*(_DWORD *)(v6 + 16) == v7)
      {
        if (v3 >= v48)
        {
          unint64_t v9 = (char *)__p;
          uint64_t v10 = (v3 - (unsigned char *)__p) >> 3;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61) {
            sub_1000267C4();
          }
          uint64_t v12 = v48 - (unsigned char *)__p;
          if ((v48 - (unsigned char *)__p) >> 2 > v11) {
            unint64_t v11 = v12 >> 2;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            unint64_t v14 = (char *)sub_100056BF0((uint64_t)&v48, v13);
            unint64_t v9 = (char *)__p;
            uint64_t v3 = v47;
          }
          else
          {
            unint64_t v14 = 0;
          }
          float v15 = &v14[8 * v10];
          *(void *)float v15 = *(void *)(v6 + 8);
          int v8 = v15 + 8;
          while (v3 != v9)
          {
            uint64_t v16 = *((void *)v3 - 1);
            v3 -= 8;
            *((void *)v15 - 1) = v16;
            v15 -= 8;
          }
          __p = v15;
          char v47 = v8;
          char v48 = &v14[8 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(void *)uint64_t v3 = *(void *)(v6 + 8);
          int v8 = v3 + 8;
        }
        char v47 = v8;
        uint64_t v5 = a2[1];
        uint64_t v3 = v8;
      }
      v6 += 24;
    }
    while (v6 != v5);
    if (v3 == __p)
    {
      uint64_t v3 = (char *)__p;
      goto LABEL_50;
    }
    char v40 = 0;
    char v41 = 0;
    uint64_t v42 = 0;
    sub_10015036C(&v40, __p, (uint64_t)v3, (v3 - (unsigned char *)__p) >> 3);
    if (v41 == v40)
    {
      double v20 = 0.0;
      if (!v40) {
        goto LABEL_30;
      }
    }
    else
    {
      double v17 = 0.0;
      double v18 = v40;
      do
      {
        double v19 = *v18++;
        double v17 = v17 + v19;
      }
      while (v18 != v41);
      double v20 = v17 / (double)(unint64_t)(v41 - v40);
      if (!v40) {
        goto LABEL_30;
      }
    }
    char v41 = v40;
    operator delete(v40);
LABEL_30:
    double v21 = v44;
    if (v44 >= v45)
    {
      long long v23 = (double *)v43;
      uint64_t v24 = ((char *)v44 - (unsigned char *)v43) >> 3;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
        sub_1000267C4();
      }
      uint64_t v26 = (char *)v45 - (unsigned char *)v43;
      if (((char *)v45 - (unsigned char *)v43) >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        long long v28 = (char *)sub_100056BF0((uint64_t)&v45, v27);
        long long v23 = (double *)v43;
        double v21 = v44;
      }
      else
      {
        long long v28 = 0;
      }
      char v29 = (double *)&v28[8 * v24];
      *char v29 = v20;
      unint64_t v22 = v29 + 1;
      while (v21 != v23)
      {
        uint64_t v30 = *((void *)v21-- - 1);
        *((void *)v29-- - 1) = v30;
      }
      char v43 = v29;
      long long v44 = v22;
      uint64_t v45 = (double *)&v28[8 * v27];
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      double *v44 = v20;
      unint64_t v22 = v21 + 1;
    }
    long long v44 = v22;
    uint64_t v3 = (char *)__p;
LABEL_50:
    char v47 = v3;
    ++v4;
  }
  while (v4 != 3);
  uint64_t v31 = ((char *)v44 - (unsigned char *)v43) >> 3;
  switch(v31)
  {
    case 1:
      double v33 = *(double *)v43;
      goto LABEL_75;
    case 2:
      double v33 = (*(double *)v43 + *((double *)v43 + 1)) * 0.5;
      goto LABEL_75;
    case 3:
      double v33 = *(double *)v43;
      double v32 = *((double *)v43 + 1);
      double v34 = *((double *)v43 + 2);
      if ((*(double *)v43 < v32 || v33 > v34) && (v33 > v32 || v33 < v34))
      {
        BOOL v37 = v33 > v32;
        BOOL v38 = v33 < v32;
        if (v32 > v34) {
          BOOL v37 = 1;
        }
        if (v32 < v34) {
          BOOL v38 = 1;
        }
        if (v37 && v38) {
          double v33 = *((double *)v43 + 2);
        }
        else {
          double v33 = *((double *)v43 + 1);
        }
      }
LABEL_75:
      long long v44 = (double *)v43;
      operator delete(v43);
      uint64_t v3 = (char *)__p;
      break;
    default:
      double v33 = -200.0;
      if (v43) {
        goto LABEL_75;
      }
      break;
  }
  if (v3)
  {
    char v47 = v3;
    operator delete(v3);
  }
  return v33;
}

void sub_10018B758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

double sub_10018B790(uint64_t a1, long long **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)v2 - (char *)*a2) >> 3);
  if (v4 <= 2 * *(int *)(a1 + 32))
  {
    if (v2 == v3) {
      return 0.0;
    }
    uint64_t v16 = 0;
    double v17 = 0;
    uint64_t v18 = 0;
    sub_10018C2F0(&v16, v3, (uint64_t)v2, v4);
    if (v17 == v16)
    {
      double v14 = 0.0;
      if (!v16) {
        return v14;
      }
    }
    else
    {
      double v12 = 0.0;
      unint64_t v13 = v16;
      do
      {
        double v12 = v12 + v13[1];
        v13 += 3;
      }
      while (v13 != v17);
      double v14 = v12 / (double)(0xAAAAAAAAAAAAAAABLL * (v17 - v16));
      if (!v16) {
        return v14;
      }
    }
    double v17 = v16;
    operator delete(v16);
    return v14;
  }
  double v19 = sub_10018B008;
  unint64_t v7 = 126 - 2 * __clz(v4);
  if (v2 == v3) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  sub_10018C36C((uint64_t)v3, v2, (uint64_t (**)(long long *, long long *))&v19, v8, 1);
  uint64_t v9 = *(int *)(a1 + 32);
  uint64_t v10 = (double *)v3 + 3 * (int)v9;
  double v11 = 0.0;
  while (v10 != (double *)((char *)v2 - 24 * v9))
  {
    double v11 = v11 + v10[1];
    v10 += 3;
  }
  return v11 / (double)(0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) - 2 * v9);
}

double sub_10018B904(uint64_t a1, uint64_t *a2)
{
  __p = 0;
  unint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v2 = *a2;
  if (a2[1] == *a2) {
    return 0.0;
  }
  unint64_t v4 = 0;
  do
  {
    double v5 = __exp10(*(double *)(v2 + 24 * v4 + 8) / 10.0);
    double v6 = v5;
    unint64_t v7 = v27;
    if (v27 >= v28)
    {
      uint64_t v9 = (double *)__p;
      uint64_t v10 = ((char *)v27 - (unsigned char *)__p) >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        sub_1000267C4();
      }
      uint64_t v12 = (char *)v28 - (unsigned char *)__p;
      if (((char *)v28 - (unsigned char *)__p) >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        double v14 = (char *)sub_100056BF0((uint64_t)&v28, v13);
        uint64_t v9 = (double *)__p;
        unint64_t v7 = v27;
      }
      else
      {
        double v14 = 0;
      }
      float v15 = (double *)&v14[8 * v10];
      double *v15 = v6;
      uint64_t v8 = (uint64_t)(v15 + 1);
      while (v7 != v9)
      {
        uint64_t v16 = *((void *)v7-- - 1);
        *((void *)v15-- - 1) = v16;
      }
      __p = v15;
      unint64_t v27 = (double *)v8;
      long long v28 = (double *)&v14[8 * v13];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      double *v27 = v5;
      uint64_t v8 = (uint64_t)(v7 + 1);
    }
    unint64_t v27 = (double *)v8;
    ++v4;
    uint64_t v2 = *a2;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v4);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  long long v23 = 0;
  sub_10015036C(&v23, __p, v8, (v8 - (uint64_t)__p) >> 3);
  if (v24 == v23)
  {
    double v20 = 0.0;
    if (v23)
    {
LABEL_24:
      uint64_t v24 = v23;
      operator delete(v23);
    }
  }
  else
  {
    double v17 = 0.0;
    uint64_t v18 = v23;
    do
    {
      double v19 = *v18++;
      double v17 = v17 + v19;
    }
    while (v18 != v24);
    double v20 = v17 / (double)(unint64_t)(v24 - v23) * 0.797884561;
    if (v23) {
      goto LABEL_24;
    }
  }
  double v21 = log10(v20) * 10.0;
  if (__p)
  {
    unint64_t v27 = (double *)__p;
    operator delete(__p);
  }
  return v21;
}

void sub_10018BAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10018BB20(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void sub_10018BB90(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void sub_10018BC00(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void sub_10018BC70(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void sub_10018BCE0(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void sub_10018BD50(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void sub_10018BDC0(uint64_t a1)
{
  *(void *)a1 = off_100855A60;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void *sub_10018BE30(void *a1)
{
  sub_100004950(&__p, "MAX_FILTER");
  sub_10018BEC0((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = off_100855890;
  return a1;
}

void sub_10018BEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10018BEC0(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = off_100855A60;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_10018BF1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10018BF38(void *a1)
{
  sub_100004950(&__p, "MEAN_FIILTER");
  sub_10018BEC0((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = off_1008558E0;
  return a1;
}

void sub_10018BFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10018BFC8(void *a1)
{
  sub_100004950(&__p, "MEDIAN_FILTER");
  sub_10018BEC0((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = off_100855920;
  return a1;
}

void sub_10018C03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10018C058(void *a1)
{
  sub_100004950(&__p, "MAX_OF_MEAN_CHAN_FILTER");
  sub_10018BEC0((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = off_100855960;
  return a1;
}

void sub_10018C0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10018C0E8(void *a1)
{
  sub_100004950(&__p, "MEDIAN_OF_MEAN_CHAN_FILTER");
  sub_10018BEC0((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = off_1008559A0;
  return a1;
}

void sub_10018C15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10018C178(uint64_t a1, int __val)
{
  std::to_string(&v7, __val);
  unint64_t v4 = std::string::insert(&v7, 0, "OLYMPIC_FILTER");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_10018BEC0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = off_1008559E0;
  *(_DWORD *)(a1 + 32) = __val;
  return a1;
}

void sub_10018C22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10018C260(void *a1)
{
  sub_100004950(&__p, "RAYLEIGH_FILTER");
  sub_10018BEC0((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = off_100855A20;
  return a1;
}

void sub_10018C2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10018C2F0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    double result = sub_100026770(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10018C350(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10018C36C(uint64_t a1, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v11 = (long long *)((char *)a2 - 24);
  uint64_t v12 = (long long *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v32 = *a3;
          uint64_t v33 = *((void *)a2 - 1);
          long long v43 = *(long long *)((char *)a2 - 24);
          uint64_t v44 = v33;
          uint64_t v34 = *((void *)v12 + 2);
          long long v41 = *v12;
          uint64_t v42 = v34;
          if (v32(&v43, &v41))
          {
            long long v35 = *v12;
            uint64_t v46 = *((void *)v12 + 2);
            long long v45 = v35;
            long long v36 = *v11;
            *((void *)v12 + 2) = *((void *)a2 - 1);
            long long *v12 = v36;
            *unint64_t v11 = v45;
            *((void *)a2 - 1) = v46;
          }
          break;
        case 3uLL:
          sub_10018C918(v12, (long long *)((char *)v12 + 24), (long long *)((char *)a2 - 24), a3);
          break;
        case 4uLL:
          sub_10018D1C8((uint64_t)v12, (uint64_t)v12 + 24, (uint64_t)(v12 + 3), (long long *)((char *)a2 - 24), a3);
          break;
        case 5uLL:
          sub_10018D314((uint64_t)v12, (uint64_t)v12 + 24, (uint64_t)(v12 + 3), (uint64_t)v12 + 72, (long long *)((char *)a2 - 24), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575)
    {
      if (a5) {
        sub_10018C6E0((uint64_t)v12, (uint64_t)a2, a3);
      }
      else {
        sub_10018C810((uint64_t)v12, (uint64_t)a2, a3);
      }
      return;
    }
    if (v14 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = (long long *)((char *)v12 + 24 * (v16 >> 1));
    if ((unint64_t)v15 >= 0xC01)
    {
      sub_10018C918(v12, (long long *)((char *)v12 + 24 * (v16 >> 1)), (long long *)((char *)a2 - 24), a3);
      uint64_t v19 = 3 * v17;
      double v20 = (long long *)((char *)v12 + 24 * v17 - 24);
      sub_10018C918((long long *)((char *)v12 + 24), v20, a2 - 3, a3);
      double v21 = v12 + 3;
      unint64_t v22 = (long long *)((char *)v12 + 8 * v19 + 24);
      sub_10018C918(v21, v22, (long long *)((char *)a2 - 72), a3);
      sub_10018C918(v20, v18, v22, a3);
      long long v23 = *(_OWORD *)a1;
      uint64_t v46 = *(void *)(a1 + 16);
      long long v45 = v23;
      long long v24 = *v18;
      *(void *)(a1 + 16) = *((void *)v18 + 2);
      *(_OWORD *)a1 = v24;
      long long v25 = v45;
      *((void *)v18 + 2) = v46;
      *uint64_t v18 = v25;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_10018C918((long long *)((char *)v12 + 24 * (v16 >> 1)), v12, (long long *)((char *)a2 - 24), a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    uint64_t v26 = *a3;
    uint64_t v27 = *(void *)(a1 - 8);
    long long v39 = *(_OWORD *)(a1 - 24);
    uint64_t v40 = v27;
    uint64_t v28 = *(void *)(a1 + 16);
    long long v37 = *(_OWORD *)a1;
    uint64_t v38 = v28;
    if ((v26(&v39, &v37) & 1) == 0)
    {
      uint64_t v12 = sub_10018CB10((long long *)a1, a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v29 = sub_10018CD40((long long *)a1, (unint64_t)a2, a3);
    if ((v30 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v31 = sub_10018CF58(a1, v29, a3);
    uint64_t v12 = (long long *)(v29 + 24);
    if (sub_10018CF58(v29 + 24, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v29;
      if (v31) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v31)
    {
LABEL_16:
      sub_10018C36C(a1, v29, a3, -v14, a5 & 1);
      uint64_t v12 = (long long *)(v29 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (v12 != a2) {
    sub_10018D4C0((__n128 *)v12, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(__n128 *, long long *))a3);
  }
}

  unint64_t v11 = a2 - 24;
  uint64_t v12 = (const void **)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (sub_10019D36C(a3, (void *)a2 - 3, v12))
          {
            BOOL v31 = v12[2];
            uint64_t v29 = *(_OWORD *)v12;
            uint64_t v27 = *(_OWORD *)v11;
            v12[2] = (const void *)*((void *)a2 - 1);
            *(_OWORD *)uint64_t v12 = v27;
            *(_OWORD *)unint64_t v11 = v29;
            *((void *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          sub_10019D60C(v12, v12 + 3, (void *)a2 - 3, a3);
          break;
        case 4uLL:
          sub_10019DCD0((uint64_t)v12, v12 + 3, v12 + 6, (void *)a2 - 3, a3);
          break;
        case 5uLL:
          sub_10019DDBC((uint64_t)v12, v12 + 3, v12 + 6, v12 + 9, (void *)a2 - 3, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (const void **)a2)
      {
        sub_10019DEE0((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      sub_10019D60C(v12, &v12[3 * (v16 >> 1)], (void *)a2 - 3, a3);
      uint64_t v19 = 3 * v17;
      double v20 = &v12[3 * v17 - 3];
      sub_10019D60C(v12 + 3, v20, (void *)a2 - 6, a3);
      double v21 = v12 + 6;
      unint64_t v22 = &v12[v19 + 3];
      sub_10019D60C(v21, v22, (void *)a2 - 9, a3);
      sub_10019D60C(v20, v18, v22, a3);
      char v30 = *(const void **)(a1 + 16);
      uint64_t v28 = *(_OWORD *)a1;
      long long v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      long long v18[2] = v30;
      *(_OWORD *)uint64_t v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_10019D60C(&v12[3 * (v16 >> 1)], v12, (void *)a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!sub_10019D36C(a3, (void *)(a1 - 24), (const void **)a1))
    {
      uint64_t v12 = sub_10019D758((const void **)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    long long v24 = (const void **)sub_10019D8EC((long long *)a1, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v26 = sub_10019DA7C(a1, v24, a3);
    uint64_t v12 = v24 + 3;
    if (sub_10019DA7C((uint64_t)(v24 + 3), (const void **)a2, a3))
    {
      a4 = -v14;
      a2 = (char *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      sub_10019CF44(a1, v24, a3, -v14, a5 & 1);
      uint64_t v12 = v24 + 3;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_10019D3D8((uint64_t)v12, a2, a3);
  }
  else
  {
    sub_10019D500(v12, a2, a3);
  }
}

uint64_t sub_10018C6E0(uint64_t result, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  if (result != a2)
  {
    uint64_t v28 = v3;
    uint64_t v29 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t v12 = *a3;
        long long v26 = *(_OWORD *)v10;
        uint64_t v27 = *(void *)(v10 + 16);
        uint64_t v13 = *(void *)(v11 + 16);
        long long v24 = *(_OWORD *)v11;
        uint64_t v25 = v13;
        double result = v12(&v26, &v24);
        if (result)
        {
          long long v22 = *(_OWORD *)v10;
          uint64_t v23 = *(void *)(v10 + 16);
          uint64_t v14 = v9;
          while (1)
          {
            uint64_t v15 = v6 + v14;
            *(_OWORD *)(v15 + 24) = *(_OWORD *)(v6 + v14);
            *(void *)(v15 + 40) = *(void *)(v6 + v14 + 16);
            if (!v14) {
              break;
            }
            unint64_t v16 = *a3;
            long long v20 = v22;
            uint64_t v21 = v23;
            long long v18 = *(_OWORD *)(v15 - 24);
            uint64_t v19 = *(void *)(v15 - 8);
            double result = v16(&v20, &v18);
            v14 -= 24;
            if ((result & 1) == 0)
            {
              uint64_t v17 = v6 + v14 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v17 = v6;
LABEL_10:
          *(_OWORD *)uint64_t v17 = v22;
          *(void *)(v17 + 16) = v23;
        }
        uint64_t v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_10018C810(uint64_t result, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  if (result != a2)
  {
    uint64_t v25 = v3;
    uint64_t v26 = v4;
    uint64_t v6 = result;
    for (uint64_t i = result + 24; v6 + 24 != a2; uint64_t i = v6 + 24)
    {
      uint64_t v9 = v6;
      uint64_t v6 = i;
      uint64_t v10 = *a3;
      long long v23 = *(_OWORD *)v6;
      uint64_t v24 = *(void *)(v6 + 16);
      uint64_t v11 = *(void *)(v9 + 16);
      long long v21 = *(_OWORD *)v9;
      uint64_t v22 = v11;
      double result = v10(&v23, &v21);
      if (result)
      {
        long long v19 = *(_OWORD *)v6;
        uint64_t v20 = *(void *)(v6 + 16);
        uint64_t v12 = v6;
        do
        {
          uint64_t v13 = v12 - 24;
          *(_OWORD *)uint64_t v12 = *(_OWORD *)(v12 - 24);
          *(void *)(v12 + 16) = *(void *)(v12 - 8);
          uint64_t v14 = *a3;
          long long v17 = v19;
          uint64_t v18 = v20;
          long long v15 = *(_OWORD *)(v12 - 48);
          uint64_t v16 = *(void *)(v12 - 32);
          double result = v14(&v17, &v15);
          uint64_t v12 = v13;
        }
        while ((result & 1) != 0);
        *(_OWORD *)uint64_t v13 = v19;
        *(void *)(v13 + 16) = v20;
      }
    }
  }
  return result;
}

uint64_t sub_10018C918(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  size_t v8 = *a4;
  long long v49 = *a2;
  uint64_t v50 = *((void *)a2 + 2);
  long long v47 = *a1;
  uint64_t v48 = *((void *)a1 + 2);
  char v9 = v8(&v49, &v47);
  uint64_t v10 = *a4;
  if ((v9 & 1) == 0)
  {
    long long v45 = *a3;
    uint64_t v46 = *((void *)a3 + 2);
    long long v43 = *a2;
    uint64_t v44 = *((void *)a2 + 2);
    uint64_t result = v10(&v45, &v43);
    if (!result) {
      return result;
    }
    uint64_t v15 = *((void *)a2 + 2);
    long long v16 = *a2;
    uint64_t v17 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v17;
    *a3 = v16;
    *((void *)a3 + 2) = v15;
    uint64_t v18 = *a4;
    uint64_t v42 = *((void *)a2 + 2);
    long long v41 = *a2;
    long long v19 = *a1;
    uint64_t v40 = *((void *)a1 + 2);
    long long v39 = v19;
    if (!v18(&v41, &v39)) {
      return 1;
    }
    uint64_t v20 = *((void *)a1 + 2);
    long long v21 = *a1;
    uint64_t v22 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v22;
    *a2 = v21;
    *((void *)a2 + 2) = v20;
    return 2;
  }
  long long v37 = *a3;
  uint64_t v38 = *((void *)a3 + 2);
  long long v35 = *a2;
  uint64_t v36 = *((void *)a2 + 2);
  if (!v10(&v37, &v35))
  {
    uint64_t v23 = *((void *)a1 + 2);
    long long v24 = *a1;
    uint64_t v25 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v25;
    *a2 = v24;
    *((void *)a2 + 2) = v23;
    uint64_t v26 = *a4;
    uint64_t v34 = *((void *)a3 + 2);
    long long v33 = *a3;
    long long v27 = *a2;
    uint64_t v32 = *((void *)a2 + 2);
    long long v31 = v27;
    if (!v26(&v33, &v31)) {
      return 1;
    }
    uint64_t v28 = *((void *)a2 + 2);
    long long v29 = *a2;
    uint64_t v30 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v30;
    *a3 = v29;
    *((void *)a3 + 2) = v28;
    return 2;
  }
  uint64_t v11 = *((void *)a1 + 2);
  long long v12 = *a1;
  uint64_t v13 = *((void *)a3 + 2);
  *a1 = *a3;
  *((void *)a1 + 2) = v13;
  *a3 = v12;
  *((void *)a3 + 2) = v11;
  return 1;
}

long long *sub_10018CB10(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v53 = *a1;
  uint64_t v54 = *((void *)a1 + 2);
  uint64_t v6 = *a3;
  long long v51 = v53;
  uint64_t v52 = v54;
  long long v49 = *(long long *)((char *)a2 - 24);
  uint64_t v50 = *((void *)a2 - 1);
  if (v6(&v51, &v49))
  {
    uint64_t v7 = a1;
    do
    {
      size_t v8 = (long long *)((char *)v7 + 24);
      char v9 = *a3;
      long long v47 = v53;
      uint64_t v48 = v54;
      long long v45 = *(long long *)((char *)v7 + 24);
      uint64_t v46 = *((void *)v7 + 5);
      char v10 = v9(&v47, &v45);
      uint64_t v7 = v8;
    }
    while ((v10 & 1) == 0);
  }
  else
  {
    uint64_t v11 = (long long *)((char *)a1 + 24);
    do
    {
      size_t v8 = v11;
      if (v11 >= v4) {
        break;
      }
      long long v12 = *a3;
      long long v43 = v53;
      uint64_t v44 = v54;
      long long v41 = *v8;
      uint64_t v42 = *((void *)v8 + 2);
      int v13 = v12(&v43, &v41);
      uint64_t v11 = (long long *)((char *)v8 + 24);
    }
    while (!v13);
  }
  if (v8 >= v4)
  {
    uint64_t v14 = v4;
  }
  else
  {
    do
    {
      uint64_t v14 = (long long *)((char *)v4 - 24);
      uint64_t v15 = *a3;
      long long v39 = v53;
      uint64_t v40 = v54;
      long long v37 = *(long long *)((char *)v4 - 24);
      uint64_t v38 = *((void *)v4 - 1);
      uint64_t v4 = (long long *)((char *)v4 - 24);
    }
    while ((v15(&v39, &v37) & 1) != 0);
  }
  while (v8 < v14)
  {
    long long v16 = *v8;
    uint64_t v56 = *((void *)v8 + 2);
    long long v55 = v16;
    long long v17 = *v14;
    *((void *)v8 + 2) = *((void *)v14 + 2);
    *size_t v8 = v17;
    long long v18 = v55;
    *((void *)v14 + 2) = v56;
    long long *v14 = v18;
    do
    {
      long long v35 = v53;
      uint64_t v36 = v54;
      uint64_t v19 = *((void *)v8 + 5);
      long long v20 = *(long long *)((char *)v8 + 24);
      size_t v8 = (long long *)((char *)v8 + 24);
      long long v21 = *a3;
      long long v33 = v20;
      uint64_t v34 = v19;
    }
    while (!v21(&v35, &v33));
    do
    {
      long long v31 = v53;
      uint64_t v32 = v54;
      uint64_t v22 = *((void *)v14 - 1);
      long long v23 = *(long long *)((char *)v14 - 24);
      uint64_t v14 = (long long *)((char *)v14 - 24);
      long long v24 = *a3;
      long long v29 = v23;
      uint64_t v30 = v22;
    }
    while ((v24(&v31, &v29) & 1) != 0);
  }
  uint64_t v25 = (long long *)((char *)v8 - 24);
  if ((long long *)((char *)v8 - 24) != a1)
  {
    long long v26 = *v25;
    *((void *)a1 + 2) = *((void *)v8 - 1);
    *a1 = v26;
  }
  long long v27 = v53;
  *((void *)v8 - 1) = v54;
  *uint64_t v25 = v27;
  return v8;
}

uint64_t sub_10018CD40(long long *a1, unint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v47 = *a1;
  uint64_t v48 = *((void *)a1 + 2);
  do
  {
    uint64_t v7 = *a3;
    long long v45 = *(long long *)((char *)a1 + v6 + 24);
    uint64_t v46 = *(void *)((char *)a1 + v6 + 40);
    long long v43 = v47;
    uint64_t v44 = v48;
    v6 += 24;
  }
  while ((v7(&v45, &v43) & 1) != 0);
  size_t v8 = (long long *)((char *)a1 + v6);
  uint64_t v9 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    while ((unint64_t)v8 < a2)
    {
      long long v12 = *a3;
      unint64_t v10 = a2 - 24;
      long long v41 = *(_OWORD *)(a2 - 24);
      uint64_t v42 = *(void *)(a2 - 8);
      long long v39 = v47;
      uint64_t v40 = v48;
      a2 -= 24;
      if (v12(&v41, &v39)) {
        goto LABEL_9;
      }
    }
    unint64_t v10 = a2;
  }
  else
  {
    do
    {
      unint64_t v10 = a2 - 24;
      uint64_t v11 = *a3;
      long long v37 = *(_OWORD *)(a2 - 24);
      uint64_t v38 = *(void *)(a2 - 8);
      long long v35 = v47;
      uint64_t v36 = v48;
      a2 -= 24;
    }
    while (!v11(&v37, &v35));
  }
LABEL_9:
  if ((unint64_t)v8 < v10)
  {
    int v13 = v8;
    unint64_t v14 = v10;
    do
    {
      long long v49 = *v13;
      long long v15 = v49;
      uint64_t v50 = *((void *)v13 + 2);
      uint64_t v16 = v50;
      uint64_t v17 = *(void *)(v14 + 16);
      *int v13 = *(_OWORD *)v14;
      *((void *)v13 + 2) = v17;
      *(void *)(v14 + 16) = v16;
      *(_OWORD *)unint64_t v14 = v15;
      do
      {
        uint64_t v18 = *((void *)v13 + 5);
        long long v19 = *(long long *)((char *)v13 + 24);
        int v13 = (long long *)((char *)v13 + 24);
        long long v20 = *a3;
        long long v33 = v19;
        uint64_t v34 = v18;
        long long v31 = v47;
        uint64_t v32 = v48;
      }
      while ((v20(&v33, &v31) & 1) != 0);
      do
      {
        uint64_t v21 = *(void *)(v14 - 8);
        long long v22 = *(_OWORD *)(v14 - 24);
        v14 -= 24;
        long long v23 = *a3;
        long long v29 = v22;
        uint64_t v30 = v21;
        long long v27 = v47;
        uint64_t v28 = v48;
      }
      while (!v23(&v29, &v27));
    }
    while ((unint64_t)v13 < v14);
    uint64_t v9 = (uint64_t)v13 - 24;
  }
  if ((long long *)v9 != a1)
  {
    long long v24 = *(_OWORD *)v9;
    *((void *)a1 + 2) = *(void *)(v9 + 16);
    *a1 = v24;
  }
  long long v25 = v47;
  *(void *)(v9 + 16) = v48;
  *(_OWORD *)uint64_t v9 = v25;
  return v9;
}

BOOL sub_10018CF58(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      size_t v8 = *a3;
      long long v35 = *(_OWORD *)(a2 - 24);
      uint64_t v36 = *(void *)(a2 - 8);
      long long v33 = *(_OWORD *)a1;
      uint64_t v34 = *(void *)(a1 + 16);
      if (v8(&v35, &v33))
      {
        uint64_t v9 = a2 - 24;
        uint64_t v10 = *(void *)(a1 + 16);
        long long v11 = *(_OWORD *)a1;
        uint64_t v12 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v12;
        *(_OWORD *)uint64_t v9 = v11;
        *(void *)(v9 + 16) = v10;
      }
      return 1;
    case 3uLL:
      sub_10018C918((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_10018D1C8(a1, a1 + 24, a1 + 48, (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_10018D314(a1, a1 + 24, a1 + 48, a1 + 72, (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v13 = a1 + 48;
      sub_10018C918((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v14 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    uint64_t v17 = *a3;
    long long v31 = *(_OWORD *)v14;
    uint64_t v32 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v13 + 16);
    long long v29 = *(_OWORD *)v13;
    uint64_t v30 = v18;
    if (v17(&v31, &v29))
    {
      long long v27 = *(_OWORD *)v14;
      uint64_t v28 = *(void *)(v14 + 16);
      uint64_t v19 = v15;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(a1 + v19 + 48);
        *(void *)(v20 + 88) = *(void *)(a1 + v19 + 64);
        if (v19 == -48) {
          break;
        }
        uint64_t v21 = *a3;
        long long v25 = v27;
        uint64_t v26 = v28;
        long long v23 = *(_OWORD *)(v20 + 24);
        uint64_t v24 = *(void *)(v20 + 40);
        v19 -= 24;
        if ((v21(&v25, &v23) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v22 = v27;
      *(void *)(v22 + 16) = v28;
      if (++v16 == 8) {
        return v14 + 24 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2) {
      return 1;
    }
  }
}

__n128 sub_10018D1C8(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  sub_10018C918((long long *)a1, (long long *)a2, (long long *)a3, a5);
  uint64_t v10 = *a5;
  long long v34 = *a4;
  uint64_t v35 = *((void *)a4 + 2);
  long long v32 = *(_OWORD *)a3;
  uint64_t v33 = *(void *)(a3 + 16);
  if (v10(&v34, &v32))
  {
    uint64_t v12 = *(void *)(a3 + 16);
    long long v13 = *(_OWORD *)a3;
    uint64_t v14 = *((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    *(void *)(a3 + 16) = v14;
    *a4 = v13;
    *((void *)a4 + 2) = v12;
    uint64_t v15 = *a5;
    uint64_t v31 = *(void *)(a3 + 16);
    long long v30 = *(_OWORD *)a3;
    long long v16 = *(_OWORD *)a2;
    uint64_t v29 = *(void *)(a2 + 16);
    long long v28 = v16;
    if (v15(&v30, &v28))
    {
      uint64_t v17 = *(void *)(a2 + 16);
      long long v18 = *(_OWORD *)a2;
      uint64_t v19 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(void *)(a3 + 16) = v17;
      uint64_t v20 = *a5;
      uint64_t v27 = *(void *)(a2 + 16);
      long long v26 = *(_OWORD *)a2;
      long long v21 = *(_OWORD *)a1;
      uint64_t v25 = *(void *)(a1 + 16);
      long long v24 = v21;
      if (v20(&v26, &v24))
      {
        uint64_t v22 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v23 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v23;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v22;
      }
    }
  }
  return result;
}

__n128 sub_10018D314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  sub_10018D1C8(a1, a2, a3, (long long *)a4, a6);
  uint64_t v12 = *a6;
  long long v45 = *a5;
  uint64_t v46 = *((void *)a5 + 2);
  long long v43 = *(_OWORD *)a4;
  uint64_t v44 = *(void *)(a4 + 16);
  if (v12(&v45, &v43))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *((void *)a5 + 2);
    *(_OWORD *)a4 = *a5;
    *(void *)(a4 + 16) = v16;
    *a5 = v15;
    *((void *)a5 + 2) = v14;
    uint64_t v17 = *a6;
    uint64_t v42 = *(void *)(a4 + 16);
    long long v41 = *(_OWORD *)a4;
    long long v18 = *(_OWORD *)a3;
    uint64_t v40 = *(void *)(a3 + 16);
    long long v39 = v18;
    if (v17(&v41, &v39))
    {
      uint64_t v19 = *(void *)(a3 + 16);
      long long v20 = *(_OWORD *)a3;
      uint64_t v21 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(void *)(a4 + 16) = v19;
      uint64_t v22 = *a6;
      uint64_t v38 = *(void *)(a3 + 16);
      long long v37 = *(_OWORD *)a3;
      __n128 v23 = *(__n128 *)a2;
      uint64_t v36 = *(void *)(a2 + 16);
      __n128 v35 = v23;
      if (v22(&v37, (long long *)&v35))
      {
        uint64_t v24 = *(void *)(a2 + 16);
        __n128 v25 = *(__n128 *)a2;
        uint64_t v26 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v26;
        *(__n128 *)a3 = v25;
        *(void *)(a3 + 16) = v24;
        uint64_t v27 = *a6;
        uint64_t v34 = *(void *)(a2 + 16);
        __n128 v33 = *(__n128 *)a2;
        __n128 v28 = *(__n128 *)a1;
        uint64_t v32 = *(void *)(a1 + 16);
        __n128 v31 = v28;
        if (v27((long long *)&v33, (long long *)&v31))
        {
          uint64_t v29 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v30 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v30;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

__n128 *sub_10018D4C0(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(__n128 *, long long *))
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (__n128 *)((char *)a1 + 24 * v10);
      do
      {
        sub_10018D6A4((uint64_t)a1, a4, v9, v12);
        uint64_t v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        long long v15 = *a4;
        __n128 v27 = *v14;
        uint64_t v28 = v14[1].n128_i64[0];
        __n128 v25 = *a1;
        unint64_t v26 = a1[1].n128_u64[0];
        if (v15(&v27, (long long *)&v25))
        {
          unint64_t v16 = v14[1].n128_u64[0];
          __n128 v17 = *v14;
          unint64_t v18 = a1[1].n128_u64[0];
          __n128 *v14 = *a1;
          v14[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          sub_10018D6A4((uint64_t)a1, a4, v9, a1);
        }
        uint64_t v14 = (__n128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v19 = v8 / 0x18uLL;
      long long v20 = (__n128 *)((char *)a2 - 24);
      do
      {
        __n128 v29 = *a1;
        unint64_t v30 = a1[1].n128_u64[0];
        uint64_t v21 = sub_10018D890((uint64_t)a1, (unsigned int (**)(long long *, long long *))a4, v19);
        if (v20 == (__n128 *)v21)
        {
          *(__n128 *)uint64_t v21 = v29;
          *(void *)(v21 + 16) = v30;
        }
        else
        {
          __n128 v22 = *v20;
          *(void *)(v21 + 16) = v20[1].n128_u64[0];
          *(__n128 *)uint64_t v21 = v22;
          __n128 *v20 = v29;
          v20[1].n128_u64[0] = v30;
          sub_10018D97C((uint64_t)a1, v21 + 24, (unsigned int (**)(long long *, long long *))a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - (uint64_t)a1) >> 3));
        }
        long long v20 = (__n128 *)((char *)v20 - 24);
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_10018D6A4(uint64_t a1, unsigned int (**a2)(__n128 *, long long *), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v41 = v4;
    uint64_t v42 = v5;
    uint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3)
      {
        long long v15 = *a2;
        __n128 v39 = *(__n128 *)v13;
        uint64_t v40 = *(void *)(v13 + 16);
        long long v37 = *(_OWORD *)(v13 + 24);
        uint64_t v38 = *(void *)(v13 + 40);
        if (v15(&v39, &v37))
        {
          v13 += 24;
          uint64_t v12 = v14;
        }
      }
      unint64_t v16 = (uint64_t (*)(__n128 *, __n128 *))*a2;
      __n128 v35 = *(__n128 *)v13;
      uint64_t v36 = *(void *)(v13 + 16);
      __n128 v33 = *v7;
      unint64_t v34 = v7[1].n128_u64[0];
      if ((v16(&v35, &v33) & 1) == 0)
      {
        __n128 v31 = *v7;
        unint64_t v32 = v7[1].n128_u64[0];
        do
        {
          unint64_t v18 = (__n128 *)v13;
          __n128 v19 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *uint64_t v7 = v19;
          if (v9 < v12) {
            break;
          }
          uint64_t v20 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v20;
          if (2 * v12 + 2 < a3)
          {
            uint64_t v21 = *a2;
            __n128 v29 = *(__n128 *)v13;
            uint64_t v30 = *(void *)(v13 + 16);
            long long v27 = *(_OWORD *)(v13 + 24);
            uint64_t v28 = *(void *)(v13 + 40);
            if (v21(&v29, &v27))
            {
              v13 += 24;
              uint64_t v20 = 2 * v12 + 2;
            }
          }
          __n128 v22 = *a2;
          __n128 v25 = *(__n128 *)v13;
          uint64_t v26 = *(void *)(v13 + 16);
          __n128 v23 = v31;
          unint64_t v24 = v32;
          uint64_t v7 = v18;
          uint64_t v12 = v20;
        }
        while (!v22(&v25, (long long *)&v23));
        __n128 result = v31;
        v18[1].n128_u64[0] = v32;
        *unint64_t v18 = result;
      }
    }
  }
  return result;
}

uint64_t sub_10018D890(uint64_t a1, unsigned int (**a2)(long long *, long long *), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      uint64_t v12 = *a2;
      uint64_t v13 = *(void *)(v9 + 16);
      long long v19 = *(_OWORD *)v9;
      uint64_t v20 = v13;
      uint64_t v14 = *(void *)(v9 + 40);
      long long v17 = *(_OWORD *)(v9 + 24);
      uint64_t v18 = v14;
      if (v12(&v19, &v17))
      {
        v9 += 24;
        uint64_t v10 = v11;
      }
    }
    long long v15 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v15;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double sub_10018D97C(uint64_t a1, uint64_t a2, unsigned int (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v29 = v4;
    uint64_t v30 = v5;
    unint64_t v10 = v6 >> 1;
    uint64_t v11 = (long long *)(a1 + 24 * (v6 >> 1));
    uint64_t v12 = *a3;
    long long v27 = *v11;
    uint64_t v28 = *((void *)v11 + 2);
    long long v25 = *(_OWORD *)(a2 - 24);
    uint64_t v26 = *(void *)(a2 - 8);
    if (v12(&v27, &v25))
    {
      uint64_t v14 = (long long *)(a2 - 24);
      long long v23 = *(_OWORD *)(a2 - 24);
      uint64_t v24 = *(void *)(a2 - 8);
      do
      {
        long long v15 = v11;
        long long v16 = *v11;
        *((void *)v14 + 2) = *((void *)v11 + 2);
        long long *v14 = v16;
        if (!v10) {
          break;
        }
        unint64_t v10 = (v10 - 1) >> 1;
        uint64_t v11 = (long long *)(a1 + 24 * v10);
        long long v17 = *a3;
        long long v21 = *v11;
        uint64_t v22 = *((void *)v11 + 2);
        long long v19 = v23;
        uint64_t v20 = v24;
        char v18 = v17(&v21, &v19);
        uint64_t v14 = v15;
      }
      while ((v18 & 1) != 0);
      double result = *(double *)&v23;
      long long *v15 = v23;
      *((void *)v15 + 2) = v24;
    }
  }
  return result;
}

uint64_t sub_10018DA8C()
{
  sub_10018BE30(qword_1008A3368);
  __cxa_atexit((void (*)(void *))sub_10018ADD8, qword_1008A3368, (void *)&_mh_execute_header);
  sub_10018BF38(qword_1008A3388);
  __cxa_atexit((void (*)(void *))sub_10018AE28, qword_1008A3388, (void *)&_mh_execute_header);
  sub_10018BFC8(qword_1008A33A8);
  __cxa_atexit((void (*)(void *))sub_10018AE78, qword_1008A33A8, (void *)&_mh_execute_header);
  sub_10018C058(qword_1008A33C8);
  __cxa_atexit((void (*)(void *))sub_10018AEC8, qword_1008A33C8, (void *)&_mh_execute_header);
  sub_10018C0E8(qword_1008A33E8);
  __cxa_atexit((void (*)(void *))sub_10018AF18, qword_1008A33E8, (void *)&_mh_execute_header);
  sub_10018C178((uint64_t)&unk_1008A3408, 1);
  __cxa_atexit((void (*)(void *))sub_10018AF68, &unk_1008A3408, (void *)&_mh_execute_header);
  sub_10018C178((uint64_t)&unk_1008A3430, 2);
  __cxa_atexit((void (*)(void *))sub_10018AF68, &unk_1008A3430, (void *)&_mh_execute_header);
  sub_10018C260(qword_1008A3458);

  return __cxa_atexit((void (*)(void *))sub_10018AFB8, qword_1008A3458, (void *)&_mh_execute_header);
}

void sub_10018DC68(id a1)
{
  byte_1008A3478 = MGGetBoolAnswer();
}

void sub_10018DCD4(id a1)
{
  byte_1008A3488 = MGGetBoolAnswer();
}

void sub_10018DD40(id a1)
{
  if (!MGGetBoolAnswer()) {
    goto LABEL_17;
  }
  char v1 = 1;
  uint64_t v2 = MGGetProductType();
  if (v2 <= 2309863437)
  {
    if (v2 <= 1169082143)
    {
      if (v2 == 689804742) {
        goto LABEL_18;
      }
      uint64_t v3 = 1060988941;
    }
    else
    {
      if (v2 == 1169082144 || v2 == 1371389549) {
        goto LABEL_18;
      }
      uint64_t v3 = 2080700391;
    }
  }
  else if (v2 > 3585085678)
  {
    if (v2 == 3585085679 || v2 == 3885279870) {
      goto LABEL_18;
    }
    uint64_t v3 = 4201643249;
  }
  else
  {
    if (v2 == 2309863438 || v2 == 2722529672) {
      goto LABEL_18;
    }
    uint64_t v3 = 3001488778;
  }
  if (v2 != v3) {
LABEL_17:
  }
    char v1 = 0;
LABEL_18:
  byte_1008A3498 = v1;
}

void sub_10018DE98(id a1)
{
  if (MGGetBoolAnswer()) {
    BOOL v1 = MGGetSInt32Answer() == 1;
  }
  else {
    BOOL v1 = 0;
  }
  byte_1008A34A8 = v1;
}

void sub_10018DF28(id a1)
{
  byte_1008A34B8 = MGGetBoolAnswer();
}

void sub_10018DF94(id a1)
{
  if (!MGGetBoolAnswer()) {
    goto LABEL_14;
  }
  char v1 = 1;
  uint64_t v2 = MGGetProductType();
  if (v2 > 2793418700)
  {
    if (v2 > 2941181570)
    {
      if (v2 == 2941181571) {
        goto LABEL_15;
      }
      uint64_t v3 = 3825599860;
    }
    else
    {
      if (v2 == 2793418701) {
        goto LABEL_15;
      }
      uint64_t v3 = 2795618603;
    }
  }
  else if (v2 > 574536382)
  {
    if (v2 == 574536383) {
      goto LABEL_15;
    }
    uint64_t v3 = 851437781;
  }
  else
  {
    if (v2 == 133314240) {
      goto LABEL_15;
    }
    uint64_t v3 = 330877086;
  }
  if (v2 != v3) {
LABEL_14:
  }
    char v1 = 0;
LABEL_15:
  byte_1008A34C8 = v1;
}

void *sub_10018E078@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100855B38)[a1]);
}

void *sub_10018E08C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100855B90)[a1]);
}

void *sub_10018E0A0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100855BD8)[a1]);
}

void *sub_10018E0B4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100855BF8)[a1]);
}

void sub_10018E0C8(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  memset(&v17[37], 0, 116);
  *(_WORD *)long long v17 = a2;
  *(void *)&void v17[2] = 0xFFFFFFFFLL;
  *(_WORD *)&v17[10] = 0;
  *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&v17[21] = *(_OWORD *)(a1 + 77);
  switch(*(_DWORD *)(a1 + 4))
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100414978();
      }
      goto LABEL_102;
    case 1:
      v17[6] = 101;
      *(_DWORD *)&void v17[2] = 20;
      int v5 = *((_DWORD *)sub_100007D00() + 187);
      if (!v5)
      {
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
        goto LABEL_89;
      }
      if (v5 == 2)
      {
        if (sub_10018EFF0((uint64_t)&v17[37], a1)) {
          goto LABEL_48;
        }
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }
      else
      {
        if (v5 != 1 || sub_10018E8C8((uint64_t)&v17[37], a1)) {
          goto LABEL_48;
        }
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }
      goto LABEL_101;
    case 2:
      v17[6] = 100;
      *(_DWORD *)&void v17[2] = 17;
      int v6 = *((_DWORD *)sub_100007D00() + 187);
      if (!v6)
      {
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
        goto LABEL_89;
      }
      if (v6 == 2)
      {
        if (sub_10018FB08((uint64_t)&v17[37], a1)) {
          goto LABEL_48;
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_10041480C();
        }
      }
      else
      {
        if (v6 != 1 || (sub_10018F6F8((uint64_t)&v17[37], a1) & 1) != 0) {
          goto LABEL_48;
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_1004147D8();
        }
      }
      goto LABEL_102;
    case 3:
      if (!*(unsigned char *)(a1 + 293))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
          sub_100414840();
        }
        goto LABEL_102;
      }
      v17[6] = *(unsigned char *)(a1 + 292);
      if (v17[6] != 102 && v17[6] != 106)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
          sub_100414874();
        }
        goto LABEL_102;
      }
      *(_DWORD *)&void v17[2] = 16;
      int v7 = *((_DWORD *)sub_100007D00() + 187);
      if (!v7)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
LABEL_89:
        }
          sub_1004147A4();
        goto LABEL_102;
      }
      if (v7 == 2)
      {
        if (sub_10019038C((uint64_t)&v17[37], a1)) {
          goto LABEL_48;
        }
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }
      else
      {
        if (v7 != 1 || sub_10018FEC4((uint64_t)&v17[37], a1)) {
          goto LABEL_48;
        }
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }
      goto LABEL_101;
    case 4:
      if (!*(unsigned char *)(a1 + 280))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
          sub_1004148A8();
        }
        goto LABEL_102;
      }
      v17[6] = *(unsigned char *)(a1 + 243);
      if (v17[6] == 5)
      {
        *(_DWORD *)&void v17[2] = 23;
        int v8 = *((_DWORD *)sub_100007D00() + 187);
        if (v8)
        {
          if (v8 == 2)
          {
            if (sub_100190F98((uint64_t)&v17[37], a1)) {
              goto LABEL_48;
            }
          }
          else if (v8 == 1 && sub_100190878((uint64_t)&v17[37], a1))
          {
            goto LABEL_48;
          }
          goto LABEL_100;
        }
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_100;
        }
LABEL_94:
        sub_1004148DC();
        goto LABEL_100;
      }
      *(_DWORD *)&void v17[2] = 22;
      int v16 = *((_DWORD *)sub_100007D00() + 187);
      if (v16)
      {
        if (v16 == 1)
        {
          if (sub_1001916D0((uint64_t)&v17[37], a1)) {
            goto LABEL_48;
          }
        }
        else if (v16 == 2 && sub_100192008((uint64_t)&v17[37], a1))
        {
          goto LABEL_48;
        }
        goto LABEL_100;
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_94;
      }
LABEL_100:
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_102;
      }
LABEL_101:
      sub_100414770();
LABEL_102:
      char v15 = 0;
      *(unsigned char *)a3 = 0;
LABEL_103:
      *(unsigned char *)(a3 + 153) = v15;
      return;
    case 5:
      v17[6] = 103;
      *(_DWORD *)&void v17[2] = 24;
      int v9 = *((_DWORD *)sub_100007D00() + 187);
      if (!v9)
      {
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
        goto LABEL_77;
      }
      if (v9 == 2)
      {
        if (sub_100192D70((uint64_t)&v17[37], a1)) {
          goto LABEL_48;
        }
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }
      else
      {
        if (v9 != 1 || sub_100192960((uint64_t)&v17[37], a1)) {
          goto LABEL_48;
        }
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
      }
      goto LABEL_101;
    case 6:
      v17[6] = 103;
      *(_DWORD *)&void v17[2] = 25;
      int v10 = *((_DWORD *)sub_100007D00() + 187);
      if (!v10)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
LABEL_77:
        }
          sub_100414770();
        goto LABEL_102;
      }
      if (v10 == 2)
      {
        if (!sub_100193614((uint64_t)&v17[37], a1))
        {
          if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
            goto LABEL_102;
          }
          goto LABEL_101;
        }
      }
      else if (v10 == 1 && !sub_100193188((uint64_t)&v17[37], a1))
      {
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_102;
        }
        goto LABEL_101;
      }
LABEL_48:
      if (sub_100194508(&v17[7], a1))
      {
        if (sub_1001946C8(&v17[11], a1))
        {
          long long v11 = *(_OWORD *)&v17[112];
          *(_OWORD *)(a3 + 96) = *(_OWORD *)&v17[96];
          *(_OWORD *)(a3 + 112) = v11;
          *(_OWORD *)(a3 + 128) = *(_OWORD *)&v17[128];
          *(_OWORD *)(a3 + 137) = *(_OWORD *)&v17[137];
          long long v12 = *(_OWORD *)&v17[48];
          *(_OWORD *)(a3 + 32) = *(_OWORD *)&v17[32];
          *(_OWORD *)(a3 + 48) = v12;
          long long v13 = *(_OWORD *)&v17[80];
          *(_OWORD *)(a3 + 64) = *(_OWORD *)&v17[64];
          *(_OWORD *)(a3 + 80) = v13;
          long long v14 = *(_OWORD *)&v17[16];
          char v15 = 1;
          *(_OWORD *)a3 = *(_OWORD *)v17;
          *(_OWORD *)(a3 + 16) = v14;
          goto LABEL_103;
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100414708();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        sub_10041473C();
      }
      goto LABEL_102;
    case 7:
      v17[6] = 104;
      *(_DWORD *)&void v17[2] = 26;
      if (sub_100193AA8((uint64_t)&v17[37], a1)) {
        goto LABEL_48;
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100414910();
      }
      goto LABEL_102;
    case 8:
      v17[6] = 105;
      *(_DWORD *)&void v17[2] = 27;
      if (sub_100193E5C((uint64_t)&v17[37], a1)) {
        goto LABEL_48;
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100414944();
      }
      goto LABEL_102;
    default:
      goto LABEL_48;
  }
}

BOOL sub_10018E8C8(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100414B44();
  }
  if (!*(unsigned char *)(a2 + 97)
    || !*(unsigned char *)(a2 + 99)
    || !*(unsigned char *)(a2 + 163)
    || !*(unsigned char *)(a2 + 101)
    || !*(unsigned char *)(a2 + 103)
    || !*(unsigned char *)(a2 + 105)
    || !*(unsigned char *)(a2 + 107)
    || !*(unsigned char *)(a2 + 110)
    || !*(unsigned char *)(a2 + 113)
    || !*(unsigned char *)(a2 + 115)
    || !*(unsigned char *)(a2 + 117)
    || !*(unsigned char *)(a2 + 201)
    || !*(unsigned char *)(a2 + 203)
    || !*(unsigned char *)(a2 + 120)
    || !*(unsigned char *)(a2 + 194)
    || !*(unsigned char *)(a2 + 198)
    || !*(unsigned char *)(a2 + 153))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_1004149AC();
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 >= 2)
  {
    int v6 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      if (!*(unsigned char *)(a2 + 97)) {
        sub_10000AE44();
      }
      sub_100414AF8((unsigned __int8 *)(a2 + 96), buf, v6);
    }

    return 0;
  }
  *(_WORD *)(a1 + 16) = 16401;
  if (!*(unsigned char *)(a2 + 97)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
  if (!*(unsigned char *)(a2 + 99)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 98);
  if (!*(unsigned char *)(a2 + 163)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 162);
  if (!*(unsigned char *)(a2 + 101)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 100);
  if (!*(unsigned char *)(a2 + 103)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 102);
  if (v4 == 1)
  {
    if (*(unsigned char *)(a2 + 170))
    {
      *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 168);
      goto LABEL_41;
    }
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100414AC4();
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 165) && *(unsigned char *)(a2 + 167))
    {
      *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 164);
      if (!*(unsigned char *)(a2 + 167)) {
        sub_10000AE44();
      }
      *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 166);
LABEL_41:
      if (!*(unsigned char *)(a2 + 105)) {
        sub_10000AE44();
      }
      if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 104))) {
        sub_100414A64();
      }
      if (!*(unsigned char *)(a2 + 107)) {
        sub_10000AE44();
      }
      if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 106))) {
        sub_100414A38();
      }
      if (!*(unsigned char *)(a2 + 110)) {
        sub_10000AE44();
      }
      if (!sub_1003A90AC((unsigned char *)(a2 + 108))) {
        sub_100414A0C();
      }
      if (!*(unsigned char *)(a2 + 113)) {
        sub_10000AE44();
      }
      if (!sub_1003A90AC((unsigned char *)(a2 + 111))) {
        sub_1004149E0();
      }
      if (!*(unsigned char *)(a2 + 105)) {
        sub_10000AE44();
      }
      sub_1003A7CC4(*(unsigned __int8 *)(a2 + 104), 1, v7, v8, v9, v10, v11, v12);
      *(unsigned char *)(a1 + 26) = v19;
      if (!*(unsigned char *)(a2 + 107)) {
        sub_10000AE44();
      }
      sub_1003A7CC4(*(unsigned __int8 *)(a2 + 106), 1, v13, v14, v15, v16, v17, v18);
      *(unsigned char *)(a1 + 27) = v20;
      if (!*(unsigned char *)(a2 + 110)) {
        sub_10000AE44();
      }
      *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 109);
      if (!*(unsigned char *)(a2 + 113)) {
        sub_10000AE44();
      }
      *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 112);
      if (!*(unsigned char *)(a2 + 115)) {
        sub_10000AE44();
      }
      *(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 114);
      if (!*(unsigned char *)(a2 + 117)) {
        sub_10000AE44();
      }
      *(unsigned char *)(a1 + 31) = *(unsigned char *)(a2 + 116);
      if (!*(unsigned char *)(a2 + 201)) {
        sub_10000AE44();
      }
      *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 200);
      if (!*(unsigned char *)(a2 + 203)) {
        sub_10000AE44();
      }
      *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 202);
      if (!*(unsigned char *)(a2 + 120)) {
        sub_10000AE44();
      }
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 118) | 2;
      if (!*(unsigned char *)(a2 + 194)) {
        sub_10000AE44();
      }
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 192);
      if (!*(unsigned char *)(a2 + 198)) {
        sub_10000AE44();
      }
      *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 196);
      if (!*(unsigned char *)(a2 + 153)) {
        sub_10000AE44();
      }
      *(unsigned char *)(a1 + 39) = sub_1003A8E98(*(unsigned __int8 *)(a2 + 152), 1);
      *(void *)(a1 + 56) = 0;
      if (v4 == 1)
      {
        uint64_t v47 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          int v48 = *(unsigned __int8 *)(a1 + 22);
          int v49 = *(unsigned __int8 *)(a1 + 23);
          int v50 = *(unsigned __int8 *)(a1 + 24);
          int v51 = *(unsigned __int8 *)(a1 + 25);
          int v52 = *(unsigned __int8 *)(a1 + 26);
          int v53 = *(unsigned __int8 *)(a1 + 27);
          int v54 = *(unsigned __int8 *)(a1 + 28);
          int v55 = *(unsigned __int8 *)(a1 + 29);
          int v56 = *(unsigned __int8 *)(a1 + 30);
          int v57 = *(unsigned __int8 *)(a1 + 31);
          int v58 = *(unsigned __int16 *)(a1 + 32);
          int v59 = *(unsigned __int8 *)(a1 + 34);
          int v60 = *(unsigned __int8 *)(a1 + 35);
          int v61 = *(unsigned __int8 *)(a1 + 36);
          int v62 = *(__int16 *)(a1 + 37);
          int v63 = *(unsigned __int8 *)(a1 + 39);
          int v64 = *(unsigned __int16 *)(a1 + 40);
          uint64_t v65 = *(void *)(a1 + 42);
          int v66 = *(_DWORD *)(a1 + 50);
          int v67 = *(unsigned __int16 *)(a1 + 54);
          uint64_t v68 = *(void *)(a1 + 56);
          *(_DWORD *)buf = 67114240;
          int v70 = v48;
          __int16 v71 = 1024;
          int v72 = v49;
          __int16 v73 = 1024;
          int v74 = v50;
          __int16 v75 = 1024;
          int v76 = v51;
          __int16 v77 = 1024;
          int v78 = v52;
          __int16 v79 = 1024;
          int v80 = v53;
          __int16 v81 = 1024;
          int v82 = v54;
          __int16 v83 = 1024;
          int v84 = v55;
          __int16 v85 = 1024;
          int v86 = v56;
          __int16 v87 = 1024;
          int v88 = v57;
          __int16 v89 = 1024;
          int v90 = v58;
          __int16 v91 = 1024;
          int v92 = v59;
          __int16 v93 = 1024;
          int v94 = v60;
          __int16 v95 = 1024;
          int v96 = v61;
          __int16 v97 = 1024;
          int v98 = v62;
          __int16 v99 = 1024;
          int v100 = v63;
          __int16 v101 = 1024;
          int v102 = v64;
          __int16 v103 = 2048;
          *(void *)__int16 v104 = v65;
          *(_WORD *)&v104[8] = 1024;
          *(_DWORD *)&v104[10] = v66;
          __int16 v105 = 1024;
          int v106 = v67;
          __int16 v107 = 2048;
          v108[0] = v68;
          uint64_t v44 = "Built P2S packet V1: { \n"
                "ses_role: %d\n"
                ", tx_ant_mask: %d\n"
                ", rx_ant_mask: %d\n"
                ", rx_sync_search_ant_mask: %d\n"
                ", tx_preamble: %d\n"
                ", rx_preamble: %d\n"
                ", tx_pkt_type: %d\n"
                ", rx_pkt_type: %d\n"
                ", tx_mslot_sz_250us: %d\n"
                ", rx_mslot_sz_250us: %d\n"
                ", interval_min_ms: %d\n"
                ", naccess_slots_min: %d\n"
                ", naccess_slots_max: %d\n"
                ", tx_ant_mask2: %d\n"
                ", soi_rssi_thd2: %d\n"
                ", channel: %d\n"
                ", debug_flags: %d\n"
                ", start_time: %llu\n"
                ", start_time_uncertainty: %u\n"
                ", interval_max_ms: %d\n"
                ", peer_addr: 0x%llx\n"
                "}";
          long long v45 = v47;
          uint32_t v46 = 136;
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v21 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = *(unsigned __int8 *)(a1 + 22);
          int v23 = *(unsigned __int8 *)(a1 + 23);
          int v24 = *(unsigned __int8 *)(a1 + 24);
          int v25 = *(unsigned __int8 *)(a1 + 25);
          int v26 = *(unsigned __int8 *)(a1 + 26);
          int v27 = *(unsigned __int8 *)(a1 + 27);
          int v28 = *(unsigned __int8 *)(a1 + 28);
          int v29 = *(unsigned __int8 *)(a1 + 29);
          int v30 = *(unsigned __int8 *)(a1 + 30);
          int v31 = *(unsigned __int8 *)(a1 + 31);
          int v32 = *(unsigned __int16 *)(a1 + 32);
          int v33 = *(unsigned __int8 *)(a1 + 34);
          int v34 = *(unsigned __int8 *)(a1 + 35);
          int v35 = *(unsigned __int8 *)(a1 + 36);
          int v36 = *(unsigned __int8 *)(a1 + 37);
          int v37 = *(unsigned __int8 *)(a1 + 38);
          int v38 = *(unsigned __int8 *)(a1 + 39);
          int v39 = *(unsigned __int16 *)(a1 + 40);
          uint64_t v40 = *(void *)(a1 + 42);
          int v41 = *(_DWORD *)(a1 + 50);
          int v42 = *(unsigned __int16 *)(a1 + 54);
          uint64_t v43 = *(void *)(a1 + 56);
          *(_DWORD *)buf = 67114496;
          int v70 = v22;
          __int16 v71 = 1024;
          int v72 = v23;
          __int16 v73 = 1024;
          int v74 = v24;
          __int16 v75 = 1024;
          int v76 = v25;
          __int16 v77 = 1024;
          int v78 = v26;
          __int16 v79 = 1024;
          int v80 = v27;
          __int16 v81 = 1024;
          int v82 = v28;
          __int16 v83 = 1024;
          int v84 = v29;
          __int16 v85 = 1024;
          int v86 = v30;
          __int16 v87 = 1024;
          int v88 = v31;
          __int16 v89 = 1024;
          int v90 = v32;
          __int16 v91 = 1024;
          int v92 = v33;
          __int16 v93 = 1024;
          int v94 = v34;
          __int16 v95 = 1024;
          int v96 = v35;
          __int16 v97 = 1024;
          int v98 = v36;
          __int16 v99 = 1024;
          int v100 = v37;
          __int16 v101 = 1024;
          int v102 = v38;
          __int16 v103 = 1024;
          *(_DWORD *)__int16 v104 = v39;
          *(_WORD *)&v104[4] = 2048;
          *(void *)&v104[6] = v40;
          __int16 v105 = 1024;
          int v106 = v41;
          __int16 v107 = 1024;
          LODWORD(v108[0]) = v42;
          WORD2(v108[0]) = 2048;
          *(void *)((char *)v108 + 6) = v43;
          uint64_t v44 = "Built P2S packet V1: { \n"
                "ses_role: %d\n"
                ", tx_ant_mask: %d\n"
                ", rx_ant_mask: %d\n"
                ", rx_sync_search_ant_mask: %d\n"
                ", tx_preamble: %d\n"
                ", rx_preamble: %d\n"
                ", tx_pkt_type: %d\n"
                ", rx_pkt_type: %d\n"
                ", tx_mslot_sz_250us: %d\n"
                ", rx_mslot_sz_250us: %d\n"
                ", interval_min_ms: %d\n"
                ", naccess_slots_min: %d\n"
                ", naccess_slots_max: %d\n"
                ", tx_ant_mask2: %d\n"
                ", rx_ant_mask2: %d\n"
                ", rx_sync_search_ant_mask2: %d\n"
                ", channel: %d\n"
                ", debug_flags: %d\n"
                ", start_time: %llu\n"
                ", start_time_uncertainty: %u\n"
                ", interval_max_ms: %d\n"
                ", peer_addr: 0x%llx\n"
                "}";
          long long v45 = v21;
          uint32_t v46 = 142;
LABEL_66:
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
        }
      }
      return 1;
    }
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100414A90();
      return 0;
    }
  }
  return result;
}

void sub_10018EFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10018EFF0(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100414C28();
  }
  if (!*(unsigned char *)(a2 + 97)
    || !*(unsigned char *)(a2 + 99)
    || !*(unsigned char *)(a2 + 163)
    || !*(unsigned char *)(a2 + 101)
    || !*(unsigned char *)(a2 + 103)
    || !*(unsigned char *)(a2 + 105)
    || !*(unsigned char *)(a2 + 107)
    || !*(unsigned char *)(a2 + 110)
    || !*(unsigned char *)(a2 + 113)
    || !*(unsigned char *)(a2 + 115)
    || !*(unsigned char *)(a2 + 117)
    || !*(unsigned char *)(a2 + 201)
    || !*(unsigned char *)(a2 + 203)
    || !*(unsigned char *)(a2 + 120)
    || !*(unsigned char *)(a2 + 194)
    || !*(unsigned char *)(a2 + 198)
    || !*(unsigned char *)(a2 + 153))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_1004149AC();
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 >= 2)
  {
    uint64_t v47 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
    {
      if (!*(unsigned char *)(a2 + 97)) {
        sub_10000AE44();
      }
      sub_100414AF8((unsigned __int8 *)(a2 + 96), (uint8_t *)&v69, v47);
    }

    return 0;
  }
  *(_WORD *)(a1 + 16) = 16401;
  if (!*(unsigned char *)(a2 + 97)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
  if (!*(unsigned char *)(a2 + 99)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 98);
  if (!*(unsigned char *)(a2 + 163)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 162);
  if (!*(unsigned char *)(a2 + 101)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 100);
  if (!*(unsigned char *)(a2 + 103)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 102);
  if (v4)
  {
LABEL_27:
    if (!*(unsigned char *)(a2 + 105)) {
      sub_10000AE44();
    }
    if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 104))) {
      sub_100414BFC();
    }
    if (!*(unsigned char *)(a2 + 107)) {
      sub_10000AE44();
    }
    if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 106))) {
      sub_100414BD0();
    }
    if (!*(unsigned char *)(a2 + 110)) {
      sub_10000AE44();
    }
    if (!sub_1003A90AC((unsigned char *)(a2 + 108))) {
      sub_100414BA4();
    }
    if (!*(unsigned char *)(a2 + 113)) {
      sub_10000AE44();
    }
    if (!sub_1003A90AC((unsigned char *)(a2 + 111))) {
      sub_100414B78();
    }
    if (!*(unsigned char *)(a2 + 105)) {
      sub_10000AE44();
    }
    sub_1003A7CC4(*(unsigned __int8 *)(a2 + 104), 2, v5, v6, v7, v8, v9, v10);
    *(unsigned char *)(a1 + 26) = v17;
    if (!*(unsigned char *)(a2 + 107)) {
      sub_10000AE44();
    }
    sub_1003A7CC4(*(unsigned __int8 *)(a2 + 106), 2, v11, v12, v13, v14, v15, v16);
    *(unsigned char *)(a1 + 27) = v18;
    if (!*(unsigned char *)(a2 + 110)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 28) = sub_1003A9120((unsigned __int8 *)(a2 + 108));
    if (!*(unsigned char *)(a2 + 113)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 30) = sub_1003A9120((unsigned __int8 *)(a2 + 111));
    if (!*(unsigned char *)(a2 + 115)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 114);
    if (!*(unsigned char *)(a2 + 117)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 116);
    if (!*(unsigned char *)(a2 + 201)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 200);
    if (!*(unsigned char *)(a2 + 203)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 202);
    if (!*(unsigned char *)(a2 + 120)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 63) = *(_WORD *)(a2 + 118) | 2;
    if (!*(unsigned char *)(a2 + 194)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 192);
    if (!*(unsigned char *)(a2 + 198)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 77) = *(_WORD *)(a2 + 196);
    if (!*(unsigned char *)(a2 + 153)) {
      sub_10000AE44();
    }
    char v19 = *(unsigned char *)(a2 + 152);
    LOBYTE(v69) = 0;
    BYTE1(v69) = v19;
    BYTE2(v69) = 1;
    LOBYTE(v70) = 0;
    BYTE2(v70) = 0;
    *(_WORD *)(a1 + 51) = sub_1003A8F90((unsigned __int8 *)&v69);
    *(void *)(a1 + 79) = 0;
    if (v4 == 1)
    {
      uint64_t v48 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v49 = *(unsigned __int8 *)(a1 + 22);
        int v50 = *(unsigned __int8 *)(a1 + 23);
        int v51 = *(unsigned __int8 *)(a1 + 24);
        int v52 = *(unsigned __int8 *)(a1 + 25);
        int v53 = *(unsigned __int8 *)(a1 + 26);
        int v54 = *(unsigned __int8 *)(a1 + 27);
        int v55 = *(unsigned __int16 *)(a1 + 28);
        int v56 = *(unsigned __int16 *)(a1 + 30);
        int v57 = *(unsigned __int8 *)(a1 + 42);
        int v58 = *(unsigned __int8 *)(a1 + 43);
        int v59 = *(unsigned __int16 *)(a1 + 44);
        int v60 = *(unsigned __int8 *)(a1 + 46);
        int v61 = *(unsigned __int8 *)(a1 + 47);
        int v62 = *(unsigned __int8 *)(a1 + 48);
        int v63 = *(unsigned __int16 *)(a1 + 51);
        int v64 = *(unsigned __int16 *)(a1 + 63);
        uint64_t v65 = *(void *)(a1 + 65);
        int v66 = *(_DWORD *)(a1 + 73);
        int v67 = *(unsigned __int16 *)(a1 + 77);
        uint64_t v68 = *(void *)(a1 + 79);
        int v69 = 67113984;
        int v70 = v49;
        __int16 v71 = 1024;
        int v72 = v50;
        __int16 v73 = 1024;
        int v74 = v51;
        __int16 v75 = 1024;
        int v76 = v52;
        __int16 v77 = 1024;
        int v78 = v53;
        __int16 v79 = 1024;
        int v80 = v54;
        __int16 v81 = 1024;
        int v82 = v55;
        __int16 v83 = 1024;
        int v84 = v56;
        __int16 v85 = 1024;
        int v86 = v57;
        __int16 v87 = 1024;
        int v88 = v58;
        __int16 v89 = 1024;
        int v90 = v59;
        __int16 v91 = 1024;
        int v92 = v60;
        __int16 v93 = 1024;
        int v94 = v61;
        __int16 v95 = 1024;
        int v96 = v62;
        __int16 v97 = 1024;
        int v98 = v63;
        __int16 v99 = 1024;
        int v100 = v64;
        __int16 v101 = 2048;
        *(void *)int v102 = v65;
        *(_WORD *)&v102[8] = 1024;
        *(_DWORD *)__int16 v103 = v66;
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)&v103[6] = v67;
        __int16 v104 = 2048;
        *(void *)__int16 v105 = v68;
        uint64_t v43 = "Built P2S packet V2: { \n"
              "ses_role: %d\n"
              ", tx_ant_mask: %d\n"
              ", rx_ant_mask: %d\n"
              ", rx_sync_search_ant_mask: %d\n"
              ", tx_preamble: %d\n"
              ", rx_preamble: %d\n"
              ", tx_pkt_type: 0x%04x\n"
              ", rx_pkt_type: 0x%04x\n"
              ", tx_mslot_sz_250us: %d\n"
              ", rx_mslot_sz_250us: %d\n"
              ", interval_min_ms: %d\n"
              ", naccess_slots_min: %d\n"
              ", naccess_slots_max: %d\n"
              ", tx_ant_mask2: %d\n"
              ", bch: %d\n"
              ", debug_flags: %d\n"
              ", start_time: %llu\n"
              ", start_time_uncertainty: %u\n"
              ", interval_max_ms: %d\n"
              ", peer_addr: 0x%llx\n"
              "}";
        uint64_t v44 = v48;
        uint32_t v45 = 130;
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v20 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = *(unsigned __int8 *)(a1 + 22);
        int v22 = *(unsigned __int8 *)(a1 + 23);
        int v23 = *(unsigned __int8 *)(a1 + 24);
        int v24 = *(unsigned __int8 *)(a1 + 25);
        int v25 = *(unsigned __int8 *)(a1 + 26);
        int v26 = *(unsigned __int8 *)(a1 + 27);
        int v27 = *(unsigned __int16 *)(a1 + 28);
        int v28 = *(unsigned __int16 *)(a1 + 30);
        int v29 = *(unsigned __int8 *)(a1 + 42);
        int v30 = *(unsigned __int8 *)(a1 + 43);
        int v31 = *(unsigned __int16 *)(a1 + 44);
        int v32 = *(unsigned __int8 *)(a1 + 46);
        int v33 = *(unsigned __int8 *)(a1 + 47);
        int v34 = *(unsigned __int8 *)(a1 + 48);
        int v35 = *(unsigned __int8 *)(a1 + 49);
        int v36 = *(unsigned __int8 *)(a1 + 50);
        int v37 = *(unsigned __int16 *)(a1 + 51);
        int v38 = *(unsigned __int16 *)(a1 + 63);
        uint64_t v39 = *(void *)(a1 + 65);
        int v40 = *(_DWORD *)(a1 + 73);
        int v41 = *(unsigned __int16 *)(a1 + 77);
        uint64_t v42 = *(void *)(a1 + 79);
        int v69 = 67114496;
        int v70 = v21;
        __int16 v71 = 1024;
        int v72 = v22;
        __int16 v73 = 1024;
        int v74 = v23;
        __int16 v75 = 1024;
        int v76 = v24;
        __int16 v77 = 1024;
        int v78 = v25;
        __int16 v79 = 1024;
        int v80 = v26;
        __int16 v81 = 1024;
        int v82 = v27;
        __int16 v83 = 1024;
        int v84 = v28;
        __int16 v85 = 1024;
        int v86 = v29;
        __int16 v87 = 1024;
        int v88 = v30;
        __int16 v89 = 1024;
        int v90 = v31;
        __int16 v91 = 1024;
        int v92 = v32;
        __int16 v93 = 1024;
        int v94 = v33;
        __int16 v95 = 1024;
        int v96 = v34;
        __int16 v97 = 1024;
        int v98 = v35;
        __int16 v99 = 1024;
        int v100 = v36;
        __int16 v101 = 1024;
        *(_DWORD *)int v102 = v37;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v38;
        *(_WORD *)__int16 v103 = 2048;
        *(void *)&_DWORD v103[2] = v39;
        __int16 v104 = 1024;
        *(_DWORD *)__int16 v105 = v40;
        *(_WORD *)&v105[4] = 1024;
        *(_DWORD *)&v105[6] = v41;
        __int16 v106 = 2048;
        uint64_t v107 = v42;
        uint64_t v43 = "Built P2S packet V2: { \n"
              "ses_role: %d\n"
              ", tx_ant_mask: %d\n"
              ", rx_ant_mask: %d\n"
              ", rx_sync_search_ant_mask: %d\n"
              ", tx_preamble: %d\n"
              ", rx_preamble: %d\n"
              ", tx_pkt_type: 0x%04x\n"
              ", rx_pkt_type: 0x%04x\n"
              ", tx_mslot_sz_250us: %d\n"
              ", rx_mslot_sz_250us: %d\n"
              ", interval_min_ms: %d\n"
              ", naccess_slots_min: %d\n"
              ", naccess_slots_max: %d\n"
              ", tx_ant_mask2: %d\n"
              ", rx_ant_mask2: %d\n"
              ", rx_sync_search_ant_mask2: %d\n"
              ", bch: %hu\n"
              ", debug_flags: %d\n"
              ", start_time: %llu\n"
              ", start_time_uncertainty: %u\n"
              ", interval_max_ms: %d\n"
              ", peer_addr: 0x%llx\n"
              "}";
        uint64_t v44 = v20;
        uint32_t v45 = 142;
LABEL_64:
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v43, (uint8_t *)&v69, v45);
      }
    }
    return 1;
  }
  if (*(unsigned char *)(a2 + 165) && *(unsigned char *)(a2 + 167))
  {
    *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 164);
    if (!*(unsigned char *)(a2 + 167)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 166);
    goto LABEL_27;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_100414A90();
    return 0;
  }
  return result;
}

void sub_10018F6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10018F6F8(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100414D40();
  }
  if (*(unsigned char *)(a2 + 97)
    && *(unsigned char *)(a2 + 99)
    && *(unsigned char *)(a2 + 163)
    && *(unsigned char *)(a2 + 101)
    && *(unsigned char *)(a2 + 165)
    && *(unsigned char *)(a2 + 103)
    && *(unsigned char *)(a2 + 167)
    && *(unsigned char *)(a2 + 105)
    && *(unsigned char *)(a2 + 107)
    && *(unsigned char *)(a2 + 110)
    && *(unsigned char *)(a2 + 113)
    && *(unsigned char *)(a2 + 115)
    && *(unsigned char *)(a2 + 117)
    && *(unsigned char *)(a2 + 161)
    && *(unsigned char *)(a2 + 120)
    && *(unsigned char *)(a2 + 170)
    && *(unsigned char *)(a2 + 174)
    && *(unsigned char *)(a2 + 153))
  {
    *(_WORD *)(a1 + 16) = 16400;
    if (!*(unsigned char *)(a2 + 97)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
    if (!*(unsigned char *)(a2 + 99)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 98);
    if (!*(unsigned char *)(a2 + 163)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 162);
    if (!*(unsigned char *)(a2 + 101)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 100);
    if (!*(unsigned char *)(a2 + 165)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 164);
    if (!*(unsigned char *)(a2 + 103)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 102);
    if (!*(unsigned char *)(a2 + 167)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 166);
    if (!*(unsigned char *)(a2 + 105)) {
      goto LABEL_57;
    }
    if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 104))) {
      sub_100414D14();
    }
    if (!*(unsigned char *)(a2 + 107)) {
      goto LABEL_57;
    }
    if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 106))) {
      sub_100414CE8();
    }
    if (!*(unsigned char *)(a2 + 110)) {
      goto LABEL_57;
    }
    if (!sub_1003A90AC((unsigned char *)(a2 + 108))) {
      sub_100414CBC();
    }
    if (!*(unsigned char *)(a2 + 113)) {
      goto LABEL_57;
    }
    if (!sub_1003A90AC((unsigned char *)(a2 + 111))) {
      sub_100414C90();
    }
    if (!*(unsigned char *)(a2 + 105)) {
      goto LABEL_57;
    }
    sub_1003A7CC4(*(unsigned __int8 *)(a2 + 104), 1, v4, v5, v6, v7, v8, v9);
    *(unsigned char *)(a1 + 26) = v16;
    if (!*(unsigned char *)(a2 + 107)) {
      goto LABEL_57;
    }
    sub_1003A7CC4(*(unsigned __int8 *)(a2 + 106), 1, v10, v11, v12, v13, v14, v15);
    *(unsigned char *)(a1 + 27) = v17;
    if (!*(unsigned char *)(a2 + 110)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 109);
    if (!*(unsigned char *)(a2 + 113)
      || (*(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 112), !*(unsigned char *)(a2 + 115))
      || (*(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 114), !*(unsigned char *)(a2 + 117))
      || (*(unsigned char *)(a1 + 31) = *(unsigned char *)(a2 + 116), !*(unsigned char *)(a2 + 161))
      || (*(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 160), !*(unsigned char *)(a2 + 120))
      || (*(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 118) | 2, !*(unsigned char *)(a2 + 170))
      || (*(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 168), !*(unsigned char *)(a2 + 174))
      || (*(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 172), !*(unsigned char *)(a2 + 153)))
    {
LABEL_57:
      sub_10000AE44();
    }
    uint64_t v18 = 1;
    *(unsigned char *)(a1 + 32) = sub_1003A8E98(*(unsigned __int8 *)(a2 + 152), 1);
    *(void *)(a1 + 56) = 0;
    char v19 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(unsigned __int8 *)(a1 + 22);
      int v21 = *(unsigned __int8 *)(a1 + 23);
      int v22 = *(unsigned __int8 *)(a1 + 24);
      int v23 = *(unsigned __int8 *)(a1 + 25);
      int v24 = *(unsigned __int8 *)(a1 + 26);
      int v25 = *(unsigned __int8 *)(a1 + 27);
      int v26 = *(unsigned __int8 *)(a1 + 28);
      int v27 = *(unsigned __int8 *)(a1 + 29);
      int v28 = *(unsigned __int8 *)(a1 + 30);
      int v29 = *(unsigned __int8 *)(a1 + 31);
      int v30 = *(unsigned __int8 *)(a1 + 34);
      int v31 = *(unsigned __int8 *)(a1 + 35);
      int v32 = *(unsigned __int8 *)(a1 + 36);
      int v33 = *(unsigned __int8 *)(a1 + 37);
      int v34 = *(__int16 *)(a1 + 38);
      int v35 = *(unsigned __int16 *)(a1 + 40);
      int v36 = *(unsigned __int16 *)(a1 + 54);
      int v37 = *(unsigned __int8 *)(a1 + 32);
      v39[0] = 67113472;
      v39[1] = v20;
      __int16 v40 = 1024;
      int v41 = v21;
      __int16 v42 = 1024;
      int v43 = v22;
      __int16 v44 = 1024;
      int v45 = v23;
      __int16 v46 = 1024;
      int v47 = v24;
      __int16 v48 = 1024;
      int v49 = v25;
      __int16 v50 = 1024;
      int v51 = v26;
      __int16 v52 = 1024;
      int v53 = v27;
      __int16 v54 = 1024;
      int v55 = v28;
      __int16 v56 = 1024;
      int v57 = v29;
      __int16 v58 = 1024;
      int v59 = v30;
      __int16 v60 = 1024;
      int v61 = v31;
      __int16 v62 = 1024;
      int v63 = v32;
      __int16 v64 = 1024;
      int v65 = v33;
      __int16 v66 = 1024;
      int v67 = v34;
      __int16 v68 = 1024;
      int v69 = v35;
      __int16 v70 = 1024;
      int v71 = v36;
      __int16 v72 = 1024;
      int v73 = v37;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Built P2P packet V1: { \nses_role: %d\n tx_ant_mask: %d\n rx_ant_mask: %d\n rx_sync_search_ant_mask: %d\n tx_preamble: %d\n rx_preamble: %d\n tx_pkt_type: %d\n rx_pkt_type: %d\n tx_mslot_sz_250us: %d\n rx_mslot_sz_250us: %d\n dual_ranging_enable: %d\n tx_ant_mask2: %d\n rx_ant_mask2: %d\n rx_sync_search_ant_mask2: %d\n soi_rssi_thd2: %d\n"
        " debug_flags: %d\n"
        " interval_ms: %d\n"
        " channel:%d\n"
        "}",
        (uint8_t *)v39,
        0x6Eu);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_100414C5C();
    }
    return 0;
  }
  return v18;
}

BOOL sub_10018FB08(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100414DA8();
  }
  if (*(unsigned char *)(a2 + 97)
    && *(unsigned char *)(a2 + 99)
    && *(unsigned char *)(a2 + 163)
    && *(unsigned char *)(a2 + 101)
    && *(unsigned char *)(a2 + 165)
    && *(unsigned char *)(a2 + 103)
    && *(unsigned char *)(a2 + 167)
    && *(unsigned char *)(a2 + 105)
    && *(unsigned char *)(a2 + 107)
    && *(unsigned char *)(a2 + 110)
    && *(unsigned char *)(a2 + 113)
    && *(unsigned char *)(a2 + 115)
    && *(unsigned char *)(a2 + 117)
    && *(unsigned char *)(a2 + 161)
    && *(unsigned char *)(a2 + 120)
    && *(unsigned char *)(a2 + 170)
    && *(unsigned char *)(a2 + 174)
    && *(unsigned char *)(a2 + 153))
  {
    *(_WORD *)(a1 + 16) = 16400;
    if (!*(unsigned char *)(a2 + 97)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
    if (!*(unsigned char *)(a2 + 99)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 98);
    if (!*(unsigned char *)(a2 + 163)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 162);
    if (!*(unsigned char *)(a2 + 101)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 100);
    if (!*(unsigned char *)(a2 + 165)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 164);
    if (!*(unsigned char *)(a2 + 103)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 102);
    if (!*(unsigned char *)(a2 + 167)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 166);
    if (!*(unsigned char *)(a2 + 105)) {
      goto LABEL_48;
    }
    sub_1003A7CC4(*(unsigned __int8 *)(a2 + 104), 2, v4, v5, v6, v7, v8, v9);
    *(unsigned char *)(a1 + 26) = v16;
    if (!*(unsigned char *)(a2 + 107)) {
      goto LABEL_48;
    }
    sub_1003A7CC4(*(unsigned __int8 *)(a2 + 106), 2, v10, v11, v12, v13, v14, v15);
    *(unsigned char *)(a1 + 27) = v17;
    if (!*(unsigned char *)(a2 + 110)) {
      goto LABEL_48;
    }
    *(_WORD *)(a1 + 28) = sub_1003A9120((unsigned __int8 *)(a2 + 108));
    if (!*(unsigned char *)(a2 + 113)
      || (*(_WORD *)(a1 + 30) = sub_1003A9120((unsigned __int8 *)(a2 + 111)), !*(unsigned char *)(a2 + 115))
      || (*(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 114), !*(unsigned char *)(a2 + 117))
      || (*(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 116), !*(unsigned char *)(a2 + 161))
      || (*(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 160), !*(unsigned char *)(a2 + 120))
      || (*(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118) | 2, !*(unsigned char *)(a2 + 170))
      || (*(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 168), !*(unsigned char *)(a2 + 174))
      || (*(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 172), !*(unsigned char *)(a2 + 153)))
    {
LABEL_48:
      sub_10000AE44();
    }
    int v18 = *(unsigned __int8 *)(a2 + 152);
    if (v18 == 5 || v18 == 9) {
      *(_WORD *)(a1 + 46) = v18;
    }
    *(void *)(a1 + 86) = 0;
    char v19 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(unsigned __int8 *)(a1 + 22);
      int v21 = *(unsigned __int8 *)(a1 + 23);
      int v22 = *(unsigned __int8 *)(a1 + 24);
      int v23 = *(unsigned __int8 *)(a1 + 25);
      int v24 = *(unsigned __int8 *)(a1 + 26);
      int v25 = *(unsigned __int8 *)(a1 + 27);
      int v26 = *(unsigned __int16 *)(a1 + 28);
      int v27 = *(unsigned __int16 *)(a1 + 30);
      int v28 = *(unsigned __int8 *)(a1 + 44);
      int v29 = *(unsigned __int8 *)(a1 + 45);
      int v30 = *(unsigned __int8 *)(a1 + 48);
      int v31 = *(unsigned __int8 *)(a1 + 49);
      int v32 = *(unsigned __int8 *)(a1 + 50);
      int v33 = *(unsigned __int8 *)(a1 + 51);
      int v34 = *(__int16 *)(a1 + 52);
      int v35 = *(unsigned __int16 *)(a1 + 70);
      int v36 = *(unsigned __int16 *)(a1 + 84);
      int v37 = *(unsigned __int16 *)(a1 + 46);
      v39[0] = 67113472;
      v39[1] = v20;
      __int16 v40 = 1024;
      int v41 = v21;
      __int16 v42 = 1024;
      int v43 = v22;
      __int16 v44 = 1024;
      int v45 = v23;
      __int16 v46 = 1024;
      int v47 = v24;
      __int16 v48 = 1024;
      int v49 = v25;
      __int16 v50 = 1024;
      int v51 = v26;
      __int16 v52 = 1024;
      int v53 = v27;
      __int16 v54 = 1024;
      int v55 = v28;
      __int16 v56 = 1024;
      int v57 = v29;
      __int16 v58 = 1024;
      int v59 = v30;
      __int16 v60 = 1024;
      int v61 = v31;
      __int16 v62 = 1024;
      int v63 = v32;
      __int16 v64 = 1024;
      int v65 = v33;
      __int16 v66 = 1024;
      int v67 = v34;
      __int16 v68 = 1024;
      int v69 = v35;
      __int16 v70 = 1024;
      int v71 = v36;
      __int16 v72 = 1024;
      int v73 = v37;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Built P2P packet V2: { \nses_role: %d\n tx_ant_mask: %d\n rx_ant_mask: %d\n rx_sync_search_ant_mask: %d\n first_preamble: %d\n subsequent_preamble: %d\n tx_pkt_type: %d\n rx_pkt_type: %d\n tx_mslot_sz_250us: %d\n rx_mslot_sz_250us: %d\n dual_ranging_enable: %d\n tx_ant_mask2: %d\n rx_ant_mask2: %d\n rx_sync_search_ant_mask2: %d\n ping_pong_soi_rssi_thd: %d\n"
        " debug_flags: %d\n"
        " interval_ms: %d\n"
        " band_channel:%hu\n"
        "}",
        (uint8_t *)v39,
        0x6Eu);
    }
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (result)
    {
      sub_100414D74();
      return 0;
    }
  }
  return result;
}

BOOL sub_10018FEC4(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100414E70();
  }
  if (*(unsigned char *)(a2 + 97)
    && *(unsigned char *)(a2 + 99)
    && *(unsigned char *)(a2 + 101)
    && *(unsigned char *)(a2 + 103)
    && *(unsigned char *)(a2 + 153)
    && *(unsigned char *)(a2 + 120)
    && *(unsigned char *)(a2 + 293)
    && *(unsigned char *)(a2 + 295)
    && *(unsigned char *)(a2 + 300)
    && *(unsigned char *)(a2 + 305)
    && *(unsigned char *)(a2 + 307)
    && *(unsigned char *)(a2 + 310)
    && *(unsigned char *)(a2 + 314)
    && *(unsigned char *)(a2 + 317)
    && *(unsigned char *)(a2 + 319)
    && *(unsigned char *)(a2 + 321)
    && *(unsigned char *)(a2 + 323)
    && *(unsigned char *)(a2 + 343)
    && *(unsigned char *)(a2 + 345))
  {
    if ((~*(unsigned __int16 *)(a2 + 118) & 0xC0) != 0 || *(unsigned char *)(a2 + 347))
    {
      *(_WORD *)(a1 + 16) = 16464;
      if (!*(unsigned char *)(a2 + 97)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
      if (!*(unsigned char *)(a2 + 99)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 98);
      if (!*(unsigned char *)(a2 + 101)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 100);
      if (!*(unsigned char *)(a2 + 103)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 102);
      if (!*(unsigned char *)(a2 + 153)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 26) = sub_1003A8E98(*(unsigned __int8 *)(a2 + 152), 1);
      if (!*(unsigned char *)(a2 + 295)) {
        goto LABEL_75;
      }
      if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 294))) {
        sub_100414E10();
      }
      if (!*(unsigned char *)(a2 + 295)) {
        goto LABEL_75;
      }
      sub_1003A7CC4(*(unsigned __int8 *)(a2 + 294), 1, v5, v6, v7, v8, v9, v10);
      *(unsigned char *)(a1 + 27) = v11;
      if (!*(unsigned char *)(a2 + 300)) {
        goto LABEL_75;
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 296);
      char v12 = *(unsigned char *)(a2 + 305) ? *(unsigned char *)(a2 + 304) : 0;
      *(unsigned char *)(a1 + 32) = v12;
      char v13 = *(unsigned char *)(a2 + 307) ? *(unsigned char *)(a2 + 306) : 0;
      *(unsigned char *)(a1 + 33) = v13;
      if (!*(unsigned char *)(a2 + 310)) {
        goto LABEL_75;
      }
      *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 308);
      if (!*(unsigned char *)(a2 + 314)) {
        goto LABEL_75;
      }
      *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 312);
      if (!*(unsigned char *)(a2 + 317)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 316);
      if (!*(unsigned char *)(a2 + 319)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 39) = *(unsigned char *)(a2 + 318);
      if (!*(unsigned char *)(a2 + 321)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 320);
      if (!*(unsigned char *)(a2 + 323)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 322);
      if (!*(unsigned char *)(a2 + 343)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 342);
      if (!*(unsigned char *)(a2 + 345)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 344);
      if (*(unsigned char *)(a2 + 347)) {
        char v14 = *(unsigned char *)(a2 + 346) & 0xF;
      }
      else {
        char v14 = 0;
      }
      *(unsigned char *)(a1 + 53) = *(unsigned char *)(a1 + 53) & 0xF0 | v14;
      if (*(unsigned char *)(a2 + 341)) {
        *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 340);
      }
      if (*(unsigned char *)(a2 + 328)) {
        *(_DWORD *)(a1 + 42) = *(_DWORD *)(a2 + 324);
      }
      if (*(unsigned char *)(a2 + 336)) {
        *(_DWORD *)(a1 + 46) = *(_DWORD *)(a2 + 332);
      }
      if (!*(unsigned char *)(a2 + 120)) {
LABEL_75:
      }
        sub_10000AE44();
      *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 118);
      uint64_t v15 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *(unsigned __int8 *)(a1 + 22);
        int v17 = *(unsigned __int8 *)(a1 + 23);
        int v18 = *(unsigned __int8 *)(a1 + 24);
        int v19 = *(unsigned __int8 *)(a1 + 25);
        int v20 = *(unsigned __int16 *)(a1 + 54);
        int v21 = *(unsigned __int8 *)(a1 + 26);
        int v22 = *(unsigned __int8 *)(a1 + 27);
        int v23 = *(_DWORD *)(a1 + 28);
        int v24 = 10 * *(unsigned __int8 *)(a1 + 32);
        int v25 = 10 * *(unsigned __int8 *)(a1 + 33);
        int v26 = *(unsigned __int16 *)(a1 + 34);
        int v27 = *(unsigned __int16 *)(a1 + 36);
        int v28 = *(unsigned __int8 *)(a1 + 38);
        int v29 = *(unsigned __int8 *)(a1 + 39);
        int v30 = *(unsigned __int8 *)(a1 + 40);
        int v31 = *(unsigned __int8 *)(a1 + 41);
        int v32 = *(unsigned __int8 *)(a1 + 51);
        int v33 = *(unsigned __int8 *)(a1 + 52);
        int v34 = *(unsigned char *)(a1 + 53) & 0xF;
        if (*(unsigned char *)(a2 + 341)) {
          int v35 = *(unsigned __int8 *)(a1 + 50);
        }
        else {
          int v35 = -1;
        }
        if (*(unsigned char *)(a2 + 336)) {
          int v36 = *(_DWORD *)(a1 + 46);
        }
        else {
          int v36 = -1;
        }
        int v37 = *(_DWORD *)(a1 + 42);
        if (!*(unsigned char *)(a2 + 328)) {
          int v37 = -1;
        }
        v38[0] = 67114496;
        v38[1] = v16;
        __int16 v39 = 1024;
        int v40 = v17;
        __int16 v41 = 1024;
        int v42 = v18;
        __int16 v43 = 1024;
        int v44 = v19;
        __int16 v45 = 1024;
        int v46 = v20;
        __int16 v47 = 1024;
        int v48 = v21;
        __int16 v49 = 1024;
        int v50 = v22;
        __int16 v51 = 1024;
        int v52 = v23;
        __int16 v53 = 1024;
        int v54 = v24;
        __int16 v55 = 1024;
        int v56 = v25;
        __int16 v57 = 1024;
        int v58 = v26;
        __int16 v59 = 1024;
        int v60 = v27;
        __int16 v61 = 1024;
        int v62 = v28;
        __int16 v63 = 1024;
        int v64 = v29;
        __int16 v65 = 1024;
        int v66 = v30;
        __int16 v67 = 1024;
        int v68 = v31;
        __int16 v69 = 1024;
        int v70 = v32;
        __int16 v71 = 1024;
        int v72 = v33;
        __int16 v73 = 1024;
        int v74 = v34;
        __int16 v75 = 1024;
        int v76 = v35;
        __int16 v77 = 1024;
        int v78 = v36;
        __int16 v79 = 1024;
        int v80 = v37;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Built Alisha packet V1: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, channel: %u\n, preamble: %u\n, uwb_ses_id: %u\n, rsp_timeout_10s: %u (s)\n, total_timeout_10s: %u (s)\n, sel_protocol_version: %u\n, sel_uwb_cfg_id: %u\n, ran_multiplier: %u\n, nchaps_per_slot: %u\n, nslots_per_round: %u\n"
          ", nresponders: %u\n"
          ", sel_hop_cfg_bitmask: %u\n"
          ", sel_pulse_shape_combo: %u\n"
          ", space_between_ranging_rounds: %u\n"
          ", anchor_only_responder_idx: %d\n"
          ", anchor_only_responder_hop_key: %d\n"
          ", anchor_only_responder_sts_index_0: %d\n"
          "}",
          (uint8_t *)v38,
          0x86u);
      }
      return 1;
    }
    else
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_100414E3C();
        return 0;
      }
    }
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100414DDC();
      return 0;
    }
  }
  return result;
}

BOOL sub_10019038C(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100414E70();
  }
  if (*(unsigned char *)(a2 + 97)
    && *(unsigned char *)(a2 + 99)
    && *(unsigned char *)(a2 + 101)
    && *(unsigned char *)(a2 + 103)
    && *(unsigned char *)(a2 + 153)
    && *(unsigned char *)(a2 + 120)
    && *(unsigned char *)(a2 + 293)
    && *(unsigned char *)(a2 + 295)
    && *(unsigned char *)(a2 + 300)
    && *(unsigned char *)(a2 + 305)
    && *(unsigned char *)(a2 + 307)
    && *(unsigned char *)(a2 + 310)
    && *(unsigned char *)(a2 + 314)
    && *(unsigned char *)(a2 + 317)
    && *(unsigned char *)(a2 + 319)
    && *(unsigned char *)(a2 + 321)
    && *(unsigned char *)(a2 + 323)
    && *(unsigned char *)(a2 + 343)
    && *(unsigned char *)(a2 + 345))
  {
    if ((~*(unsigned __int16 *)(a2 + 118) & 0xC0) != 0 || *(unsigned char *)(a2 + 347))
    {
      *(_WORD *)(a1 + 16) = 16464;
      if (!*(unsigned char *)(a2 + 97)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
      if (!*(unsigned char *)(a2 + 99)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 98);
      if (!*(unsigned char *)(a2 + 101)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 100);
      if (!*(unsigned char *)(a2 + 103)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 102);
      if (!*(unsigned char *)(a2 + 153)) {
        goto LABEL_75;
      }
      char v5 = *(unsigned char *)(a2 + 152);
      LOBYTE(v39) = 0;
      BYTE1(v39) = v5;
      BYTE2(v39) = 1;
      LOBYTE(v40) = 0;
      BYTE2(v40) = 0;
      *(_WORD *)(a1 + 26) = sub_1003A8F90((unsigned __int8 *)&v39);
      if (!*(unsigned char *)(a2 + 295)) {
        goto LABEL_75;
      }
      if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 294))) {
        sub_100414EA4();
      }
      if (!*(unsigned char *)(a2 + 295)) {
        goto LABEL_75;
      }
      sub_1003A7CC4(*(unsigned __int8 *)(a2 + 294), 2, v6, v7, v8, v9, v10, v11);
      *(unsigned char *)(a1 + 28) = v12;
      if (!*(unsigned char *)(a2 + 300)) {
        goto LABEL_75;
      }
      *(_DWORD *)(a1 + 29) = *(_DWORD *)(a2 + 296);
      char v13 = *(unsigned char *)(a2 + 305) ? *(unsigned char *)(a2 + 304) : 0;
      *(unsigned char *)(a1 + 33) = v13;
      char v14 = *(unsigned char *)(a2 + 307) ? *(unsigned char *)(a2 + 306) : 0;
      *(unsigned char *)(a1 + 34) = v14;
      if (!*(unsigned char *)(a2 + 310)) {
        goto LABEL_75;
      }
      *(_WORD *)(a1 + 35) = *(_WORD *)(a2 + 308);
      if (!*(unsigned char *)(a2 + 314)) {
        goto LABEL_75;
      }
      *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 312);
      if (!*(unsigned char *)(a2 + 317)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 39) = *(unsigned char *)(a2 + 316);
      if (!*(unsigned char *)(a2 + 319)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 318);
      if (!*(unsigned char *)(a2 + 321)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 320);
      if (!*(unsigned char *)(a2 + 323)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 42) = *(unsigned char *)(a1 + 42) & 0xF0 | *(unsigned char *)(a2 + 322) & 0xF;
      if (!*(unsigned char *)(a2 + 343)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 342);
      if (!*(unsigned char *)(a2 + 345)) {
        goto LABEL_75;
      }
      *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 344);
      if (*(unsigned char *)(a2 + 347)) {
        char v15 = *(unsigned char *)(a2 + 346) & 0xF;
      }
      else {
        char v15 = 0;
      }
      *(unsigned char *)(a1 + 54) = *(unsigned char *)(a1 + 54) & 0xF0 | v15;
      if (*(unsigned char *)(a2 + 341)) {
        *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 340);
      }
      if (*(unsigned char *)(a2 + 328)) {
        *(_DWORD *)(a1 + 43) = *(_DWORD *)(a2 + 324);
      }
      if (*(unsigned char *)(a2 + 336)) {
        *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 332);
      }
      if (!*(unsigned char *)(a2 + 120)) {
LABEL_75:
      }
        sub_10000AE44();
      *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118);
      int v16 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *(unsigned __int8 *)(a1 + 22);
        int v18 = *(unsigned __int8 *)(a1 + 23);
        int v19 = *(unsigned __int8 *)(a1 + 24);
        int v20 = *(unsigned __int8 *)(a1 + 25);
        int v21 = *(unsigned __int16 *)(a1 + 70);
        int v22 = *(unsigned __int16 *)(a1 + 26);
        int v23 = *(unsigned __int8 *)(a1 + 28);
        int v24 = *(_DWORD *)(a1 + 29);
        int v25 = 10 * *(unsigned __int8 *)(a1 + 33);
        int v26 = 10 * *(unsigned __int8 *)(a1 + 34);
        int v27 = *(unsigned __int16 *)(a1 + 35);
        int v28 = *(unsigned __int16 *)(a1 + 37);
        int v29 = *(unsigned __int8 *)(a1 + 39);
        int v30 = *(unsigned __int8 *)(a1 + 40);
        int v31 = *(unsigned __int8 *)(a1 + 41);
        int v32 = *(unsigned char *)(a1 + 42) & 0xF;
        int v33 = *(unsigned __int8 *)(a1 + 52);
        int v34 = *(unsigned __int8 *)(a1 + 53);
        int v35 = *(unsigned char *)(a1 + 54) & 0xF;
        if (*(unsigned char *)(a2 + 341)) {
          int v36 = *(unsigned __int8 *)(a1 + 51);
        }
        else {
          int v36 = -1;
        }
        if (*(unsigned char *)(a2 + 336)) {
          int v37 = *(_DWORD *)(a1 + 47);
        }
        else {
          int v37 = -1;
        }
        int v38 = *(_DWORD *)(a1 + 43);
        if (!*(unsigned char *)(a2 + 328)) {
          int v38 = -1;
        }
        int v39 = 67114496;
        int v40 = v17;
        __int16 v41 = 1024;
        int v42 = v18;
        __int16 v43 = 1024;
        int v44 = v19;
        __int16 v45 = 1024;
        int v46 = v20;
        __int16 v47 = 1024;
        int v48 = v21;
        __int16 v49 = 1024;
        int v50 = v22;
        __int16 v51 = 1024;
        int v52 = v23;
        __int16 v53 = 1024;
        int v54 = v24;
        __int16 v55 = 1024;
        int v56 = v25;
        __int16 v57 = 1024;
        int v58 = v26;
        __int16 v59 = 1024;
        int v60 = v27;
        __int16 v61 = 1024;
        int v62 = v28;
        __int16 v63 = 1024;
        int v64 = v29;
        __int16 v65 = 1024;
        int v66 = v30;
        __int16 v67 = 1024;
        int v68 = v31;
        __int16 v69 = 1024;
        int v70 = v32;
        __int16 v71 = 1024;
        int v72 = v33;
        __int16 v73 = 1024;
        int v74 = v34;
        __int16 v75 = 1024;
        int v76 = v35;
        __int16 v77 = 1024;
        int v78 = v36;
        __int16 v79 = 1024;
        int v80 = v37;
        __int16 v81 = 1024;
        int v82 = v38;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Built Alisha packet V2: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, bch: %d\n, preamble: %u\n, uwb_ses_id: %u\n, rsp_timeout_10s: %u (s)\n, total_timeout_10s: %u (s)\n, sel_protocol_version: %u\n, sel_uwb_cfg_id: %u\n, ran_multiplier: %u\n, nchaps_per_slot: %u\n, nslots_per_round: %u\n"
          ", nresponders: %u\n"
          ", sel_hop_cfg_bitmask: %u\n"
          ", sel_pulse_shape_combo: %u\n"
          ", space_between_ranging_rounds: %u\n"
          ", anchor_only_responder_idx: %d\n"
          ", anchor_only_responder_hop_key: %d\n"
          ", anchor_only_responder_sts_index_0: %d\n"
          "}",
          (uint8_t *)&v39,
          0x86u);
      }
      return 1;
    }
    else
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_100414E3C();
        return 0;
      }
    }
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100414DDC();
      return 0;
    }
  }
  return result;
}

BOOL sub_100190878(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100414FBC();
  }
  if (!*(unsigned char *)(a2 + 97)
    || !*(unsigned char *)(a2 + 205)
    || !*(unsigned char *)(a2 + 99)
    || !*(unsigned char *)(a2 + 101)
    || !*(unsigned char *)(a2 + 103)
    || !*(unsigned char *)(a2 + 105)
    || !*(unsigned char *)(a2 + 107)
    || !*(unsigned char *)(a2 + 237)
    || !*(unsigned char *)(a2 + 214)
    || !*(unsigned char *)(a2 + 234)
    || !*(unsigned char *)(a2 + 120)
    || !*(unsigned char *)(a2 + 174)
    || !*(unsigned char *)(a2 + 207)
    || !*(unsigned char *)(a2 + 209)
    || !*(unsigned char *)(a2 + 211)
    || !*(unsigned char *)(a2 + 280))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100414ED0();
    return 0;
  }
  *(_WORD *)(a1 + 16) = 16422;
  if (!*(unsigned char *)(a2 + 97)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
  if (!*(unsigned char *)(a2 + 205)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 204);
  if (!*(unsigned char *)(a2 + 99)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 98);
  if (!*(unsigned char *)(a2 + 101)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 100);
  if (!*(unsigned char *)(a2 + 103)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 102);
  if (!*(unsigned char *)(a2 + 105)) {
    sub_10000AE44();
  }
  if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 104))) {
    sub_100414F90();
  }
  if (!*(unsigned char *)(a2 + 107)) {
    sub_10000AE44();
  }
  if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 106))) {
    sub_100414F64();
  }
  if (!*(unsigned char *)(a2 + 237)) {
    sub_10000AE44();
  }
  if (!sub_1003A90AC((unsigned char *)(a2 + 235))) {
    sub_100414F38();
  }
  if (!*(unsigned char *)(a2 + 105)) {
    sub_10000AE44();
  }
  sub_1003A7CC4(*(unsigned __int8 *)(a2 + 104), 1, v4, v5, v6, v7, v8, v9);
  *(unsigned char *)(a1 + 30) = v16;
  if (!*(unsigned char *)(a2 + 107)) {
    sub_10000AE44();
  }
  sub_1003A7CC4(*(unsigned __int8 *)(a2 + 106), 1, v10, v11, v12, v13, v14, v15);
  *(unsigned char *)(a1 + 31) = v17;
  if (!*(unsigned char *)(a2 + 237)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 236);
  if (!*(unsigned char *)(a2 + 115)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 114);
  if (!*(unsigned char *)(a2 + 117)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 39) = *(unsigned char *)(a2 + 116);
  if (!*(unsigned char *)(a2 + 120)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118) | 2;
  if (!*(unsigned char *)(a2 + 174)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 172);
  if (!*(unsigned char *)(a2 + 207)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 27) = sub_1003A8E98(*(unsigned __int8 *)(a2 + 206), 1);
  if (!*(unsigned char *)(a2 + 209)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 28) = sub_1003A8E98(*(unsigned __int8 *)(a2 + 208), 1);
  if (!*(unsigned char *)(a2 + 211)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 210);
  if (!*(unsigned char *)(a2 + 280)) {
    sub_10000AE44();
  }
  if (!*(unsigned char *)(a2 + 240))
  {
    if (*(unsigned char *)(a2 + 256) && *(unsigned char *)(a2 + 272))
    {
      *(void *)(a1 + 84) = *(void *)(a2 + 248);
      if (!*(unsigned char *)(a2 + 280)) {
        sub_10000AE44();
      }
      if (!*(unsigned char *)(a2 + 272)) {
        sub_10000AE44();
      }
      *(void *)(a1 + 92) = *(void *)(a2 + 264);
      goto LABEL_43;
    }
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100414F04();
    return 0;
  }
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 84) = 0;
LABEL_43:
  if (!*(unsigned char *)(a2 + 234)) {
    sub_10000AE44();
  }
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 218);
  sub_100004950(&v41, "0x");
  if (!*(unsigned char *)(a2 + 234)) {
    sub_10000AE44();
  }
  for (uint64_t i = 0; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_100004950(__p, __str);
    if (SBYTE3(v44) >= 0) {
      int v19 = __p;
    }
    else {
      int v19 = *(const std::string::value_type **)__p;
    }
    if (SBYTE3(v44) >= 0) {
      std::string::size_type v20 = BYTE3(v44);
    }
    else {
      std::string::size_type v20 = *(void *)&__p[8];
    }
    std::string::append(&v41, v19, v20);
    if (SBYTE3(v44) < 0) {
      operator delete(*(void **)__p);
    }
  }
  int v21 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(unsigned __int8 *)(a1 + 22);
    int v23 = *(unsigned __int8 *)(a1 + 24);
    int v24 = *(unsigned __int8 *)(a1 + 25);
    int v25 = *(unsigned __int8 *)(a1 + 26);
    int v26 = *(unsigned __int8 *)(a1 + 30);
    int v27 = *(unsigned __int8 *)(a1 + 32);
    int v28 = *(unsigned __int8 *)(a1 + 38);
    int v29 = *(unsigned __int8 *)(a1 + 39);
    int v30 = *(unsigned __int8 *)(a1 + 27);
    int v31 = *(unsigned __int8 *)(a1 + 28);
    int v32 = *(unsigned __int8 *)(a1 + 29);
    int v33 = *(unsigned __int16 *)(a1 + 70);
    uint64_t v34 = *(void *)(a1 + 72);
    int v35 = *(_DWORD *)(a1 + 80);
    int v36 = *(unsigned __int16 *)(a1 + 42);
    uint64_t v37 = *(void *)(a1 + 84);
    uint64_t v38 = *(void *)(a1 + 92);
    int v39 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v39 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136324098;
    *(void *)&__p[4] = "ses_role";
    *(_WORD *)&unsigned char __p[12] = 1024;
    *(_DWORD *)&__p[14] = v22;
    __int16 v43 = 2080;
    int v44 = "tx_ant_mask";
    __int16 v45 = 1024;
    int v46 = v23;
    __int16 v47 = 2080;
    int v48 = "rx_ant_mask";
    __int16 v49 = 1024;
    int v50 = v24;
    __int16 v51 = 2080;
    int v52 = "rx_sync_search_ant_mask";
    __int16 v53 = 1024;
    int v54 = v25;
    __int16 v55 = 2080;
    int v56 = "tx_preamble";
    __int16 v57 = 1024;
    int v58 = v26;
    __int16 v59 = 2080;
    int v60 = "pkt_type";
    __int16 v61 = 1024;
    int v62 = v27;
    __int16 v63 = 2080;
    int v64 = "tx_mslot_sz_250us";
    __int16 v65 = 1024;
    int v66 = v28;
    __int16 v67 = 2080;
    int v68 = "rx_mslot_sz_250us";
    __int16 v69 = 1024;
    int v70 = v29;
    __int16 v71 = 2080;
    int v72 = "start_channel";
    __int16 v73 = 1024;
    int v74 = v30;
    __int16 v75 = 2080;
    int v76 = "alternate_channel";
    __int16 v77 = 1024;
    int v78 = v31;
    __int16 v79 = 2080;
    int v80 = "channel_hop_pattern_mask";
    __int16 v81 = 1024;
    int v82 = v32;
    __int16 v83 = 2080;
    int v84 = "debug_flags";
    __int16 v85 = 1024;
    int v86 = v33;
    __int16 v87 = 2080;
    int v88 = "start_time";
    __int16 v89 = 2048;
    uint64_t v90 = v34;
    __int16 v91 = 2080;
    int v92 = "start_time_uncertainty";
    __int16 v93 = 1024;
    int v94 = v35;
    __int16 v95 = 2080;
    int v96 = "interval_ms";
    __int16 v97 = 1024;
    int v98 = v36;
    __int16 v99 = 2080;
    int v100 = "local_addr";
    __int16 v101 = 2048;
    uint64_t v102 = v37;
    __int16 v103 = 2080;
    __int16 v104 = "peer_addr";
    __int16 v105 = 2048;
    uint64_t v106 = v38;
    __int16 v107 = 2080;
    char v108 = "sts_blob";
    __int16 v109 = 2080;
    __int16 v110 = v39;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Built GR ND packet V1: {\n              %s: %d\n             , %s : %d\n             , %s : %d\n             , %s : %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %x\n             , %s: %d\n             , %s: %llu\n             , %s: %u\n             , %s: %d\n"
      "             , %s: 0x%llx\n"
      "             , %s: 0x%llx\n"
      "             , %s: %s\n"
      "     }",
      __p,
      0x132u);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_100190F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100190F98(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100414FBC();
  }
  if (!*(unsigned char *)(a2 + 97)
    || !*(unsigned char *)(a2 + 205)
    || !*(unsigned char *)(a2 + 99)
    || !*(unsigned char *)(a2 + 101)
    || !*(unsigned char *)(a2 + 103)
    || !*(unsigned char *)(a2 + 105)
    || !*(unsigned char *)(a2 + 107)
    || !*(unsigned char *)(a2 + 237)
    || !*(unsigned char *)(a2 + 214)
    || !*(unsigned char *)(a2 + 234)
    || !*(unsigned char *)(a2 + 120)
    || !*(unsigned char *)(a2 + 174)
    || !*(unsigned char *)(a2 + 207)
    || !*(unsigned char *)(a2 + 209)
    || !*(unsigned char *)(a2 + 211)
    || !*(unsigned char *)(a2 + 280))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100414ED0();
    return 0;
  }
  *(_WORD *)(a1 + 16) = 16422;
  if (!*(unsigned char *)(a2 + 97)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
  if (!*(unsigned char *)(a2 + 205)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 204);
  if (!*(unsigned char *)(a2 + 99)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 98);
  if (!*(unsigned char *)(a2 + 101)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 100);
  if (!*(unsigned char *)(a2 + 103)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 102);
  if (!*(unsigned char *)(a2 + 105)) {
    sub_10000AE44();
  }
  if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 104))) {
    sub_100415048();
  }
  if (!*(unsigned char *)(a2 + 107)) {
    sub_10000AE44();
  }
  if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 106))) {
    sub_10041501C();
  }
  if (!*(unsigned char *)(a2 + 237)) {
    sub_10000AE44();
  }
  if (!sub_1003A90AC((unsigned char *)(a2 + 235))) {
    sub_100414FF0();
  }
  if (!*(unsigned char *)(a2 + 105)) {
    sub_10000AE44();
  }
  sub_1003A7CC4(*(unsigned __int8 *)(a2 + 104), 2, v4, v5, v6, v7, v8, v9);
  *(unsigned char *)(a1 + 32) = v16;
  if (!*(unsigned char *)(a2 + 107)) {
    sub_10000AE44();
  }
  sub_1003A7CC4(*(unsigned __int8 *)(a2 + 106), 2, v10, v11, v12, v13, v14, v15);
  *(unsigned char *)(a1 + 33) = v17;
  if (!*(unsigned char *)(a2 + 237)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 34) = sub_1003A9120((unsigned __int8 *)(a2 + 235));
  if (!*(unsigned char *)(a2 + 115)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 114);
  if (!*(unsigned char *)(a2 + 117)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 116);
  if (!*(unsigned char *)(a2 + 120)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 118) | 2;
  if (!*(unsigned char *)(a2 + 174)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 172);
  if (!*(unsigned char *)(a2 + 207)) {
    sub_10000AE44();
  }
  int v18 = *(unsigned __int8 *)(a2 + 206);
  if (v18 == 5 || v18 == 9) {
    *(_WORD *)(a1 + 27) = v18;
  }
  if (!*(unsigned char *)(a2 + 209)) {
    sub_10000AE44();
  }
  int v19 = *(unsigned __int8 *)(a2 + 208);
  if (v19 == 5 || v19 == 9) {
    *(_WORD *)(a1 + 29) = v19;
  }
  if (!*(unsigned char *)(a2 + 211)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 31) = *(unsigned char *)(a2 + 210);
  if (!*(unsigned char *)(a2 + 280)) {
    sub_10000AE44();
  }
  if (!*(unsigned char *)(a2 + 240))
  {
    if (*(unsigned char *)(a2 + 256) && *(unsigned char *)(a2 + 272))
    {
      *(void *)(a1 + 92) = *(void *)(a2 + 248);
      if (!*(unsigned char *)(a2 + 280)) {
        sub_10000AE44();
      }
      if (!*(unsigned char *)(a2 + 272)) {
        sub_10000AE44();
      }
      *(void *)(a1 + 100) = *(void *)(a2 + 264);
      goto LABEL_49;
    }
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100414F04();
    return 0;
  }
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 92) = 0;
LABEL_49:
  if (!*(unsigned char *)(a2 + 234)) {
    sub_10000AE44();
  }
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 218);
  sub_100004950(&v43, "0x");
  if (!*(unsigned char *)(a2 + 234)) {
    sub_10000AE44();
  }
  for (uint64_t i = 0; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_100004950(__p, __str);
    if (SBYTE3(v46) >= 0) {
      int v21 = __p;
    }
    else {
      int v21 = *(const std::string::value_type **)__p;
    }
    if (SBYTE3(v46) >= 0) {
      std::string::size_type v22 = BYTE3(v46);
    }
    else {
      std::string::size_type v22 = *(void *)&__p[8];
    }
    std::string::append(&v43, v21, v22);
    if (SBYTE3(v46) < 0) {
      operator delete(*(void **)__p);
    }
  }
  int v23 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = *(unsigned __int8 *)(a1 + 22);
    int v25 = *(unsigned __int8 *)(a1 + 24);
    int v26 = *(unsigned __int8 *)(a1 + 25);
    int v27 = *(unsigned __int8 *)(a1 + 26);
    int v28 = *(unsigned __int8 *)(a1 + 32);
    int v29 = *(unsigned __int16 *)(a1 + 34);
    int v30 = *(unsigned __int8 *)(a1 + 46);
    int v31 = *(unsigned __int8 *)(a1 + 47);
    int v32 = *(unsigned __int16 *)(a1 + 27);
    int v33 = *(unsigned __int16 *)(a1 + 29);
    int v34 = *(unsigned __int8 *)(a1 + 31);
    int v35 = *(unsigned __int16 *)(a1 + 78);
    uint64_t v36 = *(void *)(a1 + 80);
    int v37 = *(_DWORD *)(a1 + 88);
    int v38 = *(unsigned __int16 *)(a1 + 50);
    uint64_t v39 = *(void *)(a1 + 92);
    uint64_t v40 = *(void *)(a1 + 100);
    std::string v41 = &v43;
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v41 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136324098;
    *(void *)&__p[4] = "ses_role";
    *(_WORD *)&unsigned char __p[12] = 1024;
    *(_DWORD *)&__p[14] = v24;
    __int16 v45 = 2080;
    int v46 = "tx_ant_mask";
    __int16 v47 = 1024;
    int v48 = v25;
    __int16 v49 = 2080;
    int v50 = "rx_ant_mask";
    __int16 v51 = 1024;
    int v52 = v26;
    __int16 v53 = 2080;
    int v54 = "rx_sync_search_ant_mask";
    __int16 v55 = 1024;
    int v56 = v27;
    __int16 v57 = 2080;
    int v58 = "tx_preamble";
    __int16 v59 = 1024;
    int v60 = v28;
    __int16 v61 = 2080;
    int v62 = "pkt_type";
    __int16 v63 = 1024;
    int v64 = v29;
    __int16 v65 = 2080;
    int v66 = "tx_mslot_sz_250us";
    __int16 v67 = 1024;
    int v68 = v30;
    __int16 v69 = 2080;
    int v70 = "rx_mslot_sz_250us";
    __int16 v71 = 1024;
    int v72 = v31;
    __int16 v73 = 2080;
    int v74 = "start_channel";
    __int16 v75 = 1024;
    int v76 = v32;
    __int16 v77 = 2080;
    int v78 = "alternate_channel";
    __int16 v79 = 1024;
    int v80 = v33;
    __int16 v81 = 2080;
    int v82 = "channel_hop_pattern_mask";
    __int16 v83 = 1024;
    int v84 = v34;
    __int16 v85 = 2080;
    int v86 = "debug_flags";
    __int16 v87 = 1024;
    int v88 = v35;
    __int16 v89 = 2080;
    uint64_t v90 = "start_time";
    __int16 v91 = 2048;
    uint64_t v92 = v36;
    __int16 v93 = 2080;
    int v94 = "start_time_uncertainty";
    __int16 v95 = 1024;
    int v96 = v37;
    __int16 v97 = 2080;
    int v98 = "interval_ms";
    __int16 v99 = 1024;
    int v100 = v38;
    __int16 v101 = 2080;
    uint64_t v102 = "local_addr";
    __int16 v103 = 2048;
    uint64_t v104 = v39;
    __int16 v105 = 2080;
    uint64_t v106 = "peer_addr";
    __int16 v107 = 2048;
    uint64_t v108 = v40;
    __int16 v109 = 2080;
    __int16 v110 = "sts_blob";
    __int16 v111 = 2080;
    int v112 = v41;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Built GR ND packet V2: {\n              %s: %d\n             , %s : %d\n             , %s : %d\n             , %s : %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %d\n             , %s: %x\n             , %s: %d\n             , %s: %llu\n             , %s: %u\n             , %s: %d\n"
      "             , %s: 0x%llx\n"
      "             , %s: 0x%llx\n"
      "             , %s: %s\n"
      "     }",
      __p,
      0x132u);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_100191690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1001916D0(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100415158();
  }
  if (!*(unsigned char *)(a2 + 97)
    || !*(unsigned char *)(a2 + 205)
    || !*(unsigned char *)(a2 + 99)
    || !*(unsigned char *)(a2 + 101)
    || !*(unsigned char *)(a2 + 103)
    || !*(unsigned char *)(a2 + 105)
    || !*(unsigned char *)(a2 + 107)
    || !*(unsigned char *)(a2 + 110)
    || !*(unsigned char *)(a2 + 113)
    || !*(unsigned char *)(a2 + 115)
    || !*(unsigned char *)(a2 + 117)
    || !*(unsigned char *)(a2 + 201)
    || !*(unsigned char *)(a2 + 203)
    || !*(unsigned char *)(a2 + 217)
    || !*(unsigned char *)(a2 + 214)
    || !*(unsigned char *)(a2 + 234)
    || !*(unsigned char *)(a2 + 120)
    || !*(unsigned char *)(a2 + 194)
    || !*(unsigned char *)(a2 + 198)
    || !*(unsigned char *)(a2 + 207)
    || !*(unsigned char *)(a2 + 209)
    || !*(unsigned char *)(a2 + 211)
    || !*(unsigned char *)(a2 + 280))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100415074();
    return 0;
  }
  *(_WORD *)(a1 + 16) = 16421;
  if (!*(unsigned char *)(a2 + 97)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
  if (!*(unsigned char *)(a2 + 205)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 204);
  if (!*(unsigned char *)(a2 + 99)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 98);
  if (!*(unsigned char *)(a2 + 101)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 100);
  if (!*(unsigned char *)(a2 + 103)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 102);
  if (*(unsigned char *)(a2 + 163)) {
    *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 162);
  }
  if (*(unsigned char *)(a2 + 165)) {
    *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 164);
  }
  if (*(unsigned char *)(a2 + 167)) {
    *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 166);
  }
  if (!*(unsigned char *)(a2 + 105)) {
    sub_10000AE44();
  }
  if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 104))) {
    sub_10041512C();
  }
  if (!*(unsigned char *)(a2 + 107)) {
    sub_10000AE44();
  }
  if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 106))) {
    sub_100415100();
  }
  if (!*(unsigned char *)(a2 + 110)) {
    sub_10000AE44();
  }
  if (!sub_1003A90AC((unsigned char *)(a2 + 108))) {
    sub_1004150D4();
  }
  if (!*(unsigned char *)(a2 + 113)) {
    sub_10000AE44();
  }
  if (!sub_1003A90AC((unsigned char *)(a2 + 111))) {
    sub_1004150A8();
  }
  if (!*(unsigned char *)(a2 + 105)) {
    sub_10000AE44();
  }
  sub_1003A7CC4(*(unsigned __int8 *)(a2 + 104), 1, v4, v5, v6, v7, v8, v9);
  *(unsigned char *)(a1 + 30) = v16;
  if (!*(unsigned char *)(a2 + 107)) {
    sub_10000AE44();
  }
  sub_1003A7CC4(*(unsigned __int8 *)(a2 + 106), 1, v10, v11, v12, v13, v14, v15);
  *(unsigned char *)(a1 + 31) = v17;
  if (!*(unsigned char *)(a2 + 110)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 109);
  if (!*(unsigned char *)(a2 + 113)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 112);
  if (!*(unsigned char *)(a2 + 115)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 114);
  if (!*(unsigned char *)(a2 + 117)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 39) = *(unsigned char *)(a2 + 116);
  if (!*(unsigned char *)(a2 + 201)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 200);
  if (!*(unsigned char *)(a2 + 203)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 202);
  if (!*(unsigned char *)(a2 + 217)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 216);
  if (!*(unsigned char *)(a2 + 120)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 118) | 2;
  if (!*(unsigned char *)(a2 + 194)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 192);
  if (!*(unsigned char *)(a2 + 198)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 196);
  if (!*(unsigned char *)(a2 + 207)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 27) = sub_1003A8E98(*(unsigned __int8 *)(a2 + 206), 1);
  if (!*(unsigned char *)(a2 + 209)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 28) = sub_1003A8E98(*(unsigned __int8 *)(a2 + 208), 1);
  if (!*(unsigned char *)(a2 + 211)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 210);
  if (!*(unsigned char *)(a2 + 280)) {
    sub_10000AE44();
  }
  if (!*(unsigned char *)(a2 + 240))
  {
    if (*(unsigned char *)(a2 + 256) && *(unsigned char *)(a2 + 272))
    {
      *(void *)(a1 + 84) = *(void *)(a2 + 248);
      if (!*(unsigned char *)(a2 + 280)) {
        sub_10000AE44();
      }
      if (!*(unsigned char *)(a2 + 272)) {
        sub_10000AE44();
      }
      *(void *)(a1 + 92) = *(void *)(a2 + 264);
      goto LABEL_63;
    }
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100414F04();
    return 0;
  }
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 84) = 0;
LABEL_63:
  if (!*(unsigned char *)(a2 + 234)) {
    sub_10000AE44();
  }
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 218);
  sub_100004950(&v50, "0x");
  if (!*(unsigned char *)(a2 + 234)) {
    sub_10000AE44();
  }
  for (uint64_t i = 0; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_100004950(__p, __str);
    if (SBYTE3(v53) >= 0) {
      int v19 = __p;
    }
    else {
      int v19 = *(const std::string::value_type **)__p;
    }
    if (SBYTE3(v53) >= 0) {
      std::string::size_type v20 = BYTE3(v53);
    }
    else {
      std::string::size_type v20 = *(void *)&__p[8];
    }
    std::string::append(&v50, v19, v20);
    if (SBYTE3(v53) < 0) {
      operator delete(*(void **)__p);
    }
  }
  int v21 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(unsigned __int8 *)(a1 + 22);
    int v23 = *(unsigned __int8 *)(a1 + 24);
    int v24 = *(unsigned __int8 *)(a1 + 25);
    int v25 = *(unsigned __int8 *)(a1 + 26);
    int v26 = *(unsigned __int8 *)(a1 + 34);
    int v27 = *(unsigned __int8 *)(a1 + 35);
    int v28 = *(unsigned __int8 *)(a1 + 36);
    int v29 = *(unsigned __int8 *)(a1 + 30);
    int v30 = *(unsigned __int8 *)(a1 + 31);
    int v31 = *(unsigned __int8 *)(a1 + 32);
    int v32 = *(unsigned __int8 *)(a1 + 33);
    int v33 = *(unsigned __int8 *)(a1 + 38);
    int v34 = *(unsigned __int8 *)(a1 + 39);
    int v35 = *(unsigned __int16 *)(a1 + 42);
    int v36 = *(unsigned __int8 *)(a1 + 46);
    int v37 = *(unsigned __int8 *)(a1 + 47);
    int v38 = *(unsigned __int8 *)(a1 + 48);
    int v39 = *(unsigned __int8 *)(a1 + 27);
    int v40 = *(unsigned __int8 *)(a1 + 28);
    int v41 = *(unsigned __int8 *)(a1 + 29);
    int v42 = *(unsigned __int16 *)(a1 + 70);
    uint64_t v43 = *(void *)(a1 + 72);
    int v44 = *(_DWORD *)(a1 + 80);
    int v48 = *(unsigned __int16 *)(a1 + 44);
    uint64_t v49 = *(void *)(a1 + 84);
    uint64_t v45 = *(void *)(a1 + 92);
    int v46 = &v50;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136328706;
    *(void *)&__p[4] = "ses_role";
    *(_WORD *)&unsigned char __p[12] = 1024;
    *(_DWORD *)&__p[14] = v22;
    __int16 v52 = 2080;
    __int16 v53 = "tx_ant_mask";
    __int16 v54 = 1024;
    int v55 = v23;
    __int16 v56 = 2080;
    __int16 v57 = "rx_ant_mask";
    __int16 v58 = 1024;
    int v59 = v24;
    __int16 v60 = 2080;
    __int16 v61 = "rx_sync_search_ant_mask";
    __int16 v62 = 1024;
    int v63 = v25;
    __int16 v64 = 2080;
    __int16 v65 = "tx_ant_mask2";
    __int16 v66 = 1024;
    int v67 = v26;
    __int16 v68 = 2080;
    __int16 v69 = "rx_ant_mask2";
    __int16 v70 = 1024;
    int v71 = v27;
    __int16 v72 = 2080;
    __int16 v73 = "rx_sync_search_ant_mask2";
    __int16 v74 = 1024;
    int v75 = v28;
    __int16 v76 = 2080;
    __int16 v77 = "tx_preamble";
    __int16 v78 = 1024;
    int v79 = v29;
    __int16 v80 = 2080;
    __int16 v81 = "rx_preamble";
    __int16 v82 = 1024;
    int v83 = v30;
    __int16 v84 = 2080;
    __int16 v85 = "tx_pkt_type";
    __int16 v86 = 1024;
    int v87 = v31;
    __int16 v88 = 2080;
    __int16 v89 = "rx_pkt_type";
    __int16 v90 = 1024;
    int v91 = v32;
    __int16 v92 = 2080;
    __int16 v93 = "tx_mslot_sz_250us";
    __int16 v94 = 1024;
    int v95 = v33;
    __int16 v96 = 2080;
    __int16 v97 = "rx_mslot_sz_250us";
    __int16 v98 = 1024;
    int v99 = v34;
    __int16 v100 = 2080;
    __int16 v101 = "interval_min_ms";
    __int16 v102 = 1024;
    int v103 = v35;
    __int16 v104 = 2080;
    __int16 v105 = "naccess_slots_min";
    __int16 v106 = 1024;
    int v107 = v36;
    __int16 v108 = 2080;
    __int16 v109 = "naccess_slots_max";
    __int16 v110 = 1024;
    int v111 = v37;
    __int16 v112 = 2080;
    char v113 = "access_slot_idx";
    __int16 v114 = 1024;
    int v115 = v38;
    __int16 v116 = 2080;
    char v117 = "start_channel";
    __int16 v118 = 1024;
    int v119 = v39;
    __int16 v120 = 2080;
    char v121 = "alternate_channel";
    __int16 v122 = 1024;
    int v123 = v40;
    __int16 v124 = 2080;
    uint64_t v125 = "channel_hop_pattern_mask";
    __int16 v126 = 1024;
    int v127 = v41;
    __int16 v128 = 2080;
    uint64_t v129 = "debug_flags";
    __int16 v130 = 1024;
    int v131 = v42;
    __int16 v132 = 2080;
    char v133 = "start_time";
    __int16 v134 = 2048;
    uint64_t v135 = v43;
    __int16 v136 = 2080;
    char v137 = "start_time_uncertainty";
    __int16 v138 = 1024;
    int v139 = v44;
    __int16 v140 = 2080;
    char v141 = "interval_max_ms";
    __int16 v142 = 1024;
    int v143 = v48;
    __int16 v144 = 2080;
    char v145 = "local_addr";
    __int16 v146 = 2048;
    uint64_t v147 = v49;
    __int16 v148 = 2080;
    __int16 v149 = "peer_addr";
    __int16 v150 = 2048;
    uint64_t v151 = v45;
    __int16 v152 = 2080;
    char v153 = "sts_blob";
    __int16 v154 = 2080;
    char v155 = v46;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Built GR packet V1: {\n                  %s: %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n"
      "                 , %s: %d\n"
      "                 , %s: %u\n"
      "                 , %s: %d\n"
      "                 , %s: %x\n"
      "                 , %s: %x\n"
      "                 , %s: %d\n"
      "                 , %s: %llu\n"
      "                 , %s: %u\n"
      "                 , %s: %d\n"
      "                 , %s: 0x%llx\n"
      "                 , %s: 0x%llx\n"
      "                 , %s: %s\n"
      "     }",
      __p,
      0x1C2u);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_100191FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100192008(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100415158();
  }
  if (!*(unsigned char *)(a2 + 97)
    || !*(unsigned char *)(a2 + 205)
    || !*(unsigned char *)(a2 + 99)
    || !*(unsigned char *)(a2 + 101)
    || !*(unsigned char *)(a2 + 103)
    || !*(unsigned char *)(a2 + 105)
    || !*(unsigned char *)(a2 + 107)
    || !*(unsigned char *)(a2 + 110)
    || !*(unsigned char *)(a2 + 113)
    || !*(unsigned char *)(a2 + 115)
    || !*(unsigned char *)(a2 + 117)
    || !*(unsigned char *)(a2 + 201)
    || !*(unsigned char *)(a2 + 203)
    || !*(unsigned char *)(a2 + 217)
    || !*(unsigned char *)(a2 + 214)
    || !*(unsigned char *)(a2 + 234)
    || !*(unsigned char *)(a2 + 120)
    || !*(unsigned char *)(a2 + 194)
    || !*(unsigned char *)(a2 + 198)
    || !*(unsigned char *)(a2 + 207)
    || !*(unsigned char *)(a2 + 209)
    || !*(unsigned char *)(a2 + 211)
    || !*(unsigned char *)(a2 + 280))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100415074();
    return 0;
  }
  *(_WORD *)(a1 + 16) = 16421;
  if (!*(unsigned char *)(a2 + 97)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
  if (!*(unsigned char *)(a2 + 205)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 204);
  if (!*(unsigned char *)(a2 + 99)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 98);
  if (!*(unsigned char *)(a2 + 101)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 100);
  if (!*(unsigned char *)(a2 + 103)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 102);
  if (*(unsigned char *)(a2 + 163)) {
    *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 162);
  }
  if (*(unsigned char *)(a2 + 165)) {
    *(unsigned char *)(a1 + 39) = *(unsigned char *)(a2 + 164);
  }
  if (*(unsigned char *)(a2 + 167)) {
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 166);
  }
  if (!*(unsigned char *)(a2 + 105)) {
    sub_10000AE44();
  }
  if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 104))) {
    sub_100415210();
  }
  if (!*(unsigned char *)(a2 + 107)) {
    sub_10000AE44();
  }
  if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 106))) {
    sub_1004151E4();
  }
  if (!*(unsigned char *)(a2 + 110)) {
    sub_10000AE44();
  }
  if (!sub_1003A90AC((unsigned char *)(a2 + 108))) {
    sub_1004151B8();
  }
  if (!*(unsigned char *)(a2 + 113)) {
    sub_10000AE44();
  }
  if (!sub_1003A90AC((unsigned char *)(a2 + 111))) {
    sub_10041518C();
  }
  if (!*(unsigned char *)(a2 + 105)) {
    sub_10000AE44();
  }
  sub_1003A7CC4(*(unsigned __int8 *)(a2 + 104), 2, v4, v5, v6, v7, v8, v9);
  *(unsigned char *)(a1 + 32) = v16;
  if (!*(unsigned char *)(a2 + 107)) {
    sub_10000AE44();
  }
  sub_1003A7CC4(*(unsigned __int8 *)(a2 + 106), 2, v10, v11, v12, v13, v14, v15);
  *(unsigned char *)(a1 + 33) = v17;
  if (!*(unsigned char *)(a2 + 110)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 34) = sub_1003A9120((unsigned __int8 *)(a2 + 108));
  if (!*(unsigned char *)(a2 + 113)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 36) = sub_1003A9120((unsigned __int8 *)(a2 + 111));
  if (!*(unsigned char *)(a2 + 115)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 114);
  if (!*(unsigned char *)(a2 + 117)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 116);
  if (!*(unsigned char *)(a2 + 201)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 200);
  if (!*(unsigned char *)(a2 + 203)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 55) = *(unsigned char *)(a2 + 202);
  if (!*(unsigned char *)(a2 + 217)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 216);
  if (!*(unsigned char *)(a2 + 120)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 118) | 2;
  if (!*(unsigned char *)(a2 + 194)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 192);
  if (!*(unsigned char *)(a2 + 198)) {
    sub_10000AE44();
  }
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 196);
  if (!*(unsigned char *)(a2 + 207)) {
    sub_10000AE44();
  }
  int v18 = *(unsigned __int8 *)(a2 + 206);
  if (v18 == 5 || v18 == 9) {
    *(_WORD *)(a1 + 27) = v18;
  }
  if (!*(unsigned char *)(a2 + 209)) {
    sub_10000AE44();
  }
  int v19 = *(unsigned __int8 *)(a2 + 208);
  if (v19 == 5 || v19 == 9) {
    *(_WORD *)(a1 + 29) = v19;
  }
  if (!*(unsigned char *)(a2 + 211)) {
    sub_10000AE44();
  }
  *(unsigned char *)(a1 + 31) = *(unsigned char *)(a2 + 210);
  if (!*(unsigned char *)(a2 + 280)) {
    sub_10000AE44();
  }
  if (!*(unsigned char *)(a2 + 240))
  {
    if (*(unsigned char *)(a2 + 256) && *(unsigned char *)(a2 + 272))
    {
      *(void *)(a1 + 92) = *(void *)(a2 + 248);
      if (!*(unsigned char *)(a2 + 280)) {
        sub_10000AE44();
      }
      if (!*(unsigned char *)(a2 + 272)) {
        sub_10000AE44();
      }
      *(void *)(a1 + 100) = *(void *)(a2 + 264);
      goto LABEL_69;
    }
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    sub_100414F04();
    return 0;
  }
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 92) = 0;
LABEL_69:
  if (!*(unsigned char *)(a2 + 234)) {
    sub_10000AE44();
  }
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 218);
  sub_100004950(&v52, "0x");
  if (!*(unsigned char *)(a2 + 234)) {
    sub_10000AE44();
  }
  for (uint64_t i = 0; i != 16; ++i)
  {
    snprintf(__str, 8uLL, "%02x", *(unsigned __int8 *)(a2 + 218 + i));
    sub_100004950(__p, __str);
    if (SBYTE3(v55) >= 0) {
      int v21 = __p;
    }
    else {
      int v21 = *(const std::string::value_type **)__p;
    }
    if (SBYTE3(v55) >= 0) {
      std::string::size_type v22 = BYTE3(v55);
    }
    else {
      std::string::size_type v22 = *(void *)&__p[8];
    }
    std::string::append(&v52, v21, v22);
    if (SBYTE3(v55) < 0) {
      operator delete(*(void **)__p);
    }
  }
  int v23 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = *(unsigned __int8 *)(a1 + 22);
    int v25 = *(unsigned __int8 *)(a1 + 24);
    int v26 = *(unsigned __int8 *)(a1 + 25);
    int v27 = *(unsigned __int8 *)(a1 + 26);
    int v28 = *(unsigned __int8 *)(a1 + 38);
    int v29 = *(unsigned __int8 *)(a1 + 39);
    int v30 = *(unsigned __int8 *)(a1 + 40);
    int v31 = *(unsigned __int8 *)(a1 + 32);
    int v32 = *(unsigned __int8 *)(a1 + 33);
    int v33 = *(unsigned __int16 *)(a1 + 34);
    int v34 = *(unsigned __int16 *)(a1 + 36);
    int v35 = *(unsigned __int8 *)(a1 + 46);
    int v36 = *(unsigned __int8 *)(a1 + 47);
    int v37 = *(unsigned __int16 *)(a1 + 50);
    int v38 = *(unsigned __int8 *)(a1 + 54);
    int v39 = *(unsigned __int8 *)(a1 + 55);
    int v40 = *(unsigned __int8 *)(a1 + 56);
    int v41 = *(unsigned __int16 *)(a1 + 27);
    int v42 = *(unsigned __int16 *)(a1 + 29);
    int v43 = *(unsigned __int8 *)(a1 + 31);
    int v44 = *(unsigned __int16 *)(a1 + 78);
    uint64_t v45 = *(void *)(a1 + 80);
    int v46 = *(_DWORD *)(a1 + 88);
    int v50 = *(unsigned __int16 *)(a1 + 52);
    uint64_t v51 = *(void *)(a1 + 92);
    uint64_t v47 = *(void *)(a1 + 100);
    int v48 = &v52;
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v48 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136328706;
    *(void *)&__p[4] = "ses_role";
    *(_WORD *)&unsigned char __p[12] = 1024;
    *(_DWORD *)&__p[14] = v24;
    __int16 v54 = 2080;
    int v55 = "tx_ant_mask";
    __int16 v56 = 1024;
    int v57 = v25;
    __int16 v58 = 2080;
    int v59 = "rx_ant_mask";
    __int16 v60 = 1024;
    int v61 = v26;
    __int16 v62 = 2080;
    int v63 = "rx_sync_search_ant_mask";
    __int16 v64 = 1024;
    int v65 = v27;
    __int16 v66 = 2080;
    int v67 = "tx_ant_mask2";
    __int16 v68 = 1024;
    int v69 = v28;
    __int16 v70 = 2080;
    int v71 = "rx_ant_mask2";
    __int16 v72 = 1024;
    int v73 = v29;
    __int16 v74 = 2080;
    int v75 = "rx_sync_search_ant_mask2";
    __int16 v76 = 1024;
    int v77 = v30;
    __int16 v78 = 2080;
    int v79 = "tx_preamble";
    __int16 v80 = 1024;
    int v81 = v31;
    __int16 v82 = 2080;
    int v83 = "rx_preamble";
    __int16 v84 = 1024;
    int v85 = v32;
    __int16 v86 = 2080;
    int v87 = "tx_pkt_type";
    __int16 v88 = 1024;
    int v89 = v33;
    __int16 v90 = 2080;
    int v91 = "rx_pkt_type";
    __int16 v92 = 1024;
    int v93 = v34;
    __int16 v94 = 2080;
    int v95 = "tx_mslot_sz_250us";
    __int16 v96 = 1024;
    int v97 = v35;
    __int16 v98 = 2080;
    int v99 = "rx_mslot_sz_250us";
    __int16 v100 = 1024;
    int v101 = v36;
    __int16 v102 = 2080;
    int v103 = "interval_min_ms";
    __int16 v104 = 1024;
    int v105 = v37;
    __int16 v106 = 2080;
    int v107 = "naccess_slots_min";
    __int16 v108 = 1024;
    int v109 = v38;
    __int16 v110 = 2080;
    int v111 = "naccess_slots_max";
    __int16 v112 = 1024;
    int v113 = v39;
    __int16 v114 = 2080;
    int v115 = "access_slot_idx";
    __int16 v116 = 1024;
    int v117 = v40;
    __int16 v118 = 2080;
    int v119 = "start_channel";
    __int16 v120 = 1024;
    int v121 = v41;
    __int16 v122 = 2080;
    int v123 = "alternate_channel";
    __int16 v124 = 1024;
    int v125 = v42;
    __int16 v126 = 2080;
    int v127 = "channel_hop_pattern_mask";
    __int16 v128 = 1024;
    int v129 = v43;
    __int16 v130 = 2080;
    int v131 = "debug_flags";
    __int16 v132 = 1024;
    int v133 = v44;
    __int16 v134 = 2080;
    uint64_t v135 = "start_time";
    __int16 v136 = 2048;
    uint64_t v137 = v45;
    __int16 v138 = 2080;
    int v139 = "start_time_uncertainty";
    __int16 v140 = 1024;
    int v141 = v46;
    __int16 v142 = 2080;
    int v143 = "interval_max_ms";
    __int16 v144 = 1024;
    int v145 = v50;
    __int16 v146 = 2080;
    uint64_t v147 = "local_addr";
    __int16 v148 = 2048;
    uint64_t v149 = v51;
    __int16 v150 = 2080;
    uint64_t v151 = "peer_addr";
    __int16 v152 = 2048;
    uint64_t v153 = v47;
    __int16 v154 = 2080;
    char v155 = "sts_blob";
    __int16 v156 = 2080;
    __int16 v157 = v48;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Built GR packet V2: {\n                  %s: %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s : %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n                 , %s: %d\n"
      "                 , %s: %d\n"
      "                 , %s: %u\n"
      "                 , %s: %d\n"
      "                 , %s: %x\n"
      "                 , %s: %x\n"
      "                 , %s: %d\n"
      "                 , %s: %llu\n"
      "                 , %s: %u\n"
      "                 , %s: %d\n"
      "                 , %s: 0x%llx\n"
      "                 , %s: 0x%llx\n"
      "                 , %s: %s\n"
      "     }",
      __p,
      0x1C2u);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_100192920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100192960(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10041529C();
  }
  if (*(unsigned char *)(a2 + 97)
    && *(unsigned char *)(a2 + 99)
    && *(unsigned char *)(a2 + 101)
    && *(unsigned char *)(a2 + 103)
    && *(unsigned char *)(a2 + 120)
    && *(unsigned char *)(a2 + 353)
    && *(unsigned char *)(a2 + 355)
    && *(unsigned char *)(a2 + 360)
    && *(unsigned char *)(a2 + 365)
    && *(unsigned char *)(a2 + 367)
    && *(unsigned char *)(a2 + 369)
    && *(unsigned char *)(a2 + 372)
    && *(unsigned char *)(a2 + 376)
    && *(unsigned char *)(a2 + 380)
    && *(unsigned char *)(a2 + 388)
    && *(unsigned char *)(a2 + 392)
    && *(unsigned char *)(a2 + 408)
    && *(unsigned char *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16448;
    if (!*(unsigned char *)(a2 + 97)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
    if (!*(unsigned char *)(a2 + 99)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 98);
    if (!*(unsigned char *)(a2 + 101)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 100);
    if (!*(unsigned char *)(a2 + 103)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 31) = *(unsigned char *)(a2 + 102);
    if (!*(unsigned char *)(a2 + 353)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 32) = sub_1003A8E98(*(unsigned __int8 *)(a2 + 352), 1);
    if (!*(unsigned char *)(a2 + 355)) {
      goto LABEL_48;
    }
    if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 354))) {
      sub_100415270();
    }
    if (!*(unsigned char *)(a2 + 355)) {
      goto LABEL_48;
    }
    sub_1003A7CC4(*(unsigned __int8 *)(a2 + 354), 1, v4, v5, v6, v7, v8, v9);
    *(unsigned char *)(a1 + 33) = v10;
    if (!*(unsigned char *)(a2 + 360)) {
      goto LABEL_48;
    }
    *(_DWORD *)(a1 + 34) = *(_DWORD *)(a2 + 356);
    if (!*(unsigned char *)(a2 + 365)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 364);
    if (!*(unsigned char *)(a2 + 367)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 366);
    if (!*(unsigned char *)(a2 + 369)) {
      goto LABEL_48;
    }
    *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 368);
    if (!*(unsigned char *)(a2 + 372)
      || (*(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 370), !*(unsigned char *)(a2 + 376))
      || (*(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 374), !*(unsigned char *)(a2 + 380))
      || (*(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 378), !*(unsigned char *)(a2 + 392))
      || (*(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 390), !*(unsigned char *)(a2 + 408))
      || (*(_WORD *)(a1 + 72) = *(void *)(a2 + 400), !*(unsigned char *)(a2 + 424))
      || (*(_WORD *)(a1 + 74) = *(void *)(a2 + 416), !*(unsigned char *)(a2 + 120))
      || (*(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 118), !*(unsigned char *)(a2 + 388)))
    {
LABEL_48:
      sub_10000AE44();
    }
    int v11 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 64) = v11;
    uint64_t v12 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 22);
      int v14 = *(unsigned __int8 *)(a1 + 29);
      int v15 = *(unsigned __int8 *)(a1 + 30);
      int v16 = *(unsigned __int8 *)(a1 + 31);
      int v17 = *(unsigned __int16 *)(a1 + 76);
      int v18 = *(unsigned __int8 *)(a1 + 32);
      int v19 = *(unsigned __int8 *)(a1 + 33);
      int v20 = *(_DWORD *)(a1 + 34);
      int v21 = *(unsigned __int8 *)(a1 + 45);
      int v22 = *(unsigned __int8 *)(a1 + 46);
      int v23 = *(unsigned __int8 *)(a1 + 47);
      int v24 = *(unsigned __int16 *)(a1 + 48);
      int v25 = *(unsigned __int16 *)(a1 + 50);
      int v26 = *(unsigned __int16 *)(a1 + 52);
      int v27 = *(unsigned __int16 *)(a1 + 70);
      int v28 = *(unsigned __int16 *)(a1 + 72);
      int v29 = *(unsigned __int16 *)(a1 + 74);
      int v30 = *(unsigned __int8 *)(a1 + 64);
      int v31 = *(unsigned __int8 *)(a1 + 65);
      int v32 = *(unsigned __int8 *)(a1 + 66);
      int v33 = *(unsigned __int8 *)(a1 + 67);
      int v34 = *(unsigned __int8 *)(a1 + 68);
      int v35 = *(unsigned __int8 *)(a1 + 69);
      v37[0] = 67114752;
      v37[1] = v13;
      __int16 v38 = 1024;
      int v39 = v14;
      __int16 v40 = 1024;
      int v41 = v15;
      __int16 v42 = 1024;
      int v43 = v16;
      __int16 v44 = 1024;
      int v45 = v17;
      __int16 v46 = 1024;
      int v47 = v18;
      __int16 v48 = 1024;
      int v49 = v19;
      __int16 v50 = 1024;
      int v51 = v20;
      __int16 v52 = 1024;
      int v53 = v21;
      __int16 v54 = 1024;
      int v55 = v22;
      __int16 v56 = 1024;
      int v57 = v23;
      __int16 v58 = 1024;
      int v59 = v24;
      __int16 v60 = 1024;
      int v61 = v25;
      __int16 v62 = 1024;
      int v63 = v26;
      __int16 v64 = 1024;
      int v65 = v27;
      __int16 v66 = 1024;
      int v67 = v28;
      __int16 v68 = 1024;
      int v69 = v29;
      __int16 v70 = 1024;
      int v71 = v30;
      __int16 v72 = 1024;
      int v73 = v31;
      __int16 v74 = 1024;
      int v75 = v32;
      __int16 v76 = 1024;
      int v77 = v33;
      __int16 v78 = 1024;
      int v79 = v34;
      __int16 v80 = 1024;
      int v81 = v35;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Built FiRa Unicast packet V1: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, channel: %u\n, preamble: %u\n, uwb_ses_id: 0x%x\n, tx_pulse_shape: %u\n, rx_pulse_shape: %u\n, sfd_id: %u \n, nrstus_per_slot: %u\n, nslots_per_round: %u\n, nrounds_per_block: %u\n, vendor_id: 0x%x\n"
        ", local_addr: 0x%x\n"
        ", peer_addr: 0x%x\n"
        ", static_sts_iv:[%x, %x, %x, %x, %x, %x]}",
        (uint8_t *)v37,
        0x8Cu);
    }
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10041523C();
      return 0;
    }
  }
  return result;
}

BOOL sub_100192D70(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10041529C();
  }
  if (*(unsigned char *)(a2 + 97)
    && *(unsigned char *)(a2 + 99)
    && *(unsigned char *)(a2 + 101)
    && *(unsigned char *)(a2 + 103)
    && *(unsigned char *)(a2 + 120)
    && *(unsigned char *)(a2 + 353)
    && *(unsigned char *)(a2 + 355)
    && *(unsigned char *)(a2 + 360)
    && *(unsigned char *)(a2 + 365)
    && *(unsigned char *)(a2 + 367)
    && *(unsigned char *)(a2 + 369)
    && *(unsigned char *)(a2 + 372)
    && *(unsigned char *)(a2 + 376)
    && *(unsigned char *)(a2 + 380)
    && *(unsigned char *)(a2 + 388)
    && *(unsigned char *)(a2 + 392)
    && *(unsigned char *)(a2 + 408)
    && *(unsigned char *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16448;
    if (!*(unsigned char *)(a2 + 97)) {
      goto LABEL_51;
    }
    *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
    if (!*(unsigned char *)(a2 + 99)) {
      goto LABEL_51;
    }
    *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 98);
    if (!*(unsigned char *)(a2 + 101)) {
      goto LABEL_51;
    }
    *(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 100);
    if (!*(unsigned char *)(a2 + 103)) {
      goto LABEL_51;
    }
    *(unsigned char *)(a1 + 31) = *(unsigned char *)(a2 + 102);
    if (!*(unsigned char *)(a2 + 355)) {
      goto LABEL_51;
    }
    if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 354))) {
      sub_1004152D0();
    }
    if (!*(unsigned char *)(a2 + 355)) {
      goto LABEL_51;
    }
    sub_1003A7CC4(*(unsigned __int8 *)(a2 + 354), 2, v4, v5, v6, v7, v8, v9);
    *(unsigned char *)(a1 + 34) = v10;
    if (!*(unsigned char *)(a2 + 360)) {
      goto LABEL_51;
    }
    *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 356);
    if (!*(unsigned char *)(a2 + 365)) {
      goto LABEL_51;
    }
    *(unsigned char *)(a1 + 55) = *(unsigned char *)(a2 + 364);
    if (!*(unsigned char *)(a2 + 367)) {
      goto LABEL_51;
    }
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 366);
    if (!*(unsigned char *)(a2 + 369)) {
      goto LABEL_51;
    }
    *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 368);
    if (!*(unsigned char *)(a2 + 372)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 370);
    if (!*(unsigned char *)(a2 + 376)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 374);
    if (!*(unsigned char *)(a2 + 380)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 62) = *(_WORD *)(a2 + 378);
    if (!*(unsigned char *)(a2 + 392)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 390);
    if (!*(unsigned char *)(a2 + 408)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 90) = *(void *)(a2 + 400);
    if (!*(unsigned char *)(a2 + 424)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 92) = *(void *)(a2 + 416);
    if (!*(unsigned char *)(a2 + 120)) {
      goto LABEL_51;
    }
    *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 118);
    if (!*(unsigned char *)(a2 + 353)) {
      goto LABEL_51;
    }
    int v11 = *(unsigned __int8 *)(a2 + 352);
    if (v11 == 5 || v11 == 9) {
      *(_WORD *)(a1 + 32) = v11;
    }
    if (!*(unsigned char *)(a2 + 388)) {
LABEL_51:
    }
      sub_10000AE44();
    int v12 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 86) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 82) = v12;
    int v13 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(unsigned __int8 *)(a1 + 22);
      int v15 = *(unsigned __int8 *)(a1 + 29);
      int v16 = *(unsigned __int8 *)(a1 + 30);
      int v17 = *(unsigned __int8 *)(a1 + 31);
      int v18 = *(unsigned __int16 *)(a1 + 94);
      int v19 = *(unsigned __int16 *)(a1 + 32);
      int v20 = *(unsigned __int8 *)(a1 + 34);
      int v21 = *(_DWORD *)(a1 + 35);
      int v22 = *(unsigned __int8 *)(a1 + 55);
      int v23 = *(unsigned __int8 *)(a1 + 56);
      int v24 = *(unsigned __int8 *)(a1 + 57);
      int v25 = *(unsigned __int16 *)(a1 + 58);
      int v26 = *(unsigned __int16 *)(a1 + 60);
      int v27 = *(unsigned __int16 *)(a1 + 62);
      int v28 = *(unsigned __int16 *)(a1 + 88);
      int v29 = *(unsigned __int16 *)(a1 + 90);
      int v30 = *(unsigned __int16 *)(a1 + 92);
      int v31 = *(unsigned __int8 *)(a1 + 82);
      int v32 = *(unsigned __int8 *)(a1 + 83);
      int v33 = *(unsigned __int8 *)(a1 + 84);
      int v34 = *(unsigned __int8 *)(a1 + 85);
      int v35 = *(unsigned __int8 *)(a1 + 86);
      int v36 = *(unsigned __int8 *)(a1 + 87);
      v38[0] = 67114752;
      v38[1] = v14;
      __int16 v39 = 1024;
      int v40 = v15;
      __int16 v41 = 1024;
      int v42 = v16;
      __int16 v43 = 1024;
      int v44 = v17;
      __int16 v45 = 1024;
      int v46 = v18;
      __int16 v47 = 1024;
      int v48 = v19;
      __int16 v49 = 1024;
      int v50 = v20;
      __int16 v51 = 1024;
      int v52 = v21;
      __int16 v53 = 1024;
      int v54 = v22;
      __int16 v55 = 1024;
      int v56 = v23;
      __int16 v57 = 1024;
      int v58 = v24;
      __int16 v59 = 1024;
      int v60 = v25;
      __int16 v61 = 1024;
      int v62 = v26;
      __int16 v63 = 1024;
      int v64 = v27;
      __int16 v65 = 1024;
      int v66 = v28;
      __int16 v67 = 1024;
      int v68 = v29;
      __int16 v69 = 1024;
      int v70 = v30;
      __int16 v71 = 1024;
      int v72 = v31;
      __int16 v73 = 1024;
      int v74 = v32;
      __int16 v75 = 1024;
      int v76 = v33;
      __int16 v77 = 1024;
      int v78 = v34;
      __int16 v79 = 1024;
      int v80 = v35;
      __int16 v81 = 1024;
      int v82 = v36;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Built FiRa Unicast packet V2: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, channel: %u\n, preamble: %u\n, uwb_ses_id: 0x%x\n, tx_pulse_shape: %u\n, rx_pulse_shape: %u\n, sfd_id: %u \n, nrstus_per_slot: %u\n, nslots_per_round: %u\n, nrounds_per_block: %u\n, vendor_id: 0x%x\n"
        ", local_addr: 0x%x\n"
        ", peer_addr: 0x%x\n"
        ", static_sts_iv:[%x, %x, %x, %x, %x, %x]\n"
        "}",
        (uint8_t *)v38,
        0x8Cu);
    }
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10041523C();
      return 0;
    }
  }
  return result;
}

BOOL sub_100193188(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10041535C();
  }
  if (*(unsigned char *)(a2 + 97)
    && *(unsigned char *)(a2 + 99)
    && *(unsigned char *)(a2 + 101)
    && *(unsigned char *)(a2 + 103)
    && *(unsigned char *)(a2 + 120)
    && *(unsigned char *)(a2 + 353)
    && *(unsigned char *)(a2 + 355)
    && *(unsigned char *)(a2 + 360)
    && *(unsigned char *)(a2 + 365)
    && *(unsigned char *)(a2 + 367)
    && *(unsigned char *)(a2 + 369)
    && *(unsigned char *)(a2 + 372)
    && *(unsigned char *)(a2 + 376)
    && *(unsigned char *)(a2 + 380)
    && *(unsigned char *)(a2 + 433)
    && *(unsigned char *)(a2 + 435)
    && *(unsigned char *)(a2 + 437)
    && *(unsigned char *)(a2 + 388)
    && *(unsigned char *)(a2 + 392)
    && *(unsigned char *)(a2 + 408)
    && *(unsigned char *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16449;
    if (!*(unsigned char *)(a2 + 97)) {
      goto LABEL_54;
    }
    *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
    if (!*(unsigned char *)(a2 + 99)) {
      goto LABEL_54;
    }
    *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 98);
    if (!*(unsigned char *)(a2 + 101)) {
      goto LABEL_54;
    }
    *(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 100);
    if (!*(unsigned char *)(a2 + 103)) {
      goto LABEL_54;
    }
    *(unsigned char *)(a1 + 31) = *(unsigned char *)(a2 + 102);
    if (!*(unsigned char *)(a2 + 353)) {
      goto LABEL_54;
    }
    *(unsigned char *)(a1 + 32) = sub_1003A8E98(*(unsigned __int8 *)(a2 + 352), 1);
    if (!*(unsigned char *)(a2 + 355)) {
      goto LABEL_54;
    }
    if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 354))) {
      sub_100415330();
    }
    if (!*(unsigned char *)(a2 + 355)) {
      goto LABEL_54;
    }
    sub_1003A7CC4(*(unsigned __int8 *)(a2 + 354), 1, v4, v5, v6, v7, v8, v9);
    *(unsigned char *)(a1 + 33) = v10;
    if (!*(unsigned char *)(a2 + 360)) {
      goto LABEL_54;
    }
    *(_DWORD *)(a1 + 34) = *(_DWORD *)(a2 + 356);
    if (!*(unsigned char *)(a2 + 365)) {
      goto LABEL_54;
    }
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 364);
    if (!*(unsigned char *)(a2 + 367)) {
      goto LABEL_54;
    }
    *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 366);
    if (!*(unsigned char *)(a2 + 369)) {
      goto LABEL_54;
    }
    *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 368);
    if (!*(unsigned char *)(a2 + 372)) {
      goto LABEL_54;
    }
    *(_WORD *)(a1 + 51) = *(_WORD *)(a2 + 370);
    if (!*(unsigned char *)(a2 + 376)) {
      goto LABEL_54;
    }
    *(_WORD *)(a1 + 53) = *(_WORD *)(a2 + 374);
    if (!*(unsigned char *)(a2 + 380)) {
      goto LABEL_54;
    }
    *(_WORD *)(a1 + 55) = *(_WORD *)(a2 + 378);
    if (!*(unsigned char *)(a2 + 433)
      || (*(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 432), !*(unsigned char *)(a2 + 435))
      || (*(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 434), !*(unsigned char *)(a2 + 437))
      || (*(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 436), !*(unsigned char *)(a2 + 392))
      || (*(_WORD *)(a1 + 75) = *(_WORD *)(a2 + 390), !*(unsigned char *)(a2 + 408))
      || (*(void *)(a1 + 77) = *(void *)(a2 + 400), !*(unsigned char *)(a2 + 424))
      || (*(void *)(a1 + 85) = *(void *)(a2 + 416), !*(unsigned char *)(a2 + 120))
      || (*(_WORD *)(a1 + 93) = *(_WORD *)(a2 + 118), !*(unsigned char *)(a2 + 388)))
    {
LABEL_54:
      sub_10000AE44();
    }
    int v11 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 69) = v11;
    int v12 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 22);
      int v14 = *(unsigned __int8 *)(a1 + 29);
      int v15 = *(unsigned __int8 *)(a1 + 30);
      int v16 = *(unsigned __int8 *)(a1 + 31);
      int v17 = *(unsigned __int16 *)(a1 + 93);
      int v18 = *(unsigned __int8 *)(a1 + 32);
      int v19 = *(unsigned __int8 *)(a1 + 33);
      int v20 = *(_DWORD *)(a1 + 34);
      int v21 = *(unsigned __int8 *)(a1 + 48);
      int v22 = *(unsigned __int8 *)(a1 + 49);
      int v23 = *(unsigned __int8 *)(a1 + 50);
      int v24 = *(unsigned __int16 *)(a1 + 51);
      int v25 = *(unsigned __int16 *)(a1 + 53);
      int v26 = *(unsigned __int16 *)(a1 + 55);
      int v27 = *(unsigned __int8 *)(a1 + 23);
      int v28 = *(unsigned __int8 *)(a1 + 57);
      int v29 = *(unsigned __int8 *)(a1 + 58);
      int v30 = *(unsigned __int16 *)(a1 + 75);
      uint64_t v31 = *(void *)(a1 + 77);
      uint64_t v32 = *(void *)(a1 + 85);
      int v33 = *(unsigned __int8 *)(a1 + 69);
      int v34 = *(unsigned __int8 *)(a1 + 70);
      int v35 = *(unsigned __int8 *)(a1 + 71);
      int v36 = *(unsigned __int8 *)(a1 + 72);
      int v37 = *(unsigned __int8 *)(a1 + 73);
      int v38 = *(unsigned __int8 *)(a1 + 74);
      v40[0] = 67115520;
      v40[1] = v13;
      __int16 v41 = 1024;
      int v42 = v14;
      __int16 v43 = 1024;
      int v44 = v15;
      __int16 v45 = 1024;
      int v46 = v16;
      __int16 v47 = 1024;
      int v48 = v17;
      __int16 v49 = 1024;
      int v50 = v18;
      __int16 v51 = 1024;
      int v52 = v19;
      __int16 v53 = 1024;
      int v54 = v20;
      __int16 v55 = 1024;
      int v56 = v21;
      __int16 v57 = 1024;
      int v58 = v22;
      __int16 v59 = 1024;
      int v60 = v23;
      __int16 v61 = 1024;
      int v62 = v24;
      __int16 v63 = 1024;
      int v64 = v25;
      __int16 v65 = 1024;
      int v66 = v26;
      __int16 v67 = 1024;
      int v68 = v27;
      __int16 v69 = 1024;
      int v70 = v28;
      __int16 v71 = 1024;
      int v72 = v29;
      __int16 v73 = 1024;
      int v74 = v30;
      __int16 v75 = 2048;
      uint64_t v76 = v31;
      __int16 v77 = 2048;
      uint64_t v78 = v32;
      __int16 v79 = 1024;
      int v80 = v33;
      __int16 v81 = 1024;
      int v82 = v34;
      __int16 v83 = 1024;
      int v84 = v35;
      __int16 v85 = 1024;
      int v86 = v36;
      __int16 v87 = 1024;
      int v88 = v37;
      __int16 v89 = 1024;
      int v90 = v38;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Built FiRa Contention Based packet V1: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, channel: %u\n, preamble: %u\n, uwb_ses_id: 0x%x\n, tx_pulse_shape: %u\n, rx_pulse_shape: %u\n, sfd_id: %u \n, nrstus_per_slot: %u\n, nslots_per_round: %u\n, nrounds_per_block: %u\n, ranging_type: %u\n"
        ", cap_size_min: %u\n"
        ", cap_size_max: %u\n"
        ", vendor_id: 0x%x\n"
        ", local_addr: 0x%llx\n"
        ", peer_addr: 0x%llx\n"
        ", static_sts_iv:[%x, %x, %x, %x, %x, %x]}",
        (uint8_t *)v40,
        0xA6u);
    }
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1004152FC();
      return 0;
    }
  }
  return result;
}

BOOL sub_100193614(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10041535C();
  }
  if (*(unsigned char *)(a2 + 97)
    && *(unsigned char *)(a2 + 99)
    && *(unsigned char *)(a2 + 101)
    && *(unsigned char *)(a2 + 103)
    && *(unsigned char *)(a2 + 120)
    && *(unsigned char *)(a2 + 353)
    && *(unsigned char *)(a2 + 355)
    && *(unsigned char *)(a2 + 360)
    && *(unsigned char *)(a2 + 365)
    && *(unsigned char *)(a2 + 367)
    && *(unsigned char *)(a2 + 369)
    && *(unsigned char *)(a2 + 372)
    && *(unsigned char *)(a2 + 376)
    && *(unsigned char *)(a2 + 380)
    && *(unsigned char *)(a2 + 433)
    && *(unsigned char *)(a2 + 435)
    && *(unsigned char *)(a2 + 437)
    && *(unsigned char *)(a2 + 388)
    && *(unsigned char *)(a2 + 392)
    && *(unsigned char *)(a2 + 408)
    && *(unsigned char *)(a2 + 424))
  {
    *(_WORD *)(a1 + 16) = 16449;
    if (!*(unsigned char *)(a2 + 97)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
    if (!*(unsigned char *)(a2 + 99)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 98);
    if (!*(unsigned char *)(a2 + 101)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 100);
    if (!*(unsigned char *)(a2 + 103)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 31) = *(unsigned char *)(a2 + 102);
    if (!*(unsigned char *)(a2 + 355)) {
      goto LABEL_57;
    }
    if (!sub_1003A7C00(*(unsigned __int8 *)(a2 + 354))) {
      sub_1004153C4();
    }
    if (!*(unsigned char *)(a2 + 355)) {
      goto LABEL_57;
    }
    sub_1003A7CC4(*(unsigned __int8 *)(a2 + 354), 2, v4, v5, v6, v7, v8, v9);
    *(unsigned char *)(a1 + 34) = v10;
    if (!*(unsigned char *)(a2 + 360)) {
      goto LABEL_57;
    }
    *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 356);
    if (!*(unsigned char *)(a2 + 365)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 364);
    if (!*(unsigned char *)(a2 + 367)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 366);
    if (!*(unsigned char *)(a2 + 369)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 368);
    if (!*(unsigned char *)(a2 + 372)) {
      goto LABEL_57;
    }
    *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 370);
    if (!*(unsigned char *)(a2 + 376)) {
      goto LABEL_57;
    }
    *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 374);
    if (!*(unsigned char *)(a2 + 380)) {
      goto LABEL_57;
    }
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 378);
    if (!*(unsigned char *)(a2 + 433)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 432);
    if (!*(unsigned char *)(a2 + 435)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 434);
    if (!*(unsigned char *)(a2 + 437)) {
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 436);
    if (!*(unsigned char *)(a2 + 392)) {
      goto LABEL_57;
    }
    *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 390);
    if (!*(unsigned char *)(a2 + 408)) {
      goto LABEL_57;
    }
    *(void *)(a1 + 78) = *(void *)(a2 + 400);
    if (!*(unsigned char *)(a2 + 424)) {
      goto LABEL_57;
    }
    *(void *)(a1 + 86) = *(void *)(a2 + 416);
    if (!*(unsigned char *)(a2 + 120)) {
      goto LABEL_57;
    }
    *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 118);
    if (!*(unsigned char *)(a2 + 353)) {
      goto LABEL_57;
    }
    int v11 = *(unsigned __int8 *)(a2 + 352);
    if (v11 == 5 || v11 == 9) {
      *(_WORD *)(a1 + 32) = v11;
    }
    if (!*(unsigned char *)(a2 + 388)) {
LABEL_57:
    }
      sub_10000AE44();
    int v12 = *(_DWORD *)(a2 + 382);
    *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 386);
    *(_DWORD *)(a1 + 70) = v12;
    int v13 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(unsigned __int8 *)(a1 + 22);
      int v15 = *(unsigned __int8 *)(a1 + 29);
      int v16 = *(unsigned __int8 *)(a1 + 30);
      int v17 = *(unsigned __int8 *)(a1 + 31);
      int v18 = *(unsigned __int16 *)(a1 + 94);
      int v19 = *(unsigned __int16 *)(a1 + 32);
      int v20 = *(unsigned __int8 *)(a1 + 34);
      int v21 = *(_DWORD *)(a1 + 35);
      int v22 = *(unsigned __int8 *)(a1 + 49);
      int v23 = *(unsigned __int8 *)(a1 + 50);
      int v24 = *(unsigned __int8 *)(a1 + 51);
      int v25 = *(unsigned __int16 *)(a1 + 52);
      int v26 = *(unsigned __int16 *)(a1 + 54);
      int v27 = *(unsigned __int16 *)(a1 + 56);
      int v28 = *(unsigned __int8 *)(a1 + 23);
      int v29 = *(unsigned __int8 *)(a1 + 58);
      int v30 = *(unsigned __int8 *)(a1 + 59);
      int v31 = *(unsigned __int16 *)(a1 + 76);
      uint64_t v32 = *(void *)(a1 + 78);
      uint64_t v33 = *(void *)(a1 + 86);
      int v34 = *(unsigned __int8 *)(a1 + 70);
      int v35 = *(unsigned __int8 *)(a1 + 71);
      int v36 = *(unsigned __int8 *)(a1 + 72);
      int v37 = *(unsigned __int8 *)(a1 + 73);
      int v38 = *(unsigned __int8 *)(a1 + 74);
      int v39 = *(unsigned __int8 *)(a1 + 75);
      v41[0] = 67115520;
      v41[1] = v14;
      __int16 v42 = 1024;
      int v43 = v15;
      __int16 v44 = 1024;
      int v45 = v16;
      __int16 v46 = 1024;
      int v47 = v17;
      __int16 v48 = 1024;
      int v49 = v18;
      __int16 v50 = 1024;
      int v51 = v19;
      __int16 v52 = 1024;
      int v53 = v20;
      __int16 v54 = 1024;
      int v55 = v21;
      __int16 v56 = 1024;
      int v57 = v22;
      __int16 v58 = 1024;
      int v59 = v23;
      __int16 v60 = 1024;
      int v61 = v24;
      __int16 v62 = 1024;
      int v63 = v25;
      __int16 v64 = 1024;
      int v65 = v26;
      __int16 v66 = 1024;
      int v67 = v27;
      __int16 v68 = 1024;
      int v69 = v28;
      __int16 v70 = 1024;
      int v71 = v29;
      __int16 v72 = 1024;
      int v73 = v30;
      __int16 v74 = 1024;
      int v75 = v31;
      __int16 v76 = 2048;
      uint64_t v77 = v32;
      __int16 v78 = 2048;
      uint64_t v79 = v33;
      __int16 v80 = 1024;
      int v81 = v34;
      __int16 v82 = 1024;
      int v83 = v35;
      __int16 v84 = 1024;
      int v85 = v36;
      __int16 v86 = 1024;
      int v87 = v37;
      __int16 v88 = 1024;
      int v89 = v38;
      __int16 v90 = 1024;
      int v91 = v39;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Built FiRa Contention Based packet V2: {\n  ses_role: %u\n, tx_ant_mask: %u\n, rx_ant_mask: %u\n, rx_sync_search_ant_mask: %u\n, debug_flags: 0x%x\n, channel: %u\n, preamble: %u\n, uwb_ses_id: 0x%x\n, tx_pulse_shape: %u\n, rx_pulse_shape: %u\n, sfd_id: %u \n, nrstus_per_slot: %u\n, nslots_per_round: %u\n, nrounds_per_block: %u\n, ranging_type: %u\n"
        ", cap_size_min: %u\n"
        ", cap_size_max: %u\n"
        ", vendor_id: 0x%x\n"
        ", local_addr: 0x%llx\n"
        ", peer_addr: 0x%llx\n"
        ", static_sts_iv:[%x, %x, %x, %x, %x, %x]\n"
        "}",
        (uint8_t *)v41,
        0xA6u);
    }
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100415390();
      return 0;
    }
  }
  return result;
}

BOOL sub_100193AA8(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100415424();
  }
  if (*(unsigned char *)(a2 + 97)
    && *(unsigned char *)(a2 + 441)
    && *(unsigned char *)(a2 + 443)
    && *(unsigned char *)(a2 + 446)
    && *(unsigned char *)(a2 + 450)
    && *(unsigned char *)(a2 + 99)
    && *(unsigned char *)(a2 + 101)
    && *(unsigned char *)(a2 + 103)
    && *(unsigned char *)(a2 + 163)
    && *(unsigned char *)(a2 + 165)
    && *(unsigned char *)(a2 + 167)
    && *(unsigned char *)(a2 + 456)
    && *(unsigned char *)(a2 + 471)
    && *(unsigned char *)(a2 + 466)
    && *(unsigned char *)(a2 + 453)
    && *(unsigned char *)(a2 + 469)
    && *(unsigned char *)(a2 + 120)
    && *(unsigned char *)(a2 + 174)
    && *(unsigned char *)(a2 + 184))
  {
    *(_WORD *)(a1 + 16) = 16480;
    if (!*(unsigned char *)(a2 + 97)) {
      goto LABEL_47;
    }
    *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
    if (!*(unsigned char *)(a2 + 441)) {
      goto LABEL_47;
    }
    *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 440);
    if (!*(unsigned char *)(a2 + 443)) {
      goto LABEL_47;
    }
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 442);
    if (!*(unsigned char *)(a2 + 446)) {
      goto LABEL_47;
    }
    *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 444);
    if (!*(unsigned char *)(a2 + 450)) {
      goto LABEL_47;
    }
    *(_WORD *)(a1 + 27) = *(_WORD *)(a2 + 448);
    if (!*(unsigned char *)(a2 + 99)) {
      goto LABEL_47;
    }
    *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 98);
    if (!*(unsigned char *)(a2 + 101)) {
      goto LABEL_47;
    }
    *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 100);
    if (!*(unsigned char *)(a2 + 103)) {
      goto LABEL_47;
    }
    *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 102);
    if (!*(unsigned char *)(a2 + 163)) {
      goto LABEL_47;
    }
    *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 162);
    if (!*(unsigned char *)(a2 + 165)) {
      goto LABEL_47;
    }
    *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 164);
    if (!*(unsigned char *)(a2 + 167)) {
      goto LABEL_47;
    }
    *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 166);
    if (!*(unsigned char *)(a2 + 456)
      || (*(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 454), !*(unsigned char *)(a2 + 471))
      || (*(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 470), !*(unsigned char *)(a2 + 466))
      || (*(_WORD *)(a1 + 47) = *(_WORD *)(a2 + 464), !*(unsigned char *)(a2 + 453))
      || (*(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 452), !*(unsigned char *)(a2 + 469))
      || (*(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 468), !*(unsigned char *)(a2 + 120))
      || (*(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 118), !*(unsigned char *)(a2 + 174))
      || (*(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 172), !*(unsigned char *)(a2 + 184)))
    {
LABEL_47:
      sub_10000AE44();
    }
    *(void *)(a1 + 94) = *(void *)(a2 + 176);
    uint64_t v4 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 22);
      int v6 = *(unsigned __int8 *)(a1 + 23);
      int v7 = *(unsigned __int8 *)(a1 + 24);
      int v8 = *(unsigned __int16 *)(a1 + 25);
      int v9 = *(unsigned __int16 *)(a1 + 27);
      int v10 = *(unsigned __int8 *)(a1 + 41);
      int v11 = *(unsigned __int8 *)(a1 + 42);
      int v12 = *(unsigned __int8 *)(a1 + 43);
      int v13 = *(unsigned __int8 *)(a1 + 49);
      int v14 = *(unsigned __int8 *)(a1 + 50);
      int v15 = *(unsigned __int8 *)(a1 + 51);
      int v16 = *(unsigned __int16 *)(a1 + 44);
      int v17 = *(unsigned __int8 *)(a1 + 46);
      int v18 = *(unsigned __int16 *)(a1 + 47);
      int v19 = *(unsigned __int8 *)(a1 + 60);
      int v20 = *(unsigned __int8 *)(a1 + 61);
      int v21 = *(unsigned __int16 *)(a1 + 78);
      int v22 = *(unsigned __int16 *)(a1 + 92);
      uint64_t v23 = *(void *)(a1 + 94);
      v25[0] = 67113728;
      v25[1] = v5;
      __int16 v26 = 1024;
      int v27 = v6;
      __int16 v28 = 1024;
      int v29 = v7;
      __int16 v30 = 1024;
      int v31 = v8;
      __int16 v32 = 1024;
      int v33 = v9;
      __int16 v34 = 1024;
      int v35 = v10;
      __int16 v36 = 1024;
      int v37 = v11;
      __int16 v38 = 1024;
      int v39 = v12;
      __int16 v40 = 1024;
      int v41 = v13;
      __int16 v42 = 1024;
      int v43 = v14;
      __int16 v44 = 1024;
      int v45 = v15;
      __int16 v46 = 1024;
      int v47 = v16;
      __int16 v48 = 1024;
      int v49 = v17;
      __int16 v50 = 1024;
      int v51 = v18;
      __int16 v52 = 1024;
      int v53 = v19;
      __int16 v54 = 1024;
      int v55 = v20;
      __int16 v56 = 1024;
      int v57 = v21;
      __int16 v58 = 1024;
      int v59 = v22;
      __int16 v60 = 2048;
      uint64_t v61 = v23;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Built Test NMI packet: {\n, ses_role: %u\n, nb_tx_ant_mask: %u\n, nb_rx_ant_mask: %u\n, nb_pkt_type: %u\n, nb_band_channel: %u\n, mms_tx_ant_mask: %u\n, mms_rx_ant_mask: %u\n, mms_sync_search_ant_mask: %u\n, mms_tx_ant_mask2: %u\n, mms_rx_ant_mask2: %u\n, mms_sync_search_ant_mask2: %u\n, mms_packet_type: %u\n, mms_num_fragments: %u\n, mms_band_channel: %u\n, nb_slot_size: %u\n"
        ", mms_slot_size: %u\n"
        ", debug_flags: 0x%x\n"
        ", interval_ms: %u\n"
        ", mac_addr: %llu",
        (uint8_t *)v25,
        0x78u);
    }
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1004153F0();
      return 0;
    }
  }
  return result;
}

BOOL sub_100193E5C(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10041548C();
  }
  if (*(unsigned char *)(a2 + 97)
    && *(unsigned char *)(a2 + 441)
    && *(unsigned char *)(a2 + 443)
    && *(unsigned char *)(a2 + 446)
    && *(unsigned char *)(a2 + 450)
    && *(unsigned char *)(a2 + 99)
    && *(unsigned char *)(a2 + 101)
    && *(unsigned char *)(a2 + 103)
    && *(unsigned char *)(a2 + 163)
    && *(unsigned char *)(a2 + 165)
    && *(unsigned char *)(a2 + 167)
    && *(unsigned char *)(a2 + 497)
    && *(unsigned char *)(a2 + 456)
    && *(unsigned char *)(a2 + 459)
    && *(unsigned char *)(a2 + 461)
    && *(unsigned char *)(a2 + 463)
    && *(unsigned char *)(a2 + 471)
    && *(unsigned char *)(a2 + 466)
    && *(unsigned char *)(a2 + 453)
    && *(unsigned char *)(a2 + 469)
    && *(unsigned char *)(a2 + 120)
    && *(unsigned char *)(a2 + 174)
    && *(unsigned char *)(a2 + 474)
    && *(unsigned char *)(a2 + 477)
    && *(unsigned char *)(a2 + 479)
    && *(unsigned char *)(a2 + 499)
    && *(unsigned char *)(a2 + 184))
  {
    *(_WORD *)(a1 + 16) = 16481;
    if (!*(unsigned char *)(a2 + 97)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 96);
    if (!*(unsigned char *)(a2 + 441)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 440);
    if (!*(unsigned char *)(a2 + 443)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 442);
    if (!*(unsigned char *)(a2 + 446)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 35) = *(_WORD *)(a2 + 444);
    if (!*(unsigned char *)(a2 + 450)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 23) = *(_WORD *)(a2 + 448);
    if (!*(unsigned char *)(a2 + 99)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 98);
    if (!*(unsigned char *)(a2 + 101)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 100);
    if (!*(unsigned char *)(a2 + 103)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 102);
    if (!*(unsigned char *)(a2 + 456)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 454);
    if (!*(unsigned char *)(a2 + 459)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 458) - 1;
    if (!*(unsigned char *)(a2 + 461)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 460);
    if (!*(unsigned char *)(a2 + 463)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 462);
    if (!*(unsigned char *)(a2 + 471)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 470);
    if (!*(unsigned char *)(a2 + 466)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 53) = *(_WORD *)(a2 + 464);
    if (!*(unsigned char *)(a2 + 453)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 452);
    if (!*(unsigned char *)(a2 + 469)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 67) = *(unsigned char *)(a2 + 468);
    if (!*(unsigned char *)(a2 + 120)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 118);
    if (!*(unsigned char *)(a2 + 174)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 90) = *(_WORD *)(a2 + 172);
    if (!*(unsigned char *)(a2 + 474)) {
      sub_10000AE44();
    }
    *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 472);
    if (!*(unsigned char *)(a2 + 477)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 476);
    if (!*(unsigned char *)(a2 + 479)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 478);
    if (!*(unsigned char *)(a2 + 184)) {
      sub_10000AE44();
    }
    *(void *)(a1 + 92) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 480);
    if (!*(unsigned char *)(a2 + 497)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 496);
    if (!*(unsigned char *)(a2 + 163)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 55) = *(unsigned char *)(a2 + 162);
    if (!*(unsigned char *)(a2 + 165)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 164);
    if (!*(unsigned char *)(a2 + 167)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 166);
    if (!*(unsigned char *)(a2 + 499)) {
      sub_10000AE44();
    }
    *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 498);
    uint64_t v4 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 22);
      int v6 = *(unsigned __int8 *)(a1 + 33);
      int v7 = *(unsigned __int8 *)(a1 + 34);
      int v8 = *(unsigned __int16 *)(a1 + 35);
      int v9 = *(unsigned __int16 *)(a1 + 23);
      int v10 = *(unsigned __int8 *)(a1 + 47);
      int v11 = *(unsigned __int8 *)(a1 + 48);
      int v15 = *(unsigned __int8 *)(a1 + 49);
      int v16 = *(unsigned __int8 *)(a1 + 55);
      int v17 = *(unsigned __int8 *)(a1 + 56);
      int v18 = *(unsigned __int8 *)(a1 + 57);
      int v19 = *(unsigned __int8 *)(a1 + 58);
      int v20 = *(unsigned __int16 *)(a1 + 50);
      int v21 = *(unsigned __int8 *)(a1 + 59);
      int v22 = *(unsigned __int8 *)(a1 + 60);
      int v23 = *(unsigned __int8 *)(a1 + 61);
      int v24 = *(unsigned __int8 *)(a1 + 52);
      int v25 = *(unsigned __int16 *)(a1 + 53);
      int v26 = *(unsigned __int8 *)(a1 + 65);
      int v27 = *(unsigned __int8 *)(a1 + 67);
      int v28 = *(unsigned __int16 *)(a1 + 76);
      int v29 = *(unsigned __int16 *)(a1 + 90);
      int v30 = *(unsigned __int16 *)(a1 + 37);
      int v31 = *(unsigned __int8 *)(a1 + 64);
      int v32 = *(unsigned __int8 *)(a1 + 66);
      uint64_t v33 = *(void *)(a1 + 92);
      int v34 = *(unsigned __int8 *)(a1 + 75);
      int v12 = +[NSData dataWithBytes:a1 + 100 length:16];
      int v13 = CUPrintNSObjectMasked();
      *(_DWORD *)buf = 67116034;
      int v36 = v5;
      __int16 v37 = 1024;
      int v38 = v6;
      __int16 v39 = 1024;
      int v40 = v7;
      __int16 v41 = 1024;
      int v42 = v8;
      __int16 v43 = 1024;
      int v44 = v9;
      __int16 v45 = 1024;
      int v46 = v10;
      __int16 v47 = 1024;
      int v48 = v11;
      __int16 v49 = 1024;
      int v50 = v15;
      __int16 v51 = 1024;
      int v52 = v16;
      __int16 v53 = 1024;
      int v54 = v17;
      __int16 v55 = 1024;
      int v56 = v18;
      __int16 v57 = 1024;
      int v58 = v19;
      __int16 v59 = 1024;
      int v60 = v20;
      __int16 v61 = 1024;
      int v62 = v21;
      __int16 v63 = 1024;
      int v64 = v22;
      __int16 v65 = 1024;
      int v66 = v23;
      __int16 v67 = 1024;
      int v68 = v24;
      __int16 v69 = 1024;
      int v70 = v25;
      __int16 v71 = 1024;
      int v72 = v26;
      __int16 v73 = 1024;
      int v74 = v27;
      __int16 v75 = 1024;
      int v76 = v28;
      __int16 v77 = 1024;
      int v78 = v29;
      __int16 v79 = 1024;
      int v80 = v30;
      __int16 v81 = 1024;
      int v82 = v31;
      __int16 v83 = 1024;
      int v84 = v32;
      __int16 v85 = 2048;
      uint64_t v86 = v33;
      __int16 v87 = 1024;
      int v88 = v34;
      __int16 v89 = 2112;
      __int16 v90 = v13;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Built NMI packet: {\n, ses_role: %u\n, nb_tx_ant_mask: %u\n, nb_rx_ant_mask: %u\n, nb_pkt_type: %u\n, nap_band_channel: %u\n, mms_tx_ant_mask: %u\n, mms_rx_ant_mask: %u\n, mms_sync_search_ant_mask: %u\n, mms_tx_ant_mask2: %u\n, mms_rx_ant_mask2: %u\n, mms_sync_search_ant_mask2: %u\n, mms_ant_diversity_pattern: %u\n, mms_packet_type: %u\n, mms_psr_minus_one: %u\n, mms_gap: %u\n"
        ", mms_seq_idex: %u\n"
        ", mms_num_fragments: %u\n"
        ", mms_band_channel: %u\n"
        ", nb_slot_size: %u\n"
        ", mms_slot_size: %u\n"
        ", debug_flags: 0x%x\n"
        ", interval_ms: %u\n"
        ", nb_ch_sel_mask: %u\n"
        ", nap_slot_size: %u\n"
        ", data_slot_size: %u\n"
        ", mac_addr: %llu\n"
        ", misc_setting: %hu\n"
        ", irk: %@\n"
        "}",
        buf,
        0xB2u);
    }
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100415458();
      return 0;
    }
  }
  return result;
}

void sub_1001944E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100194508(char *a1, uint64_t a2)
{
  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "PRRoseProvider::populateRangingTriggerConfig got Unspecified mac mode");
    case 1:
      char v2 = *(unsigned char *)(a2 + 1) != 0;
      goto LABEL_3;
    case 2:
    case 3:
    case 5:
    case 6:
      goto LABEL_2;
    case 4:
      if (*(unsigned char *)(a2 + 280))
      {
        a1[3] = *(unsigned char *)(a2 + 241);
        int v6 = *(unsigned __int8 *)(a2 + 240);
        a1[1] = v6;
        a1[2] = *(unsigned char *)(a2 + 242);
        if (v6) {
          char v2 = 5;
        }
        else {
          char v2 = 4;
        }
        goto LABEL_3;
      }
      BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_1004154C0();
      return 0;
    case 7:
      if (*(unsigned char *)(a2 + 290))
      {
        if (*(unsigned char *)(a2 + 288)) {
          sub_100415528();
        }
LABEL_2:
        char v2 = 4;
LABEL_3:
        *a1 = v2;
        return 1;
      }
      BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_1004154F4();
      return 0;
    case 8:
      if (*(unsigned char *)(a2 + 290))
      {
        char v4 = *(unsigned char *)(a2 + 288);
        if (v4) {
          char v5 = 5;
        }
        else {
          char v5 = 4;
        }
        *a1 = v5;
        a1[1] = v4;
        a1[2] = *(unsigned char *)(a2 + 289);
        return 1;
      }
      else
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
        if (result)
        {
          sub_100415554();
          return 0;
        }
      }
      return result;
    default:
      return 0;
  }
}

void sub_100194690(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1001946C8(unsigned char *a1, uint64_t a2)
{
  switch(*(_DWORD *)(a2 + 60))
  {
    case 0:
      BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_100415588();
        return 0;
      }
      return result;
    case 1:
      *a1 = 0;
      return 1;
    case 2:
      BOOL result = 1;
      *a1 = 1;
      return result;
    case 3:
      *a1 = 2;
      return 1;
    default:
      return 1;
  }
}

uint64_t sub_100194770(int a1)
{
  return a1 | 0x10000u;
}

void sub_100194778(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = *(unsigned __int8 *)(a3 + 56);
  if (*(unsigned char *)(a3 + 87)) {
    unsigned __int8 v8 = *(unsigned char *)(a3 + 86);
  }
  else {
    unsigned __int8 v8 = 0;
  }
  unsigned int v9 = *(_DWORD *)(a3 + 60);
  unsigned int v10 = *(_DWORD *)(a3 + 64);
  if (*(unsigned char *)(a3 + 81)) {
    unsigned __int8 v11 = *(unsigned char *)(a3 + 80);
  }
  else {
    unsigned __int8 v11 = 0;
  }
  unsigned int v12 = v7 - 1;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 3)
    {
      unint64_t v14 = *(void *)(a3 + 48);
      unint64_t v18 = HIDWORD(v14);
      unint64_t v16 = v14 & 0xFFFF000000000000;
      int v19 = 1;
    }
    else
    {
      int v19 = 0;
      LODWORD(v14) = 0;
      LOWORD(v18) = 0;
      unint64_t v16 = 0;
    }
    LODWORD(v13) = 0;
    BOOL v15 = *(unsigned char *)(a3 + 76) != 0;
  }
  else
  {
    uint64_t v13 = *(void *)(a3 + 48);
    LODWORD(v14) = v13;
    BOOL v15 = *(unsigned char *)(a3 + 76) != 0;
    unint64_t v16 = 0;
    if (v7 == 2 && *(unsigned char *)(a3 + 76) != 0)
    {
      int v19 = 0;
      LODWORD(v18) = *(_DWORD *)(a3 + 72);
      int v20 = 1;
      if (!v10) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    LOWORD(v18) = 0;
    int v19 = 0;
    if (v7 == 2)
    {
LABEL_26:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_1004155BC();
      }
      goto LABEL_28;
    }
  }
  if (v15) {
    goto LABEL_26;
  }
  int v20 = 0;
  if (!v10)
  {
LABEL_33:
    LOWORD(v23) = 0;
    unsigned int v45 = 0;
    LOWORD(v46) = 0;
    goto LABEL_34;
  }
LABEL_23:
  float v21 = *(float *)(a3 + 68);
  if (v21 > 1.0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_10041568C();
    }
    goto LABEL_28;
  }
  unsigned int v9 = (float)(v21 * (float)v10);
  if (!*(unsigned char *)(a3 + 92)) {
    goto LABEL_33;
  }
  LOWORD(v23) = 0;
  if (*(unsigned char *)(a3 + 100) && *(unsigned char *)(a3 + 108))
  {
    unsigned int v23 = *(_DWORD *)(a3 + 88) / 0x3E8u;
    unsigned int v24 = *(_DWORD *)(a3 + 96);
    unsigned int v46 = v24 / 0x3E8;
    unsigned int v45 = (float)(*(float *)(a3 + 104) * (float)v24);
  }
  else
  {
    unsigned int v45 = 0;
    LOWORD(v46) = 0;
  }
LABEL_34:
  int v25 = *(_DWORD *)(a2 + 4);
  if (v25 == 8)
  {
    if (!*(unsigned char *)(a3 + 40) || !*(unsigned char *)(a3 + 36))
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_100415658();
      }
      goto LABEL_28;
    }
    int v38 = v20;
    int v39 = v19;
    unsigned int v41 = v9;
    unsigned __int8 v42 = v11;
    unsigned __int8 v43 = v8;
    unint64_t v44 = *(unsigned __int16 *)(a3 + 30) | ((unint64_t)*(unsigned int *)(a3 + 32) << 16);
    int v40 = a1;
    if (!*(unsigned char *)(a3 + 84)) {
      goto LABEL_51;
    }
    unint64_t v36 = v16;
    __int16 v37 = v18;
    log = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "updating acquisition band & channel in trigger command", buf, 2u);
    }
    if (!*(unsigned char *)(a3 + 84)) {
      sub_10000AE44();
    }
    int v26 = *(unsigned __int16 *)(a3 + 82);
    int v25 = *(_DWORD *)(a2 + 4);
    unsigned __int8 v11 = v42;
    unsigned __int8 v8 = v43;
    unsigned int v9 = v41;
    unint64_t v16 = v36;
    LOWORD(v18) = v37;
    int v20 = v38;
    int v19 = v39;
  }
  else
  {
    if (v25 == 2)
    {
      if (*(unsigned char *)(a3 + 40) && *(unsigned char *)(a3 + 29))
      {
        int v38 = v20;
        int v39 = v19;
        unsigned int v41 = v9;
        unsigned __int8 v42 = v11;
        unsigned __int8 v43 = v8;
        int v40 = a1;
        unint64_t v44 = *(void *)(a3 + 21);
LABEL_51:
        int v26 = 0xFFFF;
        goto LABEL_53;
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_100415624();
      }
LABEL_28:
      char v22 = 0;
      *(unsigned char *)a4 = 0;
      goto LABEL_71;
    }
    int v40 = a1;
    unint64_t v44 = 0;
    int v26 = 0xFFFF;
  }
  if (v25 != 4 || !*(unsigned char *)(a3 + 40))
  {
    int v38 = v20;
    int v39 = v19;
    unsigned int v41 = v9;
    unsigned __int8 v42 = v11;
    unsigned __int8 v43 = v8;
    goto LABEL_53;
  }
  if (!*(unsigned char *)(a3 + 36))
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_1004155F0();
    }
    goto LABEL_28;
  }
  int v38 = v20;
  int v39 = v19;
  unsigned int v41 = v9;
  unsigned __int8 v42 = v11;
  unsigned __int8 v43 = v8;
  unint64_t v44 = *(unsigned __int16 *)(a3 + 30) | ((unint64_t)*(unsigned int *)(a3 + 32) << 16);
LABEL_53:
  unsigned int v27 = v10 / 0x3E8;
  unsigned __int16 v28 = v18;
  unint64_t v29 = v14 | v16 | ((unint64_t)(unsigned __int16)v18 << 32);
  int v30 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    if (v12 > 2) {
      int v31 = "Ignored";
    }
    else {
      int v31 = (&off_100855C18)[(char)v12];
    }
    if (v39) {
      unint64_t v32 = v29;
    }
    else {
      unint64_t v32 = 0;
    }
    *(_DWORD *)buf = 67112450;
    int v33 = v28;
    int v48 = v40;
    if (!v38) {
      int v33 = 0;
    }
    __int16 v49 = 2080;
    int v50 = v31;
    __int16 v51 = 2048;
    unint64_t v52 = v32;
    __int16 v53 = 1024;
    if (v26 == 0xFFFF) {
      int v34 = -1;
    }
    else {
      int v34 = v26;
    }
    int v54 = v13;
    __int16 v55 = 1024;
    int v56 = v33;
    __int16 v57 = 1024;
    unsigned int v58 = v41;
    __int16 v59 = 1024;
    int v60 = v43;
    __int16 v61 = 1024;
    int v62 = (unsigned __int16)v27;
    __int16 v63 = 1024;
    int v64 = v42;
    __int16 v65 = 1024;
    int v66 = (unsigned __int16)v23;
    __int16 v67 = 1024;
    unsigned int v68 = v45;
    __int16 v69 = 1024;
    int v70 = (unsigned __int16)v46;
    __int16 v71 = 2048;
    unint64_t v72 = v44;
    __int16 v73 = 1024;
    int v74 = v34;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Built clientStartService packet: {\n  tkt: %d\n, start_time_type: %s\n, start_time_absolute_us: %llu\n, start_time_offset_us: %d\n, bt_conn_interval_ms: %d\n, start_time_uncert_us: %d\n, cross_session_offset_ms: %d\n, scheduling_interval_ms: %d\n, dither_const_ms: %d\n, secondary_scheduling_delay_ms: %d\n, secondary_start_time_uncert_us: %d\n, secondary_scheduling_interval_ms: %d\n, addr: 0x%llx\n, nb_band_ch: %d }", buf,
      0x62u);
  }
  *(_WORD *)a4 = v40;
  *(unsigned char *)(a4 + 2) = v7;
  *(void *)(a4 + 3) = v29;
  *(_DWORD *)(a4 + 11) = v41;
  *(unsigned char *)(a4 + 15) = v43;
  *(_WORD *)(a4 + 16) = v27;
  *(unsigned char *)(a4 + 18) = v42;
  *(_WORD *)(a4 + 19) = v23;
  *(_DWORD *)(a4 + 21) = v45;
  *(_WORD *)(a4 + 25) = v46;
  *(void *)(a4 + 27) = v44;
  char v22 = 1;
  *(_WORD *)(a4 + 35) = v26;
LABEL_71:
  *(unsigned char *)(a4 + 37) = v22;
}

void sub_100194D2C(unsigned __int8 **a1@<X0>, uint64_t a2@<X8>)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004156C0();
  }
  *(_WORD *)(a2 + 16) = 16420;
  char v4 = +[NSUserDefaults standardUserDefaults];
  char v5 = [v4 objectForKey:@"LPEMModeOverride"];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    unsigned int v6 = [v5 unsignedShortValue];
    int v7 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LPEM mode override: %d", buf, 8u);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  *(_WORD *)(a2 + 20) = v6;
  unint64_t v8 = a1[1] - *a1;
  if (v8 <= 1)
  {
    if (v8 == 1)
    {
      if (**a1 == 5) {
        unsigned int v9 = 1;
      }
      else {
        unsigned int v9 = 2;
      }
    }
    else
    {
      unsigned int v9 = 2;
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  sub_1001806F8(v9, (uint64_t)v19);
  *(unsigned char *)(a2 + 22) = sub_100189268((uint64_t)v19);
  *(unsigned char *)(a2 + 23) = sub_100189270((uint64_t)v19);
  char v10 = sub_100189278((uint64_t)v19);
  *(unsigned char *)(a2 + 25) = 0;
  *(unsigned char *)(a2 + 24) = v10;
  unsigned int v12 = *a1;
  unsigned __int8 v11 = a1[1];
  while (v12 != v11)
    sub_1003A8CA4((unsigned char *)(a2 + 25), *v12++);
  uint64_t v13 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v14 = *(unsigned __int16 *)(a2 + 20);
    int v15 = *(unsigned __int8 *)(a2 + 22);
    int v16 = *(unsigned __int8 *)(a2 + 23);
    int v17 = *(unsigned __int8 *)(a2 + 24);
    int v18 = *(unsigned __int8 *)(a2 + 25);
    *(_DWORD *)buf = 67110144;
    unsigned int v21 = v14;
    __int16 v22 = 1024;
    int v23 = v15;
    __int16 v24 = 1024;
    int v25 = v16;
    __int16 v26 = 1024;
    int v27 = v17;
    __int16 v28 = 1024;
    int v29 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Built LPEM enable packet: {\n  mode: %d\n, tx_ant_mask: %d\n, rx_ant_mask: %d\n, rx_sync_search_ant_mask: %d\n, rf_channel_bitmask: %d\n}", buf, 0x20u);
  }
}

void sub_100194F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100194FB0(unsigned int a1, unsigned int a2, uint64_t a3)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100415790();
  }
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_1004156F4();
    }
    char v10 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      int v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisor"
            "PacketBuilder.mm";
      __int16 v16 = 1024;
      *(_DWORD *)int v17 = 511;
      *(_WORD *)&v17[4] = 2080;
      *(void *)&v17[6] = "convertTime";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_100415728();
    }
    unsigned __int8 v11 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      int v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisor"
            "PacketBuilder.mm";
      __int16 v16 = 1024;
      *(_DWORD *)int v17 = 512;
      *(_WORD *)&v17[4] = 2080;
      *(void *)&v17[6] = "convertTime";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  if (a1 == a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_10041575C();
    }
    unsigned int v12 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      int v15 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisor"
            "PacketBuilder.mm";
      __int16 v16 = 1024;
      *(_DWORD *)int v17 = 513;
      *(_WORD *)&v17[4] = 2080;
      *(void *)&v17[6] = "convertTime";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  v13[0] = a1;
  v13[1] = a2;
  *(void *)&v13[2] = a3;
  unsigned int v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    if (a1 > 3) {
      int v7 = "Unspecified";
    }
    else {
      int v7 = (&off_100855C30)[(char)(a1 - 1)];
    }
    if (a2 > 3) {
      unint64_t v8 = "Unspecified";
    }
    else {
      unint64_t v8 = (&off_100855C30)[(char)(a2 - 1)];
    }
    *(_DWORD *)buf = 136315650;
    int v15 = v7;
    __int16 v16 = 2080;
    *(void *)int v17 = v8;
    *(_WORD *)&v17[8] = 2048;
    *(void *)&v17[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Built convert time command packet: {\n, timebaseFrom: %s\n, timebaseTo: %s\n, timeToConvertUsec: %llu\n}", buf, 0x20u);
  }
  return *(void *)v13;
}

uint64_t sub_1001952D8(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004157F8();
  }
  unsigned int v2 = a1 - 1;
  uint64_t v3 = qword_1008ABDE0;
  if ((a1 - 1) > 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_1004157C4();
    }
    unsigned int v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315650;
      unint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseSupervisorPacketBuilder.mm";
      __int16 v9 = 1024;
      int v10 = 543;
      __int16 v11 = 2080;
      unsigned int v12 = "deepSleepRequest";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", (uint8_t *)&v7, 0x1Cu);
    }
    abort();
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    if (v2 > 2) {
      char v4 = "";
    }
    else {
      char v4 = (&off_100855C48)[(char)v2];
    }
    int v7 = 136315138;
    unint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Built deep sleep request packet: {\n, request: %s\n}", (uint8_t *)&v7, 0xCu);
  }
  return a1;
}

id sub_100195468()
{
  if (qword_1008A34E0 != -1) {
    dispatch_once(&qword_1008A34E0, &stru_100855C60);
  }
  v0 = (void *)qword_1008A34D8;

  return v0;
}

void sub_1001954BC(id a1)
{
  uint64_t v1 = sub_100195638((uint64_t)&OBJC_PROTOCOL___PRRangingServerProtocol);
  unsigned int v2 = (void *)qword_1008A34D8;
  qword_1008A34D8 = v1;

  id v3 = objc_alloc((Class)NSSet);
  uint64_t v4 = objc_opt_class();
  id v10 = [v3 initWithObjects:v4, objc_opt_class(), 0];
  id v5 = objc_alloc((Class)NSSet);
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  id v9 = [v5 initWithObjects:v6, v7, v8, objc_opt_class(), 0];
  [(id)qword_1008A34D8 setClasses:v10 forSelector:"configureForP2PRanging:options:reply:" argumentIndex:0 ofReply:0];
  [(id)qword_1008A34D8 setClasses:v9 forSelector:"configureForP2PRanging:options:reply:" argumentIndex:1 ofReply:0];
  [(id)qword_1008A34D8 setClasses:v10 forSelector:"startP2PRanging:reply:" argumentIndex:0 ofReply:0];
  [(id)qword_1008A34D8 setClasses:v10 forSelector:"stopP2PRanging:reply:" argumentIndex:0 ofReply:0];
}

id sub_100195638(uint64_t a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:a1];
  id v2 = objc_alloc((Class)NSSet);
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  id v5 = [v2 initWithObjects:v3, v4, objc_opt_class(), 0];
  [v1 setClasses:v5 forSelector:"connectWithClientInfo:" argumentIndex:0 ofReply:0];

  return v1;
}

id sub_100195704()
{
  return sub_100195710((uint64_t)&OBJC_PROTOCOL___PRRangingClientProtocol);
}

id sub_100195710(uint64_t a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:a1];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, objc_opt_class(), 0);
  id v4 = objc_alloc((Class)NSSet);
  uint64_t v5 = objc_opt_class();
  id v6 = [v4 initWithObjects:v5, objc_opt_class(), 0];
  [v1 setClasses:v3 forSelector:"didReceiveNewSolutions:" argumentIndex:0 ofReply:0];
  [v1 setClass:objc_opt_class() forSelector:"didFailWithError:" argumentIndex:0 ofReply:0];
  [v1 setClasses:v6 forSelector:"remoteDevice:didChangeState:" argumentIndex:0 ofReply:0];

  return v1;
}

id sub_100195848()
{
  v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___PRBTRangingClientProtocol];
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  id v4 = [v1 initWithObjects:v2, v3, objc_opt_class(), 0];
  id v5 = objc_alloc((Class)NSSet);
  uint64_t v6 = objc_opt_class();
  id v7 = [v5 initWithObjects:v6, objc_opt_class(), 0];
  id v8 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v0 setClass:objc_opt_class() forSelector:"didFailWithError:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v4 forSelector:"didFetchTxPower:fromDevice:withError:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v7 forSelector:"didConnectDevice:error:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v7 forSelector:"didStartRangingOnDevice:withError:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v7 forSelector:"didStopOwnerRangingOnDevice:withError:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v8 forSelector:"didReceiveNewBTRSSI:" argumentIndex:0 ofReply:0];

  return v0;
}

id sub_100195A24()
{
  v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___PRDiagnosticsServerProtocol];
  [v0 setClass:objc_opt_class() forSelector:"sendHelloWithTimeout:reply:" argumentIndex:0 ofReply:1];
  [v0 setClass:objc_opt_class() forSelector:"getChipInfoSync:reply:" argumentIndex:0 ofReply:1];
  [v0 setClass:objc_opt_class() forSelector:"getPowerStatsWithTimeout:reply:" argumentIndex:0 ofReply:1];
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v1, v2, v3, v4, objc_opt_class(), 0);
  [v0 setClasses:v5 forSelector:"getPreflightInfo:" argumentIndex:0 ofReply:1];
  [v0 setClasses:v5 forSelector:"getChipPublicKey:" argumentIndex:0 ofReply:1];
  [v0 setClasses:v5 forSelector:"setRoseGlobalConfigParams:reply:" argumentIndex:0 ofReply:0];

  return v0;
}

id sub_100195BCC()
{
  v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___PRProtobufServerProtocol];
  [v0 setClass:objc_opt_class() forSelector:"startStreamingProtobufDataForClientId:reply:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"stopStreamingProtobufDataForClientId:reply:" argumentIndex:0 ofReply:0];

  return v0;
}

id sub_100195C64()
{
  v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___PRProtobufClientProtocol];
  [v0 setClass:objc_opt_class() forSelector:"consumeProtobufBytes:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"getUniqueClientIdentifier:" argumentIndex:0 ofReply:1];

  return v0;
}

id sub_100195D00()
{
  v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___PRRegulatoryAssistanceEndpointProtocol];
  [v0 setClass:objc_opt_class() forSelector:"injectIsoCode:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"prepareForRegulatoryAssistance:" argumentIndex:0 ofReply:1];

  return v0;
}

id sub_100195D9C()
{
  v0 = sub_100195638((uint64_t)&OBJC_PROTOCOL___PRCompanionRangingServerProtocol);
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  id v3 = [v1 initWithObjects:v2, objc_opt_class(), 0];
  id v4 = objc_alloc((Class)NSSet);
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  id v8 = [v4 initWithObjects:v5, v6, v7, objc_opt_class(), 0];
  [v0 setClasses:v3 forSelector:"configureForCompanionRanging:options:reply:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v8 forSelector:"configureForCompanionRanging:options:reply:" argumentIndex:1 ofReply:0];
  [v0 setClasses:v3 forSelector:"startCompanionRanging:options:reply:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v8 forSelector:"startCompanionRanging:options:reply:" argumentIndex:1 ofReply:0];
  [v0 setClasses:v3 forSelector:"stopCompanionRanging:reply:" argumentIndex:0 ofReply:0];

  return v0;
}

id sub_100195F2C()
{
  v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___PRBTRangingServerProtocol];
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  id v3 = [v1 initWithObjects:v2, objc_opt_class(), 0];
  id v4 = objc_alloc((Class)NSSet);
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  id v7 = [v4 initWithObjects:v5, v6, objc_opt_class(), 0];
  [v0 setClasses:v7 forSelector:"fetchTxPower:isUT:reply:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v3 forSelector:"startUTRanging:reply:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v3 forSelector:"stopUTRanging:reply:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v3 forSelector:"startOwnerRanging:reply:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v3 forSelector:"stopOwnerRanging:reply:" argumentIndex:0 ofReply:0];

  return v0;
}

id sub_1001960AC()
{
  v0 = sub_100195638((uint64_t)&OBJC_PROTOCOL___PRBeaconRangingProtocol);
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  id v5 = [v1 initWithObjects:v2, v3, v4, objc_opt_class(), 0];
  [v0 setClasses:v5 forSelector:"startBeaconing:options:reply:" argumentIndex:1 ofReply:0];
  uint64_t v6 = objc_opt_class();
  id v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(), 0);
  [v0 setClasses:v7 forSelector:"pushBeaconAllowlist:reply:" argumentIndex:0 ofReply:0];

  return v0;
}

uint64_t sub_100196854(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1 + 16;
  *(void *)(a1 + 24) = a1 + 16;
  *(void *)(a1 + 32) = 0;
  sub_100004950((void *)(a1 + 40), "prglobaltile.bin");
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  v5[0] = off_100855C90;
  v5[1] = a1;
  v5[3] = v5;
  sub_1002210E0(a1 + 88, v3, v5);
  sub_100196E1C(v5);

  return a1;
}

void sub_10019693C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100196E1C((uint64_t *)va);
  if (*(char *)(v3 + 87) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v3 + 63) < 0) {
    operator delete(*v5);
  }
  sub_100196CD8(v4);

  _Unwind_Resume(a1);
}

void *sub_100196990(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10041582C();
  }
  *(unsigned char *)a1 = 0;
  return sub_100196CD8((void *)(a1 + 16));
}

uint64_t sub_1001969E4(uint64_t a1, double a2, long double a3)
{
  __int16 v31 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v36 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unint64_t v32 = 0;
  __int16 v35 = 0;
  long long v39 = xmmword_1004B5930;
  id v5 = (char *)(a1 + 87);
  uint64_t v6 = (char **)(a1 + 64);
  id v7 = (char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    id v7 = *v6;
  }
  sub_100004950(__p, v7);
  BOOL v8 = sub_1002BA6A0((const char *)__p);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  id v9 = qword_1008ABDE0;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
  if (!v8)
  {
    if (v10) {
      sub_100415D58(v9);
    }
    goto LABEL_29;
  }
  if (v10) {
    sub_100415CE0(v5, v6, v9);
  }
  __int16 v11 = (const char *)v6;
  if (*v5 < 0) {
    __int16 v11 = *v6;
  }
  unsigned int v12 = fopen(v11, "rb");
  uint64_t v13 = v12;
  if (!v12)
  {
    int v20 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100415B94(v5, v6, v20);
    }
    goto LABEL_29;
  }
  sub_100221E08(v12, (uint64_t)&v31);
  if ((v14 & 1) == 0 || (int v15 = v40, (double)v40 > a2) || (double)v41 <= a2)
  {
LABEL_28:
    fclose(v13);
LABEL_29:
    uint64_t v19 = 0;
    goto LABEL_30;
  }
  double v16 = fmod(a3, 360.0);
  if (v16 < 0.0) {
    double v16 = v16 + 360.0;
  }
  unsigned int v17 = vcvtmd_s64_f64(v16 * 10.0);
  uint64_t v18 = ((int)(v17 + 3600 * ((int)(floor(a2 * 10.0) + 900.0) - 10 * v15 - 900)) / 8);
  LOBYTE(__p[0]) = 0;
  if (v18 >= DWORD2(v39))
  {
    unsigned int v21 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100415C74(v18, v21, v22, v23, v24, v25, v26, v27);
    }
    goto LABEL_28;
  }
  fseek(v13, (int)v18, 1);
  if (fread(__p, 1uLL, 1uLL, v13) != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100415C40();
    }
    goto LABEL_28;
  }
  fclose(v13);
  uint64_t v19 = (LOBYTE(__p[0]) >> (v17 & 7)) & 1;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100415C0C();
  }
LABEL_30:
  if (SHIBYTE(v38) < 0) {
    operator delete(v36);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
  return v19;
}

void sub_100196CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_100196CD0(uint64_t a1)
{
}

void *sub_100196CD8(void *result)
{
  if (result[2])
  {
    id v1 = result;
    BOOL result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        BOOL result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_100196D40()
{
}

void *sub_100196D54(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_100855C90;
  result[1] = v3;
  return result;
}

uint64_t sub_100196D9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100855C90;
  a2[1] = v2;
  return result;
}

void *sub_100196DC8(uint64_t a1)
{
  return sub_100196990(*(void *)(a1 + 8));
}

uint64_t sub_100196DD0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100196E10()
{
}

void *sub_100196E1C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100196EB8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void sub_100196ED4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_100196EF4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0xCu);
}

void *sub_100196F14@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855EF8[a1]);
}

void *sub_100196F28@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855F50[a1]);
}

void *sub_100196F3C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855F98[a1]);
}

void *sub_100196F50@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100855FB8[a1]);
}

void sub_100197000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100197070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001974F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_100197574(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained didDiscoverSample:v3];
}

void sub_1001975D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100197708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019784C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100197910(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) _initPrivate];
  uint64_t v2 = (void *)qword_1008A34E8;
  qword_1008A34E8 = (uint64_t)v1;
}

void sub_1001979AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100197BA8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_100197BD8(uint64_t a1)
{
  uint64_t v2 = mach_continuous_time();
  double v3 = sub_100006A9C(v2);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        if (objc_msgSend(*(id *)(a1 + 40), "isInteresetedInSample:", v8, (void)v13)) {
          [*(id *)(a1 + 40) consumeBluetoothSample:v8];
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
    }
    while (v5);
  }

  uint64_t v9 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [*(id *)(a1 + 32) count];
    uint64_t v11 = mach_continuous_time();
    double v12 = sub_100006A9C(v11);
    *(_DWORD *)buf = 134218240;
    id v18 = v10;
    __int16 v19 = 2048;
    double v20 = v12 - v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#btsampledistributor Read %zu samples from cache in %f seconds", buf, 0x16u);
  }
}

void sub_100197D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100197DFC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100197F58(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_1001980C0(_Unwind_Exception *a1)
{
  id v4 = v2;
  objc_destroyWeak(v4);
  objc_destroyWeak((id *)(v3 - 40));
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001980F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(double *)(a1 + 40);
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    double v7 = v4 - v5;
    uint64_t v8 = qword_1008ABDE0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100415EBC();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134217984;
        double v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#btsampledistributor BT Leeching with max rate scanner activation succeeded [%0.6f s]", (uint8_t *)&v9, 0xCu);
      }
      atomic_store(1u, WeakRetained + 96);
    }
  }
}

void sub_10019820C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001982A4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001983E0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_100198860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_100198C8C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100198CC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(double *)(a1 + 40);
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    double v7 = v4 - v5;
    uint64_t v8 = qword_1008ABDE0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100415FE8();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134217984;
        double v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#btsampledistributor CBDiscovery activation succeeded [%0.6f s]", (uint8_t *)&v9, 0xCu);
      }
      atomic_store(1u, WeakRetained + 72);
    }
  }
}

void sub_100198DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(double *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    double v7 = v4 - v5;
    uint64_t v8 = qword_1008ABDE0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100416050();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 134217984;
      double v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#btsampledistributor CBDiscovery Screen Off activation succeeded [%0.6f s]", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_100198EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100198F14(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(double *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    double v7 = v4 - v5;
    uint64_t v8 = qword_1008ABDE0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_1004160B8();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 134217984;
      double v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#btsampledistributor CBDiscovery AirPods Leech activation succeeded [%0.6f s]", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_10019901C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199238(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_100199270(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained didDiscoverDevice:v3];
}

void sub_1001992CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001992E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    id v18 = [v3 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#btsampledistributor deviceBufferedHandler devices: %lu", buf, 0xCu);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v13;
    uint64_t v8 = (id *)(a1 + 32);
    do
    {
      int v9 = 0;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * (void)v9);
        id WeakRetained = objc_loadWeakRetained(v8);
        [WeakRetained didDiscoverDevice:v10];

        int v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

void sub_100199464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001994A0(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100416120();
  }
}

void sub_1001994E4(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100416154();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleCBDiscoveryInterrupted];
}

void sub_100199540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199550(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100416188();
  }
}

void sub_1001996D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100199700(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004161F0();
  }
}

void sub_100199744(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100416224();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleCBDiscoveryInterrupted];
}

void sub_1001997A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001997B0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100416258();
  }
}

void sub_100199A1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_100199A74(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained didDiscoverDevice:v3];
}

void sub_100199AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100199AE8(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004162C0();
  }
}

void sub_100199B2C(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004162F4();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleCBDiscoveryInterrupted];
}

void sub_100199B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100199B98(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100416328();
  }
}

void sub_100199BEC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleCBDiscoveryStateChanged];
}

void sub_100199C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100199C48(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleCBDiscoverySystemOverride];
}

void sub_100199C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100199F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

id sub_100199F68(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isInteresetedInSample:*(void *)(a1 + 40)];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    return [v3 consumeBluetoothSample:v4];
  }
  return result;
}

void sub_10019A1C8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_10019A21C(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained didDiscoverDevice:v5];
  }
}

void sub_10019A280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019A298(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004162C0();
  }
}

void sub_10019A2DC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004162F4();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained handleCBDiscoveryInterrupted];
  }
}

void sub_10019A340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019A350(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100416328();
  }
}

void sub_10019A3A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    [WeakRetained handleCBDiscoveryStateChanged];
  }
}

void sub_10019A3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019A408(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    [WeakRetained handleCBDiscoverySystemOverride];
  }
}

void sub_10019A458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10019A990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }

  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

id sub_10019AAF4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isInterestedInSamplesForDevice:*(void *)(a1 + 40)];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
    return [v3 consumeBluetoothSample:v4];
  }
  return result;
}

void sub_10019ACC4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_10019ACEC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sampleProviderServiceInterrupted];
}

void sub_10019AEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

id sub_10019AF14(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sampleProviderDidChangeState:*(void *)(a1 + 40)];
}

void sub_10019B09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10019B164(char *a1, std::string::size_type a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    if (a1[23] >= 0) {
      std::string::size_type v5 = (std::string::size_type)a1;
    }
    else {
      std::string::size_type v5 = *(void *)a1;
    }
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v6 = a2;
    }
    else {
      std::string::size_type v6 = *(void *)a2;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Logger::tooManyLogFilesToEnumerate: dir %s prefix %s", (uint8_t *)&buf, 0x16u);
  }
  sub_10019C9FC(&buf, a1);
  std::__fs::filesystem::directory_iterator::directory_iterator(&v27, (const std::__fs::filesystem::path *)&buf, 0, skip_permission_denied);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  ptr = v27.__imp_.__ptr_;
  cntrl = v27.__imp_.__cntrl_;
  if (v27.__imp_.__cntrl_)
  {
    atomic_fetch_add_explicit(&v27.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
    int v9 = v27.__imp_.__cntrl_;
    v26.__imp_.__ptr_ = ptr;
    v26.__imp_.__cntrl_ = cntrl;
    if (v27.__imp_.__cntrl_)
    {
      atomic_fetch_add_explicit(&v27.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10001A970(v9);
    }
  }
  else
  {
    v26.__imp_.__ptr_ = v27.__imp_.__ptr_;
    v26.__imp_.__cntrl_ = 0;
  }
  std::string::size_type v10 = 0;
  std::string::size_type v11 = 0;
  while (1)
  {
    long long v12 = v26.__imp_.__ptr_;
    if (!v26.__imp_.__ptr_) {
      break;
    }
    long long v13 = std::__fs::filesystem::directory_iterator::__dereference(&v26);
    std::__fs::filesystem::__status(&v13->__p_, 0);
    if (buf.__r_.__value_.__s.__data_[0] != 1) {
      goto LABEL_52;
    }
    sub_10019B580(&v13->__p_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100002DE4(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string buf = __p;
    }
    int v14 = *(char *)(a2 + 23);
    if (v14 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(a2 + 8);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v15 == -1) {
LABEL_61:
      }
        sub_10019CC84();
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if (buf.__r_.__value_.__l.__size_ >= v15) {
        size_t size = v15;
      }
      else {
        size_t size = buf.__r_.__value_.__l.__size_;
      }
    }
    else
    {
      if (v15 == -1) {
        goto LABEL_61;
      }
      if (HIBYTE(buf.__r_.__value_.__r.__words[2]) >= v15) {
        size_t size = v15;
      }
      else {
        size_t size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      p_std::string buf = &buf;
    }
    if (v14 >= 0) {
      id v18 = (const void *)a2;
    }
    else {
      id v18 = *(const void **)a2;
    }
    if (!memcmp(p_buf, v18, size) && size == v15 && ++v10 >= 0x1F4)
    {
      uint64_t v19 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v10;
        double v20 = v19;
        unsigned int v21 = "Logger::tooManyLogFilesToEnumerate: TRUE - found %zu matching files (there may be more than this!)";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (++v11 >= 0x3E8)
    {
      uint64_t v22 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v11;
        double v20 = v22;
        unsigned int v21 = "Logger::tooManyLogFilesToEnumerate: TRUE - found %zu files (there may be more than this!)";
LABEL_46:
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&__p, 0xCu);
      }
LABEL_47:
      char v23 = 0;
      goto LABEL_49;
    }
    char v23 = 1;
LABEL_49:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if ((v23 & 1) == 0) {
      break;
    }
LABEL_52:
    std::__fs::filesystem::directory_iterator::__increment(&v26, 0);
  }
  if (v26.__imp_.__cntrl_) {
    sub_10001A970(v26.__imp_.__cntrl_);
  }
  if (v27.__imp_.__cntrl_) {
    sub_10001A970(v27.__imp_.__cntrl_);
  }
  if (!v12)
  {
    uint64_t v24 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Logger::tooManyLogFilesToEnumerate: FALSE - found %zu matches out of %zu files", (uint8_t *)&buf, 0x16u);
    }
  }
  return v12 != 0;
}

void sub_10019B508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10019B580@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_10000B220();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void sub_10019B644(uint64_t a1, char *a2, std::string::size_type a3)
{
  std::basic_string_view<_CharT, _Traits>::size_type v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0) {
      std::string::size_type v7 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v7 = *(void *)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      std::string::size_type v8 = a3;
    }
    else {
      std::string::size_type v8 = *(void *)a3;
    }
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v7;
    WORD2(buf.__pn_.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 6) = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Logger::deleteFilesWithoutEnumerating: dir %s prefix %s", (uint8_t *)&buf, 0x16u);
  }
  sub_10019C9FC(&buf.__pn_, a2);
  std::__fs::filesystem::directory_iterator::directory_iterator(&v27, &buf, 0, skip_permission_denied);
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  }
  ptr = v27.__imp_.__ptr_;
  cntrl = v27.__imp_.__cntrl_;
  if (v27.__imp_.__cntrl_)
  {
    atomic_fetch_add_explicit(&v27.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v11 = v27.__imp_.__cntrl_;
    v26.__imp_.__ptr_ = ptr;
    v26.__imp_.__cntrl_ = cntrl;
    if (v27.__imp_.__cntrl_)
    {
      atomic_fetch_add_explicit(&v27.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10001A970(v11);
    }
  }
  else
  {
    v26.__imp_.__ptr_ = v27.__imp_.__ptr_;
    v26.__imp_.__cntrl_ = 0;
  }
  std::string::size_type v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = a1 + 56;
  while (v26.__imp_.__ptr_)
  {
    std::string::size_type v15 = std::__fs::filesystem::directory_iterator::__dereference(&v26);
    std::__fs::filesystem::__status(&v15->__p_, 0);
    if (buf.__pn_.__r_.__value_.__s.__data_[0] != 1) {
      goto LABEL_60;
    }
    sub_10019B580(&v15->__p_, (uint64_t)&__p);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100002DE4(&buf, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::__fs::filesystem::directory_entry::_Path buf = __p;
    }
    if (sub_10019CC9C(v14, (const void **)&buf.__pn_.__r_.__value_.__l.__data_))
    {
      long long v16 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        p_std::__fs::filesystem::directory_entry::_Path buf = (std::string *)&buf;
        if ((buf.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_std::__fs::filesystem::directory_entry::_Path buf = (std::string *)buf.__pn_.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p.__pn_.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: skipping %s, which is in the FilesToKeep list", (uint8_t *)&__p, 0xCu);
      }
      BOOL v18 = 0;
      int v19 = 3;
    }
    else
    {
      int v20 = *(char *)(a3 + 23);
      if (v20 >= 0) {
        std::string::size_type v21 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v21 = *(void *)(a3 + 8);
      }
      if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v21 == -1) {
LABEL_68:
        }
          sub_10019CC84();
        char v23 = (std::string *)buf.__pn_.__r_.__value_.__r.__words[0];
        if (buf.__pn_.__r_.__value_.__l.__size_ >= v21) {
          size_t size = v21;
        }
        else {
          size_t size = buf.__pn_.__r_.__value_.__l.__size_;
        }
      }
      else
      {
        if (v21 == -1) {
          goto LABEL_68;
        }
        if (HIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) >= v21) {
          size_t size = v21;
        }
        else {
          size_t size = HIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]);
        }
        char v23 = (std::string *)&buf;
      }
      if (v20 >= 0) {
        uint64_t v24 = (const void *)a3;
      }
      else {
        uint64_t v24 = *(const void **)a3;
      }
      if (memcmp(v23, v24, size) || size != v21) {
        goto LABEL_53;
      }
      if (SHIBYTE(v15->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        sub_100002DE4(&__p, v15->__p_.__pn_.__r_.__value_.__l.__data_, v15->__p_.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        __p.__pn_ = (std::__fs::filesystem::path::string_type)v15->__p_;
      }
      sub_10019BAC0((const char *)&__p);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      }
      if (++v12 > 0x1F3)
      {
        BOOL v18 = 0;
        int v19 = 2;
      }
      else
      {
LABEL_53:
        BOOL v18 = ++v13 < 0x3E8;
        int v19 = 2 * (v13 > 0x3E7);
      }
    }
    if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__pn_.__r_.__value_.__l.__data_);
      if (v18) {
        goto LABEL_60;
      }
    }
    else if (v18)
    {
      goto LABEL_60;
    }
    if (v19 != 3 && v19) {
      break;
    }
LABEL_60:
    std::__fs::filesystem::directory_iterator::__increment(&v26, 0);
  }
  if (v26.__imp_.__cntrl_) {
    sub_10001A970(v26.__imp_.__cntrl_);
  }
  if (v27.__imp_.__cntrl_) {
    sub_10001A970(v27.__imp_.__cntrl_);
  }
  uint64_t v25 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Logger::deleteFilesWithoutEnumerating: deleted %zu logs (there may be more than this!)", (uint8_t *)&buf, 0xCu);
  }
}

void sub_10019BA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a12) {
    sub_10001A970(a12);
  }
  if (a14) {
    sub_10001A970(a14);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10019BAC0(const char *a1)
{
  id v1 = (uint64_t *)a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v2 = unlink(a1);
  if (v2)
  {
    std::__fs::filesystem::path::__string_view v3 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = *((char *)v1 + 23);
      std::basic_string_view<_CharT, _Traits>::size_type v6 = (uint64_t *)*v1;
      std::string::size_type v7 = __error();
      if (v5 >= 0) {
        std::string::size_type v8 = v1;
      }
      else {
        std::string::size_type v8 = v6;
      }
      int v9 = *v7;
      int v10 = 136315394;
      std::string::size_type v11 = v8;
      __int16 v12 = 1024;
      int v13 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "deleteFile: could not unlink %s, errno %d", (uint8_t *)&v10, 0x12u);
    }
  }
  return v2 == 0;
}

void sub_10019BBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019BBE0(uint64_t *a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v34 = +[NSFileManager defaultManager];
  if (*((char *)a1 + 23) >= 0) {
    std::basic_string_view<_CharT, _Traits>::size_type v6 = a1;
  }
  else {
    std::basic_string_view<_CharT, _Traits>::size_type v6 = (uint64_t *)*a1;
  }
  std::string::size_type v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6, v34);
  std::string::size_type v8 = [v35 contentsOfDirectoryAtPath:v7 error:0];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  int v9 = [v8 reverseObjectEnumerator];
  id v10 = [v9 countByEnumeratingWithState:&v44 objects:v49 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v45;
    unint64_t v36 = v8;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v45 != v11) {
          objc_enumerationMutation(v9);
        }
        int v13 = (char *)[*(id *)(*((void *)&v44 + 1) + 8 * i) UTF8String];
        if (v13)
        {
          sub_100004950(&v39, v13);
          int v14 = *((char *)a2 + 23);
          if (v14 >= 0) {
            unint64_t v15 = *((unsigned __int8 *)a2 + 23);
          }
          else {
            unint64_t v15 = (unint64_t)a2[1];
          }
          unsigned __int8 v16 = v41;
          if ((char)v41 < 0)
          {
            if (v15 == -1) {
LABEL_52:
            }
              sub_10019CC84();
            BOOL v18 = v39;
            if (v40 >= v15) {
              size_t v17 = v15;
            }
            else {
              size_t v17 = v40;
            }
          }
          else
          {
            if (v15 == -1) {
              goto LABEL_52;
            }
            if (v41 >= v15) {
              size_t v17 = v15;
            }
            else {
              size_t v17 = v41;
            }
            BOOL v18 = &v39;
          }
          if (v14 >= 0) {
            int v20 = a2;
          }
          else {
            int v20 = *a2;
          }
          BOOL v21 = !memcmp(v18, v20, v17) && v17 == v15;
          std::string::size_type v8 = v36;
          if (v21)
          {
            sub_100004950(__p, v13);
            unint64_t v23 = a3[1];
            unint64_t v22 = a3[2];
            if (v23 >= v22)
            {
              unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a3) >> 3);
              unint64_t v26 = v25 + 1;
              if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_1000267C4();
              }
              unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a3) >> 3);
              if (2 * v27 > v26) {
                unint64_t v26 = 2 * v27;
              }
              if (v27 >= 0x555555555555555) {
                unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v28 = v26;
              }
              v48[4] = a3 + 2;
              if (v28) {
                int v29 = (char *)sub_1000267DC((uint64_t)(a3 + 2), v28);
              }
              else {
                int v29 = 0;
              }
              char v30 = &v29[24 * v25];
              v48[0] = v29;
              v48[1] = v30;
              v48[3] = &v29[24 * v28];
              long long v31 = *(_OWORD *)__p;
              *((void *)v30 + 2) = v38;
              *(_OWORD *)char v30 = v31;
              __p[1] = 0;
              uint64_t v38 = 0;
              __p[0] = 0;
              v48[2] = v30 + 24;
              sub_10019CD1C(a3, v48);
              uint64_t v32 = a3[1];
              sub_10019CEB4((uint64_t)v48);
              int v33 = SHIBYTE(v38);
              a3[1] = v32;
              if (v33 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v24 = *(_OWORD *)__p;
              *(void *)(v23 + 16) = v38;
              *(_OWORD *)unint64_t v23 = v24;
              a3[1] = v23 + 24;
            }
            unsigned __int8 v16 = v41;
          }
          if ((v16 & 0x80) != 0) {
            operator delete(v39);
          }
        }
        else
        {
          int v19 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
            sub_1004163F8(&buf, v43, v19);
          }
        }
      }
      id v10 = [v9 countByEnumeratingWithState:&v44 objects:v49 count:16];
    }
    while (v10);
  }
}

void sub_10019BF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_10017D7B4((void ***)&a19);
  _Unwind_Resume(a1);
}

BOOL sub_10019BFE4(const char *a1, timespec *a2, off_t *a3)
{
  int v5 = (uint64_t *)a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v6 = stat(a1, &v13);
  if (v6)
  {
    std::string::size_type v7 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = *((char *)v5 + 23);
      id v10 = (uint64_t *)*v5;
      int v11 = *__error();
      if (v9 >= 0) {
        __int16 v12 = v5;
      }
      else {
        __int16 v12 = v10;
      }
      *(_DWORD *)uint8_t buf = 136315394;
      unint64_t v15 = v12;
      __int16 v16 = 1024;
      int v17 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "getFileModificationTimeAndSize: could not stat %s, errno %d", buf, 0x12u);
    }
  }
  else
  {
    *a2 = v13.st_mtimespec;
    *a3 = v13.st_size;
  }
  return v6 == 0;
}

void sub_10019C110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019C128(uint64_t a1)
{
  int v2 = (char *)(a1 + 31);
  if (*(char *)(a1 + 31) < 0)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_13:
    int v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100416438(v6);
    }
    return;
  }
  if (!*(unsigned char *)(a1 + 31)) {
    goto LABEL_13;
  }
LABEL_3:
  std::__fs::filesystem::path::__string_view v3 = (const void **)(a1 + 8);
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  uint64_t v4 = (const std::__fs::filesystem::path *)sub_10019C9FC(&buf, v2 - 23);
  std::__fs::filesystem::__status(v4, &__ec);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((_BYTE)v52 && v52 != 255 && v52 == 2)
  {
    if (sub_10019B164(v2 - 23, a1 + 32))
    {
      sub_10019B644(a1, v2 - 23, a1 + 32);
      return;
    }
    if (clock_gettime(_CLOCK_REALTIME, &__tp))
    {
      std::string::size_type v7 = (id)qword_1008ABDE0;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v8 = __error();
        sub_10041647C(v8, (uint8_t *)&buf, v7);
      }

      return;
    }
    if (__tp.tv_sec > 1209600)
    {
      __darwin_time_t v43 = __tp.tv_sec - 1209600;
    }
    else
    {
      int v9 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = __tp.tv_sec;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: timespecNow too small to use: %ld", (uint8_t *)&buf, 0xCu);
      }
      __darwin_time_t v43 = 0;
    }
    sub_10019BBE0((uint64_t *)(v2 - 23), (const void **)(a1 + 32), &v49);
    unint64_t v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v50[-v49] >> 3));
    if (v50 == (char *)v49) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    sub_10019CF44(v49, v50, (uint64_t)__p, v11, 1);
    off_t v47 = 0;
    uint64_t v12 = v49;
    long long v44 = v50;
    if ((char *)v49 == v50)
    {
LABEL_87:
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
      sub_10017D7B4((void ***)&buf);
      return;
    }
    int v13 = 0;
    uint64_t v42 = 0;
    while (sub_10019CC9C(a1 + 56, (const void **)v12))
    {
      int v14 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v15 = (const std::string::value_type *)v12;
        if (*(char *)(v12 + 23) < 0) {
          unint64_t v15 = *(const std::string::value_type **)v12;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: skipping %s, which is in the FilesToKeep list", (uint8_t *)&buf, 0xCu);
      }
LABEL_86:
      v12 += 24;
      if ((char *)v12 == v44) {
        goto LABEL_87;
      }
    }
    if (*(char *)(a1 + 31) >= 0) {
      size_t v16 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      size_t v16 = *(void *)(a1 + 16);
    }
    sub_100158FEC((uint64_t)&buf, v16 + 1);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if (v16)
    {
      if (*v2 >= 0) {
        BOOL v18 = v2 - 23;
      }
      else {
        BOOL v18 = (char *)*v3;
      }
      memmove(p_buf, v18, v16);
    }
    *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v16) = 47;
    int v19 = *(char *)(v12 + 23);
    if (v19 >= 0) {
      int v20 = (const std::string::value_type *)v12;
    }
    else {
      int v20 = *(const std::string::value_type **)v12;
    }
    if (v19 >= 0) {
      std::string::size_type v21 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      std::string::size_type v21 = *(void *)(v12 + 8);
    }
    unint64_t v22 = std::string::append(&buf, v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    int64_t v46 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::__fs::filesystem::directory_entry::_Path __p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (sub_10019BFE4((const char *)__p, &v48, &v47))
    {
      int v24 = v13;
      off_t v25 = v47;
      uint64_t v26 = v47 + v42;
      unint64_t v27 = qword_1008ABDE0;
      BOOL v28 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
      __darwin_time_t tv_sec = v48.tv_sec;
      if (v28)
      {
        char v30 = __p;
        if (v46 < 0) {
          char v30 = (void **)__p[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v48.tv_sec;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
        __darwin_time_t v55 = v43;
        __int16 v56 = 2048;
        off_t v57 = v25;
        __int16 v58 = 2048;
        uint64_t v59 = v26;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: looking at %s, modTime %ld floorTime %ld size %lld new total %lld", (uint8_t *)&buf, 0x34u);
      }
      int v31 = v24 + 1;
      if (tv_sec >= v43)
      {
        if (v24 < 250)
        {
          if (v25)
          {
            uint64_t v37 = v26;
            if (v26 >= 314572801 && sub_10019BAC0((const char *)__p))
            {
              int v13 = v31;
              uint64_t v38 = qword_1008ABDE0;
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
              {
                long long v39 = __p;
                if (v46 < 0) {
                  long long v39 = (void **)__p[0];
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v39;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: deleted due to size: %s", (uint8_t *)&buf, 0xCu);
              }
              uint64_t v42 = v37;
            }
            else
            {
              uint64_t v42 = v26;
              int v13 = v31;
            }
            goto LABEL_84;
          }
          int v32 = v24 + 1;
          sub_10019BAC0((const char *)__p);
          size_t v40 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            unsigned __int8 v41 = __p;
            if (v46 < 0) {
              unsigned __int8 v41 = (void **)__p[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: deleted due to zero size: %s", (uint8_t *)&buf, 0xCu);
          }
        }
        else
        {
          int v32 = v24 + 1;
          sub_10019BAC0((const char *)__p);
          __int16 v35 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v36 = __p;
            if (v46 < 0) {
              unint64_t v36 = (void **)__p[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            int v13 = v32;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v32;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: deleted due to num files: %s num files %d", (uint8_t *)&buf, 0x12u);
            goto LABEL_84;
          }
        }
      }
      else
      {
        int v32 = v24 + 1;
        sub_10019BAC0((const char *)__p);
        int v33 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v34 = __p;
          if (v46 < 0) {
            uint64_t v34 = (void **)__p[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = tv_sec;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          __darwin_time_t v55 = v43;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "pruneLogFiles: deleted due to age %s fileTime %ld targetTime %ld", (uint8_t *)&buf, 0x20u);
        }
      }
      int v13 = v32;
    }
LABEL_84:
    if (SHIBYTE(v46) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_86;
  }
  int v5 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004164C8(v2, v2 - 23, v5);
  }
}

void sub_10019C828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  *(void *)(v31 - 160) = &a31;
  sub_10017D7B4((void ***)(v31 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_10019C8A8(uint64_t a1)
{
  *(void *)a1 = off_100856040;
  sub_10019C998(a1 + 56, *(char **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_10019C910(uint64_t a1)
{
  *(void *)a1 = off_100856040;
  sub_10019C998(a1 + 56, *(char **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void sub_10019C998(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10019C998(a1, *(void *)a2);
    sub_10019C998(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

std::string *sub_10019C9FC(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  sub_10019CA64(a1, a2, &a2[v3]);
  return a1;
}

void sub_10019CA48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10019CA64(std::string *this, char *a2, char *a3)
{
  BOOL v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    unint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    int v14 = this;
    if ((v6 & 0x80) != 0) {
      int v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }
    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_10019CBDC(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_10019CBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10019CBDC(void *result, char *a2, char *a3, unint64_t a4)
{
  BOOL v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10000B220();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    BOOL v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)BOOL v4 = v10;
    BOOL v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)BOOL v4 = 0;
  return result;
}

void sub_10019CC84()
{
}

uint64_t sub_10019CC9C(uint64_t a1, const void **a2)
{
  int v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!sub_100007524(v4, a2, v2 + 4))
      {
        if (!sub_100007524(v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      int v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_10019CD1C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10019CD94((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10019CD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_10019CE34((uint64_t)v12);
  return a6;
}

uint64_t sub_10019CE34(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10019CE6C(a1);
  }
  return a1;
}

void sub_10019CE6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_10019CEB4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10019CEEC(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_10019CF44(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL sub_10019D36C(uint64_t a1, void *a2, const void **a3)
{
  int v3 = *((char *)a2 + 23);
  int v4 = *((char *)a3 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v5 = (size_t)a3[1];
  }
  if (v4 >= 0) {
    char v6 = a3;
  }
  else {
    char v6 = *a3;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = a2[1];
  }
  if (v3 < 0) {
    a2 = (void *)*a2;
  }
  if (v7 >= v5) {
    size_t v8 = v5;
  }
  else {
    size_t v8 = v7;
  }
  int v9 = memcmp(v6, a2, v8);
  if (v9) {
    return v9 < 0;
  }
  else {
    return v5 < v7;
  }
}

void sub_10019D3D8(uint64_t a1, void *a2, uint64_t a3)
{
  if ((void *)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    size_t v7 = (void *)(a1 + 24);
    if ((void *)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      long long v10 = (void *)a1;
      do
      {
        unint64_t v11 = (const void **)v10;
        long long v10 = v7;
        if (sub_10019D36C(a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          uint64_t v18 = v10[2];
          v10[1] = 0;
          _DWORD v10[2] = 0;
          void *v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_10019D36C(a3, &v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        size_t v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_10019D500(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    size_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        long long v10 = (const void **)v6;
        char v6 = v7;
        if (sub_10019D36C(a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = (void *)v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *char v6 = 0;
          unint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = sub_10019D36C(a3, &v16, (const void **)v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = (void **)(v11 + 6);
          if (v14 < 0) {
            operator delete(*v15);
          }
          *(_OWORD *)int v15 = v16;
          _OWORD v15[2] = v17;
        }
        size_t v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_10019D60C(const void **a1, const void **a2, void *a3, uint64_t a4)
{
  BOOL v8 = sub_10019D36C(a4, a2, a1);
  uint64_t result = sub_10019D36C(a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = (const void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_10019D36C(a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    std::string::size_type v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_10019D36C(a4, a3, a2)) {
      return 1;
    }
    unint64_t v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    int v24 = (const void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  long long v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = (const void *)a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_10019D758(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_10019D36C(a3, &v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!sub_10019D36C(a3, &v16, v6));
  }
  else
  {
    size_t v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = sub_10019D36C(a3, &v16, v7);
      size_t v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_10019D36C(a3, &v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!sub_10019D36C(a3, &v16, v6));
    do
      v4 -= 24;
    while (sub_10019D36C(a3, &v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

void *sub_10019D8EC(long long *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (sub_10019D36C(a3, (long long *)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!sub_10019D36C(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_10019D36C(a3, a2, (const void **)&v17));
  }
  BOOL v8 = (void *)((char *)a1 + v6);
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    do
    {
      long long v19 = *(_OWORD *)v8;
      long long v10 = v19;
      uint64_t v20 = v8[2];
      uint64_t v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)BOOL v8 = *(_OWORD *)v9;
      v8[2] = v12;
      v9[2] = v11;
      *(_OWORD *)long long v9 = v10;
      do
        v8 += 3;
      while (sub_10019D36C(a3, v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_10019D36C(a3, v9, (const void **)&v17));
    }
    while (v8 < v9);
  }
  long long v13 = (void **)(v8 - 3);
  if (v8 - 3 == (void *)a1)
  {
    if (*((char *)v8 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(v8 - 1);
    *a1 = v14;
    *((unsigned char *)v8 - 1) = 0;
    *((unsigned char *)v8 - 24) = 0;
  }
  long long v15 = v17;
  *(v8 - 1) = v18;
  *(_OWORD *)long long v13 = v15;
  return v8 - 3;
}

BOOL sub_10019DA7C(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v8 = a2 - 3;
      if (sub_10019D36C(a3, a2 - 3, (const void **)a1))
      {
        long long v9 = *(const void **)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = v8[2];
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)BOOL v8 = v10;
        v8[2] = v9;
      }
      return 1;
    case 3uLL:
      sub_10019D60C((const void **)a1, (const void **)(a1 + 24), a2 - 3, a3);
      return 1;
    case 4uLL:
      sub_10019DCD0(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a2 - 3, a3);
      return 1;
    case 5uLL:
      sub_10019DDBC(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (const void **)(a1 + 72), a2 - 3, a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      sub_10019D60C((const void **)a1, (const void **)(a1 + 24), (void *)(a1 + 48), a3);
      long long v13 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_10019D36C(a3, v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      long long v23 = v13[2];
      v13[1] = 0;
      v13[2] = 0;
      *long long v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = sub_10019D36C(a3, &v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 3 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 24;
    v13 += 3;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_10019DCD0(uint64_t a1, const void **a2, const void **a3, void *a4, uint64_t a5)
{
  sub_10019D60C((const void **)a1, a2, a3, a5);
  if (sub_10019D36C(a5, a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    long long v13 = (const void *)a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v13;
    *(_OWORD *)a4 = v12;
    a4[2] = v11;
    if (sub_10019D36C(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_10019D36C(a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_10019DDBC(uint64_t a1, const void **a2, const void **a3, const void **a4, void *a5, uint64_t a6)
{
  sub_10019DCD0(a1, a2, a3, a4, a6);
  if (sub_10019D36C(a6, a5, a4))
  {
    long long v13 = a4[2];
    long long v14 = *(_OWORD *)a4;
    long long v15 = (const void *)a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v15;
    *(_OWORD *)a5 = v14;
    a5[2] = v13;
    if (sub_10019D36C(a6, a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v18;
      *(_OWORD *)a4 = v17;
      a4[2] = v16;
      if (sub_10019D36C(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_10019D36C(a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          long long v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

void *sub_10019DEE0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if ((void *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_10019E12C(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (sub_10019D36C(a4, v14, (const void **)a1))
        {
          uint64_t v15 = v14[2];
          long long v16 = *(_OWORD *)v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *(_OWORD *)long long v14 = *(_OWORD *)a1;
          _OWORD v14[2] = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          sub_10019E12C(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = a2 - 3;
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = sub_10019E2C8(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (void *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *(_OWORD *)v19;
          *(void *)(v23 + 16) = v19[2];
          *(_OWORD *)uint64_t v23 = v25;
          void *v19 = v20;
          v19[1] = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          sub_10019E3A4(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 -= 3;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_10019E114(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10019E12C(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_10019D36C(a2, (void *)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!sub_10019D36C(a2, (void *)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_10019D36C(a2, (void *)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (sub_10019D36C(a2, (void *)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *long long v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_10019E2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_10019D36C(a2, (void *)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_10019E3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (sub_10019D36C(a3, v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        long long *v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!sub_10019D36C(a3, v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      long long *v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

void *sub_10019E4A8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100856418[a1]);
}

void *sub_10019E4BC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100856470[a1]);
}

void *sub_10019E4D0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008564B8[a1]);
}

void *sub_10019E4E4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008564D8[a1]);
}

uint64_t sub_10019E4F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 520) && *(char *)(a1 + 519) < 0) {
    operator delete(*(void **)(a1 + 496));
  }
  sub_10003E96C(a1 + 440, *(void **)(a1 + 448));
  sub_10003E96C(a1, *(void **)(a1 + 8));
  return a1;
}

void sub_10019E728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019EC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_1001A0B70(&a11, 0);
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_10019ED28(void *a1, uint64_t *a2)
{
  sub_1001A0BC0((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_10001A970(v3);
  }
  return a1;
}

void sub_10019F118(_Unwind_Exception *a1)
{
  unint64_t v8 = v5;

  _Unwind_Resume(a1);
}

void sub_10019F250(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10019F884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10019F934(uint64_t a1)
{
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)NIServerRangingAuthSession;
  int v2 = [super resourcesManager];
  uint64_t v3 = [v2 remote];
  [v3 didReceiveRangingAuthRecommendation:*(unsigned __int8 *)(a1 + 48) forObject:*(void *)(a1 + 40)];
}

void sub_10019F9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019FBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10019FBF0(uint64_t a1)
{
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)NIServerRangingAuthSession;
  int v2 = [super resourcesManager];
  uint64_t v3 = [v2 remote];
  [v3 uwbSessionDidInvalidateWithError:*(void *)(a1 + 40)];
}

void sub_10019FC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019FD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019FE20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10019FF74()
{
}

uint64_t sub_10019FF88()
{
  return 13;
}

uint64_t sub_10019FF90()
{
  return 5;
}

uint64_t sub_10019FF98()
{
  return 585;
}

uint64_t sub_10019FFA0()
{
  return 10;
}

double sub_10019FFA8()
{
  return 0.05625;
}

double sub_10019FFB4()
{
  return 0.05625;
}

double sub_10019FFC0()
{
  return 0.05625;
}

double sub_10019FFCC()
{
  return 0.05625;
}

uint64_t sub_10019FFD8()
{
  return 3;
}

void sub_10019FFE0()
{
}

uint64_t sub_10019FFF4()
{
  return 11;
}

uint64_t sub_10019FFFC()
{
  return 50;
}

uint64_t sub_1001A0004()
{
  return 550;
}

uint64_t sub_1001A000C()
{
  return 0xFFFFFFFFLL;
}

double sub_1001A0014()
{
  return -1.0;
}

double sub_1001A001C()
{
  return -1.0;
}

double sub_1001A0024()
{
  return -1.0;
}

double sub_1001A002C()
{
  return -1.0;
}

uint64_t sub_1001A0034()
{
  return 2;
}

uint64_t sub_1001A003C(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  objc_super v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1001A00BC((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1001A00A4(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1001A00BC(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t v6 = sub_1001A0144(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_100026D98(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1001A0144(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_1001A02EC(uint64_t a1, double *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  objc_super v4 = (double *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1001A036C((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1001A0354(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1001A036C(uint64_t **a1, double *a2, double *a3, uint64_t *a4)
{
  uint64_t v6 = sub_1001A03F4(a1, a2, &v11, &v10, a3);
  int v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_100026D98(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

double *sub_1001A03F4(void *a1, double *a2, double **a3, double *a4, double *a5)
{
  uint64_t v5 = (double *)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (v6 = *a5, double v7 = a2[4], *a5 > v7))
  {
    unint64_t v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      double v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = *(uint64_t **)a2;
      do
      {
        double v10 = (double *)v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        double v10 = (double *)*((void *)v13 + 2);
        BOOL v14 = *(void *)v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    double v15 = *a5;
    if (v10[4] > *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          double v18 = v16[4];
          if (v15 <= v18) {
            break;
          }
          uint64_t v16 = *(double **)v16;
          uint64_t v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v18 <= v15) {
          break;
        }
        uint64_t v5 = v16 + 1;
        uint64_t v16 = (double *)*((void *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    uint64_t v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 <= v6)
  {
    *a3 = a2;
    *(void *)a4 = a2;
    return a4;
  }
  uint64_t v11 = *((void *)a2 + 1);
  if (v11)
  {
    long long v12 = (double *)*((void *)a2 + 1);
    do
    {
      a4 = v12;
      long long v12 = *(double **)v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (double *)*((void *)v19 + 2);
      BOOL v14 = *(void *)a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 <= a4[4])
  {
    uint64_t v20 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v20;
          double v21 = v20[4];
          if (v6 <= v21) {
            break;
          }
          uint64_t v20 = *(double **)v20;
          uint64_t v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v21 <= v6) {
          break;
        }
        uint64_t v5 = v20 + 1;
        uint64_t v20 = (double *)*((void *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1001A0590(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008561C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001A05B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008561C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001A060C(uint64_t a1)
{
  return a1;
}

void sub_1001A0638(uint64_t a1)
{
  operator delete();
}

void *sub_1001A0684(uint64_t a1)
{
  int v2 = operator new(0x10uLL);
  *int v2 = off_100856218;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001A06DC(uint64_t a1, void *a2)
{
  *a2 = off_100856218;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001A0724(uint64_t a1)
{
}

void sub_1001A072C(id *a1)
{
  operator delete(a1);
}

id sub_1001A0768(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 8) wifiRangingRangeResults:a2];
}

uint64_t sub_1001A0774(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100856288)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001A07B4()
{
  return &off_100856288;
}

uint64_t sub_1001A07C0(uint64_t a1)
{
  return a1;
}

void sub_1001A07EC(uint64_t a1)
{
  operator delete();
}

void *sub_1001A0838(uint64_t a1)
{
  int v2 = operator new(0x10uLL);
  *int v2 = off_1008562A8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001A0890(uint64_t a1, void *a2)
{
  *a2 = off_1008562A8;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001A08D8(uint64_t a1)
{
}

void sub_1001A08E0(id *a1)
{
  operator delete(a1);
}

id sub_1001A091C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  return [*(id *)(a1 + 8) wifiRangingRangeError:&v3];
}

uint64_t sub_1001A094C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100856318)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001A098C()
{
  return &off_100856318;
}

uint64_t sub_1001A0998(uint64_t a1)
{
  return a1;
}

void sub_1001A09C4(uint64_t a1)
{
  operator delete();
}

void *sub_1001A0A10(uint64_t a1)
{
  int v2 = operator new(0x10uLL);
  *int v2 = off_100856338;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001A0A68(uint64_t a1, void *a2)
{
  *a2 = off_100856338;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001A0AB0(uint64_t a1)
{
}

void sub_1001A0AB8(id *a1)
{
  operator delete(a1);
}

id sub_1001A0AF4(uint64_t a1, int *a2)
{
  int v3 = *a2;
  return [*(id *)(a1 + 8) wifiRangingReadiness:&v3];
}

uint64_t sub_1001A0B24(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008563A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001A0B64()
{
  return &off_1008563A8;
}

uint64_t sub_1001A0B70(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10002E140(result);
    operator delete();
  }
  return result;
}

uint64_t *sub_1001A0BC0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_1001A0C44(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001A0C7C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_10002E140(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1001A0CC4(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *sub_1001A0D08(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    sub_1000257D8();
  }
  return operator new(184 * a2);
}

void sub_1001A0D54()
{
  v10[0] = xmmword_1004B7750;
  v10[1] = unk_1004B7760;
  sub_1001A003C((uint64_t)&unk_1008A34F8, (int *)v10, 4);
  xmmword_1008A3510 = xmmword_1004B7660;
  unk_1008A3520 = xmmword_1004B7670;
  qword_1008A3538 = 0;
  unk_1008A3540 = 0;
  qword_1008A3530 = 0x3FD999999999999ALL;
  unk_1008A3548 = xmmword_1004B7680;
  dword_1008A3558 = 5;
  qword_1008A3560 = 0x4000000000000000;
  dword_1008A3568 = 5;
  byte_1008A3570 = 0;
  *(void *)&algn_1008A3571[3] = 0x30000000ALL;
  xmmword_1008A3580 = xmmword_1004B7690;
  unk_1008A3590 = xmmword_1004B76A0;
  xmmword_1008A35A0 = xmmword_1004B76B0;
  qword_1008A35B0 = 0x3FE3333333333333;
  dword_1008A35B8 = 3;
  xmmword_1008A35C0 = xmmword_1004B76C0;
  unk_1008A35D0 = xmmword_1004B76A0;
  xmmword_1008A35E0 = xmmword_1004B7690;
  qword_1008A35F0 = 0x3FE3333333333333;
  byte_1008A35F8 = 0;
  xmmword_1008A3600 = xmmword_1004B76D0;
  unk_1008A3610 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v8 = _Q0;
  xmmword_1008A3620 = _Q0;
  qword_1008A3630 = 0xBFD3333333333333;
  xmmword_1008A3638 = xmmword_1004B76F0;
  qword_1008A3648 = 0x3E99999A40000000;
  xmmword_1008A3650 = xmmword_1004B7670;
  qword_1008A3668 = 0;
  unk_1008A3670 = 0;
  qword_1008A3660 = 0x3FD999999999999ALL;
  xmmword_1008A3678 = xmmword_1004B7680;
  dword_1008A3688 = 5;
  qword_1008A3690 = 0x4000000000000000;
  dword_1008A3698 = 4;
  qword_1008A36A0 = 0x300000008;
  qword_1008A36A8 = 0xC04E800000000000;
  unint64_t v9 = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)&unk_1008A36B0, (double *)&v9, 1);
  xmmword_1008A36C8 = xmmword_1004B7700;
  qword_1008A36D8 = 0x4024000000000000;
  dword_1008A36E0 = 45;
  byte_1008A36E8 = 0;
  byte_1008A3700 = 0;
  qword_1008A3708 = 0;
  byte_1008A3710 = 0;
  dword_1008A3714 = 1;
  byte_1008A3718 = 1;
  xmmword_1008A3720 = xmmword_1004B7710;
  unk_1008A3730 = xmmword_1004B7720;
  xmmword_1008A3740 = v8;
  qword_1008A3750 = 0xC059000000000000;
  xmmword_1008A3758 = xmmword_1004B7730;
  qword_1008A3768 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008A3770 = xmmword_1004B7670;
  qword_1008A3780 = 0x3FD999999999999ALL;
  qword_1008A3790 = 0;
  qword_1008A3788 = 0;
  xmmword_1008A3798 = xmmword_1004B7680;
  dword_1008A37A8 = 5;
  qword_1008A37B0 = 0x4000000000000000;
  dword_1008A37B8 = 10;
  qword_1008A37C0 = 0x4034000000000000;
  dword_1008A37C8 = 3;
  xmmword_1008A37D0 = xmmword_1004B7740;
  __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008A34F8, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_72, &off_10089E370, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_73, &off_10089E378, (void *)&_mh_execute_header);
  qword_1008A37E8 = 0;
  unk_1008A37F0 = 0;
  qword_1008A37E0 = 0;
  double v6 = operator new(0x40uLL);
  qword_1008A37E8 = (uint64_t)(v6 + 4);
  unk_1008A37F0 = v6 + 4;
  *double v6 = xmmword_1004B7770;
  v6[1] = unk_1004B7780;
  v6[2] = xmmword_1004B7790;
  v6[3] = unk_1004B77A0;
  qword_1008A37E0 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A37E0, (void *)&_mh_execute_header);
  qword_1008A3800 = 0;
  unk_1008A3808 = 0;
  qword_1008A37F8 = 0;
  double v7 = operator new(0x10uLL);
  qword_1008A3800 = (uint64_t)(v7 + 1);
  unk_1008A3808 = v7 + 1;
  *double v7 = xmmword_1004B77B0;
  qword_1008A37F8 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A37F8, (void *)&_mh_execute_header);
}

void sub_1001A1114(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001A1308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001A141C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A15B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A1710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1001A1758()
{
}

void sub_1001A1840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A1994(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1001A19D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_OWORD *)a1 = xmmword_1004B7B80;
  *(_DWORD *)(a1 + 16) = 1;
  sub_100004950(&__p, "regulatory,geof,qm,sm");
  uint64_t v4 = a1;
  operator new();
}

void sub_1001A1BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_1001A2448(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A1C2C(uint64_t a1, int a2)
{
  if (a2 != 4) {
    return a2 == 3;
  }
  *(double *)(a1 + 176) = *(double *)(a1 + 8) * (double)*(int *)(a1 + 16);
  return 2;
}

uint64_t sub_1001A1C60(uint64_t a1, int a2)
{
  uint64_t v2 = 1;
  switch(a2)
  {
    case 0:
      sub_1000220A0(a1 + 184, 1);
      sub_1001A2610(a1 + 24, 5, *(double *)a1);
      break;
    case 1:
      sub_1000220A0(a1 + 184, 0);
      sub_1001A1EE8((uint64_t **)(a1 + 24), 5);
      break;
    case 2:
      uint64_t v2 = 0;
      break;
    case 4:
      sub_1001A1EE8((uint64_t **)(a1 + 24), 5);
      double v4 = *(double *)(a1 + 8) * (double)*(int *)(a1 + 16);
      goto LABEL_7;
    case 5:
      double v4 = -(*(double *)a1 - *(double *)(a1 + 8) * (double)*(int *)(a1 + 16));
LABEL_7:
      *(double *)(a1 + 176) = v4;
      uint64_t v2 = 2;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t sub_1001A1D48(uint64_t a1, int a2)
{
  uint64_t result = 2;
  switch(a2)
  {
    case 0:
      uint64_t v4 = a1 + 24;
      double v5 = *(double *)(a1 + 176);
      goto LABEL_6;
    case 1:
      sub_1001A1EE8((uint64_t **)(a1 + 24), 6);
      goto LABEL_7;
    case 2:
      return 0;
    case 4:
      sub_1001A1EE8((uint64_t **)(a1 + 24), 6);
      double v5 = *(double *)(a1 + 8) * (double)*(int *)(a1 + 16);
      uint64_t v4 = a1 + 24;
LABEL_6:
      sub_1001A2610(v4, 6, v5);
LABEL_7:
      uint64_t result = 2;
      break;
    case 6:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1001A1E14(uint64_t *a1)
{
  double v5 = 0.0;
  if (sub_1003CEC04((uint64_t)"GeofenceLocationQueryInterval", &v5) && v5 != 0.0)
  {
    *((double *)a1 + 1) = v5;
    uint64_t v2 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100416798(a1 + 1, v2);
    }
  }
  double v4 = 0.0;
  if (sub_1003CEC04((uint64_t)"GeofenceLocationQueryTimeout", &v4) && v4 != 0.0)
  {
    *(double *)a1 = v4;
    id v3 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100416798(a1, v3);
    }
  }
}

uint64_t **sub_1001A1EE8(uint64_t **result, int a2)
{
  int v8 = a2;
  uint64_t v2 = result[8];
  if (v2)
  {
    id v3 = result;
    double v4 = result + 8;
    do
    {
      int v5 = *((_DWORD *)v2 + 8);
      BOOL v6 = v5 < a2;
      if (v5 >= a2) {
        double v7 = (uint64_t **)v2;
      }
      else {
        double v7 = (uint64_t **)(v2 + 1);
      }
      if (!v6) {
        double v4 = (uint64_t **)v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 8 && *((_DWORD *)v4 + 8) <= a2)
    {
      uint64_t result = (uint64_t **)v4[5];
      if (result)
      {
        dispatch_source_set_timer((dispatch_source_t)result, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        unint64_t v9 = &v8;
        uint64_t result = sub_1001A2910(v3 + 10, &v8, (uint64_t)&unk_1004BC2F8, &v9);
        *((unsigned char *)result + 32) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1001A1F98(uint64_t a1)
{
  return sub_1001A1FA4(a1 + 24, 2);
}

uint64_t sub_1001A1FA4(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 112);
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  int v30 = *(_DWORD *)(a1 + 4);
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_100416814();
  }
  if (!*(unsigned char *)(a1 + 48)) {
    sub_100416840();
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_13;
  }
  unsigned int v6 = a2;
  double v7 = (uint64_t **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  do
  {
    int v9 = *(_DWORD *)(v5 + 32);
    BOOL v10 = v9 < (int)v2;
    if (v9 >= (int)v2) {
      uint64_t v11 = (uint64_t *)v5;
    }
    else {
      uint64_t v11 = (uint64_t *)(v5 + 8);
    }
    if (!v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }
  while (*v11);
  if (v8 == a1 + 16 || (int)v2 < *(_DWORD *)(v8 + 32)) {
LABEL_13:
  }
    sub_10041686C();
  long long v12 = *(uint64_t (**)(void *, uint64_t))(v8 + 40);
  uint64_t v13 = *(void *)(v8 + 48);
  BOOL v14 = (void *)(v3 + (v13 >> 1));
  if (v13) {
    long long v12 = *(uint64_t (**)(void *, uint64_t))(*v14 + v12);
  }
  int v15 = v12(v14, a2);
  int v16 = v15;
  int v29 = v15;
  if (v6 <= 1 && v15 != v2) {
    sub_1004168F0();
  }
  if (v15 != v2)
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v31 = &v30;
    uint64_t v18 = sub_1001A254C(v7, &v30, (uint64_t)&unk_1004BC2F8, &v31);
    uint64_t v19 = v18[5];
    uint64_t v20 = (uint64_t)v18[6];
    double v21 = (void *)(v17 + (v20 >> 1));
    if (v20) {
      uint64_t v19 = *(uint64_t **)(*v21 + v19);
    }
    int v22 = ((uint64_t (*)(void *, uint64_t))v19)(v21, 1);
    if (v22 != v30) {
      sub_1004168C4();
    }
    *(_DWORD *)(a1 + 4) = v16;
    uint64_t v23 = *(void *)(a1 + 32);
    uint64_t v31 = &v29;
    int v24 = sub_1001A254C(v7, &v29, (uint64_t)&unk_1004BC2F8, &v31);
    long long v25 = v24[5];
    uint64_t v26 = (uint64_t)v24[6];
    long long v27 = (void *)(v23 + (v26 >> 1));
    if (v26) {
      long long v25 = *(uint64_t **)(*v27 + v25);
    }
    uint64_t v2 = ((uint64_t (*)(void *, void))v25)(v27, 0);
    if (v2 != v29) {
      sub_100416898();
    }
  }
  --*(_DWORD *)(a1 + 112);
  return v2;
}

uint64_t sub_1001A2178(uint64_t a1)
{
  return sub_1001A1FA4(a1 + 24, 3);
}

uint64_t sub_1001A2184(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 16) = a2;
  return sub_1001A1FA4(a1 + 24, 4);
}

void sub_1001A2198(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001A21D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1001A2218(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  unsigned int v6 = (void **)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((unsigned char *)a2 + 23)) {
      goto LABEL_5;
    }
LABEL_20:
    __assert_rtn("PRStateMachine", "PRStateMachine.h", 55, "!name.empty()");
  }
  if (!a2[1]) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_100158FEC((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    uint64_t v8 = &v11;
  }
  else {
    uint64_t v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unsigned int v6 = v11;
  *(void *)(a1 + 136) = v12;
  return a1;
}

void sub_1001A2394(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }

  sub_10003E96C(v4, *(void **)(v1 + 88));
  sub_1001A23EC(v3, *(void **)(v1 + 64));
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 40);
  if (v8) {
    sub_10001A970(v8);
  }
  sub_10003E96C(v2, *v5);
  _Unwind_Resume(a1);
}

void sub_1001A23EC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1001A23EC(a1, *a2);
    sub_1001A23EC(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t sub_1001A2448(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_1001A24CC(*(void **)(a1 + 56), (void *)(a1 + 64), (uint64_t **)a1);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }

  sub_10003E96C(a1 + 80, *(void **)(a1 + 88));
  sub_1001A23EC(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_10001A970(v3);
  }
  sub_10003E96C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t **sub_1001A24CC(void *a1, void *a2, uint64_t **a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_1001A1EE8(a3, *((_DWORD *)v5 + 8));
      unsigned int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          size_t v7 = v6;
          unsigned int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          size_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t **sub_1001A254C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  size_t v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        size_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        size_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    long long v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    sub_100026D98(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1001A2610(uint64_t a1, int a2, double a3)
{
  int v19 = a2;
  uint64_t v3 = *(NSObject **)(a1 + 104);
  if (!v3) {
    sub_10041691C();
  }
  if (a3 >= 0.0)
  {
    uint64_t v7 = a1 + 64;
    uint64_t v6 = *(void *)(a1 + 64);
    if (!v6) {
      goto LABEL_15;
    }
    uint64_t v8 = a1 + 64;
    do
    {
      int v9 = *(_DWORD *)(v6 + 32);
      BOOL v10 = v9 < a2;
      if (v9 >= a2) {
        long long v11 = (uint64_t *)v6;
      }
      else {
        long long v11 = (uint64_t *)(v6 + 8);
      }
      if (!v10) {
        uint64_t v8 = v6;
      }
      uint64_t v6 = *v11;
    }
    while (*v11);
    if (v8 != v7 && *(_DWORD *)(v8 + 32) <= a2 && (uint64_t v12 = *(void **)(v8 + 40)) != 0)
    {
      uint64_t v13 = v12;
    }
    else
    {
LABEL_15:
      dispatch_source_t v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v3);
      if (!v14) {
        return;
      }
      uint64_t v13 = v14;
      uint64_t v20 = &v19;
      int v15 = sub_1001A284C((uint64_t **)(v7 - 8), &v19, (uint64_t)&unk_1004BC2F8, &v20);
      objc_storeStrong((id *)v15 + 5, v13);
      dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_1001A27F0;
      v17[3] = &unk_100853B08;
      v17[4] = a1;
      int v18 = v19;
      dispatch_source_set_event_handler(v13, v17);
      dispatch_resume(v13);
    }
    dispatch_time_t v16 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(a3 * 1000000000.0));
    dispatch_source_set_timer(v13, v16, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    uint64_t v20 = &v19;
    *((unsigned char *)sub_1001A2910((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_1004BC2F8, &v20) + 32) = 1;
  }
}

void sub_1001A27E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **sub_1001A27F0(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1001A1FA4(v2, *(unsigned int *)(a1 + 40));
  uint64_t v4 = v1;
  uint64_t result = sub_1001A2910((uint64_t **)(v2 + 80), v1, (uint64_t)&unk_1004BC2F8, &v4);
  *((unsigned char *)result + 32) = 0;
  return result;
}

uint64_t **sub_1001A284C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    long long v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    sub_100026D98(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_1001A2910(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    long long v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((unsigned char *)v11 + 32) = 0;
    sub_100026D98(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *sub_1001A29D4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008567E8[a1]);
}

void *sub_1001A29E8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100856840[a1]);
}

void *sub_1001A29FC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100856888[a1]);
}

void *sub_1001A2A10@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008568A8[a1]);
}

void sub_1001A2ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A3138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A3210(uint64_t a1, uint64_t a2)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (a2)
  {
    uint64_t v4 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,device discovery activate failed", v11, 2u);
    }
    if (WeakRetained)
    {
      [WeakRetained[12] invalidate];
    }
    else
    {
      int v9 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_10041698C(v9);
      }
    }
  }
  else
  {
    uint64_t v5 = +[NSUserDefaults standardUserDefaults];
    unsigned __int8 v6 = [v5 BOOLForKey:@"disableDoubleBoostOnDevicePresenceActivation"];
    uint64_t v7 = qword_1008ABDE0;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v8)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,double boost on activation disabled by defaults write", buf, 2u);
      }
    }
    else
    {
      if (v8)
      {
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,Starting double boost on activation of device presence session", v13, 2u);
      }
      if (WeakRetained)
      {
        [WeakRetained[12] triggerEnhancedDiscovery:@"device presence session configuration" useCase:131085 completion:&stru_100856558];
      }
      else
      {
        int v10 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100416948(v10);
        }
      }
    }
  }
}

void sub_1001A33C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A33E8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004169D0();
  }
}

void sub_1001A369C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A36B4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004169D0();
  }
}

void sub_1001A3FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_1001A434C((uint64_t)&a32);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001A4154(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v3 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 64);
      id v5 = [*(id *)(a1 + 32) hash];
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,measurement timeout (%.1fs) fired for device token hash: 0x%lx", buf, 0x16u);
    }

    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
    *(void *)std::string buf = [*(id *)(a1 + 32) hash];
    unsigned __int8 v6 = sub_100056B3C((void *)WeakRetained + 34, (unint64_t *)buf);
    if (v6) {
      sub_1001A676C((void *)WeakRetained + 34, v6);
    }
    [*((id *)WeakRetained + 8) clearStateForToken:*(void *)(a1 + 32)];
    uint64_t v7 = *(void *)(a1 + 48);
    id v11 = [*(id *)(a1 + 32) hash];
    uint64_t v12 = &v11;
    BOOL v8 = sub_1001A64C8(v7 + 168, (unint64_t *)&v11, (uint64_t)&unk_1004BC2F8, &v12);
    sub_100290760((void *)v8[3], (uint64_t)buf);
    uint64_t v9 = *((void *)WeakRetained + 6);
    if (v9)
    {
      double v10 = sub_100006C38();
      sub_10029E530(v9, (uint64_t)buf, v10);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
}

void sub_1001A4308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001A434C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_1001A44FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001A4528(int a1)
{
  uint64_t result = 1;
  if ((a1 - 613) > 0x3A || ((1 << (a1 - 101)) & 0x4A0000000000095) == 0)
  {
    unsigned int v3 = a1 - 781;
    if (v3 > 0x17 || ((1 << v3) & 0xF80003) == 0) {
      return 0;
    }
  }
  return result;
}

void sub_1001A489C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A4AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10001A970(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1001A4CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1001A4EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A4EE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {

    *(unsigned char *)(a1 + 32) = 0;
  }
}

void sub_1001A4FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A5160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A51BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A52A0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001A531C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001A547C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A5498(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 72))
  {
    uint64_t v3 = *(void *)(v1 + 120);
    id v4 = [*(id *)(a1 + 40) devicePresencePreset];
    id v5 = [*(id *)(a1 + 48) devicePresencePreset];
    double v6 = sub_100006C38();
    sub_100240D14(v3, (uint64_t)v4, (uint64_t)v5, v6);
    sub_1001A4EE8(*(void *)(a1 + 32) + 128);
    v10.receiver = *(id *)(a1 + 32);
    v10.super_class = (Class)NIServerDevicePresenceSession;
    uint64_t v7 = [v10 resourcesManager];
    BOOL v8 = [v7 remote];
    [v8 object:*(void *)(a1 + 56) didUpdateRegion:*(void *)(a1 + 40) previousRegion:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v9 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,#regions, didUpdateRegion:previousRegion. Should deliver is False.", buf, 2u);
    }
  }
}

void sub_1001A55B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A56A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A56B0(uint64_t a1)
{
  v10.receiver = *(id *)(a1 + 32);
  v10.super_class = (Class)NIServerDevicePresenceSession;
  uint64_t v2 = [v10 resourcesManager];
  uint64_t v3 = *(__n128 **)(*(void *)(a1 + 32) + 120);
  id v4 = [*(id *)(a1 + 40) firstObject];
  [v4 boundedRegionRange];
  unsigned __int32 v6 = v5;
  v7.n128_f64[0] = sub_100006C38();
  double v8 = v7.n128_f64[0];
  v7.n128_u32[0] = v6;
  sub_100240CD8(v3, v7, v8);

  uint64_t v9 = [v2 remote];
  [v9 didUpdateNearbyObjects:*(void *)(a1 + 40)];
}

void sub_1001A576C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A5928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001A5B8C(uint64_t a1, int a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  *(double *)a1 = a7;
  *(double *)(a1 + 8) = a8;
  *(_DWORD *)(a1 + 16) = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100002DE4((unsigned char *)(a1 + 24), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v12 = *a3;
    *(void *)(a1 + 40) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v12;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_10016D488((void *)(a1 + 48), *(const void **)a4, *(void *)(a4 + 8), *(void *)(a4 + 8) - *(void *)a4);
  *(void *)(a1 + 72) = a5;
  *(void *)(a1 + 80) = a6;
  return a1;
}

void sub_1001A5C1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001A5C38(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
  }
  return a1;
}

void sub_1001A5C7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008565F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001A5C9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008565F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001A5CF0(uint64_t a1)
{
  return sub_10028CF30(a1 + 24);
}

uint64_t sub_1001A5CFC(uint64_t a1)
{
  return a1;
}

void sub_1001A5D28(uint64_t a1)
{
  operator delete();
}

void *sub_1001A5D74(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100856648;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001A5DCC(uint64_t a1, void *a2)
{
  *a2 = off_100856648;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001A5E14(uint64_t a1)
{
}

void sub_1001A5E1C(id *a1)
{
  operator delete(a1);
}

void sub_1001A5E58()
{
  v0 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#ses-devicepresence,ignoring backoff resume recommendation", v1, 2u);
  }
}

uint64_t sub_1001A5EC0(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008566B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001A5F00()
{
  return &off_1008566B8;
}

uint64_t sub_1001A5F0C(uint64_t a1)
{
  return a1;
}

void sub_1001A5F38(uint64_t a1)
{
  operator delete();
}

void *sub_1001A5F84(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_1008566D8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001A5FDC(uint64_t a1, void *a2)
{
  *a2 = off_1008566D8;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001A6024(uint64_t a1)
{
}

void sub_1001A602C(id *a1)
{
  operator delete(a1);
}

id sub_1001A6068(uint64_t a1, unsigned int *a2)
{
  return _[*(id *)(a1 + 8) _handleMotionStateChange:*a2];
}

uint64_t sub_1001A6074(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100856748)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001A60B4()
{
  return &off_100856748;
}

uint64_t sub_1001A60C0(uint64_t a1)
{
  return a1;
}

void sub_1001A60EC(uint64_t a1)
{
  operator delete();
}

void *sub_1001A6138(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100856768;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001A6190(uint64_t a1, void *a2)
{
  *a2 = off_100856768;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001A61D8(uint64_t a1)
{
}

void sub_1001A61E0(id *a1)
{
  operator delete(a1);
}

id sub_1001A621C(uint64_t a1, unsigned int *a2)
{
  return _[*(id *)(a1 + 8) _handleScreenStateChange:*a2];
}

uint64_t sub_1001A6228(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008567D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001A6268()
{
  return &off_1008567D8;
}

void *sub_1001A6274(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001A62F8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001A637C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001A6400(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1001A647C(a2 + 144);
    sub_1001A647C(a2 + 48);
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    operator delete();
  }
}

uint64_t sub_1001A647C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(void *)(a1 + 56) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
  }
  return a1;
}

void *sub_1001A64C8(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    objc_super v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  double v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *uint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    double v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1001A66F8(_Unwind_Exception *a1)
{
  sub_1001A6714(v2, v1);
  _Unwind_Resume(a1);
}

void sub_1001A6714(uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t sub_1001A676C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10002A6C0(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (id *)__p;
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  if (v3)
  {
    if (v6) {

    }
    operator delete(v3);
  }
  return v2;
}

void *sub_1001A67C4(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    objc_super v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  double v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *uint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    double v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1001A69F4(_Unwind_Exception *a1)
{
  sub_1001A6714(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A6A10(uint64_t a1)
{
  sub_1001A6A4C(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001A6A4C(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_1001A6A90()
{
  v10[0] = xmmword_1004B7CB0;
  v10[1] = unk_1004B7CC0;
  sub_1001A003C((uint64_t)&unk_1008A3810, (int *)v10, 4);
  xmmword_1008A3828 = xmmword_1004B7660;
  unk_1008A3838 = xmmword_1004B7670;
  qword_1008A3850 = 0;
  unk_1008A3858 = 0;
  qword_1008A3848 = 0x3FD999999999999ALL;
  unk_1008A3860 = xmmword_1004B7680;
  dword_1008A3870 = 5;
  qword_1008A3878 = 0x4000000000000000;
  dword_1008A3880 = 5;
  byte_1008A3888 = 0;
  unk_1008A388C = 0x30000000ALL;
  xmmword_1008A3898 = xmmword_1004B7690;
  unk_1008A38A8 = xmmword_1004B76A0;
  xmmword_1008A38B8 = xmmword_1004B76B0;
  qword_1008A38C8 = 0x3FE3333333333333;
  dword_1008A38D0 = 3;
  xmmword_1008A38D8 = xmmword_1004B76C0;
  unk_1008A38E8 = xmmword_1004B76A0;
  xmmword_1008A38F8 = xmmword_1004B7690;
  qword_1008A3908 = 0x3FE3333333333333;
  byte_1008A3910 = 0;
  xmmword_1008A3918 = xmmword_1004B76D0;
  unk_1008A3928 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v8 = _Q0;
  xmmword_1008A3938 = _Q0;
  qword_1008A3948 = 0xBFD3333333333333;
  xmmword_1008A3950 = xmmword_1004B76F0;
  qword_1008A3960 = 0x3E99999A40000000;
  xmmword_1008A3968 = xmmword_1004B7670;
  qword_1008A3980 = 0;
  unk_1008A3988 = 0;
  qword_1008A3978 = 0x3FD999999999999ALL;
  xmmword_1008A3990 = xmmword_1004B7680;
  dword_1008A39A0 = 5;
  qword_1008A39A8 = 0x4000000000000000;
  dword_1008A39B0 = 4;
  qword_1008A39B8 = 0x300000008;
  qword_1008A39C0 = 0xC04E800000000000;
  unint64_t v9 = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)algn_1008A39C8, (double *)&v9, 1);
  xmmword_1008A39E0 = xmmword_1004B7700;
  qword_1008A39F0 = 0x4024000000000000;
  dword_1008A39F8 = 45;
  byte_1008A3A00 = 0;
  byte_1008A3A18 = 0;
  qword_1008A3A20 = 0;
  byte_1008A3A28 = 0;
  dword_1008A3A2C = 1;
  byte_1008A3A30 = 1;
  xmmword_1008A3A38 = xmmword_1004B7710;
  unk_1008A3A48 = xmmword_1004B7720;
  xmmword_1008A3A58 = v8;
  qword_1008A3A68 = 0xC059000000000000;
  xmmword_1008A3A70 = xmmword_1004B7730;
  qword_1008A3A80 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008A3A88 = xmmword_1004B7670;
  qword_1008A3A98 = 0x3FD999999999999ALL;
  qword_1008A3AA8 = 0;
  qword_1008A3AA0 = 0;
  xmmword_1008A3AB0 = xmmword_1004B7680;
  dword_1008A3AC0 = 5;
  qword_1008A3AC8 = 0x4000000000000000;
  dword_1008A3AD0 = 10;
  qword_1008A3AD8 = 0x4034000000000000;
  dword_1008A3AE0 = 3;
  xmmword_1008A3AE8 = xmmword_1004B7740;
  __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008A3810, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_72, &off_10089E4A0, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_73, &off_10089E4A8, (void *)&_mh_execute_header);
  qword_1008A3B00 = 0;
  unk_1008A3B08 = 0;
  qword_1008A3AF8 = 0;
  char v6 = operator new(0x40uLL);
  qword_1008A3B00 = (uint64_t)(v6 + 4);
  unk_1008A3B08 = v6 + 4;
  *char v6 = xmmword_1004B7CD0;
  v6[1] = unk_1004B7CE0;
  v6[2] = xmmword_1004B7CF0;
  v6[3] = unk_1004B7D00;
  qword_1008A3AF8 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A3AF8, (void *)&_mh_execute_header);
  qword_1008A3B18 = 0;
  unk_1008A3B20 = 0;
  qword_1008A3B10 = 0;
  unint64_t v7 = operator new(0x10uLL);
  qword_1008A3B18 = (uint64_t)(v7 + 1);
  unk_1008A3B20 = v7 + 1;
  *unint64_t v7 = xmmword_1004B7D10;
  qword_1008A3B10 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A3B10, (void *)&_mh_execute_header);
}

void sub_1001A6E50(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001A6EB0()
{
}

void sub_1001A6F08()
{
}

uint64_t sub_1001A6F2C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.nearbyd.systemHealth", 0);
  uint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v2;

  id v4 = [objc_alloc((Class)NSBackgroundActivityScheduler) initWithIdentifier:@"com.apple.nearbyd.systemHealth"];
  unsigned __int32 v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;

  [*(id *)(a1 + 32) invalidate];
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_1001A6FA8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001A6FD8(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidate];
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    notify_cancel(v2);
    *(_DWORD *)(a1 + 40) = 0;
  }

  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1001A703C(uint64_t a1, char a2)
{
  if (objc_opt_class())
  {
    id v4 = *(NSObject **)(a1 + 24);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1001A70FC;
    v5[3] = &unk_100856960;
    void v5[4] = a1;
    char v6 = a2;
    dispatch_sync(v4, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100416CF4();
  }
}

void sub_1001A70FC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v1;
  int v2 = (std::__shared_weak_count *)v1[1];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = *((_DWORD *)v1 + 4);
  if (*(unsigned char *)(a1 + 40)) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  *((_DWORD *)v1 + 4) = v5;
  char v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = "None";
    int v8 = *((_DWORD *)v1 + 4);
    if (v8 == 1) {
      unint64_t v9 = "Healthy";
    }
    else {
      unint64_t v9 = "None";
    }
    if (v8 == 2) {
      objc_super v10 = "NotHealthy";
    }
    else {
      objc_super v10 = v9;
    }
    if (v4 == 1) {
      unint64_t v7 = "Healthy";
    }
    if (v4 == 2) {
      unint64_t v7 = "NotHealthy";
    }
    *(_DWORD *)std::string buf = 136315394;
    size_t v19 = v10;
    __int16 v20 = 2080;
    double v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#system-health,scheduleSendingOfSystemHealthReport: New report %s. Previously scheduled report %s", buf, 0x16u);
  }
  if (!*((_DWORD *)v1 + 10))
  {
    id v11 = v1[3];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3321888768;
    handler[2] = sub_1001A73D4;
    handler[3] = &unk_1008568C8;
    handler[4] = v3;
    unint64_t v17 = v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    notify_register_dispatch("com.apple.system.console_mode_changed", (int *)v1 + 10, v11, handler);
    unint64_t v12 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#system-health,scheduleSendingOfSystemHealthReport: Registered for game mode changed notifications", buf, 2u);
    }
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  [(id)v1[4] invalidate];
  [(id)v1[4] setQualityOfService:17];
  [(id)v1[4] setInterval:60.0];
  [(id)v1[4] setTolerance:30.0];
  [(id)v1[4] setRepeats:0];
  uint64_t v13 = (void *)v1[4];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3321888768;
  _OWORD v14[2] = sub_1001A7778;
  v14[3] = &unk_100856930;
  v14[4] = v3;
  float v15 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  [v13 scheduleWithBlock:v14];
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1001A7398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001A73D4(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (v4)
      {
        int v5 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v6 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#system-health,scheduleSendingOfSystemHealthReport: Game mode changed notification fired. Try to send the scheduled health report.", v6, 2u);
        }
        sub_1001A74BC(v4);
LABEL_11:
        sub_10001A970(v3);
        return;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100416D28();
  }
  if (v3) {
    goto LABEL_11;
  }
}

void sub_1001A74A8(_Unwind_Exception *a1)
{
  sub_10001A970(v1);
  _Unwind_Resume(a1);
}

void sub_1001A74BC(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  int v2 = qword_1008ABDE0;
  if (*(_DWORD *)(a1 + 16))
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(_DWORD *)(a1 + 16);
      uint64_t v4 = "None";
      if (v3 == 1) {
        uint64_t v4 = "Healthy";
      }
      if (v3 == 2) {
        int v5 = "NotHealthy";
      }
      else {
        int v5 = v4;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#system-health,_tryToSendScheduledHealthReport: Scheduled report %s", buf, 0xCu);
    }
    *(void *)std::string buf = 0;
    int v6 = *(_DWORD *)(a1 + 40);
    if (!v6 || notify_get_state(v6, (uint64_t *)buf))
    {
      unint64_t v7 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_14:
        int v9 = *(_DWORD *)(a1 + 40);
        if (v9)
        {
          notify_cancel(v9);
          *(_DWORD *)(a1 + 40) = 0;
        }
        objc_super v10 = *(void **)(a1 + 48);
        if (v10
          || (id v11 = objc_alloc_init((Class)SystemHealthManager),
              unint64_t v12 = *(void **)(a1 + 48),
              *(void *)(a1 + 48) = v11,
              v12,
              (objc_super v10 = *(void **)(a1 + 48)) != 0))
        {
          *(_DWORD *)(a1 + 16) = 0;
          [v10 postComponentStatusEventFor:8 withReply:nil];
        }
        else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
        {
          sub_100416D90();
        }
        return;
      }
      *(_WORD *)BOOL v16 = 0;
      int v8 = "#system-health,_tryToSendScheduledHealthReport: Game mode unknown. Continue with health report";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, v16, 2u);
      goto LABEL_14;
    }
    uint64_t v14 = *(void *)buf;
    unint64_t v7 = qword_1008ABDE0;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
    if (!v14)
    {
      if (!v15) {
        goto LABEL_14;
      }
      *(_WORD *)BOOL v16 = 0;
      int v8 = "#system-health,_tryToSendScheduledHealthReport: Game mode disabled. Continue with health report";
      goto LABEL_13;
    }
    if (v15)
    {
      *(_WORD *)BOOL v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#system-health,_tryToSendScheduledHealthReport: Game mode enabled. Wait until game mode changes to send health report", v16, 2u);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100416D5C();
    }
    int v13 = *(_DWORD *)(a1 + 40);
    if (v13)
    {
      notify_cancel(v13);
      *(_DWORD *)(a1 + 40) = 0;
    }
  }
}

uint64_t sub_1001A774C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1001A7768(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1001A7778(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    int v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6)
      {
        unint64_t v7 = *(NSObject **)(v6 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_1001A78C4;
        block[3] = &unk_100856900;
        int v8 = *(std::__shared_weak_count **)(a1 + 40);
        uint64_t v11 = v6;
        unint64_t v12 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        id v10 = v3;
        dispatch_async(v7, block);

        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_12:
        sub_10001A970(v5);
        goto LABEL_13;
      }
    }
  }
  else
  {
    int v5 = 0;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100416DC4();
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
  if (v5) {
    goto LABEL_12;
  }
LABEL_13:
}

void sub_1001A78A8(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10001A970(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1001A78C4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    id v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = a1[5];
      if (v4)
      {
        int v5 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v6 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#system-health,scheduleSendingOfSystemHealthReport: Background activity fired. Try to send the scheduled health report.", v6, 2u);
        }
        sub_1001A74BC(v4);
        (*(void (**)(void))(a1[4] + 16))();
LABEL_11:
        sub_10001A970(v3);
        return;
      }
    }
  }
  else
  {
    id v3 = 0;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100416DF8();
  }
  (*(void (**)(void))(a1[4] + 16))();
  if (v3) {
    goto LABEL_11;
  }
}

void sub_1001A79C0(_Unwind_Exception *a1)
{
  sub_10001A970(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A79E0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1001A79FC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1001A7A0C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = qword_1008ABDE0;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      if (*(void *)(a1 + 32) == 1) {
        unint64_t v7 = "pass";
      }
      else {
        unint64_t v7 = "fail";
      }
      int v8 = 136315138;
      int v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#system-health,_tryToSendScheduledHealthReport: SystemHealthManager was notified of HW status: %s", (uint8_t *)&v8, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100416E2C((uint64_t)v5, v6);
  }
}

void sub_1001A7B08(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1001A7B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001A7C6C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1001A7BA8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001A7BE0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_1001A6FD8(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1001A7C28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1001A7C6C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1001A6FD8(result);
    operator delete();
  }
  return result;
}

void *sub_1001A7CBC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100856A78[a1]);
}

void *sub_1001A7CD0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100856AD0[a1]);
}

void *sub_1001A7CE4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100856B18[a1]);
}

void *sub_1001A7CF8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100856B38[a1]);
}

void sub_1001A8104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001A83A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A87D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  _Unwind_Resume(a1);
}

void sub_1001A8868(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    [WeakRetained _handleSessionBackgroundContinuationAuth:a2];
  }
}

void sub_1001A88C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001A8A6C(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1001A8B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A8CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A8DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)NIServerNearbyAccessorySession;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001A8EE0(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained && *((unsigned char *)WeakRetained + 88) != 6)
  {
    v9.receiver = *(id *)(a1 + 32);
    v9.super_class = (Class)NIServerNearbyAccessorySession;
    uint64_t v4 = [[super resourcesManager];
    id v5 = [NINearbyObject alloc];
    uint64_t v6 = [v3[13] accessoryDiscoveryToken];
    unint64_t v7 = [(NINearbyObject *)v5 initWithToken:v6];

    int v8 = [v4 remote];
    [v8 didGenerateShareableConfigurationData:*(void *)(a1 + 40) forObject:v7];
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100416F88();
  }
}

void sub_1001A8FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A9254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(locationa, a2);
  id location = va_arg(va1, id);
  if (LOBYTE(STACK[0x330])) {
    sub_100416FBC((uint64_t)va1);
  }
  sub_10015DC28(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)locationa);
  sub_10016B718((uint64_t)&STACK[0x5F0]);
  _Unwind_Resume(a1);
}

void sub_1001A92D0(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *((unsigned char *)WeakRetained + 88) != 6)
  {
    if ([WeakRetained[13] dataExchangeDisabledAndUsingParameterOverrides]) {
      goto LABEL_8;
    }
    id v4 = *(id *)(a1 + 88);
    id v5 = [v3[13] accessoryDiscoveryToken];
    uint64_t v6 = [v5 shortDeviceAddress];
    id v7 = [v6 unsignedLongLongValue];

    if (v4 == v7)
    {
LABEL_8:
      uint64_t v8 = a1 + 80;
      if ((*(_DWORD *)(a1 + 80) - 1) >= 3)
      {
        int v13 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
          sub_100417048((int *)(a1 + 80), v13);
        }
      }
      else if (*(unsigned char *)(a1 + 72))
      {
        double v9 = *(double *)(a1 + 64);
        id v10 = [v3[13] accessoryDiscoveryToken];
        if (v10)
        {
          v14.receiver = *(id *)(a1 + 32);
          v14.super_class = (Class)NIServerNearbyAccessorySession;
          uint64_t v11 = [super resourcesManager];
          unint64_t v12 = [v11 lifecycleSupervisor];
          if ([v12 timeoutOnPeerInactivity]) {
            [v12 measurementReceivedForToken:v10 contTimestamp:v9];
          }
          [v3[8] acceptRoseSolution:v8 - 32];
          [v3[12] measurementReceived];
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        sub_100417014();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100416FE0();
  }
}

void sub_1001A94BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1001A9504(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  sub_1001751A0((unsigned char *)(a1 + 96), a2 + 96);
  sub_10016E330((unsigned char *)(a1 + 656), a2 + 656);
  sub_1001751F8((__n128 *)(a1 + 808), (__n128 *)(a2 + 808));

  return memcpy((void *)(a1 + 928), (const void *)(a2 + 928), 0x239uLL);
}

void sub_1001A9584(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v2 + 800)) {
    sub_1004170C4(v2);
  }
  sub_10015DC28(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A95B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 920))
  {
    uint64_t v2 = *(void **)(a1 + 880);
    if (v2)
    {
      *(void *)(a1 + 888) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 800)) {
    sub_10003E96C(a1 + 672, *(void **)(a1 + 680));
  }

  return sub_10015DC28(a1 + 96);
}

void sub_1001A96E4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (!WeakRetained || *((unsigned char *)WeakRetained + 88) == 6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004170D4();
    }
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  v18.receiver = *(id *)(a1 + 32);
  v18.super_class = (Class)NIServerNearbyAccessorySession;
  [super serviceRequestDidUpdateStatus:v4, v5];
  int v6 = *(_DWORD *)(a1 + 52);
  if (v6 != 2)
  {
    if (v6 != 3) {
      goto LABEL_17;
    }
    int v7 = *(_DWORD *)(a1 + 56);
    if (v7 != 8 && v7 != 5) {
      goto LABEL_17;
    }
    uint64_t v8 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)std::string buf = 0;
    double v9 = "#ses-ecosystem,Stop tracking peer due to FW-generated timeout";
    goto LABEL_13;
  }
  uint64_t v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    double v9 = "#ses-ecosystem,Stop tracking peer due to inability to start ranging (even with timeouts)";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
  }
LABEL_14:
  v16.receiver = *(id *)(a1 + 32);
  v16.super_class = (Class)NIServerNearbyAccessorySession;
  id v10 = [super resourcesManager];
  uint64_t v11 = [v10 lifecycleSupervisor];
  if ([v11 timeoutOnPeerInactivity])
  {
    unint64_t v12 = [v3[13] accessoryDiscoveryToken];
    size_t v19 = v12;
    int v13 = +[NSArray arrayWithObjects:&v19 count:1];
    [v11 stoppedDiscoveringPeersWithTokens:v13];
  }
  objc_super v14 = *(void **)(a1 + 32);
  BOOL v15 = [v3[13] accessoryDiscoveryToken];
  [v14 peerInactivityPeriodExceeded:v15];

LABEL_17:
}

void sub_1001A9918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A9A34(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *((unsigned char *)WeakRetained + 88) != 6)
  {
    uint64_t v4 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_1002DE0A8(*(_DWORD *)(a1 + 48), v8);
      sub_10041713C((char *)v8, buf, v4);
    }

    [v3 invalidate];
    v7.receiver = *(id *)(a1 + 32);
    v7.super_class = (Class)NIServerNearbyAccessorySession;
    [super invalidationHandler];
    uint64_t v5 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    int v6 = +[NSError errorWithDomain:@"com.apple.NearbyInteraction" code:-5887 userInfo:0];
    ((void (**)(void, void *))v5)[2](v5, v6);
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100417108();
  }
}

void sub_1001A9B94(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1001A9C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001A9DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A9E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001A9EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AA040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AA2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AA4A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AA5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AA600(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *((unsigned char *)WeakRetained + 88) == 2)
  {
    v9.receiver = *(id *)(a1 + 32);
    v9.super_class = (Class)NIServerNearbyAccessorySession;
    uint64_t v4 = [super resourcesManager];
    uint64_t v5 = [v4 appStateMonitor];
    BOOL v6 = [v5 currentAppState] == 3;

    if (v6 && [v3[13] backgroundMode] == (id)2)
    {
      objc_super v7 = (id)qword_1008ABDE0;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v8 = [v4 clientPid];
        *(_DWORD *)std::string buf = 67109120;
        unsigned int v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#ses-ecosystem,Client with pid %d isn't visible. Skip sending nearby object", buf, 8u);
      }
    }
    else
    {
      objc_super v7 = [v4 remote];
      [v7 didUpdateNearbyObjects:*(void *)(a1 + 40)];
    }
  }
}

void sub_1001AA76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AA900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AA918(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *((unsigned char *)WeakRetained + 88) == 2)
  {
    v6.receiver = *(id *)(a1 + 32);
    v6.super_class = (Class)NIServerNearbyAccessorySession;
    uint64_t v4 = [super resourcesManager];
    uint64_t v5 = [v4 remote];
    [v5 didUpdateAlgorithmState:*(void *)(a1 + 40) forObject:*(void *)(a1 + 48)];
  }
}

void sub_1001AA9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AAB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AACC8()
{
  v10[0] = xmmword_1004B8298;
  v10[1] = unk_1004B82A8;
  sub_1001A003C((uint64_t)&unk_1008A3B28, (int *)v10, 4);
  xmmword_1008A3B40 = xmmword_1004B7660;
  *(_OWORD *)algn_1008A3B50 = xmmword_1004B7670;
  qword_1008A3B68 = 0;
  unk_1008A3B70 = 0;
  qword_1008A3B60 = 0x3FD999999999999ALL;
  unk_1008A3B78 = xmmword_1004B7680;
  dword_1008A3B88 = 5;
  qword_1008A3B90 = 0x4000000000000000;
  dword_1008A3B98 = 5;
  byte_1008A3BA0 = 0;
  *(void *)&algn_1008A3BA1[3] = 0x30000000ALL;
  xmmword_1008A3BB0 = xmmword_1004B7690;
  unk_1008A3BC0 = xmmword_1004B76A0;
  xmmword_1008A3BD0 = xmmword_1004B76B0;
  qword_1008A3BE0 = 0x3FE3333333333333;
  dword_1008A3BE8 = 3;
  xmmword_1008A3BF0 = xmmword_1004B76C0;
  unk_1008A3C00 = xmmword_1004B76A0;
  xmmword_1008A3C10 = xmmword_1004B7690;
  qword_1008A3C20 = 0x3FE3333333333333;
  byte_1008A3C28 = 0;
  xmmword_1008A3C30 = xmmword_1004B76D0;
  unk_1008A3C40 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v8 = _Q0;
  xmmword_1008A3C50 = _Q0;
  qword_1008A3C60 = 0xBFD3333333333333;
  xmmword_1008A3C68 = xmmword_1004B76F0;
  qword_1008A3C78 = 0x3E99999A40000000;
  xmmword_1008A3C80 = xmmword_1004B7670;
  qword_1008A3C98 = 0;
  unk_1008A3CA0 = 0;
  qword_1008A3C90 = 0x3FD999999999999ALL;
  xmmword_1008A3CA8 = xmmword_1004B7680;
  dword_1008A3CB8 = 5;
  qword_1008A3CC0 = 0x4000000000000000;
  dword_1008A3CC8 = 4;
  qword_1008A3CD0 = 0x300000008;
  qword_1008A3CD8 = 0xC04E800000000000;
  unint64_t v9 = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)&unk_1008A3CE0, (double *)&v9, 1);
  xmmword_1008A3CF8 = xmmword_1004B7700;
  qword_1008A3D08 = 0x4024000000000000;
  dword_1008A3D10 = 45;
  byte_1008A3D18 = 0;
  byte_1008A3D30 = 0;
  qword_1008A3D38 = 0;
  byte_1008A3D40 = 0;
  dword_1008A3D44 = 1;
  byte_1008A3D48 = 1;
  xmmword_1008A3D50 = xmmword_1004B7710;
  unk_1008A3D60 = xmmword_1004B7720;
  xmmword_1008A3D70 = v8;
  qword_1008A3D80 = 0xC059000000000000;
  xmmword_1008A3D88 = xmmword_1004B7730;
  qword_1008A3D98 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008A3DA0 = xmmword_1004B7670;
  qword_1008A3DB0 = 0x3FD999999999999ALL;
  qword_1008A3DC0 = 0;
  qword_1008A3DB8 = 0;
  xmmword_1008A3DC8 = xmmword_1004B7680;
  dword_1008A3DD8 = 5;
  qword_1008A3DE0 = 0x4000000000000000;
  dword_1008A3DE8 = 10;
  qword_1008A3DF0 = 0x4034000000000000;
  dword_1008A3DF8 = 3;
  xmmword_1008A3E00 = xmmword_1004B7740;
  __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008A3B28, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_72, &off_10089E4B0, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_73, &off_10089E4B8, (void *)&_mh_execute_header);
  qword_1008A3E18 = 0;
  unk_1008A3E20 = 0;
  qword_1008A3E10 = 0;
  objc_super v6 = operator new(0x40uLL);
  qword_1008A3E18 = (uint64_t)(v6 + 4);
  unk_1008A3E20 = v6 + 4;
  *objc_super v6 = xmmword_1004B82B8;
  v6[1] = unk_1004B82C8;
  v6[2] = xmmword_1004B82D8;
  v6[3] = unk_1004B82E8;
  qword_1008A3E10 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A3E10, (void *)&_mh_execute_header);
  qword_1008A3E30 = 0;
  unk_1008A3E38 = 0;
  qword_1008A3E28 = 0;
  objc_super v7 = operator new(0x10uLL);
  qword_1008A3E30 = (uint64_t)(v7 + 1);
  unk_1008A3E38 = v7 + 1;
  *objc_super v7 = xmmword_1004B82F8;
  qword_1008A3E28 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A3E28, (void *)&_mh_execute_header);
}

void sub_1001AB088(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1001AB21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AB538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_1001AB558(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) _internalPrintableState];
  uint64_t v2 = sub_10002DA78(@"Accessory GATT Manager", v1);

  return v2;
}

void sub_1001AB5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AB650(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) _initInternal];
  uint64_t v2 = (void *)qword_1008A3E40;
  qword_1008A3E40 = (uint64_t)v1;
}

void sub_1001AB79C(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 24) objectForKeyedSubscript:a1[5]];

  if (v2)
  {
    uint64_t v3 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[5];
      uint64_t v5 = a1[6];
      *(_DWORD *)std::string buf = 138412546;
      uint64_t v30 = v4;
      __int16 v31 = 2112;
      uint64_t v32 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#bt-accessory,AddServiceListener: existing listener [%@] for peer [%@]", buf, 0x16u);
    }
  }
  else
  {
    objc_super v6 = objc_opt_new();
    [v6 setListener:a1[7]];
    [v6 setPeerIdentifier:a1[6]];
    [v6 setConfiguration:a1[8]];
    [*(id *)(a1[4] + 24) setObject:v6 forKey:a1[5]];
    objc_super v7 = [*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[6]];

    long long v8 = qword_1008ABDE0;
    if (v7)
    {
      unint64_t v9 = (id)qword_1008ABDE0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = a1[6];
        uint64_t v27 = a1[5];
        long long v28 = [*(id *)(a1[4] + 32) objectForKeyedSubscript:v10];
        unsigned int v11 = [v28 connectionState] - 1;
        if (v11 > 5) {
          unint64_t v12 = "Idle";
        }
        else {
          unint64_t v12 = off_100856DA0[(char)v11];
        }
        int v24 = v12;
        uint64_t v26 = [*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[6]];
        long long v25 = [v26 resultConfigCharacteristics];
        unsigned int v17 = [v25 count];
        objc_super v18 = [*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[6]];
        size_t v19 = [v18 cachedConfigCharacteristics];
        unsigned int v20 = [v19 count];
        double v21 = [*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[6]];
        unint64_t v22 = [v21 listeners];
        *(_DWORD *)std::string buf = 138413570;
        uint64_t v30 = v27;
        __int16 v31 = 2112;
        uint64_t v32 = v10;
        __int16 v33 = 2080;
        uint64_t v34 = v24;
        __int16 v35 = 1024;
        unsigned int v36 = v17;
        __int16 v37 = 1024;
        unsigned int v38 = v20;
        __int16 v39 = 1024;
        unsigned int v40 = [v22 count];
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#bt-accessory,AddServiceListener: new listener [%@] for existing peer [%@]. State: %s. Result: %d blobs. Cached: %d blobs. Previous listener count: %d", buf, 0x32u);
      }
      BOOL v15 = [*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[6]];
      uint64_t v23 = [v15 listeners];
      [v23 addObject:a1[5]];
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = a1[5];
        uint64_t v14 = a1[6];
        *(_DWORD *)std::string buf = 138412546;
        uint64_t v30 = v13;
        __int16 v31 = 2112;
        uint64_t v32 = v14;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#bt-accessory,AddServiceListener: new listener [%@] for new peer [%@]", buf, 0x16u);
      }
      BOOL v15 = objc_opt_new();
      objc_super v16 = [v15 listeners];
      [v16 addObject:a1[5]];

      [*(id *)(a1[4] + 32) setObject:v15 forKey:a1[6]];
    }
  }
}

void sub_1001ABB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001ABC98(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 40);
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v3)
  {
    uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(a1 + 40)];
    uint64_t v5 = [v4 listener];

    __int16 v56 = v5;
    if (v5)
    {
      objc_super v6 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(a1 + 40)];
      objc_super v7 = [v6 peerIdentifier];

      long long v8 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7];

      unint64_t v9 = qword_1008ABDE0;
      if (v8)
      {
        uint64_t v10 = (id)qword_1008ABDE0;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v54 = *(void *)(a1 + 40);
          __darwin_time_t v55 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7];
          unsigned int v11 = [v55 connectionState] - 1;
          if (v11 > 5) {
            unint64_t v12 = "Idle";
          }
          else {
            unint64_t v12 = off_100856DA0[(char)v11];
          }
          uint64_t v27 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7];
          long long v28 = [v27 resultConfigCharacteristics];
          unsigned int v29 = [v28 count];
          uint64_t v30 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7];
          __int16 v31 = [v30 cachedConfigCharacteristics];
          *(_DWORD *)std::string buf = 138413314;
          uint64_t v63 = v54;
          __int16 v64 = 2112;
          __int16 v65 = v7;
          __int16 v66 = 2080;
          __int16 v67 = v12;
          __int16 v68 = 1024;
          unsigned int v69 = v29;
          __int16 v70 = 1024;
          unsigned int v71 = [v31 count];
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#bt-accessory,BackgroundAuthorization: probing authorization for listener [%@] for peer [%@]. State: %s. Result: %d blobs. Cached: %d blobs", buf, 0x2Cu);
        }
        uint64_t v32 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7];
        BOOL v33 = [v32 connectionState] == 0;

        if (v33) {
          [*(id *)(a1 + 32) _connectToPeer:v7];
        }
        uint64_t v34 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7];
        BOOL v35 = [v34 connectionState] == 6;

        unsigned int v36 = *(id **)(a1 + 32);
        if (v35)
        {
          unsigned int v37 = [v36 _isListener:*v2 backgroundAuthorizedForPeer:v7 useCache:0];
          unsigned int v38 = qword_1008ABDE0;
          BOOL v39 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
          if (v37)
          {
            if (v39)
            {
              uint64_t v40 = *v2;
              *(_DWORD *)std::string buf = 138412546;
              uint64_t v63 = v40;
              __int16 v64 = 2112;
              __int16 v65 = v7;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] authorized", buf, 0x16u);
            }
            unsigned __int8 v41 = [v56 getQueueForInputingData];
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1001AC3EC;
            block[3] = &unk_1008473B0;
            id v60 = v56;
            dispatch_async(v41, block);
          }
          else
          {
            if (v39)
            {
              uint64_t v47 = *v2;
              *(_DWORD *)std::string buf = 138412546;
              uint64_t v63 = v47;
              __int16 v64 = 2112;
              __int16 v65 = v7;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] NOT authorized. Re-discover services", buf, 0x16u);
            }
            timespec v48 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7];
            uint64_t v49 = [v48 peripheral];
            int v50 = +[CBUUID UUIDWithString:@"48fe3e40-0817-4bb2-8633-3073689c2dba"];
            __int16 v61 = v50;
            __int16 v51 = +[NSArray arrayWithObjects:&v61 count:1];
            [v49 discoverServices:v51];

            uint64_t v52 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7];
            [v52 changeConnectionState:3];

            __int16 v53 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v7];
            [v53 cacheCharacteristics];
          }
        }
        else
        {
          uint64_t v42 = [v36[4] objectForKeyedSubscript:v7];
          BOOL v43 = [v42 connectionState] == 0;

          if (!v43
            && [*(id *)(a1 + 32) _isListener:*(void *)(a1 + 40) backgroundAuthorizedForPeer:v7 useCache:1])
          {
            long long v44 = qword_1008ABDE0;
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v45 = *v2;
              *(_DWORD *)std::string buf = 138412546;
              uint64_t v63 = v45;
              __int16 v64 = 2112;
              __int16 v65 = v7;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] TEMPORARILY authorized pending confirmation", buf, 0x16u);
            }
            int64_t v46 = [v56 getQueueForInputingData];
            v57[0] = _NSConcreteStackBlock;
            v57[1] = 3221225472;
            v57[2] = sub_1001AC3F4;
            v57[3] = &unk_1008473B0;
            id v58 = v56;
            dispatch_async(v46, v57);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        sub_100417360(v2, (uint64_t)v7, v9);
      }
    }
    else
    {
      unsigned int v20 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
LABEL_32:

        return;
      }
      sub_1004172F0((uint64_t)v2, v20, v21, v22, v23, v24, v25, v26);
    }
    uint64_t v5 = v56;
    goto LABEL_32;
  }
  uint64_t v13 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100417280((uint64_t)v2, v13, v14, v15, v16, v17, v18, v19);
  }
}

void sub_1001AC2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_1001AC3EC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessoryGATTServiceAuthorizedBackgroundOperation];
}

id sub_1001AC3F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessoryGATTServiceAuthorizedBackgroundOperation];
}

void sub_1001AC494(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v2)
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(a1 + 40)];
    uint64_t v4 = [v3 peerIdentifier];

    [*(id *)(*(void *)(a1 + 32) + 24) removeObjectForKey:*(void *)(a1 + 40)];
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4];
    objc_super v6 = [v5 listeners];
    [v6 removeObject:*(void *)(a1 + 40)];

    objc_super v7 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      unint64_t v9 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4];
      uint64_t v10 = [v9 listeners];
      int v23 = 138412802;
      uint64_t v24 = v8;
      __int16 v25 = 2112;
      uint64_t v26 = v4;
      __int16 v27 = 1024;
      unsigned int v28 = [v10 count];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#bt-accessory,RemoveServiceListener: listener [%@] for peer [%@]. Listener count after removal: %d", (uint8_t *)&v23, 0x1Cu);
    }
    unsigned int v11 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4];
    unint64_t v12 = [v11 listeners];
    BOOL v13 = [v12 count] == 0;

    if (v13)
    {
      uint64_t v14 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4];
      uint64_t v15 = [v14 peripheral];
      BOOL v16 = v15 == 0;

      if (!v16)
      {
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = *(void **)(v17 + 16);
        uint64_t v19 = [*(id *)(v17 + 32) objectForKeyedSubscript:v4];
        unsigned int v20 = [v19 peripheral];
        [v18 cancelPeripheralConnection:v20];
      }
      uint64_t v21 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4];
      [v21 changeConnectionState:0];

      uint64_t v22 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4];
      [v22 cacheCharacteristics];
    }
    [*(id *)(a1 + 32) _cleanupExcessiveDetachedPeers];
  }
}

void sub_1001AC714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001AC8A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001AC8B8(uint64_t a1)
{
}

void sub_1001AC8C0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _internalPrintableState];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001ACB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1001ACB54(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  id v5 = a3;
  objc_super v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  objc_super v7 = +[NSString stringWithFormat:@"    [%@]", v16];
  [v6 addObject:v7];

  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  unint64_t v9 = [v5 peerIdentifier];
  uint64_t v10 = +[NSString stringWithFormat:@"        Peer: %@", v9];
  [v8 addObject:v10];

  unsigned int v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  unint64_t v12 = [v5 configuration];
  BOOL v13 = [v12 accessoryConfigData];
  uint64_t v14 = sub_10002D648(v13, 0);
  uint64_t v15 = +[NSString stringWithFormat:@"        Config blob: %@", v14];
  [v11 addObject:v15];
}

void sub_1001ACCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001ACD20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_super v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v30 = v5;
  uint64_t v8 = +[NSString stringWithFormat:@"    [%@]", v5];
  [v7 addObject:v8];

  unint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v10 = [v6 listeners];
  id v11 = [v10 count];
  unsigned int v12 = [v6 connectionState] - 1;
  if (v12 > 5) {
    BOOL v13 = "Idle";
  }
  else {
    BOOL v13 = off_100856DA0[(char)v12];
  }
  id v14 = [v6 numCharacteristicsLeftToRead];
  if ([v6 readingMultiConfigCharacteristics]) {
    uint64_t v15 = "multi-config";
  }
  else {
    uint64_t v15 = "single-config";
  }
  double v16 = *(double *)(a1 + 40);
  [v6 initTime];
  double v18 = v17;
  double v19 = *(double *)(a1 + 40);
  [v6 timeOfLatestConnectionState];
  uint64_t v21 = +[NSString stringWithFormat:@"        Listeners: %d. Connection state: %s (%d %s characteristics left to read). Age: total %.2f s, in-state %.2f s", v11, v13, v14, v15, v16 - v18, v19 - v20];
  [v9 addObject:v21];

  uint64_t v22 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  int v23 = [v6 resultConfigCharacteristics];
  uint64_t v24 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"        Result: %d blobs", [v23 count]);
  [v22 addObject:v24];

  __int16 v25 = [v6 resultConfigCharacteristics];
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1001AD06C;
  v32[3] = &unk_100856C50;
  v32[4] = *(void *)(a1 + 32);
  [v25 enumerateObjectsUsingBlock:v32];

  uint64_t v26 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  __int16 v27 = [v6 cachedConfigCharacteristics];
  unsigned int v28 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"        Cached: %d blobs", [v27 count]);
  [v26 addObject:v28];

  unsigned int v29 = [v6 cachedConfigCharacteristics];
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  void v31[2] = sub_1001AD114;
  v31[3] = &unk_100856C50;
  __n128 v31[4] = *(void *)(a1 + 32);
  [v29 enumerateObjectsUsingBlock:v31];
}

void sub_1001AD020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1001AD06C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  sub_10002D648(a2, 0);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = +[NSString stringWithFormat:@"            Blob: %@", v4];
  [v2 addObject:v3];
}

void sub_1001AD0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001AD114(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  sub_10002D648(a2, 0);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = +[NSString stringWithFormat:@"            Blob: %@", v4];
  [v2 addObject:v3];
}

void sub_1001AD19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001AD6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_1001AD7E4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_1001AD828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001AD838(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_1001AD87C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AD9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001AD9F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:v3];
  id v5 = [v4 listener];

  if (v5)
  {
    id v6 = [v5 getQueueForInputingData];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1001ADB0C;
    v7[3] = &unk_100846588;
    id v8 = v5;
    id v9 = *(id *)(a1 + 40);
    dispatch_async(v6, v7);
  }
}

void sub_1001ADAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001ADB0C(uint64_t a1)
{
  return [*(id *)(a1 + 32) accessoryGATTServiceFailedWithError:*(void *)(a1 + 40)];
}

void sub_1001ADC50(_Unwind_Exception *a1)
{
  objc_super v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1001ADE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001ADED0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = [v5 listeners];
  id v7 = [v6 count];

  if (!v7) {
    [*(id *)(a1 + 32) addObject:v8];
  }
}

void sub_1001ADF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001AE0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001AE0D8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _connectToPeer:a2];
}

void sub_1001AE31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AE5CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AE820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AEC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1001AECF8(id a1, CBService *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(CBService *)a2 UUID];
  id v5 = +[CBUUID UUIDWithString:@"48fe3e40-0817-4bb2-8633-3073689c2dba"];
  unsigned __int8 v6 = [v4 isEqual:v5];

  return v6;
}

void sub_1001AED64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001AF310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1001AF444(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = [v8 UUID];
  id v4 = +[CBUUID UUIDWithString:@"1176cf7b-bed2-4690-bd69-5f34001e820c"];
  unsigned int v5 = [v3 isEqual:v4];

  if (v5)
  {
    [*(id *)(a1 + 32) readValueForCharacteristic:v8];
    unsigned __int8 v6 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:*(void *)(a1 + 48)];
    [v6 setReadingMultiConfigCharacteristics:1];

    id v7 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:*(void *)(a1 + 48)];
    [v7 setNumCharacteristicsLeftToRead:[v7 numCharacteristicsLeftToRead] + 1];
  }
}

void sub_1001AF528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001AF55C(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 UUID];
  id v4 = +[CBUUID UUIDWithString:@"95e8d9d5-d8ef-4721-9a4e-807375f53328"];
  unsigned int v5 = [v3 isEqual:v4];

  if (v5)
  {
    [*(id *)(a1 + 32) readValueForCharacteristic:v7];
    unsigned __int8 v6 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:*(void *)(a1 + 48)];
    [v6 setNumCharacteristicsLeftToRead:[v6 numCharacteristicsLeftToRead] + 1];
  }
}

void sub_1001AF620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001B0174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001B033C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:v3];
  unsigned int v5 = [v4 listener];

  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    unsigned __int8 v6 = (uint64_t *)(a1 + 40);
    unsigned int v8 = [(id)*(v6 - 1) _isListener:v3 backgroundAuthorizedForPeer:v7 useCache:0];
    id v9 = qword_1008ABDE0;
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *v6;
        *(_DWORD *)std::string buf = 138412546;
        id v19 = v3;
        __int16 v20 = 2112;
        uint64_t v21 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#bt-accessory,BackgroundAuthorization: listener [%@] for peer [%@] authorized", buf, 0x16u);
      }
      id v11 = [v5 getQueueForInputingData];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1001B057C;
      v16[3] = &unk_1008473B0;
      unsigned int v12 = &v17;
      id v17 = v5;
      BOOL v13 = v16;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100417C64();
      }
      id v11 = [v5 getQueueForInputingData];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      _OWORD v14[2] = sub_1001B0584;
      v14[3] = &unk_1008473B0;
      unsigned int v12 = &v15;
      id v15 = v5;
      BOOL v13 = v14;
    }
    dispatch_async(v11, v13);
  }
}

void sub_1001B054C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001B057C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessoryGATTServiceAuthorizedBackgroundOperation];
}

void sub_1001B0584(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = +[NSError errorWithDomain:@"com.apple.NearbyInteraction" code:-5888 userInfo:0];
  [v1 accessoryGATTServiceFailedWithError:];
}

void sub_1001B05F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1001B0664(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    sub_10002DBC4(a1, a2);
    unsigned __int8 v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1001B06C8(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B0704(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x18u);
}

void sub_1001B0960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001B0A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001B0A54(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = dispatch_queue_create("com.apple.RosePowerManagerQueue", 0);
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 15000000000;
  sub_1001B1758(a1 + 24, a2);
  *(void *)(a1 + 56) = 0;
  sub_1002D5E34(a1 + 64);
  return a1;
}

void sub_1001B0ACC(_Unwind_Exception *a1)
{
  sub_100196E1C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B0AFC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100417D60();
  }
  id v2 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B0BBC;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_sync(v2, block);

  sub_100196E1C((void *)(a1 + 24));
  return a1;
}

void sub_1001B0BBC(uint64_t a1)
{
}

void sub_1001B0BC4(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    id v2 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: Cancelling fRoseIdleTimer", v4, 2u);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 56));
    id v3 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
  }
}

void sub_1001B0C50(NSObject **a1)
{
  uint64_t v1 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B0CC4;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_sync(v1, block);
}

uint64_t sub_1001B0CC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: initialize", v4, 2u);
  }
  uint64_t result = sub_1001B0D38();
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t sub_1001B0D38()
{
  v0 = +[NSUserDefaults standardUserDefaults];
  uint64_t v1 = [v0 dictionaryRepresentation];

  id v2 = [v1 objectForKey:@"roseDefaultPowerVoteCount"];
  if (!v2 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    if (sub_100222438())
    {
      unsigned __int8 v6 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v8) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: NonUIInstall build", (uint8_t *)&v8, 2u);
      }
    }
    goto LABEL_11;
  }
  uint64_t v3 = (uint64_t)[v2 integerValue];
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134217984;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: User Default Exists, roseDefaultPowerVoteCount = %ld", (uint8_t *)&v8, 0xCu);
  }
  if (v3 < 0)
  {
    size_t v5 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100417DA0(v5);
    }
LABEL_11:
    uint64_t v3 = 1;
  }

  return v3;
}

void sub_1001B0ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001B0F04(NSObject **a1, uint64_t a2)
{
  id v2 = *a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1001B0F78;
  v3[3] = &unk_100852BB8;
  void v3[4] = a1;
  void v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_1001B0F78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    double v4 = (double)*(uint64_t *)(a1 + 40) / 1000.0;
    int v5 = 134217984;
    double v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: idle power down timeout %.3f s", (uint8_t *)&v5, 0xCu);
  }
  *(void *)(v2 + 16) = 1000000 * *(void *)(a1 + 40);
}

void sub_1001B1050(NSObject **a1)
{
  uint64_t v1 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B10C4;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_1001B10C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: requestPower", v4, 2u);
  }
  sub_1001B0BC4(v1);
  int v3 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = v3 + 1;
  if (!v3) {
    sub_1002D5E44(v1 + 64);
  }
}

void sub_1001B1150(NSObject **a1)
{
  uint64_t v1 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B11C4;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_1001B11C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: releasePower", buf, 2u);
  }
  int v3 = *(_DWORD *)(v1 + 8);
  if (!v3) {
    goto LABEL_10;
  }
  *(_DWORD *)(v1 + 8) = v3 - 1;
  if (v3 <= 0) {
    sub_100417E20();
  }
  if (v3 == 1 && (sub_1001B12C8(v1) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100417E4C();
    }
    abort_report_np();
LABEL_10:
    double v4 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: releasePower fPowerVoteCount already 0, ignoring.", v5, 2u);
    }
  }
}

uint64_t sub_1001B12C8(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    double v16 = "startRosePowerOffIdleTimer";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRosePowerManager: %s", buf, 0xCu);
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  _OWORD v14[2] = sub_1001B157C;
  v14[3] = &unk_1008466D8;
  void v14[4] = a1;
  int v3 = objc_retainBlock(v14);
  sub_1001B0BC4(a1);
  dispatch_source_t v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)a1);
  int v5 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v4;

  double v6 = *(NSObject **)(a1 + 56);
  if (v6 && (int64_t v7 = *(void *)(a1 + 16)) != 0)
  {
    dispatch_time_t v8 = dispatch_time(0, v7);
    dispatch_source_set_timer(v6, v8, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
    uint64_t v9 = *(NSObject **)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001B1640;
    void v12[3] = &unk_100856F48;
    BOOL v13 = v3;
    dispatch_source_set_event_handler(v9, v12);
    dispatch_resume(*(dispatch_object_t *)(a1 + 56));

    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t sub_1001B14B4(NSObject **a1)
{
  uint64_t v5 = 0;
  double v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001B1560;
  v4[3] = &unk_100856F20;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1001B1560(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 8) > 0;
  return result;
}

void sub_1001B157C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100417ECC();
  }
  sub_1001B0BC4(v1);
  if (*(int *)(v1 + 8) >= 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100417E8C();
    }
    abort_report_np();
LABEL_9:
    sub_100027894();
  }
  uint64_t v2 = *(void *)(v1 + 48);
  if (!v2) {
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  sub_1002D5F70(v1 + 64);
}

uint64_t sub_1001B1640(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

NSObject ***sub_1001B1650(NSObject ***a1, NSObject **a2)
{
  *a1 = a2;
  int v3 = *a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B10C4;
  block[3] = &unk_1008466D8;
  void block[4] = a2;
  dispatch_sync(v3, block);
  return a1;
}

NSObject ***sub_1001B16D4(NSObject ***a1)
{
  uint64_t v2 = *a1;
  int v3 = **a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B11C4;
  block[3] = &unk_1008466D8;
  void block[4] = v2;
  dispatch_sync(v3, block);
  return a1;
}

uint64_t sub_1001B1758(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1001B17F0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008570E0[a1]);
}

void *sub_1001B1804@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100857138[a1]);
}

void *sub_1001B1818@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100857180[a1]);
}

void *sub_1001B182C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008571A0[a1]);
}

void sub_1001B19CC(_Unwind_Exception *a1)
{
  dispatch_source_t v4 = v3;

  _Unwind_Resume(a1);
}

char *sub_1001B19F4(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) allSessionsPrintableState];
  uint64_t v2 = sub_10002D834(@"NIServerSessionManager", v1);

  return v2;
}

void sub_1001B1A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001B1AF4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B1B7C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void sub_1001B210C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39)
{
  _Block_object_dispose((const void *)(v43 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B2224(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001B2234(uint64_t a1)
{
}

void sub_1001B223C(uint64_t a1)
{
  uint64_t v2 = [NIServerSessionContainer alloc];
  id v6 = +[NIServerClient delegateProxyWithConnection:*(void *)(a1 + 32)];
  uint64_t v3 = -[NIServerSessionContainer initWithClient:clientInfo:connection:authorizationManager:](v2, "initWithClient:clientInfo:connection:authorizationManager:");
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1001B22CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1001B22E0(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 56);
  *(void *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_1001B2318(uint64_t a1)
{
}

id sub_1001B2320(void *a1)
{
  [*(id *)(*(void *)(a1[6] + 8) + 40) setAppStateMonitor:a1[4]];
  [*(id *)(*(void *)(a1[6] + 8) + 40) setActivationGuard:a1[5]];
  [*(id *)(*(void *)(a1[6] + 8) + 40) setObservationRegistrar:a1[5]];
  [*(id *)(*(void *)(a1[6] + 8) + 40) setAggregateStateProvider:a1[5]];
  uint64_t v2 = *(void *)(a1[5] + 48);
  uint64_t v3 = *(void **)(*(void *)(a1[6] + 8) + 40);

  return _[v3 setNearbyObjectsCache:v2];
}

void sub_1001B23A4(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nisessmgr,connection interrupted for pid: %d", (uint8_t *)v5, 8u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleXPCDisconnection:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

void sub_1001B246C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001B2484(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nisessmgr,connection invalidated for pid: %d", (uint8_t *)v5, 8u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleXPCDisconnection:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

void sub_1001B254C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001B29E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  _Unwind_Resume(a1);
}

void sub_1001B2AD0(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nisessmgr,connection interrupted for pid: %d", (uint8_t *)v5, 8u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleObserverSessionXPCDisconnection:*(void *)(a1 + 32)];
}

void sub_1001B2B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001B2BA8(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nisessmgr,connection invalidated for pid: %d", (uint8_t *)v5, 8u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleObserverSessionXPCDisconnection:*(void *)(a1 + 32)];
}

void sub_1001B2C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001B2EB0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B3158(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B3390(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001B3598(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001B3A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36)
{
  _Unwind_Resume(a1);
}

void sub_1001B3B64(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = [v5 monitoredProcessName];
  if (v7)
  {
    char v8 = [v5 monitoredProcessName];
  }
  else
  {
    char v8 = @"???";
  }
  [v6 setObject:v8 forKey:v10];
  if (v7) {

  }
  uint64_t v9 = [v5 printableState];
  if (v9) {
    [*(id *)(a1 + 40) setObject:v9 forKey:v10];
  }
}

void sub_1001B3C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001B3C78(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = [*(id *)(a1 + 40) objectForKeyedSubscript:v10];
  if (v7)
  {
    char v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:v10];
  }
  else
  {
    char v8 = @"???";
  }
  uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"    [%@: %@] %d sessions", v10, v8, [v5 count]);
  [v6 addObject:v9];

  if (v7) {
}
  }

void sub_1001B3D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1001B3DA4(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = [*(id *)(a1 + 40) objectForKeyedSubscript:v10];
  if (v7)
  {
    char v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:v10];
  }
  else
  {
    char v8 = @"???";
  }
  uint64_t v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"    [%@: %@] %d observers", v10, v8, [v5 count]);
  [v6 addObject:v9];

  if (v7) {
}
  }

void sub_1001B3E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1001B3ED0(uint64_t a1, uint64_t a2, void *a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001B3F70;
  v4[3] = &unk_100857048;
  id v5 = *(id *)(a1 + 32);
  [a3 enumerateObjectsUsingBlock:v4];
}

void sub_1001B3F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001B3F70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSString stringWithFormat:@"    %@", a2];
  [v2 addObject:];
}

void sub_1001B3FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001B3FEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001B4104;
  void v9[3] = &unk_100857098;
  id v10 = *(id *)(a1 + 32);
  id v11 = v5;
  id v12 = *(id *)(a1 + 40);
  id v13 = v6;
  id v7 = v6;
  id v8 = v5;
  [v7 enumerateObjectsUsingBlock:v9];
}

void sub_1001B40D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1001B4104(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v19 = 0;
  __int16 v20 = &v19;
  uint64_t v21 = 0x3032000000;
  uint64_t v22 = sub_1001B2224;
  int v23 = sub_1001B2234;
  id v24 = 0;
  id v6 = [v5 connectionQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001B4398;
  block[3] = &unk_100856C00;
  double v18 = &v19;
  id v7 = v5;
  id v17 = v7;
  dispatch_sync(v6, block);

  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = [*(id *)(a1 + 48) objectForKeyedSubscript:v9];
  if (v10)
  {
    id v11 = [*(id *)(a1 + 48) objectForKeyedSubscript:*(void *)(a1 + 40)];
  }
  else
  {
    id v11 = @"???";
  }
  id v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"[%@: %@] Session %d of %d", v9, v11, (a3 + 1), [*(id *)(a1 + 56) count]);
  [v8 addObject:v12];

  if (v10) {
  id v13 = (void *)v20[5];
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  _OWORD v14[2] = sub_1001B43E4;
  v14[3] = &unk_100857048;
  id v15 = *(id *)(a1 + 32);
  [v13 enumerateObjectsUsingBlock:v14];
  [*(id *)(a1 + 32) addObject:&stru_100869B68];

  _Block_object_dispose(&v19, 8);
}

void sub_1001B4328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1001B4398(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) printableState];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001B43E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSString stringWithFormat:@"    %@", a2];
  [v2 addObject:];
}

void sub_1001B444C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001B457C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1001B45B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObservers:];
}

void sub_1001B466C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001B4684(uint64_t a1, uint64_t a2, void *a3)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = a3;
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v8, "supportsSessionObservers", (void)v10))
        {
          uint64_t v14 = *(void *)(a1 + 32);
          uint64_t v9 = +[NSArray arrayWithObjects:&v14 count:1];
          [v8 addObservers:v9];
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v10 objects:v15 count:16];
    }
    while (v5);
  }
}

void sub_1001B47C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001B48A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001B48B8(uint64_t a1, uint64_t a2, void *a3)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = a3;
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v8, "supportsSessionObservers", (void)v10))
        {
          uint64_t v14 = *(void *)(a1 + 32);
          uint64_t v9 = +[NSArray arrayWithObjects:&v14 count:1];
          [v8 removeObservers:v9];
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v10 objects:v15 count:16];
    }
    while (v5);
  }
}

void sub_1001B49F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1001B4A9C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008574E0[a1]);
}

void *sub_1001B4AB0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100857538[a1]);
}

void *sub_1001B4AC4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100857580[a1]);
}

void *sub_1001B4AD8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008575A0[a1]);
}

void sub_1001B4AEC(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  id v15 = a2;
  *(void *)a1 = off_1008571D0;
  *(void *)(a1 + 8) = off_100857250;
  *(void *)(a1 + 16) = off_100857288;
  *(void *)(a1 + 32) = 1018212795;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 850045863;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 144) = 850045863;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 850045863;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 850045863;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 850045863;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  id v16 = v15;
  *(void *)(a1 + 400) = v16;
  *(void *)(a1 + 408) = a4;
  *(void *)(a1 + 416) = a5;
  *(void *)(a1 + 424) = a6;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 432) = a7;
  id v17 = operator new(0x20uLL);
  void *v17 = off_1008573C0;
  v17[1] = sub_1001B5148;
  void v17[2] = 0;
  v17[3] = a1;
  v29[3] = v17;
  sub_1001B0AF8(a1 + 456, (uint64_t)v29);
  sub_100196E1C(v29);
  double v18 = (std::__shared_weak_count *)a3[1];
  uint64_t v27 = *a3;
  unsigned int v28 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (std::__shared_weak_count *)a8[1];
  uint64_t v25 = *a8;
  uint64_t v26 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100224280(a1 + 544, v16, &v27, a1 + 456, &v25);
  if (v26) {
    sub_10001A970(v26);
  }
  if (v28) {
    sub_10001A970(v28);
  }
  uint64_t v20 = a8[1];
  *(void *)(a1 + 2256) = *a8;
  *(void *)(a1 + 2264) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 2272) = 0;
  *(unsigned char *)(a1 + 2384) = 0;
  *(unsigned char *)(a1 + 2392) = 0;
  *(_WORD *)(a1 + 2485) = 0;
  *(_WORD *)(a1 + 2555) = 0;
  *(unsigned char *)(a1 + 2574) = 0;
  *(unsigned char *)(a1 + 2576) = 0;
  *(unsigned char *)(a1 + 2636) = 0;
  *(_WORD *)(a1 + 2640) = 0;
  uint64_t v21 = [PRSettingsObserver alloc];
  uint64_t v22 = +[PRGlobalDebugSettings sharedSettings];
  *(void *)(a1 + 2648) = [(PRSettingsObserver *)v21 initWithSettings:v22 queue:*(void *)(a1 + 400)];

  uint64_t v24 = a3[1];
  *(void *)(a1 + 2656) = *a3;
  *(void *)(a1 + 2664) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 2672) = 4;
  *(unsigned char *)(a1 + 2676) = 1;
  *(_DWORD *)(a1 + 2708) = 0;
  *(_OWORD *)(a1 + 2677) = 0u;
  *(_OWORD *)(a1 + 2693) = 0u;
  *(void *)(a1 + 2712) = 850045863;
  *(_WORD *)(a1 + 2900) = 0;
  *(unsigned char *)(a1 + 3050) = 0;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2752) = 0u;
  *(_OWORD *)(a1 + 2761) = 0u;
  sub_1002B5E80(a1 + 3056, v23);
  operator new();
}

void sub_1001B5014(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, std::mutex *a11, std::mutex *a12, std::mutex *a13, std::mutex *a14, std::condition_variable *a15, uint64_t a16, uint64_t a17)
{
}

void sub_1001B5148(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#roseprovider,powerManagerInvokePowerOffRose", v3, 2u);
  }
  sub_100235CA8(a1 + 544);
}

void sub_1001B51BC(uint64_t a1, int a2)
{
}

void sub_1001B51C8(uint64_t a1, int a2)
{
  id v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = "boot";
    if (a2) {
      id v5 = "DSLP";
    }
    int v6 = 136315138;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#roseprovider,#lpm powerOnDemand update. Use %s on demand", (uint8_t *)&v6, 0xCu);
  }
  sub_100228710(a1 + 544, a2);
}

void sub_1001B529C(uint64_t a1, unsigned char *a2, uint64_t a3)
{
}

void sub_1001B52A4(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  int v3 = a3;
  int v38 = 0;
  char v39 = 0;
  char v42 = 0;
  int v43 = a3;
  char v44 = BYTE4(a3);
  switch(*a2)
  {
    case 0:
      id v5 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: BootStarted", buf, 2u);
      }
      return;
    case 1:
      long long v12 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: BootError", buf, 2u);
      }
      int v7 = 5;
      goto LABEL_26;
    case 2:
      id v8 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: BootSuccessful", buf, 2u);
      }
      int v7 = 1;
      goto LABEL_26;
    case 3:
      uint64_t v9 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: AOPJobsReset", buf, 2u);
      }
      int v7 = 2;
      goto LABEL_26;
    case 4:
      int v6 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: Ready", buf, 2u);
      }
      sub_1001BD230((uint64_t *)(a1 + 3104), 0);
      int v7 = 3;
LABEL_26:
      int v38 = v7;
      goto LABEL_35;
    case 5:
      long long v13 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_WORD *)std::string buf = 0;
      uint64_t v14 = "#roseprovider,Got RoseState Event: RuntimeError";
      break;
    case 6:
      long long v13 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_WORD *)std::string buf = 0;
      uint64_t v14 = "#roseprovider,Got RoseState Event: FirmwareCrash";
      break;
    case 7:
      if (!BYTE4(a3)) {
        sub_1004180D8();
      }
      sub_100004950(buf, off_1008575C0[(int)a3]);
      long long v10 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        long long v11 = buf;
        if (v29 < 0) {
          long long v11 = *(uint8_t **)buf;
        }
        *(_DWORD *)uint64_t v45 = 136315138;
        int64_t v46 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got RoseState Event: RegulatoryDisallow, Reason: %s", v45, 0xCu);
      }
      int v38 = 6;
      if (v3 == 5)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1001BD280;
        block[3] = &unk_1008466D8;
        void block[4] = a1;
        if (qword_1008A3E50 != -1) {
          dispatch_once(&qword_1008A3E50, block);
        }
      }
      if (SHIBYTE(v29) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_35;
    default:
      goto LABEL_35;
  }
  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
LABEL_32:
  int v38 = 5;
  id v15 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#roseprovider,Clearing inflight sync commands state variables.", buf, 2u);
  }
  std::mutex::lock((std::mutex *)(a1 + 144));
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 32));
  std::mutex::unlock((std::mutex *)(a1 + 144));
LABEL_35:
  sub_1001BD9F8((uint64_t)buf, (uint64_t)&v38);
  uint64_t v16 = *(void *)(a1 + 408);
  id v17 = *(uint8_t **)buf;
  int v18 = v28;
  sub_1001752CC((uint64_t)&v19, (uint64_t)&v29);
  long long v24 = v34;
  long long v25 = v35;
  v26[0] = v36[0];
  *(_OWORD *)((char *)v26 + 13) = *(_OWORD *)((char *)v36 + 13);
  sub_100187EB0(v16, (uint64_t *)&v17);
  if (v23 && v22 && v21 < 0) {
    operator delete(__p);
  }
  if (v33 && v32 && v31 < 0) {
    operator delete(v30);
  }
  if (v42 && v41 < 0) {
    operator delete(v40);
  }
}

void sub_1001B5788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a21 && a19 && a18 < 0) {
    operator delete(__p);
  }
  if (a42 && a40 && a39 < 0) {
    operator delete(a34);
  }
  if (*(unsigned char *)(v42 - 96))
  {
    if (*(char *)(v42 - 97) < 0) {
      operator delete(*(void **)(v42 - 120));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B5824()
{
}

void sub_1001B582C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  switch(*(_DWORD *)(v1 + 8))
  {
    case 0xE0:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004181A4();
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418138();
      }
      int v10 = *(unsigned __int8 *)(v2 + 12);
      if (*(unsigned char *)(v2 + 12))
      {
        if (v10 != 2)
        {
          if (v10 == 1)
          {
            sub_100176EE4((uint64_t)__p, *(unsigned __int16 *)(v2 + 13), v2 + 23, v5, v6, v7, v8, v9, *(double *)v2);
            uint64_t v11 = *(void *)(v3 + 408);
            v355[10] = v311;
            v355[11] = v312;
            v355[12] = v313;
            uint64_t v356 = v314;
            v355[6] = *(_OWORD *)v309;
            v355[7] = *(_OWORD *)&v309[16];
            v355[8] = *(_OWORD *)&v309[32];
            v355[9] = v310;
            v355[2] = *(_OWORD *)v306;
            v355[3] = *(_OWORD *)&v306[16];
            v355[4] = v307;
            v355[5] = v308;
            v355[0] = *(_OWORD *)__p;
            v355[1] = *(_OWORD *)&__p[2];
            sub_1001BC9A0(v3, v11, v355);
          }
          return;
        }
        sub_10017CCA4(v2 + 23, 0, v4, v5, v6, v7, v8, v9, (uint64_t)v345);
        sub_100176E04(__p, 0, *(unsigned __int16 *)(v2 + 13), v345, *(double *)v2);
        uint64_t v146 = *(void *)(v3 + 408);
        sub_1001BD440((uint64_t)v343, (uint64_t)__p);
        sub_1001BD38C(v3, v146, (uint64_t)v343);
        uint64_t v147 = v343;
      }
      else
      {
        sub_10017C4C8(v2 + 23, 0, v4, v5, v6, v7, v8, v9, (uint64_t)v345);
        sub_100176E04(__p, 0, *(unsigned __int16 *)(v2 + 13), v345, *(double *)v2);
        uint64_t v148 = *(void *)(v3 + 408);
        sub_1001BD440((uint64_t)v344, (uint64_t)__p);
        sub_1001BD38C(v3, v148, (uint64_t)v344);
        uint64_t v147 = v344;
      }
      sub_1001500AC(v147);
      sub_1001500AC(__p);
      char v21 = *(void **)&v345[40];
      if (!*(void *)&v345[40]) {
        return;
      }
      *(void *)&v345[48] = *(void *)&v345[40];
      goto LABEL_283;
    case 0xE1:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418104();
      }
      *(double *)std::__fs::filesystem::directory_entry::_Path __p = (double)std::chrono::steady_clock::now().__d_.__rep_;
      LODWORD(__p[1]) = 2;
      LOBYTE(__p[2]) = 0;
      BYTE8(v307) = 0;
      LOBYTE(v308) = 0;
      BYTE12(v308) = 0;
      v309[0] = 0;
      v309[4] = 0;
      *(_OWORD *)&v309[8] = *(_OWORD *)(v2 + 12);
      *(_OWORD *)&v309[24] = *(_OWORD *)(v2 + 28);
      *(_DWORD *)&v309[40] = *(_DWORD *)(v2 + 44);
      v309[44] = 1;
      uint64_t v72 = *(void *)(v3 + 408);
      uint64_t v185 = (uint64_t)__p[0];
      int v186 = 2;
      sub_1001752CC((uint64_t)&v187, (uint64_t)&__p[2]);
      long long v192 = v308;
      long long v193 = *(_OWORD *)v309;
      v194[0] = *(_OWORD *)&v309[16];
      *(_OWORD *)((char *)v194 + 13) = *(_OWORD *)&v309[29];
      sub_100187EB0(v72, &v185);
      if (!v191 || !v190 || (v189 & 0x80000000) == 0) {
        goto LABEL_135;
      }
      uint64_t v42 = v188;
      goto LABEL_134;
    case 0xE2:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004181D8();
      }
      timespec v48 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v49 = *(unsigned __int16 *)(v2 + 12);
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got request status ticket id: %d", (uint8_t *)__p, 8u);
      }
      sub_1001BDA70((uint64_t)v345, *(void *)(v2 + 12));
      *(double *)std::__fs::filesystem::directory_entry::_Path __p = (double)std::chrono::steady_clock::now().__d_.__rep_;
      LODWORD(__p[1]) = 1;
      LOBYTE(__p[2]) = 0;
      BYTE8(v307) = 0;
      *(void *)&long long v308 = *(void *)v345;
      DWORD2(v308) = *(_DWORD *)&v345[8];
      BYTE12(v308) = 1;
      v309[0] = 0;
      v309[4] = 0;
      v309[8] = 0;
      v309[44] = 0;
      uint64_t v50 = *(void *)(v3 + 408);
      uint64_t v176 = (uint64_t)__p[0];
      int v177 = 1;
      sub_1001752CC((uint64_t)v178, (uint64_t)&__p[2]);
      long long v182 = v308;
      long long v183 = *(_OWORD *)v309;
      v184[0] = *(_OWORD *)&v309[16];
      *(_OWORD *)((char *)v184 + 13) = *(_OWORD *)&v309[29];
      sub_100187EB0(v50, &v176);
      if (!v181 || !v180 || (v179 & 0x80000000) == 0) {
        goto LABEL_135;
      }
      uint64_t v42 = (void *)v178[2];
      goto LABEL_134;
    case 0xE3:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_10041881C();
      }
      if (*(unsigned char *)(v2 + 12) == 1)
      {
        v220[1] = 0;
        v220[0] = 0;
        *(void *)&long long v221 = 0;
        sub_10003AD14(v220, (const void *)(v2 + 31), v2 + 99, 0x44uLL);
        double v121 = *(double *)v2;
        __int16 v122 = *(_WORD *)(v2 + 13);
        sub_1003A1AC0(v220, v123, v124, v125, v126, v127, v128, v129, (uint64_t)v345);
        v342[18] = *(_OWORD *)v345;
        LODWORD(__p[0]) = 8;
        LOBYTE(__p[1]) = 0;
        char v315 = 0;
        LOBYTE(v316) = 0;
        BYTE8(v329) = 0;
        LOBYTE(v330) = 0;
        char v336 = 0;
        v337[0] = 0;
        v337[128] = 0;
        v337[136] = 0;
        v337[216] = 0;
        v337[224] = 0;
        v337[328] = 0;
        v338[0].n128_u8[0] = 0;
        char v341 = 0;
        LOBYTE(v342[0]) = 0;
        BYTE8(v342[16]) = 0;
        *(double *)&v342[17] = v121;
        WORD4(v342[17]) = v122;
        v342[19] = *(_OWORD *)&v345[16];
        v342[20] = *(_OWORD *)&v345[32];
        *(void *)&v342[21] = *(void *)&v345[48];
        BYTE8(v342[21]) = 1;
        LOBYTE(v342[22]) = 0;
        LOBYTE(v342[25]) = 0;
        BYTE8(v342[25]) = 0;
        BYTE8(v342[29]) = 0;
        uint64_t v130 = *(void *)(v3 + 408);
        sub_1001BD524((uint64_t)v303, (uint64_t)__p);
        sub_100187FBC(v130, v303);
        sub_100188190((uint64_t)v303);
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_10041820C();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004187E8();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100418538();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004184CC();
        }
        int v131 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100418778(v131, v132, v133, v134, v135, v136, v137, v138);
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100418710();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004186A8();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100418640();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004185D8();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
LABEL_261:
        }
          sub_10041820C();
      }
      else
      {
        if (*(unsigned char *)(v2 + 12)) {
          return;
        }
        v220[1] = 0;
        v220[0] = 0;
        *(void *)&long long v221 = 0;
        sub_10003AD14(v220, (const void *)(v2 + 31), v2 + 127, 0x60uLL);
        double v51 = *(double *)v2;
        __int16 v52 = *(_WORD *)(v2 + 13);
        sub_1003A095C(v220, v53, v54, v55, v56, v57, v58, v59, (uint64_t)v345);
        *(_OWORD *)((char *)&v342[7] + 6) = v346;
        *(_OWORD *)((char *)&v342[8] + 6) = v347;
        *(_OWORD *)((char *)&v342[9] + 6) = *(_OWORD *)v348;
        *(_OWORD *)((char *)&v342[3] + 6) = *(_OWORD *)&v345[38];
        *(_OWORD *)((char *)&v342[4] + 6) = *(_OWORD *)&v345[54];
        *(_OWORD *)((char *)&v342[5] + 6) = *(_OWORD *)&v345[70];
        *(_OWORD *)((char *)&v342[6] + 6) = *(_OWORD *)&v345[86];
        *(_OWORD *)((char *)&v342[1] + 6) = *(_OWORD *)&v345[6];
        *(_OWORD *)((char *)&v342[2] + 6) = *(_OWORD *)&v345[22];
        v342[10] = *(_OWORD *)&v348[10];
        LODWORD(__p[0]) = 7;
        LOBYTE(__p[1]) = 0;
        char v315 = 0;
        LOBYTE(v316) = 0;
        BYTE8(v329) = 0;
        LOBYTE(v330) = 0;
        char v336 = 0;
        v337[0] = 0;
        v337[128] = 0;
        v337[136] = 0;
        v337[216] = 0;
        v337[224] = 0;
        v337[328] = 0;
        v338[0].n128_u8[0] = 0;
        char v341 = 0;
        *(double *)v342 = v51;
        WORD4(v342[0]) = v52;
        LODWORD(v342[1]) = *(_DWORD *)v345;
        WORD2(v342[1]) = *(_WORD *)&v345[4];
        v342[11] = v349;
        v342[12] = v350;
        v342[13] = v351;
        v342[14] = v352;
        v342[15] = v353;
        *(void *)&v342[16] = v354;
        BYTE8(v342[16]) = 1;
        LOBYTE(v342[17]) = 0;
        BYTE8(v342[21]) = 0;
        LOBYTE(v342[22]) = 0;
        LOBYTE(v342[25]) = 0;
        BYTE8(v342[25]) = 0;
        BYTE8(v342[29]) = 0;
        uint64_t v60 = *(void *)(v3 + 408);
        sub_1001BD524((uint64_t)v304, (uint64_t)__p);
        sub_100187FBC(v60, v304);
        sub_100188190((uint64_t)v304);
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_10041820C();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004185A4();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100418538();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004184CC();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100418460();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004183F4();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100418388();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_10041831C();
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004182B0();
        }
        __int16 v61 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100418240(v61, v62, v63, v64, v65, v66, v67, v68);
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_261;
        }
      }
      sub_100188190((uint64_t)__p);
      char v21 = v220[0];
      if (v220[0])
      {
        v220[1] = v220[0];
LABEL_283:
        operator delete(v21);
      }
      return;
    case 0xE4:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418850();
      }
      size_t v33 = *(void *)(v2 + 140);
      uint64_t v302 = 0;
      long long v301 = 0uLL;
      sub_10003AD14(&v301, (const void *)(v2 + 28), v2 + 28 + v33, v33);
      sub_1003A73C4(v3 + 2672, (uint64_t)&v301, v345);
      if (v345[72])
      {
        *(_OWORD *)std::string::size_type v220 = *(_OWORD *)v345;
        uint64_t v34 = *(void *)&v345[40];
        long long v35 = *(_OWORD *)&v345[24];
        memset(&v345[24], 0, 48);
        LODWORD(__p[0]) = 3;
        uint64_t v331 = *(void *)&v345[16];
        LOBYTE(__p[1]) = 0;
        char v315 = 0;
        LOBYTE(v316) = 0;
        BYTE8(v329) = 0;
        long long v330 = *(_OWORD *)v345;
        long long v332 = v35;
        uint64_t v333 = v34;
        long long v221 = *(unint64_t *)&v345[16];
        long long v222 = 0uLL;
        long long v334 = *(_OWORD *)&v345[48];
        uint64_t v335 = *(void *)&v345[64];
        long long v224 = 0uLL;
        uint64_t v223 = 0;
        char v336 = 1;
        v337[0] = 0;
        v337[128] = 0;
        v337[136] = 0;
        v337[216] = 0;
        v337[224] = 0;
        v337[328] = 0;
        v338[0].n128_u8[0] = 0;
        char v341 = 0;
        LOBYTE(v342[0]) = 0;
        BYTE8(v342[16]) = 0;
        LOBYTE(v342[17]) = 0;
        BYTE8(v342[21]) = 0;
        LOBYTE(v342[22]) = 0;
        LOBYTE(v342[25]) = 0;
        BYTE8(v342[25]) = 0;
        BYTE8(v342[29]) = 0;
        sub_10016AE10((uint64_t)v220);
        uint64_t v36 = *(void *)(v3 + 408);
        sub_1001BD524((uint64_t)v300, (uint64_t)__p);
        sub_100187FBC(v36, v300);
        sub_100188190((uint64_t)v300);
        sub_100188190((uint64_t)__p);
      }
      sub_1001882E8((uint64_t)v345);
      goto LABEL_126;
    case 0xE5:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418A98();
      }
      unsigned int v37 = (std::mutex *)(v3 + 144);
      std::mutex::lock((std::mutex *)(v3 + 144));
      memset(v345, 0, 24);
      int v77 = *((_DWORD *)sub_100007D00() + 187);
      if (v77)
      {
        int v78 = (const void *)(v2 + 28);
        if (v77 == 1)
        {
          size_t v149 = *(unsigned __int8 *)(v2 + 68) - 27 + 68;
          memset(__p, 0, 24);
          sub_10003AD14(__p, v78, (uint64_t)v78 + v149, v149);
        }
        else
        {
          if (v77 != 2) {
            goto LABEL_288;
          }
          memset(__p, 0, 24);
          sub_10003AD14(__p, v78, v2 + 140, 0x70uLL);
        }
        *(_OWORD *)v345 = *(_OWORD *)__p;
        *(void **)&v345[16] = __p[2];
      }
      else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        sub_100418A64();
      }
LABEL_288:
      sub_1003D421C(v345, __p);
      sub_1001BE4D0(v3 + 2272);
      sub_1001BE514((void *)(v3 + 2272), (long long *)__p);
      *(unsigned char *)(v3 + 2384) = 1;
      sub_10000AED4((uint64_t)v306);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      atomic_store(1u, (unsigned __int8 *)(v3 + 24));
LABEL_291:
      std::condition_variable::notify_all((std::condition_variable *)(v3 + 32));
      if (*(void *)v345)
      {
        *(void *)&v345[8] = *(void *)v345;
        operator delete(*(void **)v345);
      }
LABEL_293:
      __int16 v142 = v37;
LABEL_294:
      std::mutex::unlock(v142);
      return;
    case 0xE6:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418B44();
      }
      size_t v79 = *(void *)(v2 + 140);
      memset(__p, 0, 24);
      sub_10003AD14(__p, (const void *)(v2 + 28), v2 + 28 + v79, v79);
      int v80 = *(_DWORD *)(v2 + 28) & 0x3FF;
      if (v80 == 521)
      {
        sub_1003A1C88(__p, (uint64_t)v345);
        __int16 v81 = (id)qword_1008ABDE0;
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
        {
          sub_10039E0F4((uint64_t)v345, (std::string *)v220);
          int v82 = (SBYTE7(v221) & 0x80u) == 0 ? v220 : (void **)v220[0];
          LODWORD(v301) = 136315138;
          *(void *)((char *)&v301 + 4) = v82;
          _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "#roseprovider,Coex Critical Event: %s", (uint8_t *)&v301, 0xCu);
          if (SBYTE7(v221) < 0) {
            operator delete(v220[0]);
          }
        }
      }
      else
      {
        __int16 v120 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100418ACC(v80, v120);
        }
      }
      goto LABEL_240;
    case 0xE7:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418B78();
      }
      size_t v69 = *(void *)(v2 + 15);
      uint64_t v302 = 0;
      long long v301 = 0uLL;
      sub_10003AD14(&v301, (const void *)(v2 + 39), v2 + 39 + v69, v69);
      if (*(unsigned char *)(v2 + 12) == 1)
      {
        sub_1003A1D78((uint64_t *)&v301, (uint64_t)v220);
        __int16 v70 = *(_WORD *)(v2 + 13);
        *(void *)v345 = *(void *)v2;
        *(_WORD *)&v345[8] = v70;
        *(_OWORD *)&v345[16] = *(_OWORD *)v220;
        *(_OWORD *)&v345[32] = v221;
        *(_OWORD *)&v345[48] = v222;
        *(_DWORD *)&v345[64] = v223;
        *(_OWORD *)&v345[72] = v224;
        *(void *)&v345[88] = v225;
        uint64_t v225 = 0;
        long long v224 = 0uLL;
        v345[96] = 0;
        BYTE2(v346) = 0;
        sub_1001BDAEC((uint64_t)__p, (uint64_t *)v345);
        uint64_t v71 = *(void *)(v3 + 408);
        sub_1001BD524((uint64_t)v219, (uint64_t)__p);
        sub_100187FBC(v71, v219);
        sub_100188190((uint64_t)v219);
        sub_100188190((uint64_t)__p);
        if (*(void *)&v345[72])
        {
          *(void *)&v345[80] = *(void *)&v345[72];
          operator delete(*(void **)&v345[72]);
        }
        if ((void)v224)
        {
          *((void *)&v224 + 1) = v224;
          operator delete((void *)v224);
        }
      }
LABEL_126:
      char v21 = (void *)v301;
      if (!(void)v301) {
        return;
      }
      *((void *)&v301 + 1) = v301;
      goto LABEL_283;
    case 0xE8:
      int v84 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v85 = *(void **)v2;
        LODWORD(__p[0]) = 134217984;
        *(void **)((char *)__p + 4) = v85;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "#roseprovider,Received SPMI Message. Mach absolute time: %f", (uint8_t *)__p, 0xCu);
      }
      size_t v86 = *(void *)(v2 + 76);
      memset(__p, 0, 24);
      sub_10003AD14(__p, (const void *)(v2 + 12), v2 + 12 + v86, v86);
      sub_100004950(v220, "SPMI Message raw bytes:\n");
      __int16 v87 = __p[0];
      int v88 = __p[1];
      sub_100004950(&v301, "===========\n");
      sub_1003E0810((uint64_t)v220, (uint64_t)v87, v88 - v87, 4u, (uint64_t)&v301);
      if (SHIBYTE(v302) < 0) {
        operator delete((void *)v301);
      }
      if (SBYTE7(v221) < 0) {
        operator delete(v220[0]);
      }
      __int16 v89 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v90 = v345;
        if (v345[23] < 0) {
          __int16 v90 = *(unsigned char **)v345;
        }
        LODWORD(v220[0]) = 136315138;
        *(void **)((char *)v220 + 4) = v90;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "#roseprovider,%s", (uint8_t *)v220, 0xCu);
      }
      if ((v345[23] & 0x80000000) != 0) {
        operator delete(*(void **)v345);
      }
LABEL_240:
      char v21 = __p[0];
      if (!__p[0]) {
        return;
      }
      __p[1] = __p[0];
      goto LABEL_283;
    case 0xE9:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418BAC();
      }
      unsigned int v37 = (std::mutex *)(v3 + 144);
      std::mutex::lock((std::mutex *)(v3 + 144));
      memset(v345, 0, 24);
      sub_10003AD14(v345, (const void *)(v2 + 28), v2 + 104, 0x4CuLL);
      sub_1003D5580((uint64_t)v345, (uint64_t)__p);
      if (*(unsigned char *)(v3 + 2636)) {
        *(unsigned char *)(v3 + 2636) = 0;
      }
      long long v38 = *(_OWORD *)&__p[2];
      *(_OWORD *)(v3 + 2576) = *(_OWORD *)__p;
      *(_OWORD *)(v3 + 2592) = v38;
      *(_OWORD *)(v3 + 2608) = *(_OWORD *)v306;
      *(_OWORD *)(v3 + 2620) = *(_OWORD *)&v306[12];
      *(unsigned char *)(v3 + 2636) = 1;
      atomic_store(1u, (unsigned __int8 *)(v3 + 25));
      goto LABEL_291;
    case 0xEA:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004188F0();
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418884();
      }
      sub_100176F88((uint64_t)__p, *(_WORD *)(v2 + 12), v2 + 14, *(double *)v2);
      uint64_t v83 = *(void *)(v3 + 408);
      int v272 = 4;
      v273[0] = 0;
      v273[552] = 0;
      v273[560] = 0;
      v273[776] = 0;
      v274[0] = 0;
      v274[72] = 0;
      long long v279 = v307;
      long long v280 = v308;
      long long v281 = *(_OWORD *)v309;
      long long v282 = *(_OWORD *)&v309[16];
      long long v275 = *(_OWORD *)__p;
      long long v276 = *(_OWORD *)&__p[2];
      long long v277 = *(_OWORD *)v306;
      long long v278 = *(_OWORD *)&v306[16];
      char v283 = 1;
      char v284 = 0;
      char v285 = 0;
      char v286 = 0;
      char v287 = 0;
      char v288 = 0;
      char v291 = 0;
      char v292 = 0;
      char v293 = 0;
      char v294 = 0;
      char v295 = 0;
      char v296 = 0;
      char v297 = 0;
      char v298 = 0;
      char v299 = 0;
      sub_100187FBC(v83, &v272);
      long long v13 = (void **)v273;
      uint64_t v14 = v274;
      if (!v291) {
        goto LABEL_170;
      }
      id v15 = v289;
      if (!v289) {
        goto LABEL_170;
      }
      v290 = v289;
      goto LABEL_169;
    case 0xEB:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418990();
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418924();
      }
      sub_100177030((uint64_t)__p, *(_WORD *)(v2 + 12), v2 + 14, *(double *)v2);
      uint64_t v22 = *(void *)(v3 + 408);
      int v249 = 5;
      v250[0] = 0;
      v250[552] = 0;
      v250[560] = 0;
      v250[776] = 0;
      v251[0] = 0;
      v251[72] = 0;
      v251[80] = 0;
      v251[208] = 0;
      long long v254 = *(_OWORD *)v306;
      long long v255 = *(_OWORD *)&v306[16];
      long long v256 = v307;
      long long v253 = *(_OWORD *)&__p[2];
      long long v252 = *(_OWORD *)__p;
      char v257 = 1;
      char v258 = 0;
      char v259 = 0;
      char v260 = 0;
      char v263 = 0;
      char v264 = 0;
      char v265 = 0;
      char v266 = 0;
      char v267 = 0;
      char v268 = 0;
      char v269 = 0;
      char v270 = 0;
      char v271 = 0;
      sub_100187FBC(v22, &v249);
      long long v13 = (void **)v250;
      uint64_t v14 = v251;
      if (!v263) {
        goto LABEL_170;
      }
      id v15 = v261;
      if (!v261) {
        goto LABEL_170;
      }
      std::string::size_type v262 = v261;
      goto LABEL_169;
    case 0xEC:
      sub_100418CF4();
    case 0xED:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418BE0();
      }
      if (*(unsigned char *)(v2 + 12) == 1)
      {
        __int16 v26 = *(_WORD *)(v2 + 13);
        double v27 = *(double *)v2;
        uint64_t v28 = *(unsigned __int16 *)(v2 + 15);
        LODWORD(__p[0]) = 9;
        LOBYTE(__p[1]) = 0;
        char v315 = 0;
        LOBYTE(v316) = 0;
        BYTE8(v329) = 0;
        LOBYTE(v330) = 0;
        char v336 = 0;
        v337[0] = 0;
        v337[128] = 0;
        v337[136] = 0;
        v337[216] = 0;
        v337[224] = 0;
        v337[328] = 0;
        v338[0].n128_u8[0] = 0;
        char v341 = 0;
        LOBYTE(v342[0]) = 0;
        BYTE8(v342[16]) = 0;
        LOBYTE(v342[17]) = 0;
        BYTE8(v342[21]) = 0;
        LODWORD(v342[22]) = 0;
        WORD2(v342[22]) = v26;
        *((void *)&v342[22] + 1) = v28;
        LOBYTE(v342[23]) = 1;
        *((double *)&v342[23] + 1) = v27;
        LOBYTE(v342[24]) = 0;
        BYTE8(v342[24]) = 0;
        LOBYTE(v342[25]) = 1;
        BYTE8(v342[25]) = 0;
        BYTE8(v342[29]) = 0;
        uint64_t v29 = *(void *)(v3 + 408);
        sub_1001BD524((uint64_t)v218, (uint64_t)__p);
        sub_100187FBC(v29, v218);
        sub_100188190((uint64_t)v218);
        sub_100188190((uint64_t)__p);
      }
      return;
    case 0xEE:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418C14();
      }
      size_t v16 = *(unsigned __int8 *)(v2 + 74);
      memset(v345, 0, 24);
      sub_10003AD14(v345, (const void *)(v2 + 75), v2 + 75 + v16, v16);
      __int16 v17 = *(_WORD *)(v2 + 12);
      double v18 = *(double *)v2;
      uint64_t v19 = *(void *)(v2 + 50);
      LOWORD(__p[0]) = v17;
      memset(&__p[1], 0, 24);
      sub_10016D488(&__p[1], *(const void **)v345, *(uint64_t *)&v345[8], *(void *)&v345[8] - *(void *)v345);
      *(double *)v306 = v18;
      *(void *)&v306[8] = v19;
      std::mutex::lock((std::mutex *)(v3 + 80));
      uint64_t v20 = *(void *)(v3 + 440);
      if (v20) {
        (*(void (**)(uint64_t, void **))(*(void *)v20 + 16))(v20, __p);
      }
      std::mutex::unlock((std::mutex *)(v3 + 80));
      if (__p[1])
      {
        __p[2] = __p[1];
        operator delete(__p[1]);
      }
      char v21 = *(void **)v345;
      if (!*(void *)v345) {
        return;
      }
      *(void *)&v345[8] = *(void *)v345;
      goto LABEL_283;
    case 0xEF:
      std::mutex::lock((std::mutex *)(v0 + 144));
      if (*(unsigned char *)(v3 + 2485)) {
        *(unsigned char *)(v3 + 2485) = 0;
      }
      long long v91 = *(_OWORD *)(v2 + 28);
      *(_OWORD *)(v3 + 2392) = *(_OWORD *)(v2 + 12);
      *(_OWORD *)(v3 + 2408) = v91;
      long long v92 = *(_OWORD *)(v2 + 44);
      long long v93 = *(_OWORD *)(v2 + 60);
      long long v94 = *(_OWORD *)(v2 + 76);
      *(_OWORD *)(v3 + 2469) = *(_OWORD *)(v2 + 89);
      *(_OWORD *)(v3 + 2440) = v93;
      *(_OWORD *)(v3 + 2456) = v94;
      *(_OWORD *)(v3 + 2424) = v92;
      *(unsigned char *)(v3 + 2485) = 1;
      std::condition_variable::notify_all((std::condition_variable *)(v3 + 32));
      int v95 = (std::mutex *)(v3 + 144);
LABEL_187:
      std::mutex::unlock(v95);
      return;
    case 0xF0:
      __int16 v73 = (_OWORD *)(v1 + 12);
      unsigned int v74 = *(unsigned __int8 *)(v1 + 12);
      __int16 v75 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        if ((v74 - 1) > 3u) {
          int v76 = "GetKeyResponse";
        }
        else {
          int v76 = off_1008575F0[(char)(v74 - 1)];
        }
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = (void *)v76;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got alisha key - subtype %s", (uint8_t *)__p, 0xCu);
      }
      if (v74 > 4) {
        return;
      }
      if (v74 == 2) {
        sub_1001BDBFC((uint64_t)__p, *(double *)v2);
      }
      std::mutex::lock((std::mutex *)(v3 + 144));
      if (*(unsigned char *)(v3 + 2555)) {
        *(unsigned char *)(v3 + 2555) = 0;
      }
      *(_OWORD *)(v3 + 2486) = *v73;
      long long v139 = *(_OWORD *)(v2 + 28);
      long long v140 = *(_OWORD *)(v2 + 44);
      long long v141 = *(_OWORD *)(v2 + 60);
      *(void *)(v3 + 2547) = *(void *)(v2 + 73);
      *(_OWORD *)(v3 + 2518) = v140;
      *(_OWORD *)(v3 + 2534) = v141;
      *(_OWORD *)(v3 + 2502) = v139;
      *(unsigned char *)(v3 + 2555) = 1;
      std::condition_variable::notify_all((std::condition_variable *)(v3 + 32));
      __int16 v142 = (std::mutex *)(v3 + 144);
      goto LABEL_294;
    case 0xF1:
      int v97 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got ranging block update", (uint8_t *)__p, 2u);
      }
      int v98 = *(_DWORD *)(v2 + 15);
      if ((v98 - 24) < 2)
      {
        int v99 = *(void **)v2;
        LOWORD(__p[0]) = *(_WORD *)(v2 + 13);
        __p[1] = v99;
        operator new();
      }
      if (v98 == 16) {
        sub_1001BDCB4((uint64_t)__p, v2 + 12, *(double *)v2);
      }
      return;
    case 0xF2:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418C48();
      }
      double v30 = *(double *)v2;
      *(_OWORD *)((char *)&v342[27] + 2) = *(_OWORD *)(v2 + 12);
      *(_OWORD *)((char *)&v342[28] + 2) = *(_OWORD *)(v2 + 28);
      *(void *)&v342[29] = *(void *)(v2 + 42);
      LODWORD(__p[0]) = 10;
      LOBYTE(__p[1]) = 0;
      char v315 = 0;
      LOBYTE(v316) = 0;
      BYTE8(v329) = 0;
      LOBYTE(v330) = 0;
      char v336 = 0;
      v337[0] = 0;
      v337[128] = 0;
      v337[136] = 0;
      v337[216] = 0;
      v337[224] = 0;
      v337[328] = 0;
      v338[0].n128_u8[0] = 0;
      char v341 = 0;
      LOBYTE(v342[0]) = 0;
      BYTE8(v342[16]) = 0;
      LOBYTE(v342[17]) = 0;
      BYTE8(v342[21]) = 0;
      LOBYTE(v342[22]) = 0;
      LOBYTE(v342[25]) = 0;
      *((double *)&v342[25] + 1) = v30;
      LOBYTE(v342[26]) = 0;
      BYTE8(v342[26]) = 0;
      LOWORD(v342[27]) = WORD1(v342[27]);
      BYTE8(v342[29]) = 1;
      int v195 = 10;
      uint64_t v31 = *(void *)(v3 + 408);
      sub_1001751A0(v196, (uint64_t)&__p[1]);
      long long v207 = v326;
      long long v208 = v327;
      long long v209 = v328;
      long long v210 = v329;
      long long v203 = v322;
      long long v204 = v323;
      long long v205 = v324;
      long long v206 = v325;
      long long v199 = v318;
      long long v200 = v319;
      long long v201 = v320;
      long long v202 = v321;
      long long v197 = v316;
      long long v198 = v317;
      sub_1001881DC(v211, (uint64_t)&v330);
      memcpy(v212, v337, sizeof(v212));
      sub_1001751F8(v213, v338);
      memcpy(v217, v342, sizeof(v217));
      sub_100187FBC(v31, &v195);
      if (v216 && v214)
      {
        uint64_t v215 = v214;
        operator delete(v214);
      }
      sub_1001882E8((uint64_t)v211);
      sub_10015DC28((uint64_t)v196);
      if (v341 && v339)
      {
        v340 = v339;
        operator delete(v339);
      }
      sub_1001882E8((uint64_t)&v330);
      char v32 = &__p[1];
      goto LABEL_171;
    case 0xF3:
      __int16 v100 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got alisha range response", (uint8_t *)__p, 2u);
      }
      int v101 = *(void **)v2;
      LOWORD(__p[0]) = *(_WORD *)(v2 + 12);
      __p[1] = v101;
      operator new();
    case 0xF4:
      __int16 v96 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got alisha session stats", (uint8_t *)__p, 2u);
      }
      sub_1001BDD60((uint64_t)__p, v2 + 12, *(double *)v2);
    case 0xF5:
      uint64_t v104 = *(unsigned __int8 *)(v1 + 20);
      int v105 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v104;
        _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "#roseprovider,#aop-activity, AOP Activity summary report (part 1). Num jobs: %d", (uint8_t *)__p, 8u);
      }
      if (v104)
      {
        uint64_t v106 = 0;
        int v107 = (unsigned __int8 *)(v2 + 24);
        do
        {
          __int16 v108 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            int v111 = *(unsigned __int16 *)(v107 - 3);
            int v112 = *v107;
            if (!v110 & v109)
            {
              int v113 = "Alisha_CCC";
              switch(*(v107 - 1))
              {
                case 'd':
                  int v113 = "P2P";
                  break;
                case 'e':
                  int v113 = "PTS";
                  break;
                case 'g':
                  int v113 = "FiRa";
                  break;
                case 'h':
                  int v113 = "TestNMI";
                  break;
                case 'i':
                  int v113 = "NMI";
                  break;
                case 'j':
                  int v113 = "Alisha_ACWG";
                  break;
                default:
                  break;
              }
            }
            else
            {
              switch(*(v107 - 1))
              {
                case 0u:
                  int v113 = "GRBroadcastingBeacon";
                  break;
                case 1u:
                  int v113 = "GRSingleResponseSurvey";
                  break;
                case 2u:
                  int v113 = "GRTranspondingBeacon";
                  break;
                case 3u:
                  int v113 = "GRDoubleResponseSurvey";
                  break;
                case 4u:
                  int v113 = "GRSymmetricalMultiPeer";
                  break;
                case 5u:
                  int v113 = "GRNoDataSymmetricalSinglePeer";
                  break;
                default:
                  JUMPOUT(0);
              }
            }
            LODWORD(__p[0]) = 67109890;
            HIDWORD(__p[0]) = v106;
            LOWORD(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 2) = v111;
            HIWORD(__p[1]) = 1024;
            LODWORD(__p[2]) = v112;
            WORD2(__p[2]) = 2080;
            *(void **)((char *)&__p[2] + 6) = (void *)v113;
            _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "#roseprovider,#aop-activity, [Job #%d] ticket id: [%d], is ranging: [%u], type: [%s]", (uint8_t *)__p, 0x1Eu);
          }
          ++v106;
          v107 += 4;
        }
        while (v104 != v106);
      }
      unsigned int v37 = (std::mutex *)(v3 + 144);
      std::mutex::lock((std::mutex *)(v3 + 144));
      if (*(unsigned char *)(v3 + 2900)) {
        *(unsigned char *)(v3 + 2900) = 0;
      }
      long long v114 = *(_OWORD *)(v2 + 12);
      long long v115 = *(_OWORD *)(v2 + 28);
      long long v116 = *(_OWORD *)(v2 + 60);
      *(_OWORD *)(v3 + 2808) = *(_OWORD *)(v2 + 44);
      *(_OWORD *)(v3 + 2824) = v116;
      *(_OWORD *)(v3 + 2776) = v114;
      *(_OWORD *)(v3 + 2792) = v115;
      long long v117 = *(_OWORD *)(v2 + 76);
      long long v118 = *(_OWORD *)(v2 + 92);
      long long v119 = *(_OWORD *)(v2 + 108);
      *(_OWORD *)(v3 + 2884) = *(_OWORD *)(v2 + 120);
      *(_OWORD *)(v3 + 2856) = v118;
      *(_OWORD *)(v3 + 2872) = v119;
      *(_OWORD *)(v3 + 2840) = v117;
      *(unsigned char *)(v3 + 2900) = 1;
      goto LABEL_231;
    case 0xF6:
      char v39 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#roseprovider,#time-convert got time conversion state", (uint8_t *)__p, 2u);
      }
      BOOL v40 = *(unsigned __int8 *)(v2 + 12) == 1;
      *(double *)std::__fs::filesystem::directory_entry::_Path __p = (double)std::chrono::steady_clock::now().__d_.__rep_;
      LODWORD(__p[1]) = 4;
      LOBYTE(__p[2]) = 0;
      BYTE8(v307) = 0;
      LOBYTE(v308) = 0;
      BYTE12(v308) = 0;
      *(_DWORD *)v309 = v40;
      v309[4] = 1;
      v309[8] = 0;
      v309[44] = 0;
      uint64_t v41 = *(void *)(v3 + 408);
      uint64_t v167 = (uint64_t)__p[0];
      int v168 = 4;
      sub_1001752CC((uint64_t)v169, (uint64_t)&__p[2]);
      long long v173 = v308;
      long long v174 = *(_OWORD *)v309;
      v175[0] = *(_OWORD *)&v309[16];
      *(_OWORD *)((char *)v175 + 13) = *(_OWORD *)&v309[29];
      sub_100187EB0(v41, &v167);
      if (!v172 || !v171 || (v170 & 0x80000000) == 0) {
        goto LABEL_135;
      }
      uint64_t v42 = (void *)v169[2];
LABEL_134:
      operator delete(v42);
LABEL_135:
      if (!BYTE8(v307) || !v306[24] || (v306[23] & 0x80000000) == 0) {
        return;
      }
      char v21 = *(void **)v306;
      goto LABEL_283;
    case 0xF7:
      __int16 v102 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "#roseprovider,#time-convert got time conversion result", (uint8_t *)__p, 2u);
      }
      unsigned int v37 = (std::mutex *)(v3 + 144);
      std::mutex::lock((std::mutex *)(v3 + 144));
      if (*(unsigned char *)(v3 + 2574)) {
        *(unsigned char *)(v3 + 2574) = 0;
      }
      long long v103 = *(_OWORD *)(v2 + 12);
      *(_WORD *)(v3 + 2572) = *(_WORD *)(v2 + 28);
      *(_OWORD *)(v3 + 2556) = v103;
      *(unsigned char *)(v3 + 2574) = 1;
LABEL_231:
      std::condition_variable::notify_all((std::condition_variable *)(v3 + 32));
      goto LABEL_293;
    case 0xF8:
      int v23 = *(unsigned __int16 *)(v1 + 32);
      long long v24 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#roseprovider,Got LPEM enable response. Status: %d", (uint8_t *)__p, 8u);
      }
      if (v23)
      {
        long long v25 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
          sub_100418C7C(v23, v25);
        }
      }
      return;
    case 0xF9:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418A30();
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004189C4();
      }
      sub_1001770EC((uint64_t)__p, *(_WORD *)(v2 + 12), v2 + 14, *(double *)v2);
      uint64_t v12 = *(void *)(v3 + 408);
      int v226 = 11;
      v227[0] = 0;
      v227[552] = 0;
      v227[560] = 0;
      v227[776] = 0;
      v228[0] = 0;
      v228[72] = 0;
      v228[80] = 0;
      v228[208] = 0;
      v228[216] = 0;
      v228[296] = 0;
      long long v233 = v307;
      long long v234 = v308;
      long long v229 = *(_OWORD *)__p;
      long long v230 = *(_OWORD *)&__p[2];
      long long v231 = *(_OWORD *)v306;
      long long v232 = *(_OWORD *)&v306[16];
      uint64_t v235 = *(void *)v309;
      char v236 = 1;
      char v237 = 0;
      char v240 = 0;
      char v241 = 0;
      char v242 = 0;
      char v243 = 0;
      char v244 = 0;
      char v245 = 0;
      char v246 = 0;
      char v247 = 0;
      char v248 = 0;
      sub_100187FBC(v12, &v226);
      long long v13 = (void **)v227;
      uint64_t v14 = v228;
      if (!v240) {
        goto LABEL_170;
      }
      id v15 = v238;
      if (!v238) {
        goto LABEL_170;
      }
      v239 = v238;
LABEL_169:
      operator delete(v15);
LABEL_170:
      sub_1001882E8((uint64_t)v14);
      char v32 = v13;
LABEL_171:
      sub_10015DC28((uint64_t)v32);
      return;
    case 0xFA:
      unsigned int v37 = (std::mutex *)(v0 + 336);
      std::mutex::lock((std::mutex *)(v0 + 336));
      *(_WORD *)(v3 + 2640) = *(unsigned __int8 *)(v2 + 12) | 0x100;
      int v43 = *(unsigned __int8 *)(v2 + 14);
      char v44 = (id)qword_1008ABDE0;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(unsigned char *)(v3 + 2641)) {
          sub_10000AE44();
        }
        unint64_t v45 = *(char *)(v3 + 2640);
        if (v45 > 2) {
          int64_t v46 = "";
        }
        else {
          int64_t v46 = off_100857650[v45];
        }
        unint64_t v143 = *(char *)(v2 + 13);
        if (v143 > 3) {
          __int16 v144 = "";
        }
        else {
          __int16 v144 = off_100857610[v143];
        }
        int v145 = "Y";
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = (void *)v46;
        WORD2(__p[1]) = 2080;
        if (!v43) {
          int v145 = "N";
        }
        *(void **)((char *)&__p[1] + 6) = (void *)v144;
        HIWORD(__p[2]) = 2080;
        __p[3] = (void *)v145;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#roseprovider,#deep-slp DeepSleepReport state %s, lastReq %s successful? %s", (uint8_t *)__p, 0x20u);
      }

      goto LABEL_293;
    case 0xFB:
      if (*(void *)(v0 + 2256))
      {
        memset(__p, 0, 24);
        sub_1001BD32C(v0, (uint64_t)__p, *(double *)v1);
        sub_1002A3AC4(*(void *)(v3 + 2256), (uint64_t)__p, v2 + 12);
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418D20();
      }
      return;
    case 0xFC:
      if (*(unsigned char *)(v1 + 112) == 100)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100418DA8();
        }
      }
      else
      {
        if (*(void *)(v0 + 2256))
        {
          memset(__p, 0, 24);
          sub_1001BD32C(v0, (uint64_t)__p, *(double *)v1);
          sub_1002A382C(*(void *)(v3 + 2256), (uint64_t)__p, v2 + 12);
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100418E28();
        }
      }
      return;
    case 0xFD:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418EE0();
      }
      __p[0] = *(void **)v2;
      operator new();
    case 0xFE:
      if (*(void *)(v0 + 2256))
      {
        memset(__p, 0, 24);
        sub_1001BD32C(v0, (uint64_t)__p, *(double *)v1);
        sub_1002A3CBC(*(void *)(v3 + 2256), (uint64_t)__p, (unsigned __int16 *)(v2 + 12));
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100418F70();
      }
      return;
    case 0xFF:
      uint64_t v47 = (_OWORD *)(v1 + 14);
      switch(*(_WORD *)(v1 + 12))
      {
        case 0:
          if (*(void *)(v0 + 2256))
          {
            memset(__p, 0, 24);
            sub_1001BD32C(v0, (uint64_t)__p, *(double *)v1);
            sub_1002A3F18(*(void *)(v3 + 2256), (uint64_t)__p, v2 + 14);
          }
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
            sub_100419020();
          }
          break;
        case 1:
          std::mutex::lock((std::mutex *)(v0 + 144));
          if (*(unsigned char *)(v3 + 3050)) {
            *(unsigned char *)(v3 + 3050) = 0;
          }
          long long v160 = *(_OWORD *)(v2 + 30);
          *(_OWORD *)(v3 + 2901) = *v47;
          *(_OWORD *)(v3 + 2917) = v160;
          long long v161 = *(_OWORD *)(v2 + 46);
          long long v162 = *(_OWORD *)(v2 + 62);
          long long v163 = *(_OWORD *)(v2 + 94);
          *(_OWORD *)(v3 + 2965) = *(_OWORD *)(v2 + 78);
          *(_OWORD *)(v3 + 2981) = v163;
          *(_OWORD *)(v3 + 2933) = v161;
          *(_OWORD *)(v3 + 2949) = v162;
          long long v164 = *(_OWORD *)(v2 + 110);
          long long v165 = *(_OWORD *)(v2 + 126);
          long long v166 = *(_OWORD *)(v2 + 142);
          *(void *)(v3 + 3042) = *(void *)(v2 + 155);
          *(_OWORD *)(v3 + 3013) = v165;
          *(_OWORD *)(v3 + 3029) = v166;
          *(_OWORD *)(v3 + 2997) = v164;
          *(unsigned char *)(v3 + 3050) = 1;
          std::condition_variable::notify_all((std::condition_variable *)(v3 + 32));
          int v95 = (std::mutex *)(v3 + 144);
          goto LABEL_187;
        case 2:
          if (*(void *)(v0 + 2256))
          {
            memset(__p, 0, 24);
            sub_1001BD32C(v0, (uint64_t)__p, *(double *)v1);
            sub_1002A4174(*(void *)(v3 + 2256), (uint64_t)__p, v2 + 14);
          }
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
            sub_1004190BC();
          }
          break;
        case 3:
          int v150 = *(unsigned __int16 *)(v1 + 52);
          int v151 = *(unsigned __int16 *)(v1 + 54);
          int v152 = sub_100334B0C(*(unsigned __int16 *)(v1 + 43));
          sub_100333FC8(v152, v345);
          if (v345[23] >= 0) {
            uint64_t v153 = v345;
          }
          else {
            uint64_t v153 = *(const char **)v345;
          }
          int v154 = snprintf((char *)__p, 0x400uLL, "BI: %u RI: %u, %s", v150, v151, v153);
          if ((v345[23] & 0x80000000) != 0) {
            operator delete(*(void **)v345);
          }
          if (*(unsigned char *)(v2 + 20))
          {
            unint64_t v155 = 0;
            __int16 v156 = (__int16 *)(v2 + 92);
            do
            {
              double v157 = (double)*v156 / 3.19488e10;
              uint64_t v158 = snprintf((char *)__p + v154, 1024 - v154, " <RX: 0x%02x, SR: %.2f, ", *((unsigned __int8 *)v156 - 5), (double)*(v156 - 2) * 0.25)+ (uint64_t)v154;
              int v154 = snprintf((char *)__p + v158, 1024 - v158, "ZO: %u, LZ: %u, R: %.2fm>", *((unsigned __int8 *)v156 - 2), *((unsigned __int8 *)v156 - 1), v157 * 299792458.0)+ v158;
              ++v155;
              __int16 v156 = (__int16 *)((char *)v156 + 13);
            }
            while (v155 < *(unsigned __int8 *)(v2 + 20));
          }
          char v159 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v345 = 136315138;
            *(void *)&v345[4] = __p;
            _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEFAULT, "#roseprovider,ARD: %s", v345, 0xCu);
          }
          break;
        default:
          return;
      }
      return;
    default:
      return;
  }
}

void sub_1001B8154(_Unwind_Exception *a1)
{
}

id sub_1001B85D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2648);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001BD6E8;
  v6[3] = &unk_100857300;
  void v6[4] = a1;
  [v2 startObserving:PRDebugConfigArgDebugLevel observeImmediately:0 callback:v6];
  uint64_t v3 = *(void **)(a1 + 2648);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1001BD808;
  v5[3] = &unk_100857300;
  void v5[4] = a1;
  return [v3 startObserving:PRDebugConfigArgLeadingEdgeThresholds observeImmediately:0 callback:v5];
}

uint64_t sub_1001B86C4()
{
  return 1;
}

uint64_t sub_1001B86CC(uint64_t a1)
{
  return 1;
}

uint64_t sub_1001B8704(uint64_t a1)
{
  return 1;
}

uint64_t sub_1001B873C(uint64_t a1)
{
  return 1;
}

uint64_t sub_1001B8760(uint64_t a1)
{
  return 1;
}

void sub_1001B8784(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#roseprovider,onFirstUnlockNotification, performing first unlock operations", buf, 2u);
  }
  if ((sub_10022474C(a1 + 544) & 1) == 0)
  {
    uint64_t v3 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#roseprovider,onFirstUnlockNotification, attempting reactivation of Rose state machine", buf, 2u);
    }
    sub_100225458(a1 + 544, 2);
  }
  uint64_t v4 = *(void **)(a1 + 400);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1001B88A4;
  v5[3] = &unk_100857300;
  void v5[4] = a1;
  sub_1001FDEFC(v4, v5);
}

void sub_1001B88A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    sub_100004950(&v8, (char *)[v3 UTF8String]);
    uint64_t v6 = std::string::insert(&v8, 0, "AlishaLPEM FW Crash - ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::__fs::filesystem::directory_entry::_Path __p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_10022D2A8(v5 + 544, 3, (std::string::size_type)__p);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1001B8960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1001B89A0(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  return sub_10022D2A8(a1 + 544, a2, a3);
}

void sub_1001B89A8(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#roseprovider,networkConnectionUpdate, attempting reactivation of Rose state machine", buf, 2u);
    }
    sub_100225458(a1 + 544, 1);
    uint64_t v4 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#roseprovider,deregistering network connection listener", v5, 2u);
    }
    sub_100279C18(*(NSObject ***)(a1 + 3104), (uint64_t)qword_10089C870);
  }
}

uint64_t sub_1001B8A7C(uint64_t a1)
{
  *(void *)a1 = off_1008571D0;
  *(void *)(a1 + 8) = off_100857250;
  *(void *)(a1 + 16) = off_100857288;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100419148();
  }
  sub_1001BD230((uint64_t *)(a1 + 3104), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 2712));

  uint64_t v2 = *(void **)(a1 + 2680);
  if (v2)
  {
    *(void *)(a1 + 2688) = v2;
    operator delete(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 2664);
  if (v3) {
    sub_10001A970(v3);
  }

  sub_10000AE90(a1 + 2272);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 2264);
  if (v4) {
    sub_10001A970(v4);
  }
  sub_100224468(a1 + 544);
  sub_1001B0C4C(a1 + 456);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 448);
  if (v5) {
    sub_10001A970(v5);
  }

  std::mutex::~mutex((std::mutex *)(a1 + 336));
  std::mutex::~mutex((std::mutex *)(a1 + 272));
  std::mutex::~mutex((std::mutex *)(a1 + 208));
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 32));
  return a1;
}

uint64_t sub_1001B8BD0(uint64_t a1)
{
  return sub_1001B8A7C(a1 - 8);
}

uint64_t sub_1001B8BD8(uint64_t a1)
{
  return sub_1001B8A7C(a1 - 16);
}

void sub_1001B8BE0(uint64_t a1)
{
  sub_1001B8A7C(a1);

  operator delete();
}

void sub_1001B8C18(uint64_t a1)
{
  sub_1001B8A7C(a1 - 8);

  operator delete();
}

void sub_1001B8C54(uint64_t a1)
{
  sub_1001B8A7C(a1 - 16);

  operator delete();
}

uint64_t sub_1001B8C90(uint64_t a1)
{
  sub_1001B1650(&v5, (NSObject **)(a1 + 456));
  uint64_t v2 = a1 + 544;
  if (sub_100235A80(v2))
  {
    uint64_t v3 = sub_10022CA8C(v2);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041917C();
    }
    uint64_t v3 = 0;
  }
  sub_1001B16D4(&v5);
  return v3;
}

void sub_1001B8D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001B16D4((NSObject ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B8D34(uint64_t a1)
{
  return sub_10022635C(a1 + 544);
}

uint64_t sub_1001B8D3C(uint64_t a1, uint64_t a2)
{
  sub_1001B1650(&v13, (NSObject **)(a1 + 456));
  uint64_t v4 = a1 + 544;
  if (sub_100235A80(v4))
  {
    uint64_t v11 = sub_10022CB50(v4, a2, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004191B0();
    }
    uint64_t v11 = 0;
  }
  sub_1001B16D4(&v13);
  return v11;
}

void sub_1001B8DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001B16D4((NSObject ***)va);
  _Unwind_Resume(a1);
}

void sub_1001B8DE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_1001B1650(&v5, (NSObject **)(a1 + 456));
  uint64_t v4 = a1 + 544;
  if (sub_100235A80(v4))
  {
    sub_10022CBD4(v4, v3);
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_1004191E4();
  }
  sub_1001B16D4(&v5);
}

void sub_1001B8E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001B8E98(uint64_t a1, BOOL *a2)
{
  return sub_1002258D0(a1 + 544, a2);
}

uint64_t sub_1001B8EA0(uint64_t a1, unsigned char *a2)
{
  return sub_100228FE0(a1 + 544, a2);
}

uint64_t sub_1001B8EA8(uint64_t a1, int a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#roseprovider,_requestPowerChange shouldPowerOn %d", (uint8_t *)v6, 8u);
  }
  if (a2) {
    return sub_1001B8F74(a1);
  }
  sub_1001B1150((NSObject **)(a1 + 456));
  return 1;
}

uint64_t sub_1001B8F74(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#roseprovider,_ensureRosePowerOnAndReadySync", v6, 2u);
  }
  id v3 = (NSObject **)(a1 + 456);
  sub_1001B1050((NSObject **)(a1 + 456));
  uint64_t v4 = sub_100235A80(a1 + 544);
  if ((v4 & 1) == 0) {
    sub_1001B1150(v3);
  }
  return v4;
}

CFDataRef sub_1001B9008(uint64_t a1)
{
  sub_1001B1650(&v5, (NSObject **)(a1 + 456));
  uint64_t v2 = a1 + 544;
  if (sub_100235A80(v2))
  {
    CFDataRef v3 = sub_10022D674(v2);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419218();
    }
    CFDataRef v3 = 0;
  }
  sub_1001B16D4(&v5);
  return v3;
}

void sub_1001B9094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001B16D4((NSObject ***)va);
  _Unwind_Resume(a1);
}

void sub_1001B90A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int16 **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 > 0x23uLL)
  {
    CFDataRef v3 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_1001768DC(v2, v4, v5, v6, v7, v8, v9, v10);
      sub_1004192BC();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10041924C();
  }
}

void sub_1001B9180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001B9198(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v20 = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 24));
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  __int16 v17 = 0;
  uint64_t v18 = 0;
  BOOL v6 = sub_100228E08(a1 + 544, 0x25u, (uint64_t)&__p, (unint64_t *)&v20);
  if (__p)
  {
    __int16 v17 = __p;
    operator delete(__p);
  }
  if (!v6)
  {
    uint64_t v14 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x25u, &__p);
      sub_100419344();
    }

    sub_1001B90A8(v15, (uint64_t)&v20);
    goto LABEL_27;
  }
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  do
  {
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 24));
    if (v8) {
      goto LABEL_28;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v7.__d_.__rep_) {
      break;
    }
    v9.__d_.__rep_ = v7.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v9.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_)
      {
        if (v10.__d_.__rep_ < 1)
        {
          if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x8000000000000000;
            goto LABEL_18;
          }
        }
        else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 1000 * v10.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0;
      }
LABEL_16:
      if (v11 > (v9.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_19:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v12);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_18:
      v12.__d_.__rep_ = v11 + v9.__d_.__rep_;
      goto LABEL_19;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v7.__d_.__rep_);
  unsigned __int8 v13 = atomic_load((unsigned __int8 *)(a1 + 24));
  if (v13)
  {
LABEL_28:
    sub_10000B140(a3, a1 + 2272);
    goto LABEL_29;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100419310();
  }
LABEL_27:
  *a3 = 0;
  a3[112] = 0;
LABEL_29:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if (v20)
  {
    char v21 = v20;
    operator delete(v20);
  }
}

void sub_1001B93EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13, void *__p, uint64_t a15)
{
  std::mutex::unlock(a12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001B944C(uint64_t a1)
{
  if (!sub_100229860(a1 + 544) && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100419398();
  }
}

void sub_1001B949C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v36 = (std::mutex *)(a1 + 2712);
  char v37 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_1001B98EC((uint64_t)&v36, (uint64_t)&__lk);
  if (*(unsigned char *)(a1 + 2900)) {
    *(unsigned char *)(a1 + 2900) = 0;
  }
  if (*(unsigned char *)(a1 + 3050)) {
    *(unsigned char *)(a1 + 3050) = 0;
  }
  sub_1001B944C(a1);
  uint64_t v4 = 9;
  do
  {
    uint64_t v5 = &__src[v4];
    *(_WORD *)uint64_t v5 = 0;
    v5[3] = 0;
    v4 += 4;
  }
  while (v5 + 4 != &__src[113]);
  long long __dst = a2;
  memset(&__src[114], 0, 36);
  *(_WORD *)&__src[150] = -1;
  __src[152] = -127;
  uint64_t v6 = 153;
  do
  {
    std::chrono::steady_clock::time_point v7 = &__src[v6];
    *std::chrono::steady_clock::time_point v7 = 0;
    *(_WORD *)(v7 + 1) = -1;
    *(void *)(v7 + 3) = 0;
    *(_DWORD *)(v7 + 11) = 129;
    v6 += 15;
  }
  while (v7 + 15 != v34);
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  double v9 = (double)v8.__d_.__rep_ + 2000000000.0;
  double v10 = -9.22337204e18;
  if (v9 > -9.22337204e18) {
    double v10 = (double)v8.__d_.__rep_ + 2000000000.0;
  }
  if (v9 < 9.22337204e18) {
    uint64_t v11 = (uint64_t)v10;
  }
  else {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  while (!*(unsigned char *)(a1 + 2900))
  {
    if (v9 <= (double)std::chrono::steady_clock::now().__d_.__rep_) {
      goto LABEL_30;
    }
    v12.__d_.__rep_ = v11 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v12.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v13.__d_.__rep_)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 0;
        goto LABEL_25;
      }
      if (v13.__d_.__rep_ < 1)
      {
        if ((unint64_t)v13.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
          goto LABEL_24;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 0x8000000000000000;
      }
      else
      {
        if ((unint64_t)v13.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_25;
        }
LABEL_24:
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14 = 1000 * v13.__d_.__rep_;
LABEL_25:
        if (v14 > (v12.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v15.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_28:
          std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v15);
          std::chrono::steady_clock::now();
          goto LABEL_29;
        }
      }
      v15.__d_.__rep_ = v14 + v12.__d_.__rep_;
      goto LABEL_28;
    }
LABEL_29:
    if (v9 <= (double)std::chrono::steady_clock::now().__d_.__rep_)
    {
LABEL_30:
      if (!*(unsigned char *)(a1 + 2900))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
          sub_1004193CC();
        }
        goto LABEL_58;
      }
      break;
    }
  }
  long long v16 = *(_OWORD *)(a1 + 2856);
  *(_OWORD *)&__src[64] = *(_OWORD *)(a1 + 2840);
  *(_OWORD *)&__src[80] = v16;
  *(_OWORD *)&__src[96] = *(_OWORD *)(a1 + 2872);
  *(_OWORD *)&__src[108] = *(_OWORD *)(a1 + 2884);
  long long v17 = *(_OWORD *)(a1 + 2792);
  *(_OWORD *)std::random_device::result_type __src = *(_OWORD *)(a1 + 2776);
  *(_OWORD *)&__src[16] = v17;
  long long v18 = *(_OWORD *)(a1 + 2824);
  *(_OWORD *)&__src[32] = *(_OWORD *)(a1 + 2808);
  *(_OWORD *)&__src[48] = v18;
  *(unsigned char *)(a1 + 2900) = 0;
  double v19 = (double)std::chrono::steady_clock::now().__d_.__rep_ + 2000000000.0;
  double v20 = -9.22337204e18;
  if (v19 > -9.22337204e18) {
    double v20 = v19;
  }
  if (v19 < 9.22337204e18) {
    uint64_t v21 = (uint64_t)v20;
  }
  else {
    uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
  }
  while (2)
  {
    if (*(unsigned char *)(a1 + 3050)) {
      goto LABEL_53;
    }
    if (v19 <= (double)std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    v22.__d_.__rep_ = v21 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v22.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v23.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v23.__d_.__rep_)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24 = 0;
        goto LABEL_47;
      }
      if (v23.__d_.__rep_ < 1)
      {
        if ((unint64_t)v23.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
          goto LABEL_46;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24 = 0x8000000000000000;
      }
      else
      {
        if ((unint64_t)v23.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_47;
        }
LABEL_46:
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24 = 1000 * v23.__d_.__rep_;
LABEL_47:
        if (v24 > (v22.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v25.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_50;
        }
      }
      v25.__d_.__rep_ = v24 + v22.__d_.__rep_;
LABEL_50:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v25);
      std::chrono::steady_clock::now();
    }
    if (v19 > (double)std::chrono::steady_clock::now().__d_.__rep_) {
      continue;
    }
    break;
  }
  if (*(unsigned char *)(a1 + 3050))
  {
LABEL_53:
    *(void *)&__src[265] = *(void *)(a1 + 3042);
    long long v26 = *(_OWORD *)(a1 + 3013);
    *(_OWORD *)&__src[220] = *(_OWORD *)(a1 + 2997);
    *(_OWORD *)&__src[236] = v26;
    *(_OWORD *)&__src[252] = *(_OWORD *)(a1 + 3029);
    long long v27 = *(_OWORD *)(a1 + 2949);
    *(_OWORD *)&__src[156] = *(_OWORD *)(a1 + 2933);
    *(_OWORD *)&__src[172] = v27;
    long long v28 = *(_OWORD *)(a1 + 2981);
    *(_OWORD *)&__src[188] = *(_OWORD *)(a1 + 2965);
    *(_OWORD *)&__src[204] = v28;
    long long v29 = *(_OWORD *)(a1 + 2917);
    *(_OWORD *)&__src[124] = *(_OWORD *)(a1 + 2901);
    *(_OWORD *)&__src[140] = v29;
    *(unsigned char *)(a1 + 3050) = 0;
    double v30 = __dst;
    memcpy(__dst, __src, 0x111uLL);
    char v31 = 1;
    goto LABEL_59;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_100419400();
  }
LABEL_58:
  char v31 = 0;
  double v30 = __dst;
  *long long __dst = 0;
LABEL_59:
  v30[273] = v31;
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if (v37) {
    std::mutex::unlock(v36);
  }
}

void sub_1001B98C0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 136)) {
    std::mutex::unlock(*(std::mutex **)(v1 - 144));
  }
  if (*(unsigned char *)(v1 - 120)) {
    std::mutex::unlock(*(std::mutex **)(v1 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001B98EC(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v5 = a1;
    char v6 = 1;
    sub_1001BDF98(a1);
    if (sub_1001BDF40(a2)) {
      break;
    }
    sub_1001BDFF4((uint64_t)&v5);
    sched_yield();
    uint64_t v5 = a2;
    char v6 = 1;
    sub_1001BDF98(a2);
    if (sub_1001BDF40(a1)) {
      break;
    }
    sub_1001BDFF4((uint64_t)&v5);
    sched_yield();
  }
  uint64_t v5 = 0;
  char v6 = 0;
  return sub_1001BDFF4((uint64_t)&v5);
}

void sub_1001B9988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1001B99A0(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = (std::mutex *)(a1 + 272);
  char v35 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_1001B98EC((uint64_t)&v34, (uint64_t)&__lk);
  double v10 = (unsigned char *)(a1 + 2574);
  if (*(unsigned char *)(a1 + 2574)) {
    unsigned char *v10 = 0;
  }
  uint64_t v29 = 0;
  uint64_t v30 = sub_100194FB0(a2, a3, a4);
  __int16 v31 = v11;
  long long v27 = 0;
  long long v28 = 0;
  sub_10003AD14(&v27, &v30, (uint64_t)v32, 0xAuLL);
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v25 = 0;
  uint64_t v26 = 0;
  if (!sub_100228E08(a1 + 544, 0x37u, (uint64_t)&v27, (unint64_t *)&__p))
  {
    BOOL v23 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT);
    if (v23) {
      sub_100419468();
    }
    sub_1001B90A8(v23, (uint64_t)&__p);
    goto LABEL_30;
  }
  uint64_t v12 = a1 + 2556;
  std::chrono::system_clock::time_point v13 = (std::condition_variable *)(a1 + 32);
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  double v15 = (double)v14.__d_.__rep_ + 2500000000.0;
  double v16 = -9.22337204e18;
  if (v15 > -9.22337204e18) {
    double v16 = (double)v14.__d_.__rep_ + 2500000000.0;
  }
  if (v15 < 9.22337204e18) {
    uint64_t v17 = (uint64_t)v16;
  }
  else {
    uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  do
  {
    if (*v10) {
      goto LABEL_26;
    }
    if (v15 <= (double)std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    v18.__d_.__rep_ = v17 - std::chrono::steady_clock::now().__d_.__rep_;
    if (v18.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v19.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v19.__d_.__rep_)
      {
        if (v19.__d_.__rep_ < 1)
        {
          if ((unint64_t)v19.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 0x8000000000000000;
            goto LABEL_22;
          }
        }
        else if ((unint64_t)v19.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 1000 * v19.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v20 = 0;
      }
LABEL_20:
      if (v20 > (v18.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v21.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_23:
        std::condition_variable::__do_timed_wait(v13, &__lk, v21);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_22:
      v21.__d_.__rep_ = v20 + v18.__d_.__rep_;
      goto LABEL_23;
    }
  }
  while (v15 > (double)std::chrono::steady_clock::now().__d_.__rep_);
  if (*v10)
  {
LABEL_26:
    *(_OWORD *)a5 = *(_OWORD *)v12;
    *(_WORD *)(a5 + 16) = *(_WORD *)(v12 + 16);
    char v22 = 1;
    goto LABEL_31;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_100419434();
  }
LABEL_30:
  char v22 = 0;
  double v10 = (unsigned char *)a5;
LABEL_31:
  unsigned char *v10 = 0;
  *(unsigned char *)(a5 + 18) = v22;
  if (__p)
  {
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v25 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    long long v28 = v27;
    operator delete(v27);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if (v35) {
    std::mutex::unlock(v34);
  }
}

void sub_1001B9C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, char a18, std::mutex *a19, char a20)
{
  if (a18) {
    std::mutex::unlock(a17);
  }
  if (a20) {
    std::mutex::unlock(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001B9CB4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  char v6 = (_OWORD *)(a1 + 2392);
  if (*(unsigned char *)(a1 + 2485))
  {
    *(_DWORD *)a3 = 0;
    long long v7 = *(_OWORD *)(a1 + 2440);
    *(_OWORD *)(a3 + 36) = *(_OWORD *)(a1 + 2424);
    *(_OWORD *)(a3 + 52) = v7;
    *(_OWORD *)(a3 + 68) = *(_OWORD *)(a1 + 2456);
    *(_OWORD *)(a3 + 82) = *(_OWORD *)(a1 + 2470);
    long long v8 = *(_OWORD *)(a1 + 2408);
    *(_OWORD *)(a3 + 4) = *v6;
    *(_OWORD *)(a3 + 20) = v8;
    goto LABEL_35;
  }
  double v9 = (char *)sub_100007D00();
  char v10 = v9[213];
  if (v10)
  {
    *(_DWORD *)a3 = 0;
    *(_OWORD *)(a3 + 36) = *(_OWORD *)(v9 + 152);
    *(_OWORD *)(a3 + 52) = *(_OWORD *)(v9 + 168);
    *(_OWORD *)(a3 + 68) = *(_OWORD *)(v9 + 184);
    *(_OWORD *)(a3 + 81) = *(_OWORD *)(v9 + 197);
    *(_OWORD *)(a3 + 4) = *(_OWORD *)(v9 + 120);
    *(_OWORD *)(a3 + 20) = *(_OWORD *)(v9 + 136);
    *(unsigned char *)(a3 + 97) = v10;
    goto LABEL_34;
  }
  char v32 = 0;
  size_t v33 = 0;
  uint64_t v34 = 0;
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  BOOL v11 = sub_100228E08(a1 + 544, 0x30u, (uint64_t)&__p, (unint64_t *)&v32);
  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
  if (!v11)
  {
    uint64_t v26 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x30u, &__p);
      sub_1004194D0();
    }

    sub_1001B90A8(v27, (uint64_t)&v32);
    int v28 = -1005;
    goto LABEL_31;
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  do
  {
    if (*(unsigned char *)(a1 + 2485)) {
      goto LABEL_26;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v12.__d_.__rep_) {
      break;
    }
    v13.__d_.__rep_ = v12.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v13.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v14.__d_.__rep_)
      {
        if (v14.__d_.__rep_ < 1)
        {
          if ((unint64_t)v14.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0x8000000000000000;
            goto LABEL_22;
          }
        }
        else if ((unint64_t)v14.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 1000 * v14.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0;
      }
LABEL_20:
      if (v15 > (v13.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v16.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_23:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v16);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_22:
      v16.__d_.__rep_ = v15 + v13.__d_.__rep_;
      goto LABEL_23;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v12.__d_.__rep_);
  if (*(unsigned char *)(a1 + 2485))
  {
LABEL_26:
    uint64_t v17 = sub_100007D00();
    if (!*(unsigned char *)(a1 + 2485)) {
      sub_10000AE44();
    }
    sub_1003D2890((uint64_t)v17, (long long *)(a1 + 2392), v18, v19, v20, v21, v22, v23);
    *(_DWORD *)a3 = 0;
    long long v24 = *(_OWORD *)(a1 + 2440);
    *(_OWORD *)(a3 + 36) = *(_OWORD *)(a1 + 2424);
    *(_OWORD *)(a3 + 52) = v24;
    *(_OWORD *)(a3 + 68) = *(_OWORD *)(a1 + 2456);
    *(_OWORD *)(a3 + 82) = *(_OWORD *)(a1 + 2470);
    long long v25 = *(_OWORD *)(a1 + 2408);
    *(_OWORD *)(a3 + 4) = *v6;
    *(_OWORD *)(a3 + 20) = v25;
    goto LABEL_32;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10041949C();
  }
  int v28 = -1006;
LABEL_31:
  *(_DWORD *)a3 = v28;
  *(unsigned char *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 97) = 0;
LABEL_32:
  if (v32)
  {
    size_t v33 = v32;
    operator delete(v32);
  }
LABEL_34:
  if (__lk.__owns_) {
LABEL_35:
  }
    std::mutex::unlock(__lk.__m_);
}

void sub_1001B9FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, std::mutex *a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    std::mutex::unlock(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1001BA02C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  sub_10003F834((unint64_t *)&v30, 4uLL);
  *(_DWORD *)uint64_t v30 = a2;
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  int v28 = 0;
  uint64_t v29 = 0;
  long long v25 = (std::mutex *)(a1 + 208);
  char v26 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_1001B98EC((uint64_t)&v25, (uint64_t)&__lk);
  if (*(unsigned char *)(a1 + 2555)) {
    *(unsigned char *)(a1 + 2555) = 0;
  }
  if (!sub_100228E08(a1 + 544, 0x31u, (uint64_t)&v30, (unint64_t *)&__p))
  {
    uint64_t v17 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x31u, v21);
      sub_1004194D0();
    }

    sub_1001B90A8(v18, (uint64_t)&__p);
    int v19 = -1007;
    goto LABEL_26;
  }
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a3;
  do
  {
    if (*(unsigned char *)(a1 + 2555)) {
      goto LABEL_22;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v8.__d_.__rep_) {
      break;
    }
    v9.__d_.__rep_ = v8.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v9.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_)
      {
        if (v10.__d_.__rep_ < 1)
        {
          if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x8000000000000000;
            goto LABEL_18;
          }
        }
        else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 1000 * v10.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0;
      }
LABEL_16:
      if (v11 > (v9.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_19:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v12);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_18:
      v12.__d_.__rep_ = v11 + v9.__d_.__rep_;
      goto LABEL_19;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v8.__d_.__rep_);
  if (*(unsigned char *)(a1 + 2555))
  {
LABEL_22:
    long long v13 = *(_OWORD *)(a1 + 2518);
    v23[0] = *(_OWORD *)(a1 + 2534);
    *(void *)((char *)v23 + 14) = *(void *)(a1 + 2548);
    uint64_t v14 = *(void *)((char *)v23 + 14);
    long long v15 = *(_OWORD *)(a1 + 2486);
    long long v16 = *(_OWORD *)(a1 + 2502);
    *(unsigned char *)(a1 + 2555) = 0;
    *(_DWORD *)a4 = 0;
    *(_OWORD *)(a4 + 20) = v16;
    *(_OWORD *)(a4 + 36) = v13;
    *(_OWORD *)(a4 + 4) = v15;
    *(_OWORD *)(a4 + 52) = v23[0];
    *(void *)(a4 + 66) = v14;
    goto LABEL_27;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100419524();
  }
  sub_100004950(v21, "AlishaGetKeyTimedOut");
  sub_10022D2A8(a1 + 544, 0, (std::string::size_type)v21);
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  uint64_t v20 = (std::mutex *)sub_100278308();
  sub_1002783E4(v20, 0, 1);
  int v19 = -1002;
LABEL_26:
  *(_DWORD *)a4 = v19;
  *(unsigned char *)(a4 + 4) = 0;
  *(unsigned char *)(a4 + 73) = 0;
LABEL_27:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if (v26) {
    std::mutex::unlock(v25);
  }
  if (__p)
  {
    int v28 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
}

void sub_1001BA334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::mutex *a22,char a23,std::mutex *a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23) {
    std::mutex::unlock(a22);
  }
  if (a25) {
    std::mutex::unlock(a24);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001BA3B8(uint64_t a1)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_10003F834((unint64_t *)&v20, 4uLL);
  *(_DWORD *)uint64_t v20 = 0;
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  long long v15 = (std::mutex *)(a1 + 208);
  char v16 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_1001B98EC((uint64_t)&v15, (uint64_t)&__lk);
  if (*(unsigned char *)(a1 + 2555)) {
    *(unsigned char *)(a1 + 2555) = 0;
  }
  if (!sub_100228E08(a1 + 544, 0x31u, (uint64_t)&v20, (unint64_t *)&__p))
  {
    std::chrono::system_clock::time_point v10 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x31u, v13);
      sub_1004194D0();
    }

    sub_1001B90A8(v11, (uint64_t)&__p);
    uint64_t v9 = 4294966266;
    goto LABEL_31;
  }
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 5000000000;
  do
  {
    if (*(unsigned char *)(a1 + 2555)) {
      goto LABEL_22;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v2.__d_.__rep_) {
      break;
    }
    v3.__d_.__rep_ = v2.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v3.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v4.__d_.__rep_)
      {
        if (v4.__d_.__rep_ < 1)
        {
          if ((unint64_t)v4.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = 0x8000000000000000;
            goto LABEL_18;
          }
        }
        else if ((unint64_t)v4.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = 1000 * v4.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = 0;
      }
LABEL_16:
      if (v5 > (v3.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v6.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_19:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v6);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_18:
      v6.__d_.__rep_ = v5 + v3.__d_.__rep_;
      goto LABEL_19;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v2.__d_.__rep_);
  if (*(unsigned char *)(a1 + 2555))
  {
LABEL_22:
    unsigned int v7 = *(unsigned __int16 *)(a1 + 2507);
    unsigned int v8 = *(unsigned __int8 *)(a1 + 2486);
    *(unsigned char *)(a1 + 2555) = 0;
    if (v8 >= 2) {
      uint64_t v9 = 4294966263;
    }
    else {
      uint64_t v9 = sub_100334B0C(v7);
    }
    goto LABEL_31;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100419558();
  }
  uint64_t v9 = 4294966265;
LABEL_31:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if (v16) {
    std::mutex::unlock(v15);
  }
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }
  return v9;
}

void sub_1001BA654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, std::mutex *a15, char a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a14) {
    std::mutex::unlock(a13);
  }
  if (a16) {
    std::mutex::unlock(a15);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BA6C0(uint64_t a1@<X0>, int a2@<W1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v32 = 0;
  size_t v33 = 0;
  uint64_t v34 = 0;
  sub_10003F834((unint64_t *)&v32, 0x24uLL);
  std::chrono::system_clock::time_point v10 = (char *)v32;
  *(_DWORD *)uint64_t v32 = a2;
  long long v11 = *a3;
  *(_OWORD *)(v10 + 20) = a3[1];
  *(_OWORD *)(v10 + 4) = v11;
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v27 = (std::mutex *)(a1 + 208);
  char v28 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_1001B98EC((uint64_t)&v27, (uint64_t)&__lk);
  if (*(unsigned char *)(a1 + 2555)) {
    *(unsigned char *)(a1 + 2555) = 0;
  }
  if (!sub_100228E08(a1 + 544, 0x32u, (uint64_t)&v32, (unint64_t *)&__p))
  {
    uint64_t v21 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x32u, v24);
      sub_1004194D0();
    }

    sub_1001B90A8(v22, (uint64_t)&__p);
    int v23 = -1009;
    goto LABEL_26;
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a4;
  do
  {
    if (*(unsigned char *)(a1 + 2555)) {
      goto LABEL_22;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v12.__d_.__rep_) {
      break;
    }
    v13.__d_.__rep_ = v12.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v13.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v14.__d_.__rep_)
      {
        if (v14.__d_.__rep_ < 1)
        {
          if ((unint64_t)v14.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0x8000000000000000;
            goto LABEL_18;
          }
        }
        else if ((unint64_t)v14.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_16;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 1000 * v14.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0;
      }
LABEL_16:
      if (v15 > (v13.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v16.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_19:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v16);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_18:
      v16.__d_.__rep_ = v15 + v13.__d_.__rep_;
      goto LABEL_19;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v12.__d_.__rep_);
  if (*(unsigned char *)(a1 + 2555))
  {
LABEL_22:
    long long v17 = *(_OWORD *)(a1 + 2518);
    v25[0] = *(_OWORD *)(a1 + 2534);
    *(void *)((char *)v25 + 14) = *(void *)(a1 + 2548);
    uint64_t v18 = *(void *)((char *)v25 + 14);
    long long v19 = *(_OWORD *)(a1 + 2486);
    long long v20 = *(_OWORD *)(a1 + 2502);
    *(unsigned char *)(a1 + 2555) = 0;
    *(_DWORD *)a5 = 0;
    *(_OWORD *)(a5 + 20) = v20;
    *(_OWORD *)(a5 + 36) = v17;
    *(_OWORD *)(a5 + 4) = v19;
    *(_OWORD *)(a5 + 52) = v25[0];
    *(void *)(a5 + 66) = v18;
    goto LABEL_27;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10041958C();
  }
  int v23 = -1010;
LABEL_26:
  *(_DWORD *)a5 = v23;
  *(unsigned char *)(a5 + 4) = 0;
  *(unsigned char *)(a5 + 73) = 0;
LABEL_27:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if (v28) {
    std::mutex::unlock(v27);
  }
  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
  if (v32)
  {
    size_t v33 = v32;
    operator delete(v32);
  }
}

void sub_1001BA994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::mutex *a19, char a20,std::mutex *a21,char a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (a20) {
    std::mutex::unlock(a19);
  }
  if (a22) {
    std::mutex::unlock(a21);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001BA9FC(uint64_t a1, int a2)
{
  std::chrono::steady_clock::time_point v12 = 0;
  std::chrono::steady_clock::time_point v13 = 0;
  uint64_t v14 = 0;
  sub_10003F834((unint64_t *)&v12, 4uLL);
  *(_DWORD *)std::chrono::steady_clock::time_point v12 = a2;
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  std::chrono::system_clock::time_point v10 = 0;
  uint64_t v11 = 0;
  if (sub_100228E08(a1 + 544, 0x35u, (uint64_t)&v12, (unint64_t *)&__p))
  {
    uint64_t v4 = 0;
  }
  else
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x35u, v8);
      sub_1004194D0();
    }

    sub_1001B90A8(v6, (uint64_t)&__p);
    uint64_t v4 = 4294966272;
  }
  if (__p)
  {
    std::chrono::system_clock::time_point v10 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    std::chrono::steady_clock::time_point v13 = v12;
    operator delete(v12);
  }
  return v4;
}

void sub_1001BAB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v18 = v17;

  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001BAB54(uint64_t a1, uint64_t a2)
{
  if (sub_10022AEF0(a1 + 544, a2)) {
    return 0;
  }
  else {
    return 4294966279;
  }
}

uint64_t sub_1001BAB7C(uint64_t a1, int a2)
{
  if (sub_10022B178(a1 + 544, a2)) {
    return 0;
  }
  else {
    return 4294966268;
  }
}

unint64_t sub_1001BABA4(uint64_t a1)
{
  unsigned __int16 v1 = sub_10022B470(a1 + 544);
  if ((v1 & 0xFF00) != 0) {
    unsigned __int16 v2 = v1;
  }
  else {
    unsigned __int16 v2 = 0;
  }
  uint64_t v3 = 4294966267;
  if ((v1 & 0xFF00) != 0) {
    uint64_t v3 = 0;
  }
  return v3 | ((unint64_t)v2 << 32);
}

BOOL sub_1001BABD8(uint64_t a1, char a2, __int16 a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16 = 0;
  uint64_t v17 = 0;
  sub_10003F834((unint64_t *)&v15, 3uLL);
  uint64_t v6 = (char *)v15;
  *(unsigned char *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = a2;
  *(_WORD *)(v6 + 1) = a3;
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  std::chrono::steady_clock::time_point v13 = 0;
  uint64_t v14 = 0;
  BOOL v7 = sub_100228E08(a1 + 544, 0x39u, (uint64_t)&v15, (unint64_t *)&__p);
  if (!v7)
  {
    unsigned int v8 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x39u, v11);
      sub_1004195C0();
    }

    sub_1001B90A8(v9, (uint64_t)&__p);
  }
  if (__p)
  {
    std::chrono::steady_clock::time_point v13 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16 = v15;
    operator delete(v15);
  }
  return v7;
}

void sub_1001BACEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1001BAD34(uint64_t a1, int a2)
{
  std::chrono::steady_clock::time_point v12 = 0;
  std::chrono::steady_clock::time_point v13 = 0;
  uint64_t v14 = 0;
  sub_10003F834((unint64_t *)&v12, 4uLL);
  *(_DWORD *)std::chrono::steady_clock::time_point v12 = a2;
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  std::chrono::system_clock::time_point v10 = 0;
  uint64_t v11 = 0;
  BOOL v4 = sub_100228E08(a1 + 544, 0x3Bu, (uint64_t)&v12, (unint64_t *)&__p);
  if (!v4)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x3Bu, v8);
      sub_1004195C0();
    }

    sub_1001B90A8(v6, (uint64_t)&__p);
  }
  if (__p)
  {
    std::chrono::system_clock::time_point v10 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    std::chrono::steady_clock::time_point v13 = v12;
    operator delete(v12);
  }
  return v4;
}

void sub_1001BAE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001BAE80(uint64_t a1)
{
  unsigned __int16 v2 = (std::mutex *)(a1 + 336);
  std::mutex::lock((std::mutex *)(a1 + 336));
  char v17 = 1;
  uint64_t v14 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0;
  uint64_t v16 = 0;
  sub_10003AD14(&v14, &v17, (uint64_t)buf, 1uLL);
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  std::chrono::steady_clock::time_point v12 = 0;
  uint64_t v13 = 0;
  if (!sub_100228E08(a1 + 544, 0x2Du, (uint64_t)&v14, (unint64_t *)&__p))
  {
    BOOL v7 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x2Du, buf);
      sub_100419684();
    }

    goto LABEL_9;
  }
  uint64_t v3 = (char *)__p;
  if (v12 == __p)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419614();
    }
LABEL_9:
    LOBYTE(v8) = 0;
    unsigned int v9 = 0;
    goto LABEL_15;
  }
  *(_WORD *)(a1 + 2640) = *(unsigned __int8 *)__p | 0x100;
  BOOL v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v5 = *v3;
    if (v5 > 2) {
      uint64_t v6 = "";
    }
    else {
      uint64_t v6 = off_100857650[v5];
    }
    *(_DWORD *)std::string buf = 136315138;
    long long v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#roseprovider,#deep-slp QueryDeepSleepState complete state: %s", buf, 0xCu);
  }
  unsigned int v8 = *(unsigned __int16 *)(a1 + 2640);
  unsigned int v9 = v8 >> 8;
LABEL_15:
  if (__p)
  {
    std::chrono::steady_clock::time_point v12 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = v14;
    operator delete(v14);
  }
  std::mutex::unlock(v2);
  return v8 | (v9 << 8);
}

void sub_1001BB074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v16 = v15;

  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BB0C8(uint64_t a1)
{
  return sub_100228C90(a1 + 544);
}

uint64_t sub_1001BB0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_10003F834((unint64_t *)&__p, 5uLL);
  uint64_t v6 = (char *)__p;
  BOOL v7 = *(uint64_t **)(a2 + 16);
  while (1)
  {
    unsigned int v8 = __p;
    if (!v7) {
      break;
    }
    if (v13 - (unsigned char *)__p >= 1) {
      bzero(__p, v13 - (unsigned char *)__p);
    }
    char v9 = *v6;
    *(_DWORD *)(v6 + 1) = *((_DWORD *)v7 + 4);
    BOOL v7 = (uint64_t *)*v7;
    *uint64_t v6 = v9 + 1;
    uint64_t v10 = sub_1001BB1B8(a1, &__p, a3);
    if (v10)
    {
      unsigned int v8 = __p;
      if (!__p) {
        return v10;
      }
      goto LABEL_9;
    }
  }
  uint64_t v10 = 0;
  if (!__p) {
    return v10;
  }
LABEL_9:
  uint64_t v13 = v8;
  operator delete(v8);
  return v10;
}

void sub_1001BB198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001BB1B8(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2[1] - *a2 != 5) {
    sub_1004197B0();
  }
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  long long v24 = 0;
  uint64_t v25 = 0;
  uint64_t v21 = (std::mutex *)(a1 + 208);
  char v22 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 0;
  sub_1001B98EC((uint64_t)&v21, (uint64_t)&__lk);
  if (*(unsigned char *)(a1 + 2555)) {
    *(unsigned char *)(a1 + 2555) = 0;
  }
  if (!sub_100228E08(a1 + 544, 0x33u, (uint64_t)a2, (unint64_t *)&__p))
  {
    uint64_t v16 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x33u, buf);
      sub_1004194D0();
    }

    sub_1001B90A8(v17, (uint64_t)&__p);
    uint64_t v15 = 4294966278;
    goto LABEL_35;
  }
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a3;
  do
  {
    if (*(unsigned char *)(a1 + 2555)) {
      goto LABEL_23;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v6.__d_.__rep_) {
      break;
    }
    v7.__d_.__rep_ = v6.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v7.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v8.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v8.__d_.__rep_)
      {
        if (v8.__d_.__rep_ < 1)
        {
          if ((unint64_t)v8.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = 0x8000000000000000;
            goto LABEL_19;
          }
        }
        else if ((unint64_t)v8.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_17;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = 1000 * v8.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v9 = 0;
      }
LABEL_17:
      if (v9 > (v7.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v10.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_20:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v10);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_19:
      v10.__d_.__rep_ = v9 + v7.__d_.__rep_;
      goto LABEL_20;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v6.__d_.__rep_);
  if (*(unsigned char *)(a1 + 2555))
  {
LABEL_23:
    int v11 = *(unsigned __int8 *)(a1 + 2486);
    std::chrono::steady_clock::time_point v12 = qword_1008ABDE0;
    if (v11 != 4)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_10041970C(v11, v12);
      }
      long long v19 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)uint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/PRRoseProvider.mm";
        *(_WORD *)&v27[8] = 1024;
        int v28 = 889;
        __int16 v29 = 2080;
        uint64_t v30 = "_sendAlishaDeleteKeysCommandSync";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#roseprovider,%s:%d: assertion failure in %s", buf, 0x1Cu);
      }
      abort();
    }
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)(a1 + 2509);
      int v14 = *(unsigned __int16 *)(a1 + 2507);
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)uint64_t v27 = v14;
      *(_WORD *)&v27[4] = 1024;
      *(_DWORD *)&v27[6] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#roseprovider,#alisha delete keys - status %u, uwb session id %u", buf, 0xEu);
    }
    uint64_t v15 = 0;
    if (*(unsigned char *)(a1 + 2555)) {
      *(unsigned char *)(a1 + 2555) = 0;
    }
    goto LABEL_35;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004196D8();
  }
  uint64_t v15 = 4294966277;
LABEL_35:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if (v22) {
    std::mutex::unlock(v21);
  }
  if (__p)
  {
    long long v24 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_1001BB53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, std::mutex *a12, char a13, void *__p, uint64_t a15)
{
  if (a11) {
    std::mutex::unlock(a10);
  }
  if (a13) {
    std::mutex::unlock(a12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001BB590(uint64_t a1, uint64_t a2)
{
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  std::chrono::steady_clock::time_point v7 = 0;
  uint64_t v8 = 0;
  sub_10003F834((unint64_t *)&__p, 5uLL);
  *(unsigned char *)std::__fs::filesystem::directory_entry::_Path __p = 0;
  uint64_t v4 = sub_1001BB1B8(a1, &__p, a2);
  if (__p)
  {
    std::chrono::steady_clock::time_point v7 = __p;
    operator delete(__p);
  }
  return v4;
}

void sub_1001BB600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BB620(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 144);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 25));
  BOOL v22 = 0;
  if ((sub_1002258D0(a1 + 544, &v22) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419810();
    }
    goto LABEL_33;
  }
  if (!v22)
  {
    int v14 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#roseprovider,Rose is powered off. Can't query power stats", (uint8_t *)&__p, 2u);
    }
    goto LABEL_33;
  }
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  long long v20 = 0;
  uint64_t v21 = 0;
  BOOL v6 = sub_100228E08(a1 + 544, 0x26u, (uint64_t)&__p, (unint64_t *)&v24);
  if (__p)
  {
    long long v20 = __p;
    operator delete(__p);
  }
  if (!v6)
  {
    uint64_t v15 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(0x26u, &__p);
      sub_100419344();
    }

    sub_1001B90A8(v16, (uint64_t)&v24);
    goto LABEL_33;
  }
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  do
  {
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 25));
    if (v8) {
      goto LABEL_39;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v7.__d_.__rep_) {
      break;
    }
    v9.__d_.__rep_ = v7.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v9.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_)
      {
        if (v10.__d_.__rep_ < 1)
        {
          if ((unint64_t)v10.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x8000000000000000;
            goto LABEL_20;
          }
        }
        else if ((unint64_t)v10.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_18;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 1000 * v10.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = 0;
      }
LABEL_18:
      if (v11 > (v9.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v12.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_21:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 32), &__lk, v12);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_20:
      v12.__d_.__rep_ = v11 + v9.__d_.__rep_;
      goto LABEL_21;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v7.__d_.__rep_);
  unsigned __int8 v13 = atomic_load((unsigned __int8 *)(a1 + 25));
  if (v13)
  {
LABEL_39:
    long long v17 = *(_OWORD *)(a1 + 2592);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 2576);
    *(_OWORD *)(a3 + 16) = v17;
    long long v18 = *(_OWORD *)(a1 + 2624);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 2608);
    *(_OWORD *)(a3 + 48) = v18;
    goto LABEL_34;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004197DC();
  }
LABEL_33:
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 60) = 0;
LABEL_34:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
}

void sub_1001BB914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  std::mutex::unlock(v18);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001BB96C(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100419844();
  }
  return sub_1001BB9CC(a1, a2);
}

uint64_t sub_1001BB9CC(uint64_t a1, uint64_t a2)
{
  memset(&__p, 0, sizeof(__p));
  switch(*(_DWORD *)a2)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100419AA0();
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "relayCommandMessage of unspecified type.");
    case 1:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100419900();
      }
      if (!*(unsigned char *)(a2 + 512))
      {
        long long v38 = "msg.request.has_value()";
        int v39 = 1016;
        goto LABEL_129;
      }
      sub_10018E0C8(a2 + 8, *(_WORD *)(a2 + 4), (uint64_t)buf);
      if (!v47[0])
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_1004198CC();
        }
        goto LABEL_102;
      }
      memset(&v41, 0, sizeof(v41));
      sub_10003AD14(&v41, buf, (uint64_t)v47, 0x99uLL);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v41;
      unsigned int v4 = 33;
LABEL_93:
      memset(buf, 0, 24);
      if (sub_100228E08(a1 + 544, v4, (uint64_t)&__p, (unint64_t *)buf))
      {
        __int16 v29 = *(void **)buf;
        if (*(void *)buf)
        {
          *(void *)&uint8_t buf[8] = *(void *)buf;
LABEL_96:
          operator delete(v29);
        }
        goto LABEL_97;
      }
      uint64_t v31 = (id)qword_1008ABDE0;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        sub_10039C190(v4, &v41);
        sub_100419878();
      }

      sub_1001B90A8(v32, (uint64_t)buf);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
LABEL_102:
      uint64_t v30 = 0;
LABEL_103:
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return v30;
    case 2:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100419968();
      }
      if (*(unsigned char *)(a2 + 632))
      {
        if (*(unsigned char *)(a2 + 512))
        {
          sub_100194778(*(unsigned __int16 *)(a2 + 4), a2 + 8, a2 + 520, (uint64_t)buf);
          if (!v46[2])
          {
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
              sub_100419934();
            }
            goto LABEL_102;
          }
          memset(&v41, 0, sizeof(v41));
          sub_10003AD14(&v41, buf, (uint64_t)&v46[2], 0x25uLL);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v41;
          unsigned int v4 = 34;
          goto LABEL_93;
        }
        long long v38 = "msg.request.has_value()";
        int v39 = 1032;
      }
      else
      {
        long long v38 = "msg.start_options.has_value()";
        int v39 = 1031;
      }
      goto LABEL_129;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004199D0();
      }
      int v11 = sub_100194770(*(unsigned __int16 *)(a2 + 4));
      LOWORD(v41.__r_.__value_.__l.__data_) = v11;
      v41.__r_.__value_.__s.__data_[2] = BYTE2(v11);
      if ((v11 & 0xFF0000) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_10041999C();
        }
        goto LABEL_102;
      }
      memset(buf, 0, 24);
      sub_10003AD14(buf, &v41, (uint64_t)v41.__r_.__value_.__r.__words + 2, 2uLL);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = *(std::string *)buf;
      unsigned int v4 = 35;
      goto LABEL_93;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100419A38();
      }
      int v9 = sub_100194770(*(unsigned __int16 *)(a2 + 4));
      LOWORD(v41.__r_.__value_.__l.__data_) = v9;
      v41.__r_.__value_.__s.__data_[2] = BYTE2(v9);
      if ((v9 & 0xFF0000) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100419A04();
        }
        goto LABEL_102;
      }
      memset(buf, 0, 24);
      sub_10003AD14(buf, &v41, (uint64_t)v41.__r_.__value_.__r.__words + 2, 2uLL);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = *(std::string *)buf;
      unsigned int v4 = 36;
      goto LABEL_93;
    case 5:
      unsigned __int8 v8 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- RawBytesCommand", buf, 2u);
      }
      if (*(unsigned char *)(a2 + 672))
      {
        unsigned int v4 = *(_DWORD *)(a2 + 640);
        if (&__p != (std::string *)(a2 + 648)) {
          sub_1001BE070(&__p, *(char **)(a2 + 648), *(char **)(a2 + 656), *(void *)(a2 + 656) - *(void *)(a2 + 648));
        }
        goto LABEL_93;
      }
      long long v38 = "msg.raw_bytes_cmd.has_value()";
      int v39 = 1072;
      goto LABEL_129;
    case 6:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100419A6C();
      }
      if (*(unsigned char *)(a2 + 728))
      {
        memset(&buf[2], 0, 33);
        *(_WORD *)std::string buf = *(_WORD *)(a2 + 680);
        uint64_t v18 = *(void *)(a2 + 696);
        long long v19 = *(const void **)(a2 + 688);
        buf[2] = v18 - (_BYTE)v19;
        if ((unint64_t)(v18 - (void)v19) >= 0x21) {
          __assert_rtn("relayCommandMessage", "PRRoseProvider.mm", 1083, "msg.session_data.value().bytes.size() <= sizeof(pkt.bytes)");
        }
        memcpy(&buf[3], v19, v18 - (void)v19);
        memset(&v41, 0, sizeof(v41));
        sub_10003AD14(&v41, buf, (uint64_t)v46, 0x23uLL);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v41;
        unsigned int v4 = 43;
        goto LABEL_93;
      }
      long long v38 = "msg.session_data.has_value()";
      int v39 = 1079;
      goto LABEL_129;
    case 7:
      uint64_t v21 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#roseprovider,#throttle relayCommandMessage -- UpdateSessionSubrate", buf, 2u);
      }
      if (*(unsigned char *)(a2 + 741))
      {
        memset(buf, 0, 24);
        sub_10003AD14(buf, (const void *)(a2 + 738), a2 + 741, 3uLL);
        std::string __p = *(std::string *)buf;
        unsigned int v4 = 47;
        goto LABEL_93;
      }
      long long v38 = "msg.subrate_cmd.has_value()";
      int v39 = 1091;
      goto LABEL_129;
    case 8:
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v12 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- LPEMEnable", buf, 2u);
      }
      sub_1002285E0(a1 + 544);
      goto LABEL_97;
    case 9:
      std::chrono::system_clock::time_point v10 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- NBSARStateUpdate", buf, 2u);
      }
      if (*(unsigned char *)(a2 + 737))
      {
        v41.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a2 + 736);
        memset(buf, 0, 24);
        sub_10003AD14(buf, &v41, (uint64_t)v41.__r_.__value_.__r.__words + 1, 1uLL);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = *(std::string *)buf;
        unsigned int v4 = 44;
        goto LABEL_93;
      }
      long long v38 = "msg.narrowband_sar_state.has_value()";
      int v39 = 1108;
      goto LABEL_129;
    case 0xA:
      BOOL v22 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- SystemOn", buf, 2u);
      }
      sub_100225458(a1 + 544, 0);
      goto LABEL_97;
    case 0xB:
      long long v20 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- RefreshConfiguration", buf, 2u);
      }
      sub_1002284B0(a1 + 544);
      goto LABEL_97;
    case 0xC:
      int v23 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v24 = *(unsigned __int16 *)(a2 + 742) - 1;
        if (v24 > 0x19) {
          uint64_t v25 = "UNDEFINED";
        }
        else {
          uint64_t v25 = off_100857680[(__int16)v24];
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- TriggerFatalErrorHandling for %s", buf, 0xCu);
      }
      unsigned int v34 = *(unsigned __int16 *)(a2 + 742) - 1;
      if (v34 > 0x19) {
        char v35 = "UNDEFINED";
      }
      else {
        char v35 = off_100857680[(__int16)v34];
      }
      sub_100004950(&v41, v35);
      uint64_t v36 = std::string::insert(&v41, 0, "AOPRoseFatalError: ");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      *(void *)&uint8_t buf[16] = *((void *)&v36->__r_.__value_.__l + 2);
      *(_OWORD *)std::string buf = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      sub_10022D2A8(a1 + 544, 0, (std::string::size_type)buf);
      if ((buf[23] & 0x80000000) == 0) {
        goto LABEL_97;
      }
      __int16 v29 = *(void **)buf;
      goto LABEL_96;
    case 0xD:
      std::chrono::steady_clock::time_point v7 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- SystemOff_AirplaneMode", buf, 2u);
      }
      int v6 = 3;
      goto LABEL_15;
    case 0xE:
      unint64_t v5 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- SystemOff_RestrictedRegion", buf, 2u);
      }
      int v6 = 4;
LABEL_15:
      sub_10022446C(a1 + 544, v6);
      goto LABEL_97;
    case 0xF:
      int v26 = *((_DWORD *)sub_100007D00() + 186);
      int v14 = qword_1008ABDE0;
      BOOL v27 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
      if (v26 == 1)
      {
        if (v27)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- ChannelToTriggerR2GpioBlankingChanged", buf, 2u);
        }
        if (*(unsigned char *)(a2 + 748))
        {
          sub_10022B368();
LABEL_97:
          uint64_t v30 = 1;
          goto LABEL_103;
        }
        long long v38 = "msg.channel_to_trigger_GPIO_blanking.has_value()";
        int v39 = 1123;
LABEL_129:
        __assert_rtn("relayCommandMessage", "PRRoseProvider.mm", v39, v38);
      }
      if (!v27) {
        goto LABEL_97;
      }
      *(_WORD *)std::string buf = 0;
      int v28 = "#roseprovider,relayCommandMessage -- ChannelToTriggerR2GpioBlankingChanged invalid on current chip type";
      break;
    case 0x10:
      int v13 = *((_DWORD *)sub_100007D00() + 186);
      int v14 = qword_1008ABDE0;
      BOOL v15 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
      if (v13 == 1)
      {
        if (v15)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayCommandMessage -- UpdateCoexNBBch", buf, 2u);
        }
        if (*(unsigned char *)(a2 + 756))
        {
          __int16 v16 = *(_WORD *)(a2 + 752);
          *(_WORD *)std::string buf = 6;
          buf[2] = 0;
          *(_WORD *)&uint8_t buf[4] = v16;
          buf[6] = 1;
          v43[0] = sub_1003A8F90(buf);
          if (!*(unsigned char *)(a2 + 756)) {
            sub_10000AE44();
          }
          __int16 v17 = *(_WORD *)(a2 + 754);
          LOWORD(v41.__r_.__value_.__l.__data_) = 6;
          v41.__r_.__value_.__s.__data_[2] = 0;
          WORD2(v41.__r_.__value_.__r.__words[0]) = v17;
          v41.__r_.__value_.__s.__data_[6] = 1;
          v43[1] = sub_1003A8F90((unsigned __int8 *)&v41);
          memset(buf, 0, 24);
          sub_10003AD14(buf, v43, (uint64_t)&v44, 4uLL);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = *(std::string *)buf;
          unsigned int v4 = 56;
          goto LABEL_93;
        }
        long long v38 = "msg.nb_gpio_blanking_channel_idx_range.has_value()";
        int v39 = 1139;
        goto LABEL_129;
      }
      if (!v15) {
        goto LABEL_97;
      }
      *(_WORD *)std::string buf = 0;
      int v28 = "#roseprovider,relayCommandMessage -- UpdateCoexNBBch invalid on current platform";
      break;
    default:
      unsigned int v4 = 0;
      goto LABEL_93;
  }
  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v28, buf, 2u);
  goto LABEL_97;
}

void sub_1001BC59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_free_exception(v27);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001BC6A0(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100419AD4();
  }
  return sub_1001BC700(a1, a2);
}

uint64_t sub_1001BC700(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2)
  {
    uint64_t v2 = a1;
    if (*(_DWORD *)a2 == 1)
    {
      unsigned int v4 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#roseprovider,relayPropertyMessage -- SetRoseConnectionlessMacAddress", v6, 2u);
      }
      if (!*(unsigned char *)(a2 + 12)) {
        sub_100419B08();
      }
      LOBYTE(a1) = sub_10022A584(v2 + 544, (const void *)(a2 + 4));
    }
  }
  else
  {
    LODWORD(a1) = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (a1)
    {
      sub_100419B34();
      LOBYTE(a1) = 0;
    }
  }
  return a1 & 1;
}

void sub_1001BC7D4(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::chrono::steady_clock::time_point v7 = *(std::__shared_weak_count **)(a1 + 448);
  *(void *)(a1 + 440) = v6;
  *(void *)(a1 + 448) = v5;
  if (v7) {
    sub_10001A970(v7);
  }

  std::mutex::unlock(v4);
}

uint64_t sub_1001BC844(uint64_t a1, uint64_t a2)
{
  sub_100186520((uint64_t)v5, a2);
  uint64_t v3 = sub_1001BB9CC(a1, (uint64_t)v5);
  if (v11 && __p)
  {
    std::chrono::system_clock::time_point v10 = __p;
    operator delete(__p);
  }
  if (v8 && v6)
  {
    std::chrono::steady_clock::time_point v7 = v6;
    operator delete(v6);
  }
  return v3;
}

void sub_1001BC8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1001BC900(uint64_t a1, uint64_t a2)
{
  return sub_1001BC844(a1 - 8, a2);
}

uint64_t sub_1001BC908(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 408);
  long long v3 = *(_OWORD *)(a2 + 176);
  v10[10] = *(_OWORD *)(a2 + 160);
  v10[11] = v3;
  v10[12] = *(_OWORD *)(a2 + 192);
  uint64_t v11 = *(void *)(a2 + 208);
  long long v4 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v4;
  long long v5 = *(_OWORD *)(a2 + 144);
  v10[8] = *(_OWORD *)(a2 + 128);
  v10[9] = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  _OWORD v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  v10[4] = *(_OWORD *)(a2 + 64);
  v10[5] = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  return sub_1001BC9A0(a1, v2, v10);
}

uint64_t sub_1001BC9A0(uint64_t a1, uint64_t a2, long long *a3)
{
  int v10 = 2;
  v11[0] = 0;
  v11[552] = 0;
  long long v3 = a3[11];
  long long v22 = a3[10];
  long long v23 = v3;
  long long v24 = a3[12];
  long long v4 = a3[7];
  long long v18 = a3[6];
  long long v19 = v4;
  long long v5 = a3[9];
  long long v20 = a3[8];
  long long v21 = v5;
  long long v6 = a3[3];
  long long v14 = a3[2];
  long long v15 = v6;
  long long v7 = a3[5];
  long long v16 = a3[4];
  long long v17 = v7;
  long long v8 = a3[1];
  long long v12 = *a3;
  long long v13 = v8;
  uint64_t v25 = *((void *)a3 + 26);
  char v26 = 1;
  v27[0] = 0;
  v27[72] = 0;
  v27[80] = 0;
  v27[208] = 0;
  v27[216] = 0;
  v27[296] = 0;
  v27[304] = 0;
  v27[408] = 0;
  v27[416] = 0;
  char v30 = 0;
  char v31 = 0;
  char v32 = 0;
  char v33 = 0;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  char v37 = 0;
  char v38 = 0;
  sub_100187FBC(a2, &v10);
  if (v30 && __p)
  {
    __int16 v29 = __p;
    operator delete(__p);
  }
  sub_1001882E8((uint64_t)v27);
  return sub_10015DC28((uint64_t)v11);
}

void sub_1001BCADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100188190((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BCAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 392);
  long long v3 = *(_OWORD *)(a2 + 176);
  v10[10] = *(_OWORD *)(a2 + 160);
  v10[11] = v3;
  v10[12] = *(_OWORD *)(a2 + 192);
  uint64_t v11 = *(void *)(a2 + 208);
  long long v4 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v4;
  long long v5 = *(_OWORD *)(a2 + 144);
  v10[8] = *(_OWORD *)(a2 + 128);
  v10[9] = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  _OWORD v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  v10[4] = *(_OWORD *)(a2 + 64);
  v10[5] = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  return sub_1001BC9A0(a1 - 16, v2, v10);
}

BOOL sub_1001BCB8C(uint64_t a1, int **a2, void *a3)
{
  long long v5 = *a2;
  long long v4 = (char *)a2[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (char *)*a2) >> 3);
  if (v6 >= 0x1A)
  {
    long long v7 = +[NSString stringWithFormat:@"pushBeaconAllowlist: %lu beacons specified, but max allowed is: %d", v6, 25];
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419B68();
    }
    if (a3)
    {
      NSErrorUserInfoKey v70 = NSLocalizedDescriptionKey;
      uint64_t v71 = v7;
      long long v8 = +[NSDictionary dictionaryWithObjects:&v71 forKeys:&v70 count:1];
      PRErrorWithCodeAndUserInfo(107, v8);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    return 0;
  }
  long long v13 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#roseprovider,pushBeaconAllowlist - passed size check. Given %lu beacons ++", buf, 0xCu);
  }
  memset(v68, 0, sizeof(v68));
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  *(_OWORD *)&buf[1] = 0u;
  if (v4 == (char *)v5)
  {
    long long v20 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#roseprovider,pushBeaconAllowlist: 0 beacons specified. Purging allowlist.", v49, 2u);
    }
  }
  else
  {
    long long v14 = *a2;
    int v15 = **a2;
    if ((v15 - 4) <= 0xFFFFFFFD)
    {
      long long v16 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100419C50(v16, v17, v18);
      }
      if (a3)
      {
        NSErrorUserInfoKey v58 = NSLocalizedDescriptionKey;
        CFStringRef v59 = @"pushBeaconAllowlist: may only push BLE or UUID identified beacons.";
        long long v19 = +[NSDictionary dictionaryWithObjects:&v59 forKeys:&v58 count:1];
        PRErrorWithCodeAndUserInfo(107, v19);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      return 0;
    }
    *(void *)int v49 = 0;
    long long __dst = 0;
    uint64_t v51 = 0;
    long long v21 = a2[1];
    if (v14 == v21)
    {
      long long v23 = (char *)v14;
LABEL_25:
      buf[0] = v15 != 2;
      *(void *)&buf[1] = 0xCCCCCCCCCCCCCCCDLL * ((v23 - (char *)v14) >> 3);
      sub_100004950(v54, "Beacon addresses: contiguously:\n");
      long long v24 = *(unsigned char **)v49;
      uint64_t v25 = __dst;
      sub_100004950(__p, "===== + = + =====\n");
      sub_1003E0810((uint64_t)v54, (uint64_t)v24, v25 - v24, 4u, (uint64_t)__p);
      if (v46 < 0) {
        operator delete(__p[0]);
      }
      if (v55 < 0) {
        operator delete(*(void **)v54);
      }
      char v26 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v27 = __src;
        if (v48 < 0) {
          BOOL v27 = (void **)__src[0];
        }
        *(_DWORD *)uint64_t v54 = 136315138;
        *(void *)&v54[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#roseprovider,%s", v54, 0xCu);
      }
      memcpy(&buf[9], *(const void **)v49, (size_t)__dst - *(void *)v49);
      if (v48 < 0) {
        operator delete(__src[0]);
      }
      char v28 = 1;
    }
    else
    {
      while (*v14 == v15)
      {
        if (!*((unsigned char *)v14 + 36)) {
          sub_10000AE44();
        }
        int v22 = *(int *)((char *)v14 + 30);
        WORD2(__src[0]) = *((_WORD *)v14 + 17);
        LODWORD(__src[0]) = v22;
        sub_1001BE180((uint64_t)v49, (char *)__dst, (char *)__src, (char *)__src + 6, 6);
        v14 += 10;
        if (v14 == v21)
        {
          long long v14 = *a2;
          long long v23 = (char *)a2[1];
          goto LABEL_25;
        }
      }
      __int16 v29 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100419CCC(v29, v30, v31);
      }
      if (a3)
      {
        NSErrorUserInfoKey v56 = NSLocalizedDescriptionKey;
        CFStringRef v57 = @"Given vector of different types beacons. All beacons must be of the same identifer type.";
        char v32 = +[NSDictionary dictionaryWithObjects:&v57 forKeys:&v56 count:1];
        PRErrorWithCodeAndUserInfo(107, v32);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      char v28 = 0;
    }
    if (*(void *)v49)
    {
      long long __dst = *(void **)v49;
      operator delete(*(void **)v49);
    }
    if ((v28 & 1) == 0) {
      return 0;
    }
  }
  *(void *)int v49 = 0;
  long long __dst = 0;
  uint64_t v51 = 0;
  sub_10003AD14(v49, buf, (uint64_t)&v69, 0x9FuLL);
  sub_100004950(v54, "Allowlist Beacons:\n");
  char v33 = *(unsigned char **)v49;
  char v34 = __dst;
  sub_100004950(__p, "===========\n");
  sub_1003E0810((uint64_t)v54, (uint64_t)v33, v34 - v33, 4u, (uint64_t)__p);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v55 < 0) {
    operator delete(*(void **)v54);
  }
  char v35 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100419BD4((uint64_t)__src, v35, v36, v37, v38, v39, v40, v41);
  }
  BOOL v42 = sub_100229050(a1 + 544, 0xD2u, (uint64_t)v49);
  BOOL v9 = v42;
  if (a3) {
    char v43 = v42;
  }
  else {
    char v43 = 1;
  }
  if ((v43 & 1) == 0)
  {
    NSErrorUserInfoKey v52 = NSLocalizedDescriptionKey;
    CFStringRef v53 = @"Failed to push beacon allowlist to AOP.";
    int v44 = +[NSDictionary dictionaryWithObjects:&v53 forKeys:&v52 count:1];
    PRErrorWithCodeAndUserInfo(107, v44);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (v48 < 0) {
    operator delete(__src[0]);
  }
  if (*(void *)v49)
  {
    long long __dst = *(void **)v49;
    operator delete(*(void **)v49);
  }
  return v9;
}

void sub_1001BD170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001BD230(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1002796CC();
    operator delete();
  }
  return result;
}

void *sub_1001BD280(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject ***)(v1 + 3104);
  v4[0] = off_100857470;
  v4[1] = v1;
  v4[3] = v4;
  sub_1002796D0(v2, (uint64_t)qword_10089C870, (uint64_t)v4, *(void **)(v1 + 400));
  return sub_10000AF74(v4);
}

void sub_1001BD318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000AF74((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BD32C(uint64_t a1, uint64_t a2, double a3)
{
  *(double *)(a2 + 8) = a3;
  uint64_t v4 = sub_1002B5E84(a1 + 3056, a3);
  if (!v5) {
    return 0;
  }
  *(void *)(a2 + 16) = v4;
  uint64_t v6 = sub_1002B62B4(*(double *)&v4);
  if (!v7) {
    return 0;
  }
  *(void *)a2 = v6;
  return 1;
}

uint64_t sub_1001BD38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001BE450((uint64_t)&v5, a3);
  sub_100187FBC(a2, &v5);
  if (v10 && __p)
  {
    BOOL v9 = __p;
    operator delete(__p);
  }
  sub_1001882E8((uint64_t)&v7);
  return sub_10015DC28((uint64_t)&v6);
}

void sub_1001BD424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100188190((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BD440(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_10015036C((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 96) = v7;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  sub_10015042C((void *)(a1 + 136), *(const void **)(a2 + 136), *(void *)(a2 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x181uLL);
  return a1;
}

void sub_1001BD508(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001BD524(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  sub_1001751A0((unsigned char *)(a1 + 8), a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = v4;
  long long v5 = *(_OWORD *)(a2 + 600);
  long long v6 = *(_OWORD *)(a2 + 616);
  long long v7 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v7;
  *(_OWORD *)(a1 + 600) = v5;
  *(_OWORD *)(a1 + 616) = v6;
  long long v8 = *(_OWORD *)(a2 + 664);
  long long v9 = *(_OWORD *)(a2 + 680);
  long long v10 = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v10;
  *(_OWORD *)(a1 + 664) = v8;
  *(_OWORD *)(a1 + 680) = v9;
  long long v11 = *(_OWORD *)(a2 + 728);
  long long v12 = *(_OWORD *)(a2 + 744);
  long long v13 = *(_OWORD *)(a2 + 776);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 776) = v13;
  *(_OWORD *)(a1 + 728) = v11;
  *(_OWORD *)(a1 + 744) = v12;
  sub_1001881DC((unsigned char *)(a1 + 792), a2 + 792);
  memcpy((void *)(a1 + 872), (const void *)(a2 + 872), 0x149uLL);
  sub_1001751F8((__n128 *)(a1 + 1208), (__n128 *)(a2 + 1208));
  memcpy((void *)(a1 + 1328), (const void *)(a2 + 1328), 0x1D9uLL);
  return a1;
}

void sub_1001BD5E4(_Unwind_Exception *a1)
{
  sub_1001882E8(v2);
  sub_10015DC28(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BD608(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1001BD644(void *a1)
{
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    operator delete();
  }
  return a1;
}

void sub_1001BD6E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[PRGlobalDebugSettings sharedSettings];
  long long v6 = (char *)[v5 integerForKey:v3];

  if ((unint64_t)(v6 - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v7 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 134217984;
      long long v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#roseprovider,logging level set via debug settings: %ld", (uint8_t *)&v8, 0xCu);
    }
    sub_10022A8DC(v4 + 544, (char)v6);
  }
}

void sub_1001BD7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001BD808(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[PRGlobalDebugSettings sharedSettings];
  long long v6 = [v5 objectForKey:v3 ofClass:objc_opt_class()];

  id v7 = [v6 count];
  int v8 = qword_1008ABDE0;
  if (v7 == (id)2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      long long v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#roseprovider,LE thresholds set via debug settings: %@", (uint8_t *)&v12, 0xCu);
    }
    long long v9 = [v6 objectAtIndexedSubscript:0];
    long long v10 = [v9 intValue];
    long long v11 = [v6 objectAtIndexedSubscript:1];
    sub_10022AC88(v4 + 544, v10, (int)[v11 intValue]);
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100419D48();
  }
}

void sub_1001BD988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001BD9D0()
{
  return 0;
}

uint64_t sub_1001BD9D8()
{
  return 0;
}

uint64_t sub_1001BD9E0()
{
  return 0;
}

uint64_t sub_1001BD9E8()
{
  return 0;
}

uint64_t sub_1001BD9F0()
{
  return 0;
}

uint64_t sub_1001BD9F8(uint64_t a1, uint64_t a2)
{
  *(double *)a1 = (double)std::chrono::steady_clock::now().__d_.__rep_;
  *(_DWORD *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
  sub_100175338((unsigned char *)(a1 + 24), a2 + 8);
  *(void *)(a1 + 64) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 72) = 1;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 92) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 100) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  return a1;
}

uint64_t sub_1001BDA70(uint64_t a1, int a2)
{
  *(_WORD *)a1 = a2;
  if ((BYTE2(a2) - 1) > 6u) {
    int v3 = 0;
  }
  else {
    int v3 = dword_1004B8620[(char)(BYTE2(a2) - 1)];
  }
  *(_DWORD *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = sub_1001BDAD8(a1, HIBYTE(a2));
  return a1;
}

uint64_t sub_1001BDAD8(uint64_t a1, int a2)
{
  if ((a2 - 1) < 0x13) {
    return (a2 - 1) + 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1001BDAEC(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)a1 = 6;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(unsigned char *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 784) = 0;
  *(unsigned char *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 864) = 0;
  *(unsigned char *)(a1 + 872) = 0;
  *(unsigned char *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1008) = 0;
  *(unsigned char *)(a1 + 1088) = 0;
  *(unsigned char *)(a1 + 1096) = 0;
  *(unsigned char *)(a1 + 1200) = 0;
  uint64_t v4 = *a2;
  *(_WORD *)(a1 + 1216) = *((_WORD *)a2 + 4);
  *(void *)(a1 + 1208) = v4;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  long long v7 = *((_OWORD *)a2 + 3);
  *(_DWORD *)(a1 + 1272) = *((_DWORD *)a2 + 16);
  *(_OWORD *)(a1 + 1240) = v6;
  *(_OWORD *)(a1 + 1256) = v7;
  *(_OWORD *)(a1 + 1224) = v5;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1296) = 0;
  *(void *)(a1 + 1288) = 0;
  sub_10016DA68((void *)(a1 + 1280), (const void *)a2[9], a2[10], (a2[10] - a2[9]) >> 4);
  *(_OWORD *)(a1 + 1304) = *((_OWORD *)a2 + 6);
  *(unsigned char *)(a1 + 1320) = 1;
  *(unsigned char *)(a1 + 1328) = 0;
  *(unsigned char *)(a1 + 1592) = 0;
  *(unsigned char *)(a1 + 1600) = 0;
  *(unsigned char *)(a1 + 1672) = 0;
  *(unsigned char *)(a1 + 1680) = 0;
  *(unsigned char *)(a1 + 1728) = 0;
  *(unsigned char *)(a1 + 1736) = 0;
  *(unsigned char *)(a1 + 1800) = 0;
  return a1;
}

void sub_1001BDBE0(_Unwind_Exception *a1)
{
  sub_1001882E8(v2);
  sub_10015DC28(v1);
  _Unwind_Resume(a1);
}

void sub_1001BDBFC(uint64_t a1, double a2)
{
  *(_WORD *)a1 = 0;
  *(double *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  operator new();
}

void sub_1001BDC7C(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v5) {
    operator delete();
  }
  sub_100419DB4(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1001BDCB4(uint64_t a1, uint64_t a2, double a3)
{
  *(_WORD *)a1 = *(_WORD *)(a2 + 1);
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  operator new();
}

void sub_1001BDD34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BDD60(uint64_t a1, uint64_t a2, double a3)
{
  *(_WORD *)a1 = *(_WORD *)(a2 + 1);
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  operator new();
}

void sub_1001BDDD4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v4) {
    operator delete();
  }
  sub_100419E30(v2);
  _Unwind_Resume(a1);
}

void sub_1001BDE0C()
{
}

__n128 sub_1001BDE20(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1008573C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1001BDE74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1008573C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1001BDEAC(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_1001BDEF4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001BDF34()
{
}

uint64_t sub_1001BDF40(uint64_t a1)
{
  uint64_t v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(unsigned char *)(a1 + 8))
    {
      uint64_t result = std::mutex::try_lock(v2);
      *(unsigned char *)(a1 + 8) = result;
      return result;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::try_lock: already locked");
  return sub_1001BDF98();
}

void sub_1001BDF98(uint64_t a1)
{
  uint64_t v2 = *(std::mutex **)a1;
  if (v2)
  {
    if (!*(unsigned char *)(a1 + 8))
    {
      std::mutex::lock(v2);
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  sub_1001BDFF4();
}

uint64_t sub_1001BDFF4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_1001BE02C(*(void *)a1);
  }
  return a1;
}

void sub_1001BE02C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_1001BE070(v2, v3);
  }
}

void *sub_1001BE070(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v7 = result;
  unint64_t v8 = result[2];
  long long v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_1000267C4();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = sub_10002DBC4(v7, v11);
    long long v9 = (char *)v7[1];
    goto LABEL_17;
  }
  int v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    int v15 = &v9[v16];
    goto LABEL_20;
  }
  long long v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    long long v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  int v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *sub_1001BE180(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    size_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_1000267C4();
    }
    size_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      uint64_t v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      uint64_t v17 = 0;
    }
    BOOL v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    char v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      uint64_t v10 = *(char **)(a1 + 8);
      char v28 = v17;
    }
    uint64_t v30 = &v27[a5];
    uint64_t v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    char v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    long long v19 = &__src[a5];
    long long v21 = *(char **)(a1 + 8);
LABEL_17:
    int v22 = &v5[a5];
    long long v23 = &v21[-a5];
    long long v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      long long v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  long long v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  long long v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1001BE370()
{
}

void *sub_1001BE384(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_100857470;
  result[1] = v3;
  return result;
}

uint64_t sub_1001BE3CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100857470;
  a2[1] = v2;
  return result;
}

void sub_1001BE3F8(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t sub_1001BE404(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008574D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001BE444()
{
  return &off_1008574D0;
}

uint64_t sub_1001BE450(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 1;
  sub_10016E068(a1 + 8, a2);
  *(unsigned char *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 784) = 0;
  *(unsigned char *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 864) = 0;
  *(unsigned char *)(a1 + 872) = 0;
  *(unsigned char *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1008) = 0;
  *(unsigned char *)(a1 + 1088) = 0;
  *(unsigned char *)(a1 + 1096) = 0;
  *(unsigned char *)(a1 + 1200) = 0;
  *(unsigned char *)(a1 + 1208) = 0;
  *(unsigned char *)(a1 + 1320) = 0;
  *(unsigned char *)(a1 + 1328) = 0;
  *(unsigned char *)(a1 + 1592) = 0;
  *(unsigned char *)(a1 + 1600) = 0;
  *(unsigned char *)(a1 + 1672) = 0;
  *(unsigned char *)(a1 + 1680) = 0;
  *(unsigned char *)(a1 + 1728) = 0;
  *(unsigned char *)(a1 + 1736) = 0;
  *(unsigned char *)(a1 + 1800) = 0;
  return a1;
}

void sub_1001BE4D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112))
  {
    sub_10000AED4(a1 + 32);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 112) = 0;
  }
}

void *sub_1001BE514(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_10000B2C8((unsigned char *)__dst + 32, (uint64_t)(a2 + 2));
  __dst[13] = *((void *)a2 + 13);
  return __dst;
}

void sub_1001BE580(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001BE59C(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1001BE5B8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1001BE5D4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1001BE5EC(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(void *)(a1 + 4) = a2;
}

void sub_1001BE65C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1001BE670(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1001BE698()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C888))
  {
    sub_100004950(qword_10089C870, "PRRoseProviderNetworkListener");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C870, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C888);
  }
}

void sub_1001BE730(_Unwind_Exception *a1)
{
}

void sub_1001BE748(int a1, int a2, int a3, double a4)
{
  double v15 = a4;
  int v13 = a2;
  int valuePtr = a1;
  *(_OWORD *)keys = *(_OWORD *)off_100857750;
  long long v22 = *(_OWORD *)off_100857760;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v13);
  values[0] = (void *)CFAutorelease(v5);
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFTypeRef v7 = CFAutorelease(v6);
  unint64_t v8 = &kCFBooleanTrue;
  if (!a3) {
    unint64_t v8 = &kCFBooleanFalse;
  }
  CFBooleanRef v9 = *v8;
  values[1] = (void *)v7;
  values[2] = v9;
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &v15);
  values[3] = (void *)CFAutorelease(v10);
  CFDictionaryRef v11 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v12 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412546;
    CFStringRef v17 = @"ClientState";
    __int16 v18 = 2112;
    CFDictionaryRef v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "sending ranging event %@ to powerlog with dict: %@", buf, 0x16u);
  }
  PLLogRegisteredEvent();
  CFRelease(v11);
}

void sub_1001BE8D0(int a1)
{
  int valuePtr = a1;
  keys = @"State";
  CFNumberRef v1 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  values = (void *)CFAutorelease(v1);
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  PLLogRegisteredEvent();
  CFRelease(v2);
}

void sub_1001BE99C(unsigned int *a1)
{
  long long v46 = *(_OWORD *)off_100857790;
  long long v47 = *(_OWORD *)off_1008577A0;
  long long v48 = *(_OWORD *)off_1008577B0;
  long long v49 = *(_OWORD *)off_1008577C0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v35 = a1[14];
  uint64_t valuePtr = v2;
  uint64_t v4 = a1[3];
  uint64_t v33 = a1[2];
  uint64_t v34 = v3;
  uint64_t v5 = a1[5];
  uint64_t v31 = a1[4];
  uint64_t v32 = v4;
  uint64_t v6 = a1[7];
  uint64_t v29 = a1[6];
  uint64_t v30 = v5;
  *(_OWORD *)keys = *(_OWORD *)off_100857770;
  long long v45 = *(_OWORD *)off_100857780;
  uint64_t v27 = a1[8];
  uint64_t v28 = v6;
  uint64_t v26 = *((unsigned __int16 *)a1 + 18);
  uint64_t v25 = *((unsigned __int16 *)a1 + 19);
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  values[0] = (void *)CFAutorelease(v7);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v35);
  values[1] = (void *)CFAutorelease(v8);
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v34);
  values[2] = (void *)CFAutorelease(v9);
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v33);
  values[3] = (void *)CFAutorelease(v10);
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v32);
  values[4] = (void *)CFAutorelease(v11);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v31);
  values[5] = (void *)CFAutorelease(v12);
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v30);
  values[6] = (void *)CFAutorelease(v13);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v29);
  values[7] = (void *)CFAutorelease(v14);
  CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v28);
  values[8] = (void *)CFAutorelease(v15);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v27);
  values[9] = (void *)CFAutorelease(v16);
  CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &v26);
  values[10] = (void *)CFAutorelease(v17);
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &v25);
  values[11] = (void *)CFAutorelease(v18);
  CFDictionaryRef v19 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 12, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int64_t v20 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412290;
    *(void *)uint64_t v38 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "sending power stats to powerlog %@", buf, 0xCu);
    int64_t v20 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v21 = a1[10];
    unsigned int v22 = a1[11];
    unsigned int v24 = a1[12];
    unsigned int v23 = a1[13];
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)uint64_t v38 = v21;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)&v38[6] = v23;
    __int16 v39 = 1024;
    unsigned int v40 = v22;
    __int16 v41 = 1024;
    unsigned int v42 = v24;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "additional power stats - SLP count:%u, DSLP count:%u, wake count:%u, PMGR SLP count:%u", buf, 0x1Au);
  }
  PLLogRegisteredEvent();
  CFRelease(v19);
}

void sub_1001BEC88(int a1)
{
  keys = @"state";
  CFNumberRef v1 = (void **)&kCFBooleanTrue;
  if (!a1) {
    CFNumberRef v1 = (void **)&kCFBooleanFalse;
  }
  values = *v1;
  CFDictionaryRef v2 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v3 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    CFDictionaryRef v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "sending heartbeat status to powerlog %@", (uint8_t *)&v4, 0xCu);
  }
  PLLogRegisteredEvent();
  CFRelease(v2);
}

id sub_1001BEEFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObjectsFromArray:];
}

BOOL sub_1001BF494(uint64_t a1, void *a2)
{
  [a2 machContinuousTimeSeconds];
  return v3 > *(double *)(a1 + 32);
}

uint64_t sub_1001BF558(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = off_100857828;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 20) = xmmword_1004B8650;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 79) = 0;
  *(unsigned char *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 160) = xmmword_1004B8660;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 183) = 0;
  return a1;
}

void sub_1001BF608(uint64_t a1, char a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v4 = sub_100006C38();
  CFDictionaryRef v5 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = v17;
    sub_100004950(v17, off_1008578D0[a2]);
    if (v18 < 0) {
      uint64_t v6 = (void **)v17[0];
    }
    if (*(_DWORD *)(a1 + 32)) {
      CFNumberRef v7 = "WaitingForRequest";
    }
    else {
      CFNumberRef v7 = "RequestReceived";
    }
    sub_100004950(v15, v7);
    int v8 = v16;
    CFNumberRef v9 = (void **)v15[0];
    if (*(_DWORD *)(a1 + 164)) {
      CFNumberRef v10 = "NotRunning";
    }
    else {
      CFNumberRef v10 = "Running";
    }
    sub_100004950(__p, v10);
    CFNumberRef v11 = v15;
    if (v8 < 0) {
      CFNumberRef v11 = v9;
    }
    if (v14 >= 0) {
      CFNumberRef v12 = __p;
    }
    else {
      CFNumberRef v12 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218754;
    double v20 = v4;
    __int16 v21 = 2080;
    unsigned int v22 = v6;
    __int16 v23 = 2080;
    unsigned int v24 = v11;
    __int16 v25 = 2080;
    uint64_t v26 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] sessionRequested method:%s requestState:%s sessionState:%s", buf, 0x2Au);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    *(double *)(a1 + 88) = v4;
    *(unsigned char *)(a1 + 16) = a2;
    *(_DWORD *)(a1 + 32) = 0;
  }
  else
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419E9C();
    }
  }
}

void sub_1001BF814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

void sub_1001BF85C(uint64_t a1, int a2, int a3, int a4)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v8 = sub_100006C38();
  CFNumberRef v9 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      CFNumberRef v10 = "WaitingForRequest";
    }
    else {
      CFNumberRef v10 = "RequestReceived";
    }
    sub_100004950(v21, v10);
    int v11 = v22;
    CFNumberRef v12 = *(unsigned char **)v21;
    if (*(_DWORD *)(a1 + 164)) {
      CFNumberRef v13 = "NotRunning";
    }
    else {
      CFNumberRef v13 = "Running";
    }
    sub_100004950(__p, v13);
    char v14 = v21;
    if (v11 < 0) {
      char v14 = v12;
    }
    if (v20 >= 0) {
      CFNumberRef v15 = __p;
    }
    else {
      CFNumberRef v15 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134219266;
    *(double *)&uint8_t buf[4] = v8;
    __int16 v24 = 1024;
    int v25 = a2;
    __int16 v26 = 1024;
    int v27 = a3;
    __int16 v28 = 1024;
    int v29 = a4;
    __int16 v30 = 2080;
    uint64_t v31 = v14;
    __int16 v32 = 2080;
    uint64_t v33 = v15;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] sessionStarted anchors:%d channel:%d rangingMultiplier:%d requestState:%s sessionState:%s", buf, 0x32u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(*(void **)v21);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    *(double *)(a1 + 96) = v8;
    *(_DWORD *)(a1 + 116) = a3;
    *(_DWORD *)(a1 + 120) = a2;
    *(_DWORD *)(a1 + 112) = a4;
    *(_DWORD *)(a1 + 164) = 0;
    if (v8 <= *(double *)(a1 + 176) + 5.0) {
      int v16 = *(_DWORD *)(a1 + 172);
    }
    else {
      int v16 = 2;
    }
    *(_DWORD *)(a1 + 168) = v16;
    CFNumberRef v17 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      sub_100004950(buf, off_1008578E8[*(int *)(a1 + 168)]);
      if (v27 >= 0) {
        char v18 = buf;
      }
      else {
        char v18 = *(unsigned char **)buf;
      }
      *(_DWORD *)__int16 v21 = 136315138;
      *(void *)&v21[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#alisha-ca,Reason for this session: %s", v21, 0xCu);
      if (SHIBYTE(v27) < 0) {
        operator delete(*(void **)buf);
      }
    }

    if (!*(_DWORD *)(a1 + 32))
    {
      sub_1001BFB5C(a1, 0);
      sub_1001C00D0(a1);
      *(_DWORD *)(a1 + 32) = 1;
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419ED0();
    }
  }
}

void sub_1001BFB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1001BFB5C(uint64_t a1, int a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v4 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      CFDictionaryRef v5 = "WaitingForRequest";
    }
    else {
      CFDictionaryRef v5 = "RequestReceived";
    }
    sub_100004950(v26, v5);
    int v6 = v27;
    CFNumberRef v7 = *(unsigned char **)v26;
    if (*(_DWORD *)(a1 + 164)) {
      double v8 = "NotRunning";
    }
    else {
      double v8 = "Running";
    }
    sub_100004950(__p, v8);
    CFNumberRef v9 = v26;
    if (v6 < 0) {
      CFNumberRef v9 = v7;
    }
    if (v25 >= 0) {
      CFNumberRef v10 = __p;
    }
    else {
      CFNumberRef v10 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    int v29 = v9;
    __int16 v30 = 2080;
    uint64_t v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-ca,Sending core analytics for Alisha request; requestState:%s sessionState:%s",
      buf,
      0x16u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(*(void **)v26);
    }
  }

  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  CFNumberRef v12 = +[NSNumber numberWithInt:1];
  [v11 setValue:v12 forKey:@"numSessionsRequested"];

  int v13 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (v13 == 1)
    {
      char v14 = +[NSNumber numberWithInt:1];
      [v11 setValue:v14 forKey:@"numRecoveryRQSessions"];
    }
    else
    {
      if (v13 != 2) {
        goto LABEL_24;
      }
      char v14 = +[NSNumber numberWithInt:1];
      [v11 setValue:v14 forKey:@"numConfigRecoveryRQSessions"];
    }
  }
  else
  {
    char v14 = +[NSNumber numberWithInt:1];
    [v11 setValue:v14 forKey:@"numSessionRQSessions"];
  }

LABEL_24:
  switch(a2)
  {
    case 3:
      CFNumberRef v15 = +[NSNumber numberWithInt:1];
      [v11 setValue:v15 forKey:@"numDCKUnrecoverableErrors"];
      goto LABEL_30;
    case 2:
      CFNumberRef v15 = +[NSNumber numberWithInt:1];
      [v11 setValue:v15 forKey:@"numDCKRecoverableErrors"];
      goto LABEL_30;
    case 1:
      CFNumberRef v15 = +[NSNumber numberWithInt:1];
      [v11 setValue:v15 forKey:@"numTimesRangingDisallowed"];
LABEL_30:

      break;
  }
  if (*(unsigned char *)(a1 + 48) && *(unsigned char *)(a1 + 64) && *(double *)(a1 + 56) - *(double *)(a1 + 40) > 0.0)
  {
    int v16 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [v11 setValue:v16 forKey:@"getKeyDuration"];
  }
  if (*(unsigned char *)(a1 + 79) && *(unsigned char *)(a1 + 76))
  {
    CFNumberRef v17 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 75)];
    [v11 setValue:v17 forKey:@"recoverableErrorStatusCode"];
  }
  if (*(unsigned char *)(a1 + 84))
  {
    char v18 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
    [v11 setValue:v18 forKey:@"unrecoverableErrorStatusCode"];
  }
  id v19 = [v11 mutableCopy];
  char v20 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = [v19 description];
    id v22 = [v21 UTF8String];
    *(_DWORD *)__int16 v26 = 136315138;
    *(void *)&v26[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#alisha-ca,alisha request data to be uploaded:\n%s\n", v26, 0xCu);
  }
  id v23 = v19;
  AnalyticsSendEventLazy();
  sub_1001C00D0(a1);
}

void sub_1001BFFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001C00D0(uint64_t result)
{
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(unsigned char *)(result + 48)) {
    *(unsigned char *)(result + 48) = 0;
  }
  if (*(unsigned char *)(result + 64)) {
    *(unsigned char *)(result + 64) = 0;
  }
  if (*(unsigned char *)(result + 79)) {
    *(unsigned char *)(result + 79) = 0;
  }
  if (*(unsigned char *)(result + 84)) {
    *(unsigned char *)(result + 84) = 0;
  }
  return result;
}

void sub_1001C010C(uint64_t a1, unsigned int a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v4 = sub_100006C38();
  CFDictionaryRef v5 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    memset(&v17, 0, sizeof(v17));
    if (a2 >= 4)
    {
      int v6 = &v17;
    }
    else
    {
      int v6 = &v17;
      std::string::assign(&v17, off_100857900[a2]);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v6 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
    }
    if (*(_DWORD *)(a1 + 32)) {
      CFNumberRef v7 = "WaitingForRequest";
    }
    else {
      CFNumberRef v7 = "RequestReceived";
    }
    sub_100004950(v15, v7);
    int v8 = v16;
    CFNumberRef v9 = (void **)v15[0];
    if (*(_DWORD *)(a1 + 164)) {
      CFNumberRef v10 = "NotRunning";
    }
    else {
      CFNumberRef v10 = "Running";
    }
    sub_100004950(__p, v10);
    id v11 = v15;
    if (v8 < 0) {
      id v11 = v9;
    }
    if (v14 >= 0) {
      CFNumberRef v12 = __p;
    }
    else {
      CFNumberRef v12 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218754;
    double v19 = v4;
    __int16 v20 = 2080;
    id v21 = v6;
    __int16 v22 = 2080;
    id v23 = v11;
    __int16 v24 = 2080;
    char v25 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] sessionEnded reason:%s requestState:%s sessionState:%s", buf, 0x2Au);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419F04();
    }
  }
  else
  {
    *(double *)(a1 + 104) = v4;
    sub_1001C0384(a1, a2);
    sub_1001C0CC8(a1);
    *(_DWORD *)(a1 + 164) = 1;
  }
}

void sub_1001C0340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C0384(uint64_t a1, int a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v4 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      CFDictionaryRef v5 = "WaitingForRequest";
    }
    else {
      CFDictionaryRef v5 = "RequestReceived";
    }
    sub_100004950(v56, v5);
    int v6 = v57;
    CFNumberRef v7 = *(unsigned char **)v56;
    if (*(_DWORD *)(a1 + 164)) {
      int v8 = "NotRunning";
    }
    else {
      int v8 = "Running";
    }
    sub_100004950(__p, v8);
    CFNumberRef v9 = v56;
    if (v6 < 0) {
      CFNumberRef v9 = v7;
    }
    if (v55 >= 0) {
      CFNumberRef v10 = __p;
    }
    else {
      CFNumberRef v10 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    CFStringRef v59 = v9;
    __int16 v60 = 2080;
    long long v61 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-ca,Sending core analytics for Alisha session; requestState:%s sessionState:%s",
      buf,
      0x16u);
    if (v55 < 0) {
      operator delete(__p[0]);
    }
    if (v57 < 0) {
      operator delete(*(void **)v56);
    }
  }

  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  CFNumberRef v12 = +[NSNumber numberWithInt:1];
  [v11 setValue:v12 forKey:@"numSessions"];

  if (a2)
  {
    if (a2 == 1)
    {
      char v14 = +[NSNumber numberWithInt:1];
      [v11 setValue:v14 forKey:@"numSessionsTimeoutB"];
    }
    else
    {
      if (a2 != 2) {
        goto LABEL_24;
      }
      char v14 = +[NSNumber numberWithInt:1];
      [v11 setValue:v14 forKey:@"numSessionsSuspendRQ"];
    }
  }
  else
  {
    char v14 = +[NSNumber numberWithInt:1];
    [v11 setValue:v14 forKey:@"numSessionsTimeoutA"];
  }

LABEL_24:
  if (*(unsigned char *)(a1 + 156))
  {
    LODWORD(v13) = *(_DWORD *)(a1 + 152);
    CFNumberRef v15 = +[NSNumber numberWithFloat:v13];
    [v11 setValue:v15 forKey:@"cyclesToFirstSuccessfulRange"];
  }
  int v16 = *(_DWORD *)(a1 + 124);
  int v17 = *(_DWORD *)(a1 + 128);
  int v18 = *(_DWORD *)(a1 + 132);
  int v19 = v17 + v16 + v18;
  if (v19 >= 1)
  {
    float v20 = (float)v19;
    *(float *)&double v13 = (float)v16 / (float)v19;
    id v21 = +[NSNumber numberWithFloat:v13];
    [v11 setValue:v21 forKey:@"ratioCyclesNoAnchors"];

    *(float *)&double v22 = (float)v17 / v20;
    id v23 = +[NSNumber numberWithFloat:v22];
    [v11 setValue:v23 forKey:@"ratioCyclesSingleAnchor"];

    *(float *)&double v24 = (float)v18 / v20;
    char v25 = +[NSNumber numberWithFloat:v24];
    [v11 setValue:v25 forKey:@"ratioCyclesMultipleAnchors"];
  }
  double v26 = *(double *)(a1 + 96);
  if (v26 > 0.0)
  {
    double v27 = *(double *)(a1 + 104);
    if (v27 > 0.0 && v27 >= v26)
    {
      double v28 = v27 - v26;
      float v29 = v28;
      *(float *)&double v28 = v29;
      __int16 v30 = +[NSNumber numberWithFloat:v28];
      [v11 setValue:v30 forKey:@"sessionDuration"];

      *(float *)&double v31 = (float)(v29 * 14.0) / 3600.0;
      __int16 v32 = +[NSNumber numberWithFloat:v31];
      [v11 setValue:v32 forKey:@"energyExpenditure"];
    }
  }
  if (*(unsigned char *)(a1 + 140))
  {
    LODWORD(v26) = *(_DWORD *)(a1 + 136);
    uint64_t v33 = +[NSNumber numberWithFloat:v26];
    [v11 setValue:v33 forKey:@"firstSOIRSSI"];
  }
  if (*(unsigned char *)(a1 + 148))
  {
    LODWORD(v26) = *(_DWORD *)(a1 + 144);
    uint64_t v34 = +[NSNumber numberWithFloat:v26];
    [v11 setValue:v34 forKey:@"maxSOIRSSI"];
  }
  uint64_t v35 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 168)];
  [v11 setValue:v35 forKey:@"reasonForThisSession"];

  if (*(unsigned char *)(a1 + 184))
  {
    uint64_t v36 = +[NSNumber numberWithInt:1];
    [v11 setValue:v36 forKey:@"numSessionsWithUnlockEvent"];

    if (*(double *)(a1 + 192) - *(double *)(a1 + 88) > 0.0)
    {
      uint64_t v37 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      [v11 setValue:v37 forKey:@"timeToUnlock"];
    }
  }
  if (*(unsigned char *)(a1 + 185))
  {
    uint64_t v38 = +[NSNumber numberWithInt:1];
    [v11 setValue:v38 forKey:@"numSessionsWithLockEvent"];
  }
  if (*(unsigned char *)(a1 + 186))
  {
    __int16 v39 = +[NSNumber numberWithInt:1];
    [v11 setValue:v39 forKey:@"numSessionsWithReadyToDriveEvent"];
  }
  if (!*(unsigned char *)(a1 + 184) && !*(unsigned char *)(a1 + 185) && !*(unsigned char *)(a1 + 186))
  {
    unsigned int v40 = +[NSNumber numberWithInt:1];
    [v11 setValue:v40 forKey:@"numSessionsWithNoEvent"];
  }
  id v41 = [v11 mutableCopy];
  unsigned int v42 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    id v43 = [v41 description];
    id v44 = [v43 UTF8String];
    *(_DWORD *)NSErrorUserInfoKey v56 = 136315138;
    *(void *)&v56[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#alisha-ca,alisha session data to be uploaded:\n%s\n", v56, 0xCu);
  }
  id v45 = v41;
  AnalyticsSendEventLazy();
  id v46 = objc_alloc_init((Class)NSMutableDictionary);
  long long v47 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 112)];
  [v46 setValue:v47 forKey:@"ranMultiplier"];

  long long v48 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 116)];
  [v46 setValue:v48 forKey:@"selectedUwbChannel"];

  id v49 = [v46 mutableCopy];
  uint64_t v50 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    id v51 = [v49 description];
    id v52 = [v51 UTF8String];
    *(_DWORD *)NSErrorUserInfoKey v56 = 136315138;
    *(void *)&v56[4] = v52;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#alisha-ca,alisha parameter data to be uploaded:\n%s\n", v56, 0xCu);
  }
  id v53 = v49;
  AnalyticsSendEventLazy();
}

void sub_1001C0B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001C0CC8(uint64_t result)
{
  *(void *)(result + 112) = 0xFF00000000;
  *(_DWORD *)(result + 160) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  if (*(unsigned char *)(result + 140)) {
    *(unsigned char *)(result + 140) = 0;
  }
  if (*(unsigned char *)(result + 148)) {
    *(unsigned char *)(result + 148) = 0;
  }
  if (*(unsigned char *)(result + 156)) {
    *(unsigned char *)(result + 156) = 0;
  }
  *(_DWORD *)(result + 168) = 2;
  *(_WORD *)(result + 184) = 0;
  *(unsigned char *)(result + 186) = 0;
  *(void *)(result + 192) = 0;
  return result;
}

uint64_t sub_1001C0D1C(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  CFDictionaryRef v2 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      id v3 = "WaitingForRequest";
    }
    else {
      id v3 = "RequestReceived";
    }
    sub_100004950(v12, v3);
    int v4 = v13;
    CFDictionaryRef v5 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v6 = "NotRunning";
    }
    else {
      int v6 = "Running";
    }
    sub_100004950(__p, v6);
    CFNumberRef v7 = v12;
    if (v4 < 0) {
      CFNumberRef v7 = v5;
    }
    if (v11 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    CFNumberRef v15 = v7;
    __int16 v16 = 2080;
    int v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-ca,rangingWasDisallowed requestState:%s sessionState:%s", buf, 0x16u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419F38();
    }
  }
  else
  {
    sub_1001BFB5C(a1, 1);
  }
  uint64_t result = sub_1001C00D0(a1);
  *(_DWORD *)(a1 + 32) = 1;
  return result;
}

void sub_1001C0ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1001C0F00(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  int v4 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFDictionaryRef v5 = &v19;
    sub_10032B584((unsigned __int8 *)a2, &v19);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      CFDictionaryRef v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if (*(_DWORD *)(a1 + 32)) {
      int v6 = "WaitingForRequest";
    }
    else {
      int v6 = "RequestReceived";
    }
    sub_100004950(v17, v6);
    int v7 = v18;
    int v8 = (void **)v17[0];
    if (*(_DWORD *)(a1 + 164)) {
      CFNumberRef v9 = "NotRunning";
    }
    else {
      CFNumberRef v9 = "Running";
    }
    sub_100004950(__p, v9);
    CFNumberRef v10 = v17;
    if (v7 < 0) {
      CFNumberRef v10 = v8;
    }
    if (v16 >= 0) {
      char v11 = __p;
    }
    else {
      char v11 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    id v21 = v5;
    __int16 v22 = 2080;
    id v23 = v10;
    __int16 v24 = 2080;
    char v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-ca,dckErrorSendEventNotification notification:%s requestState:%s sessionState:%s", buf, 0x20u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419F6C();
    }
  }
  else
  {
    int v12 = *(unsigned __int8 *)(a1 + 79);
    int v13 = *(_DWORD *)(a2 + 3);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 75) = v13;
    if (!v12) {
      *(unsigned char *)(a1 + 79) = 1;
    }
    sub_1001BFB5C(a1, 2);
  }
  uint64_t result = sub_1001C00D0(a1);
  *(_DWORD *)(a1 + 32) = 1;
  return result;
}

void sub_1001C1118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1001C1160(uint64_t a1, int a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  int v4 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFDictionaryRef v5 = v17;
    sub_100333FC8(a2, v17);
    if (v18 < 0) {
      CFDictionaryRef v5 = (void **)v17[0];
    }
    if (*(_DWORD *)(a1 + 32)) {
      int v6 = "WaitingForRequest";
    }
    else {
      int v6 = "RequestReceived";
    }
    sub_100004950(v15, v6);
    int v7 = v16;
    int v8 = (void **)v15[0];
    if (*(_DWORD *)(a1 + 164)) {
      CFNumberRef v9 = "NotRunning";
    }
    else {
      CFNumberRef v9 = "Running";
    }
    sub_100004950(__p, v9);
    CFNumberRef v10 = v15;
    if (v7 < 0) {
      CFNumberRef v10 = v8;
    }
    if (v14 >= 0) {
      char v11 = __p;
    }
    else {
      char v11 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    float v20 = v5;
    __int16 v21 = 2080;
    __int16 v22 = v10;
    __int16 v23 = 2080;
    __int16 v24 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-ca,dckErrorReturnErrorCode errorCode:%s requestState:%s sessionState:%s", buf, 0x20u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419FA0();
    }
  }
  else
  {
    *(_DWORD *)(a1 + 80) = a2;
    *(unsigned char *)(a1 + 84) = 1;
    sub_1001BFB5C(a1, 3);
  }
  uint64_t result = sub_1001C00D0(a1);
  *(_DWORD *)(a1 + 32) = 1;
  return result;
}

void sub_1001C1364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

void sub_1001C13AC(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v2 = sub_100006C38();
  id v3 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v4 = "WaitingForRequest";
    }
    else {
      int v4 = "RequestReceived";
    }
    sub_100004950(v12, v4);
    int v5 = v13;
    int v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_100004950(__p, v7);
    int v8 = v12;
    if (v5 < 0) {
      int v8 = v6;
    }
    if (v11 >= 0) {
      CFNumberRef v9 = __p;
    }
    else {
      CFNumberRef v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    double v15 = v2;
    __int16 v16 = 2080;
    int v17 = v8;
    __int16 v18 = 2080;
    std::string v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] reportRangingIntentOnNewBluetoothConnection requestState:%s sessionState:%s", buf, 0x20u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  *(_DWORD *)(a1 + 172) = 0;
  *(double *)(a1 + 176) = v2;
}

void sub_1001C152C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C155C(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v2 = sub_100006C38();
  id v3 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v4 = "WaitingForRequest";
    }
    else {
      int v4 = "RequestReceived";
    }
    sub_100004950(v12, v4);
    int v5 = v13;
    int v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_100004950(__p, v7);
    int v8 = v12;
    if (v5 < 0) {
      int v8 = v6;
    }
    if (v11 >= 0) {
      CFNumberRef v9 = __p;
    }
    else {
      CFNumberRef v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    double v15 = v2;
    __int16 v16 = 2080;
    int v17 = v8;
    __int16 v18 = 2080;
    std::string v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] reportRangingIntentOnApproachingVehicle requestState:%s sessionState:%s", buf, 0x20u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  *(_DWORD *)(a1 + 172) = 1;
  *(double *)(a1 + 176) = v2;
}

void sub_1001C16E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C1710(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v2 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      id v3 = "WaitingForRequest";
    }
    else {
      id v3 = "RequestReceived";
    }
    sub_100004950(v11, v3);
    int v4 = v12;
    int v5 = (void **)v11[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v6 = "NotRunning";
    }
    else {
      int v6 = "Running";
    }
    sub_100004950(__p, v6);
    int v7 = v11;
    if (v4 < 0) {
      int v7 = v5;
    }
    if (v10 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    char v14 = v7;
    __int16 v15 = 2080;
    __int16 v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-ca,reportVehicleLocked requestState:%s sessionState:%s", buf, 0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100419FD4();
    }
  }
  else
  {
    *(unsigned char *)(a1 + 185) = 1;
  }
}

void sub_1001C18B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C18E0(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v2 = sub_100006C38();
  id v3 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v4 = "WaitingForRequest";
    }
    else {
      int v4 = "RequestReceived";
    }
    sub_100004950(v12, v4);
    int v5 = v13;
    int v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_100004950(__p, v7);
    int v8 = v12;
    if (v5 < 0) {
      int v8 = v6;
    }
    if (v11 >= 0) {
      CFNumberRef v9 = __p;
    }
    else {
      CFNumberRef v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    double v15 = v2;
    __int16 v16 = 2080;
    int v17 = v8;
    __int16 v18 = 2080;
    std::string v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] reportVehicleUnlocked requestState:%s sessionState:%s", buf, 0x20u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041A008();
    }
  }
  else if (!*(unsigned char *)(a1 + 184))
  {
    *(unsigned char *)(a1 + 184) = 1;
    *(double *)(a1 + 192) = v2;
  }
}

void sub_1001C1AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C1AD4(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v2 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      id v3 = "WaitingForRequest";
    }
    else {
      id v3 = "RequestReceived";
    }
    sub_100004950(v11, v3);
    int v4 = v12;
    int v5 = (void **)v11[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v6 = "NotRunning";
    }
    else {
      int v6 = "Running";
    }
    sub_100004950(__p, v6);
    int v7 = v11;
    if (v4 < 0) {
      int v7 = v5;
    }
    if (v10 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    char v14 = v7;
    __int16 v15 = 2080;
    __int16 v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-ca,reportVehicleReadyToDrive requestState:%s sessionState:%s", buf, 0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041A03C();
    }
  }
  else
  {
    *(unsigned char *)(a1 + 186) = 1;
  }
}

void sub_1001C1C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C1CA4(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v2 = sub_100006C38();
  id v3 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v4 = "WaitingForRequest";
    }
    else {
      int v4 = "RequestReceived";
    }
    sub_100004950(v12, v4);
    int v5 = v13;
    int v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_100004950(__p, v7);
    int v8 = v12;
    if (v5 < 0) {
      int v8 = v6;
    }
    if (v11 >= 0) {
      CFNumberRef v9 = __p;
    }
    else {
      CFNumberRef v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    double v15 = v2;
    __int16 v16 = 2080;
    int v17 = v8;
    __int16 v18 = 2080;
    std::string v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] getKeyStarted requestState:%s sessionState:%s", buf, 0x20u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041A070();
    }
  }
  else
  {
    *(double *)(a1 + 40) = v2;
    *(unsigned char *)(a1 + 48) = 1;
    if (*(unsigned char *)(a1 + 64)) {
      *(unsigned char *)(a1 + 64) = 0;
    }
  }
}

void sub_1001C1E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C1E9C(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  double v2 = sub_100006C38();
  id v3 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v4 = "WaitingForRequest";
    }
    else {
      int v4 = "RequestReceived";
    }
    sub_100004950(v12, v4);
    int v5 = v13;
    int v6 = (void **)v12[0];
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_100004950(__p, v7);
    int v8 = v12;
    if (v5 < 0) {
      int v8 = v6;
    }
    if (v11 >= 0) {
      CFNumberRef v9 = __p;
    }
    else {
      CFNumberRef v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    double v15 = v2;
    __int16 v16 = 2080;
    int v17 = v8;
    __int16 v18 = 2080;
    std::string v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-ca,[%.06f] getKeyFinished requestState:%s sessionState:%s", buf, 0x20u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }

  if (*(_DWORD *)(a1 + 32) == 1)
  {
    ++*(_DWORD *)(a1 + 28);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041A0A4();
    }
  }
  else
  {
    *(double *)(a1 + 56) = v2;
    *(unsigned char *)(a1 + 64) = 1;
  }
}

void sub_1001C2058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001C2088(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  int v4 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 32)) {
      int v5 = "WaitingForRequest";
    }
    else {
      int v5 = "RequestReceived";
    }
    int v6 = v26;
    sub_100004950(v26, v5);
    if (v27 < 0) {
      int v6 = (void **)v26[0];
    }
    if (*(_DWORD *)(a1 + 164)) {
      int v7 = "NotRunning";
    }
    else {
      int v7 = "Running";
    }
    sub_100004950(v24, v7);
    int v8 = v25;
    CFNumberRef v9 = (void **)v24[0];
    sub_1001C2354(a2);
    char v10 = v24;
    if (v8 < 0) {
      char v10 = v9;
    }
    if (v23 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 136315650;
    float v29 = v6;
    __int16 v30 = 2080;
    double v31 = v10;
    __int16 v32 = 2080;
    uint64_t v33 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-ca,sessionStatsUpdated requestState:%s sessionState:%s stats:%s", buf, 0x20u);
    if (v23 < 0) {
      operator delete(__p);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }

  if (*(_DWORD *)(a1 + 164) == 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041A0D8();
    }
  }
  else
  {
    double v12 = *(double *)(a2 + 48);
    if (!*(unsigned char *)(a1 + 148)) {
      *(unsigned char *)(a1 + 148) = 1;
    }
    float v13 = v12;
    *(float *)(a1 + 144) = v13;
    double v14 = *(double *)(a2 + 40);
    if (!*(unsigned char *)(a1 + 140)) {
      *(unsigned char *)(a1 + 140) = 1;
    }
    float v15 = v14;
    *(float *)(a1 + 136) = v15;
    unsigned int v16 = *(unsigned __int16 *)(a2 + 32);
    if (!*(unsigned char *)(a1 + 156)) {
      *(unsigned char *)(a1 + 156) = 1;
    }
    *(float *)(a1 + 152) = (float)v16;
    __int16 v18 = *(unsigned __int16 **)(a2 + 8);
    int v17 = *(unsigned __int16 **)(a2 + 16);
    if ((unint64_t)((char *)v17 - (char *)v18) <= 5) {
      sub_10041A10C();
    }
    *(_DWORD *)(a1 + 124) = *v18;
    std::string v19 = v18 + 2;
    *(_DWORD *)(a1 + 128) = v18[1];
    if (v18 + 2 == v17)
    {
      int v20 = 0;
    }
    else
    {
      int v20 = 0;
      do
      {
        int v21 = *v19++;
        v20 += v21;
      }
      while (v19 != v17);
    }
    *(_DWORD *)(a1 + 132) = v20;
  }
}

void sub_1001C230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1001C2354(uint64_t a1)
{
  sub_100054E28((uint64_t)v45);
  std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(v46[0] - 24)));
  double v2 = std::locale::use_facet(&v42, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  id v3 = sub_100056628(v46, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  int v4 = std::locale::use_facet(&v42, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v42.__locale_) = 9;
  int v5 = sub_100056628(v46, (uint64_t)&v42, 1);
  sub_100056628(v5, (uint64_t)"UWB session id: ", 16);
  int v6 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  int v7 = std::locale::use_facet(&v42, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v42.__locale_) = 9;
  int v8 = sub_100056628(v46, (uint64_t)&v42, 1);
  CFNumberRef v9 = sub_100056628(v8, (uint64_t)"Reason: ", 8);
  sub_100004950(&v42, off_100857920[*(char *)(a1 + 4)]);
  if ((v44 & 0x80u) == 0) {
    locale = &v42;
  }
  else {
    locale = v42.__locale_;
  }
  if ((v44 & 0x80u) == 0) {
    uint64_t v11 = v44;
  }
  else {
    uint64_t v11 = v43;
  }
  double v12 = sub_100056628(v9, (uint64_t)locale, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  float v13 = std::locale::use_facet(&v48, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v44 < 0) {
    operator delete(v42.__locale_);
  }
  LOBYTE(v42.__locale_) = 9;
  double v14 = sub_100056628(v46, (uint64_t)&v42, 1);
  sub_100056628(v14, (uint64_t)"# total blocks: ", 16);
  float v15 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
  unsigned int v16 = std::locale::use_facet(&v42, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v42.__locale_) = 9;
  int v17 = sub_100056628(v46, (uint64_t)&v42, 1);
  __int16 v18 = sub_100056628(v17, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
  std::string v19 = std::locale::use_facet(&v42, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  if (*(void *)(a1 + 16) != *(void *)(a1 + 8))
  {
    unint64_t v20 = 0;
    do
    {
      LOBYTE(v42.__locale_) = 9;
      int v21 = sub_100056628(v46, (uint64_t)&v42, 1);
      sub_100056628(v21, (uint64_t)"    # blocks with ", 18);
      std::ostream::operator<<();
      if (v20 == ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 1) - 1) {
        sub_100056628(v46, (uint64_t)"+", 1);
      }
      sub_100056628(v46, (uint64_t)" anchors: ", 10);
      __int16 v22 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
      char v23 = std::locale::use_facet(&v42, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v42);
      std::ostream::put();
      std::ostream::flush();
      ++v20;
    }
    while (v20 < (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 1);
  }
  LOBYTE(v42.__locale_) = 9;
  __int16 v24 = sub_100056628(v46, (uint64_t)&v42, 1);
  char v25 = sub_100056628(v24, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
  double v26 = std::locale::use_facet(&v42, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v42.__locale_) = 9;
  char v27 = sub_100056628(v46, (uint64_t)&v42, 1);
  sub_100056628(v27, (uint64_t)"First success block idx: ", 25);
  double v28 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
  float v29 = std::locale::use_facet(&v42, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v42.__locale_) = 9;
  __int16 v30 = sub_100056628(v46, (uint64_t)&v42, 1);
  double v31 = sub_100056628(v30, (uint64_t)"First success block soiRssi (dBm): ", 35);
  *(void *)((char *)v31 + *(void *)(*v31 - 24) + 16) = 5;
  __int16 v32 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
  uint64_t v33 = std::locale::use_facet(&v42, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v42.__locale_) = 9;
  uint64_t v34 = sub_100056628(v46, (uint64_t)&v42, 1);
  uint64_t v35 = sub_100056628(v34, (uint64_t)"Max soiRssi (dbm): ", 19);
  *(void *)((char *)v35 + *(void *)(*v35 - 24) + 16) = 5;
  uint64_t v36 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
  uint64_t v37 = std::locale::use_facet(&v42, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v38 = sub_100056628(v46, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
  __int16 v39 = std::locale::use_facet(&v42, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  *(void *)((char *)v45
  v46[0] = v40;
  if (v47 < 0) {
    operator delete((void *)v46[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1001C2D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

id sub_1001C2DF4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001C2DFC(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1001C2E04(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_1001C2E0C(uint64_t a1)
{
  return a1;
}

void sub_1001C2E38(uint64_t a1)
{
  operator delete();
}

void sub_1001C2FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C3060(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001C3314(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001C37E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001C3C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1001C3C98(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (id *)(a1 + 32);
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  int v6 = WeakRetained;
  if (WeakRetained)
  {
    int v7 = WeakRetained[4];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001C3D70;
    void v8[3] = &unk_100847588;
    objc_copyWeak(&v10, v4);
    id v9 = v3;
    dispatch_async(v7, v8);

    objc_destroyWeak(&v10);
  }
}

void sub_1001C3D70(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    [WeakRetained _stateTimerExpired];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1001C3DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001C40C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C424C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C441C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C4478(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001C4488(uint64_t a1)
{
}

void sub_1001C4490(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) objectForKey:a2];
  if (v3)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if ([v3 length]) {
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendData:v3];
      }
    }
  }
}

void sub_1001C4520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001C4628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C46D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C4778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C4858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C4954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C4A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1001C4ACC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [v3 rawToken];
  id v5 = [v4 length];

  if ((unint64_t)v5 >= 0x100) {
    __assert_rtn("+[NIDiscoveryToken serialize:]_block_invoke", "NIConfiguration.mm", 196, "tokenLength <= std::numeric_limits<uint8_t>::max()");
  }
  char v8 = (char)v5;
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) appendBytes:&v8 length:1];
  int v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  int v7 = [v3 rawToken];
  [v6 appendData:v7];
}

void sub_1001C4B94(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1001C4CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C4DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C4EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001C5014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C50B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C516C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C5224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C5394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C547C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001C55D4(_Unwind_Exception *a1)
{
  operator delete(v4);
  operator delete(v3);

  _Unwind_Resume(a1);
}

void sub_1001C5798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C58C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C59D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C5C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1001C5CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C5EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C6044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C61F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C66C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1001C685C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C6AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C6B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C6CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C6DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C706C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1001C72C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C7444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C75B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C77BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C78BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C7974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C7BB0(_Unwind_Exception *a1)
{
  int v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1001C7D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C7E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C7F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001C800C(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 48) = 0;
  sub_1001C922C((void *)(a1 + 32), *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 1);
  if (a3 < a2)
  {
    double v14 = "maxAzDeg >= minAzDeg";
    int v15 = 20;
    goto LABEL_8;
  }
  if (a5 < a4)
  {
    double v14 = "maxElDeg >= minElDeg";
    int v15 = 21;
    goto LABEL_8;
  }
  uint64_t v11 = a3 - a2 + 1;
  uint64_t v12 = a5 - a4 + 1;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  if (v12 * v11 != (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 1)
  {
    double v14 = "fNumRows * fNumCols == fPDOATable.size()";
    int v15 = 24;
LABEL_8:
    __assert_rtn("AOAtoPDOAMapping", "RoseAOAtoPDOAMapping.cpp", v15, v14);
  }
  return a1;
}

void sub_1001C80FC(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001C8118(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  *(_DWORD *)uint64_t result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a5;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(void *)(result + 48) = 0;
  *(_OWORD *)(result + 32) = *(_OWORD *)a6;
  *(void *)(result + 48) = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  if (a3 < a2)
  {
    char v8 = "maxAzDeg >= minAzDeg";
    int v9 = 30;
    goto LABEL_8;
  }
  if (a5 < a4)
  {
    char v8 = "maxElDeg >= minElDeg";
    int v9 = 31;
    goto LABEL_8;
  }
  uint64_t v6 = a3 - a2 + 1;
  uint64_t v7 = a5 - a4 + 1;
  *(void *)(result + 16) = v6;
  *(void *)(result + 24) = v7;
  if (v7 * v6 != (uint64_t)(*(void *)(result + 40) - *(void *)(result + 32)) >> 1)
  {
    char v8 = "fNumRows * fNumCols == fPDOATable.size()";
    int v9 = 34;
LABEL_8:
    __assert_rtn("AOAtoPDOAMapping", "RoseAOAtoPDOAMapping.cpp", v9, v8);
  }
  return result;
}

void sub_1001C81E4(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)(v1 + 32);
  if (v3)
  {
    *(void *)(v1 + 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001C8204(uint64_t a1, int a2, int a3)
{
  if (a2 < *(_DWORD *)a1) {
    sub_10041A2D8();
  }
  if (*(_DWORD *)(a1 + 4) < a2) {
    sub_10041A304();
  }
  int v3 = *(_DWORD *)(a1 + 8);
  BOOL v4 = __OFSUB__(a3, v3);
  int v5 = a3 - v3;
  if (v5 < 0 != v4) {
    sub_10041A330();
  }
  if (*(_DWORD *)(a1 + 12) < a3) {
    sub_10041A35C();
  }
  return *(__int16 *)(*(void *)(a1 + 32) + 2 * (*(void *)(a1 + 24) * (a2 - *(_DWORD *)a1) + v5));
}

uint64_t sub_1001C826C(uint64_t a1, int a2, int a3)
{
  if (a2 < *(_DWORD *)a1) {
    sub_10041A388();
  }
  if (*(_DWORD *)(a1 + 4) < a2) {
    sub_10041A3B4();
  }
  int v3 = *(_DWORD *)(a1 + 8);
  BOOL v4 = __OFSUB__(a3, v3);
  int v5 = a3 - v3;
  if (v5 < 0 != v4) {
    sub_10041A3E0();
  }
  if (*(_DWORD *)(a1 + 12) < a3) {
    sub_10041A40C();
  }
  return *(void *)(a1 + 32) + 2 * (*(void *)(a1 + 24) * (a2 - *(_DWORD *)a1) + v5);
}

unsigned char *sub_1001C82D4(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  a1[64] = 0;
  a1[72] = 0;
  a1[136] = 0;
  a1[128] = 0;
  a1[192] = 0;
  a1[200] = 0;
  a1[256] = 0;
  if (sub_1002BB2CC(a2))
  {
    unint64_t v11 = sub_1002BA508();
    if (!v12) {
      sub_10000AE44();
    }
    unint64_t v13 = v11;
    if (v11 < 0x2009E) {
      __assert_rtn("CalBlob", "RoseAOAtoPDOAMapping.cpp", 101, "fileSize >= kHeaderSize + kBytesPerChan");
    }
    sub_100164404(v38);
    int v21 = (char *)v38 + (unint64_t)*(v38[0] - 3);
    if (*((_DWORD *)v21 + 8))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v22 = a2;
      }
      else {
        uint64_t v22 = *(void *)a2;
      }
      sub_1003A9600("CalBlob: error opening %s", v14, v15, v16, v17, v18, v19, v20, v22);
    }
    else
    {
      *((_DWORD *)v21 + 2) &= ~0x1000u;
      std::istream::seekg();
      std::string __p = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      sub_1001C8C80(&__p, 0x7FF9uLL);
      __int16 v24 = (void *)std::istream::read();
      if ((*((unsigned char *)v24 + *(void *)(*v24 - 24) + 32) & 5) == 0)
      {
        std::istream::tellg();
        if (v37 != -1)
        {
          std::istream::tellg();
          if (v37 + 131052 <= v13 + 4)
          {
            std::istream::read();
            __assert_rtn("CalBlob", "RoseAOAtoPDOAMapping.cpp", 127, "length == kCh5Length");
          }
          __assert_rtn("CalBlob", "RoseAOAtoPDOAMapping.cpp", 123, "static_cast<size_t>(f.tellg()) + kBytesPerChan <= fileSize + sizeof(tag)");
        }
        sub_1003A9600("Current position in the file stream is -1, return", v25, v26, v27, v28, v29, v30, v31, v33);
      }
      if (__p)
      {
        uint64_t v35 = __p;
        operator delete(__p);
      }
    }
    std::filebuf::~filebuf();
    std::istream::~istream();
    std::ios::~ios();
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v23 = a2;
    }
    else {
      uint64_t v23 = *(void *)a2;
    }
    sub_1003A9600("CalBlob: file %s integrity check fails ", v4, v5, v6, v7, v8, v9, v10, v23);
  }
  return a1;
}

void sub_1001C8B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100164910(&a35);
  if (*(unsigned char *)(v35 + 256))
  {
    uint64_t v37 = *(void **)(v35 + 232);
    if (v37)
    {
      *(void *)(v35 + 240) = v37;
      operator delete(v37);
    }
  }
  if (*(unsigned char *)(v35 + 192))
  {
    uint64_t v38 = *(void **)(v35 + 168);
    if (v38)
    {
      *(void *)(v35 + 176) = v38;
      operator delete(v38);
    }
  }
  if (*(unsigned char *)(v35 + 128))
  {
    __int16 v39 = *(void **)(v35 + 104);
    if (v39)
    {
      *(void *)(v35 + 112) = v39;
      operator delete(v39);
    }
  }
  if (*(unsigned char *)(v35 + 64))
  {
    uint64_t v40 = *(void **)(v35 + 40);
    if (v40)
    {
      *(void *)(v35 + 48) = v40;
      operator delete(v40);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1001C8C80(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_1000267C4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_10014A47C(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    uint64_t v9 = &v6[2 * v8];
    uint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    char v12 = v7;
    if (v11 != *a1)
    {
      char v12 = v7;
      do
      {
        __int16 v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_1001C8D24(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 56);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  int64_t v5 = (void *)(a1 + 32);
  if (v3)
  {
    sub_100150500((uint64_t)v5, (__n128 *)(a2 + 32));
  }
  else
  {
    void *v5 = 0;
    v5[1] = 0;
    _DWORD v5[2] = 0;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  return a1;
}

unsigned char *sub_1001C8D94(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_1001C8D9C(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_1001C8DA4(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  return (v1 >> sub_1003A8E98(5, 1)) & 1;
}

uint64_t sub_1001C8DD8(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  return (v1 >> sub_1003A8E98(9, 1)) & 1;
}

BOOL sub_1001C8E0C(unsigned __int8 *a1)
{
  BOOL result = 0;
  if (*a1)
  {
    unsigned int v1 = *a1;
    if ((v1 >> sub_1003A8E98(9, 1)))
    {
      if (a1[192])
      {
        if (a1[256])
        {
          if (*((void *)a1 + 19) == 181
            && *((void *)a1 + 20) == 181
            && *((void *)a1 + 27) == 181
            && *((void *)a1 + 28) == 181)
          {
            unsigned int v3 = *a1;
            if (((v3 >> sub_1003A8E98(5, 1)) & 1) == 0
              || a1[64]
              && a1[128]
              && *((void *)a1 + 3) == 181
              && *((void *)a1 + 4) == 181
              && *((void *)a1 + 11) == 181
              && *((void *)a1 + 12) == 181)
            {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned __int8 *sub_1001C8EEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (!sub_1001C8E0C(a1) || !sub_1001C8E0C(a2) || (unsigned int v4 = *a1, v4 != *a2)) {
    sub_10041A464();
  }
  if (((v4 >> sub_1003A8E98(9, 1)) & 1) == 0 || (unsigned int v5 = *a2, ((v5 >> sub_1003A8E98(9, 1)) & 1) == 0)) {
    sub_10041A438();
  }
  int v6 = *a2;
  int v7 = 0;
  int v31 = (1 << sub_1003A8E98(5, 1)) & v6;
  uint64_t v32 = (uint64_t)(a1 + 8);
  do
  {
    for (int i = 0; i != 181; ++i)
    {
      if (!a1[192]) {
        goto LABEL_56;
      }
      uint64_t v9 = (unsigned __int16 *)sub_1001C826C((uint64_t)(a1 + 136), v7, i);
      if (!a2[192]) {
        goto LABEL_56;
      }
      int v10 = *v9;
      int v11 = sub_1001C8204((uint64_t)(a2 + 136), v7, i);
      __int16 v12 = v11 + v10;
      if ((__int16)(v11 + v10) > 180) {
        __int16 v12 = v11 + v10 - 360;
      }
      if (v12 < -179) {
        v12 += 360;
      }
      BOOL v13 = v10 == 0x7FFF || v11 == 0x7FFF;
      __int16 v14 = v13 ? 0x7FFF : v12;
      if (!a1[192]) {
        goto LABEL_56;
      }
      *(_WORD *)sub_1001C826C((uint64_t)(a1 + 136), v7, i) = v14;
      if (!a1[256]) {
        goto LABEL_56;
      }
      uint64_t v15 = (unsigned __int16 *)sub_1001C826C((uint64_t)(a1 + 200), v7, i);
      if (!a2[256]) {
        goto LABEL_56;
      }
      int v16 = *v15;
      int v17 = sub_1001C8204((uint64_t)(a2 + 200), v7, i);
      __int16 v18 = 0x7FFF;
      if (v16 != 0x7FFF && v17 != 0x7FFF)
      {
        __int16 v19 = v17 + v16;
        if ((__int16)(v17 + v16) > 180) {
          __int16 v19 = v17 + v16 - 360;
        }
        if (v19 >= -179) {
          __int16 v18 = v19;
        }
        else {
          __int16 v18 = v19 + 360;
        }
      }
      if (!a1[256]) {
LABEL_56:
      }
        sub_10000AE44();
      *(_WORD *)sub_1001C826C((uint64_t)(a1 + 200), v7, i) = v18;
      if (v31)
      {
        if (!a1[64]) {
          goto LABEL_56;
        }
        uint64_t v20 = (unsigned __int16 *)sub_1001C826C(v32, v7, i);
        if (!a2[64]) {
          goto LABEL_56;
        }
        int v21 = *v20;
        int v22 = sub_1001C8204((uint64_t)(a2 + 8), v7, i);
        __int16 v23 = 0x7FFF;
        if (v21 != 0x7FFF && v22 != 0x7FFF)
        {
          __int16 v24 = v22 + v21;
          if ((__int16)(v22 + v21) > 180) {
            __int16 v24 = v22 + v21 - 360;
          }
          if (v24 >= -179) {
            __int16 v23 = v24;
          }
          else {
            __int16 v23 = v24 + 360;
          }
        }
        if (!a1[64]) {
          goto LABEL_56;
        }
        *(_WORD *)sub_1001C826C(v32, v7, i) = v23;
        if (!a1[128]) {
          goto LABEL_56;
        }
        uint64_t v25 = (unsigned __int16 *)sub_1001C826C((uint64_t)(a1 + 72), v7, i);
        if (!a2[128]) {
          goto LABEL_56;
        }
        int v26 = *v25;
        int v27 = sub_1001C8204((uint64_t)(a2 + 72), v7, i);
        __int16 v28 = 0x7FFF;
        if (v26 != 0x7FFF && v27 != 0x7FFF)
        {
          __int16 v29 = v27 + v26;
          if ((__int16)(v27 + v26) > 180) {
            __int16 v29 = v27 + v26 - 360;
          }
          if (v29 >= -179) {
            __int16 v28 = v29;
          }
          else {
            __int16 v28 = v29 + 360;
          }
        }
        if (!a1[128]) {
          goto LABEL_56;
        }
        *(_WORD *)sub_1001C826C((uint64_t)(a1 + 72), v7, i) = v28;
      }
    }
    ++v7;
  }
  while (v7 != 181);
  return a1;
}

void *sub_1001C922C(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    BOOL result = sub_1001C92A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001C928C(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1001C92A8(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_1000267C4();
  }
  BOOL result = (char *)sub_10014A47C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t sub_1001C92E8()
{
  sub_10039D144();
  uint64_t v0 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  double v2 = std::string::append(&v38, ".bin");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1008A3E68 = v2->__r_.__value_.__r.__words[2];
  xmmword_1008A3E58 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3E58, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v4 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = std::string::append(&v38, ".bin");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1008A3E80 = v6->__r_.__value_.__r.__words[2];
  xmmword_1008A3E70 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3E70, (void *)&_mh_execute_header);
  sub_10039D144();
  size_t v8 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v38, ".bin");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1008A3E98 = v10->__r_.__value_.__r.__words[2];
  xmmword_1008A3E88 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3E88, (void *)&_mh_execute_header);
  sub_10039D144();
  __int16 v12 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  __int16 v14 = std::string::append(&v38, ".bin");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1008A3EB0 = v14->__r_.__value_.__r.__words[2];
  xmmword_1008A3EA0 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3EA0, (void *)&_mh_execute_header);
  sub_10039D144();
  int v16 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  __int16 v18 = std::string::append(&v38, ".bin");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1008A3EC8 = v18->__r_.__value_.__r.__words[2];
  xmmword_1008A3EB8 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3EB8, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v20 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v38, ".bin");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1008A3EE0 = v22->__r_.__value_.__r.__words[2];
  xmmword_1008A3ED0 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3ED0, (void *)&_mh_execute_header);
  sub_10039D144();
  __int16 v24 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  int v26 = std::string::append(&v38, ".bin");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1008A3EF8 = v26->__r_.__value_.__r.__words[2];
  xmmword_1008A3EE8 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3EE8, (void *)&_mh_execute_header);
  sub_10039D144();
  __int16 v28 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append(&v38, ".bin");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1008A3F10 = v30->__r_.__value_.__r.__words[2];
  xmmword_1008A3F00 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3F00, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v32 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  uint64_t v34 = std::string::append(&v38, ".bin");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1008A3F28 = v34->__r_.__value_.__r.__words[2];
  xmmword_1008A3F18 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3F18, (void *)&_mh_execute_header);
}

void sub_1001C9918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001C998C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008579E0[a1]);
}

void *sub_1001C99A0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100857A38[a1]);
}

void *sub_1001C99B4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100857A80[a1]);
}

void *sub_1001C99C8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100857AA0[a1]);
}

void sub_1001C9BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C9D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C9EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001C9F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  int v10 = v9;

  a9.super_class = (Class)NIServerObservationSession;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001CA0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CA318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CA474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CA500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001CA578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001CA5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001CA688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001CA790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id **sub_1001CA854(id **result, id *a2)
{
  double v2 = *result;
  *BOOL result = a2;
  if (v2)
  {

    operator delete();
  }
  return result;
}

void *sub_1001CA8B4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100858348[a1]);
}

void *sub_1001CA8C8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008583A0[a1]);
}

void *sub_1001CA8DC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008583E8[a1]);
}

void *sub_1001CA8F0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100858408[a1]);
}

void sub_1001CAB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CAE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10001A970(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1001CAF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_10001A970(a13);
  }
  a9.super_class = (Class)NIServerAcwgSession;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001CB24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CB734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27)
{
  sub_1001D0BEC((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1001CBA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1001CBD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1001CC250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001CC2FC(uint64_t a1)
{
  double v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1001CC6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

void sub_1001CCB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1001CD044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1001CD3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1001CD6DC(_Unwind_Exception *a1)
{
  long long v7 = v4;

  _Unwind_Resume(a1);
}

void sub_1001CDBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1001CDE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_1001CE110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1001CE340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_1001CE6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a14) {
    sub_10001A970(a14);
  }
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001CE8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CED58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CF124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CF410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001CF434(uint64_t a1)
{
  v8[0] = &off_1008787A8;
  v7[0] = @"numSessions";
  v7[1] = @"rangingDurationSecs";
  double v2 = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  v8[1] = v2;
  v7[2] = @"rangingReason";
  long long v3 = NIAcwgSessionTriggerReasonToString(*(void *)(a1 + 40));
  v8[2] = v3;
  v7[3] = @"suspendReason";
  uint64_t v4 = NIAcwgSuspendTriggerReasonToString(*(void *)(a1 + 48));
  void v8[3] = v4;
  long long v5 = +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:4];

  return v5;
}

void sub_1001CF550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CF8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void sub_1001CFAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001CFC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D0074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001D01FC(uint64_t a1)
{
  id WeakRetained = (unsigned __int16 *)objc_loadWeakRetained((id *)(a1 + 40));
  long long v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(unsigned __int16 *)(a1 + 52) == WeakRetained[32])
    {
      uint64_t v4 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(_DWORD *)(a1 + 48);
        int v6 = *(unsigned __int16 *)(a1 + 52);
        *(_DWORD *)std::string buf = 67109632;
        *(_DWORD *)__int16 v14 = v5;
        *(_WORD *)&void v14[4] = 1024;
        *(_DWORD *)&v14[6] = v6;
        LOWORD(v15) = 1024;
        *(_DWORD *)((char *)&v15 + 2) = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-acwg,AopSensorFusionUpdate: update.type = %u, update.btConnHandle = 0x%04x (%u)", buf, 0x14u);
      }
      v12.receiver = *(id *)(a1 + 32);
      v12.super_class = (Class)NIServerAcwgSession;
      long long v7 = [super resourcesManager];
      if (*(_DWORD *)(a1 + 48) == 1)
      {
        size_t v8 = (id)qword_1008ABDE0;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = *((void *)v3 + 7);
          int v10 = [*((id *)v3 + 42) lockIdentifier];
          *(_DWORD *)std::string buf = 138412546;
          *(void *)__int16 v14 = v9;
          *(_WORD *)&v14[8] = 2112;
          long long v15 = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#ses-acwg,Device stationary: Request suspending the session (c:%@, l:%@)", buf, 0x16u);
        }
        long long v11 = [v7 remote];
        [v11 requestAcwgRangingSessionSuspend:sub_1003387DC(*((void *)v3 + 9)) withSuspendTriggerReason:102];
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10041BA90();
  }
}

void sub_1001D0410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D06AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001D08D4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*(unsigned char *)(a1 + 64)) {
      BOOL v4 = a1 == a2;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      sub_1001D09E4((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
      uint64_t v5 = *(void *)(a2 + 24);
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      *(void *)(a1 + 24) = v5;
      int v6 = *(char **)(a2 + 40);
      long long v7 = *(char **)(a2 + 48);
      sub_1001BE070((void *)(a1 + 40), v6, v7, v7 - v6);
    }
  }
  else if (*(unsigned char *)(a1 + 64))
  {
    sub_1001D0998(a1);
  }
  else
  {
    sub_1001D0AE8(a1, a2);
    *(unsigned char *)(a1 + 64) = 1;
  }
}

void sub_1001D0998(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    double v2 = *(void **)(a1 + 40);
    if (v2)
    {
      *(void *)(a1 + 48) = v2;
      operator delete(v2);
    }
    long long v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
}

char *sub_1001D09E4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  unint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_1000267C4();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    BOOL result = sub_1001C92A8(v7, v11);
    long long v13 = (char *)v7[1];
    objc_super v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      __int16 v18 = v9;
      long long v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  objc_super v12 = (void **)(result + 8);
  __int16 v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  int v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    __int16 v18 = v9;
    long long v19 = v16;
LABEL_19:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  std::string *v12 = &v9[v17];
  return result;
}

uint64_t sub_1001D0AE8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_1001D0B70((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  uint64_t v4 = *(void *)(a2 + 24);
  __int16 v5 = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 32) = v5;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_10016D488((void *)(a1 + 40), *(const void **)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 48) - *(void *)(a2 + 40));
  return a1;
}

void sub_1001D0B54(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001D0B70(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    BOOL result = sub_1001C92A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001D0BD0(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001D0BEC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    double v2 = *(void **)(a1 + 40);
    if (v2)
    {
      *(void *)(a1 + 48) = v2;
      operator delete(v2);
    }
    long long v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void sub_1001D0C38(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1001D0CC0(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1001D0CC0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      std::string v37 = &v34[8 * v36];
      std::string v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        id v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)id v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100151930((uint64_t)a1, &v54);
    unsigned __int8 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      std::string v37 = &v34[8 * v47];
      std::locale v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        id v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)id v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  NSErrorUserInfoKey v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  id v53 = operator new(0x1000uLL);
  sub_100151A50(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1001D0F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001D0FD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100857AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001D0FF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100857AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001D104C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1001D1074(void *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x48uLL);
  sub_1001D10E8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_10001ABCC((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1001D10D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1001D10E8(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100846460;
  sub_1002CA668(a1 + 3, *a2);
  return a1;
}

void sub_1001D1134(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1001D1148(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1001D11D0(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1001D11D0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      std::string v37 = &v34[8 * v36];
      std::string v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        id v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)id v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100151930((uint64_t)a1, &v54);
    unsigned __int8 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      std::string v37 = &v34[8 * v47];
      std::locale v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        id v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)id v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  NSErrorUserInfoKey v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  id v53 = operator new(0x1000uLL);
  sub_100151A50(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1001D149C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001D14E8(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_1001D1558(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100857B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001D1578(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100857B48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001D15CC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1001D15F4(uint64_t a1)
{
  return a1;
}

void sub_1001D1620(uint64_t a1)
{
  operator delete();
}

void *sub_1001D166C(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100857B98;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001D16C4(uint64_t a1, void *a2)
{
  *a2 = off_100857B98;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001D170C(uint64_t a1)
{
}

void sub_1001D1714(id *a1)
{
  operator delete(a1);
}

void sub_1001D1750(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(NSObject **)(v4 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D1840;
  block[3] = &unk_100857C10;
  uint64_t v6 = *a3;
  void block[4] = v4;
  void block[5] = v6;
  int v8 = *((_DWORD *)a3 + 2);
  dispatch_async(v5, block);
  if (v3) {
    sub_10001A970(v3);
  }
}

uint64_t sub_1001D17F4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100857C30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001D1834()
{
  return &off_100857C30;
}

id sub_1001D1840(uint64_t a1)
{
  return [*(id *)(a1 + 32) serviceRequestDidUpdateStatus:*(void *)(a1 + 40) status:*(unsigned int *)(a1 + 48)];
}

uint64_t sub_1001D1850(uint64_t a1)
{
  return a1;
}

void sub_1001D187C(uint64_t a1)
{
  operator delete();
}

void *sub_1001D18C8(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100857C50;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001D1920(uint64_t a1, void *a2)
{
  *a2 = off_100857C50;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001D1968(uint64_t a1)
{
}

void sub_1001D1970(id *a1)
{
  operator delete(a1);
}

void sub_1001D19AC(uint64_t a1, void *a2, int *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  int v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(NSObject **)(v5 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001D1A98;
  v7[3] = &unk_100857CC8;
  void v7[4] = v5;
  int v8 = v4;
  dispatch_async(v6, v7);
  if (v3) {
    sub_10001A970(v3);
  }
}

uint64_t sub_1001D1A4C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100857CE8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001D1A8C()
{
  return &off_100857CE8;
}

id sub_1001D1A98(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _alishaSessionInvalidatedWithReason:*(unsigned int *)(a1 + 40)];
}

uint64_t sub_1001D1AA8(uint64_t a1)
{
  return a1;
}

void sub_1001D1AD4(uint64_t a1)
{
  operator delete();
}

void *sub_1001D1B20(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100857D08;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001D1B78(uint64_t a1, void *a2)
{
  *a2 = off_100857D08;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001D1BC0(uint64_t a1)
{
}

void sub_1001D1BC8(id *a1)
{
  operator delete(a1);
}

void sub_1001D1C04(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  long long v6 = a3[1];
  long long v20 = *a3;
  v21[0] = v6;
  *(_OWORD *)((char *)v21 + 11) = *(long long *)((char *)a3 + 27);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v22 = 0;
  sub_1001D2084(&v22, *((const void **)a3 + 6), *((void *)a3 + 7), *((void *)a3 + 7) - *((void *)a3 + 6));
  uint64_t v7 = *(void *)((char *)a3 + 77);
  v25[0] = *((void *)a3 + 9);
  *(void *)((char *)v25 + 5) = v7;
  uint64_t v26 = 0;
  long long v27 = 0;
  uint64_t v28 = 0;
  sub_1001D2100(&v26, *((const void **)a3 + 11), *((void *)a3 + 12), (uint64_t)(*((void *)a3 + 12) - *((void *)a3 + 11)) >> 4);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(NSObject **)(v8 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  long long v11 = v20;
  v12[0] = v21[0];
  block[2] = sub_1001D1E54;
  block[3] = &unk_100857D80;
  void block[4] = v8;
  *(_OWORD *)((char *)v12 + 11) = *(_OWORD *)((char *)v21 + 11);
  BOOL v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  sub_1001D2084(&v13, v22, (uint64_t)v23, v23 - (unsigned char *)v22);
  v16[0] = v25[0];
  *(void *)((char *)v16 + 5) = *(void *)((char *)v25 + 5);
  std::string __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_1001D2100(&__p, v26, (uint64_t)v27, (v27 - (unsigned char *)v26) >> 4);
  dispatch_async(v9, block);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    BOOL v14 = v13;
    operator delete(v13);
  }
  if (v26)
  {
    long long v27 = v26;
    operator delete(v26);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  if (v5) {
    sub_10001A970(v5);
  }
}

void sub_1001D1DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a35) {
    operator delete(a35);
  }
  if (v41) {
    sub_10001A970(v41);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001D1E08(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100857DB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001D1E48()
{
  return &off_100857DB0;
}

void sub_1001D1E54(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 40);
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 11) = *(_OWORD *)(a1 + 67);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  sub_1001D2084(&v7, *(const void **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 96) - *(void *)(a1 + 88));
  uint64_t v4 = *(void *)(a1 + 117);
  v10[0] = *(void *)(a1 + 112);
  *(void *)((char *)v10 + 5) = v4;
  std::string __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_1001D2100(&__p, *(const void **)(a1 + 128), *(void *)(a1 + 136), (uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 4);
  [v2 _handleInitiatorRangingBlockUpdate:&v5];
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }
}

void sub_1001D1F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
}

void *sub_1001D1F3C(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_1001D1F80(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 67) = *(_OWORD *)(a2 + 67);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_1001D2084((void *)(a1 + 88), *(const void **)(a2 + 88), *(void *)(a2 + 96), *(void *)(a2 + 96) - *(void *)(a2 + 88));
  uint64_t v6 = *(void *)(a2 + 112);
  uint64_t v7 = *(void *)(a2 + 117);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 117) = v7;
  *(void *)(a1 + 112) = v6;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return sub_1001D2100((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4);
}

void sub_1001D2010(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D202C(void *a1)
{
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
}

void *sub_1001D2084(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    id result = sub_10002DBC4(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001D20E4(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001D2100(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    id result = sub_100155838(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001D2160(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001D217C(uint64_t a1)
{
  return a1;
}

void sub_1001D21A8(uint64_t a1)
{
  operator delete();
}

void *sub_1001D21F4(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100857DD0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001D224C(uint64_t a1, void *a2)
{
  *a2 = off_100857DD0;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001D2294(uint64_t a1)
{
}

void sub_1001D229C(id *a1)
{
  operator delete(a1);
}

void sub_1001D22D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  long long v4 = (const void *)a2[1];
  uint64_t v14 = v5;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_1001D0B70(&v15, v4, a2[2], (a2[2] - (uint64_t)v4) >> 1);
  uint64_t v19 = a2[6];
  long long v18 = *((_OWORD *)a2 + 2);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(NSObject **)(v6 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1001D2460;
  block[3] = &unk_100857E48;
  void block[4] = v6;
  void block[5] = v14;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  sub_1001D0B70(&__p, v15, (uint64_t)v16, (v16 - (unsigned char *)v15) >> 1);
  long long v12 = v18;
  uint64_t v13 = v19;
  dispatch_async(v7, block);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_1001D23F8(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)(v1 - 80);
  if (v3)
  {
    *(void *)(v1 - 72) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001D2414(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100857E78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001D2454()
{
  return &off_100857E78;
}

void sub_1001D2460(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_1001D0B70(&__p, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 1);
  long long v7 = *(_OWORD *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 88);
  [v2 _handleSessionStats:&v3];
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void sub_1001D24D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1001D24F4(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  a1[6] = 0;
  long long v4 = a1 + 6;
  a1[5] = v3;
  a1[7] = 0;
  a1[8] = 0;
  sub_1001D0B70(a1 + 6, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 1);
  __n128 result = *(__n128 *)(a2 + 72);
  v4[5] = *(void *)(a2 + 88);
  *(__n128 *)(v4 + 3) = result;
  return result;
}

void sub_1001D2550(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1001D2568(uint64_t a1)
{
  return a1;
}

void sub_1001D2594(uint64_t a1)
{
  operator delete();
}

void *sub_1001D25E0(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100857E98;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001D2638(uint64_t a1, void *a2)
{
  *a2 = off_100857E98;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001D2680(uint64_t a1)
{
}

void sub_1001D2688(id *a1)
{
  operator delete(a1);
}

void sub_1001D26C4(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *(NSObject **)(v3 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1001D2794;
  v5[3] = &unk_100857CC8;
  void v5[4] = v3;
  int v6 = v2;
  dispatch_async(v4, v5);
}

uint64_t sub_1001D2748(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100857F08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001D2788()
{
  return &off_100857F08;
}

id sub_1001D2794(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleHealthChanged:*(unsigned int *)(a1 + 40)];
}

uint64_t sub_1001D27A4(uint64_t a1)
{
  return a1;
}

void sub_1001D27D0(uint64_t a1)
{
  operator delete();
}

void *sub_1001D281C(uint64_t a1)
{
  int v2 = operator new(0x10uLL);
  *int v2 = off_100857F28;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001D2874(uint64_t a1, void *a2)
{
  *a2 = off_100857F28;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001D28BC(uint64_t a1)
{
}

void sub_1001D28C4(id *a1)
{
  operator delete(a1);
}

double sub_1001D2900(uint64_t a1, int *a2, uint64_t *a3)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(NSObject **)(v4 + 48);
  uint64_t v6 = *a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D29D8;
  block[3] = &unk_100857C10;
  void block[4] = v4;
  int v9 = v3;
  void block[5] = v6;
  dispatch_async(v5, block);
  return result;
}

uint64_t sub_1001D298C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100857F98)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001D29CC()
{
  return &off_100857F98;
}

id sub_1001D29D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleTimeoutEvent:*(unsigned int *)(a1 + 48) time:*(double *)(a1 + 40)];
}

void *sub_1001D29EC(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001D2A70(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001D2AF4(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001D2B78(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001D2BFC(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001D2C80(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001D2D04(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001D2D88@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  double result = sub_1001D2DE4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1001D2DD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1001D2DE4(void *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100857FB8;
  sub_1001D2EE0((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_1001D2E30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1001D2E44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100857FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001D2E64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100857FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001D2EB8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1001D2EE0(uint64_t a1, char a2)
{
  *(void *)a1 = off_100858008;
  int v4 = sub_100326F58(@"AcwgMinRanMultiplierOverride", (id)2);
  if (v4 <= 0) {
    sub_10041BB3C();
  }
  if (v4 >= 0x100) {
    sub_10041BB68();
  }
  *(unsigned char *)(a1 + 8) = v4;
  double v5 = 3.0;
  if ((a2 & 1) == 0)
  {
    double v5 = sub_100327230(@"AcwgStartTimeOffsetSeconds", 0.1);
    if (v5 <= 0.0) {
      sub_10041BB94();
    }
  }
  *(void *)(a1 + 16) = llround(v5 * 1000000.0);
  return a1;
}

void sub_1001D2F90()
{
}

_WORD *sub_1001D2FA4@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v2 = operator new(2uLL);
  *a1 = v2;
  *int v2 = 256;
  double result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_1001D2FE4(void *a1@<X8>)
{
  __int16 v13 = 0;
  int v2 = sub_1002F6464();
  uint64_t v3 = *((void *)v2 + 406);
  int v4 = (std::__shared_weak_count *)*((void *)v2 + 407);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v14 = 0;
  BOOL v5 = sub_1002CE2DC(v3, &v14, (unsigned __int8 *)&v13, 0);
  if (v4) {
    sub_10001A970(v4);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v5)
  {
    BOOL v6 = v14 != 5;
    long long v7 = operator new(1uLL);
    *long long v7 = v6;
    a1[1] = v7 + 1;
    a1[2] = v7 + 1;
    *a1 = v7;
    if (HIBYTE(v13))
    {
      uint64_t v8 = v7;
      int v9 = v13;
      uint64_t v10 = operator new(2uLL);
      BOOL v11 = v9 != 5;
      long long v12 = v10 + 2;
      v10[1] = v11;
      unsigned char *v10 = *v8;
      *a1 = v10;
      a1[2] = v10 + 2;
      operator delete(v8);
      a1[1] = v12;
    }
  }
}

void sub_1001D30D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1001D3100(uint64_t a1, unsigned int a2)
{
  v48[0] = 0;
  v48[1] = 0;
  uint64_t v47 = (uint64_t *)v48;
  uint64_t v3 = (std::recursive_mutex *)sub_1002F6464();
  v51[0] = off_100858078;
  v51[1] = &v47;
  v51[3] = v51;
  sub_1002FA390(v3, (uint64_t)v51);
  sub_1001D3984(v51);
  sub_100004950(&v46, "\n");
  int v4 = v47;
  if (v47 != (uint64_t *)v48)
  {
    do
    {
      unsigned int v5 = *(_DWORD *)((char *)v4 + 26);
      sub_1003A7E38(v5);
      BOOL v6 = std::string::insert(&v42, 0, "    ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      uint64_t v8 = std::string::append(&v43, ": ");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v41, HIWORD(v5));
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v10 = &v41;
      }
      else {
        uint64_t v10 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v41.__r_.__value_.__l.__size_;
      }
      long long v12 = std::string::append(&v44, (const std::string::value_type *)v10, size);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      char v14 = std::string::append(&v45, "\n");
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      int64_t v50 = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string buf = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v50 >= 0) {
        uint64_t v16 = buf;
      }
      else {
        uint64_t v16 = *(uint8_t **)buf;
      }
      if (v50 >= 0) {
        std::string::size_type v17 = HIBYTE(v50);
      }
      else {
        std::string::size_type v17 = *(void *)&buf[8];
      }
      std::string::append(&v46, (const std::string::value_type *)v16, v17);
      if (SHIBYTE(v50) < 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      long long v18 = (uint64_t *)v4[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          long long v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (uint64_t *)v4[2];
          BOOL v20 = *v19 == (void)v4;
          int v4 = v19;
        }
        while (!v20);
      }
      int v4 = v19;
    }
    while (v19 != (uint64_t *)v48);
  }
  uint64_t v21 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v22 = &v46;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v22 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#ses-acwg,Preamble use counts: {%s}", buf, 0xCu);
  }
  uint64_t v23 = 4294965278;
  if (a2)
  {
    int v24 = 0;
    unsigned __int8 v25 = 0;
    int v26 = 0;
    unsigned int v27 = a2;
    int v28 = 0;
    unsigned __int16 v29 = 0;
    std::string::value_type v30 = 1;
    unsigned int v39 = v27;
    char v40 = 0;
    do
    {
      if (v27)
      {
        switch(v30)
        {
          case 9:
            char v31 = 0;
            goto LABEL_44;
          case 10:
            char v31 = 1;
            goto LABEL_44;
          case 11:
            char v31 = 2;
            goto LABEL_44;
          case 12:
            char v31 = 3;
LABEL_44:
            v44.__r_.__value_.__s.__data_[0] = v30;
            *(void *)std::string buf = &v44;
            long long v32 = sub_1001D3A08(&v47, (unsigned __int8 *)&v44, (uint64_t)&unk_1004BC2F8, (unsigned char **)buf);
            if (!v28 || *((unsigned __int16 *)v32 + 14) < v29)
            {
              int v28 = 1;
              unsigned __int16 v29 = *((_WORD *)v32 + 14);
              char v40 = v31;
              int v26 = 1;
              unsigned __int8 v25 = v30;
              int v24 = 1;
            }
            break;
          default:
            break;
        }
      }
      ++v30;
      BOOL v33 = v27 > 1;
      v27 >>= 1;
    }
    while (v33);
    uint64_t v34 = 0;
    if (v24 && v26 && v28)
    {
      long long v35 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v39;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v25;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v50) = v29;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#ses-acwg,Sync code bitmask 0x%x. Preferred sync code index %u. Current use count %u.", buf, 0x14u);
      }
      uint64_t v23 = 0;
      unint64_t v36 = (unint64_t)v25 << 32;
      uint64_t v34 = 0x1000000000000;
      unsigned __int8 v37 = v40;
    }
    else
    {
      unint64_t v36 = 0;
      unsigned __int8 v37 = v40;
      uint64_t v23 = 4294965278;
    }
  }
  else
  {
    unsigned __int8 v37 = 0;
    uint64_t v34 = 0;
    unint64_t v36 = 0;
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  sub_10003E96C((uint64_t)&v47, v48[0]);
  return v23 | ((unint64_t)v37 << 40) | v34 | v36;
}

void sub_1001D35A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,void *a51)
{
}

uint64_t sub_1001D368C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1001D3694(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!*a2)
  {
    uint64_t v3 = sub_1002F6464();
    unint64_t v4 = sub_1002F8F5C((uint64_t)v3);
    BOOL v6 = HIWORD(v4) != 1 || (v4 & 0xFF00) == 0;
    BOOL v7 = v6 || v4 == 0;
    if (!v7 && v5 != 0)
    {
      long long v9 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ses-acwg,Applying additional start time offset for Ch5 coex", v11, 2u);
      }
      v2 += 50000;
    }
  }
  return v2;
}

void sub_1001D3744()
{
}

void *sub_1001D3758(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_100858078;
  result[1] = v3;
  return result;
}

uint64_t sub_1001D37A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100858078;
  a2[1] = v2;
  return result;
}

void sub_1001D37CC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001D37D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001D3814()
{
}

void sub_1001D3820(uint64_t ***a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 105))
  {
    unsigned __int8 v6 = *(unsigned char *)(a2 + 104);
    if (!sub_1003A7C00(v6))
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_10041BBF4();
      }
      char v5 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/Session/N"
                             "IServerAcwgSession.mm";
        __int16 v8 = 1024;
        int v9 = 186;
        __int16 v10 = 2080;
        BOOL v11 = "operator()";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#ses-acwg,%s:%d: assertion failure in %s", buf, 0x1Cu);
      }
      abort();
    }
    uint64_t v3 = *a1;
    *(void *)std::string buf = &v6;
    unint64_t v4 = sub_1001D3A08(v3, &v6, (uint64_t)&unk_1004BC2F8, (unsigned char **)buf);
    ++*((_WORD *)v4 + 14);
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
  {
    sub_10041BBC0();
  }
}

void *sub_1001D3984(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t **sub_1001D3A08(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  BOOL v7 = a1 + 1;
  unsigned __int8 v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 26);
        if (v8 >= v10) {
          break;
        }
        unsigned __int8 v6 = *v9;
        BOOL v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned __int8 v6 = v9[1];
      if (!v6)
      {
        BOOL v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x20uLL);
    v11[26] = **a4;
    *((_WORD *)v11 + 14) = 0;
    sub_100026D98(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1001D3ACC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100858108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001D3AEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100858108;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1001D3B40(uint64_t a1)
{
  sub_1001D3CB8((uint64_t)&v1, (void *)(a1 + 24));
}

void sub_1001D3B70()
{
}

void *sub_1001D3B84()
{
  double result = operator new(0x10uLL);
  *double result = off_100858158;
  return result;
}

void sub_1001D3BBC(uint64_t a1, void *a2)
{
  *a2 = off_100858158;
}

uint64_t sub_1001D3BE8(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008581C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001D3C28()
{
  return &off_1008581C8;
}

void *sub_1001D3C34(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001D3CB8(uint64_t a1, void *a2)
{
  sub_1001D3C34(a2 + 13);
  uint64_t v3 = (void *)a2[9];
  if (v3)
  {
    a2[10] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
  char v5 = (std::__shared_weak_count *)a2[3];
  if (v5) {
    sub_10001A970(v5);
  }
  unsigned __int8 v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    sub_10001A970(v6);
  }
}

void sub_1001D3D30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008581E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001D3D50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008581E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001D3DA4(uint64_t a1)
{
  return sub_100337AD8(a1 + 24);
}

uint64_t sub_1001D3DB0(uint64_t a1)
{
  return a1;
}

void sub_1001D3DDC(uint64_t a1)
{
  operator delete();
}

void *sub_1001D3E28(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100858238;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001D3E80(uint64_t a1, void *a2)
{
  *a2 = off_100858238;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001D3EC8(uint64_t a1)
{
}

void sub_1001D3ED0(id *a1)
{
  operator delete(a1);
}

void sub_1001D3F0C(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 48));
  unsigned __int8 v6 = *(id **)(a1 + 8);
  BOOL v7 = [v6[42] debugOptions];
  [v6 _ownerDeviceServiceRequestDebugParams:v7];

  unsigned int v8 = *(void **)(a1 + 8);
  if (v8)
  {
    [v8 _aopJobConfigWithTimeouts];
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    char v18 = 0;
  }
  long long v15 = *a2;
  LODWORD(v16) = *((_DWORD *)a2 + 4);
  if (sub_1003270D8(@"ACWGDisableMacModeVariant", 0) && BYTE3(v16)) {
    BYTE3(v16) = 0;
  }
  int v9 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    sub_10032FB68((uint64_t)&v15);
    unsigned int v10 = v22 >= 0 ? __p : (void **)__p[0];
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#ses-acwg,RangeEnableCommand: %s", (uint8_t *)&buf, 0xCu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }

  *(void *)&double v11 = sub_100180238((int *)&v15, 106, (uint64_t)v17, v19, (uint64_t)__p).n128_u64[0];
  long long v12 = *(void **)(a1 + 8);
  if (v12)
  {
    [v12 _buildAlishaSession:__p v11, v15, v16];
    if ((void)buf)
    {
      uint64_t v13 = buf + 8;
      char v14 = (std::__shared_weak_count *)*((void *)&buf + 1);
      if (*((void *)&buf + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 1uLL, memory_order_relaxed);
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = v13;
        *(void *)(a3 + 16) = v14;
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        *(unsigned char *)(a3 + 24) = 1;
        sub_10001A970(v14);
      }
      else
      {
        *(_DWORD *)a3 = 0;
        *(void *)(a3 + 8) = v13;
        *(void *)(a3 + 16) = 0;
        *(unsigned char *)(a3 + 24) = 1;
      }
      goto LABEL_21;
    }
  }
  else
  {
    long long buf = 0uLL;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10041BC28();
  }
  *(_DWORD *)a3 = -1013;
  *(unsigned char *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 24) = 0;
LABEL_21:
  if (*((void *)&buf + 1)) {
    sub_10001A970(*((std::__shared_weak_count **)&buf + 1));
  }
}

void sub_1001D4148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001D416C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008582A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001D41AC()
{
  return &off_1008582A8;
}

uint64_t sub_1001D41B8(uint64_t a1)
{
  return a1;
}

void sub_1001D41E4(uint64_t a1)
{
  operator delete();
}

void *sub_1001D4230(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_1008582C8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001D4288(uint64_t a1, void *a2)
{
  *a2 = off_1008582C8;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001D42D0(uint64_t a1)
{
}

void sub_1001D42D8(id *a1)
{
  operator delete(a1);
}

id sub_1001D4314(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 48));
  unsigned __int8 v6 = *(void **)(a1 + 8);

  return _[v6 _alishaStateChangedFromState:v4 toNewState:v5];
}

uint64_t sub_1001D4374(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100858338)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001D43B4()
{
  return &off_100858338;
}

void *sub_1001D43C0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001D4444(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001D44D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C888))
  {
    sub_100004950(qword_10089C870, "PRRoseProviderNetworkListener");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C870, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C888);
  }
}

void sub_1001D4570(_Unwind_Exception *a1)
{
}

void sub_1001D4588()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8A8))
  {
    sub_100004950(&qword_10089C890, "com.apple.nearbyd.accessory.download");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C890, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8A8);
  }
}

void sub_1001D4620(_Unwind_Exception *a1)
{
}

void sub_1001D4638()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8C8))
  {
    sub_100004950(&qword_10089C8B0, "com.apple.nearbyd.accessory.files");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C8B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8C8);
  }
}

void sub_1001D46D0(_Unwind_Exception *a1)
{
}

void sub_1001D46E8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8E8))
  {
    sub_100004950(qword_10089C8D0, "MA_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8E8);
  }
}

void sub_1001D4780(_Unwind_Exception *a1)
{
}

void sub_1001D4798()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C908))
  {
    sub_100004950(qword_10089C8F0, "MB_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C908);
  }
}

void sub_1001D4830(_Unwind_Exception *a1)
{
}

void sub_1001D4848()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C928))
  {
    sub_100004950(qword_10089C910, "D");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C910, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C928);
  }
}

void sub_1001D48E0(_Unwind_Exception *a1)
{
}

void sub_1001D48F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C948, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C948))
  {
    sub_100004950(&qword_10089C930, "A");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C930, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C948);
  }
}

void sub_1001D4990(_Unwind_Exception *a1)
{
}

void sub_1001D49A8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C968))
  {
    sub_100004950(qword_10089C950, "FAS.bin");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C950, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C968);
  }
}

void sub_1001D4A40(_Unwind_Exception *a1)
{
}

void sub_1001D4A58()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C988))
  {
    qword_10089C970 = 0;
    qword_10089C978 = 0;
    qword_10089C980 = 0;
    uint64_t v0 = operator new(0x30uLL);
    qword_10089C978 = (uint64_t)(v0 + 3);
    qword_10089C980 = (uint64_t)(v0 + 3);
    _OWORD *v0 = xmmword_1004B8720;
    v0[1] = *(_OWORD *)algn_1004B8730;
    v0[2] = xmmword_1004B8740;
    qword_10089C970 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_100008CAC, &qword_10089C970, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C988);
  }
}

void sub_1001D4B14(_Unwind_Exception *a1)
{
}

void sub_1001D4B2C()
{
  sub_10039D144();
  char v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  uint64_t v3 = std::string::append(&v38, ".bin");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_1008A3F40 = v3->__r_.__value_.__r.__words[2];
  xmmword_1008A3F30 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3F30, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  BOOL v7 = std::string::append(&v38, ".bin");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_1008A3F58 = v7->__r_.__value_.__r.__words[2];
  xmmword_1008A3F48 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3F48, (void *)&_mh_execute_header);
  sub_10039D144();
  int v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  double v11 = std::string::append(&v38, ".bin");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_1008A3F70 = v11->__r_.__value_.__r.__words[2];
  xmmword_1008A3F60 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3F60, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  long long v15 = std::string::append(&v38, ".bin");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_1008A3F88 = v15->__r_.__value_.__r.__words[2];
  xmmword_1008A3F78 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3F78, (void *)&_mh_execute_header);
  sub_10039D144();
  std::string::size_type v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v38, ".bin");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_1008A3FA0 = v19->__r_.__value_.__r.__words[2];
  xmmword_1008A3F90 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3F90, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  uint64_t v23 = std::string::append(&v38, ".bin");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_1008A3FB8 = v23->__r_.__value_.__r.__words[2];
  xmmword_1008A3FA8 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3FA8, (void *)&_mh_execute_header);
  sub_10039D144();
  unsigned __int8 v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  unsigned int v27 = std::string::append(&v38, ".bin");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_1008A3FD0 = v27->__r_.__value_.__r.__words[2];
  xmmword_1008A3FC0 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3FC0, (void *)&_mh_execute_header);
  sub_10039D144();
  unsigned __int16 v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  char v31 = std::string::append(&v38, ".bin");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_1008A3FE8 = v31->__r_.__value_.__r.__words[2];
  xmmword_1008A3FD8 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3FD8, (void *)&_mh_execute_header);
  sub_10039D144();
  BOOL v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  long long v35 = std::string::append(&v38, ".bin");
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_1008A4000 = v35->__r_.__value_.__r.__words[2];
  xmmword_1008A3FF0 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A3FF0, (void *)&_mh_execute_header);
}

void sub_1001D516C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D52DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D5348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  long long v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PRLowPowerModeMonitor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001D54B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D5540(uint64_t a1)
{
  long long v2 = +[NSProcessInfo processInfo];
  id v3 = [v2 isLowPowerModeEnabled];

  long long v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "disabled";
    if (v3) {
      uint64_t v5 = "enabled";
    }
    int v8 = 136315138;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#lpm-mon, Callback. LPM is %s", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v6 + 25) != v3)
  {
    *(unsigned char *)(v6 + 25) = (_BYTE)v3;
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16);
    if (v7) {
      (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
    }
  }
}

void sub_1001D5654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001D56FC(uint64_t a1)
{
  long long v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#lpm-mon, startMonitoring", v4, 2u);
  }
  return [*(id *)(a1 + 32) _initLowPowerModeListner];
}

void sub_1001D582C(uint64_t a1)
{
  long long v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#lpm-mon, stopMonitoring", v5, 2u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    long long v4 = +[NSNotificationCenter defaultCenter];
    [v4 removeObserver:WeakRetained name:NSProcessInfoPowerStateDidChangeNotification object:0];
  }
}

void sub_1001D58E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D5A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D5AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D5B24(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001D5C54(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001D5DA8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D5F10(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D6060(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001D61C8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001D6328(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D6490(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D65EC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D6780(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v4);
  _Unwind_Resume(a1);
}

void sub_1001D68D8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001D6A28(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D6B84(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D6CE0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D6E40(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001D6F94(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001D70FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001D7250(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001D73B8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001D7530(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001D76A8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1001D7804(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001D7948(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001D7A8C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1001D7BE8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D7D44(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D7EAC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1001D8054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D8224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001D843C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D86FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D89CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1001D8A4C()
{
}

void sub_1001D8A54()
{
}

void sub_1001D8A5C()
{
}

void sub_1001D8A64()
{
}

void sub_1001D8A6C()
{
}

void sub_1001D8A74()
{
}

void sub_1001D8A7C()
{
}

void sub_1001D8A84()
{
}

void sub_1001D8B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D8E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1001D8EF4()
{
}

void sub_1001D8F08()
{
}

void sub_1001D8F18()
{
}

void sub_1001D8F28()
{
}

void sub_1001D8F38()
{
}

void sub_1001D8F48()
{
}

void sub_1001D8F54()
{
}

void sub_1001D8F5C()
{
}

void sub_1001D911C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D9210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001D9320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D9474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D956C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D962C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D9744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef NIAcwgSessionTriggerReasonToString(uint64_t a1)
{
  CFStringRef v1 = @"DeviceCloserIntent";
  CFStringRef v2 = @"DeviceFallbackWalletInteractionIntent";
  CFStringRef v3 = @"LockSelfInitiated";
  if (a1 != 200) {
    CFStringRef v3 = @"DeviceCloserIntent";
  }
  if (a1 != 103) {
    CFStringRef v2 = v3;
  }
  if (a1 == 102) {
    CFStringRef v1 = @"DeviceFallbackGeofenceEntryIntent";
  }
  if (a1 == 101) {
    CFStringRef v1 = @"DeviceFallbackWristRaiseIntent";
  }
  if (a1 <= 102) {
    return v1;
  }
  else {
    return v2;
  }
}

CFStringRef NIAcwgSuspendTriggerReasonToString(uint64_t a1)
{
  switch(a1)
  {
    case 'e':
      CFStringRef result = @"DeviceReceivedUnlockNotification";
      break;
    case 'f':
      CFStringRef result = @"DeviceStationary";
      break;
    case 'g':
      CFStringRef result = @"DeviceNITimeout";
      break;
    case 'h':
      CFStringRef result = @"DeviceNIInterrupted";
      break;
    case 'i':
      CFStringRef result = @"DeviceNIInvalidated";
      break;
    case 'j':
      CFStringRef result = @"DeviceNIError";
      break;
    case 'k':
      CFStringRef result = @"DeviceClientPause";
      break;
    default:
      CFStringRef v2 = @"DeviceFarther";
      if (a1 == 201) {
        CFStringRef v2 = @"LockUnilaterallySuspended";
      }
      if (a1 == 200) {
        CFStringRef result = @"LockSelfInitiatedRequest";
      }
      else {
        CFStringRef result = v2;
      }
      break;
  }
  return result;
}

void sub_1001D9988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D9ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001D9B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001D9B8C(void *a1@<X0>, uint64_t a2@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  long long v26 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v3 = a1;
  id v4 = [v3 countByEnumeratingWithState:&v21 objects:v27 count:16];
  uint64_t v20 = a2;
  if (v4)
  {
    uint64_t v5 = *(void *)v22;
    do
    {
      for (int i = 0; i != v4; int i = (char *)i + 1)
      {
        if (*(void *)v22 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = *(id *)(*((void *)&v21 + 1) + 8 * i);
        unsigned __int16 v8 = (unsigned __int16)[v7 longLongValue];
        unsigned __int16 v9 = v8;
        long long v10 = (char *)__p[1];
        if (__p[1] >= v26)
        {
          long long v12 = (char *)__p[0];
          int64_t v13 = (char *)__p[1] - (char *)__p[0];
          if ((char *)__p[1] - (char *)__p[0] <= -3) {
            sub_1000267C4();
          }
          uint64_t v14 = v13 >> 1;
          if (v26 - (char *)__p[0] <= (unint64_t)((v13 >> 1) + 1)) {
            uint64_t v15 = v14 + 1;
          }
          else {
            uint64_t v15 = v26 - (char *)__p[0];
          }
          if ((unint64_t)(v26 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v16 = v15;
          }
          if (v16)
          {
            std::string::size_type v17 = (char *)sub_10014A47C((uint64_t)&v26, v16);
            long long v12 = (char *)__p[0];
            long long v10 = (char *)__p[1];
          }
          else
          {
            std::string::size_type v17 = 0;
          }
          long long v18 = (unsigned __int16 *)&v17[2 * v14];
          *long long v18 = v9;
          double v11 = v18 + 1;
          while (v10 != v12)
          {
            unsigned __int16 v19 = *((_WORD *)v10 - 1);
            v10 -= 2;
            *--long long v18 = v19;
          }
          __p[0] = v18;
          __p[1] = v11;
          long long v26 = &v17[2 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(_WORD *)__p[1] = v8;
          double v11 = v10 + 2;
        }
        __p[1] = v11;
      }
      id v4 = [v3 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }
    while (v4);
  }

  *(_OWORD *)uint64_t v20 = *(_OWORD *)__p;
  *(void *)(v20 + 16) = v26;
}

void sub_1001D9D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001D9DB8(void *a1@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t v28 = 0;
  unsigned __int16 v29 = 0;
  uint64_t v30 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v3 = a1;
  id v4 = (unsigned __int8 *)[v3 countByEnumeratingWithState:&v24 objects:v31 count:16];
  long long v23 = a2;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v25;
    do
    {
      for (int i = 0; i != v4; ++i)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(id *)(*((void *)&v24 + 1) + 8 * i);
        unsigned __int8 v9 = [v8 longLongValue];
        unsigned __int8 v10 = v9;
        if (v5 >= v30)
        {
          double v11 = v28;
          long long v12 = (unsigned char *)(v5 - v28);
          uint64_t v13 = v5 - v28 + 1;
          if (v13 < 0) {
            sub_1000267C4();
          }
          unint64_t v14 = v30 - v28;
          if (2 * (v30 - v28) > (unint64_t)v13) {
            uint64_t v13 = 2 * v14;
          }
          if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v15 = v13;
          }
          if (v15) {
            uint64_t v16 = (char *)operator new(v15);
          }
          else {
            uint64_t v16 = 0;
          }
          std::string::size_type v17 = &v12[(void)v16];
          long long v18 = &v12[(void)v16];
          *long long v18 = v10;
          unsigned __int16 v19 = v18 + 1;
          if (v5 != v11)
          {
            uint64_t v20 = &v5[~(unint64_t)v11];
            do
            {
              unsigned __int8 v21 = *--v5;
              (v20--)[(void)v16] = v21;
            }
            while (v5 != v11);
            uint64_t v5 = v28;
            std::string::size_type v17 = v16;
          }
          uint64_t v28 = (unsigned __int8 *)v17;
          unsigned __int16 v29 = v19;
          uint64_t v30 = (unsigned __int8 *)&v16[v15];
          if (v5) {
            operator delete(v5);
          }
          uint64_t v5 = v19;
        }
        else
        {
          *v5++ = v9;
        }
        unsigned __int16 v29 = v5;
      }
      id v4 = (unsigned __int8 *)[v3 countByEnumeratingWithState:&v24 objects:v31 count:16];
    }
    while (v4);
    id v4 = v28;
    long long v22 = v30;
  }
  else
  {
    long long v22 = 0;
    uint64_t v5 = 0;
  }

  void *v23 = v4;
  v23[1] = v5;
  _OWORD v23[2] = v22;
}

void sub_1001D9FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001DA0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DA1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DA460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DA664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DA754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DA958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DAABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DAB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DAD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DAE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DAF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DB064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DB17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DB1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001DB218(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, char a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_1001D0B70((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10016D488((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  *(unsigned char *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a5;
  *(unsigned char *)(a1 + 56) = a6;
  return a1;
}

void sub_1001DB29C(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_1001DB2B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableDictionary dictionary];
  uint64_t v5 = a1 + 5889;
  if ((unint64_t)(a1 + 5889) <= 9)
  {
    uint64_t v6 = off_100858530[v5];
    id v7 = off_100858580[v5];
    id v8 = +[NILocalization _niLocalizedStringFromFrameworkBundleWithKey:off_1008584E0[v5]];
    [v4 setObject:v8 forKeyedSubscript:NSLocalizedDescriptionKey];

    unsigned __int8 v9 = +[NILocalization _niLocalizedStringFromFrameworkBundleWithKey:v6];
    [v4 setObject:v9 forKeyedSubscript:NSLocalizedFailureReasonErrorKey];

    unsigned __int8 v10 = +[NILocalization _niLocalizedStringFromFrameworkBundleWithKey:v7];
    [v4 setObject:v10 forKeyedSubscript:NSLocalizedRecoverySuggestionErrorKey];
  }
  if (v3) {
    [v4 addEntriesFromDictionary:v3];
  }
  double v11 = +[NSError errorWithDomain:@"com.apple.NearbyInteraction" code:a1 userInfo:v4];

  return v11;
}

id sub_1001DB420(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableDictionary dictionary];
  uint64_t v5 = v4;
  if (!v7 & v6)
  {
    CFStringRef v8 = @"Check Bluetooth settings, status and configuration.";
    CFStringRef v9 = @"Bluetooth is currently unavailable.";
    switch(a1)
    {
      case -10017:
        goto LABEL_26;
      case -10016:
        CFStringRef v9 = @"Failed to produce a Discovery Token.";
        goto LABEL_26;
      case -10015:
      case -10009:
        break;
      case -10014:
        CFStringRef v8 = @"Monitor session suspension callbacks. Try again when suspension ends.";
        CFStringRef v9 = @"Usage while suspended.";
        goto LABEL_26;
      case -10013:
        CFStringRef v8 = @"Ensure region predicates are using NIDevicePresencePreset. Use NIRegionPredicate initWithName:devicePresencePreset: initializer. Ensure the smaller region predicate is specified as the inner boundary.";
        CFStringRef v9 = @"Region predicate verification failed.";
        goto LABEL_26;
      case -10012:
        CFStringRef v8 = @"Ensure peer discovery token was generated correctly.";
        CFStringRef v9 = @"Peer discovery token was either invalid or did not contain required information for specialized session.";
        goto LABEL_26;
      case -10011:
        CFStringRef v8 = @"Try running the session again at a later time. Implement throttling if necessary.";
        CFStringRef v9 = @"Activation reply not received. The server may be unavailable right now.";
        goto LABEL_26;
      case -10010:
        CFStringRef v8 = @"Check the errors and run the session again.";
        CFStringRef v9 = @"Camera Assistance ARSession failed.";
        goto LABEL_26;
      case -10008:
        CFStringRef v8 = @"No action needed as the session completed successfully";
        CFStringRef v9 = @"The session completed successfully";
        goto LABEL_26;
      default:
        switch(a1)
        {
          case -19703:
            CFStringRef v8 = @"Wrong UWB session ID possibly";
            CFStringRef v9 = @"Indicates URSK corresponding to the UWB Session Identifier is not found.";
            goto LABEL_26;
          case -19702:
            CFStringRef v8 = @"Rework the message parameters or fix the order";
            CFStringRef v9 = @"Indicates use of unsupported message or message format.";
            goto LABEL_26;
          case -19701:
            CFStringRef v8 = @"Try again later";
            CFStringRef v9 = @"Indicates internal resource unavailability.";
            goto LABEL_26;
          case -19700:
            CFStringRef v8 = @"Check the logs for specific internal error";
            CFStringRef v9 = @"No specific reason for failure is indicated.";
            goto LABEL_26;
          default:
            goto LABEL_27;
        }
    }
  }
  else
  {
    switch(a1)
    {
      case -19889:
        CFStringRef v8 = @"Check the message from the vehicle for format violation";
        CFStringRef v9 = @"The session was given an invalid or unexpected DCK message.";
        break;
      case -19888:
        CFStringRef v8 = @"Try again or check the vehicle";
        CFStringRef v9 = @"The session was expecting a response from the vehicle and did not receive it for over the allowed time.";
        break;
      case -19887:
        CFStringRef v8 = @"Event from bluetooth is corrupted";
        CFStringRef v9 = @"The bluetooth event provided to the session was of an invalid type or contained invalid values.";
        break;
      case -19886:
        CFStringRef v8 = @"Check the logs for specific internal error";
        CFStringRef v9 = @"The given debug key was invalid or the system was not able to set it. Inspect error message.";
        break;
      case -19885:
        CFStringRef v8 = @"Vehicle possibly changed its ranging capabilities";
        CFStringRef v9 = @"The capabilities specified in a DCK message are not supported. An action should be taken to indicate this to the vehicle.";
        break;
      case -19884:
        CFStringRef v8 = @"Try again at a later time";
        CFStringRef v9 = @"A DCK request to recover a suspended ranging session has been received, but recovery has failed. An action should be taken to indicate this to the vehicle.";
        break;
      case -19883:
        CFStringRef v8 = @"Most likely an internal error, try again.";
        CFStringRef v9 = @"URSKs could not be deleted";
        break;
      case -19882:
        CFStringRef v8 = @"Pick one of the supported policies";
        CFStringRef v9 = @"The priority provided to the session was of an invalid type or contained invalid values";
        break;
      case -19881:
        CFStringRef v8 = @"Check the event notification parameters or format";
        CFStringRef v9 = @"The session was notified of a Car Key event, but the event or its parameters were invalid";
        break;
      default:
        JUMPOUT(0);
    }
LABEL_26:
    [v4 setObject:v9 forKeyedSubscript:NSLocalizedFailureReasonErrorKey];
    [v5 setObject:v8 forKeyedSubscript:NSLocalizedRecoverySuggestionErrorKey];
  }
LABEL_27:
  if (v3) {
    [v5 addEntriesFromDictionary:v3];
  }
  unsigned __int8 v10 = +[NSError errorWithDomain:@"com.apple.NearbyInteraction" code:a1 userInfo:v5];

  return v10;
}

void *sub_1001DB760@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008585F8[a1]);
}

void *sub_1001DB774@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100858650[a1]);
}

void *sub_1001DB788@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100858698[a1]);
}

void *sub_1001DB79C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008586B8[a1]);
}

void sub_1001DB9A0(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1001DBB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DBCC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DBE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DC108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DC23C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DC2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  unsigned __int8 v10 = v9;

  a9.super_class = (Class)NIServerSystemConfiguratorSession;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001DC3F0(uint64_t a1)
{
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)NIServerSystemConfiguratorSession;
  CFStringRef v2 = [super resourcesManager];
  id v3 = [v2 remote];
  [v3 systemDidUpdateState:*(void *)(a1 + 40)];
}

void sub_1001DC464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DC500(uint64_t a1)
{
  v6.receiver = *(id *)(a1 + 32);
  v6.super_class = (Class)NIServerSystemConfiguratorSession;
  CFStringRef v2 = [[super resourcesManager];
  id v3 = [v2 remote];
  int v4 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v5 = NSStringFromClass(*(Class *)(a1 + 40));
  [v3 systemDidUpdateResourceUsageLimitExceeded:v4 != 0 forSessionConfigurationTypeWithName:v5];
}

void sub_1001DC598(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1001DC988(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

void sub_1001DCA14(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained _process:v6 didTerminate:v5];
}

void sub_1001DCA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DCAA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[RBSProcessStateDescriptor descriptor];
  [v4 setValues:1];
  uint64_t v11 = FBSSceneVisibilityEndowmentNamespace;
  id v5 = +[NSArray arrayWithObjects:&v11 count:1];
  [v4 setEndowmentNamespaces:v5];

  [v3 setStateDescriptor:v4];
  id v6 = +[RBSProcessPredicate predicateMatchingIdentifier:*(void *)(a1 + 32)];
  unsigned __int8 v10 = v6;
  char v7 = +[NSArray arrayWithObjects:&v10 count:1];
  [v3 setPredicates:v7];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001DCC8C;
  void v8[3] = &unk_100858708;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  [v3 setUpdateHandler:v8];
  objc_destroyWeak(&v9);
}

void sub_1001DCC30(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);

  _Unwind_Resume(a1);
}

void sub_1001DCC8C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = (id *)(a1 + 32);
  id v6 = a4;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained(v5);
  [WeakRetained _process:v7 didUpdateState:v6];
}

void sub_1001DCD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DCD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unsigned __int8 v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PRAppStateMonitor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1001DCDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DCE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DD2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef sub_1001DD31C(int a1)
{
  if ((a1 - 1) > 2) {
    return @"Unknown";
  }
  else {
    return off_100858788[a1 - 1];
  }
}

void sub_1001DD6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

id sub_1001DD774(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = [v1 endowmentNamespaces];
    [v3 containsObject:FBSSceneVisibilityEndowmentNamespace];
  }
  return v2;
}

void sub_1001DD7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001DD800(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  id v5 = *(id *)a2;
  if (v4)
  {
    id v6 = *(void **)a1;
    *(void *)a1 = v5;

    int v7 = *(_DWORD *)(a2 + 8);
  }
  else
  {
    *(void *)a1 = v5;
    int v7 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = 1;
  }
  *(_DWORD *)(a1 + 8) = v7;
  return a1;
}

id sub_1001DD868(uint64_t a1)
{
  return _[*(id *)(a1 + 32) monitoredApp:*(unsigned int *)(a1 + 56) didChangeState:*(unsigned int *)(a1 + 48)];
}

id sub_1001DD87C(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_1001DD8B4(uint64_t a1)
{
}

void sub_1001DDA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_1001DDA88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) monitoredApp:*(unsigned int *)(a1 + 40) didChangeState:1];
}

void sub_1001DDBF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DDD4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DDE20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DDF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DE0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DE198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DE240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1001DE3A4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100858C28)[a1]);
}

void *sub_1001DE3B8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100858C80)[a1]);
}

void *sub_1001DE3CC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100858CC8)[a1]);
}

void *sub_1001DE3E0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100858CE8)[a1]);
}

void sub_1001DE4FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DE758(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1001DE86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001DEB20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DEBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DECB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DED24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DEDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001DEED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DF2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a18) {
    sub_10001A970(a18);
  }
  if (a25 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001DF408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001DFCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  operator delete();
}

void sub_1001E00B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E0178(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008587B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001E0198(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008587B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001E01EC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1001E0214(uint64_t a1)
{
  return a1;
}

void sub_1001E0240(uint64_t a1)
{
  operator delete();
}

void *sub_1001E028C(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  *id v2 = off_100858800;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E02E4(uint64_t a1, void *a2)
{
  *a2 = off_100858800;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E032C(uint64_t a1)
{
}

void sub_1001E0334(id *a1)
{
  operator delete(a1);
}

void sub_1001E0370(uint64_t a1, void *a2, uint64_t *a3)
{
  id v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *a3;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v5 = *(void *)(a1 + 8);
  id v6 = *(NSObject **)(v5 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E0458;
  block[3] = &unk_100857C10;
  void block[4] = v5;
  void block[5] = v4;
  dispatch_async(v6, block);
  if (v3) {
    sub_10001A970(v3);
  }
}

uint64_t sub_1001E040C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100858860)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001E044C()
{
  return &off_100858860;
}

id sub_1001E0458(uint64_t a1)
{
  return [*(id *)(a1 + 32) serviceRequestDidUpdateStatus:*(void *)(a1 + 40) *(unsigned int *)(a1 + 48)];
}

uint64_t sub_1001E0468(uint64_t a1)
{
  return a1;
}

void sub_1001E0494(uint64_t a1)
{
  operator delete();
}

void *sub_1001E04E0(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  *id v2 = off_100858880;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E0538(uint64_t a1, void *a2)
{
  *a2 = off_100858880;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E0580(uint64_t a1)
{
}

void sub_1001E0588(id *a1)
{
  operator delete(a1);
}

void sub_1001E05C4(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  long long v6 = a3[1];
  long long v22 = *a3;
  long long v23 = v6;
  long long v24 = a3[2];
  sub_1001751A0(v25, (uint64_t)(a3 + 3));
  sub_10016E330(v26, (uint64_t)(a3 + 38));
  sub_1001751F8(v29, (__n128 *)((char *)a3 + 760));
  memcpy(v33, a3 + 55, sizeof(v33));
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(NSObject **)(v7 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  long long v10 = v22;
  long long v11 = v23;
  long long v12 = v24;
  block[2] = sub_1001E08BC;
  block[3] = &unk_1008588F8;
  void block[4] = v7;
  sub_1001751A0(v13, (uint64_t)v25);
  sub_10016E330(v14, (uint64_t)v26);
  sub_1001751F8(v17, v29);
  memcpy(v21, v33, sizeof(v21));
  dispatch_async(v8, block);
  if (v20 && __p)
  {
    unsigned __int16 v19 = __p;
    operator delete(__p);
  }
  if (v16) {
    sub_10003E96C((uint64_t)v15, v15[1]);
  }
  sub_10015DC28((uint64_t)v13);
  if (v32 && v30)
  {
    char v31 = v30;
    operator delete(v30);
  }
  if (v28) {
    sub_10003E96C((uint64_t)v27, v27[1]);
  }
  sub_10015DC28((uint64_t)v25);
  if (v5) {
    sub_10001A970(v5);
  }
}

void sub_1001E07C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (LOBYTE(STACK[0x320])) {
    sub_100412860((uint64_t)va);
  }
  sub_10015DC28(v4);
  if (LOBYTE(STACK[0x948]))
  {
    long long v6 = (void *)STACK[0x920];
    if (STACK[0x920])
    {
      STACK[0x928] = (unint64_t)v6;
      operator delete(v6);
    }
  }
  if (LOBYTE(STACK[0x8D0])) {
    sub_10003E96C((uint64_t)&STACK[0x850], (void *)STACK[0x858]);
  }
  sub_10015DC28(v3);
  if (v2) {
    sub_10001A970(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1001E0864()
{
  if (!v0) {
    JUMPOUT(0x1001E085CLL);
  }
  JUMPOUT(0x1001E0854);
}

uint64_t sub_1001E0870(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100858928)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001E08B0()
{
  return &off_100858928;
}

id sub_1001E08BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) didReceiveNewSolution:a1 + 40];
}

uint64_t sub_1001E08CC(uint64_t a1)
{
  return a1;
}

void sub_1001E08F8(uint64_t a1)
{
  operator delete();
}

void *sub_1001E0944(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  *id v2 = off_100858948;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E099C(uint64_t a1, void *a2)
{
  *a2 = off_100858948;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E09E4(uint64_t a1)
{
}

void sub_1001E09EC(id *a1)
{
  operator delete(a1);
}

void sub_1001E0A28(uint64_t a1, void *a2, __int16 *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  __int16 v14 = *a3;
  char v16 = 0;
  uint64_t v17 = 0;
  size_t v15 = 0;
  sub_10016D488(&v15, *((const void **)a3 + 1), *((void *)a3 + 2), *((void *)a3 + 2) - *((void *)a3 + 1));
  long long v18 = *((_OWORD *)a3 + 2);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(NSObject **)(v6 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1001E0BC0;
  block[3] = &unk_1008589C0;
  void block[4] = v6;
  __int16 v9 = v14;
  std::string __p = 0;
  long long v11 = 0;
  uint64_t v12 = 0;
  sub_10016D488(&__p, v15, (uint64_t)v16, v16 - (unsigned char *)v15);
  long long v13 = v18;
  dispatch_async(v7, block);
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    char v16 = v15;
    operator delete(v15);
  }
  if (v5) {
    sub_10001A970(v5);
  }
}

void sub_1001E0B44(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v2 - 72);
  if (v4)
  {
    *(void *)(v2 - 64) = v4;
    operator delete(v4);
  }
  if (v1) {
    sub_10001A970(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E0B74(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008589F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001E0BB4()
{
  return &off_1008589F0;
}

id sub_1001E0BC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) didReceiveRemoteData:a1 + 40];
}

uint64_t sub_1001E0BD0(uint64_t a1)
{
  return a1;
}

void sub_1001E0BFC(uint64_t a1)
{
  operator delete();
}

void *sub_1001E0C48(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100858A10;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E0CA0(uint64_t a1, void *a2)
{
  *a2 = off_100858A10;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E0CE8(uint64_t a1)
{
}

void sub_1001E0CF0(id *a1)
{
  operator delete(a1);
}

void sub_1001E0D2C(uint64_t a1, void *a2, int *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  int v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(NSObject **)(v5 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001E0E10;
  v7[3] = &unk_100857CC8;
  void v7[4] = v5;
  int v8 = v4;
  dispatch_async(v6, v7);
  if (v3) {
    sub_10001A970(v3);
  }
}

uint64_t sub_1001E0DC4(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100858A70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001E0E04()
{
  return &off_100858A70;
}

id sub_1001E0E10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _grSessionInvalidatedWithReason:*(unsigned int *)(a1 + 40)];
}

uint64_t sub_1001E0E20(uint64_t a1)
{
  return a1;
}

void sub_1001E0E4C(uint64_t a1)
{
  operator delete();
}

void *sub_1001E0E98(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100858A90;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1001E0EF0(uint64_t a1, void *a2)
{
  *a2 = off_100858A90;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_1001E0F38(uint64_t a1)
{
}

void sub_1001E0F40(id *a1)
{
  operator delete(a1);
}

void sub_1001E0F7C(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v3) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "#peer-gr,Unsupported functionality - update rate throttling.", (uint8_t *)&v3, 2u);
    uint64_t v2 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315650;
    int v4 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Daemon/Services/NearbyInteraction/Session/NIServerNearbyPeerGrSession.mm";
    __int16 v5 = 1024;
    int v6 = 288;
    __int16 v7 = 2080;
    int v8 = "operator()";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#peer-gr,%s:%d: assertion failure in %s", (uint8_t *)&v3, 0x1Cu);
  }
  abort();
}

void sub_1001E106C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10001A970(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E1084(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100858B00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001E10C4()
{
  return &off_100858B00;
}

void sub_1001E10D4(uint64_t a1)
{
  sub_1002D8058(a1);

  operator delete();
}

uint64_t sub_1001E110C(uint64_t a1)
{
  return sub_1002D8058(a1 - 8);
}

void sub_1001E1114(uint64_t a1)
{
  sub_1002D8058(a1 - 8);

  operator delete();
}

void *sub_1001E1150(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001E11D4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001E1258(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001E12DC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001E1360()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C888))
  {
    sub_100004950(qword_10089C870, "PRRoseProviderNetworkListener");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C870, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C888);
  }
}

void sub_1001E13F8(_Unwind_Exception *a1)
{
}

void sub_1001E1410()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8A8))
  {
    sub_100004950(&qword_10089C890, "com.apple.nearbyd.accessory.download");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C890, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8A8);
  }
}

void sub_1001E14A8(_Unwind_Exception *a1)
{
}

void sub_1001E14C0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8C8))
  {
    sub_100004950(&qword_10089C8B0, "com.apple.nearbyd.accessory.files");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C8B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8C8);
  }
}

void sub_1001E1558(_Unwind_Exception *a1)
{
}

void sub_1001E1570()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8E8))
  {
    sub_100004950(qword_10089C8D0, "MA_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8E8);
  }
}

void sub_1001E1608(_Unwind_Exception *a1)
{
}

void sub_1001E1620()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C908))
  {
    sub_100004950(qword_10089C8F0, "MB_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C908);
  }
}

void sub_1001E16B8(_Unwind_Exception *a1)
{
}

void sub_1001E16D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C928))
  {
    sub_100004950(qword_10089C910, "D");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C910, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C928);
  }
}

void sub_1001E1768(_Unwind_Exception *a1)
{
}

void sub_1001E1780()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C948, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C948))
  {
    sub_100004950(&qword_10089C930, "A");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C930, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C948);
  }
}

void sub_1001E1818(_Unwind_Exception *a1)
{
}

void sub_1001E1830()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C968))
  {
    sub_100004950(qword_10089C950, "FAS.bin");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C950, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C968);
  }
}

void sub_1001E18C8(_Unwind_Exception *a1)
{
}

void sub_1001E18E0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C988))
  {
    qword_10089C970 = 0;
    qword_10089C978 = 0;
    qword_10089C980 = 0;
    uint64_t v0 = operator new(0x30uLL);
    qword_10089C978 = (uint64_t)(v0 + 3);
    qword_10089C980 = (uint64_t)(v0 + 3);
    _OWORD *v0 = xmmword_1004B9360;
    v0[1] = *(_OWORD *)algn_1004B9370;
    v0[2] = xmmword_1004B9380;
    qword_10089C970 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_100008CAC, &qword_10089C970, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C988);
  }
}

void sub_1001E199C(_Unwind_Exception *a1)
{
}

void sub_1001E19B4()
{
  *(_OWORD *)std::string v45 = xmmword_1004B92F0;
  *(_OWORD *)&v45[16] = unk_1004B9300;
  sub_1001A003C((uint64_t)&unk_1008A4008, (int *)v45, 4);
  xmmword_1008A4020 = xmmword_1004B7660;
  *(_OWORD *)algn_1008A4030 = xmmword_1004B7670;
  qword_1008A4048 = 0;
  unk_1008A4050 = 0;
  qword_1008A4040 = 0x3FD999999999999ALL;
  unk_1008A4058 = xmmword_1004B7680;
  dword_1008A4068 = 5;
  qword_1008A4070 = 0x4000000000000000;
  dword_1008A4078 = 5;
  byte_1008A4080 = 0;
  *(void *)&algn_1008A4081[3] = 0x30000000ALL;
  xmmword_1008A4090 = xmmword_1004B7690;
  unk_1008A40A0 = xmmword_1004B76A0;
  xmmword_1008A40B0 = xmmword_1004B76B0;
  qword_1008A40C0 = 0x3FE3333333333333;
  dword_1008A40C8 = 3;
  xmmword_1008A40D0 = xmmword_1004B76C0;
  unk_1008A40E0 = xmmword_1004B76A0;
  xmmword_1008A40F0 = xmmword_1004B7690;
  qword_1008A4100 = 0x3FE3333333333333;
  byte_1008A4108 = 0;
  xmmword_1008A4110 = xmmword_1004B76D0;
  unk_1008A4120 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v44 = _Q0;
  xmmword_1008A4130 = _Q0;
  qword_1008A4140 = 0xBFD3333333333333;
  xmmword_1008A4148 = xmmword_1004B76F0;
  qword_1008A4158 = 0x3E99999A40000000;
  xmmword_1008A4160 = xmmword_1004B7670;
  qword_1008A4178 = 0;
  unk_1008A4180 = 0;
  qword_1008A4170 = 0x3FD999999999999ALL;
  xmmword_1008A4188 = xmmword_1004B7680;
  dword_1008A4198 = 5;
  qword_1008A41A0 = 0x4000000000000000;
  dword_1008A41A8 = 4;
  qword_1008A41B0 = 0x300000008;
  qword_1008A41B8 = 0xC04E800000000000;
  v46.__r_.__value_.__r.__words[0] = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)&unk_1008A41C0, (double *)&v46, 1);
  xmmword_1008A41D8 = xmmword_1004B7700;
  qword_1008A41E8 = 0x4024000000000000;
  dword_1008A41F0 = 45;
  byte_1008A41F8 = 0;
  byte_1008A4210 = 0;
  qword_1008A4218 = 0;
  byte_1008A4220 = 0;
  dword_1008A4224 = 1;
  byte_1008A4228 = 1;
  xmmword_1008A4230 = xmmword_1004B7710;
  unk_1008A4240 = xmmword_1004B7720;
  xmmword_1008A4250 = v44;
  qword_1008A4260 = 0xC059000000000000;
  xmmword_1008A4268 = xmmword_1004B7730;
  qword_1008A4278 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008A4280 = xmmword_1004B7670;
  qword_1008A4290 = 0x3FD999999999999ALL;
  qword_1008A42A0 = 0;
  qword_1008A4298 = 0;
  xmmword_1008A42A8 = xmmword_1004B7680;
  dword_1008A42B8 = 5;
  qword_1008A42C0 = 0x4000000000000000;
  dword_1008A42C8 = 10;
  qword_1008A42D0 = 0x4034000000000000;
  dword_1008A42D8 = 3;
  xmmword_1008A42E0 = xmmword_1004B7740;
  __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008A4008, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_72, &off_10089E948, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_73, &off_10089E950, (void *)&_mh_execute_header);
  qword_1008A42F8 = 0;
  unk_1008A4300 = 0;
  qword_1008A42F0 = 0;
  int v6 = operator new(0x40uLL);
  qword_1008A42F8 = (uint64_t)(v6 + 4);
  unk_1008A4300 = v6 + 4;
  *int v6 = xmmword_1004B9310;
  v6[1] = unk_1004B9320;
  _OWORD v6[2] = xmmword_1004B9330;
  v6[3] = unk_1004B9340;
  qword_1008A42F0 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A42F0, (void *)&_mh_execute_header);
  qword_1008A4310 = 0;
  unk_1008A4318 = 0;
  qword_1008A4308 = 0;
  __int16 v7 = operator new(0x10uLL);
  qword_1008A4310 = (uint64_t)(v7 + 1);
  unk_1008A4318 = v7 + 1;
  *__int16 v7 = xmmword_1004B9350;
  qword_1008A4308 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A4308, (void *)&_mh_execute_header);
  sub_10039D144();
  int v8 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)std::string v45 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  long long v10 = std::string::append((std::string *)v45, ".bin");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1008A4330 = v10->__r_.__value_.__r.__words[2];
  xmmword_1008A4320 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4320, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v12 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)std::string v45 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  __int16 v14 = std::string::append((std::string *)v45, ".bin");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1008A4348 = v14->__r_.__value_.__r.__words[2];
  xmmword_1008A4338 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4338, (void *)&_mh_execute_header);
  sub_10039D144();
  char v16 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v16->__r_.__value_.__l + 2);
  *(_OWORD *)std::string v45 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  long long v18 = std::string::append((std::string *)v45, ".bin");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1008A4360 = v18->__r_.__value_.__r.__words[2];
  xmmword_1008A4350 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4350, (void *)&_mh_execute_header);
  sub_10039D144();
  char v20 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)std::string v45 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  long long v22 = std::string::append((std::string *)v45, ".bin");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1008A4378 = v22->__r_.__value_.__r.__words[2];
  xmmword_1008A4368 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4368, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v24 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v24->__r_.__value_.__l + 2);
  *(_OWORD *)std::string v45 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  long long v26 = std::string::append((std::string *)v45, ".bin");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1008A4390 = v26->__r_.__value_.__r.__words[2];
  xmmword_1008A4380 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4380, (void *)&_mh_execute_header);
  sub_10039D144();
  char v28 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v28->__r_.__value_.__l + 2);
  *(_OWORD *)std::string v45 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append((std::string *)v45, ".bin");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1008A43A8 = v30->__r_.__value_.__r.__words[2];
  xmmword_1008A4398 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4398, (void *)&_mh_execute_header);
  sub_10039D144();
  char v32 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)std::string v45 = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  long long v34 = std::string::append((std::string *)v45, ".bin");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1008A43C0 = v34->__r_.__value_.__r.__words[2];
  xmmword_1008A43B0 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A43B0, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v36 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v36->__r_.__value_.__l + 2);
  *(_OWORD *)std::string v45 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  std::string v38 = std::string::append((std::string *)v45, ".bin");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  qword_1008A43D8 = v38->__r_.__value_.__r.__words[2];
  xmmword_1008A43C8 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A43C8, (void *)&_mh_execute_header);
  sub_10039D144();
  char v40 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v40->__r_.__value_.__l + 2);
  *(_OWORD *)std::string v45 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  std::string v42 = std::string::append((std::string *)v45, ".bin");
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  qword_1008A43F0 = v42->__r_.__value_.__r.__words[2];
  xmmword_1008A43E0 = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A43E0, (void *)&_mh_execute_header);
}

void sub_1001E2380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001E2410@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100859200[a1]);
}

void *sub_1001E2424@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100859258[a1]);
}

void *sub_1001E2438@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008592A0[a1]);
}

void *sub_1001E244C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008592C0[a1]);
}

void sub_1001E2620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10001A970(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1001E26C4(id a1)
{
  uint64_t v1 = +[NIFindingConfiguration localDeviceConfiguration];
  uint64_t v2 = (void *)qword_1008A44D0;
  qword_1008A44D0 = v1;

  BOOL v3 = +[NIPlatformInfo supportsSyntheticAperture];
  int v4 = (void *)qword_1008A44D0;

  [v4 setCameraAssistanceEnabled:v3];
}

void sub_1001E27DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E28C8(id a1)
{
  id v1 = [[NIServerFindableDeviceProxySessionManager alloc] _initInternal];
  uint64_t v2 = (void *)qword_1008A44E0;
  qword_1008A44E0 = (uint64_t)v1;
}

void sub_1001E29C8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internalPrepareTokenCache];
  if (v1 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_10041C110();
  }
}

void sub_1001E3024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1001E3110(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001E3120(uint64_t a1)
{
}

void sub_1001E3128(void *a1, void *a2)
{
  id v9 = a2;
  BOOL v3 = [v9 data];
  int v4 = +[NIDiscoveryToken deserialize:v3];

  if ([v4 count])
  {
    __int16 v5 = (void *)a1[4];
    int v6 = [v4 allObjects];
    __int16 v7 = [v9 account];
    int v8 = [v5 _internalSetFindableDiscoveryTokens:v6 tokenGroup:v7 logInEventBuffer:0];

    if (v8) {
      objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), v8);
    }
    ++*(_DWORD *)(*(void *)(a1[6] + 8) + 24);
    *(_DWORD *)(*(void *)(a1[7] + 8) + 24) += [v4 count];
  }
}

void sub_1001E324C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E3918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40)
{
  _Block_object_dispose((const void *)(v42 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1001E3A58(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0) {
    [*(id *)(a1 + 40) addObject:v3];
  }
}

void sub_1001E3AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E3ACC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0) {
    [*(id *)(a1 + 40) addObject:v3];
  }
}

void sub_1001E3B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E3B40(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [*(id *)(*(void *)(a1 + 32) + 32) stopAdvertisingToPeer:v3];
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041C3BC();
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v4);
  }
  __int16 v5 = [*(id *)(*(void *)(a1 + 32) + 40) stopRangingWithPeer:v3];
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041C354();
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v5);
  }
  int v6 = *(void **)(a1 + 32);
  __int16 v7 = +[NIServerFindingPeerTracking peerTrackingTerminalState];
  [v6 _updatePeerTrackingForToken:v3 newTrackingState:v7];
}

void sub_1001E3C60(_Unwind_Exception *a1)
{
  __int16 v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1001E3E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E3E9C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _internalPrepareTokenCache];
  id v6 = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
    id v4 = v2;
    __int16 v5 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v4;
  }
  else
  {
    __int16 v5 = [*(id *)(a1 + 32) _internalSetFindableDiscoveryTokens:*(void *)(a1 + 40) tokenGroup:*(void *)(a1 + 48) logInEventBuffer:1];
    if (v5) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v5);
    }
  }
}

void sub_1001E411C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E413C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _internalPrepareTokenCache];
  id v10 = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
    id v4 = v2;
    id v5 = *(id *)(v3 + 40);
    *(void *)(v3 + 40) = v4;
  }
  else
  {
    id v6 = [*(id *)(*(void *)(a1 + 32) + 48) objectForKey:*(void *)(a1 + 40)];
    id v5 = [v6 mutableCopy];

    if (v5)
    {
      [v5 addObjectsFromArray:*(void *)(a1 + 48)];
    }
    else
    {
      id v5 = +[NSMutableSet setWithArray:*(void *)(a1 + 48)];
    }
    __int16 v7 = *(void **)(a1 + 32);
    int v8 = [v5 allObjects];
    id v9 = [v7 _internalSetFindableDiscoveryTokens:v8 tokenGroup:*(void *)(a1 + 40) logInEventBuffer:1];

    if (v9) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v9);
    }
  }
}

void sub_1001E424C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E445C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E447C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _internalPrepareTokenCache];
  if (v2)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v2);
  }
  else
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 48) objectForKey:*(void *)(a1 + 40)];
    id v4 = [v3 mutableCopy];

    id v5 = *(void **)(a1 + 48);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1001E45F4;
    v10[3] = &unk_100858DF0;
    id v6 = v4;
    id v11 = v6;
    [v5 enumerateObjectsUsingBlock:v10];
    __int16 v7 = *(void **)(a1 + 32);
    int v8 = [v6 allObjects];
    id v9 = [v7 _internalSetFindableDiscoveryTokens:v8 tokenGroup:*(void *)(a1 + 40) logInEventBuffer:1];

    if (v9) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v9);
    }
  }
}

void sub_1001E45C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1001E45F4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removeObject:a2];
}

id sub_1001E46EC(uint64_t a1)
{
  [*(id *)(a1 + 32) _activateProvidersLazy];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 40);

  return [v3 setDebugParameters:v2];
}

void sub_1001E47F4(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  [*(id *)(a1 + 32) _activateProvidersLazy];
  uint64_t v21 = +[NIServerFindingAdvertisement advertisementFromByteRepresentation:*(void *)(v1 + 8)];
  unsigned int v2 = [*(id *)v1 _isTokenFindable:*(void *)(a1 + 48)];
  uint64_t v3 = (void *)v21;
  unsigned int v4 = [*(id *)(a1 + 32) _shouldInteract];
  unsigned int v5 = v4;
  if (v21) {
    unsigned int v6 = v4;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v2) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = 0;
  }
  int v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138478851;
    uint64_t v32 = v9;
    __int16 v33 = 2113;
    uint64_t v34 = v21;
    __int16 v35 = 1024;
    unsigned int v36 = v2;
    __int16 v37 = 1024;
    unsigned int v38 = v5;
    __int16 v39 = 1024;
    unsigned int v40 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#find-proxy,processClientDiscoveryEvent. Token: %{private}@. Adv: %{private}@. Token findable: %d. Should interact: %d. Proceed: %d", buf, 0x28u);
  }
  if (v7)
  {
    id v10 = [*(id *)(*(void *)(a1 + 32) + 32) processAdvertisement:v21 receivedOOBFromPeer:*(void *)(a1 + 48)];
    id v11 = [*(id *)(*(void *)(a1 + 32) + 32) advertisingPeers];
    id v20 = [v11 objectForKey:*(void *)(a1 + 48)];

    uint64_t v12 = v20;
    if (v20)
    {
      long long v13 = [v20 byteRepresentation];
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v14 = *(id *)(*(void *)(a1 + 32) + 72);
      id v15 = [v14 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v27;
        do
        {
          for (int i = 0; i != v15; int i = (char *)i + 1)
          {
            if (*(void *)v27 != v16) {
              objc_enumerationMutation(v14);
            }
            uint64_t v18 = *(void *)(*((void *)&v26 + 1) + 8 * i);
            if (v18)
            {
              long long v19 = [*(id *)(*((void *)&v26 + 1) + 8 * i) getQueueForInputingData];
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_1001E4B40;
              block[3] = &unk_100855EB0;
              void block[4] = v18;
              id v24 = v13;
              id v25 = *(id *)(a1 + 48);
              dispatch_async(v19, block);
            }
          }
          id v15 = [v14 countByEnumeratingWithState:&v26 objects:v30 count:16];
        }
        while (v15);
      }

      uint64_t v12 = v20;
    }

    uint64_t v3 = (void *)v21;
  }
}

void sub_1001E4AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_1001E4B40(uint64_t a1)
{
  return [*(id *)(a1 + 32) didGenerateShareableConfigurationData:*(void *)(a1 + 40) forToken:*(void *)(a1 + 48)];
}

void sub_1001E4BE8(uint64_t a1)
{
  [*(id *)(a1 + 32) _activateProvidersLazy];
  unsigned int v2 = [*(id *)(a1 + 32) _isTokenFindable:*(void *)(a1 + 40)];
  unsigned int v3 = [*(id *)(a1 + 32) _shouldInteract];
  unsigned int v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v9 = 138478595;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    unsigned int v12 = v2;
    __int16 v13 = 1024;
    unsigned int v14 = v3;
    __int16 v15 = 1024;
    int v16 = v2 & v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#find-proxy,processClientRemovePeerEvent. Token: %{private}@. Token findable: %d. Should interact: %d. Proceed: %d", (uint8_t *)&v9, 0x1Eu);
  }
  if ((v2 & v3) != 0)
  {
    id v6 = [*(id *)(*(void *)(a1 + 32) + 32) stopAdvertisingToPeer:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _updatePeerTrackingForToken:*(void *)(a1 + 40) newAdvertisingState:2];
    id v7 = [*(id *)(*(void *)(a1 + 32) + 40) stopRangingWithPeer:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _updatePeerTrackingForToken:*(void *)(a1 + 40) newRangingState:4];
    id v8 = [*(id *)(*(void *)(a1 + 32) + 32) processLostEventReceivedOOBFromPeer:*(void *)(a1 + 40)];
  }
}

void sub_1001E4ED0(void *a1)
{
  id v5 = [*(id *)(a1[4] + 48) objectForKey:a1[5]];
  uint64_t v2 = [v5 allObjects];
  uint64_t v3 = *(void *)(a1[6] + 8);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001E4F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E50FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E5114(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_1001E51C4;
  v6[3] = &unk_100858E18;
  void v6[4] = v2;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = v4;
  uint64_t v8 = v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_1001E51B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1001E51C4(void *a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v5 tellClientAboutPeer])
  {
    id v6 = [*(id *)(a1[4] + 48) objectForKey:a1[5]];
    unsigned int v7 = [v6 containsObject:v8];

    if (v7) {
      [*(id *)(*(void *)(a1[6] + 8) + 40) addObject:v8];
    }
  }
}

void sub_1001E5264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E5320(uint64_t a1)
{
  if (*(void *)(a1 + 32)
    && (objc_msgSend(*(id *)(*(void *)(a1 + 40) + 72), "containsObject:") & 1) == 0)
  {
    uint64_t v2 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#find-proxy,addObserver", buf, 2u);
    }
    [*(id *)(*(void *)(a1 + 40) + 72) addObject:*(void *)(a1 + 32)];
    uint64_t v3 = [*(id *)(*(void *)(a1 + 40) + 32) advertisingPeers];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1001E5444;
    v4[3] = &unk_100858E68;
    id v5 = *(id *)(a1 + 32);
    [v3 enumerateKeysAndObjectsUsingBlock:v4];
  }
}

void sub_1001E542C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001E5444(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [*(id *)(a1 + 32) getQueueForInputingData];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E5540;
  block[3] = &unk_100855EB0;
  id v11 = *(id *)(a1 + 32);
  id v12 = v6;
  id v13 = v5;
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, block);
}

void sub_1001E552C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E5540(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) byteRepresentation];
  [v1 didGenerateShareableConfigurationData:forToken:];
}

void sub_1001E559C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1001E5648(void *result)
{
  if (result[4])
  {
    uint64_t v1 = result;
    id result = [*(id *)(result[5] + 72) containsObject:];
    if (result)
    {
      id v2 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v3 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#find-proxy,removeObserver", v3, 2u);
      }
      return [*(id *)(v1[5] + 72) removeObject:v1[4]];
    }
  }
  return result;
}

void sub_1001E57C8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _internalPrintableState];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001E618C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Block_object_dispose((const void *)(v21 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1001E6278(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  id v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  unsigned int v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"    %@ (%d tokens)", v11, [v5 count]);
  [v6 addObject:v7];

  id v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v9 = [v5 allObjects];
  uint64_t v10 = sub_1002E15E0(v9, 10, 2);
  [v8 addObjectsFromArray:v10];
}

void sub_1001E6364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1001E63A0(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v6 = [a2 descriptionInternal];
  unsigned int v7 = [v9 description];
  id v8 = +[NSString stringWithFormat:@"    %@: %@", v6, v7];
  [v5 addObject:v8];
}

void sub_1001E6458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1001E6490(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v6 = [a2 descriptionInternal];
  [v9 doubleValue];
  id v8 = +[NSString stringWithFormat:@"    %@: %0.1f s", v6, v7];
  [v5 addObject:v8];
}

void sub_1001E6540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1001E669C(uint64_t a1)
{
  uint64_t v2 = +[NSDate now];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;

  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 0;
  double v5 = sub_1002E0CF8(@"FindingBTDiscoveryTimeoutSecondsOverride", 120.0);
  id v6 = [NIServerFindingDiscoveryProvider alloc];
  sub_100004950(__p, "FindableDeviceProxy");
  uint64_t v7 = -[NIServerFindingDiscoveryProvider initWithIdentifier:isFinder:enableBluetooth:launchOnDemand:scanRate:discoveryTimeout:oobRefreshPeriod:consumer:queue:](v6, "initWithIdentifier:isFinder:enableBluetooth:launchOnDemand:scanRate:discoveryTimeout:oobRefreshPeriod:consumer:queue:", __p, 0, 1, 1, 20, v5, 0.0, *(void *)(*(void *)(a1 + 32) + 8));
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 32);
  *(void *)(v8 + 32) = v7;

  if (v52 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = [NIServerFindingRangingProvider alloc];
  sub_100004950(__p, "FindableDeviceProxy");
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(v11 + 8);
  id v13 = sub_1002F6464();
  unsigned int v14 = (std::__shared_weak_count *)*((void *)v13 + 21);
  uint64_t v49 = *((void *)v13 + 20);
  int64_t v50 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v15 = [(NIServerFindingRangingProvider *)v10 initWithIdentifier:__p isFinder:0 consumer:v11 queue:v12 pbLogger:&v49];
  uint64_t v16 = *(void *)(a1 + 32);
  long long v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;

  if (v50) {
    sub_10001A970(v50);
  }
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v18 = +[NSHashTable weakObjectsHashTable];
  uint64_t v19 = *(void *)(a1 + 32);
  id v20 = *(void **)(v19 + 72);
  *(void *)(v19 + 72) = v18;

  uint64_t v21 = objc_opt_new();
  uint64_t v22 = *(void *)(a1 + 32);
  long long v23 = *(void **)(v22 + 48);
  *(void *)(v22 + 48) = v21;

  uint64_t v24 = objc_opt_new();
  uint64_t v25 = *(void *)(a1 + 32);
  long long v26 = *(void **)(v25 + 56);
  *(void *)(v25 + 56) = v24;

  uint64_t v27 = objc_opt_new();
  uint64_t v28 = *(void *)(a1 + 32);
  long long v29 = *(void **)(v28 + 64);
  *(void *)(v28 + 64) = v27;

  uint64_t v30 = objc_opt_new();
  uint64_t v31 = *(void *)(a1 + 32);
  uint64_t v32 = *(void **)(v31 + 80);
  *(void *)(v31 + 80) = v30;

  uint64_t v33 = objc_opt_new();
  uint64_t v34 = *(void *)(a1 + 32);
  __int16 v35 = *(void **)(v34 + 88);
  *(void *)(v34 + 88) = v33;

  uint64_t v36 = *(void *)(a1 + 32);
  __int16 v37 = *(void **)(v36 + 104);
  *(void *)(v36 + 104) = 0;

  uint64_t v38 = *(void *)(a1 + 32);
  __int16 v39 = *(void **)(v38 + 112);
  *(void *)(v38 + 112) = 0;

  *(_DWORD *)(*(void *)(a1 + 32) + 120) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 124) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 125) = 0;
  unsigned int v40 = +[NSNotificationCenter defaultCenter];
  [v40 addObserver:*(void *)(a1 + 32) selector:"_nanoRegistryDevicePairingChanged_r121951698:" name:NRPairedDeviceRegistryDeviceDidPairNotification object:0];

  long long v41 = +[NSNotificationCenter defaultCenter];
  [v41 addObserver:*(void *)(a1 + 32) selector:"_nanoRegistryDevicePairingChanged_r121951698:" name:NRPairedDeviceRegistryDeviceIsSetupNotification object:0];

  uint64_t v42 = +[NSNotificationCenter defaultCenter];
  [v42 addObserver:*(void *)(a1 + 32) selector:"_nanoRegistryDevicePairingChanged_r121951698:" name:NRPairedDeviceRegistryDeviceDidUnpairNotification object:0];

  *(_DWORD *)(*(void *)(a1 + 32) + 128) = [objc_opt_class() _queryNumPairedFinderWatches_r121951698];
  *(void *)(*(void *)(a1 + 32) + 96) = 0;
  id v43 = objc_alloc_init((Class)NSOperationQueue);
  uint64_t v44 = *(void *)(a1 + 32);
  std::string v45 = *(void **)(v44 + 136);
  *(void *)(v44 + 136) = v43;

  [*(id *)(*(void *)(a1 + 32) + 136) setUnderlyingQueue:*(void *)(*(void *)(a1 + 32) + 8)];
  *(unsigned char *)(*(void *)(a1 + 32) + 248) = 0;
  sub_1001E6AF8((void *)(*(void *)(a1 + 32) + 256), 0xFuLL);
  sub_1001E6AF8((void *)(*(void *)(a1 + 32) + 304), 0x32uLL);
  sub_1001E6AF8((void *)(*(void *)(a1 + 32) + 352), 0xAuLL);
  if (+[NIPlatformInfo isInternalBuild]
    || (+[NSUserDefaults standardUserDefaults],
        std::string v46 = objc_claimAutoreleasedReturnValue(),
        unsigned int v47 = [v46 BOOLForKey:@"EnableStateDump"],
        v46,
        v47))
  {
    id v48 = *(id *)(a1 + 32);
    os_state_add_handler();
  }
}

void sub_1001E6AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

void sub_1001E6AF8(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[5];
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_1001EE864(a1, v5);
  }
  else if (!v4)
  {
    unint64_t v6 = a1[4];
    uint64_t v7 = a1[1];
    uint64_t v8 = (void *)(v7 + 8 * (v6 / 0xAA));
    if (a1[2] == v7) {
      unint64_t v9 = 0;
    }
    else {
      unint64_t v9 = *v8 + 24 * (v6 % 0xAA);
    }
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    sub_1001EF1A4(&v10, a2);
    sub_1001EE9D4((uint64_t)a1, v10, v11);
  }
}

char *sub_1001E6BB0(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) _internalPrintableState];
  uint64_t v2 = sub_10002DA78(@"Findable Device", v1);

  return v2;
}

void sub_1001E6BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E6F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E7118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E7600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E7714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E7828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E793C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E7A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E844C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  uint64_t v22 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1001E85D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([v4 isDoingAnything]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  if ([v4 isAttemptingToRange]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_1001E864C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E8D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  _Unwind_Resume(a1);
}

void sub_1001E8F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E91D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E9300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1001E9318(uint64_t a1)
{
  return [*(id *)(a1 + 32) unionSet:];
}

void sub_1001E93E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001E940C(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 containsObject:*(void *)(a1 + 32)];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1001E9544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001E960C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1001E96D0(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 128);
  *(_DWORD *)(*(void *)(a1 + 32) + 128) = [objc_opt_class() _queryNumPairedFinderWatches_r121951698];
  unint64_t v3 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 40) name];
    int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 128);
    int v7 = 138412802;
    uint64_t v8 = v4;
    __int16 v9 = 1024;
    int v10 = v2;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-proxy,rdar://121951698: pairing change notification (%@). Previous paired finder watches: %d. New: %d.", (uint8_t *)&v7, 0x18u);
  }
  id result = [*(id *)(a1 + 32) _shouldInteract];
  if (result) {
    return [*(id *)(a1 + 32) _enableInteractionWithPersistedTokens];
  }
  return result;
}

void sub_1001E97E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E9864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1001E9880(id a1, NRDevice *a2)
{
  int v2 = a2;
  unint64_t v3 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsPaired];
  id v4 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsSetup];
  int v5 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsAltAccount];
  unint64_t v6 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsArchived];
  if ([v3 BOOLValue]
    && [v4 BOOLValue]
    && ([v5 BOOLValue] & 1) == 0)
  {
    unsigned int v7 = [v6 BOOLValue] ^ 1;
  }
  else
  {
    LOBYTE(v7) = 0;
  }

  return v7;
}

void sub_1001E9970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E9C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001E9EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Unwind_Resume(a1);
}

void sub_1001E9F4C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unint64_t v3 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = sub_1002E0FD8((uint64_t)"KeepAlive", 0, *(void **)(a1 + 32), @"Finished");
      int v7 = 138412290;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-proxy,%@", (uint8_t *)&v7, 0xCu);
    }
    [WeakRetained[10] removeObjectForKey:*(void *)(a1 + 32)];
    [WeakRetained[11] removeObjectForKey:*(void *)(a1 + 32)];
    int v5 = [WeakRetained[4] stopAdvertisingToPeer:*(void *)(a1 + 32)];
    if (v5 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_10041C818();
    }
    [WeakRetained _updatePeerTrackingForToken:*(void *)(a1 + 32) newAdvertisingState:2];
    unint64_t v6 = [WeakRetained[5] stopRangingWithPeer:*(void *)(a1 + 32)];
    if (v6 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_10041C7B0();
    }
    [WeakRetained _updatePeerTrackingForToken:*(void *)(a1 + 32) newRangingState:4];
  }
}

void sub_1001EA0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EA3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EA6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EA724(uint64_t a1, void *a2)
{
  id v3 = a2;
  WORD2(v14) = 0;
  LODWORD(v14) = 0;
  id v4 = [[NIServerFindingAdvertisement alloc] initForFinder:1 address:&v14];
  [v4 setCanRange:1];
  int v5 = *(void **)(*(void *)(a1 + 32) + 40);
  if (v5)
  {
    [v5 supportedTechnologies];
  }
  else
  {
    unsigned int v14 = 0;
    __int16 v15 = 0;
    uint64_t v16 = 0;
  }
  BOOL v6 = sub_1002E1AE8(&v14, 1);
  std::string __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v7 = operator new(4uLL);
  if (v6) {
    int v8 = 1;
  }
  else {
    int v8 = 2;
  }
  std::string __p = v7;
  *int v7 = v8;
  uint64_t v18 = v7 + 1;
  uint64_t v19 = v7 + 1;
  [v4 setSupportedTechnologies:&__p];
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    __int16 v15 = v14;
    operator delete(v14);
  }
  [v4 setProtocolVersion:1];
  __int16 v9 = sub_1002F6464();
  uint64_t v10 = *((void *)v9 + 406);
  __int16 v11 = (std::__shared_weak_count *)*((void *)v9 + 407);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1002CE8FC(v10);
  [v4 setNarrowBandMask:sub_1003A8B68((unsigned __int8 **)v13)];
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  if (v11) {
    sub_10001A970(v11);
  }
  [*(id *)(a1 + 32) _updatePeerTrackingForToken:v3 newDiscoveryState:2];
  int v12 = +[NSNumber numberWithInt:5];
  [*(id *)(a1 + 32) _updatePeerTrackingForToken:v3 newNbUwbAcquisitionChannelIdx:v12];
  [*(id *)(a1 + 32) _advertiseAndRangeWithPeer:v3 peerAdvertisement:v4];
}

void sub_1001EA8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void sub_1001EAB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1001EAB30(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 32) stopAdvertisingToPeer:v3];
  uint64_t v5 = a1 + 40;
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v4;

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)
    && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10041CA28();
  }
  uint64_t v8 = [*(id *)(*(void *)(a1 + 32) + 40) stopRangingWithPeer:v3];
  uint64_t v9 = *(void *)(*(void *)v5 + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (*(void *)(*(void *)(*(void *)v5 + 8) + 40)
    && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10041C9C0();
  }
  __int16 v11 = *(void **)(a1 + 32);
  int v12 = +[NIServerFindingPeerTracking peerTrackingTerminalState];
  [v11 _updatePeerTrackingForToken:v3 newTrackingState:v12];
}

void sub_1001EAC5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EAE6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EB014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EB144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EB3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  id v13 = v12;

  _Unwind_Resume(a1);
}

id sub_1001EB444(uint64_t a1)
{
  return [*(id *)(a1 + 32) didGenerateShareableConfigurationData:*(void *)(a1 + 40) forToken:*(void *)(a1 + 48)];
}

void sub_1001EB534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EB6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EB834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EBA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EBC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EBE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EBF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EC07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EC1B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EC280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001EC40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EC59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EC688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001EC6A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_10041CC2C();
      if (v5) {
        goto LABEL_5;
      }
    }
    else if (v5)
    {
LABEL_5:
      [v5 timestamp];
      uint64_t v9 = v8;
      uint64_t v10 = [v5 relativeAltitude];
      [v10 doubleValue];
      uint64_t v12 = v11;
      id v13 = [v5 pressure];
      [v13 doubleValue];
      uint64_t v15 = v14;

      uint64_t v16 = (void *)WeakRetained[8];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_1001EC848;
      void v17[3] = &unk_100859008;
      __n128 v17[4] = v9;
      void v17[5] = v12;
      v17[6] = v15;
      [v16 enumerateKeysAndObjectsUsingBlock:v17];
      goto LABEL_9;
    }
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041CBF8();
    }
  }
LABEL_9:
}

void sub_1001EC814(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1001EC848(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 updatesEngine];
  [v4 acceptAltimeterData:a1 + 32];
}

void sub_1001EC89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001EC98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  long long v17 = v16;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001EC9BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001ECA90;
    block[3] = &unk_100855EB0;
    id v11 = v6;
    id v12 = v5;
    id v13 = v8;
    dispatch_async(v9, block);
  }
}

void sub_1001ECA90(uint64_t a1)
{
  if (*(void *)(a1 + 32) && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10041CCC8();
  }
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v24 = [v2 startDate];
    [v24 timeIntervalSinceReferenceDate];
    uint64_t v4 = v3;
    id v5 = [*(id *)(a1 + 40) endDate];
    [v5 timeIntervalSinceReferenceDate];
    uint64_t v7 = v6;
    uint64_t v8 = [*(id *)(a1 + 40) numberOfSteps];
    unsigned int v23 = [v8 unsignedIntValue];
    uint64_t v9 = [*(id *)(a1 + 40) distance];
    [v9 doubleValue];
    uint64_t v11 = v10;
    id v12 = [*(id *)(a1 + 40) currentPace];
    [v12 doubleValue];
    uint64_t v14 = v13;
    uint64_t v15 = [*(id *)(a1 + 40) currentCadence];
    [v15 doubleValue];
    uint64_t v17 = v16;
    uint64_t v18 = [*(id *)(a1 + 40) floorsAscended];
    unsigned int v19 = [v18 unsignedIntValue];
    uint64_t v20 = [*(id *)(a1 + 40) floorsDescended];
    unsigned int v21 = [v20 unsignedIntValue];

    uint64_t v22 = *(void **)(*(void *)(a1 + 48) + 64);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_1001ECD08;
    v25[3] = &unk_100859050;
    void v25[4] = v4;
    v25[5] = v7;
    unsigned int v26 = v23;
    uint64_t v27 = v11;
    uint64_t v28 = v14;
    uint64_t v29 = v17;
    unsigned int v30 = v19;
    unsigned int v31 = v21;
    [v22 enumerateKeysAndObjectsUsingBlock:v25];
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10041CC94();
  }
}

void sub_1001ECCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1001ECCF0()
{
}

void sub_1001ECCF8()
{
}

void sub_1001ECD00()
{
}

void sub_1001ECD08(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 updatesEngine];
  [v4 acceptPedometerData:a1 + 32];
}

void sub_1001ECD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001ECE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001ECE4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001ECF20;
    block[3] = &unk_100855EB0;
    id v11 = v6;
    id v12 = v5;
    uint64_t v13 = v8;
    dispatch_async(v9, block);
  }
}

void sub_1001ECF20(uint64_t a1)
{
  if (*(void *)(a1 + 32) && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10041CD34();
  }
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = [v2 date];
    [v3 timeIntervalSinceReferenceDate];
    uint64_t v5 = v4;
    BOOL v6 = [*(id *)(a1 + 40) type] == (id)1;

    uint64_t v7 = *(void **)(*(void *)(a1 + 48) + 64);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001ED050;
    void v8[3] = &unk_100859098;
    void v8[4] = v5;
    BOOL v9 = v6;
    [v7 enumerateKeysAndObjectsUsingBlock:v8];
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10041CC94();
  }
}

void sub_1001ED040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001ED050(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 updatesEngine];
  [v4 acceptPedometerEvent:a1 + 32];
}

void sub_1001ED0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001ED178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001ED198(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v3)
    {
      [v3 timestamp];
      uint64_t v6 = v5;
      uint64_t v7 = [v3 startDate];
      [v7 timeIntervalSinceReferenceDate];
      uint64_t v9 = v8;
      unsigned int v10 = [v3 confidence];
      unsigned __int8 v11 = [v3 stationary];
      unsigned __int8 v12 = [v3 walking];
      unsigned __int8 v13 = [v3 running];
      unsigned __int8 v14 = [v3 automotive];
      unsigned __int8 v15 = [v3 cycling];
      unsigned __int8 v16 = [v3 unknown];

      uint64_t v17 = (void *)WeakRetained[8];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      long long v18[2] = sub_1001ED344;
      v18[3] = &unk_1008590E0;
      v18[4] = v6;
      v18[5] = v9;
      unsigned __int8 v19 = v11;
      unsigned __int8 v20 = v12;
      unsigned __int8 v21 = v13;
      unsigned __int8 v22 = v14;
      unsigned __int8 v23 = v15;
      unsigned __int8 v24 = v16;
      unsigned int v25 = v10;
      [v17 enumerateKeysAndObjectsUsingBlock:v18];
    }
    else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_10041CDA0();
    }
  }
}

void sub_1001ED324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001ED344(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 updatesEngine];
  [v4 acceptMotionActivity:a1 + 32];
}

void sub_1001ED398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001ED47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001ED49C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10041CF18();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_10041CEB0();
      if (v5)
      {
LABEL_7:
        [v5 timestamp];
        sub_1002B5E84((uint64_t)(WeakRetained + 22), v8);
        if (v9)
        {
          unsigned int v10 = [v5 deltaPositionX];

          if (v10)
          {
            unsigned __int8 v11 = [v5 deltaPositionX];
            [v11 doubleValue];
            uint64_t v13 = v12;

            uint64_t v14 = 1;
          }
          else
          {
            uint64_t v14 = 0;
            uint64_t v13 = 0;
          }
          unsigned __int8 v15 = [v5 deltaPositionY];

          if (v15)
          {
            unsigned __int8 v16 = [v5 deltaPositionY];
            [v16 doubleValue];
            uint64_t v18 = v17;

            uint64_t v19 = 1;
          }
          else
          {
            uint64_t v19 = 0;
            uint64_t v18 = 0;
          }
          unsigned __int8 v20 = [v5 deltaPositionZ];

          if (v20)
          {
            unsigned __int8 v21 = [v5 deltaPositionZ];
            [v21 doubleValue];
            uint64_t v68 = v22;

            uint64_t v23 = 1;
          }
          else
          {
            uint64_t v23 = 0;
            uint64_t v68 = 0;
          }
          unsigned __int8 v24 = [v5 deltaVelocityX];

          if (v24)
          {
            unsigned int v25 = [v5 deltaVelocityX];
            [v25 doubleValue];
            uint64_t v67 = v26;

            uint64_t v27 = 1;
          }
          else
          {
            uint64_t v27 = 0;
            uint64_t v67 = 0;
          }
          uint64_t v28 = [v5 deltaVelocityY];

          if (v28)
          {
            uint64_t v29 = [v5 deltaVelocityY];
            [v29 doubleValue];
            uint64_t v66 = v30;

            uint64_t v65 = 1;
          }
          else
          {
            uint64_t v65 = 0;
            uint64_t v66 = 0;
          }
          unsigned int v31 = [v5 deltaVelocityZ];

          uint64_t v63 = v19;
          uint64_t v64 = v14;
          uint64_t v61 = v27;
          uint64_t v62 = v23;
          if (v31)
          {
            uint64_t v32 = [v5 deltaVelocityZ];
            [v32 doubleValue];
            uint64_t v34 = v33;

            uint64_t v35 = 1;
          }
          else
          {
            uint64_t v35 = 0;
            uint64_t v34 = 0;
          }
          uint64_t v36 = [v5 quaternionW];

          if (v36)
          {
            __int16 v37 = [v5 quaternionW];
            [v37 doubleValue];
            double v39 = v38;
          }
          else
          {
            double v39 = 0.0;
          }
          unsigned int v40 = [v5 quaternionX];

          if (v40)
          {
            long long v41 = [v5 quaternionX];
            [v41 doubleValue];
            uint64_t v43 = v42;
          }
          else
          {
            uint64_t v43 = 0;
          }
          uint64_t v44 = [v5 quaternionY];

          if (v44)
          {
            std::string v45 = [v5 quaternionY];
            [v45 doubleValue];
            uint64_t v47 = v46;
          }
          else
          {
            uint64_t v47 = 0;
          }
          id v48 = [v5 quaternionZ];

          double v49 = 0.0;
          uint64_t v50 = 0;
          if (v48)
          {
            id v51 = [v5 quaternionZ];
            [v51 doubleValue];
            uint64_t v50 = v52;
          }
          BOOL v53 = v48 != 0;
          if (v36) {
            BOOL v54 = v40 == 0;
          }
          else {
            BOOL v54 = 1;
          }
          int v56 = !v54 && v44 != 0;
          char v57 = v56 & v53;
          if ((v56 & v53) != 0) {
            double v49 = v39;
          }
          [v5 timestamp];
          uint64_t v59 = v58;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
            sub_10041CE3C();
          }
          __int16 v60 = (void *)WeakRetained[8];
          v69[0] = _NSConcreteStackBlock;
          v69[1] = 3221225472;
          v69[2] = sub_1001EDA40;
          v69[3] = &unk_100859128;
          v69[4] = v59;
          char v70 = 0;
          char v71 = 0;
          uint64_t v72 = v13;
          uint64_t v73 = v64;
          uint64_t v74 = v18;
          uint64_t v75 = v63;
          uint64_t v76 = v68;
          uint64_t v77 = v62;
          uint64_t v78 = v67;
          uint64_t v79 = v61;
          uint64_t v80 = v66;
          uint64_t v81 = v65;
          uint64_t v82 = v34;
          uint64_t v83 = v35;
          double v84 = v49;
          uint64_t v85 = v43;
          uint64_t v86 = v47;
          uint64_t v87 = v50;
          char v88 = v57;
          [v60 enumerateKeysAndObjectsUsingBlock:v69];
        }
        else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
        {
          sub_10041CE08();
        }
        goto LABEL_56;
      }
    }
    else if (v5)
    {
      goto LABEL_7;
    }
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041CDD4();
    }
  }
LABEL_56:
}

void sub_1001ED98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EDA40(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 updatesEngine];
  [v4 acceptDevicePDRInput:a1 + 32];
}

void sub_1001EDA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001EDB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001EDB98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained) {
    goto LABEL_12;
  }
  if (v6 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10041CF80();
    if (v5)
    {
LABEL_5:
      [v5 timestamp];
      uint64_t v50 = sub_1002B5E84((uint64_t)(WeakRetained + 22), v8);
      if (v9)
      {
        [v5 userAcceleration];
        uint64_t v49 = v10;
        [v5 userAcceleration];
        uint64_t v48 = v11;
        [v5 userAcceleration];
        uint64_t v47 = v12;
        [v5 rotationRate];
        uint64_t v46 = v13;
        [v5 rotationRate];
        uint64_t v45 = v14;
        [v5 rotationRate];
        uint64_t v44 = v15;
        unsigned __int8 v16 = [v5 attitude];
        [v16 quaternion];
        uint64_t v43 = v17;
        uint64_t v18 = [v5 attitude];
        [v18 quaternion];
        uint64_t v42 = v19;
        unsigned __int8 v20 = [v5 attitude];
        [v20 quaternion];
        uint64_t v22 = v21;
        uint64_t v23 = [v5 attitude];
        [v23 quaternion];
        uint64_t v25 = v24;
        [v5 gravity];
        uint64_t v27 = v26;
        [v5 gravity];
        uint64_t v29 = v28;
        [v5 gravity];
        uint64_t v31 = v30;
        uint64_t v32 = [v5 attitude];
        [v32 yaw];
        uint64_t v34 = v33;
        uint64_t v35 = [v5 attitude];
        [v35 pitch];
        uint64_t v37 = v36;
        double v38 = [v5 attitude];
        [v38 roll];
        uint64_t v40 = v39;

        long long v41 = (void *)WeakRetained[8];
        v51[0] = _NSConcreteStackBlock;
        v51[1] = 3221225472;
        v51[2] = sub_1001EDF44;
        v51[3] = &unk_100859170;
        void v51[4] = v50;
        v51[5] = v49;
        v51[6] = v48;
        v51[7] = v47;
        unsigned char v51[8] = v46;
        v51[9] = v45;
        v51[10] = v44;
        v51[11] = v43;
        v51[12] = v42;
        v51[13] = v22;
        v51[14] = v25;
        v51[15] = v27;
        unsigned char v51[16] = v29;
        v51[17] = v31;
        v51[18] = v34;
        v51[19] = v37;
        v51[20] = v40;
        [v41 enumerateKeysAndObjectsUsingBlock:v51];
      }
      else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        sub_10041CF4C();
      }
      goto LABEL_12;
    }
  }
  else if (v5)
  {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10041CDD4();
  }
LABEL_12:
}

void sub_1001EDE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_1001EDF44(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 updatesEngine];
  [v4 acceptDeviceMotionInput:a1 + 32];
}

void sub_1001EDF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001EE01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EE290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EE2D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 updatesEngine];
  [v4 acceptSelfLocationData:a1 + 32];
}

void sub_1001EE324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001EE3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001EE3E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 updatesEngine];
  +[NIGnssExtensionsManager getGnssSatelliteDataVecFromDict:*(void *)(a1 + 32)];
  [v4 acceptGnssSatelliteData:__p];
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1001EE454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001EE570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001EE638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001EE658(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 updatesEngine];
  [v4 acceptVisionInput:*(void *)(a1 + 32)];
}

void sub_1001EE6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001EE864(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  }
  unint64_t v7 = a1[5] + a1[4];
  unint64_t v8 = v6 - v7;
  BOOL v9 = a2 > v8;
  unint64_t v10 = a2 - v8;
  if (v9)
  {
    sub_1001EEB7C(a1, v10);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    unint64_t v7 = a1[4] + a1[5];
  }
  uint64_t v11 = (void *)(v4 + 8 * (v7 / 0xAA));
  if (v5 == v4) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (char *)(*v11 + 24 * (v7 % 0xAA));
  }
  uint64_t v19 = (void *)(v4 + 8 * (v7 / 0xAA));
  unsigned __int8 v20 = v12;
  sub_1001EF1A4(&v19, a2);
  uint64_t v13 = (uint64_t)v20;
  if (v12 != v20)
  {
    uint64_t v14 = v19;
    do
    {
      if (v11 == v14) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = *v11 + 4080;
      }
      if (v12 == (char *)v15)
      {
        uint64_t v17 = v12;
      }
      else
      {
        size_t v16 = 24 * ((v15 - (uint64_t)v12 - 24) / 0x18uLL) + 24;
        bzero(v12, v16);
        uint64_t v17 = &v12[v16];
      }
      a1[5] -= 0x5555555555555555 * ((v17 - v12) >> 3);
      if (v11 == v14) {
        break;
      }
      uint64_t v18 = (char *)v11[1];
      ++v11;
      uint64_t v12 = v18;
    }
    while (v18 != (char *)v13);
  }
}

uint64_t sub_1001EE9D4(uint64_t result, void *a2, uint64_t a3)
{
  id v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  unint64_t v8 = (void *)(v6 + 8 * (v5 / 0xAA));
  if (v7 == v6) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *v8 + 24 * (v5 % 0xAA);
  }
  if (v9 != a3)
  {
    uint64_t v10 = (a3 - *a2) >> 3;
    uint64_t v11 = 170 * (v8 - a2) - 0x5555555555555555 * ((uint64_t)(v9 - *v8) >> 3) + 0x5555555555555555 * v10;
    if (v11 >= 1)
    {
      uint64_t v12 = (void *)(v6 + 8 * (v4 / 0xAA));
      if (v7 == v6) {
        unint64_t v13 = 0;
      }
      else {
        unint64_t v13 = *v12 + 24 * (v4 % 0xAA);
      }
      if (a3 == v13) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = 170 * (a2 - v12) - 0x5555555555555555 * v10 + 0x5555555555555555 * ((uint64_t)(v13 - *v12) >> 3);
      }
      uint64_t v18 = v12;
      unint64_t v19 = v13;
      sub_1001EF1A4(&v18, v14);
      unint64_t v15 = v19;
      if (v19 != v9)
      {
        size_t v16 = v18;
        do
        {
          if (*(char *)(v15 + 23) < 0) {
            operator delete(*(void **)v15);
          }
          v15 += 24;
          if (v15 - *v16 == 4080)
          {
            unint64_t v17 = v16[1];
            ++v16;
            unint64_t v15 = v17;
          }
        }
        while (v15 != v9);
      }
      v3[5] -= v11;
      do
        id result = sub_1001EF12C(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void sub_1001EEB7C(void *a1, unint64_t a2)
{
  id v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0xAA) {
    unint64_t v6 = v5 / 0xAA + 1;
  }
  else {
    unint64_t v6 = v5 / 0xAA;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0xAA) {
    unint64_t v8 = v7 / 0xAA;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0xAA)
  {
    for (a1[4] = v7 - 170 * v8; v8; --v8)
    {
      size_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          id v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            id v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            id v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            id v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          id v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)id v3 = v18;
      id v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF0uLL);
          sub_100151818(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF0uLL);
          sub_100151930((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 169;
          }
          else {
            uint64_t v64 = 170;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - 170 * v8;
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              uint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      long long v91 = a1 + 3;
      if (v13) {
        unint64_t v15 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v13);
      }
      else {
        unint64_t v15 = 0;
      }
      uint64_t v38 = -170 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        char v88 = operator new(0xFF0uLL);
        sub_100151A50(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_100056BF0((uint64_t)v91, v48);
              id v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                BOOL v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)BOOL v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      char v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_100151B68((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1001EF0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001EF12C(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *sub_1001EF1A4(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 169 - v3;
      unint64_t v6 = &v2[-(v5 / 0xAA)];
      *id result = v6;
      unint64_t v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *id result = &v2[v3 / 0xAA];
      unint64_t v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t sub_1001EF240(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    unint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 170;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    unint64_t v14 = *v2++;
    operator delete(v14);
  }

  return sub_10003ACC4((uint64_t)a1);
}

void sub_1001EF398(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1001EF3AC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C888))
  {
    sub_100004950(qword_10089C870, "PRRoseProviderNetworkListener");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C870, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C888);
  }
}

void sub_1001EF444(_Unwind_Exception *a1)
{
}

void sub_1001EF45C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8A8))
  {
    sub_100004950(&qword_10089C890, "com.apple.nearbyd.accessory.download");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C890, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8A8);
  }
}

void sub_1001EF4F4(_Unwind_Exception *a1)
{
}

void sub_1001EF50C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8C8))
  {
    sub_100004950(&qword_10089C8B0, "com.apple.nearbyd.accessory.files");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C8B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8C8);
  }
}

void sub_1001EF5A4(_Unwind_Exception *a1)
{
}

void sub_1001EF5BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8E8))
  {
    sub_100004950(qword_10089C8D0, "MA_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8E8);
  }
}

void sub_1001EF654(_Unwind_Exception *a1)
{
}

void sub_1001EF66C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C908))
  {
    sub_100004950(qword_10089C8F0, "MB_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C908);
  }
}

void sub_1001EF704(_Unwind_Exception *a1)
{
}

void sub_1001EF71C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C928))
  {
    sub_100004950(qword_10089C910, "D");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C910, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C928);
  }
}

void sub_1001EF7B4(_Unwind_Exception *a1)
{
}

void sub_1001EF7CC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C948, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C948))
  {
    sub_100004950(&qword_10089C930, "A");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C930, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C948);
  }
}

void sub_1001EF864(_Unwind_Exception *a1)
{
}

void sub_1001EF87C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C968))
  {
    sub_100004950(qword_10089C950, "FAS.bin");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C950, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C968);
  }
}

void sub_1001EF914(_Unwind_Exception *a1)
{
}

void sub_1001EF92C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C988))
  {
    qword_10089C970 = 0;
    qword_10089C978 = 0;
    qword_10089C980 = 0;
    uint64_t v0 = operator new(0x30uLL);
    qword_10089C978 = (uint64_t)(v0 + 3);
    qword_10089C980 = (uint64_t)(v0 + 3);
    _OWORD *v0 = xmmword_1004B9A28;
    v0[1] = unk_1004B9A38;
    v0[2] = xmmword_1004B9A48;
    qword_10089C970 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_100008CAC, &qword_10089C970, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C988);
  }
}

void sub_1001EF9E8(_Unwind_Exception *a1)
{
}

void sub_1001EFA00()
{
  sub_10039D144();
  uint64_t v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  unint64_t v3 = std::string::append(&v38, ".bin");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_1008A4408 = v3->__r_.__value_.__r.__words[2];
  xmmword_1008A43F8 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A43F8, (void *)&_mh_execute_header);
  sub_10039D144();
  unint64_t v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  unint64_t v7 = std::string::append(&v38, ".bin");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_1008A4420 = v7->__r_.__value_.__r.__words[2];
  xmmword_1008A4410 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4410, (void *)&_mh_execute_header);
  sub_10039D144();
  unint64_t v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  unint64_t v11 = std::string::append(&v38, ".bin");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_1008A4438 = v11->__r_.__value_.__r.__words[2];
  xmmword_1008A4428 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4428, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  unint64_t v15 = std::string::append(&v38, ".bin");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_1008A4450 = v15->__r_.__value_.__r.__words[2];
  xmmword_1008A4440 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4440, (void *)&_mh_execute_header);
  sub_10039D144();
  unint64_t v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v38, ".bin");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_1008A4468 = v19->__r_.__value_.__r.__words[2];
  xmmword_1008A4458 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4458, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  uint64_t v23 = std::string::append(&v38, ".bin");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_1008A4480 = v23->__r_.__value_.__r.__words[2];
  xmmword_1008A4470 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4470, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  uint64_t v27 = std::string::append(&v38, ".bin");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_1008A4498 = v27->__r_.__value_.__r.__words[2];
  xmmword_1008A4488 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A4488, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  uint64_t v31 = std::string::append(&v38, ".bin");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_1008A44B0 = v31->__r_.__value_.__r.__words[2];
  xmmword_1008A44A0 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A44A0, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  uint64_t v35 = std::string::append(&v38, ".bin");
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_1008A44C8 = v35->__r_.__value_.__r.__words[2];
  xmmword_1008A44B8 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A44B8, (void *)&_mh_execute_header);
}

void sub_1001F0040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001F00B4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100859448)[a1]);
}

uint64_t sub_1001F00C8(void *a1)
{
  sub_10016CC78(a1 + 12);
  sub_10016CC78(a1 + 6);

  return sub_10016CC78(a1);
}

uint64_t sub_1001F010C(uint64_t a1, void *a2, uint64_t a3, char a4, int a5)
{
  id v9 = a2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = a4;
  *(unsigned char *)(a1 + 17) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  sub_1001F2A10(a1 + 32, a3);
  id v10 = v9;
  *(_OWORD *)(a1 + 248) = xmmword_1004B9A60;
  *(void *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = objc_opt_new();
  *(void *)(a1 + 288) = objc_opt_new();
  if (a5)
  {
    memset(v16, 0, sizeof(v16));
    memset(v15, 0, sizeof(v15));
    memset(v14, 0, sizeof(v14));
    long long v17 = xmmword_1004B9A70;
    sub_1001F2744(a1 + 104, (uint64_t)v14);
    sub_1001F2744(a1 + 152, (uint64_t)v15);
    sub_1001F2744(a1 + 200, (uint64_t)v16);
    *(_OWORD *)(a1 + 248) = v17;
    sub_10016CC78(v16);
    sub_10016CC78(v15);
    sub_10016CC78(v14);
  }
  if (!*(void *)(a1 + 64))
  {
    long long v12 = "fUpdatesQueue";
    int v13 = 77;
    goto LABEL_8;
  }
  if (!*(void *)(a1 + 56))
  {
    long long v12 = "fStateUpdateCb";
    int v13 = 78;
LABEL_8:
    __assert_rtn("HybridMotionDetector", "NIServerMotionDetector.mm", v13, v12);
  }

  return a1;
}

void sub_1001F02A0(_Unwind_Exception *a1)
{
  sub_1001F00C8(v4);
  sub_1001A62F8(v3);
  long long v6 = *(std::__shared_weak_count **)(v2 + 8);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1001F0330(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nimd,HybridMotionDetector destructed", v5, 2u);
  }

  sub_10016CC78((void *)(a1 + 200));
  sub_10016CC78((void *)(a1 + 152));
  sub_10016CC78((void *)(a1 + 104));

  sub_1001A62F8((void *)(a1 + 32));
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1001F041C(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  sub_1001F04D4(a1);
  uint64_t v2 = *(NSObject **)(a1 + 264);
  if (v2)
  {
    dispatch_source_cancel(v2);
    unint64_t v3 = *(void **)(a1 + 264);
    *(void *)(a1 + 264) = 0;
  }
  long long v4 = *(NSObject **)(a1 + 272);
  if (v4)
  {
    dispatch_source_cancel(v4);
    unint64_t v5 = *(void **)(a1 + 272);
    *(void *)(a1 + 272) = 0;
  }
  sub_1001F2AA8((void *)(a1 + 32));
  long long v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nimd,HybridMotionDetector invalided", v7, 2u);
  }
}

void sub_1001F04D4(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    [v2 stopActivityUpdates];
    unint64_t v3 = *(void **)(a1 + 80);
  }
  else
  {
    unint64_t v3 = 0;
  }
  *(void *)(a1 + 80) = 0;

  long long v4 = *(void **)(a1 + 72);
  if (v4) {
    [v4 cancelAllOperations];
  }
  sub_1001F0E38(a1);
  unint64_t v5 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;

  long long v6 = *(void **)(a1 + 88);
  if (v6) {
    [v6 cancelAllOperations];
  }
  *(unsigned char *)(a1 + 17) = 0;
  unint64_t v7 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nimd,stopped monitoring motion updates", v8, 2u);
  }
}

void sub_1001F05A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (!*(unsigned char *)(a1 + 16))
  {
    sub_1001F072C((uint64_t *)a1, 5.0);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v12;
      do
      {
        unint64_t v7 = 0;
        do
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void *)(*((void *)&v11 + 1) + 8 * (void)v7);
          if (v8)
          {
            id v9 = *(void **)(a1 + 280);
            id v10 = [*(id *)(*((void *)&v11 + 1) + 8 * (void)v7) discoveryToken:v11];
            [v9 setObject:v8 forKey:v10];
          }
          unint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    sub_1001F0878(a1);
  }
}

void sub_1001F06F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F072C(uint64_t *a1, double a2)
{
  dispatch_assert_queue_V2((dispatch_queue_t)a1[8]);
  id v4 = a1[33];
  if (v4)
  {
    dispatch_source_cancel(v4);
    id v5 = (void *)a1[33];
    a1[33] = 0;
  }
  dispatch_source_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)a1[8]);
  unint64_t v7 = (void *)a1[33];
  a1[33] = (uint64_t)v6;

  uint64_t v8 = a1[33];
  dispatch_time_t v9 = dispatch_time(0, llround(a2 * 1000000000.0));
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
  uint64_t v10 = *a1;
  long long v11 = (std::__shared_weak_count *)a1[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v12 = a1[33];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3321888768;
  v13[2] = sub_1001F20C8;
  void v13[3] = &unk_1008593C0;
  v13[4] = a1;
  v13[5] = v10;
  long long v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  double v15 = a2;
  dispatch_source_set_event_handler(v12, v13);
  dispatch_resume((dispatch_object_t)a1[33]);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1001F0878(uint64_t a1)
{
  int v2 = sub_1001F18E0(a1);
  if (v2 != *(_DWORD *)(a1 + 28))
  {
    if (v2)
    {
      sub_1001F0BFC(a1);
    }
    else
    {
      sub_1001F1B4C((uint64_t *)a1);
    }
  }
}

void sub_1001F08EC(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (+[CMMotionActivityManager isActivityAvailable])
  {
    uint64_t v2 = objc_opt_new();
    id v3 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v2;

    [*(id *)(a1 + 72) setUnderlyingQueue:*(void *)(a1 + 64)];
    id v4 = objc_alloc_init((Class)CMMotionActivityManager);
    id v5 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v4;

    sub_1001F0AE0((uint64_t *)a1);
    *(_DWORD *)(a1 + 28) = 0;
    uint64_t v6 = objc_opt_new();
    unint64_t v7 = *(void **)(a1 + 88);
    *(void *)(a1 + 88) = v6;

    [*(id *)(a1 + 88) setUnderlyingQueue:*(void *)(a1 + 64)];
    id v8 = objc_alloc_init((Class)CMMotionManager);
    dispatch_time_t v9 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v8;

    [*(id *)(a1 + 96) setDeviceMotionUpdateInterval:0.01];
    *(unsigned char *)(a1 + 17) = 1;
    if (*(unsigned char *)(a1 + 16)) {
      sub_1001F0BFC(a1);
    }
    uint64_t v10 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_DWORD *)(a1 + 28)) {
        long long v11 = "DeviceMotionGravity";
      }
      else {
        long long v11 = "MotionActivity";
      }
      sub_100004950(__p, v11);
      if (v15 >= 0) {
        long long v12 = __p;
      }
      else {
        long long v12 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315138;
      long long v17 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#nimd,started monitoring motion updates, detector type is %s", buf, 0xCu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    long long v13 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_10041D120(v13);
    }
  }
}

void sub_1001F0AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F0AE0(uint64_t *a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)a1[8]);
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    uint64_t v3 = *a1;
    id v4 = (std::__shared_weak_count *)a1[1];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v2 = (void *)a1[10];
    }
    uint64_t v5 = a1[9];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3321888768;
    v7[2] = sub_1001F1C7C;
    v7[3] = &unk_100859330;
    void v7[4] = v3;
    id v8 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    [v2 startActivityUpdatesToQueue:v5 withHandler:v7];
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    uint64_t v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041D164(v6);
    }
  }
}

void sub_1001F0BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F0BFC(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v6 = 0;
    uint64_t v3 = "#nimd,trying to switch to motion detector type DeviceMotionGravity which is current motion detector type";
    id v4 = (uint8_t *)&v6;
    goto LABEL_8;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  uint64_t v5 = *(void **)(a1 + 80);
  if (v5) {
    [v5 stopActivityUpdates];
  }
  *(_DWORD *)(a1 + 28) = 1;
  sub_1001F10AC((uint64_t *)a1);
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    uint64_t v3 = "#nimd,switched motion detector type to DeviceMotionGravity";
    id v4 = buf;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
  }
}

void sub_1001F0CD4(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2) {
    [v2 stopActivityUpdates];
  }
  sub_1001F0E38(a1);
  if ([*(id *)(a1 + 280) count] || (int v3 = *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 16))) {
    int v3 = 1;
  }
  *(_DWORD *)(a1 + 28) = v3;
  *(unsigned char *)(a1 + 17) = 0;
  int v4 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = v4;
  sub_1001F0E80((uint64_t *)a1, v4);
  uint64_t v5 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 28)) {
      __int16 v6 = "DeviceMotionGravity";
    }
    else {
      __int16 v6 = "MotionActivity";
    }
    sub_100004950(__p, v6);
    if (v9 >= 0) {
      unint64_t v7 = __p;
    }
    else {
      unint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    long long v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#nimd,paused monitoring motion updates, detector type is %s", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1001F0E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F0E38(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2) {
    [v2 stopDeviceMotionUpdates];
  }

  sub_1001F1DDC((void *)(a1 + 104));
}

void sub_1001F0E80(uint64_t *a1, int a2)
{
  dispatch_assert_queue_V2((dispatch_queue_t)a1[8]);
  uint64_t v4 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v6 = a1[8];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1001F1F04;
  block[3] = &unk_100859390;
  void block[4] = v4;
  id v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = a2;
  dispatch_async(v6, block);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1001F0F50(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (!*(unsigned char *)(a1 + 17))
  {
    int v2 = *(_DWORD *)(a1 + 28);
    if (v2 == 1)
    {
      sub_1001F10AC((uint64_t *)a1);
      *(unsigned char *)(a1 + 17) = 1;
      sub_1001F072C((uint64_t *)a1, 10.0);
    }
    else if (!v2)
    {
      sub_1001F0AE0((uint64_t *)a1);
      *(unsigned char *)(a1 + 17) = 1;
    }
    int v3 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_DWORD *)(a1 + 28)) {
        uint64_t v4 = "DeviceMotionGravity";
      }
      else {
        uint64_t v4 = "MotionActivity";
      }
      sub_100004950(__p, v4);
      if (v7 >= 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315138;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#nimd,continued monitoring motion updates, detector type is %s", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1001F1094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F10AC(uint64_t *a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)a1[8]);
  int v2 = (void *)a1[12];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = (std::__shared_weak_count *)a1[1];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v2 = (void *)a1[12];
    }
    uint64_t v5 = a1[11];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3321888768;
    v7[2] = sub_1001F1D34;
    v7[3] = &unk_100859360;
    void v7[4] = v3;
    id v8 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    [v2 startDeviceMotionUpdatesToQueue:v5 withHandler:v7];
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    __int16 v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041D1A8(v6);
    }
  }
}

void sub_1001F11A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F11C8(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  int v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nimd,motion state is forced to be Moving", v3, 2u);
  }
  *(_DWORD *)(a1 + 20) = 1;
  sub_1001F0E80((uint64_t *)a1, *(_DWORD *)(a1 + 24));
}

void sub_1001F1250(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (v3 && !*(_DWORD *)(a1 + 28))
  {
    if ([v3 stationary]) {
      int v4 = [v3 confidence] == (id)2 ? 2 : 1;
    }
    else {
      int v4 = 1;
    }
    if (*(_DWORD *)(a1 + 20) != v4)
    {
      int v5 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 20) = v4;
      *(_DWORD *)(a1 + 24) = v5;
      __int16 v6 = (id)qword_1008ABDE0;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        sub_100004950(v15, (&off_100859448)[*(int *)(a1 + 20)]);
        int v7 = v16;
        id v8 = (void **)v15[0];
        int v9 = *(_DWORD *)(a1 + 24);
        if (*(_DWORD *)(a1 + 28)) {
          uint64_t v10 = "DeviceMotionGravity";
        }
        else {
          uint64_t v10 = "MotionActivity";
        }
        sub_100004950(__p, v10);
        long long v11 = v15;
        if (v7 < 0) {
          long long v11 = v8;
        }
        if (v14 >= 0) {
          long long v12 = __p;
        }
        else {
          long long v12 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136315650;
        long long v18 = v11;
        __int16 v19 = 1024;
        int v20 = v9;
        __int16 v21 = 2080;
        long long v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nimd,generated new motion state %s with event id %u, detector type is %s", buf, 0x1Cu);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
      }

      sub_1001F0E80((uint64_t *)a1, *(_DWORD *)(a1 + 24));
    }
  }
}

void sub_1001F141C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1001F145C(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (v3)
  {
    if (*(_DWORD *)(a1 + 28) == 1)
    {
      [v3 gravity];
      double v5 = v4;
      [v3 gravity];
      double v7 = v6;
      [v3 gravity];
      unint64_t v9 = sub_1001F16A4((void *)(a1 + 104), *(_DWORD *)(a1 + 20), v5 * -9.80665, v7 * -9.80665, v8 * -9.80665);
      if ((v9 & 0xFF00000000) != 0 && *(_DWORD *)(a1 + 20) != v9)
      {
        int v10 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 20) = v9;
        *(_DWORD *)(a1 + 24) = v10;
        long long v11 = (id)qword_1008ABDE0;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          sub_100004950(v20, (&off_100859448)[*(int *)(a1 + 20)]);
          int v12 = v21;
          long long v13 = (void **)v20[0];
          int v14 = *(_DWORD *)(a1 + 24);
          if (*(_DWORD *)(a1 + 28)) {
            char v15 = "DeviceMotionGravity";
          }
          else {
            char v15 = "MotionActivity";
          }
          sub_100004950(__p, v15);
          char v16 = v20;
          if (v12 < 0) {
            char v16 = v13;
          }
          if (v19 >= 0) {
            long long v17 = __p;
          }
          else {
            long long v17 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315650;
          uint64_t v23 = v16;
          __int16 v24 = 1024;
          int v25 = v14;
          __int16 v26 = 2080;
          uint64_t v27 = v17;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#nimd,generated new motion state %s with event id %u, detector type is %s", buf, 0x1Cu);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
          if (v21 < 0) {
            operator delete(v20[0]);
          }
        }

        sub_1001F0E80((uint64_t *)a1, *(_DWORD *)(a1 + 24));
      }
    }
  }
}

void sub_1001F1654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

unint64_t sub_1001F16A4(void *a1, int a2, double a3, double a4, double a5)
{
  double v18 = a4;
  double v19 = a3;
  double v17 = a5;
  sub_1001F2440(a1, &v19);
  sub_1001F2440(a1 + 6, &v18);
  sub_1001F2440(a1 + 12, &v17);
  unint64_t v7 = a1[5];
  if (v7 >= 0xB)
  {
    ++a1[4];
    a1[5] = v7 - 1;
    sub_1001F286C((uint64_t)a1, 1);
  }
  unint64_t v8 = a1[11];
  if (v8 >= 0xB)
  {
    ++a1[10];
    a1[11] = v8 - 1;
    sub_1001F286C((uint64_t)(a1 + 6), 1);
  }
  unint64_t v9 = a1[17];
  if (v9 >= 0xB)
  {
    ++a1[16];
    a1[17] = v9 - 1;
    sub_1001F286C((uint64_t)(a1 + 12), 1);
  }
  unint64_t v10 = a1[5];
  if (v10 != a1[11]) {
    sub_10041D244();
  }
  if (v10 != a1[17]) {
    sub_10041D218();
  }
  if (v10 >= 0xA)
  {
    if (v10 != 10) {
      sub_10041D1EC();
    }
    double v13 = sub_1001F24C8((uint64_t)a1, a1, a1 + 6, a1 + 12);
    if (!a2 || a2 == 2)
    {
      int v14 = (double *)(a1 + 19);
    }
    else
    {
      if (a2 != 1)
      {
        uint64_t v11 = 0;
LABEL_22:
        int v12 = &_mh_execute_header;
        return (unint64_t)v12 | v11;
      }
      int v14 = (double *)(a1 + 18);
    }
    BOOL v15 = v13 <= *v14;
    uint64_t v11 = 2;
    if (!v15) {
      uint64_t v11 = 1;
    }
    goto LABEL_22;
  }
  uint64_t v11 = 0;
  int v12 = 0;
  return (unint64_t)v12 | v11;
}

void sub_1001F1814(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  if (*(_DWORD *)(a1 + 28) == 1)
  {
    sub_1001F0E38(a1);
    *(_DWORD *)(a1 + 28) = 0;
    sub_1001F0AE0((uint64_t *)a1);
    int v2 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v6 = 0;
    id v3 = "#nimd,switched motion detector type to MotionActivity";
    double v4 = (uint8_t *)&v6;
  }
  else
  {
    int v2 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v5 = 0;
    id v3 = "#nimd,trying to switch to motion detector type MotionActivity which is current motion detector type";
    double v4 = (uint8_t *)&v5;
  }
  _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
}

uint64_t sub_1001F18E0(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  uint64_t v14 = 0;
  BOOL v15 = (float *)&v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 2139095039;
  double v2 = sub_10039CC9C();
  id v3 = *(void **)(a1 + 280);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001F1A60;
  void v13[3] = &unk_1008592E8;
  *(double *)&v13[5] = v2;
  v13[4] = &v14;
  [v3 enumerateKeysAndObjectsUsingBlock:v13];
  float v4 = v15[6];
  uint64_t v9 = 0;
  unint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  __int16 v5 = *(void **)(a1 + 288);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001F1B08;
  void v8[3] = &unk_100859310;
  void v8[4] = &v9;
  [v5 enumerateKeysAndObjectsUsingBlock:v8];
  if (v4 <= 1.0) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *((unsigned __int8 *)v10 + 24);
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v14, 8);
  return v6;
}

void sub_1001F1A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1001F1A60(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  double v5 = *(double *)(a1 + 40);
  id v9 = v4;
  [v4 timestamp];
  if (v5 - v6 < 2.0)
  {
    [v9 distance];
    if (v7 < *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      [v9 distance];
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v8;
    }
  }
}

void sub_1001F1AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1001F1B08(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 BOOLValue];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1001F1B4C(uint64_t *a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)a1[8]);
  if (!*((unsigned char *)a1 + 16) && !a1[34])
  {
    dispatch_source_t v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)a1[8]);
    id v3 = (void *)a1[34];
    a1[34] = (uint64_t)v2;

    id v4 = a1[34];
    dispatch_time_t v5 = dispatch_time(0, llround(3.5e10));
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    uint64_t v6 = *a1;
    float v7 = (std::__shared_weak_count *)a1[1];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = a1[34];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3321888768;
    handler[2] = sub_1001F22BC;
    handler[3] = &unk_1008593F0;
    handler[4] = a1;
    void handler[5] = v6;
    unint64_t v10 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_source_set_event_handler(v8, handler);
    dispatch_resume((dispatch_object_t)a1[34]);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1001F1C7C(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    id v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      dispatch_time_t v5 = v4;
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6) {
        sub_1001F1250(v6, v7);
      }
      sub_10001A970(v5);
    }
  }
}

void sub_1001F1CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  sub_10001A970(v10);

  _Unwind_Resume(a1);
}

uint64_t sub_1001F1D08(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1001F1D24(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1001F1D34(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
  {
    id v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = *(void *)(a1 + 32);
      if (v9) {
        sub_1001F145C(v9, v10);
      }
      sub_10001A970(v8);
    }
  }
}

void sub_1001F1DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  sub_10001A970(v11);

  _Unwind_Resume(a1);
}

void sub_1001F1DDC(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = a1[2];
  a1[5] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_8:
  id v7 = (void **)a1[7];
  uint64_t v8 = a1[8];
  a1[11] = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = a1[8];
      id v7 = (void **)(a1[7] + 8);
      a1[7] = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 256;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v11 = 512;
  }
  a1[10] = v11;
LABEL_15:
  char v12 = (void **)a1[13];
  uint64_t v13 = a1[14];
  a1[17] = 0;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = a1[14];
      char v12 = (void **)(a1[13] + 8);
      a1[13] = v12;
      unint64_t v14 = v15 - (void)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 256;
  }
  else
  {
    if (v14 >> 3 != 2) {
      return;
    }
    uint64_t v16 = 512;
  }
  a1[16] = v16;
}

void sub_1001F1F04(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5 && *(_DWORD *)(a1 + 48) == *(_DWORD *)(v5 + 24) && *(void *)(v5 + 56))
      {
        sub_1001F2074(v5 + 32, *(_DWORD *)(v5 + 20));
        uint64_t v6 = (id)qword_1008ABDE0;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_100004950(__p, (&off_100859448)[*(int *)(v5 + 20)]);
          if (v10 >= 0) {
            id v7 = __p;
          }
          else {
            id v7 = (void **)__p[0];
          }
          int v8 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)long long buf = 136315394;
          char v12 = v7;
          __int16 v13 = 1024;
          int v14 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nimd,delivered motion state %s with motion event id %u", buf, 0x12u);
          if (v10 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      sub_10001A970(v4);
    }
  }
}

void sub_1001F204C(_Unwind_Exception *a1)
{
  sub_10001A970(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F2074(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1001F20C8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 40) && *(unsigned char *)(v3 + 17) && !*(unsigned char *)(v3 + 16))
      {
        uint64_t v6 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v7 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nimd,stale measurement timer fires", v7, 2u);
        }
        sub_1001F219C(v3, *(double *)(a1 + 56));
        sub_1001F0878(v3);
      }
      sub_10001A970(v5);
    }
  }
}

void sub_1001F2188(_Unwind_Exception *a1)
{
  sub_10001A970(v1);
  _Unwind_Resume(a1);
}

void sub_1001F219C(uint64_t a1, double a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 64));
  double v4 = sub_10039CC9C();
  uint64_t v5 = +[NSMutableArray array];
  uint64_t v6 = *(void **)(a1 + 280);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001F23A8;
  void v8[3] = &unk_100859428;
  double v10 = v4;
  double v11 = a2;
  id v7 = v5;
  id v9 = v7;
  [v6 enumerateKeysAndObjectsUsingBlock:v8];
  [*(id *)(a1 + 280) removeObjectsForKeys:v7];
}

void sub_1001F2274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001F2290(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1001F22AC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1001F22BC(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    double v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        if (!*(unsigned char *)(v3 + 16) && *(unsigned char *)(v3 + 17) && !sub_1001F18E0(v3))
        {
          id v7 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v8 = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nimd,switching to motion activity detector timer fires", v8, 2u);
          }
          sub_1001F1814(v3);
        }
        dispatch_source_cancel(*(dispatch_source_t *)(v3 + 272));
        uint64_t v6 = *(void **)(v3 + 272);
        *(void *)(v3 + 272) = 0;
      }
      sub_10001A970(v5);
    }
  }
}

void sub_1001F2394(_Unwind_Exception *a1)
{
  sub_10001A970(v1);
  _Unwind_Resume(a1);
}

void sub_1001F23A8(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  double v6 = *(double *)(a1 + 40);
  [v5 timestamp];
  if (v6 - v7 > *(double *)(a1 + 48)) {
    [*(id *)(a1 + 32) addObject:v8];
  }
}

void sub_1001F2428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double sub_1001F2440(void *a1, double *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1001F2B30(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  double result = *a2;
  *(double *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

double sub_1001F24C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a2[5];
  if (a3[5] != v4) {
    sub_10041D29C();
  }
  if (a4[5] != v4) {
    sub_10041D270();
  }
  if (!v4) {
    return 0.0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a2[1];
  uint64_t v7 = a3[1];
  uint64_t v8 = a4[1];
  uint64_t v23 = a4[4];
  uint64_t v24 = a3[4];
  unint64_t v9 = v23 + 1;
  unint64_t v10 = v24 + 1;
  uint64_t v25 = a2[4];
  unint64_t v26 = a2[5];
  unint64_t v11 = v25 + 1;
  double v12 = 0.0;
  uint64_t v13 = 1;
  do
  {
    uint64_t v27 = v5 + 1;
    unint64_t v28 = v9;
    if (v4 > v5 + 1)
    {
      double v14 = *(double *)(*(void *)(v6 + (((unint64_t)(v25 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v25 + v5) & 0x1FF));
      double v15 = *(double *)(*(void *)(v7 + (((unint64_t)(v24 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v24 + v5) & 0x1FF));
      double v16 = *(double *)(*(void *)(v8 + (((unint64_t)(v23 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v23 + v5) & 0x1FF));
      unint64_t v17 = v11;
      unint64_t v18 = v10;
      do
      {
        v30[0] = v14;
        v30[1] = v15;
        double v19 = *(double *)(*(void *)(v6 + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF));
        v30[2] = v16;
        double v20 = *(double *)(*(void *)(v7 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF));
        v29[0] = v19;
        v29[1] = v20;
        v29[2] = *(double *)(*(void *)(v8 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF));
        double v21 = sub_1001F2690(a1, v30, v29);
        if (v21 > v12) {
          double v12 = v21;
        }
        ++v9;
        ++v18;
        ++v17;
        --v4;
      }
      while (v13 != v4);
    }
    ++v13;
    unint64_t v9 = v28 + 1;
    ++v10;
    ++v11;
    uint64_t v5 = v27;
    unint64_t v4 = v26;
  }
  while (v27 != v26);
  return v12;
}

long double sub_1001F2690(uint64_t a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  double v6 = sqrt(v4 * v4 + v3 * v3 + v5 * v5);
  long double result = 0.0;
  if (v6 != 0.0)
  {
    double v8 = *a3;
    double v9 = a3[1];
    double v10 = a3[2];
    double v11 = sqrt(v9 * v9 + v8 * v8 + v10 * v10);
    if (v11 != 0.0)
    {
      double v12 = (v4 * v9 + v3 * v8 + v5 * v10) / v6 / v11;
      if (v12 <= 1.0)
      {
        if (v12 >= -1.0) {
          return acos(v12) / 3.14159265 * 180.0;
        }
        else {
          return 180.0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1001F2744(uint64_t a1, uint64_t a2)
{
  double v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      double v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 256;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_1001F27E8((void **)a1);
  uint64_t result = sub_1001F29A0(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001F27E8(void **a1)
{
  if (a1[5])
  {
    sub_1001F286C((uint64_t)a1, 0);
    sub_1001D14E8(a1, 0);
  }
  else
  {
    double v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      double v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_1001F28CC(a1);
}

uint64_t sub_1001F286C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void sub_1001F28CC(void **a1)
{
  double v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  int v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    double v10 = 0;
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)sub_100056BF0(v2, v6);
  uint64_t v8 = a1[1];
  uint64_t v5 = a1[2];
  double v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    double v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  double v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  double v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_1001F29A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_1001F28CC((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t sub_1001F2A10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1001F2AA8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001F2B30(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_100056BF0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      std::string v37 = &v34[8 * v36];
      std::string v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100151930((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      std::string v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        id v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)id v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100151A50(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1001F2DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001F2E48()
{
  if (qword_1008A44F8 != -1) {
    dispatch_once(&qword_1008A44F8, &stru_100859460);
  }
  if (byte_1008A44F0)
  {
    kdebug_trace();
  }
}

void sub_1001F2F0C(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  byte_1008A44F0 = [v1 BOOLForKey:@"LogAriadneSignposts"];
}

void sub_1001F2F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001F317C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F34D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F353C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F38AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001F3E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31)
{
  _Unwind_Resume(a1);
}

void sub_1001F3F0C()
{
}

void sub_1001F45BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F469C()
{
  *(void *)(v1 - 160) = v0;
  JUMPOUT(0x1001F468CLL);
}

void sub_1001F4C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  if (v16 != v19) {
  if (v15 != v18)
  }

  if (v14 != v17) {
  _Unwind_Resume(a1);
  }
}

void sub_1001F4D2C()
{
}

void sub_1001F4D34()
{
}

void sub_1001F4D3C()
{
}

void sub_1001F4D44()
{
}

void sub_1001F4D4C()
{
}

void sub_1001F4D54()
{
}

void sub_1001F4D5C()
{
}

void sub_1001F4D64()
{
}

void sub_1001F4D6C()
{
}

void sub_1001F4D74()
{
}

void sub_1001F4D7C()
{
}

void sub_1001F4D84()
{
}

void sub_1001F4D8C()
{
}

unint64_t sub_1001F4D94(__n128 a1)
{
  uint64_t v1 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  unint64_t v2 = (unint64_t)[v1 hash];
  HIDWORD(v3) = a1.n128_u32[1];
  LODWORD(v3) = a1.n128_u32[1];
  unint64_t v4 = +[NSNumber numberWithFloat:v3];
  unint64_t v5 = (unint64_t)[v4 hash];
  unint64_t v6 = +[NSNumber numberWithFloat:COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2]))];
  unint64_t v7 = v5 ^ v2 ^ (unint64_t)[v6 hash];

  return v7;
}

void sub_1001F4E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F5068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F55DC(_Unwind_Exception *a1)
{
  if (v3 != v4) {

  }
  _Unwind_Resume(a1);
}

void sub_1001F5710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F5A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F5BA4(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1001F5C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F5D60(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1001F5EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F5FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F6074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F6120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F6188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F629C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F63B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F648C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F661C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F6750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1001F6808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F6898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F690C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F69A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F6A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F6ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F6C1C(_Unwind_Exception *a1)
{
  unint64_t v5 = v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1001F6C68@<X0>(uint64_t a1@<X8>)
{
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  uint64_t result = sub_10039CC5C(&v4, (char *)&v4 + 8, &v5);
  if (result)
  {
    *(_OWORD *)a1 = v4;
    *(void *)(a1 + 16) = v5;
    char v3 = 1;
  }
  else
  {
    char v3 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 24) = v3;
  return result;
}

void sub_1001F6CD8()
{
}

void sub_1001F6CEC(_DWORD *a1, void *a2)
{
  id v3 = a2;
  *a1 = *((_DWORD *)sub_100007D00() + 144);
  sub_100004950(&__p, "regulatory,geo,sm");
  *(void *)long long buf = a1;
  operator new();
}

void sub_1001F72D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_10021EB80(v44);
  sub_1001FC0A8(a13);
  sub_1001FC2F0(a14, v51, v52, v53, v54, v55, v56, v57);
  sub_1001F7990(a15);

  if (*(char *)(v45 + 463) < 0) {
    operator delete(*v49);
  }

  sub_1000077C4((uint64_t *)(v45 + 408), 0, v58, v59, v60, v61, v62, v63);
  if (*(char *)(v45 + 399) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v45 + 375) < 0) {
    operator delete(*(void **)(v45 + 352));
  }
  if (*(char *)(v45 + 343) < 0) {
    operator delete(*(void **)(v45 + 320));
  }
  if (*(char *)(v45 + 319) < 0) {
    operator delete(*v48);
  }
  sub_1001FD680(v45 + 256);
  if (*(char *)(v45 + 239) < 0) {
    operator delete(*v47);
  }
  sub_10000AF74(a12);
  sub_1001FD578(a10);
  sub_1001FD5FC(v46);

  _Unwind_Resume(a1);
}

uint64_t sub_1001F74D0(uint64_t a1, int a2)
{
  if (a2 != 3) {
    return a2 == 2;
  }
  sub_1001F7BE8(a1);
  return 2;
}

uint64_t sub_1001F7508(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 3:
      return 2;
    case 2:
      sub_1001FB2C8(a1, (std::string *)(a1 + 296));
      break;
    case 0:
      sub_1001FB2C8(a1, (std::string *)(a1 + 296));
      sub_1001F7D38(a1);
      break;
  }
  return 1;
}

uint64_t sub_1001F7570(uint64_t a1, int a2)
{
  long long v4 = sub_100006A00();
  if ((byte_1008A4508 & 1) == 0)
  {
    uint64_t v5 = (uint64_t)v4;
    if (sub_1003CF190((uint64_t)v4, (_DWORD *)&qword_10089EDA0 + 1, &qword_10089EDA0))
    {
      if (!sub_1003CF2AC(v5, &dword_10089EDA8)) {
        dword_10089EDA8 = 35040;
      }
    }
    else
    {
      qword_10089EDA0 = 0x12C00000258;
    }
    unint64_t v6 = qword_1008A4500;
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
      sub_10041D580(v6);
    }
    byte_1008A4508 = 1;
  }
  uint64_t v7 = 2;
  switch(a2)
  {
    case 0:
      sub_1001FB3C8();
    case 1:
      sub_1001F7E8C(a1);
      sub_1001A1EE8((uint64_t **)(a1 + 8), 8);
      sub_1001A1EE8((uint64_t **)(a1 + 8), 9);
      sub_1001F7D38(a1);
      sub_1000077C4((uint64_t *)(a1 + 408), 0, v8, v9, v10, v11, v12, v13);
      return 2;
    case 2:
      goto LABEL_27;
    case 3:
      sub_1001FB2C8(a1, (std::string *)(a1 + 296));
      return v7;
    case 6:
      if (*(unsigned char *)(a1 + 432)) {
        return 3;
      }
      else {
        return 2;
      }
    case 7:
      sub_1001F7E8C(a1);
      *(_DWORD *)(a1 + 436) = dword_10089EDA8;
      sub_1001A1EE8((uint64_t **)(a1 + 8), 8);
      sub_1001A1EE8((uint64_t **)(a1 + 8), 9);
      sub_1001F7D38(a1);
      return 2;
    case 8:
      sub_1001F7E8C(a1);
      int v14 = *(_DWORD *)(a1 + 436);
      BOOL v15 = __OFSUB__(v14, 1);
      int v16 = v14 - 1;
      if (v16 < 0 == v15)
      {
        *(_DWORD *)(a1 + 436) = v16;
        uint64_t v17 = a1 + 8;
        double v18 = (double)(int)qword_10089EDA0;
        int v19 = 9;
        goto LABEL_30;
      }
      *(_DWORD *)(a1 + 436) = dword_10089EDA8;
      std::string::assign((std::string *)(a1 + 296), off_10089F790[0]);
LABEL_27:
      uint64_t v7 = 1;
      break;
    case 9:
      if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
        sub_10041D4F4();
      }
      sub_1001F7E14(a1);
      sub_1001FDC20(a1 + 8, 8, (double)SHIDWORD(qword_10089EDA0));
      return 2;
    case 10:
      if (*(unsigned char *)(a1 + 432))
      {
        *(_DWORD *)(a1 + 436) = dword_10089EDA8;
        if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
          sub_10041D488();
        }
      }
      else
      {
        sub_1001F7BE8(a1);
        if (*(unsigned char *)(a1 + 432))
        {
          sub_1001F7E14(a1);
          int v20 = HIDWORD(qword_10089EDA0);
          *(_DWORD *)(a1 + 436) = dword_10089EDA8;
          uint64_t v17 = a1 + 8;
          double v18 = (double)v20;
          int v19 = 8;
LABEL_30:
          sub_1001FDC20(v17, v19, v18);
        }
      }
      break;
    default:
      return v7;
  }
  return v7;
}

uint64_t sub_1001F785C(uint64_t a1, int a2)
{
  sub_100006A00();
  int v11 = 31536000;
  uint64_t result = 3;
  switch(a2)
  {
    case 0:
      sub_1001FB3C8();
    case 1:
      sub_1001A1EE8((uint64_t **)(a1 + 8), 4);
      sub_1000077C4((uint64_t *)(a1 + 408), 0, v5, v6, v7, v8, v9, v10);
      return 3;
    case 2:
      goto LABEL_5;
    case 4:
      std::string::assign((std::string *)(a1 + 296), off_10089F790[0]);
LABEL_5:
      uint64_t result = 1;
      break;
    case 5:
      sub_1001F7BE8(a1);
      uint64_t result = 2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F7990(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001F79FC(uint64_t a1)
{
  unint64_t v2 = *(NSObject **)(a1 + 424);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F7B7C;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_sync(v2, block);
  sub_10021EB80(a1 + 1736);
  sub_1001FC0A8(a1 + 1040);
  sub_1001FC2F0(a1 + 632, v3, v4, v5, v6, v7, v8, v9);
  sub_1001FC4AC(a1 + 600, *(char **)(a1 + 608));
  sub_1001FC510(a1 + 568, *(void **)(a1 + 576));
  sub_1001FC5C4((void *)(a1 + 536));
  sub_1001FC648(a1 + 512, *(char **)(a1 + 520));

  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }

  sub_1000077C4((uint64_t *)(a1 + 408), 0, v10, v11, v12, v13, v14, v15);
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*(void **)(a1 + 320));
  }
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  sub_1001FD680(a1 + 256);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  sub_10000AF74((void *)(a1 + 184));
  sub_1001FD578((void *)(a1 + 152));
  sub_1001FD5FC(a1 + 8);
  return a1;
}

void sub_1001F7B7C(uint64_t a1)
{
}

void sub_1001F7B84(uint64_t a1)
{
  unint64_t v2 = *(NSObject **)(a1 + 464);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(void **)(a1 + 464);
    *(void *)(a1 + 464) = 0;
  }
}

void sub_1001F7BD8(uint64_t a1)
{
}

void sub_1001F7BE0(uint64_t a1)
{
}

void sub_1001F7BE8(uint64_t a1)
{
  uint64_t v2 = a1 + 216;
  if (!sub_100007FA8(a1 + 216))
  {
    *(unsigned char *)(a1 + 432) = 1;
    uint64_t v3 = (id)qword_1008A4500;
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_16;
    }
    if (*(char *)(a1 + 239) < 0)
    {
      uint64_t v2 = *(void *)(a1 + 216);
      if (*(void *)(a1 + 224)) {
        goto LABEL_9;
      }
    }
    else if (*(unsigned char *)(a1 + 239))
    {
LABEL_9:
      double v5 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
LABEL_15:
      sub_10041D6C8(v2, (uint64_t)v6, *(uint64_t *)&v5);
      goto LABEL_16;
    }
    double v5 = 0.0;
    goto LABEL_15;
  }
  uint64_t v3 = (id)qword_1008A4500;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 239) < 0)
    {
      uint64_t v2 = *(void *)(a1 + 216);
      if (*(void *)(a1 + 224)) {
        goto LABEL_5;
      }
    }
    else if (*(unsigned char *)(a1 + 239))
    {
LABEL_5:
      double v4 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
LABEL_12:
      sub_10041D68C(v2, (uint64_t)v6, *(uint64_t *)&v4);
      goto LABEL_16;
    }
    double v4 = 0.0;
    goto LABEL_12;
  }
LABEL_16:
}

void sub_1001F7D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F7D38(uint64_t a1)
{
  uint64_t v2 = (id)qword_1008A4500;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 239) < 0)
    {
      uint64_t v3 = *(void *)(a1 + 216);
      if (*(void *)(a1 + 224)) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v3 = a1 + 216;
      if (*(unsigned char *)(a1 + 239))
      {
LABEL_4:
        double v4 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
LABEL_7:
        sub_10041D704(v3, (uint64_t)&v5, *(uint64_t *)&v4);
        goto LABEL_8;
      }
    }
    double v4 = 0.0;
    goto LABEL_7;
  }
LABEL_8:

  *(unsigned char *)(a1 + 432) = 0;
}

void sub_1001F7DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001F7E14(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 432);
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v3) {
      sub_10041D774();
    }
    sub_1002CF58C((NSObject **)(a1 + 632));
    *(unsigned char *)(a1 + 433) = 1;
  }
  else if (v3)
  {
    sub_10041D740();
  }
}

uint64_t sub_1001F7E8C(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
    sub_10041D7A8();
  }
  uint64_t result = sub_1002CF644((NSObject **)(a1 + 632));
  *(unsigned char *)(a1 + 433) = 0;
  return result;
}

uint64_t sub_1001F7EDC(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_ERROR)) {
      sub_10041D7DC();
    }
    goto LABEL_10;
  }
  sub_1001F7B84(a1);
  dispatch_source_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 424));
  uint64_t v7 = *(void **)(a1 + 464);
  *(void *)(a1 + 464) = v6;

  uint64_t v8 = *(NSObject **)(a1 + 464);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_ERROR)) {
      sub_10041D810();
    }
LABEL_10:
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  dispatch_time_t v9 = dispatch_time(0, 1000000000 * a3);
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v10 = *(NSObject **)(a1 + 464);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001F806C;
  void v13[3] = &unk_100859538;
  uint64_t v15 = a1;
  id v14 = v5;
  dispatch_source_set_event_handler(v10, v13);
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
    sub_10041D844();
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 464));

  uint64_t v11 = 1;
LABEL_11:

  return v11;
}

uint64_t sub_1001F806C(uint64_t a1)
{
  sub_1001F7B84(*(void *)(a1 + 40));
  int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v2();
}

uint64_t sub_1001F80B0(uint64_t a1)
{
  int v2 = sub_1002F1FCC(a1 + 480);
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG))
  {
    sub_10041D918();
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v4 = 0;
    goto LABEL_12;
  }
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  if (sub_100005424(*(_DWORD *)a1))
  {
    sub_10021EF54(a1 + 1736);
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
      sub_10041D8E4();
    }
    if (sub_10039CFF8(*(_DWORD *)a1))
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      _OWORD v6[2] = sub_1001F828C;
      v6[3] = &unk_1008466D8;
      void v6[4] = a1;
      BOOL v3 = objc_retainBlock(v6);
      sub_1001F7EDC(a1, v3, 0x168u);
    }
  }
  else
  {
    sub_10039CFF8(*(_DWORD *)a1);
  }
  uint64_t v4 = sub_1002CF4D4((NSObject **)(a1 + 632));
LABEL_12:
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
    sub_10041D878();
  }
  return v4;
}

uint64_t sub_1001F8208(uint64_t a1)
{
  uint64_t v1 = (char *)(a1 + 376);
  int v2 = (char *)(a1 + 399);
  if (*(char *)(a1 + 399) < 0)
  {
    **(unsigned char **)(a1 + 376) = 0;
    *(void *)(a1 + 384) = 0;
  }
  else
  {
    *uint64_t v1 = 0;
    *int v2 = 0;
  }
  BOOL v3 = qword_1008A4500;
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
    sub_10041D984(v2, v1, v3);
  }
  uint64_t v4 = sub_100006A00();
  return sub_1003CED38((uint64_t)v4, v1);
}

void sub_1001F828C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int16 v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  char v19 = -1;
  __int16 v13 = 0;
  long long v12 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  char v14 = -1;
  int v2 = sub_100006A00();
  int v7 = 0;
  int v20 = &v7;
  BOOL v3 = sub_1001FD708(v1 + 256, &v7, (uint64_t)&unk_1004BC2F8, &v20);
  if (v3[55] < 0)
  {
    sub_100002DE4(__p, *((void **)v3 + 4), *((void *)v3 + 5));
  }
  else
  {
    *(_OWORD *)std::string __p = *((_OWORD *)v3 + 2);
    uint64_t v9 = *((void *)v3 + 6);
  }
  sub_100003274((uint64_t)v2, (uint64_t)__p, (std::string *)&v15);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = sub_100006A00();
  if (*(char *)(v1 + 463) < 0)
  {
    sub_100002DE4(__dst, *(void **)(v1 + 440), *(void *)(v1 + 448));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(v1 + 440);
    uint64_t v6 = *(void *)(v1 + 456);
  }
  sub_100003274((uint64_t)v4, (uint64_t)__dst, (std::string *)v10);
  if (SHIBYTE(v6) < 0) {
    operator delete(__dst[0]);
  }
  AnalyticsSendEventLazy();
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[1]);
  }
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(*((void **)&v16 + 1));
  }
  if (SBYTE7(v16) < 0) {
    operator delete((void *)v15);
  }
}

void sub_1001F8468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1001F8580((uint64_t)&a29);
  sub_1001F8580(v29 - 112);
  _Unwind_Resume(a1);
}

id sub_1001F84B4(uint64_t a1)
{
  CFStringRef v4 = @"ISOSources";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  id v5 = v1;
  int v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

void sub_1001F8568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001F8580(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1001F85C4(int *a1@<X0>, BOOL *a2@<X1>, BOOL *a3@<X2>, std::string *a4@<X8>)
{
  int v7 = sub_100006A00();
  __int16 v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  char v47 = -1;
  __int16 v41 = 0;
  *(_OWORD *)uint64_t v39 = 0u;
  long long v40 = 0u;
  *(_OWORD *)std::string v38 = 0u;
  char v42 = -1;
  __int16 v36 = 0;
  *(_OWORD *)long long v34 = 0u;
  long long v35 = 0u;
  *(_OWORD *)unint64_t v33 = 0u;
  char v37 = -1;
  uint64_t v8 = (uint64_t)(a1 + 64);
  int v32 = 0;
  v48[0] = &v32;
  uint64_t v9 = sub_1001FD708((uint64_t)(a1 + 64), &v32, (uint64_t)&unk_1004BC2F8, v48);
  uint64_t v24 = a1;
  uint64_t v10 = a3;
  int v32 = 2;
  v48[0] = &v32;
  uint64_t v11 = sub_1001FD708(v8, &v32, (uint64_t)&unk_1004BC2F8, v48);
  int v32 = 3;
  v48[0] = &v32;
  long long v12 = sub_1001FD708(v8, &v32, (uint64_t)&unk_1004BC2F8, v48);
  __int16 v13 = v9 + 32;
  if (v9[55] < 0)
  {
    sub_100002DE4(__p, *((void **)v9 + 4), *((void *)v9 + 5));
  }
  else
  {
    *(_OWORD *)std::string __p = *v13;
    uint64_t v31 = *((void *)v9 + 6);
  }
  BOOL v14 = sub_100003274((uint64_t)v7, (uint64_t)__p, (std::string *)&v43);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (v11[55] < 0)
  {
    sub_100002DE4(__dst, *((void **)v11 + 4), *((void *)v11 + 5));
  }
  else
  {
    *(_OWORD *)long long __dst = *((_OWORD *)v11 + 2);
    uint64_t v29 = *((void *)v11 + 6);
  }
  BOOL v15 = sub_100003274((uint64_t)v7, (uint64_t)__dst, (std::string *)v38);
  if (SHIBYTE(v29) < 0) {
    operator delete(__dst[0]);
  }
  if (v12[55] < 0)
  {
    sub_100002DE4(v26, *((void **)v12 + 4), *((void *)v12 + 5));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *((_OWORD *)v12 + 2);
    uint64_t v27 = *((void *)v12 + 6);
  }
  BOOL v16 = sub_100003274((uint64_t)v7, (uint64_t)v26, (std::string *)v33);
  if (SHIBYTE(v27) < 0)
  {
    operator delete(v26[0]);
    if (v14)
    {
LABEL_16:
      *a2 = 1;
      int v32 = 0;
      v48[0] = &v32;
      long long v17 = sub_1001FD708(v8, &v32, (uint64_t)&unk_1004BC2F8, v48);
      BOOL v18 = sub_1001F8A10((uint64_t)(v17 + 24));
      if (!v15) {
        goto LABEL_17;
      }
      goto LABEL_22;
    }
  }
  else if (v14)
  {
    goto LABEL_16;
  }
  BOOL v18 = 0;
  *a2 = v15 || v16;
  if (!v15)
  {
LABEL_17:
    BOOL v19 = 0;
    if (v16) {
      goto LABEL_18;
    }
LABEL_23:
    BOOL v21 = 0;
    if (v18) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
LABEL_22:
  int v32 = 2;
  v48[0] = &v32;
  unint64_t v22 = sub_1001FD708(v8, &v32, (uint64_t)&unk_1004BC2F8, v48);
  BOOL v19 = sub_1001F8A10((uint64_t)(v22 + 24));
  if (!v16) {
    goto LABEL_23;
  }
LABEL_18:
  int v32 = 3;
  v48[0] = &v32;
  int v20 = sub_1001FD708(v8, &v32, (uint64_t)&unk_1004BC2F8, v48);
  BOOL v21 = sub_1001F8A10((uint64_t)(v20 + 24));
  if (v18)
  {
LABEL_19:
    BOOL *v10 = 1;
    goto LABEL_27;
  }
LABEL_24:
  BOOL *v10 = v19 || v21;
  if (v15 || v16)
  {
    sub_1001F8A8C(v24, a2, v10, a4);
    goto LABEL_31;
  }
  if (!v14)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_31;
  }
LABEL_27:
  if (v9[55] < 0)
  {
    sub_100002DE4(a4, *((void **)v9 + 4), *((void *)v9 + 5));
  }
  else
  {
    long long v23 = *v13;
    a4->__r_.__value_.__r.__words[2] = *((void *)v9 + 6);
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v23;
  }
LABEL_31:
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
  if (SHIBYTE(v34[0]) < 0) {
    operator delete(v33[0]);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[1]);
  }
  if (SHIBYTE(v39[0]) < 0) {
    operator delete(v38[0]);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(*((void **)&v44 + 1));
  }
  if (SBYTE7(v44) < 0) {
    operator delete((void *)v43);
  }
}

void sub_1001F8988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_1001F8580((uint64_t)&a32);
  sub_1001F8580((uint64_t)&a40);
  sub_1001F8580(v40 - 160);
  _Unwind_Resume(a1);
}

BOOL sub_1001F8A10(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    BOOL v3 = v2 == 0;
  }
  else
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
    BOOL v3 = v2 == 0;
  }
  char v4 = v3;
  if (v2)
  {
    double v5 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 32);
    if (v4) {
      return 0;
    }
  }
  else
  {
    double v5 = 0.0;
    if (v4) {
      return 0;
    }
  }
  return v5 < *(double *)&qword_10089ECA8 || *(unsigned char *)a1 == 0;
}

void sub_1001F8A8C(int *a1@<X0>, BOOL *a2@<X1>, unsigned char *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  uint64_t v8 = sub_100006A00();
  __int16 v55 = 0;
  *(_OWORD *)uint64_t v53 = 0u;
  long long v54 = 0u;
  *(_OWORD *)uint64_t v52 = 0u;
  char v56 = -1;
  __int16 v50 = 0;
  *(_OWORD *)unint64_t v48 = 0u;
  long long v49 = 0u;
  *(_OWORD *)char v47 = 0u;
  char v51 = -1;
  unint64_t v46 = 0;
  if (sub_100005424(*a1))
  {
    int v9 = 0;
    int v10 = 1;
    goto LABEL_5;
  }
  if (sub_10039CF54(*a1))
  {
    int v10 = 3;
    int v9 = 2;
LABEL_5:
    unint64_t v46 = __PAIR64__(v9, v10);
    uint64_t v11 = (uint64_t)(a1 + 64);
    *(void *)long long buf = (char *)&v46 + 4;
    long long v12 = sub_1001FD9C4((uint64_t)(a1 + 64), (int *)&v46 + 1, (uint64_t)&unk_1004BC2F8, (_DWORD **)buf);
    *(void *)long long buf = &v46;
    __int16 v13 = sub_1001FD9C4(v11, (int *)&v46, (uint64_t)&unk_1004BC2F8, (_DWORD **)buf);
    __int16 v41 = (char **)(v12 + 32);
    if (v12[55] < 0)
    {
      sub_100002DE4(__p, *((void **)v12 + 4), *((void *)v12 + 5));
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)v12 + 2);
      uint64_t v45 = *((void *)v12 + 6);
    }
    BOOL v14 = sub_100003274((uint64_t)v8, (uint64_t)__p, (std::string *)v52);
    BOOL v15 = v13 + 32;
    if (SHIBYTE(v45) < 0) {
      operator delete(__p[0]);
    }
    if (v13[55] < 0)
    {
      sub_100002DE4(__dst, *((void **)v13 + 4), *((void *)v13 + 5));
    }
    else
    {
      *(_OWORD *)long long __dst = *v15;
      uint64_t v43 = *((void *)v13 + 6);
    }
    BOOL v16 = sub_100003274((uint64_t)v8, (uint64_t)__dst, (std::string *)v47);
    if (SHIBYTE(v43) < 0) {
      operator delete(__dst[0]);
    }
    *a2 = v14 || v16;
    if (v14)
    {
      *(void *)long long buf = (char *)&v46 + 4;
      long long v17 = sub_1001FD9C4(v11, (int *)&v46 + 1, (uint64_t)&unk_1004BC2F8, (_DWORD **)buf);
      int v18 = sub_1001F8A10((uint64_t)(v17 + 24));
      if (!v16)
      {
LABEL_17:
        int v19 = 0;
LABEL_20:
        *a3 = v18 | v19;
        BOOL v21 = (id)qword_1008A4500;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          long long v30 = v12 + 32;
          if (v12[55] < 0) {
            long long v30 = *v41;
          }
          uint64_t v39 = v30;
          uint64_t v57 = (unint64_t *)((char *)&v46 + 4);
          uint64_t v31 = sub_1001FD9C4(v11, (int *)&v46 + 1, (uint64_t)&unk_1004BC2F8, (_DWORD **)&v57);
          if (v31[55] < 0) {
            uint64_t v32 = *((void *)v31 + 5);
          }
          else {
            uint64_t v32 = v31[55];
          }
          double v35 = 0.0;
          if (v32) {
            double v35 = CFAbsoluteTimeGetCurrent() - *((double *)v31 + 7);
          }
          uint64_t v57 = (unint64_t *)((char *)&v46 + 4);
          BOOL v36 = sub_1001FD9C4(v11, (int *)&v46 + 1, (uint64_t)&unk_1004BC2F8, (_DWORD **)&v57)[24] == 0;
          *(_DWORD *)long long buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v14;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v39;
          __int16 v59 = 2048;
          double v60 = v35;
          __int16 v61 = 1024;
          BOOL v62 = v36;
          __int16 v63 = 1024;
          int v64 = v18;
          _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,refreshCurrentGeoArea,candidate,mcc1Iso,valid:%d,value:%s,age:%.2f,current:%d,recent:%d", buf, 0x28u);
        }

        unint64_t v22 = (id)qword_1008A4500;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          if (v13[55] < 0) {
            uint64_t v40 = *(char **)v15;
          }
          else {
            uint64_t v40 = v13 + 32;
          }
          uint64_t v57 = &v46;
          unint64_t v33 = sub_1001FD9C4(v11, (int *)&v46, (uint64_t)&unk_1004BC2F8, (_DWORD **)&v57);
          if (v33[55] < 0) {
            uint64_t v34 = *((void *)v33 + 5);
          }
          else {
            uint64_t v34 = v33[55];
          }
          double v37 = 0.0;
          if (v34) {
            double v37 = CFAbsoluteTimeGetCurrent() - *((double *)v33 + 7);
          }
          uint64_t v57 = &v46;
          BOOL v38 = sub_1001FD9C4(v11, (int *)&v46, (uint64_t)&unk_1004BC2F8, (_DWORD **)&v57)[24] == 0;
          *(_DWORD *)long long buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v40;
          __int16 v59 = 2048;
          double v60 = v37;
          __int16 v61 = 1024;
          BOOL v62 = v38;
          __int16 v63 = 1024;
          int v64 = v19;
          _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,refreshCurrentGeoArea,candidate,mcc2Iso,valid:%d,value:%s,age:%.2f,current:%d,recent:%d", buf, 0x28u);
        }

        if (v14 && v16)
        {
          if (v18 == v19)
          {
            if (HIBYTE(v55)) {
              unsigned int v25 = (_BYTE)v55 == 0;
            }
            else {
              unsigned int v25 = ((_BYTE)v55 == 0) + 1;
            }
            if (HIBYTE(v50)) {
              unsigned int v26 = (_BYTE)v50 == 0;
            }
            else {
              unsigned int v26 = ((_BYTE)v50 == 0) + 1;
            }
            uint64_t v27 = v12 + 32;
            if (v25 <= v26) {
              uint64_t v28 = (const std::string *)(v13 + 32);
            }
            else {
              uint64_t v28 = (const std::string *)(v12 + 32);
            }
            std::string::operator=(a4, v28);
            uint64_t v29 = qword_1008A4500;
            if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG))
            {
              if (v12[55] < 0) {
                uint64_t v27 = *v41;
              }
              *(_DWORD *)long long buf = 136315650;
              *(void *)&uint8_t buf[4] = v27;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v25;
              __int16 v59 = 1024;
              LODWORD(v60) = v26;
              _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,refreshCurrentGeoArea,bestMccCandidate:%s,reason,restrictionCount,mcc1Count:%d,mcc2Count:%d,chosen", buf, 0x18u);
            }
          }
          else
          {
            if (v18) {
              long long v23 = (const std::string *)(v12 + 32);
            }
            else {
              long long v23 = (const std::string *)(v13 + 32);
            }
            std::string::operator=(a4, v23);
            if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
              sub_10041DA04();
            }
          }
        }
        else
        {
          if (v14) {
            uint64_t v24 = (const std::string *)(v12 + 32);
          }
          else {
            uint64_t v24 = (const std::string *)(v13 + 32);
          }
          std::string::operator=(a4, v24);
          if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
            sub_10041DA70();
          }
        }
        goto LABEL_46;
      }
    }
    else
    {
      int v18 = 0;
      if (!v16) {
        goto LABEL_17;
      }
    }
    *(void *)long long buf = &v46;
    int v20 = sub_1001FD9C4(v11, (int *)&v46, (uint64_t)&unk_1004BC2F8, (_DWORD **)buf);
    int v19 = sub_1001F8A10((uint64_t)(v20 + 24));
    goto LABEL_20;
  }
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_FAULT)) {
    sub_10041DADC();
  }
LABEL_46:
  if (SHIBYTE(v49) < 0) {
    operator delete(v48[1]);
  }
  if (SHIBYTE(v48[0]) < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(v53[1]);
  }
  if (SHIBYTE(v53[0]) < 0) {
    operator delete(v52[0]);
  }
}

void sub_1001F90F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_1001F8580((uint64_t)&a27);
  sub_1001F8580((uint64_t)&a35);
  if (*(char *)(v35 + 23) < 0) {
    operator delete(*(void **)v35);
  }
  _Unwind_Resume(a1);
}

void sub_1001F9174(uint64_t a1@<X0>, BOOL *a2@<X1>, BOOL *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  uint64_t v8 = sub_100006A00();
  __int16 v33 = 0;
  *(_OWORD *)uint64_t v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)long long v30 = 0u;
  char v34 = -1;
  __int16 v28 = 0;
  *(_OWORD *)unsigned int v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)unsigned int v25 = 0u;
  char v29 = -1;
  int v24 = 0;
  *(void *)long long buf = &v24;
  int v9 = sub_1001FD708(a1 + 256, &v24, (uint64_t)&unk_1004BC2F8, (_DWORD **)buf);
  int v10 = v9;
  uint64_t v11 = (const std::string *)(v9 + 32);
  if (v9[55] < 0)
  {
    sub_100002DE4(__p, *((void **)v9 + 4), *((void *)v9 + 5));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    uint64_t v23 = *((void *)v9 + 6);
  }
  BOOL v12 = sub_100003274((uint64_t)v8, (uint64_t)__p, (std::string *)v30);
  __int16 v13 = (_OWORD *)(a1 + 440);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a1 + 463) < 0)
  {
    sub_100002DE4(v20, *(void **)(a1 + 440), *(void *)(a1 + 448));
  }
  else
  {
    *(_OWORD *)int v20 = *v13;
    uint64_t v21 = *(void *)(a1 + 456);
  }
  BOOL v14 = sub_100003274((uint64_t)v8, (uint64_t)v20, (std::string *)v25);
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  *a2 = v12 || v14;
  *a3 = v12 || v14;
  BOOL v15 = qword_1008A4500;
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG))
  {
    if (v10[55] < 0) {
      int v18 = (const std::string *)v11->__r_.__value_.__r.__words[0];
    }
    else {
      int v18 = v11;
    }
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v12;
    __int16 v36 = 2080;
    double v37 = v18;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "geo,monitor,MccForHomepod,chooseBestMccForHomepod,candidate,mcc1Iso,valid:%d,value:%s", buf, 0x12u);
  }
  BOOL v16 = qword_1008A4500;
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 463) < 0) {
      int v19 = *(const std::string **)v13;
    }
    else {
      int v19 = (const std::string *)(a1 + 440);
    }
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v14;
    __int16 v36 = 2080;
    double v37 = v19;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "geo,monitor,MccForHomepod,chooseBestMccForHomepod,candidate,mcc2Iso,valid:%d,value:%s", buf, 0x12u);
  }
  if (v12) {
    long long v17 = v11;
  }
  else {
    long long v17 = (const std::string *)(a1 + 440);
  }
  std::string::operator=(a4, v17);
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
    sub_10041DB1C();
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[1]);
  }
  if (SHIBYTE(v26[0]) < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[1]);
  }
  if (SHIBYTE(v31[0]) < 0) {
    operator delete(v30[0]);
  }
}

void sub_1001F9454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1001F94B8(uint64_t a1)
{
  memset(&__str, 0, sizeof(__str));
  sub_100004950(&v57, "none");
  __int16 v56 = 0;
  memset(&__p, 0, sizeof(__p));
  if (sub_10039CF88(*(_DWORD *)a1))
  {
    sub_1001F85C4((int *)a1, (BOOL *)&v56 + 1, (BOOL *)&v56, &buf);
  }
  else if (sub_10039CFF8(*(_DWORD *)a1))
  {
    sub_1001F9174(a1, (BOOL *)&v56 + 1, (BOOL *)&v56, &buf);
  }
  else
  {
    sub_1001F8A8C((int *)a1, (BOOL *)&v56 + 1, &v56, &buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = buf;
  uint64_t v2 = (std::string *)(a1 + 216);
  if (sub_100007FA8(a1 + 216)) {
    sub_1001F9E98(a1);
  }
  BOOL v3 = sub_100006A00();
  char v4 = (const std::string *)(a1 + 376);
  uint64_t v52 = a1;
  if (!sub_1003CED40((uint64_t)v3, (std::string *)(a1 + 376)))
  {
    double v5 = (id)qword_1008A4500;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10041DB88();
    }
  }
  if (*(unsigned char *)(a1 + 434) == 1)
  {
    std::string::operator=(&__str, v4);
    uint64_t v6 = "lastStoredBeforeAirplaneMode";
LABEL_18:
    std::string::assign(&v57, v6);
    int v51 = 1;
    goto LABEL_19;
  }
  if ((_BYTE)v56)
  {
    std::string::operator=(&__str, &__p);
    uint64_t v6 = "currentMcc";
    goto LABEL_18;
  }
  if (sub_100007FA8((uint64_t)v2) && sub_1001F9EF0(v2))
  {
    std::string::operator=(&__str, v2);
    uint64_t v6 = "recentLocation";
    goto LABEL_18;
  }
  if (*(char *)(a1 + 399) < 0)
  {
    if (*(void *)(a1 + 384)) {
      goto LABEL_64;
    }
  }
  else if (*(unsigned char *)(a1 + 399))
  {
LABEL_64:
    std::string::operator=(&__str, v4);
    uint64_t v21 = "lastStored";
LABEL_160:
    std::string::assign(&v57, v21);
    goto LABEL_161;
  }
  if (HIBYTE(v56))
  {
    std::string::operator=(&__str, &__p);
    uint64_t v21 = "lastKnownMcc";
    goto LABEL_160;
  }
LABEL_161:
  int v51 = 0;
LABEL_19:
  int v7 = (const void **)(a1 + 296);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 319);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 319);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 304);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (v9 != size) {
    goto LABEL_54;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*v7, p_str, *(void *)(a1 + 304)))
    {
LABEL_54:
      int v18 = 1;
      goto LABEL_55;
    }
  }
  else if (*(unsigned char *)(a1 + 319))
  {
    BOOL v12 = (unsigned __int8 *)(a1 + 296);
    while (*v12 == p_str->__r_.__value_.__s.__data_[0])
    {
      ++v12;
      p_str = (std::string *)((char *)p_str + 1);
      if (!--v8) {
        goto LABEL_38;
      }
    }
    goto LABEL_54;
  }
LABEL_38:
  if (*(unsigned __int8 *)(a1 + 344) != v51 || !*(unsigned char *)(a1 + 345)) {
    goto LABEL_54;
  }
  uint64_t v13 = *(unsigned __int8 *)(a1 + 343);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = *(unsigned __int8 *)(a1 + 343);
  }
  else {
    uint64_t v14 = *(void *)(a1 + 328);
  }
  std::string::size_type v15 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = v57.__r_.__value_.__l.__size_;
  }
  if (v14 == v15)
  {
    BOOL v16 = (const void **)(a1 + 320);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v17 = &v57;
    }
    else {
      long long v17 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if ((v13 & 0x80) != 0)
    {
      if (!memcmp(*v16, v17, *(void *)(a1 + 328))) {
        goto LABEL_150;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 343)) {
        goto LABEL_150;
      }
      while (*(unsigned __int8 *)v16 == v17->__r_.__value_.__s.__data_[0])
      {
        BOOL v16 = (const void **)((char *)v16 + 1);
        long long v17 = (std::string *)((char *)v17 + 1);
        if (!--v13) {
          goto LABEL_150;
        }
      }
    }
  }
  int v18 = 0;
LABEL_55:
  int v19 = (id)qword_1008A4500;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 319) < 0)
    {
      if (*(void *)(a1 + 304)) {
        int v20 = (const char *)*v7;
      }
      else {
        int v20 = "__";
      }
    }
    else if (*(unsigned char *)(a1 + 319))
    {
      int v20 = (const char *)(a1 + 296);
    }
    else
    {
      int v20 = "__";
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__str.__r_.__value_.__l.__size_) {
        unint64_t v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else {
        unint64_t v22 = (std::string *)"__";
      }
    }
    else
    {
      unint64_t v22 = &__str;
      if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
        unint64_t v22 = (std::string *)"__";
      }
    }
    int v23 = *(unsigned __int8 *)(a1 + 345);
    int v24 = (void *)(a1 + 320);
    if (*(char *)(a1 + 343) < 0) {
      int v24 = (void *)*v24;
    }
    unsigned int v25 = &v57;
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v25 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    int v26 = *(unsigned __int8 *)(a1 + 344);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67110914;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v18;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v23;
    HIWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v20;
    *(_WORD *)double v60 = 2080;
    *(void *)&v60[2] = v22;
    *(_WORD *)__int16 v61 = 2080;
    *(void *)&v61[2] = v24;
    *(_WORD *)&v61[10] = 2080;
    BOOL v62 = v25;
    __int16 v63 = 1024;
    int v64 = v26;
    __int16 v65 = 1024;
    int v66 = v51;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "regulatory,geo,monitor,refreshCurrentGeoArea,effectiveChange:%d,prevInitialized:%d,regulatoryArea:[%s]->[%s],source:[%s]->[%s],isCurrent:[%d]->[%d]", (uint8_t *)&buf, 0x42u);
  }
  __int16 v50 = (std::string *)(a1 + 296);

  long long v27 = (id)qword_1008A4500;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else {
        p_p = (std::string *)"__";
      }
    }
    else
    {
      p_p = &__p;
      if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
        p_p = (std::string *)"__";
      }
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = HIBYTE(v56);
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v56;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "regulatory,geo,monitor,refreshCurrentGeoArea,mccChoice,iso:%s,isAnyMccValid:%d,isAnyMccCurrent:%d", (uint8_t *)&buf, 0x18u);
  }

  char v29 = (id)qword_1008A4500;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 399) < 0) {
      long long v30 = *(void *)(a1 + 384) ? (char *)v4->__r_.__value_.__r.__words[0] : "__";
    }
    else {
      long long v30 = *(unsigned char *)(a1 + 399) ? (char *)(a1 + 376) : "__";
    }
    if (*(char *)(v52 + 375) < 0) {
      uint64_t v31 = *(void *)(v52 + 360) ? *(char **)(v52 + 352) : "__";
    }
    else {
      uint64_t v31 = *(unsigned char *)(v52 + 375) ? (char *)(v52 + 352) : "__";
    }
    if (*(char *)(v52 + 463) < 0) {
      long long v32 = *(void *)(v52 + 448) ? *(char **)(v52 + 440) : "__";
    }
    else {
      long long v32 = *(unsigned char *)(v52 + 463) ? (char *)(v52 + 440) : "__";
    }
    sub_1003CB420(*(unsigned __int8 *)(v52 + 434), v53);
    __int16 v33 = v54 >= 0 ? v53 : (void **)v53[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v31;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    *(void *)double v60 = v32;
    *(_WORD *)&v60[8] = 2080;
    *(void *)__int16 v61 = v33;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "regulatory,geo,monitor,refreshCurrentGeoArea,state,lastStoredIso:%s,lastUpdatedIso:%s,wifiIso:%s,airplaneMode:%s", (uint8_t *)&buf, 0x2Au);
    if (v54 < 0) {
      operator delete(v53[0]);
    }
  }

  char v34 = (id)qword_1008A4500;
  if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_127;
  }
  if (*(char *)(v52 + 239) < 0)
  {
    if (!*(void *)(v52 + 224))
    {
      double v36 = 0.0;
      uint64_t v35 = "__";
      goto LABEL_125;
    }
    uint64_t v35 = (const char *)v2->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (*(unsigned char *)(v52 + 239)) {
      uint64_t v35 = (const char *)v2;
    }
    else {
      uint64_t v35 = "__";
    }
    if (!*(unsigned char *)(v52 + 239))
    {
      double v36 = 0.0;
LABEL_125:
      uint64_t v38 = v52;
      goto LABEL_126;
    }
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v38 = v52;
  double v36 = Current - *(double *)(v52 + 248);
LABEL_126:
  int v39 = *(unsigned __int8 *)(v38 + 240);
  int v40 = *(unsigned __int8 *)(v38 + 400);
  int v41 = *(unsigned __int8 *)(v38 + 432);
  int v42 = *(unsigned __int8 *)(v38 + 433);
  int v43 = *(_DWORD *)(v38 + 436);
  LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
  *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v36;
  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
  *(_DWORD *)double v60 = v39;
  *(_WORD *)&v60[4] = 1024;
  *(_DWORD *)&v60[6] = v40;
  *(_WORD *)__int16 v61 = 1024;
  *(_DWORD *)&v61[2] = v41;
  *(_WORD *)&v61[6] = 1024;
  *(_DWORD *)&v61[8] = v42;
  LOWORD(v62) = 1024;
  *(_DWORD *)((char *)&v62 + 2) = v43;
  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "regulatory,geo,monitor,refreshCurrentGeoArea,state,locationIso:%s,age:%.2f,isLastKnown:%d,authorized:%d,needed:%d,monitoring:%d,retries:%d", (uint8_t *)&buf, 0x34u);
LABEL_127:

  long long v44 = *(uint64_t **)(v52 + 272);
  if (v44)
  {
    while (1)
    {
      uint64_t v45 = (id)qword_1008A4500;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
        break;
      }
LABEL_145:

      long long v44 = (uint64_t *)*v44;
      if (!v44) {
        goto LABEL_146;
      }
    }
    sub_1002F11C4(*((_DWORD *)v44 + 4), v53);
    if (v54 >= 0) {
      unint64_t v46 = v53;
    }
    else {
      unint64_t v46 = (void **)v53[0];
    }
    if (*((char *)v44 + 55) < 0)
    {
      if (v44[5]) {
        char v47 = (const char *)v44[4];
      }
      else {
        char v47 = "__";
      }
      if (v44[5]) {
        goto LABEL_137;
      }
    }
    else
    {
      if (*((unsigned char *)v44 + 55)) {
        char v47 = (const char *)(v44 + 4);
      }
      else {
        char v47 = "__";
      }
      if (*((unsigned char *)v44 + 55))
      {
LABEL_137:
        double v48 = CFAbsoluteTimeGetCurrent() - *((double *)v44 + 7);
        goto LABEL_143;
      }
    }
    double v48 = 0.0;
LABEL_143:
    int v49 = *((unsigned __int8 *)v44 + 24);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v47;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    *(double *)double v60 = v48;
    *(_WORD *)&v60[8] = 1024;
    *(_DWORD *)__int16 v61 = v49;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "regulatory,geo,monitor,refreshCurrentGeoArea,state,mccSlot:%s,iso:%s,age:%.2f,isLastKnown:%d", (uint8_t *)&buf, 0x26u);
    if (v54 < 0) {
      operator delete(v53[0]);
    }
    goto LABEL_145;
  }
LABEL_146:
  a1 = v52;
  if (v18)
  {
    std::string::operator=(v50, &__str);
    *(unsigned char *)(v52 + 344) = v51;
    *(unsigned char *)(v52 + 345) = 1;
    if (v51) {
      sub_1001F9F8C(v52);
    }
    else {
      sub_1001F9FE8(v52);
    }
  }
LABEL_150:
  std::string::operator=((std::string *)(a1 + 320), &v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1001F9DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F9E98(uint64_t result)
{
  if (*(unsigned char *)(result + 472))
  {
    uint64_t v1 = result;
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
      sub_10041DBBC();
    }
    return sub_1001FB4BC(v1 + 8, 7);
  }
  return result;
}

BOOL sub_1001F9EF0(void *a1)
{
  size_t v2 = strlen(off_10089F778[0]);
  if (*((char *)a1 + 23) < 0)
  {
    if (v2 == a1[1])
    {
      if (v2 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, off_10089F778[0], v2) == 0;
    }
  }
  else if (v2 == *((unsigned __int8 *)a1 + 23))
  {
    if (v2 == -1) {
LABEL_10:
    }
      sub_10019CC84();
    return memcmp(a1, off_10089F778[0], v2) == 0;
  }
  return 0;
}

uint64_t sub_1001F9F8C(uint64_t result)
{
  if (*(unsigned char *)(result + 472))
  {
    uint64_t v1 = result;
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
      sub_10041DBF0();
    }
    return sub_1001FB4BC(v1 + 8, 2);
  }
  return result;
}

uint64_t sub_1001F9FE8(uint64_t result)
{
  if (*(unsigned char *)(result + 472))
  {
    uint64_t v1 = result;
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
      sub_10041DC6C();
    }
    return sub_1001FB4BC(v1 + 8, 3);
  }
  return result;
}

void sub_1001FA044(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v25 = a2;
  unsigned int v7 = a2 & 0xFFFFFFFE;
  BOOL v8 = (a2 & 0xFFFFFFFE) == 2;
  *(void *)std::string buf = &v25;
  uint64_t v9 = sub_1001FD9C4(a1 + 256, &v25, (uint64_t)&unk_1004BC2F8, (_DWORD **)buf);
  char v10 = *(unsigned char *)(a1 + 434) != 1 || v8;
  uint64_t v11 = (id)qword_1008A4500;
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
  if (v10)
  {
    if (v12)
    {
      sub_1002F11C4(v25, __p);
      if (v24 >= 0) {
        std::string::size_type v15 = __p;
      }
      else {
        std::string::size_type v15 = (void **)__p[0];
      }
      if (*(char *)(a3 + 23) < 0)
      {
        if (*(void *)(a3 + 8)) {
          BOOL v16 = *(const char **)a3;
        }
        else {
          BOOL v16 = "__";
        }
      }
      else if (*(unsigned char *)(a3 + 23))
      {
        BOOL v16 = (const char *)a3;
      }
      else
      {
        BOOL v16 = "__";
      }
      int v19 = v9 + 32;
      if (v9[55] < 0)
      {
        if (*((void *)v9 + 5)) {
          int v19 = *(const char **)v19;
        }
        else {
          int v19 = "__";
        }
      }
      else if (!v9[55])
      {
        int v19 = "__";
      }
      int v21 = v9[24];
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = v15;
      __int16 v27 = 2080;
      __int16 v28 = v16;
      __int16 v29 = 1024;
      int v30 = a4;
      __int16 v31 = 2080;
      long long v32 = v19;
      __int16 v33 = 1024;
      int v34 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,procesMcc,slot:%s,new:(%s:%d),past:(%s:%d)", buf, 0x2Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    BOOL v13 = v7 == 2;

    std::string::operator=((std::string *)(v9 + 32), (const std::string *)a3);
    int v14 = a4 ^ 1;
    if (!v9[24]) {
      int v14 = 1;
    }
    if ((v13 | v14) == 1) {
      *((CFAbsoluteTime *)v9 + 7) = CFAbsoluteTimeGetCurrent();
    }
    v9[24] = a4;
    sub_1001F94B8(a1);
  }
  else
  {
    if (v12)
    {
      sub_1002F11C4(v25, __p);
      if (v24 >= 0) {
        long long v17 = __p;
      }
      else {
        long long v17 = (void **)__p[0];
      }
      if (*(char *)(a3 + 23) < 0)
      {
        if (*(void *)(a3 + 8)) {
          int v18 = *(const char **)a3;
        }
        else {
          int v18 = "__";
        }
      }
      else if (*(unsigned char *)(a3 + 23))
      {
        int v18 = (const char *)a3;
      }
      else
      {
        int v18 = "__";
      }
      int v20 = v9 + 32;
      if (v9[55] < 0)
      {
        if (*((void *)v9 + 5)) {
          int v20 = *(const char **)v20;
        }
        else {
          int v20 = "__";
        }
      }
      else if (!v9[55])
      {
        int v20 = "__";
      }
      int v22 = v9[24];
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v27 = 2080;
      __int16 v28 = v18;
      __int16 v29 = 1024;
      int v30 = a4;
      __int16 v31 = 2080;
      long long v32 = v20;
      __int16 v33 = 1024;
      int v34 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,procesMcc,slot:%s,new:(%s:%d),past:(%s:%d),skip MCC update in airplane mode", buf, 0x2Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1001FA370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1001FA38C(uint64_t a1)
{
  size_t v2 = strlen(off_10089F748[0]);
  size_t v3 = v2;
  size_t v4 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    size_t v6 = *(void *)(a1 + 8);
    if (v2 != v6)
    {
      unsigned int v7 = off_10089F768[0];
      size_t v8 = strlen(off_10089F768[0]);
      goto LABEL_15;
    }
    if (v2 == -1) {
      goto LABEL_59;
    }
    double v5 = *(const void **)a1;
  }
  else
  {
    if (v2 != v4)
    {
      unsigned int v7 = off_10089F768[0];
      size_t v8 = strlen(off_10089F768[0]);
      goto LABEL_12;
    }
    double v5 = (const void *)a1;
    if (v3 == -1) {
LABEL_59:
    }
      sub_10019CC84();
  }
  if (!memcmp(v5, off_10089F748[0], v3)) {
    return 1;
  }
  unsigned int v7 = off_10089F768[0];
  size_t v8 = strlen(off_10089F768[0]);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    size_t v6 = v4;
    uint64_t v9 = (const void *)a1;
    if (v8 != v4)
    {
      char v10 = off_10089F770[0];
      size_t v11 = strlen(off_10089F770[0]);
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  size_t v6 = *(void *)(a1 + 8);
LABEL_15:
  if (v8 != v6)
  {
    char v10 = off_10089F770[0];
    size_t v11 = strlen(off_10089F770[0]);
    goto LABEL_24;
  }
  if (v6 == -1) {
    sub_10019CC84();
  }
  uint64_t v9 = *(const void **)a1;
LABEL_18:
  if (!memcmp(v9, v7, v6)) {
    return 1;
  }
  char v10 = off_10089F770[0];
  size_t v11 = strlen(off_10089F770[0]);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    size_t v6 = v4;
    BOOL v12 = (const void *)a1;
    if (v11 != v4)
    {
      BOOL v13 = off_10089F778[0];
      size_t v14 = strlen(off_10089F778[0]);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  size_t v6 = *(void *)(a1 + 8);
LABEL_24:
  if (v11 != v6)
  {
    BOOL v13 = off_10089F778[0];
    size_t v14 = strlen(off_10089F778[0]);
    goto LABEL_33;
  }
  if (v6 == -1) {
    sub_10019CC84();
  }
  BOOL v12 = *(const void **)a1;
LABEL_27:
  if (!memcmp(v12, v10, v6)) {
    return 1;
  }
  BOOL v13 = off_10089F778[0];
  size_t v14 = strlen(off_10089F778[0]);
  if ((v4 & 0x80) == 0)
  {
LABEL_29:
    size_t v6 = v4;
    std::string::size_type v15 = (const void *)a1;
    if (v14 != v4)
    {
      BOOL v16 = off_10089F790[0];
      size_t v17 = strlen(off_10089F790[0]);
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  size_t v6 = *(void *)(a1 + 8);
LABEL_33:
  if (v14 != v6)
  {
    BOOL v16 = off_10089F790[0];
    size_t v17 = strlen(off_10089F790[0]);
    goto LABEL_42;
  }
  if (v6 == -1) {
    sub_10019CC84();
  }
  std::string::size_type v15 = *(const void **)a1;
LABEL_36:
  if (!memcmp(v15, v13, v6)) {
    return 1;
  }
  BOOL v16 = off_10089F790[0];
  size_t v17 = strlen(off_10089F790[0]);
  if ((v4 & 0x80) == 0)
  {
LABEL_38:
    size_t v6 = v4;
    int v18 = (const void *)a1;
    if (v17 != v4)
    {
      int v19 = off_10089F760[0];
      size_t v20 = strlen(off_10089F760[0]);
LABEL_47:
      int v21 = (const void *)a1;
      if (v20 != v4) {
        goto LABEL_55;
      }
LABEL_54:
      if (memcmp(v21, v19, v4)) {
        goto LABEL_55;
      }
      return 1;
    }
    goto LABEL_45;
  }
  size_t v6 = *(void *)(a1 + 8);
LABEL_42:
  if (v17 != v6)
  {
    int v19 = off_10089F760[0];
    size_t v20 = strlen(off_10089F760[0]);
    goto LABEL_51;
  }
  if (v6 == -1) {
    sub_10019CC84();
  }
  int v18 = *(const void **)a1;
LABEL_45:
  if (!memcmp(v18, v16, v6)) {
    return 1;
  }
  int v19 = off_10089F760[0];
  size_t v20 = strlen(off_10089F760[0]);
  if ((v4 & 0x80) == 0) {
    goto LABEL_47;
  }
  size_t v6 = *(void *)(a1 + 8);
LABEL_51:
  if (v20 == v6)
  {
    if (v6 == -1) {
      sub_10019CC84();
    }
    int v21 = *(const void **)a1;
    size_t v4 = v6;
    goto LABEL_54;
  }
LABEL_55:
  int v22 = off_10089F788[0];

  return sub_1001FB9C8((void *)a1, v22);
}

void sub_1001FA73C(int *a1, const std::string *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
    sub_10041DD74();
  }
  memset(&__p, 0, sizeof(__p));
  memset(&v19, 0, sizeof(v19));
  char v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    int64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (v4 >= 0) {
    size_t v6 = a2;
  }
  else {
    size_t v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (size >= 1)
  {
    unsigned int v7 = (char *)v6 + size;
    size_t v8 = (std::string *)v6;
    do
    {
      uint64_t v9 = (char *)memchr(v8, 44, size);
      if (!v9) {
        break;
      }
      if (*v9 == 44)
      {
        if (v9 == v7) {
          break;
        }
        std::string::size_type v10 = v9 - (char *)v6;
        if (v10 == -1) {
          break;
        }
        std::string::basic_string(&v18, a2, 0, v10, (std::allocator<char> *)v21);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v18;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v11 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v11 = a2->__r_.__value_.__l.__size_;
        }
        std::string::basic_string(&v18, a2, v10 + 1, v11, (std::allocator<char> *)v21);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        std::string v19 = v18;
        goto LABEL_29;
      }
      size_t v8 = (std::string *)(v9 + 1);
      int64_t size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 1);
  }
  std::string::operator=(&__p, a2);
  if (sub_100005424(*a1)) {
    BOOL v12 = "1";
  }
  else {
    BOOL v12 = "p1";
  }
  std::string::assign(&v19, v12);
LABEL_29:
  if (!std::string::compare(&__p, "000"))
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    }
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v13 = (std::string *)((char *)&v19 + HIBYTE(v19.__r_.__value_.__r.__words[2]));
  }
  else {
    BOOL v13 = (std::string *)(v19.__r_.__value_.__r.__words[0] + v19.__r_.__value_.__l.__size_);
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v14 = &v19;
  }
  else {
    size_t v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  while (v14 != v13)
  {
    v14->__r_.__value_.__s.__data_[0] = __tolower(v14->__r_.__value_.__s.__data_[0]);
    size_t v14 = (std::string *)((char *)v14 + 1);
  }
  if (!std::string::compare(&v19, "1") && (sub_100005424(*a1) || sub_10039CF88(*a1)))
  {
    std::string::size_type v15 = (id)qword_1008A4500;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002F11C4(0, &v18);
      sub_10041DD1C();
    }
    int v16 = 0;
LABEL_64:

    sub_100006384((uint64_t)(a1 + 120), v16, (uint64_t)&__p, 0);
    goto LABEL_65;
  }
  if (!std::string::compare(&v19, "2") && sub_100005424(*a1))
  {
    std::string::size_type v15 = (id)qword_1008A4500;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002F11C4(1, &v18);
      sub_10041DD1C();
    }
    int v16 = 1;
    goto LABEL_64;
  }
  if (!std::string::compare(&v19, "p1") && !sub_100005424(*a1))
  {
    std::string::size_type v15 = (id)qword_1008A4500;
    int v16 = 2;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002F11C4(2, &v18);
      sub_10041DD1C();
    }
    goto LABEL_64;
  }
  if (!std::string::compare(&v19, "p2") && !sub_100005424(*a1))
  {
    std::string::size_type v15 = (id)qword_1008A4500;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_1002F11C4(3, &v18);
      sub_10041DD1C();
    }
    int v16 = 3;
    goto LABEL_64;
  }
  size_t v17 = (id)qword_1008A4500;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    sub_1002F11C4(4, &v18);
    sub_10041DD1C();
  }

LABEL_65:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1001FAB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001FABE4(int *a1, uint64_t a2)
{
  if (sub_100005424(*a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
      sub_10041DDE0();
    }
    return 0;
  }
  if (sub_10039CFF8(*a1))
  {
    sub_1002F250C((uint64_t)(a1 + 120), 0, a2, 0);
    return 1;
  }
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
    sub_10041DE6C();
  }
  memset(&__p, 0, sizeof(__p));
  memset(&v32, 0, sizeof(v32));
  memset(&v31, 0, sizeof(v31));
  char v5 = *(unsigned char *)(a2 + 23);
  if (v5 >= 0) {
    int64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int64_t v6 = *(void *)(a2 + 8);
  }
  if (v5 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (v6 >= 1)
  {
    size_t v8 = (unsigned char *)(v7 + v6);
    uint64_t v9 = (void *)v7;
    do
    {
      std::string::size_type v10 = memchr(v9, 44, v6);
      if (!v10) {
        break;
      }
      if (*v10 == 44)
      {
        if (v10 == v8) {
          break;
        }
        std::string::size_type v11 = (std::string::size_type)&v10[-v7];
        if (v11 == -1) {
          break;
        }
        std::string::basic_string(&__str, (const std::string *)a2, 0, v11, (std::allocator<char> *)&v37);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = __str;
        if (*(char *)(a2 + 23) >= 0) {
          std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v12 = *(void *)(a2 + 8);
        }
        std::string::basic_string(&__str, (const std::string *)a2, v11 + 1, v12, (std::allocator<char> *)&v37);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = __str.__r_.__value_.__l.__size_;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (size >= 1)
        {
          std::string::size_type v15 = (char *)p_str + size;
          int v16 = p_str;
          do
          {
            size_t v17 = memchr(v16, 44, size);
            if (!v17) {
              break;
            }
            if (*v17 == 44)
            {
              if (v17 == v15) {
                break;
              }
              std::string::size_type v27 = v17 - (unsigned char *)p_str;
              if (v27 == -1) {
                break;
              }
              std::string::basic_string(&v37, &__str, 0, v27, (std::allocator<char> *)&v34);
              if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v32.__r_.__value_.__l.__data_);
              }
              std::string v32 = v37;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
              }
              std::string::basic_string(&v37, &__str, v27 + 1, v28, (std::allocator<char> *)&v34);
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v31.__r_.__value_.__l.__data_);
              }
              std::string v31 = v37;
              goto LABEL_86;
            }
            int v16 = (std::string *)(v17 + 1);
            int64_t size = v15 - (unsigned char *)v16;
          }
          while (v15 - (unsigned char *)v16 >= 1);
        }
        std::string::operator=(&v32, &__str);
        std::string::assign(&v31, "0");
LABEL_86:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_41;
      }
      uint64_t v9 = v10 + 1;
      int64_t v6 = v8 - (unsigned char *)v9;
    }
    while (v8 - (unsigned char *)v9 >= 1);
  }
  std::string::operator=(&__p, (const std::string *)a2);
  std::string::assign(&v32, "p1");
  std::string::assign(&v31, "0");
LABEL_41:
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v18 = (std::string *)((char *)&v32 + HIBYTE(v32.__r_.__value_.__r.__words[2]));
  }
  else {
    std::string v18 = (std::string *)(v32.__r_.__value_.__r.__words[0] + v32.__r_.__value_.__l.__size_);
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v19 = &v32;
  }
  else {
    std::string v19 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  while (v19 != v18)
  {
    v19->__r_.__value_.__s.__data_[0] = __tolower(v19->__r_.__value_.__s.__data_[0]);
    std::string v19 = (std::string *)((char *)v19 + 1);
  }
  int v20 = std::string::compare(&v31, "0");
  if (!std::string::compare(&v32, "p1") && !sub_100005424(*a1))
  {
    int v22 = (id)qword_1008A4500;
    int v23 = 2;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      sub_1002F11C4(2, &v37);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v24 = &v37;
      }
      else {
        char v24 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
      HIWORD(__str.__r_.__value_.__r.__words[2]) = 1024;
      BOOL v36 = v20 != 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,processIsoCountryFromPhone,isoCountrySource=%s,isoCountry=%s,isLastKnown=%d.", (uint8_t *)&__str, 0x1Cu);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      int v23 = 2;
    }
  }
  else
  {
    if (std::string::compare(&v32, "p2") || sub_100005424(*a1))
    {
      int v21 = (id)qword_1008A4500;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        sub_1002F11C4(4, &__str);
        sub_10041DE14();
      }

      uint64_t v4 = 0;
      goto LABEL_68;
    }
    int v22 = (id)qword_1008A4500;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      sub_1002F11C4(3, &v37);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v29 = &v37;
      }
      else {
        __int16 v29 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      int v30 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v30;
      HIWORD(__str.__r_.__value_.__r.__words[2]) = 1024;
      BOOL v36 = v20 != 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "regulatory,geo,monitor,processIsoCountryFromPhone,isoCountrySource=%s,isoCountry=%s,isLastKnown=%d.", (uint8_t *)&__str, 0x1Cu);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
    }
    int v23 = 3;
  }

  sub_1002F250C((uint64_t)(a1 + 120), v23, (uint64_t)&__p, v20 != 0);
  uint64_t v4 = 1;
LABEL_68:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1001FB1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FB238(uint64_t a1)
{
  sub_1001F94B8(a1);

  return sub_1001FB270(a1);
}

uint64_t sub_1001FB270(uint64_t result)
{
  if (*(unsigned char *)(result + 472))
  {
    uint64_t v1 = result;
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
      sub_10041DED8();
    }
    return sub_1001FB4BC(v1 + 8, 10);
  }
  return result;
}

uint64_t sub_1001FB2C8(uint64_t result, std::string *__str)
{
  size_t v2 = __str;
  uint64_t v3 = result;
  uint64_t v4 = (std::string *)(result + 352);
  uint64_t v5 = *(unsigned __int8 *)(result + 375);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(result + 375);
  }
  else {
    uint64_t v6 = *(void *)(result + 360);
  }
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  int v8 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (v6 == size)
  {
    if (v8 < 0) {
      std::string __str = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((v5 & 0x80) != 0)
    {
      uint64_t result = memcmp(v4->__r_.__value_.__l.__data_, __str, *(void *)(result + 360));
      if (!result) {
        return result;
      }
    }
    else
    {
      if (!*(unsigned char *)(result + 375)) {
        return result;
      }
      for (uint64_t i = (unsigned __int8 *)(result + 352); *i == __str->__r_.__value_.__s.__data_[0]; ++i)
      {
        std::string __str = (std::string *)((char *)__str + 1);
        if (!--v5) {
          return result;
        }
      }
    }
  }
  std::string::operator=(v4, v2);
  uint64_t result = *(void *)(v3 + 176);
  if (result)
  {
    std::string::size_type v10 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v10();
  }
  return result;
}

void sub_1001FB3C8()
{
}

uint64_t sub_1001FB4BC(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 112);
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  int v30 = *(_DWORD *)(a1 + 4);
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_100416814();
  }
  if (!*(unsigned char *)(a1 + 48)) {
    sub_100416840();
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_13;
  }
  unsigned int v6 = a2;
  uint64_t v7 = (uint64_t **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  do
  {
    int v9 = *(_DWORD *)(v5 + 32);
    BOOL v10 = v9 < (int)v2;
    if (v9 >= (int)v2) {
      std::string::size_type v11 = (uint64_t *)v5;
    }
    else {
      std::string::size_type v11 = (uint64_t *)(v5 + 8);
    }
    if (!v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }
  while (*v11);
  if (v8 == a1 + 16 || (int)v2 < *(_DWORD *)(v8 + 32)) {
LABEL_13:
  }
    sub_10041686C();
  std::string::size_type v12 = *(uint64_t (**)(void *, uint64_t))(v8 + 40);
  uint64_t v13 = *(void *)(v8 + 48);
  size_t v14 = (void *)(v3 + (v13 >> 1));
  if (v13) {
    std::string::size_type v12 = *(uint64_t (**)(void *, uint64_t))(*v14 + v12);
  }
  int v15 = v12(v14, a2);
  int v16 = v15;
  int v29 = v15;
  if (v6 <= 1 && v15 != v2) {
    sub_1004168F0();
  }
  if (v15 != v2)
  {
    uint64_t v17 = *(void *)(a1 + 32);
    std::string v31 = &v30;
    std::string v18 = sub_1001A254C(v7, &v30, (uint64_t)&unk_1004BC2F8, &v31);
    std::string v19 = v18[5];
    uint64_t v20 = (uint64_t)v18[6];
    int v21 = (void *)(v17 + (v20 >> 1));
    if (v20) {
      std::string v19 = *(uint64_t **)(*v21 + v19);
    }
    int v22 = ((uint64_t (*)(void *, uint64_t))v19)(v21, 1);
    if (v22 != v30) {
      sub_1004168C4();
    }
    *(_DWORD *)(a1 + 4) = v16;
    uint64_t v23 = *(void *)(a1 + 32);
    std::string v31 = &v29;
    char v24 = sub_1001A254C(v7, &v29, (uint64_t)&unk_1004BC2F8, &v31);
    int v25 = v24[5];
    uint64_t v26 = (uint64_t)v24[6];
    std::string::size_type v27 = (void *)(v23 + (v26 >> 1));
    if (v26) {
      int v25 = *(uint64_t **)(*v27 + v25);
    }
    uint64_t v2 = ((uint64_t (*)(void *, void))v25)(v27, 0);
    if (v2 != v29) {
      sub_100416898();
    }
  }
  --*(_DWORD *)(a1 + 112);
  return v2;
}

uint64_t sub_1001FB690(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 472))
  {
    uint64_t v3 = result;
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
      sub_10041DF40();
    }
    *(unsigned char *)(v3 + 400) = a2;
    if (a2) {
      uint64_t v4 = 5;
    }
    else {
      uint64_t v4 = 6;
    }
    return sub_1001FB4BC(v3 + 8, v4);
  }
  return result;
}

void sub_1001FB704(uint64_t a1, int a2)
{
  if (!a2) {
    sub_10041DFAC();
  }
  if (*(unsigned char *)(a1 + 434)) {
    BOOL v3 = *(unsigned __int8 *)(a1 + 434) == a2;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    return;
  }
  *(unsigned char *)(a1 + 434) = a2;
  if (a2 == 2)
  {
    uint64_t v5 = (void *)(a1 + 376);
    size_t v6 = strlen(off_10089F760[0]);
    if (*(char *)(a1 + 399) < 0)
    {
      if (v6 == *(void *)(a1 + 384))
      {
        if (v6 == -1) {
          goto LABEL_35;
        }
        uint64_t v5 = (void *)*v5;
        goto LABEL_23;
      }
    }
    else if (v6 == *(unsigned __int8 *)(a1 + 399))
    {
      if (v6 == -1) {
LABEL_35:
      }
        sub_10019CC84();
LABEL_23:
      if (!memcmp(v5, off_10089F760[0], v6))
      {
        if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
          sub_10041E040();
        }
        sub_1001F8208(a1);
      }
    }
LABEL_32:
    sub_1002F1870(a1 + 480, *(unsigned __int8 *)(a1 + 434));
    sub_1001F94B8(a1);
    return;
  }
  if (a2 == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
      sub_10041E00C();
    }
    sub_100004950(&__p, off_10089F760[0]);
    sub_1001FB95C(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_10028B7A8(a1 + 1040, 1);
    int v8 = 0;
    BOOL v10 = &v8;
    uint64_t v4 = sub_1001FD708(a1 + 256, &v8, (uint64_t)&unk_1004BC2F8, &v10);
    if (v4[55] < 0)
    {
      **((unsigned char **)v4 + 4) = 0;
      *((void *)v4 + 5) = 0;
    }
    else
    {
      v4[32] = 0;
      v4[55] = 0;
    }
    v4[24] = 0;
    *((void *)v4 + 7) = 0;
    int v8 = 1;
    BOOL v10 = &v8;
    uint64_t v7 = sub_1001FD708(a1 + 256, &v8, (uint64_t)&unk_1004BC2F8, &v10);
    if (v7[55] < 0)
    {
      **((unsigned char **)v7 + 4) = 0;
      *((void *)v7 + 5) = 0;
    }
    else
    {
      v7[32] = 0;
      v7[55] = 0;
    }
    v7[24] = 0;
    *((void *)v7 + 7) = 0;
    goto LABEL_32;
  }
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_ERROR)) {
    sub_10041DFD8();
  }
}

void sub_1001FB940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FB95C(uint64_t a1, const std::string *a2)
{
  BOOL v3 = (char *)(a1 + 376);
  std::string::operator=((std::string *)(a1 + 376), a2);
  uint64_t v4 = qword_1008A4500;
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
    sub_10041E074(a1, v3, v4);
  }
  uint64_t v5 = sub_100006A00();
  return sub_1003CED38((uint64_t)v5, v3);
}

BOOL sub_1001FB9C8(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_10019CC84();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

id sub_1001FBA5C(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  BOOL v3 = (const char *)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
  {
    if (*(void *)(a1 + 304)) {
      BOOL v3 = *(const char **)v3;
    }
    else {
      BOOL v3 = "__";
    }
  }
  else if (!*(unsigned char *)(a1 + 319))
  {
    BOOL v3 = "__";
  }
  uint64_t v23 = v3;
  size_t v4 = (void *)(a1 + 320);
  if (*(char *)(a1 + 343) < 0) {
    size_t v4 = (void *)*v4;
  }
  int v21 = v4;
  uint64_t v5 = (const char *)(a1 + 376);
  if (*(char *)(a1 + 399) < 0)
  {
    if (*(void *)(a1 + 384)) {
      uint64_t v5 = *(const char **)v5;
    }
    else {
      uint64_t v5 = "__";
    }
  }
  else if (!*(unsigned char *)(a1 + 399))
  {
    uint64_t v5 = "__";
  }
  int v22 = v5;
  if (*(char *)(a1 + 375) < 0)
  {
    if (*(void *)(a1 + 360)) {
      size_t v6 = *(const char **)(a1 + 352);
    }
    else {
      size_t v6 = "__";
    }
  }
  else if (*(unsigned char *)(a1 + 375))
  {
    size_t v6 = (const char *)(a1 + 352);
  }
  else
  {
    size_t v6 = "__";
  }
  if (*(char *)(a1 + 463) < 0)
  {
    if (*(void *)(a1 + 448)) {
      uint64_t v7 = *(const char **)(a1 + 440);
    }
    else {
      uint64_t v7 = "__";
    }
  }
  else if (*(unsigned char *)(a1 + 463))
  {
    uint64_t v7 = (const char *)(a1 + 440);
  }
  else
  {
    uint64_t v7 = "__";
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 345);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 344);
  sub_1003CB420(*(unsigned __int8 *)(a1 + 434), __p);
  if (v25 >= 0) {
    BOOL v10 = __p;
  }
  else {
    BOOL v10 = (void **)__p[0];
  }
  std::string::size_type v11 = +[NSString stringWithFormat:@"Chosen ISO: %s [initialized: %d, current: %d, source: %s]. Last stored ISO: %s. Last updated ISO: %s. WiFi ISO: %s. Airplane mode: %s", v23, v8, v9, v21, v22, v6, v7, v10];
  [v2 addObject:v11];

  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 239)) {
      std::string::size_type v12 = (const char *)(a1 + 216);
    }
    else {
      std::string::size_type v12 = "__";
    }
    if (!*(unsigned char *)(a1 + 239))
    {
      double v13 = 0.0;
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (*(void *)(a1 + 224))
  {
    std::string::size_type v12 = *(const char **)(a1 + 216);
LABEL_44:
    double v13 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 248);
    goto LABEL_45;
  }
  double v13 = 0.0;
  std::string::size_type v12 = "__";
LABEL_45:
  size_t v14 = +[NSString stringWithFormat:@"Location ISO: %s. Age: %.2f s. Last known: %d. Auth: %d. Needed: %d. Monitoring: %d. Retries left: %d", v12, *(void *)&v13, *(unsigned __int8 *)(a1 + 240), *(unsigned __int8 *)(a1 + 400), *(unsigned __int8 *)(a1 + 432), *(unsigned __int8 *)(a1 + 433), *(unsigned int *)(a1 + 436)];
  [v2 addObject:v14];

  for (uint64_t i = *(uint64_t **)(a1 + 272); i; uint64_t i = (uint64_t *)*i)
  {
    sub_1002F11C4(*((_DWORD *)i + 4), __p);
    if (v25 >= 0) {
      int v16 = __p;
    }
    else {
      int v16 = (void **)__p[0];
    }
    if (*((char *)i + 55) < 0)
    {
      if (i[5]) {
        uint64_t v17 = (const char *)i[4];
      }
      else {
        uint64_t v17 = "__";
      }
      if (!i[5])
      {
LABEL_59:
        double v18 = 0.0;
        goto LABEL_60;
      }
    }
    else
    {
      if (*((unsigned char *)i + 55)) {
        uint64_t v17 = (const char *)(i + 4);
      }
      else {
        uint64_t v17 = "__";
      }
      if (!*((unsigned char *)i + 55)) {
        goto LABEL_59;
      }
    }
    double v18 = CFAbsoluteTimeGetCurrent() - *((double *)i + 7);
LABEL_60:
    std::string v19 = +[NSString stringWithFormat:@"MCC slot:%s. ISO:%s. Age: %.2f s. Last known: %d", v16, v17, *(void *)&v18, *((unsigned __int8 *)i + 24)];
    [v2 addObject:v19];

    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  return v2;
}

void sub_1001FBDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1001FBDFC(uint64_t a1)
{
  uint64_t v2 = a1 + 152;
  size_t v4 = (void **)(a1 + 192);
  sub_10017D7B4(&v4);
  sub_1001FBE64(v2);
  sub_1001FBFC0(a1 + 112);
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1001FBE64(uint64_t a1)
{
  sub_1001FBEA0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001FBEA0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      BOOL v3 = (void *)*v2;
      sub_1001FBEE4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1001FBEE4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136)) {
    sub_1001FBF38(a1 + 96);
  }
  if (*(unsigned char *)(a1 + 88)) {
    sub_1001FBF38(a1 + 48);
  }

  return sub_1001FBF38(a1 + 8);
}

uint64_t sub_1001FBF38(uint64_t a1)
{
  sub_1001FBF74(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001FBF74(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      BOOL v3 = (void *)*v2;
      size_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1001FBFC0(uint64_t a1)
{
  sub_1001FBFFC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001FBFFC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      BOOL v3 = (void *)*v2;
      sub_1001FC040((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_1001FC040(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_1001FC0A8(uint64_t a1)
{
  if (*(char *)(a1 + 695) < 0) {
    operator delete(*(void **)(a1 + 672));
  }
  if (*(char *)(a1 + 671) < 0) {
    operator delete(*(void **)(a1 + 648));
  }
  if (*(char *)(a1 + 647) < 0) {
    operator delete(*(void **)(a1 + 624));
  }
  if (*(char *)(a1 + 623) < 0) {
    operator delete(*(void **)(a1 + 600));
  }
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*(void **)(a1 + 576));
  }
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }
  sub_10000AF74((void *)(a1 + 480));
  sub_10000AF74((void *)(a1 + 448));

  sub_1001FC17C(a1 + 280);
  sub_10000AF74((void *)(a1 + 248));

  sub_1001A2448(a1 + 88);
  BOOL v3 = (void **)(a1 + 40);
  sub_1001FC200(&v3);
  return a1;
}

uint64_t sub_1001FC17C(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_1001A24CC(*(void **)(a1 + 56), (void *)(a1 + 64), (uint64_t **)a1);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }

  sub_10003E96C(a1 + 80, *(void **)(a1 + 88));
  sub_1001A23EC(v2, *(void **)(a1 + 64));
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_10001A970(v3);
  }
  sub_10003E96C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_1001FC200(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_1001FC298((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1001FC298(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    BOOL v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t sub_1001FC2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000077C4((uint64_t *)(a1 + 392), 0, a3, a4, a5, a6, a7, a8);
  sub_1000077C4((uint64_t *)(a1 + 376), 0, v9, v10, v11, v12, v13, v14);
  sub_100196E1C((void *)(a1 + 336));

  if (*(char *)(a1 + 311) < 0) {
    operator delete(*(void **)(a1 + 288));
  }
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  sub_100196CD8((void *)(a1 + 240));

  int v16 = (void **)(a1 + 192);
  sub_1001FC3BC(&v16);
  sub_1001FD120((void *)(a1 + 160));
  sub_10000AF74((void *)(a1 + 128));
  sub_1001FCEA4((void *)(a1 + 96));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  return a1;
}

void sub_1001FC3BC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_1001FC454((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1001FC454(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

void sub_1001FC4AC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1001FC4AC(a1, *(void *)a2);
    sub_1001FC4AC(a1, *((void *)a2 + 1));
    if (a2[71] < 0) {
      operator delete(*((void **)a2 + 6));
    }
    operator delete(a2);
  }
}

void sub_1001FC510(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1001FC510(a1, *a2);
    sub_1001FC510(a1, a2[1]);
    sub_1001FC56C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1001FC56C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_1001FC5C4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001FC648(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1001FC648(a1, *(void *)a2);
    sub_1001FC648(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void sub_1001FC6B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1001FC6EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1001FC730(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  size_t v6 = (void **)(a1 + 120);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((unsigned char *)a2 + 23)) {
      goto LABEL_5;
    }
LABEL_20:
    __assert_rtn("PRStateMachine", "PRStateMachine.h", 55, "!name.empty()");
  }
  if (!a2[1]) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_100158FEC((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    uint64_t v8 = &v11;
  }
  else {
    uint64_t v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)size_t v6 = v11;
  *(void *)(a1 + 136) = v12;
  return a1;
}

void sub_1001FC8AC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }

  sub_10003E96C(v4, *(void **)(v1 + 88));
  sub_1001A23EC(v3, *(void **)(v1 + 64));
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 40);
  if (v8) {
    sub_10001A970(v8);
  }
  sub_10003E96C(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FC904(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1001FC9A0()
{
}

void *sub_1001FC9B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1008595E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1001FC9FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1008595E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001FCA28(uint64_t a1, char *a2)
{
  return sub_1000220A0(*(void *)(a1 + 8) + 184, *a2);
}

uint64_t sub_1001FCA38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001FCA78()
{
}

void sub_1001FCA88()
{
}

void *sub_1001FCA9C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_100859668;
  result[1] = v3;
  return result;
}

uint64_t sub_1001FCAE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100859668;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001FCB10(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = qword_1008A4500;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "regulatory,geof,startLocationRequest", buf, 2u);
    }
    return sub_1002CF58C((NSObject **)(v3 + 632));
  }
  else
  {
    if (v5)
    {
      *(_WORD *)size_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "regulatory,geof,stopLocationRequest", v7, 2u);
    }
    return sub_1002CF644((NSObject **)(v3 + 632));
  }
}

uint64_t sub_1001FCBC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001FCC08()
{
}

void sub_1001FCC18()
{
}

void *sub_1001FCC2C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1008596E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1001FCC74(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1008596E8;
  a2[1] = v2;
  return result;
}

void sub_1001FCCA0(uint64_t a1, int *a2, const std::string *a3, unsigned __int8 *a4)
{
  int v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  sub_1001FA044(v6, *a2, (uint64_t)a3, *a4);

  sub_10028B5F8(v6 + 1040, v5, a3);
}

uint64_t sub_1001FCCFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001FCD3C()
{
}

void *sub_1001FCD48(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001FCDD0()
{
}

void *sub_1001FCDE4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_100859778;
  result[1] = v3;
  return result;
}

uint64_t sub_1001FCE2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100859778;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001FCE58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001FCE98()
{
}

void *sub_1001FCEA4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001FCF2C()
{
}

void *sub_1001FCF40(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_100859808;
  result[1] = v3;
  return result;
}

uint64_t sub_1001FCF88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100859808;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001FCFB4(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_1001FB690(v3, v2);

  return sub_10028B58C(v3 + 1040, v2);
}

uint64_t sub_1001FCFFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001FD03C()
{
}

void sub_1001FD04C()
{
}

void *sub_1001FD060(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_100859888;
  result[1] = v3;
  return result;
}

uint64_t sub_1001FD0A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100859888;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001FD0D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001FD114()
{
}

void *sub_1001FD120(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001FD1A8()
{
}

void *sub_1001FD1BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_100859918;
  result[1] = v3;
  return result;
}

uint64_t sub_1001FD204(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100859918;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001FD230(uint64_t a1, uint64_t a2)
{
  return sub_1001FABE4(*(int **)(a1 + 8), a2);
}

uint64_t sub_1001FD238(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001FD278()
{
}

void *sub_1001FD284(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1001FD308(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1001FD3A0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001FD428()
{
}

void *sub_1001FD43C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1008599A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1001FD484(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1008599A8;
  a2[1] = v2;
  return result;
}

void sub_1001FD4B0(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (os_log_type_enabled((os_log_t)qword_1008A4500, OS_LOG_TYPE_DEBUG)) {
    sub_10041E0F4();
  }
  std::string::operator=((std::string *)(v3 + 440), a2);
  sub_1001F94B8(v3);
  sub_10028B5F8(v3 + 1040, 0, a2);
}

uint64_t sub_1001FD52C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001FD56C()
{
}

void *sub_1001FD578(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1001FD5FC(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_1001A24CC(*(void **)(a1 + 56), (void *)(a1 + 64), (uint64_t **)a1);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }

  sub_10003E96C(a1 + 80, *(void **)(a1 + 88));
  sub_1001A23EC(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_10001A970(v3);
  }
  sub_10003E96C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1001FD680(uint64_t a1)
{
  sub_1001FD6BC(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001FD6BC(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 55) < 0) {
        operator delete(v2[4]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

char *sub_1001FD708(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  long long v11 = (char *)operator new(0x40uLL);
  *(void *)long long v11 = 0;
  *((void *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((void *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)long long v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }
  *(void *)long long v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*(void *)v11)
  {
    unint64_t v22 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1001FD948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_1001FD964(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1001FD964(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

char *sub_1001FD9C4(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((void *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)uint64_t v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }
  *(void *)uint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*(void *)v11)
  {
    unint64_t v22 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1001FDC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_1001FD964(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1001FDC20(uint64_t a1, int a2, double a3)
{
  int v19 = a2;
  uint64_t v3 = *(NSObject **)(a1 + 104);
  if (!v3) {
    sub_10041691C();
  }
  if (a3 >= 0.0)
  {
    uint64_t v7 = a1 + 64;
    uint64_t v6 = *(void *)(a1 + 64);
    if (!v6) {
      goto LABEL_15;
    }
    uint64_t v8 = a1 + 64;
    do
    {
      int v9 = *(_DWORD *)(v6 + 32);
      BOOL v10 = v9 < a2;
      if (v9 >= a2) {
        uint64_t v11 = (uint64_t *)v6;
      }
      else {
        uint64_t v11 = (uint64_t *)(v6 + 8);
      }
      if (!v10) {
        uint64_t v8 = v6;
      }
      uint64_t v6 = *v11;
    }
    while (*v11);
    if (v8 != v7 && *(_DWORD *)(v8 + 32) <= a2 && (unint64_t v12 = *(void **)(v8 + 40)) != 0)
    {
      uint64_t v13 = v12;
    }
    else
    {
LABEL_15:
      dispatch_source_t v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v3);
      if (!v14) {
        return;
      }
      uint64_t v13 = v14;
      uint64_t v20 = &v19;
      float v15 = sub_1001A284C((uint64_t **)(v7 - 8), &v19, (uint64_t)&unk_1004BC2F8, &v20);
      objc_storeStrong((id *)v15 + 5, v13);
      dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_1001FDE00;
      void v17[3] = &unk_100853B08;
      __n128 v17[4] = a1;
      int v18 = v19;
      dispatch_source_set_event_handler(v13, v17);
      dispatch_resume(v13);
    }
    dispatch_time_t v16 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(a3 * 1000000000.0));
    dispatch_source_set_timer(v13, v16, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    uint64_t v20 = &v19;
    *((unsigned char *)sub_1001A2910((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_1004BC2F8, &v20) + 32) = 1;
  }
}

void sub_1001FDDF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **sub_1001FDE00(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1001FB4BC(v2, *(unsigned int *)(a1 + 40));
  unint64_t v4 = v1;
  uint64_t result = sub_1001A2910((uint64_t **)(v2 + 80), v1, (uint64_t)&unk_1004BC2F8, &v4);
  *((unsigned char *)result + 32) = 0;
  return result;
}

void sub_1001FDE5C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

uint64_t sub_1001FDE74(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = result;
  *(_WORD *)(a2 + 12) = 2048;
  *(void *)(a2 + 14) = a3;
  return result;
}

void sub_1001FDE8C(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0x16u);
}

void sub_1001FDEA8()
{
  qword_1008A4500 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
}

void sub_1001FDEFC(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = a2;
  if (!v4)
  {
    unint64_t v17 = "queryCallback";
    int v18 = 29;
    goto LABEL_19;
  }
  if (!v3)
  {
    unint64_t v17 = "dispatchQueue";
    int v18 = 30;
LABEL_19:
    __assert_rtn("PRAlishaLEPMQueryCrashSummaryLog", "PRAlishaLPEMLogging.mm", v18, v17);
  }
  uint64_t v5 = NSTemporaryDirectory();
  uint64_t v6 = +[NSString stringWithFormat:@"%@/%s", v5, "AlishaLEPMCrashQuery.tok"];

  uint64_t v7 = +[NSFileManager defaultManager];
  unsigned int v8 = [v7 fileExistsAtPath:v6];

  int v9 = qword_1008ABDE0;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PRAlishaLEPMQueryCrashSummaryLog token found", buf, 2u);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_10041E204(v9);
    }
    BOOL v10 = +[NSFileManager defaultManager];
    uint64_t v11 = +[NSData data];
    unsigned __int8 v12 = [v10 createFileAtPath:v6 contents:v11 attributes:0];

    if ((v12 & 1) == 0)
    {
      uint64_t v13 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_10041E1C0(v13);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1008A4518, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1008A4518))
    {
      dword_1008A4510 = 1966090;
      __cxa_guard_release(&qword_1008A4518);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1008A4EE8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1008A4EE8))
    {
      sub_100166764((std::random_device *)buf);
      std::random_device::result_type v19 = std::random_device::operator()((std::random_device *)buf);
      dword_1008A4520[0] = v19;
      for (uint64_t i = 1; i != 624; ++i)
      {
        std::random_device::result_type v19 = i + 1812433253 * (v19 ^ (v19 >> 30));
        dword_1008A4520[i] = v19;
      }
      qword_1008A4EE0 = 0;
      std::random_device::~random_device((std::random_device *)buf);
      __cxa_guard_release(&qword_1008A4EE8);
    }
    unsigned int v14 = sub_1001FE8F8((uint64_t)&dword_1008A4510, (uint64_t)dword_1008A4520, (unsigned __int16 *)&dword_1008A4510);
    float v15 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      unsigned int v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PRAlishaLEPMQueryCrashSummaryLog, Query AlishaLPEM Crash Summary in %d secs", buf, 8u);
    }
    dispatch_time_t v16 = dispatch_time(0, 1000000000 * v14);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001FE314;
    block[3] = &unk_100856F48;
    id v22 = v4;
    dispatch_after(v16, v3, block);
  }
}

void sub_1001FE28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::random_device a17)
{
  std::random_device::~random_device(&a17);
  __cxa_guard_abort(&qword_1008A4EE8);

  _Unwind_Resume(a1);
}

void sub_1001FE314(uint64_t a1)
{
  uint64_t v2 = +[NFHardwareManager sharedHardwareManager];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001FE3D8;
  v4[3] = &unk_100859A30;
  id v5 = *(id *)(a1 + 32);
  id v3 = [v2 startSecureElementLoggingSession:v4];
}

void sub_1001FE3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1001FE3D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041E380();
    }
  }
  else
  {
    id v24 = 0;
    uint64_t v7 = +[NFSecureElement embeddedSecureElementWithError:&v24];
    id v8 = v24;
    int v9 = [v7 serialNumber];

    if (v8)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_10041E318();
      }
      [v5 endSession];
    }
    else
    {
      id v23 = 0;
      BOOL v10 = [v5 getLogs:5 forSEID:v9 error:&v23];
      id v11 = v23;
      unsigned __int8 v12 = qword_1008ABDE0;
      if (v11)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_10041E2B0();
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 138412290;
          id v26 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Alisha LPEM crash summary dictionary: %@", buf, 0xCu);
        }
        uint64_t v13 = [v10 valueForKey:@"FTA Logging"];
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();

        if (isKindOfClass)
        {
          id v22 = [v10 valueForKey:@"FTA Logging"];
          if ((unint64_t)[v22 length] >= 2)
          {
            id v15 = objc_alloc((Class)NSString);
            dispatch_time_t v16 = [v22 subdataWithRange:1, [v22 length] - 1];
            id v17 = [v15 initWithData:v16 encoding:1];

            int v18 = qword_1008ABDE0;
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 138412290;
              id v26 = v17;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Alisha LPEM crash summary string to submit: %@", buf, 0xCu);
            }
            id v19 = v17;
            AnalyticsSendEventLazy();
            uint64_t v20 = [v5 clearLogs:5 forSEID:v9];
            if (v20 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
              sub_10041E248();
            }
            (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
          }
        }
        else
        {
          int v21 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Alisha LPEM log dictionary contains an incorrect value type", buf, 2u);
          }
        }
      }
      [v5 endSession];
    }
  }
}

void sub_1001FE7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1001FE874(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFStringRef v4 = @"CrashSummaryString";
  uint64_t v5 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

uint64_t sub_1001FE8F8(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  LODWORD(result) = a3[1];
  int v4 = result - *a3;
  if (v4)
  {
    unsigned int v6 = v4 + 1;
    if (v4 == -1)
    {
      LOWORD(result) = sub_100166A18(a2);
    }
    else
    {
      uint64_t v8 = __clz(v6);
      uint64_t v9 = 31;
      if (((v6 << v8) & 0x7FFFFFFF) != 0) {
        uint64_t v9 = 32;
      }
      unint64_t v10 = v9 - v8;
      unint64_t v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0) {
        ++v11;
      }
      if (v11 <= v10) {
        unsigned int v12 = 0xFFFFFFFF >> -(v10 / v11);
      }
      else {
        unsigned int v12 = 0;
      }
      do
        unsigned int v13 = sub_100166A18(a2) & v12;
      while (v13 >= v6);
      LOWORD(result) = *a3 + v13;
    }
  }
  return (unsigned __int16)result;
}

void *sub_1001FE9AC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100859A50[a1]);
}

void *sub_1001FE9C0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100859AA8[a1]);
}

void *sub_1001FE9D4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100859AF0[a1]);
}

void *sub_1001FE9E8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100859B10[a1]);
}

double sub_1001FE9FC(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 850045863;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  return result;
}

void sub_1001FEA28(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_1001FEA30(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t sub_1001FEA7C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  id v9 = v8;
  *(void *)(a1 + 24) = v9;
  id v10 = v7;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_1001FF508(a1 + 64, a2);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  if (!*(void *)(a1 + 88))
  {
    unsigned int v14 = "fTimeoutCallback";
    int v15 = 25;
    goto LABEL_10;
  }
  if (!*(void *)(a1 + 32))
  {
    unsigned int v14 = "fDispatchQueue";
    int v15 = 26;
    goto LABEL_10;
  }
  if (!*(void *)(a1 + 24))
  {
    unsigned int v14 = "fSessionIdentifier";
    int v15 = 27;
LABEL_10:
    __assert_rtn("CarKeyTimeoutManager", "NIServerCarKeyTimeoutManager.mm", v15, v14);
  }
  unint64_t v11 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 24);
    int v16 = 138412290;
    uint64_t v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#alisha-tom,TimeoutManager is constructed for session identifier %@", (uint8_t *)&v16, 0xCu);
  }

  return a1;
}

void sub_1001FEBEC(_Unwind_Exception *a1)
{
  for (uint64_t i = 56; i != 32; i -= 8)

  unsigned int v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1001FEC50(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 16));
  id v3 = qword_1008ABDE0;
  if ((v2 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041E3E8(a1, v3);
    }
    __assert_rtn("~CarKeyTimeoutManager", "NIServerCarKeyTimeoutManager.mm", 34, "false");
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    int v8 = 138412290;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-tom,TimeoutManager is destructed for session identifier %@", (uint8_t *)&v8, 0xCu);
  }
  sub_1001D29EC((void *)(a1 + 64));
  for (uint64_t i = 56; i != 32; i -= 8)

  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_1001FED80(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100012C10(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1001FED90(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  sub_1001FEE60(a1);
  sub_1001FF5A0((void *)(a1 + 64));
  atomic_store(1u, (unsigned __int8 *)(a1 + 16));
  unsigned __int8 v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-tom,TimeoutManager is invalidated for session identifier %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1001FEE60(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  for (int i = 0; i != 3; ++i)
    sub_1001FF384(a1, i);
}

void sub_1001FEEA4(uint64_t a1, int a2, int a3)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  if (a3 == 1)
  {
    int v8 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 24);
      int v20 = 138412290;
      uint64_t v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Schedule timer for Session Requested monitoring. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001FF228(a1, 0, 5000000000, 0x989680uLL, 0);
  }
  else if (!a3)
  {
    unsigned int v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      int v20 = 138412290;
      uint64_t v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Cancel all timers (entering idle state). Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001FEE60(a1);
  }
  if (a2 == 1)
  {
    id v10 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 24);
      int v20 = 138412290;
      uint64_t v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Cancel timer for Session Requested monitoring. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001FF384(a1, 0);
  }
  if (a3 == 4)
  {
    uint64_t v12 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 24);
      int v20 = 138412290;
      uint64_t v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Schedule timer for awaiting suspend response monitoring. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001FF228(a1, 2, 5000000000, 0x989680uLL, 5);
  }
  if (a2 == 4)
  {
    unsigned int v14 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 24);
      int v20 = 138412290;
      uint64_t v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Cancel timer for awaiting suspend response monitoring. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001FF384(a1, 2);
  }
  if (a3 == 2)
  {
    int v16 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 24);
      int v20 = 138412290;
      uint64_t v21 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Schedule timer for suspension after ranging disallowed response. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001FF228(a1, 1, 1000000000, 0x989680uLL, 1);
  }
  if (a2 == 2)
  {
    int v18 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 24);
      int v20 = 138412290;
      uint64_t v21 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#alisha-tom,Cancel timer for suspension after ranging disallowed response. Session identifier %@", (uint8_t *)&v20, 0xCu);
    }
    sub_1001FF384(a1, 1);
  }
}

void sub_1001FF228(uint64_t a1, int a2, int64_t a3, uint64_t a4, int a5)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  sub_1001FF384(a1, a2);
  uint64_t v11 = *(void *)a1;
  id v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_source_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 32));
  uint64_t v13 = *(void **)(a1 + 40 + 8 * a2);
  *(void *)(a1 + 40 + 8 * a2) = v12;

  unsigned int v14 = *(NSObject **)(a1 + 40 + 8 * a2);
  dispatch_time_t v15 = dispatch_time(0, a3);
  dispatch_source_set_timer(v14, v15, 0xFFFFFFFFFFFFFFFFLL, a4);
  int v16 = *(NSObject **)(a1 + 40 + 8 * a2);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3321888768;
  void v17[2] = sub_1001FF3E8;
  void v17[3] = &unk_100859B30;
  __n128 v17[4] = a1;
  void v17[5] = v11;
  int v18 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v19 = a5;
  dispatch_source_set_event_handler(v16, v17);
  dispatch_resume(*(dispatch_object_t *)(a1 + 40 + 8 * a2));
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1001FF384(uint64_t a1, int a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  uint64_t v4 = a1 + 40;
  uint64_t v5 = *(NSObject **)(v4 + 8 * a2);
  if (v5)
  {
    dispatch_source_cancel(v5);
    unsigned int v6 = *(void **)(v4 + 8 * a2);
    *(void *)(v4 + 8 * a2) = 0;
  }
}

void sub_1001FF3E8(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 40))
      {
        double v6 = sub_100006C38();
        if (*(void *)(v3 + 88)) {
          sub_1001FF480(v3 + 64, *(_DWORD *)(a1 + 56), v6);
        }
      }
      sub_10001A970(v5);
    }
  }
}

void sub_1001FF46C(_Unwind_Exception *a1)
{
  sub_10001A970(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FF480(uint64_t a1, int a2, double a3)
{
  int v6 = a2;
  double v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, int *, double *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_1001FF4DC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1001FF4F8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_1001FF508(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1001FF5A0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001FF628@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085A3C8[a1]);
}

void *sub_1001FF63C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085A420[a1]);
}

void *sub_1001FF650@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085A468[a1]);
}

void *sub_1001FF664@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085A488[a1]);
}

void sub_1001FF6CC(id a1)
{
  id v1 = [[NIServerHomeDeviceService alloc] _initInternal];
  uint64_t v2 = (void *)qword_1008A52E0;
  qword_1008A52E0 = (uint64_t)v1;
}

void sub_1001FF880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_1001FF8A0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _internalPrintableState];
  uint64_t v2 = sub_10002DA78(@"Home Device Service", v1);

  return v2;
}

void sub_1001FF8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001FF9E8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)];

  uint64_t v3 = qword_1008ABDE0;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v5 = *(void *)(a1 + 48);
      int v11 = 138478083;
      uint64_t v12 = v4;
      __int16 v13 = 2113;
      v14[0] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ses-home,Service updated client configuration for %{private}@. Configuration: %{private}@", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    int v6 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 16) count];
      uint64_t v9 = *(void *)(a1 + 48);
      int v11 = 138478339;
      uint64_t v12 = v7;
      __int16 v13 = 1024;
      LODWORD(v14[0]) = v8;
      WORD2(v14[0]) = 2112;
      *(void *)((char *)v14 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ses-home,Service added client %{private}@ (%d previous clients). Configuration: %@", (uint8_t *)&v11, 0x1Cu);
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 16) setObject:*(void *)(a1 + 56) forKey:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 24) setObject:*(void *)(a1 + 48) forKey:*(void *)(a1 + 40)];
  return [*(id *)(a1 + 32) _processCommonConfiguration];
}

void sub_1001FFB70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001FFC20(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = [[*(id *)(*(void *)(a1 + 40) + 24) objectForKey:];

    if (v2)
    {
      uint64_t v3 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 32);
        int v5 = 138477827;
        uint64_t v6 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#ses-home,Service removed client %{private}@", (uint8_t *)&v5, 0xCu);
      }
      [*(id *)(*(void *)(a1 + 40) + 16) removeObjectForKey:*(void *)(a1 + 32)];
      [*(id *)(*(void *)(a1 + 40) + 24) removeObjectForKey:*(void *)(a1 + 32)];
      [*(id *)(a1 + 40) _processCommonConfiguration];
    }
  }
}

uint64_t sub_1001FFDFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001FFE0C(uint64_t a1)
{
}

void sub_1001FFE14(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _internalPrintableState];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001FFF08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100200040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10020006C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([v4 minimumPreferredUpdatedRate] != (id)2
    && +[NIInternalUtils nearbyObjectUpdateRate:isGreaterThan:](NIInternalUtils, "nearbyObjectUpdateRate:isGreaterThan:", [v4 minimumPreferredUpdatedRate], *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v4 minimumPreferredUpdatedRate];
  }
}

void sub_1002000FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100200530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100200D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002015AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Unwind_Resume(a1);
}

void sub_1002016E8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10041E4C4();
  }
}

void sub_10020173C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) remote];
  [v2 didUpdateHomeDeviceUWBRangingAvailability:*(unsigned __int8 *)(*(void *)(a1 + 40) + 97)];
}

void sub_10020179C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002017B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v8 = WeakRetained;
  if (v5 && !v6 && WeakRetained)
  {
    [v5 magneticField];
    float64_t v16 = v9;
    [v5 magneticField];
    float64_t v15 = v10;
    [v5 magneticField];
    double v12 = v11;
    [v5 timestamp];
    v13.f64[0] = v16;
    v13.f64[1] = v15;
    *(float32x2_t *)&v13.f64[0] = vcvt_f32_f64(v13);
    float v14 = v12;
    *(float *)&v13.f64[1] = v14;
    float64x2_t v17 = v13;
    [v8 didReceiveMagnetometerData:&v17 at:x0];
  }
}

void sub_100201870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100201990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100201C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100201ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100202060(_Unwind_Exception *a1)
{
  id v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1002022AC(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_10020257C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100202674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002028A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10020297C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  double v10 = v9;

  a9.super_class = (Class)NIServerHomeDeviceSession;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100203A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a30) {
    sub_10001A970(a30);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100203CA8(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1) {
    goto LABEL_52;
  }
  if ([v1 hasPrefix:@"AudioAccessory"])
  {
    uint64_t v22 = 0;
    id v3 = v2;
    int v4 = sscanf((const char *)[v3 UTF8String], "AudioAccessory%d,%d", (char *)&v22 + 4, &v22);
    id v5 = (id)qword_1008ABDE0;
    id v6 = v5;
    if (v4 <= 1)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10041E8CC((uint64_t)[v3 UTF8String], (uint64_t)buf);
      }
LABEL_23:

      goto LABEL_52;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      id v19 = [v3 UTF8String];
      *(_DWORD *)std::string buf = 136315650;
      id v24 = v19;
      __int16 v25 = 1024;
      int v26 = HIDWORD(v22);
      __int16 v27 = 1024;
      int v28 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ses-home,#allow-list model %s decoded as audio accessory %d, %d", buf, 0x18u);
    }

    uint64_t v10 = 999;
    if (HIDWORD(v22) == 6)
    {
      if (v22 == 1) {
        uint64_t v10 = 201;
      }
      else {
        uint64_t v10 = 999;
      }
    }
    else if (HIDWORD(v22) == 5)
    {
      if (v22 == 1) {
        uint64_t v10 = 200;
      }
      else {
        uint64_t v10 = 999;
      }
    }
  }
  else
  {
    if ([v2 hasPrefix:@"iPhone"])
    {
      uint64_t v22 = 0;
      id v7 = v2;
      int v8 = sscanf((const char *)[v7 UTF8String], "iPhone%d,%d", (char *)&v22 + 4, &v22);
      double v9 = (id)qword_1008ABDE0;
      id v6 = v9;
      if (v8 > 1)
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          id v20 = [v7 UTF8String];
          *(_DWORD *)std::string buf = 136315650;
          id v24 = v20;
          __int16 v25 = 1024;
          int v26 = HIDWORD(v22);
          __int16 v27 = 1024;
          int v28 = v22;
          _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ses-home,#allow-list model %s decoded as iphone %d, %d", buf, 0x18u);
        }

        switch(HIDWORD(v22))
        {
          case 0xC:
            int v14 = v22 - 1;
            if ((v22 - 1) >= 5) {
              goto LABEL_52;
            }
            float64_t v15 = (unsigned int *)&unk_1004BB8C0;
            goto LABEL_51;
          case 0xD:
            unsigned int v16 = v22 - 1;
            unsigned int v17 = v22 + 2;
            goto LABEL_44;
          case 0xE:
            int v14 = v22 - 2;
            if ((v22 - 2) >= 7) {
              goto LABEL_52;
            }
            float64_t v15 = (unsigned int *)&unk_1004BB8D4;
            goto LABEL_51;
          case 0xF:
            unsigned int v16 = v22 - 2;
            unsigned int v17 = v22 + 11;
LABEL_44:
            if (v16 >= 4) {
              uint64_t v10 = 999;
            }
            else {
              uint64_t v10 = v17;
            }
            goto LABEL_53;
          case 0x10:
            int v14 = v22 - 1;
            if ((v22 - 1) >= 3) {
              goto LABEL_52;
            }
            float64_t v15 = (unsigned int *)&unk_1004BB8F0;
            goto LABEL_51;
          case 0x11:
            int v14 = v22 - 1;
            if ((v22 - 1) >= 4) {
              goto LABEL_52;
            }
            float64_t v15 = (unsigned int *)&unk_1004BAAA0;
            goto LABEL_51;
          default:
            goto LABEL_52;
        }
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10041E908((uint64_t)[v7 UTF8String], (uint64_t)buf);
      }
      goto LABEL_23;
    }
    if (![v2 hasPrefix:@"Watch"])
    {
LABEL_52:
      uint64_t v10 = 999;
      goto LABEL_53;
    }
    uint64_t v22 = 0;
    id v11 = v2;
    int v12 = sscanf((const char *)[v11 UTF8String], "Watch%d,%d", (char *)&v22 + 4, &v22);
    float64x2_t v13 = (id)qword_1008ABDE0;
    id v6 = v13;
    if (v12 <= 1)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_10041E944((uint64_t)[v11 UTF8String], (uint64_t)buf);
      }
      goto LABEL_23;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      id v21 = [v11 UTF8String];
      *(_DWORD *)std::string buf = 136315650;
      id v24 = v21;
      __int16 v25 = 1024;
      int v26 = HIDWORD(v22);
      __int16 v27 = 1024;
      int v28 = v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ses-home,#allow-list model %s decoded as watch %d, %d", buf, 0x18u);
    }

    if (HIDWORD(v22) == 7)
    {
      int v14 = v22 - 1;
      if ((v22 - 1) >= 0xB) {
        goto LABEL_52;
      }
      float64_t v15 = (unsigned int *)&unk_1004BB944;
    }
    else
    {
      if (HIDWORD(v22) != 6) {
        goto LABEL_52;
      }
      int v14 = v22 - 1;
      if ((v22 - 1) >= 0x12) {
        goto LABEL_52;
      }
      float64_t v15 = (unsigned int *)&unk_1004BB8FC;
    }
LABEL_51:
    uint64_t v10 = v15[v14];
  }
LABEL_53:

  return v10;
}

void sub_100204160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100204238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100204E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a24) {
    sub_10001A970(a24);
  }

  _Unwind_Resume(a1);
}

void sub_1002051B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100205440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100205634(void **a1, _OWORD *a2, double a3)
{
  unint64_t v8 = (unint64_t)a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  double v9 = *(_OWORD **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = ((char *)v9 - (unsigned char *)*a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_1000267C4();
    }
    uint64_t v12 = v7 - (void)*a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      float64_t v15 = (char *)sub_10015344C(v6, v14);
    }
    else {
      float64_t v15 = 0;
    }
    unsigned int v16 = &v15[16 * v11];
    unsigned int v17 = &v15[16 * v14];
    *(_OWORD *)unsigned int v16 = *a2;
    uint64_t v10 = v16 + 16;
    id v19 = (char *)*a1;
    int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
      }
      while (v18 != v19);
      int v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *double v9 = *a2;
    uint64_t v10 = v9 + 1;
  }
  unint64_t v21 = (unint64_t)a1[5];
  a1[1] = v10;
  uint64_t v22 = (double *)a1[4];
  if ((unint64_t)v22 >= v21)
  {
    id v24 = (double *)a1[3];
    uint64_t v25 = v22 - v24;
    if ((unint64_t)(v25 + 1) >> 61) {
      sub_1000267C4();
    }
    unint64_t v26 = v21 - (void)v24;
    unint64_t v27 = (uint64_t)(v21 - (void)v24) >> 2;
    if (v27 <= v25 + 1) {
      unint64_t v27 = v25 + 1;
    }
    if (v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28)
    {
      int v29 = (char *)sub_100056BF0((uint64_t)(a1 + 5), v28);
      id v24 = (double *)a1[3];
      uint64_t v22 = (double *)a1[4];
    }
    else
    {
      int v29 = 0;
    }
    int v30 = (double *)&v29[8 * v25];
    std::string v31 = &v29[8 * v28];
    *int v30 = a3;
    id v23 = v30 + 1;
    while (v22 != v24)
    {
      uint64_t v32 = *((void *)v22-- - 1);
      *((void *)v30-- - 1) = v32;
    }
    a1[3] = v30;
    a1[4] = v23;
    a1[5] = v31;
    if (v24) {
      operator delete(v24);
    }
  }
  else
  {
    *uint64_t v22 = a3;
    id v23 = v22 + 1;
  }
  a1[4] = v23;
  sub_10020B120(a1);
  if (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4 != ((unsigned char *)a1[4] - (unsigned char *)a1[3]) >> 3) {
    sub_10041EC44();
  }
}

void sub_100205C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100205D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100205EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100206024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002062D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void sub_100206728(_Unwind_Exception *a1)
{
  int v4 = v2;

  _Unwind_Resume(a1);
}

void sub_100206E78(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10001A970(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100207188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a18) {
    sub_10001A970(a18);
  }
  if (a20) {
    sub_10001A970(a20);
  }
  sub_100026B74(&a21);
  sub_100026AF0(&a25);
  sub_100026A6C((void *)(v28 - 120));
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002075F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a15) {
    sub_10001A970(a15);
  }
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002077AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100207AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100207C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100207E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002081C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100208350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100208600(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1002087F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100208C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10001A970(a11);
  }

  _Unwind_Resume(a1);
}

void sub_100208FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100209108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100209364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100209660(void *a1)
{
  uint64_t result = (uint64_t)(a1[4] - a1[3]) >> 3;
  if (result != (uint64_t)(a1[1] - *a1) >> 4) {
    sub_10041F43C();
  }
  return result;
}

void sub_100209800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002098D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100209A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100209BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100209BDC(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 96))
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v9 = *(id *)(a1 + 40);
    id v10 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v10)
    {
      char v11 = 0;
      uint64_t v12 = *(void *)v18;
      do
      {
        for (int i = 0; i != v10; int i = (char *)i + 1)
        {
          if (*(void *)v18 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(id *)(*((void *)&v17 + 1) + 8 * i);
          if ([v14 distanceMeasurementQuality] == (id)2
            || [v14 distanceMeasurementQuality] == (id)3)
          {
            char v11 = 1;
          }
        }
        id v10 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v10);

      if (v11)
      {
        double v15 = sub_100006C38();
        sub_1002D7B80(*(void *)(*(void *)(a1 + 32) + 352), v15);
        *(unsigned char *)(*(void *)(a1 + 32) + 96) = 1;
      }
    }
    else
    {
    }
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 216);
  if (v2) {
    sub_10028DE34(v2, *(void **)(a1 + 40));
  }
  id v3 = +[NSUserDefaults standardUserDefaults];
  unsigned __int8 v4 = [v3 BOOLForKey:@"HomeDeviceSessionBTLeechingEnabled"];

  v16.receiver = *(id *)(a1 + 32);
  v16.super_class = (Class)NIServerHomeDeviceSession;
  id v5 = [super resourcesManager];
  uint64_t v6 = v5;
  if (*(unsigned char *)(*(void *)(a1 + 32) + 72)) {
    char v7 = 1;
  }
  else {
    char v7 = v4;
  }
  if (v7)
  {
    unint64_t v8 = [v5 remote];
    [v8 didUpdateNearbyObjects:*(void *)(a1 + 40)];
  }
}

void sub_100209E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020A02C(_Unwind_Exception *exception_object)
{
}

void sub_10020A050(uint64_t a1)
{
  [*(id *)(a1 + 32) adjustResponderThrottleRateIfNeeded:*(void *)(a1 + 40) object:*(void *)(a1 + 48)];
  if ((*(void *)(a1 + 40) || *(void *)(a1 + 56)) && !*(unsigned char *)(a1 + 64))
  {
    double v2 = sub_100006C38();
    uint64_t v3 = *(void *)(a1 + 32);
    unsigned __int8 v4 = [*(id *)(a1 + 48) discoveryToken];
    sub_100237368(v3 + 240, (unint64_t)[v4 hash], *(void **)(a1 + 40), v2);

    uint64_t v5 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v5 + 72))
    {
      unsigned __int8 v6 = [*(id *)(v5 + 720) isAnchor];
      uint64_t v7 = *(void *)(a1 + 32);
      if ((v6 & 1) != 0 || *(void *)(v7 + 600) == 2)
      {
        sub_1001A4EE8(v7 + 608);
        v17.receiver = *(id *)(a1 + 32);
        v17.super_class = (Class)NIServerHomeDeviceSession;
        unint64_t v8 = [super resourcesManager];
        id v9 = [v8 remote];
        [v9 object:*(void *)(a1 + 48) didUpdateRegion:*(void *)(a1 + 40) previousRegion:*(void *)(a1 + 56)];
      }
      else
      {
        char v11 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#ses-home,#region, region transition rejected because motion state is not moving, the region update event is cached", buf, 2u);
        }
        uint64_t v12 = *(void **)(a1 + 40);
        uint64_t v13 = *(void **)(a1 + 56);
        id v14 = *(id *)(a1 + 48);
        id v15 = v12;
        id v16 = v13;
        *(double *)std::string buf = v2;
        id v19 = v14;
        id v20 = v15;
        id v21 = v16;
        sub_10020A29C(*(void *)(a1 + 32) + 608, buf);
      }
    }
    else
    {
      id v10 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ses-home,#regions, didUpdateRegion:previousRegion. Should deliver is False.", buf, 2u);
      }
    }
  }
}

void sub_10020A26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10020A334((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10020A29C(uint64_t a1, void *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *(void *)a1 = *a2;
  if (v4)
  {
    uint64_t v5 = a2[1];
    a2[1] = 0;
    unsigned __int8 v6 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v5;

    uint64_t v7 = a2[2];
    a2[2] = 0;
    unint64_t v8 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v7;

    uint64_t v9 = a2[3];
    a2[3] = 0;
    id v10 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v9;
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 1);
    a2[1] = 0;
    a2[2] = 0;
    *(_OWORD *)(a1 + 8) = v11;
    uint64_t v12 = a2[3];
    a2[3] = 0;
    *(void *)(a1 + 24) = v12;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

id *sub_10020A334(id *a1)
{
  return a1;
}

void sub_10020A514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020A5B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 208);
  int v4 = (id)qword_1008ABDE0;
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3 == v2)
  {
    if (v5)
    {
      unsigned __int8 v6 = +[NIInternalUtils NINearbyObjectUpdateRateToString:*(void *)(a1 + 40)];
      int v10 = 136315138;
      long long v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-home,didUpdateMinimumPreferredUpdateRate. %s (no change)", (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    if (v5)
    {
      uint64_t v7 = +[NIInternalUtils NINearbyObjectUpdateRateToString:*(void *)(*(void *)(a1 + 32) + 208)];
      unint64_t v8 = +[NIInternalUtils NINearbyObjectUpdateRateToString:*(void *)(a1 + 40)];
      int v10 = 136315394;
      long long v11 = v7;
      __int16 v12 = 2080;
      uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-home,didUpdateMinimumPreferredUpdateRate. %s -> %s", (uint8_t *)&v10, 0x16u);
    }

    *(void *)(*(void *)(a1 + 32) + 208) = *(void *)(a1 + 40);
    uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 64);
    if (v9) {
      [v9 probeRegions];
    }
  }
}

void sub_10020A728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020AC14(_Unwind_Exception *a1)
{
  if (v3) {
    sub_10001A970(v3);
  }

  _Unwind_Resume(a1);
}

void sub_10020AD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__n128 *sub_10020B078(__n128 *a1, uint64_t a2)
{
  a1->n128_u8[0] = 0;
  a1[3].n128_u8[0] = 0;
  sub_10020B0BC(a1, a2);
  return a1;
}

void sub_10020B0A8(_Unwind_Exception *a1)
{
  sub_10002ED14(v1);
  _Unwind_Resume(a1);
}

__n128 sub_10020B0BC(__n128 *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48))
  {
    unint64_t v4 = *(void *)a2;
    a1->n128_u32[2] = *(_DWORD *)(a2 + 8);
    a1->n128_u64[0] = v4;
    a1[1].n128_u64[0] = (unint64_t)*(id *)(a2 + 16);
    a1[1].n128_u64[1] = (unint64_t)*(id *)(a2 + 24);
    __n128 result = *(__n128 *)(a2 + 32);
    a1[2] = result;
    a1[3].n128_u8[0] = 1;
  }
  return result;
}

void sub_10020B120(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v1 = a1[4];
  if (v1 != v2)
  {
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    double v6 = *(double *)(v1 - 8);
    std::string __p = 0;
    unint64_t v26 = 0;
    unint64_t v27 = 0;
    double v7 = v6 + -0.01;
    do
    {
      if (*(double *)(v2 + 8 * v5) < v7)
      {
        if (v4 >= v27)
        {
          uint64_t v9 = __p;
          uint64_t v10 = (v4 - __p) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            sub_1000267C4();
          }
          uint64_t v12 = v27 - __p;
          if ((v27 - __p) >> 1 > v11) {
            unint64_t v11 = v12 >> 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            id v14 = (char *)sub_10003B54C((uint64_t)&v27, v13);
            uint64_t v9 = __p;
            unint64_t v4 = v26;
          }
          else
          {
            id v14 = 0;
          }
          id v15 = &v14[4 * v10];
          *(_DWORD *)id v15 = v5;
          unint64_t v8 = v15 + 4;
          while (v4 != v9)
          {
            int v16 = *((_DWORD *)v4 - 1);
            v4 -= 4;
            *((_DWORD *)v15 - 1) = v16;
            v15 -= 4;
          }
          std::string __p = v15;
          unint64_t v27 = &v14[4 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v4 = v5;
          unint64_t v8 = v4 + 4;
        }
        unint64_t v26 = v8;
        unint64_t v4 = v8;
        uint64_t v2 = a1[3];
        uint64_t v1 = a1[4];
      }
      ++v5;
    }
    while (v5 < (v1 - v2) >> 3);
    objc_super v17 = __p;
    if (v4 == __p)
    {
      if (!__p) {
        return;
      }
    }
    else
    {
      objc_super v17 = v4;
      do
      {
        uint64_t v19 = *((int *)v17 - 1);
        v17 -= 4;
        uint64_t v18 = v19;
        uint64_t v20 = a1[1];
        uint64_t v21 = *a1 + 16 * v19;
        uint64_t v22 = v20 - (v21 + 16);
        if (v20 != v21 + 16)
        {
          memmove((void *)v21, (const void *)(v21 + 16), v20 - (v21 + 16));
          uint64_t v18 = *((int *)v4 - 1);
          uint64_t v1 = a1[4];
        }
        a1[1] = v21 + v22;
        uint64_t v23 = a1[3] + 8 * v18;
        uint64_t v24 = v1 - (v23 + 8);
        if (v1 != v23 + 8) {
          memmove((void *)(a1[3] + 8 * v18), (const void *)(v23 + 8), v1 - (v23 + 8));
        }
        uint64_t v1 = v23 + v24;
        a1[4] = v23 + v24;
        unint64_t v4 = v17;
      }
      while (v17 != __p);
    }
    operator delete(v17);
  }
}

void sub_10020B300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10020B320(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10020B320(a1, *a2);
    sub_10020B320(a1, a2[1]);
    sub_10020B37C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10020B37C(uint64_t a1)
{
  sub_10019C998(a1 + 152, *(char **)(a1 + 160));
  sub_10003E96C(a1 + 128, *(void **)(a1 + 136));
  uint64_t v2 = *(void **)(a1 + 112);

  sub_10003E96C(a1 + 104, v2);
}

uint64_t sub_10020B3CC(uint64_t a1)
{
  return a1;
}

void sub_10020B3F8(uint64_t a1)
{
  operator delete();
}

void *sub_10020B444(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100859C28;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020B49C(uint64_t a1, void *a2)
{
  *a2 = off_100859C28;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020B4E4(uint64_t a1)
{
}

void sub_10020B4EC(id *a1)
{
  operator delete(a1);
}

id sub_10020B528(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  unint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v5 = "unavailable";
    if (v3) {
      unint64_t v5 = "available";
    }
    int v7 = 136315138;
    unint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-home,current wifi availability: %s", (uint8_t *)&v7, 0xCu);
  }
  return [*(id *)(a1 + 8) _handleWifiRangingAvailableUpdate:v3 != 0];
}

uint64_t sub_10020B600(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100859C88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020B640()
{
  return &off_100859C88;
}

uint64_t sub_10020B64C(uint64_t a1)
{
  return a1;
}

void sub_10020B678(uint64_t a1)
{
  operator delete();
}

void *sub_10020B6C4(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100859CA8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020B71C(uint64_t a1, void *a2)
{
  *a2 = off_100859CA8;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020B764(uint64_t a1)
{
}

void sub_10020B76C(id *a1)
{
  operator delete(a1);
}

id sub_10020B7A8(uint64_t a1, double *a2, unsigned int *a3, unsigned int *a4)
{
  return _[*(id *)(a1 + 8) _handleBackoffManagerRecommendation:*a3 machContinuousTimeSec:*a4 screenState:*a2];
}

uint64_t sub_10020B7BC(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100859D08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020B7FC()
{
  return &off_100859D08;
}

uint64_t sub_10020B808(uint64_t a1)
{
  return a1;
}

void sub_10020B834(uint64_t a1)
{
  operator delete();
}

void *sub_10020B880(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100859D28;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020B8D8(uint64_t a1, void *a2)
{
  *a2 = off_100859D28;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020B920(uint64_t a1)
{
}

void sub_10020B928(id *a1)
{
  operator delete(a1);
}

id sub_10020B964(uint64_t a1, unsigned int *a2)
{
  return _[*(id *)(a1 + 8) _handleMotionStateChange:*a2];
}

uint64_t sub_10020B970(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100859D88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020B9B0()
{
  return &off_100859D88;
}

uint64_t sub_10020B9BC(uint64_t a1)
{
  return a1;
}

void sub_10020B9E8(uint64_t a1)
{
  operator delete();
}

void *sub_10020BA34(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100859DA8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020BA8C(uint64_t a1, void *a2)
{
  *a2 = off_100859DA8;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020BAD4(uint64_t a1)
{
}

void sub_10020BADC(id *a1)
{
  operator delete(a1);
}

id sub_10020BB18(uint64_t a1, unsigned int *a2)
{
  return _[*(id *)(a1 + 8) _handleScreenStateChange:*a2];
}

uint64_t sub_10020BB24(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100859E08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020BB64()
{
  return &off_100859E08;
}

uint64_t sub_10020BB70(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10002A6C0(a1, a2, (uint64_t)&__p);
  int v3 = __p;
  std::string __p = 0;
  if (v3) {
    sub_10020BBBC((uint64_t)&v6, v3);
  }
  return v2;
}

void sub_10020BBBC(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      sub_10001A970(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_10020BC18(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4, uint64_t a5)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v5 = *a2;
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
    }
    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v5);
    if (v10)
    {
      id result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if (result[2] == v7) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v5) {
              break;
            }
          }
          id result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_10020BE50(a1, *a2, a4, a5, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_10002AA24(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
      else {
        unint64_t v5 = v7;
      }
    }
    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v5);
  if (v19)
  {
    void *v21 = *v19;
    void *v19 = v21;
  }
  else
  {
    void *v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v5) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  id result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_10020BE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_10020BBBC((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020BE50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x40uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_10020BEE8((uint64_t)(v10 + 2), *a3, *(uint64_t **)a4, *(long long **)(a4 + 8));
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_10020BECC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10020BBBC(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10020BEE8(uint64_t a1, void *a2, uint64_t *a3, long long *a4)
{
  *(void *)a1 = *a2;
  uint64_t v6 = *a3;
  unint64_t v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v7 = *a4;
    *(void *)(a1 + 40) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v7;
    sub_10001A970(v5);
  }
  else
  {
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = 0;
    long long v8 = *a4;
    *(void *)(a1 + 40) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v8;
  }
  return a1;
}

void *sub_10020BF5C(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (int i = *v10; i; int i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  int i = operator new(0x28uLL);
  *int i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *int i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *int i = *v13;
  *float v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10020C190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10020BBBC(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10020C1AC(void *a1, unint64_t *a2)
{
  uint64_t result = sub_100056B3C(a1, a2);
  if (result)
  {
    sub_10020BB70(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *sub_10020C1E4(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (int i = *v11; i; int i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  float v14 = (void *)(a1 + 16);
  int i = operator new(0x28uLL);
  *int i = 0;
  i[1] = v8;
  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  i[2] = *a3;
  i[3] = v16;
  i[4] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_10002AA24(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *int i = *v24;
LABEL_40:
    void *v24 = i;
    goto LABEL_41;
  }
  *int i = *v14;
  void *v14 = i;
  *(void *)(v23 + 8 * v4) = v14;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10020C42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10020BBBC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_10020C448(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100859E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10020C468(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100859E28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10020C4BC(uint64_t a1)
{
  return sub_10002E140(a1 + 24);
}

uint64_t sub_10020C4C8(uint64_t a1)
{
  return a1;
}

void sub_10020C4F4(uint64_t a1)
{
  operator delete();
}

void *sub_10020C540(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100859E78;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020C598(uint64_t a1, void *a2)
{
  *a2 = off_100859E78;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020C5E0(uint64_t a1)
{
}

void sub_10020C5E8(id *a1)
{
  operator delete(a1);
}

void sub_10020C624(uint64_t a1, long long **a2)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_10020C9B4(&v6, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 8) + 80);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  v4[2] = sub_10020C79C;
  v4[3] = &unk_100859EE0;
  memset(v5, 0, sizeof(v5));
  sub_10020C9B4(v5, v6, v7, 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (char *)v6) >> 3));
  void v4[4] = *(void *)(a1 + 8);
  dispatch_async(v3, v4);
  unint64_t v9 = (long long **)v5;
  sub_1000287F0((void ***)&v9);
  unint64_t v9 = &v6;
  sub_1000287F0((void ***)&v9);
}

void sub_10020C738(_Unwind_Exception *a1)
{
  *(void *)(v2 - 56) = v1;
  sub_1000287F0((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_10020C750(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100859F10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020C790()
{
  return &off_100859F10;
}

void sub_10020C79C(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  uint64_t v11 = a1 + 40;
  uint64_t v3 = *(uint64_t **)(a1 + 48);
  if (v2 == v3)
  {
LABEL_5:
    [*(id *)(*(void *)(a1 + 32) + 64) acceptWiFiRangeResults:v11];
  }
  else
  {
    while (1)
    {
      uint64_t v4 = *v2;
      v13.receiver = *(id *)(a1 + 32);
      v13.super_class = (Class)NIServerHomeDeviceSession;
      uint64_t v5 = [super discoveryTokenFromIdentifier:v4];
      if (!v5) {
        break;
      }
      uint64_t v6 = (void *)v5;
      v12.receiver = *(id *)(a1 + 32);
      v12.super_class = (Class)NIServerHomeDeviceSession;
      unint64_t v7 = [super resourcesManager];
      uint64_t v8 = [v7 lifecycleSupervisor];
      unsigned __int8 v9 = [v8 isTrackingPeer:v6];

      if ((v9 & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_10041F86C();
        }

        return;
      }
      uint8x8_t v10 = [v7 lifecycleSupervisor];
      [v10 measurementReceivedForToken:v6 contTimestamp:sub_100006C38()];

      v2 += 7;
      if (v2 == v3) {
        goto LABEL_5;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041F804();
    }
  }
}

void sub_10020C92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10020C958(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return sub_10020C9B4(v2, *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
}

void sub_10020C988(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_1000287F0(&v1);
}

void *sub_10020C9B4(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1001504A8(result, a4);
    id result = (void *)sub_10020CA3C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10020CA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000287F0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10020CA3C(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      long long v7 = *v6;
      *(_DWORD *)(v4 + 16) = *((_DWORD *)v6 + 4);
      *(_OWORD *)uint64_t v4 = v7;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      sub_1000266F4((void *)(v4 + 24), *((const void **)v6 + 3), *((void *)v6 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v6 + 4) - *((void *)v6 + 3)) >> 3));
      *(_DWORD *)(v4 + 48) = *((_DWORD *)v6 + 12);
      uint64_t v4 = v12 + 56;
      v12 += 56;
      uint64_t v6 = (long long *)((char *)v6 + 56);
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_100029D18((uint64_t)v9);
  return v4;
}

void sub_10020CB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10020CB14(uint64_t a1)
{
  return a1;
}

void sub_10020CB40(uint64_t a1)
{
  operator delete();
}

void *sub_10020CB8C(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100859F30;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020CBE4(uint64_t a1, void *a2)
{
  *a2 = off_100859F30;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020CC2C(uint64_t a1)
{
}

void sub_10020CC34(id *a1)
{
  operator delete(a1);
}

void sub_10020CC70(uint64_t a1, int *a2)
{
  sub_10002EC8C(*a2, __p);
  if (v13 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  uint64_t v4 = +[NSString stringWithUTF8String:v3];
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10041F8D4();
  }
  NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
  uint64_t v15 = v4;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
  uint64_t v6 = +[NSError errorWithDomain:@"com.apple.NearbyInteraction" code:-5887 userInfo:v5];

  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(NSObject **)(v7 + 80);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10020CEA0;
  v10[3] = &unk_100846588;
  void v10[4] = v7;
  id v11 = v6;
  id v9 = v6;
  dispatch_async(v8, v10);

  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10020CE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10020CE54(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100859F90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020CE94()
{
  return &off_100859F90;
}

void sub_10020CEA0(uint64_t a1)
{
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)NIServerHomeDeviceSession;
  uint64_t v2 = [super resourcesManager];
  uint64_t v3 = [v2 remote];
  [v3 uwbSessionDidFailWithError:*(void *)(a1 + 40)];
}

void sub_10020CF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10020CF30(uint64_t a1)
{
  return a1;
}

void sub_10020CF5C(uint64_t a1)
{
  operator delete();
}

void *sub_10020CFA8(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100859FB0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020D000(uint64_t a1, void *a2)
{
  *a2 = off_100859FB0;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020D048(uint64_t a1)
{
}

void sub_10020D050(id *a1)
{
  operator delete(a1);
}

void sub_10020D08C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  objc_super v4 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10002ECD0(v3, &__p);
    uint64_t v5 = v11 >= 0 ? &__p : (objc_super *)__p.receiver;
    *(_DWORD *)std::string buf = 136315138;
    char v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ses-home,WiFi readiness update: %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p.receiver);
    }
  }

  __p.receiver = *(id *)(a1 + 8);
  __p.super_class = (Class)NIServerHomeDeviceSession;
  uint64_t v6 = [super resourcesManager];
  uint64_t v7 = [v6 wifiResource];
  unsigned __int8 v8 = [v7 deviceCapabilities];

  if (*(unsigned char *)(*(void *)(a1 + 8) + 97)) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = (v8 & 1) == 0;
  }
  if (!v9)
  {
    if (v3)
    {
      if (v3 == 1) {
        [v6 interruptSessionWithReason:5 monotonicTimeSeconds:sub_100006C38()];
      }
    }
    else
    {
      [v6 interruptionReasonEnded:5 monotonicTimeSeconds:sub_100006C38()];
    }
  }
}

void sub_10020D210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10020D238(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_10085A010)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020D278()
{
  return &off_10085A010;
}

uint64_t sub_10020D284(uint64_t a1)
{
  return a1;
}

void sub_10020D2B0(uint64_t a1)
{
  operator delete();
}

void *sub_10020D2FC(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_10085A030;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020D354(uint64_t a1, void *a2)
{
  *a2 = off_10085A030;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020D39C(uint64_t a1)
{
}

void sub_10020D3A4(id *a1)
{
  operator delete(a1);
}

void sub_10020D3E0(uint64_t a1, void *a2, uint64_t *a3)
{
  int v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(NSObject **)(v4 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10020D4D0;
  block[3] = &unk_100857C10;
  uint64_t v6 = *a3;
  void block[4] = v4;
  void block[5] = v6;
  int v8 = *((_DWORD *)a3 + 2);
  dispatch_async(v5, block);
  if (v3) {
    sub_10001A970(v3);
  }
}

uint64_t sub_10020D484(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_10085A090)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020D4C4()
{
  return &off_10085A090;
}

id sub_10020D4D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) serviceRequestDidUpdateStatus:*(void *)(a1 + 40) *(unsigned int *)(a1 + 48)];
}

uint64_t sub_10020D4E0(uint64_t a1)
{
  return a1;
}

void sub_10020D50C(uint64_t a1)
{
  operator delete();
}

void *sub_10020D558(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_10085A0B0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020D5B0(uint64_t a1, void *a2)
{
  *a2 = off_10085A0B0;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020D5F8(uint64_t a1)
{
}

void sub_10020D600(id *a1)
{
  operator delete(a1);
}

void sub_10020D63C(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  long long v6 = a3[1];
  long long v22 = *a3;
  long long v23 = v6;
  long long v24 = a3[2];
  sub_1001751A0(v25, (uint64_t)(a3 + 3));
  sub_10016E330(v26, (uint64_t)(a3 + 38));
  sub_1001751F8(v29, (__n128 *)((char *)a3 + 760));
  memcpy(v33, a3 + 55, sizeof(v33));
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(NSObject **)(v7 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  long long v11 = v23;
  long long v12 = v24;
  block[2] = sub_10020D93C;
  block[3] = &unk_1008588F8;
  void block[4] = v7;
  long long v10 = v22;
  sub_1001751A0(v13, (uint64_t)v25);
  sub_10016E330(v14, (uint64_t)v26);
  sub_1001751F8(v17, v29);
  memcpy(v21, v33, sizeof(v21));
  dispatch_async(v8, block);
  if (v20 && __p)
  {
    BOOL v19 = __p;
    operator delete(__p);
  }
  if (v16) {
    sub_10003E96C((uint64_t)v15, v15[1]);
  }
  sub_10015DC28((uint64_t)v13);
  if (v32 && v30)
  {
    std::string v31 = v30;
    operator delete(v30);
  }
  if (v28) {
    sub_10003E96C((uint64_t)v27, v27[1]);
  }
  sub_10015DC28((uint64_t)v25);
  if (v5) {
    sub_10001A970(v5);
  }
}

void sub_10020D844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (LOBYTE(STACK[0x320])) {
    sub_100412860((uint64_t)va);
  }
  sub_10015DC28(v4);
  if (LOBYTE(STACK[0x948]))
  {
    long long v6 = (void *)STACK[0x920];
    if (STACK[0x920])
    {
      STACK[0x928] = (unint64_t)v6;
      operator delete(v6);
    }
  }
  if (LOBYTE(STACK[0x8D0])) {
    sub_10003E96C((uint64_t)&STACK[0x850], (void *)STACK[0x858]);
  }
  sub_10015DC28(v3);
  if (v2) {
    sub_10001A970(v2);
  }
  _Unwind_Resume(a1);
}

void sub_10020D8E4()
{
  if (!v0) {
    JUMPOUT(0x10020D8DCLL);
  }
  JUMPOUT(0x10020D8D4);
}

uint64_t sub_10020D8F0(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_10085A110)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020D930()
{
  return &off_10085A110;
}

id sub_10020D93C(uint64_t a1)
{
  return [*(id *)(a1 + 32) didReceiveNewSolution:a1 + 40];
}

uint64_t sub_10020D94C(uint64_t a1)
{
  return a1;
}

void sub_10020D978(uint64_t a1)
{
  operator delete();
}

void *sub_10020D9C4(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_10085A130;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020DA1C(uint64_t a1, void *a2)
{
  *a2 = off_10085A130;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020DA64(uint64_t a1)
{
}

void sub_10020DA6C(id *a1)
{
  operator delete(a1);
}

void sub_10020DAA8(uint64_t a1, void *a2, __int16 *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  __int16 v14 = *a3;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  sub_10016D488(&v15, *((const void **)a3 + 1), *((void *)a3 + 2), *((void *)a3 + 2) - *((void *)a3 + 1));
  long long v18 = *((_OWORD *)a3 + 2);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(NSObject **)(v6 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10020DC48;
  block[3] = &unk_1008589C0;
  void block[4] = v6;
  __int16 v9 = v14;
  long long v11 = 0;
  uint64_t v12 = 0;
  objc_super __p = 0;
  sub_10016D488(&__p, v15, (uint64_t)v16, v16 - (unsigned char *)v15);
  long long v13 = v18;
  dispatch_async(v7, block);
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    char v16 = v15;
    operator delete(v15);
  }
  if (v5) {
    sub_10001A970(v5);
  }
}

void sub_10020DBCC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v2 - 72);
  if (v4)
  {
    *(void *)(v2 - 64) = v4;
    operator delete(v4);
  }
  if (v1) {
    sub_10001A970(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020DBFC(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_10085A190)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020DC3C()
{
  return &off_10085A190;
}

id sub_10020DC48(uint64_t a1)
{
  return [*(id *)(a1 + 32) didReceiveRemoteData:a1 + 40];
}

uint64_t sub_10020DC58(uint64_t a1)
{
  return a1;
}

void sub_10020DC84(uint64_t a1)
{
  operator delete();
}

void *sub_10020DCD0(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_10085A1B0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020DD28(uint64_t a1, void *a2)
{
  *a2 = off_10085A1B0;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020DD70(uint64_t a1)
{
}

void sub_10020DD78(id *a1)
{
  operator delete(a1);
}

void sub_10020DDB4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(NSObject **)(v5 + 80);
  int v7 = *a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10020DEC0;
  void v8[3] = &unk_10085A218;
  void v8[4] = v5;
  void v8[5] = v3;
  __int16 v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = v7;
  dispatch_async(v6, v8);
  if (v9) {
    sub_10001A970(v9);
  }
  if (v4) {
    sub_10001A970(v4);
  }
}

uint64_t sub_10020DE74(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_10085A248)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020DEB4()
{
  return &off_10085A248;
}

void sub_10020DEC0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v2 _roseSession:&v4 invalidatedWithReason:*(unsigned int *)(a1 + 56)];
  if (v5) {
    sub_10001A970(v5);
  }
}

void sub_10020DF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10001A970(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020DF34(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10020DF50(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10001A970(v1);
  }
}

uint64_t sub_10020DF60(uint64_t a1)
{
  return a1;
}

void sub_10020DF8C(uint64_t a1)
{
  operator delete();
}

void *sub_10020DFD8(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_10085A268;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020E030(uint64_t a1, void *a2)
{
  *a2 = off_10085A268;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020E078(uint64_t a1)
{
}

void sub_10020E080(id *a1)
{
  operator delete(a1);
}

void sub_10020E0BC(uint64_t a1, uint64_t *a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v6 = *a2;
  int v7 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  int v8 = *a3;
  int v9 = *a4;
  int v10 = *a5;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(NSObject **)(v11 + 80);
  int v13 = *a6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10020E1DC;
  block[3] = &unk_10085A2D0;
  void block[4] = v11;
  void block[5] = v6;
  uint64_t v15 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v16 = v8;
  int v17 = v9;
  int v18 = v10;
  int v19 = v13;
  dispatch_async(v12, block);
  if (v15) {
    sub_10001A970(v15);
  }
  if (v7) {
    sub_10001A970(v7);
  }
}

uint64_t sub_10020E190(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_10085A300)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020E1D0()
{
  return &off_10085A300;
}

void sub_10020E1DC(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(a2) = *(_DWORD *)(a1 + 60);
  LODWORD(a3) = *(_DWORD *)(a1 + 64);
  [v4 _roseSession:&v6 didChangeRangingUpdateRate:*(unsigned int *)(a1 + 56) newThrottleRate:*(unsigned int *)(a1 + 68) prevThrottleRate:a2 effectiveSinceCycleInde:a3];
  if (v7) {
    sub_10001A970(v7);
  }
}

void sub_10020E240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10001A970(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020E258(uint64_t a1)
{
  return a1;
}

void sub_10020E284(uint64_t a1)
{
  operator delete();
}

void *sub_10020E2D0(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_10085A320;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10020E328(uint64_t a1, void *a2)
{
  *a2 = off_10085A320;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10020E370(uint64_t a1)
{
}

void sub_10020E378(id *a1)
{
  operator delete(a1);
}

void sub_10020E3B4(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(NSObject **)(v4 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  long long v6 = a3[6];
  long long v20 = a3[7];
  long long v7 = a3[9];
  long long v21 = a3[8];
  long long v22 = v7;
  long long v23 = a3[10];
  long long v8 = a3[2];
  long long v9 = a3[4];
  long long v10 = a3[5];
  long long v16 = a3[3];
  long long v17 = v9;
  long long v18 = v10;
  long long v19 = v6;
  long long v11 = a3[1];
  long long v13 = *a3;
  long long v14 = v11;
  block[2] = sub_10020E4D4;
  block[3] = &unk_10085A398;
  void block[4] = v4;
  long long v15 = v8;
  dispatch_async(v5, block);
  if (v3) {
    sub_10001A970(v3);
  }
}

uint64_t sub_10020E488(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_10085A3B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10020E4C8()
{
  return &off_10085A3B8;
}

id sub_10020E4D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) didReceiveDeviceMotion:a1 + 40];
}

void sub_10020E4E4(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_10020E53C(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_10020E53C(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        sub_10001A970(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_10020E584(uint64_t a1)
{
  sub_10020E53C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10020E5C0(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

void sub_10020E5CC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_10020E5D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C888))
  {
    sub_100004950(qword_10089C870, "PRRoseProviderNetworkListener");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C870, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C888);
  }
}

void sub_10020E670(_Unwind_Exception *a1)
{
}

void sub_10020E688()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8A8))
  {
    sub_100004950(&qword_10089C890, "com.apple.nearbyd.accessory.download");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C890, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8A8);
  }
}

void sub_10020E720(_Unwind_Exception *a1)
{
}

void sub_10020E738()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8C8))
  {
    sub_100004950(&qword_10089C8B0, "com.apple.nearbyd.accessory.files");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C8B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8C8);
  }
}

void sub_10020E7D0(_Unwind_Exception *a1)
{
}

void sub_10020E7E8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8E8))
  {
    sub_100004950(qword_10089C8D0, "MA_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8E8);
  }
}

void sub_10020E880(_Unwind_Exception *a1)
{
}

void sub_10020E898()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C908))
  {
    sub_100004950(qword_10089C8F0, "MB_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C908);
  }
}

void sub_10020E930(_Unwind_Exception *a1)
{
}

void sub_10020E948()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C928))
  {
    sub_100004950(qword_10089C910, "D");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C910, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C928);
  }
}

void sub_10020E9E0(_Unwind_Exception *a1)
{
}

void sub_10020E9F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C948, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C948))
  {
    sub_100004950(&qword_10089C930, "A");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C930, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C948);
  }
}

void sub_10020EA90(_Unwind_Exception *a1)
{
}

void sub_10020EAA8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C968))
  {
    sub_100004950(qword_10089C950, "FAS.bin");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C950, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C968);
  }
}

void sub_10020EB40(_Unwind_Exception *a1)
{
}

void sub_10020EB58()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C988))
  {
    qword_10089C970 = 0;
    qword_10089C978 = 0;
    qword_10089C980 = 0;
    uint64_t v0 = operator new(0x30uLL);
    qword_10089C978 = (uint64_t)(v0 + 3);
    qword_10089C980 = (uint64_t)(v0 + 3);
    _OWORD *v0 = xmmword_1004BAB28;
    v0[1] = unk_1004BAB38;
    v0[2] = xmmword_1004BAB48;
    qword_10089C970 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_100008CAC, &qword_10089C970, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C988);
  }
}

void sub_10020EC14(_Unwind_Exception *a1)
{
}

void sub_10020EC2C()
{
  *(_OWORD *)uint64_t v45 = xmmword_1004BAAB8;
  *(_OWORD *)&v45[16] = unk_1004BAAC8;
  sub_1001A003C((uint64_t)&unk_1008A4EF0, (int *)v45, 4);
  xmmword_1008A4F08 = xmmword_1004B7660;
  unk_1008A4F18 = xmmword_1004B7670;
  qword_1008A4F30 = 0;
  unk_1008A4F38 = 0;
  qword_1008A4F28 = 0x3FD999999999999ALL;
  unk_1008A4F40 = xmmword_1004B7680;
  dword_1008A4F50 = 5;
  qword_1008A4F58 = 0x4000000000000000;
  dword_1008A4F60 = 5;
  byte_1008A4F68 = 0;
  unk_1008A4F6C = 0x30000000ALL;
  xmmword_1008A4F78 = xmmword_1004B7690;
  unk_1008A4F88 = xmmword_1004B76A0;
  xmmword_1008A4F98 = xmmword_1004B76B0;
  qword_1008A4FA8 = 0x3FE3333333333333;
  dword_1008A4FB0 = 3;
  xmmword_1008A4FB8 = xmmword_1004B76C0;
  unk_1008A4FC8 = xmmword_1004B76A0;
  xmmword_1008A4FD8 = xmmword_1004B7690;
  qword_1008A4FE8 = 0x3FE3333333333333;
  byte_1008A4FF0 = 0;
  xmmword_1008A4FF8 = xmmword_1004B76D0;
  unk_1008A5008 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v44 = _Q0;
  xmmword_1008A5018 = _Q0;
  qword_1008A5028 = 0xBFD3333333333333;
  xmmword_1008A5030 = xmmword_1004B76F0;
  qword_1008A5040 = 0x3E99999A40000000;
  xmmword_1008A5048 = xmmword_1004B7670;
  qword_1008A5060 = 0;
  unk_1008A5068 = 0;
  qword_1008A5058 = 0x3FD999999999999ALL;
  xmmword_1008A5070 = xmmword_1004B7680;
  dword_1008A5080 = 5;
  qword_1008A5088 = 0x4000000000000000;
  dword_1008A5090 = 4;
  qword_1008A5098 = 0x300000008;
  qword_1008A50A0 = 0xC04E800000000000;
  v46.__r_.__value_.__r.__words[0] = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)algn_1008A50A8, (double *)&v46, 1);
  xmmword_1008A50C0 = xmmword_1004B7700;
  qword_1008A50D0 = 0x4024000000000000;
  dword_1008A50D8 = 45;
  byte_1008A50E0 = 0;
  byte_1008A50F8 = 0;
  qword_1008A5100 = 0;
  byte_1008A5108 = 0;
  dword_1008A510C = 1;
  byte_1008A5110 = 1;
  xmmword_1008A5118 = xmmword_1004B7710;
  unk_1008A5128 = xmmword_1004B7720;
  xmmword_1008A5138 = v44;
  qword_1008A5148 = 0xC059000000000000;
  xmmword_1008A5150 = xmmword_1004B7730;
  qword_1008A5160 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008A5168 = xmmword_1004B7670;
  qword_1008A5178 = 0x3FD999999999999ALL;
  qword_1008A5188 = 0;
  qword_1008A5180 = 0;
  xmmword_1008A5190 = xmmword_1004B7680;
  dword_1008A51A0 = 5;
  qword_1008A51A8 = 0x4000000000000000;
  dword_1008A51B0 = 10;
  qword_1008A51B8 = 0x4034000000000000;
  dword_1008A51C0 = 3;
  xmmword_1008A51C8 = xmmword_1004B7740;
  __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008A4EF0, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_72, &off_10089EDB0, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_73, &off_10089EDB8, (void *)&_mh_execute_header);
  qword_1008A51E0 = 0;
  unk_1008A51E8 = 0;
  qword_1008A51D8 = 0;
  long long v6 = operator new(0x40uLL);
  qword_1008A51E0 = (uint64_t)(v6 + 4);
  unk_1008A51E8 = v6 + 4;
  *long long v6 = xmmword_1004BAAD8;
  v6[1] = unk_1004BAAE8;
  _OWORD v6[2] = xmmword_1004BAAF8;
  v6[3] = unk_1004BAB08;
  qword_1008A51D8 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A51D8, (void *)&_mh_execute_header);
  qword_1008A51F8 = 0;
  unk_1008A5200 = 0;
  qword_1008A51F0 = 0;
  long long v7 = operator new(0x10uLL);
  qword_1008A51F8 = (uint64_t)(v7 + 1);
  unk_1008A5200 = v7 + 1;
  *long long v7 = xmmword_1004BAB18;
  qword_1008A51F0 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A51F0, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v8 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  long long v10 = std::string::append((std::string *)v45, ".bin");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1008A5218 = v10->__r_.__value_.__r.__words[2];
  xmmword_1008A5208 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5208, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v12 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  long long v14 = std::string::append((std::string *)v45, ".bin");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1008A5230 = v14->__r_.__value_.__r.__words[2];
  xmmword_1008A5220 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5220, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v16 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v16->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  long long v18 = std::string::append((std::string *)v45, ".bin");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1008A5248 = v18->__r_.__value_.__r.__words[2];
  xmmword_1008A5238 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5238, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v20 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  long long v22 = std::string::append((std::string *)v45, ".bin");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1008A5260 = v22->__r_.__value_.__r.__words[2];
  xmmword_1008A5250 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5250, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v24 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v24->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  unint64_t v26 = std::string::append((std::string *)v45, ".bin");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1008A5278 = v26->__r_.__value_.__r.__words[2];
  xmmword_1008A5268 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5268, (void *)&_mh_execute_header);
  sub_10039D144();
  char v28 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v28->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  int v30 = std::string::append((std::string *)v45, ".bin");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1008A5290 = v30->__r_.__value_.__r.__words[2];
  xmmword_1008A5280 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5280, (void *)&_mh_execute_header);
  sub_10039D144();
  char v32 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  char v34 = std::string::append((std::string *)v45, ".bin");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1008A52A8 = v34->__r_.__value_.__r.__words[2];
  xmmword_1008A5298 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5298, (void *)&_mh_execute_header);
  sub_10039D144();
  BOOL v36 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v36->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  uint64_t v38 = std::string::append((std::string *)v45, ".bin");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  qword_1008A52C0 = v38->__r_.__value_.__r.__words[2];
  xmmword_1008A52B0 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A52B0, (void *)&_mh_execute_header);
  sub_10039D144();
  int v40 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v40->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  int v42 = std::string::append((std::string *)v45, ".bin");
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  qword_1008A52D8 = v42->__r_.__value_.__r.__words[2];
  xmmword_1008A52C8 = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A52C8, (void *)&_mh_execute_header);
}

void sub_10020F5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10020F688@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085A618[a1]);
}

void *sub_10020F69C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085A670[a1]);
}

void *sub_10020F6B0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085A6B8[a1]);
}

void *sub_10020F6C4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085A6D8[a1]);
}

void sub_10020F818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_10020F838(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) printableState];
  uint64_t v2 = sub_10002DA78(@"Finding Service", v1);

  return v2;
}

void sub_10020F880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10020F8E4(id a1)
{
  uint64_t v1 = objc_alloc_init(NIServerFindingServicePool);
  uint64_t v2 = (void *)qword_1008A56E0;
  qword_1008A56E0 = (uint64_t)v1;
}

void sub_10020FAEC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void sub_10020FCC0(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_10020FD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void sub_10020FDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void sub_10021024C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_1002105AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021089C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002108C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002108D4(uint64_t a1)
{
}

void sub_1002108DC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKey:*(void *)(a1 + 40)];

  if (!v2)
  {
    uint64_t v3 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      unsigned int v5 = [*(id *)(*(void *)(a1 + 32) + 32) count];
      int v20 = 138543618;
      uint64_t v21 = v4;
      __int16 v22 = 1026;
      unsigned int v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-ses,Service add client %{public}@ (%{public}d previous clients)", (uint8_t *)&v20, 0x12u);
    }

    [*(id *)(*(void *)(a1 + 32) + 32) setObject:*(void *)(a1 + 48) forKey:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(a1 + 32) + 40) setObject:*(void *)(a1 + 56) forKey:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(a1 + 32) + 48) setObject:&__kCFBooleanTrue forKey:*(void *)(a1 + 40)];
    if ([*(id *)(*(void *)(a1 + 32) + 32) count] == (id)1)
    {
      uint64_t v6 = [*(id *)(a1 + 56) specifiedToken];
      uint64_t v7 = *(void *)(a1 + 32);
      long long v8 = *(void **)(v7 + 88);
      *(void *)(v7 + 88) = v6;
    }
    long long v9 = +[NIServerFindingServicePool sharedInstance];
    [v9 setService:*(void *)(a1 + 32) forToken:*(void *)(*(void *)(a1 + 32) + 88)];

    long long v10 = *(_DWORD **)(a1 + 32);
    if (v10[14] == 1)
    {
      long long v11 = [[NINearbyObject alloc] initWithToken:*(void *)(*(void *)(a1 + 32) + 88)];
      if ([*(id *)(*(void *)(a1 + 32) + 136) tellClientAboutPeer]) {
        [*(id *)(a1 + 48) serviceDidDiscoverNearbyObject:v11];
      }
      uint64_t v12 = [*(id *)(*(void *)(a1 + 32) + 104) advertisingPeers];
      long long v13 = [v12 objectForKey:*(void *)(*(void *)(a1 + 32) + 88)];

      [*(id *)(a1 + 32) _processUpdatedCommonConfigurationIfNecessary];
      long long v14 = [*(id *)(*(void *)(a1 + 32) + 104) advertisingPeers];
      long long v15 = [v14 objectForKey:*(void *)(*(void *)(a1 + 32) + 88)];

      if (v15)
      {
        if ([v15 isEqual:v13])
        {
          long long v16 = *(void **)(a1 + 48);
          long long v17 = [v15 byteRepresentation];
          [v16 serviceDidGenerateShareableConfigurationData:v17 forObject:v11];
        }
      }
    }
    else
    {
      uint64_t v18 = [v10 _startService];
      uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
      long long v11 = *(NINearbyObject **)(v19 + 40);
      *(void *)(v19 + 40) = v18;
    }
  }
}

void sub_100210B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100210C9C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = [[*(id *)(*(void *)(a1 + 40) + 32) objectForKey:];

    if (v2)
    {
      uint64_t v3 = [*(id *)(*(void *)(a1 + 40) + 48) objectForKey:*(void *)(a1 + 32)];
      if (!v3) {
        __assert_rtn("-[NIServerFindingService clientWithIdentifier:updatedStateToRunning:dueToTimeout:]_block_invoke", "NIServerFindingSession.mm", 565, "previousRunState != nil");
      }
      uint64_t v4 = *(void **)(*(void *)(a1 + 40) + 48);
      unsigned int v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
      [v4 setObject:v5 forKey:*(void *)(a1 + 32)];

      unsigned int v6 = [*(id *)(a1 + 40) _isAnyClientRunning];
      uint64_t v7 = (id)qword_1008ABDE0;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v9 = *(unsigned __int8 *)(a1 + 48);
        unsigned int v10 = [v3 BOOLValue];
        int v11 = *(unsigned __int8 *)(a1 + 49);
        int v12 = *(_DWORD *)(*(void *)(a1 + 40) + 56);
        long long v13 = "Idle";
        if (v12 == 1) {
          long long v13 = "Running";
        }
        int v18 = 138544642;
        if (v12 == 2) {
          long long v14 = "Paused";
        }
        else {
          long long v14 = v13;
        }
        uint64_t v19 = v8;
        __int16 v20 = 1026;
        int v21 = v9;
        __int16 v22 = 1026;
        unsigned int v23 = v10;
        __int16 v24 = 1026;
        int v25 = v11;
        __int16 v26 = 2082;
        long long v27 = v14;
        __int16 v28 = 1026;
        unsigned int v29 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#find-ses,Service client %{public}@ updated its run state to %{public}d (previous %{public}d) due to timeout %{public}d. Service state: %{public}s. Is any client running %{public}d", (uint8_t *)&v18, 0x2Eu);
      }

      long long v15 = *(_DWORD **)(a1 + 40);
      int v16 = v15[14];
      switch(v16)
      {
        case 2:
          goto LABEL_14;
        case 1:
          if ((v6 & 1) == 0) {
            [v15 _pauseServiceDueToClientTimeout:*(unsigned __int8 *)(a1 + 49)];
          }
          break;
        case 0:
LABEL_14:
          if (v6) {
            id v17 = [v15 _startService];
          }
          break;
      }
    }
  }
}

void sub_100210EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100210F88(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = [[*(id *)(*(void *)(a1 + 40) + 40) objectForKey:];

    if (v2)
    {
      uint64_t v3 = (id)qword_1008ABDE0;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = *(unsigned __int8 *)(a1 + 48);
        uint64_t v5 = *(void *)(a1 + 32);
        unsigned int v6 = [*(id *)(*(void *)(a1 + 40) + 32) count];
        *(_DWORD *)uint64_t v19 = 138543874;
        *(void *)&v19[4] = v5;
        __int16 v20 = 1026;
        *(_DWORD *)int v21 = v4;
        *(_WORD *)&v21[4] = 1026;
        *(_DWORD *)&v21[6] = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-ses,Service removing client %{public}@ due to timeout %{public}d (%{public}d clients before removal)", v19, 0x18u);
      }

      [*(id *)(*(void *)(a1 + 40) + 32) removeObjectForKey:*(void *)(a1 + 32)];
      [*(id *)(*(void *)(a1 + 40) + 40) removeObjectForKey:*(void *)(a1 + 32)];
      [*(id *)(*(void *)(a1 + 40) + 48) removeObjectForKey:*(void *)(a1 + 32)];
      id v7 = [*(id *)(*(void *)(a1 + 40) + 32) count];
      uint64_t v8 = *(id **)(a1 + 40);
      if (v7)
      {
        unsigned int v9 = [v8 _isAnyClientRunning];
        unsigned int v10 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          int v12 = *(_DWORD *)(*(void *)(a1 + 40) + 56);
          long long v13 = "Idle";
          if (v12 == 1) {
            long long v13 = "Running";
          }
          *(_DWORD *)uint64_t v19 = 138543874;
          if (v12 == 2) {
            long long v14 = "Paused";
          }
          else {
            long long v14 = v13;
          }
          *(void *)&v19[4] = v11;
          __int16 v20 = 2082;
          *(void *)int v21 = v14;
          *(_WORD *)&v21[8] = 1026;
          unsigned int v22 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#find-ses,Update service after removing client %{public}@. Service state: %{public}s. Is any client running %{public}d", v19, 0x1Cu);
        }
        long long v15 = *(_DWORD **)(a1 + 40);
        if (v15[14] == 1) {
          char v16 = v9;
        }
        else {
          char v16 = 1;
        }
        if ((v16 & 1) == 0)
        {
          [v15 _pauseServiceDueToClientTimeout:*(unsigned __int8 *)(a1 + 48)];
          long long v15 = *(_DWORD **)(a1 + 40);
        }
        [v15 _processUpdatedCommonConfigurationIfNecessary:v19];
      }
      else
      {
        id v17 = v8[11];
        [*(id *)(a1 + 40) _resetServiceStateForOperation:2];
        int v18 = +[NIServerFindingServicePool sharedInstance];
        [v18 setService:0 forToken:v17];
      }
    }
  }
}

void sub_1002111DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002112A4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 104) advertisingPeers];
  id v7 = [v2 objectForKey:*(void *)(*(void *)(a1 + 32) + 88)];

  uint64_t v3 = v7;
  if (v7)
  {
    int v4 = [[NINearbyObject alloc] initWithToken:*(void *)(*(void *)(a1 + 32) + 88)];
    uint64_t v5 = *(void **)(a1 + 40);
    unsigned int v6 = [v7 byteRepresentation];
    [v5 serviceDidGenerateShareableConfigurationData:v6 forObject:v4];

    uint64_t v3 = v7;
  }
}

void sub_100211364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v12 = v10;

  _Unwind_Resume(a1);
}

id sub_100211464(void *a1)
{
  [*(id *)(a1[4] + 40) setObject:a1[5] forKey:a1[6]];
  uint64_t v2 = (void *)a1[4];

  return [v2 _processUpdatedCommonConfigurationIfNecessary];
}

void sub_100211540(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 160);
  if (v3)
  {
    [v3 timestamp];
    double v5 = v4;
    [*(id *)(a1 + 40) timestamp];
    if (v5 >= v6) {
      return;
    }
    uint64_t v2 = *(void *)(a1 + 32);
  }
  [*(id *)(v2 + 120) acceptVisionInput:*(void *)(a1 + 40)];
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = (id *)(*(void *)(a1 + 32) + 160);

  objc_storeStrong(v8, v7);
}

void sub_100211734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10021175C(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 88)) {
    return [*(id *)(v1 + 104) processAdvertisement:result[5] receivedOOBFromPeer:];
  }
  return result;
}

void sub_1002118B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1002118C8(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 88)) {
    return [*(id *)(v1 + 104) processLostEventReceivedOOBFromPeer:];
  }
  return result;
}

void sub_100211A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100211A28(uint64_t a1)
{
  [*(id *)(a1 + 32) latitude];
  uint64_t v28 = v2;
  [*(id *)(a1 + 32) longitude];
  uint64_t v27 = v3;
  double v4 = [*(id *)(a1 + 32) timestamp];
  [v4 timeIntervalSinceReferenceDate];
  uint64_t v26 = v5;
  [*(id *)(a1 + 32) course];
  uint64_t v7 = v6;
  [*(id *)(a1 + 32) courseAccuracy];
  uint64_t v9 = v8;
  [*(id *)(a1 + 32) speed];
  uint64_t v11 = v10;
  [*(id *)(a1 + 32) speedAccuracy];
  uint64_t v13 = v12;
  [*(id *)(a1 + 32) horizontalAccuracy];
  uint64_t v15 = v14;
  [*(id *)(a1 + 32) verticalAccuracy];
  uint64_t v17 = v16;
  [*(id *)(a1 + 32) altitude];
  uint64_t v19 = v18;
  [*(id *)(a1 + 32) ellipsoidalAltitude];
  uint64_t v21 = v20;
  unsigned int v22 = [*(id *)(a1 + 32) floor];
  unsigned int v23 = [*(id *)(a1 + 32) locationType];
  unsigned int v24 = [*(id *)(a1 + 32) signalEnvironment];
  v29[0] = v28;
  v29[1] = v27;
  v29[2] = v26;
  double v29[3] = v7;
  __n128 v29[4] = v9;
  v29[5] = v11;
  v29[6] = v13;
  unsigned char v29[7] = v15;
  v29[8] = v17;
  v29[9] = v19;
  v29[10] = v21;
  unsigned int v30 = v22;
  unsigned int v31 = v23;
  unsigned int v32 = v24;

  return [*(id *)(*(void *)(a1 + 40) + 120) acceptSelfLocationData:v29];
}

void sub_100211B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100211C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100211CA8(uint64_t a1)
{
  [*(id *)(a1 + 32) magneticHeading];
  uint64_t v3 = v2;
  [*(id *)(a1 + 32) trueHeading];
  uint64_t v5 = v4;
  [*(id *)(a1 + 32) headingAccuracy];
  uint64_t v7 = v6;
  uint64_t v8 = [*(id *)(a1 + 32) timestamp];
  [v8 timeIntervalSinceReferenceDate];
  v11[0] = v3;
  v11[1] = v5;
  _DWORD v11[2] = v7;
  void v11[3] = v9;

  return [*(id *)(*(void *)(a1 + 40) + 120) acceptHeadingData:v11];
}

void sub_100211D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100211EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100211EE8(uint64_t a1)
{
  [*(id *)(a1 + 32) latitude];
  uint64_t v28 = v2;
  [*(id *)(a1 + 32) longitude];
  uint64_t v27 = v3;
  uint64_t v4 = [*(id *)(a1 + 32) timestamp];
  [v4 timeIntervalSinceReferenceDate];
  uint64_t v26 = v5;
  [*(id *)(a1 + 32) course];
  uint64_t v7 = v6;
  [*(id *)(a1 + 32) courseAccuracy];
  uint64_t v9 = v8;
  [*(id *)(a1 + 32) speed];
  uint64_t v11 = v10;
  [*(id *)(a1 + 32) speedAccuracy];
  uint64_t v13 = v12;
  [*(id *)(a1 + 32) horizontalAccuracy];
  uint64_t v15 = v14;
  [*(id *)(a1 + 32) verticalAccuracy];
  uint64_t v17 = v16;
  [*(id *)(a1 + 32) altitude];
  uint64_t v19 = v18;
  [*(id *)(a1 + 32) ellipsoidalAltitude];
  uint64_t v21 = v20;
  unsigned int v22 = [*(id *)(a1 + 32) floor];
  unsigned int v23 = [*(id *)(a1 + 32) locationType];
  unsigned int v24 = [*(id *)(a1 + 32) signalEnvironment];
  v29[0] = v28;
  v29[1] = v27;
  v29[2] = v26;
  double v29[3] = v7;
  __n128 v29[4] = v9;
  v29[5] = v11;
  v29[6] = v13;
  unsigned char v29[7] = v15;
  v29[8] = v17;
  v29[9] = v19;
  v29[10] = v21;
  unsigned int v30 = v22;
  unsigned int v31 = v23;
  unsigned int v32 = v24;

  return [*(id *)(*(void *)(a1 + 40) + 120) acceptPeerLocationData:v29 forPeer:*(void *)(a1 + 48)];
}

void sub_100212028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100212CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void sub_100213190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002131B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v1 = (void *)*((void *)WeakRetained + 12);
    *((void *)WeakRetained + 12) = 0;

    if ([*((id *)WeakRetained + 4) count])
    {
      if (([WeakRetained _isAnyClientRunning] & 1) == 0) {
        [WeakRetained _resetServiceStateForOperation:0];
      }
    }
  }
}

void sub_100213238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100213400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100213568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100213670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100213688(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 BOOLValue];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_100213CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100213D78(uint64_t a1, void *a2)
{
  return [a2 serviceDidRemoveNearbyObject:*(void *)(a1 + 32)];
}

void sub_100214098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100214108(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:v9];

  if (v6)
  {
    uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:v9];
    [v7 timeIntervalSinceDate:*(void *)(a1 + 40)];
    uint64_t v8 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [*(id *)(*(void *)(a1 + 32) + 72) setObject:v8 forKeyedSubscript:v5];
  }
}

void sub_1002141D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100214208(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [[*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:];

  if (v3)
  {
    uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:v6];
    id v5 = sub_1002E10F4(v4);
    [*(id *)(*(void *)(a1 + 32) + 72) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_1002142B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002142E0(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v3 = [[*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:];

  if (v3)
  {
    uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:v7];
    [v4 doubleValue];
    id v6 = +[NSString stringWithFormat:@"%0.1f s", v5];
    [*(id *)(*(void *)(a1 + 32) + 72) setObject:v6 forKeyedSubscript:v7];
  }
}

void sub_1002143A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002143D4(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v3 = [[*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:];

  if (v3)
  {
    uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:v7];
    [v4 doubleValue];
    id v6 = +[NSString stringWithFormat:@"%0.2f m", v5];
    [*(id *)(*(void *)(a1 + 32) + 72) setObject:v6 forKeyedSubscript:v7];
  }
}

void sub_10021449C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100214658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10001A970(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10021472C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10021474C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained) {
    goto LABEL_12;
  }
  if (v6 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10041FC40();
    if (v5)
    {
LABEL_5:
      [v5 timestamp];
      uint64_t v9 = sub_1002B5E84((uint64_t)(WeakRetained + 27), v8);
      if (v10)
      {
        uint64_t v11 = v9;
        [v5 userAcceleration];
        uint64_t v48 = v12;
        [v5 userAcceleration];
        uint64_t v47 = v13;
        [v5 userAcceleration];
        uint64_t v46 = v14;
        [v5 rotationRate];
        uint64_t v45 = v15;
        [v5 rotationRate];
        uint64_t v44 = v16;
        [v5 rotationRate];
        uint64_t v43 = v17;
        int v49 = [v5 attitude];
        [v49 quaternion];
        uint64_t v42 = v18;
        uint64_t v19 = [v5 attitude];
        [v19 quaternion];
        uint64_t v21 = v20;
        unsigned int v22 = [v5 attitude];
        [v22 quaternion];
        uint64_t v24 = v23;
        int v25 = [v5 attitude];
        [v25 quaternion];
        uint64_t v27 = v26;
        [v5 gravity];
        uint64_t v29 = v28;
        [v5 gravity];
        uint64_t v31 = v30;
        [v5 gravity];
        uint64_t v33 = v32;
        char v34 = [v5 attitude];
        [v34 yaw];
        uint64_t v36 = v35;
        long long v37 = [v5 attitude];
        [v37 pitch];
        uint64_t v39 = v38;
        int v40 = [v5 attitude];
        [v40 roll];
        v50[0] = v11;
        v50[1] = v48;
        v50[2] = v47;
        v50[3] = v46;
        v50[4] = v45;
        v50[5] = v44;
        v50[6] = v43;
        v50[7] = v42;
        v50[8] = v21;
        v50[9] = v24;
        v50[10] = v27;
        v50[11] = v29;
        v50[12] = v31;
        v50[13] = v33;
        v50[14] = v36;
        v50[15] = v39;
        v50[16] = v41;

        [WeakRetained[15] acceptDeviceMotionInput:v50];
      }
      else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        sub_10041FC0C();
      }
      goto LABEL_12;
    }
  }
  else if (v5)
  {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10041FBD8();
  }
LABEL_12:
}

void sub_100214A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100214B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100214B90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_10041FCDC();
      if (v5) {
        goto LABEL_5;
      }
    }
    else if (v5)
    {
LABEL_5:
      [v5 timestamp];
      uint64_t v9 = v8;
      char v10 = [v5 relativeAltitude];
      [v10 doubleValue];
      uint64_t v12 = v11;
      uint64_t v13 = [v5 pressure];
      [v13 doubleValue];
      v15[0] = v9;
      v15[1] = v12;
      _OWORD v15[2] = v14;

      [WeakRetained[15] acceptAltimeterData:v15];
      goto LABEL_9;
    }
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10041FCA8();
    }
  }
LABEL_9:
}

void sub_100214CAC(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

void sub_100214DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100214DD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained) {
    goto LABEL_52;
  }
  if (v6 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10041FDAC();
    if (v5) {
      goto LABEL_5;
    }
  }
  else if (v5)
  {
LABEL_5:
    uint64_t v8 = [v5 deltaPositionX];

    if (v8)
    {
      uint64_t v9 = [v5 deltaPositionX];
      [v9 doubleValue];
      uint64_t v61 = v10;

      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v61 = 0;
    }
    uint64_t v12 = [v5 deltaPositionY];

    if (v12)
    {
      uint64_t v13 = [v5 deltaPositionY];
      [v13 doubleValue];
      uint64_t v60 = v14;

      uint64_t v15 = 1;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v60 = 0;
    }
    uint64_t v16 = [v5 deltaPositionZ];

    if (v16)
    {
      uint64_t v17 = [v5 deltaPositionZ];
      [v17 doubleValue];
      uint64_t v19 = v18;

      uint64_t v20 = 1;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v21 = [v5 deltaVelocityX];

    if (v21)
    {
      unsigned int v22 = [v5 deltaVelocityX];
      [v22 doubleValue];
      uint64_t v24 = v23;

      uint64_t v25 = 1;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v24 = 0;
    }
    uint64_t v26 = [v5 deltaVelocityY];

    if (v26)
    {
      uint64_t v27 = [v5 deltaVelocityY];
      [v27 doubleValue];
      uint64_t v29 = v28;

      uint64_t v59 = 1;
    }
    else
    {
      uint64_t v59 = 0;
      uint64_t v29 = 0;
    }
    uint64_t v30 = [v5 deltaVelocityZ];

    uint64_t v57 = v20;
    uint64_t v58 = v15;
    uint64_t v56 = v25;
    if (v30)
    {
      uint64_t v31 = [v5 deltaVelocityZ];
      [v31 doubleValue];
      uint64_t v33 = v32;

      uint64_t v34 = 1;
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v33 = 0;
    }
    uint64_t v35 = [v5 quaternionW];

    if (v35)
    {
      uint64_t v36 = [v5 quaternionW];
      [v36 doubleValue];
      double v38 = v37;
    }
    else
    {
      double v38 = 0.0;
    }
    uint64_t v39 = [v5 quaternionX];

    if (v39)
    {
      int v40 = [v5 quaternionX];
      [v40 doubleValue];
      uint64_t v42 = v41;
    }
    else
    {
      uint64_t v42 = 0;
    }
    uint64_t v43 = [v5 quaternionY];

    if (v43)
    {
      uint64_t v44 = [v5 quaternionY];
      [v44 doubleValue];
      uint64_t v46 = v45;
    }
    else
    {
      uint64_t v46 = 0;
    }
    uint64_t v47 = [v5 quaternionZ];

    if (v47)
    {
      uint64_t v48 = [v5 quaternionZ];
      [v48 doubleValue];
      uint64_t v50 = v49;
    }
    else
    {
      uint64_t v50 = 0;
    }
    [v5 timestamp];
    uint64_t v62 = v51;
    char v63 = 0;
    if (v35) {
      BOOL v52 = v39 == 0;
    }
    else {
      BOOL v52 = 1;
    }
    BOOL v53 = v52 || v43 == 0;
    char v64 = 0;
    char v54 = !v53;
    uint64_t v65 = v61;
    double v55 = 0.0;
    if ((v54 & (v47 != 0)) != 0) {
      double v55 = v38;
    }
    uint64_t v66 = v11;
    uint64_t v67 = v60;
    uint64_t v68 = v58;
    uint64_t v69 = v19;
    uint64_t v70 = v57;
    uint64_t v71 = v24;
    uint64_t v72 = v56;
    uint64_t v73 = v29;
    uint64_t v74 = v59;
    uint64_t v75 = v33;
    uint64_t v76 = v34;
    double v77 = v55;
    uint64_t v78 = v42;
    uint64_t v79 = v46;
    uint64_t v80 = v50;
    char v81 = v54 & (v47 != 0);
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_10041FD44();
    }
    [WeakRetained[15] acceptDevicePDRInput:&v62];
    goto LABEL_52;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10041FBD8();
  }
LABEL_52:
}

void sub_10021521C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100215438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100215574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002156A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100215920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002159A4(uint64_t a1, void *a2)
{
  return [a2 serviceDidGenerateShareableConfigurationData:*(void *)(a1 + 32) forObject:*(void *)(a1 + 40)];
}

void sub_100215A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100215B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100215C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100215E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100215F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021628C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100216424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021654C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100216668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002168D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002169F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100216A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100216AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100216B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100216BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100216C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100217590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100217814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (v15) {
    sub_10001A970(v15);
  }

  _Unwind_Resume(a1);
}

void sub_100217B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_100217DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100217DE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 revokeFindingExperience])
  {
    [*(id *)(a1 + 32) _removeAlgorithmOutputFlagsFromPeerTrackingState:255];
    uint64_t v4 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#find-ses,Revoking finding experience", v8, 2u);
    }
  }
  else
  {
    [v3 distance];
    if (v5 != NINearbyObjectDistanceNotAvailable)
    {
      id v6 = *(void **)(*(void *)(a1 + 32) + 280);
      [v3 distance];
      [v6 updateWithMostRecentDistance:v7];
      [*(id *)(a1 + 32) _addAlgorithmOutputFlagsToPeerTrackingState:1];
    }
  }
}

void sub_100217EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100217FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002180F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100218330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100218468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002185A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021860C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002187E8(id a1)
{
  uint64_t v1 = objc_alloc_init(NIServerFindingServiceObserverRelay);
  uint64_t v2 = (void *)qword_1008A56F0;
  qword_1008A56F0 = (uint64_t)v1;
}

void sub_1002188B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100218A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100218B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100218BF0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100218D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex::unlock(v11);

  _Unwind_Resume(a1);
}

void sub_100218EB4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_100218ED8(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:];

  if (!v3) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v4];
  }
}

void sub_100218F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100218F64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138543362;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#find-ses,Remove stale observer from relay: %{public}@", (uint8_t *)&v5, 0xCu);
  }
  [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:v3];
  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectForKey:v3];
}

void sub_10021903C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100219378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100219698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002199EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100219D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100219E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_10021A170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021A3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021A3F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v1 = (void *)WeakRetained[11];
    WeakRetained[11] = 0;

    [WeakRetained _resetSessionStateForOperation:1];
  }
}

void sub_10021A464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10021A52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021A944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021AABC(uint64_t a1)
{
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)NIServerFindingSession;
  uint64_t v2 = [super resourcesManager];
  id v3 = [v2 remote];
  [v3 didGenerateShareableConfigurationData:*(void *)(a1 + 40) forObject:*(void *)(a1 + 48)];
}

void sub_10021AB30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021ABEC(uint64_t a1)
{
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)NIServerFindingSession;
  uint64_t v2 = [super resourcesManager];
  id v3 = [v2 remote];
  [v3 didDiscoverNearbyObject:*(void *)(a1 + 40)];
}

void sub_10021AC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021AD1C(uint64_t a1)
{
  v5.receiver = *(id *)(a1 + 32);
  v5.super_class = (Class)NIServerFindingSession;
  uint64_t v2 = [super resourcesManager];
  id v3 = [v2 remote];
  uint64_t v6 = *(void *)(a1 + 40);
  objc_super v4 = +[NSArray arrayWithObjects:&v6 count:1];
  [v3 didRemoveNearbyObjects:v4 withReason:0];
}

void sub_10021ADEC(_Unwind_Exception *a1)
{
  objc_super v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10021AEC0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 104) preferredUpdateRate] != (id)3)
  {
    uint64_t v2 = *(unsigned char **)(a1 + 32);
    if (v2[57])
    {
      if (!v2[58])
      {
        v2[58] = 1;
        id v3 = (id)qword_1008ABDE0;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 80);
          objc_super v5 = [*(id *)(a1 + 40) firstObject];
          [v5 distance];
          *(_DWORD *)std::string buf = 138543618;
          uint64_t v11 = v4;
          __int16 v12 = 2050;
          double v13 = v6;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-ses,Delivered first update [%{public}@]. Range: %{public}0.2f", buf, 0x16u);
        }
        uint64_t v2 = *(unsigned char **)(a1 + 32);
      }
      v9.receiver = v2;
      v9.super_class = (Class)NIServerFindingSession;
      float v7 = [super resourcesManager];
      uint64_t v8 = [v7 remote];
      [v8 didUpdateNearbyObjects:*(void *)(a1 + 40)];
    }
  }
}

void sub_10021B034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021B13C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 104) preferredUpdateRate] != (id)3)
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 57))
    {
      v4.receiver = *(id *)(a1 + 32);
      v4.super_class = (Class)NIServerFindingSession;
      uint64_t v2 = [super resourcesManager];
      id v3 = [v2 remote];
      [v3 didUpdateAlgorithmState:*(void *)(a1 + 40) forObject:*(void *)(a1 + 48)];
    }
  }
}

void sub_10021B1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021B2D4(_Unwind_Exception *a1)
{
  float v6 = v5;

  _Unwind_Resume(a1);
}

void sub_10021B3C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10021B49C(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2113;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_10021B4B4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C888))
  {
    sub_100004950(qword_10089C870, "PRRoseProviderNetworkListener");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C870, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C888);
  }
}

void sub_10021B54C(_Unwind_Exception *a1)
{
}

void sub_10021B564()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8A8))
  {
    sub_100004950(&qword_10089C890, "com.apple.nearbyd.accessory.download");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C890, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8A8);
  }
}

void sub_10021B5FC(_Unwind_Exception *a1)
{
}

void sub_10021B614()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8C8))
  {
    sub_100004950(&qword_10089C8B0, "com.apple.nearbyd.accessory.files");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C8B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8C8);
  }
}

void sub_10021B6AC(_Unwind_Exception *a1)
{
}

void sub_10021B6C4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8E8))
  {
    sub_100004950(qword_10089C8D0, "MA_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8E8);
  }
}

void sub_10021B75C(_Unwind_Exception *a1)
{
}

void sub_10021B774()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C908))
  {
    sub_100004950(qword_10089C8F0, "MB_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C908);
  }
}

void sub_10021B80C(_Unwind_Exception *a1)
{
}

void sub_10021B824()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C928))
  {
    sub_100004950(qword_10089C910, "D");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C910, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C928);
  }
}

void sub_10021B8BC(_Unwind_Exception *a1)
{
}

void sub_10021B8D4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C948, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C948))
  {
    sub_100004950(&qword_10089C930, "A");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C930, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C948);
  }
}

void sub_10021B96C(_Unwind_Exception *a1)
{
}

void sub_10021B984()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C968))
  {
    sub_100004950(qword_10089C950, "FAS.bin");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C950, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C968);
  }
}

void sub_10021BA1C(_Unwind_Exception *a1)
{
}

void sub_10021BA34()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C988))
  {
    qword_10089C970 = 0;
    qword_10089C978 = 0;
    qword_10089C980 = 0;
    uint64_t v0 = operator new(0x30uLL);
    qword_10089C978 = (uint64_t)(v0 + 3);
    qword_10089C980 = (uint64_t)(v0 + 3);
    _OWORD *v0 = xmmword_1004BBA20;
    v0[1] = *(_OWORD *)algn_1004BBA30;
    v0[2] = xmmword_1004BBA40;
    qword_10089C970 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_100008CAC, &qword_10089C970, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C988);
  }
}

void sub_10021BAF0(_Unwind_Exception *a1)
{
}

void sub_10021BB08()
{
  *(_OWORD *)uint64_t v45 = xmmword_1004BB9B0;
  *(_OWORD *)&v45[16] = unk_1004BB9C0;
  sub_1001A003C((uint64_t)&unk_1008A52F0, (int *)v45, 4);
  xmmword_1008A5308 = xmmword_1004B7660;
  unk_1008A5318 = xmmword_1004B7670;
  qword_1008A5330 = 0;
  unk_1008A5338 = 0;
  qword_1008A5328 = 0x3FD999999999999ALL;
  unk_1008A5340 = xmmword_1004B7680;
  dword_1008A5350 = 5;
  qword_1008A5358 = 0x4000000000000000;
  dword_1008A5360 = 5;
  byte_1008A5368 = 0;
  unk_1008A536C = 0x30000000ALL;
  xmmword_1008A5378 = xmmword_1004B7690;
  unk_1008A5388 = xmmword_1004B76A0;
  xmmword_1008A5398 = xmmword_1004B76B0;
  qword_1008A53A8 = 0x3FE3333333333333;
  dword_1008A53B0 = 3;
  xmmword_1008A53B8 = xmmword_1004B76C0;
  unk_1008A53C8 = xmmword_1004B76A0;
  xmmword_1008A53D8 = xmmword_1004B7690;
  qword_1008A53E8 = 0x3FE3333333333333;
  byte_1008A53F0 = 0;
  xmmword_1008A53F8 = xmmword_1004B76D0;
  unk_1008A5408 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v44 = _Q0;
  xmmword_1008A5418 = _Q0;
  qword_1008A5428 = 0xBFD3333333333333;
  xmmword_1008A5430 = xmmword_1004B76F0;
  qword_1008A5440 = 0x3E99999A40000000;
  xmmword_1008A5448 = xmmword_1004B7670;
  qword_1008A5460 = 0;
  unk_1008A5468 = 0;
  qword_1008A5458 = 0x3FD999999999999ALL;
  xmmword_1008A5470 = xmmword_1004B7680;
  dword_1008A5480 = 5;
  qword_1008A5488 = 0x4000000000000000;
  dword_1008A5490 = 4;
  qword_1008A5498 = 0x300000008;
  qword_1008A54A0 = 0xC04E800000000000;
  v46.__r_.__value_.__r.__words[0] = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)algn_1008A54A8, (double *)&v46, 1);
  xmmword_1008A54C0 = xmmword_1004B7700;
  qword_1008A54D0 = 0x4024000000000000;
  dword_1008A54D8 = 45;
  byte_1008A54E0 = 0;
  byte_1008A54F8 = 0;
  qword_1008A5500 = 0;
  byte_1008A5508 = 0;
  dword_1008A550C = 1;
  byte_1008A5510 = 1;
  xmmword_1008A5518 = xmmword_1004B7710;
  unk_1008A5528 = xmmword_1004B7720;
  xmmword_1008A5538 = v44;
  qword_1008A5548 = 0xC059000000000000;
  xmmword_1008A5550 = xmmword_1004B7730;
  qword_1008A5560 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008A5568 = xmmword_1004B7670;
  qword_1008A5578 = 0x3FD999999999999ALL;
  qword_1008A5588 = 0;
  qword_1008A5580 = 0;
  xmmword_1008A5590 = xmmword_1004B7680;
  dword_1008A55A0 = 5;
  qword_1008A55A8 = 0x4000000000000000;
  dword_1008A55B0 = 10;
  qword_1008A55B8 = 0x4034000000000000;
  dword_1008A55C0 = 3;
  xmmword_1008A55C8 = xmmword_1004B7740;
  __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008A52F0, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_72, &off_10089EDC0, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_73, &off_10089EDC8, (void *)&_mh_execute_header);
  qword_1008A55E0 = 0;
  unk_1008A55E8 = 0;
  qword_1008A55D8 = 0;
  float v6 = operator new(0x40uLL);
  qword_1008A55E0 = (uint64_t)(v6 + 4);
  unk_1008A55E8 = v6 + 4;
  *float v6 = xmmword_1004BB9D0;
  v6[1] = unk_1004BB9E0;
  _OWORD v6[2] = xmmword_1004BB9F0;
  v6[3] = unk_1004BBA00;
  qword_1008A55D8 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A55D8, (void *)&_mh_execute_header);
  qword_1008A55F8 = 0;
  unk_1008A5600 = 0;
  qword_1008A55F0 = 0;
  float v7 = operator new(0x10uLL);
  qword_1008A55F8 = (uint64_t)(v7 + 1);
  unk_1008A5600 = v7 + 1;
  *float v7 = xmmword_1004BBA10;
  qword_1008A55F0 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A55F0, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v8 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append((std::string *)v45, ".bin");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1008A5618 = v10->__r_.__value_.__r.__words[2];
  xmmword_1008A5608 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5608, (void *)&_mh_execute_header);
  sub_10039D144();
  __int16 v12 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append((std::string *)v45, ".bin");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1008A5630 = v14->__r_.__value_.__r.__words[2];
  xmmword_1008A5620 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5620, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v16 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v16->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append((std::string *)v45, ".bin");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1008A5648 = v18->__r_.__value_.__r.__words[2];
  xmmword_1008A5638 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5638, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v20 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  unsigned int v22 = std::string::append((std::string *)v45, ".bin");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1008A5660 = v22->__r_.__value_.__r.__words[2];
  xmmword_1008A5650 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5650, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v24 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v24->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  uint64_t v26 = std::string::append((std::string *)v45, ".bin");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1008A5678 = v26->__r_.__value_.__r.__words[2];
  xmmword_1008A5668 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5668, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v28 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v28->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append((std::string *)v45, ".bin");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1008A5690 = v30->__r_.__value_.__r.__words[2];
  xmmword_1008A5680 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5680, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v32 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  uint64_t v34 = std::string::append((std::string *)v45, ".bin");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1008A56A8 = v34->__r_.__value_.__r.__words[2];
  xmmword_1008A5698 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A5698, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v36 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v36->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  double v38 = std::string::append((std::string *)v45, ".bin");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  qword_1008A56C0 = v38->__r_.__value_.__r.__words[2];
  xmmword_1008A56B0 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A56B0, (void *)&_mh_execute_header);
  sub_10039D144();
  int v40 = std::string::insert(&v46, 0, "reverseLUT_A");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  *(void *)&v45[16] = *((void *)&v40->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v45 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  uint64_t v42 = std::string::append((std::string *)v45, ".bin");
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  qword_1008A56D8 = v42->__r_.__value_.__r.__words[2];
  xmmword_1008A56C8 = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if ((v45[23] & 0x80000000) != 0) {
    operator delete(*(void **)v45);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A56C8, (void *)&_mh_execute_header);
}

void sub_10021C4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_10021C710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021C858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10021C934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021CC04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021D224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  long long v23 = *(void **)(v21 - 112);
  if (v23)
  {
    *(void *)(v21 - 104) = v23;
    operator delete(v23);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  uint64_t v24 = *(void **)(v21 - 80);
  if (v24)
  {
    *(void *)(v21 - 72) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

void sub_10021D2C0(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1] - *a1;
  BOOL v3 = a2 >= v2;
  size_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10003F834(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

void sub_10021DB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a19) {
    operator delete(a19);
  }
  uint64_t v30 = *(void **)(v28 - 144);
  if (v30)
  {
    *(void *)(v28 - 136) = v30;
    operator delete(v30);
  }
  long long v31 = *(void **)(v28 - 112);
  if (v31)
  {
    *(void *)(v28 - 104) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(void **)(v28 - 80);
  if (v32)
  {
    *(void *)(v28 - 72) = v32;
    operator delete(v32);
  }

  _Unwind_Resume(a1);
}

void sub_10021DC20(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v3 = a1[1] - *a1;
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_10021DF20(a1, v5, a3);
  }
  else if (!v4)
  {
    a1[1] = *a1 + a2;
  }
}

void sub_10021DE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10021DF20(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  float v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      long long v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      float v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      sub_1000267C4();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      __int16 v12 = operator new(v11);
    }
    else {
      __int16 v12 = 0;
    }
    uint64_t v14 = &v8[(void)v12];
    long long v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    long long v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--uint64_t v14 = v18;
      }
      while (v7 != v17);
      float v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_10021E064(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_10021E070(uint64_t result, int a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 1024;
  *(_DWORD *)(a3 + 14) = a2;
  *(_WORD *)(a3 + 18) = 1024;
  return result;
}

void sub_10021E08C(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x18u);
}

void sub_10021E1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021E2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10021E3FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021E55C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021E5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021E79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10021E81C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  *(_DWORD *)a1 = *((_DWORD *)sub_100007D00() + 144);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_1001FD308(a1 + 24, a4);
  id v8 = v7;
  *(void *)(a1 + 56) = v8;
  sub_1002207E0((uint64_t)v12, a3);
  sub_100220878(a1 + 64, (uint64_t)v12);
  sub_1001FD284(v12);
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  if (!*(void *)(a1 + 56))
  {
    unint64_t v10 = "fDispatchQueue";
    int v11 = 53;
    goto LABEL_8;
  }
  if (!*(void *)(a1 + 88))
  {
    unint64_t v10 = "fInjectIsoCb";
    int v11 = 54;
    goto LABEL_8;
  }
  if (!*(void *)(a1 + 48))
  {
    unint64_t v10 = "fGetIsoCb";
    int v11 = 55;
LABEL_8:
    __assert_rtn("PRIsoQueryManager", "PRIsoQueryManager.mm", v11, v10);
  }

  return a1;
}

void sub_10021E954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001FD284((uint64_t *)va);

  sub_1001FD3A0(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_10021E9C8(uint64_t a1)
{
  sub_10021EA88(a1);
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    unint64_t v3 = *(NSObject **)(a1 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10021EAF4;
    block[3] = &unk_1008466D8;
    void block[4] = a1;
    dispatch_sync(v3, block);
    uint64_t v2 = *(void **)(a1 + 112);
  }

  sub_1001FD578((void *)(a1 + 64));
  sub_1001FD3A0((void *)(a1 + 24));

  return a1;
}

void sub_10021EA88(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    [v2 enumerateObjectsUsingBlock:&stru_10085A908];
    [*(id *)(a1 + 96) removeAllObjects];
  }
  unint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    [v3 invalidate];
    uint64_t v4 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_10021EAF4(uint64_t a1)
{
}

void sub_10021EAFC(uint64_t a1)
{
  if (*(void *)(a1 + 112))
  {
    uint64_t v2 = qword_1008A5700;
    if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,PRIsoQueryManager: Cancelling fNoDeviceFoundErrorSubmissionTimer", v4, 2u);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 112));
    unint64_t v3 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = 0;
  }
}

void sub_10021EB84(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEBUG)) {
    sub_100420DC4();
  }
  id v2 = objc_alloc_init((Class)RPCompanionLinkClient);
  unint64_t v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v2;

  [*(id *)(a1 + 16) setInvalidationHandler:&stru_10085A710];
  uint64_t v4 = *(void **)(a1 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10021ED00;
  v7[3] = &unk_10085A730;
  void v7[4] = a1;
  [v4 registerRequestID:@"com.apple.proximity.regulatoryrappportlink" options:0 handler:v7];
  unint64_t v5 = qword_1008A5700;
  if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,registerIsoQueryListener request handler registered", v6, 2u);
  }
}

void sub_10021EC9C(id a1)
{
  uint64_t v1 = qword_1008A5700;
  if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,isoQueryListener client invalidation", v2, 2u);
  }
}

void sub_10021ED00(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 48);
  if (!v10) {
    sub_100027894();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v10 + 48))(__p);
  if (v17 >= 0) {
    int v11 = __p;
  }
  else {
    int v11 = (void **)__p[0];
  }
  __int16 v12 = +[NSString stringWithCString:v11 encoding:4];
  v20[0] = @"name";
  v20[1] = @"version";
  v21[0] = @"RegulatoryInfo";
  v21[1] = @"1.0";
  v20[2] = @"country";
  _OWORD v21[2] = v12;
  long long v13 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:3];
  uint64_t v14 = qword_1008A5700;
  if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
  {
    if (v17 < 0)
    {
      if (__p[1]) {
        long long v15 = (void **)__p[0];
      }
      else {
        long long v15 = (void **)"__";
      }
    }
    else
    {
      long long v15 = __p;
      if (!v17) {
        long long v15 = (void **)"__";
      }
    }
    *(_DWORD *)std::string buf = 136315138;
    long long v19 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,isoQueryListener,request received,isoCountry:%s", buf, 0xCu);
  }
  (*((void (**)(id, void *, void, void))v9 + 2))(v9, v13, 0, 0);

  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10021EF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10021EF54(uint64_t a1)
{
  if (sub_100005424(*(_DWORD *)a1))
  {
    sub_10021EB84(a1);
  }
  else if (sub_10039CFF8(*(_DWORD *)a1))
  {
    if (*(void *)(a1 + 16))
    {
      id v2 = qword_1008A5700;
      if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,start, active discovery client present", buf, 2u);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 104) = 0;
      id v3 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v4 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v3;

      id v5 = objc_alloc_init((Class)RPCompanionLinkClient);
      uint64_t v6 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v5;

      [*(id *)(a1 + 16) setDispatchQueue:*(void *)(a1 + 56)];
      [*(id *)(a1 + 16) setInvalidationHandler:&stru_10085A750];
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_10021F1F8;
      void v9[3] = &unk_1008466D8;
      void v9[4] = a1;
      [*(id *)(a1 + 16) setInterruptionHandler:v9];
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10021F268;
      void v8[3] = &unk_10085A770;
      void v8[4] = a1;
      [*(id *)(a1 + 16) setDeviceFoundHandler:v8];
      id v7 = qword_1008A5700;
      if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,start, activating discovery client", buf, 2u);
      }
      [*(id *)(a1 + 16) setFlags:[*(id *)(a1 + 16) flags] | 0x10];
      [*(id *)(a1 + 16) setControlFlags:((*(id *)(a1 + 16))->controlFlags | 0x980E)];
      *(double *)(a1 + 8) = sub_100006C38();
      [*(id *)(a1 + 16) activateWithCompletion:&stru_10085A790];
      sub_10021F680(a1);
    }
  }
}

void sub_10021F194(id a1)
{
  uint64_t v1 = qword_1008A5700;
  if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,start,invalidationHandler, discovery client invalidation", v2, 2u);
  }
}

id sub_10021F1F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = qword_1008A5700;
  if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,start,interruptionHandler,discovery client", v4, 2u);
  }
  return [*(id *)(v1 + 96) removeAllObjects];
}

void sub_10021F268(uint64_t a1, void *a2)
{
}

void sub_10021F270(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (id)qword_1008A5700;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [v3 effectiveIdentifier];
      uint64_t v6 = [v3 model];
      *(_DWORD *)std::string buf = 138478083;
      uint64_t v20 = v5;
      __int16 v21 = 2112;
      unsigned int v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,connectWithActiveDevice, device found: %{private}@ %@", buf, 0x16u);
    }
    if (*(unsigned char *)(a1 + 104))
    {
      id v7 = qword_1008A5700;
      if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,connectWithActiveDevice, device found, ignoring, Iso already available", buf, 2u);
      }
    }
    else
    {
      id v8 = [v3 model];
      if (!v8
        || ([v3 model],
            id v9 = objc_claimAutoreleasedReturnValue(),
            unsigned __int8 v10 = [v9 containsString:@"iPhone"],
            v9,
            v8,
            (v10 & 1) != 0))
      {
        sub_10021EAFC(a1);
        int v11 = (id)qword_1008A5700;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v12 = [v3 effectiveIdentifier];
          long long v13 = [v3 model];
          *(_DWORD *)std::string buf = 138478083;
          uint64_t v20 = v12;
          __int16 v21 = 2112;
          unsigned int v22 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,connectWithActiveDevice, activating %{private}@ %@", buf, 0x16u);
        }
        id v14 = objc_alloc_init((Class)RPCompanionLinkClient);
        [v14 setControlFlags:((unint64_t)[v14 controlFlags] | 0x980E)];
        [v14 setDestinationDevice:v3];
        [v14 setDispatchQueue:*(void *)(a1 + 56)];
        [v14 setInvalidationHandler:&stru_10085A7F0];
        [v14 setInterruptionHandler:&stru_10085A810];
        [*(id *)(a1 + 96) addObject:v14];
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_10021F958;
        _OWORD v16[3] = &unk_10085A838;
        uint64_t v18 = a1;
        id v15 = v14;
        id v17 = v15;
        [v15 activateWithCompletion:v16];
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_ERROR))
  {
    sub_100420E04();
  }
}

void sub_10021F56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021F5EC(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = qword_1008A5700;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_ERROR)) {
      sub_100420E44((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,start, activateWithCompletion, success", v10, 2u);
  }
}

BOOL sub_10021F680(uint64_t a1)
{
  sub_10021EAFC(a1);
  dispatch_source_t v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 56));
  id v3 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v2;

  uint64_t v4 = *(NSObject **)(a1 + 112);
  if (v4)
  {
    dispatch_time_t v5 = dispatch_time(0, 1800000000000);
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
    uint64_t v6 = *(NSObject **)(a1 + 112);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10021F768;
    handler[3] = &unk_1008466D8;
    handler[4] = a1;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_resume(*(dispatch_object_t *)(a1 + 112));
  }
  return v4 != 0;
}

uint64_t sub_10021F768(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEBUG)) {
    sub_100420EB0();
  }
  sub_10021EAFC(v1);
  return AnalyticsSendEventLazy();
}

NSDictionary *__cdecl sub_10021F7C8(id a1)
{
  CFStringRef v4 = @"ErrorCode";
  uint64_t v1 = +[NSNumber numberWithInt:6];
  dispatch_time_t v5 = v1;
  dispatch_source_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return (NSDictionary *)v2;
}

void sub_10021F878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021F890(id a1)
{
  uint64_t v1 = qword_1008A5700;
  if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_source_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,connectWithActiveDevice, client invalidation", v2, 2u);
  }
}

void sub_10021F8F4(id a1)
{
  uint64_t v1 = qword_1008A5700;
  if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_source_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,connectWithActiveDevice,interruptionHandler, connectionClient interrupted", v2, 2u);
  }
}

void sub_10021F958(uint64_t a1, void *a2)
{
}

void sub_10021F968(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (id)qword_1008A5700;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [v5 destinationDevice];
    uint64_t v9 = [v8 effectiveIdentifier];
    LODWORD(buf) = 138477827;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,sendIsoRequest, device:%{private}@", (uint8_t *)&buf, 0xCu);
  }
  if (v6)
  {
    unsigned __int8 v10 = qword_1008A5700;
    if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_ERROR)) {
      sub_100420EF0((uint64_t)v6, v10, v11, v12, v13, v14, v15, v16);
    }
    [*(id *)(a1 + 96) removeObject:v5];
    if (!*(unsigned char *)(a1 + 104))
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v34 = 0x2020000000;
      int v35 = 0;
      uint64_t v17 = (uint64_t)[v6 code];
      if (v17 > -6723)
      {
        if (v17 == -6714)
        {
          int v18 = 2;
          goto LABEL_21;
        }
        if (v17 == -6722)
        {
          int v18 = 1;
          goto LABEL_21;
        }
      }
      else
      {
        if (v17 == -71143)
        {
          int v18 = 5;
          goto LABEL_21;
        }
        if (v17 == -6727)
        {
          int v18 = 3;
LABEL_21:
          int v35 = v18;
          uint64_t v26 = _NSConcreteStackBlock;
          uint64_t v27 = 3221225472;
          uint64_t v28 = sub_10021FD2C;
          long long v29 = &unk_10085A860;
          p_long long buf = &buf;
          AnalyticsSendEventLazy();
          _Block_object_dispose(&buf, 8);
          goto LABEL_22;
        }
      }
      int v18 = 0;
      goto LABEL_21;
    }
  }
  else if ([*(id *)(a1 + 96) containsObject:v5])
  {
    uint64_t v31 = RPOptionStatusFlags;
    long long v19 = +[NSNumber numberWithUnsignedLongLong:24590];
    uint64_t v32 = v19;
    uint64_t v20 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    _OWORD v23[2] = sub_10021FE00;
    v23[3] = &unk_10085A8C8;
    uint64_t v25 = a1;
    id v24 = v5;
    [v24 sendRequestID:@"com.apple.proximity.regulatoryrappportlink" request:&__NSDictionary0__struct options:v20 responseHandler:v23];
  }
  else
  {
    __int16 v21 = qword_1008A5700;
    if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = *(unsigned __int8 *)(a1 + 104);
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,sendIsoRequest, client invalid fIsoKnown = %d", (uint8_t *)&buf, 8u);
    }
  }
LABEL_22:
}

void sub_10021FCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_10021FD2C(uint64_t a1)
{
  CFStringRef v4 = @"ErrorCode";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
  id v5 = v1;
  dispatch_source_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

void sub_10021FDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10021FE00(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = (id)qword_1008A5700;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = [*(id *)(a1 + 32) destinationDevice];
    uint64_t v13 = [v12 effectiveIdentifier];
    *(_DWORD *)long long buf = 138477827;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,sendIsoRequest,response, device:%{private}@", buf, 0xCu);
  }
  if ([*(id *)(v10 + 96) containsObject:*(void *)(a1 + 32)])
  {
    if (*(unsigned char *)(v10 + 104))
    {
      uint64_t v14 = qword_1008A5700;
      if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v9;
        uint64_t v15 = "#regulatory,isoquerymgr,sendIsoRequest,response, Iso available, ignoring error = %@";
        uint64_t v16 = v14;
        uint32_t v17 = 12;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
        goto LABEL_41;
      }
      goto LABEL_41;
    }
    if (v9)
    {
      uint64_t v20 = qword_1008A5700;
      if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_ERROR)) {
        sub_100420F9C((uint64_t)v9, v20, v21, v22, v23, v24, v25, v26);
      }
      [*(id *)(a1 + 32) invalidate];
      [*(id *)(v10 + 96) removeObject:*(void *)(a1 + 32)];
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x2020000000;
      LODWORD(v51) = 0;
      uint64_t v27 = (uint64_t)[v9 code];
      if (v27 > -6723)
      {
        if (v27 == -6714)
        {
          int v28 = 2;
          goto LABEL_31;
        }
        if (v27 == -6722)
        {
          int v28 = 1;
          goto LABEL_31;
        }
      }
      else
      {
        if (v27 == -71143)
        {
          int v28 = 5;
          goto LABEL_31;
        }
        if (v27 == -6727)
        {
          int v28 = 3;
LABEL_31:
          LODWORD(v51) = v28;
          uint64_t v45 = _NSConcreteStackBlock;
          uint64_t v46 = 3221225472;
          uint64_t v47 = sub_1002204A8;
          uint64_t v48 = &unk_10085A860;
          uint64_t v49 = buf;
          AnalyticsSendEventLazy();
          _Block_object_dispose(buf, 8);
          goto LABEL_41;
        }
      }
      int v28 = 0;
      goto LABEL_31;
    }
    if (v7)
    {
      long long v29 = [v7 objectForKeyedSubscript:@"name"];
      if (v29)
      {
        uint64_t v30 = [v7 objectForKeyedSubscript:@"version"];
        if (v30)
        {
          uint64_t v31 = [v7 objectForKeyedSubscript:@"country"];
          BOOL v32 = v31 == 0;

          if (!v32)
          {
            long long v33 = (id)qword_1008A5700;
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              long long v41 = [v7 objectForKeyedSubscript:@"name"];
              uint64_t v34 = [v7 objectForKeyedSubscript:@"version"];
              int v35 = [v7 objectForKeyedSubscript:@"country"];
              *(_DWORD *)long long buf = 138412802;
              *(void *)&uint8_t buf[4] = v41;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v34;
              *(_WORD *)&buf[22] = 2112;
              uint64_t v51 = v35;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,sendIsoRequest,response, %@ %@ %@", buf, 0x20u);
            }
            uint64_t v36 = *(NSObject **)(v10 + 56);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10022057C;
            block[3] = &unk_100855ED8;
            uint64_t v44 = v10;
            id v37 = v7;
            id v43 = v37;
            dispatch_async(v36, block);
            id v38 = [v37 objectForKeyedSubscript:@"country"];
            sub_100004950(buf, (char *)[v38 UTF8String]);
            if ((buf[23] & 0x80000000) != 0)
            {
              BOOL v39 = *(void *)&buf[8] == 0;
              operator delete(*(void **)buf);
            }
            else
            {
              BOOL v39 = buf[23] == 0;
            }

            if (!v39)
            {
              *(unsigned char *)(v10 + 104) = 1;
              floor(sub_100006C38() - *(double *)(v10 + 8));
              AnalyticsSendEventLazy();
            }

LABEL_36:
            if (*(unsigned char *)(v10 + 104))
            {
              int v40 = qword_1008A5700;
              if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#regulatory,isoquerymgr,sendIsoRequest,response, Iso available,teardown", buf, 2u);
              }
              sub_10021EA88(v10);
            }
            else
            {
              [*(id *)(a1 + 32) invalidate];
              [*(id *)(v10 + 96) removeObject:*(void *)(a1 + 32)];
            }
            goto LABEL_41;
          }
        }
        else
        {
        }
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_ERROR)) {
      sub_100420F5C();
    }
    AnalyticsSendEventLazy();
    goto LABEL_36;
  }
  uint64_t v18 = qword_1008A5700;
  if (os_log_type_enabled((os_log_t)qword_1008A5700, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *(unsigned __int8 *)(v10 + 104);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v19;
    uint64_t v15 = "#regulatory,isoquerymgr,sendIsoRequest,response, client connection invalid fIsoKnown = %d";
    uint64_t v16 = v18;
    uint32_t v17 = 8;
    goto LABEL_9;
  }
LABEL_41:
}

void sub_1002203F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_1002204A8(uint64_t a1)
{
  CFStringRef v4 = @"ErrorCode";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
  id v5 = v1;
  dispatch_source_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

void sub_100220564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10022057C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"country"];
  sub_100004950(__p, (char *)[v2 UTF8String]);
  uint64_t v3 = *(void *)(v1 + 88);
  if (!v3) {
    sub_100027894();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 48))(v3, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100220618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_100220640(uint64_t a1)
{
  CFStringRef v4 = @"MCCSearchTime";
  uint64_t v1 = +[NSNumber numberWithInt:(int)*(double *)(a1 + 32)];
  char v5 = v1;
  id v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

void sub_1002206F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_100220710(id a1)
{
  CFStringRef v4 = @"ErrorCode";
  uint64_t v1 = +[NSNumber numberWithInt:4];
  char v5 = v1;
  id v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return (NSDictionary *)v2;
}

void sub_1002207C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002207D8(id a1, RPCompanionLinkClient *a2, unint64_t a3, BOOL *a4)
{
}

uint64_t sub_1002207E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100220878(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  if (*(void *)(a2 + 24))
  {
    CFStringRef v4 = operator new(0x28uLL);
    void *v4 = off_10085A938;
    sub_100220B04((uint64_t)(v4 + 1), a2);
    *(void *)(a1 + 24) = v4;
  }
  return a1;
}

void *sub_1002208E8(void *a1)
{
  *a1 = off_10085A938;
  sub_1001FD284(a1 + 1);
  return a1;
}

void sub_10022092C(void *a1)
{
  *a1 = off_10085A938;
  sub_1001FD284(a1 + 1);

  operator delete();
}

void *sub_100220990(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  id v2 = operator new(0x28uLL);
  *id v2 = off_10085A938;
  sub_1002207E0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1002209E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002209F8(uint64_t a1, void *a2)
{
  *a2 = off_10085A938;
  return sub_1002207E0((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100220A24(uint64_t a1)
{
  return sub_1001FD284((void *)(a1 + 8));
}

void sub_100220A2C(void *a1)
{
  sub_1001FD284(a1 + 1);

  operator delete(a1);
}

uint64_t sub_100220A68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    sub_100027894();
  }
  id v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_100220AB8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100220AF8()
{
}

uint64_t sub_100220B04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void sub_100220B84()
{
  qword_1008A5700 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
}

uint64_t sub_100220BD8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *(void *)a1 = dispatch_queue_create(off_10089EE90[0], 0);
  id v6 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 0;
  sub_1001B1758(a1 + 24, a3);
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 345600;
  id v7 = qword_1008A5708;
  if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "regulatory,download,sm,init", buf, 2u);
  }
  *(void *)long long buf = 0;
  id v8 = sub_100006A00();
  BOOL v9 = sub_1003CF0FC((uint64_t)v8, buf);
  if (*(uint64_t *)buf > 300 && v9) {
    *(void *)(a1 + 72) = *(void *)buf;
  }
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v11, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_string(v11, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_int64(v11, XPC_ACTIVITY_INTERVAL, *(void *)(a1 + 72));
  xpc_dictionary_set_int64(v11, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_15_MIN);
  xpc_activity_unregister(off_10089EE90[0]);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100220E10;
  handler[3] = &unk_10085AA08;
  handler[4] = a1;
  xpc_activity_register(off_10089EE90[0], v11, handler);
  sub_100221024((NSObject **)a1);

  return a1;
}

void sub_100220DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000077C4(v11, 0, a3, a4, a5, a6, a7, a8);
  sub_100196E1C(v10);

  _Unwind_Resume(a1);
}

void sub_100220E10(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  id v6 = qword_1008A5708;
  if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134217984;
    xpc_activity_state_t v9 = state;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "regulatory,download,state,%ld", (uint8_t *)&v8, 0xCu);
  }
  if ((unint64_t)(state - 3) < 3) {
    goto LABEL_6;
  }
  if (state == 2)
  {
    sub_100220F3C(v4, v3);
    goto LABEL_9;
  }
  if (state == 1)
  {
LABEL_6:
    id v7 = qword_1008A5708;
    if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_ERROR)) {
      sub_100421008(state, v7);
    }
  }
LABEL_9:
}

void sub_100220F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100220F3C(NSObject **a1, void *a2)
{
  id v3 = a2;
  if (xpc_activity_set_state((xpc_activity_t)v3, 4))
  {
    uint64_t v4 = *a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _OWORD v6[2] = sub_1002214B8;
    v6[3] = &unk_100855ED8;
    int v8 = a1;
    id v7 = v3;
    dispatch_async(v4, v6);
  }
  else
  {
    id v5 = qword_1008A5708;
    if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_ERROR)) {
      sub_100421080(v5);
    }
  }
}

void sub_100221014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100221024(NSObject **a1)
{
  id v2 = qword_1008A5708;
  if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "regulatory,download,triggerUpdate,startup", buf, 2u);
  }
  id v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002214B0;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_async(v3, block);
}

void sub_1002210E4(NSObject **a1)
{
  id v2 = qword_1008A5708;
  if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "regulatory,download,onFirstUnlock", buf, 2u);
  }
  id v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002211A0;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_async(v3, block);
}

void sub_1002211A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (sub_1002211F0(v1))
  {
    *(_DWORD *)(v1 + 56) = 0;
    sub_100221370(v1);
  }
}

uint64_t sub_1002211F0(uint64_t a1)
{
  sub_100007D00();
  sub_100003118(off_10089EEB0, &v14);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v2 = &v14;
  }
  else {
    id v2 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  sub_100004950(v12, (char *)v2);
  if (sub_1002BA6A0((const char *)v12))
  {
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v3 = &v14;
    }
    else {
      id v3 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    sub_100004950(v10, (char *)v3);
    sub_1002BA6DC((const char *)v10);
    if (v4 <= (double)*(uint64_t *)(a1 + 72))
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v6 = &v14;
      }
      else {
        id v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
      }
      sub_100004950(__p, (char *)v6);
      uint64_t v5 = sub_1002BB0D4((uint64_t)__p) ^ 1;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v5 = 1;
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
  }
  else
  {
    uint64_t v5 = 1;
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_100221304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(exception_object);
}

void sub_100221370(uint64_t a1)
{
  if (sub_1002211F0(a1))
  {
    if ((sub_100221564((dispatch_queue_t *)a1) & 1) == 0)
    {
      int v2 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)(a1 + 56) = v2 + 1;
      if (v2 <= 3)
      {
        sub_1002213D8((NSObject **)a1);
      }
    }
  }
}

void sub_1002213D8(NSObject **a1)
{
  int v2 = qword_1008A5708;
  if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "regulatory,download,triggerUpdate,retry", buf, 2u);
  }
  dispatch_time_t v3 = dispatch_time(0, 60000000000);
  double v4 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002214A8;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_after(v3, v4, block);
}

uint64_t sub_1002214A8(uint64_t a1)
{
  return sub_100221370(*(void *)(a1 + 32));
}

void sub_1002214B0(uint64_t a1)
{
}

void sub_1002214B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  dispatch_time_t v3 = qword_1008A5708;
  if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "regulatory,download,xpc,triggerUpdate", v5, 2u);
  }
  sub_100221370(v2);
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    double v4 = qword_1008A5708;
    if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_ERROR)) {
      sub_100421100(v4);
    }
  }
}

uint64_t sub_100221564(dispatch_queue_t *a1)
{
  dispatch_assert_queue_V2(*a1);
  CFDictionaryRef v1 = (const __CFDictionary *)CLCopyNearbyAssetSettings();
  CFDictionaryRef v2 = v1;
  if (v1)
  {
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFDictionaryGetTypeID())
    {
      double v4 = qword_1008A5708;
      if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "regulatory,download,copyFromCLMobileAsset,copyData", buf, 2u);
      }
      value = 0;
      int ValueIfPresent = CFDictionaryGetValueIfPresent(v2, @"PrGlobalTileKey", (const void **)&value);
      sub_100007D00();
      sub_100003118(off_10089EEA8[0], &v9);
      if (ValueIfPresent)
      {
        if (value)
        {
          CFTypeID v6 = CFGetTypeID(value);
          if (v6 == CFDataGetTypeID()) {
            operator new();
          }
        }
      }
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
LABEL_15:
      CFRelease(v2);
      return 0;
    }
  }
  id v7 = qword_1008A5708;
  if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "regulatory,download,triggerUpdate,copyFromCLMobileAsset,skipped", buf, 2u);
  }
  uint64_t result = 0;
  if (v2) {
    goto LABEL_15;
  }
  return result;
}

void sub_100221978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v37 - 73) < 0) {
    operator delete(*(void **)(v37 - 96));
  }

  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(a1);
}

void sub_100221A3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFDictionaryRef v2 = (char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    CFDictionaryRef v2 = *(char **)v2;
  }
  sub_100004950(__p, v2);
  sub_100221AB4(v1, (uint64_t *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100221A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100221AB4(uint64_t a1, uint64_t *a2)
{
  sub_100007D00();
  sub_100003118(off_10089EEB0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v5 = +[NSString stringWithCString:p_p encoding:4];
  CFTypeID v6 = +[NSURL fileURLWithPath:v5 isDirectory:0];

  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      id v7 = a2;
    }
    else {
      id v7 = (uint64_t *)*a2;
    }
    int v8 = +[NSString stringWithUTF8String:v7];
    std::string v9 = +[NSURL fileURLWithPath:v8 isDirectory:0];

    if (v9)
    {
      uint64_t v10 = +[NSFileManager defaultManager];
      id v21 = 0;
      id v22 = 0;
      id v11 = [v10 replaceItemAtURL:v6 withItemAtURL:v9 backupItemName:0 options:1 resultingItemURL:&v22 error:&v21];
      id v12 = v22;
      id v13 = v21;

      std::string v14 = *(NSObject **)(a1 + 8);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100221EA0;
      void v20[3] = &unk_1008466D8;
      v20[4] = a1;
      dispatch_async(v14, v20);
      uint64_t v15 = qword_1008A5708;
      if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v16 = a2;
        }
        else {
          uint64_t v16 = (uint64_t *)*a2;
        }
        *(_DWORD *)long long buf = 136315394;
        uint64_t v25 = v16;
        __int16 v26 = 1024;
        int v27 = (int)v11;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "regulatory,download,safeReplaceFileOnDiskWith,%s,replacementSucceeded,%d", buf, 0x12u);
      }
    }
    else
    {
      uint64_t v18 = qword_1008A5708;
      if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_ERROR)) {
        sub_1004211C4(v18);
      }
      id v12 = 0;
      id v13 = 0;
      id v11 = 0;
    }
  }
  else
  {
    uint32_t v17 = qword_1008A5708;
    if (os_log_type_enabled((os_log_t)qword_1008A5708, OS_LOG_TYPE_ERROR)) {
      sub_100421180(v17);
    }
    id v12 = 0;
    id v13 = 0;
    id v11 = 0;
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v11;
}

void sub_100221D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100221DC4(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0) {
    return sub_100002DE4(result, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  long long v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(void *)(a2 + 56);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_100221DF4(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

float sub_100221E08(FILE *a1, uint64_t a2)
{
  if (a1 && sub_1002BA928(a1, a2) && fread(&__ptr, 1uLL, 6uLL, a1) == 6)
  {
    *(_WORD *)(a2 + 84) = __ptr;
    if (*(unsigned char *)a2 == 2) {
      unsigned int v5 = bswap32(v7);
    }
    else {
      unsigned int v5 = v7;
    }
    float result = (double)v5 / 100.0;
    *(float *)(a2 + 80) = result;
  }
  return result;
}

uint64_t sub_100221EA0(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 48);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void sub_100221ED4()
{
  qword_1008A5708 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
}

__CFString *sub_100221F28()
{
  if (qword_1008A5710 != -1) {
    dispatch_once(&qword_1008A5710, &stru_10085AA58);
  }
  uint64_t v0 = off_10089EEB8;

  return v0;
}

void sub_100221F7C(id a1)
{
  uint64_t v1 = (__CFString *)MGCopyAnswer();
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 != CFStringGetTypeID()) {
      sub_100421208();
    }
    char v4 = off_10089EEB8;
    off_10089EEB8 = v2;
  }
}

id sub_100221FF0()
{
  uint64_t v0 = (void *)MGCopyAnswerWithError();

  return v0;
}

id sub_100222034()
{
  if (qword_1008A5720 != -1) {
    dispatch_once(&qword_1008A5720, &stru_10085AA78);
  }
  uint64_t v0 = (void *)qword_1008A5718;

  return v0;
}

void sub_100222088(id a1)
{
  uint64_t v1 = MGCopyAnswerWithError();
  CFDictionaryRef v2 = (void *)qword_1008A5718;
  qword_1008A5718 = v1;
}

id sub_1002220CC()
{
  if (qword_1008A5730 != -1) {
    dispatch_once(&qword_1008A5730, &stru_10085AA98);
  }
  uint64_t v0 = (void *)qword_1008A5728;

  return v0;
}

void sub_100222120(id a1)
{
  uint64_t v1 = MGCopyAnswerWithError();
  CFDictionaryRef v2 = (void *)qword_1008A5728;
  qword_1008A5728 = v1;
}

__CFString *sub_100222164()
{
  if (qword_1008A5738 != -1) {
    dispatch_once(&qword_1008A5738, &stru_10085AAB8);
  }
  uint64_t v0 = off_10089EEC0;

  return v0;
}

void sub_1002221B8(id a1)
{
  uint64_t v1 = (void *)MGCopyAnswer();
  +[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", 2 * (void)[v1 length]);
  CFDictionaryRef v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  id v6 = v1;
  CFTypeID v3 = (unsigned __int8 *)[v6 bytes];
  for (unint64_t i = 0; i < (unint64_t)[v6 length]; ++i)
    [(__CFString *)v2 appendFormat:@"%02lX", v3[i]];
  if (!v2) {
    __assert_rtn("PRGetDeviceWifiSKU_block_invoke", "PRUtilities.m", 104, "mutableString");
  }
  unsigned int v5 = off_10089EEC0;
  off_10089EEC0 = v2;
}

void sub_1002222B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002222D8()
{
  if (qword_1008A5748 != -1) {
    dispatch_once(&qword_1008A5748, &stru_10085AAD8);
  }
  return byte_1008A5740;
}

void sub_10022231C(id a1)
{
  id v1 = (id)MGCopyAnswer();
  byte_1008A5740 = [v1 BOOLValue];
}

void sub_100222374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100222388()
{
  if (qword_1008A5758 != -1) {
    dispatch_once(&qword_1008A5758, &stru_10085AAF8);
  }
  return byte_1008A5750;
}

void sub_1002223CC(id a1)
{
  id v1 = (id)MGCopyAnswer();
  byte_1008A5750 = [v1 BOOLValue];
}

void sub_100222424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100222438()
{
  if (qword_1008A5768 != -1) {
    dispatch_once(&qword_1008A5768, &stru_10085AB18);
  }
  return byte_1008A5760;
}

void sub_10022247C(id a1)
{
  id v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    byte_1008A5760 = CFEqual(v1, @"NonUI") != 0;
    CFRelease(v2);
  }
  else
  {
    byte_1008A5760 = 0;
  }
}

id sub_1002224F4(void *a1)
{
  id v1 = a1;
  CFDictionaryRef v2 = v1;
  if (v1 && [v1 length] == (id)6)
  {
    CFTypeID v3 = +[NSMutableString string];
    id v4 = v2;
    id v5 = [v4 bytes];
    for (unint64_t i = 0; [v4 length] > i; ++i)
    {
      [v3 appendFormat:@"%02lX", i[(void)v5]];
      if ((char *)[v4 length] - 1 > i) {
        [v3 appendString:@":"];
      }
    }
  }
  else
  {
    CFTypeID v3 = 0;
  }

  return v3;
}

void sub_1002225F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100222744(uint64_t a1)
{
  uint64_t v2 = +[NSMapTable strongToWeakObjectsMapTable];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 24);
  *(void *)(v5 + 24) = 0;
}

void sub_1002227F4(id a1)
{
  id v1 = [[_InternalVisionSession alloc] _initInternal];
  uint64_t v2 = (void *)qword_1008A5770;
  qword_1008A5770 = (uint64_t)v1;
}

void sub_1002228F8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) count];
  [*(id *)(*(void *)(a1 + 32) + 16) setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) count];
  id v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    int v7 = 138412802;
    uint64_t v8 = v5;
    __int16 v9 = 1024;
    int v10 = (int)v2;
    __int16 v11 = 1024;
    int v12 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#vision,registerObserver: %@. Before: %d, after: %d.", (uint8_t *)&v7, 0x18u);
  }
  if (v2) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v3 == 0;
  }
  if (!v6) {
    [*(id *)(a1 + 32) _setUpARSession];
  }
}

void sub_100222A98(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) count];
  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectForKey:*(void *)(a1 + 40)];
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) count];
  id v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v7 = 138412802;
    uint64_t v8 = v5;
    __int16 v9 = 1024;
    int v10 = (int)v2;
    __int16 v11 = 1024;
    int v12 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#vision,unregisterObserver: %@. Before: %d, after: %d.", (uint8_t *)&v7, 0x18u);
  }
  if (v2) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    [*(id *)(a1 + 32) _tearDownARSession];
  }
}

void sub_100222C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100222DB0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleARSessionDidUpdateFrame:*(void *)(a1 + 40)];
}

void sub_100222E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100222EA4(uint64_t a1)
{
  id v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#vision,Attempt relocalization: %d", (uint8_t *)v4, 8u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100223354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002234F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100223574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  int v10 = v9;

  a9.super_class = (Class)NIServerVisionInternalSessionRequest;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100223620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100223690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1002236E4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085B070[a1]);
}

void *sub_1002236F8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085B0C8[a1]);
}

void *sub_10022370C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085B110[a1]);
}

void *sub_100223720@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_10085B130[a1]);
}

void sub_100223734(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v9;
  dispatch_queue_t v10 = dispatch_queue_create("com.apple.nearbyd.Rose.analytics", 0);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = v10;
  __int16 v11 = operator new(0x20uLL);
  *__int16 v11 = off_10085AE08;
  v11[1] = sub_100223DA8;
  _DWORD v11[2] = 0;
  void v11[3] = a1;
  v19[3] = v11;
  int v12 = operator new(0x20uLL);
  void *v12 = off_10085AEC8;
  v12[1] = sub_100223E20;
  _OWORD v12[2] = 0;
  void v12[3] = a1;
  v18[3] = v12;
  sub_1003E630C(a1 + 40, 0, 5, v19, v18);
  sub_100236AB8(v18);
  sub_100236914(v19);
  *(void *)(a1 + 1240) = 0;
  id v13 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v14 = dispatch_queue_create("com.apple.nearbyd.rose-hid-queue", v13);
  sub_10039B7A4(a1 + 1248, v14);

  *(_OWORD *)(a1 + 1280) = 0u;
  *(void *)(a1 + 1296) = *a3;
  uint64_t v15 = a3[1];
  *(void *)(a1 + 1304) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1312) = *a5;
  uint64_t v16 = a5[1];
  *(void *)(a1 + 1320) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1328) = 0;
  *(_DWORD *)(a1 + 1335) = 0;
  *(void *)(a1 + 1344) = 850045863;
  *(void *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1352) = 0uLL;
  *(_OWORD *)(a1 + 1368) = 0uLL;
  *(_OWORD *)(a1 + 1384) = 0uLL;
  *(void *)(a1 + 1408) = 1018212795;
  *(unsigned char *)(a1 + 1464) = 0;
  *(unsigned char *)(a1 + 1472) = 0;
  *(unsigned char *)(a1 + 1480) = 0;
  *(unsigned char *)(a1 + 1488) = 0;
  *(_OWORD *)(a1 + 1416) = 0uLL;
  *(_OWORD *)(a1 + 1432) = 0uLL;
  *(_OWORD *)(a1 + 1442) = 0uLL;
  uint32_t v17 = sub_100007D00();
  *(unsigned char *)(a1 + 1496) = sub_1003D2E6C((uint64_t)v17);
  *(std::chrono::steady_clock::time_point *)(a1 + 1504) = std::chrono::steady_clock::now();
  *(_OWORD *)(a1 + 1512) = 0u;
  *(unsigned char *)(a1 + 1528) = 0;
  *(void *)(a1 + 1536) = a4;
  *(_DWORD *)(a1 + 1544) = 0;
  *(void *)(a1 + 1552) = 1018212795;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(void *)(a1 + 1592) = 0;
  *(void *)(a1 + 1600) = 850045863;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(void *)(a1 + 1656) = 0;
  *(void *)(a1 + 1680) = 0;
  *(_DWORD *)(a1 + 1687) = 0;
  sub_1001A6EB0();
}

void sub_100223CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  BOOL v32 = *(std::__shared_weak_count **)(v24 + 1704);
  if (v32) {
    sub_10001A970(v32);
  }
  std::mutex::~mutex(v30);
  std::condition_variable::~condition_variable(v29);
  std::condition_variable::~condition_variable(v28);
  std::mutex::~mutex(v27);
  sub_1000077C4(v26, 0, v33, v34, v35, v36, v37, v38);
  BOOL v39 = *(std::__shared_weak_count **)(v24 + 1320);
  if (v39) {
    sub_10001A970(v39);
  }
  int v40 = *(std::__shared_weak_count **)(v24 + 1304);
  if (v40) {
    sub_10001A970(v40);
  }

  sub_10039B840(v25);
  sub_1003E6448(a9);

  _Unwind_Resume(a1);
}

void sub_100223DA8(uint64_t a1, int a2)
{
  id v2 = *(NSObject **)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100234B18;
  v3[3] = &unk_100853B08;
  void v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100223E20(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 2:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_1004213B4();
      }
      goto LABEL_14;
    case 1:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100421380();
      }
      goto LABEL_14;
    case 0:
      id v2 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "FW crash metric being submitted", buf, 2u);
      }
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_1004212E0();
      }
LABEL_14:
      AnalyticsSendEventLazy();
      return;
  }
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_1004212AC();
  }
}

void sub_10022403C(uint64_t a1, uint64_t *a2)
{
}

void sub_100224044(uint64_t a1, uint64_t *a2)
{
  id v3 = a2 + 1;
  id v2 = (long long *)a2[1];
  int v4 = a2 + 2;
  uint64_t v5 = a2[2] - (void)v2;
  if (v5)
  {
    if (v5 == 155)
    {
      long long v8 = v2[7];
      long long v39 = v2[6];
      long long v40 = v8;
      v41[0] = v2[8];
      *(_OWORD *)((char *)v41 + 11) = *(long long *)((char *)v2 + 139);
      long long v9 = v2[3];
      long long v35 = v2[2];
      long long v36 = v9;
      long long v10 = v2[5];
      long long v37 = v2[4];
      long long v38 = v10;
      long long v11 = v2[1];
      long long v33 = *v2;
      long long v34 = v11;
      int v12 = qword_1008A5780;
      int v13 = v33;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v16 = *v4 - *v3;
        *(_DWORD *)long long buf = 134218496;
        uint64_t v28 = v16;
        __int16 v29 = 2048;
        uint64_t v30 = 155;
        __int16 v31 = 1024;
        int v32 = v33;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "HID event size [%lu] (expected [%lu]). Report type %08x", buf, 0x1Cu);
      }
      kdebug_trace();
      if (v13 == 236)
      {
        sub_1002290C8(a1, (unsigned __int8 *)&v33 + 4);
      }
      else
      {
        uint64_t v14 = *a2;
        uint64_t v15 = *(NSObject **)(a1 + 8);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        void v17[2] = sub_10022D7F8;
        void v17[3] = &unk_10085AC48;
        __n128 v17[4] = a1;
        void v17[5] = v14;
        long long v24 = v39;
        long long v25 = v40;
        v26[0] = v41[0];
        *(_OWORD *)((char *)v26 + 11) = *(_OWORD *)((char *)v41 + 11);
        long long v20 = v35;
        long long v21 = v36;
        long long v22 = v37;
        long long v23 = v38;
        long long v18 = v33;
        long long v19 = v34;
        dispatch_async(v15, v17);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
    {
      sub_1004213E8();
    }
  }
}

uint64_t sub_100224284(uint64_t a1)
{
  id v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "~PRRose()", buf, 2u);
  }
  id v3 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002243DC;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_sync(v3, block);
  int v4 = *(std::__shared_weak_count **)(a1 + 1704);
  if (v4) {
    sub_10001A970(v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 1600));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1552));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1408));
  std::mutex::~mutex((std::mutex *)(a1 + 1344));
  sub_1000077C4((uint64_t *)(a1 + 1328), 0, v5, v6, v7, v8, v9, v10);
  long long v11 = *(std::__shared_weak_count **)(a1 + 1320);
  if (v11) {
    sub_10001A970(v11);
  }
  int v12 = *(std::__shared_weak_count **)(a1 + 1304);
  if (v12) {
    sub_10001A970(v12);
  }

  sub_10039B840(a1 + 1248);
  sub_1003E6448(a1 + 40);

  return a1;
}

void sub_1002243DC(uint64_t a1)
{
}

void sub_1002243E4(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    id v2 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: Cancelling SecureRom timer", v4, 2u);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 24));
    id v3 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
  }
}

void sub_10022446C(uint64_t a1, int a2)
{
  id v2 = *(NSObject **)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002244E4;
  v3[3] = &unk_100853B08;
  void v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1002244E4(uint64_t a1)
{
}

void sub_1002244F4(uint64_t a1, int a2)
{
  int v4 = (id)qword_1008A5780;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100004950(__p, off_10085B150[a2]);
    uint64_t v5 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315138;
    uint32_t v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Deactivating Rose with reason: %s", buf, 0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  uint64_t v6 = (unsigned int *)(a1 + 1240);
  unsigned int v7 = atomic_load((unsigned int *)(a1 + 1240));
  if (v7 == 8 || (v8 = atomic_load(v6), v8 == 10) || (unsigned int v9 = atomic_load(v6)) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100421460(v6);
    }
  }
  else
  {
    unsigned int v10 = atomic_load(v6);
    if (v10 == 11)
    {
      long long v11 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PRRose waking Rose from DSLP to properly power down", (uint8_t *)__p, 2u);
      }
      sub_100225EB0(a1);
    }
    if (!sub_100225F74(a1) && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004214E4();
    }
    if (v10 == 11)
    {
      sub_1002260D8(a1);
    }
    else
    {
      atomic_store(8u, (unsigned int *)(a1 + 1240));
      sub_1002261EC(a1);
    }
    *(_DWORD *)(a1 + 1244) = a2;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _OWORD v12[2] = sub_100226314;
    void v12[3] = &unk_100853B08;
    void v12[4] = a1;
    int v13 = a2;
    sub_1002257F4(a1, v12);
  }
}

void sub_100224734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10022474C(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  id v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1002247F8;
  v4[3] = &unk_100856F20;
  void v4[4] = &v5;
  void v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1002247F8(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)(result + 40) + 1240));
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v1 - 10 < 0xFFFFFFFE;
  return result;
}

uint64_t sub_10022481C(uint64_t a1, io_iterator_t a2)
{
  int v4 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "_serviceMatchRoseSupervisor is called", buf, 2u);
  }
  if (!a1) {
    sub_100421518();
  }
  uint64_t result = IOIteratorNext(a2);
  io_registry_entry_t v6 = result;
  if (result)
  {
    while (1)
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      *(_OWORD *)long long buf = 0u;
      sub_100004950(v26, "rose");
      sub_100004950(__p, "rose-supervisor");
      if (!IORegistryEntryGetName(v6, (char *)buf)) {
        break;
      }
LABEL_47:
      IOObjectRelease(v6);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v27 < 0) {
        operator delete(v26[0]);
      }
      uint64_t result = IOIteratorNext(a2);
      io_registry_entry_t v6 = result;
      if (!result) {
        return result;
      }
    }
    sub_100004950(&__s1, (char *)buf);
    uint64_t v7 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      p_s1 = &__s1;
      if ((v23 & 0x80u) != 0) {
        p_s1 = __s1;
      }
      *(_DWORD *)uint64_t v28 = 136315138;
      __int16 v29 = p_s1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found matching name: %s", v28, 0xCu);
    }
    uint64_t v9 = v23;
    int v10 = v23;
    size_t v11 = __n;
    if ((v23 & 0x80u) == 0) {
      size_t v12 = v23;
    }
    else {
      size_t v12 = __n;
    }
    unint64_t v13 = v27;
    if ((v27 & 0x80u) != 0) {
      unint64_t v13 = (unint64_t)v26[1];
    }
    if (v12 == v13)
    {
      if ((v27 & 0x80u) == 0) {
        uint64_t v14 = v26;
      }
      else {
        uint64_t v14 = (void **)v26[0];
      }
      if ((v23 & 0x80) != 0)
      {
        if (memcmp(__s1, v14, __n)) {
          goto LABEL_26;
        }
      }
      else if (v23)
      {
        char v15 = &__s1;
        uint64_t v16 = v23;
        while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v14)
        {
          char v15 = (void **)((char *)v15 + 1);
          uint64_t v14 = (void **)((char *)v14 + 1);
          if (!--v16) {
            goto LABEL_38;
          }
        }
        goto LABEL_26;
      }
LABEL_38:
      *(unsigned char *)(a1 + 1688) = 1;
      if (!*(unsigned char *)(a1 + 1689))
      {
LABEL_45:
        if ((v10 & 0x80) != 0) {
          operator delete(__s1);
        }
        goto LABEL_47;
      }
LABEL_42:
      long long v20 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "both rose and rose-supervisor services are now matched.", v28, 2u);
      }
      sub_100224BEC(a1, 0);
      IOObjectRelease(*(_DWORD *)(a1 + 1668));
      IOObjectRelease(*(_DWORD *)(a1 + 1672));
      IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 1680));
      *(unsigned char *)(a1 + 1690) = 0;
      LOBYTE(v10) = v23;
      goto LABEL_45;
    }
LABEL_26:
    unint64_t v17 = v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v17 = (unint64_t)__p[1];
    }
    if (v12 != v17) {
      goto LABEL_53;
    }
    if ((v25 & 0x80u) == 0) {
      long long v18 = __p;
    }
    else {
      long long v18 = (void **)__p[0];
    }
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(__s1, v18, v11)) {
        goto LABEL_53;
      }
    }
    else if (v10)
    {
      long long v19 = &__s1;
      while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
      {
        long long v19 = (void **)((char *)v19 + 1);
        long long v18 = (void **)((char *)v18 + 1);
        if (!--v9) {
          goto LABEL_41;
        }
      }
LABEL_53:
      abort_report_np();
      __break(1u);
    }
LABEL_41:
    *(unsigned char *)(a1 + 1689) = 1;
    if (!*(unsigned char *)(a1 + 1688)) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }
  return result;
}

void sub_100224B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100224BEC(uint64_t a1, int a2)
{
  if (!*(void *)(a1 + 1288)) {
    sub_100421530();
  }
  if (!*(void *)(a1 + 1280)) {
    sub_10042155C();
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  int v4 = (unsigned int *)(a1 + 1240);
  unsigned int v5 = atomic_load((unsigned int *)(a1 + 1240));
  io_registry_entry_t v6 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose: activateInternal (ActivationEvent: %d)", (uint8_t *)&buf, 8u);
  }
  if (v5 - 8 >= 4 && v5 != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100421588();
    }
    return 0;
  }
  atomic_store(0, (unsigned int *)(a1 + 1240));
  Boolean keyExistsAndHasValidFormat = 0;
  *(unsigned char *)(a1 + 1336) = CFPreferencesGetAppBooleanValue(@"roseEnableFirmwareLogs", @"com.apple.nearbyd", &keyExistsAndHasValidFormat) != 0;
  if (keyExistsAndHasValidFormat)
  {
    char v8 = qword_1008A5780;
    if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    if (*(unsigned char *)(a1 + 1336)) {
      uint64_t v9 = "enabled";
    }
    else {
      uint64_t v9 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v9;
    int v10 = "PRRose: OVERRIDE: firmware logging config: %s";
  }
  else
  {
    *(unsigned char *)(a1 + 1336) = sub_100222388();
    char v8 = qword_1008A5780;
    if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    if (*(unsigned char *)(a1 + 1336)) {
      size_t v11 = "enabled";
    }
    else {
      size_t v11 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v11;
    int v10 = "PRRose: firmware logging config: %s";
  }
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&buf, 0xCu);
LABEL_22:
  Boolean keyExistsAndHasValidFormat = 0;
  *(unsigned char *)(a1 + 1337) = CFPreferencesGetAppBooleanValue(@"roseSaveCrashLogs", @"com.apple.nearbyd", &keyExistsAndHasValidFormat) != 0;
  if (keyExistsAndHasValidFormat)
  {
    size_t v12 = qword_1008A5780;
    if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    if (*(unsigned char *)(a1 + 1337)) {
      unint64_t v13 = "enabled";
    }
    else {
      unint64_t v13 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v13;
    uint64_t v14 = "PRRose: OVERRIDE: crash log config: %s";
  }
  else
  {
    *(unsigned char *)(a1 + 1337) = sub_100222388();
    size_t v12 = qword_1008A5780;
    if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    if (*(unsigned char *)(a1 + 1337)) {
      char v15 = "enabled";
    }
    else {
      char v15 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v15;
    uint64_t v14 = "PRRose: crash log config: %s";
  }
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&buf, 0xCu);
LABEL_34:
  if (sub_1002256CC(a1))
  {
    uint64_t v16 = NSTemporaryDirectory();
    unint64_t v17 = +[NSString stringWithFormat:@"%@/%s", v16, "healAttemped.tok"];

    long long v18 = +[NSFileManager defaultManager];
    unsigned __int8 v19 = [v18 fileExistsAtPath:v17];

    if ((v19 & 1) != 0 || !sub_1003EB3DC(a1 + 40))
    {
      if (a2 == 1)
      {
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_100421700();
        }
        __int16 v29 = +[NSFileManager defaultManager];
        uint64_t v30 = +[NSData data];
        unsigned __int8 v31 = [v29 createFileAtPath:v17 contents:v30 attributes:0];

        if ((v31 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_1004216CC();
        }
      }
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100421698();
      }
      if (sub_1003E6484(a1 + 40, *(unsigned char *)(a1 + 1336), *(unsigned char *)(a1 + 1337))
        && !sub_1003EB624(a1 + 40, 0, v32, v33, v34, v35, v36, v37)
        && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
      {
        sub_100421614((unsigned int *)(a1 + 1240));
      }
      sub_1003E6404(a1 + 40);
      usleep(0x30D40u);
      long long v38 = sub_100007D00();
      if (sub_100005424(v38[144]))
      {
        uint64_t v39 = *(void *)(a1 + 1696);
        if (v39) {
          sub_1001A703C(v39, 0);
        }
      }
      else
      {
        AnalyticsSendEventLazy();
      }
      atomic_store(9u, (unsigned int *)(a1 + 1240));
      v53[0] = _NSConcreteStackBlock;
      v53[1] = 3221225472;
      v53[2] = sub_10022588C;
      v53[3] = &unk_1008466D8;
      v53[4] = a1;
      sub_1002257F4(a1, v53);

      return 0;
    }
    uint64_t v20 = *(void *)(a1 + 1696);
    if (v20) {
      sub_1001A703C(v20, 1);
    }
    long long v21 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Rose successfully healed ^_^", (uint8_t *)&buf, 2u);
    }
  }
  if ((sub_1003E9C50() & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100421768();
    }
    sub_1002244F4(a1, 2);
    uint64_t v40 = 0;
    atomic_store(9u, (unsigned int *)(a1 + 1240));
    return v40;
  }
  if (!sub_1003E6484(a1 + 40, *(unsigned char *)(a1 + 1336), *(unsigned char *)(a1 + 1337)) || !sub_10039B844(a1 + 1248))
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100421734();
    }
    uint64_t v40 = 0;
    atomic_store(9u, v4);
    return v40;
  }
  int v22 = sub_1001B14B4(*(NSObject ***)(a1 + 1536));
  unsigned __int8 v23 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v22;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "PRRose::shouldPowerOnRose %d ", (uint8_t *)&buf, 8u);
  }
  if (v22) {
    goto LABEL_98;
  }
  BOOL v52 = 0;
  int v24 = sub_1003EB6FC(a1 + 40, &v52);
  if (v52) {
    int v25 = 0;
  }
  else {
    int v25 = v24;
  }
  if (v25 != 1)
  {
LABEL_97:
    *(_DWORD *)(a1 + 1544) = 2;
LABEL_98:
    uint64_t v48 = *(void *)(a1 + 1696);
    if (v48) {
      sub_1001A703C(v48, 1);
    }
    sub_100004950(__p, "");
    sub_1002258D8(a1, 0, (long long *)__p);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    return 1;
  }
  long long buf = 0uLL;
  uint64_t v56 = 0;
  if (*(unsigned char *)(a1 + 1457))
  {
    uint64_t v26 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v51 = 0;
      unsigned __int8 v27 = "Rose is powered off, but deep sleep on demand is enabled";
      uint64_t v28 = v26;
LABEL_55:
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, v51, 2u);
    }
  }
  else if (sub_10039C50C(a1 + 1248, 0xD9u, (unint64_t *)&buf))
  {
    id v43 = (void *)buf;
    if (*((void *)&buf + 1) - (void)buf != 1)
    {
      uint64_t v40 = 0;
      int v47 = 1;
      goto LABEL_94;
    }
    int v44 = *(unsigned __int8 *)buf;
    uint64_t v45 = qword_1008A5780;
    BOOL v46 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
    if (v44)
    {
      if (v46)
      {
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "OTP workaround already completed. No need to boot rose again.", v51, 2u);
      }
      int v47 = 0;
      atomic_store(0xAu, v4);
      uint64_t v40 = 1;
      goto LABEL_93;
    }
    if (v46)
    {
      *(_WORD *)uint64_t v51 = 0;
      unsigned __int8 v27 = "Rose is powered off, but the OTP workaround hasn't been done yet";
      uint64_t v28 = v45;
      goto LABEL_55;
    }
  }
  uint64_t v40 = 0;
  int v47 = 1;
LABEL_93:
  id v43 = (void *)buf;
LABEL_94:
  if (v43)
  {
    *((void *)&buf + 1) = v43;
    operator delete(v43);
  }
  if (v47) {
    goto LABEL_97;
  }
  return v40;
}

void sub_1002253E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  unsigned __int8 v19 = *(void **)(v17 - 96);
  if (v19)
  {
    *(void *)(v17 - 88) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100225458(uint64_t a1, int a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002254D0;
  v3[3] = &unk_100853B08;
  void v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1002254D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 1690))
  {
    uint64_t v2 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: activation and matching is already in progress", v13, 2u);
    }
  }
  else if (*(unsigned char *)(v1 + 1689) && *(unsigned char *)(v1 + 1688))
  {
    int v4 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose activate: rose and rose service are already matched", buf, 2u);
    }
    sub_100224BEC(v1, *(_DWORD *)(a1 + 40));
  }
  else
  {
    unsigned int v5 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PRRose activate: registering for a matching service", v14, 2u);
    }
    *(unsigned char *)(v1 + 1690) = 1;
    io_registry_entry_t v6 = IONotificationPortCreate(kIOMainPortDefault);
    *(void *)(v1 + 1680) = v6;
    if (v6)
    {
      IONotificationPortSetDispatchQueue(v6, *(dispatch_queue_t *)(v1 + 8));
      uint64_t v7 = *(IONotificationPort **)(v1 + 1680);
      CFDictionaryRef v8 = IOServiceNameMatching("rose");
      IOServiceAddMatchingNotification(v7, "IOServiceFirstMatch", v8, (IOServiceMatchingCallback)sub_10022481C, (void *)v1, (io_iterator_t *)(v1 + 1668));
      uint64_t v9 = *(IONotificationPort **)(v1 + 1680);
      CFDictionaryRef v10 = IOServiceNameMatching("rose-supervisor");
      IOServiceAddMatchingNotification(v9, "IOServiceFirstMatch", v10, (IOServiceMatchingCallback)sub_10022481C, (void *)v1, (io_iterator_t *)(v1 + 1672));
      sub_10022481C(v1, *(_DWORD *)(v1 + 1668));
      sub_10022481C(v1, *(_DWORD *)(v1 + 1672));
    }
    else
    {
      sub_10042179C();
      sub_1002256A4(v11, v12);
    }
  }
}

const char *sub_1002256A4(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xA) {
    return "UnknownToHost";
  }
  else {
    return off_10085B4E0[a2 - 1];
  }
}

uint64_t sub_1002256CC(uint64_t a1)
{
  unsigned __int8 v2 = 0;
  if ((sub_1003EB3D4(a1 + 40, &v2) & 1) == 0 && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_1004217B4();
  }
  return v2;
}

NSDictionary *__cdecl sub_10022572C(id a1)
{
  CFStringRef v4 = @"UpdateFailed";
  uint64_t v1 = +[NSNumber numberWithBool:1];
  unsigned int v5 = v1;
  unsigned __int8 v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return (NSDictionary *)v2;
}

void sub_1002257DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002257F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v4 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100235A70;
  block[3] = &unk_100856F48;
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_10022588C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 7;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_1002258D0(uint64_t a1, BOOL *a2)
{
  return sub_1003EB6FC(a1 + 40, a2);
}

void sub_1002258D8(uint64_t a1, uint64_t a2, long long *a3)
{
  io_registry_entry_t v6 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = atomic_load((unsigned int *)(a1 + 1240));
    unsigned int v8 = v7 - 1;
    if (v8 > 0xA) {
      uint64_t v9 = "UnknownToHost";
    }
    else {
      uint64_t v9 = off_10085B4E0[v8];
    }
    if ((a2 - 1) > 0xA) {
      CFDictionaryRef v10 = "HostStartup";
    }
    else {
      CFDictionaryRef v10 = off_10085B488[(int)a2 - 1];
    }
    *(_DWORD *)long long buf = 136315394;
    int v44 = v9;
    __int16 v45 = 2080;
    BOOL v46 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose::setState, currState: [%s], event: [%s]", buf, 0x16u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  unsigned int v16 = atomic_load((unsigned int *)(a1 + 1240));
  switch(v16)
  {
    case 0u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&__dst, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long __dst = *a3;
        uint64_t v42 = *((void *)a3 + 2);
      }
      sub_10022D8CC(a1, a2, (uint64_t)&__dst);
      if (SHIBYTE(v42) < 0)
      {
        int v22 = (void *)__dst;
        goto LABEL_68;
      }
      break;
    case 1u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&v39, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v39 = *a3;
        uint64_t v40 = *((void *)a3 + 2);
      }
      sub_10022E440(a1, a2, &v39);
      if (SHIBYTE(v40) < 0)
      {
        int v22 = (void *)v39;
        goto LABEL_68;
      }
      break;
    case 2u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&v37, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v37 = *a3;
        uint64_t v38 = *((void *)a3 + 2);
      }
      sub_10022E8C0(a1, a2, (uint64_t)&v37);
      if (SHIBYTE(v38) < 0)
      {
        int v22 = (void *)v37;
        goto LABEL_68;
      }
      break;
    case 3u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&v35, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v35 = *a3;
        uint64_t v36 = *((void *)a3 + 2);
      }
      sub_100231110(a1, a2, (uint64_t)&v35, v11, v12, v13, v14, v15);
      if (SHIBYTE(v36) < 0)
      {
        int v22 = (void *)v35;
        goto LABEL_68;
      }
      break;
    case 4u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&v33, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v33 = *a3;
        uint64_t v34 = *((void *)a3 + 2);
      }
      sub_1002316C8(a1, a2);
      if (SHIBYTE(v34) < 0)
      {
        int v22 = (void *)v33;
        goto LABEL_68;
      }
      break;
    case 5u:
    case 9u:
      uint64_t v17 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v18 = atomic_load((unsigned int *)(a1 + 1240));
        unsigned int v19 = v18 - 1;
        if (v19 > 0xA) {
          uint64_t v20 = "UnknownToHost";
        }
        else {
          uint64_t v20 = off_10085B4E0[v19];
        }
        if ((a2 - 1) > 0xA) {
          long long v21 = "HostStartup";
        }
        else {
          long long v21 = off_10085B488[(int)a2 - 1];
        }
        *(_DWORD *)long long buf = 136315394;
        int v44 = v20;
        __int16 v45 = 2080;
        BOOL v46 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "PRRose unexpected event while in state: %s, event: %s, ignoring", buf, 0x16u);
      }
      break;
    case 6u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&v31, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v31 = *a3;
        uint64_t v32 = *((void *)a3 + 2);
      }
      sub_100231BF8(a1, a2, &v31);
      if (SHIBYTE(v32) < 0)
      {
        int v22 = (void *)v31;
        goto LABEL_68;
      }
      break;
    case 7u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(__p, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = *a3;
        uint64_t v30 = *((void *)a3 + 2);
      }
      sub_100232230(a1, a2);
      if (SHIBYTE(v30) < 0)
      {
        int v22 = __p[0];
        goto LABEL_68;
      }
      break;
    case 8u:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&v27, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v27 = *a3;
        uint64_t v28 = *((void *)a3 + 2);
      }
      sub_100232560(a1, a2);
      if (SHIBYTE(v28) < 0)
      {
        int v22 = (void *)v27;
        goto LABEL_68;
      }
      break;
    case 0xAu:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&v25, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v25 = *a3;
        uint64_t v26 = *((void *)a3 + 2);
      }
      sub_100232A0C(a1, a2, (uint64_t)&v25);
      if (SHIBYTE(v26) < 0)
      {
        int v22 = (void *)v25;
        goto LABEL_68;
      }
      break;
    case 0xBu:
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&v23, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v23 = *a3;
        uint64_t v24 = *((void *)a3 + 2);
      }
      sub_100232BE4(a1, a2);
      if (SHIBYTE(v24) < 0)
      {
        int v22 = (void *)v23;
LABEL_68:
        operator delete(v22);
      }
      break;
    default:
      return;
  }
}

void sub_100225DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_100225EB0(uint64_t a1)
{
  unsigned __int8 v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: powerOnInternal", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  *(_DWORD *)(a1 + 1544) = 1;
  sub_100004950(__p, "");
  sub_1002258D8(a1, 10, (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100225F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100225F74(uint64_t a1)
{
  unsigned __int8 v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: sendHostGoodbye", buf, 2u);
  }
  *(void *)long long buf = 0;
  CFDictionaryRef v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  unsigned int v7 = 0;
  uint64_t v8 = 0;
  BOOL v3 = sub_10039BDF8(a1 + 1248, 0x29u, (uint64_t)&__p, (unint64_t *)buf);
  if (__p)
  {
    unsigned int v7 = __p;
    operator delete(__p);
  }
  if (v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_10022BB90;
    void v5[3] = &unk_1008466D8;
    void v5[4] = a1;
    sub_1002257F4(a1, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
  {
    sub_1004217E8();
  }
  if (*(void *)buf)
  {
    CFDictionaryRef v10 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  return v3;
}

void sub_1002260AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002260D8(uint64_t a1)
{
  unsigned __int8 v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: executePowerOff starting.", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  if (sub_1003EB624(a1 + 40, 0, v3, v4, v5, v6, v7, v8))
  {
    atomic_store(0xAu, (unsigned int *)(a1 + 1240));
    dispatch_async(*(dispatch_queue_t *)(a1 + 16), &stru_10085AD58);
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    *(_DWORD *)(a1 + 1544) = 0;
    uint64_t v9 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PRRose: executePowerOff complete.", v11, 2u);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_10042181C();
    }
    uint64_t v10 = abort_report_np();
    sub_1002261EC(v10);
  }
}

void sub_1002261EC(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  if (*(void *)a1)
  {
    id v2 = objc_retainBlock(*(id *)a1);
    char v9 = sub_1003E98BC(a1 + 40, (uint64_t)&v17, v3, v4, v5, v6, v7, v8);
    uint64_t v10 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Handling cached getChipInfoAsync", buf, 2u);
    }
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _OWORD v12[2] = sub_10022D738;
    void v12[3] = &unk_10085AC28;
    void v12[4] = v2;
    char v15 = v9;
    long long v13 = v17;
    uint64_t v14 = v18;
    sub_1002257F4(a1, v12);

    id v11 = *(id *)a1;
  }
  else
  {
    id v11 = 0;
  }
  *(void *)a1 = 0;
}

void sub_100226304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100226314(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 7;
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v1 + 16))(v1, &v3, *(unsigned int *)(a1 + 40) | (unint64_t)&_mh_execute_header);
}

uint64_t sub_10022635C(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100226408;
  v4[3] = &unk_100856F20;
  void v4[4] = &v5;
  void v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100226408(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_1002256CC(v2);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    char v3 = NSTemporaryDirectory();
    uint64_t v4 = +[NSString stringWithFormat:@"%@/%s", v3, "healAttemped.tok"];

    uint64_t v5 = +[NSFileManager defaultManager];
    unsigned int v6 = [v5 fileExistsAtPath:v4];

    uint64_t v7 = qword_1008A5780;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v8)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Healing skipped as it was attempted before without success...", buf, 2u);
      }
    }
    else
    {
      if (v8)
      {
        *(_WORD *)char v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Attempting healing for the first time", v9, 2u);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_1003EB3DC(v2 + 40) ^ 1;
    }
  }
}

void sub_100226558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100226580(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  sub_1002CDE30(*(void *)(a1 + 1296), (uint64_t)&v8);
  sub_100235F10(v7, (uint64_t)v9);
  int v2 = v8;
  if (v8 || !v7[96])
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100421884();
    }
    if (v2 == 1) {
      int v3 = 3;
    }
    else {
      int v3 = 4 * (v2 == 2);
    }
    sub_1002244F4(a1, v3);
  }
  else if ((sub_100226718((unsigned char *)a1, (uint64_t)v7) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100421850();
    }
    sub_100004950(__p, "Failed to apply config parameters");
    sub_100227ED4(a1, 0, (std::string::size_type)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1002361B8((uint64_t)v7);
  return sub_1002361B8((uint64_t)v9);
}

void sub_1002266D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1002361B8((uint64_t)&a16);
  sub_1002361B8(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_100226718(unsigned char *a1, uint64_t a2)
{
  char v81 = +[NSUserDefaults standardUserDefaults];
  sub_100236214((uint64_t)v116, 4, *(unsigned char *)a2);
  int v2 = *(unsigned __int16 *)(a2 + 80);
  int v3 = operator new(2uLL);
  int v113 = v3;
  _WORD *v3 = v2;
  long long v114 = v3 + 1;
  long long v115 = v3 + 1;
  sub_100236290(&v110, 22, (__int16 **)&v113);
  sub_100236214((uint64_t)v107, 21, 2);
  buf[0] = v116[0];
  memset(&buf[8], 0, 24);
  sub_10016D488(&buf[8], v117, (uint64_t)v118, v118 - (unsigned char *)v117);
  buf[32] = v107[0];
  memset(v125, 0, sizeof(v125));
  sub_10016D488(v125, v108, (uint64_t)v109, v109 - (unsigned char *)v108);
  char v126 = v110;
  v128[0] = 0;
  v128[1] = 0;
  uint64_t v127 = 0;
  sub_10016D488(&v127, v111, (uint64_t)v112, v112 - (unsigned char *)v111);
  uint64_t v104 = 0;
  int v105 = 0;
  uint64_t v106 = 0;
  *(void *)&long long v121 = &v104;
  BYTE8(v121) = 0;
  uint64_t v104 = (char *)operator new(0x60uLL);
  int v105 = v104;
  uint64_t v106 = v104 + 96;
  uint64_t v4 = 0;
  int v105 = (unsigned char *)sub_100236B3C((uint64_t)&v106, (uint64_t)buf, (uint64_t)&v129, (uint64_t)v104);
  do
  {
    uint64_t v5 = (void *)v128[v4 - 1];
    if (v5)
    {
      v128[v4] = v5;
      operator delete(v5);
    }
    v4 -= 4;
  }
  while (v4 != -12);
  memset(buf, 0, 24);
  sub_100236680(buf, (uint64_t)v104, (uint64_t)v105, (v105 - v104) >> 5);
  uint64_t v6 = (uint64_t)(a1 + 40);
  BOOL v7 = sub_1003E8858((uint64_t)(a1 + 40), (uint64_t *)buf);
  *(void *)&long long v121 = buf;
  sub_10016D6F0((void ***)&v121);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004219E4();
    }
    uint64_t v16 = 0;
    ++a1[1524];
    goto LABEL_83;
  }
  int v8 = (id)qword_1008A5780;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003A7884(v116);
    int v9 = SHIBYTE(v122);
    uint64_t v10 = (long long *)v121;
    sub_1003A7884(v107);
    id v11 = &v121;
    if (v9 < 0) {
      id v11 = v10;
    }
    if (v103 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = p_p;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = v2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PRRose::setConfigParameters: debugLevelParam (%s), cirMessageVersionParam (%s), coexModeParam,%d,", buf, 0x1Cu);
    if (SHIBYTE(v103) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v122) < 0) {
      operator delete((void *)v121);
    }
  }

  if (!sub_100229F9C((uint64_t)a1, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004219B0();
    }
    uint64_t v16 = 0;
    ++a1[1525];
    goto LABEL_83;
  }
  long long v13 = (id)qword_1008A5780;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "PRRose::setConfigParameters: _updateCoexGlobalEventStatus, success", buf, 2u);
  }

  LOBYTE(v99) = 0;
  char v100 = 0;
  int v14 = *((_DWORD *)sub_100007D00() + 187);
  if (v14 != 1)
  {
    if (v14 != 2)
    {
      if (!v14)
      {
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_FAULT)) {
          sub_10042197C();
        }
        char v15 = qword_1008A5780;
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/DaemonCore/Ranging/Providers/Rose/IO/PRRose.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1216;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "applyConfigOptions";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s:%d: assertion failure in %s", buf, 0x1Cu);
        }
        abort();
      }
LABEL_75:
      long long v39 = (id)qword_1008A5780;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "PRRose:applyConfigOptions,regulatory,sendingPowerTable,success", buf, 2u);
      }
      goto LABEL_77;
    }
    unsigned int v17 = [v81 BOOLForKey:@"NBUWBTxPowerTablesMaxOverride"];
    uint64_t v18 = (id)qword_1008A5780;
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    unsigned int v85 = v17;
    if (v17)
    {
      if (!v19) {
        goto LABEL_95;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v20 = "PRRose:applyConfigOptions,regulatory,sendingPowerTable,nbUwbTxPowerTablesMaxOverride";
    }
    else
    {
      if (!v19) {
        goto LABEL_95;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v20 = "PRRose:applyConfigOptions,regulatory,sendingPowerTable";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 2u);
LABEL_95:

    uint64_t v43 = *(void *)(a2 + 8);
    uint64_t v44 = *(void *)(a2 + 16);
    if (v43 == v44)
    {
      char v83 = 1;
    }
    else
    {
      uint64_t v45 = v43 + 8;
      char v83 = 1;
      do
      {
        BOOL v46 = *(const void **)(v45 - 8);
        std::string __p = 0;
        __int16 v102 = 0;
        uint64_t v103 = 0;
        sub_10003AD14(&__p, v46, (uint64_t)v46 + 33, 0x21uLL);
        if (v85)
        {
          int v47 = (char *)__p;
          if (v102 - (unsigned char *)__p != 33) {
            __assert_rtn("applyConfigOptions", "PRRose.mm", 1141, "r2UWBPowerTableEntry.size() == sizeof(set_cfg_pwrtbl_entry_v3_t)");
          }
          if (*(unsigned char *)__p != 3) {
            __assert_rtn("applyConfigOptions", "PRRose.mm", 1143, "ptEntry->pwr_tbl_ver == SET_CFG_PWRTBL_ENTRY_V3_VERSION");
          }
          uint64_t v48 = (id)qword_1008A5780;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            sub_10022A338((uint64_t *)&__p);
            BOOL v53 = buf;
            if ((buf[23] & 0x80u) != 0) {
              BOOL v53 = *(uint8_t **)buf;
            }
            LODWORD(v121) = 136380675;
            *(void *)((char *)&v121 + 4) = v53;
            _os_log_debug_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "PwrTblMax before: %{private}s", (uint8_t *)&v121, 0xCu);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }

          *(void *)(v47 + 19) = 0x50005000500050;
          uint64_t v49 = (id)qword_1008A5780;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
            sub_10022A338((uint64_t *)&__p);
            char v54 = buf;
            if ((buf[23] & 0x80u) != 0) {
              char v54 = *(uint8_t **)buf;
            }
            LODWORD(v121) = 136380675;
            *(void *)((char *)&v121 + 4) = v54;
            _os_log_debug_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "           after: %{private}s", (uint8_t *)&v121, 0xCu);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        buf[0] = 41;
        memset(&buf[8], 0, 24);
        sub_10016D488(&buf[8], __p, (uint64_t)v102, v102 - (unsigned char *)__p);
        LOBYTE(v121) = buf[0];
        uint64_t v122 = 0;
        uint64_t v123 = 0;
        *((void *)&v121 + 1) = 0;
        sub_10016D488((void *)&v121 + 1, *(const void **)&buf[8], *(uint64_t *)&buf[16], *(void *)&buf[16] - *(void *)&buf[8]);
        long long v93 = 0;
        long long v94 = 0;
        int v95 = 0;
        long long v119 = &v93;
        char v120 = 0;
        long long v93 = (char *)operator new(0x20uLL);
        long long v94 = v93;
        int v95 = v93 + 32;
        long long v94 = (unsigned char *)sub_100236B3C((uint64_t)&v95, (uint64_t)&v121, (uint64_t)buf, (uint64_t)v93);
        uint64_t v97 = 0;
        uint64_t v98 = 0;
        uint64_t v96 = 0;
        sub_100236680(&v96, (uint64_t)v93, (uint64_t)v94, (v94 - v93) >> 5);
        long long v119 = &v93;
        sub_10016D6F0((void ***)&v119);
        if (*((void *)&v121 + 1))
        {
          uint64_t v122 = *((void *)&v121 + 1);
          operator delete(*((void **)&v121 + 1));
        }
        *(void *)&long long v121 = off_10085AF70;
        *((void *)&v121 + 1) = &v99;
        uint64_t v123 = &v121;
        BOOL v50 = sub_1003E89D4(v6, &v96, (uint64_t)&v121);
        sub_100236EEC(&v121);
        if (!v50)
        {
          uint64_t v51 = (id)qword_1008A5780;
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
            sub_1004218EC(&v91, v92);
          }

          char v83 = 0;
        }
        *(void *)&long long v121 = &v96;
        sub_10016D6F0((void ***)&v121);
        if (*(void *)&buf[8])
        {
          *(void *)&uint8_t buf[16] = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        if (__p)
        {
          __int16 v102 = __p;
          operator delete(__p);
        }
        BOOL v52 = v45 != v44 && v50;
        v45 += 8;
      }
      while (v52);
    }
    uint64_t v55 = *(void *)(a2 + 56);
    uint64_t v56 = *(void *)(a2 + 64);
    if (v55 != v56)
    {
      uint64_t v57 = v55 + 8;
      do
      {
        uint64_t v58 = *(const void **)(v57 - 8);
        std::string __p = 0;
        __int16 v102 = 0;
        uint64_t v103 = 0;
        sub_10003AD14(&__p, v58, (uint64_t)v58 + 18, 0x12uLL);
        if (v85)
        {
          uint64_t v59 = (char *)__p;
          if (v102 - (unsigned char *)__p != 18) {
            __assert_rtn("applyConfigOptions", "PRRose.mm", 1168, "r2NBPowerTableEntry.size() == sizeof(set_cfg_nb_reg_tbl_entry_t)");
          }
          if (*(unsigned char *)__p != 1) {
            __assert_rtn("applyConfigOptions", "PRRose.mm", 1170, "ptEntry->ver_type == SET_CFG_NB_REG_TBL_ENTRY_VERSION");
          }
          uint64_t v60 = (id)qword_1008A5780;
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            sub_10022A338((uint64_t *)&__p);
            uint64_t v65 = buf;
            if ((buf[23] & 0x80u) != 0) {
              uint64_t v65 = *(uint8_t **)buf;
            }
            LODWORD(v121) = 136380675;
            *(void *)((char *)&v121 + 4) = v65;
            _os_log_debug_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "NBRegPwrTblMax before: %{private}s", (uint8_t *)&v121, 0xCu);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }

          *(_DWORD *)(v59 + 6) = 26214800;
          *(_DWORD *)(v59 + 14) = 26214800;
          uint64_t v61 = (id)qword_1008A5780;
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
          {
            sub_10022A338((uint64_t *)&__p);
            uint64_t v66 = buf;
            if ((buf[23] & 0x80u) != 0) {
              uint64_t v66 = *(uint8_t **)buf;
            }
            LODWORD(v121) = 136380675;
            *(void *)((char *)&v121 + 4) = v66;
            _os_log_debug_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "              after: %{private}s", (uint8_t *)&v121, 0xCu);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        buf[0] = 46;
        memset(&buf[8], 0, 24);
        sub_10016D488(&buf[8], __p, (uint64_t)v102, v102 - (unsigned char *)__p);
        LOBYTE(v121) = buf[0];
        uint64_t v122 = 0;
        uint64_t v123 = 0;
        *((void *)&v121 + 1) = 0;
        sub_10016D488((void *)&v121 + 1, *(const void **)&buf[8], *(uint64_t *)&buf[16], *(void *)&buf[16] - *(void *)&buf[8]);
        long long v93 = 0;
        long long v94 = 0;
        int v95 = 0;
        long long v119 = &v93;
        char v120 = 0;
        long long v93 = (char *)operator new(0x20uLL);
        long long v94 = v93;
        int v95 = v93 + 32;
        long long v94 = (unsigned char *)sub_100236B3C((uint64_t)&v95, (uint64_t)&v121, (uint64_t)buf, (uint64_t)v93);
        uint64_t v97 = 0;
        uint64_t v98 = 0;
        uint64_t v96 = 0;
        sub_100236680(&v96, (uint64_t)v93, (uint64_t)v94, (v94 - v93) >> 5);
        long long v119 = &v93;
        sub_10016D6F0((void ***)&v119);
        if (*((void *)&v121 + 1))
        {
          uint64_t v122 = *((void *)&v121 + 1);
          operator delete(*((void **)&v121 + 1));
        }
        *(void *)&long long v121 = off_10085AF70;
        *((void *)&v121 + 1) = &v99;
        uint64_t v123 = &v121;
        BOOL v62 = sub_1003E89D4(v6, &v96, (uint64_t)&v121);
        sub_100236EEC(&v121);
        if (!v62)
        {
          char v63 = (id)qword_1008A5780;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
            sub_10042194C(&v89, v90);
          }

          char v83 = 0;
        }
        *(void *)&long long v121 = &v96;
        sub_10016D6F0((void ***)&v121);
        if (*(void *)&buf[8])
        {
          *(void *)&uint8_t buf[16] = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        if (__p)
        {
          __int16 v102 = __p;
          operator delete(__p);
        }
        BOOL v64 = v57 != v56 && v62;
        v57 += 8;
      }
      while (v64);
    }
    uint64_t v67 = *(void *)(a2 + 32);
    uint64_t v68 = *(void *)(a2 + 40);
    if (v67 != v68)
    {
      uint64_t v69 = v67 + 8;
      do
      {
        uint64_t v70 = *(const void **)(v69 - 8);
        std::string __p = 0;
        __int16 v102 = 0;
        uint64_t v103 = 0;
        sub_10003AD14(&__p, v70, (uint64_t)v70 + 38, 0x26uLL);
        if (v85)
        {
          uint64_t v71 = (char *)__p;
          if (v102 - (unsigned char *)__p != 38) {
            __assert_rtn("applyConfigOptions", "PRRose.mm", 1192, "r2NBSARTableEntry.size() == sizeof(set_cfg_nb_sar_tbl_entry_t)");
          }
          if (*(unsigned char *)__p != 2) {
            __assert_rtn("applyConfigOptions", "PRRose.mm", 1194, "sarEntry->ver_type == SET_CFG_NB_SAR_TBL_ENTRY_VERSION");
          }
          uint64_t v72 = (id)qword_1008A5780;
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
          {
            sub_10022A338((uint64_t *)&__p);
            double v77 = buf;
            if ((buf[23] & 0x80u) != 0) {
              double v77 = *(uint8_t **)buf;
            }
            LODWORD(v121) = 136380675;
            *(void *)((char *)&v121 + 4) = v77;
            _os_log_debug_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "NBSARTblMax before: %{private}s", (uint8_t *)&v121, 0xCu);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }

          memset_pattern16(v71 + 6, &unk_1004BC270, 0x20uLL);
          uint64_t v73 = (id)qword_1008A5780;
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
          {
            sub_10022A338((uint64_t *)&__p);
            uint64_t v78 = buf;
            if ((buf[23] & 0x80u) != 0) {
              uint64_t v78 = *(uint8_t **)buf;
            }
            LODWORD(v121) = 136380675;
            *(void *)((char *)&v121 + 4) = v78;
            _os_log_debug_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "           after: %{private}s", (uint8_t *)&v121, 0xCu);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        buf[0] = 47;
        memset(&buf[8], 0, 24);
        sub_10016D488(&buf[8], __p, (uint64_t)v102, v102 - (unsigned char *)__p);
        LOBYTE(v121) = buf[0];
        uint64_t v122 = 0;
        uint64_t v123 = 0;
        *((void *)&v121 + 1) = 0;
        sub_10016D488((void *)&v121 + 1, *(const void **)&buf[8], *(uint64_t *)&buf[16], *(void *)&buf[16] - *(void *)&buf[8]);
        long long v93 = 0;
        long long v94 = 0;
        int v95 = 0;
        long long v119 = &v93;
        char v120 = 0;
        long long v93 = (char *)operator new(0x20uLL);
        long long v94 = v93;
        int v95 = v93 + 32;
        long long v94 = (unsigned char *)sub_100236B3C((uint64_t)&v95, (uint64_t)&v121, (uint64_t)buf, (uint64_t)v93);
        uint64_t v97 = 0;
        uint64_t v98 = 0;
        uint64_t v96 = 0;
        sub_100236680(&v96, (uint64_t)v93, (uint64_t)v94, (v94 - v93) >> 5);
        long long v119 = &v93;
        sub_10016D6F0((void ***)&v119);
        if (*((void *)&v121 + 1))
        {
          uint64_t v122 = *((void *)&v121 + 1);
          operator delete(*((void **)&v121 + 1));
        }
        *(void *)&long long v121 = off_10085AF70;
        *((void *)&v121 + 1) = &v99;
        uint64_t v123 = &v121;
        BOOL v74 = sub_1003E89D4(v6, &v96, (uint64_t)&v121);
        sub_100236EEC(&v121);
        if (!v74)
        {
          uint64_t v75 = (id)qword_1008A5780;
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
            sub_10042191C(&v87, v88);
          }

          char v83 = 0;
        }
        *(void *)&long long v121 = &v96;
        sub_10016D6F0((void ***)&v121);
        if (*(void *)&buf[8])
        {
          *(void *)&uint8_t buf[16] = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        if (__p)
        {
          __int16 v102 = __p;
          operator delete(__p);
        }
        BOOL v76 = v69 != v68 && v74;
        v69 += 8;
      }
      while (v76);
    }
    if ((v83 & 1) == 0) {
      goto LABEL_190;
    }
    goto LABEL_75;
  }
  if ([v81 BOOLForKey:@"TxPowerTablesMaxOverride"]
    && sub_100222388())
  {
    long long v21 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PRRose:applyConfigOptions,regulatory,sendingPowerTable,txPowerTablesMaxOverride", buf, 2u);
    }
    int v86 = 1;
  }
  else
  {
    int v22 = qword_1008A5780;
    int v86 = 0;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "PRRose:applyConfigOptions,regulatory,sendingPowerTable", buf, 2u);
      int v86 = 0;
    }
  }
  uint64_t v23 = *(void *)(a2 + 8);
  uint64_t v24 = *(void *)(a2 + 16);
  if (v23 == v24) {
    goto LABEL_75;
  }
  uint64_t v25 = v23 + 8;
  char v26 = 1;
  do
  {
    buf[0] = 0;
    sub_1001B0664(&__p, 0x17uLL, buf);
    long long v27 = *(long long **)(v25 - 8);
    uint64_t v28 = __p;
    long long v29 = *v27;
    int v30 = *((_DWORD *)v27 + 4);
    __int16 v31 = *((_WORD *)v27 + 10);
    *((unsigned char *)__p + 22) = *((unsigned char *)v27 + 22);
    v28[10] = v31;
    *((_DWORD *)v28 + 4) = v30;
    *(_OWORD *)uint64_t v28 = v29;
    if (!v86) {
      goto LABEL_51;
    }
    if (*(unsigned char *)__p != 2)
    {
      int v79 = 1099;
      uint64_t v80 = "r1PowerTableEntry[0] == SET_CFG_PWRTBL_ENTRY_V2_VERSION";
      goto LABEL_199;
    }
    if (v102 - (unsigned char *)__p != 23)
    {
      int v79 = 1100;
      uint64_t v80 = "r1PowerTableEntry.size() == sizeof(powerTableV2)";
LABEL_199:
      __assert_rtn("applyConfigOptions", "PRRose.mm", v79, v80);
    }
    uint64_t v32 = (id)qword_1008A5780;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      sub_10022A338((uint64_t *)&__p);
      long long v37 = buf;
      if ((buf[23] & 0x80u) != 0) {
        long long v37 = *(uint8_t **)buf;
      }
      LODWORD(v121) = 136380675;
      *(void *)((char *)&v121 + 4) = v37;
      _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "PwrTblMax before: %{private}s", (uint8_t *)&v121, 0xCu);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }

    long long v33 = __p;
    *(_DWORD *)((char *)__p + 14) = 5242960;
    v33[9] = 80;
    uint64_t v34 = (id)qword_1008A5780;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      sub_10022A338((uint64_t *)&__p);
      uint64_t v38 = buf;
      if ((buf[23] & 0x80u) != 0) {
        uint64_t v38 = *(uint8_t **)buf;
      }
      LODWORD(v121) = 136380675;
      *(void *)((char *)&v121 + 4) = v38;
      _os_log_debug_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "           after: %{private}s", (uint8_t *)&v121, 0xCu);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }

LABEL_51:
    buf[0] = 31;
    memset(&buf[8], 0, 24);
    sub_10016D488(&buf[8], __p, (uint64_t)v102, v102 - (unsigned char *)__p);
    LOBYTE(v121) = buf[0];
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    *((void *)&v121 + 1) = 0;
    sub_10016D488((void *)&v121 + 1, *(const void **)&buf[8], *(uint64_t *)&buf[16], *(void *)&buf[16] - *(void *)&buf[8]);
    long long v93 = 0;
    long long v94 = 0;
    int v95 = 0;
    long long v119 = &v93;
    char v120 = 0;
    long long v93 = (char *)operator new(0x20uLL);
    long long v94 = v93;
    int v95 = v93 + 32;
    long long v94 = (unsigned char *)sub_100236B3C((uint64_t)&v95, (uint64_t)&v121, (uint64_t)buf, (uint64_t)v93);
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t v96 = 0;
    sub_100236680(&v96, (uint64_t)v93, (uint64_t)v94, (v94 - v93) >> 5);
    long long v119 = &v93;
    sub_10016D6F0((void ***)&v119);
    if (*((void *)&v121 + 1))
    {
      uint64_t v122 = *((void *)&v121 + 1);
      operator delete(*((void **)&v121 + 1));
    }
    *(void *)&long long v121 = off_10085AF70;
    *((void *)&v121 + 1) = &v99;
    uint64_t v123 = &v121;
    BOOL v35 = sub_1003E89D4(v6, &v96, (uint64_t)&v121);
    sub_100236EEC(&v121);
    if (!v35)
    {
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_1004218EC(&v91, v92);
      }
      char v26 = 0;
    }
    *(void *)&long long v121 = &v96;
    sub_10016D6F0((void ***)&v121);
    if (*(void *)&buf[8])
    {
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }
    if (__p)
    {
      __int16 v102 = __p;
      operator delete(__p);
    }
    BOOL v36 = v25 != v24 && v35;
    v25 += 8;
  }
  while (v36);
  if (v26) {
    goto LABEL_75;
  }
LABEL_190:
  if (v100 && v99 == 6)
  {
    long long v39 = (id)qword_1008A5780;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "chip had an active session and returned busy";
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "PRRose:applyConfigOptions,regulatory,sendingPowerTable,%s", buf, 0xCu);
    }
LABEL_77:

    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v16 = 0;
    ++a1[1526];
  }
  int v40 = *(unsigned __int8 *)(a2 + 90);
  *(void *)long long buf = *(void *)(a2 + 82);
  uint8_t buf[8] = v40;
  if (v40 && !sub_10022A584((uint64_t)a1, buf))
  {
    long long v41 = (id)qword_1008A5780;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      sub_1004218B8();
    }

    uint64_t v16 = 0;
    ++a1[1527];
  }
LABEL_83:
  *(void *)long long buf = &v104;
  sub_10016D6F0((void ***)buf);
  if (v108)
  {
    char v109 = v108;
    operator delete(v108);
  }
  if (v111)
  {
    int v112 = v111;
    operator delete(v111);
  }
  if (v113)
  {
    long long v114 = v113;
    operator delete(v113);
  }
  if (v117)
  {
    long long v118 = v117;
    operator delete(v117);
  }

  return v16;
}

void sub_100227C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  *(void *)(v53 - 256) = &a35;
  sub_10016D6F0((void ***)(v53 - 256));
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100227ED4(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t v6 = (id)qword_1008A5780;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003DDC18(a2, __p);
    BOOL v7 = v35 >= 0 ? __p : (void **)__p[0];
    std::string::size_type v8 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
    *(_DWORD *)long long buf = 136315394;
    long long v37 = v7;
    __int16 v38 = 2080;
    std::string::size_type v39 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose::_triggerLogCollection: type: %s, reason: %s", buf, 0x16u);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
  }

  if (!a2)
  {
    sub_1002243E4(a1);
    atomic_store(7u, (unsigned int *)(a1 + 1240));
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10022D0DC;
    v33[3] = &unk_1008466D8;
    uint8_t v33[4] = a1;
    sub_1002257F4(a1, v33);
    if (!*(void *)(a1 + 1328)) {
      operator new();
    }
    int v14 = +[NSUserDefaults standardUserDefaults];
    if ([v14 BOOLForKey:@"HaltPRRoseOnFatalError"])
    {
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_FAULT)) {
        sub_100421A4C();
      }
      while (1)
        sleep(0xAu);
    }
    char v15 = [v14 stringForKey:@"HaltPRRoseOnFatalErrorReason"];
    if (*(char *)(a3 + 23) >= 0) {
      std::string::size_type v16 = a3;
    }
    else {
      std::string::size_type v16 = *(void *)a3;
    }
    unsigned int v17 = +[NSString stringWithUTF8String:v16];
    unsigned int v18 = [v15 isEqualToString:v17];

    if (v18)
    {
      uint64_t v32 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_FAULT)) {
        sub_100421A80((uint64_t)v15, v32);
      }
      while (1)
        sleep(0xAu);
    }
  }
  int v19 = sub_1003E9C54(a1 + 40, a2, a3, v9, v10, v11, v12, v13);
  AnalyticsSendEventLazy();
  switch(v19)
  {
    case 0:
      uint64_t v20 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Successfully triggered log collection", (uint8_t *)__p, 2u);
      }
      return 1;
    case 1:
      uint64_t v23 = qword_1008A5780;
      BOOL v24 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (a2 == 1)
      {
        if (v24) {
          sub_100421AF8();
        }
        std::operator+<char>();
        uint64_t v22 = sub_100227ED4(a1, 0, __p);
        if (v35 < 0) {
          operator delete(__p[0]);
        }
        return v22;
      }
      if (a2)
      {
        if (v24) {
          sub_100421B60(a2, v23, v25, v26, v27, v28, v29, v30);
        }
      }
      else if (v24)
      {
        sub_100421B2C();
      }
      goto LABEL_54;
    case 2:
      BOOL v21 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (a2)
      {
        if (v21) {
          sub_100421C00();
        }
        return 0;
      }
      else
      {
        if (v21) {
          sub_100421BCC();
        }
LABEL_54:
        uint64_t result = abort_report_np();
        __break(1u);
      }
      return result;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100421C34();
      }
      return 1;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100421C68();
      }
      return 0;
    case 5:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100421C9C();
      }
      return 0;
    default:
      return 1;
  }
}

void sub_100228400(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1002284B0(uint64_t a1)
{
  int v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "regulatory,refreshConfiguration()", buf, 2u);
  }
  int v3 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10022856C;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_async(v3, block);
}

void sub_10022856C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100004950(__p, "");
  sub_1002258D8(v1, 8, (long long *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002285C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002285E0(uint64_t a1)
{
  int v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: LPEM enable", buf, 2u);
  }
  char v3 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10022869C;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_async(v3, block);
}

void sub_10022869C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100004950(__p, "");
  sub_1002258D8(v1, 11, (long long *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002286F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100228710(uint64_t a1, int a2)
{
  uint64_t v4 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: enableDeepSleepOnDemand %u", buf, 8u);
  }
  uint64_t v5 = sub_100007D00();
  if (sub_1003D2E6C((uint64_t)v5))
  {
    if (*(unsigned char *)(a1 + 1496))
    {
      uint64_t v6 = *(NSObject **)(a1 + 8);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100228868;
      void v8[3] = &unk_100856960;
      void v8[4] = a1;
      char v9 = a2;
      dispatch_async(v6, v8);
    }
    else
    {
      BOOL v7 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PRRose: ignoring deep sleep on demand change because deep sleep feature is disabled", buf, 2u);
      }
    }
  }
}

void sub_100228868(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(v1 + 1457)) {
    return;
  }
  char v3 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    char v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep on demand has been %s", buf, 0xCu);
  }
  int v5 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(v1 + 1457) = v5;
  if (*(unsigned char *)(v1 + 1488)) {
    uint64_t v6 = *(void *)(v1 + 1480);
  }
  else {
    uint64_t v6 = 1000;
  }
  if (v5) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 15000;
  }
  sub_1001B0F04(*(NSObject ***)(v1 + 1536), v7);
  if (*(unsigned char *)(v1 + 1457))
  {
    unsigned int v8 = atomic_load((unsigned int *)(v1 + 1240));
    if (v8 == 10)
    {
      char v9 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep on demand is enabled but we're in PoweredOff, need to power on and then enter deep sleep", buf, 2u);
      }
      *(_DWORD *)(v1 + 1544) = 2;
      sub_100004950(__p, "");
      sub_1002258D8(v1, 10, (long long *)__p);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      return;
    }
    if (*(unsigned char *)(v1 + 1457)) {
      return;
    }
  }
  unsigned int v10 = atomic_load((unsigned int *)(v1 + 1240));
  if (v10 == 11)
  {
    int v11 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep on demand is disabled but we're in DeepSleep, need to exit deep sleep and then power off", buf, 2u);
    }
    *(_DWORD *)(v1 + 1544) = 2;
    sub_100228A90(v1, 1);
  }
}

void sub_100228A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100228A90(uint64_t a1, int a2)
{
  uint64_t v4 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: requestDeepSleepExit", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = *(void *)(a1 + 1504) + 50000000;
  if (std::chrono::steady_clock::now().__d_.__rep_ < v5)
  {
    uint64_t v6 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep exit request too quick after previous entry. waiting...", buf, 2u);
    }
    *(void *)long long buf = v5 - std::chrono::steady_clock::now().__d_.__rep_;
    std::this_thread::sleep_for ((const std::chrono::nanoseconds *)buf);
  }
  char v18 = sub_1001952D8(3);
  *(void *)long long buf = 0;
  std::string::size_type v16 = 0;
  uint64_t v17 = 0;
  sub_10003AD14(buf, &v18, (uint64_t)&v19, 1uLL);
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  BOOL v7 = sub_10039BDF8(a1 + 1248, 0x2Du, (uint64_t)buf, (unint64_t *)&__p);
  unsigned int v8 = qword_1008A5780;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PRRose: sent deep sleep exit request to RoseSupervisor. Polling for completion.", v11, 2u);
    }
    uint64_t v9 = sub_100233184(a1, a2);
    if (__p)
    {
      char v13 = __p;
      operator delete(__p);
    }
    if (*(void *)buf)
    {
      std::string::size_type v16 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    return v9;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100421CD0();
    }
    uint64_t result = abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_100228C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100228C90(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  uint64_t v1 = *(NSObject **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100228D3C;
  v4[3] = &unk_100856F20;
  void v4[4] = &v5;
  void v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100228D3C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 1457);
  return result;
}

void sub_100228D50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    sub_100421D04();
  }
  id v6 = v3;
  id v4 = objc_retainBlock(v3);
  uint64_t v5 = *(void **)(a1 + 1280);
  *(void *)(a1 + 1280) = v4;
}

void sub_100228DAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    sub_100421D30();
  }
  id v6 = v3;
  id v4 = objc_retainBlock(v3);
  uint64_t v5 = *(void **)(a1 + 1288);
  *(void *)(a1 + 1288) = v4;
}

BOOL sub_100228E08(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t *a4)
{
  unsigned int v8 = atomic_load((unsigned int *)(a1 + 1240));
  if (v8 - 3 > 1 && (a2 > 0x3B || ((1 << a2) & 0xA40219800000001) == 0))
  {
    if (a2 - 37 > 1)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100421DEC();
    }
    else
    {
      char v13 = 0;
      if ((sub_100228FE0(a1, &v13) & 1) == 0 && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100421DB8();
      }
      if (!v13) {
        return sub_10039BDF8(a1 + 1248, a2, a3, a4);
      }
      int v11 = (id)qword_1008A5780;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        sub_10039C190(a2, v12);
        sub_100421D5C();
      }
    }
    return 0;
  }
  uint64_t v9 = a1 + 1248;

  return sub_10039BDF8(v9, a2, a3, a4);
}

void sub_100228FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100228FE0(uint64_t a1, unsigned char *a2)
{
  id v4 = sub_100007D00();
  if (!sub_1003D2E6C((uint64_t)v4))
  {
    LOBYTE(v7) = 0;
    LOBYTE(v6) = 1;
    goto LABEL_5;
  }
  unsigned int v5 = sub_10022CEB8(a1);
  if (v5 <= 3)
  {
    unsigned int v7 = 0x1010000u >> (8 * v5);
    unsigned int v6 = (0xEu >> (v5 & 0xF)) & 1;
LABEL_5:
    *a2 = v7;
  }
  return v6 & 1;
}

BOOL sub_100229050(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 1240));
  if (v3 - 3 >= 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100421E20();
    }
    return 0;
  }
  else
  {
    uint64_t v4 = a1 + 1248;
    return sub_10039C1BC(v4, a2, a3);
  }
}

void sub_1002290C8(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  uint64_t v4 = qword_1008A5780;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
  if (v3 != 1) {
    sub_100421E54(v5);
  }
  if (v5)
  {
    *(_WORD *)unsigned int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose::_handleRoseControlReport - ResetCompleteSuccess", v6, 2u);
  }
  std::mutex::lock((std::mutex *)(a1 + 1344));
  atomic_store(1u, (unsigned __int8 *)(a1 + 1456));
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 1408));
  std::mutex::unlock((std::mutex *)(a1 + 1344));
}

BOOL sub_10022917C(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: assertUWBCommsOwnership", (uint8_t *)&__p, 2u);
  }
  char v8 = 1;
  std::string __p = 0;
  unsigned int v6 = 0;
  uint64_t v7 = 0;
  sub_10003AD14(&__p, &v8, (uint64_t)&v9, 1uLL);
  BOOL v3 = sub_10039C1BC(a1 + 1248, 0xD1u, (uint64_t)&__p);
  if (__p)
  {
    unsigned int v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_100229234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100229250(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: deassertUWBCommsOwnership", (uint8_t *)&__p, 2u);
  }
  char v8 = 0;
  std::string __p = 0;
  unsigned int v6 = 0;
  uint64_t v7 = 0;
  sub_10003AD14(&__p, &v8, (uint64_t)&v9, 1uLL);
  BOOL v3 = sub_10039C1BC(a1 + 1248, 0xD1u, (uint64_t)&__p);
  if (__p)
  {
    unsigned int v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_100229304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100229320(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: allowRoseSleep", (uint8_t *)&__p, 2u);
  }
  char v8 = 1;
  std::string __p = 0;
  unsigned int v6 = 0;
  uint64_t v7 = 0;
  sub_10003AD14(&__p, &v8, (uint64_t)&v9, 1uLL);
  BOOL v3 = sub_10039C1BC(a1 + 1248, 0xD4u, (uint64_t)&__p);
  if (__p)
  {
    unsigned int v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_1002293D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002293F4(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: disallowRoseSleep", (uint8_t *)&__p, 2u);
  }
  char v8 = 0;
  std::string __p = 0;
  unsigned int v6 = 0;
  uint64_t v7 = 0;
  sub_10003AD14(&__p, &v8, (uint64_t)&v9, 1uLL);
  BOOL v3 = sub_10039C1BC(a1 + 1248, 0xD4u, (uint64_t)&__p);
  if (__p)
  {
    unsigned int v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_1002294A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002294C4(uint64_t a1)
{
  int v2 = *((_DWORD *)sub_100007D00() + 144);
  BOOL v7 = 1;
  if ((v2 - 3) >= 0x15)
  {
    unsigned int v3 = v2 - 102;
    BOOL v4 = v3 > 0x13;
    int v5 = (1 << v3) & 0xCE733;
    if (v4 || v5 == 0) {
      BOOL v7 = 0;
    }
  }
  char v8 = +[NSUserDefaults standardUserDefaults];
  if ([v8 BOOLForKey:@"DisableUwbBasebandCoexMessaging"])
  {
    uint64_t v9 = qword_1008A5780;
    BOOL v7 = 0;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Disabling UWB-BB coex messaging. DisableUwbBasebandCoexMessaging is set to true.", buf, 2u);
      BOOL v7 = 0;
    }
  }
  unsigned int v10 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Support Rose-BB Coex: %d", buf, 8u);
  }
  BOOL v13 = v7;
  *(void *)long long buf = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  sub_10003AD14(buf, &v13, (uint64_t)buf, 4uLL);
  BOOL v11 = sub_10039C1BC(a1 + 1248, 0xD8u, (uint64_t)buf);
  if (*(void *)buf)
  {
    char v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }

  return v11;
}

void sub_100229670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL sub_1002296A4(std::mutex *a1)
{
  int v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: resetSupervisorJobs", buf, 2u);
  }
  std::mutex::lock(a1 + 21);
  atomic_store(0, (unsigned __int8 *)&a1[22].__m_.__opaque[40]);
  std::mutex::unlock(a1 + 21);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_100229820;
  void v11[3] = &unk_1008466D8;
  void v11[4] = a1;
  sub_1002257F4((uint64_t)a1, v11);
  *(void *)long long buf = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  unsigned int v6 = 0;
  uint64_t v7 = 0;
  BOOL v3 = sub_10039BDF8((uint64_t)&a1[19].__m_.__opaque[24], 0x27u, (uint64_t)&__p, (unint64_t *)buf);
  if (__p)
  {
    unsigned int v6 = __p;
    operator delete(__p);
  }
  if (!v3 && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_100421EDC();
  }
  if (*(void *)buf)
  {
    uint64_t v9 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  return v3;
}

void sub_1002297F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100229820(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 3;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

BOOL sub_100229860(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEBUG)) {
    sub_100421F44();
  }
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  BOOL v2 = sub_10039BDF8(a1 + 1248, 0x36u, (uint64_t)&__p, (unint64_t *)&v7);
  if (__p)
  {
    int v5 = __p;
    operator delete(__p);
  }
  if (!v2 && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_100421F10();
  }
  if (v7)
  {
    char v8 = v7;
    operator delete(v7);
  }
  return v2;
}

void sub_100229924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100229950(uint64_t a1)
{
  BOOL v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: activateAOPTimeSync", buf, 2u);
  }
  char v3 = sub_100007D00();
  if (sub_1003D2ECC((uint64_t)v3)) {
    return 1;
  }
  *(void *)long long buf = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  BOOL v4 = sub_10039BDF8(a1 + 1248, 0x2Au, (uint64_t)&__p, (unint64_t *)buf);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  if (!v4 && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_100421F84();
  }
  if (*(void *)buf)
  {
    uint64_t v10 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  return v4;
}

void sub_100229A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100229A70(uint64_t a1)
{
  std::string __p = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  if (sub_10039C50C(a1 + 1248, 0xD5u, (unint64_t *)&__p))
  {
    if (v5 - (unsigned char *)__p == 1)
    {
      BOOL v1 = *(unsigned __int8 *)__p != 0;
      goto LABEL_9;
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100421FB8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
  {
    sub_100422028();
  }
  BOOL v1 = 0;
LABEL_9:
  BOOL v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    BOOL v8 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: hasCalDataBeenPushed %u", buf, 8u);
  }
  if (__p)
  {
    int v5 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_100229BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

unint64_t sub_100229BCC(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  BOOL v8 = 0;
  uint64_t v9 = 0;
  BOOL v1 = sub_10039BDF8(a1 + 1248, 0x28u, (uint64_t)&__p, (unint64_t *)&v10);
  if (__p)
  {
    BOOL v8 = __p;
    operator delete(__p);
  }
  if (!v1 && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_100422090();
  }
  BOOL v2 = v10;
  if (v11 - (unsigned char *)v10 == 8)
  {
    unint64_t v3 = *(void *)v10 & 0xFFFFFFFFFFFFFF00;
    uint64_t v4 = *(void *)v10;
LABEL_11:
    uint64_t v11 = v2;
    operator delete(v2);
    return v3 | v4;
  }
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_10042205C();
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  BOOL v2 = v10;
  if (v10) {
    goto LABEL_11;
  }
  return v5;
}

void sub_100229CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100229CF8()
{
  CFDictionaryRef v0 = IOServiceNameMatching("rose");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v0);
  if (!MatchingService)
  {
    sub_1004220C4();
    __break(1u);
  }
  CFDataRef CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(MatchingService, @"use-internal-32k-clock", kCFAllocatorDefault, 0);
  if (CFProperty)
  {
    CFDataRef v3 = CFProperty;
    CFTypeID v4 = CFGetTypeID(CFProperty);
    if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 4)
    {
      BytePtr = CFDataGetBytePtr(v3);
      uint64_t v6 = qword_1008A5780;
      if (BytePtr)
      {
        uint64_t v7 = BytePtr;
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(_DWORD *)v7;
          v14[0] = 67109120;
          v14[1] = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "use-internal-32k-clock property exists: 0x%x", (uint8_t *)v14, 8u);
        }
        BOOL v9 = *(_DWORD *)v7 != 0;
        goto LABEL_13;
      }
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_1004220DC();
      }
    }
    else
    {
      uint64_t v10 = (id)qword_1008A5780;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        CFTypeID v11 = CFGetTypeID(v3);
        sub_100422110((uint64_t)v14, v11, v10);
      }
    }
    BOOL v9 = 0;
LABEL_13:
    CFRelease(v3);
    return v9;
  }
  uint64_t v12 = qword_1008A5780;
  BOOL v9 = 0;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "use-internal-32k-clock property does not exist", (uint8_t *)v14, 2u);
    return 0;
  }
  return v9;
}

void sub_100229EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100229F00(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    sub_10016D8B4(a1, a3);
    a1[1] = sub_100236B3C(v4, a2, a2 + 32 * a3, a1[1]);
  }
  return a1;
}

void sub_100229F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10016D6F0(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100229F9C(uint64_t a1, char a2)
{
  uint64_t v4 = operator new(1uLL);
  unsigned char *v4 = 23;
  BOOL v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  sub_10016D488(&v23, v4, (uint64_t)(v4 + 1), 1uLL);
  operator delete(v4);
  uint64_t v5 = a1 + 40;
  sub_1003E8680(v5, (char **)&v23, 2000, (uint64_t)__p);
  if (!v22)
  {
    BOOL v9 = 0;
    goto LABEL_17;
  }
  sub_1003D4D20(__p, (uint64_t)v18);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_100236680(&v15, v19, v20, (v20 - v19) >> 5);
  if (v16 == v15 || *(unsigned char *)v15 != 23)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422150();
    }
  }
  else
  {
    unsigned __int16 v6 = sub_1003A7BA4(v15, 0);
    unsigned __int8 v7 = v6;
    if (v6 >= 0x100u)
    {
      int v8 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Coex: global event config (%d) ", buf, 8u);
      }
      sub_1003A7BDC(v15, 0, v7 & 0xFE | a2);
      buf[0] = *(unsigned char *)v15;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = 0;
      sub_10016D488(&v29, *(const void **)(v15 + 8), *(void *)(v15 + 16), *(void *)(v15 + 16) - *(void *)(v15 + 8));
      CFTypeID v11 = 0;
      uint64_t v12 = 0;
      BOOL v13 = 0;
      uint64_t v26 = &v11;
      char v27 = 0;
      CFTypeID v11 = (char *)operator new(0x20uLL);
      uint64_t v12 = v11;
      BOOL v13 = v11 + 32;
      uint64_t v12 = (unsigned char *)sub_100236B3C((uint64_t)&v13, (uint64_t)buf, (uint64_t)&v32, (uint64_t)v11);
      memset(v14, 0, sizeof(v14));
      sub_100236680(v14, (uint64_t)v11, (uint64_t)v12, (v12 - v11) >> 5);
      uint64_t v26 = &v11;
      sub_10016D6F0((void ***)&v26);
      if (v29)
      {
        uint64_t v30 = v29;
        operator delete(v29);
      }
      BOOL v9 = sub_1003E8858(v5, v14);
      *(void *)long long buf = v14;
      sub_10016D6F0((void ***)buf);
      goto LABEL_13;
    }
  }
  BOOL v9 = 0;
LABEL_13:
  *(void *)long long buf = &v15;
  sub_10016D6F0((void ***)buf);
  *(void *)long long buf = &v19;
  sub_10016D6F0((void ***)buf);
  if (v22 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_17:
  if (v23)
  {
    BOOL v24 = v23;
    operator delete(v23);
  }
  return v9;
}

void sub_10022A268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27)
{
  *(void *)(v29 - 96) = v27;
  sub_10016D6F0((void ***)(v29 - 96));
  *(void *)(v29 - 96) = &a15;
  sub_10016D6F0((void ***)(v29 - 96));
  *(void *)(v29 - 96) = v28;
  sub_10016D6F0((void ***)(v29 - 96));
  if (a25 && __p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10022A338(uint64_t *a1)
{
  sub_1002363E4((uint64_t)v10);
  if (a1[1] != *a1)
  {
    unint64_t v2 = 0;
    do
    {
      CFDataRef v3 = sub_100056628(v10, (uint64_t)"0x", 2);
      char v9 = 48;
      uint64_t v4 = sub_1001771C8(v3, &v9);
      uint64_t v5 = *v4;
      *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 8) = *(_DWORD *)((unsigned char *)v4 + *(void *)(*v4 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(uint64_t *)((char *)v4 + *(void *)(v5 - 24) + 24) = 2;
      std::ostream::operator<<();
      uint64_t v7 = *a1;
      uint64_t v6 = a1[1];
      if (v2 != ~*a1 + v6)
      {
        sub_100056628(v10, (uint64_t)",", 1);
        uint64_t v7 = *a1;
        uint64_t v6 = a1[1];
      }
      ++v2;
    }
    while (v6 - v7 > v2);
  }
  std::stringbuf::str();
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10022A564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023657C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10022A584(uint64_t a1, const void *a2)
{
  unsigned int v2 = atomic_load((unsigned int *)(a1 + 1240));
  if (v2 - 3 > 1) {
    return 0;
  }
  uint64_t v5 = (id)qword_1008A5780;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    sub_100054E28((uint64_t)&__p);
    char v14 = 48;
    int v8 = sub_1001771C8(v17, &v14);
    *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    sub_100056628(v17, (uint64_t)"0x", 2);
    for (uint64_t i = 7; i != -1; --i)
    {
      *(void *)((char *)&v17[3] + *(void *)(v17[0] - 24)) = 2;
      std::ostream::operator<<();
    }
    std::stringbuf::str();
    *(void **)((char *)&__p
    v17[0] = v10;
    if (v18 < 0) {
      operator delete((void *)v17[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    char v11 = &v12;
    if (v13 < 0) {
      char v11 = v12;
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v20 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "PRRose::setRoseConnectionlessMacAddress: %s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(v12);
    }
  }

  std::string __p = 0;
  uint64_t v16 = 0;
  v17[0] = 0;
  sub_10003AD14(&__p, a2, (uint64_t)a2 + 8, 8uLL);
  BOOL v6 = sub_100229050(a1, 0xD3u, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_10022A894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  sub_100055100((uint64_t)&__p);

  _Unwind_Resume(a1);
}

BOOL sub_10022A8DC(uint64_t a1, char a2)
{
  unsigned int v2 = atomic_load((unsigned int *)(a1 + 1240));
  if (v2 - 3 >= 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422184();
    }
    return 0;
  }
  else
  {
    sub_100236214((uint64_t)v9, 4, a2);
    v14[0] = v9[0];
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    std::string __p = 0;
    sub_10016D488(&__p, v10, (uint64_t)v11, v11 - (unsigned char *)v10);
    BOOL v6 = 0;
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v12 = &v6;
    char v13 = 0;
    BOOL v6 = (unsigned __int8 *)operator new(0x20uLL);
    uint64_t v7 = v6;
    int v8 = v6 + 32;
    uint64_t v7 = (unsigned __int8 *)sub_100236B3C((uint64_t)&v8, (uint64_t)v14, (uint64_t)&v18, (uint64_t)v6);
    BOOL v4 = sub_10022AA90(a1, &v6);
    uint64_t v12 = &v6;
    sub_10016D6F0((void ***)&v12);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    if (v10)
    {
      char v11 = v10;
      operator delete(v10);
    }
  }
  return v4;
}

void sub_10022AA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10022AA90(uint64_t a1, unsigned __int8 **a2)
{
  BOOL v4 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting config parameters:", buf, 2u);
  }
  uint64_t v5 = *a2;
  BOOL v6 = a2[1];
  if (*a2 == v6)
  {
    uint64_t v9 = (uint64_t)*a2;
  }
  else
  {
    do
    {
      uint64_t v7 = (id)qword_1008A5780;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003A7884(v5);
        int v8 = v14 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)uint64_t v15 = 136315138;
        *(void *)&v15[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "\t%s", v15, 0xCu);
        if (SHIBYTE(v14) < 0) {
          operator delete(*(void **)buf);
        }
      }

      v5 += 32;
    }
    while (v5 != v6);
    uint64_t v9 = (uint64_t)*a2;
    uint64_t v5 = a2[1];
  }
  *(void *)long long buf = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_100236680(buf, v9, (uint64_t)v5, (uint64_t)&v5[-v9] >> 5);
  BOOL v10 = sub_1003E8858(a1 + 40, (uint64_t *)buf);
  *(void *)uint64_t v15 = buf;
  sub_10016D6F0((void ***)v15);
  if (!v10 && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_1004221B8();
  }
  return v10;
}

void sub_10022AC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10016D6F0((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_10022AC88(uint64_t a1, _WORD *a2, int a3)
{
  BOOL v6 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setRoseLeadingEdgeThresholds: %d, %d", buf, 0xEu);
  }
  sub_1003A8280(a2, a3, (uint64_t)buf);
  if (v24)
  {
    char v12 = 35;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    sub_10016D488(&v13, *(const void **)buf, (uint64_t)v23, (size_t)v23 - *(void *)buf);
    v18[0] = 35;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    std::string __p = 0;
    sub_10016D488(&__p, v13, (uint64_t)v14, v14 - (unsigned char *)v13);
    uint64_t v9 = 0;
    BOOL v10 = 0;
    char v11 = 0;
    uint64_t v16 = &v9;
    char v17 = 0;
    uint64_t v9 = (unsigned __int8 *)operator new(0x20uLL);
    BOOL v10 = v9;
    char v11 = v9 + 32;
    BOOL v10 = (unsigned __int8 *)sub_100236B3C((uint64_t)&v11, (uint64_t)v18, (uint64_t)buf, (uint64_t)v9);
    BOOL v7 = sub_10022AA90(a1, &v9);
    uint64_t v16 = &v9;
    sub_10016D6F0((void ***)&v16);
    if (__p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }
    if (v13)
    {
      uint64_t v14 = v13;
      operator delete(v13);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004221EC();
    }
    BOOL v7 = 0;
  }
  if (v24 && *(void *)buf)
  {
    uint64_t v23 = *(const void **)buf;
    operator delete(*(void **)buf);
  }
  return v7;
}

void sub_10022AE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  sub_10016D6F0((void ***)&a17);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (*(unsigned char *)(v21 - 72))
  {
    uint64_t v23 = *(void **)(v21 - 96);
    if (v23)
    {
      *(void *)(v21 - 88) = v23;
      operator delete(v23);
    }
  }
  _Unwind_Resume(a1);
}

BOOL sub_10022AEF0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)uint64_t v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setRoseAlishaURSKTTL: %llu", buf, 0xCu);
  }
  uint64_t v5 = operator new(8uLL);
  void *v5 = a2;
  buf[0] = 7;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  *(void *)&void v18[4] = 0;
  sub_10016D488(&v18[4], v5, (uint64_t)(v5 + 1), 8uLL);
  v13[0] = buf[0];
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  sub_10016D488(&__p, *(const void **)&v18[4], v19, v19 - *(void *)&v18[4]);
  int v8 = 0;
  uint64_t v9 = 0;
  BOOL v10 = 0;
  char v11 = &v8;
  char v12 = 0;
  int v8 = (unsigned __int8 *)operator new(0x20uLL);
  uint64_t v9 = v8;
  BOOL v10 = v8 + 32;
  uint64_t v9 = (unsigned __int8 *)sub_100236B3C((uint64_t)&v10, (uint64_t)v13, (uint64_t)buf, (uint64_t)v8);
  BOOL v6 = sub_10022AA90(a1, &v8);
  char v11 = &v8;
  sub_10016D6F0((void ***)&v11);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  if (*(void *)&v18[4])
  {
    uint64_t v19 = *(void *)&v18[4];
    operator delete(*(void **)&v18[4]);
  }
  operator delete(v5);
  return v6;
}

void sub_10022B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  sub_10016D6F0((void ***)&a13);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_10022B0EC()
{
}

void *sub_10022B0F4(void *a1, const void *a2, size_t __sz)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (__sz)
  {
    sub_10002DBC4(a1, __sz);
    BOOL v6 = (char *)a1[1];
    memmove(v6, a2, __sz);
    a1[1] = &v6[__sz];
  }
  return a1;
}

void sub_10022B15C(_Unwind_Exception *exception_object)
{
  CFDataRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10022B178(uint64_t a1, int a2)
{
  BOOL v4 = sub_100007D00();
  unsigned __int16 v5 = sub_1003D2F50((uint64_t)v4);
  if (v5 < 0x100u) {
    return 0;
  }
  sub_100236214((uint64_t)v12, v5, a2);
  buf[0] = v12[0];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  sub_10016D488(&__p, v13, (uint64_t)v14, v14 - (unsigned char *)v13);
  uint64_t v9 = 0;
  BOOL v10 = 0;
  char v11 = 0;
  uint64_t v15 = &v9;
  char v16 = 0;
  uint64_t v9 = (unsigned __int8 *)operator new(0x20uLL);
  BOOL v10 = v9;
  char v11 = v9 + 32;
  BOOL v10 = (unsigned __int8 *)sub_100236B3C((uint64_t)&v11, (uint64_t)buf, (uint64_t)&v22, (uint64_t)v9);
  BOOL v6 = sub_10022AA90(a1, &v9);
  uint64_t v15 = &v9;
  sub_10016D6F0((void ***)&v15);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  BOOL v7 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    BOOL v18 = v6;
    LOWORD(__p) = 1024;
    *(_DWORD *)((char *)&__p + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setRoseAlishaTestMode. Success: %d. Enable: %d", buf, 0xEu);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  return v6;
}

void sub_10022B30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10022B368()
{
  CFDictionaryRef v0 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "setRoseCoexMode called", buf, 2u);
  }
  uint64_t v1 = +[NSUserDefaults standardUserDefaults];
  unsigned int v2 = [v1 BOOLForKey:@"DisableCoex"];

  CFDataRef v3 = qword_1008A5780;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      __int16 v9 = 0;
      unsigned __int16 v5 = "Coex disabled using default writes: DisableCoex";
      BOOL v6 = (uint8_t *)&v9;
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
    }
  }
  else if (v4)
  {
    __int16 v8 = 0;
    unsigned __int16 v5 = "Nothing to do on non-watchOS platforms";
    BOOL v6 = (uint8_t *)&v8;
    goto LABEL_8;
  }
  return 1;
}

void sub_10022B460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10022B470(uint64_t a1)
{
  unsigned int v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "getRoseAlishaTestMode called", buf, 2u);
  }
  CFDataRef v3 = sub_100007D00();
  unsigned __int16 v4 = sub_1003D2F50((uint64_t)v3);
  unsigned __int8 v5 = v4;
  if (v4 >= 0x100u)
  {
    __int16 v8 = operator new(1uLL);
    *__int16 v8 = v5;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    std::string __p = 0;
    sub_10016D488(&__p, v8, (uint64_t)(v8 + 1), 1uLL);
    operator delete(v8);
    sub_1003E8680(a1 + 40, (char **)&__p, 2000, (uint64_t)buf);
    if (v23)
    {
      sub_1003D4D20(buf, (uint64_t)&v19);
      int v9 = v19;
      if (v19)
      {
        BOOL v10 = (id)qword_1008A5780;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          sub_1003A8354(v9, v18);
          sub_100422288();
        }

LABEL_10:
        int v6 = 0;
        int v7 = 0;
      }
      else
      {
        for (uint64_t i = (unsigned __int8 *)v20[0]; ; i += 32)
        {
          if (i == (unsigned __int8 *)v20[1])
          {
            if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
              sub_100422254();
            }
            goto LABEL_10;
          }
          if (*i == v5) {
            break;
          }
        }
        unsigned __int16 v13 = sub_1003A7BA4((uint64_t)i, 0);
        if (v13 < 0x100u)
        {
          char v16 = "optTestModeEnabled.has_value()";
          int v17 = 1410;
          goto LABEL_38;
        }
        if (v13 != 1)
        {
          if (!(_BYTE)v13)
          {
            uint64_t v14 = qword_1008A5780;
            if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)BOOL v18 = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "getRoseAlishaTestMode: disabled", v18, 2u);
            }
            int v6 = 0;
            goto LABEL_36;
          }
          char v16 = "false";
          int v17 = 1422;
LABEL_38:
          __assert_rtn("getRoseAlishaTestMode", "PRRose.mm", v17, v16);
        }
        uint64_t v15 = qword_1008A5780;
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)BOOL v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "getRoseAlishaTestMode: enabled", v18, 2u);
        }
        int v6 = 1;
LABEL_36:
        int v7 = 1;
      }
      uint64_t v27 = (void **)v20;
      sub_10016D6F0(&v27);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100422220();
      }
      int v6 = 0;
      int v7 = 0;
    }
    if (v23 && *(void *)buf)
    {
      uint64_t v22 = *(void **)buf;
      operator delete(*(void **)buf);
    }
    if (__p)
    {
      uint64_t v25 = __p;
      operator delete(__p);
    }
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  return v6 | (v7 << 8);
}

void sub_10022B764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22)
{
  char v23 = v22;

  a9 = &a14;
  sub_10016D6F0((void ***)&a9);
  if (a20 && __p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_10022B7E0(uint64_t a1)
{
  unsigned int v2 = operator new(2uLL);
  *unsigned int v2 = 11558;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  sub_10016D488(&v27, v2, (uint64_t)(v2 + 1), 2uLL);
  operator delete(v2);
  sub_1003E8680(a1 + 40, (char **)&v27, 2000, (uint64_t)__p);
  if (v26)
  {
    sub_1003D4D20(__p, (uint64_t)&v22);
    int v3 = v22;
    if (v22)
    {
      unsigned __int16 v4 = (id)qword_1008A5780;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        sub_1003A8354(v3, &buf);
        sub_100422318();
      }

      goto LABEL_27;
    }
    unsigned __int8 v5 = v23;
    int v6 = v24;
    if (v23 == v24)
    {
LABEL_27:
      uint64_t v30 = &v23;
      sub_10016D6F0((void ***)&v30);
      goto LABEL_28;
    }
    while (1)
    {
      int v7 = *v5;
      if (v7 != 38) {
        goto LABEL_18;
      }
      unsigned __int16 v8 = sub_1003A7BA4((uint64_t)v5, 0);
      unsigned __int16 v9 = sub_1003A7BA4((uint64_t)v5, 1);
      uint64_t v10 = qword_1008A5780;
      BOOL v11 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
      if (v8 < 0x100u || v9 < 0x100u)
      {
        if (v11)
        {
          LOWORD(buf) = 0;
          char v12 = v10;
          unsigned __int16 v13 = "UWB ePA mode: N/A, eLNA mode: N/A";
          uint32_t v14 = 2;
          goto LABEL_16;
        }
      }
      else if (v11)
      {
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v8;
        __int16 v32 = 1024;
        int v33 = v9;
        char v12 = v10;
        unsigned __int16 v13 = "UWB ePA mode: 0x%02x, eLNA mode: 0x%02x";
        uint32_t v14 = 14;
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&buf, v14);
      }
      int v7 = *v5;
LABEL_18:
      if (v7 == 45)
      {
        unsigned __int16 v15 = sub_1003A7BA4((uint64_t)v5, 0);
        unsigned __int16 v16 = sub_1003A7BA4((uint64_t)v5, 1);
        uint64_t v17 = qword_1008A5780;
        BOOL v18 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
        if (v15 < 0x100u || v16 < 0x100u)
        {
          if (v18)
          {
            LOWORD(buf) = 0;
            unsigned __int16 v19 = v17;
            uint64_t v20 = "NB ePA mode: N/A, eLNA mode: N/A";
            uint32_t v21 = 2;
            goto LABEL_25;
          }
        }
        else if (v18)
        {
          LODWORD(buf) = 67109376;
          HIDWORD(buf) = v15;
          __int16 v32 = 1024;
          int v33 = v16;
          unsigned __int16 v19 = v17;
          uint64_t v20 = "NB ePA mode: 0x%02x, eLNA mode: 0x%02x";
          uint32_t v21 = 14;
LABEL_25:
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&buf, v21);
        }
      }
      v5 += 32;
      if (v5 == v6) {
        goto LABEL_27;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_1004222E4();
  }
LABEL_28:
  if (v26 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
}

void sub_10022BB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23)
{
  a23 = &a12;
  sub_10016D6F0((void ***)&a23);
  if (a18 && __p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10022BB90(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 3;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_10022BBD0(uint64_t a1)
{
  uint64_t v2 = sub_1003270D8(@"AOPSensorFusionDataForwarding", 0);
  unsigned int v3 = sub_1003270D8(@"UseNIPathForSuspendOnStationary", 0);
  uint64_t v4 = 2;
  if (!v3) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4 | v2 | (4 * (sub_100326F58(@"AopSFStationaryTimeoutIn100msUnits", (id)0x32) & 0x7Fu));
  uint64_t v6 = sub_100326F58(@"AopSFIOReportIntervalIn10msUnits", (id)0xA) << 9;
  uint64_t v7 = v5 | v6 | (sub_100326F58(@"AopSFCloserThresholddBm", (id)0xFFFFFFA8) << 17);
  uint64_t v8 = sub_100326F58(@"AopSFFurtherThresholddBm", (id)0xFFFFFFA3);
  uint64_t v9 = sub_100326F58(@"AopSFTxPowerdBm", (id)0x7F);
  unint64_t v10 = (unint64_t)sub_100326F58(@"AopSFSimulateDisplacement", 0) & 3;
  unint64_t v11 = (unint64_t)sub_100326F58(@"AopSFUseStaticIOClassifier", 0) & 1;
  uint64_t v17 = 0;
  unint64_t v18 = v7 | (v8 << 25) | (v9 << 33) | (v10 << 41) | (v11 << 43) | (((unint64_t)sub_100326F58(@"AopSFStaticIOClassifierEpsilonInMM", (id)0xA) & 0x1FF) << 44);
  std::string __p = 0;
  unsigned __int16 v16 = 0;
  sub_10003AD14(&__p, &v18, (uint64_t)&v19, 8uLL);
  BOOL v12 = sub_10039C1BC(a1 + 1248, 0xDBu, (uint64_t)&__p);
  unsigned __int16 v13 = qword_1008A5780;
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      v14[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Wrote the AOP UserDefaults property", (uint8_t *)v14, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
  {
    sub_100422374();
  }
  if (__p)
  {
    unsigned __int16 v16 = __p;
    operator delete(__p);
  }
}

void sub_10022BDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022BDBC(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: boot rose", buf, 2u);
  }
  if (!sub_100229250(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422444();
    }
    return 0;
  }
  if ((sub_1003E6484(a1 + 40, *(unsigned char *)(a1 + 1336), *(unsigned char *)(a1 + 1337)) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422410();
    }
    return 0;
  }
  if ((sub_1003E9C50() & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004223DC();
    }
    return 0;
  }
  uint64_t v8 = sub_1003E9384(a1 + 40, 1, (uint64_t)buf, v3, v4, v5, v6, v7);
  if ((v8 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004223A8();
    }
    AnalyticsSendEventLazy();
  }
  AnalyticsSendEventLazy();
  return v8;
}

id sub_10022BFB4(uint64_t a1)
{
  v12[0] = @"BootReturnValue";
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  v13[0] = v2;
  v12[1] = @"DriverState";
  uint64_t v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 36)];
  v13[1] = v3;
  _OWORD v12[2] = @"BootStatusRegister";
  uint64_t v4 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v13[2] = v4;
  void v12[3] = @"CalibrationReturnValue";
  uint64_t v5 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  void v13[3] = v5;
  void v12[4] = @"SendCalibrationTimeout";
  uint64_t v6 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 48)];
  void v13[4] = v6;
  void v12[5] = @"UWBInitDoneTimeout";
  uint64_t v7 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 49)];
  v13[5] = v7;
  v12[6] = @"SetCalDataPushedFalseFailure";
  uint64_t v8 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 50)];
  void v13[6] = v8;
  v12[7] = @"SetCalDataPushedTrueFailure";
  uint64_t v9 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 51)];
  v13[7] = v9;
  unint64_t v10 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:8];

  return v10;
}

void sub_10022C1A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10022C20C(uint64_t a1)
{
  CFStringRef v4 = @"BootSuccess";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 32)];
  uint64_t v5 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

void sub_10022C2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10022C2D8(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: Resetting chip.", buf, 2u);
  }
  int v3 = *(_DWORD *)(a1 + 1512);
  if (v3 >= 6)
  {
    AnalyticsSendEventLazy();
    uint64_t v25 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004229BC(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422988();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_10042291C();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004228B0();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422844();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004227D8();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_10042276C();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422700();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422694();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422628();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004225BC();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422550();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004224E4();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422478();
    }
    abort_report_np();
LABEL_39:
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422A64();
    }
    abort_report_np();
    goto LABEL_42;
  }
  *(_DWORD *)(a1 + 1512) = v3 + 1;
  AnalyticsSendEventLazy();
  uint64_t v4 = a1 + 40;
  if (sub_1003E9980(v4, v5, v6, v7, v8, v9, v10, v11)) {
    return 1;
  }
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_100422A98();
  }
  if (!sub_1003EB624(v4, 0, v12, v13, v14, v15, v16, v17)) {
    goto LABEL_39;
  }
  if (sub_1003EB624(v4, 1, v18, v19, v20, v21, v22, v23)) {
    return 1;
  }
LABEL_42:
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_100422A30();
  }
  uint64_t v33 = abort_report_np();
  return (uint64_t)sub_10022C67C(v33);
}

id sub_10022C67C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 32);
  v16[0] = @"PushFWFailure";
  uint64_t v15 = +[NSNumber numberWithInt:v1[1516]];
  v17[0] = v15;
  v16[1] = @"PingFWFailure";
  uint64_t v14 = +[NSNumber numberWithInt:v1[1517]];
  v17[1] = v14;
  void v16[2] = @"PushCalFailure";
  uint64_t v13 = +[NSNumber numberWithInt:v1[1518]];
  void v17[2] = v13;
  _OWORD v16[3] = @"ExtClockSettingFailure";
  uint64_t v2 = +[NSNumber numberWithInt:v1[1519]];
  void v17[3] = v2;
  void v16[4] = @"ConfigureFWSleepFailure";
  int v3 = +[NSNumber numberWithInt:v1[1520]];
  __n128 v17[4] = v3;
  v16[5] = @"DisableFWLogsFailure";
  uint64_t v4 = +[NSNumber numberWithInt:v1[1521]];
  void v17[5] = v4;
  v16[6] = @"FWTimeSyncEnableFailure";
  uint64_t v5 = +[NSNumber numberWithInt:v1[1522]];
  void v17[6] = v5;
  v16[7] = @"AOPActivateTimeSyncEnableFailure";
  uint64_t v6 = +[NSNumber numberWithInt:v1[1523]];
  void v17[7] = v6;
  v16[8] = @"ApplyConfigParamsCIRVersionFailure";
  uint64_t v7 = +[NSNumber numberWithInt:v1[1524]];
  v17[8] = v7;
  v16[9] = @"ApplyConfigParamsCoExStatusFailure";
  uint64_t v8 = +[NSNumber numberWithInt:v1[1525]];
  v17[9] = v8;
  v16[10] = @"ApplyConfigParamsSendPowerTableFailure";
  uint64_t v9 = +[NSNumber numberWithInt:v1[1526]];
  v17[10] = v9;
  v16[11] = @"ApplyConfigParamsSetMACAddressFailure";
  uint64_t v10 = +[NSNumber numberWithInt:v1[1527]];
  void v17[11] = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:12];

  return v11;
}

void sub_10022C918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_10022C9C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFStringRef v5 = @"ResetCounter";
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 1512)];
  uint64_t v6 = v2;
  int v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

  return v3;
}

void sub_10022CA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10022CA8C(uint64_t a1)
{
  if (sub_1003E9C50())
  {
    uint64_t v9 = (unsigned int *)(a1 + 1240);
    unsigned int v10 = atomic_load((unsigned int *)(a1 + 1240));
    if (v10 == 4 || (unsigned int v11 = atomic_load(v9), v11 == 8))
    {
      uint64_t result = sub_1003E9854(a1 + 40, v2, v3, v4, v5, v6, v7, v8);
      if (result) {
        return result;
      }
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100422ACC();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
    {
      sub_100422B00(v9);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
  {
    sub_100422B84();
  }
  return 0;
}

uint64_t sub_10022CB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (unsigned int *)(a1 + 1240);
  unsigned int v9 = atomic_load((unsigned int *)(a1 + 1240));
  if (v9 == 4 || (unsigned int v10 = atomic_load(v8), v10 == 8))
  {
    uint64_t v11 = a1 + 40;
    return sub_1003E98BC(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422BB8(v8);
    }
    return 0;
  }
}

void sub_10022CBD4(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10022CC68;
  v4[3] = &unk_100859538;
  id v5 = a2;
  uint64_t v6 = a1;
  id v3 = v5;
  sub_1002257F4(a1, v4);
}

void sub_10022CC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 40);
  if (*(void *)v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422CC0();
    }
  }
  else
  {
    *(void *)uint64_t v8 = 0;
    unsigned int v10 = (unsigned int *)(v8 + 1240);
    unsigned int v11 = atomic_load((unsigned int *)(v8 + 1240));
    if (v11 == 5 || (unsigned int v12 = atomic_load(v10), v12 == 9))
    {
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100422C3C((unsigned int *)(v8 + 1240));
      }
      uint64_t v13 = *(void *)(a1 + 32);
      char v32 = 0;
      char v33 = 0;
      (*(void (**)(void))(v13 + 16))();
    }
    else
    {
      unsigned int v14 = atomic_load(v10);
      if (v14 == 4 || (unsigned int v15 = atomic_load(v10), v15 == 8))
      {
        uint64_t v16 = sub_1003E98BC(v8 + 40, (uint64_t)v36, a3, a4, a5, a6, a7, a8);
        uint64_t v17 = qword_1008A5780;
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v19 = atomic_load(v10);
          unsigned int v20 = v19 - 1;
          if (v20 > 0xA) {
            uint64_t v21 = "UnknownToHost";
          }
          else {
            uint64_t v21 = off_10085B4E0[v20];
          }
          *(_DWORD *)uint64_t buf = 136315138;
          char v35 = v21;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Called getChipInfoAsync in compatible terminal state: [%s]", buf, 0xCu);
        }
        uint64_t v26 = *(void *)(a1 + 32);
        uint64_t v30 = v37;
        long long v29 = *(_OWORD *)v36;
        char v31 = 1;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t))(v26 + 16))(v26, v16, &v29, v18);
      }
      else
      {
        uint64_t v22 = qword_1008A5780;
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v23 = atomic_load(v10);
          unsigned int v24 = v23 - 1;
          if (v24 > 0xA) {
            uint64_t v25 = "UnknownToHost";
          }
          else {
            uint64_t v25 = off_10085B4E0[v24];
          }
          *(_DWORD *)BOOL v36 = 136315138;
          *(void *)&v36[4] = v25;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Called getChipInfoAsync in transitory state: [%s]. Caching handler for later execution", v36, 0xCu);
        }
        id v27 = objc_retainBlock(*(id *)(a1 + 32));
        uint64_t v28 = *(void **)v8;
        *(void *)uint64_t v8 = v27;
      }
    }
  }
}

uint64_t sub_10022CEB8(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: getDeepSleepStateInternal", buf, 2u);
  }
  char v13 = sub_1001952D8(1);
  *(void *)uint64_t buf = 0;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  sub_10003AD14(buf, &v13, (uint64_t)v14, 1uLL);
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (!sub_10039BDF8(a1 + 1248, 0x2Du, (uint64_t)buf, (unint64_t *)&__p))
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422D64();
    }
LABEL_23:
    abort_report_np();
    __break(1u);
  }
  if (v8 - (unsigned char *)__p != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422CF4();
    }
    goto LABEL_23;
  }
  uint64_t v3 = *(char *)__p;
  uint64_t v4 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    if (v3 > 2) {
      id v5 = "";
    }
    else {
      id v5 = off_10085B1D8[v3];
    }
    *(_DWORD *)unsigned int v14 = 136315138;
    unsigned int v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep state %s", v14, 0xCu);
  }
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  if (*(void *)buf)
  {
    unsigned int v11 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  if (v3 < 3) {
    return v3 + 1;
  }
  else {
    return 0;
  }
}

void sub_10022D0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022D0DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

id sub_10022D11C(uint64_t a1)
{
  v10[0] = @"LogCollectionType";
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v11[0] = v2;
  v10[1] = @"LogCollectionReason";
  id v3 = objc_alloc((Class)NSString);
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  if (*((char *)v4 + 23) < 0) {
    uint64_t v4 = (uint64_t *)*v4;
  }
  id v5 = [v3 initWithCString:v4 encoding:4];
  v11[1] = v5;
  void v10[2] = @"Result";
  uint64_t v6 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  _DWORD v11[2] = v6;
  v10[3] = @"PromotedToFatal";
  uint64_t v7 = +[NSNumber numberWithInt:*(unsigned __int8 *)(a1 + 48)];
  void v11[3] = v7;
  uint64_t v8 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:4];

  return v8;
}

void sub_10022D26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10022D2A8(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t v6 = (id)qword_1008A5780;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003DDC18(a2, &__p);
    uint64_t v7 = v20 >= 0 ? &__p : (long long *)__p;
    std::string::size_type v8 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
    *(_DWORD *)uint64_t buf = 136315394;
    id v27 = v7;
    __int16 v28 = 2080;
    std::string::size_type v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose::triggerLogCollection: type: %s, reason: %s", buf, 0x16u);
    if (SHIBYTE(v20) < 0) {
      operator delete((void *)__p);
    }
  }

  unint64_t v9 = sub_100229BCC(a1);
  char v11 = v10;
  uint64_t v12 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    if (v11) {
      unint64_t v13 = v9;
    }
    else {
      unint64_t v13 = 0;
    }
    LODWORD(__p) = 134217984;
    *(void *)((char *)&__p + 4) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Last known Rose MAC Timestamp: %llu", (uint8_t *)&__p, 0xCu);
  }
  if (sub_1003E9C50())
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v14 = sub_100227ED4(a1, a2, a3);
    }
    else
    {
      *(void *)&long long __p = 0;
      *((void *)&__p + 1) = &__p;
      uint64_t v20 = 0x4812000000;
      uint64_t v21 = sub_10022D594;
      uint64_t v22 = sub_10022D5B0;
      uint64_t v23 = 0;
      if (*(char *)(a3 + 23) < 0)
      {
        sub_100002DE4(&v24, *(void **)a3, *(void *)(a3 + 8));
      }
      else
      {
        long long v24 = *(_OWORD *)a3;
        uint64_t v25 = *(void *)(a3 + 16);
      }
      unsigned int v15 = *(NSObject **)(a1 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10022D5C4;
      block[3] = &unk_10085AC00;
      int v18 = a2;
      void block[4] = &__p;
      void block[5] = a1;
      dispatch_async(v15, block);
      _Block_object_dispose(&__p, 8);
      if (SHIBYTE(v25) < 0) {
        operator delete((void *)v24);
      }
      uint64_t v14 = 1;
    }
    if (!sub_100229860(a1) && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422D98();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100422DCC();
    }
    return 0;
  }
  return v14;
}

void sub_10022D57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_10022D594(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void sub_10022D5B0(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void sub_10022D5C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (unsigned int *)(v2 + 1240);
  unsigned int v4 = atomic_load((unsigned int *)(v2 + 1240));
  if (v4 == 4 || (v5 = atomic_load(v3), v5 == 8) || (unsigned int v6 = atomic_load(v3), v6 == 11))
  {
    if ((sub_100227ED4(v2, *(unsigned int *)(a1 + 48), *(void *)(*(void *)(a1 + 32) + 8) + 48) & 1) == 0
      && os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
    {
      sub_100422E00();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
  {
    sub_100422E34(v3);
  }
}

CFDataRef sub_10022D674(uint64_t a1)
{
  if (sub_1003E9C50())
  {
    uint64_t v2 = (unsigned int *)(a1 + 1240);
    unsigned int v3 = atomic_load((unsigned int *)(a1 + 1240));
    if (v3 == 4 || (unsigned int v4 = atomic_load(v2), v4 == 8))
    {
      CFDataRef result = sub_1003E9C64(a1 + 40);
      if (result) {
        return result;
      }
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100422EB8();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
    {
      sub_100422EEC(v2);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
  {
    sub_100422F70();
  }
  return 0;
}

uint64_t sub_10022D738(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 56);
  long long v4 = *(_OWORD *)(a1 + 40);
  char v6 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, long long *))(v1 + 16))(v1, v2, &v4);
}

id sub_10022D788(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: _startReceivingHIDEvents", v4, 2u);
  }
  return sub_10039C8B4(a1 + 1248);
}

uint64_t sub_10022D7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a1 + 40);
  long long v8 = *(_OWORD *)(a1 + 112);
  long long v20 = *(_OWORD *)(a1 + 128);
  long long v19 = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  long long v18 = *(_OWORD *)(a1 + 96);
  long long v17 = v9;
  *(_OWORD *)&v23[11] = *(_OWORD *)(a1 + 187);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)(a1 + 176);
  long long v10 = *(_OWORD *)(a1 + 144);
  long long v22 = *(_OWORD *)(a1 + 160);
  long long v21 = v10;
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 32);
  long long v16 = v11;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 + 1280) + 16))(*(void *)(v12 + 1280), &v14, a3, a4, a5, a6, a7, a8);
}

const char *sub_10022D8A4(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xA) {
    return "HostStartup";
  }
  else {
    return off_10085B488[a2 - 1];
  }
}

void sub_10022D8CC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = atomic_load((unsigned int *)(a1 + 1240));
      unsigned int v7 = v6 - 1;
      if (v7 > 0xA) {
        long long v8 = "UnknownToHost";
      }
      else {
        long long v8 = off_10085B4E0[v7];
      }
      if (a2 > 0xB) {
        uint64_t v30 = "HostStartup";
      }
      else {
        uint64_t v30 = off_10085B488[a2 - 1];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v30;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PRRose::setStateFromUnknownToHost ignoring unexpected event while in state: %s, event: %s", buf, 0x16u);
    }
    return;
  }
  sub_10022D788(a1);
  if (!sub_10022917C(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_10042326C();
    }
    abort_report_np();
    goto LABEL_103;
  }
  if (sub_1002296A4((std::mutex *)a1))
  {
    BOOL v51 = 0;
    char v10 = sub_1003EB6FC(a1 + 40, &v51);
    if (v51) {
      char v18 = v10;
    }
    else {
      char v18 = 0;
    }
    if ((v18 & 1) == 0)
    {
      long long v19 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Rose powered off or unable to read the power state. Powering it on", buf, 2u);
      }
      if (!sub_1003EB624(a1 + 40, 1, v20, v21, v22, v23, v24, v25))
      {
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_1004231D0();
        }
        goto LABEL_102;
      }
    }
    int v26 = sub_1003E9C5C(a1 + 40, v11, v12, v13, v14, v15, v16, v17);
    id v27 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      if ((v26 - 1) > 3) {
        __int16 v28 = "SecureROM";
      }
      else {
        __int16 v28 = off_10085B468[v26 - 1];
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "PRRose: Firmware State: %s", buf, 0xCu);
    }
    if (v26 != 1) {
      operator new();
    }
    char v31 = sub_100007D00();
    if (sub_1003D2E6C((uint64_t)v31))
    {
      switch(sub_10022CEB8(a1))
      {
        case 0u:
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
            sub_100423040();
          }
          break;
        case 1u:
          char v32 = qword_1008A5780;
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "PRRose: not in deep sleep, proceeding", buf, 2u);
          }
          goto LABEL_48;
        case 2u:
          char v33 = qword_1008A5780;
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "PRRose: requesting deep sleep exit before proceeding", buf, 2u);
          }
          if (sub_100228A90(a1, 0)) {
            goto LABEL_48;
          }
          sub_10022C2D8(a1);
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
            sub_100423074();
          }
          break;
        case 3u:
          uint64_t v34 = qword_1008A5780;
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "PRRose: waiting for deep sleep exit to complete before proceeding", buf, 2u);
          }
          if (sub_100233184(a1, 0)) {
            goto LABEL_48;
          }
          sub_10022C2D8(a1);
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
            sub_100423074();
          }
          break;
        default:
          goto LABEL_48;
      }
LABEL_102:
      abort_report_np();
LABEL_103:
      __break(1u);
      return;
    }
LABEL_48:
    atomic_store(2u, (unsigned int *)(a1 + 1240));
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472;
    v50[2] = sub_1002333BC;
    v50[3] = &unk_1008466D8;
    v50[4] = a1;
    sub_1002257F4(a1, v50);
    memset(buf, 0, sizeof(buf));
    if (!sub_10039C50C(a1 + 1248, 0xD6u, (unint64_t *)buf))
    {
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_10042300C();
      }
      abort_report_np();
      goto LABEL_103;
    }
    int v35 = **(unsigned char **)buf;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1344);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1344));
    unsigned __int8 v36 = atomic_load((unsigned __int8 *)(a1 + 1456));
    int v37 = v36 & 1;
    __int16 v38 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)BOOL v52 = 67109376;
      *(_DWORD *)&v52[4] = v35 != 0;
      __int16 v53 = 1024;
      int v54 = v37;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "PRRose aopCmdQueueClearAllowedProperty = %d, fAopResetCompleted = %d", v52, 0xEu);
    }
    if (!v35 && !v37)
    {
      v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 200000000;
      while (1)
      {
        unsigned __int8 v40 = atomic_load((unsigned __int8 *)(a1 + 1456));
        if (v40) {
          goto LABEL_79;
        }
        if (std::chrono::steady_clock::now().__d_.__rep_ >= v39.__d_.__rep_) {
          goto LABEL_70;
        }
        v41.__d_.__rep_ = v39.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
        if (v41.__d_.__rep_ >= 1) {
          break;
        }
LABEL_69:
        if (std::chrono::steady_clock::now().__d_.__rep_ >= v39.__d_.__rep_)
        {
LABEL_70:
          unsigned __int8 v45 = atomic_load((unsigned __int8 *)(a1 + 1456));
          if (v45) {
            goto LABEL_79;
          }
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
            sub_100422FD8();
          }
          atomic_store(6u, (unsigned int *)(a1 + 1240));
          sub_100004950(v52, "PRRose::setStateFromUnknownToHost: failed to clear AOP command queue.");
          char v46 = sub_100227ED4(a1, 0, (std::string::size_type)v52);
          if (v55 < 0) {
            operator delete(*(void **)v52);
          }
          if ((v46 & 1) == 0)
          {
            if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
              sub_100422FA4();
            }
            abort_report_np();
            goto LABEL_103;
          }
          goto LABEL_84;
        }
      }
      std::chrono::steady_clock::now();
      v42.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v42.__d_.__rep_)
      {
        if (v42.__d_.__rep_ < 1)
        {
          if ((unint64_t)v42.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = 0x8000000000000000;
            goto LABEL_67;
          }
        }
        else if ((unint64_t)v42.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_65;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = 1000 * v42.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = 0;
      }
LABEL_65:
      if (v43 > (v41.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v44.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_68:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 1408), &__lk, v44);
        std::chrono::steady_clock::now();
        goto LABEL_69;
      }
LABEL_67:
      v44.__d_.__rep_ = v43 + v41.__d_.__rep_;
      goto LABEL_68;
    }
LABEL_79:
    sub_100229250(a1);
    if (*(char *)(a3 + 23) < 0)
    {
      sub_100002DE4(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a3;
      uint64_t v48 = *(void *)(a3 + 16);
    }
    sub_1002258D8(a1, 2, __p);
    if (SHIBYTE(v48) < 0) {
      operator delete(__p[0]);
    }
LABEL_84:
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100423238();
    }
    atomic_store(6u, (unsigned int *)(a1 + 1240));
    sub_100004950(buf, "PRRose::setStateFromUnknownToHost: failed to reset AOP jobs");
    char v29 = sub_100227ED4(a1, 0, (std::string::size_type)buf);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    if ((v29 & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100423204();
      }
      abort_report_np();
      goto LABEL_103;
    }
  }
}

void sub_10022E340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::mutex *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a18) {
    std::mutex::unlock(a17);
  }
  __int16 v38 = *(void **)(v36 - 112);
  if (v38)
  {
    *(void *)(v36 - 104) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022E440(uint64_t a1, int a2, long long *a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v5 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        unsigned int v6 = "PRRose, already started, ignoring HostStartup";
        goto LABEL_11;
      }
      break;
    case 1:
      atomic_store(2u, (unsigned int *)(a1 + 1240));
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_100233710;
      double v29[3] = &unk_1008466D8;
      __n128 v29[4] = a1;
      sub_1002257F4(a1, v29);
      if (sub_10022BDBC(a1))
      {
        uint64_t v11 = 2;
      }
      else
      {
        ++*(unsigned char *)(a1 + 1516);
        uint64_t v11 = 3;
      }
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(__p, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        *(_OWORD *)long long __p = *a3;
        uint64_t v28 = *((void *)a3 + 2);
      }
      sub_1002258D8(a1, v11, __p);
      if (SHIBYTE(v28) < 0)
      {
        uint64_t v17 = __p[0];
        goto LABEL_31;
      }
      break;
    case 6:
      atomic_store(6u, (unsigned int *)(a1 + 1240));
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      _OWORD v26[2] = sub_10023374C;
      v26[3] = &unk_1008466D8;
      v26[4] = a1;
      sub_1002257F4(a1, v26);
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&__dst, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long __dst = *a3;
        uint64_t v25 = *((void *)a3 + 2);
      }
      sub_1002258D8(a1, 6, &__dst);
      if (SHIBYTE(v25) < 0)
      {
        uint64_t v17 = (void *)__dst;
        goto LABEL_31;
      }
      break;
    case 7:
      sub_1002243E4(a1);
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&v22, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v22 = *a3;
        uint64_t v23 = *((void *)a3 + 2);
      }
      sub_1002258D8(a1, 1, &v22);
      if (SHIBYTE(v23) < 0)
      {
        uint64_t v17 = (void *)v22;
LABEL_31:
        operator delete(v17);
      }
      break;
    case 8:
      uint64_t v7 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v8 = atomic_load((unsigned int *)(a1 + 1240));
        unsigned int v9 = v8 - 1;
        if (v9 > 0xA) {
          char v10 = "UnknownToHost";
        }
        else {
          char v10 = off_10085B4E0[v9];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        char v31 = v10;
        unsigned int v6 = "PRRose, regulatory,configuration update ignored during %s";
        goto LABEL_36;
      }
      break;
    case 10:
      uint64_t v5 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        unsigned int v6 = "PRRose, already started, ignoring PowerOn";
LABEL_11:
        uint64_t v12 = v5;
        uint32_t v13 = 2;
        goto LABEL_37;
      }
      break;
    case 11:
      uint64_t v7 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v14 = atomic_load((unsigned int *)(a1 + 1240));
        unsigned int v15 = v14 - 1;
        if (v15 > 0xA) {
          uint64_t v16 = "UnknownToHost";
        }
        else {
          uint64_t v16 = off_10085B4E0[v15];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        char v31 = v16;
        unsigned int v6 = "PRRose, LPEM enable event ignored during %s";
LABEL_36:
        uint64_t v12 = v7;
        uint32_t v13 = 12;
LABEL_37:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v6, buf, v13);
      }
      break;
    default:
      BOOL v19 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (v19) {
        sub_1004232A0(a1);
      }
      int v20 = atomic_load((unsigned int *)(a1 + 1240));
      uint64_t v21 = sub_1002256A4(v19, v20);
      sub_10022D8A4((uint64_t)v21, a2);
      abort_report_np();
      __break(1u);
      break;
  }
}

void sub_10022E840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022E8C0(uint64_t a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v5 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(__p) = 0;
      unsigned int v6 = "PRRose, already started, ignoring HostStartup";
      uint64_t v7 = v5;
      uint32_t v8 = 2;
      goto LABEL_71;
    case 2:
      sub_10022BBD0(a1);
      atomic_store(3u, (unsigned int *)(a1 + 1240));
      sub_100004950(&__p, "shenan");
      sub_1002362EC(&v235, &__p);
      if (SBYTE7(v242) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v178 = a1 + 40;
      sub_1003E6E1C(a1 + 40, (unsigned __int8 *)&v235, (uint64_t)v231);
      uint64_t v9 = *(void *)(a1 + 1312);
      if (v9) {
        sub_10029486C(v9, &v235);
      }
      if (!v234)
      {
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_1004233E8();
        }
        ++*(unsigned char *)(a1 + 1517);
        sub_100004950(v229, "Failed to send hello.");
        sub_1002258D8(a1, 3, v229);
        if ((v230 & 0x80000000) == 0) {
          goto LABEL_336;
        }
        char v29 = (void *)v229[0];
LABEL_65:
        operator delete(v29);
        goto LABEL_336;
      }
      char v10 = sub_100007D00();
      if (!v234) {
        goto LABEL_340;
      }
      sub_1003D2660((uint64_t)v10, v231);
      uint64_t v11 = (id)qword_1008A5780;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if (!v234) {
          sub_10000AE44();
        }
        sub_1003C9E70((uint64_t)v231);
        if ((SBYTE7(v242) & 0x80u) == 0) {
          uint64_t p_p = (uint64_t)&__p;
        }
        else {
          uint64_t p_p = __p;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = p_p;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Hello Response: %s", (uint8_t *)&buf, 0xCu);
        if (SBYTE7(v242) < 0) {
          operator delete((void *)__p);
        }
      }

      if (*(unsigned char *)(a1 + 1496))
      {
        uint32_t v13 = sub_100007D00();
        if ((sub_1003D2E84((uint64_t)v13) & 1) == 0)
        {
          unsigned int v14 = (id)qword_1008A5780;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            sub_1004237C4();
          }

          *(unsigned char *)(a1 + 1496) = 0;
          *(unsigned char *)(a1 + 1457) = 0;
          sub_1001B0F04(*(NSObject ***)(a1 + 1536), 15000);
        }
      }
      uint64_t v15 = *(void *)(a1 + 1312);
      if (v15)
      {
        if (!v234) {
          goto LABEL_340;
        }
        sub_100294BC4(v15, (uint64_t)v231);
      }
      if (!sub_100229A70(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_100423790();
        }
        AnalyticsSendEventLazy();
        ++*(unsigned char *)(a1 + 1518);
        sub_100004950(v227, "Resetting chip since cal data has not been pushed");
        sub_1002258D8(a1, 3, v227);
        if ((v228 & 0x80000000) == 0) {
          goto LABEL_336;
        }
        char v29 = v227[0];
        goto LABEL_65;
      }
      if (!v234) {
LABEL_340:
      }
        sub_10000AE44();
      if (v233)
      {
        sub_100233854((uint64_t)&__p, v232);
        if (!v243)
        {
          uint64_t v16 = (id)qword_1008A5780;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_10042375C();
          }
        }
        sub_100157CC4((uint64_t)&__p);
      }
      uint64_t v17 = +[NSUserDefaults standardUserDefaults];
      int v177 = [v17 objectForKey:@"NBePAeLNA"];

      if (v177 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        unint64_t v18 = (unint64_t)[v177 integerValue];
        char v19 = v18;
        unint64_t v175 = v18 >> 8;
        int v20 = 1;
      }
      else
      {
        char v19 = 0;
        LOBYTE(v175) = 0;
        int v20 = 0;
      }
      uint64_t v30 = +[NSUserDefaults standardUserDefaults];
      uint64_t v176 = [v30 objectForKey:@"UWBePAeLNA"];

      if (v176 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        unint64_t v31 = (unint64_t)[v176 integerValue];
        uint8_t v32 = v31;
        unint64_t v33 = v31 >> 8;
        int v34 = 1;
      }
      else
      {
        uint8_t v32 = 0;
        LOBYTE(v33) = 0;
        int v34 = 0;
      }
      int v35 = sub_100007D00();
      int v36 = sub_1003D2DE8((uint64_t)v35);
      int v37 = sub_100007D00();
      int v38 = sub_1003D2F2C((uint64_t)v37);
      BOOL v39 = (v36 & 0xFF0000) != 0 && (unsigned __int16)v36 == 5;
      int v40 = v39;
      if (v39) {
        int v41 = 1;
      }
      else {
        int v41 = v20;
      }
      if ((v38 & v41) == 1)
      {
        char v216 = 0;
        *(void *)uint64_t v215 = 0;
        *(void *)v217 = 0;
        if (v20)
        {
          LOBYTE(__p) = v19;
          LOBYTE(buf) = v175;
          sub_100233914((unint64_t *)v215, &__p);
          sub_100233914((unint64_t *)v215, &buf);
        }
        else
        {
          LOBYTE(__p) = 2;
          sub_100233914((unint64_t *)v215, &__p);
          LOBYTE(__p) = 2;
          sub_100233914((unint64_t *)v215, &__p);
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = (id)qword_1008A5780;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          int v44 = **(unsigned char **)v215;
          int v45 = *(unsigned __int8 *)(*(void *)v215 + 1);
          LODWORD(__p) = 67109376;
          DWORD1(__p) = v44;
          WORD4(__p) = 1024;
          *(_DWORD *)((char *)&__p + 10) = v45;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Set NB ePA&eLNA to high gain mode, NB:(0x%02x, 0x%02x)", (uint8_t *)&__p, 0xEu);
        }

        LOBYTE(__p) = 45;
        *((void *)&__p + 1) = 0;
        long long v242 = 0uLL;
        sub_10016D488((void *)&__p + 1, *(const void **)v215, (uint64_t)v216, (size_t)v216 - *(void *)v215);
        LOBYTE(buf) = __p;
        v239 = 0;
        *((void *)&buf + 1) = 0;
        *(void *)v238 = 0;
        sub_10016D488((void *)&buf + 1, *((const void **)&__p + 1), v242, v242 - *((void *)&__p + 1));
        sub_100229F00(&v224, (uint64_t)&buf, 1uLL);
        if (*((void *)&buf + 1))
        {
          *(void *)v238 = *((void *)&buf + 1);
          operator delete(*((void **)&buf + 1));
        }
        long long buf = 0uLL;
        *(void *)v238 = 0;
        sub_100236680(&buf, (uint64_t)v224, *(uint64_t *)v225, (uint64_t)(*(void *)v225 - (void)v224) >> 5);
        BOOL v46 = sub_1003E8858(v178, (uint64_t *)&buf);
        p_long long buf = &buf;
        sub_10016D6F0((void ***)&p_buf);
        if (!v46)
        {
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
            sub_100423728();
          }
          sub_100004950(v222, "Failed to set NB ePA/eLNA mode on the FW");
          sub_1002258D8(a1, 3, v222);
          if ((v223 & 0x80000000) == 0) {
            goto LABEL_199;
          }
          uint64_t v70 = (void *)v222[0];
          goto LABEL_198;
        }
        *(void *)&long long buf = &v224;
        sub_10016D6F0((void ***)&buf);
        if (*((void *)&__p + 1))
        {
          *(void *)&long long v242 = *((void *)&__p + 1);
          operator delete(*((void **)&__p + 1));
        }
        if (*(void *)v215)
        {
          char v216 = *(void **)v215;
          operator delete(*(void **)v215);
        }
      }
      else
      {
        std::chrono::system_clock::time_point v42 = (id)qword_1008A5780;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Use default NB ePA&eLNA settings", (uint8_t *)&__p, 2u);
        }
      }
      int v47 = sub_100007D00();
      int v48 = sub_1003D2E6C((uint64_t)v47);
      if (!v20)
      {
        if ((v48 & v40) == 1)
        {
          *(void *)uint64_t v225 = 0;
          long long v224 = 0;
          uint64_t v226 = 0;
          *(void *)std::string::size_type v220 = 0;
          p_long long buf = 0;
          uint64_t v221 = 0;
          goto LABEL_108;
        }
LABEL_124:
        uint64_t v56 = (id)qword_1008A5780;
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Use default NB&UWB eLNA settings", (uint8_t *)&__p, 2u);
        }

LABEL_127:
        sub_10022B7E0(a1);
        uint64_t v57 = sub_100007D00();
        if (sub_1003D2E6C((uint64_t)v57))
        {
          uint64_t v58 = +[NSUserDefaults standardUserDefaults];
          if (([v58 BOOLForKey:@"disableUWBRxLP"] & 1) == 0)
          {
            uint64_t v59 = (id)qword_1008A5780;
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p) = 0;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "enable UWB RX LP", (uint8_t *)&__p, 2u);
            }

            LOBYTE(__p) = 1;
            sub_10022B0F4(v215, &__p, 1uLL);
            LOBYTE(__p) = 40;
            *((void *)&__p + 1) = 0;
            long long v242 = 0uLL;
            sub_10016D488((void *)&__p + 1, *(const void **)v215, (uint64_t)v216, (size_t)v216 - *(void *)v215);
            LOBYTE(buf) = __p;
            v239 = 0;
            *((void *)&buf + 1) = 0;
            *(void *)v238 = 0;
            sub_10016D488((void *)&buf + 1, *((const void **)&__p + 1), v242, v242 - *((void *)&__p + 1));
            sub_100229F00(&v224, (uint64_t)&buf, 1uLL);
            if (*((void *)&buf + 1))
            {
              *(void *)v238 = *((void *)&buf + 1);
              operator delete(*((void **)&buf + 1));
            }
            long long buf = 0uLL;
            *(void *)v238 = 0;
            sub_100236680(&buf, (uint64_t)v224, *(uint64_t *)v225, (uint64_t)(*(void *)v225 - (void)v224) >> 5);
            BOOL v60 = sub_1003E8858(v178, (uint64_t *)&buf);
            p_long long buf = &buf;
            sub_10016D6F0((void ***)&p_buf);
            if (!v60)
            {
              uint64_t v61 = (id)qword_1008A5780;
              if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
                sub_1004236C0();
              }

              sub_100004950(v209, "");
              sub_1002258D8(a1, 3, v209);
              if (v210 < 0) {
                operator delete(v209[0]);
              }
            }
            *(void *)&long long buf = &v224;
            sub_10016D6F0((void ***)&buf);
            if (*((void *)&__p + 1))
            {
              *(void *)&long long v242 = *((void *)&__p + 1);
              operator delete(*((void **)&__p + 1));
            }
            if (*(void *)v215)
            {
              char v216 = *(void **)v215;
              operator delete(*(void **)v215);
            }
            if (!v60)
            {

              goto LABEL_335;
            }
          }
        }
        BOOL v62 = sub_100007D00();
        if (sub_1003D2ECC((uint64_t)v62))
        {
          char v63 = (id)qword_1008A5780;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Enable Host GTB", (uint8_t *)&__p, 2u);
          }

          LOBYTE(__p) = 1;
          sub_10022B0F4(v215, &__p, 1uLL);
          LOBYTE(__p) = 51;
          *((void *)&__p + 1) = 0;
          long long v242 = 0uLL;
          sub_10016D488((void *)&__p + 1, *(const void **)v215, (uint64_t)v216, (size_t)v216 - *(void *)v215);
          LOBYTE(buf) = __p;
          v239 = 0;
          *((void *)&buf + 1) = 0;
          *(void *)v238 = 0;
          sub_10016D488((void *)&buf + 1, *((const void **)&__p + 1), v242, v242 - *((void *)&__p + 1));
          sub_100229F00(&v224, (uint64_t)&buf, 1uLL);
          if (*((void *)&buf + 1))
          {
            *(void *)v238 = *((void *)&buf + 1);
            operator delete(*((void **)&buf + 1));
          }
          long long buf = 0uLL;
          *(void *)v238 = 0;
          sub_100236680(&buf, (uint64_t)v224, *(uint64_t *)v225, (uint64_t)(*(void *)v225 - (void)v224) >> 5);
          BOOL v64 = sub_1003E8858(v178, (uint64_t *)&buf);
          p_long long buf = &buf;
          sub_10016D6F0((void ***)&p_buf);
          if (!v64)
          {
            uint64_t v75 = (id)qword_1008A5780;
            if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
              sub_10042368C();
            }

            sub_100004950(v207, "Failed to configure Rose to use host GTB");
            sub_1002258D8(a1, 3, v207);
            if ((v208 & 0x80000000) == 0) {
              goto LABEL_199;
            }
            uint64_t v70 = (void *)v207[0];
LABEL_198:
            operator delete(v70);
LABEL_199:
            *(void *)&long long buf = &v224;
            sub_10016D6F0((void ***)&buf);
            if (*((void *)&__p + 1))
            {
              *(void *)&long long v242 = *((void *)&__p + 1);
              operator delete(*((void **)&__p + 1));
            }
            uint64_t v71 = *(void **)v215;
            if (!*(void *)v215) {
              goto LABEL_335;
            }
            char v216 = *(void **)v215;
            goto LABEL_203;
          }
          *(void *)&long long buf = &v224;
          sub_10016D6F0((void ***)&buf);
          if (*((void *)&__p + 1))
          {
            *(void *)&long long v242 = *((void *)&__p + 1);
            operator delete(*((void **)&__p + 1));
          }
          if (*(void *)v215)
          {
            char v216 = *(void **)v215;
            operator delete(*(void **)v215);
          }
        }
        if (sub_100229CF8()) {
          goto LABEL_162;
        }
        LOWORD(__p) = 1;
        sub_10022B0F4(v215, &__p, 2uLL);
        LOBYTE(__p) = 13;
        *((void *)&__p + 1) = 0;
        long long v242 = 0uLL;
        sub_10016D488((void *)&__p + 1, *(const void **)v215, (uint64_t)v216, (size_t)v216 - *(void *)v215);
        LOBYTE(buf) = __p;
        v239 = 0;
        *((void *)&buf + 1) = 0;
        *(void *)v238 = 0;
        sub_10016D488((void *)&buf + 1, *((const void **)&__p + 1), v242, v242 - *((void *)&__p + 1));
        sub_100229F00(&v224, (uint64_t)&buf, 1uLL);
        if (*((void *)&buf + 1))
        {
          *(void *)v238 = *((void *)&buf + 1);
          operator delete(*((void **)&buf + 1));
        }
        long long buf = 0uLL;
        *(void *)v238 = 0;
        sub_100236680(&buf, (uint64_t)v224, *(uint64_t *)v225, (uint64_t)(*(void *)v225 - (void)v224) >> 5);
        BOOL v65 = sub_1003E8858(v178, (uint64_t *)&buf);
        p_long long buf = &buf;
        sub_10016D6F0((void ***)&p_buf);
        if (v65)
        {
          *(void *)&long long buf = &v224;
          sub_10016D6F0((void ***)&buf);
          if (*((void *)&__p + 1))
          {
            *(void *)&long long v242 = *((void *)&__p + 1);
            operator delete(*((void **)&__p + 1));
          }
          if (*(void *)v215)
          {
            char v216 = *(void **)v215;
            operator delete(*(void **)v215);
          }
LABEL_162:
          keyExistsAndHasValidFormat[0] = 0;
          int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"enableRoseFirmwareSleep", @"com.apple.nearbyd", keyExistsAndHasValidFormat);
          int v67 = keyExistsAndHasValidFormat[0];
          uint64_t v68 = (id)qword_1008A5780;
          BOOL v69 = os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
          if (!v67 || AppBooleanValue)
          {
            if (v69)
            {
              LOWORD(__p) = 0;
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Enabling FW sleep", (uint8_t *)&__p, 2u);
            }

            LOWORD(buf) = 257;
            BYTE2(buf) = 0;
            *((void *)&buf + 1) = 3;
            if (sub_1003EB3E4(v178, (uint64_t)&buf))
            {
              sub_100229320(a1);
              LOBYTE(v224) = 1;
              long long __p = 0uLL;
              *(void *)&long long v242 = 0;
              sub_10003AD14(&__p, &v224, (uint64_t)&v224 + 1, 1uLL);
              BOOL v72 = sub_10039C1BC(a1 + 1248, 0xD9u, (uint64_t)&__p);
              uint64_t v73 = (id)qword_1008A5780;
              BOOL v74 = v73;
              if (v72)
              {
                if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t v215 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Wrote the OTPWorkaroundCompleted property", v215, 2u);
                }
              }
              else if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
              {
                sub_1004235F0();
              }

              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
LABEL_217:
              int v79 = +[NSUserDefaults standardUserDefaults];
              unsigned int v80 = [v79 BOOLForKey:@"DisablePowerTable"];
              if (sub_1003D13CC() == 1) {
                unsigned int v81 = v80;
              }
              else {
                unsigned int v81 = 0;
              }
              if (v81 == 1)
              {
                LOBYTE(__p) = 0;
                sub_10022B0F4(&buf, &__p, 1uLL);
                LOBYTE(__p) = 17;
                *((void *)&__p + 1) = 0;
                long long v242 = 0uLL;
                sub_10016D488((void *)&__p + 1, (const void *)buf, *((uint64_t *)&buf + 1), *((void *)&buf + 1) - buf);
                sub_100229F00(&v224, (uint64_t)&__p, 1uLL);
                char v216 = 0;
                *(void *)uint64_t v215 = 0;
                *(void *)v217 = 0;
                sub_100236680(v215, (uint64_t)v224, *(uint64_t *)v225, (uint64_t)(*(void *)v225 - (void)v224) >> 5);
                p_long long buf = &v224;
                sub_10016D6F0((void ***)&p_buf);
                if (*((void *)&__p + 1))
                {
                  *(void *)&long long v242 = *((void *)&__p + 1);
                  operator delete(*((void **)&__p + 1));
                }
                BOOL v82 = sub_10022AA90(a1, (unsigned __int8 **)v215);
                char v83 = (id)qword_1008A5780;
                uint64_t v84 = v83;
                if (v82)
                {
                  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(__p) = 0;
                    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Disabled UWB power table", (uint8_t *)&__p, 2u);
                  }
                }
                else if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
                {
                  sub_100423588();
                }

                *(void *)&long long __p = v215;
                sub_10016D6F0((void ***)&__p);
                if ((void)buf)
                {
                  *((void *)&buf + 1) = buf;
                  operator delete((void *)buf);
                }
              }
              unsigned int v85 = +[NSUserDefaults standardUserDefaults];
              int v86 = [v85 objectForKey:@"DisableSleepBetweenRangingCycles"];
              BOOL v87 = v86 == 0;

              if (v87)
              {
                int v90 = 1;
              }
              else
              {
                unsigned int v88 = [v85 BOOLForKey:@"DisableSleepBetweenRangingCycles"];
                char v89 = (id)qword_1008A5780;
                if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(__p) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "OVERRIDE: UWB sleep between ranging settings", (uint8_t *)&__p, 2u);
                }

                int v90 = v88 ^ 1;
              }
              char v91 = (id)qword_1008A5780;
              if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
              {
                long long v92 = "NO";
                if (v90) {
                  long long v92 = "YES";
                }
                LODWORD(__p) = 136315138;
                *(void *)((char *)&__p + 4) = v92;
                _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "Platform supports UWB sleep between ranging cycles. Enable? %s", (uint8_t *)&__p, 0xCu);
              }

              if (v90)
              {
                sub_100236214((uint64_t)&__p, 5, 2);
                LOBYTE(buf) = __p;
                v239 = 0;
                *((void *)&buf + 1) = 0;
                *(void *)v238 = 0;
                sub_10016D488((void *)&buf + 1, *((const void **)&__p + 1), v242, v242 - *((void *)&__p + 1));
                sub_100229F00(v215, (uint64_t)&buf, 1uLL);
                if (*((void *)&buf + 1))
                {
                  *(void *)v238 = *((void *)&buf + 1);
                  operator delete(*((void **)&buf + 1));
                }
                *(void *)uint64_t v225 = 0;
                long long v224 = 0;
                uint64_t v226 = 0;
                sub_100236680(&v224, *(uint64_t *)v215, (uint64_t)v216, ((uint64_t)v216 - *(void *)v215) >> 5);
                *(void *)&long long buf = off_10085B000;
                v239 = &buf;
                BOOL v93 = sub_1003E89D4(v178, (uint64_t *)&v224, (uint64_t)&buf);
                sub_100236EEC(&buf);
                *(void *)&long long buf = &v224;
                sub_10016D6F0((void ***)&buf);
                long long v94 = (id)qword_1008A5780;
                int v95 = v94;
                if (v93)
                {
                  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(buf) = 0;
                    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "Successfully enabled UWB sleep between ranging cycles", (uint8_t *)&buf, 2u);
                  }
                }
                else
                {
                  if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)) {
                    sub_100423554();
                  }

                  sub_100004950(v199, "Failed to enable UWB sleep between ranging cycles");
                  sub_1002258D8(a1, 3, v199);
                  if (v200 < 0) {
                    operator delete(v199[0]);
                  }
                }
                *(void *)&long long buf = v215;
                sub_10016D6F0((void ***)&buf);
                if (*((void *)&__p + 1))
                {
                  *(void *)&long long v242 = *((void *)&__p + 1);
                  operator delete(*((void **)&__p + 1));
                }
                if (!v93) {
                  goto LABEL_334;
                }
              }
              char v198 = v90;
              *(void *)uint64_t v225 = 0;
              long long v224 = 0;
              uint64_t v226 = 0;
              sub_10003AD14(&v224, &v198, (uint64_t)v199, 1uLL);
              if (!sub_10039C1BC(a1 + 1248, 0xDAu, (uint64_t)&v224))
              {
                uint64_t v96 = (id)qword_1008A5780;
                if (os_log_type_enabled(v96, OS_LOG_TYPE_FAULT)) {
                  sub_100423520();
                }
              }
              if (!*(unsigned char *)(a1 + 1336))
              {
                LOWORD(__p) = 264;
                BOOL v97 = sub_1003E8E04(v178, (__int16 *)&__p);
                uint64_t v98 = (id)qword_1008A5780;
                __int16 v99 = v98;
                if (!v97)
                {
                  if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR)) {
                    sub_1004234EC();
                  }

                  ++*(unsigned char *)(a1 + 1521);
                  sub_100004950(v196, "Failed to disable firmware logging");
                  sub_1002258D8(a1, 3, v196);
                  if ((v197 & 0x80000000) == 0) {
                    goto LABEL_332;
                  }
                  char v159 = (void *)v196[0];
                  goto LABEL_331;
                }
                if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "Successfully disabled firmware logging", (uint8_t *)&buf, 2u);
                }
              }
              unsigned __int8 v100 = atomic_load((unsigned __int8 *)(a1 + 1338));
              if (v100)
              {
                uint64_t v135 = (id)qword_1008A5780;
                if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(__p) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "Skip parsing cal files because it was done previously", (uint8_t *)&__p, 2u);
                }
              }
              else
              {
                atomic_store(1u, (unsigned __int8 *)(a1 + 1338));
                sub_1002CF880((uint64_t)&__p, 0);
                sub_1003E91F4(v178, 1, v101, v102, v103, v104, v105, v106, (unint64_t *)&buf);
                sub_1002CF8C8((unsigned __int8 *)&__p, (uint64_t *)&buf, v107, v108, v109, v110, v111, v112);
                int v113 = (id)qword_1008A5780;
                if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t v215 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "Parsing rMCL file finished", v215, 2u);
                }

                if ((void)buf)
                {
                  *((void *)&buf + 1) = buf;
                  operator delete((void *)buf);
                }
                sub_1003E91F4(v178, 2, v114, v115, v116, v117, v118, v119, (unint64_t *)&buf);
                sub_1002CF8C8((unsigned __int8 *)&__p, (uint64_t *)&buf, v120, v121, v122, v123, v124, v125);
                char v126 = (id)qword_1008A5780;
                if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t v215 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "Parsing rSCL file finished", v215, 2u);
                }

                if ((void)buf)
                {
                  *((void *)&buf + 1) = buf;
                  operator delete((void *)buf);
                }
                uint64_t v127 = *(void *)(a1 + 1312);
                if (v127) {
                  sub_10029AF28(v127, v246);
                }
                uint64_t v128 = sub_100007D00();
                sub_1003D290C((uint64_t)v128, &__p, v129, v130, v131, v132, v133, v134, v173);
                sub_100233A0C((uint64_t)&__p);
              }
              uint64_t v136 = (id)qword_1008A5780;
              if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v137 = sub_100007D00();
                BOOL v138 = sub_1003D2ECC((uint64_t)v137);
                long long v139 = sub_100007D00();
                BOOL v140 = sub_1003D2ECC((uint64_t)v139);
                LODWORD(__p) = 67109376;
                DWORD1(__p) = v138;
                WORD4(__p) = 1024;
                *(_DWORD *)((char *)&__p + 10) = !v140;
                _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEFAULT, "Host and UWB share clock: %d. Enabling UWB time sync with host: %d", (uint8_t *)&__p, 0xEu);
              }

              long long v141 = (id)qword_1008A5780;
              if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v142 = sub_100007D00();
                BOOL v143 = sub_1003D2EDC((uint64_t)v142);
                __int16 v144 = sub_100007D00();
                BOOL v145 = sub_1003D2EDC((uint64_t)v144);
                LODWORD(__p) = 67109376;
                DWORD1(__p) = v143;
                WORD4(__p) = 1024;
                *(_DWORD *)((char *)&__p + 10) = !v145;
                _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "Host and BT share clock: %d. Enabling UWB time sync with BT: %d", (uint8_t *)&__p, 0xEu);
              }

              uint64_t v146 = sub_100007D00();
              BOOL v147 = sub_1003D2ECC((uint64_t)v146);
              uint64_t v148 = sub_100007D00();
              if (sub_1003D2EDC((uint64_t)v148)) {
                int v149 = !v147;
              }
              else {
                int v149 = !v147 | 2;
              }
              sub_100236214((uint64_t)v215, 26, v149);
              LOBYTE(__p) = v215[0];
              *((void *)&__p + 1) = 0;
              long long v242 = 0uLL;
              sub_10016D488((void *)&__p + 1, v216, *(uint64_t *)v217, *(void *)v217 - (void)v216);
              sub_100229F00(&p_buf, (uint64_t)&__p, 1uLL);
              if (*((void *)&__p + 1))
              {
                *(void *)&long long v242 = *((void *)&__p + 1);
                operator delete(*((void **)&__p + 1));
              }
              int v150 = (id)qword_1008A5780;
              if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(__p) = 67109120;
                DWORD1(__p) = v149;
                _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEFAULT, "PRRose:enabling timesync on the FW with parameters: %d", (uint8_t *)&__p, 8u);
              }

              long long __p = 0uLL;
              *(void *)&long long v242 = 0;
              sub_100236680(&__p, (uint64_t)p_buf, *(uint64_t *)v220, (uint64_t)(*(void *)v220 - (void)p_buf) >> 5);
              BOOL v151 = sub_1003E8858(v178, (uint64_t *)&__p);
              *(void *)&long long buf = &__p;
              sub_10016D6F0((void ***)&buf);
              if (v151)
              {
                if (sub_100229950(a1))
                {
                  sub_1002CDE30(*(void *)(a1 + 1296), (uint64_t)&__p);
                  sub_100235F10(&buf, (uint64_t)&__p + 8);
                  int v152 = __p;
                  if (__p || !v240)
                  {
                    long long v160 = (id)qword_1008A5780;
                    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR)) {
                      sub_100423450();
                    }

                    sub_1000077C4((uint64_t *)(a1 + 1328), 0, v161, v162, v163, v164, v165, v166);
                    if (v152 == 1) {
                      int v167 = 3;
                    }
                    else {
                      int v167 = 4 * (v152 == 2);
                    }
                    *(_OWORD *)(a1 + 1512) = 0u;
                    sub_1002244F4(a1, v167);
                    sub_10022917C(a1);
                    unsigned int v168 = atomic_load((unsigned int *)(a1 + 1240));
                    if (v168 != 8) {
                      goto LABEL_328;
                    }
                    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
                    if (*(_DWORD *)(a1 + 1544) == 1)
                    {
                      sub_100233AA8(a1);
LABEL_328:
                      sub_1002361B8((uint64_t)&buf);
                      sub_1002361B8((uint64_t)&__p + 8);
                      goto LABEL_329;
                    }
                    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
                    if (*(_DWORD *)(a1 + 1544) != 2) {
                      goto LABEL_328;
                    }
                    char v170 = (id)qword_1008A5780;
                    if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)v213 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v170, OS_LOG_TYPE_DEFAULT, "PRRose Executing pending power off", v213, 2u);
                    }

                    sub_100004950(v190, "");
                    sub_1002258D8(a1, 9, v190);
                    if ((v191 & 0x80000000) == 0) {
                      goto LABEL_328;
                    }
                    unint64_t v155 = (void **)v190;
                  }
                  else if (sub_100226718((unsigned char *)a1, (uint64_t)&buf))
                  {
                    *(_OWORD *)(a1 + 1512) = 0u;
                    v187[0] = _NSConcreteStackBlock;
                    v187[1] = 3221225472;
                    v187[2] = sub_100233B5C;
                    v187[3] = &unk_1008466D8;
                    v187[4] = a1;
                    sub_1002257F4(a1, v187);
                    BOOL v153 = sub_10022917C(a1);
                    sub_100004950(v185, "");
                    if (v153) {
                      uint64_t v154 = 4;
                    }
                    else {
                      uint64_t v154 = 5;
                    }
                    sub_1002258D8(a1, v154, v185);
                    if ((v186 & 0x80000000) == 0) {
                      goto LABEL_328;
                    }
                    unint64_t v155 = (void **)v185;
                  }
                  else
                  {
                    uint64_t v169 = (id)qword_1008A5780;
                    if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR)) {
                      sub_10042341C();
                    }

                    sub_100004950(v188, "Failed to apply config parameters.");
                    sub_1002258D8(a1, 3, v188);
                    if ((v189 & 0x80000000) == 0) {
                      goto LABEL_328;
                    }
                    unint64_t v155 = (void **)v188;
                  }
                  operator delete(*v155);
                  goto LABEL_328;
                }
                uint64_t v158 = (id)qword_1008A5780;
                if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR)) {
                  sub_100423484();
                }

                ++*(unsigned char *)(a1 + 1523);
                sub_100004950(v192, "Failed to activate AOP timesync.");
                sub_1002258D8(a1, 3, v192);
                if ((v193 & 0x80000000) == 0) {
                  goto LABEL_329;
                }
                double v157 = v192[0];
              }
              else
              {
                __int16 v156 = (id)qword_1008A5780;
                if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR)) {
                  sub_1004234B8();
                }

                ++*(unsigned char *)(a1 + 1522);
                sub_100004950(v194, "Failed to enable timesync on the FW");
                sub_1002258D8(a1, 3, v194);
                if ((v195 & 0x80000000) == 0) {
                  goto LABEL_329;
                }
                double v157 = (void *)v194[0];
              }
              operator delete(v157);
LABEL_329:
              *(void *)&long long __p = &p_buf;
              sub_10016D6F0((void ***)&__p);
              char v159 = v216;
              if (!v216) {
                goto LABEL_332;
              }
              *(void *)v217 = v216;
LABEL_331:
              operator delete(v159);
LABEL_332:
              if (v224)
              {
                *(void *)uint64_t v225 = v224;
                operator delete(v224);
              }
LABEL_334:

              goto LABEL_335;
            }
            double v77 = (id)qword_1008A5780;
            if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
              sub_100423624();
            }

            ++*(unsigned char *)(a1 + 1520);
            sub_100004950(v201, "Enabling sleep failed");
            sub_1002258D8(a1, 3, v201);
            if ((v202 & 0x80000000) == 0) {
              goto LABEL_335;
            }
            uint64_t v71 = (void *)v201[0];
          }
          else
          {
            if (v69)
            {
              LOWORD(__p) = 0;
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "enableRoseFirmwareSleep defaults value set to false. Disabling FW sleep", (uint8_t *)&__p, 2u);
            }

            LOWORD(__p) = 256;
            BYTE2(__p) = 0;
            *((void *)&__p + 1) = 3;
            if (sub_1003EB3E4(v178, (uint64_t)&__p))
            {
              sub_1002293F4(a1);
              goto LABEL_217;
            }
            uint64_t v78 = (id)qword_1008A5780;
            if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
              sub_1004235BC();
            }

            ++*(unsigned char *)(a1 + 1520);
            sub_100004950(v203, "Disabling sleep failed");
            sub_1002258D8(a1, 3, v203);
            if ((v204 & 0x80000000) == 0) {
              goto LABEL_335;
            }
            uint64_t v71 = (void *)v203[0];
          }
          goto LABEL_203;
        }
        BOOL v76 = (id)qword_1008A5780;
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
          sub_100423658();
        }

        ++*(unsigned char *)(a1 + 1519);
        sub_100004950(v205, "Failed to enable internal clock on the FW");
        sub_1002258D8(a1, 3, v205);
        if ((v206 & 0x80000000) == 0) {
          goto LABEL_199;
        }
        uint64_t v70 = v205[0];
        goto LABEL_198;
      }
      if ((v48 & (v34 | v40) & 1) == 0) {
        goto LABEL_124;
      }
      *(void *)uint64_t v225 = 0;
      long long v224 = 0;
      uint64_t v226 = 0;
      *(void *)std::string::size_type v220 = 0;
      p_long long buf = 0;
      uint64_t v221 = 0;
      if (v34)
      {
        LOBYTE(__p) = v19;
        LOBYTE(buf) = v175;
        v215[0] = v32;
        v213[0] = v33;
        sub_100233914((unint64_t *)&v224, &__p);
        sub_100233914((unint64_t *)&v224, &buf);
        sub_100233914((unint64_t *)&p_buf, v215);
        sub_100233914((unint64_t *)&p_buf, v213);
        goto LABEL_109;
      }
LABEL_108:
      LOBYTE(__p) = 0;
      sub_100233914((unint64_t *)&v224, &__p);
      LOBYTE(__p) = 2;
      sub_100233914((unint64_t *)&v224, &__p);
      LOBYTE(__p) = 0;
      sub_100233914((unint64_t *)&p_buf, &__p);
      LOBYTE(__p) = 2;
      sub_100233914((unint64_t *)&p_buf, &__p);
LABEL_109:
      uint64_t v49 = (id)qword_1008A5780;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        int v50 = *((unsigned __int8 *)v224 + 1);
        int v51 = *(unsigned __int8 *)p_buf;
        int v52 = *((unsigned __int8 *)p_buf + 1);
        *(void *)&long long __p = __PAIR64__(*(unsigned __int8 *)v224, 67109888);
        WORD4(__p) = 1024;
        *(_DWORD *)((char *)&__p + 10) = v50;
        HIWORD(__p) = 1024;
        LODWORD(v242) = v51;
        WORD2(v242) = 1024;
        *(_DWORD *)((char *)&v242 + 6) = v52;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Set NB&UWB eLNA to high gain mode: NB: (0x%02x, 0x%02x), UWB: (0x%02x, 0x%02x)", (uint8_t *)&__p, 0x1Au);
      }

      LOBYTE(buf) = 45;
      v239 = 0;
      *((void *)&buf + 1) = 0;
      *(void *)v238 = 0;
      sub_10016D488((void *)&buf + 1, v224, *(uint64_t *)v225, *(void *)v225 - (void)v224);
      v215[0] = 38;
      uint64_t v218 = 0;
      char v216 = 0;
      *(void *)v217 = 0;
      sub_10016D488(&v216, p_buf, *(uint64_t *)v220, *(void *)v220 - (void)p_buf);
      LOBYTE(__p) = buf;
      *((void *)&__p + 1) = 0;
      long long v242 = 0uLL;
      sub_10016D488((void *)&__p + 1, *((const void **)&buf + 1), *(uint64_t *)v238, *(void *)v238 - *((void *)&buf + 1));
      LOBYTE(v243) = v215[0];
      v245[1] = 0;
      uint64_t v244 = 0;
      v245[0] = 0;
      sub_10016D488(&v244, v216, *(uint64_t *)v217, *(void *)v217 - (void)v216);
      sub_100229F00(v213, (uint64_t)&__p, 2uLL);
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        int v54 = (void *)v245[i - 1];
        if (v54)
        {
          v245[i] = v54;
          operator delete(v54);
        }
      }
      long long __p = 0uLL;
      *(void *)&long long v242 = 0;
      sub_100236680(&__p, *(uint64_t *)v213, v214, (v214 - *(void *)v213) >> 5);
      BOOL v55 = sub_1003E8858(v178, (uint64_t *)&__p);
      *(void *)Boolean keyExistsAndHasValidFormat = &__p;
      sub_10016D6F0((void ***)keyExistsAndHasValidFormat);
      if (v55)
      {
        *(void *)&long long __p = v213;
        sub_10016D6F0((void ***)&__p);
        if (v216)
        {
          *(void *)v217 = v216;
          operator delete(v216);
        }
        if (*((void *)&buf + 1))
        {
          *(void *)v238 = *((void *)&buf + 1);
          operator delete(*((void **)&buf + 1));
        }
        if (p_buf)
        {
          *(void *)std::string::size_type v220 = p_buf;
          operator delete(p_buf);
        }
        if (v224)
        {
          *(void *)uint64_t v225 = v224;
          operator delete(v224);
        }
        goto LABEL_127;
      }
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_1004236F4();
      }
      sub_100004950(v211, "Failed to enforce NB/UWB eLNA mode on the FW");
      sub_1002258D8(a1, 3, v211);
      if (v212 < 0) {
        operator delete(v211[0]);
      }
      *(void *)&long long __p = v213;
      sub_10016D6F0((void ***)&__p);
      if (v216)
      {
        *(void *)v217 = v216;
        operator delete(v216);
      }
      if (*((void *)&buf + 1))
      {
        *(void *)v238 = *((void *)&buf + 1);
        operator delete(*((void **)&buf + 1));
      }
      if (p_buf)
      {
        *(void *)std::string::size_type v220 = p_buf;
        operator delete(p_buf);
      }
      uint64_t v71 = v224;
      if (!v224) {
        goto LABEL_335;
      }
      *(void *)uint64_t v225 = v224;
LABEL_203:
      operator delete(v71);
LABEL_335:

LABEL_336:
      sub_10000AE90((uint64_t)v231);
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v235.__r_.__value_.__l.__data_);
      }
      return;
    case 3:
      atomic_store(6u, (unsigned int *)(a1 + 1240));
      if (*(char *)(a3 + 23) < 0)
      {
        sub_100002DE4(__dst, *(void **)a3, *(void *)(a3 + 8));
      }
      else
      {
        *(_OWORD *)long long __dst = *(_OWORD *)a3;
        uint64_t v184 = *(void *)(a3 + 16);
      }
      sub_1002258D8(a1, 3, __dst);
      if (SHIBYTE(v184) < 0) {
        operator delete(__dst[0]);
      }
      v182[0] = _NSConcreteStackBlock;
      v182[1] = 3221225472;
      v182[2] = sub_100233B9C;
      v182[3] = &unk_1008466D8;
      v182[4] = a1;
      uint64_t v28 = v182;
      goto LABEL_56;
    case 6:
      atomic_store(6u, (unsigned int *)(a1 + 1240));
      if (*(char *)(a3 + 23) < 0)
      {
        sub_100002DE4(v180, *(void **)a3, *(void *)(a3 + 8));
      }
      else
      {
        *(_OWORD *)char v180 = *(_OWORD *)a3;
        uint64_t v181 = *(void *)(a3 + 16);
      }
      sub_1002258D8(a1, 6, v180);
      if (SHIBYTE(v181) < 0) {
        operator delete(v180[0]);
      }
      v179[0] = _NSConcreteStackBlock;
      v179[1] = 3221225472;
      v179[2] = sub_100233BDC;
      v179[3] = &unk_1008466D8;
      v179[4] = a1;
      uint64_t v28 = v179;
LABEL_56:
      sub_1002257F4(a1, v28);
      return;
    case 7:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_1004237F8();
      }
      return;
    case 8:
      uint64_t v21 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      unsigned int v22 = atomic_load((unsigned int *)(a1 + 1240));
      unsigned int v23 = v22 - 1;
      if (v23 > 0xA) {
        uint64_t v24 = "UnknownToHost";
      }
      else {
        uint64_t v24 = off_10085B4E0[v23];
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v24;
      unsigned int v6 = "PRRose, regulatory,configuration update ignored during %s";
      goto LABEL_70;
    case 11:
      uint64_t v21 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      unsigned int v25 = atomic_load((unsigned int *)(a1 + 1240));
      unsigned int v26 = v25 - 1;
      if (v26 > 0xA) {
        id v27 = "UnknownToHost";
      }
      else {
        id v27 = off_10085B4E0[v26];
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v27;
      unsigned int v6 = "PRRose, LPEM enable event ignored during %s";
LABEL_70:
      uint64_t v7 = v21;
      uint32_t v8 = 12;
LABEL_71:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&__p, v8);
      return;
    default:
      BOOL v171 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (v171) {
        sub_100423344(a1);
      }
      int v172 = atomic_load((unsigned int *)(a1 + 1240));
      long long v174 = sub_1002256A4(v171, v172);
      sub_10022D8A4((uint64_t)v174, a2);
      abort_report_np();
      __break(1u);
      return;
  }
}

void sub_100230A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  sub_1002361B8((uint64_t)&STACK[0x370]);
  sub_1002361B8(v48);
  STACK[0x3E0] = (unint64_t)&STACK[0x260];
  sub_10016D6F0((void ***)&STACK[0x3E0]);
  int v52 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v52;
    operator delete(v52);
  }
  __int16 v53 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v53;
    operator delete(v53);
  }

  sub_10000AE90((uint64_t)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  _Unwind_Resume(a1);
}

void sub_100231110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch((int)a2)
  {
    case 0:
      uint64_t v12 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint32_t v13 = "PRRose, already started, ignoring HostStartup";
        goto LABEL_22;
      }
      break;
    case 3:
    case 5:
    case 7:
      atomic_store(6u, (unsigned int *)(a1 + 1240));
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_100233D5C;
      double v30[3] = &unk_1008466D8;
      v30[4] = a1;
      sub_1002257F4(a1, v30);
      if (*(char *)(a3 + 23) < 0)
      {
        sub_100002DE4(&__dst, *(void **)a3, *(void *)(a3 + 8));
      }
      else
      {
        long long __dst = *(_OWORD *)a3;
        uint64_t v29 = *(void *)(a3 + 16);
      }
      sub_1002258D8(a1, a2, &__dst);
      if (SHIBYTE(v29) < 0)
      {
        uint64_t v11 = (void *)__dst;
        goto LABEL_35;
      }
      break;
    case 4:
      atomic_store(4u, (unsigned int *)(a1 + 1240));
      sub_1000077C4((uint64_t *)(a1 + 1328), 0, a3, a4, a5, a6, a7, a8);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_100233C1C;
      v34[3] = &unk_1008466D8;
      v34[4] = a1;
      sub_1002257F4(a1, v34);
      sub_1002294C4(a1);
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
      if (*(_DWORD *)(a1 + 1544) == 1)
      {
        sub_100233AA8(a1);
      }
      else
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
        if (*(_DWORD *)(a1 + 1544) == 2)
        {
          dispatch_time_t v20 = dispatch_time(0, 500000000);
          uint64_t v21 = *(NSObject **)(a1 + 8);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3321888768;
          block[2] = sub_100233C6C;
          block[3] = &unk_10085AA28;
          void block[4] = a1;
          if (*(char *)(a3 + 23) < 0)
          {
            sub_100002DE4(&v32, *(void **)a3, *(void *)(a3 + 8));
          }
          else
          {
            long long v32 = *(_OWORD *)a3;
            uint64_t v33 = *(void *)(a3 + 16);
          }
          dispatch_after(v20, v21, block);
          if (SHIBYTE(v33) < 0)
          {
            uint64_t v11 = (void *)v32;
            goto LABEL_35;
          }
        }
      }
      break;
    case 6:
      atomic_store(6u, (unsigned int *)(a1 + 1240));
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_100233D9C;
      v27[3] = &unk_1008466D8;
      v27[4] = a1;
      sub_1002257F4(a1, v27);
      if (*(char *)(a3 + 23) < 0)
      {
        sub_100002DE4(__p, *(void **)a3, *(void *)(a3 + 8));
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)a3;
        uint64_t v26 = *(void *)(a3 + 16);
      }
      sub_1002258D8(a1, 6, __p);
      if (SHIBYTE(v26) < 0)
      {
        uint64_t v11 = __p[0];
LABEL_35:
        operator delete(v11);
      }
      break;
    case 8:
      sub_100226580(a1);
      break;
    case 9:
      if (*(unsigned char *)(a1 + 1457))
      {
        sub_100233DDC(a1);
      }
      else
      {
        sub_1002260D8(a1);
      }
      break;
    case 10:
      uint64_t v12 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint32_t v13 = "PRRose, already started, ignoring";
LABEL_22:
        unsigned int v14 = v12;
        uint32_t v15 = 2;
        goto LABEL_38;
      }
      break;
    case 11:
      uint64_t v16 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v17 = atomic_load((unsigned int *)(a1 + 1240));
        unsigned int v18 = v17 - 1;
        if (v18 > 0xA) {
          char v19 = "UnknownToHost";
        }
        else {
          char v19 = off_10085B4E0[v18];
        }
        *(_DWORD *)long long buf = 136315138;
        int v36 = v19;
        uint32_t v13 = "PRRose, LPEM enable event ignored during %s";
        unsigned int v14 = v16;
        uint32_t v15 = 12;
LABEL_38:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
      }
      break;
    default:
      BOOL v22 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (v22) {
        sub_10042382C(a1);
      }
      int v23 = atomic_load((unsigned int *)(a1 + 1240));
      uint64_t v24 = sub_1002256A4(v22, v23);
      sub_10022D8A4((uint64_t)v24, a2);
      abort_report_np();
      __break(1u);
      break;
  }
}

void sub_10023165C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002316C8(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      long long v4 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose, already started, ignoring HostStartup", buf, 2u);
      }
      break;
    case 6:
      operator new();
    case 7:
      operator new();
    case 8:
      sub_100226580(a1);
      break;
    case 9:
      if (*(unsigned char *)(a1 + 1457))
      {
        sub_100233DDC(a1);
      }
      else
      {
        sub_1002260D8(a1);
      }
      break;
    case 10:
      uint64_t v5 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PRRose already Ready", buf, 2u);
      }
      sub_100233AA8(a1);
      break;
    case 11:
      sub_100233FF4(a1);
      break;
    default:
      BOOL v6 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (v6) {
        sub_1004238D0(a1);
      }
      int v7 = atomic_load((unsigned int *)(a1 + 1240));
      uint32_t v8 = sub_1002256A4(v6, v7);
      sub_10022D8A4((uint64_t)v8, a2);
      abort_report_np();
      BOOL v9 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (v9) {
        sub_100423974((uint64_t)v8);
      }
      int v10 = atomic_load((unsigned int *)v8 + 310);
      sub_1002256A4(v9, v10);
      uint64_t v11 = (_Unwind_Exception *)abort_report_np();
      if (v13 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(v11);
      return;
  }
}

void sub_100231BF8(uint64_t a1, int a2, long long *a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v6 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        int v7 = "PRRose, already started, ignoring HostStartup";
        goto LABEL_24;
      }
      return;
    case 1:
      uint64_t v6 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        int v7 = "PRRose, in error state, but getting StartBoot dispatch block that is executed after the state changed to er"
             "ror due to firmware issues";
        goto LABEL_24;
      }
      return;
    case 3:
      uint64_t v12 = *(NSObject **)(a1 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3321888768;
      block[2] = sub_1002342C0;
      block[3] = &unk_10085AC88;
      void block[4] = a1;
      int v34 = 3;
      if (*((char *)a3 + 23) < 0)
      {
        sub_100002DE4(&__p, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long __p = *a3;
        uint64_t v33 = *((void *)a3 + 2);
      }
      dispatch_async(v12, block);
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)__p);
      }
      return;
    case 5:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100423BAC();
      }
      abort_report_np();
      goto LABEL_60;
    case 6:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100423B44();
      }
      atomic_store(7u, (unsigned int *)(a1 + 1240));
      return;
    case 7:
      sub_100054E28((uint64_t)buf);
      sub_100056628(v36, (uint64_t)"ChipReset", 9);
      if (*((char *)a3 + 23) < 0)
      {
        if (!*((void *)a3 + 1)) {
          goto LABEL_36;
        }
      }
      else if (!*((unsigned char *)a3 + 23))
      {
        goto LABEL_36;
      }
      unsigned int v18 = sub_100056628(v36, (uint64_t)": ", 2);
      int v19 = *((char *)a3 + 23);
      if (v19 >= 0) {
        uint64_t v20 = (uint64_t)a3;
      }
      else {
        uint64_t v20 = *(void *)a3;
      }
      if (v19 >= 0) {
        uint64_t v21 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        uint64_t v21 = *((void *)a3 + 1);
      }
      sub_100056628(v18, v20, v21);
LABEL_36:
      std::stringbuf::str();
      char v22 = sub_100227ED4(a1, 3, (std::string::size_type)&v29);
      if (v30 < 0) {
        operator delete(v29);
      }
      if (v22)
      {
        atomic_store(1u, (unsigned int *)(a1 + 1240));
        sub_100004950(v27, "");
        sub_1002258D8(a1, 1, v27);
        if (v28 < 0) {
          operator delete(v27[0]);
        }
        v36[0] = v23;
        if (v37 < 0) {
          operator delete((void *)v36[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_100423B78();
        }
        abort_report_np();
LABEL_60:
        __break(1u);
      }
      return;
    case 8:
      uint64_t v8 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      unsigned int v9 = atomic_load((unsigned int *)(a1 + 1240));
      unsigned int v10 = v9 - 1;
      if (v10 > 0xA) {
        uint64_t v11 = "UnknownToHost";
      }
      else {
        uint64_t v11 = off_10085B4E0[v10];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v11;
      int v7 = "PRRose, regulatory,configuration update ignored during %s";
      goto LABEL_48;
    case 9:
      uint64_t v6 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      int v7 = "PRRose, in error state, Power off delayed";
      goto LABEL_24;
    case 10:
      uint64_t v6 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      int v7 = "PRRose, already started";
LABEL_24:
      uint64_t v16 = v6;
      uint32_t v17 = 2;
      goto LABEL_49;
    case 11:
      uint64_t v8 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      unsigned int v13 = atomic_load((unsigned int *)(a1 + 1240));
      unsigned int v14 = v13 - 1;
      if (v14 > 0xA) {
        uint32_t v15 = "UnknownToHost";
      }
      else {
        uint32_t v15 = off_10085B4E0[v14];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v15;
      int v7 = "PRRose, LPEM enable event ignored during %s";
LABEL_48:
      uint64_t v16 = v8;
      uint32_t v17 = 12;
LABEL_49:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v7, buf, v17);
      return;
    default:
      BOOL v24 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (v24) {
        sub_100423A9C(a1);
      }
      int v25 = atomic_load((unsigned int *)(a1 + 1240));
      uint64_t v26 = sub_1002256A4(v24, v25);
      sub_10022D8A4((uint64_t)v26, a2);
      abort_report_np();
      goto LABEL_60;
  }
}

void sub_1002321B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_100055100((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_100232230(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v5 = "PRRose, already started, ignoring HostStartup";
      goto LABEL_22;
    case 1:
      uint64_t v4 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v5 = "PRRose, in error handling state, but getting StartBoot dispatch block that is executed after the state change"
           "d to error due to firmware issues";
      goto LABEL_22;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100423C48();
      }
      return;
    case 6:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100423BE0();
      }
      return;
    case 7:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100423C14();
      }
      return;
    case 8:
      uint64_t v6 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      unsigned int v10 = atomic_load((unsigned int *)(a1 + 1240));
      unsigned int v11 = v10 - 1;
      if (v11 > 0xA) {
        uint64_t v12 = "UnknownToHost";
      }
      else {
        uint64_t v12 = off_10085B4E0[v11];
      }
      *(_DWORD *)long long buf = 136315138;
      int v19 = v12;
      uint64_t v5 = "PRRose, regulatory,configuration update ignored during %s";
      goto LABEL_27;
    case 9:
      uint64_t v4 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v5 = "PRRose, in error state, Power off delayed";
      goto LABEL_22;
    case 10:
      uint64_t v4 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v5 = "PRRose, already started";
LABEL_22:
      unsigned int v13 = v4;
      uint32_t v14 = 2;
      break;
    case 11:
      uint64_t v6 = qword_1008A5780;
      if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      unsigned int v7 = atomic_load((unsigned int *)(a1 + 1240));
      unsigned int v8 = v7 - 1;
      if (v8 > 0xA) {
        unsigned int v9 = "UnknownToHost";
      }
      else {
        unsigned int v9 = off_10085B4E0[v8];
      }
      *(_DWORD *)long long buf = 136315138;
      int v19 = v9;
      uint64_t v5 = "PRRose, LPEM enable event ignored during %s";
LABEL_27:
      unsigned int v13 = v6;
      uint32_t v14 = 12;
      break;
    default:
      BOOL v15 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (v15) {
        sub_1004238D0(a1);
      }
      int v16 = atomic_load((unsigned int *)(a1 + 1240));
      uint32_t v17 = sub_1002256A4(v15, v16);
      sub_10022D8A4((uint64_t)v17, a2);
      abort_report_np();
      __break(1u);
      JUMPOUT(0x10023252CLL);
  }
  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v5, buf, v14);
}

void sub_100232560(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 6:
      operator new();
    case 7:
      operator new();
    case 9:
      unsigned int v3 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PRRose power down Rose after regulatory disallowment", buf, 2u);
      }
      sub_1002260D8(a1);
      break;
    case 10:
      uint64_t v4 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose already started", buf, 2u);
      }
      sub_100233AA8(a1);
      break;
    case 11:
      if (*(_DWORD *)(a1 + 1244) == 3)
      {
        uint64_t v5 = qword_1008A5780;
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PRRose: enabling LPEM while in Airplane Mode", buf, 2u);
        }
        sub_100233FF4(a1);
      }
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_100423C7C(a1);
      }
      break;
  }
}

void sub_100232A0C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose setStateFromPowerOff", buf, 2u);
  }
  if (a2 == 8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100423E58(a1);
    }
  }
  else if (a2 == 10)
  {
    unsigned int v7 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PRRose Powering On", buf, 2u);
    }
    if (!sub_1003EB624(a1 + 40, 1, v8, v9, v10, v11, v12, v13))
    {
      BOOL v14 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR);
      if (v14) {
        sub_100423DC4(a1);
      }
      int v15 = atomic_load((unsigned int *)(a1 + 1240));
      sub_1002256A4(v14, v15);
      int v16 = (_Unwind_Exception *)abort_report_np();
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      _Unwind_Resume(v16);
    }
    atomic_store(0, (unsigned int *)(a1 + 1240));
    if (*(char *)(a3 + 23) < 0)
    {
      sub_100002DE4(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a3;
      uint64_t v18 = *(void *)(a3 + 16);
    }
    sub_1002258D8(a1, 0, __p);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_FAULT))
  {
    sub_100423D20(a1);
  }
}

void sub_100232BE4(uint64_t a1, int a2)
{
  uint64_t v4 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose setStateFromDeepSleep", buf, 2u);
  }
  switch(a2)
  {
    case 6:
      operator new();
    case 7:
      operator new();
    case 8:
      uint64_t v5 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PRRose reconfigure Rose from deep sleep", buf, 2u);
      }
      sub_100225EB0(a1);
      sub_100226580(a1);
      unsigned int v6 = atomic_load((unsigned int *)(a1 + 1240));
      unsigned int v7 = qword_1008A5780;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
      if (v6 == 8)
      {
        if (v8)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PRRose UWB not allowed. Power off rose", buf, 2u);
        }
        sub_1002260D8(a1);
      }
      else
      {
        if (v8)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PRRose Reconfigured. Reenter deep sleep", buf, 2u);
        }
        sub_1002345FC(a1);
      }
      break;
    case 10:
      uint64_t v9 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PRRose Exiting Deep Sleep", buf, 2u);
      }
      sub_100228A90(a1, 1);
      break;
    case 11:
      uint64_t v10 = qword_1008A5780;
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PRRose: exiting Deep Sleep before entering LPEM", buf, 2u);
      }
      if (sub_100228A90(a1, 1)) {
        sub_100233FF4(a1);
      }
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_FAULT)) {
        sub_100423EEC(a1);
      }
      break;
  }
}

const char *sub_10023315C(uint64_t a1, int a2)
{
  if ((a2 - 1) > 3) {
    return "SecureROM";
  }
  else {
    return off_10085B468[a2 - 1];
  }
}

uint64_t sub_100233184(uint64_t a1, int a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1464);
  if (!*(unsigned char *)(a1 + 1472)) {
    uint64_t v4 = (uint64_t *)&unk_1004BBC88;
  }
  uint64_t v5 = *v4;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v5;
  while (1)
  {
    __p[0] = (void *)10000000;
    std::this_thread::sleep_for ((const std::chrono::nanoseconds *)__p);
    int v7 = sub_10022CEB8(a1);
    if (v7 != 3) {
      break;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v6.__d_.__rep_)
    {
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR))
      {
        sub_100423F90();
        if (a2)
        {
LABEL_8:
          sub_100004950(__p, "Deep sleep exit timeout");
          sub_100227ED4(a1, 0, (std::string::size_type)__p);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
          AnalyticsSendEventLazy();
        }
      }
      else if (a2)
      {
        goto LABEL_8;
      }
      char v8 = 0;
      return v8 & 1;
    }
  }
  if (v7 != 1)
  {
    if (v7)
    {
      if (v7 != 2) {
        return v8 & 1;
      }
    }
    else
    {
      AnalyticsSendEventLazy();
    }
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100423FC4();
    }
    uint64_t v11 = (_Unwind_Exception *)abort_report_np();
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    _Unwind_Resume(v11);
  }
  uint64_t v9 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PRRose: deep sleep exit completed successfully", (uint8_t *)__p, 2u);
  }
  if (a2)
  {
    atomic_store(4u, (unsigned int *)(a1 + 1240));
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    if (*(_DWORD *)(a1 + 1544) == 1)
    {
      sub_100233AA8(a1);
    }
    else
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
      if (*(_DWORD *)(a1 + 1544) == 2) {
        sub_1002260D8(a1);
      }
    }
    AnalyticsSendEventLazy();
  }
  char v8 = 1;
  return v8 & 1;
}

uint64_t sub_1002333BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 0;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_1002333F8(uint64_t a1, int a2)
{
  uint64_t v4 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = atomic_load((unsigned int *)(a1 + 1240));
    unsigned int v6 = v5 - 1;
    if (v6 > 0xA) {
      int v7 = "UnknownToHost";
    }
    else {
      int v7 = off_10085B4E0[v6];
    }
    if ((a2 - 1) > 2) {
      char v8 = "DoNothing";
    }
    else {
      char v8 = off_10085B5D8[a2 - 1];
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v25 = 2080;
    uint64_t v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: errorHandlingRoutine. Current state: [%s], Next Step: [%s]", buf, 0x16u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  switch(a2)
  {
    case 1:
      sub_10022C2D8(a1);
      atomic_store(1u, (unsigned int *)(a1 + 1240));
      sub_100004950(v19, "");
      sub_1002258D8(a1, 1, v19);
      if ((v20 & 0x80000000) == 0) {
        return;
      }
      uint64_t v18 = (void *)v19[0];
      goto LABEL_25;
    case 3:
      atomic_store(7u, (unsigned int *)(a1 + 1240));
      sub_100004950(buf, "PRRose::errorHandlingRoutine: current state: ErrorHandling, next step: PromoteToFatal");
      char v17 = sub_100227ED4(a1, 0, (std::string::size_type)buf);
      if (v27 < 0) {
        operator delete(*(void **)buf);
      }
      if ((v17 & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_100424044();
        }
        abort_report_np();
LABEL_30:
        __break(1u);
      }
      break;
    case 2:
      atomic_store(1u, (unsigned int *)(a1 + 1240));
      if (sub_1003E9C5C(a1 + 40, v9, v10, v11, v12, v13, v14, v15))
      {
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        _OWORD v21[2] = sub_1002359FC;
        void v21[3] = &unk_1008466D8;
        v21[4] = a1;
        int v16 = objc_retainBlock(v21);
        if (sub_1002357C8(a1, v16, 1u))
        {

          return;
        }
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_100424078();
        }
        abort_report_np();
        goto LABEL_30;
      }
      sub_100004950(__p, "");
      sub_1002258D8(a1, 1, __p);
      if (v23 < 0)
      {
        uint64_t v18 = __p[0];
LABEL_25:
        operator delete(v18);
      }
      break;
  }
}

void sub_1002336B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100233710(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 0;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_10023374C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

NSDictionary *__cdecl sub_10023378C(id a1)
{
  CFStringRef v4 = @"HasCalDataBeenPushed";
  uint64_t v1 = +[NSNumber numberWithBool:0];
  unsigned int v5 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return (NSDictionary *)v2;
}

void sub_10023383C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100233854(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  if (*((char *)a2 + 31) < 0)
  {
    sub_100002DE4((unsigned char *)(a1 + 8), *((void **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  unsigned int v6 = (unsigned char *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    sub_100002DE4(v6, *((void **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 10);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(_OWORD *)unsigned int v6 = v7;
  }
  return a1;
}

void sub_1002338F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100233914(unint64_t *a1, unsigned char *a2)
{
  long long v5 = (unsigned char *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    char v8 = &v5[-*a1];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      sub_1000267C4();
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)(v12 + v11);
    v8[v12] = *a2;
    uint64_t v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      uint64_t v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      long long v5 = (unsigned char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    unsigned char *v5 = *a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

uint64_t sub_100233A0C(uint64_t a1)
{
  unint64_t v7 = (void **)(a1 + 328);
  sub_10000B09C(&v7);
  if (*(unsigned char *)(a1 + 312))
  {
    uint64_t v2 = *(void **)(a1 + 288);
    if (v2)
    {
      *(void *)(a1 + 296) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 248))
  {
    char v3 = *(void **)(a1 + 224);
    if (v3)
    {
      *(void *)(a1 + 232) = v3;
      operator delete(v3);
    }
  }
  if (*(unsigned char *)(a1 + 184))
  {
    unint64_t v4 = *(void **)(a1 + 160);
    if (v4)
    {
      *(void *)(a1 + 168) = v4;
      operator delete(v4);
    }
  }
  if (*(unsigned char *)(a1 + 120))
  {
    long long v5 = *(void **)(a1 + 96);
    if (v5)
    {
      *(void *)(a1 + 104) = v5;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_100233AA8(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: notifyPowerOnReadyAndClearRequest", v3, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  std::mutex::lock((std::mutex *)(a1 + 1600));
  *(unsigned char *)(a1 + 1664) = 1;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 1552));
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  *(_DWORD *)(a1 + 1544) = 0;
  std::mutex::unlock((std::mutex *)(a1 + 1600));
}

void sub_100233B48(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100233B5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 2;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_100233B9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 1;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_100233BDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_100233C1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 1288);
  char v3 = 4;
  (*(void (**)(void))(v2 + 16))();
  sub_1002261EC(v1);
}

void sub_100233C6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 8));
  if (*(_DWORD *)(v2 + 1544) == 2)
  {
    char v3 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PRRose Executing pending power off", buf, 2u);
    }
    if (*(char *)(a1 + 63) < 0)
    {
      sub_100002DE4(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(a1 + 40);
      uint64_t v5 = *(void *)(a1 + 56);
    }
    sub_1002258D8(v2, 9, __p);
    if (SHIBYTE(v5) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100233D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100233D5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 5;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_100233D9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_100233DDC(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: requestDeepSleepEntry", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  char v12 = sub_1001952D8(2);
  *(void *)long long buf = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_10003AD14(buf, &v12, (uint64_t)&v13, 1uLL);
  long long __p = 0;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  BOOL v3 = sub_10039BDF8(a1 + 1248, 0x2Du, (uint64_t)buf, (unint64_t *)&__p);
  unint64_t v4 = qword_1008A5780;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: sent deep sleep entry request to RoseSupervisor. Going to DeepSleep state.", v5, 2u);
    }
    atomic_store(0xBu, (unsigned int *)(a1 + 1240));
    *(std::chrono::steady_clock::time_point *)(a1 + 1504) = std::chrono::steady_clock::now();
    dispatch_async(*(dispatch_queue_t *)(a1 + 16), &stru_10085AD78);
    if (__p)
    {
      unint64_t v7 = __p;
      operator delete(__p);
    }
    if (*(void *)buf)
    {
      unint64_t v10 = *(void **)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004240AC();
    }
    abort_report_np();
    __break(1u);
  }
}

void sub_100233F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100233F74(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_100233FB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 5;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_100233FF4(uint64_t a1)
{
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: LPEMEnableInternal", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 1240));
  if (v3 == 5)
  {
    unint64_t v4 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose: LPEM already enabled", buf, 2u);
    }
  }
  else
  {
    sub_1002CE2B4(*(void *)(a1 + 1296));
    int v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)long long buf = 0u;
    sub_100194D2C((unsigned __int8 **)v14, (uint64_t)buf);
    uint64_t v11 = 0;
    char v12 = 0;
    uint64_t v13 = 0;
    sub_10003AD14(&v11, buf, (uint64_t)&v19, 0x34uLL);
    long long __p = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    BOOL v5 = sub_10039BDF8(a1 + 1248, 0x34u, (uint64_t)&v11, (unint64_t *)&__p);
    uint64_t v6 = qword_1008A5780;
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PRRose: sent LPEM Enable command to Rose. Going to LPEM state.", v7, 2u);
      }
      atomic_store(5u, (unsigned int *)(a1 + 1240));
      if (__p)
      {
        unint64_t v9 = __p;
        operator delete(__p);
      }
      if (v11)
      {
        char v12 = v11;
        operator delete(v11);
      }
      if (v14[0])
      {
        v14[1] = v14[0];
        operator delete(v14[0]);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
        sub_1004240E0();
      }
      abort_report_np();
      __break(1u);
    }
  }
}

void sub_1002341F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100234240(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_100234280(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 5;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_1002342C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = atomic_load((unsigned int *)(v1 + 1240));
  if (v2 == 6)
  {
    sub_100054E28((uint64_t)v15);
    unsigned int v4 = *(_DWORD *)(a1 + 64) - 1;
    if (v4 > 0xA) {
      BOOL v5 = "HostStartup";
    }
    else {
      BOOL v5 = off_10085B488[v4];
    }
    size_t v6 = strlen(v5);
    sub_100056628(v16, (uint64_t)v5, v6);
    if (*(char *)(a1 + 63) < 0)
    {
      if (!*(void *)(a1 + 48))
      {
LABEL_18:
        std::stringbuf::str();
        char v11 = sub_100227ED4(v1, 0, (std::string::size_type)&__p);
        if (v14 < 0) {
          operator delete(__p);
        }
        if (v11)
        {
          *(unsigned char *)(v1 + 1528) = 1;
          *(void *)((char *)v15
          v16[0] = v12;
          if (v17 < 0) {
            operator delete((void *)v16[9]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          std::ios::~ios();
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
            sub_100424114();
          }
          abort_report_np();
          __break(1u);
        }
        return;
      }
    }
    else if (!*(unsigned char *)(a1 + 63))
    {
      goto LABEL_18;
    }
    unint64_t v7 = sub_100056628(v16, (uint64_t)": ", 2);
    int v8 = *(char *)(a1 + 63);
    if (v8 >= 0) {
      uint64_t v9 = a1 + 40;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 40);
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 63);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 48);
    }
    sub_100056628(v7, v9, v10);
    goto LABEL_18;
  }
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_100424148();
  }
}

void sub_10023454C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100055100((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10023457C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 6;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

uint64_t sub_1002345BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 1288);
  char v3 = 5;
  return (*(uint64_t (**)(void))(v1 + 16))();
}

void sub_1002345FC(uint64_t a1)
{
  unsigned int v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: powerOffInternal", buf, 2u);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 1240));
  if (v3 == 10)
  {
    unsigned int v4 = qword_1008A5780;
    if (!os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    BOOL v5 = "PRRose: Already Powered Off";
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 1544) = 2;
  unsigned int v6 = atomic_load((unsigned int *)(a1 + 1240));
  if (v6 == 4 || (unsigned int v7 = atomic_load((unsigned int *)(a1 + 1240)), v7 == 8))
  {
    sub_100004950(__p, "");
    sub_1002258D8(a1, 9, __p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    unsigned int v4 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      BOOL v5 = "PRRose: Delay Powering off";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, buf, 2u);
    }
  }
}

void sub_100234748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100234764(uint64_t a1)
{
  v9[0] = @"CrashLogReason";
  id v2 = objc_alloc((Class)NSString);
  unsigned int v3 = *(uint64_t **)(a1 + 32);
  if (*((char *)v3 + 23) < 0) {
    unsigned int v3 = (uint64_t *)*v3;
  }
  id v4 = [v2 initWithCString:v3 encoding:4];
  v10[0] = v4;
  v9[1] = @"IsFatal";
  BOOL v5 = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 32) + 28)];
  v10[1] = v5;
  v9[2] = @"Core";
  unsigned int v6 = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 32) + 29)];
  void v10[2] = v6;
  unsigned int v7 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:3];

  return v7;
}

void sub_10023488C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002348BC(uint64_t a1)
{
  v9[0] = @"CrashStringSectionFound";
  uint64_t v2 = a1 + 32;
  unsigned int v3 = +[NSNumber numberWithInt:**(unsigned __int8 **)(a1 + 32)];
  v10[0] = v3;
  v9[1] = @"CrashStringSectionVersionFound";
  id v4 = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)v2 + 1)];
  v10[1] = v4;
  v9[2] = @"IsFatal";
  BOOL v5 = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 32) + 8)];
  void v10[2] = v5;
  void v9[3] = @"Core";
  unsigned int v6 = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 32) + 9)];
  void v10[3] = v6;
  unsigned int v7 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:4];

  return v7;
}

void sub_100234A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100234A48(uint64_t a1)
{
  CFStringRef v4 = @"Core";
  uint64_t v1 = +[NSNumber numberWithInt:**(unsigned __int8 **)(a1 + 32)];
  BOOL v5 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

void sub_100234B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100234B18(uint64_t a1)
{
}

void sub_100234B28(uint64_t a1, int a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  CFStringRef v4 = qword_1008A5780;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    unsigned int v6 = atomic_load((unsigned int *)(a1 + 1240));
    unsigned int v7 = v6 - 1;
    if (v7 > 0xA) {
      int v8 = "UnknownToHost";
    }
    else {
      int v8 = off_10085B4E0[v7];
    }
    *(_DWORD *)long long buf = 136315394;
    int v36 = v8;
    __int16 v37 = 2080;
    int v38 = sub_100235110(v5, a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PRRose::debugEventHandler received DebugManagerEvent while in state: %s, event: %s", buf, 0x16u);
  }
  unsigned int v9 = atomic_load((unsigned int *)(a1 + 1240));
  if (v9 == 10)
  {
    uint64_t v10 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PRRose:Ignore event, Nothing to do", buf, 2u);
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_1004241B0();
        }
        unsigned int v24 = atomic_load((unsigned int *)(a1 + 1240));
        if (v24 == 7) {
          goto LABEL_34;
        }
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472;
        v34[2] = sub_100235138;
        v34[3] = &unk_1008466D8;
        v34[4] = a1;
        __int16 v25 = objc_retainBlock(v34);
        if (sub_1002351AC(a1, v25, 0xAu))
        {

LABEL_34:
          sub_100004950(&v32, "");
          sub_1002258D8(a1, 6, &v32);
          if (v33 < 0)
          {
            uint64_t v26 = (void *)v32;
            goto LABEL_53;
          }
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
            sub_10042417C();
          }
          abort_report_np();
          __break(1u);
        }
        return;
      case 1:
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_10042429C();
        }
        AnalyticsSendEventLazy();
        sub_100235420(a1);
        unsigned int v27 = atomic_load((unsigned int *)(a1 + 1240));
        if (v27 == 7) {
          goto LABEL_39;
        }
        uint64_t v12 = qword_1008A5780;
        BOOL v29 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
        int v11 = 0;
        if (!v29) {
          goto LABEL_12;
        }
        *(_WORD *)long long buf = 0;
        char v14 = "PRRose: DebugManagerEvent::LogCollectionFatalFailed is ignored if the state is not ErrorHandling";
        goto LABEL_50;
      case 2:
        char v15 = qword_1008A5780;
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PRRose: DebugManagerEvent::LogCollectionFatalSucceeded", buf, 2u);
        }
        sub_100235420(a1);
        unsigned int v16 = atomic_load((unsigned int *)(a1 + 1240));
        if (v16 == 7)
        {
          if (*(unsigned char *)(a1 + 1528))
          {
            *(unsigned char *)(a1 + 1528) = 0;
LABEL_39:
            int v11 = 1;
          }
          else
          {
            int v11 = 2;
          }
        }
        else
        {
          uint64_t v12 = qword_1008A5780;
          BOOL v28 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
          int v11 = 0;
          if (v28)
          {
            *(_WORD *)long long buf = 0;
            char v14 = "PRRose: DebugManagerEvent::LogCollectionFatalSucceeded is ignored if the state is not ErrorHandling";
LABEL_50:
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
LABEL_11:
            int v11 = 0;
          }
        }
LABEL_12:
        sub_1002333F8(a1, v11);
        break;
      case 3:
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_1004242D0();
        }
        AnalyticsSendEventLazy();
        int v11 = 3;
        goto LABEL_12;
      case 4:
        uint64_t v12 = qword_1008A5780;
        BOOL v13 = os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT);
        int v11 = 0;
        if (!v13) {
          goto LABEL_12;
        }
        *(_WORD *)long long buf = 0;
        char v14 = "PRRose: DebugManagerEvent::LogCollectionNonFatalSucceeded";
        goto LABEL_50;
      case 5:
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_100424304();
        }
        goto LABEL_10;
      case 6:
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_100424338();
        }
        goto LABEL_10;
      case 7:
        if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
          sub_100424218((unsigned int *)(a1 + 1240));
        }
        if (sub_1003E9C5C(a1 + 40, v17, v18, v19, v20, v21, v22, v23))
        {
          if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
            sub_1004241E4();
          }
        }
        else
        {
          sub_100004950(__p, "");
          sub_1002258D8(a1, 7, (long long *)__p);
          if (v31 < 0)
          {
            uint64_t v26 = __p[0];
LABEL_53:
            operator delete(v26);
          }
        }
        return;
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
LABEL_10:
        AnalyticsSendEventLazy();
        goto LABEL_11;
      default:
        goto LABEL_11;
    }
  }
}

void sub_100235078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_100235110(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0x13) {
    return "Dead";
  }
  else {
    return off_10085B538[a2 - 1];
  }
}

void sub_100235138(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: Executing LogCollectionCompleted Timeout Callback.", v3, 2u);
  }
  sub_1002333F8(v1, 1);
}

uint64_t sub_1002351AC(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  sub_100235420(a1);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_10042436C();
    }
    goto LABEL_10;
  }
  dispatch_source_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 8));
  unsigned int v7 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v6;

  int v8 = *(NSObject **)(a1 + 32);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004243A0();
    }
LABEL_10:
    uint64_t v12 = 0;
    goto LABEL_11;
  }
  dispatch_time_t v9 = dispatch_time(0, 1000000000 * a3);
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v10 = *(NSObject **)(a1 + 32);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1002359B8;
  handler[3] = &unk_100859538;
  uint64_t v17 = a1;
  id v16 = v5;
  dispatch_source_set_event_handler(v10, handler);
  int v11 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PRRose: Starting LogCollectionCompleted timer.", v14, 2u);
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));

  uint64_t v12 = 1;
LABEL_11:

  return v12;
}

NSDictionary *__cdecl sub_100235358(id a1)
{
  CFStringRef v4 = @"IsFatal";
  uint64_t v1 = +[NSNumber numberWithInt:1];
  id v5 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return (NSDictionary *)v2;
}

void sub_100235408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100235420(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = qword_1008A5780;
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFStringRef v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: Cancelling LogCollectionCompleted timer", v4, 2u);
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
    unsigned int v3 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
  }
}

NSDictionary *__cdecl sub_1002354A4(id a1)
{
  CFStringRef v4 = @"IsFatal";
  uint64_t v1 = +[NSNumber numberWithInt:0];
  id v5 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return (NSDictionary *)v2;
}

void sub_100235554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_10023556C(id a1)
{
  CFStringRef v4 = @"InterfaceError";
  uint64_t v1 = +[NSNumber numberWithInt:1];
  id v5 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return (NSDictionary *)v2;
}

void sub_10023561C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_100235634(id a1)
{
  CFStringRef v4 = @"FilesystemError";
  uint64_t v1 = +[NSNumber numberWithInt:1];
  id v5 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return (NSDictionary *)v2;
}

void sub_1002356E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002356FC(uint64_t a1)
{
  CFStringRef v4 = @"ErrorCode";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  id v5 = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

void sub_1002357B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002357C8(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  sub_1002243E4(a1);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_10042436C();
    }
    goto LABEL_10;
  }
  dispatch_source_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 8));
  unsigned int v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v6;

  int v8 = *(NSObject **)(a1 + 24);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_1004243D4();
    }
LABEL_10:
    uint64_t v12 = 0;
    goto LABEL_11;
  }
  dispatch_time_t v9 = dispatch_time(0, 1000000000 * a3);
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  uint64_t v10 = *(NSObject **)(a1 + 24);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100235974;
  handler[3] = &unk_100859538;
  uint64_t v17 = a1;
  id v16 = v5;
  dispatch_source_set_event_handler(v10, handler);
  int v11 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PRRose: Starting SecureROM timer.", v14, 2u);
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 24));

  uint64_t v12 = 1;
LABEL_11:

  return v12;
}

uint64_t sub_100235974(uint64_t a1)
{
  sub_1002243E4(*(void *)(a1 + 40));
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v2();
}

uint64_t sub_1002359B8(uint64_t a1)
{
  sub_100235420(*(void *)(a1 + 40));
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v2();
}

uint64_t sub_1002359FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_1008A5780;
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFStringRef v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PRRose: Executing SecureROM Timeout Callback.", v4, 2u);
  }
  return sub_1002333F8(v1, 1);
}

uint64_t sub_100235A70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100235A80(uint64_t a1)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1600);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 1600));
  unsigned int v2 = atomic_load((unsigned int *)(a1 + 1240));
  if (v2 == 9)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
      sub_100424408();
    }
    goto LABEL_4;
  }
  *(unsigned char *)(a1 + 1664) = 0;
  CFStringRef v4 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100235C98;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_async(v4, block);
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 30000000000;
  do
  {
    if (*(unsigned char *)(a1 + 1664)) {
      goto LABEL_23;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v5.__d_.__rep_) {
      break;
    }
    v6.__d_.__rep_ = v5.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v6.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v7.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v7.__d_.__rep_)
      {
        if (v7.__d_.__rep_ < 1)
        {
          if ((unint64_t)v7.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 0x8000000000000000;
            goto LABEL_19;
          }
        }
        else if ((unint64_t)v7.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_17;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 1000 * v7.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 0;
      }
LABEL_17:
      if (v8 > (v6.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v9.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_20:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 1552), &__lk, v9);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_19:
      v9.__d_.__rep_ = v8 + v6.__d_.__rep_;
      goto LABEL_20;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v5.__d_.__rep_);
  if (*(unsigned char *)(a1 + 1664))
  {
LABEL_23:
    dispatch_async(*(dispatch_queue_t *)(a1 + 16), &stru_10085AD38);
    uint64_t v3 = 1;
    goto LABEL_24;
  }
  if (os_log_type_enabled((os_log_t)qword_1008A5780, OS_LOG_TYPE_ERROR)) {
    sub_10042443C();
  }
LABEL_4:
  uint64_t v3 = 0;
LABEL_24:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  return v3;
}

void sub_100235C98(uint64_t a1)
{
}

void sub_100235CA0(id a1)
{
}

void sub_100235CA8(uint64_t a1)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  unsigned int v2 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100235D2C;
  block[3] = &unk_1008466D8;
  void block[4] = a1;
  dispatch_async(v2, block);
}

void sub_100235D2C(uint64_t a1)
{
}

void sub_100235D34(id a1)
{
}

void sub_100235D3C(id a1)
{
}

NSDictionary *__cdecl sub_100235D44(id a1)
{
  return (NSDictionary *)&off_100878B78;
}

NSDictionary *__cdecl sub_100235D50(id a1)
{
  v4[0] = @"NumberOfFailures";
  v4[1] = @"Reason";
  v5[0] = &off_100878868;
  uint64_t v1 = +[NSNumber numberWithInt:1];
  v5[1] = v1;
  unsigned int v2 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return (NSDictionary *)v2;
}

void sub_100235E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_100235E30(id a1)
{
  v4[0] = @"NumberOfFailures";
  v4[1] = @"Reason";
  v5[0] = &off_100878868;
  uint64_t v1 = +[NSNumber numberWithInt:2];
  v5[1] = v1;
  unsigned int v2 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return (NSDictionary *)v2;
}

void sub_100235EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *sub_100235F10(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[96] = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    sub_100235F68((uint64_t)a1, a2);
    a1[96] = 1;
  }
  return a1;
}

void sub_100235F54(_Unwind_Exception *a1)
{
  sub_1002361B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100235F68(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_100236044((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_1002360C0((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_10023613C((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  uint64_t v4 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 87) = *(_DWORD *)(a2 + 87);
  *(void *)(a1 + 80) = v4;
  return a1;
}

void sub_100236010(_Unwind_Exception *exception_object)
{
  std::chrono::steady_clock::time_point v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  std::chrono::steady_clock::time_point v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100236044(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::chrono::steady_clock::time_point v6 = result;
    CFDataRef result = sub_1001503E8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      CFDataRef result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1002360A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002360C0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::chrono::steady_clock::time_point v6 = result;
    CFDataRef result = sub_1001503E8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      CFDataRef result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100236120(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10023613C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::chrono::steady_clock::time_point v6 = result;
    CFDataRef result = sub_1001503E8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      CFDataRef result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10023619C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002361B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    unsigned int v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(void *)(a1 + 64) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      *(void *)(a1 + 40) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a1 + 8);
    if (v4)
    {
      *(void *)(a1 + 16) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_100236214(uint64_t a1, char a2, char a3)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  char __src = a3;
  sub_1001BE070((void *)(a1 + 8), &__src, (char *)&v6, 1uLL);
  return a1;
}

void sub_100236274(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100236290(void *a1, char a2, __int16 **a3)
{
  *(unsigned char *)a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_1003A76A8(a1, a3);
  return a1;
}

void sub_1002362CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  std::chrono::steady_clock::time_point v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002362EC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  unint64_t v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0) {
    unint64_t v5 = *((void *)a2 + 1);
  }
  if (v5 >= 0x20)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "string length exceeds maximum");
  }
  return __dst;
}

void sub_1002363B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002363E4(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  long long v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}