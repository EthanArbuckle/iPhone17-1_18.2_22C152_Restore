void sub_100392A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_100392B60((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100392AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  v10 = operator new(0x50uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)v10 = 0;
  *((void *)v10 + 1) = a2;
  *((void *)v10 + 2) = *a3;
  result = sub_10031FE98((char *)v10 + 24, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_100392B44(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_100392B60(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100392B60(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((unsigned char *)__p + 72) && *((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_100392BC8(uint64_t a1)
{
  return a1;
}

void sub_100392BF4(uint64_t a1)
{
  operator delete();
}

uint64_t sub_100392C40()
{
  return 0;
}

id sub_100392C48(uint64_t a1, void *a2)
{
  *a2 = off_100862DE8;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100392C90(uint64_t a1)
{
  v1 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
}

void sub_100392CA0(uint64_t a1, unint64_t *a2, uint64_t *a3, long long *a4, long long *a5, _OWORD *a6, void *a7, unsigned __int8 *a8, __n128 a9)
{
}

uint64_t sub_100392CA8(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100862E48)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100392CE8()
{
  return &off_100862E48;
}

void sub_100392CF4(uint64_t *a1, unint64_t *a2, uint64_t *a3, long long *a4, long long *a5, _OWORD *a6, void *a7, unsigned __int8 *a8, __n128 a9)
{
  uint64_t v9 = *a1;
  a9.n128_u64[0] = *a2;
  uint64_t v10 = *a3;
  LOBYTE(v23) = 0;
  char v27 = 0;
  if (*((unsigned char *)a4 + 48))
  {
    long long v23 = *a4;
    uint64_t v24 = *((void *)a4 + 2);
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    *(void *)a4 = 0;
    long long v25 = *(long long *)((char *)a4 + 24);
    __int16 v26 = *((_WORD *)a4 + 20);
    char v27 = 1;
  }
  LOBYTE(v18) = 0;
  char v22 = 0;
  if (*((unsigned char *)a5 + 48))
  {
    long long v18 = *a5;
    uint64_t v19 = *((void *)a5 + 2);
    *((void *)a5 + 1) = 0;
    *((void *)a5 + 2) = 0;
    *(void *)a5 = 0;
    long long v20 = *(long long *)((char *)a5 + 24);
    __int16 v21 = *((_WORD *)a5 + 20);
    char v22 = 1;
  }
  long long v11 = a6[3];
  v17[2] = a6[2];
  v17[3] = v11;
  long long v12 = a6[7];
  v17[6] = a6[6];
  v17[7] = v12;
  long long v13 = a6[5];
  v17[4] = a6[4];
  v17[5] = v13;
  long long v14 = a6[11];
  v17[10] = a6[10];
  v17[11] = v14;
  long long v15 = a6[9];
  v17[8] = a6[8];
  v17[9] = v15;
  long long v16 = a6[1];
  v17[0] = *a6;
  v17[1] = v16;
  (*(void (**)(uint64_t, uint64_t, long long *, long long *, _OWORD *, void, void, __n128))(v9 + 16))(v9, v10, &v23, &v18, v17, *a7, *a8, a9);
  if (v22 && SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (v27)
  {
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)v23);
    }
  }
}

void sub_100392E38(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v2 - 112))
  {
    if (*(char *)(v2 - 137) < 0) {
      operator delete(*(void **)(v2 - 160));
    }
  }
  sub_100436F3C(v1, v2 - 96);
  _Unwind_Resume(a1);
}

void sub_100392E68()
{
  v8[0] = xmmword_1004C4554;
  v8[1] = unk_1004C4564;
  sub_1001A003C((uint64_t)&unk_1008AB428, (int *)v8, 4);
  xmmword_1008AB440 = xmmword_1004B7660;
  *(_OWORD *)algn_1008AB450 = xmmword_1004B7670;
  qword_1008AB468 = 0;
  unk_1008AB470 = 0;
  qword_1008AB460 = 0x3FD999999999999ALL;
  unk_1008AB478 = xmmword_1004B7680;
  dword_1008AB488 = 5;
  qword_1008AB490 = 0x4000000000000000;
  dword_1008AB498 = 5;
  byte_1008AB4A0 = 0;
  *(void *)&algn_1008AB4A1[3] = 0x30000000ALL;
  xmmword_1008AB4B0 = xmmword_1004B7690;
  unk_1008AB4C0 = xmmword_1004B76A0;
  xmmword_1008AB4D0 = xmmword_1004B76B0;
  qword_1008AB4E0 = 0x3FE3333333333333;
  dword_1008AB4E8 = 3;
  xmmword_1008AB4F0 = xmmword_1004B76C0;
  unk_1008AB500 = xmmword_1004B76A0;
  xmmword_1008AB510 = xmmword_1004B7690;
  qword_1008AB520 = 0x3FE3333333333333;
  byte_1008AB528 = 0;
  xmmword_1008AB530 = xmmword_1004B76D0;
  unk_1008AB540 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v6 = _Q0;
  xmmword_1008AB550 = _Q0;
  qword_1008AB560 = 0xBFD3333333333333;
  xmmword_1008AB568 = xmmword_1004B76F0;
  qword_1008AB578 = 0x3E99999A40000000;
  xmmword_1008AB580 = xmmword_1004B7670;
  qword_1008AB598 = 0;
  unk_1008AB5A0 = 0;
  qword_1008AB590 = 0x3FD999999999999ALL;
  xmmword_1008AB5A8 = xmmword_1004B7680;
  dword_1008AB5B8 = 5;
  qword_1008AB5C0 = 0x4000000000000000;
  dword_1008AB5C8 = 4;
  qword_1008AB5D0 = 0x300000008;
  qword_1008AB5D8 = 0xC04E800000000000;
  unint64_t v7 = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)&unk_1008AB5E0, (double *)&v7, 1);
  xmmword_1008AB5F8 = xmmword_1004B7700;
  qword_1008AB608 = 0x4024000000000000;
  dword_1008AB610 = 45;
  byte_1008AB618 = 0;
  byte_1008AB630 = 0;
  qword_1008AB638 = 0;
  byte_1008AB640 = 0;
  dword_1008AB644 = 1;
  byte_1008AB648 = 1;
  xmmword_1008AB650 = xmmword_1004B7710;
  unk_1008AB660 = xmmword_1004B7720;
  xmmword_1008AB670 = v6;
  qword_1008AB680 = 0xC059000000000000;
  xmmword_1008AB688 = xmmword_1004B7730;
  qword_1008AB698 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008AB6A0 = xmmword_1004B7670;
  qword_1008AB6B0 = 0x3FD999999999999ALL;
  qword_1008AB6C0 = 0;
  qword_1008AB6B8 = 0;
  xmmword_1008AB6C8 = xmmword_1004B7680;
  dword_1008AB6D8 = 5;
  qword_1008AB6E0 = 0x4000000000000000;
  dword_1008AB6E8 = 10;
  qword_1008AB6F0 = 0x4034000000000000;
  dword_1008AB6F8 = 3;
  xmmword_1008AB700 = xmmword_1004B7740;
  __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008AB428, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_72, &off_10089F640, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_73, &off_10089F648, (void *)&_mh_execute_header);
}

void sub_100393178(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

double sub_100393198(double *a1)
{
  double v1 = (*a1 + 1.57079633) * 6378137.0;
  double v2 = round(v1 * 0.0009765625) * 1024.0;
  double v3 = v1 - v2;
  cos(v2 / 6378137.0 + -1.57079633);
  return v3;
}

double sub_100393244(double *a1, double *a2)
{
  double v4 = round(((*a1 + 1.57079633) * 6378137.0 - *a2) * 0.0009765625) * 1024.0;
  long double v5 = (*a2 + v4) / 6378137.0 + -1.57079633 + 1.57079633;
  double v6 = fmod(v5, 3.14159265);
  if (v5 >= 0.0) {
    double v7 = 0.0;
  }
  else {
    double v7 = 3.14159265;
  }
  double v8 = v6 + v7 + -1.57079633;
  long double v9 = cos(v4 / 6378137.0 + -1.57079633);
  fmod((a2[1] + round(((a1[1] + 3.14159265) * (v9 * 6378137.0) - a2[1]) * 0.0009765625) * 1024.0) / (v9 * 6378137.0)+ -3.14159265+ 3.14159265, 6.28318531);
  return v8;
}

uint64_t sub_100393378(double a1)
{
  int v1 = llround(log(a1 * 0.5) * 15.0 / 4.60517019);
  if (v1 >= 15) {
    int v1 = 15;
  }
  return v1 & ~(v1 >> 31);
}

long double sub_1003933C0(unsigned int a1)
{
  long double v1 = exp((double)a1 / 15.0 * 4.60517019);
  long double result = v1 + v1;
  if (result < 2.0) {
    long double result = 2.0;
  }
  if (result > 200.0) {
    return 200.0;
  }
  return result;
}

void sub_10039356C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100393584(uint64_t a1, void *a2)
{
  id v16 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  double v4 = (id *)(a1 + 264);
  objc_storeStrong((id *)(a1 + 264), a2);
  if (*(void *)(a1 + 264))
  {
    id v5 = [*(id *)(a1 + 304) mutableCopy];
    uint64_t v6 = [*v4 horizontalDistanceNumber];
    double v7 = *(void **)(a1 + 272);
    *(void *)(a1 + 272) = v6;

    uint64_t v8 = [*(id *)(a1 + 264) horizontalAngleNumber];
    long double v9 = *(void **)(a1 + 280);
    *(void *)(a1 + 280) = v8;

    uint64_t v10 = [*(id *)(a1 + 264) horizontalAngleAccuracyNumber];
    long long v11 = *(void **)(a1 + 288);
    *(void *)(a1 + 288) = v10;

    uint64_t v12 = *(void *)(a1 + 272);
    if (v12) {
      [v5 setObject:v12 forKey:@"CMA_DISTANCE"];
    }
    long long v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*v4 revokeReason]);
    [v5 setObject:v13 forKey:@"REVOKE_REASON"];

    id v14 = [v5 copy];
    long long v15 = *(void **)(a1 + 304);
    *(void *)(a1 + 304) = v14;
  }
}

void sub_1003936B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003937EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100393804(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  id v4 = [*(id *)(a1 + 304) mutableCopy];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v10 = [v5 objectForKeyedSubscript:v9];
        [v4 setObject:v10 forKey:v9];
      }
      id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }

  id v11 = [v4 copy];
  uint64_t v12 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v11;
}

void sub_10039395C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003939A4(uint64_t a1, void *a2)
{
  id v4 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)a1 = off_100862E68;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  id v5 = [[CMAPrecisionFindingManagerAdapter alloc] initWithFindingManager:a1];
  id v6 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = v5;

  if (v4)
  {
    objc_storeStrong((id *)(a1 + 240), a2);
    id v7 = [objc_alloc((Class)CMAPrecisionFindingManager) initWithDelegate:*(void *)(a1 + 256) dispatchQueue:*(void *)(a1 + 240)];
    uint64_t v8 = *(void **)(a1 + 248);
    *(void *)(a1 + 248) = v7;

    [*(id *)(a1 + 248) startDeviceFindingUpdates];
    operator new();
  }
  __assert_rtn("DeviceFinderAlgorithms", "DeviceFinderAlgorithms.mm", 83, "externalQueue");
}

void sub_100393B64()
{
}

void sub_100393BF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 192) = 0;
  *(unsigned char *)(a2 + 200) = 0;
  *(unsigned char *)(a2 + 208) = 0;
  *(unsigned char *)(a2 + 216) = 0;
  *(unsigned char *)(a2 + 224) = 0;
  *(_DWORD *)(a2 + 232) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(unsigned char *)(a2 + 248) = 0;
  *(unsigned char *)(a2 + 256) = 0;
  *(unsigned char *)(a2 + 272) = 0;
  *(unsigned char *)(a2 + 288) = 0;
  *(unsigned char *)(a2 + 304) = 0;
  *(unsigned char *)(a2 + 320) = 0;
  *(unsigned char *)(a2 + 328) = 0;
  *(unsigned char *)(a2 + 336) = 0;
  *(unsigned char *)(a2 + 344) = 0;
  *(_WORD *)(a2 + 352) = 0;
  *(unsigned char *)(a2 + 356) = 0;
  *(unsigned char *)(a2 + 360) = 0;
  *(unsigned char *)(a2 + 364) = 0;
  *(unsigned char *)(a2 + 368) = 0;
  *(unsigned char *)(a2 + 372) = 0;
  *(unsigned char *)(a2 + 376) = 0;
  *(_WORD *)(a2 + 380) = 0;
  if (*(unsigned char *)(a1 + 232)) {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = *(void **)(a1 + 272);
  if (!v6 || ([v6 doubleValue], !*(void *)(a1 + 264)))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v10 = *(void *)(a1 + 8);
      *(void *)(a2 + 8) = v5;
      *(void *)(a2 + 16) = v10;
      *(unsigned char *)(a2 + 56) = 0;
      *(unsigned char *)(a2 + 60) = 0;
      *(unsigned char *)(a2 + 64) = 0;
      *(unsigned char *)(a2 + 68) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 24) = 0x100800000;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(_WORD *)(a2 + 88) = 0;
      *(unsigned char *)(a2 + 160) = 0;
      *(void *)(a2 + 176) = 0;
      *(void *)(a2 + 184) = 0;
      *(void *)(a2 + 168) = 0;
      *(_OWORD *)(a2 + 121) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(unsigned char *)(a2 + 192) = 1;
      *(_DWORD *)(a2 + 364) = 0;
      *(unsigned char *)(a2 + 368) = 1;
      *(_DWORD *)(a2 + 372) = sub_100393FD0(a1);
      *(unsigned char *)(a2 + 376) = 1;
      goto LABEL_12;
    }
LABEL_16:
    sub_10000AE44();
  }
  *(_DWORD *)(a2 + 364) = 7;
  *(unsigned char *)(a2 + 368) = 1;
  if (!*(unsigned char *)(a1 + 32)) {
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  float v9 = v7;
  if (*(unsigned char *)(a2 + 192)) {
    *(unsigned char *)(a2 + 192) = 0;
  }
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v8;
  *(float *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 28) = 1;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 60) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 68) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_WORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 121) = 0u;
  *(unsigned char *)(a2 + 160) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(unsigned char *)(a2 + 192) = 1;
  *(void *)(a2 + 168) = 0;
  sub_100393E70(a1, a2, LODWORD(v9) | (unint64_t)&_mh_execute_header);
LABEL_12:
  id v14 = [*(id *)(a1 + 304) mutableCopy];
  if (!*(unsigned char *)(a2 + 192)) {
    sub_10000AE44();
  }
  id v11 = +[NSNumber numberWithDouble:*(float *)(a2 + 24)];
  [v14 setObject:v11 forKey:@"DISPLAYED_DISTANCE"];

  id v12 = [v14 copy];
  long long v13 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v12;
}

void sub_100393E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100393E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [*(id *)(a1 + 264) convergenceStatus];
  double v7 = *(void **)(a1 + 280);
  uint64_t v8 = 0;
  if (v7)
  {
    [v7 doubleValue];
    uint64_t v10 = v9;
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
    uint64_t v10 = 0;
  }
  id v12 = *(void **)(a1 + 288);
  if (v12)
  {
    [v12 doubleValue];
    uint64_t v8 = v13;
    char v14 = 1;
  }
  else
  {
    char v14 = 0;
  }
  *(_DWORD *)a2 = v6 == (id)2;
  if (v6 == (id)2)
  {
    if (*(unsigned __int8 *)(a2 + 224) == BYTE4(a3))
    {
      if (*(unsigned char *)(a2 + 224)) {
        *(double *)(a2 + 216) = *(float *)&a3;
      }
    }
    else if (*(unsigned char *)(a2 + 224))
    {
      *(unsigned char *)(a2 + 224) = 0;
    }
    else
    {
      *(double *)(a2 + 216) = *(float *)&a3;
      *(unsigned char *)(a2 + 224) = 1;
    }
    *(void *)(a2 + 200) = v10;
    *(unsigned char *)(a2 + 208) = v11;
    *(void *)(a2 + 320) = v8;
    *(unsigned char *)(a2 + 328) = v14;
    *(_DWORD *)(a2 + 364) = 6;
    *(unsigned char *)(a2 + 368) = 1;
  }
  if ([*(id *)(a1 + 264) revokeReason])
  {
    if ([*(id *)(a1 + 264) revokeReason] == (id)2) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = 1;
    }
  }
  else
  {
    unsigned int v15 = sub_100393FD0(a1);
  }
  *(_DWORD *)(a2 + 372) = v15;
  *(unsigned char *)(a2 + 376) = 1;
  id result = [*(id *)(a1 + 264) verticalState];
  if (result)
  {
    id result = [*(id *)(a1 + 264) verticalState];
    int v17 = 4 * (result == (id)2);
    if (result == (id)1) {
      int v17 = 1;
    }
    *(_DWORD *)(a2 + 232) = v17;
  }
  return result;
}

void *sub_100393FD0(uint64_t a1)
{
  id result = *(void **)(a1 + 296);
  if (result)
  {
    unsigned int v3 = [result motionState];
    if (v3 < 8 && ((0x8Bu >> v3) & 1) != 0)
    {
      return (void *)dword_1004C489C[v3];
    }
    else
    {
      id v4 = (id)qword_1008ABDE0;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100436FE8(v5, (int)[*(id *)(a1 + 296) motionState], v4);
      }

      return 0;
    }
  }
  return result;
}

void sub_100394094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003940AC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 181)) {
    BOOL v3 = *(unsigned __int8 *)(a2 + 180) > 2u;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    sub_1003941D4(a1, a2);
  }
  else
  {
    id v4 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(unsigned char *)(a2 + 181)) {
        sub_10000AE44();
      }
      int v6 = *(unsigned __int8 *)(a2 + 180);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#findalgs-devicefinder,mmsValStatus %d does not pass check, rejecting range result event", (uint8_t *)v7, 8u);
    }
  }
}

void sub_1003941BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003941D4(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  sub_1001F2E48();
  sub_10039438C(a1, a2, *(unsigned __int8 *)(a1 + 312));
  sub_1001F2E48();
  int v5 = *(unsigned __int8 *)(a1 + 232);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)a2;
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v11 = *(_OWORD *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v10;
  long long v13 = *(_OWORD *)(a2 + 144);
  long long v12 = *(_OWORD *)(a2 + 160);
  long long v14 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 224) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 176) = v14;
  if (!v5) {
    *(unsigned char *)(a1 + 232) = 1;
  }
  unsigned int v15 = objc_opt_new();
  [v15 setTimestamp:*(double *)(a2 + 8)];
  [v15 setRange:*(float *)(a2 + 16)];
  [v15 setRangeError:*(double *)(a2 + 40)];
  if (*(unsigned char *)(a2 + 72)) {
    [v15 setRssi:*(double *)(a2 + 64)];
  }
  if ((*(_DWORD *)(a2 + 176) & 0xFF0000) != 0) {
    [v15 setCycleIndex:(unsigned __int16)*(_DWORD *)(a2 + 176)];
  }
  if (*(void *)(a1 + 248))
  {
    sub_1001F2E48();
    [*(id *)(a1 + 248) updateRanging:v15];
    sub_1001F2E48();
  }
}

void sub_100394374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10039438C(uint64_t a1, uint64_t a2, int a3)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  double v6 = *(double *)(a2 + 8);
  if (*(unsigned char *)(a1 + 360) && v6 <= *(double *)(a1 + 352))
  {
    long long v10 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(unsigned char *)(a1 + 360)) {
        sub_10000AE44();
      }
      uint64_t v11 = *(void *)(a2 + 8);
      double v12 = *(float *)(a2 + 16);
      uint64_t v13 = *(void *)(a1 + 352);
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v16 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#findalgs-devicefinder,Not passing range measurement to range filter, range: %0.2f m, timestamp: %f s, range filter time: %f s", buf, 0x20u);
    }
  }
  else
  {
    double v7 = *(float *)(a2 + 16);
    *(void *)buf = *(void *)(a2 + 8);
    *(double *)&buf[8] = v7;
    *(void *)&buf[16] = 0x3FB999999999999ALL;
    LODWORD(v16) = 0;
    long long v8 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long v14 = 134218240;
      *(double *)&v14[4] = v7;
      *(_WORD *)&v14[12] = 2048;
      *(double *)&v14[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#findalgs-devicefinder,Passing range measurement to range filter, range: %0.2f m, timestamp: %f s", v14, 0x16u);
    }
    sub_10035B1E0(*(void *)(a1 + 320), (double *)buf, a3, 1, (uint64_t)v14);
    if (*(unsigned char *)(a1 + 360)) {
      *(unsigned char *)(a1 + 360) = 0;
    }
    long long v9 = *(_OWORD *)&v14[16];
    *(_OWORD *)(a1 + 328) = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 344) = v9;
    *(unsigned char *)(a1 + 360) = 1;
  }
}

void sub_10039455C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100394578(uint64_t a1, double *a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  int v5 = objc_opt_new();
  [v5 setTimestamp:*a2];
  [v5 setQuaternion:a2[8], a2[9], a2[10], a2[7]];
  [v5 setRotationRate:a2[4], a2[5], a2[6]];
  [v5 setAcceleration:a2[1], a2[2], a2[3]];
  double v6 = *(void **)(a1 + 248);
  if (v6) {
    [v6 updateDeviceMotion:v5];
  }
}

void sub_100394624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100394638(uint64_t a1, unsigned char *a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  int v5 = objc_opt_new();
  double v6 = v5;
  if (*a2) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = 2;
  }
  [v5 setCrown:v7];
  if (a2[1]) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = 1;
  }
  [v6 setWrist:v8];
  long long v9 = *(void **)(a1 + 248);
  if (v9) {
    [v9 updateWatchOrientation:v6];
  }
}

void sub_1003946DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003946F0(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  if (*(unsigned char *)(a2 + 16))
  {
    int v5 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 312) = v5 != 0;
    if (v5 == 2)
    {
      uint64_t v7 = *(void **)(a1 + 296);
      uint64_t v6 = 3;
    }
    else
    {
      uint64_t v7 = *(void **)(a1 + 296);
      if (v5 == 1) {
        uint64_t v6 = 7;
      }
      else {
        uint64_t v6 = v5 == 0;
      }
    }
    [v7 setMotionState:v6];
  }
  else
  {
    [*(id *)(a1 + 296) setMotionState:0];
    *(unsigned char *)(a1 + 312) = 1;
  }
  double v9 = 0.0;
  if (*(unsigned char *)(a2 + 128))
  {
    if (sub_1003892C0(a1, &v9, *(double *)(a2 + 120)))
    {
      [*(id *)(a1 + 296) setTimestamp:v9];
      uint64_t v8 = *(void **)(a1 + 248);
      if (v8) {
        [v8 updatePeerState:*(void *)(a1 + 296)];
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100437030();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
    {
      sub_100437070();
    }
  }
}

void sub_100394840(uint64_t a1, double *a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 240));
  int v5 = objc_opt_new();
  [v5 setMachAbsoluteTimestamp:*a2];
  [v5 setRelativeAltitude:a2[1]];
  [v5 setPressure:a2[2]];
  uint64_t v6 = *(void **)(a1 + 248);
  if (v6) {
    [v6 updateAltimeterData:v5];
  }
}

void sub_1003948D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003948E4(uint64_t a1)
{
  [*(id *)(a1 + 256) invalidate];
  [*(id *)(a1 + 248) stopDeviceFindingUpdates];
  double v2 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = 0;

  BOOL v3 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = 0;
}

uint64_t sub_100394938()
{
  return 1;
}

uint64_t sub_100394940()
{
  return 1;
}

uint64_t sub_100394948()
{
  return 1;
}

uint64_t sub_100394950()
{
  return 1;
}

uint64_t sub_100394958()
{
  return 1;
}

uint64_t sub_100394960()
{
  return 1;
}

uint64_t sub_100394968()
{
  return 1;
}

uint64_t sub_100394970()
{
  return 1;
}

uint64_t sub_100394978(uint64_t a1)
{
  return *(void *)(a1 + 304);
}

void sub_100394984(uint64_t a1)
{
  sub_1003949BC(a1);

  operator delete();
}

uint64_t sub_1003949BC(uint64_t a1)
{
  *(void *)a1 = off_100862E68;
  sub_100320E74((void *)(a1 + 320), 0);

  return a1;
}

void sub_100394A50()
{
  qword_1008AB718 = 0;
  unk_1008AB720 = 0;
  qword_1008AB710 = 0;
  long double v1 = operator new(0x40uLL);
  qword_1008AB718 = (uint64_t)(v1 + 4);
  unk_1008AB720 = v1 + 4;
  _OWORD *v1 = xmmword_1004C4810;
  v1[1] = unk_1004C4820;
  v1[2] = xmmword_1004C4830;
  v1[3] = unk_1004C4840;
  qword_1008AB710 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AB710, (void *)&_mh_execute_header);
  qword_1008AB730 = 0;
  unk_1008AB738 = 0;
  qword_1008AB728 = 0;
  double v2 = operator new(0x10uLL);
  qword_1008AB730 = (uint64_t)(v2 + 1);
  unk_1008AB738 = v2 + 1;
  *double v2 = xmmword_1004C4850;
  qword_1008AB728 = (uint64_t)v2;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AB728, (void *)&_mh_execute_header);
}

double *sub_100394B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0x100000003;
  uint64_t v13 = off_100861B38;
  long long v14 = xmmword_1004C1B50;
  uint64_t v16 = &v17;
  sub_1003418A0(a1, a2, (uint64_t)&v13);
  uint64_t v30 = 0x100000003;
  v28 = off_100861B38;
  long long v29 = xmmword_1004C1B50;
  v31 = &v32;
  uint64_t v25 = 0x100000134;
  long long v23 = off_100861C10;
  long long v24 = xmmword_1004C1B70;
  __int16 v26 = &v27;
  uint64_t v20 = 0x100000003;
  long long v18 = off_100861B38;
  long long v19 = xmmword_1004C1B50;
  __int16 v21 = &v22;
  sub_100341B04((uint64_t)&v13, (uint64_t)&v28, (uint64_t)&v23, (uint64_t)&v18, "2");
  double v7 = v6;
  *(double *)sub_1003416AC(a3, 0) = v6;
  if (v7 == 0.0)
  {
    *(void *)sub_10034185C(a4, 0, 0) = 0;
    *(void *)sub_10034185C(a4, 0, 1) = 0;
    id result = (double *)sub_10034185C(a4, 0, 2);
    double *result = 0.0;
  }
  else
  {
    double v8 = sub_1002A43C0((uint64_t)&v13, 0);
    double v9 = 1.0 / v7;
    *(double *)sub_10034185C(a4, 0, 0) = 1.0 / v7 * v8;
    double v10 = sub_1002A43C0((uint64_t)&v13, 1u);
    *(double *)sub_10034185C(a4, 0, 1) = v9 * v10;
    double v11 = sub_1002A43C0((uint64_t)&v13, 2u);
    id result = (double *)sub_10034185C(a4, 0, 2);
    double *result = v9 * v11;
  }
  return result;
}

void sub_100394D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = 0x100000003;
  uint64_t v25 = off_100861B38;
  long long v26 = xmmword_1004C1B50;
  v28 = &v29;
  sub_1003418A0(a1, a2, (uint64_t)&v25);
  uint64_t v22 = 0x100000003;
  uint64_t v20 = off_100861B38;
  long long v21 = xmmword_1004C1B50;
  long long v23 = &v24;
  sub_1003419A0(a3, (uint64_t)&v25, (uint64_t)&v20);
  uint64_t v42 = 0x100000003;
  v40 = off_100861B38;
  long long v41 = xmmword_1004C1B50;
  v43 = &v44;
  uint64_t v37 = 0x100000134;
  long long v36 = xmmword_1004C1B70;
  v35 = off_100861C10;
  v38 = v39;
  uint64_t v32 = 0x100000003;
  long long v31 = xmmword_1004C1B50;
  uint64_t v30 = off_100861B38;
  v33 = &v34;
  sub_100341B04((uint64_t)&v20, (uint64_t)&v40, (uint64_t)&v35, (uint64_t)&v30, "2");
  double v9 = v8;
  double v10 = sub_1002A43C0((uint64_t)&v20, 0);
  long double v11 = sub_1002A43C0((uint64_t)&v20, 1u);
  double v12 = sub_1002A43C0((uint64_t)&v20, 2u);
  if (v9 != 0.0)
  {
    long double v13 = v12;
    long long v14 = (long double *)sub_1003416AC(a4, 0);
    *long long v14 = atan2(v13, v11);
    uint64_t v15 = (long double *)sub_1003416AC(a4, 1u);
    *uint64_t v15 = asin(v10 / v9);
    double v16 = v13 * v13 + v11 * v11;
    double v17 = 1.0 / (v9 * v9);
    *(void *)sub_10034185C(a5, 0, 0) = 0;
    double v18 = sqrt(v16);
    *(double *)sub_10034185C(a5, 1, 0) = v17 * v18;
    long long v19 = (long double *)sub_10034185C(a5, 0, 1);
    if (v16 == 0.0)
    {
      *long long v19 = 0.0;
      *(void *)sub_10034185C(a5, 0, 2) = 0;
      *(void *)sub_10034185C(a5, 1, 1) = 0;
      *(void *)sub_10034185C(a5, 1, 2) = 0;
    }
    else
    {
      *long long v19 = -v13 / v16;
      *(long double *)sub_10034185C(a5, 0, 2) = v11 / v16;
      *(long double *)sub_10034185C(a5, 1, 1) = v17 * (-(v10 * v11) / v18);
      *(long double *)sub_10034185C(a5, 1, 2) = v17 * (-(v10 * v13) / v18);
    }
  }
  uint64_t v37 = 0x300000002;
  long long v36 = xmmword_1004C2720;
  v35 = off_100862750;
  v38 = v39;
  sub_1003419A0(a5, a3, (uint64_t)&v35);
  sub_10034226C(a5, (uint64_t)&v35);
}

void sub_1003950E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = 0x300000001;
  long double v13 = off_100862708;
  long long v14 = xmmword_1004C2710;
  double v16 = &v17;
  sub_100394B38(a3, a4, a5, (uint64_t)&v13);
  uint64_t v10 = 0x300000001;
  double v8 = off_100862708;
  long long v9 = xmmword_1004C2710;
  long double v11 = &v12;
  sub_1003419A0((uint64_t)&v13, a2, (uint64_t)&v8);
  sub_10034226C(a6, (uint64_t)&v8);
}

void sub_1003951C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = 0x300000002;
  long long v14 = off_100862750;
  long long v15 = xmmword_1004C2720;
  uint64_t v17 = &v18;
  sub_100394D64(a3, a4, a5, a6, (uint64_t)&v14);
  uint64_t v11 = 0x300000002;
  long long v9 = off_100862750;
  long long v10 = xmmword_1004C2720;
  uint64_t v12 = &v13;
  sub_1003419A0((uint64_t)&v14, a2, (uint64_t)&v9);
  sub_10034226C(a7, (uint64_t)&v9);
}

double *sub_1003952A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1002A43C0(a1, 0);
  double v7 = sub_1002A43C0(a1, 1u);
  double v8 = sub_1002A43C0(a1, 2u);
  __double2 v9 = __sincos_stret(v8);
  __double2 v10 = __sincos_stret(v7);
  double v11 = v6 * v9.__cosval;
  *(double *)sub_1003416AC(a2, 0) = v10.__sinval * (v6 * v9.__cosval);
  *(double *)sub_1003416AC(a2, 1u) = v6 * v9.__sinval;
  double v12 = v10.__cosval * (v6 * v9.__cosval);
  *(double *)sub_1003416AC(a2, 2u) = v12;
  *(double *)sub_10034185C(a3, 0, 0) = v10.__sinval * v9.__cosval;
  *(double *)sub_10034185C(a3, 1, 0) = v9.__sinval;
  *(double *)sub_10034185C(a3, 2, 0) = v10.__cosval * v9.__cosval;
  *(double *)sub_10034185C(a3, 0, 1) = v12;
  *(void *)sub_10034185C(a3, 1, 1) = 0;
  *(double *)sub_10034185C(a3, 2, 1) = v10.__sinval * -(v6 * v9.__cosval);
  double v13 = -(v6 * v9.__sinval);
  *(double *)sub_10034185C(a3, 0, 2) = v10.__sinval * v13;
  *(double *)sub_10034185C(a3, 1, 2) = v11;
  id result = (double *)sub_10034185C(a3, 2, 2);
  double *result = v10.__cosval * v13;
  return result;
}

void sub_10039544C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long double v4 = sub_1002A43C0(a1, 0);
  double v5 = sub_1002A43C0(a1, 1u);
  long double v6 = sub_1002A43C0(a1, 2u);
  *(void *)(a2 + 24) = 0x100000003;
  *(void *)a2 = off_100861B38;
  *(_OWORD *)(a2 + 8) = xmmword_1004C1B50;
  *(void *)(a2 + 32) = a2 + 40;
  *(double *)sub_1003416AC(a2, 0) = sqrt(v5 * v5 + v4 * v4 + v6 * v6);
  if (*(double *)sub_1003416AC(a2, 0) <= 0.0)
  {
    *(void *)sub_1003416AC(a2, 1u) = 0;
    *(void *)sub_1003416AC(a2, 2u) = 0;
  }
  else
  {
    double v7 = (long double *)sub_1003416AC(a2, 1u);
    *double v7 = atan2(v4, v6);
    double v8 = *(double *)sub_1003416AC(a2, 0);
    __double2 v9 = (long double *)sub_1003416AC(a2, 2u);
    *__double2 v9 = asin(v5 / v8);
  }
}

void sub_100395590(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

long double sub_1003955B0@<D0>(uint64_t a1@<X8>, double a2@<D0>, long double a3@<D1>, long double a4@<D2>)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = off_100861B38;
  *(_OWORD *)(a1 + 8) = xmmword_1004C1B50;
  *(void *)(a1 + 32) = a1 + 40;
  double v8 = (long double *)sub_1003416AC(a1, 0);
  *double v8 = sin(a3) * a2;
  __double2 v9 = (long double *)sub_1003416AC(a1, 1u);
  long double v10 = cos(a3) * a2;
  *__double2 v9 = v10 * cos(a4);
  double v11 = (double *)sub_1003416AC(a1, 2u);
  long double result = v10 * sin(a4);
  *double v11 = result;
  return result;
}

void sub_100395694(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

double sub_1003956B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = off_100861B80;
  *(_OWORD *)(a2 + 8) = xmmword_1004C1E40;
  *(void *)(a2 + 32) = a2 + 40;
  sub_1003411F0((_DWORD *)a2, 3, 3);
  sub_100341240(a2, 0.0);
  double v4 = sub_1002A43C0(a1, 0);
  double v5 = sub_1002A43C0(a1, 1u);
  double v6 = sub_1002A43C0(a1, 2u);
  double v7 = sub_1002A43C0(a1, 3u);
  double v14 = v5 * v5;
  double v15 = v4 * v4;
  *(double *)sub_10034185C(a2, 0, 0) = v4 * v4 - v5 * v5 - v6 * v6 + v7 * v7;
  *(double *)sub_10034185C(a2, 1, 0) = v4 * v5 + v6 * v7 + v4 * v5 + v6 * v7;
  double v8 = v4 * v6;
  double v9 = v5 * v7;
  *(double *)sub_10034185C(a2, 2, 0) = v4 * v6 - v5 * v7 + v4 * v6 - v5 * v7;
  *(double *)sub_10034185C(a2, 0, 1) = v4 * v5 - v6 * v7 + v4 * v5 - v6 * v7;
  *(double *)sub_10034185C(a2, 1, 1) = v5 * v5 - v4 * v4 - v6 * v6 + v7 * v7;
  double v10 = v4 * v7;
  double v11 = v5 * v6;
  *(double *)sub_10034185C(a2, 2, 1) = v11 + v10 + v11 + v10;
  *(double *)sub_10034185C(a2, 0, 2) = v8 + v9 + v8 + v9;
  *(double *)sub_10034185C(a2, 1, 2) = v11 - v10 + v11 - v10;
  double v12 = (double *)sub_10034185C(a2, 2, 2);
  double result = -v15 - v14 + v6 * v6 + v7 * v7;
  *double v12 = result;
  return result;
}

void sub_1003958E8(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

double sub_10039591C(double a1)
{
  double v1 = 1.0;
  if (a1 <= 1.0) {
    return v1;
  }
  double v1 = 5.0;
  if (a1 >= 10.0) {
    return v1;
  }
  else {
    return (a1 + -1.0) * 0.444444444 + 1.0;
  }
}

void sub_10039595C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = 0x100000003;
  long long v27 = xmmword_1004C1B50;
  long long v26 = off_100861B38;
  uint64_t v29 = &v30;
  double v6 = sub_1002A43C0(a1, 0);
  *(double *)sub_1003416AC((uint64_t)&v26, 0) = v6;
  double v7 = sub_1002A43C0(a1, 1u);
  *(double *)sub_1003416AC((uint64_t)&v26, 1u) = v7;
  double v8 = sub_1002A43C0(a1, 2u);
  *(double *)sub_1003416AC((uint64_t)&v26, 2u) = v8;
  double v9 = sub_1002A43C0(a1, 3u);
  __double2 v10 = __sincos_stret(v9);
  uint64_t v23 = 0x300000003;
  long long v22 = xmmword_1004C1E40;
  long long v21 = off_100861B80;
  uint64_t v24 = &v25;
  *(double *)sub_10034185C((uint64_t)&v21, 0, 0) = v10.__cosval;
  *(void *)sub_10034185C((uint64_t)&v21, 1, 0) = 0;
  *(double *)sub_10034185C((uint64_t)&v21, 2, 0) = -v10.__sinval;
  *(void *)sub_10034185C((uint64_t)&v21, 0, 1) = 0;
  *(void *)sub_10034185C((uint64_t)&v21, 1, 1) = 0x3FF0000000000000;
  *(void *)sub_10034185C((uint64_t)&v21, 2, 1) = 0;
  *(double *)sub_10034185C((uint64_t)&v21, 0, 2) = v10.__sinval;
  *(void *)sub_10034185C((uint64_t)&v21, 1, 2) = 0;
  *(double *)sub_10034185C((uint64_t)&v21, 2, 2) = v10.__cosval;
  uint64_t v13 = 0x100000003;
  double v11 = off_100861B38;
  long long v12 = xmmword_1004C1B50;
  double v14 = &v15;
  sub_1003419A0((uint64_t)&v21, a2, (uint64_t)&v11);
  uint64_t v18 = 0x100000003;
  uint64_t v16 = off_100861B38;
  long long v17 = xmmword_1004C1B50;
  long long v19 = &v20;
  sub_100342718((uint64_t)&v11, (uint64_t)&v26, (uint64_t)&v16);
  sub_10034226C(a3, (uint64_t)&v16);
}

double sub_100395BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = 0x100000003;
  long long v35 = xmmword_1004C1B50;
  uint64_t v34 = off_100861B38;
  uint64_t v37 = &v38;
  double v8 = sub_1002A43C0(a1, 0);
  *(double *)sub_1003416AC((uint64_t)&v34, 0) = v8;
  double v9 = sub_1002A43C0(a1, 1u);
  *(double *)sub_1003416AC((uint64_t)&v34, 1u) = v9;
  double v10 = sub_1002A43C0(a1, 2u);
  *(double *)sub_1003416AC((uint64_t)&v34, 2u) = v10;
  double v11 = sub_1002A43C0(a1, 3u);
  __double2 v12 = __sincos_stret(v11);
  uint64_t v31 = 0x300000003;
  long long v30 = xmmword_1004C1E40;
  uint64_t v29 = off_100861B80;
  uint64_t v32 = &v33;
  *(double *)sub_10034185C((uint64_t)&v29, 0, 0) = v12.__cosval;
  *(void *)sub_10034185C((uint64_t)&v29, 1, 0) = 0;
  *(double *)sub_10034185C((uint64_t)&v29, 2, 0) = -v12.__sinval;
  *(void *)sub_10034185C((uint64_t)&v29, 0, 1) = 0;
  *(void *)sub_10034185C((uint64_t)&v29, 1, 1) = 0x3FF0000000000000;
  *(void *)sub_10034185C((uint64_t)&v29, 2, 1) = 0;
  *(double *)sub_10034185C((uint64_t)&v29, 0, 2) = v12.__sinval;
  *(void *)sub_10034185C((uint64_t)&v29, 1, 2) = 0;
  *(double *)sub_10034185C((uint64_t)&v29, 2, 2) = v12.__cosval;
  uint64_t v26 = 0x100000003;
  long long v25 = xmmword_1004C1B50;
  uint64_t v24 = off_100861B38;
  long long v27 = &v28;
  sub_1003419A0((uint64_t)&v29, a2, (uint64_t)&v24);
  uint64_t v21 = 0x100000003;
  long long v19 = off_100861B38;
  long long v20 = xmmword_1004C1B50;
  long long v22 = v23;
  sub_100342718((uint64_t)&v24, (uint64_t)&v34, (uint64_t)&v19);
  sub_10034226C(a3, (uint64_t)&v19);
  uint64_t v21 = 0x400000003;
  long long v19 = off_100861F20;
  long long v20 = xmmword_1004C1E30;
  long long v22 = v23;
  sub_1003411F0(&v19, 3, 4);
  sub_100341240((uint64_t)&v19, 0.0);
  sub_10034226C(a4, (uint64_t)&v19);
  *(void *)sub_10034185C(a4, 0, 0) = 0x3FF0000000000000;
  *(void *)sub_10034185C(a4, 1, 1) = 0x3FF0000000000000;
  *(void *)sub_10034185C(a4, 2, 2) = 0x3FF0000000000000;
  double v13 = sub_1002A43C0(a2, 0);
  double v14 = sub_1002A43C0(a2, 2u);
  *(double *)sub_10034185C(a4, 0, 3) = v12.__cosval * v14 + -v12.__sinval * v13;
  double v15 = sub_1002A43C0(a2, 0);
  double v16 = sub_1002A43C0(a2, 2u);
  long long v17 = (double *)sub_10034185C(a4, 2, 3);
  double result = v16 * -v12.__sinval - v12.__cosval * v15;
  *long long v17 = result;
  return result;
}

double *sub_100395FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v10 = sub_1002A43C0(a1, 3u);
  uint64_t v32 = 0x100000003;
  long long v30 = off_100861B38;
  long long v31 = xmmword_1004C1B50;
  uint64_t v33 = &v34;
  sub_10039595C(a1, a3, (uint64_t)&v30);
  uint64_t v27 = 0x100000003;
  long long v25 = off_100861B38;
  long long v26 = xmmword_1004C1B50;
  uint64_t v28 = &v29;
  sub_1003418A0((uint64_t)&v30, a2, (uint64_t)&v25);
  uint64_t v47 = 0x100000003;
  v45 = off_100861B38;
  long long v46 = xmmword_1004C1B50;
  v48 = &v49;
  uint64_t v42 = 0x100000134;
  long long v41 = xmmword_1004C1B70;
  v40 = off_100861C10;
  v43 = &v44;
  uint64_t v37 = 0x100000003;
  long long v36 = xmmword_1004C1B50;
  long long v35 = off_100861B38;
  uint64_t v38 = &v39;
  sub_100341B04((uint64_t)&v25, (uint64_t)&v45, (uint64_t)&v40, (uint64_t)&v35, "2");
  double v12 = v11;
  *(double *)sub_1003416AC(a4, 0) = v11;
  if (v12 == 0.0)
  {
    *(void *)sub_10034185C(a5, 0, 0) = 0;
    *(void *)sub_10034185C(a5, 0, 1) = 0;
    *(void *)sub_10034185C(a5, 0, 2) = 0;
    double result = (double *)sub_10034185C(a5, 0, 3);
    double *result = 0.0;
  }
  else
  {
    __double2 v13 = __sincos_stret(v10);
    double v14 = 1.0 / v12;
    double v15 = sub_1002A43C0((uint64_t)&v25, 0);
    *(double *)sub_10034185C(a5, 0, 0) = v14 * v15;
    double v16 = sub_1002A43C0((uint64_t)&v25, 1u);
    *(double *)sub_10034185C(a5, 0, 1) = v14 * v16;
    double v17 = sub_1002A43C0((uint64_t)&v25, 2u);
    *(double *)sub_10034185C(a5, 0, 2) = v14 * v17;
    double v18 = sub_1002A43C0(a3, 0);
    double v19 = v13.__cosval * sub_1002A43C0(a3, 2u) - v13.__sinval * v18;
    double v20 = sub_1002A43C0(a3, 0);
    double v21 = -(v13.__sinval * sub_1002A43C0(a3, 2u)) - v13.__cosval * v20;
    double v22 = sub_1002A43C0((uint64_t)&v25, 0);
    double v23 = sub_1002A43C0((uint64_t)&v25, 2u);
    double result = (double *)sub_10034185C(a5, 0, 3);
    double *result = v14 * (v21 * v23 + v19 * v22);
  }
  return result;
}

void sub_100396310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long double v6 = sub_1002A43C0(a1, 0);
  double v7 = sub_1002A43C0(a1, 1u);
  long double v8 = sub_1002A43C0(a1, 2u);
  double v9 = sqrt(v7 * v7 + v6 * v6 + v8 * v8);
  *(double *)sub_1003416AC(a2, 0) = v9;
  if (v9 <= 0.0)
  {
    *(void *)sub_1003416AC(a2, 1u) = 0;
    *(void *)sub_1003416AC(a2, 2u) = 0;
    uint64_t v20 = 0x300000003;
    double v18 = off_100861B80;
    long long v19 = xmmword_1004C1E40;
    double v21 = &v22;
    sub_1003411F0(&v18, 3, 3);
    sub_100341240((uint64_t)&v18, 0.0);
    sub_10034226C(a3, (uint64_t)&v18);
  }
  else
  {
    long double v10 = atan2(v6, v8);
    *(long double *)sub_1003416AC(a2, 1u) = v10;
    long double v11 = asin(v7 / v9);
    *(long double *)sub_1003416AC(a2, 2u) = v11;
    double v12 = sub_1002A43C0(a1, 0) / v9;
    *(double *)sub_10034185C(a3, 0, 0) = v12;
    double v13 = sub_1002A43C0(a1, 1u) / v9;
    *(double *)sub_10034185C(a3, 0, 1) = v13;
    double v14 = sub_1002A43C0(a1, 2u) / v9;
    *(double *)sub_10034185C(a3, 0, 2) = v14;
    double v15 = v8 * v8 + v6 * v6;
    double v16 = 1.0 / (v9 * v9);
    *(void *)sub_10034185C(a3, 1, 1) = 0;
    double v17 = sqrt(v15);
    *(double *)sub_10034185C(a3, 2, 1) = v17 * v16;
    if (v15 <= 0.0)
    {
      *(void *)sub_10034185C(a3, 1, 0) = 0;
      *(void *)sub_10034185C(a3, 1, 2) = 0;
      *(void *)sub_10034185C(a3, 2, 0) = 0;
      *(void *)sub_10034185C(a3, 2, 2) = 0;
    }
    else
    {
      *(long double *)sub_10034185C(a3, 1, 0) = v8 / v15;
      *(long double *)sub_10034185C(a3, 1, 2) = -v6 / v15;
      *(long double *)sub_10034185C(a3, 2, 0) = -(v7 * v6) / v17 * v16;
      *(long double *)sub_10034185C(a3, 2, 2) = -(v7 * v8) / v17 * v16;
    }
  }
}

uint64_t sub_100396600()
{
  qword_1008AB740 = 0;
  qword_1008AB748 = 0;
  qword_1008AB750 = 0;
  v0 = operator new(0x40uLL);
  qword_1008AB748 = (uint64_t)(v0 + 4);
  qword_1008AB750 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_1004C48C8;
  v0[1] = unk_1004C48D8;
  v0[2] = xmmword_1004C48E8;
  v0[3] = unk_1004C48F8;
  qword_1008AB740 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AB740, (void *)&_mh_execute_header);
  qword_1008AB760 = 0;
  unk_1008AB768 = 0;
  qword_1008AB758 = 0;
  double v1 = operator new(0x10uLL);
  qword_1008AB760 = (uint64_t)(v1 + 1);
  unk_1008AB768 = v1 + 1;
  _OWORD *v1 = xmmword_1004C4908;
  qword_1008AB758 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AB758, (void *)&_mh_execute_header);
}

void sub_1003966D8(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  operator new();
}

void sub_100396800()
{
}

void sub_10039687C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 408);
  if (!v4
    || *(double *)a2 > *(double *)(*(void *)(*(void *)(a1 + 376)
                                             + (((unint64_t)(v4 + *(void *)(a1 + 400) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                                 + (((v4 + *(void *)(a1 + 400) - 1) & 0x1F) << 7)))
  {
    int v5 = *(_DWORD *)(a1 + 416);
    *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 80);
    uint64_t v6 = *(void *)(a2 + 88);
    *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 96);
    *(void *)(a1 + 424) = v6;
    double v7 = *(double *)a2;
    if (!*(unsigned char *)(a1 + 24) || *(double *)(a1 + 16) < v7)
    {
      *(double *)(a1 + 16) = v7;
      *(unsigned char *)(a1 + 24) = 1;
    }
    int v8 = *(_DWORD *)(a2 + 80);
    if (v5 == v8) {
      goto LABEL_19;
    }
    if (v8 == 2)
    {
      double v9 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      double v12 = *(double *)a2;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v12;
      long double v11 = "#sa_algo_moving_findee,VIO Tracking State changed to Normal at %f s";
    }
    else if (v8 == 1)
    {
      double v9 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      double v13 = *(double *)a2;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v13;
      long double v11 = "#sa_algo_moving_findee,VIO Tracking State changed to Limited at %f s";
    }
    else
    {
      if (v8) {
        goto LABEL_19;
      }
      double v9 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      double v10 = *(double *)a2;
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v10;
      long double v11 = "#sa_algo_moving_findee,VIO Tracking State changed to Not Available at %f s";
    }
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
LABEL_19:
    sub_100396D74(a1, a2);
    int v14 = *(_DWORD *)(a2 + 80);
    if (v5 == 2 && v14 != 2)
    {
      double v15 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,VIO Tracking not normal anymore - resetting", buf, 2u);
      }
      if (*(unsigned char *)(a1 + 312))
      {
        double v16 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,VIO Tracking not normal before the cached measurement can be interpolated - passing the cached measurement to the range filter without VIO", buf, 2u);
        }
      }
      sub_100397174(a1);
      int v14 = *(_DWORD *)(a2 + 80);
    }
    if (v14 == 2)
    {
      if (*(unsigned char *)(a2 + 84))
      {
        double v17 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          double v18 = *(double *)a2;
          if (*(unsigned char *)(a2 + 85)) {
            long long v19 = "YES";
          }
          else {
            long long v19 = "NO";
          }
          *(_DWORD *)buf = 134218498;
          *(double *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "YES";
          *(_WORD *)&buf[22] = 2080;
          *(void *)&unsigned char buf[24] = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,VIO reported relocalization event at %f s, MAJOR: %s, MINOR: %s - resetting", buf, 0x20u);
        }
        sub_100397174(a1);
      }
      else
      {
        if (*(unsigned char *)(a2 + 85))
        {
          uint64_t v20 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            double v21 = *(double *)a2;
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,VIO reported MINOR relocalization event at %f s", buf, 0xCu);
          }
        }
        uint64_t v22 = 0;
        float32x4_t v23 = *(float32x4_t *)(a2 + 16);
        float32x4_t v24 = *(float32x4_t *)(a2 + 32);
        float32x4_t v25 = *(float32x4_t *)(a2 + 48);
        float32x4_t v26 = *(float32x4_t *)(a2 + 64);
        long long v33 = xmmword_1004C1B10;
        *(_OWORD *)__p = xmmword_1004C1B20;
        long long v35 = xmmword_1004C1B30;
        long long v36 = xmmword_1004C1B40;
        do
        {
          *(float32x4_t *)&buf[v22 * 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)&__p[v22 - 2])), v24, (float32x2_t)__p[v22 - 2], 1), v25, *(float32x4_t *)&__p[v22 - 2], 2), v26, *(float32x4_t *)&__p[v22 - 2], 3);
          v22 += 2;
        }
        while (v22 != 8);
        long long v27 = *(_OWORD *)buf;
        long long v28 = *(_OWORD *)&buf[16];
        long long v29 = v38;
        long long v30 = v39;
        int v31 = *(_DWORD *)(a2 + 80);
        __int16 v32 = *(_WORD *)(a2 + 84);
        *(void *)buf = *(void *)a2;
        *(_OWORD *)&buf[16] = v27;
        long long v38 = v28;
        long long v39 = v29;
        long long v40 = v30;
        int v41 = v31;
        __int16 v42 = v32;
        char v43 = 0;
        char v44 = 0;
        char v45 = 0;
        char v46 = 0;
        char v47 = 0;
        char v48 = 0;
        sub_10033C83C((void *)(a1 + 368), (long long *)buf);
        sub_10034759C(*(void *)(a1 + 64), (uint64_t)&v33, *(double *)buf, *(float *)&v40, *((float *)&v40 + 1), *((float *)&v40 + 2));
        sub_10033C8E4(a1 + 72, (uint64_t *)&v33);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
    sub_100397220(a1);
    sub_1003978DC((uint64_t *)a1);
    sub_100397FCC((void *)a1);
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004370B0();
  }
}

void sub_100396D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100396D74(uint64_t result, uint64_t a2)
{
  double v3 = *(double *)a2;
  if (!*(unsigned char *)(result + 40) || v3 - *(double *)(result + 32) >= 0.2)
  {
    *(double *)(result + 32) = v3;
    *(unsigned char *)(result + 40) = 1;
    sub_1002363E4((uint64_t)v27);
    sub_100056628(v27, (uint64_t)"tracking state: ", 16);
    uint64_t v4 = *(int *)(a2 + 80);
    if (v4 < 3) {
      sub_100056628(v27, (uint64_t)(&off_100862FF8)[v4], qword_1004C4978[v4]);
    }
    sub_100056628(v27, (uint64_t)", light intensity ", 18);
    if (*(unsigned char *)(a2 + 96))
    {
      uint64_t v5 = v27[0];
      *(_DWORD *)((char *)&v27[1] + *(void *)(v27[0] - 24)) = *(_DWORD *)((unsigned char *)&v27[1]
                                                                            + *(void *)(v27[0] - 24)) & 0xFFFFFEFB | 4;
      *(void *)((char *)&v27[2] + *(void *)(v5 - 24)) = 2;
      std::ostream::operator<<();
    }
    else
    {
      sub_100056628(v27, (uint64_t)"-", 1);
    }
    uint64_t v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = *(double *)a2;
      std::stringbuf::str();
      int v8 = v26 >= 0 ? &__p : (void **)__p;
      double v9 = *(float *)(a2 + 16);
      double v10 = *(float *)(a2 + 20);
      double v11 = *(float *)(a2 + 24);
      double v12 = *(float *)(a2 + 28);
      double v13 = *(float *)(a2 + 32);
      double v14 = *(float *)(a2 + 36);
      double v15 = *(float *)(a2 + 40);
      double v16 = *(float *)(a2 + 44);
      double v17 = *(float *)(a2 + 48);
      double v18 = *(float *)(a2 + 52);
      double v19 = *(float *)(a2 + 56);
      double v20 = *(float *)(a2 + 60);
      double v21 = *(float *)(a2 + 64);
      double v22 = *(float *)(a2 + 68);
      double v23 = *(float *)(a2 + 72);
      double v24 = *(float *)(a2 + 76);
      *(_DWORD *)buf = 134222338;
      double v30 = v7;
      __int16 v31 = 2080;
      __int16 v32 = v8;
      __int16 v33 = 2048;
      double v34 = v9;
      __int16 v35 = 2048;
      double v36 = v10;
      __int16 v37 = 2048;
      double v38 = v11;
      __int16 v39 = 2048;
      double v40 = v12;
      __int16 v41 = 2048;
      double v42 = v13;
      __int16 v43 = 2048;
      double v44 = v14;
      __int16 v45 = 2048;
      double v46 = v15;
      __int16 v47 = 2048;
      double v48 = v16;
      __int16 v49 = 2048;
      double v50 = v17;
      __int16 v51 = 2048;
      double v52 = v18;
      __int16 v53 = 2048;
      double v54 = v19;
      __int16 v55 = 2048;
      double v56 = v20;
      __int16 v57 = 2048;
      double v58 = v21;
      __int16 v59 = 2048;
      double v60 = v22;
      __int16 v61 = 2048;
      double v62 = v23;
      __int16 v63 = 2048;
      double v64 = v24;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Pose timestamp: %f, %s, pose [%3.2f, %3.2f, %3.2f, %3.2f, ...\n\t%3.2f, %3.2f, %3.2f, %3.2f, ...\n\t%3.2f, %3.2f, %3.2f, %3.2f, ... \n\t%3.2f, %3.2f, %3.2f, %3.2f]", buf, 0xB6u);
      if (v26 < 0) {
        operator delete(__p);
      }
    }
    if (v28 < 0) {
      operator delete((void *)v27[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_100397150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10023657C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100397174(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 312)) {
    *(unsigned char *)(a1 + 312) = 0;
  }
  double v2 = *(void ***)(a1 + 376);
  uint64_t v3 = *(void *)(a1 + 384);
  *(void *)(a1 + 408) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 384);
      double v2 = (void **)(*(void *)(a1 + 376) + 8);
      *(void *)(a1 + 376) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 16;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_10;
    }
    uint64_t v6 = 32;
  }
  *(void *)(a1 + 400) = v6;
LABEL_10:
  if (*(unsigned char *)(a1 + 120))
  {
    double v7 = *(void **)(a1 + 88);
    if (v7)
    {
      *(void *)(a1 + 96) = v7;
      operator delete(v7);
    }
    *(unsigned char *)(a1 + 120) = 0;
  }
  sub_100349464(*(void *)(a1 + 64));
  *(unsigned char *)(a1 + 488) = 0;
}

void sub_100397220(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 312)) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 408);
  if (!v2) {
    return;
  }
  unint64_t v3 = *(void *)(a1 + 400);
  unint64_t v4 = v3 >> 5;
  uint64_t v6 = *(void *)(a1 + 376);
  uint64_t v5 = *(void *)(a1 + 384);
  double v7 = (char *)(v6 + 8 * (v3 >> 5));
  if (v5 == v6)
  {
    uint64_t v8 = 0;
    unint64_t v11 = 0;
    double v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
  }
  else
  {
    uint64_t v8 = *(void *)v7 + ((*(void *)(a1 + 400) & 0x1FLL) << 7);
    char v9 = v3 + v2;
    double v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
    unint64_t v11 = *(void *)v10 + ((unint64_t)(v9 & 0x1F) << 7);
  }
  double v12 = *(double *)(a1 + 136);
  float v13 = *(float *)(a1 + 144);
  *(void *)buf = v6 + 8 * (v3 >> 5);
  *(void *)&buf[8] = v8;
  if (v11 != v8)
  {
    uint64_t v14 = ((uint64_t)(v11 - *(void *)v10) >> 7) + 4 * (v10 - v7);
    uint64_t v15 = v8 - *(void *)v7;
    unint64_t v16 = v14 - (v15 >> 7);
    if (v14 != v15 >> 7)
    {
      do
      {
        unint64_t v17 = v16 >> 1;
        double v18 = sub_100342320((uint64_t)buf, v16 >> 1);
        if (v12 >= *v19)
        {
          double v20 = v19 + 16;
          if ((double *)((char *)v19 - *v18 + 128) == (double *)4096)
          {
            double v21 = (double *)v18[1];
            ++v18;
            double v20 = v21;
          }
          *(void *)buf = v18;
          *(void *)&buf[8] = v20;
          unint64_t v17 = v16 + ~v17;
        }
        unint64_t v16 = v17;
      }
      while (v17);
      double v7 = *(char **)buf;
      uint64_t v8 = *(void *)&buf[8];
      unint64_t v3 = *(void *)(a1 + 400);
      uint64_t v6 = *(void *)(a1 + 376);
      uint64_t v5 = *(void *)(a1 + 384);
      unint64_t v4 = v3 >> 5;
    }
  }
  if (v5 == v6)
  {
    if (v8)
    {
      uint64_t v23 = 0;
      uint64_t v22 = *(void *)(a1 + 408);
      goto LABEL_19;
    }
LABEL_22:
    double v30 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)(*(void *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7));
      *(_DWORD *)buf = 134218240;
      *(double *)&uint8_t buf[4] = v12;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v31;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#sa_algo_moving_findee,Measurement at %f s earlier than the first pose in history at %f s - skipping interpolation and removing range measurement", buf, 0x16u);
    }
    goto LABEL_43;
  }
  if (*(void *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7) == v8) {
    goto LABEL_22;
  }
  uint64_t v22 = *(void *)(a1 + 408);
  uint64_t v23 = *(void *)(v6 + (((v22 + v3) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v22 + v3) & 0x1F) << 7);
LABEL_19:
  if (v23 != v8)
  {
    uint64_t v24 = v8 - *(void *)v7;
    uint64_t v25 = v24 >> 7;
    if (v24 < 129)
    {
      unint64_t v34 = 32 - v25;
      long long v27 = &v7[-8 * (v34 >> 5)];
      uint64_t v28 = *(void *)v27;
      uint64_t v29 = ~v34 & 0x1FLL;
    }
    else
    {
      unint64_t v26 = v25 - 1;
      long long v27 = &v7[8 * (v26 >> 5)];
      uint64_t v28 = *(void *)v27;
      uint64_t v29 = v26 & 0x1F;
    }
    uint64_t v35 = v28 + (v29 << 7);
    float v36 = (v12 - *(double *)v35) / (*(double *)v8 - *(double *)v35);
    float v89 = v36;
    float32x4_t v85 = *(float32x4_t *)(v35 + 64);
    *(double *)v37.i64 = sub_10033F314(*(int8x16_t *)(v35 + 16), *(int8x16_t *)(v35 + 32), *(__n128 *)(v35 + 48));
    float32x4_t v87 = v37;
    float32x4_t v84 = *(float32x4_t *)(v8 + 64);
    *(double *)v38.i64 = sub_10033F314(*(int8x16_t *)(v8 + 16), *(int8x16_t *)(v8 + 32), *(__n128 *)(v8 + 48));
    int8x16_t v39 = (int8x16_t)vmulq_f32(v87, v38);
    float32x4_t v40 = (float32x4_t)vextq_s8(v39, v39, 8uLL);
    *(float32x2_t *)v39.i8 = vadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v40.f32);
    *(float *)v39.i32 = vaddv_f32(*(float32x2_t *)v39.i8);
    v40.i64[0] = 0;
    float32x4_t v41 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)v39, v40)), 0), (int8x16_t)vnegq_f32(v38), (int8x16_t)v38);
    float v42 = 1.0;
    float v43 = 1.0 - v89;
    float32x4_t v44 = vsubq_f32(v87, v41);
    int8x16_t v45 = (int8x16_t)vmulq_f32(v44, v44);
    float32x4_t v86 = v41;
    float32x4_t v46 = vaddq_f32(v87, v41);
    int8x16_t v47 = (int8x16_t)vmulq_f32(v46, v46);
    float v48 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)))));
    float v49 = v48 + v48;
    BOOL v50 = (float)(v48 + v48) == 0.0;
    float v51 = 1.0;
    if (!v50) {
      float v51 = sinf(v49) / v49;
    }
    float v52 = v51;
    float32x2_t v53 = vrecpe_f32((float32x2_t)LODWORD(v51));
    float32x2_t v54 = vmul_f32(v53, vrecps_f32((float32x2_t)LODWORD(v52), v53));
    LODWORD(v55) = vmul_f32(v54, vrecps_f32((float32x2_t)LODWORD(v52), v54)).u32[0];
    if ((float)(v43 * v49) != 0.0)
    {
      float v82 = v55;
      v54.f32[0] = sinf(v43 * v49);
      float v55 = v82;
      float v42 = v54.f32[0] / (float)(v43 * v49);
    }
    v54.f32[0] = v43 * (float)(v55 * v42);
    float32x4_t v56 = (float32x4_t)vdupq_lane_s32((int32x2_t)v54, 0);
    float v57 = v89;
    float v58 = v49 * v89;
    float v59 = 1.0;
    if (v58 != 0.0)
    {
      float32x4_t v81 = v56;
      float v83 = v55;
      float v60 = sinf(v58);
      float32x4_t v56 = v81;
      float v55 = v83;
      float v57 = v89;
      float v59 = v60 / v58;
    }
    float32x4_t v61 = vmlaq_f32(vmulq_n_f32(v86, (float)(v55 * v59) * v57), v87, v56);
    int8x16_t v62 = (int8x16_t)vmulq_f32(v61, v61);
    float32x2_t v63 = vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
    if (vaddv_f32(v63) == 0.0)
    {
      int8x16_t v64 = (int8x16_t)xmmword_1004C1B40;
    }
    else
    {
      unsigned __int32 v65 = vadd_f32(v63, (float32x2_t)vdup_lane_s32((int32x2_t)v63, 1)).u32[0];
      float32x2_t v66 = vrsqrte_f32((float32x2_t)v65);
      float32x2_t v67 = vmul_f32(v66, vrsqrts_f32((float32x2_t)v65, vmul_f32(v66, v66)));
      int8x16_t v64 = (int8x16_t)vmulq_n_f32(v61, vmul_f32(v67, vrsqrts_f32((float32x2_t)v65, vmul_f32(v67, v67))).f32[0]);
    }
    int8x16_t v68 = (int8x16_t)vmlaq_n_f32(v85, vsubq_f32(v84, v85), v57);
    double v69 = *(float *)v68.i32;
    double v70 = *(float *)v64.i32;
    float64x2_t v88 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 4uLL));
    float64x2_t v90 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 4uLL));
    double v71 = *(float *)&v64.i32[3];
    v72 = qword_1008ABDE0;
    double v73 = v13;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134220032;
      *(double *)&uint8_t buf[4] = v73;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2048;
      double v96 = v69;
      __int16 v97 = 2048;
      float64_t v98 = v90.f64[0];
      __int16 v99 = 2048;
      float64_t v100 = v90.f64[1];
      __int16 v101 = 2048;
      double v102 = v70;
      __int16 v103 = 2048;
      float64_t v104 = v88.f64[0];
      __int16 v105 = 2048;
      float64_t v106 = v88.f64[1];
      __int16 v107 = 2048;
      double v108 = v71;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Interpolated self pose for range measurement, range: %0.2f m, timestamp: %f s, device position:[%0.2f,%0.2f,%0.2f], device quat:[%0.2f,%0.2f,%0.2f,%0.2f]", buf, 0x5Cu);
    }
    *(double *)buf = v12;
    *(double *)&buf[8] = v73;
    *(void *)&buf[16] = 0x3FB999999999999ALL;
    LODWORD(v96) = 0;
    LOBYTE(v97) = 0;
    BYTE4(v108) = 0;
    double v109 = v69;
    float64x2_t v110 = v90;
    double v111 = v70;
    float64x2_t v112 = v88;
    double v113 = v71;
    sub_10039A0B4((void *)(a1 + 320), (uint64_t)buf);
    uint64_t v74 = *(void *)(a1 + 376);
    v75 = (char *)(v74 + 8 * (*(void *)(a1 + 400) >> 5));
    if (*(void *)(a1 + 384) == v74) {
      uint64_t v76 = 0;
    }
    else {
      uint64_t v76 = *(void *)v75 + ((*(void *)(a1 + 400) & 0x1FLL) << 7);
    }
    sub_100340838((void *)(a1 + 368), v75, v76, v27, v35);
    v77 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v78 = *(void *)(a1 + 376);
      uint64_t v79 = *(void *)(*(void *)(v78 + ((*(void *)(a1 + 400) >> 2) & 0x3FFFFFFFFFFFFFF8))
                      + ((*(void *)(a1 + 400) & 0x1FLL) << 7));
      uint64_t v80 = *(void *)(*(void *)(v78
                                  + (((unint64_t)(*(void *)(a1 + 400) + *(void *)(a1 + 408) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                      + (((*(void *)(a1 + 400) + *(void *)(a1 + 408) - 1) & 0x1F) << 7));
      *(_DWORD *)v91 = 134218240;
      uint64_t v92 = v79;
      __int16 v93 = 2048;
      uint64_t v94 = v80;
      _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,Pose history now between %f s and %f s", v91, 0x16u);
    }
LABEL_43:
    if (*(unsigned char *)(a1 + 312)) {
      *(unsigned char *)(a1 + 312) = 0;
    }
    return;
  }
  __int16 v32 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v33 = *(void *)(*(void *)(v6 + (((v3 + v22 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v3 + v22 - 1) & 0x1F) << 7));
    *(_DWORD *)buf = 134218240;
    *(double *)&uint8_t buf[4] = v12;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v33;
    _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,Measurement at %f s later than the last pose in history at %f s - skipping interpolation", buf, 0x16u);
  }
}

void sub_1003978DC(uint64_t *a1)
{
  if (a1[45] && a1[60])
  {
    unsigned __int32 v65 = (int64x2_t *)(a1 + 40);
    int8x16_t v64 = a1 + 55;
    unint64_t v2 = a1[44];
    uint64_t v3 = a1[41];
    uint64_t v4 = a1[42];
    uint64_t v5 = (void *)(v3 + 8 * (v2 / 0x1A));
    if (v4 == v3) {
      unint64_t v6 = 0;
    }
    else {
      unint64_t v6 = *v5 + 152 * (v2 % 0x1A);
    }
    uint64_t v63 = (uint64_t)(a1 + 9);
    while (1)
    {
      if (v4 == v3)
      {
        unint64_t v8 = 0;
      }
      else
      {
        unint64_t v7 = a1[45] + a1[44];
        unint64_t v8 = *(void *)(v3 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
      }
      if (v6 == v8) {
        return;
      }
      long long v9 = *(_OWORD *)v6;
      int v10 = *(_DWORD *)(v6 + 24);
      long long v11 = *(_OWORD *)(v6 + 28);
      long long v12 = *(_OWORD *)(v6 + 44);
      long long v13 = *(_OWORD *)(v6 + 60);
      long long v14 = *(_OWORD *)(v6 + 92);
      long long v87 = *(_OWORD *)(v6 + 76);
      v88[0] = v14;
      *(_OWORD *)((char *)v88 + 12) = *(_OWORD *)(v6 + 104);
      long long v85 = v12;
      long long v86 = v13;
      long long v15 = *(_OWORD *)(v6 + 120);
      long long v83 = *(_OWORD *)(v6 + 136);
      long long v84 = v11;
      long long v82 = v15;
      uint64_t v16 = a1[56];
      unint64_t v17 = a1[59];
      double v18 = (uint64_t *)(v16 + 8 * (v17 >> 7));
      uint64_t v19 = *v18;
      uint64_t v20 = *v18 + 32 * (v17 & 0x7F);
      double v21 = *(double *)v20;
      if (*(double *)v20 - *(double *)&v9 > 0.21) {
        break;
      }
      uint64_t v24 = a1[60];
      double v25 = *(double *)(*(void *)(v16 + (((v17 + v24 - 1) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32
                                                                                          * ((v17 + v24 - 1) & 0x7F));
      if (*(double *)&v9 - v25 <= 0.21)
      {
        if (a1[57] != v16)
        {
          uint64_t v28 = *(void *)(v16 + (((v24 + v17) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v24 + v17) & 0x7F);
          if (v20 != v28)
          {
            long long v68 = v9;
            while (1)
            {
              double v29 = *(double *)v20;
              double v30 = qword_1008ABDE0;
              if (vabdd_f64(*(double *)v20, *(double *)&v9) <= 0.21) {
                break;
              }
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134218240;
                *(double *)&uint8_t buf[4] = v29;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v68;
                _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,Peer VIO position at %f s NOT matching with cached range measurement at %f s", buf, 0x16u);
                uint64_t v19 = *v18;
              }
              v20 += 32;
              if (v20 - v19 == 4096)
              {
                uint64_t v31 = v18[1];
                ++v18;
                uint64_t v19 = v31;
                uint64_t v20 = v31;
              }
              *(void *)&long long v9 = v68;
              if (v20 == v28) {
                goto LABEL_29;
              }
            }
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218240;
              *(double *)&uint8_t buf[4] = v29;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v68;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Peer VIO position at %f s matching with cached range measurement at %f s", buf, 0x16u);
            }
            unint64_t v33 = a1[59];
            uint64_t v34 = a1[56];
            uint64_t v35 = a1[57];
            float v36 = (char *)(v34 + 8 * (v33 >> 7));
            if (v35 == v34)
            {
              uint64_t v37 = 0;
              uint64_t v40 = 0;
              int8x16_t v39 = (char *)(v34 + 8 * ((a1[60] + v33) >> 7));
            }
            else
            {
              uint64_t v37 = *(void *)v36 + 32 * (a1[59] & 0x7F);
              unint64_t v38 = a1[60] + v33;
              int8x16_t v39 = (char *)(v34 + 8 * (v38 >> 7));
              uint64_t v40 = *(void *)v39 + 32 * (v38 & 0x7F);
            }
            if (v40 == v37
              || (unint64_t v41 = ((v40 - *(void *)v39) >> 5) + 16 * (v39 - v36) - ((v37 - *(void *)v36) >> 5)) == 0)
            {
              float v42 = (char *)(v34 + 8 * (v33 >> 7));
            }
            else
            {
              float v42 = (char *)(v34 + 8 * (v33 >> 7));
              do
              {
                unint64_t v43 = v41 >> 1;
                if (v41 == 1)
                {
                  float32x4_t v44 = (double *)v37;
                  int8x16_t v45 = v42;
                }
                else
                {
                  uint64_t v46 = v43 + ((v37 - *(void *)v42) >> 5);
                  if (v46 < 1)
                  {
                    unint64_t v47 = 127 - v46;
                    LOBYTE(v46) = ~(127 - v46);
                    int8x16_t v45 = &v42[-8 * (v47 >> 7)];
                  }
                  else
                  {
                    int8x16_t v45 = &v42[8 * ((unint64_t)v46 >> 7)];
                  }
                  float32x4_t v44 = (double *)(*(void *)v45 + 32 * (v46 & 0x7F));
                }
                if (*v44 < *(double *)v20)
                {
                  uint64_t v37 = (uint64_t)(v44 + 4);
                  if ((double *)((char *)v44 - *(void *)v45 + 32) == (double *)4096)
                  {
                    uint64_t v48 = *((void *)v45 + 1);
                    v45 += 8;
                    uint64_t v37 = v48;
                  }
                  unint64_t v43 = v41 + ~v43;
                  float v42 = v45;
                }
                unint64_t v41 = v43;
              }
              while (v43);
            }
            if (v35 == v34) {
              uint64_t v49 = 0;
            }
            else {
              uint64_t v49 = *(void *)v36 + 32 * (a1[59] & 0x7F);
            }
            sub_10039A4B0(v64, v36, v49, v42, v37);
            uint64_t v50 = a1[60];
            float v51 = qword_1008ABDE0;
            if (!v50)
            {
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
                sub_100437128(v51, v56, v57, v58, v59, v60, v61, v62);
              }
              return;
            }
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v53 = a1[56];
              uint64_t v54 = *(void *)(*(void *)(v53 + (((unint64_t)a1[59] >> 4) & 0xFFFFFFFFFFFFFF8))
                              + 32 * (a1[59] & 0x7F));
              uint64_t v55 = *(void *)(*(void *)(v53 + (((unint64_t)(v50 + a1[59] - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                              + 32 * ((v50 + a1[59] - 1) & 0x7F));
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v54;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v55;
              _os_log_debug_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,Peer VIO history from %f s to %f s after pruning", buf, 0x16u);
            }
            *(_OWORD *)buf = v68;
            *(void *)&buf[16] = 0x3FB999999999999ALL;
            int v73 = v10;
            char v74 = 0;
            char v75 = 0;
            long long v76 = *(_OWORD *)((char *)v88 + 4);
            uint64_t v77 = *(void *)((char *)&v88[1] + 4);
            long long v78 = v82;
            long long v79 = v83;
            uint64_t v52 = *(void *)(v20 + 24);
            long long v80 = *(_OWORD *)(v20 + 8);
            uint64_t v81 = v52;
            sub_100348718(a1[8], (uint64_t)buf, v69);
            sub_10033C8E4(v63, v69);
            if (__p)
            {
              double v71 = __p;
              operator delete(__p);
            }
            goto LABEL_14;
          }
        }
LABEL_29:
        v6 += 152;
        if (v6 - *v5 == 3952)
        {
          unint64_t v32 = v5[1];
          ++v5;
          unint64_t v6 = v32;
        }
      }
      else
      {
        uint64_t v67 = v9;
        unint64_t v26 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v67;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,Cached range measurement at %f s can't be matched with peer pose yet, last peer pose at %f", buf, 0x16u);
        }
        v6 += 152;
        if (v6 - *v5 == 3952)
        {
          unint64_t v27 = v5[1];
          ++v5;
          unint64_t v6 = v27;
        }
      }
LABEL_31:
      uint64_t v3 = a1[41];
      uint64_t v4 = a1[42];
    }
    uint64_t v66 = v9;
    uint64_t v22 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v66;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Cached range measurement at %f s can't be matched with peer pose (removed), first peer pose at %f", buf, 0x16u);
    }
LABEL_14:
    uint64_t v5 = (void *)sub_10039A18C(v65, v5, (char *)v6);
    unint64_t v6 = v23;
    goto LABEL_31;
  }
}

void sub_100397FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100397FCC(void *a1)
{
  uint64_t v1 = a1[51];
  if (v1)
  {
    unint64_t v3 = a1[50];
    uint64_t v4 = a1[47];
    unint64_t v5 = v3 >> 5;
    double v6 = *(double *)(*(void *)(v4 + (((v1 + v3 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v1 + v3 - 1) & 0x1F) << 7))
       - *(double *)(*(void *)(v4 + 8 * (v3 >> 5)) + ((v3 & 0x1F) << 7));
    if (v6 > 5.0)
    {
      unint64_t v7 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unint64_t v33 = 134217984;
        *(double *)&v33[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Pose history spans %f s - pruning down past poses from history", v33, 0xCu);
        unint64_t v3 = a1[50];
        uint64_t v1 = a1[51];
        uint64_t v4 = a1[47];
        unint64_t v5 = v3 >> 5;
      }
      unint64_t v8 = v3 + v1;
      unint64_t v9 = v3 + v1 - 1;
      uint64_t v10 = *(void *)(v4 + ((v9 >> 2) & 0x3FFFFFFFFFFFFFF8));
      unint64_t v11 = (v9 & 0x1F) << 7;
      long long v12 = (char *)(v4 + 8 * v5);
      uint64_t v13 = a1[48];
      if (v13 == v4)
      {
        uint64_t v14 = 0;
        unint64_t v16 = 0;
        long long v15 = (char *)(v4 + 8 * (v8 >> 5));
      }
      else
      {
        uint64_t v14 = *(void *)v12 + ((v3 & 0x1F) << 7);
        long long v15 = (char *)(v4 + 8 * (v8 >> 5));
        unint64_t v16 = *(void *)v15 + ((v8 & 0x1F) << 7);
      }
      double v17 = *(double *)(v10 + v11);
      *(void *)unint64_t v33 = v4 + 8 * v5;
      *(void *)&v33[8] = v14;
      if (v16 != v14)
      {
        uint64_t v18 = ((uint64_t)(v16 - *(void *)v15) >> 7) + 4 * (v15 - v12);
        uint64_t v19 = v14 - *(void *)v12;
        unint64_t v20 = v18 - (v19 >> 7);
        if (v18 != v19 >> 7)
        {
          double v21 = v17 + -2.0;
          do
          {
            unint64_t v22 = v20 >> 1;
            unint64_t v23 = sub_100342320((uint64_t)v33, v20 >> 1);
            if (v21 >= *v24)
            {
              double v25 = v24 + 16;
              if ((double *)((char *)v24 - *v23 + 128) == (double *)4096)
              {
                unint64_t v26 = (double *)v23[1];
                ++v23;
                double v25 = v26;
              }
              *(void *)unint64_t v33 = v23;
              *(void *)&v33[8] = v25;
              unint64_t v22 = v20 + ~v22;
            }
            unint64_t v20 = v22;
          }
          while (v22);
          long long v12 = *(char **)v33;
          uint64_t v14 = *(void *)&v33[8];
          unint64_t v3 = a1[50];
          uint64_t v4 = a1[47];
          uint64_t v13 = a1[48];
          unint64_t v5 = v3 >> 5;
        }
      }
      unint64_t v27 = (char *)(v4 + 8 * v5);
      if (v13 == v4) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = *(void *)v27 + ((v3 & 0x1F) << 7);
      }
      sub_100340838(a1 + 46, v27, v28, v12, v14);
      double v29 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = a1[47];
        uint64_t v31 = *(void *)(*(void *)(v30 + ((a1[50] >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((a1[50] & 0x1FLL) << 7));
        uint64_t v32 = *(void *)(*(void *)(v30 + (((unint64_t)(a1[50] + a1[51] - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                        + (((a1[50] + a1[51] - 1) & 0x1F) << 7));
        *(_DWORD *)unint64_t v33 = 134218240;
        *(void *)&v33[4] = v31;
        *(_WORD *)&v33[12] = 2048;
        *(void *)&v33[14] = v32;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Pose history now between %f s and %f s", v33, 0x16u);
      }
    }
  }
}

void sub_1003982A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 480);
  if (v4
    && *(double *)a2 <= *(double *)(*(void *)(*(void *)(a1 + 448)
                                              + (((unint64_t)(v4 + *(void *)(a1 + 472) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                                  + 32 * ((v4 + *(void *)(a1 + 472) - 1) & 0x7F)))
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100437160();
    }
  }
  else
  {
    unint64_t v5 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = *(double *)a2;
      uint64_t v7 = *(void *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      int v11 = 134218752;
      double v12 = v6;
      __int16 v13 = 2048;
      *(void *)__p = v7;
      *(_WORD *)&__p[8] = 2048;
      uint64_t v15 = v8;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Received peer pose at %f s, peer position:[%0.2f,%0.2f,%0.2f] m", (uint8_t *)&v11, 0x2Au);
    }
    double v10 = *(double *)a2;
    if (!*(unsigned char *)(a1 + 24) || *(double *)(a1 + 16) < v10)
    {
      *(double *)(a1 + 16) = v10;
      *(unsigned char *)(a1 + 24) = 1;
      double v10 = *(double *)a2;
    }
    sub_10034863C(*(void *)(a1 + 64), (uint64_t)&v11, v10, *(double *)(a2 + 8), *(double *)(a2 + 16), *(double *)(a2 + 24));
    sub_10033C8E4(a1 + 72, (uint64_t *)&v11);
    if (*(void *)&__p[2])
    {
      uint64_t v15 = *(void *)&__p[2];
      operator delete(*(void **)&__p[2]);
    }
    sub_10039847C((void *)(a1 + 440), a2);
    sub_1003978DC((uint64_t *)a1);
  }
}

void sub_100398458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10039847C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10039A6E8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *uint64_t v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_10039850C(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 36);
  uint64_t v5 = qword_1008ABDE0;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v7 = *((void *)a2 + 1);
    double v8 = *((float *)a2 + 4);
    double v9 = *((float *)a2 + 6);
    double v10 = *((float *)a2 + 7);
    int v30 = 134218752;
    uint64_t v31 = v7;
    __int16 v32 = 2048;
    double v33 = v8;
    __int16 v34 = 2048;
    double v35 = v9;
    __int16 v36 = 2048;
    double v37 = v10;
    int v11 = "#sa_algo_moving_findee,Received range result at %f s, distance: %0.2f m, az: %3.2f rad, el: %3.2f rad";
    double v12 = v5;
    uint32_t v13 = 42;
  }
  else
  {
    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v14 = *((void *)a2 + 1);
    double v15 = *((float *)a2 + 4);
    int v30 = 134218240;
    uint64_t v31 = v14;
    __int16 v32 = 2048;
    double v33 = v15;
    int v11 = "#sa_algo_moving_findee,Received range result at %f s, distance: %0.2f m";
    double v12 = v5;
    uint32_t v13 = 22;
  }
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v30, v13);
LABEL_7:
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = 1;
  }
  if (*(_DWORD *)(a1 + 416) != 2)
  {
    uint64_t v17 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      uint64_t v18 = "#sa_algo_moving_findee,VIO Tracking is not normal";
      goto LABEL_18;
    }
LABEL_23:
    double v28 = *((double *)a2 + 1);
    if (!*(unsigned char *)(a1 + 24) || *(double *)(a1 + 16) < v28)
    {
      *(double *)(a1 + 16) = v28;
      *(unsigned char *)(a1 + 24) = 1;
    }
    return;
  }
  if (!*(void *)(a1 + 408))
  {
    uint64_t v17 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      uint64_t v18 = "#sa_algo_moving_findee,Pose history is empty";
      goto LABEL_18;
    }
    goto LABEL_23;
  }
  double v16 = *((double *)a2 + 1);
  if (v16 < *(double *)(*(void *)(*(void *)(a1 + 376) + ((*(void *)(a1 + 400) >> 2) & 0x3FFFFFFFFFFFFFF8))
                       + ((*(void *)(a1 + 400) & 0x1FLL) << 7)))
  {
    uint64_t v17 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      uint64_t v18 = "#sa_algo_moving_findee,Measurement earlier than the first pose in history";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v30, 2u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a1 + 312))
  {
LABEL_22:
    long long v19 = *a2;
    long long v20 = a2[1];
    long long v21 = a2[3];
    *(_OWORD *)(a1 + 160) = a2[2];
    *(_OWORD *)(a1 + 176) = v21;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v20;
    long long v22 = a2[4];
    long long v23 = a2[5];
    long long v24 = a2[7];
    *(_OWORD *)(a1 + 224) = a2[6];
    *(_OWORD *)(a1 + 240) = v24;
    *(_OWORD *)(a1 + 192) = v22;
    *(_OWORD *)(a1 + 208) = v23;
    long long v25 = a2[8];
    long long v26 = a2[9];
    long long v27 = a2[10];
    *(void *)(a1 + 304) = *((void *)a2 + 22);
    *(_OWORD *)(a1 + 272) = v26;
    *(_OWORD *)(a1 + 288) = v27;
    *(_OWORD *)(a1 + 256) = v25;
    *(unsigned char *)(a1 + 312) = 1;
    sub_100397220(a1);
    goto LABEL_23;
  }
  if (v16 > *(double *)(a1 + 136))
  {
    *(unsigned char *)(a1 + 312) = 0;
    goto LABEL_22;
  }
  double v29 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30) = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,Measurement earlier than the cached measurement - rejecting range measurement", (uint8_t *)&v30, 2u);
  }
}

void sub_100398808(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (!*(unsigned char *)(a1 + 120))
  {
    *(void *)a2 = 0;
LABEL_5:
    sub_100398EDC(a1, a2);
    return;
  }
  uint64_t v4 = *(void *)(a1 + 77);
  v54[0] = *(void *)(a1 + 72);
  *(void *)((char *)v54 + 5) = v4;
  __p = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v5 = (uint64_t)sub_10034CB80(&__p, *(const void **)(a1 + 88), *(void *)(a1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 6));
  uint64_t v58 = *(void *)(a1 + 112);
  switch(LODWORD(v54[0]))
  {
    case 0:
    case 1:
    case 6:
      *(_DWORD *)a2 = 0;
      int v6 = 1;
      goto LABEL_7;
    case 2:
    case 3:
      *(_DWORD *)a2 = 0;
      int v6 = 256;
LABEL_7:
      *(_DWORD *)(a2 + 4) = v6;
      goto LABEL_8;
    case 4:
      *(void *)a2 = 0;
      goto LABEL_8;
    case 5:
      uint64_t v8 = *(void *)(a1 + 480);
      if (!v8)
      {
        long long v25 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
          sub_1004371D8(v25, v26, v27, v28, v29, v30, v31, v32);
        }
        goto LABEL_47;
      }
      uint64_t v9 = *(void *)(a1 + 408);
      if (!v9)
      {
        double v33 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
          sub_100437210(v33, v34, v35, v36, v37, v38, v39, v40);
        }
LABEL_47:
        *(_OWORD *)(a2 + 336) = 0u;
        *(_OWORD *)(a2 + 352) = 0u;
        *(_OWORD *)(a2 + 304) = 0u;
        *(_OWORD *)(a2 + 320) = 0u;
        *(_OWORD *)(a2 + 272) = 0u;
        *(_OWORD *)(a2 + 288) = 0u;
        *(_OWORD *)(a2 + 240) = 0u;
        *(_OWORD *)(a2 + 256) = 0u;
        *(_OWORD *)(a2 + 208) = 0u;
        *(_OWORD *)(a2 + 224) = 0u;
        *(_OWORD *)(a2 + 176) = 0u;
        *(_OWORD *)(a2 + 192) = 0u;
        *(_OWORD *)(a2 + 144) = 0u;
        *(_OWORD *)(a2 + 160) = 0u;
        *(_OWORD *)(a2 + 112) = 0u;
        *(_OWORD *)(a2 + 128) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 96) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 366) = 0u;
        sub_100398EDC(a1, a2);
        goto LABEL_48;
      }
      unint64_t v10 = v9 + *(void *)(a1 + 400) - 1;
      uint64_t v11 = *(void *)(a1 + 376);
      unint64_t v12 = v10 >> 5;
      unint64_t v13 = v10 & 0x1F;
      double v14 = *(double *)(*(void *)(v11 + 8 * (v10 >> 5)) + (v13 << 7));
      double v15 = *(double *)(*(void *)(*(void *)(a1 + 448)
                                  + (((unint64_t)(v8 + *(void *)(a1 + 472) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * ((v8 + *(void *)(a1 + 472) - 1) & 0x7F));
      double v16 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        *(double *)&uint8_t buf[4] = v14 - v15;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v14;
        *(_WORD *)&buf[22] = 2048;
        double v61 = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#sa_algo_moving_findee,#stalePeerVIO Peer VIO is stale by %f s, last self pose time %f s, last peer pose time %f s", buf, 0x20u);
        uint64_t v11 = *(void *)(a1 + 376);
        unint64_t v50 = *(void *)(a1 + 408) + *(void *)(a1 + 400) - 1;
        unint64_t v12 = v50 >> 5;
        unint64_t v13 = v50 & 0x1F;
      }
      uint64_t v17 = *((void *)__p + 2);
      *(_OWORD *)buf = *(_OWORD *)__p;
      *(void *)&buf[16] = v17;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      int v53 = 0;
      sub_10033EF20((float64x2_t *)buf, (float32x4_t *)(*(void *)(v11 + 8 * v12) + (v13 << 7)), (uint64_t)&v51);
      if (v14 - v15 >= 2.0)
      {
        double v41 = sub_100399DB0(v14 - v15, v18, (uint64_t)&v51);
        BOOL v42 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
        if (v41 < 22.5)
        {
          if (v42) {
            sub_1004373B8();
          }
          goto LABEL_25;
        }
        if (v42) {
          sub_100437430();
        }
        sub_100399E34(a1, 1);
        *(_OWORD *)(a2 + 366) = 0u;
        *(_OWORD *)(a2 + 336) = 0u;
        *(_OWORD *)(a2 + 352) = 0u;
        *(_OWORD *)(a2 + 304) = 0u;
        *(_OWORD *)(a2 + 320) = 0u;
        *(_OWORD *)(a2 + 272) = 0u;
        *(_OWORD *)(a2 + 288) = 0u;
        *(_OWORD *)(a2 + 240) = 0u;
        *(_OWORD *)(a2 + 256) = 0u;
        *(_OWORD *)(a2 + 208) = 0u;
        *(_OWORD *)(a2 + 224) = 0u;
        *(_OWORD *)(a2 + 176) = 0u;
        *(_OWORD *)(a2 + 192) = 0u;
        *(_OWORD *)(a2 + 144) = 0u;
        *(_OWORD *)(a2 + 160) = 0u;
        *(_OWORD *)(a2 + 112) = 0u;
        *(_OWORD *)(a2 + 128) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 96) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
        sub_100398EDC(a1, a2);
LABEL_48:
        char v7 = 0;
        goto LABEL_10;
      }
LABEL_25:
      sub_100399E34(a1, 0);
      long long v19 = qword_1008ABDE0;
      uint64_t v5 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
      if (v5)
      {
        if (!*(unsigned char *)(a1 + 24)) {
          sub_10000AE44();
        }
        sub_100437354(a1, (float *)&v51, v59, v19);
      }
      if (!*(unsigned char *)(a1 + 8) || !*(unsigned char *)(a1 + 24)) {
        sub_10000AE44();
      }
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void *)(a1 + 16);
      int v22 = v51;
      if (*(unsigned char *)(a2 + 192)) {
        *(unsigned char *)(a2 + 192) = 0;
      }
      *(void *)(a2 + 8) = v20;
      *(void *)(a2 + 16) = v21;
      *(_DWORD *)(a2 + 24) = v22;
      *(_DWORD *)(a2 + 28) = 1;
      *(unsigned char *)(a2 + 56) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(unsigned char *)(a2 + 60) = 0;
      *(unsigned char *)(a2 + 64) = 0;
      *(unsigned char *)(a2 + 68) = 0;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(_WORD *)(a2 + 88) = 0;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 112) = 0u;
      *(_OWORD *)(a2 + 121) = 0u;
      *(unsigned char *)(a2 + 160) = 0;
      *(void *)(a2 + 176) = 0;
      *(void *)(a2 + 184) = 0;
      *(void *)(a2 + 168) = 0;
      *(unsigned char *)(a2 + 192) = 1;
      float v23 = *(float *)&v52;
      if (!*(unsigned char *)(a2 + 224)) {
        *(unsigned char *)(a2 + 224) = 1;
      }
      *(double *)(a2 + 216) = v23;
      if ((_BYTE)v53)
      {
        *(double *)(a2 + 200) = *((float *)&v51 + 1) * 180.0 / 3.14159265;
        *(unsigned char *)(a2 + 208) = 1;
        *(_DWORD *)(a2 + 364) = 1;
        *(unsigned char *)(a2 + 368) = 1;
        uint64_t v5 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
        if (v5) {
          sub_1004372DC();
        }
      }
      if (!*(unsigned char *)(a1 + 120)) {
        sub_10000AE44();
      }
      int v24 = *(_DWORD *)(a1 + 80);
      switch(v24)
      {
        case 2:
          *(_DWORD *)a2 = 1;
          float v45 = *((float *)&v52 + 1);
          if (!*(unsigned char *)(a2 + 248)) {
            *(unsigned char *)(a2 + 248) = 1;
          }
          *(double *)(a2 + 240) = v45;
          uint64_t v46 = qword_1008ABDE0;
          uint64_t v5 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
          if (v5) {
            sub_100437248((uint64_t *)buf, v46);
          }
          *(float32x2_t *)&long long v48 = vcvt_f32_f64(*(float64x2_t *)buf);
          *(float *)&unsigned int v47 = *(double *)&buf[16];
          *((void *)&v48 + 1) = __PAIR64__(*(unsigned int *)&buf[12], v47);
          if (!*(unsigned char *)(a2 + 304)) {
            *(unsigned char *)(a2 + 304) = 1;
          }
          *(_OWORD *)(a2 + 288) = v48;
          if (*((float *)&v52 + 1) >= 2.5)
          {
            int v49 = 2;
          }
          else if (*((float *)&v52 + 1) <= -2.5)
          {
            int v49 = 3;
          }
          else
          {
            int v49 = 1;
          }
          *(_DWORD *)(a2 + 232) = v49;
          break;
        case 1:
          if (*((float *)&v52 + 1) > -2.5 && *((float *)&v52 + 1) < 2.5) {
            int v44 = 1;
          }
          else {
            int v44 = 4;
          }
          *(_DWORD *)(a2 + 232) = v44;
          *(_DWORD *)a2 = 0;
          goto LABEL_62;
        case 0:
          *(_DWORD *)a2 = 0;
          *(_DWORD *)(a2 + 232) = 0;
LABEL_62:
          *(unsigned char *)(a2 + 6) = 1;
          break;
      }
LABEL_8:
      if (!*(unsigned char *)(a1 + 24)) {
        sub_10000AE44();
      }
      sub_100399F70(v5, (_DWORD *)(a2 + 232));
      char v7 = 1;
LABEL_10:
      if (__p)
      {
        uint64_t v56 = __p;
        operator delete(__p);
      }
      if (v7)
      {
        if (*(unsigned char *)(a2 + 192)
          && !*(_DWORD *)a2
          && *(_DWORD *)(a1 + 416) != 2
          && *(unsigned char *)(a1 + 432)
          && *(double *)(a1 + 424) < 500.0)
        {
          *(unsigned char *)(a2 + 7) = 1;
        }
        goto LABEL_5;
      }
      return;
    default:
      goto LABEL_8;
  }
}

void sub_100398E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100398EDC(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 24)) {
    return result;
  }
  uint64_t v3 = result;
  double v4 = *(double *)(result + 16);
  if (*(unsigned char *)(result + 56))
  {
    if (v4 - *(double *)(result + 48) < 0.2) {
      return result;
    }
  }
  *(double *)(result + 48) = v4;
  *(unsigned char *)(result + 56) = 1;
  sub_1002363E4((uint64_t)v84);
  sub_1002363E4((uint64_t)v82);
  sub_1002363E4((uint64_t)v80);
  sub_1002363E4((uint64_t)v78);
  sub_1002363E4((uint64_t)v76);
  sub_1002363E4((uint64_t)v74);
  sub_1002363E4((uint64_t)v72);
  sub_1002363E4((uint64_t)v70);
  uint64_t v5 = v82[0];
  *(_DWORD *)((char *)&v82[1] + *(void *)(v82[0] - 24)) = *(_DWORD *)((unsigned char *)&v82[1] + *(void *)(v82[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v82[2] + *(void *)(v5 - 24)) = 2;
  uint64_t v6 = v80[0];
  *(_DWORD *)((char *)&v80[1] + *(void *)(v80[0] - 24)) = *(_DWORD *)((unsigned char *)&v80[1] + *(void *)(v80[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v80[2] + *(void *)(v6 - 24)) = 1;
  uint64_t v7 = v78[0];
  *(_DWORD *)((char *)&v78[1] + *(void *)(v78[0] - 24)) = *(_DWORD *)((unsigned char *)&v78[1] + *(void *)(v78[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v78[2] + *(void *)(v7 - 24)) = 2;
  uint64_t v8 = v74[0];
  *(_DWORD *)((char *)&v74[1] + *(void *)(v74[0] - 24)) = *(_DWORD *)((unsigned char *)&v74[1] + *(void *)(v74[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v74[2] + *(void *)(v8 - 24)) = 2;
  uint64_t v9 = v72[0];
  *(_DWORD *)((char *)&v72[1] + *(void *)(v72[0] - 24)) = *(_DWORD *)((unsigned char *)&v72[1] + *(void *)(v72[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v72[2] + *(void *)(v9 - 24)) = 2;
  uint64_t v10 = v70[0];
  *(_DWORD *)((char *)&v70[1] + *(void *)(v70[0] - 24)) = *(_DWORD *)((unsigned char *)&v70[1] + *(void *)(v70[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v70[2] + *(void *)(v10 - 24)) = 2;
  if (*(unsigned char *)(a2 + 192))
  {
    std::ostream::operator<<();
    if (!*(unsigned char *)(a2 + 192)) {
      goto LABEL_104;
    }
    uint64_t v11 = (void *)std::ostream::operator<<();
    unint64_t v12 = " m";
    uint64_t v13 = 2;
  }
  else
  {
    unint64_t v12 = "-";
    uint64_t v13 = 1;
    sub_100056628(v84, (uint64_t)"-", 1);
    uint64_t v11 = v82;
  }
  sub_100056628(v11, (uint64_t)v12, v13);
  if (*(unsigned char *)(a2 + 208))
  {
    double v14 = (void *)std::ostream::operator<<();
    double v15 = " deg";
    uint64_t v16 = 4;
  }
  else
  {
    double v15 = "-";
    double v14 = v80;
    uint64_t v16 = 1;
  }
  sub_100056628(v14, (uint64_t)v15, v16);
  if (*(unsigned char *)(a2 + 224))
  {
    uint64_t v17 = (void *)std::ostream::operator<<();
    uint64_t v18 = " m";
    uint64_t v19 = 2;
  }
  else
  {
    uint64_t v18 = "-";
    uint64_t v17 = v78;
    uint64_t v19 = 1;
  }
  sub_100056628(v17, (uint64_t)v18, v19);
  if (*(unsigned char *)(a2 + 248))
  {
    uint64_t v20 = (void *)std::ostream::operator<<();
    uint64_t v21 = " m";
    uint64_t v22 = 2;
  }
  else
  {
    uint64_t v21 = "-";
    uint64_t v20 = v74;
    uint64_t v22 = 1;
  }
  sub_100056628(v20, (uint64_t)v21, v22);
  uint64_t v23 = *(int *)(a2 + 232);
  if (v23 <= 4) {
    sub_100056628(v76, (uint64_t)(&off_100863010)[v23], qword_1004C4990[v23]);
  }
  if (*(unsigned char *)(a2 + 272))
  {
    sub_100056628(v72, (uint64_t)"[", 1);
    if (!*(unsigned char *)(a2 + 272)) {
      goto LABEL_104;
    }
    int v24 = (void *)std::ostream::operator<<();
    sub_100056628(v24, (uint64_t)", ", 2);
    if (!*(unsigned char *)(a2 + 272)) {
      goto LABEL_104;
    }
    long long v25 = (void *)std::ostream::operator<<();
    sub_100056628(v25, (uint64_t)", ", 2);
    if (!*(unsigned char *)(a2 + 272)) {
      goto LABEL_104;
    }
    uint64_t v26 = (void *)std::ostream::operator<<();
    uint64_t v27 = "]";
  }
  else
  {
    uint64_t v27 = "-";
    uint64_t v26 = v72;
  }
  sub_100056628(v26, (uint64_t)v27, 1);
  if (!*(unsigned char *)(a2 + 304))
  {
    uint64_t v31 = "-";
    uint64_t v30 = v70;
    uint64_t v32 = 1;
    goto LABEL_31;
  }
  sub_100056628(v70, (uint64_t)"[", 1);
  if (!*(unsigned char *)(a2 + 304)
    || (uint64_t v28 = (void *)std::ostream::operator<<(), sub_100056628(v28, (uint64_t)", ", 2), !*(unsigned char *)(a2 + 304))
    || (uint64_t v29 = (void *)std::ostream::operator<<(), sub_100056628(v29, (uint64_t)", ", 2), !*(unsigned char *)(a2 + 304)))
  {
LABEL_104:
    sub_10000AE44();
  }
  uint64_t v30 = (void *)std::ostream::operator<<();
  uint64_t v31 = "] m";
  uint64_t v32 = 3;
LABEL_31:
  sub_100056628(v30, (uint64_t)v31, v32);
  uint64_t v33 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    if (v69 >= 0) {
      uint64_t v34 = &v68;
    }
    else {
      uint64_t v34 = v68;
    }
    if (!*(unsigned char *)(v3 + 24)) {
      sub_10000AE44();
    }
    uint64_t v35 = *(void *)(v3 + 16);
    if (*(_DWORD *)a2 == 1) {
      uint64_t v36 = "YES";
    }
    else {
      uint64_t v36 = "NO";
    }
    if (*(unsigned char *)(a2 + 4)) {
      uint64_t v37 = "YES";
    }
    else {
      uint64_t v37 = "NO";
    }
    if (*(unsigned char *)(a2 + 5)) {
      uint64_t v38 = "YES";
    }
    else {
      uint64_t v38 = "NO";
    }
    if (*(unsigned char *)(a2 + 6)) {
      uint64_t v39 = "YES";
    }
    else {
      uint64_t v39 = "NO";
    }
    if (*(unsigned char *)(a2 + 7)) {
      uint64_t v40 = "YES";
    }
    else {
      uint64_t v40 = "NO";
    }
    std::stringbuf::str();
    if (v67 >= 0) {
      double v41 = &v66;
    }
    else {
      double v41 = v66;
    }
    std::stringbuf::str();
    if (v65 >= 0) {
      BOOL v42 = &v64;
    }
    else {
      BOOL v42 = v64;
    }
    int v53 = v42;
    std::stringbuf::str();
    if (v63 >= 0) {
      unint64_t v43 = &v62;
    }
    else {
      unint64_t v43 = v62;
    }
    uint64_t v51 = v33;
    uint64_t v52 = v43;
    std::stringbuf::str();
    unint64_t v50 = v39;
    if (v61 >= 0) {
      int v44 = &v60;
    }
    else {
      int v44 = v60;
    }
    float v45 = &v58;
    std::stringbuf::str();
    if (v59 < 0) {
      float v45 = v58;
    }
    std::stringbuf::str();
    std::stringbuf::str();
    uint64_t v46 = &v56;
    if (v57 < 0) {
      uint64_t v46 = v56;
    }
    if (v55 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)buf = 136318466;
    long long v87 = v34;
    __int16 v88 = 2048;
    uint64_t v89 = v35;
    __int16 v90 = 2080;
    v91 = v36;
    __int16 v92 = 2080;
    __int16 v93 = v37;
    __int16 v94 = 2080;
    v95 = v38;
    __int16 v96 = 2080;
    __int16 v97 = v50;
    __int16 v98 = 2080;
    __int16 v99 = v40;
    __int16 v100 = 2080;
    __int16 v101 = v41;
    __int16 v102 = 2080;
    __int16 v103 = v53;
    __int16 v104 = 2080;
    __int16 v105 = v52;
    __int16 v106 = 2080;
    __int16 v107 = v44;
    __int16 v108 = 2080;
    double v109 = v45;
    __int16 v110 = 2080;
    double v111 = v46;
    __int16 v112 = 2080;
    double v113 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,DeviceID: %s\n\tTimestamp: %f\n\tSolution convergence: %s, insufficientDisplacement: %s, insufficientHorizontalPositionDiversity: %s, insufficientVerticalPositionDiversity: %s, insufficientLighting: %s\n\tRange: %s, Horizontal angle: %s, Horizontal distance: %s, Vertical distance: %s, Vertical state: %s, Direction: %s, World Position: %s", buf, 0x8Eu);
    if (v55 < 0) {
      operator delete(__p);
    }
    if (v57 < 0) {
      operator delete(v56);
    }
    if (v59 < 0) {
      operator delete(v58);
    }
    if (v61 < 0) {
      operator delete(v60);
    }
    if (v63 < 0) {
      operator delete(v62);
    }
    if (v65 < 0) {
      operator delete(v64);
    }
    if (v67 < 0) {
      operator delete(v66);
    }
    if (v69 < 0) {
      operator delete(v68);
    }
  }
  if (v71 < 0) {
    operator delete((void *)v70[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v72[0] = v48;
  *(void *)((char *)v72 + *(void *)(v48 - 24)) = v49;
  if (v73 < 0) {
    operator delete((void *)v72[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v74[0] = v48;
  *(void *)((char *)v74 + *(void *)(v48 - 24)) = v49;
  if (v75 < 0) {
    operator delete((void *)v74[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v76[0] = v48;
  *(void *)((char *)v76 + *(void *)(v48 - 24)) = v49;
  if (v77 < 0) {
    operator delete((void *)v76[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v78[0] = v48;
  *(void *)((char *)v78 + *(void *)(v48 - 24)) = v49;
  if (v79 < 0) {
    operator delete((void *)v78[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v80[0] = v48;
  *(void *)((char *)v80 + *(void *)(v48 - 24)) = v49;
  if (v81 < 0) {
    operator delete((void *)v80[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v82[0] = v48;
  *(void *)((char *)v82 + *(void *)(v48 - 24)) = v49;
  if (v83 < 0) {
    operator delete((void *)v82[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v84[0] = v48;
  *(void *)((char *)v84 + *(void *)(v48 - 24)) = v49;
  if (v85 < 0) {
    operator delete((void *)v84[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100399C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  sub_10023657C((uint64_t)&a60);
  sub_10023657C((uint64_t)&a72);
  sub_10023657C((uint64_t)&STACK[0x300]);
  sub_10023657C((uint64_t)&STACK[0x408]);
  sub_10023657C((uint64_t)&STACK[0x510]);
  sub_10023657C((uint64_t)&STACK[0x618]);
  sub_10023657C((uint64_t)&STACK[0x720]);
  sub_10023657C((uint64_t)&STACK[0x828]);
  _Unwind_Resume(a1);
}

long double sub_100399DB0(double a1, uint64_t a2, uint64_t a3)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004374B8();
  }
  return atan(a1 / *(float *)(a3 + 8)) * 180.0 / 3.14159265;
}

void sub_100399E34(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 488) != a2)
  {
    double v4 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "NO";
      unint64_t v6 = *(void *)(a1 + 408) + *(void *)(a1 + 400) - 1;
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 376) + ((v6 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v6 & 0x1F) << 7));
      unint64_t v8 = *(void *)(a1 + 480) + *(void *)(a1 + 472) - 1;
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 448) + ((v8 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v8 & 0x7F));
      if (a2) {
        uint64_t v5 = "YES";
      }
      int v10 = 136315650;
      uint64_t v11 = v5;
      __int16 v12 = 2048;
      uint64_t v13 = v7;
      __int16 v14 = 2048;
      uint64_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#sa_algo_moving_findee,#stalePeerVIO Peer pose history stale status changed to %s, last self pose at %f s, last peer pose at %f s ", (uint8_t *)&v10, 0x20u);
    }
    *(unsigned char *)(a1 + 488) = a2;
  }
}

void sub_100399F70(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100437534();
      }
      break;
    case 1:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004375A0();
      }
      break;
    case 2:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_10043760C();
      }
      break;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100437678();
      }
      break;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004376E4();
      }
      break;
    default:
      return;
  }
}

__n128 sub_10039A0B4(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10039AA00(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 112);
  long long v15 = *(_OWORD *)(a2 + 128);
  *(void *)(v8 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  *(__n128 *)(v8 + 96) = result;
  ++a1[5];
  return result;
}

unint64_t sub_10039A18C(int64x2_t *a1, void *a2, char *a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  uint64_t v6 = (char **)(v5 + 8 * (v4 / 0x1A));
  if (a1[1].i64[0] == v5) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = &(*v6)[152 * (v4 % 0x1A)];
  }
  if (a3 == v7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = 26 * ((char **)a2 - v6)
  }
       - 0x79435E50D79435E5 * ((uint64_t)&a3[-*a2] >> 3)
       + 0x79435E50D79435E5 * ((v7 - *v6) >> 3);
  v27[0].n128_u64[0] = v5 + 8 * (v4 / 0x1A);
  v27[0].n128_u64[1] = (unint64_t)v7;
  sub_10039ADF0(v27, v8);
  uint64_t v9 = a1[2].i64[1];
  int64_t v10 = v27[0].n128_u64[1] - *(void *)v27[0].n128_u64[0];
  unint64_t v11 = 0x86BCA1AF286BCA1BLL * (v10 >> 3);
  if (v8 <= (unint64_t)(v9 - 1) >> 1)
  {
    if (v10 < -151)
    {
      long long v15 = (void *)(v27[0].n128_u64[0] - 8 * ((24 - v11) / 0x1A));
      uint64_t v16 = (char *)(*v15 + 152 * (26 * ((24 - v11) / 0x1A) - (24 - v11)) + 3800);
    }
    else
    {
      long long v15 = (void *)(v27[0].n128_u64[0] + 8 * ((v11 + 1) / 0x1A));
      uint64_t v16 = (char *)(*v15 + 152 * ((v11 + 1) % 0x1A));
    }
    sub_10039AEA4(v6, v7, (char **)v27[0].n128_u64[0], (char *)v27[0].n128_u64[1], v15, v16, v27);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1004B59B0);
    sub_10039AD18((uint64_t)a1, 1);
  }
  else
  {
    if (v10 < -151)
    {
      unint64_t v17 = 24 - v11;
      uint64_t v13 = (void *)(v27[0].n128_u64[0] - 8 * (v17 / 0x1A));
      long long v14 = (unsigned char *)(*v13 + 152 * (26 * (v17 / 0x1A) - v17) + 3800);
    }
    else
    {
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (void *)(v27[0].n128_u64[0] + 8 * (v12 / 0x1A));
      long long v14 = (unsigned char *)(*v13 + 152 * (v12 % 0x1A));
    }
    unint64_t v18 = a1[2].i64[0] + v9;
    uint64_t v19 = a1->i64[1];
    uint64_t v20 = (unsigned char **)(v19 + 8 * (v18 / 0x1A));
    if (a1[1].i64[0] == v19) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = &(*v20)[152 * (v18 % 0x1A)];
    }
    sub_10039B058(v13, v14, v20, v21, (uint64_t)v27);
    --a1[2].i64[1];
    sub_10039AD78(a1, 1);
  }
  unint64_t v22 = a1[2].u64[0];
  uint64_t v23 = a1->i64[1];
  int v24 = (void *)(v23 + 8 * (v22 / 0x1A));
  if (a1[1].i64[0] == v23) {
    unint64_t v25 = 0;
  }
  else {
    unint64_t v25 = *v24 + 152 * (v22 % 0x1A);
  }
  v27[0].n128_u64[0] = (unint64_t)v24;
  v27[0].n128_u64[1] = v25;
  sub_10039ADF0(v27, v8);
  return v27[0].n128_u64[0];
}

void *sub_10039A4B0(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 5) + 16 * (a4 - a2) - ((a3 - *(void *)a2) >> 5);
  }
  uint64_t v7 = a1[1];
  unint64_t v8 = (char *)(v7 + 8 * (a1[4] >> 7));
  if (a1[2] == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + 32 * (a1[4] & 0x7FLL);
  }
  uint64_t v33 = (char **)(v7 + 8 * (a1[4] >> 7));
  uint64_t v34 = (char *)v9;
  if (v9 == a3) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((a3 - *(void *)a2) >> 5) + 16 * (a2 - v8) - ((v9 - *(void *)v8) >> 5);
  }
  unint64_t v11 = (char **)sub_10039B1DC((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      uint64_t v19 = v11;
      uint64_t v20 = v12;
      uint64_t v21 = v33;
      unint64_t v22 = v34;
      uint64_t v23 = sub_10039B1DC((uint64_t)&v32, v6);
      sub_10039B240(v21, v22, v19, v20, v23, v24, &v35);
      unint64_t v25 = v34;
      if (v34 != v36)
      {
        uint64_t v26 = v33;
        do
        {
          v25 += 32;
          uint64_t v34 = v25;
          if (v25 - *v26 == 4096)
          {
            uint64_t v27 = v26[1];
            ++v26;
            unint64_t v25 = v27;
            uint64_t v33 = v26;
            uint64_t v34 = v27;
          }
        }
        while (v25 != v36);
      }
      uint64_t v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((sub_10037C354((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      uint64_t v13 = (char **)sub_10039B1DC((uint64_t)&v32, v6);
      unint64_t v15 = a1[4] + a1[5];
      uint64_t v16 = a1[1];
      unint64_t v17 = (char **)(v16 + 8 * (v15 >> 7));
      if (a1[2] == v16) {
        unint64_t v18 = 0;
      }
      else {
        unint64_t v18 = &(*v17)[32 * (v15 & 0x7F)];
      }
      __n128 v35 = v32;
      sub_10039B3CC(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_100380260(a1, 1) & 1) != 0)
        ;
    }
  }
  uint64_t v29 = a1[1];
  if (a1[2] == v29) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 8 * (a1[4] >> 7)) + 32 * (a1[4] & 0x7FLL);
  }
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 7);
  v35.n128_u64[1] = v30;
  return sub_10039B1DC((uint64_t)&v35, v10);
}

void sub_10039A6E8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100151930((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      __n128 v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_100151A50(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10039A9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10039AA00(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1A;
  unint64_t v4 = v2 - 26;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xF70uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xF70uLL);
    sub_100151930((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      __n128 v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xF70uLL);
  sub_100151A50(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10039ACCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10039AD18(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1A) {
    a2 = 1;
  }
  if (v2 < 0x34) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 26;
  }
  return v4 ^ 1u;
}

uint64_t sub_10039AD78(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 26 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1A) {
    a2 = 1;
  }
  if (v5 < 0x34) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *sub_10039ADF0(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x79435E50D79435E5 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 25 - v3;
      uint64_t v6 = &v2[-(v5 / 0x1A)];
      double *result = v6;
      unint64_t v4 = *v6 + 152 * (26 * (v5 / 0x1A) - v5) + 3800;
    }
    else
    {
      double *result = &v2[v3 / 0x1A];
      unint64_t v4 = v2[v3 / 0x1A] + 152 * (v3 % 0x1A);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_10039AEA4@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10039AF74(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 3952;
    }
    uint64_t v18 = *a1 + 3952;
    uint64_t v19 = a2;
  }
  sub_10039AF74(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10039AF74@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0x86BCA1AF286BCA1BLL * ((v11 - a1) >> 3);
      }
      v11 -= 152 * v12;
      a4 -= 152 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 152 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 3952);
    }
    if ((char *)(*v6 + 3952) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10039B058(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  unint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (i = (unsigned char *)(*a1 + 3952); ; i = v12 + 3952)
    {
      sub_10039B0EC(a2, v8, i, v7, &v14);
      unint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_10039B0EC(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10039B0EC@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0x86BCA1AF286BCA1BLL * ((v10 - __dst + 3952) >> 3);
      unint64_t v12 = (uint64_t)(0x86BCA1AF286BCA1BLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0x86BCA1AF286BCA1BLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 152 * v12);
      }
      v7 += 152 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }
    __dst += 152 * v12;
    if ((char *)*(v6 - 1) + 3952 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void *sub_10039B1DC(uint64_t a1, uint64_t a2)
{
  double result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 5);
    if (v4 < 1) {
      result -= (unint64_t)(127 - v4) >> 7;
    }
    else {
      result += (unint64_t)v4 >> 7;
    }
  }
  return result;
}

__n128 sub_10039B240@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    unint64_t v12 = *a3;
    uint64_t v14 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10039B310(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      unint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  sub_10039B310(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10039B310@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    int64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 5 >= v12 >> 5) {
        uint64_t v13 = v12 >> 5;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 5;
      }
      v11 -= 32 * v13;
      a4 -= 32 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 32 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10039B3CC(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    int64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }
  else
  {
    unint64_t v8 = a1 + 1;
    sub_10039B49C(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_10039B49C(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    uint64_t v10 = *a3;
    int64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }
  sub_10039B49C(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_10039B49C@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 5 >= v11 >> 5 ? v11 >> 5 : (a3 - v9) >> 5;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 32 * v12);
      }
      v9 += 32 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 32 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

uint64_t sub_10039B580()
{
  qword_1008AB770 = 0;
  qword_1008AB778 = 0;
  qword_1008AB780 = 0;
  v0 = operator new(0x40uLL);
  qword_1008AB778 = (uint64_t)(v0 + 4);
  qword_1008AB780 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_1004C4928;
  v0[1] = unk_1004C4938;
  v0[2] = xmmword_1004C4948;
  v0[3] = unk_1004C4958;
  qword_1008AB770 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AB770, (void *)&_mh_execute_header);
  qword_1008AB790 = 0;
  unk_1008AB798 = 0;
  qword_1008AB788 = 0;
  uint64_t v1 = operator new(0x10uLL);
  qword_1008AB790 = (uint64_t)(v1 + 1);
  unk_1008AB798 = v1 + 1;
  _OWORD *v1 = xmmword_1004C4968;
  qword_1008AB788 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AB788, (void *)&_mh_execute_header);
}

uint64_t sub_10039B658(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (!v3) {
    __assert_rtn("RoseSupervisorInterface", "RoseSupervisorInterface.mm", 44, "fDispatchQueue");
  }
  uint64_t v4 = v3;
  unint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = &stru_100863058;

  return a1;
}

void sub_10039B6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10039B6F8(id a1, const void *a2)
{
  id v3 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)a2 + 2) - *((void *)a2 + 1);
    int v5 = 134217984;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received HID event, but no handler defined. Data len: %zu", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_10039B7A8(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "~RoseSupervisorInterface()", v5, 2u);
  }
  io_connect_t v3 = *(_DWORD *)(a1 + 8);
  if (v3) {
    IOServiceClose(v3);
  }

  return a1;
}

BOOL sub_10039B844(uint64_t a1)
{
  kern_return_t v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t v9[32];
  uint8_t buf[24];

  uint64_t v1 = (io_connect_t *)(a1 + 8);
  if (*(_DWORD *)(a1 + 8)) {
    return 1;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100437804();
  }
  CFDictionaryRef v3 = IOServiceNameMatching("rose-supervisor");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v3);
  io_object_t v5 = MatchingService;
  if (MatchingService)
  {
    uint64_t v6 = IOServiceOpen(MatchingService, mach_task_self_, 0, v1);
    IOObjectRelease(v5);
    int v7 = qword_1008ABDE0;
    if (!v6)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[RoseSupervisorInterface] Successfully connected to RoseSupervisor", v9, 2u);
      }
      return 1;
    }
    unint64_t v8 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_10039B9D8(v6, v9);
      sub_100437790((char *)v9, buf, v8);
    }
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100437750();
  }
  return 0;
}

void sub_10039B9C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10039B9D8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case -536870212:
      uint64_t v2 = "kIOReturnError";
      break;
    case -536870211:
      uint64_t v2 = "kIOReturnNoMemory";
      break;
    case -536870210:
      uint64_t v2 = "kIOReturnNoResources";
      break;
    case -536870209:
      uint64_t v2 = "kIOReturnIPCError";
      break;
    case -536870208:
      uint64_t v2 = "kIOReturnNoDevice";
      break;
    case -536870207:
      uint64_t v2 = "kIOReturnNotPrivileged";
      break;
    case -536870206:
      uint64_t v2 = "kIOReturnBadArgument";
      break;
    case -536870205:
      uint64_t v2 = "kIOReturnLockedRead";
      break;
    case -536870204:
      uint64_t v2 = "kIOReturnLockedWrite";
      break;
    case -536870203:
      uint64_t v2 = "kIOReturnExclusiveAccess";
      break;
    case -536870202:
      uint64_t v2 = "kIOReturnBadMessageID";
      break;
    case -536870201:
      uint64_t v2 = "kIOReturnUnsupported";
      break;
    case -536870200:
      uint64_t v2 = "kIOReturnVMError";
      break;
    case -536870199:
      uint64_t v2 = "kIOReturnInternalError";
      break;
    case -536870198:
      uint64_t v2 = "kIOReturnIOError";
      break;
    case -536870197:
    case -536870180:
      goto LABEL_7;
    case -536870196:
      uint64_t v2 = "kIOReturnCannotLock";
      break;
    case -536870195:
      uint64_t v2 = "kIOReturnNotOpen";
      break;
    case -536870194:
      uint64_t v2 = "kIOReturnNotReadable";
      break;
    case -536870193:
      uint64_t v2 = "kIOReturnNotWritable";
      break;
    case -536870192:
      uint64_t v2 = "kIOReturnNotAligned";
      break;
    case -536870191:
      uint64_t v2 = "kIOReturnBadMedia";
      break;
    case -536870190:
      uint64_t v2 = "kIOReturnStillOpen";
      break;
    case -536870189:
      uint64_t v2 = "kIOReturnRLDError";
      break;
    case -536870188:
      uint64_t v2 = "kIOReturnDMAError";
      break;
    case -536870187:
      uint64_t v2 = "kIOReturnBusy";
      break;
    case -536870186:
      uint64_t v2 = "kIOReturnTimeout";
      break;
    case -536870185:
      uint64_t v2 = "kIOReturnOffline";
      break;
    case -536870184:
      uint64_t v2 = "kIOReturnNotReady";
      break;
    case -536870183:
      uint64_t v2 = "kIOReturnNotAttached";
      break;
    case -536870182:
      uint64_t v2 = "kIOReturnNoChannels";
      break;
    case -536870181:
      uint64_t v2 = "kIOReturnNoSpace";
      break;
    case -536870179:
      uint64_t v2 = "kIOReturnPortExists";
      break;
    case -536870178:
      uint64_t v2 = "kIOReturnCannotWire";
      break;
    case -536870177:
      uint64_t v2 = "kIOReturnNoInterrupt";
      break;
    case -536870176:
      uint64_t v2 = "kIOReturnNoFrames";
      break;
    case -536870175:
      uint64_t v2 = "kIOReturnMessageTooLarge";
      break;
    case -536870174:
      uint64_t v2 = "kIOReturnNotPermitted";
      break;
    case -536870173:
      uint64_t v2 = "kIOReturnNoPower";
      break;
    case -536870172:
      uint64_t v2 = "kIOReturnNoMedia";
      break;
    case -536870171:
      uint64_t v2 = "kIOReturnUnformattedMedia";
      break;
    case -536870170:
      uint64_t v2 = "kIOReturnUnsupportedMode";
      break;
    case -536870169:
      uint64_t v2 = "kIOReturnUnderrun";
      break;
    case -536870168:
      uint64_t v2 = "kIOReturnOverrun";
      break;
    case -536870167:
      uint64_t v2 = "kIOReturnDeviceError";
      break;
    case -536870166:
      uint64_t v2 = "kIOReturnNoCompletion";
      break;
    case -536870165:
      uint64_t v2 = "kIOReturnAborted";
      break;
    case -536870164:
      uint64_t v2 = "kIOReturnNoBandwidth";
      break;
    case -536870163:
      uint64_t v2 = "kIOReturnNotResponding";
      break;
    case -536870162:
      uint64_t v2 = "kIOReturnIsoTooOld";
      break;
    case -536870161:
      uint64_t v2 = "kIOReturnIsoTooNew";
      break;
    case -536870160:
      uint64_t v2 = "kIOReturnNotFound";
      break;
    default:
      if (a1 == -536870911)
      {
        uint64_t v2 = "kIOReturnInvalid";
      }
      else if (a1)
      {
LABEL_7:
        uint64_t v2 = "<Unknown IOReturn Value>";
      }
      else
      {
        uint64_t v2 = "kIOReturnSuccess";
      }
      break;
  }
  return sub_100004950(a2, v2);
}

void sub_10039BD80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    sub_100437864();
    if (v3) {
      goto LABEL_3;
    }
LABEL_5:
    sub_100437838();
  }
  if (!v3) {
    goto LABEL_5;
  }
LABEL_3:
  id v4 = objc_retainBlock(v3);
  io_object_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
}

BOOL sub_10039BDF8(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t *a4)
{
  kern_return_t v8;
  size_t v9;
  int v10;
  size_t v11;
  NSObject *v12;
  int v14;
  void **v15;
  void **v16;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void **v22;
  uint64_t v23;
  id (*v24)(uint64_t);
  void *v25;
  unsigned int v26;
  int v27;
  size_t __n;
  uint8_t buf[4];
  void **v30;
  __int16 v31;
  void **v32;
  unsigned char __src[1024];
  uint64_t input;

  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004378C4();
  }
  input = a2;
  bzero(__src, 0x400uLL);
  __n = 1024;
  unint64_t v8 = IOConnectCallMethod(*(_DWORD *)(a1 + 8), 3u, &input, 1u, *(const void **)a3, *(void *)(a3 + 8) - *(void *)a3, 0, 0, __src, &__n);
  uint64_t v9 = __n;
  if (__n >= 0x401) {
    sub_100437898();
  }
  uint64_t v10 = v8;
  uint64_t v11 = a4[1] - *a4;
  if (__n <= v11)
  {
    if (__n < v11) {
      a4[1] = *a4 + __n;
    }
  }
  else
  {
    sub_10003F834(a4, __n - v11);
    uint64_t v9 = __n;
  }
  if (v9) {
    memcpy((void *)*a4, __src, v9);
  }
  if (v10)
  {
    __n128 v22 = _NSConcreteStackBlock;
    uint64_t v23 = 3221225472;
    uint64_t v24 = sub_10039C088;
    unint64_t v25 = &unk_10085A880;
    uint64_t v26 = a2;
    uint64_t v27 = v10;
    AnalyticsSendEventLazy();
    uint64_t v12 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      sub_10039C190(a2, v20);
      uint64_t v14 = v21;
      long long v15 = (void **)v20[0];
      sub_10039B9D8(v10, __p);
      uint64_t v16 = v20;
      if (v14 < 0) {
        uint64_t v16 = v15;
      }
      if (v19 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315394;
      long long v30 = v16;
      long long v31 = 2080;
      long long v32 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to send command packet type: %s, return: %s", buf, 0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
    }
  }
  return v10 == 0;
}

void sub_10039C058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_10039C088(uint64_t a1)
{
  v6[0] = @"CommandType";
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  v6[1] = @"ErrorCode";
  v7[0] = v2;
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 36)];
  v7[1] = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];

  return v4;
}

void sub_10039C168(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void *sub_10039C190@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x3E) {
    uint64_t v2 = "<Unknown Command Type>";
  }
  else {
    uint64_t v2 = off_1008630D8[a1];
  }
  return sub_100004950(a2, v2);
}

BOOL sub_10039C1BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  kern_return_t v6;
  int v7;
  NSObject *v8;
  int v10;
  void **v11;
  void **v12;
  void **v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  void **v18;
  uint64_t v19;
  id (*v20)(uint64_t);
  void *v21;
  unsigned int v22;
  kern_return_t v23;
  uint8_t buf[4];
  void **v25;
  __int16 v26;
  void **v27;
  uint64_t input;

  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004378F8();
  }
  input = a2;
  uint64_t v6 = IOConnectCallMethod(*(_DWORD *)(a1 + 8), 1u, &input, 1u, *(const void **)a3, *(void *)(a3 + 8) - *(void *)a3, 0, 0, 0, 0);
  int v7 = v6;
  if (v6)
  {
    uint64_t v18 = _NSConcreteStackBlock;
    uint64_t v19 = 3221225472;
    int64_t v20 = sub_10039C3D4;
    uint64_t v21 = &unk_10085A880;
    __n128 v22 = a2;
    uint64_t v23 = v6;
    AnalyticsSendEventLazy();
    unint64_t v8 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_10039C4DC(a2, v16);
      uint64_t v10 = v17;
      uint64_t v11 = (void **)v16[0];
      sub_10039B9D8(v7, __p);
      uint64_t v12 = v16;
      if (v10 < 0) {
        uint64_t v12 = v11;
      }
      if (v15 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v25 = v12;
      uint64_t v26 = 2080;
      uint64_t v27 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to set property type: %s, return: %s", buf, 0x16u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v17 < 0) {
        operator delete(v16[0]);
      }
    }
  }
  return v7 == 0;
}

void sub_10039C3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_10039C3D4(uint64_t a1)
{
  v6[0] = @"PropertyType";
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  v6[1] = @"ErrorCode";
  v7[0] = v2;
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 36)];
  v7[1] = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];

  return v4;
}

void sub_10039C4B4(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void *sub_10039C4DC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if ((a1 - 208) > 0xB) {
    uint64_t v2 = "<Unknown Property Type>";
  }
  else {
    uint64_t v2 = off_1008632D0[a1 - 208];
  }
  return sub_100004950(a2, v2);
}

BOOL sub_10039C50C(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  kern_return_t v8;
  int v9;
  size_t v10;
  NSObject *v11;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  void **v21;
  uint64_t v22;
  id (*v23)(uint64_t);
  void *v24;
  unsigned int v25;
  int v26;
  size_t v27;
  uint8_t buf[4];
  void **v29;
  __int16 v30;
  void **v31;
  uint64_t input;

  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100437958();
  }
  input = a2;
  uint64_t v27 = 1024;
  LOBYTE(v19[0]) = 0;
  outputStruct = (char *)*a3;
  unint64_t v7 = a3[1] - *a3;
  if (v7 > 0x3FF)
  {
    if (v7 != 1024) {
      a3[1] = (unint64_t)(outputStruct + 1024);
    }
  }
  else
  {
    sub_10021DF20(a3, 1024 - v7, v19);
    outputStruct = (char *)*a3;
  }
  unint64_t v8 = IOConnectCallMethod(*(_DWORD *)(a1 + 8), 2u, &input, 1u, 0, 0, 0, 0, outputStruct, &v27);
  if (v27 >= 0x401) {
    sub_10043792C();
  }
  uint64_t v9 = v8;
  uint64_t v10 = a3[1] - *a3;
  if (v27 <= v10)
  {
    if (v27 < v10) {
      a3[1] = *a3 + v27;
    }
  }
  else
  {
    sub_10003F834(a3, v27 - v10);
  }
  if (v9)
  {
    uint64_t v21 = _NSConcreteStackBlock;
    __n128 v22 = 3221225472;
    uint64_t v23 = sub_10039C7AC;
    uint64_t v24 = &unk_10085A880;
    unint64_t v25 = a2;
    uint64_t v26 = v9;
    AnalyticsSendEventLazy();
    uint64_t v11 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      sub_10039C4DC(a2, v19);
      uint64_t v13 = v20;
      uint64_t v14 = (void **)v19[0];
      sub_10039B9D8(v9, __p);
      long long v15 = v19;
      if (v13 < 0) {
        long long v15 = v14;
      }
      if (v18 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v29 = v15;
      long long v30 = 2080;
      long long v31 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to get property type: %s, return: %s", buf, 0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }
  }
  return v9 == 0;
}

void sub_10039C77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_10039C7AC(uint64_t a1)
{
  v6[0] = @"PropertyType";
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  v6[1] = @"ErrorCode";
  v7[0] = v2;
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 36)];
  v7[1] = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];

  return v4;
}

void sub_10039C88C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

id sub_10039C8B4(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RoseSupervisorInterface::startReceivingHIDEvents()", buf, 2u);
  }
  id v3 = *(void **)(a1 + 24);
  if (!v3)
  {
    id v4 = [objc_alloc((Class)HIDEventSystemClient) initWithType:1];
    io_object_t v5 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v4;

    [*(id *)(a1 + 24) setDispatchQueue:*(void *)a1];
    [*(id *)(a1 + 24) setMatching:&off_100878BC8];
    uint64_t v6 = *(void **)(a1 + 24);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _OWORD v8[2] = sub_10039C9E0;
    v8[3] = &unk_100863078;
    v8[4] = a1;
    [v6 setEventHandler:v8];
    [*(id *)(a1 + 24) setResetHandler:&stru_100863098];
    [*(id *)(a1 + 24) setCancelHandler:&stru_1008630B8];
    id v3 = *(void **)(a1 + 24);
  }
  return [v3 activate];
}

void sub_10039C9E0(uint64_t a1, void *a2, void *a3)
{
}

void sub_10039C9E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    if (v5) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v9 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    LOWORD(v11) = 0;
    uint64_t v10 = "onHIDEvent HIDServiceClient is nil";
    goto LABEL_11;
  }
  sub_10043798C();
  if (!v5) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v6)
  {
    uint64_t v9 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    LOWORD(v11) = 0;
    uint64_t v10 = "onHIDEvent HIDEvent is nil";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v11, 2u);
    goto LABEL_12;
  }
  DataValue = (const void *)IOHIDEventGetDataValue();
  id v8 = [v6 integerValueForField:65539];
  double v11 = sub_100006A9C((unint64_t)[v6 timestamp]);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  __p = 0;
  sub_10003AD14(&__p, DataValue, (uint64_t)v8 + (void)DataValue, (size_t)v8);
  (*(void (**)(void))(*(void *)(a1 + 16) + 16))(*(void *)(a1 + 16));
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
LABEL_12:
}

void sub_10039CB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10039CB8C(id a1)
{
  uint64_t v1 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "RoseSupervisorInterface Reset handler", v2, 2u);
  }
}

void sub_10039CBF4(id a1)
{
  uint64_t v1 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "RoseSupervisorInterface Cancel handler", v2, 2u);
  }
}

double sub_10039CC60(unint64_t a1)
{
  return (double)a1 / 38400000.0;
}

double sub_10039CC74(unint64_t a1)
{
  return (double)a1 / 9.984e11;
}

double sub_10039CC88(uint64_t a1)
{
  return (double)a1 / 9.984e11;
}

uint64_t sub_10039CCA0()
{
  sub_100054E28((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v2
  v2[2] = v0;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10039CE10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100055100((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10039CE24(int a1)
{
  return ((a1 - 997) & 0xFFFFFFFD) != 0;
}

uint64_t sub_10039CE34(int a1)
{
  uint64_t result = 1;
  if (a1 > 199)
  {
    if ((a1 - 200) >= 2 && a1 != 999 && a1 != 997) {
      return result;
    }
    return 0;
  }
  if ((a1 - 100) < 0x16 || (a1 - 11) < 0xD) {
    return 0;
  }
  return result;
}

uint64_t sub_10039CE84(int a1)
{
  uint64_t result = 1;
  if (a1 > 199)
  {
    if ((a1 - 200) >= 2 && a1 != 999 && a1 != 997) {
      return result;
    }
    return 0;
  }
  if ((a1 - 100) < 0x16 || (a1 - 7) < 0x11) {
    return 0;
  }
  return result;
}

uint64_t sub_10039CED4(int a1)
{
  uint64_t result = 1;
  if (a1 <= 99)
  {
    if (a1 >= 0x18) {
      return result;
    }
    return 0;
  }
  if (a1 <= 199)
  {
    if ((a1 - 100) >= 0xD) {
      return result;
    }
    return 0;
  }
  if ((a1 - 200) < 2 || a1 == 999 || a1 == 997) {
    return 0;
  }
  return result;
}

BOOL sub_10039CF2C(int a1)
{
  return (a1 - 100) < 0x16 || (a1 - 3) <= 0x14;
}

BOOL sub_10039CF54(unsigned int a1)
{
  return a1 >= 0x18 && a1 - 200 >= 2 && a1 != 999 && a1 != 997;
}

uint64_t sub_10039CF88(int a1)
{
  uint64_t result = 1;
  if (a1 <= 99)
  {
    if (a1 >= 0x18) {
      return result;
    }
    return 0;
  }
  if (a1 > 199)
  {
    if ((a1 - 200) < 2 || a1 == 999 || a1 == 997) {
      return 0;
    }
  }
  else
  {
    unsigned int v3 = a1 - 100;
    if (v3 <= 0x13 && ((1 << v3) & 0xC6333) != 0) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10039CFF8(int a1)
{
  uint64_t result = 1;
  if (a1 <= 99)
  {
    if (a1 >= 0x18) {
      return result;
    }
    return 0;
  }
  if ((a1 - 100) < 0x16 || a1 == 999 || a1 == 997) {
    return 0;
  }
  return result;
}

BOOL sub_10039D03C(unsigned int a1)
{
  return a1 >= 0x17 && a1 != 997 && a1 != 999;
}

uint64_t sub_10039D064(int a1)
{
  uint64_t result = 1;
  if (a1 > 199)
  {
    if ((a1 - 200) >= 2 && a1 != 999 && a1 != 997) {
      return result;
    }
    return 0;
  }
  if ((a1 - 100) < 0x16 || a1 < 0x11) {
    return 0;
  }
  return result;
}

uint64_t sub_10039D0B0(int a1)
{
  uint64_t result = 1;
  if (a1 <= 99)
  {
    if (a1 >= 0x18) {
      return result;
    }
    return 0;
  }
  if (a1 <= 199)
  {
    if ((a1 - 100) >= 0x16) {
      return result;
    }
    return 0;
  }
  if (a1 == 200 || a1 == 999 || a1 == 997) {
    return 0;
  }
  return result;
}

uint64_t sub_10039D104(int a1)
{
  if (a1 == 201) {
    unsigned int v1 = 2;
  }
  else {
    unsigned int v1 = a1 == 200;
  }
  if (a1 == 999) {
    return 999;
  }
  else {
    return v1;
  }
}

uint64_t sub_10039D12C(uint64_t result)
{
  if (result >= 3) {
    return 999;
  }
  else {
    return result;
  }
}

uint64_t sub_10039D144()
{
  sub_100054E28((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v2
  v2[2] = v0;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10039D2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100055100((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10039D2C8(uint64_t result)
{
  if (result == 998) {
    unsigned int v1 = 998;
  }
  else {
    unsigned int v1 = 999;
  }
  if (result >= 0xE) {
    return v1;
  }
  else {
    return result;
  }
}

_DWORD *sub_10039D2E0@<X0>(_DWORD *result@<X0>, void *a2@<X8>)
{
  if ((int)result > 99)
  {
LABEL_3:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    switch((int)result)
    {
      case 1:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        char v3 = operator new(4uLL);
        *a2 = v3;
        int v4 = 2;
        break;
      case 2:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        char v3 = operator new(4uLL);
        *a2 = v3;
        int v4 = 3;
        break;
      case 3:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        char v3 = operator new(4uLL);
        *a2 = v3;
        int v4 = 7;
        break;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        goto LABEL_3;
      default:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        char v3 = operator new(4uLL);
        *a2 = v3;
        int v4 = 1;
        break;
    }
    *char v3 = v4;
    uint64_t result = v3 + 1;
    a2[1] = result;
    a2[2] = result;
  }
  return result;
}

void sub_10039D420(uint64_t a1, long long *a2)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 1018212795;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4((unsigned char *)(a1 + 64), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + 80) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 64) = v3;
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 136) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(void *)(a1 + 72))
    {
LABEL_6:
      atomic_store(1u, (unsigned __int8 *)(a1 + 8));
      sub_10039D5A0();
    }
  }
  else if (*(unsigned char *)(a1 + 87))
  {
    goto LABEL_6;
  }
  __assert_rtn("DispatchQueue", "roseDispatchQueue.cpp", 17, "fName.size() > 0");
}

void sub_10039D558(_Unwind_Exception *a1)
{
  std::condition_variable::~condition_variable(v2);
  std::thread::~thread(v1);
  _Unwind_Resume(a1);
}

void sub_10039D5A0()
{
}

void sub_10039D670(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__thread_struct::~__thread_struct(v10);
  operator delete();
}

void sub_10039D6B8(uint64_t a1)
{
  atomic_store(0, (unsigned __int8 *)(a1 + 8));
  uint64_t v2 = (std::condition_variable *)(a1 + 16);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 16));
  if (*(void *)a1) {
    std::thread::join((std::thread *)a1);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  sub_10039D7B4((void *)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  std::condition_variable::~condition_variable(v2);

  std::thread::~thread((std::thread *)a1);
}

void sub_10039D740(uint64_t a1, uint64_t a2)
{
  int v4 = (std::mutex *)(a1 + 136);
  std::mutex::lock((std::mutex *)(a1 + 136));
  sub_10039D8E0((void *)(a1 + 88), a2);
  std::mutex::unlock(v4);

  std::condition_variable::notify_all((std::condition_variable *)(a1 + 16));
}

void sub_10039D7A0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10039D7B4(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    long long v3 = (void **)a1[1];
  }
  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    id v6 = &v2[v5 >> 7];
    unint64_t v7 = (char *)*v6 + 32 * (v5 & 0x7F);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v7 != (char *)v8)
    {
      do
      {
        unint64_t v7 = (char *)(sub_100196E1C(v7) + 4);
        if (v7 - (unsigned char *)*v6 == 4096)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v2 = (void **)a1[1];
      long long v3 = (void **)a1[2];
    }
  }
  *int v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 64;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 128;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v13 = *v2++;
    operator delete(v13);
  }

  return sub_10003ACC4((uint64_t)a1);
}

uint64_t sub_10039D8E0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 16 * (v5 - v4) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    sub_10039D978(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F);
  }
  uint64_t result = sub_1001B1758(v8, a2);
  ++a1[5];
  return result;
}

void sub_10039D978(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100151930((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      __n128 v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_100151A50(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10039DC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10039DC90(std::__thread_struct **a1)
{
  uint64_t v10 = a1;
  unsigned int v1 = std::__thread_local_data();
  unint64_t v2 = *v10;
  std::__thread_struct *v10 = 0;
  pthread_setspecific(v1->__key_, v2);
  BOOL v3 = v10[5];
  if (SHIBYTE(v3[2].__p_) < 0) {
    BOOL v3 = (std::__thread_struct *)v3->__p_;
  }
  pthread_setname_np((const char *)v3);
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v10[4];
    __lk.__owns_ = 1;
    std::mutex::lock(__lk.__m_);
    uint64_t v5 = (unsigned __int8 *)v10[1];
    unint64_t v4 = (std::condition_variable *)v10[2];
    uint64_t v6 = v10[3];
    while (1)
    {
      unsigned __int8 v7 = atomic_load(v5);
      if ((v7 & 1) == 0 || v6[5].__p_) {
        break;
      }
      std::condition_variable::wait(v4, &__lk);
    }
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)v10[1]);
    if (v8)
    {
      sub_1001B1758((uint64_t)v12, *(void *)((char *)v10[3][1].__p_ + (((unint64_t)v10[3][4].__p_ >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * ((uint64_t)v10[3][4].__p_ & 0x7F));
      sub_10039DE98((int64x2_t *)v10[3]);
      sub_1001BE02C((uint64_t)&__lk);
      if (!v13) {
        sub_100027894();
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
      sub_100196E1C(v12);
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
  while ((v8 & 1) != 0);
  sub_10039DE44(&v10);
  return 0;
}

void sub_10039DE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
}

std::__thread_struct ***sub_10039DE44(std::__thread_struct ***result)
{
  unsigned int v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10039DF04(v1, 0);
    operator delete();
  }
  return result;
}

uint64_t sub_10039DE98(int64x2_t *a1)
{
  sub_100196E1C((void *)(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 4) & 0xFFFFFFFFFFFFFF8))
                         + 32 * (a1[2].i64[0] & 0x7F)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1004B59B0);

  return sub_10037C354((uint64_t)a1, 1);
}

std::__thread_struct *sub_10039DF04(std::__thread_struct **a1, std::__thread_struct *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__thread_struct::~__thread_struct(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10039DF54()
{
  uint64_t v0 = sub_100007D00();
  sub_10000B140(__dst, (uint64_t)v0);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "getConnectionDescriptorSize: no cached hello response. Cannot guarantee correct parsing.");
  }
  if (__dst[25] <= 0x17u && __dst[24] == 0 || v7 - 3 >= 4) {
    uint64_t v3 = 20;
  }
  else {
    uint64_t v3 = 24;
  }
  sub_10000AE90((uint64_t)__dst);
  return v3;
}

void sub_10039E000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000AE90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10039E024()
{
  uint64_t v0 = sub_100007D00();
  sub_10000B140(__dst, (uint64_t)v0);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "getTimeStatusSize: no cached hello response. Cannot guarantee correct parsing.");
  }
  if (__dst[25] <= 0x17u && __dst[24] == 0 || v7 - 3 >= 4) {
    uint64_t v3 = 32;
  }
  else {
    uint64_t v3 = 48;
  }
  sub_10000AE90((uint64_t)__dst);
  return v3;
}

void sub_10039E0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10000AE90((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_10039E0F4@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v15, *(void *)(a1 + 8));
  unint64_t v4 = std::string::append(&v15, ":");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v17 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v17 >= 0) {
    std::string::size_type v7 = HIBYTE(v17);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  unint64_t v8 = *(char *)(a1 + 16);
  if (v8 >= 4) {
    uint64_t v9 = "RFU_Critical requests ";
  }
  else {
    uint64_t v9 = off_100863330[v8];
  }
  std::string::append(a2, v9);
  uint64_t v10 = "unknown operation, ";
  if (*(unsigned char *)(a1 + 17) == 1) {
    uint64_t v10 = "to resume, ";
  }
  if (*(unsigned char *)(a1 + 17)) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = "to pause, ";
  }
  std::string::append(a2, v11);
  uint64_t v12 = "r1 status unknown";
  if (*(unsigned char *)(a1 + 18) == 1) {
    uint64_t v12 = "r1 active";
  }
  if (*(unsigned char *)(a1 + 18)) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = "r1 paused";
  }
  return std::string::append(a2, v13);
}

void sub_10039E234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039E284(uint64_t a1, __int16 a2, __int16 a3, char a4, __int16 a5, char a6, void *a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, uint64_t a16, long long a17, long long a18, long long a19, long long a20,long long a21,__int16 a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,int a34,int a35,int a36,__int16 a37,__int16 a38,__int16 a39,__int16 a40,__int16 a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,long long a50,__int16 a51,int a52,__int16 a53,int a54,__int16 a55,int a56,int a57,int a58,int a59,int a60,int a61,int a62,__int16 a63)
{
  long long v132 = a17;
  long long v131 = a18;
  long long v130 = a19;
  long long v129 = a20;
  long long v128 = a21;
  uint64_t v127 = a26;
  uint64_t v126 = a25;
  uint64_t v125 = a28;
  uint64_t v124 = a27;
  uint64_t v123 = a30;
  uint64_t v122 = a29;
  __int16 v121 = a33;
  int v120 = a35;
  __int16 v119 = a41;
  uint64_t v118 = a43;
  uint64_t v117 = a42;
  uint64_t v116 = a45;
  uint64_t v115 = a44;
  uint64_t v114 = a47;
  uint64_t v113 = a46;
  uint64_t v112 = a49;
  uint64_t v111 = a48;
  long long v110 = a50;
  __int16 v109 = a51;
  __int16 v108 = a53;
  __int16 v107 = a55;
  int v106 = a57;
  int v105 = a59;
  int v104 = a61;
  __int16 v103 = a63;
  uint64_t v102 = a65;
  uint64_t v101 = a64;
  uint64_t v100 = a67;
  uint64_t v99 = a66;
  __int16 v98 = a68;
  __int16 v97 = a69;
  __int16 v96 = a70;
  __int16 v95 = a71;
  __int16 v94 = a72;
  uint64_t v93 = a1;
  __int16 v92 = a2;
  __int16 v91 = a3;
  char v90 = a4;
  double v89 = a9;
  __int16 v88 = a5;
  char v87 = a6;
  long long v86 = a7;
  double v85 = a10;
  int v84 = a8;
  double v83 = a11;
  double v82 = a12;
  double v81 = a13;
  double v80 = a14;
  double v79 = a15;
  uint64_t v133 = a1;
  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = v91;
  *(unsigned char *)(a1 + 4) = v90;
  *(double *)(a1 + 8) = v89;
  *(_WORD *)(a1 + 16) = v88;
  *(unsigned char *)(a1 + 18) = v87;
  *(void *)(a1 + 19) = *v86;
  *(double *)(a1 + 32) = v85;
  sub_10039E810((void *)(a1 + 40), a16);
  *(double *)(a1 + 64) = v83;
  *(double *)(a1 + 72) = v82;
  *(_OWORD *)(a1 + 80) = v110;
  *(_OWORD *)(a1 + 96) = v132;
  *(_OWORD *)(a1 + 112) = v131;
  *(_OWORD *)(a1 + 128) = v130;
  *(double *)(a1 + 144) = v81;
  *(double *)(a1 + 152) = v80;
  *(_OWORD *)(a1 + 160) = v129;
  *(_OWORD *)(a1 + 176) = v128;
  *(_WORD *)(a1 + 192) = a22;
  *(_DWORD *)(a1 + 196) = a23;
  *(double *)(a1 + 200) = v79;
  *(double *)(a1 + 208) = sub_10003044C(v85);
  *(unsigned char *)(a1 + 216) = a24;
  *(void *)(a1 + 224) = v126;
  *(void *)(a1 + 232) = v127;
  *(void *)(a1 + 240) = v124;
  *(void *)(a1 + 248) = v125;
  *(void *)(a1 + 256) = v122;
  *(void *)(a1 + 264) = v123;
  *(unsigned char *)(a1 + 272) = a31;
  *(_WORD *)(a1 + 273) = v121;
  *(_DWORD *)(a1 + 276) = v120;
  *(_WORD *)(a1 + 280) = a37;
  *(_WORD *)(a1 + 282) = a38;
  *(_WORD *)(a1 + 284) = a39;
  *(_WORD *)(a1 + 286) = v119;
  *(void *)(a1 + 288) = v117;
  *(void *)(a1 + 296) = v118;
  *(void *)(a1 + 304) = v115;
  *(void *)(a1 + 312) = v116;
  *(void *)(a1 + 320) = v113;
  *(void *)(a1 + 328) = v114;
  *(void *)(a1 + 336) = v111;
  *(void *)(a1 + 344) = v112;
  *(_WORD *)(a1 + 352) = v109;
  *(_WORD *)(a1 + 354) = v108;
  *(_WORD *)(a1 + 356) = v107;
  *(_DWORD *)(a1 + 358) = v106;
  *(_DWORD *)(a1 + 362) = v105;
  *(_DWORD *)(a1 + 366) = v104;
  *(_WORD *)(a1 + 370) = v103;
  *(void *)(a1 + 376) = v101;
  *(void *)(a1 + 384) = v102;
  *(void *)(a1 + 392) = v99;
  *(void *)(a1 + 400) = v100;
  *(_WORD *)(a1 + 408) = v98;
  *(_WORD *)(a1 + 410) = v97;
  *(_WORD *)(a1 + 412) = v96;
  *(_WORD *)(a1 + 414) = v95;
  *(_WORD *)(a1 + 416) = v94;
  sub_10039E864((unsigned char *)(a1 + 424));
  sub_10039E864((unsigned char *)(a1 + 440));
  if (!v84)
  {
    v78[1] = a1 + 40;
    v78[0] = sub_10039E870(a1 + 40);
    uint64_t v77 = sub_10039E878(a1 + 40);
    while (sub_10039E880(v78, &v77))
    {
      long long v76 = (double *)sub_10039E870((uint64_t)v78);
      uint64_t v75 = 0;
      uint64_t v74 = 0;
      sub_1000304D4((long double *)&v75, (double *)&v74, *v76, v76[1]);
      *(void *)long long v76 = v75;
      *((void *)v76 + 1) = v74;
      sub_10039E894(v78);
    }
  }
  return v133;
}

void *sub_10039E810(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_10015042C(a1, *(const void **)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  return a1;
}

unsigned char *sub_10039E864(unsigned char *result)
{
  std::__thread_struct *result = 0;
  result[8] = 0;
  return result;
}

uint64_t sub_10039E870(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_10039E878(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL sub_10039E880(void *a1, void *a2)
{
  return *a1 != *a2;
}

void *sub_10039E894(void *result)
{
  *result += 56;
  return result;
}

uint64_t sub_10039E8A4(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10039E8D8(uint64_t a1, __int16 a2, __int16 a3, char a4, __int16 a5, char a6, void *a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, uint64_t a16, long long a17, long long a18, long long a19, long long a20,long long a21,__int16 a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,int a34,int a35,int a36,__int16 a37,__int16 a38,__int16 a39,__int16 a40,__int16 a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,long long a50,__int16 a51,int a52,__int16 a53,int a54,__int16 a55,int a56,int a57,int a58,int a59,int a60,int a61,int a62,__int16 a63)
{
  return sub_10039E284(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           v64,
           a33,
           v73,
           a35,
           v72,
           a37,
           a38,
           a39,
           v65,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           v71,
           a53,
           v70,
           a55,
           v69,
           a57,
           v68,
           a59,
           v67,
           a61,
           v66,
           a63);
}

uint64_t sub_10039EEA4(uint64_t a1, __int16 a2, __int16 a3, char a4, uint64_t a5, __int16 a6, __int16 a7, __int16 a8, double a9, double a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,uint64_t a21)
{
  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(unsigned char *)(a1 + 4) = a4;
  *(double *)(a1 + 8) = a9;
  *(void *)(a1 + 16) = a5;
  *(_WORD *)(a1 + 24) = a6;
  *(_WORD *)(a1 + 26) = a7;
  *(_WORD *)(a1 + 28) = a8;
  *(unsigned char *)(a1 + 30) = a11;
  *(unsigned char *)(a1 + 31) = a12;
  *(unsigned char *)(a1 + 32) = a13;
  *(unsigned char *)(a1 + 33) = a14;
  *(unsigned char *)(a1 + 34) = a15;
  *(unsigned char *)(a1 + 35) = a16;
  *(double *)(a1 + 40) = a10;
  *(unsigned char *)(a1 + 48) = a17;
  *(unsigned char *)(a1 + 49) = a18;
  *(unsigned char *)(a1 + 50) = a19;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  unint64_t v22 = *(const void **)a21;
  uint64_t v23 = *(void *)(a21 + 8);
  unint64_t v24 = (v23 - *(void *)a21) >> 4;
  *(unsigned char *)(a1 + 51) = a20;
  sub_10016DA68((void *)(a1 + 56), v22, v23, v24);
  return a1;
}

uint64_t sub_10039EF5C(uint64_t result, void *a2, uint64_t a3, int a4)
{
  *(void *)uint64_t result = 850045863;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(void *)(result + 56) = 0;
  uint64_t v4 = a2[1];
  *(void *)(result + 64) = *a2;
  *(void *)(result + 72) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 80) = a3;
  *(_DWORD *)(result + 88) = a4;
  *(_DWORD *)(result + 96) = a4;
  *(unsigned char *)(result + 100) = 1;
  *(_OWORD *)(result + 101) = 0uLL;
  *(_OWORD *)(result + 117) = 0uLL;
  *(_OWORD *)(result + 133) = 0uLL;
  *(_DWORD *)(result + 148) = 0;
  return result;
}

void sub_10039EFBC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 72);
  if (v9)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v9);
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 64);
      if (v13)
      {
        int v14 = sub_1003A6F0C(a2);
        if (v14 == 2)
        {
          if (sub_1003A72DC(a2) == 128)
          {
            unint64_t v23 = sub_1003A18CC((uint64_t)a3);
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v24 = operator new(0x20uLL);
            *unint64_t v24 = off_100863760;
            v24[1] = v13;
            v24[2] = v12;
            *((_DWORD *)v24 + 6) = v23;
            *((_WORD *)v24 + 14) = WORD2(v23);
            *(void *)&v91[8] = v24;
            uint64_t v25 = *(void *)(a1 + 80);
            sub_1001B1758((uint64_t)v63, (uint64_t)&v90);
            sub_10039D740(v25, (uint64_t)v63);
            uint64_t v26 = v63;
LABEL_15:
            sub_100196E1C(v26);
            uint64_t v27 = (int *)&v90;
            goto LABEL_41;
          }
          uint64_t v31 = *(unsigned __int16 *)(a2 + 2);
          long long v32 = "got factory test event with unknown message ID 0x%02x";
        }
        else if (v14 == 1)
        {
          if (sub_1003A7228(a2) == 83)
          {
            if (!sub_1003A1724(a1, (uint64_t)a3)) {
              goto LABEL_42;
            }
            *(void *)char v87 = 0;
            *(void *)long long v86 = 0;
            uint64_t v88 = 0;
            sub_10016D488(v86, *(const void **)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 136) - *(void *)(a1 + 128));
            *(void *)&long long v59 = v13;
            *((void *)&v59 + 1) = v12;
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            __p = 0;
            char v61 = 0;
            uint64_t v62 = 0;
            sub_10016D488(&__p, *(const void **)v86, *(uint64_t *)v87, *(void *)v87 - *(void *)v86);
            uint64_t v28 = (char *)operator new(0x30uLL);
            *(void *)uint64_t v28 = off_1008636E0;
            *(_OWORD *)(v28 + 8) = v59;
            *((void *)v28 + 4) = 0;
            *((void *)v28 + 5) = 0;
            *((void *)v28 + 3) = 0;
            sub_10016D488((void *)v28 + 3, __p, (uint64_t)v61, v61 - (unsigned char *)__p);
            *(void *)&v91[8] = v28;
            if (__p)
            {
              char v61 = __p;
              operator delete(__p);
            }
            uint64_t v29 = *(void *)(a1 + 80);
            sub_1001B1758((uint64_t)v64, (uint64_t)&v90);
            sub_10039D740(v29, (uint64_t)v64);
            sub_100196E1C(v64);
            sub_100196E1C(&v90);
            long long v30 = *(void **)v86;
            if (!*(void *)v86) {
              goto LABEL_42;
            }
            *(void *)char v87 = *(void *)v86;
            goto LABEL_32;
          }
          uint64_t v31 = *(unsigned __int16 *)(a2 + 2);
          long long v32 = "got debug event with unknown message ID 0x%02x";
        }
        else if (v14)
        {
          uint64_t v31 = *(unsigned __int8 *)(a2 + 1);
          long long v32 = "got response packet with unknown groupID 0x%02x";
        }
        else
        {
          int v22 = sub_1003A6F80(a2);
          if (v22 > 511)
          {
            switch(v22)
            {
              case 512:
                sub_1003A9600("handleEvent: got time sync event packet - expected AOP to handle this for us!", v15, v16, v17, v18, v19, v20, v21, v58);
                goto LABEL_42;
              case 513:
                sub_10039F914(a3, (uint64_t)&v90);
                v79[0] = v13;
                v79[1] = v12;
                atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                long long v80 = v90;
                long long v81 = *(_OWORD *)v91;
                long long v83 = *(_OWORD *)&v91[24];
                uint64_t v82 = *(void *)&v91[16];
                uint64_t v84 = *(void *)&v91[40];
                memset(&v91[24], 0, 24);
                memcpy(v85, v92, sizeof(v85));
                sub_1003A07D4((uint64_t)v86, (uint64_t)v79);
                sub_1003A087C(v79);
                uint64_t v38 = *(void *)(a1 + 80);
                sub_1001B1758((uint64_t)v78, (uint64_t)v86);
                sub_10039D740(v38, (uint64_t)v78);
                sub_100196E1C(v78);
                sub_100196E1C(v86);
                long long v30 = *(void **)&v91[24];
                if (!*(void *)&v91[24]) {
                  goto LABEL_42;
                }
                *(void *)&v91[32] = *(void *)&v91[24];
                break;
              case 515:
                unint64_t v39 = sub_1003A08BC((uint64_t)a3);
                atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v40 = operator new(0x20uLL);
                *uint64_t v40 = off_1008633E0;
                v40[1] = v13;
                v40[2] = v12;
                *((_DWORD *)v40 + 6) = v39;
                *((_WORD *)v40 + 14) = WORD2(v39);
                *(void *)&v91[8] = v40;
                uint64_t v41 = *(void *)(a1 + 80);
                sub_1001B1758((uint64_t)v77, (uint64_t)&v90);
                sub_10039D740(v41, (uint64_t)v77);
                uint64_t v26 = v77;
                goto LABEL_15;
              case 516:
                sub_1003A095C(a3, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v90);
                atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v42 = (char *)operator new(0x110uLL);
                long long v43 = *(_OWORD *)&v92[144];
                *(_OWORD *)(v42 + 216) = *(_OWORD *)&v92[128];
                *(_OWORD *)(v42 + 232) = v43;
                *(_OWORD *)(v42 + 248) = *(_OWORD *)&v92[160];
                long long v44 = *(_OWORD *)&v92[80];
                *(_OWORD *)(v42 + 152) = *(_OWORD *)&v92[64];
                *(_OWORD *)(v42 + 168) = v44;
                long long v45 = *(_OWORD *)&v92[112];
                *(_OWORD *)(v42 + 184) = *(_OWORD *)&v92[96];
                *(_OWORD *)(v42 + 200) = v45;
                long long v46 = *(_OWORD *)&v92[16];
                *(_OWORD *)(v42 + 88) = *(_OWORD *)v92;
                *(_OWORD *)(v42 + 104) = v46;
                long long v47 = *(_OWORD *)&v92[48];
                *(_OWORD *)(v42 + 120) = *(_OWORD *)&v92[32];
                *(_OWORD *)(v42 + 136) = v47;
                long long v48 = *(_OWORD *)v91;
                *(_OWORD *)(v42 + 24) = v90;
                *(_OWORD *)(v42 + 40) = v48;
                long long v49 = *(_OWORD *)&v91[32];
                *(_OWORD *)(v42 + 56) = *(_OWORD *)&v91[16];
                *(void *)uint64_t v42 = off_100863460;
                *((void *)v42 + 1) = v13;
                *((void *)v42 + 2) = v12;
                *((void *)v42 + 33) = *(void *)&v92[176];
                *(_OWORD *)(v42 + 72) = v49;
                double v89 = v42;
                uint64_t v50 = *(void *)(a1 + 80);
                sub_1001B1758((uint64_t)v76, (uint64_t)v86);
                sub_10039D740(v50, (uint64_t)v76);
                uint64_t v37 = v76;
                goto LABEL_40;
              case 517:
                sub_1003A73C4(a1 + 96, (uint64_t)a3, &v90);
                if (v92[8])
                {
                  v69[0] = v13;
                  v69[1] = v12;
                  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                  long long v70 = v90;
                  long long v72 = *(_OWORD *)&v91[8];
                  uint64_t v71 = *(void *)v91;
                  uint64_t v73 = *(void *)&v91[24];
                  memset(&v91[8], 0, 40);
                  long long v74 = *(_OWORD *)&v91[32];
                  uint64_t v75 = *(void *)v92;
                  *(void *)__int16 v92 = 0;
                  sub_1003A0E68((uint64_t)v86, (uint64_t)v69);
                  sub_1003A0F00((uint64_t)v69);
                  uint64_t v51 = *(void *)(a1 + 80);
                  sub_1001B1758((uint64_t)v68, (uint64_t)v86);
                  sub_10039D740(v51, (uint64_t)v68);
                  sub_100196E1C(v68);
                  sub_100196E1C(v86);
                }
                sub_1001882E8((uint64_t)&v90);
                goto LABEL_42;
              case 522:
                goto LABEL_42;
              default:
                goto LABEL_43;
            }
LABEL_32:
            operator delete(v30);
            goto LABEL_42;
          }
          switch(v22)
          {
            case 'Q':
              sub_1003A0F58((uint64_t)a3, (uint64_t)&v90);
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v52 = (char *)operator new(0x40uLL);
              *(void *)uint64_t v52 = off_100863560;
              *((void *)v52 + 1) = v13;
              *((void *)v52 + 2) = v12;
              long long v53 = *(_OWORD *)v91;
              *(_OWORD *)(v52 + 24) = v90;
              *(_OWORD *)(v52 + 40) = v53;
              *((void *)v52 + 7) = *(void *)&v91[16];
              double v89 = v52;
              uint64_t v54 = *(void *)(a1 + 80);
              sub_1001B1758((uint64_t)v67, (uint64_t)v86);
              sub_10039D740(v54, (uint64_t)v67);
              uint64_t v37 = v67;
              goto LABEL_40;
            case 'T':
              sub_1003A106C(a3, (uint64_t)&v90);
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
              long long v55 = (char *)operator new(0x48uLL);
              *(void *)long long v55 = off_1008635E0;
              *((void *)v55 + 1) = v13;
              *((void *)v55 + 2) = v12;
              long long v56 = *(_OWORD *)v91;
              *(_OWORD *)(v55 + 24) = v90;
              *(_OWORD *)(v55 + 40) = v56;
              *(_OWORD *)(v55 + 56) = *(_OWORD *)&v91[16];
              double v89 = v55;
              uint64_t v57 = *(void *)(a1 + 80);
              sub_1001B1758((uint64_t)v66, (uint64_t)v86);
              sub_10039D740(v57, (uint64_t)v66);
              uint64_t v37 = v66;
              goto LABEL_40;
            case 'U':
              sub_1003A1378(a3, (uint64_t)&v90);
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v33 = (char *)operator new(0x58uLL);
              long long v34 = *(_OWORD *)v91;
              *(_OWORD *)(v33 + 24) = v90;
              *(_OWORD *)(v33 + 40) = v34;
              long long v35 = *(_OWORD *)&v91[32];
              *(_OWORD *)(v33 + 56) = *(_OWORD *)&v91[16];
              *(void *)unint64_t v33 = off_100863660;
              *((void *)v33 + 1) = v13;
              *((void *)v33 + 2) = v12;
              *(_OWORD *)(v33 + 72) = v35;
              double v89 = v33;
              uint64_t v36 = *(void *)(a1 + 80);
              sub_1001B1758((uint64_t)v65, (uint64_t)v86);
              sub_10039D740(v36, (uint64_t)v65);
              uint64_t v37 = v65;
LABEL_40:
              sub_100196E1C(v37);
              uint64_t v27 = v86;
LABEL_41:
              sub_100196E1C(v27);
              goto LABEL_42;
          }
LABEL_43:
          uint64_t v31 = *(unsigned __int16 *)(a2 + 2);
          long long v32 = "got ranging event with unknown message ID 0x%02x";
        }
        sub_1003A9600(v32, v15, v16, v17, v18, v19, v20, v21, v31);
LABEL_42:
        sub_10001A970(v12);
        return;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  sub_10000486C("No event listener, ignoring event packet", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v58);
  if (v12) {
    goto LABEL_42;
  }
}

void sub_10039F71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  sub_100196E1C(&a37);
  sub_100196E1C(&STACK[0x390]);
  sub_1001882E8((uint64_t)&STACK[0x3B0]);
  sub_10001A970(v37);
  _Unwind_Resume(a1);
}

uint64_t sub_10039F914@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_100007D00();
  sub_10000B140(v199, (uint64_t)v6);
  if (!v201)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Got event, but no cached hello response. Cannot guarantee correct parsing.");
  }
  uint64_t v14 = __rev16(v200);
  sub_1003A94A4("RoseEventHandler::decodeRangeResultEvent: hsiVersion %hu", v7, v8, v9, v10, v11, v12, v13, v14);
  if (v14 <= 0x1D)
  {
    sub_1003A9600("Unsupported HSI version.", v15, v16, v17, v18, v19, v20, v21, v135);
    long long v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v131, "Unsupported HSI version.");
  }
  size_t v29 = *((unsigned int *)sub_100007D00() + 187);
  switch(v29)
  {
    case 1:
      int v31 = 112;
      uint64_t v32 = 88;
      uint64_t v162 = 85;
      uint64_t v33 = 84;
      uint64_t v158 = 97;
      uint64_t v160 = 92;
      uint64_t v34 = 87;
      uint64_t v35 = 82;
      uint64_t v36 = 81;
      uint64_t v37 = 79;
      uint64_t v38 = 77;
      uint64_t v30 = 75;
      break;
    case 2:
      int v31 = 112;
      uint64_t v32 = 89;
      uint64_t v162 = 86;
      uint64_t v33 = 85;
      uint64_t v158 = 98;
      uint64_t v160 = 93;
      uint64_t v34 = 88;
      uint64_t v35 = 83;
      uint64_t v36 = 82;
      uint64_t v37 = 80;
      uint64_t v38 = 78;
      uint64_t v30 = 76;
      break;
    case 0:
      uint64_t v133 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v133, "HSI version error");
    default:
      uint64_t v30 = 0;
      int v31 = 0;
      uint64_t v32 = 13;
      uint64_t v162 = 10;
      uint64_t v33 = 9;
      uint64_t v158 = 22;
      uint64_t v160 = 17;
      uint64_t v34 = 12;
      uint64_t v35 = 7;
      uint64_t v36 = 6;
      uint64_t v37 = 4;
      uint64_t v38 = 2;
      break;
  }
  uint64_t v39 = *a1;
  if (a1[1] - *a1 != v31)
  {
    sub_1003A9600("Range result event (%zu) not of expected size (%u)", v22, v23, v24, v25, v26, v27, v28, a1[1] - *a1);
    long long v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v132, "Range result event not of expected size");
  }
  int __dst = 0;
  unsigned __int8 v197 = 0;
  unint64_t v196 = 0;
  __int16 v195 = 0;
  uint64_t v194 = 0;
  int v193 = 0;
  int v192 = 0;
  int v191 = 0;
  int v190 = 0;
  int v189 = 0;
  int v188 = 0;
  __int16 v187 = 0;
  unsigned int v186 = 0;
  __int16 v185 = 0;
  char v184 = 0;
  int v183 = 0;
  char v182 = 0;
  __int16 v181 = 0;
  int v180 = 0;
  __int16 v179 = 0;
  __int16 v178 = 0;
  int v177 = 0;
  unsigned __int8 v176 = 0;
  __int16 v175 = 0;
  uint64_t v174 = 0;
  uint64_t v173 = 0;
  uint64_t v172 = 0;
  uint64_t v171 = 0;
  __int16 v170 = 0;
  unsigned __int8 v169 = 0;
  sub_1003E0514((char *)(v39 + 4), 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*a1 + 6), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*a1 + 8), 1uLL, &v197, 1);
  sub_1003E0514((char *)(*a1 + 9), 8uLL, &v196, 1);
  sub_1003E0514((char *)(*a1 + 17), 2uLL, &v195, 1);
  char v164 = *(unsigned char *)(*a1 + 19);
  sub_1003E0514((char *)(*a1 + 22), 4uLL, &v193, 1);
  sub_1003E0514((char *)(*a1 + 26), 2uLL, (unsigned char *)&v192 + 2, 1);
  sub_1003E0514((char *)(*a1 + 28), 2uLL, &v192, 1);
  sub_1003E0514((char *)(*a1 + 30), 2uLL, (unsigned char *)&v191 + 2, 1);
  sub_1003E0514((char *)(*a1 + 32), 2uLL, &v191, 1);
  sub_1003E0514((char *)(*a1 + 34), 4uLL, &v190, 1);
  sub_1003E0514((char *)(*a1 + 38), 2uLL, (unsigned char *)&v189 + 2, 1);
  sub_1003E0514((char *)(*a1 + 40), 2uLL, &v189, 1);
  sub_1003E0514((char *)(*a1 + 42), 2uLL, (unsigned char *)&v188 + 2, 1);
  sub_1003E0514((char *)(*a1 + 44), 2uLL, &v188, 1);
  sub_1003E0514((char *)(*a1 + 46), 2uLL, &v187, 1);
  sub_1003E0514((char *)(*a1 + 48), 4uLL, &v186, 1);
  sub_1003E0514((char *)(*a1 + 52), 1uLL, (unsigned char *)&v185 + 1, 1);
  sub_1003E0514((char *)(*a1 + 53), 1uLL, &v185, 1);
  sub_1003E0514((char *)(*a1 + 54), 1uLL, &v184, 1);
  sub_1003E0514((char *)(*a1 + 55), 2uLL, (unsigned char *)&v183 + 2, 1);
  sub_1003E0514((char *)(*a1 + 57), 2uLL, &v183, 1);
  sub_1003E0514((char *)(*a1 + 59), 8uLL, &v194, 1);
  sub_1003E0514((char *)(*a1 + 67), 1uLL, &v182, 1);
  sub_1003E0514((char *)(*a1 + 68), 2uLL, &v181, 1);
  sub_1003E0514((char *)(*a1 + 70), 2uLL, (unsigned char *)&v180 + 2, 1);
  sub_1003E0514((char *)(*a1 + 72), 2uLL, &v180, 1);
  if (v29 == 1)
  {
    uint64_t v40 = (__int16 *)((char *)&v179 + 1);
    size_t v41 = v29;
  }
  else
  {
    if (v29 != 2) {
      goto LABEL_15;
    }
    uint64_t v40 = &v179;
    size_t v41 = 2;
  }
  sub_1003E0514((char *)(*a1 + 74), v41, v40, 1);
LABEL_15:
  sub_1003E0514((char *)(*a1 + v30), 2uLL, &v178, 1);
  sub_1003E0514((char *)(*a1 + v38), 2uLL, (unsigned char *)&v177 + 2, 1);
  sub_1003E0514((char *)(*a1 + v37), 2uLL, &v177, 1);
  sub_1003E0514((char *)(*a1 + v36), 1uLL, &v176, 1);
  if (v29 == 2)
  {
    sub_1003E0514((char *)(*a1 + v35), 2uLL, &v175, 1);
    sub_1003E0514((char *)(*a1 + v33), 1uLL, (unsigned char *)&v170 + 1, 1);
    sub_1003E0514((char *)(*a1 + v162), 1uLL, &v170, 1);
    int v49 = 1;
    sub_1003E0514((char *)(*a1 + v32), 1uLL, &v169, 1);
  }
  else
  {
    if (v29 == 1)
    {
      sub_1003E0514((char *)(*a1 + v35), 5uLL, &v174, 1);
      sub_1003E0514((char *)(*a1 + v34), 5uLL, &v173, 1);
      sub_1003E0514((char *)(*a1 + v160), 5uLL, &v172, 1);
      sub_1003E0514((char *)(*a1 + v158), 5uLL, &v171, 1);
    }
    int v49 = 0;
  }
  __int16 v50 = sub_1003A82F0(HIWORD(__dst), v42, v43, v44, v45, v46, v47, v48);
  char v58 = sub_1003A7FD8(v197, v51, v52, v53, v54, v55, v56, v57);
  int v59 = SHIWORD(v191);
  int v60 = (__int16)v191;
  int v61 = SHIBYTE(v185);
  int v62 = (char)v185;
  int v63 = v184;
  LOWORD(v4) = v181;
  LOWORD(v3) = HIWORD(v180);
  LOWORD(v2) = v180;
  int v70 = *((_DWORD *)sub_100007D00() + 187);
  double v71 = 0.0;
  int v163 = v60;
  int v161 = v59;
  switch(v70)
  {
    case 1:
      char v72 = sub_1003A8CFC(HIBYTE(v179), 1, v64, v65, v66, v67, v68, v69);
      LOBYTE(v157) = 0;
      uint64_t v159 = 0;
      unsigned __int8 v154 = 0;
      uint64_t v155 = 0;
      unsigned __int8 v156 = 0;
      __int16 v153 = 0;
      break;
    case 2:
      unint64_t v73 = sub_1003A8F28(v179);
      char v72 = 9;
      if (v74)
      {
        unsigned __int8 v156 = v73;
        __int16 v153 = 256;
        uint64_t v157 = HIDWORD(v73) & 0xFFFFFF;
        if ((v73 & 0xFF0000) != 0) {
          char v72 = BYTE1(v73);
        }
        else {
          char v72 = 9;
        }
        unsigned __int8 v154 = BYTE5(v73);
        uint64_t v155 = BYTE6(v73);
      }
      else
      {
        unsigned __int8 v156 = 0;
        LOBYTE(v157) = 0;
        unsigned __int8 v154 = 0;
        uint64_t v155 = 0;
        __int16 v153 = 0;
      }
      double v71 = (double)v175 * 0.25;
      uint64_t v159 = 1;
      break;
    case 0:
      v134 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v134, "Unknown HSI version");
    default:
      LOBYTE(v157) = 0;
      uint64_t v159 = 0;
      unsigned __int8 v154 = 0;
      uint64_t v155 = 0;
      unsigned __int8 v156 = 0;
      __int16 v153 = 0;
      char v72 = 9;
      break;
  }
  __p = 0;
  v166 = 0;
  unint64_t v168 = 0;
  unsigned __int8 v75 = v189;
  unsigned int v76 = v189 & 0xF;
  unsigned int v145 = v76;
  if (v76 == 15)
  {
    uint64_t v77 = 0;
  }
  else
  {
    __int16 v78 = HIWORD(v192);
    __int16 v79 = v192;
    long long v80 = (double *)sub_100028A48((uint64_t)&v168, 1uLL);
    uint64_t v82 = &v80[7 * v81];
    *long long v80 = (double)v78;
    v80[1] = (double)v79;
    v80[2] = (double)v76 * 0.0666666667;
    *((unsigned char *)v80 + 24) = 0;
    *((unsigned char *)v80 + 32) = 0;
    *((unsigned char *)v80 + 40) = 0;
    *((unsigned char *)v80 + 48) = 0;
    uint64_t v77 = v80 + 7;
    long long v83 = (double *)__p;
    uint64_t v84 = (double *)v166;
    if (__p != v166)
    {
      do
      {
        long long v85 = *(_OWORD *)(v83 - 7);
        long long v86 = *(_OWORD *)(v83 - 5);
        long long v87 = *(_OWORD *)(v83 - 3);
        *(v80 - 1) = *(v83 - 1);
        *(_OWORD *)(v80 - 3) = v87;
        *(_OWORD *)(v80 - 5) = v86;
        *(_OWORD *)(v80 - 7) = v85;
        v80 -= 7;
        v83 -= 7;
      }
      while (v83 != v84);
      long long v83 = v84;
    }
    v166 = v80;
    __p = v77;
    unint64_t v168 = (unint64_t)v82;
    if (v83) {
      operator delete(v83);
    }
    __p = v77;
    unsigned __int8 v75 = v189;
  }
  int v152 = v63;
  unsigned int v88 = v75 >> 4;
  if (v88 != 15)
  {
    double v89 = (double)SHIWORD(v183);
    double v90 = (double)v88 * 0.0666666667;
    double v91 = (double)(__int16)v183;
    if ((unint64_t)v77 >= v168)
    {
      uint64_t v93 = 0x6DB6DB6DB6DB6DB7 * (((char *)v77 - (unsigned char *)v166) >> 3);
      if ((unint64_t)(v93 + 1) > 0x492492492492492) {
        sub_1000267C4();
      }
      unint64_t v94 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v168 - (void)v166) >> 3);
      if (v94 <= v93 + 1) {
        unint64_t v94 = v93 + 1;
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v168 - (void)v166) >> 3)) >= 0x249249249249249) {
        unint64_t v95 = 0x492492492492492;
      }
      else {
        unint64_t v95 = v94;
      }
      if (v95) {
        __int16 v96 = (char *)sub_100028A48((uint64_t)&v168, v95);
      }
      else {
        __int16 v96 = 0;
      }
      __int16 v97 = (double *)&v96[8 * (((char *)v77 - (unsigned char *)v166) >> 3)];
      __int16 v98 = &v96[56 * v95];
      *__int16 v97 = v89;
      v97[1] = v91;
      v97[2] = v90;
      *((unsigned char *)v97 + 24) = 0;
      *((unsigned char *)v97 + 32) = 0;
      *((unsigned char *)v97 + 40) = 0;
      *((unsigned char *)v97 + 48) = 0;
      __int16 v92 = v97 + 7;
      uint64_t v99 = (double *)__p;
      uint64_t v100 = (double *)v166;
      if (__p != v166)
      {
        do
        {
          long long v101 = *(_OWORD *)(v99 - 7);
          long long v102 = *(_OWORD *)(v99 - 5);
          long long v103 = *(_OWORD *)(v99 - 3);
          *(v97 - 1) = *(v99 - 1);
          *(_OWORD *)(v97 - 3) = v103;
          *(_OWORD *)(v97 - 5) = v102;
          *(_OWORD *)(v97 - 7) = v101;
          v97 -= 7;
          v99 -= 7;
        }
        while (v99 != v100);
        uint64_t v99 = v100;
      }
      v166 = v97;
      __p = v92;
      unint64_t v168 = (unint64_t)v98;
      if (v99) {
        operator delete(v99);
      }
    }
    else
    {
      double *v77 = v89;
      v77[1] = v91;
      v77[2] = v90;
      *((unsigned char *)v77 + 24) = 0;
      *((unsigned char *)v77 + 32) = 0;
      *((unsigned char *)v77 + 40) = 0;
      __int16 v92 = v77 + 7;
      *((unsigned char *)v77 + 48) = 0;
    }
    __p = v92;
  }
  unsigned int v147 = v88;
  char v149 = v72;
  char v151 = v58;
  __int16 v150 = v50;
  uint64_t v202 = v194;
  __int16 v148 = __dst;
  double v104 = sub_10039CC60(v196);
  __int16 v146 = v195;
  int v105 = v193;
  int v106 = v190;
  unsigned int v107 = HIWORD(v189);
  __int16 v108 = HIWORD(v188);
  __int16 v109 = v188;
  __int16 v110 = v187;
  int v111 = v186;
  double v112 = sub_10039CC60(v186);
  uint64_t v113 = HIBYTE(v170) | 0x100;
  if (v49) {
    uint64_t v113 = 0;
  }
  uint64_t v114 = v170 | 0x100;
  if (v49) {
    uint64_t v114 = 0;
  }
  *((void *)&v144 + 1) = v159;
  *(double *)&long long v144 = v71;
  unint64_t v142 = v157 | (unint64_t)(v155 << 16) | ((unint64_t)v154 << 8);
  *((void *)&v140 + 1) = 1;
  *(double *)&long long v140 = (double)v109;
  *((void *)&v139 + 1) = 1;
  *(double *)&long long v139 = (double)v108;
  *((void *)&v138 + 1) = 1;
  *(double *)&long long v138 = (double)v152;
  *((void *)&v137 + 1) = 1;
  *(double *)&long long v137 = (double)v62;
  *((void *)&v136 + 1) = 1;
  *(double *)&long long v136 = (double)v61;
  sub_10039E8D8(a2, v150, v148, v151, v146, v164, &v202, 0, v104, (double)v105, (double)v161 * 0.25, (double)v163 * 0.25, (double)v106, (double)v107, v112, (uint64_t)&v166, v136, v137, v138,
    v139,
    v140,
    v110,
    v111,
    v182,
    COERCE__INT64((double)v4 * 0.01),
    1,
    COERCE__INT64((double)v3 * 0.01),
    1,
    COERCE__INT64((double)v2 * 0.01),
    1,
    v149,
    v141,
    v153 & 0x100 | v156,
    (v153 & 0x100 | (unint64_t)v156) >> 32,
    v142,
    SHIDWORD(v142),
    v178,
    SHIWORD(v177),
    v177,
    v143,
    v176 | 0x100,
    v174,
    v174 != 0,
    v173,
    v173 != 0,
    v172,
    v172 != 0,
    v171,
    v171 != 0,
    v144,
    v113,
    SHIDWORD(v113),
    v114,
    SHIDWORD(v114),
    v169 | 0x100,
    (v169 | 0x100uLL) >> 32,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  if (*(unsigned char *)(a2 + 4) != 16)
  {
    if (v145 == 15) {
      sub_10000486C("Ignoring AOA hypothesis primary with az %d el %d intunc %d", v115, v116, v117, v118, v119, v120, v121, SHIWORD(v192));
    }
    else {
      sub_1003A94A4("AOA hypothesis primary: az %f el %f unc %f", v115, v116, v117, v118, v119, v120, v121, *(void *)v166);
    }
    if (v147 == 15) {
      sub_10000486C("Ignoring AOA hypothesis alt1 with az %d el %d intunc %d", v122, v123, v124, v125, v126, v127, v128, SHIWORD(v183));
    }
    else {
      sub_1003A94A4("AOA hypothesis alt1: az %f el %f unc %f", v122, v123, v124, v125, v126, v127, v128, *((void *)__p - 7));
    }
  }
  if (v166)
  {
    __p = v166;
    operator delete(v166);
  }
  return sub_10000AE90((uint64_t)v199);
}

void sub_1003A072C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  sub_10000AE90((uint64_t)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A07D4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = (char *)operator new(0x1E0uLL);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(void *)unint64_t v4 = off_100863360;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 56);
  *((void *)v4 + 10) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  memcpy(v4 + 88, (const void *)(a2 + 80), 0x181uLL);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void *sub_1003A087C(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    sub_10001A970(v3);
  }
  return a1;
}

unint64_t sub_1003A08BC(uint64_t a1)
{
  uint64_t v1 = a1;
  int __dst = 0;
  unsigned __int16 v18 = 0;
  sub_1003E0514((char *)(*(void *)a1 + 4), 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*(void *)v1 + 6), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*(void *)v1 + 8), 2uLL, &v18, 1);
  LODWORD(v1) = sub_1003A82F0(HIWORD(__dst), v2, v3, v4, v5, v6, v7, v8);
  uint64_t v16 = sub_1003A82F0(v18, v9, v10, v11, v12, v13, v14, v15);
  return (v16 << 32) | ((unint64_t)(unsigned __int16)__dst << 16) | v1;
}

double sub_1003A095C@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = *a1;
  if (a1[1] - *a1 != 96)
  {
    sub_1003A9600("Range debug event (%zu) not of expected size (%u)", a2, a3, a4, a5, a6, a7, a8, a1[1] - *a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Range debug event not of expected size");
  }
  uint64_t v11 = a1;
  __int16 __dst = 0;
  unsigned __int8 v69 = 0;
  __int16 v68 = 0;
  char v67 = 0;
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v64 = 0;
  unint64_t v62 = 0;
  unint64_t v63 = 0;
  unint64_t v60 = 0;
  unint64_t v61 = 0;
  int v58 = 0;
  int v59 = 0;
  int v56 = 0;
  int v57 = 0;
  int v54 = 0;
  int v55 = 0;
  int v53 = 0;
  sub_1003E0514((char *)(v10 + 4), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*v11 + 6), 1uLL, &v69, 1);
  sub_1003E0514((char *)(*v11 + 7), 2uLL, &v68, 1);
  sub_1003E0514((char *)(*v11 + 9), 1uLL, &v67, 1);
  sub_1003E0514((char *)(*v11 + 12), 8uLL, &v65, 1);
  sub_1003E0514((char *)(*v11 + 20), 8uLL, &v64, 1);
  sub_1003E0514((char *)(*v11 + 28), 8uLL, &v63, 1);
  sub_1003E0514((char *)(*v11 + 36), 8uLL, &v62, 1);
  sub_1003E0514((char *)(*v11 + 44), 8uLL, &v61, 1);
  sub_1003E0514((char *)(*v11 + 52), 8uLL, &v60, 1);
  sub_1003E0514((char *)(*v11 + 60), 2uLL, (unsigned char *)&v59 + 2, 1);
  sub_1003E0514((char *)(*v11 + 62), 2uLL, &v59, 1);
  sub_1003E0514((char *)(*v11 + 64), 2uLL, (unsigned char *)&v58 + 2, 1);
  sub_1003E0514((char *)(*v11 + 66), 2uLL, &v58, 1);
  sub_1003E0514((char *)(*v11 + 68), 2uLL, (unsigned char *)&v57 + 2, 1);
  sub_1003E0514((char *)(*v11 + 70), 2uLL, &v57, 1);
  sub_1003E0514((char *)(*v11 + 72), 2uLL, (unsigned char *)&v56 + 2, 1);
  sub_1003E0514((char *)(*v11 + 74), 2uLL, &v56, 1);
  sub_1003E0514((char *)(*v11 + 76), 2uLL, (unsigned char *)&v55 + 2, 1);
  sub_1003E0514((char *)(*v11 + 78), 2uLL, &v55, 1);
  sub_1003E0514((char *)(*v11 + 80), 2uLL, (unsigned char *)&v54 + 2, 1);
  sub_1003E0514((char *)(*v11 + 82), 2uLL, &v54, 1);
  sub_1003E0514((char *)(*v11 + 84), 2uLL, (unsigned char *)&v53 + 2, 1);
  sub_1003E0514((char *)(*v11 + 86), 2uLL, &v53, 1);
  sub_1003E0514((char *)(*v11 + 88), 8uLL, &v66, 1);
  LOBYTE(v11) = sub_1003A7FD8(v69, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v19 = v66;
  double v51 = (double)SHIWORD(v57) * 0.25;
  double v52 = (double)SHIWORD(v58) * 0.25;
  double v49 = (double)(__int16)v57 * 0.25;
  double v50 = (double)(__int16)v58 * 0.25;
  double v47 = (double)SHIWORD(v56) * 0.25;
  double v48 = (double)(__int16)v56 * 0.25;
  double v45 = (double)SHIWORD(v54) * 0.25;
  double v46 = (double)SHIWORD(v55) * 0.25;
  double v43 = (double)(__int16)v54 * 0.25;
  double v44 = (double)(__int16)v55 * 0.25;
  double v20 = (double)SHIWORD(v53) * 0.25;
  double v42 = (double)(__int16)v53 * 0.25;
  __int16 v21 = __dst;
  __int16 v22 = v68;
  char v23 = v67;
  double v24 = sub_10039CC74(v65);
  double v25 = sub_10039CC74(v64);
  double v26 = sub_10039CC74(v63);
  double v27 = sub_10039CC74(v62);
  double v28 = sub_10039CC74(v61);
  double v29 = sub_10039CC74(v60);
  double v30 = sub_10039CC74(HIWORD(v59));
  double v31 = sub_10039CC74((unsigned __int16)v59);
  unint64_t v33 = v64;
  unint64_t v32 = v65;
  unint64_t v35 = v62;
  unint64_t v34 = v63;
  unint64_t v37 = v60;
  unint64_t v36 = v61;
  uint64_t v38 = HIWORD(v59);
  uint64_t v39 = (unsigned __int16)v59;
  *(_WORD *)a9 = v21;
  *(unsigned char *)(a9 + 2) = (_BYTE)v11;
  *(_WORD *)(a9 + 4) = v22;
  *(unsigned char *)(a9 + 6) = v23;
  *(void *)(a9 + 7) = v19;
  *(double *)(a9 + 24) = v24;
  *(double *)(a9 + 32) = v25;
  *(double *)(a9 + 40) = v26;
  *(double *)(a9 + 48) = v27;
  *(double *)(a9 + 56) = v28;
  *(double *)(a9 + 64) = v29;
  *(double *)(a9 + 72) = v30;
  *(double *)(a9 + 80) = v31;
  *(void *)(a9 + 88) = v32;
  *(void *)(a9 + 96) = v33;
  *(void *)(a9 + 104) = v34;
  *(void *)(a9 + 112) = v35;
  *(void *)(a9 + 120) = v36;
  *(void *)(a9 + 128) = v37;
  *(void *)(a9 + 136) = v38;
  *(void *)(a9 + 144) = v39;
  *(double *)(a9 + 152) = v52;
  *(double *)(a9 + 160) = v50;
  *(double *)(a9 + 168) = v51;
  *(double *)(a9 + 176) = v49;
  *(double *)(a9 + 184) = v47;
  *(double *)(a9 + 192) = v48;
  *(double *)(a9 + 200) = v46;
  *(double *)(a9 + 208) = v44;
  *(double *)(a9 + 216) = v45;
  *(double *)(a9 + 224) = v43;
  double result = v42;
  *(double *)(a9 + 232) = v20;
  *(double *)(a9 + 240) = v42;
  *(void *)(a9 + 16) = v19;
  return result;
}

void sub_1003A0E54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A0E68(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)operator new(0x60uLL);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(void *)uint64_t v4 = off_1008634E0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v4 + 24) = v5;
  *((void *)v4 + 5) = *(void *)(a2 + 32);
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 40);
  *((void *)v4 + 8) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 64);
  *((void *)v4 + 11) = *(void *)(a2 + 80);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t sub_1003A0F00(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 64);
  sub_10016D6F0(&v4);
  uint64_t v4 = (void **)(a1 + 40);
  sub_10016D794(&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

uint64_t sub_1003A0F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 __dst = 0;
  int v22 = 0;
  char v21 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  sub_1003E0514((char *)(*(void *)a1 + 4), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*(void *)a1 + 6), 4uLL, &v22, 1);
  sub_1003E0514((char *)(*(void *)a1 + 10), 1uLL, &v21, 1);
  sub_1003E0514((char *)(*(void *)a1 + 11), 8uLL, &v20, 1);
  sub_1003E0514((char *)(*(void *)a1 + 19), 8uLL, &v19, 1);
  sub_1003E0514((char *)(*(void *)a1 + 27), 4uLL, (unsigned char *)&v18 + 4, 1);
  sub_1003E0514((char *)(*(void *)a1 + 31), 4uLL, &v18, 1);
  uint64_t result = sub_1003A82F0(__dst, v4, v5, v6, v7, v8, v9, v10);
  int v12 = v22;
  char v13 = v21;
  uint64_t v15 = v19;
  uint64_t v14 = v20;
  int v17 = v18;
  int v16 = HIDWORD(v18);
  *(_WORD *)a2 = result;
  *(_DWORD *)(a2 + 4) = v12;
  *(unsigned char *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(_DWORD *)(a2 + 36) = v17;
  return result;
}

uint64_t sub_1003A106C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  int __dst = 0;
  char v44 = 0;
  __int16 v43 = 0;
  int v42 = 0;
  uint64_t v41 = 0;
  int v39 = 0;
  int v40 = 0;
  int v38 = 0;
  __int16 v37 = 0;
  __int16 v36 = 0;
  __int16 v35 = 0;
  __int16 v34 = 0;
  __int16 v33 = 0;
  uint64_t v4 = (char *)(*a1 + 4);
  __int16 v32 = 0;
  sub_1003E0514(v4, 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*v2 + 6), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*v2 + 8), 1uLL, &v44, 1);
  sub_1003E0514((char *)(*v2 + 9), 2uLL, &v43, 1);
  sub_1003E0514((char *)(*v2 + 12), 4uLL, &v42, 1);
  sub_1003E0514((char *)(*v2 + 16), 8uLL, &v41, 1);
  sub_1003E0514((char *)(*v2 + 24), 2uLL, (unsigned char *)&v40 + 2, 1);
  sub_1003E0514((char *)(*v2 + 26), 2uLL, &v40, 1);
  sub_1003E0514((char *)(*v2 + 28), 4uLL, &v39, 1);
  sub_1003E0514((char *)(*v2 + 32), 2uLL, (unsigned char *)&v38 + 2, 1);
  sub_1003E0514((char *)(*v2 + 34), 2uLL, &v38, 1);
  sub_1003E0514((char *)(*v2 + 36), 1uLL, (unsigned char *)&v37 + 1, 1);
  sub_1003E0514((char *)(*v2 + 65), 1uLL, &v37, 1);
  sub_1003E0514((char *)(*v2 + 66), 1uLL, (unsigned char *)&v36 + 1, 1);
  sub_1003E0514((char *)(*v2 + 67), 1uLL, &v36, 1);
  sub_1003E0514((char *)(*v2 + 68), 2uLL, &v35, 1);
  sub_1003E0514((char *)(*v2 + 70), 1uLL, (unsigned char *)&v34 + 1, 1);
  sub_1003E0514((char *)(*v2 + 71), 1uLL, &v34, 1);
  sub_1003E0514((char *)(*v2 + 72), 1uLL, (unsigned char *)&v33 + 1, 1);
  sub_1003E0514((char *)(*v2 + 73), 1uLL, &v33, 1);
  sub_1003E0514((char *)(*v2 + 74), 2uLL, &v32, 1);
  uint64_t result = sub_1003A82F0(HIWORD(__dst), v5, v6, v7, v8, v9, v10, v11);
  __int16 v13 = __dst;
  char v14 = v44;
  __int16 v15 = v43;
  int v16 = v42;
  uint64_t v17 = v41;
  __int16 v18 = HIWORD(v40);
  __int16 v19 = v40;
  int v20 = v39;
  __int16 v21 = HIWORD(v38);
  __int16 v22 = v38;
  char v23 = HIBYTE(v37);
  char v24 = v37;
  char v25 = HIBYTE(v36);
  char v26 = v36;
  __int16 v27 = v35;
  char v28 = HIBYTE(v34);
  char v29 = v34;
  LOBYTE(v2) = HIBYTE(v33);
  char v30 = v33;
  __int16 v31 = v32;
  *(_WORD *)a2 = result;
  *(_WORD *)(a2 + 2) = v13;
  *(unsigned char *)(a2 + 4) = v14;
  *(_WORD *)(a2 + 6) = v15;
  *(_DWORD *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v17;
  *(_WORD *)(a2 + 24) = v18;
  *(_WORD *)(a2 + 26) = v19;
  *(_DWORD *)(a2 + 28) = v20;
  *(_WORD *)(a2 + 32) = v21;
  *(_WORD *)(a2 + 34) = v22;
  *(unsigned char *)(a2 + 36) = v23;
  *(unsigned char *)(a2 + 37) = v24;
  *(unsigned char *)(a2 + 38) = v25;
  *(unsigned char *)(a2 + 39) = v26;
  *(_WORD *)(a2 + 40) = v27;
  *(unsigned char *)(a2 + 42) = v28;
  *(unsigned char *)(a2 + 43) = v29;
  *(unsigned char *)(a2 + 44) = (_BYTE)v2;
  *(unsigned char *)(a2 + 45) = v30;
  *(_WORD *)(a2 + 46) = v31;
  return result;
}

uint64_t sub_1003A1378@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  int __dst = 0;
  char v54 = 0;
  __int16 v53 = 0;
  char v52 = 0;
  int v51 = 0;
  uint64_t v50 = 0;
  int v48 = 0;
  int v49 = 0;
  int v47 = 0;
  __int16 v46 = 0;
  __int16 v45 = 0;
  uint64_t v44 = 0;
  char v43 = 0;
  __int16 v42 = 0;
  char v41 = 0;
  __int16 v40 = 0;
  char v39 = 0;
  __int16 v38 = 0;
  char v37 = 0;
  uint64_t v4 = (char *)(*a1 + 4);
  __int16 v36 = 0;
  sub_1003E0514(v4, 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*v2 + 6), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*v2 + 8), 1uLL, &v54, 1);
  sub_1003E0514((char *)(*v2 + 9), 2uLL, &v53, 1);
  sub_1003E0514((char *)(*v2 + 11), 1uLL, &v52, 1);
  sub_1003E0514((char *)(*v2 + 12), 4uLL, &v51, 1);
  sub_1003E0514((char *)(*v2 + 16), 8uLL, &v50, 1);
  sub_1003E0514((char *)(*v2 + 24), 2uLL, (unsigned char *)&v49 + 2, 1);
  sub_1003E0514((char *)(*v2 + 26), 2uLL, &v49, 1);
  sub_1003E0514((char *)(*v2 + 28), 4uLL, &v48, 1);
  sub_1003E0514((char *)(*v2 + 32), 2uLL, (unsigned char *)&v47 + 2, 1);
  sub_1003E0514((char *)(*v2 + 34), 2uLL, &v47, 1);
  sub_1003E0514((char *)(*v2 + 36), 1uLL, (unsigned char *)&v46 + 1, 1);
  sub_1003E0514((char *)(*v2 + 37), 1uLL, &v46, 1);
  sub_1003E0514((char *)(*v2 + 38), 2uLL, &v45, 1);
  sub_1003E0514((char *)(*v2 + 40), 4uLL, (unsigned char *)&v44 + 4, 1);
  sub_1003E0514((char *)(*v2 + 44), 4uLL, &v44, 1);
  sub_1003E0514((char *)(*v2 + 48), 1uLL, &v43, 1);
  sub_1003E0514((char *)(*v2 + 49), 2uLL, &v42, 1);
  sub_1003E0514((char *)(*v2 + 51), 1uLL, &v41, 1);
  sub_1003E0514((char *)(*v2 + 52), 2uLL, &v40, 1);
  sub_1003E0514((char *)(*v2 + 54), 1uLL, &v39, 1);
  sub_1003E0514((char *)(*v2 + 55), 2uLL, &v38, 1);
  sub_1003E0514((char *)(*v2 + 57), 1uLL, &v37, 1);
  sub_1003E0514((char *)(*v2 + 58), 2uLL, &v36, 1);
  uint64_t result = sub_1003A82F0(HIWORD(__dst), v5, v6, v7, v8, v9, v10, v11);
  __int16 v13 = __dst;
  char v14 = v54;
  __int16 v15 = v53;
  char v16 = v52;
  int v17 = v51;
  uint64_t v18 = v50;
  __int16 v19 = HIWORD(v49);
  __int16 v20 = v49;
  int v21 = v48;
  __int16 v22 = HIWORD(v47);
  __int16 v23 = v47;
  char v24 = HIBYTE(v46);
  char v25 = v46;
  __int16 v26 = v45;
  int v28 = v44;
  int v27 = HIDWORD(v44);
  char v29 = v43;
  LOWORD(v2) = v42;
  char v30 = v41;
  __int16 v31 = v40;
  char v32 = v39;
  __int16 v33 = v38;
  char v34 = v37;
  __int16 v35 = v36;
  *(_WORD *)a2 = result;
  *(_WORD *)(a2 + 2) = v13;
  *(unsigned char *)(a2 + 4) = v14;
  *(_WORD *)(a2 + 6) = v15;
  *(unsigned char *)(a2 + 8) = v16;
  *(_DWORD *)(a2 + 12) = v17;
  *(void *)(a2 + 16) = v18;
  *(_WORD *)(a2 + 24) = v19;
  *(_WORD *)(a2 + 26) = v20;
  *(_DWORD *)(a2 + 28) = v21;
  *(_WORD *)(a2 + 32) = v22;
  *(_WORD *)(a2 + 34) = v23;
  *(unsigned char *)(a2 + 36) = v24;
  *(unsigned char *)(a2 + 37) = v25;
  *(_WORD *)(a2 + 38) = v26;
  *(_DWORD *)(a2 + 40) = v27;
  *(_DWORD *)(a2 + 44) = v28;
  *(unsigned char *)(a2 + 48) = v29;
  *(_WORD *)(a2 + 50) = (_WORD)v2;
  *(unsigned char *)(a2 + 52) = v30;
  *(_WORD *)(a2 + 54) = v31;
  *(unsigned char *)(a2 + 56) = v32;
  *(_WORD *)(a2 + 58) = v33;
  *(unsigned char *)(a2 + 60) = v34;
  *(_WORD *)(a2 + 62) = v35;
  return result;
}

uint64_t sub_1003A1724(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_1003E0498((unsigned int **)a2);
  unint64_t v5 = sub_1003E0470(v4);
  int v26 = v5;
  __int16 v27 = WORD2(v5);
  if (!sub_1003A6E14((uint64_t)&v26))
  {
    unint64_t v20 = *(void *)(a1 + 128);
    __int16 v19 = (unint64_t *)(a1 + 128);
    v19[1] = v20;
    sub_1000EC7D0(v19, *(void *)(a2 + 8) - *(void *)a2);
    int v21 = *(unsigned char **)(a2 + 8);
    __int16 v22 = (unsigned char *)(*(void *)a2 + 4);
    int v28 = v19;
    while (v22 != v21)
      sub_1003A3DC4(&v28, v22++);
    return 1;
  }
  BOOL v6 = sub_1003A6E3C((uint64_t)&v26);
  unint64_t v14 = *(void *)(a1 + 128);
  uint64_t v15 = *(void *)(a1 + 136);
  char v16 = (unint64_t *)(a1 + 128);
  if (v6)
  {
    if (v14 != v15)
    {
      sub_1003A9600("%s: fDebugLogBufferData not emptied: size = %zu", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"collectLogBufferDataEvent");
      unint64_t v14 = *v16;
    }
    *(void *)(a1 + 136) = v14;
    int v17 = *(unsigned char **)(a2 + 8);
    uint64_t v18 = (unsigned char *)(*(void *)a2 + 4);
    int v28 = v16;
    while (v18 != v17)
      sub_1003A3DC4(&v28, v18++);
    return 0;
  }
  if (v14 == v15)
  {
    sub_1003A9600("%s: start of this multipart packet missing, so this packet is discarded: size = %zu", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"collectLogBufferDataEvent");
  }
  else
  {
    __int16 v23 = *(unsigned char **)(a2 + 8);
    char v24 = (unsigned char *)(*(void *)a2 + 4);
    int v28 = v16;
    while (v24 != v23)
      sub_1003A3DC4(&v28, v24++);
    if (sub_1003A6E5C((uint64_t)&v26)) {
      return 1;
    }
  }
  return 0;
}

void *sub_1003A188C(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    sub_10001A970(v3);
  }
  return a1;
}

unint64_t sub_1003A18CC(uint64_t a1)
{
  int __dst = 0;
  unsigned __int16 v11 = 0;
  sub_1003E0514((char *)(*(void *)a1 + 4), 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*(void *)a1 + 6), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*(void *)a1 + 8), 2uLL, &v11, 1);
  unsigned int v9 = sub_1003A82F0(HIWORD(__dst), v2, v3, v4, v5, v6, v7, v8);
  return v9 | ((unint64_t)(unsigned __int16)__dst << 16) | ((unint64_t)v11 << 32);
}

void sub_1003A1960(void *a1, _OWORD *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = a1[8];
      if (v7)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v8 = (char *)operator new(0x28uLL);
        *(void *)uint64_t v8 = off_1008637E0;
        *((void *)v8 + 1) = v7;
        *((void *)v8 + 2) = v6;
        *(_OWORD *)(v8 + 24) = *a2;
        v11[3] = v8;
        uint64_t v9 = a1[10];
        sub_1001B1758((uint64_t)v10, (uint64_t)v11);
        sub_10039D740(v9, (uint64_t)v10);
        sub_100196E1C(v10);
        sub_100196E1C(v11);
      }
      sub_10001A970(v6);
    }
  }
}

void sub_1003A1A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_100196E1C((uint64_t *)va);
  sub_100196E1C((uint64_t *)va1);
  sub_10001A970(v2);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_1003A1A8C(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  return result;
}

uint64_t sub_1003A1AC0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = *a1;
  if (a1[1] - *a1 != 68)
  {
    sub_1003A9600("Range debug V2 event (%zu) not of expected size (%u)", a2, a3, a4, a5, a6, a7, a8, a1[1] - *a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Range debug V2 event not of expected size");
  }
  __int16 __dst = 0;
  unsigned __int8 v35 = 0;
  __int16 v34 = 0;
  uint64_t v33 = 0;
  int v32 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  sub_1003E0514((char *)(v10 + 4), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*a1 + 6), 1uLL, &v35, 1);
  sub_1003E0514((char *)(*a1 + 7), 2uLL, &v34, 1);
  sub_1003E0514((char *)(*a1 + 9), 8uLL, &v33, 1);
  sub_1003E0514((char *)(*a1 + 17), 4uLL, &v32, 1);
  sub_1003E0514((char *)(*a1 + 28), 5uLL, &v31, 1);
  sub_1003E0514((char *)(*a1 + 33), 5uLL, &v30, 1);
  sub_1003E0514((char *)(*a1 + 38), 5uLL, &v29, 1);
  sub_1003E0514((char *)(*a1 + 43), 5uLL, &v28, 1);
  uint64_t result = sub_1003A7FD8(v35, v12, v13, v14, v15, v16, v17, v18);
  __int16 v20 = v34;
  uint64_t v21 = v33;
  int v22 = v32;
  uint64_t v24 = v30;
  uint64_t v23 = v31;
  uint64_t v26 = v28;
  uint64_t v25 = v29;
  *(_WORD *)a9 = __dst;
  *(unsigned char *)(a9 + 2) = result;
  *(_WORD *)(a9 + 4) = v20;
  *(void *)(a9 + 8) = v21;
  *(_DWORD *)(a9 + 16) = v22;
  *(void *)(a9 + 24) = v23;
  *(void *)(a9 + 32) = v24;
  *(void *)(a9 + 40) = v25;
  *(void *)(a9 + 48) = v26;
  return result;
}

void sub_1003A1C74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A1C88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 __dst = 0;
  uint64_t v18 = 0;
  __int16 v17 = 0;
  char v16 = 0;
  if (a1[1] - *a1 != 17) {
    sub_1004379C0();
  }
  sub_1003E0514((char *)(*a1 + 4), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*a1 + 6), 8uLL, &v18, 1);
  sub_1003E0514((char *)(*a1 + 14), 1uLL, (unsigned char *)&v17 + 1, 1);
  sub_1003E0514((char *)(*a1 + 15), 1uLL, &v17, 1);
  sub_1003E0514((char *)(*a1 + 16), 1uLL, &v16, 1);
  uint64_t result = sub_1003A82F0(__dst, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = v18;
  char v13 = HIBYTE(v17);
  char v14 = v17;
  char v15 = v16;
  *(_WORD *)a2 = result;
  *(void *)(a2 + 8) = v12;
  *(unsigned char *)(a2 + 16) = v13;
  *(unsigned char *)(a2 + 17) = v14;
  *(unsigned char *)(a2 + 18) = v15;
  return result;
}

void sub_1003A1D78(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v11 = *((_DWORD *)sub_100007D00() + 187);
  uint64_t v153 = a2;
  if (v11 == 1)
  {
    uint64_t v35 = *a1;
    long long v36 = *(_OWORD *)(*a1 + 20);
    *(_OWORD *)unsigned __int8 v154 = *(_OWORD *)(*a1 + 4);
    *(_OWORD *)&v154[16] = v36;
    *(_OWORD *)&v154[30] = *(_OWORD *)(v35 + 34);
    __int16 v150 = *(_WORD *)&v154[2];
    __int16 v152 = sub_1003A82F0(*(unsigned __int16 *)v154, v4, v5, v6, v7, v8, v9, v10);
    char v148 = sub_1003A7FD8(v154[4], v37, v38, v39, v40, v41, v42, v43);
    double v44 = sub_10039CC60(*(unint64_t *)&v154[5]);
    uint64_t v146 = *(void *)&v154[15];
    __int16 v142 = *(_WORD *)&v154[23];
    __int16 v144 = *(_WORD *)&v154[13];
    char v138 = v154[27];
    __int16 v140 = *(_WORD *)&v154[25];
    char v136 = v154[28];
    char v134 = sub_1003A7C10(v154[29], 1);
    char v131 = v154[31];
    char v133 = sub_1003A7C10(v154[30], 1);
    char v129 = sub_1003A8A98(v154[32], v45, v46, v47, v48, v49, v50, v51);
    char v128 = v154[35];
    int v126 = *(__int16 *)&v154[33];
    char v127 = v154[36];
    char v59 = sub_1003A80B0(v154[37], v52, v53, v54, v55, v56, v57, v58);
    char v73 = sub_1003A8CFC(v154[38], 1, v60, v61, v62, v63, v64, v65);
    uint64_t v74 = v154[45];
    uint64_t v155 = 0;
    unsigned __int8 v156 = 0;
    v157[0] = 0;
    if (v154[45])
    {
      uint64_t v75 = 0;
      do
      {
        unsigned int v76 = &v154[3 * v75];
        __int16 v77 = *(_WORD *)(v76 + 47);
        char v78 = sub_1003A8A98(v76[46], v66, v67, v68, v69, v70, v71, v72);
        char v79 = v78;
        double v80 = (double)v77 * 0.25;
        uint64_t v81 = v156;
        if ((unint64_t)v156 >= v157[0])
        {
          uint64_t v83 = (v156 - v155) >> 4;
          unint64_t v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 60) {
            sub_1000267C4();
          }
          uint64_t v85 = v157[0] - (void)v155;
          if ((uint64_t)(v157[0] - (void)v155) >> 3 > v84) {
            unint64_t v84 = v85 >> 3;
          }
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v84;
          }
          if (v66) {
            long long v86 = (char *)sub_10015344C((uint64_t)v157, v66);
          }
          else {
            long long v86 = 0;
          }
          long long v87 = &v86[16 * v83];
          *long long v87 = v79;
          *((double *)v87 + 1) = v80;
          double v89 = v155;
          unsigned int v88 = v156;
          double v90 = v87;
          if (v156 != v155)
          {
            do
            {
              *((_OWORD *)v90 - 1) = *((_OWORD *)v88 - 1);
              v90 -= 16;
              v88 -= 16;
            }
            while (v88 != v89);
            unsigned int v88 = v155;
          }
          uint64_t v82 = v87 + 16;
          uint64_t v155 = v90;
          unsigned __int8 v156 = v87 + 16;
          v157[0] = &v86[16 * v66];
          if (v88) {
            operator delete(v88);
          }
        }
        else
        {
          *unsigned __int8 v156 = v78;
          *((double *)v81 + 1) = v80;
          uint64_t v82 = v81 + 16;
        }
        unsigned __int8 v156 = v82;
        ++v75;
      }
      while (v75 != v74);
    }
    sub_10039EEA4(v153, v152, v150, v148, v146, v144, v142, v140, v44, (double)v126 * 0.25, v138, v136, v134, v133, v131, v129, v128, v127, v59,
      v73,
      (uint64_t)&v155);
  }
  else
  {
    if (v11 != 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1003A1A8C(exception, "Unknown HSI version");
    }
    uint64_t v12 = *a1;
    long long v13 = *(_OWORD *)(*a1 + 20);
    *(_OWORD *)unsigned __int8 v154 = *(_OWORD *)(*a1 + 4);
    *(_OWORD *)&v154[16] = v13;
    *(_OWORD *)&v154[31] = *(_OWORD *)(v12 + 35);
    __int16 v14 = sub_1003A82F0(*(unsigned __int16 *)v154, v4, v5, v6, v7, v8, v9, v10);
    char v22 = sub_1003A7FD8(v154[4], v15, v16, v17, v18, v19, v20, v21);
    double v30 = sub_10039CC60(*(unint64_t *)&v154[5]);
    uint64_t v31 = *(void *)&v154[15];
    __int16 v32 = *(_WORD *)&v154[13];
    char v33 = 9;
    __int16 v149 = *(_WORD *)&v154[25];
    __int16 v151 = *(_WORD *)&v154[23];
    char v147 = v154[27];
    char v145 = v154[28];
    if (v154[29])
    {
      char v34 = 9;
      if (v154[30])
      {
        char v33 = sub_1003A7C10(v154[29], 2);
        char v34 = sub_1003A7C10(v154[30], 2);
      }
    }
    else
    {
      char v34 = 9;
    }
    char v91 = v154[31];
    int v135 = *(__int16 *)&v154[33];
    char v141 = v154[35];
    char v143 = sub_1003A8A98(v154[32], v23, v24, v25, v26, v27, v28, v29);
    char v139 = v154[36];
    char v137 = sub_1003A80B0(v154[37], v92, v93, v94, v95, v96, v97, v98);
    unint64_t v99 = sub_1003A8F28(*(unsigned __int16 *)&v154[38]);
    if (!(_BYTE)v100 || (char v107 = BYTE1(v99), (v99 & 0xFF0000) == 0)) {
      sub_1004379EC();
    }
    char v130 = v22;
    __int16 v132 = *(_WORD *)&v154[2];
    uint64_t v108 = v154[46];
    uint64_t v155 = 0;
    unsigned __int8 v156 = 0;
    v157[0] = 0;
    if (v154[46])
    {
      uint64_t v109 = 0;
      do
      {
        __int16 v110 = &v154[3 * v109];
        __int16 v111 = *((_WORD *)v110 + 24);
        char v112 = sub_1003A8A98(v110[47], v100, v101, v102, v103, v104, v105, v106);
        char v113 = v112;
        double v114 = (double)v111 * 0.25;
        uint64_t v115 = v156;
        if ((unint64_t)v156 >= v157[0])
        {
          uint64_t v117 = (v156 - v155) >> 4;
          unint64_t v118 = v117 + 1;
          if ((unint64_t)(v117 + 1) >> 60) {
            sub_1000267C4();
          }
          uint64_t v119 = v157[0] - (void)v155;
          if ((uint64_t)(v157[0] - (void)v155) >> 3 > v118) {
            unint64_t v118 = v119 >> 3;
          }
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v100 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v100 = v118;
          }
          if (v100) {
            uint64_t v120 = (char *)sub_10015344C((uint64_t)v157, v100);
          }
          else {
            uint64_t v120 = 0;
          }
          uint64_t v121 = &v120[16 * v117];
          *uint64_t v121 = v113;
          *((double *)v121 + 1) = v114;
          uint64_t v123 = v155;
          uint64_t v122 = v156;
          uint64_t v124 = v121;
          if (v156 != v155)
          {
            do
            {
              *((_OWORD *)v124 - 1) = *((_OWORD *)v122 - 1);
              v124 -= 16;
              v122 -= 16;
            }
            while (v122 != v123);
            uint64_t v122 = v155;
          }
          uint64_t v116 = v121 + 16;
          uint64_t v155 = v124;
          unsigned __int8 v156 = v121 + 16;
          v157[0] = &v120[16 * v100];
          if (v122) {
            operator delete(v122);
          }
        }
        else
        {
          *unsigned __int8 v156 = v112;
          *((double *)v115 + 1) = v114;
          uint64_t v116 = v115 + 16;
        }
        unsigned __int8 v156 = v116;
        ++v109;
      }
      while (v109 != v108);
    }
    sub_10039EEA4(v153, v14, v132, v130, v31, v32, v151, v149, v30, (double)v135 * 0.25, v147, v145, v33, v34, v91, v143, v141, v139, v137,
      v107,
      (uint64_t)&v155);
  }
  if (v155)
  {
    unsigned __int8 v156 = v155;
    operator delete(v155);
  }
}

void sub_1003A2348(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1003A2390(void *a1)
{
  *a1 = off_100863360;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10001A970(v3);
  }
  return a1;
}

void sub_1003A23EC(void *a1)
{
  *a1 = off_100863360;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10001A970(v3);
  }

  operator delete();
}

void *sub_1003A2468(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1E0uLL);
  *uint64_t v2 = off_100863360;
  sub_1003A25BC((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003A24BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A24D0(uint64_t a1, void *a2)
{
  *a2 = off_100863360;
  return sub_1003A25BC((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1003A24FC(uint64_t a1)
{
}

void sub_1003A2504(void *a1)
{
  sub_1003A2668(a1 + 1);

  operator delete(a1);
}

uint64_t sub_1003A2540(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003A2570(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A25B0()
{
}

uint64_t sub_1003A25BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_10015042C((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x181uLL);
  return a1;
}

void sub_1003A2650(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10001A970(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003A2668(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    sub_10001A970(v3);
  }
}

void *sub_1003A26BC(void *a1)
{
  *a1 = off_1008633E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003A2708(void *a1)
{
  *a1 = off_1008633E0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003A2774(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1008633E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_WORD *)result + 14) = *(_WORD *)(a1 + 28);
  return result;
}

uint64_t sub_1003A27E0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1008633E0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

void sub_1003A2828(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003A2838(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003A2878(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003A28A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A28E8()
{
}

void *sub_1003A28F4(void *a1)
{
  *a1 = off_100863460;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003A2940(void *a1)
{
  *a1 = off_100863460;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

__n128 sub_1003A29AC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x110uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_100863460;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(v2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(v2 + 248) = *(_OWORD *)(a1 + 248);
  *((void *)v2 + 33) = *(void *)(a1 + 264);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  __n128 result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v2 + 72) = result;
  return result;
}

__n128 sub_1003A2A88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_100863460;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(_OWORD *)(a1 + 24);
  long long v5 = *(_OWORD *)(a1 + 40);
  long long v6 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v6;
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  long long v7 = *(_OWORD *)(a1 + 88);
  long long v8 = *(_OWORD *)(a1 + 104);
  long long v9 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 120) = v9;
  *(_OWORD *)(a2 + 104) = v8;
  *(_OWORD *)(a2 + 88) = v7;
  long long v10 = *(_OWORD *)(a1 + 152);
  long long v11 = *(_OWORD *)(a1 + 168);
  long long v12 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a2 + 184) = v12;
  *(_OWORD *)(a2 + 168) = v11;
  *(_OWORD *)(a2 + 152) = v10;
  __n128 result = *(__n128 *)(a1 + 216);
  long long v14 = *(_OWORD *)(a1 + 232);
  long long v15 = *(_OWORD *)(a1 + 248);
  *(void *)(a2 + 264) = *(void *)(a1 + 264);
  *(_OWORD *)(a2 + 248) = v15;
  *(_OWORD *)(a2 + 232) = v14;
  *(__n128 *)(a2 + 216) = result;
  return result;
}

void sub_1003A2B40(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003A2B50(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003A2B90(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003A2BC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A2C00()
{
}

uint64_t sub_1003A2C0C(uint64_t a1)
{
  *(void *)a1 = off_1008634E0;
  long long v4 = (void **)(a1 + 72);
  sub_10016D6F0(&v4);
  long long v4 = (void **)(a1 + 48);
  sub_10016D794(&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003A2C80(uint64_t a1)
{
  *(void *)a1 = off_1008634E0;
  uint64_t v3 = (void **)(a1 + 72);
  sub_10016D6F0(&v3);
  uint64_t v3 = (void **)(a1 + 48);
  sub_10016D794(&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10001A970(v2);
  }
  operator delete();
}

void *sub_1003A2D08(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  *uint64_t v2 = off_1008634E0;
  sub_1003A2E5C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003A2D5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A2D70(uint64_t a1, void *a2)
{
  *a2 = off_1008634E0;
  return sub_1003A2E5C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1003A2D9C(uint64_t a1)
{
}

void sub_1003A2DA4(void *a1)
{
  sub_1003A2F38((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_1003A2DE0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003A2E10(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A2E50()
{
}

uint64_t sub_1003A2E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_10016D19C((void *)(a1 + 40), *(__int16 **)(a2 + 40), *(__int16 **)(a2 + 48), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_10016D82C((void *)(a1 + 64), *(void *)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 5);
  return a1;
}

void sub_1003A2F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10016D794((void ***)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    sub_10001A970(v4);
  }
  _Unwind_Resume(a1);
}

void sub_1003A2F38(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 64);
  sub_10016D6F0(&v3);
  uint64_t v3 = (void **)(a1 + 40);
  sub_10016D794(&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10001A970(v2);
  }
}

void *sub_1003A2F8C(void *a1)
{
  *a1 = off_100863560;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003A2FD8(void *a1)
{
  *a1 = off_100863560;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

__n128 sub_1003A3044(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_100863560;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_1003A30B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_100863560;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  long long v5 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_1003A3108(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003A3118(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003A3158(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003A3188(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A31C8()
{
}

void *sub_1003A31D4(void *a1)
{
  *a1 = off_1008635E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003A3220(void *a1)
{
  *a1 = off_1008635E0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

__n128 sub_1003A328C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1008635E0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1003A3300(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1008635E0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  long long v5 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_1003A3350(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003A3360(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003A33A0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003A33D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A3410()
{
}

void *sub_1003A341C(void *a1)
{
  *a1 = off_100863660;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003A3468(void *a1)
{
  *a1 = off_100863660;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

__n128 sub_1003A34D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_100863660;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  __n128 result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v2 + 72) = result;
  return result;
}

__n128 sub_1003A3550(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_100863660;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  long long v5 = *(_OWORD *)(a1 + 40);
  long long v6 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v6;
  *(_OWORD *)(a2 + 40) = v5;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_1003A35A8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003A35B8(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003A35F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003A3628(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A3668()
{
}

void *sub_1003A3674(void *a1)
{
  *a1 = off_1008636E0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10001A970(v3);
  }
  return a1;
}

void sub_1003A36D0(void *a1)
{
  *a1 = off_1008636E0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10001A970(v3);
  }

  operator delete();
}

void *sub_1003A374C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = off_1008636E0;
  sub_1003A38A0(v2 + 1, v1);
  return v2;
}

void sub_1003A37A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1003A37B4(uint64_t a1, void *a2)
{
  *a2 = off_1008636E0;
  return sub_1003A38A0(a2 + 1, a1 + 8);
}

void sub_1003A37E0(uint64_t a1)
{
}

void sub_1003A37E8(void *a1)
{
  sub_1003A3910(a1 + 1);

  operator delete(a1);
}

uint64_t sub_1003A3824(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003A3854(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A3894()
{
}

void *sub_1003A38A0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_10016D488(a1 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  return a1;
}

void sub_1003A38F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10001A970(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003A3910(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    sub_10001A970(v3);
  }
}

void *sub_1003A3964(void *a1)
{
  *a1 = off_100863760;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003A39B0(void *a1)
{
  *a1 = off_100863760;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003A3A1C(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_100863760;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_WORD *)result + 14) = *(_WORD *)(a1 + 28);
  return result;
}

uint64_t sub_1003A3A88(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_100863760;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

void sub_1003A3AD0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003A3AE0(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003A3B20(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003A3B50(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A3B90()
{
}

void *sub_1003A3B9C(void *a1)
{
  *a1 = off_1008637E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003A3BE8(void *a1)
{
  *a1 = off_1008637E0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

__n128 sub_1003A3C54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1008637E0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003A3CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1008637E0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_1003A3CF8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003A3D08(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003A3D48(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003A3D78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003A3DB8()
{
}

unint64_t **sub_1003A3DC4(unint64_t **a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  long long v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    long long v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      sub_1000267C4();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      long long v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      long long v6 = (unsigned char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *long long v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

void sub_1003A3ECC(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t __dst = 0;
  uint64_t v202 = 0;
  unint64_t v203 = 0;
  unint64_t v204 = 0;
  uint64_t v199 = 0;
  unsigned __int16 v200 = 0;
  unint64_t v201 = 0;
  if (sub_1003A73B8(*a1, 5))
  {
    sub_100004950(v197, "CIRData");
    if (a2[1] != *a2)
    {
      unint64_t v10 = 0;
      int v11 = 1;
      unint64_t v12 = 256;
      do
      {
        sub_100054E28((uint64_t)&v207);
        sub_100056628((void *)&v208 + 1, (uint64_t)"CIR packet part ", 16);
        unint64_t v13 = (void *)std::ostream::operator<<();
        sub_100056628(v13, (uint64_t)":", 1);
        std::stringbuf::str();
        sub_100054E28((uint64_t)__src);
        if ((v206 & 0x80u) == 0) {
          long long v14 = v205;
        }
        else {
          long long v14 = (void **)v205[0];
        }
        if ((v206 & 0x80u) == 0) {
          uint64_t v15 = v206;
        }
        else {
          uint64_t v15 = (uint64_t)v205[1];
        }
        char v16 = sub_100056628(&__src[2], (uint64_t)v14, v15);
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
        uint64_t v17 = std::locale::use_facet(&v220, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v220);
        std::ostream::put();
        std::ostream::flush();
        unint64_t v18 = a2[1] - *a2;
        unint64_t v192 = v10 + 256;
        if (v18 >= v10 + 256) {
          unint64_t v19 = v10 + 256;
        }
        else {
          unint64_t v19 = a2[1] - *a2;
        }
        if (v19 > v10)
        {
          if (v12 >= v18) {
            unint64_t v20 = a2[1] - *a2;
          }
          else {
            unint64_t v20 = v12;
          }
          do
          {
            LOBYTE(__p[0]) = 48;
            uint64_t v21 = sub_1001771C8(&__src[2], (char *)__p);
            uint64_t v22 = *v21;
            *(_DWORD *)((char *)v21 + *(void *)(*v21 - 24) + 8) = *(_DWORD *)((unsigned char *)v21 + *(void *)(*v21 - 24)
                                                                                             + 8) & 0xFFFFFFB5 | 8;
            *(uint64_t *)((char *)v21 + *(void *)(v22 - 24) + 24) = 2;
            uint64_t v23 = (void *)std::ostream::operator<<();
            sub_100056628(v23, (uint64_t)" ", 1);
            if ((~(_BYTE)v10 & 0xF) == 0 || v20 - 1 == v10)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)&__src[2] + *((void *)__src[2] - 3)));
              uint64_t v24 = std::locale::use_facet(&v220, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
              std::locale::~locale(&v220);
              std::ostream::put();
              std::ostream::flush();
            }
            ++v10;
          }
          while (v20 != v10);
        }
        std::stringbuf::str();
        __int16 v32 = __p;
        if (v219 < 0) {
          __int16 v32 = (void **)__p[0];
        }
        sub_10000486C("%s", v25, v26, v27, v28, v29, v30, v31, (uint64_t)v32);
        if (SHIBYTE(v219) < 0) {
          operator delete(__p[0]);
        }
        __src[0] = v188;
        *(void **)((char *)__src + *((void *)v188 - 3)) = v186;
        __src[2] = v184;
        if (SHIBYTE(v225[0]) < 0) {
          operator delete(*((void **)&v224 + 1));
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        if ((char)v206 < 0) {
          operator delete(v205[0]);
        }
        v207 = v188;
        *(void **)((char *)&v207 + *((void *)v188 - 3)) = v186;
        *((void *)&v208 + 1) = v184;
        if ((v215[15] & 0x80000000) != 0) {
          operator delete(*((void **)&v214 + 1));
        }
        ++v11;
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        v12 += 256;
        unint64_t v10 = v192;
      }
      while (v192 < a2[1] - *a2);
    }
    if (v198 < 0) {
      operator delete(v197[0]);
    }
  }
  uint64_t v33 = *a2;
  unint64_t v34 = a2[1] - *a2;
  if (!v34)
  {
LABEL_220:
    sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: no NumPackets field", v3, v4, v5, v6, v7, v8, v9, v175);
    goto LABEL_221;
  }
  unint64_t v35 = 0;
  int v187 = 0;
  uint64_t v180 = 0;
  int v185 = 0;
  char v179 = 0;
  int v183 = 0;
  int v36 = 0;
  int v182 = 0;
  int v191 = 0;
  uint64_t v37 = 0;
  int v193 = 0;
  int v194 = 0;
  uint64_t v38 = &v208;
  while (2)
  {
    unint64_t v39 = v34 - v35;
    if (v34 - v35 <= 3)
    {
      sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: bytesRemaining %zu, expect at least %zu for tag and len", v3, v4, v5, v6, v7, v8, v9, v34 - v35);
      goto LABEL_221;
    }
    LOWORD(v197[0]) = 0;
    LOWORD(v220.__locale_) = 0;
    sub_1003E0514((char *)(v33 + v35), 2uLL, v197, 1);
    sub_1003E0514((char *)(v35 + *a2 + 2), 2uLL, &v220, 1);
    if (!LOWORD(v220.__locale_))
    {
      sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: got 0 length for tag %hu", v40, v41, v42, v43, v44, v45, v46, LOWORD(v197[0]));
      goto LABEL_221;
    }
    if (v39 - 4 < LOWORD(v220.__locale_))
    {
      sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: bytesRemaining %zu, expect at least %hu for val", v40, v41, v42, v43, v44, v45, v46, v39 - 4);
      goto LABEL_221;
    }
    unint64_t v47 = v35 + 4;
    if (v39 - 4 > LOWORD(v220.__locale_))
    {
      switch(LOWORD(v197[0]))
      {
        case 0x120:
          sub_1003A94A4("decodeRangeCIREventVersion2: PacketType", v40, v41, v42, v43, v44, v45, v46, v175);
          if (v193)
          {
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v203 - v202) >> 3) <= (unsigned __int16)v194)
            {
              int v170 = 171;
              goto LABEL_257;
            }
            int locale_low = LOWORD(v220.__locale_);
            uint64_t v49 = (uint64_t)sub_100007D00();
            int v50 = *(_DWORD *)(v49 + 748);
            switch(v50)
            {
              case 1:
                LOBYTE(__src[0]) = 0;
                if (locale_low == 1)
                {
                  sub_1003E0514((char *)(*a2 + v47), 1uLL, __src, 1);
                  uint64_t v49 = sub_1003A90BC(LOBYTE(__src[0]));
                  if ((v49 & 0xFF0000) == 0)
                  {
LABEL_267:
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Could not decode packet type");
                  }
                  goto LABEL_171;
                }
                int v171 = 360;
                uint64_t v172 = "len == sizeof(r1PacketTypeInt)";
                break;
              case 2:
                LOWORD(__src[0]) = 0;
                if (locale_low == 2)
                {
                  sub_1003E0514((char *)(*a2 + v47), 2uLL, __src, 1);
                  uint64_t v49 = sub_1003A90BC(LOWORD(__src[0]));
                  if ((v49 & 0xFF0000) == 0) {
                    goto LABEL_267;
                  }
                  goto LABEL_171;
                }
                int v171 = 372;
                uint64_t v172 = "len == sizeof(packetTypeAsInt)";
                break;
              case 0:
                uint64_t v173 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v173, "HSI version error");
              default:
LABEL_171:
                uint64_t v134 = v202 + 136 * (unsigned __int16)v194;
                if (!*(unsigned char *)(v134 + 2)) {
                  *(unsigned char *)(v134 + 2) = 1;
                }
                *(_WORD *)uint64_t v134 = v49;
                goto LABEL_193;
            }
            __assert_rtn("decodePacketType", "roseCIRDataDecoderV2.cpp", v171, v172);
          }
          unsigned __int8 v169 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got PacketType but no PacketContainer";
          break;
        case 0x121:
          sub_1003A94A4("decodeRangeCIREventVersion2: RxChainMask", v40, v41, v42, v43, v44, v45, v46, v175);
          if (v193)
          {
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v203 - v202) >> 3) <= (unsigned __int16)v194)
            {
              int v170 = 180;
              goto LABEL_257;
            }
            LOBYTE(__src[0]) = 0;
            if (LOWORD(v220.__locale_) >= 2uLL) {
              __assert_rtn("decodeRxChainBitMask", "roseCIRDataDecoderV2.cpp", 393, "len <= sizeof rxChainBitMask");
            }
            sub_1003E0514((char *)(*a2 + v47), LOWORD(v220.__locale_), __src, 1);
            *(_WORD *)(v202 + 136 * (unsigned __int16)v194 + 3) = LOBYTE(__src[0]) | 0x100;
            goto LABEL_193;
          }
          unsigned __int8 v169 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got RxChainMask but no PacketContainer";
          break;
        case 0x122:
          sub_1003A94A4("decodeRangeCIREventVersion2: HwConnectionDescriptor", v40, v41, v42, v43, v44, v45, v46, v175);
          if (!v193) {
            goto LABEL_224;
          }
          uint64_t v65 = v202;
          if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v203 - v202) >> 3) <= (unsigned __int16)v194)
          {
            int v170 = 189;
            goto LABEL_257;
          }
          uint64_t v189 = v37;
          int v190 = v38;
          memset(__src, 0, 24);
          unint64_t v66 = v47 + LOWORD(v220.__locale_);
          if (v66 <= v47)
          {
            uint64_t v69 = 0;
            uint64_t v67 = 0;
            unint64_t v68 = 0;
          }
          else
          {
            int v177 = v36;
            uint64_t v67 = 0;
            unint64_t v68 = 0;
            uint64_t v69 = 0;
            unint64_t v70 = v47;
            do
            {
              uint64_t v71 = *a2;
              if (v67 >= v69)
              {
                uint64_t v72 = &v67[-v68];
                uint64_t v73 = (uint64_t)&v67[-v68 + 1];
                if (v73 < 0)
                {
                  __src[2] = v69;
                  __src[0] = (void *)v68;
                  __src[1] = v67;
                  sub_1000267C4();
                }
                if (2 * (uint64_t)&v69[-v68] > (unint64_t)v73) {
                  uint64_t v73 = 2 * (void)&v69[-v68];
                }
                if ((unint64_t)&v69[-v68] >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v74 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v74 = v73;
                }
                if (v74) {
                  unint64_t v75 = (unint64_t)operator new(v74);
                }
                else {
                  unint64_t v75 = 0;
                }
                v72[v75] = *(unsigned char *)(v71 + v70);
                uint64_t v76 = (uint64_t)&v72[v75 + 1];
                if (v67 == (char *)v68)
                {
                  unint64_t v68 = (unint64_t)&v72[v75];
                }
                else
                {
                  __int16 v77 = &v67[~v68];
                  do
                  {
                    char v78 = *--v67;
                    (v77--)[v75] = v78;
                  }
                  while (v67 != (char *)v68);
                  uint64_t v67 = (char *)v68;
                  unint64_t v68 = v75;
                }
                uint64_t v69 = (char *)(v75 + v74);
                if (v67) {
                  operator delete(v67);
                }
                uint64_t v67 = (char *)v76;
              }
              else
              {
                *v67++ = *(unsigned char *)(v71 + v70);
              }
              ++v70;
            }
            while (v70 != v66);
            uint64_t v65 = v202;
            int v36 = v177;
          }
          uint64_t v122 = v65 + 136 * (unsigned __int16)v194;
          uint64_t v125 = *(void **)(v122 + 8);
          uint64_t v124 = (unint64_t *)(v122 + 8);
          uint64_t v123 = v125;
          if (v125)
          {
            *(void *)(v65 + 136 * (unsigned __int16)v194 + 16) = v123;
            operator delete(v123);
            *uint64_t v124 = 0;
            v124[1] = 0;
            v124[2] = 0;
          }
          *uint64_t v124 = v68;
          uint64_t v126 = v65 + 136 * (unsigned __int16)v194;
          *(void *)(v126 + 16) = v67;
          *(void *)(v126 + 24) = v69;
          goto LABEL_155;
        case 0x123:
          sub_1003A94A4("decodeRangeCIREventVersion2: HwRxTimeStatus", v40, v41, v42, v43, v44, v45, v46, v175);
          if (v193)
          {
            uint64_t v86 = v202;
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v203 - v202) >> 3) <= (unsigned __int16)v194)
            {
              int v170 = 198;
              goto LABEL_257;
            }
            uint64_t v189 = v37;
            int v190 = v38;
            memset(__src, 0, 24);
            unint64_t v87 = v47 + LOWORD(v220.__locale_);
            if (v87 <= v47)
            {
              double v90 = 0;
              unsigned int v88 = 0;
              unint64_t v89 = 0;
            }
            else
            {
              int v178 = v36;
              unsigned int v88 = 0;
              unint64_t v89 = 0;
              double v90 = 0;
              unint64_t v91 = v47;
              do
              {
                uint64_t v92 = *a2;
                if (v88 >= v90)
                {
                  uint64_t v93 = &v88[-v89];
                  uint64_t v94 = (uint64_t)&v88[-v89 + 1];
                  if (v94 < 0)
                  {
                    __src[2] = v90;
                    __src[0] = (void *)v89;
                    __src[1] = v88;
                    sub_1000267C4();
                  }
                  if (2 * (uint64_t)&v90[-v89] > (unint64_t)v94) {
                    uint64_t v94 = 2 * (void)&v90[-v89];
                  }
                  if ((unint64_t)&v90[-v89] >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v95 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v95 = v94;
                  }
                  if (v95) {
                    unint64_t v96 = (unint64_t)operator new(v95);
                  }
                  else {
                    unint64_t v96 = 0;
                  }
                  v93[v96] = *(unsigned char *)(v92 + v91);
                  uint64_t v97 = (uint64_t)&v93[v96 + 1];
                  if (v88 == (char *)v89)
                  {
                    unint64_t v89 = (unint64_t)&v93[v96];
                  }
                  else
                  {
                    uint64_t v98 = &v88[~v89];
                    do
                    {
                      char v99 = *--v88;
                      (v98--)[v96] = v99;
                    }
                    while (v88 != (char *)v89);
                    unsigned int v88 = (char *)v89;
                    unint64_t v89 = v96;
                  }
                  double v90 = (char *)(v96 + v95);
                  if (v88) {
                    operator delete(v88);
                  }
                  unsigned int v88 = (char *)v97;
                }
                else
                {
                  *v88++ = *(unsigned char *)(v92 + v91);
                }
                ++v91;
              }
              while (v91 != v87);
              uint64_t v86 = v202;
              int v36 = v178;
            }
            uint64_t v127 = v86 + 136 * (unsigned __int16)v194;
            char v130 = *(void **)(v127 + 32);
            char v129 = (unint64_t *)(v127 + 32);
            char v128 = v130;
            if (v130)
            {
              *(void *)(v86 + 136 * (unsigned __int16)v194 + 40) = v128;
              operator delete(v128);
              *char v129 = 0;
              v129[1] = 0;
              v129[2] = 0;
            }
            *char v129 = v89;
            uint64_t v131 = v86 + 136 * (unsigned __int16)v194;
            *(void *)(v131 + 40) = v88;
            *(void *)(v131 + 48) = v90;
LABEL_155:
            uint64_t v37 = v189;
            uint64_t v38 = v190;
            goto LABEL_193;
          }
LABEL_224:
          unsigned __int8 v169 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got HwConnectionDescriptor but no PacketContainer";
          break;
        case 0x124:
          sub_1003A94A4("decodeRangeCIREventVersion2: CIR", v40, v41, v42, v43, v44, v45, v46, v175);
          if (v193)
          {
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v203 - v202) >> 3) > (unsigned __int16)v194)
            {
              sub_1003A5D90(a2, v47, LOWORD(v220.__locale_), __src);
              uint64_t v60 = v202;
              uint64_t v61 = v202 + 136 * (unsigned __int16)v194;
              uint64_t v64 = *(void **)(v61 + 56);
              uint64_t v63 = (void *)(v61 + 56);
              uint64_t v62 = v64;
              if (v64)
              {
                *(void *)(v202 + 136 * (unsigned __int16)v194 + 64) = v62;
                operator delete(v62);
                *uint64_t v63 = 0;
                v63[1] = 0;
                v63[2] = 0;
              }
              *(_OWORD *)uint64_t v63 = *(_OWORD *)__src;
              *(void **)(v60 + 136 * (unsigned __int16)v194 + 72) = __src[2];
              goto LABEL_193;
            }
            int v170 = 207;
            goto LABEL_257;
          }
          unsigned __int8 v169 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got CIR but no PacketContainer";
          break;
        case 0x125:
          sub_1003A94A4("decodeRangeCIREventVersion2: FirstPathIndex", v40, v41, v42, v43, v44, v45, v46, v175);
          if (v193)
          {
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v203 - v202) >> 3) <= (unsigned __int16)v194)
            {
              int v170 = 216;
              goto LABEL_257;
            }
            __src[0] = 0;
            if (LOWORD(v220.__locale_) >= 9uLL) {
              __assert_rtn("decodeFirstPathIndex", "roseCIRDataDecoderV2.cpp", 443, "len <= sizeof firstPathIndex");
            }
            sub_1003E0514((char *)(*a2 + v47), LOWORD(v220.__locale_), __src, 1);
            uint64_t v110 = v202 + 136 * (unsigned __int16)v194;
            *(void **)(v110 + 80) = __src[0];
            *(unsigned char *)(v110 + 88) = 1;
            goto LABEL_193;
          }
          unsigned __int8 v169 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got FirstPathIndex but no PacketContainer";
          break;
        case 0x126:
          sub_1003A94A4("decodeRangeCIREventVersion2: RxStartTime", v40, v41, v42, v43, v44, v45, v46, v175);
          if (v193)
          {
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v203 - v202) >> 3) > (unsigned __int16)v194)
            {
              __src[0] = 0;
              if (LOWORD(v220.__locale_) >= 9uLL) {
                __assert_rtn("decodeRxStartTime", "roseCIRDataDecoderV2.cpp", 451, "len <= sizeof rxStartTime");
              }
              sub_1003E0514((char *)(*a2 + v47), LOWORD(v220.__locale_), __src, 1);
              uint64_t v111 = v202 + 136 * (unsigned __int16)v194;
              *(void **)(v111 + 96) = __src[0];
              *(unsigned char *)(v111 + 104) = 1;
              goto LABEL_193;
            }
            int v170 = 225;
LABEL_257:
            __assert_rtn("decodeRangeCIREventVersion2", "roseCIRDataDecoderV2.cpp", v170, "currentPacketIdx.value() < packets.size()");
          }
          unsigned __int8 v169 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got RxStartTime but no PacketContainer";
          break;
        default:
          sub_1003A94A4("Ignoring unrecognized RangeCIREventTag %02x", v40, v41, v42, v43, v44, v45, v46, LOWORD(v197[0]));
          LOWORD(v207) = v197[0];
          size_t v112 = LOWORD(v220.__locale_);
          WORD1(v207) = v220.__locale_;
          char v113 = (const void *)(*a2 + v47);
          uint64_t v114 = (uint64_t)v113 + LOWORD(v220.__locale_);
          *((void *)v38 + 1) = 0;
          *((void *)v38 + 2) = 0;
          *(void *)uint64_t v38 = 0;
          sub_100253FD4(v38, v113, v114, v112);
          if (v193)
          {
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v203 - v202) >> 3) <= (unsigned __int16)v194) {
              __assert_rtn("decodeRangeCIREventVersion2", "roseCIRDataDecoderV2.cpp", 237, "currentPacketIdx.value() < packets.size()");
            }
            uint64_t v115 = v202 + 136 * (unsigned __int16)v194;
            unint64_t v118 = *(void *)(v115 + 128);
            uint64_t v116 = (void *)(v115 + 128);
            unint64_t v117 = v118;
            uint64_t v120 = v116 - 1;
            unint64_t v119 = *(v116 - 1);
            if (v119 >= v118)
            {
              int v135 = v116 - 2;
              uint64_t v136 = *(v116 - 2);
              uint64_t v137 = (uint64_t)(v119 - v136) >> 5;
              unint64_t v138 = v137 + 1;
              if ((unint64_t)(v137 + 1) >> 59) {
                goto LABEL_268;
              }
              uint64_t v139 = v117 - v136;
              if (v139 >> 4 > v138) {
                unint64_t v138 = v139 >> 4;
              }
              if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v140 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v138;
              }
              __src[4] = v116;
              char v141 = (char *)sub_10016D8F8((uint64_t)v116, v140);
              __int16 v142 = &v141[32 * v137];
              __src[0] = v141;
              __src[1] = v142;
              __src[3] = &v141[32 * v143];
              *(_DWORD *)__int16 v142 = v207;
              *((void *)v142 + 2) = 0;
              *((void *)v142 + 3) = 0;
              *((void *)v142 + 1) = 0;
              *(_OWORD *)(v142 + 8) = v208;
              *((void *)v142 + 3) = v209;
              *(void *)uint64_t v38 = 0;
              *((void *)v38 + 1) = 0;
              *((void *)v38 + 2) = 0;
              __src[2] = v142 + 32;
              sub_1003A6628(v135, __src);
              unint64_t v121 = *v120;
              sub_1003A67CC((uint64_t)__src);
            }
            else
            {
              *(_DWORD *)unint64_t v119 = v207;
              *(void *)(v119 + 16) = 0;
              *(void *)(v119 + 24) = 0;
              *(void *)(v119 + 8) = 0;
              *(_OWORD *)(v119 + 8) = v208;
              *(void *)(v119 + 24) = v209;
              *(void *)uint64_t v38 = 0;
              *((void *)v38 + 1) = 0;
              *((void *)v38 + 2) = 0;
              unint64_t v121 = v119 + 32;
            }
            *uint64_t v120 = v121;
          }
          else
          {
            __int16 v132 = v200;
            if ((unint64_t)v200 >= v201)
            {
              uint64_t v144 = ((uint64_t)v200 - v199) >> 5;
              unint64_t v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 59) {
LABEL_268:
              }
                sub_1000267C4();
              uint64_t v146 = v201 - v199;
              if ((uint64_t)(v201 - v199) >> 4 > v145) {
                unint64_t v145 = v146 >> 4;
              }
              if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v147 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v147 = v145;
              }
              __src[4] = &v201;
              char v148 = (char *)sub_10016D8F8((uint64_t)&v201, v147);
              __int16 v149 = &v148[32 * v144];
              __src[0] = v148;
              __src[1] = v149;
              __src[3] = &v148[32 * v150];
              *(_DWORD *)__int16 v149 = v207;
              *((void *)v149 + 2) = 0;
              *((void *)v149 + 3) = 0;
              *((void *)v149 + 1) = 0;
              *(_OWORD *)(v149 + 8) = v208;
              *((void *)v149 + 3) = v209;
              *(void *)uint64_t v38 = 0;
              *((void *)v38 + 1) = 0;
              *((void *)v38 + 2) = 0;
              __src[2] = v149 + 32;
              sub_1003A6628(&v199, __src);
              char v133 = v200;
              sub_1003A67CC((uint64_t)__src);
            }
            else
            {
              *unsigned __int16 v200 = v207;
              v132[2] = 0;
              v132[3] = 0;
              v132[1] = 0;
              *(_OWORD *)(v132 + 1) = v208;
              v132[3] = v209;
              *(void *)uint64_t v38 = 0;
              *((void *)v38 + 1) = 0;
              *((void *)v38 + 2) = 0;
              char v133 = v132 + 4;
            }
            unsigned __int16 v200 = v133;
          }
          char v59 = (void *)v208;
          if ((void)v208)
          {
            *((void *)&v208 + 1) = v208;
LABEL_192:
            operator delete(v59);
          }
          goto LABEL_193;
      }
LABEL_231:
      sub_1003A9600(v169, v3, v4, v5, v6, v7, v8, v9, v175);
      goto LABEL_221;
    }
    switch(LOWORD(v197[0]))
    {
      case 0x100:
        sub_1003A94A4("decodeRangeCIREventVersion2: SessionId", v40, v41, v42, v43, v44, v45, v46, v175);
        LOWORD(__src[0]) = 0;
        if (LOWORD(v220.__locale_) >= 3uLL) {
          __assert_rtn("decodeSessionId", "roseCIRDataDecoderV2.cpp", 306, "len <= sizeof sessionId");
        }
        sub_1003E0514((char *)(*a2 + v47), LOWORD(v220.__locale_), __src, 1);
        LOWORD(v180) = __src[0];
        int v187 = 1;
        goto LABEL_193;
      case 0x101:
        sub_1003A94A4("decodeRangeCIREventVersion2: SessionType", v40, v41, v42, v43, v44, v45, v46, v175);
        LOBYTE(__src[0]) = 0;
        if (LOWORD(v220.__locale_) >= 2uLL) {
          __assert_rtn("decodeSessionType", "roseCIRDataDecoderV2.cpp", 314, "len <= sizeof sessionTypeInt");
        }
        sub_1003E0514((char *)(*a2 + v47), LOWORD(v220.__locale_), __src, 1);
        char v179 = sub_1003A7FD8(LOBYTE(__src[0]), v79, v80, v81, v82, v83, v84, v85);
        int v185 = 1;
        goto LABEL_193;
      case 0x102:
        sub_1003A94A4("decodeRangeCIREventVersion2: CycleIndex", v40, v41, v42, v43, v44, v45, v46, v175);
        LOWORD(__src[0]) = 0;
        if (LOWORD(v220.__locale_) >= 3uLL) {
          __assert_rtn("decodeCycleIdx", "roseCIRDataDecoderV2.cpp", 322, "len <= sizeof cycleIdx");
        }
        sub_1003E0514((char *)(*a2 + v47), LOWORD(v220.__locale_), __src, 1);
        int v36 = LOWORD(__src[0]);
        int v183 = 1;
        goto LABEL_193;
      case 0x103:
        sub_1003A94A4("decodeRangeCIREventVersion2: DeviceIndex", v40, v41, v42, v43, v44, v45, v46, v175);
        LOBYTE(__src[0]) = 0;
        if (LOWORD(v220.__locale_) >= 2uLL) {
          __assert_rtn("decodeDeviceIdx", "roseCIRDataDecoderV2.cpp", 330, "len <= sizeof deviceIdx");
        }
        sub_1003E0514((char *)(*a2 + v47), LOWORD(v220.__locale_), __src, 1);
        BYTE4(v180) = __src[0];
        int v182 = 1;
        goto LABEL_193;
      case 0x104:
        sub_1003A5BC4(a2, v35 + 4, LOWORD(v220.__locale_), (unint64_t *)__src);
        if ((void *)((char *)__src[1] - (char *)__src[0]) >= (void *)8) {
          size_t v51 = 8;
        }
        else {
          size_t v51 = (char *)__src[1] - (char *)__src[0];
        }
        memcpy(&__dst, __src[0], v51);
        sub_100004950(__p, "");
        sub_100004950(v205, "");
        sub_1003E0810((uint64_t)__p, (uint64_t)&__dst, 8uLL, 0x10u, (uint64_t)v205);
        if ((char)v206 < 0) {
          operator delete(v205[0]);
        }
        if (SHIBYTE(v219) < 0) {
          operator delete(__p[0]);
        }
        sub_1003A94A4("decodeRangeCIREventVersion2: MacAddress: len %hu, val: %s", v52, v53, v54, v55, v56, v57, v58, LOWORD(v220.__locale_));
        if (SHIBYTE(v208) < 0) {
          operator delete(v207);
        }
        char v59 = __src[0];
        if (!__src[0]) {
          goto LABEL_193;
        }
        __src[1] = __src[0];
        goto LABEL_192;
      case 0x105:
        sub_1003A94A4("decodeRangeCIREventVersion2: NumPackets", v40, v41, v42, v43, v44, v45, v46, v175);
        LOWORD(__src[0]) = 0;
        if (LOWORD(v220.__locale_) >= 3uLL) {
          __assert_rtn("decodeNumPackets", "roseCIRDataDecoderV2.cpp", 349, "len <= sizeof numPackets");
        }
        sub_1003E0514((char *)(*a2 + v47), LOWORD(v220.__locale_), __src, 1);
        uint64_t v37 = LOWORD(__src[0]);
        int v191 = 1;
        goto LABEL_193;
      case 0x106:
        sub_1003A94A4("decodeRangeCIREventVersion2: PacketContainer", v40, v41, v42, v43, v44, v45, v46, v175);
        if (!v191)
        {
          unsigned __int8 v169 = "RoseCIRDecoder::decodeRangeCIREventVersion2: got PacketContainer tag but no NumPackets tag";
          goto LABEL_231;
        }
        if (v193) {
          int v100 = v194 + 1;
        }
        else {
          int v100 = 0;
        }
        sub_1003A94A4("decodeRangeCIREventVersion2: PacketContainer: PacketIdx %hu", v3, v4, v5, v6, v7, v8, v9, (unsigned __int16)v100);
        if ((unsigned __int16)v100 >= (unsigned __int16)v37)
        {
          sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: currentPacketIdx %hu out of range: expected NumPackets %hu", v101, v102, v103, v104, v105, v106, v107, (unsigned __int16)v100);
          goto LABEL_221;
        }
        *(void *)&long long v226 = 0;
        memset(v225, 0, sizeof(v225));
        long long v224 = 0u;
        memset(v223, 0, sizeof(v223));
        memset(__src, 0, sizeof(__src));
        unint64_t v108 = v203;
        if (v203 >= v204)
        {
          uint64_t v109 = sub_1003A6240(&v202, (int *)__src);
        }
        else
        {
          sub_1003A634C((uint64_t)&v204, v203, (int *)__src);
          uint64_t v109 = v108 + 136;
        }
        unint64_t v203 = v109;
        v207 = &v225[1];
        sub_10016D6F0((void ***)&v207);
        if (v223[1])
        {
          v223[2] = v223[1];
          operator delete(v223[1]);
        }
        if (__src[4])
        {
          __src[5] = __src[4];
          operator delete(__src[4]);
        }
        if (__src[1])
        {
          __src[2] = __src[1];
          operator delete(__src[1]);
        }
        int v193 = 1;
        int v194 = v100;
LABEL_193:
        unint64_t v35 = v47 + LOWORD(v220.__locale_);
        uint64_t v33 = *a2;
        unint64_t v34 = a2[1] - *a2;
        if (v35 < v34) {
          continue;
        }
        if (v35 > v34)
        {
          sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: readIdx %zu exceeds packet size %zu", v3, v4, v5, v6, v7, v8, v9, v47 + LOWORD(v220.__locale_));
          goto LABEL_221;
        }
        if (!v191) {
          goto LABEL_220;
        }
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v203 - v202) >> 3) != (unsigned __int16)v37)
        {
          sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: got %zu packets, expected NumPackets %hu", v3, v4, v5, v6, v7, v8, v9, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v203 - v202) >> 3));
          goto LABEL_221;
        }
        if (v203 == v202)
        {
          sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: no packets in CIR message", v3, v4, v5, v6, v7, v8, v9, v175);
LABEL_221:
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 72) = 0;
          goto LABEL_222;
        }
        if (!v187)
        {
          sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: no session ID", v3, v4, v5, v6, v7, v8, v9, v175);
          goto LABEL_221;
        }
        if (!v185)
        {
          sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: no session type", v3, v4, v5, v6, v7, v8, v9, v175);
          goto LABEL_221;
        }
        if (!v183)
        {
          sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: no cycle index", v3, v4, v5, v6, v7, v8, v9, v175);
          goto LABEL_221;
        }
        if (!v182)
        {
          sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: no device index", v3, v4, v5, v6, v7, v8, v9, v175);
          goto LABEL_221;
        }
        sub_1003A94A4("decodeRangeCIREventVersion2: converting to libRose format", v3, v4, v5, v6, v7, v8, v9, v175);
        __p[1] = 0;
        __p[0] = 0;
        uint64_t v219 = 0;
        uint64_t v158 = v202;
        unint64_t v196 = v203;
        if (v202 == v203)
        {
LABEL_219:
          sub_1003A94A4("decodeRangeCIREventVersion2: returning RangeCIREvent", v151, v152, v153, v154, v155, v156, v157, v176);
          sub_1003A6080((uint64_t)__src, v180, v179, v36, SBYTE4(v180), &__dst, (__int16 **)__p, &v199);
          unint64_t v168 = __src[5];
          *(void **)(a3 + 16) = __src[2];
          *(_OWORD *)a3 = *(_OWORD *)__src;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)&__src[3];
          *(void *)(a3 + 40) = v168;
          __src[3] = 0;
          __src[4] = 0;
          *(_OWORD *)(a3 + 48) = *(_OWORD *)v223;
          *(void **)(a3 + 64) = v223[2];
          __src[5] = 0;
          memset(v223, 0, 24);
          *(unsigned char *)(a3 + 72) = 1;
          sub_10016AE10((uint64_t)__src);
        }
        else
        {
          while (1)
          {
            if (!*(unsigned char *)(v158 + 2))
            {
              sub_1003A9600("convertCIRPacketToLibRoseFormat: no packet type", v151, v152, v153, v154, v155, v156, v157, v176);
              goto LABEL_242;
            }
            if (!*(unsigned char *)(v158 + 4))
            {
              sub_1003A9600("convertCIRPacketToLibRoseFormat: no RX chain bit mask", v151, v152, v153, v154, v155, v156, v157, v176);
              goto LABEL_242;
            }
            if (!*(unsigned char *)(v158 + 88))
            {
              sub_1003A9600("convertCIRPacketToLibRoseFormat: no first path index", v151, v152, v153, v154, v155, v156, v157, v176);
              goto LABEL_242;
            }
            if (!*(unsigned char *)(v158 + 104)) {
              break;
            }
            LOWORD(v207) = *(_WORD *)v158;
            BYTE2(v207) = *(unsigned char *)(v158 + 3);
            long long v208 = *(_OWORD *)(v158 + 8);
            v209 = *(void (__cdecl ***)(std::stringbuf *__hidden))(v158 + 24);
            *(void *)(v158 + 8) = 0;
            *(void *)(v158 + 16) = 0;
            *(void *)(v158 + 24) = 0;
            *(_OWORD *)v210 = *(_OWORD *)(v158 + 32);
            v211 = *(void **)(v158 + 48);
            *(void *)(v158 + 32) = 0;
            *(void *)(v158 + 40) = 0;
            *(void *)(v158 + 48) = 0;
            long long v212 = *(_OWORD *)(v158 + 56);
            v213 = *(void **)(v158 + 72);
            *(void *)(v158 + 64) = 0;
            *(void *)(v158 + 72) = 0;
            *(void *)(v158 + 56) = 0;
            *(double *)&long long v214 = (double)*(unint64_t *)(v158 + 80) * 0.01;
            BYTE8(v214) = 1;
            *(void *)v215 = sub_10039CC60(*(void *)(v158 + 96));
            v215[8] = 1;
            uint64_t v159 = *(void *)(v158 + 96);
            v215[24] = *(unsigned char *)(v158 + 104);
            *(void *)&v215[16] = v159;
            long long v216 = *(_OWORD *)(v158 + 112);
            uint64_t v217 = *(void *)(v158 + 128);
            *(void *)(v158 + 112) = 0;
            *(void *)(v158 + 120) = 0;
            *(void *)(v158 + 128) = 0;
            LOWORD(__src[0]) = (_WORD)v207;
            BYTE2(__src[0]) = BYTE2(v207);
            *(_OWORD *)&__src[1] = v208;
            __src[3] = v209;
            v209 = 0;
            long long v208 = 0uLL;
            *(_OWORD *)&__src[4] = *(_OWORD *)v210;
            uint64_t v160 = v211;
            v210[1] = 0;
            v211 = 0;
            v210[0] = 0;
            *(_OWORD *)&v223[1] = v212;
            v223[0] = v160;
            v223[3] = v213;
            long long v212 = 0uLL;
            v213 = 0;
            *(_OWORD *)((char *)v225 + 9) = *(_OWORD *)&v215[9];
            long long v224 = v214;
            v225[0] = *(_OWORD *)v215;
            long long v226 = v216;
            uint64_t v227 = v217;
            long long v216 = 0uLL;
            uint64_t v217 = 0;
            char v228 = 1;
            v205[0] = &v216;
            sub_10016D6F0((void ***)v205);
            if ((void)v212)
            {
              *((void *)&v212 + 1) = v212;
              operator delete((void *)v212);
            }
            if (v210[0])
            {
              v210[1] = v210[0];
              operator delete(v210[0]);
            }
            if ((void)v208)
            {
              *((void *)&v208 + 1) = v208;
              operator delete((void *)v208);
            }
            if (!v228) {
              goto LABEL_243;
            }
            sub_1003A5FB8((uint64_t *)__p, (__int16 *)__src);
            sub_1003A600C((uint64_t)__src);
            v158 += 136;
            if (v158 == v196) {
              goto LABEL_219;
            }
          }
          sub_1003A9600("convertCIRPacketToLibRoseFormat: no rx start time", v151, v152, v153, v154, v155, v156, v157, v176);
LABEL_242:
          LOBYTE(__src[0]) = 0;
          char v228 = 0;
LABEL_243:
          sub_1003A9600("RoseCIRDecoder::decodeRangeCIREventVersion2: error converting packet to libRose format", v161, v162, v163, v164, v165, v166, v167, v176);
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 72) = 0;
          sub_1003A600C((uint64_t)__src);
        }
        __src[0] = __p;
        sub_10016D794((void ***)__src);
LABEL_222:
        __src[0] = &v199;
        sub_10016D6F0((void ***)__src);
        __src[0] = &v202;
        sub_1003A6140((void ***)__src);
        return;
      default:
        JUMPOUT(0);
    }
  }
}

void sub_1003A58F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39)
{
  STACK[0x260] = (unint64_t)&STACK[0x238];
  sub_10016D794((void ***)&STACK[0x260]);
  STACK[0x238] = (unint64_t)&a36;
  sub_10016D6F0((void ***)&STACK[0x238]);
  STACK[0x238] = (unint64_t)&a39;
  sub_1003A6140((void ***)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_1003A5BC4(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v4 = a3 + a2;
  if (a3 + a2 > a2)
  {
    unint64_t v5 = a2;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *a1;
      unint64_t v10 = a4[2];
      if ((unint64_t)v8 >= v10)
      {
        unint64_t v12 = *a4;
        unint64_t v13 = &v8[-*a4];
        unint64_t v14 = (unint64_t)(v13 + 1);
        if ((uint64_t)(v13 + 1) < 0) {
          sub_1000267C4();
        }
        unint64_t v15 = v10 - v12;
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v16 = v14;
        }
        if (v16) {
          uint64_t v17 = (char *)operator new(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        unint64_t v18 = &v13[(void)v17];
        v13[(void)v17] = *(unsigned char *)(v9 + v5);
        uint64_t v11 = (uint64_t)&v13[(void)v17 + 1];
        if (v8 != (unsigned char *)v12)
        {
          unint64_t v19 = &v8[~v12];
          do
          {
            char v20 = *--v8;
            (v19--)[(void)v17] = v20;
          }
          while (v8 != (unsigned char *)v12);
          uint64_t v8 = (unsigned char *)*a4;
          unint64_t v18 = v17;
        }
        *a4 = (unint64_t)v18;
        a4[1] = v11;
        a4[2] = (unint64_t)&v17[v16];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *uint64_t v8 = *(unsigned char *)(v9 + v5);
        uint64_t v11 = (uint64_t)(v8 + 1);
      }
      a4[1] = v11;
      ++v5;
      uint64_t v8 = (unsigned char *)v11;
    }
    while (v5 != v4);
  }
}

void sub_1003A5CFC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A5D24(uint64_t a1)
{
  uint64_t v6 = (void **)(a1 + 112);
  sub_10016D6F0(&v6);
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1003A5D90(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if ((a3 & 0x3FF) != 0) {
    sub_100437A18();
  }
  if (a3 >= 0x400)
  {
    uint64_t v6 = a4;
    uint64_t v7 = 0;
    if (a3 >> 10 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a3 >> 10;
    }
    uint64_t v24 = (uint64_t)(a4 + 2);
    uint64_t v25 = v8;
    do
    {
      bzero(__src, 0x400uLL);
      for (uint64_t i = 0; i != 1024; i += 4)
      {
        int __dst = 0;
        sub_1003E0514((char *)(*a1 + a2 + i), 2uLL, (unsigned char *)&__dst + 2, 1);
        sub_1003E0514((char *)(*a1 + a2 + i + 2), 2uLL, &__dst, 1);
        __int16 v10 = HIWORD(__dst);
        uint64_t v11 = &__src[i];
        *uint64_t v11 = __dst;
        v11[1] = v10;
      }
      unint64_t v13 = (char *)v6[1];
      unint64_t v12 = v6[2];
      if ((unint64_t)v13 >= v12)
      {
        unint64_t v15 = (char *)*v6;
        uint64_t v16 = (uint64_t)&v13[-*v6] >> 10;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 54) {
          sub_1000267C4();
        }
        uint64_t v18 = v12 - (void)v15;
        if (v18 >> 9 > v17) {
          unint64_t v17 = v18 >> 9;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFC00) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          char v20 = (char *)sub_10016D5C4(v24, v19);
          uint64_t v27 = v21;
          unint64_t v15 = (char *)*v6;
          unint64_t v13 = (char *)v6[1];
        }
        else
        {
          char v20 = 0;
          uint64_t v27 = 0;
        }
        uint64_t v22 = &v20[1024 * v16];
        memcpy(v22, __src, 0x400uLL);
        uint64_t v23 = v22;
        while (v13 != v15)
        {
          v13 -= 1024;
          v23 -= 1024;
          memcpy(v23, v13, 0x400uLL);
        }
        unint64_t v14 = v22 + 1024;
        *a4 = v23;
        a4[1] = v22 + 1024;
        uint64_t v6 = a4;
        a4[2] = &v20[1024 * v27];
        if (v15) {
          operator delete(v15);
        }
        uint64_t v8 = v25;
      }
      else
      {
        memcpy((void *)v6[1], __src, 0x400uLL);
        unint64_t v14 = v13 + 1024;
      }
      a2 += 1024;
      v6[1] = v14;
      ++v7;
    }
    while (v7 != v8);
  }
}

void sub_1003A5F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A5FB8(uint64_t *a1, __int16 *a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = sub_1003A6860(a1, a2);
  }
  else
  {
    sub_1003A6984(v3, *(void *)(v3 - 8), a2);
    uint64_t result = v5 + 152;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1003A600C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v6 = (void **)(a1 + 128);
    sub_10016D6F0(&v6);
    uint64_t v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(void *)(a1 + 64) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      *(void *)(a1 + 40) = v3;
      operator delete(v3);
    }
    unint64_t v4 = *(void **)(a1 + 8);
    if (v4)
    {
      *(void *)(a1 + 16) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_1003A6080(uint64_t a1, __int16 a2, char a3, __int16 a4, char a5, void *a6, __int16 **a7, uint64_t *a8)
{
  *(_WORD *)a1 = a2;
  *(unsigned char *)(a1 + 2) = a3;
  *(_WORD *)(a1 + 4) = a4;
  *(unsigned char *)(a1 + 6) = a5;
  *(void *)(a1 + 7) = *a6;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10016D19C((void *)(a1 + 24), *a7, a7[1], 0x86BCA1AF286BCA1BLL * (((char *)a7[1] - (char *)*a7) >> 3));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_10016D82C((void *)(a1 + 48), *a8, a8[1], (a8[1] - *a8) >> 5);
  *(void *)(a1 + 16) = *(void *)(a1 + 7);
  return a1;
}

void sub_1003A6128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10016D794((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1003A6140(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        sub_1003A61D8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1003A61D8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void **)(a2 + 112);
  sub_10016D6F0(&v6);
  uint64_t v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(void *)(a2 + 64) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4)
  {
    *(void *)(a2 + 40) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a2 + 8);
  if (v5)
  {
    *(void *)(a2 + 16) = v5;
    operator delete(v5);
  }
}

uint64_t sub_1003A6240(uint64_t *a1, int *a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_1000267C4();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_100368184((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  __int16 v10 = v7;
  uint64_t v11 = &v7[136 * v3];
  unint64_t v13 = &v7[136 * v6];
  sub_1003A634C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 136;
  sub_1003A63F0(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1003A65AC(&v10);
  return v8;
}

void sub_1003A6338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003A65AC((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_1003A634C(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  *(unsigned char *)(a2 + 4) = *((unsigned char *)a3 + 4);
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 2);
  *(void *)(a2 + 24) = *((void *)a3 + 3);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a3 + 2);
  *(void *)(a2 + 48) = *((void *)a3 + 6);
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 6) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 14);
  *(void *)(a2 + 72) = *((void *)a3 + 9);
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 9) = 0;
  long long v4 = *((_OWORD *)a3 + 5);
  *(_OWORD *)(a2 + 89) = *(_OWORD *)((char *)a3 + 89);
  *(_OWORD *)(a2 + 80) = v4;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 112) = 0;
  __n128 result = *((__n128 *)a3 + 7);
  *(__n128 *)(a2 + 112) = result;
  *(void *)(a2 + 128) = *((void *)a3 + 16);
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  return result;
}

uint64_t sub_1003A63F0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003A6468((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003A6468(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 34;
      sub_1003A634C(a1, v7 - 136, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 136;
      *((void *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1003A6520((uint64_t)v13);
  return v11;
}

uint64_t sub_1003A6520(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1003A6558((uint64_t *)a1);
  }
  return a1;
}

void sub_1003A6558(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1003A61D8(v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **sub_1003A65AC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1003A65E0(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 136;
    sub_1003A61D8(v4, i - 136);
  }
}

uint64_t sub_1003A6628(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003A66A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003A66A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1003A674C((uint64_t)v11);
  return v9;
}

uint64_t sub_1003A674C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1003A6784(a1);
  }
  return a1;
}

void sub_1003A6784(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_1003A67CC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1003A6804(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

uint64_t sub_1003A6860(uint64_t *a1, __int16 *a2)
{
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286) {
    sub_1000267C4();
  }
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943) {
    unint64_t v6 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_10016D27C((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  __int16 v10 = v7;
  uint64_t v11 = &v7[152 * v3];
  long long v13 = &v7[152 * v6];
  sub_1003A6984((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  char v12 = v11 + 152;
  sub_1003A6A28(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1003A6BE4(&v10);
  return v8;
}

void sub_1003A6970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003A6BE4((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_1003A6984(uint64_t a1, uint64_t a2, __int16 *a3)
{
  __int16 v3 = *a3;
  *(unsigned char *)(a2 + 2) = *((unsigned char *)a3 + 2);
  *(_WORD *)a2 = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 4);
  *(void *)(a2 + 24) = *((void *)a3 + 3);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a3 + 2);
  *(void *)(a2 + 48) = *((void *)a3 + 6);
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 6) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 28);
  *(void *)(a2 + 72) = *((void *)a3 + 9);
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 9) = 0;
  long long v4 = *((_OWORD *)a3 + 5);
  long long v5 = *((_OWORD *)a3 + 6);
  *(_OWORD *)(a2 + 105) = *(_OWORD *)((char *)a3 + 105);
  *(_OWORD *)(a2 + 80) = v4;
  *(_OWORD *)(a2 + 96) = v5;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 128) = 0;
  __n128 result = *((__n128 *)a3 + 8);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *((void *)a3 + 18);
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  *((void *)a3 + 18) = 0;
  return result;
}

uint64_t sub_1003A6A28(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003A6AA0((uint64_t)(a1 + 2), a1[1], (__int16 *)a1[1], *a1, (__int16 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003A6AA0(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, __int16 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 76;
      sub_1003A6984(a1, v7 - 152, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 152;
      *((void *)&v16 + 1) -= 152;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1003A6B58((uint64_t)v13);
  return v11;
}

uint64_t sub_1003A6B58(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1003A6B90((uint64_t *)a1);
  }
  return a1;
}

void sub_1003A6B90(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10016D688(v3, v1);
      v1 += 152;
    }
    while (v1 != v2);
  }
}

void **sub_1003A6BE4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1003A6C18(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 152;
    sub_10016D688(v4, i - 152);
  }
}

uint64_t sub_1003A6C60(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  sub_1003A6CF8(a1 + 16, a3);
  *(_DWORD *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return a1;
}

std::thread *sub_1003A6CA0(std::thread *this)
{
  atomic_store(0, (unsigned __int8 *)&this[8]);
  uint64_t v2 = this + 7;
  if (this[7].__t_) {
    std::thread::join(this + 7);
  }
  std::thread::~thread(v2);
  sub_1003A6D90(&this[2].__t_);
  return this;
}

uint64_t sub_1003A6CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1003A6D90(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_1003A6E14(uint64_t a1)
{
  return *(unsigned char *)(a1 + 5) == 1 && *(unsigned __int8 *)(a1 + 4) < 3u;
}

BOOL sub_1003A6E3C(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 4) && *(unsigned char *)(a1 + 5) == 1;
}

BOOL sub_1003A6E5C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 4) == 2 && *(unsigned char *)(a1 + 5) == 1;
}

BOOL sub_1003A6E80(unsigned __int8 *a1)
{
  return *a1 - 1 < 3;
}

uint64_t sub_1003A6E94(unsigned __int8 *a1)
{
  uint64_t result = *a1;
  if ((result - 1) >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Unknown message type");
  }
  return result;
}

void sub_1003A6EF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A6F0C(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 1);
  if (result >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Unknown group ID");
  }
  return result;
}

void sub_1003A6F6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A6F80(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 1) > 2u || sub_1003A6F0C(a1))
  {
    sub_100054E28((uint64_t)v9);
    sub_100056628(v10, (uint64_t)"not ranging group ID: ", 22);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v8);
  }
  uint64_t result = *(unsigned __int16 *)(a1 + 2);
  BOOL v3 = result > 0x16 || ((1 << result) & 0x60023F) == 0;
  if (v3
    && ((result - 80) > 0x20 || ((1 << (result - 80)) & 0x10001003FLL) == 0)
    && ((result - 512) > 0xD || ((1 << result) & 0x243B) == 0))
  {
    sub_100054E28((uint64_t)v9);
    uint64_t v5 = sub_100056628(v10, (uint64_t)"Unknown ranging group message ID: ", 34);
    *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(*v5 - 24) + 8) & 0xFFFFFFB5 | 8;
    uint64_t v6 = sub_100056628(v5, (uint64_t)"0x", 2);
    *(void *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 3;
    v8.__r_.__value_.__s.__data_[0] = 48;
    sub_1001771C8(v6, (char *)&v8);
    std::ostream::operator<<();
    uint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v7, &v8);
  }
  return result;
}

void sub_1003A71D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_100055100((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_1003A7228(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 1) > 2u || sub_1003A6F0C(a1) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "not debug group ID");
    goto LABEL_7;
  }
  uint64_t result = *(unsigned __int16 *)(a1 + 2);
  if ((result - 82) >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Debug group message IDs not defined");
LABEL_7:
  }
  return result;
}

void sub_1003A72C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A72DC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 1) > 2u || sub_1003A6F0C(a1) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "not factory test group ID");
LABEL_12:
  }
  uint64_t result = *(unsigned __int16 *)(a1 + 2);
  BOOL v3 = result > 0x20 || ((1 << result) & 0x104090011) == 0;
  if (v3 && result != 78 && result != 128)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Unknown factory test group message ID");
    goto LABEL_12;
  }
  return result;
}

void sub_1003A73A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1003A73B8(int a1, int a2)
{
  return a1 >= a2;
}

void sub_1003A73C4(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (sub_1003A74DC(a1, a2))
  {
    sub_1003A94A4("RoseCIRDecoder::getBufferedCIREvent, version %d", v5, v6, v7, v8, v9, v10, v11, *(unsigned __int8 *)(a1 + 5));
    int v19 = *(unsigned __int8 *)(a1 + 5);
    if (v19 == 2)
    {
      sub_1003A3ECC((int *)a1, (uint64_t *)(a1 + 8), (uint64_t)a3);
    }
    else
    {
      if (v19 != 1)
      {
        sub_1003A9600("collectRangeCIREvent: Unexpected version number %u in CIR debug data. Only versions 1 and 2 are supported.", v12, v13, v14, v15, v16, v17, v18, *(unsigned __int8 *)(a1 + 5));
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_1003A1A8C(exception, "Unexpected version number in CIR debug data. Only versions 1 and 2 are supported.");
      }
      sub_1003D151C((char **)(a1 + 8), (uint64_t)a3);
    }
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
}

void sub_1003A74C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1003A74DC(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_1003E0498((unsigned int **)a2);
  unint64_t v5 = sub_1003E0470(v4);
  int v39 = v5;
  __int16 v40 = WORD2(v5);
  if (*(unsigned char *)(a1 + 4) && !sub_1003A6E3C((uint64_t)&v39))
  {
    sub_10000486C("collectRangeCIREvent: waiting for start of multipart message; ignoring partial data",
      v6,
      v7,
      v8,
      v9,
      v10,
      v11,
      v12,
      v38);
    return 0;
  }
  if (sub_1003A6E3C((uint64_t)&v39))
  {
    uint64_t v13 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 4) = 0;
    *(void *)(a1 + 16) = v13;
    sub_1003E0514((char *)(*(void *)a2 + 4), 1uLL, (unsigned char *)(a1 + 5), 1);
    sub_1003E0514((char *)(*(void *)a2 + 5), 2uLL, (unsigned char *)(a1 + 6), 1);
    if (*(unsigned __int8 *)(a1 + 5) - 1 >= 2)
    {
      sub_1003A9600("collectRangeCIREvent: Unexpected version number %u in CIR debug data. Only versions 1 and 2 are supported.", v14, v15, v16, v17, v18, v19, v20, *(unsigned __int8 *)(a1 + 5));
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1003A1A8C(exception, "Unexpected version number in CIR debug data. Only versions 1 and 2 are supported.");
    }
    sub_1000EC7D0((unint64_t *)(a1 + 8), *(unsigned __int16 *)(a1 + 6));
    uint64_t v21 = 7;
  }
  else
  {
    uint64_t v21 = 4;
  }
  sub_100253DF4(a1 + 8, *(char **)(a1 + 16), (char *)(*(void *)a2 + v21), *(char **)(a2 + 8), *(void *)(a2 + 8) - (*(void *)a2 + v21));
  if (*(void *)(a1 + 16) - *(void *)(a1 + 8) > (unint64_t)*(unsigned __int16 *)(a1 + 6))
  {
    sub_1003A9600("collectRangeCIREvent: Collected CIR data exceeds expected size %hu", v22, v23, v24, v25, v26, v27, v28, *(unsigned __int16 *)(a1 + 6));
    BOOL result = 0;
    *(unsigned char *)(a1 + 4) = 1;
    return result;
  }
  BOOL result = sub_1003A6E5C((uint64_t)&v39);
  if (result)
  {
    BOOL result = 1;
    *(unsigned char *)(a1 + 4) = 1;
    if (*(void *)(a1 + 16) - *(void *)(a1 + 8) != *(unsigned __int16 *)(a1 + 6))
    {
      sub_1003A9600("collectRangeCIREvent: end of multipart message, expected %hu bytes but received %zu", v30, v31, v32, v33, v34, v35, v36, *(unsigned __int16 *)(a1 + 6));
      return 0;
    }
  }
  return result;
}

void sub_1003A7694(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1003A76A8(void *a1, __int16 **a2)
{
  uint64_t v2 = a1 + 1;
  BOOL v3 = (unsigned char *)a1[1];
  a1[2] = v3;
  unsigned int v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      __int16 v7 = *v4;
      unint64_t v8 = a1[3];
      if ((unint64_t)v3 >= v8)
      {
        unint64_t v10 = *v2;
        uint64_t v11 = &v3[-*v2];
        unint64_t v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0) {
          goto LABEL_39;
        }
        unint64_t v13 = v8 - v10;
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v12;
        }
        if (v14) {
          uint64_t v15 = (char *)operator new(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v11[(void)v15];
        uint64_t v17 = &v11[(void)v15];
        *uint64_t v17 = v7;
        uint64_t v9 = v17 + 1;
        if (v3 != (unsigned char *)v10)
        {
          uint64_t v18 = &v3[~v10];
          do
          {
            char v19 = *--v3;
            (v18--)[(void)v15] = v19;
          }
          while (v3 != (unsigned char *)v10);
          BOOL v3 = (unsigned char *)*v2;
          uint64_t v16 = v15;
        }
        a1[1] = v16;
        a1[2] = v9;
        a1[3] = &v15[v14];
        if (v3) {
          operator delete(v3);
        }
      }
      else
      {
        *BOOL v3 = v7;
        uint64_t v9 = v3 + 1;
      }
      a1[2] = v9;
      unint64_t v20 = a1[3];
      if ((unint64_t)v9 >= v20)
      {
        unint64_t v21 = *v2;
        uint64_t v22 = &v9[-*v2];
        unint64_t v23 = (unint64_t)(v22 + 1);
        if ((uint64_t)(v22 + 1) < 0) {
LABEL_39:
        }
          sub_1000267C4();
        unint64_t v24 = v20 - v21;
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v25 = v23;
        }
        if (v25) {
          uint64_t v26 = operator new(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = (char *)v26 + v25;
        v22[(void)v26] = HIBYTE(v7);
        BOOL v3 = &v22[(void)v26 + 1];
        if (v9 == (unsigned char *)v21)
        {
          a1[1] = &v22[(void)v26];
          a1[2] = v3;
          a1[3] = v27;
        }
        else
        {
          uint64_t v28 = &v9[~v21];
          do
          {
            char v29 = *--v9;
            (v28--)[(void)v26] = v29;
          }
          while (v9 != (unsigned char *)v21);
          uint64_t v9 = (unsigned char *)a1[1];
          a1[1] = v26;
          a1[2] = v3;
          a1[3] = v27;
          if (!v9) {
            goto LABEL_37;
          }
        }
        operator delete(v9);
      }
      else
      {
        *uint64_t v9 = HIBYTE(v7);
        BOOL v3 = v9 + 1;
      }
LABEL_37:
      a1[2] = v3;
      ++v4;
    }
    while (v4 != v5);
  }
}

uint64_t sub_1003A7884(unsigned __int8 *a1)
{
  sub_1002363E4((uint64_t)v15);
  sub_1003A7B70(*a1, &v12);
  uint64_t v2 = std::string::append(&v12, ": [");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v14 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0) {
    unsigned int v4 = __p;
  }
  else {
    unsigned int v4 = (void **)__p[0];
  }
  if (v14 >= 0) {
    uint64_t v5 = HIBYTE(v14);
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_100056628(v15, (uint64_t)v4, v5);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  LOBYTE(__p[0]) = 48;
  uint64_t v6 = sub_1001771C8(v15, (char *)__p);
  *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
  if (*((void *)a1 + 2) != *((void *)a1 + 1))
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = sub_100056628(v15, (uint64_t)"0x", 2);
      *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
      std::ostream::operator<<();
      uint64_t v10 = *((void *)a1 + 1);
      uint64_t v9 = *((void *)a1 + 2);
      if (v7 != ~v10 + v9)
      {
        sub_100056628(v15, (uint64_t)", ", 2);
        uint64_t v10 = *((void *)a1 + 1);
        uint64_t v9 = *((void *)a1 + 2);
      }
      ++v7;
    }
    while (v7 < v9 - v10);
  }
  sub_100056628(v15, (uint64_t)"]", 1);
  std::stringbuf::str();
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1003A7B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void *sub_1003A7B70@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if ((a1 - 1) > 0x35) {
    uint64_t v2 = "Unknown";
  }
  else {
    uint64_t v2 = off_100863850[(char)(a1 - 1)];
  }
  return sub_100004950(a2, v2);
}

uint64_t sub_1003A7BA4(uint64_t a1, int a2)
{
  int v2 = 0;
  if (a2 < 0)
  {
    int v4 = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v4 = 0;
    if (*(void *)(a1 + 16) - v3 > (unint64_t)a2)
    {
      int v4 = *(unsigned __int8 *)(v3 + a2);
      int v2 = 1;
    }
  }
  return v4 | (v2 << 8);
}

BOOL sub_1003A7BDC(uint64_t a1, int a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16) - v3;
  if (v4 > a2) {
    *(unsigned char *)(v3 + a2) = a3;
  }
  return v4 > a2;
}

BOOL sub_1003A7C00(int a1)
{
  return (a1 - 9) < 4;
}

uint64_t sub_1003A7C10(unsigned int a1, int a2)
{
  if (a2 == 2)
  {
    if (a1 < 0x21 && ((0x1FFFFFE01uLL >> a1) & 1) != 0) {
      return byte_1004C5420[(char)a1];
    }
LABEL_9:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Invalid raw value for extended preamble");
  }
  if (a2 != 1 || a1 >= 4) {
    goto LABEL_9;
  }
  return (a1 + 9);
}

void sub_1003A7CB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1003A7CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1)
  {
    sub_1003A9600("Preambles not supported in HSI 1.x", a2, a3, a4, a5, a6, a7, a8, v9);
    goto LABEL_5;
  }
  if (a2 != 2)
  {
    if (!a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1003A1A8C(exception, "Unknown HSI version");
LABEL_6:
    }
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Invalid extended preamble");
    goto LABEL_6;
  }
}

void sub_1003A7D9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A7E38(char a1)
{
  sub_100054E28((uint64_t)v5);
  int v2 = sub_100056628(v6, (uint64_t)"Preamble_", 9);
  char v8 = a1;
  sub_100056628(v2, (uint64_t)&v8, 1);
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1003A7FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003A7FD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result > 0x1B || ((1 << result) & 0xFDB548F) == 0)
  {
    sub_1003A9600("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid session type");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Invalid session type");
  }
  return result;
}

void sub_1003A806C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1003A8080@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x1B) {
    int v2 = "UNKNOWN";
  }
  else {
    int v2 = off_100863A00[(char)a1];
  }
  return sub_100004950(a2, v2);
}

uint64_t sub_1003A80B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result > 4)
  {
    sub_1003A9600("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid gr superframe format");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Invalid session type");
  }
  return result;
}

void sub_1003A8130(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A8144(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result > 1)
  {
    sub_1003A9600("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid session role");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Invalid session role");
  }
  return result;
}

void sub_1003A81C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A81D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result > 0x36 || ((1 << result) & 0x49E3C884FAA1F2) == 0)
  {
    sub_1003A9600("Exception: Invalid config parameter ID %d", a2, a3, a4, a5, a6, a7, a8, result);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Invalid config parameter ID");
  }
  return result;
}

void sub_1003A826C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_1003A8280@<X0>(_WORD *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (result < 0x33 && (__int16 v4 = a2, (a2 - 1) > 0xFFFFFFCC))
  {
    __int16 v6 = (__int16)result;
    char v7 = operator new(2uLL);
    *(void *)a3 = v7;
    *char v7 = v6 | (v4 << 8);
    BOOL result = v7 + 1;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 16) = result;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 24) = v5;
  return result;
}

uint64_t sub_1003A82F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result >= 0x62 && result != 16398 && result != 0xFFFF)
  {
    sub_1003A97C4("Fault: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Unknown error code");
    return 0xFFFFLL;
  }
  return result;
}

void *sub_1003A8354@<X0>(int a1@<W0>, void *a2@<X8>)
{
  int v2 = "SUCCESS";
  switch(a1)
  {
    case 0:
      return sub_100004950(a2, v2);
    case 1:
      int v2 = "INVALID_CMD_PARAM";
      break;
    case 2:
      int v2 = "UNKNOWN_CMD";
      break;
    case 3:
      int v2 = "INVALID_CMD_LEN";
      break;
    case 4:
      int v2 = "MEMORY_FAILURE";
      break;
    case 5:
      int v2 = "INTERNAL";
      break;
    case 6:
      int v2 = "BUSY";
      break;
    case 7:
      int v2 = "CMD_DISALLOWED";
      break;
    case 8:
      int v2 = "SES_MAX_LIMIT_REACHED";
      break;
    case 9:
      int v2 = "SES_NOT_FOUND";
      break;
    case 10:
      int v2 = "TBD3";
      break;
    case 11:
      int v2 = "TBD4";
      break;
    case 12:
      int v2 = "SES_TIMEOUT";
      break;
    case 13:
      int v2 = "SES_SYNC_TIMEOUT";
      break;
    case 14:
      int v2 = "MISSED_RANGING_CYCLE";
      break;
    case 15:
      int v2 = "LOCAL_SES_REMOVE_SUCCESS";
      break;
    case 16:
      int v2 = "LOCAL_SES_DISABLE_SUCCESS";
      break;
    case 17:
      int v2 = "SES_COMPLETED";
      break;
    case 18:
      int v2 = "SES_ALREADY_ACTIVE";
      break;
    case 19:
      int v2 = "SES_ALREADY_DISABLED";
      break;
    case 20:
      int v2 = "SES_SCHEDULING_CONFLICT";
      break;
    case 21:
      int v2 = "SES_COEX_CONFLICT";
      break;
    case 22:
      int v2 = "SES_WRONG_SYNC";
      break;
    case 23:
      int v2 = "START_TIME_ELAPSED";
      break;
    case 24:
      int v2 = "SES_UAP_ALREADY_PENDING";
      break;
    case 25:
      int v2 = "COEX_UNSUPPORTED";
      break;
    case 26:
      int v2 = "INVALID_TX_MINI_SLOT_SIZE";
      break;
    case 27:
      int v2 = "INVALID_RX_MINI_SLOT_SIZE";
      break;
    case 28:
      int v2 = "INVALID_SES_ROLE";
      break;
    case 29:
      int v2 = "INVALID_ANTENNA_CFG";
      break;
    case 30:
      int v2 = "INVALID_NACCESS_SLOTS";
      break;
    case 31:
      int v2 = "INVALID_PREAMBLE";
      break;
    case 32:
      int v2 = "INVALID_FEM_CFG";
      break;
    case 33:
      int v2 = "SUPERFRAMES_OVERLAP";
      break;
    case 34:
      int v2 = "INVALID_INTERVAL";
      break;
    case 35:
      int v2 = "INVALID_PKT_TYPE";
      break;
    case 36:
      int v2 = "INVALID_MAC_ADDR";
      break;
    case 37:
      int v2 = "MUTE_UNMUTE_DISALLOWED";
      break;
    case 38:
      int v2 = "SES_MUTED";
      break;
    case 39:
      int v2 = "INVALID_CHANNEL";
      break;
    case 40:
      int v2 = "DTM_CMD_UNSUPPORTED";
      break;
    case 41:
      int v2 = "DTM_SES_NOT_READY";
      break;
    case 42:
      int v2 = "DTM_SES_BUSY";
      break;
    case 43:
      int v2 = "DTM_PAYLOAD_INVALID_LEN";
      break;
    case 44:
      int v2 = "DTM_INVALID_SES_TO";
      break;
    case 45:
      int v2 = "MP_CMD_INTERLEAVED";
      break;
    case 46:
      int v2 = "MP_CMD_LEN_OVERFLOW";
      break;
    case 47:
      int v2 = "INVALID_SES_TYPE";
      break;
    case 48:
      int v2 = "INVALID_ALISHA_UWB_CFG_ID";
      break;
    case 49:
      int v2 = "INVALID_ALISHA_RAN_MULTIPLIER";
      break;
    case 50:
      int v2 = "INVALID_ALISHA_NRESPONDERS";
      break;
    case 51:
      int v2 = "INVALID_ALISHA_NCHAPS_PER_SLOT";
      break;
    case 52:
      int v2 = "INVALID_ALISHA_NSLOTS_PER_ROUND";
      break;
    case 53:
      int v2 = "INVALID_ALISHA_RBLOCK_CFG";
      break;
    case 54:
      int v2 = "ALISHA_UWB_SES_ID_NOT_FOUND";
      break;
    case 55:
      int v2 = "ALISHA_UWB_SES_ID_ALREADY_IN_USE";
      break;
    case 56:
      int v2 = "ALISHA_KEY_STORE_FULL";
      break;
    case 57:
      int v2 = "INVALID_ALISHA_RESPONDER_IDX";
      break;
    case 58:
      int v2 = "SES_GRUAP_ALREADY_PENDING";
      break;
    case 59:
      int v2 = "INVALID_CHANNEL_HOP_PATTERN";
      break;
    case 60:
      int v2 = "INVALID_ACCESS_SLOT_IDX";
      break;
    case 61:
      int v2 = "INVALID_GR_TYPE";
      break;
    case 62:
      int v2 = "SLOT_TIME_ELAPSED";
      break;
    case 63:
      int v2 = "INVALID_ALISHA_PULSE_SHAPE_COMBO";
      break;
    case 64:
      int v2 = "INVALID_ALISHA_HOP_MODE";
      break;
    case 65:
      int v2 = "INVALID_ALISHA_HOP_SEQUENCE";
      break;
    case 66:
      int v2 = "INVALID_SUBRATE";
      break;
    case 67:
      int v2 = "SES_NOT_ACTIVE";
      break;
    case 68:
      int v2 = "SES_SUBRATE_ALREADY_PENDING";
      break;
    case 69:
      int v2 = "SES_SUBRATE_ALREADY_EFFECTIVE";
      break;
    case 70:
      int v2 = "UAP_RX_FAILED";
      break;
    case 71:
      int v2 = "ALISHA_URSK_RETRIEVAL_FAILED";
      break;
    case 72:
      int v2 = "ALISHA_GET_KEY_ALREADY_PENDING";
      break;
    case 73:
      int v2 = "ALISHA_STS_INDEX_EXHAUSTED";
      break;
    case 74:
      int v2 = "ALISHA_BLOCK_IDX_EXHAUSTED";
      break;
    case 75:
      int v2 = "ALISHA_URSK_TTL_EXPIRED";
      break;
    case 76:
      int v2 = "INVALID_ALISHA_STS_INDEX_0";
      break;
    case 77:
      int v2 = "ALISHA_RESPONSE_TIMEOUT";
      break;
    case 78:
      int v2 = "ALISHA_TOTAL_TIMEOUT";
      break;
    case 79:
      int v2 = "UNAUTHENTICATED_CAL_BLOB";
      break;
    case 80:
      int v2 = "INVALID_SFD";
      break;
    case 81:
      int v2 = "INVALID_ALISHA_NSIMRESPONDERS";
      break;
    case 82:
      int v2 = "DUPLICATE";
      break;
    case 83:
      int v2 = "NMI_NAP_RX_FAILED";
      break;
    case 84:
      int v2 = "NMI_NAR_RX_FAILED";
      break;
    case 85:
      int v2 = "NMI_SOR_RX_FAILED";
      break;
    case 86:
      int v2 = "NMI_NAP_WRONG_SYNC";
      break;
    case 87:
      int v2 = "NMI_WRONG_IRK";
      break;
    case 88:
      int v2 = "NMI_RNG_DIS_BOTH_SIDES";
      break;
    case 89:
      int v2 = "NMI_POLL_RSP_RX_OTHER_FAILURE";
      break;
    case 90:
      int v2 = "NMI_DATA_RX_OTHER_FAILURE";
      break;
    case 91:
      int v2 = "NMI_POLL_RSP_WRONG_SYNC";
      break;
    case 92:
      int v2 = "NMI_DATA_WRONG_SYNC";
      break;
    case 93:
      int v2 = "SES_EXCLUSIVE_MAC_DISALLOWED";
      break;
    case 94:
      int v2 = "NMI_NAR_WRONG_SYNC";
      break;
    case 95:
      int v2 = "NMI_SOR_WRONG_SYNC";
      break;
    case 96:
      int v2 = "NMI_INVALID_RTT_TAT";
      break;
    case 97:
      int v2 = "NMI_POLL_RSP_MISSED_CYCLE";
      break;
    default:
      uint64_t v3 = "UNKNOWN";
      if (a1 == 0xFFFF) {
        uint64_t v3 = "UNKNOWN_ERROR";
      }
      if (a1 == 16398) {
        int v2 = "FACTORY_STOP_TEST";
      }
      else {
        int v2 = (char *)v3;
      }
      break;
  }
  return sub_100004950(a2, v2);
}

uint64_t sub_1003A89D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result > 6)
  {
    sub_1003A9600("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid Rose hardware version");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Invalid Rose hardware version");
  }
  return result;
}

void sub_1003A8A54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1003A8A68@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 6) {
    int v2 = "UNKNOWN";
  }
  else {
    int v2 = off_100863AE0[(__int16)a1];
  }
  return sub_100004950(a2, v2);
}

uint64_t sub_1003A8A98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (((result - 208) > 0x2E || ((1 << (result + 48)) & 0x7FFF47FF1FFFLL) == 0)
    && (result > 0x18 || ((1 << result) & 0x116003F) == 0))
  {
    sub_1003A9600("Exception: %s - 0x%x", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid rx status.");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Invalid rx status.");
  }
  return result;
}

void sub_1003A8B54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A8B68(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  int v2 = a1[1];
  if (*a1 == v2)
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
    do
    {
      int v5 = *v1++;
      unsigned int v6 = v5 - 2;
      int v7 = v3 | 2;
      if (v5 == 1) {
        v3 |= 1u;
      }
      if (v6 < 4)
      {
        ++v4;
        int v3 = v7;
      }
    }
    while (v1 != v2);
    if ((v4 & 0xFFFFFFFB) != 0) {
      sub_100437A44();
    }
  }
  return v3;
}

uint64_t sub_1003A8BD0(unsigned int a1)
{
  if (a1 >= 4) {
    sub_100437A70();
  }
  return a1 & 1;
}

uint64_t sub_1003A8BF0(unsigned int a1)
{
  if (a1 >= 4) {
    sub_100437A9C();
  }
  return (a1 >> 1) & 1;
}

void *sub_1003A8C10@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if ((a1 - 1) > 4) {
    int v2 = "UNKNOWN";
  }
  else {
    int v2 = off_100863B18[(char)(a1 - 1)];
  }
  return sub_100004950(a2, v2);
}

void *sub_1003A8C44@<X0>(int a1@<W0>, void *a2@<X8>)
{
  int v2 = "UNKNOWN";
  if (a1 == 9) {
    int v2 = "CHANNEL9";
  }
  if (a1 == 5) {
    int v3 = "CHANNEL5";
  }
  else {
    int v3 = (char *)v2;
  }
  return sub_100004950(a2, v3);
}

void *sub_1003A8C74@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 6) {
    int v2 = "UNKNOWN";
  }
  else {
    int v2 = off_100863B40[(char)a1];
  }
  return sub_100004950(a2, v2);
}

unsigned char *sub_1003A8CA4(unsigned char *result, int a2)
{
  if (a2 == 5)
  {
    char v2 = 1;
  }
  else
  {
    if (a2 != 9) {
      return result;
    }
    char v2 = 2;
  }
  *result |= v2;
  return result;
}

_WORD *sub_1003A8CD0(_WORD *result, int a2)
{
  if ((a2 - 1) <= 5) {
    *result |= word_1004C5442[(char)(a2 - 1)];
  }
  return result;
}

uint64_t sub_1003A8CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8 = a1;
  switch(a2)
  {
    case 1:
      if (a1)
      {
        if (a1 != 1)
        {
          sub_1003A9600("Exception: %s - %d", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid Rose channel config for HSI V1");
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          sub_1003A1A8C(exception, "Invalid Rose channel config");
LABEL_12:
        }
        return 9;
      }
      else
      {
        return 5;
      }
    case 2:
      sub_1003A8DFC(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case 0:
      sub_1003A9600("Exception: %s", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Unknown HSI version");
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1003A1A8C(exception, "Unknown HSI version");
      goto LABEL_12;
  }
  return v8;
}

void sub_1003A8DE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A8DFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result != 9 && result != 5)
  {
    sub_1003A9600("Exception: %s - %d", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"Invalid Rose channel config for HSI V2");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Invalid Rose channel config");
  }
  return result;
}

void sub_1003A8E84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A8E98(int a1, int a2)
{
  if (a2 == 2)
  {
    if (a1 == 5) {
      return 5;
    }
    else {
      return 9;
    }
  }
  else
  {
    if (a2 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1003A1A8C(exception, "Unknown HSI version");
    }
    return a1 != 5;
  }
}

void sub_1003A8F14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1003A8F28(unsigned int a1)
{
  unsigned int v1 = a1 >> 11;
  if ((a1 >> 11) - 1 >= 6)
  {
    if (!v1 && (a1 == 9 || a1 == 5))
    {
      LOBYTE(v1) = 0;
      unint64_t v2 = ((unint64_t)a1 << 8) | 0x10000;
    }
    else
    {
      LOBYTE(v1) = 0;
      unint64_t v2 = 0;
    }
  }
  else
  {
    unint64_t v2 = ((unint64_t)(a1 & 0x7FF) << 32) | 0x1000000000000;
  }
  return v2 | v1;
}

uint64_t sub_1003A8F90(unsigned __int8 *a1)
{
  int v1 = *a1;
  __int16 v2 = (_WORD)v1 << 11;
  unsigned __int16 v3 = v1 - 1;
  if ((v1 - 1) >= 6)
  {
    if (*a1) {
      return v3;
    }
    if (a1[2]) {
      return (unsigned __int16)(v2 | a1[1]);
    }
LABEL_8:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Missing channel-select for band");
  }
  if (!a1[6]) {
    goto LABEL_8;
  }
  return (unsigned __int16)(*((_WORD *)a1 + 2) | v2);
}

void sub_1003A9040(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A9058(int a1)
{
  if ((*(void *)&a1 & 0xFF0000) != 0 && (unint64_t v1 = sub_1003A8F28((unsigned __int16)a1), v2))
  {
    BOOL v3 = v1 == 0;
    unint64_t v4 = v1 >> 16;
    if ((_BYTE)v1) {
      unsigned __int8 v5 = 0;
    }
    else {
      unsigned __int8 v5 = BYTE1(v1);
    }
    if (v3) {
      int v6 = v4;
    }
    else {
      int v6 = 0;
    }
  }
  else
  {
    unsigned __int8 v5 = 0;
    int v6 = 0;
  }
  return v5 | (v6 << 8);
}

BOOL sub_1003A90AC(unsigned char *a1)
{
  return *a1 == 0;
}

uint64_t sub_1003A90BC(unsigned int a1)
{
  unsigned int v1 = a1 >> 8;
  unsigned __int8 v2 = __rev16(a1);
  unsigned int v3 = bswap32(a1) >> 24;
  if (((1 << SBYTE1(a1)) & 0x101F7) == 0)
  {
    unsigned __int8 v2 = 0;
    unsigned int v3 = a1 >> 8;
  }
  BOOL v4 = v1 > 0x10;
  int v5 = v1 <= 0x10 && ((1 << SBYTE1(a1)) & 0x101F7) != 0;
  if (v4)
  {
    unsigned __int8 v2 = 0;
    LOWORD(v3) = v5;
  }
  return (unsigned __int16)(v2 | (unsigned __int16)((_WORD)v3 << 8)) | (v5 << 16);
}

uint64_t sub_1003A9110(unsigned __int16 *a1)
{
  return bswap32(*a1) >> 16;
}

uint64_t sub_1003A9120(unsigned __int8 *a1)
{
  int v1 = a1[1];
  int v2 = *a1;
  if (*a1)
  {
    if (v2 == 16 && v1 == 1)
    {
      int v1 = 1;
      int v2 = 16;
    }
  }
  else
  {
    unsigned int v3 = v1 - 1;
    if (v3 >= 0xD)
    {
      int v1 = 0;
      int v2 = 0;
    }
    else
    {
      int v2 = 0;
      int v1 = byte_1004C544E[(char)v3];
    }
  }
  return v1 | (v2 << 8);
}

uint64_t sub_1003A9184(unsigned char *a1)
{
  sub_100054E28((uint64_t)v13);
  switch(*a1)
  {
    case 0:
      int v2 = v14;
      unsigned int v3 = "Legacy_";
      uint64_t v4 = 7;
      goto LABEL_7;
    case 1:
      int v2 = v14;
      unsigned int v3 = "IEEE_";
      uint64_t v4 = 5;
      goto LABEL_7;
    case 2:
      int v5 = v14;
      int v6 = "IEEE_";
      uint64_t v7 = 5;
      goto LABEL_9;
    case 4:
      int v5 = v14;
      int v6 = "Proprietary_";
      uint64_t v7 = 12;
      goto LABEL_9;
    case 5:
      int v2 = sub_100056628(v14, (uint64_t)"Split", 5);
      unsigned int v3 = "ND_";
      uint64_t v4 = 3;
LABEL_7:
      unsigned __int8 v8 = sub_100056628(v2, (uint64_t)v3, v4);
      uint64_t v9 = "BPRF";
      goto LABEL_10;
    case 6:
      int v5 = sub_100056628(v14, (uint64_t)"Split", 5);
      int v6 = "ND_";
      uint64_t v7 = 3;
LABEL_9:
      unsigned __int8 v8 = sub_100056628(v5, (uint64_t)v6, v7);
      uint64_t v9 = "HPRF";
LABEL_10:
      uint64_t v10 = 4;
      goto LABEL_15;
    case 7:
      unsigned __int8 v8 = v14;
      goto LABEL_13;
    case 8:
      unsigned __int8 v8 = sub_100056628(v14, (uint64_t)"Mixed_", 6);
LABEL_13:
      uint64_t v9 = "MMS";
      uint64_t v10 = 3;
      goto LABEL_15;
    case 0x10:
      unsigned __int8 v8 = v14;
      uint64_t v9 = "NB";
      uint64_t v10 = 2;
LABEL_15:
      sub_100056628(v8, (uint64_t)v9, v10);
      break;
    default:
      break;
  }
  sub_100056628(v14, (uint64_t)" PktIdx ", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1003A944C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100055100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003A94A4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  va_list v18 = (va_list)&a9;
  uint64_t v10 = sub_100004B70();
  sub_1003A9588((uint64_t)v10);
  sub_100004950(&v15, a1);
  uint64_t v11 = std::string::append(&v15, "\n");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  unint64_t v13 = (std::mutex *)sub_100004A68();
  if (v17 >= 0) {
    int64_t v14 = __p;
  }
  else {
    int64_t v14 = (void **)__p[0];
  }
  sub_100004A04(v13, (const char *)v14, v18);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003A9558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003A9588(uint64_t a1)
{
  int v1 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  os_log_with_args();

  std::mutex::unlock(v1);
}

void sub_1003A9600(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  va_list v18 = (va_list)&a9;
  uint64_t v10 = sub_100004B70();
  sub_1003A96E4((uint64_t)v10);
  sub_100004950(&v15, a1);
  uint64_t v11 = std::string::append(&v15, "\n");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  unint64_t v13 = (std::mutex *)sub_100004A68();
  if (v17 >= 0) {
    int64_t v14 = __p;
  }
  else {
    int64_t v14 = (void **)__p[0];
  }
  sub_1003A975C(v13, (const char *)v14, v18);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003A96B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003A96E4(uint64_t a1)
{
  int v1 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  os_log_with_args();

  std::mutex::unlock(v1);
}

void sub_1003A975C(std::mutex *a1, const char *a2, va_list a3)
{
  std::mutex::lock(a1);
  vfprintf(__stderrp, a2, a3);
  fflush(__stderrp);

  std::mutex::unlock(a1);
}

void sub_1003A97C4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  va_list v18 = (va_list)&a9;
  uint64_t v10 = sub_100004B70();
  sub_1003A98A8((uint64_t)v10);
  sub_100004950(&v15, a1);
  uint64_t v11 = std::string::append(&v15, "\n");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  unint64_t v13 = (std::mutex *)sub_100004A68();
  if (v17 >= 0) {
    int64_t v14 = __p;
  }
  else {
    int64_t v14 = (void **)__p[0];
  }
  sub_1003A975C(v13, (const char *)v14, v18);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003A9878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003A98A8(uint64_t a1)
{
  int v1 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  os_log_with_args();

  std::mutex::unlock(v1);
}

uint64_t sub_1003A9924(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003A9960(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1003A99F0;
  block[3] = &unk_100863B78;
  block[4] = a1;
  if (qword_1008AB7A0 != -1) {
    dispatch_once(&qword_1008AB7A0, block);
  }
  return byte_1008AB7A8;
}

void sub_1003A99F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = (void **)(v1 + 48);
  if (*(void *)(v1 + 48)) {
    sub_100437AC8();
  }
  unsigned int v3 = dlopen("/usr/lib/libRoseBooter.dylib", 1);
  *int v2 = v3;
  if (!v3)
  {
    dlerror();
    sub_1003A9600("Failed to dlopen %s, error: %s", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/usr/lib/libRoseBooter.dylib");
LABEL_7:
    char v12 = 0;
    goto LABEL_8;
  }
  uint64_t v4 = "RoseBooterHasFailedForward";
  *(void *)(v1 + 56) = dlsym(v3, "RoseBooterHasFailedForward");
  if (!dlerror())
  {
    if (*(void *)(v1 + 56))
    {
      uint64_t v4 = "RoseBooterPerformHealing";
      *(void *)(v1 + 64) = dlsym(*(void **)(v1 + 48), "RoseBooterPerformHealing");
      if (!dlerror())
      {
        if (*(void *)(v1 + 64))
        {
          uint64_t v4 = "RoseBooterAllocate";
          *(void *)(v1 + 72) = dlsym(*(void **)(v1 + 48), "RoseBooterAllocate");
          if (!dlerror())
          {
            if (*(void *)(v1 + 72))
            {
              uint64_t v4 = "RoseBooterPreflight";
              *(void *)(v1 + 80) = dlsym(*(void **)(v1 + 48), "RoseBooterPreflight");
              if (!dlerror())
              {
                if (*(void *)(v1 + 80))
                {
                  uint64_t v4 = "RoseBooterBootChip";
                  *(void *)(v1 + 88) = dlsym(*(void **)(v1 + 48), "RoseBooterBootChip");
                  if (!dlerror())
                  {
                    if (*(void *)(v1 + 88))
                    {
                      uint64_t v4 = "RoseBooterSendCalWithOptions";
                      *(void *)(v1 + 96) = dlsym(*(void **)(v1 + 48), "RoseBooterSendCalWithOptions");
                      if (!dlerror())
                      {
                        if (*(void *)(v1 + 96))
                        {
                          uint64_t v4 = "RoseBooterGetCal";
                          *(void *)(v1 + 104) = dlsym(*(void **)(v1 + 48), "RoseBooterGetCal");
                          if (!dlerror())
                          {
                            if (*(void *)(v1 + 104))
                            {
                              uint64_t v4 = "RoseBooterDestroy";
                              *(void *)(v1 + 112) = dlsym(*(void **)(v1 + 48), "RoseBooterDestroy");
                              if (!dlerror())
                              {
                                if (*(void *)(v1 + 112))
                                {
                                  char v12 = 1;
                                  goto LABEL_8;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sub_1003A9600("Failed to dlsym %s, error: %s", v5, v6, v7, v8, v9, v10, v11, (uint64_t)v4);
  if (!*v2) {
    goto LABEL_7;
  }
  dlclose(*v2);
  char v12 = 0;
  *(_OWORD *)int v2 = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(void *)(v1 + 112) = 0;
LABEL_8:
  byte_1008AB7A8 = v12;
}

uint64_t sub_1003A9BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)child = 0;
  if (qword_1008AB7B0 != -1) {
    dispatch_once(&qword_1008AB7B0, &stru_100863BB8);
  }
  if (byte_1008AB7A9 != 1) {
    return 0;
  }
  uint64_t v10 = (void *)(a1 + 8);
  if (*(void *)(a1 + 8)) {
    return 1;
  }
  if (!*(void *)(a1 + 40))
  {
    uint64_t v27 = "packet receive callback uninitialized";
LABEL_25:
    sub_1003A9600(v27, a2, a3, a4, a5, a6, a7, a8, byte7);
    return 0;
  }
  if (!*(void *)(a1 + 144))
  {
    uint64_t v27 = "crash callback needs to be registered first";
    goto LABEL_25;
  }
  if (!*(void *)(a1 + 176))
  {
    uint64_t v27 = "state change available callback needs to be registered first";
    goto LABEL_25;
  }
  if (!*(void *)(a1 + 208))
  {
    uint64_t v27 = "error reporting callback needs to be registered first";
    goto LABEL_25;
  }
  if (!a2)
  {
    uint64_t v27 = "invalid dispatch queue parameter";
    goto LABEL_25;
  }
  if ((sub_1003A9960(a1) & 1) == 0)
  {
    uint64_t v27 = "unable to load booter library";
    goto LABEL_25;
  }
  CFDictionaryRef v12 = IOServiceNameMatching("rose");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v12);
  if (!MatchingService)
  {
    uint64_t v27 = "failed to get rose service";
    goto LABEL_25;
  }
  io_object_t v14 = MatchingService;
  uint64_t ChildEntry = IORegistryEntryGetChildEntry(MatchingService, "IOService", child);
  IOObjectRelease(v14);
  if (ChildEntry || (io_service_t v16 = child[0]) == 0)
  {
    sub_1003AA000(a1);
    uint64_t byte7 = ChildEntry;
    uint64_t v27 = "failed to get rose driver: 0x%x";
    goto LABEL_25;
  }
  CFUUIDRef v17 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0xAu, 0x3Au, 0xB3u, 0x17u, 0x88u, 0xE7u, 0x40u, 0xA0u, 0x89u, 0x68u, 0x33u, 0x55u, 0x58u, 0x14u, 0x66u, 0x63u);
  CFUUIDRef v18 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  uint64_t v19 = IOCreatePlugInInterfaceForService(v16, v17, v18, (IOCFPlugInInterface ***)a1, (SInt32 *)&child[1]);
  IOObjectRelease(child[0]);
  if (v19 || (uint64_t v28 = *(IOCFPlugInInterface ***)a1) == 0)
  {
    sub_1003AA000(a1);
    sub_1003A9600("creating rose plugin interface failed: 0x%x", v20, v21, v22, v23, v24, v25, v26, v19);
    return 0;
  }
  QueryInterface = (*v28)->QueryInterface;
  CFUUIDRef v30 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x10u, 0x3Au, 0xBDu, 0x4Au, 0x60u, 0x94u, 0x4Bu, 0xC0u, 0xAEu, 0xEEu, 0x3Eu, 0x37u, 0xF5u, 0xA2u, 0xFu, 0x3Bu);
  CFUUIDBytes v31 = CFUUIDGetUUIDBytes(v30);
  ((void (*)(IOCFPlugInInterface **, void, void, uint64_t))QueryInterface)(v28, *(void *)&v31.byte0, *(void *)&v31.byte8, a1 + 8);
  if (!*v10)
  {
    sub_1003AA000(a1);
    uint64_t v27 = "failed to query rose plugin interface";
    goto LABEL_25;
  }
  (*(void (**)(void, uint64_t))(*(void *)*v10 + 72))(*v10, a2);
  uint64_t v32 = (*(uint64_t (**)(void, void (*)(uint64_t, const void *, size_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(void **)(a1 + 8) + 336))(*(void *)(a1 + 8), sub_1003AA05C, a1);
  if (v32)
  {
    sub_1003A9600("failed to register event callback: 0x%x", v33, v34, v35, v36, v37, v38, v39, v32);
  }
  else
  {
    uint64_t v40 = (*(uint64_t (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(void **)(a1 + 8) + 384))(*(void *)(a1 + 8), sub_1003AA080, a1);
    if (v40)
    {
      sub_1003A9600("failed to register crashHandlerCallback: 0x%x", v41, v42, v43, v44, v45, v46, v47, v40);
    }
    else
    {
      uint64_t v48 = (*(uint64_t (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(void **)(a1 + 8) + 392))(*(void *)(a1 + 8), sub_1003AA0BC, a1);
      if (v48)
      {
        sub_1003A9600("failed to register fwStateChangeCallback: 0x%x", v49, v50, v51, v52, v53, v54, v55, v48);
      }
      else
      {
        uint64_t v56 = (*(uint64_t (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8), sub_1003AA12C, a1);
        if (!v56) {
          return 1;
        }
        sub_1003A9600("failed to register errorReportCallback: 0x%x", v57, v58, v59, v60, v61, v62, v63, v56);
      }
    }
  }
  sub_1003AA000(a1);
  return 0;
}

uint64_t sub_1003A9FBC()
{
  if (qword_1008AB7B0 != -1) {
    dispatch_once(&qword_1008AB7B0, &stru_100863BB8);
  }
  return byte_1008AB7A9;
}

IOCFPlugInInterface **sub_1003AA000(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 72))(v2, 0);
    (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
    *(void *)(a1 + 8) = 0;
  }
  BOOL result = *(IOCFPlugInInterface ***)a1;
  if (*(void *)a1)
  {
    BOOL result = (IOCFPlugInInterface **)IODestroyPlugInInterface(result);
    *(void *)a1 = 0;
  }
  return result;
}

void sub_1003AA05C(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    sub_1003AA21C(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    uint64_t v9 = sub_100437AF4(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    sub_1003AA080(v9);
  }
}

uint64_t sub_1003AA080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    a1 = sub_100437B1C(0, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_7;
  }
  if (!*(void *)(a1 + 144))
  {
LABEL_7:
    uint64_t v10 = sub_100437B44(a1, a2, a3, a4, a5, a6, a7, a8);
    return sub_1003AA0BC(v10);
  }
  uint64_t v8 = a1 + 120;

  return sub_1003AAF18(v8, a2);
}

uint64_t sub_1003AA0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    a1 = sub_100437B6C(a2, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
  uint64_t v8 = a1;
  if (!*(void *)(a1 + 176))
  {
LABEL_9:
    uint64_t v10 = sub_100437BA4(a1, a2, a3, a4, a5, a6, a7, a8);
    return sub_1003AA12C(v10);
  }
  if (a2 >= 4)
  {
    sub_1003A9600("RoseControllerInterface::fwStateChangeCallback() unknown state: 0x%x", a2, a3, a4, a5, a6, a7, a8, a2);
    LODWORD(a2) = 4;
  }

  return sub_1003AAF6C(v8 + 152, a2);
}

uint64_t sub_1003AA12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    a1 = sub_100437BCC(a2, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
  uint64_t v8 = a1;
  if (!*(void *)(a1 + 208))
  {
LABEL_9:
    uint64_t v12 = sub_100437C04(a1, a2, a3, a4, a5, a6, a7, a8);
    return sub_1003AA1B4(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  if (a2 >= 0xB)
  {
    sub_1003A9600("errorReportCallback: UnknownError: %d", a2, a3, a4, a5, a6, a7, a8, a2);
    LODWORD(a2) = 12;
  }

  return sub_1003AA30C(v8 + 184, a2, a3, a4);
}

uint64_t sub_1003AA1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_1003A9600("%s: rose not connected", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"reset");
    return 0;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
  if (v9)
  {
    sub_1003A9600("RoseController reset failed: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

void sub_1003AA21C(uint64_t a1, const void *a2, size_t __sz, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 && __sz - 113 > 0xFFFFFFFFFFFFFF92)
  {
    __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    sub_10016D488(&__p, a2, (uint64_t)a2 + __sz, __sz);
    sub_1003AA36C(a1 + 16, (uint64_t)&__p, 0);
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    sub_1003A9600("invalid event parameter (size: %zu)", (uint64_t)a2, __sz, a4, a5, a6, a7, a8, __sz);
    if (*(void *)(a1 + 208))
    {
      sub_1003AA30C(a1 + 184, 11, (uint64_t)a2, __sz);
    }
  }
}

void sub_1003AA2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AA30C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8 = a2;
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_1003AA36C(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t sub_1003AA3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = 0;
  uint64_t v9 = *(void *)(a1 + 8);
  if (!v9)
  {
    uint64_t v19 = "driver interface not created";
LABEL_10:
    sub_1003A9600(v19, a2, a3, a4, a5, a6, a7, a8, v21);
    return 0;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 72))(v9, &v22) & 1) == 0)
  {
    uint64_t v19 = "creating RoseBooter failed";
    goto LABEL_10;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(a1 + 80))(v22);
  if (v10)
  {
    uint64_t v18 = v10;
    if ((*(uint64_t (**)(uint64_t))(a1 + 112))(v22)) {
      return v18;
    }
    goto LABEL_9;
  }
  sub_1003A9600("rose preflight failed", v11, v12, v13, v14, v15, v16, v17, v21);
  if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v22) & 1) == 0)
  {
LABEL_9:
    uint64_t v19 = "destroying RoseBooter failed";
    goto LABEL_10;
  }
  return 0;
}

uint64_t sub_1003AA474(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v24 = -1;
  int v25 = -1;
  uint64_t v23 = 0;
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 72))(v9, &v23))
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, int *, int *))(a1 + 88))(v23, &v25, &v24);
      int v19 = v24;
      a2[1] = v25;
      a2[2] = v19;
      *a2 = v11;
      if (v11)
      {
        sub_1003A9600("rose boot failed: %d, driver state %d, status reg %d", v12, v13, v14, v15, v16, v17, v18, v11);
        if ((*(uint64_t (**)(uint64_t))(a1 + 112))(v23)) {
          return 0;
        }
      }
      else if ((*(uint64_t (**)(uint64_t))(a1 + 112))(v23))
      {
        return 1;
      }
      uint64_t v20 = "destroying RoseBooter failed";
    }
    else
    {
      uint64_t v20 = "creating RoseBooter failed";
    }
  }
  else
  {
    uint64_t v20 = "driver interface not created";
  }
  sub_1003A9600(v20, (uint64_t)a2, a3, a4, a5, a6, a7, a8, v22);
  return 0;
}

BOOL sub_1003AA550(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = 0;
  *a3 = 0;
  if (!*(void *)(a1 + 8))
  {
    uint64_t v13 = "driver interface not created";
LABEL_12:
    sub_1003A9600(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v24);
    return 0;
  }
  unsigned int v10 = a4;
  if ((a2 - 1) > 3) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = dword_1004C5470[(int)a2 - 1];
  }
  int v25 = 0;
  if (((*(uint64_t (**)(void))(a1 + 72))() & 1) == 0)
  {
    uint64_t v13 = "creating RoseBooter failed";
    goto LABEL_12;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, int *, void))(a1 + 96))(v26, v12, &v25, v10);
  *(_DWORD *)(a6 + 12) = v14;
  BOOL v22 = v14 == 0;
  if (v14) {
    sub_1003A9600("send calibration failed: %d", v15, v16, v17, v18, v19, v20, v21, v14);
  }
  *a3 = ((v25 & 2) != 0) + (v25 & 1) + ((v25 & 4) != 0);
  if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v26) & 1) == 0)
  {
    uint64_t v13 = "destroying RoseBooter failed";
    goto LABEL_12;
  }
  return v22;
}

uint64_t sub_1003AA668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = 0;
  if (!*(void *)(a1 + 8))
  {
    uint64_t v18 = "driver interface not created";
    goto LABEL_11;
  }
  if ((a2 - 1) >= 3)
  {
    uint64_t v18 = "please select a single cal file to retrieve";
    goto LABEL_11;
  }
  uint64_t v9 = dword_1004C545C[(int)a2 - 1];
  if (((*(uint64_t (**)(void))(a1 + 72))() & 1) == 0)
  {
    uint64_t v18 = "creating RoseBooter failed";
    goto LABEL_11;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 104))(v21, v9);
  if (!v17) {
    sub_1003A9600("failed to get cal file", v10, v11, v12, v13, v14, v15, v16, v20);
  }
  if (((*(uint64_t (**)(uint64_t))(a1 + 112))(v21) & 1) == 0)
  {
    uint64_t v18 = "destroying RoseBooter failed";
LABEL_11:
    sub_1003A9600(v18, a2, a3, a4, a5, a6, a7, a8, v20);
    return 0;
  }
  return v17;
}

uint64_t sub_1003AA730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(v27) = 0;
  sub_1001B0664(&__p, 0x70uLL, &v27);
  unint64_t v27 = 0;
  uint64_t v13 = *(uint64_t **)(a1 + 8);
  if (!v13)
  {
    sub_1003A9600("%s: rose not connected", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"send");
    goto LABEL_10;
  }
  uint64_t v14 = *v13;
  if ((a4 & 0xFF00000000) != 0)
  {
    uint64_t v15 = (*(uint64_t (**)(void))(v14 + 464))();
    if (v15)
    {
      sub_1003A9600("PerformCommandWithTimeout failed: 0x%x", v16, v17, v18, v19, v20, v21, v22, v15);
LABEL_10:
      uint64_t v24 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v23 = (*(uint64_t (**)(void))(v14 + 256))();
    if (v23)
    {
      sub_1003A9600("PerformCommand failed: 0x%x", v16, v17, v18, v19, v20, v21, v22, v23);
      goto LABEL_10;
    }
  }
  if (v27 - 113 <= 0xFFFFFFFFFFFFFF92)
  {
    sub_1003A9600("invalid response (length: %zu)", v16, v17, v18, v19, v20, v21, v22, v27);
    goto LABEL_10;
  }
  if (v27 <= v29 - (unsigned char *)__p)
  {
    if (v27 < v29 - (unsigned char *)__p) {
      char v29 = (char *)__p + v27;
    }
  }
  else
  {
    sub_10003F834((unint64_t *)&__p, v27 - (v29 - (unsigned char *)__p));
  }
  uint64_t v26 = a1 + 16;
  uint64_t v24 = 1;
  sub_1003AA36C(v26, (uint64_t)&__p, 1);
LABEL_11:
  if (__p)
  {
    char v29 = (char *)__p;
    operator delete(__p);
  }
  return v24;
}

void sub_1003AA890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AA8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a1 + 8))
  {
    uint64_t v18 = "driver interface not created";
LABEL_29:
    sub_1003A9600(v18, a2, a3, a4, a5, a6, a7, a8, v71);
    return 0;
  }
  if (!a2)
  {
    uint64_t v18 = "invalid parameter";
    goto LABEL_29;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8), a2 + 8);
  if (v10)
  {
    sub_1003A9600("get chip id failed: 0x%x", v11, v12, v13, v14, v15, v16, v17, v10);
    return 0;
  }
  uint64_t v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), a2 + 10);
  if (v19)
  {
    sub_1003A9600("get board id failed: 0x%x", v20, v21, v22, v23, v24, v25, v26, v19);
    return 0;
  }
  uint64_t v27 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), a2);
  if (v27)
  {
    sub_1003A9600("get ecid failed: 0x%x", v28, v29, v30, v31, v32, v33, v34, v27);
    return 0;
  }
  uint64_t v35 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), a2 + 12);
  if (v35)
  {
    sub_1003A9600("get boot mode failed: 0x%x", v36, v37, v38, v39, v40, v41, v42, v35);
    return 0;
  }
  uint64_t v43 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 224))(*(void *)(a1 + 8), a2 + 17);
  if (v43) {
    BOOL v51 = 1;
  }
  else {
    BOOL v51 = *(unsigned __int8 *)(a2 + 17) >= 2u;
  }
  if (v51)
  {
    sub_1003A9600("get secure mode failed: 0x%08x secureMode: 0x%x", v44, v45, v46, v47, v48, v49, v50, v43);
    return 0;
  }
  uint64_t v52 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 216))(*(void *)(a1 + 8), a2 + 16);
  if (v52) {
    BOOL v60 = 1;
  }
  else {
    BOOL v60 = *(unsigned __int8 *)(a2 + 16) >= 2u;
  }
  if (v60)
  {
    sub_1003A9600("get production mode failed: 0x%08x prodMode: 0x%02x", v53, v54, v55, v56, v57, v58, v59, v52);
    return 0;
  }
  uint64_t v61 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 232))(*(void *)(a1 + 8), a2 + 18);
  if (v61)
  {
    sub_1003A9600("get security domain failed: 0x%08x", v62, v63, v64, v65, v66, v67, v68, v61);
    return 0;
  }
  uint64_t v69 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 352))(*(void *)(a1 + 8), a2 + 20);
  if (v69)
  {
    uint64_t v71 = v69;
    uint64_t v18 = "get chip revision failed: 0x%08x";
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_1003AAA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v17 = "driver interface not created";
LABEL_7:
    sub_1003A9600(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0;
  }
  if (!a2)
  {
    uint64_t v17 = "invalid time dictionary";
    goto LABEL_7;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 208))(v8);
  if (!v9) {
    return 1;
  }
  sub_1003A9600("perform timesync failed: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
  return 0;
}

uint64_t sub_1003AAAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v18 = "driver interface not created";
LABEL_7:
    sub_1003A9600(v18, a2, a3, a4, a5, a6, a7, a8, v20);
    return 0;
  }
  if (!a6)
  {
    uint64_t v18 = "Invalid arguments";
    goto LABEL_7;
  }
  unsigned int v10 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 360))(v8))
  {
    sub_1003A9600("error while trying to dequeue FirwmareCrashLogs for core - %d: 0x%x", v11, v12, v13, v14, v15, v16, v17, v10);
    return 0;
  }
  if (a3 && *(unsigned __int8 *)(a3 + 13) != v10)
  {
    sub_1003A9600("Expecting a crash log for core: %d. But, got a crash log for core: %d", v11, v12, v13, v14, v15, v16, v17, v10);
    return 0;
  }
  return 1;
}

BOOL sub_1003AAB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unsigned int v9 = a2;
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 368))(v8);
    BOOL v18 = v10 == -536870160 || v10 == 0;
    if (v10 != -536870160 && v10 != 0) {
      sub_1003A9600("error while trying to read the coredump information for core - %d: 0x%x", v11, v12, v13, v14, v15, v16, v17, v9);
    }
  }
  else
  {
    sub_1003A9600("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v21);
    return 0;
  }
  return v18;
}

uint64_t sub_1003AAC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_1003A9600("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  unsigned int v9 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 376))(v8))
  {
    sub_1003A9600("error while trying to read the coredump for core - %d: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_1003AAC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_1003A9600("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 272))(v8);
  if (v9)
  {
    sub_1003A9600("error while trying to pause firmware logs: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_1003AACD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_1003A9600("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 288))(v8);
  if (v9)
  {
    sub_1003A9600("error while trying to resume firmware logs: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_1003AAD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v17 = "driver interface not created";
LABEL_9:
    sub_1003A9600(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0;
  }
  if (!a2 || !a3 || !a4)
  {
    uint64_t v17 = "Invalid arguments";
    goto LABEL_9;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 280))(v8);
  if (!v9) {
    return 1;
  }
  sub_1003A9600("error while trying to dequeue FirwmareCrashLogs: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
  return 0;
}

void *sub_1003AADA4(uint64_t a1, uint64_t a2)
{
  return sub_1003AADAC((void *)(a1 + 120), a2);
}

void *sub_1003AADAC(void *a1, uint64_t a2)
{
  sub_1003AB6E0((uint64_t)v4, a2);
  sub_1003AB778(v4, a1);
  sub_1003AB554(v4);
  return a1;
}

void *sub_1003AAE20(uint64_t a1, uint64_t a2)
{
  return sub_1003AAE28((void *)(a1 + 152), a2);
}

void *sub_1003AAE28(void *a1, uint64_t a2)
{
  sub_1003AB9E4((uint64_t)v4, a2);
  sub_1003ABA7C(v4, a1);
  sub_1003AB5D8(v4);
  return a1;
}

void *sub_1003AAE9C(uint64_t a1, uint64_t a2)
{
  return sub_1003AAEA4((void *)(a1 + 184), a2);
}

void *sub_1003AAEA4(void *a1, uint64_t a2)
{
  sub_1003ABCE8((uint64_t)v4, a2);
  sub_1003ABD80(v4, a1);
  sub_1003AB65C(v4);
  return a1;
}

uint64_t sub_1003AAF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1003AAF6C(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1003AAFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_1003A9600("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 344))(v8);
  if (v9)
  {
    sub_1003A9600("error while trying to trigger a crashlog: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_1003AB01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v10 = "driver interface not created";
LABEL_7:
    sub_1003A9600(v10, a2, a3, a4, a5, a6, a7, a8, v12);
    return 4;
  }
  unsigned __int8 v13 = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 304))(v8, &v13);
  if (!v9)
  {
    uint64_t result = v13;
    if (v13 < 4u) {
      return result;
    }
    uint64_t v12 = v13;
    uint64_t v10 = "RoseControllerInterface::getFirmwareState() unknown state: 0x%x";
    goto LABEL_7;
  }
  sub_1003A9600("error while trying to get the firmware state: 0x%x", a2, a3, a4, a5, a6, a7, a8, v9);
  return 4;
}

void sub_1003AB094(id a1)
{
  CFDictionaryRef v1 = IOServiceNameMatching("rose");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (!MatchingService)
  {
    uint64_t v12 = "failed to find rose service";
LABEL_6:
    sub_1003A9600(v12, v3, v4, v5, v6, v7, v8, v9, v13);
    char v11 = 0;
    goto LABEL_7;
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, @"ECID", kCFAllocatorDefault, 0);
  if (!CFProperty)
  {
    uint64_t v12 = "rose ECID property not found in registry";
    goto LABEL_6;
  }
  CFRelease(CFProperty);
  char v11 = 1;
LABEL_7:
  byte_1008AB7A9 = v11;
}

uint64_t sub_1003AB128(uint64_t a1, unsigned char *a2)
{
  if ((sub_1003A9960(a1) & 1) == 0)
  {
    sub_10000486C("couldn't load booter library, so we are answering to the best of our ability", v4, v5, v6, v7, v8, v9, v10, v22);
    LOBYTE(v20) = 0;
    goto LABEL_5;
  }
  uint64_t v11 = (*(uint64_t (**)(void))(a1 + 56))();
  int v12 = v11;
  sub_10000486C("fail forward state %d", v13, v14, v15, v16, v17, v18, v19, v11);
  if ((v12 - 1) <= 2)
  {
    unsigned int v20 = 0x10001u >> (8 * (v12 - 1));
LABEL_5:
    *a2 = v20;
    return 1;
  }
  return 0;
}

uint64_t sub_1003AB1B4(uint64_t a1)
{
  if (sub_1003A9960(a1))
  {
    uint64_t v9 = *(uint64_t (**)(void))(a1 + 64);
    return v9();
  }
  else
  {
    sub_10000486C("couldn't load booter library, so we are answering to the best of our ability", v2, v3, v4, v5, v6, v7, v8, v11);
    return 0;
  }
}

uint64_t sub_1003AB20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_1003A9600("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 432))(v8);
  if (v9)
  {
    sub_1003A9600("error while trying to deallocate firmware log cache: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  sub_10000486C("successfully deallocated firmware log cache", v10, v11, v12, v13, v14, v15, v16, v18);
  return 1;
}

uint64_t sub_1003AB274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    sub_1003A9600("driver interface not created", a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 408))(v8);
  if (v9)
  {
    sub_1003A9600("error while trying to SetPowerState : 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_1003AB2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    int v9 = a2;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 456))(v8);
    if (!v10) {
      return 1;
    }
    if (v10 == -536870203)
    {
      uint64_t v11 = "off";
      if (v9) {
        uint64_t v11 = "on";
      }
      sub_10000486C("deep sleep state %s was requested, which was already the current state, so the request was a no-op", a2, a3, a4, a5, a6, a7, a8, (uint64_t)v11);
      return 1;
    }
    uint64_t v14 = v10;
    uint64_t v13 = "error while trying to SetDeepSleepState : 0x%x";
  }
  else
  {
    uint64_t v13 = "driver interface not created";
  }
  sub_1003A9600(v13, a2, a3, a4, a5, a6, a7, a8, v14);
  return 0;
}

uint64_t sub_1003AB370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v17 = "driver interface not created";
LABEL_7:
    sub_1003A9600(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0;
  }
  if (!a2)
  {
    uint64_t v17 = "invalid time dictionary";
    goto LABEL_7;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 248))(v8);
  if (!v9) {
    return 1;
  }
  sub_1003A9600("error getting debug info: 0x%x", v10, v11, v12, v13, v14, v15, v16, v9);
  return 0;
}

CFDataRef sub_1003AB3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8)
  {
    uint64_t v17 = "driver interface not created";
LABEL_14:
    sub_1003A9600(v17, a2, a3, a4, a5, a6, a7, a8, v19);
    return 0;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, const CFAllocatorRef, const UInt8 **, uint64_t *))(*(void *)v8 + 440))(v8, kCFAllocatorDefault, &v21, &v20);
  if (v9) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v21 == 0;
  }
  if (v15 || v20 == 0)
  {
    sub_1003A9600("get sik public key failed: 0x%x, size %zu", (uint64_t)v21, v20, v10, v11, v12, v13, v14, v9);
    return 0;
  }
  CFDataRef result = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v21, v20, kCFAllocatorDefault);
  if (!result)
  {
    uint64_t v17 = "failed to package sik public key";
    goto LABEL_14;
  }
  return result;
}

void *sub_1003AB480(void *a1)
{
  return a1;
}

void *sub_1003AB4D0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003AB554(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003AB5D8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003AB65C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1003AB6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1003AB778(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1003AB9D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100012C10(a1);
}

uint64_t sub_1003AB9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1003ABA7C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1003ABCDC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100012C10(a1);
}

uint64_t sub_1003ABCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1003ABD80(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      CFDataRef result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1003ABFE0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100012C10(a1);
}

uint64_t sub_1003ABFEC(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_1003AC048(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100002DE4(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }
  uint64_t v7 = __dst + 48;
  if (*((char *)a3 + 47) < 0)
  {
    sub_100002DE4(v7, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a3 + 24);
    *((void *)__dst + 8) = *((void *)a3 + 5);
    *(_OWORD *)uint64_t v7 = v8;
  }
  __int16 v9 = *((_WORD *)a3 + 24);
  __dst[74] = *((unsigned char *)a3 + 50);
  *((_WORD *)__dst + 36) = v9;
  return __dst;
}

void sub_1003AC10C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003AC140(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100002DE4(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }
  uint64_t v7 = __dst + 48;
  if (*((char *)a3 + 47) < 0)
  {
    sub_100002DE4(v7, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a3 + 24);
    *((void *)__dst + 8) = *((void *)a3 + 5);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *((_WORD *)__dst + 36) = *((_WORD *)a3 + 24);
  return __dst;
}

void sub_1003AC1FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AC230(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 80 * a3;
    do
    {
      sub_1003AC2AC(a1, a2, (long long *)a2);
      a2 += 80;
      v5 -= 80;
    }
    while (v5);
  }
  return a1;
}

void sub_1003AC298(_Unwind_Exception *a1)
{
  sub_1001FBFC0(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1003AC2AC(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100003624(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100007880(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1003AC530(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_10002AA24(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1003AC6A0((uint64_t)v25, 0);
  return i;
}

void sub_1003AC518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003AC6A0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_1003AC530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  CFDataRef result = sub_1003AC5A8((char *)v8 + 16, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1003AC590(_Unwind_Exception *a1)
{
  sub_1003AC6A0(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_1003AC5A8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100002DE4(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  long long v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_100002DE4(v6, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)long long v6 = v7;
  }
  __int16 v8 = *((_WORD *)a2 + 36);
  __dst[74] = *((unsigned char *)a2 + 74);
  *((_WORD *)__dst + 36) = v8;
  return __dst;
}

void sub_1003AC66C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003AC6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1001FC040((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_1003AC6F8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 80 * a3;
    do
    {
      sub_1003AC774(a1, a2, (long long *)a2);
      a2 += 80;
      v5 -= 80;
    }
    while (v5);
  }
  return a1;
}

void sub_1003AC760(_Unwind_Exception *a1)
{
  sub_1001FBFC0(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1003AC774(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100003624(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100007880(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1003AC9F8(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_10002AA24(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1003AC6A0((uint64_t)v25, 0);
  return i;
}

void sub_1003AC9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003AC6A0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_1003AC9F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  CFDataRef result = sub_1003ACA70((char *)v8 + 16, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1003ACA58(_Unwind_Exception *a1)
{
  sub_1003AC6A0(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_1003ACA70(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100002DE4(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  long long v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_100002DE4(v6, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)long long v6 = v7;
  }
  *((_WORD *)__dst + 36) = *((_WORD *)a2 + 36);
  return __dst;
}

void sub_1003ACB2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003ACB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __chkstk_darwin(a1, a2, a3);
  sub_100004950(v1948, "US");
  sub_100004950(v1942, "United States");
  sub_100004950(&v1944, "US");
  __int16 v1946 = 257;
  char v1947 = 0;
  sub_1003AC048((char *)v1950, (long long *)v1948, (long long *)v1942);
  sub_100004950(v1940, "CA");
  sub_100004950(v1934, "Canada");
  sub_100004950(&v1936, "CA");
  __int16 v1938 = 257;
  char v1939 = 0;
  sub_1003AC048(v1951, (long long *)v1940, (long long *)v1934);
  sub_100004950(v1932, "MX");
  sub_100004950(v1926, "Mexico");
  sub_100004950(&v1928, "MX");
  __int16 v1930 = 257;
  char v1931 = 0;
  sub_1003AC048(v1952, (long long *)v1932, (long long *)v1926);
  sub_100004950(v1924, "SV");
  sub_100004950(v1918, "El Salvador");
  sub_100004950(&v1920, "SV");
  __int16 v1922 = 257;
  char v1923 = 0;
  sub_1003AC048(v1953, (long long *)v1924, (long long *)v1918);
  sub_100004950(v1916, "CO");
  sub_100004950(v1910, "Colombia");
  sub_100004950(&v1912, "CO");
  __int16 v1914 = 257;
  char v1915 = 0;
  sub_1003AC048(v1954, (long long *)v1916, (long long *)v1910);
  sub_100004950(v1908, "PR");
  sub_100004950(v1902, "Puerto Rico");
  sub_100004950(&v1904, "PR");
  __int16 v1906 = 257;
  char v1907 = 0;
  sub_1003AC048(v1955, (long long *)v1908, (long long *)v1902);
  sub_100004950(v1900, "CR");
  sub_100004950(v1894, "Costa Rica");
  sub_100004950(&v1896, "CR");
  __int16 v1898 = 257;
  char v1899 = 0;
  sub_1003AC048(v1956, (long long *)v1900, (long long *)v1894);
  sub_100004950(v1892, "EC");
  sub_100004950(v1886, "Ecuador");
  sub_100004950(&v1888, "EC");
  __int16 v1890 = 257;
  char v1891 = 0;
  sub_1003AC048(v1957, (long long *)v1892, (long long *)v1886);
  sub_100004950(v1884, "AR");
  sub_100004950(v1878, "Argentina");
  sub_100004950(&v1880, "AR");
  __int16 v1882 = 257;
  char v1883 = 7;
  sub_1003AC048(v1958, (long long *)v1884, (long long *)v1878);
  sub_100004950(v1876, "VI");
  sub_100004950(v1870, "US Virgin Islands");
  sub_100004950(&v1872, "VI");
  __int16 v1874 = 257;
  char v1875 = 0;
  sub_1003AC048(v1959, (long long *)v1876, (long long *)v1870);
  sub_100004950(v1868, "GT");
  sub_100004950(v1862, "Guatemala");
  sub_100004950(&v1864, "GT");
  __int16 v1866 = 257;
  char v1867 = 0;
  sub_1003AC048(v1960, (long long *)v1868, (long long *)v1862);
  sub_100004950(v1860, "BR");
  sub_100004950(v1854, "Brazil");
  sub_100004950(&v1856, "BR");
  __int16 v1858 = 257;
  char v1859 = 0;
  sub_1003AC048(v1961, (long long *)v1860, (long long *)v1854);
  sub_100004950(v1852, "UM");
  sub_100004950(v1846, "United States Minor Outlying Islands");
  sub_100004950(&v1848, "UM");
  __int16 v1850 = 257;
  char v1851 = 0;
  sub_1003AC048(v1962, (long long *)v1852, (long long *)v1846);
  sub_100004950(v1844, "JP");
  sub_100004950(v1838, "Japan");
  sub_100004950(&v1840, "JP");
  __int16 v1842 = 256;
  char v1843 = 4;
  sub_1003AC048(v1963, (long long *)v1844, (long long *)v1838);
  sub_100004950(v1836, "AT");
  sub_100004950(v1830, "Austria");
  sub_100004950(&v1832, "AT");
  __int16 v1834 = 257;
  char v1835 = 1;
  sub_1003AC048(v1964, (long long *)v1836, (long long *)v1830);
  sub_100004950(v1828, "BE");
  sub_100004950(v1822, "Belgium");
  sub_100004950(&v1824, "BE");
  __int16 v1826 = 257;
  char v1827 = 1;
  sub_1003AC048(v1965, (long long *)v1828, (long long *)v1822);
  sub_100004950(v1820, "BG");
  sub_100004950(v1814, "Bulgaria");
  sub_100004950(&v1816, "BG");
  __int16 v1818 = 257;
  char v1819 = 1;
  sub_1003AC048(v1966, (long long *)v1820, (long long *)v1814);
  sub_100004950(v1812, "CY");
  sub_100004950(v1806, "Cyprus");
  sub_100004950(&v1808, "CY");
  __int16 v1810 = 257;
  char v1811 = 1;
  sub_1003AC048(v1967, (long long *)v1812, (long long *)v1806);
  sub_100004950(v1804, "CZ");
  sub_100004950(v1798, "Czech Republic");
  sub_100004950(&v1800, "CZ");
  __int16 v1802 = 257;
  char v1803 = 1;
  sub_1003AC048(v1968, (long long *)v1804, (long long *)v1798);
  sub_100004950(v1796, "DK");
  sub_100004950(v1790, "Denmark");
  sub_100004950(&v1792, "DK");
  __int16 v1794 = 257;
  char v1795 = 1;
  sub_1003AC048(v1969, (long long *)v1796, (long long *)v1790);
  sub_100004950(v1788, "EE");
  sub_100004950(v1782, "Estonia");
  sub_100004950(&v1784, "EE");
  __int16 v1786 = 257;
  char v1787 = 1;
  sub_1003AC048(v1970, (long long *)v1788, (long long *)v1782);
  sub_100004950(v1780, "FR");
  sub_100004950(v1774, "France");
  sub_100004950(&v1776, "FR");
  __int16 v1778 = 257;
  char v1779 = 1;
  sub_1003AC048(v1971, (long long *)v1780, (long long *)v1774);
  sub_100004950(v1772, "FI");
  sub_100004950(v1766, "Finland");
  sub_100004950(&v1768, "FI");
  __int16 v1770 = 257;
  char v1771 = 1;
  sub_1003AC048(v1972, (long long *)v1772, (long long *)v1766);
  sub_100004950(v1764, "DE");
  sub_100004950(v1758, "Germany");
  sub_100004950(&v1760, "DE");
  __int16 v1762 = 257;
  char v1763 = 1;
  sub_1003AC048(v1973, (long long *)v1764, (long long *)v1758);
  sub_100004950(v1756, "GR");
  sub_100004950(v1750, "Greece");
  sub_100004950(&v1752, "GR");
  __int16 v1754 = 257;
  char v1755 = 1;
  sub_1003AC048(v1974, (long long *)v1756, (long long *)v1750);
  sub_100004950(v1748, "HU");
  sub_100004950(v1742, "Hungary");
  sub_100004950(&v1744, "HU");
  __int16 v1746 = 257;
  char v1747 = 1;
  sub_1003AC048(v1975, (long long *)v1748, (long long *)v1742);
  sub_100004950(v1740, "IS");
  sub_100004950(v1734, "Iceland");
  sub_100004950(&v1736, "IS");
  __int16 v1738 = 257;
  char v1739 = 1;
  sub_1003AC048(v1976, (long long *)v1740, (long long *)v1734);
  sub_100004950(v1732, "IT");
  sub_100004950(v1726, "Italy");
  sub_100004950(&v1728, "IT");
  __int16 v1730 = 257;
  char v1731 = 1;
  sub_1003AC048(v1977, (long long *)v1732, (long long *)v1726);
  sub_100004950(v1724, "IE");
  sub_100004950(v1718, "Ireland");
  sub_100004950(&v1720, "IE");
  __int16 v1722 = 257;
  char v1723 = 1;
  sub_1003AC048(v1978, (long long *)v1724, (long long *)v1718);
  sub_100004950(v1716, "LV");
  sub_100004950(v1710, "Latvia");
  sub_100004950(&v1712, "LV");
  __int16 v1714 = 257;
  char v1715 = 1;
  sub_1003AC048(v1979, (long long *)v1716, (long long *)v1710);
  sub_100004950(v1708, "LI");
  sub_100004950(v1702, "Liechtenstein");
  sub_100004950(&v1704, "LI");
  __int16 v1706 = 257;
  char v1707 = 1;
  sub_1003AC048(v1980, (long long *)v1708, (long long *)v1702);
  sub_100004950(v1700, "LT");
  sub_100004950(v1694, "Lithuania");
  sub_100004950(&v1696, "LT");
  __int16 v1698 = 257;
  char v1699 = 1;
  sub_1003AC048(v1981, (long long *)v1700, (long long *)v1694);
  sub_100004950(v1692, "LU");
  sub_100004950(v1686, "Luxembourg");
  sub_100004950(&v1688, "LU");
  __int16 v1690 = 257;
  char v1691 = 1;
  sub_1003AC048(v1982, (long long *)v1692, (long long *)v1686);
  sub_100004950(v1684, "MT");
  sub_100004950(v1678, "Malta");
  sub_100004950(&v1680, "MT");
  __int16 v1682 = 257;
  char v1683 = 1;
  sub_1003AC048(v1983, (long long *)v1684, (long long *)v1678);
  sub_100004950(v1676, "NL");
  sub_100004950(v1670, "Netherlands");
  sub_100004950(&v1672, "NL");
  __int16 v1674 = 257;
  char v1675 = 1;
  sub_1003AC048(v1984, (long long *)v1676, (long long *)v1670);
  sub_100004950(v1668, "NO");
  sub_100004950(v1662, "Norway");
  sub_100004950(&v1664, "NO");
  __int16 v1666 = 257;
  char v1667 = 1;
  sub_1003AC048(v1985, (long long *)v1668, (long long *)v1662);
  sub_100004950(v1660, "PL");
  sub_100004950(v1654, "Poland");
  sub_100004950(&v1656, "PL");
  __int16 v1658 = 257;
  char v1659 = 1;
  sub_1003AC048(v1986, (long long *)v1660, (long long *)v1654);
  sub_100004950(v1652, "PT");
  sub_100004950(v1646, "Portugal");
  sub_100004950(&v1648, "PT");
  __int16 v1650 = 257;
  char v1651 = 1;
  sub_1003AC048(v1987, (long long *)v1652, (long long *)v1646);
  sub_100004950(v1644, "RO");
  sub_100004950(v1638, "Romania");
  sub_100004950(&v1640, "RO");
  __int16 v1642 = 257;
  char v1643 = 1;
  sub_1003AC048(v1988, (long long *)v1644, (long long *)v1638);
  sub_100004950(v1636, "SK");
  sub_100004950(v1630, "Slovak Republic");
  sub_100004950(&v1632, "SK");
  __int16 v1634 = 257;
  char v1635 = 1;
  sub_1003AC048(v1989, (long long *)v1636, (long long *)v1630);
  sub_100004950(v1628, "SI");
  sub_100004950(v1622, "Slovenia");
  sub_100004950(&v1624, "SI");
  __int16 v1626 = 257;
  char v1627 = 1;
  sub_1003AC048(v1990, (long long *)v1628, (long long *)v1622);
  sub_100004950(v1620, "ES");
  sub_100004950(v1614, "Spain");
  sub_100004950(&v1616, "ES");
  __int16 v1618 = 257;
  char v1619 = 1;
  sub_1003AC048(v1991, (long long *)v1620, (long long *)v1614);
  sub_100004950(v1612, "SE");
  sub_100004950(v1606, "Sweden");
  sub_100004950(&v1608, "SE");
  __int16 v1610 = 257;
  char v1611 = 1;
  sub_1003AC048(v1992, (long long *)v1612, (long long *)v1606);
  sub_100004950(v1604, "CH");
  sub_100004950(v1598, "Switzerland");
  sub_100004950(&v1600, "CH");
  __int16 v1602 = 257;
  char v1603 = 1;
  sub_1003AC048(v1993, (long long *)v1604, (long long *)v1598);
  sub_100004950(v1596, "GB");
  sub_100004950(v1590, "United Kingdom");
  sub_100004950(&v1592, "GB");
  __int16 v1594 = 257;
  char v1595 = 1;
  sub_1003AC048(v1994, (long long *)v1596, (long long *)v1590);
  sub_100004950(v1588, "ZA");
  sub_100004950(v1582, "South Africa");
  sub_100004950(&v1584, "ZA");
  __int16 v1586 = 257;
  char v1587 = 1;
  sub_1003AC048(v1995, (long long *)v1588, (long long *)v1582);
  sub_100004950(v1580, "TR");
  sub_100004950(v1574, "Turkey");
  sub_100004950(&v1576, "TR");
  __int16 v1578 = 257;
  char v1579 = 1;
  sub_1003AC048(v1996, (long long *)v1580, (long long *)v1574);
  sub_100004950(v1572, "AE");
  sub_100004950(v1566, "United Arab Emirates");
  sub_100004950(&v1568, "AE");
  __int16 v1570 = 257;
  char v1571 = 1;
  sub_1003AC048(v1997, (long long *)v1572, (long long *)v1566);
  sub_100004950(v1564, "SA");
  sub_100004950(v1558, "Saudi Arabia");
  sub_100004950(&v1560, "SA");
  __int16 v1562 = 257;
  char v1563 = 1;
  sub_1003AC048(v1998, (long long *)v1564, (long long *)v1558);
  sub_100004950(v1556, "HR");
  sub_100004950(v1550, "Croatia");
  sub_100004950(&v1552, "HR");
  __int16 v1554 = 257;
  char v1555 = 1;
  sub_1003AC048(v1999, (long long *)v1556, (long long *)v1550);
  sub_100004950(v1548, "RS");
  sub_100004950(v1542, "Serbia");
  sub_100004950(&v1544, "RS");
  __int16 v1546 = 257;
  char v1547 = 1;
  sub_1003AC048(v2000, (long long *)v1548, (long long *)v1542);
  sub_100004950(v1540, "AU");
  sub_100004950(v1534, "Australia");
  sub_100004950(&v1536, "AU");
  __int16 v1538 = 257;
  char v1539 = 1;
  sub_1003AC048(v2001, (long long *)v1540, (long long *)v1534);
  sub_100004950(v1532, "HK");
  sub_100004950(v1526, "Hong Kong");
  sub_100004950(&v1528, "HK");
  __int16 v1530 = 257;
  char v1531 = 1;
  sub_1003AC048(v2002, (long long *)v1532, (long long *)v1526);
  sub_100004950(v1524, "NZ");
  sub_100004950(v1518, "New Zealand");
  sub_100004950(&v1520, "NZ");
  __int16 v1522 = 257;
  char v1523 = 1;
  sub_1003AC048(v2003, (long long *)v1524, (long long *)v1518);
  sub_100004950(v1516, "SG");
  sub_100004950(v1510, "Singapore");
  sub_100004950(&v1512, "SG");
  __int16 v1514 = 257;
  char v1515 = 1;
  sub_1003AC048(v2004, (long long *)v1516, (long long *)v1510);
  sub_100004950(v1508, "MY");
  sub_100004950(v1502, "Malaysia");
  sub_100004950(&v1504, "MY");
  __int16 v1506 = 257;
  char v1507 = 1;
  sub_1003AC048(v2005, (long long *)v1508, (long long *)v1502);
  sub_100004950(v1500, "VN");
  sub_100004950(v1494, "Vietnam");
  sub_100004950(&v1496, "VN");
  __int16 v1498 = 256;
  char v1499 = 1;
  sub_1003AC048(v2006, (long long *)v1500, (long long *)v1494);
  sub_100004950(v1492, "BN");
  sub_100004950(v1486, "Brunei");
  sub_100004950(&v1488, "BN");
  __int16 v1490 = 257;
  char v1491 = 1;
  sub_1003AC048(v2007, (long long *)v1492, (long long *)v1486);
  sub_100004950(v1484, "TH");
  sub_100004950(v1478, "Thailand");
  sub_100004950(&v1480, "TH");
  __int16 v1482 = 257;
  char v1483 = 1;
  sub_1003AC048(v2008, (long long *)v1484, (long long *)v1478);
  sub_100004950(v1476, "KH");
  sub_100004950(v1470, "Cambodia");
  sub_100004950(&v1472, "KH");
  __int16 v1474 = 257;
  char v1475 = 1;
  sub_1003AC048(v2009, (long long *)v1476, (long long *)v1470);
  sub_100004950(v1468, "LA");
  sub_100004950(v1462, "Laos");
  sub_100004950(&v1464, "LA");
  __int16 v1466 = 257;
  char v1467 = 1;
  sub_1003AC048(v2010, (long long *)v1468, (long long *)v1462);
  sub_100004950(v1460, "MM");
  sub_100004950(v1454, "Myanmar");
  sub_100004950(&v1456, "MM");
  __int16 v1458 = 257;
  char v1459 = 1;
  sub_1003AC048(v2011, (long long *)v1460, (long long *)v1454);
  sub_100004950(v1452, "CN");
  sub_100004950(v1446, "China");
  sub_100004950(&v1448, "CN");
  __int16 v1450 = 257;
  char v1451 = 3;
  sub_1003AC048(v2012, (long long *)v1452, (long long *)v1446);
  sub_100004950(v1444, "TW");
  sub_100004950(v1438, "Taiwan");
  sub_100004950(&v1440, "TW");
  __int16 v1442 = 257;
  char v1443 = 2;
  sub_1003AC048(v2013, (long long *)v1444, (long long *)v1438);
  sub_100004950(v1436, "PK");
  sub_100004950(v1430, "Pakistan");
  sub_100004950(&v1432, "PK");
  __int16 v1434 = 257;
  char v1435 = 1;
  sub_1003AC048(v2014, (long long *)v1436, (long long *)v1430);
  sub_100004950(v1428, "NP");
  sub_100004950(v1422, "Nepal");
  sub_100004950(&v1424, "NP");
  __int16 v1426 = 0;
  char v1427 = 1;
  sub_1003AC048(v2015, (long long *)v1428, (long long *)v1422);
  sub_100004950(v1420, "BD");
  sub_100004950(v1414, "Bangladesh");
  sub_100004950(&v1416, "BD");
  __int16 v1418 = 257;
  char v1419 = 1;
  sub_1003AC048(v2016, (long long *)v1420, (long long *)v1414);
  sub_100004950(v1412, "KR");
  sub_100004950(v1406, "South Korea");
  sub_100004950(&v1408, "KR");
  __int16 v1410 = 256;
  char v1411 = 5;
  sub_1003AC048(v2017, (long long *)v1412, (long long *)v1406);
  sub_100004950(v1404, "CL");
  sub_100004950(v1398, "Chile");
  sub_100004950(&v1400, "CL");
  __int16 v1402 = 257;
  char v1403 = 0;
  sub_1003AC048(v2018, (long long *)v1404, (long long *)v1398);
  sub_100004950(v1396, "PA");
  sub_100004950(v1390, "Panama");
  sub_100004950(&v1392, "PA");
  __int16 v1394 = 257;
  char v1395 = 0;
  sub_1003AC048(v2019, (long long *)v1396, (long long *)v1390);
  sub_100004950(v1388, "VE");
  sub_100004950(v1382, "Venezuela");
  sub_100004950(&v1384, "VE");
  __int16 v1386 = 257;
  char v1387 = 0;
  sub_1003AC048(v2020, (long long *)v1388, (long long *)v1382);
  sub_100004950(v1380, "UY");
  sub_100004950(v1374, "Uruguay");
  sub_100004950(&v1376, "UY");
  __int16 v1378 = 257;
  char v1379 = 0;
  sub_1003AC048(v2021, (long long *)v1380, (long long *)v1374);
  sub_100004950(v1372, "LK");
  sub_100004950(v1366, "Sri Lanka");
  sub_100004950(&v1368, "LK");
  __int16 v1370 = 257;
  char v1371 = 1;
  sub_1003AC048(v2022, (long long *)v1372, (long long *)v1366);
  sub_100004950(v1364, "MV");
  sub_100004950(v1358, "Maldives");
  sub_100004950(&v1360, "MV");
  __int16 v1362 = 257;
  char v1363 = 1;
  sub_1003AC048(v2023, (long long *)v1364, (long long *)v1358);
  sub_100004950(v1356, "AF");
  sub_100004950(v1350, "Afghanistan");
  sub_100004950(&v1352, "AF");
  __int16 v1354 = 257;
  char v1355 = 1;
  sub_1003AC048(v2024, (long long *)v1356, (long long *)v1350);
  sub_100004950(v1348, "MN");
  sub_100004950(v1342, "Mongolia");
  sub_100004950(&v1344, "MN");
  __int16 v1346 = 257;
  char v1347 = 1;
  sub_1003AC048(v2025, (long long *)v1348, (long long *)v1342);
  sub_100004950(v1340, "BT");
  sub_100004950(v1334, "Bhutan");
  sub_100004950(&v1336, "BT");
  __int16 v1338 = 257;
  char v1339 = 1;
  sub_1003AC048(v2026, (long long *)v1340, (long long *)v1334);
  sub_100004950(v1332, "MO");
  sub_100004950(v1326, "Macau");
  sub_100004950(&v1328, "MO");
  __int16 v1330 = 257;
  char v1331 = 1;
  sub_1003AC048(v2027, (long long *)v1332, (long long *)v1326);
  sub_100004950(v1324, "IN");
  sub_100004950(v1318, "India");
  sub_100004950(&v1320, "IN");
  __int16 v1322 = 257;
  char v1323 = 1;
  sub_1003AC048(v2028, (long long *)v1324, (long long *)v1318);
  sub_100004950(v1316, "PH");
  sub_100004950(v1310, "Philippines");
  sub_100004950(&v1312, "PH");
  __int16 v1314 = 257;
  char v1315 = 1;
  sub_1003AC048(v2029, (long long *)v1316, (long long *)v1310);
  sub_100004950(v1308, "PE");
  sub_100004950(v1302, "Peru");
  sub_100004950(&v1304, "PE");
  __int16 v1306 = 257;
  char v1307 = 0;
  sub_1003AC048(v2030, (long long *)v1308, (long long *)v1302);
  sub_100004950(v1300, "DO");
  sub_100004950(v1294, "Dominican Republic");
  sub_100004950(&v1296, "DO");
  __int16 v1298 = 257;
  char v1299 = 0;
  sub_1003AC048(v2031, (long long *)v1300, (long long *)v1294);
  sub_100004950(v1292, "GU");
  sub_100004950(v1286, "Guam");
  sub_100004950(&v1288, "GU");
  __int16 v1290 = 257;
  char v1291 = 0;
  sub_1003AC048(v2032, (long long *)v1292, (long long *)v1286);
  sub_100004950(v1284, "FJ");
  sub_100004950(v1278, "Fiji");
  sub_100004950(&v1280, "FJ");
  __int16 v1282 = 257;
  char v1283 = 1;
  sub_1003AC048(v2033, (long long *)v1284, (long long *)v1278);
  sub_100004950(v1276, "NC");
  sub_100004950(v1270, "New Caledonia");
  sub_100004950(&v1272, "NC");
  __int16 v1274 = 257;
  char v1275 = 1;
  sub_1003AC048(v2034, (long long *)v1276, (long long *)v1270);
  sub_100004950(v1268, "PG");
  sub_100004950(v1262, "Papua New Guinea");
  sub_100004950(&v1264, "PG");
  __int16 v1266 = 257;
  char v1267 = 1;
  sub_1003AC048(v2035, (long long *)v1268, (long long *)v1262);
  sub_100004950(v1260, "WS");
  sub_100004950(v1254, "Samoa");
  sub_100004950(&v1256, "WS");
  __int16 v1258 = 257;
  char v1259 = 1;
  sub_1003AC048(v2036, (long long *)v1260, (long long *)v1254);
  sub_100004950(v1252, "VU");
  sub_100004950(v1246, "Vanuatu");
  sub_100004950(&v1248, "VU");
  __int16 v1250 = 257;
  char v1251 = 1;
  sub_1003AC048(v2037, (long long *)v1252, (long long *)v1246);
  sub_100004950(v1244, "RU");
  sub_100004950(v1238, "Russia");
  sub_100004950(&v1240, "RU");
  __int16 v1242 = 0;
  char v1243 = 6;
  sub_1003AC048(v2038, (long long *)v1244, (long long *)v1238);
  sub_100004950(v1236, "IL");
  sub_100004950(v1230, "Israel");
  sub_100004950(&v1232, "IL");
  __int16 v1234 = 257;
  char v1235 = 1;
  sub_1003AC048(v2039, (long long *)v1236, (long long *)v1230);
  sub_100004950(v1228, "EG");
  sub_100004950(v1222, "Egypt");
  sub_100004950(&v1224, "EG");
  __int16 v1226 = 257;
  char v1227 = 1;
  sub_1003AC048(v2040, (long long *)v1228, (long long *)v1222);
  sub_100004950(v1220, "KW");
  sub_100004950(v1214, "Kuwait");
  sub_100004950(&v1216, "KW");
  __int16 v1218 = 257;
  char v1219 = 1;
  sub_1003AC048(v2041, (long long *)v1220, (long long *)v1214);
  sub_100004950(v1212, "MA");
  sub_100004950(v1206, "Morocco");
  sub_100004950(&v1208, "MA");
  __int16 v1210 = 257;
  char v1211 = 1;
  sub_1003AC048(v2042, (long long *)v1212, (long long *)v1206);
  sub_100004950(v1204, "UA");
  sub_100004950(v1198, "Ukraine");
  sub_100004950(&v1200, "UA");
  __int16 v1202 = 0;
  char v1203 = 6;
  sub_1003AC048(v2043, (long long *)v1204, (long long *)v1198);
  sub_100004950(v1196, "BY");
  sub_100004950(v1190, "Belarus");
  sub_100004950(&v1192, "BY");
  __int16 v1194 = 0;
  char v1195 = 6;
  sub_1003AC048(v2044, (long long *)v1196, (long long *)v1190);
  sub_100004950(v1188, "AZ");
  sub_100004950(v1182, "Azerbaijan");
  sub_100004950(&v1184, "AZ");
  __int16 v1186 = 0;
  char v1187 = 6;
  sub_1003AC048(v2045, (long long *)v1188, (long long *)v1182);
  sub_100004950(v1180, "KZ");
  sub_100004950(v1174, "Kazakhstan");
  sub_100004950(&v1176, "KZ");
  __int16 v1178 = 0;
  char v1179 = 6;
  sub_1003AC048(v2046, (long long *)v1180, (long long *)v1174);
  sub_100004950(v1172, "ID");
  sub_100004950(v1166, "Indonesia");
  sub_100004950(&v1168, "ID");
  __int16 v1170 = 0;
  char v1171 = 1;
  sub_1003AC048(v2047, (long long *)v1172, (long long *)v1166);
  sub_100004950(v1164, "HN");
  sub_100004950(v1158, "Honduras");
  sub_100004950(&v1160, "HN");
  __int16 v1162 = 257;
  char v1163 = 0;
  sub_1003AC048(v2048, (long long *)v1164, (long long *)v1158);
  sub_100004950(v1156, "AI");
  sub_100004950(v1150, "Anguilla");
  sub_100004950(&v1152, "AI");
  __int16 v1154 = 257;
  char v1155 = 0;
  sub_1003AC048(v2049, (long long *)v1156, (long long *)v1150);
  sub_100004950(v1148, "AG");
  sub_100004950(v1142, "Antigua/Barbuda");
  sub_100004950(&v1144, "AG");
  __int16 v1146 = 257;
  char v1147 = 0;
  sub_1003AC048(v2050, (long long *)v1148, (long long *)v1142);
  sub_100004950(v1140, "AW");
  sub_100004950(v1134, "Aruba");
  sub_100004950(&v1136, "AW");
  __int16 v1138 = 257;
  char v1139 = 0;
  sub_1003AC048(v2051, (long long *)v1140, (long long *)v1134);
  sub_100004950(v1132, "BS");
  sub_100004950(v1126, "Bahamas");
  sub_100004950(&v1128, "BS");
  __int16 v1130 = 257;
  char v1131 = 0;
  sub_1003AC048(v2052, (long long *)v1132, (long long *)v1126);
  sub_100004950(v1124, "BB");
  sub_100004950(v1118, "Barbados");
  sub_100004950(&v1120, "BB");
  __int16 v1122 = 257;
  char v1123 = 0;
  sub_1003AC048(v2053, (long long *)v1124, (long long *)v1118);
  sub_100004950(v1116, "BM");
  sub_100004950(v1110, "Bermuda");
  sub_100004950(&v1112, "BM");
  __int16 v1114 = 257;
  char v1115 = 0;
  sub_1003AC048(v2054, (long long *)v1116, (long long *)v1110);
  sub_100004950(v1108, "VG");
  sub_100004950(v1102, "British Virgin Islands");
  sub_100004950(&v1104, "VG");
  __int16 v1106 = 257;
  char v1107 = 0;
  sub_1003AC048(v2055, (long long *)v1108, (long long *)v1102);
  sub_100004950(v1100, "KY");
  sub_100004950(v1094, "Cayman Islands");
  sub_100004950(&v1096, "KY");
  __int16 v1098 = 257;
  char v1099 = 0;
  sub_1003AC048(v2056, (long long *)v1100, (long long *)v1094);
  sub_100004950(v1092, "DM");
  sub_100004950(v1086, "Dominica");
  sub_100004950(&v1088, "DM");
  __int16 v1090 = 257;
  char v1091 = 0;
  sub_1003AC048(v2057, (long long *)v1092, (long long *)v1086);
  sub_100004950(v1084, "GD");
  sub_100004950(v1078, "Grenada");
  sub_100004950(&v1080, "GD");
  __int16 v1082 = 257;
  char v1083 = 0;
  sub_1003AC048(v2058, (long long *)v1084, (long long *)v1078);
  sub_100004950(v1076, "MS");
  sub_100004950(v1070, "Montserrat");
  sub_100004950(&v1072, "MS");
  __int16 v1074 = 257;
  char v1075 = 0;
  sub_1003AC048(v2059, (long long *)v1076, (long long *)v1070);
  sub_100004950(v1068, "NI");
  sub_100004950(v1062, "Nicaragua");
  sub_100004950(&v1064, "NI");
  __int16 v1066 = 257;
  char v1067 = 0;
  sub_1003AC048(v2060, (long long *)v1068, (long long *)v1062);
  sub_100004950(v1060, "KN");
  sub_100004950(v1054, "St Kitts/Nevis");
  sub_100004950(&v1056, "KN");
  __int16 v1058 = 257;
  char v1059 = 0;
  sub_1003AC048(v2061, (long long *)v1060, (long long *)v1054);
  sub_100004950(v1052, "LC");
  sub_100004950(v1046, "St Lucia");
  sub_100004950(&v1048, "LC");
  __int16 v1050 = 257;
  char v1051 = 0;
  sub_1003AC048(v2062, (long long *)v1052, (long long *)v1046);
  sub_100004950(v1044, "VC");
  sub_100004950(v1038, "St Vincent/Grenadines");
  sub_100004950(&v1040, "VC");
  __int16 v1042 = 257;
  char v1043 = 0;
  sub_1003AC048(v2063, (long long *)v1044, (long long *)v1038);
  sub_100004950(v1036, "TC");
  sub_100004950(v1030, "Turks and Caicos");
  sub_100004950(&v1032, "TC");
  __int16 v1034 = 257;
  char v1035 = 0;
  sub_1003AC048(v2064, (long long *)v1036, (long long *)v1030);
  sub_100004950(v1028, "BO");
  sub_100004950(v1022, "Bolivia");
  sub_100004950(&v1024, "BO");
  __int16 v1026 = 257;
  char v1027 = 0;
  sub_1003AC048(v2065, (long long *)v1028, (long long *)v1022);
  sub_100004950(v1020, "JM");
  sub_100004950(v1014, "Jamaica");
  sub_100004950(&v1016, "JM");
  __int16 v1018 = 257;
  char v1019 = 0;
  sub_1003AC048(v2066, (long long *)v1020, (long long *)v1014);
  sub_100004950(v1012, "PY");
  sub_100004950(v1006, "Paraguay");
  sub_100004950(&v1008, "PY");
  __int16 v1010 = 257;
  char v1011 = 0;
  sub_1003AC048(v2067, (long long *)v1012, (long long *)v1006);
  sub_100004950(v1004, "TT");
  sub_100004950(v998, "Trinidad/Tobago");
  sub_100004950(&v1000, "TT");
  __int16 v1002 = 257;
  char v1003 = 0;
  sub_1003AC048(v2068, (long long *)v1004, (long long *)v998);
  sub_100004950(v996, "AL");
  sub_100004950(v990, "Albania");
  sub_100004950(&v992, "AL");
  __int16 v994 = 257;
  char v995 = 1;
  sub_1003AC048(v2069, (long long *)v996, (long long *)v990);
  sub_100004950(v988, "DZ");
  sub_100004950(v982, "Algeria");
  sub_100004950(&v984, "DZ");
  __int16 v986 = 257;
  char v987 = 1;
  sub_1003AC048(v2070, (long long *)v988, (long long *)v982);
  sub_100004950(v980, "AO");
  sub_100004950(v974, "Angola");
  sub_100004950(&v976, "AO");
  __int16 v978 = 257;
  char v979 = 1;
  sub_1003AC048(v2071, (long long *)v980, (long long *)v974);
  sub_100004950(v972, "AM");
  sub_100004950(v966, "Armenia");
  sub_100004950(&v968, "AM");
  __int16 v970 = 0;
  char v971 = 6;
  sub_1003AC048(v2072, (long long *)v972, (long long *)v966);
  sub_100004950(v964, "BJ");
  sub_100004950(v958, "Benin");
  sub_100004950(&v960, "BJ");
  __int16 v962 = 257;
  char v963 = 1;
  sub_1003AC048(v2073, (long long *)v964, (long long *)v958);
  sub_100004950(v956, "BA");
  sub_100004950(v950, "Bosina & Herzegovina");
  sub_100004950(&v952, "BA");
  __int16 v954 = 257;
  char v955 = 1;
  sub_1003AC048(v2074, (long long *)v956, (long long *)v950);
  sub_100004950(v948, "BI");
  sub_100004950(v942, "Burundi");
  sub_100004950(&v944, "BI");
  __int16 v946 = 257;
  char v947 = 1;
  sub_1003AC048(v2075, (long long *)v948, (long long *)v942);
  sub_100004950(v940, "BF");
  sub_100004950(v934, "Burkina Faso");
  sub_100004950(&v936, "BF");
  __int16 v938 = 257;
  char v939 = 1;
  sub_1003AC048(v2076, (long long *)v940, (long long *)v934);
  sub_100004950(v932, "CF");
  sub_100004950(v926, "Central Africa Republic");
  sub_100004950(&v928, "CF");
  __int16 v930 = 257;
  char v931 = 1;
  sub_1003AC048(v2077, (long long *)v932, (long long *)v926);
  sub_100004950(v924, "TD");
  sub_100004950(v918, "Chad");
  sub_100004950(&v920, "TD");
  __int16 v922 = 257;
  char v923 = 1;
  sub_1003AC048(v2078, (long long *)v924, (long long *)v918);
  sub_100004950(v916, "CD");
  sub_100004950(v910, "Congo (Brazzaville)");
  sub_100004950(&v912, "CD");
  __int16 v914 = 257;
  char v915 = 1;
  sub_1003AC048(v2079, (long long *)v916, (long long *)v910);
  sub_100004950(v908, "CG");
  sub_100004950(v902, "Democratic Republic of Congo");
  sub_100004950(&v904, "CG");
  __int16 v906 = 257;
  char v907 = 1;
  sub_1003AC048(v2080, (long long *)v908, (long long *)v902);
  sub_100004950(v900, "GQ");
  sub_100004950(v894, "Equatorial Guinea");
  sub_100004950(&v896, "GQ");
  __int16 v898 = 257;
  char v899 = 1;
  sub_1003AC048(v2081, (long long *)v900, (long long *)v894);
  sub_100004950(v892, "ET");
  sub_100004950(v886, "Ethiopia");
  sub_100004950(&v888, "ET");
  __int16 v890 = 257;
  char v891 = 1;
  sub_1003AC048(v2082, (long long *)v892, (long long *)v886);
  sub_100004950(v884, "PF");
  sub_100004950(v878, "French Polynesia");
  sub_100004950(&v880, "PF");
  __int16 v882 = 257;
  char v883 = 1;
  sub_1003AC048(v2083, (long long *)v884, (long long *)v878);
  sub_100004950(v876, "GA");
  sub_100004950(v870, "Gabon");
  sub_100004950(&v872, "GA");
  __int16 v874 = 257;
  char v875 = 1;
  sub_1003AC048(v2084, (long long *)v876, (long long *)v870);
  sub_100004950(v868, "GM");
  sub_100004950(v862, "Gambia");
  sub_100004950(&v864, "GM");
  __int16 v866 = 257;
  char v867 = 1;
  sub_1003AC048(v2085, (long long *)v868, (long long *)v862);
  sub_100004950(v860, "GH");
  sub_100004950(v854, "Ghana");
  sub_100004950(&v856, "GH");
  __int16 v858 = 257;
  char v859 = 1;
  sub_1003AC048(v2086, (long long *)v860, (long long *)v854);
  sub_100004950(v852, "GI");
  sub_100004950(v846, "Gibraltar");
  sub_100004950(&v848, "GI");
  __int16 v850 = 257;
  char v851 = 1;
  sub_1003AC048(v2087, (long long *)v852, (long long *)v846);
  sub_100004950(v844, "GL");
  sub_100004950(v838, "Greenland");
  sub_100004950(&v840, "GL");
  __int16 v842 = 257;
  char v843 = 1;
  sub_1003AC048(v2088, (long long *)v844, (long long *)v838);
  sub_100004950(v836, "GP");
  sub_100004950(v830, "Guadeloupe");
  sub_100004950(&v832, "GP");
  __int16 v834 = 257;
  char v835 = 1;
  sub_1003AC048(v2089, (long long *)v836, (long long *)v830);
  sub_100004950(v828, "GW");
  sub_100004950(v822, "Guinea Bissau");
  sub_100004950(&v824, "GW");
  __int16 v826 = 257;
  char v827 = 1;
  sub_1003AC048(v2090, (long long *)v828, (long long *)v822);
  sub_100004950(v820, "GN");
  sub_100004950(v814, "Guinea Conakry");
  sub_100004950(&v816, "GN");
  __int16 v818 = 257;
  char v819 = 1;
  sub_1003AC048(v2091, (long long *)v820, (long long *)v814);
  sub_100004950(v812, "IQ");
  sub_100004950(v806, "Iraq");
  sub_100004950(&v808, "IQ");
  __int16 v810 = 257;
  char v811 = 1;
  sub_1003AC048(v2092, (long long *)v812, (long long *)v806);
  sub_100004950(v804, "CI");
  sub_100004950(v798, "Ivory Coast");
  sub_100004950(&v800, "CI");
  __int16 v802 = 257;
  char v803 = 1;
  sub_1003AC048(v2093, (long long *)v804, (long long *)v798);
  sub_100004950(v796, "KE");
  sub_100004950(v790, "Kenya");
  sub_100004950(&v792, "KE");
  __int16 v794 = 257;
  char v795 = 1;
  sub_1003AC048(v2094, (long long *)v796, (long long *)v790);
  sub_100004950(v788, "KG");
  sub_100004950(v782, "Kyrgzstan");
  sub_100004950(&v784, "KG");
  __int16 v786 = 0;
  char v787 = 6;
  sub_1003AC048(v2095, (long long *)v788, (long long *)v782);
  sub_100004950(v780, "LB");
  sub_100004950(v774, "Lebanon");
  sub_100004950(&v776, "LB");
  __int16 v778 = 257;
  char v779 = 1;
  sub_1003AC048(v2096, (long long *)v780, (long long *)v774);
  sub_100004950(v772, "LS");
  sub_100004950(v766, "Lesotho");
  sub_100004950(&v768, "LS");
  __int16 v770 = 257;
  char v771 = 1;
  sub_1003AC048(v2097, (long long *)v772, (long long *)v766);
  sub_100004950(v764, "LR");
  sub_100004950(v758, "Liberia");
  sub_100004950(&v760, "LR");
  __int16 v762 = 257;
  char v763 = 1;
  sub_1003AC048(v2098, (long long *)v764, (long long *)v758);
  sub_100004950(v756, "LY");
  sub_100004950(v750, "Libya");
  sub_100004950(&v752, "LY");
  __int16 v754 = 257;
  char v755 = 1;
  sub_1003AC048(v2099, (long long *)v756, (long long *)v750);
  sub_100004950(v748, "MK");
  sub_100004950(v742, "Macedonia");
  sub_100004950(&v744, "MK");
  __int16 v746 = 257;
  char v747 = 1;
  sub_1003AC048(v2100, (long long *)v748, (long long *)v742);
  sub_100004950(v740, "MG");
  sub_100004950(v734, "Madagascar");
  sub_100004950(&v736, "MG");
  __int16 v738 = 257;
  char v739 = 1;
  sub_1003AC048(v2101, (long long *)v740, (long long *)v734);
  sub_100004950(v732, "ML");
  sub_100004950(v726, "Mali");
  sub_100004950(&v728, "ML");
  __int16 v730 = 257;
  char v731 = 1;
  sub_1003AC048(v2102, (long long *)v732, (long long *)v726);
  sub_100004950(v724, "MQ");
  sub_100004950(v718, "Martinique");
  sub_100004950(&v720, "MQ");
  __int16 v722 = 257;
  char v723 = 1;
  sub_1003AC048(v2103, (long long *)v724, (long long *)v718);
  sub_100004950(v716, "MU");
  sub_100004950(v710, "Mauritius");
  sub_100004950(&v712, "MU");
  __int16 v714 = 257;
  char v715 = 1;
  sub_1003AC048(v2104, (long long *)v716, (long long *)v710);
  sub_100004950(v708, "MD");
  sub_100004950(v702, "Moldova");
  sub_100004950(&v704, "MD");
  __int16 v706 = 257;
  char v707 = 1;
  sub_1003AC048(v2105, (long long *)v708, (long long *)v702);
  sub_100004950(v700, "MC");
  sub_100004950(v694, "Monaco");
  sub_100004950(&v696, "MC");
  __int16 v698 = 257;
  char v699 = 1;
  sub_1003AC048(v2106, (long long *)v700, (long long *)v694);
  sub_100004950(v692, "ME");
  sub_100004950(v686, "Montenegro");
  sub_100004950(&v688, "ME");
  __int16 v690 = 257;
  char v691 = 1;
  sub_1003AC048(v2107, (long long *)v692, (long long *)v686);
  sub_100004950(v684, "MZ");
  sub_100004950(v678, "Mozambique");
  sub_100004950(&v680, "MZ");
  __int16 v682 = 257;
  char v683 = 1;
  sub_1003AC048(v2108, (long long *)v684, (long long *)v678);
  sub_100004950(v676, "NA");
  sub_100004950(v670, "Namibia");
  sub_100004950(&v672, "NA");
  __int16 v674 = 257;
  char v675 = 1;
  sub_1003AC048(v2109, (long long *)v676, (long long *)v670);
  sub_100004950(v668, "NE");
  sub_100004950(v662, "Niger");
  sub_100004950(&v664, "NE");
  __int16 v666 = 257;
  char v667 = 1;
  sub_1003AC048(v2110, (long long *)v668, (long long *)v662);
  sub_100004950(v660, "OM");
  sub_100004950(v654, "Oman");
  sub_100004950(&v656, "OM");
  __int16 v658 = 257;
  char v659 = 1;
  sub_1003AC048(v2111, (long long *)v660, (long long *)v654);
  sub_100004950(v652, "RE");
  sub_100004950(v646, "Reunion");
  sub_100004950(&v648, "RE");
  __int16 v650 = 257;
  char v651 = 1;
  sub_1003AC048(v2112, (long long *)v652, (long long *)v646);
  sub_100004950(v644, "SN");
  sub_100004950(v638, "Senegal");
  sub_100004950(&v640, "SN");
  __int16 v642 = 257;
  char v643 = 1;
  sub_1003AC048(v2113, (long long *)v644, (long long *)v638);
  sub_100004950(v636, "TZ");
  sub_100004950(v630, "Tanzania");
  sub_100004950(&v632, "TZ");
  __int16 v634 = 257;
  char v635 = 1;
  sub_1003AC048(v2114, (long long *)v636, (long long *)v630);
  sub_100004950(v628, "TG");
  sub_100004950(v622, "Togo");
  sub_100004950(&v624, "TG");
  __int16 v626 = 257;
  char v627 = 1;
  sub_1003AC048(v2115, (long long *)v628, (long long *)v622);
  sub_100004950(v620, "TN");
  sub_100004950(v614, "Tunisia");
  sub_100004950(&v616, "TN");
  __int16 v618 = 257;
  char v619 = 1;
  sub_1003AC048(v2116, (long long *)v620, (long long *)v614);
  sub_100004950(v612, "UG");
  sub_100004950(v606, "Uganda");
  sub_100004950(&v608, "UG");
  __int16 v610 = 257;
  char v611 = 1;
  sub_1003AC048(v2117, (long long *)v612, (long long *)v606);
  sub_100004950(v604, "UZ");
  sub_100004950(v598, "Uzbekistan");
  sub_100004950(&v600, "UZ");
  __int16 v602 = 0;
  char v603 = 6;
  sub_1003AC048(v2118, (long long *)v604, (long long *)v598);
  sub_100004950(v596, "ZM");
  sub_100004950(v590, "Zambia");
  sub_100004950(&v592, "ZM");
  __int16 v594 = 257;
  char v595 = 1;
  sub_1003AC048(v2119, (long long *)v596, (long long *)v590);
  sub_100004950(v588, "ZW");
  sub_100004950(v582, "Zimbabwe");
  sub_100004950(&v584, "ZW");
  __int16 v586 = 257;
  char v587 = 1;
  sub_1003AC048(v2120, (long long *)v588, (long long *)v582);
  sub_100004950(v580, "GE");
  sub_100004950(v574, "Georgia");
  sub_100004950(&v576, "GE");
  __int16 v578 = 257;
  char v579 = 1;
  sub_1003AC048(v2121, (long long *)v580, (long long *)v574);
  sub_100004950(v572, "MW");
  sub_100004950(v566, "Malawi");
  sub_100004950(&v568, "MW");
  __int16 v570 = 257;
  char v571 = 1;
  sub_1003AC048(v2122, (long long *)v572, (long long *)v566);
  sub_100004950(v564, "RW");
  sub_100004950(v558, "Rwanda");
  sub_100004950(&v560, "RW");
  __int16 v562 = 257;
  char v563 = 1;
  sub_1003AC048(v2123, (long long *)v564, (long long *)v558);
  sub_100004950(v556, "SC");
  sub_100004950(v550, "Seychelles");
  sub_100004950(&v552, "SC");
  __int16 v554 = 257;
  char v555 = 1;
  sub_1003AC048(v2124, (long long *)v556, (long long *)v550);
  sub_100004950(v548, "SZ");
  sub_100004950(v542, "Swaziland");
  sub_100004950(&v544, "SZ");
  __int16 v546 = 257;
  char v547 = 1;
  sub_1003AC048(v2125, (long long *)v548, (long long *)v542);
  sub_100004950(v540, "QA");
  sub_100004950(v534, "Qatar");
  sub_100004950(&v536, "QA");
  __int16 v538 = 257;
  char v539 = 1;
  sub_1003AC048(v2126, (long long *)v540, (long long *)v534);
  sub_100004950(v532, "JO");
  sub_100004950(v526, "Jordan");
  sub_100004950(&v528, "JO");
  __int16 v530 = 257;
  char v531 = 1;
  sub_1003AC048(v2127, (long long *)v532, (long long *)v526);
  sub_100004950(v524, "BH");
  sub_100004950(v518, "Bahrain");
  sub_100004950(&v520, "BH");
  __int16 v522 = 257;
  char v523 = 1;
  sub_1003AC048(v2128, (long long *)v524, (long long *)v518);
  sub_100004950(v516, "AD");
  sub_100004950(v510, "ANDORRA (all EIRP locales)");
  sub_100004950(&v512, "AD");
  __int16 v514 = 257;
  char v515 = 1;
  sub_1003AC048(v2129, (long long *)v516, (long long *)v510);
  sub_100004950(v508, "CW");
  sub_100004950(v502, "CURACAO");
  sub_100004950(&v504, "CW");
  __int16 v506 = 257;
  char v507 = 0;
  sub_1003AC048(v2130, (long long *)v508, (long long *)v502);
  sub_100004950(v500, "BZ");
  sub_100004950(v494, "BELIZE");
  sub_100004950(&v496, "BZ");
  __int16 v498 = 257;
  char v499 = 0;
  sub_1003AC048(v2131, (long long *)v500, (long long *)v494);
  sub_100004950(v492, "CC");
  sub_100004950(v486, "COCOS (KEELING) ISLANDS");
  sub_100004950(&v488, "CC");
  __int16 v490 = 257;
  char v491 = 1;
  sub_1003AC048(v2132, (long long *)v492, (long long *)v486);
  sub_100004950(v484, "CK");
  sub_100004950(v478, "COOK ISLANDS");
  sub_100004950(&v480, "CK");
  __int16 v482 = 257;
  char v483 = 1;
  sub_1003AC048(v2133, (long long *)v484, (long long *)v478);
  sub_100004950(v476, "CM");
  sub_100004950(v470, "CAMEROON");
  sub_100004950(&v472, "CM");
  __int16 v474 = 257;
  char v475 = 1;
  sub_1003AC048(v2134, (long long *)v476, (long long *)v470);
  sub_100004950(v468, "CV");
  sub_100004950(v462, "CAPE VERDE");
  sub_100004950(&v464, "CV");
  __int16 v466 = 257;
  char v467 = 1;
  sub_1003AC048(v2135, (long long *)v468, (long long *)v462);
  sub_100004950(v460, "CX");
  sub_100004950(v454, "CHRISTMAS ISLAND");
  sub_100004950(&v456, "CX");
  __int16 v458 = 257;
  char v459 = 1;
  sub_1003AC048(v2136, (long long *)v460, (long long *)v454);
  sub_100004950(v452, "FM");
  sub_100004950(v446, "MICRONESIA. FEDERATED STATES OF");
  sub_100004950(&v448, "FM");
  __int16 v450 = 257;
  char v451 = 1;
  sub_1003AC048(v2137, (long long *)v452, (long long *)v446);
  sub_100004950(v444, "GF");
  sub_100004950(v438, "FRENCH GUIANA");
  sub_100004950(&v440, "GF");
  __int16 v442 = 257;
  char v443 = 0;
  sub_1003AC048(v2138, (long long *)v444, (long long *)v438);
  sub_100004950(v436, "GG");
  sub_100004950(v430, "Guernsey (All EIRP Locales)");
  sub_100004950(&v432, "GG");
  __int16 v434 = 257;
  char v435 = 1;
  sub_1003AC048(v2139, (long long *)v436, (long long *)v430);
  sub_100004950(v428, "HM");
  sub_100004950(v422, "HEARD ISLAND AND MCDONALD ISLANDS");
  sub_100004950(&v424, "HM");
  __int16 v426 = 257;
  char v427 = 1;
  sub_1003AC048(v2140, (long long *)v428, (long long *)v422);
  sub_100004950(v420, "HT");
  sub_100004950(v414, "HAITI");
  sub_100004950(&v416, "HT");
  __int16 v418 = 257;
  char v419 = 0;
  sub_1003AC048(v2141, (long long *)v420, (long long *)v414);
  sub_100004950(v412, "IO");
  sub_100004950(v406, "BRITISH INDIAN OCEAN TERRITORY");
  sub_100004950(&v408, "IO");
  __int16 v410 = 257;
  char v411 = 1;
  sub_1003AC048(v2142, (long long *)v412, (long long *)v406);
  sub_100004950(v404, "MF");
  sub_100004950(v398, "Saint Martin (North of Island)");
  sub_100004950(&v400, "MF");
  __int16 v402 = 257;
  char v403 = 0;
  sub_1003AC048(v2143, (long long *)v404, (long long *)v398);
  sub_100004950(v396, "MH");
  sub_100004950(v390, "MARSHALL ISLANDS");
  sub_100004950(&v392, "MH");
  __int16 v394 = 257;
  char v395 = 1;
  sub_1003AC048(v2144, (long long *)v396, (long long *)v390);
  sub_100004950(v388, "MR");
  sub_100004950(v382, "MAURITANIA");
  sub_100004950(&v384, "MR");
  __int16 v386 = 257;
  char v387 = 1;
  sub_1003AC048(v2145, (long long *)v388, (long long *)v382);
  sub_100004950(v380, "NG");
  sub_100004950(v374, "NIGERIA");
  sub_100004950(&v376, "NG");
  __int16 v378 = 257;
  char v379 = 1;
  sub_1003AC048(v2146, (long long *)v380, (long long *)v374);
  sub_100004950(v372, "NR");
  sub_100004950(v366, "NAURU");
  sub_100004950(&v368, "NR");
  __int16 v370 = 257;
  char v371 = 1;
  sub_1003AC048(v2147, (long long *)v372, (long long *)v366);
  sub_100004950(v364, "NU");
  sub_100004950(v358, "NIUE");
  sub_100004950(&v360, "NU");
  __int16 v362 = 257;
  char v363 = 1;
  sub_1003AC048(v2148, (long long *)v364, (long long *)v358);
  sub_100004950(v356, "PN");
  sub_100004950(v350, "PITCAIRN");
  sub_100004950(&v352, "PN");
  __int16 v354 = 257;
  char v355 = 1;
  sub_1003AC048(v2149, (long long *)v356, (long long *)v350);
  sub_100004950(v348, "PW");
  sub_100004950(v342, "PALAU ");
  sub_100004950(&v344, "PW");
  __int16 v346 = 257;
  char v347 = 0;
  sub_1003AC048(v2150, (long long *)v348, (long long *)v342);
  sub_100004950(v340, "SB");
  sub_100004950(v334, "SOLOMON ISLANDS");
  sub_100004950(&v336, "SB");
  __int16 v338 = 257;
  char v339 = 1;
  sub_1003AC048(v2151, (long long *)v340, (long long *)v334);
  sub_100004950(v332, "SL");
  sub_100004950(v326, "SIERRA LEONE");
  sub_100004950(&v328, "SL");
  __int16 v330 = 257;
  char v331 = 1;
  sub_1003AC048(v2152, (long long *)v332, (long long *)v326);
  sub_100004950(v324, "SR");
  sub_100004950(v318, "SURINAME");
  sub_100004950(&v320, "SR");
  __int16 v322 = 257;
  char v323 = 0;
  sub_1003AC048(v2153, (long long *)v324, (long long *)v318);
  sub_100004950(v316, "ST");
  sub_100004950(v310, "SAO TOME AND PRINCIPE");
  sub_100004950(&v312, "ST");
  __int16 v314 = 257;
  char v315 = 1;
  sub_1003AC048(v2154, (long long *)v316, (long long *)v310);
  sub_100004950(v308, "TF");
  sub_100004950(v302, "FRENCH SOUTHERN TERRITORIES");
  sub_100004950(&v304, "TF");
  __int16 v306 = 257;
  char v307 = 1;
  sub_1003AC048(v2155, (long long *)v308, (long long *)v302);
  sub_100004950(v300, "TK");
  sub_100004950(v294, "TOKELAU");
  sub_100004950(&v296, "TK");
  __int16 v298 = 257;
  char v299 = 1;
  sub_1003AC048(v2156, (long long *)v300, (long long *)v294);
  sub_100004950(v292, "TM");
  sub_100004950(v286, "TURKMENISTAN");
  sub_100004950(&v288, "TM");
  __int16 v290 = 0;
  char v291 = 6;
  sub_1003AC048(v2157, (long long *)v292, (long long *)v286);
  sub_100004950(v284, "TO");
  sub_100004950(v278, "TONGA");
  sub_100004950(&v280, "TO");
  __int16 v282 = 257;
  char v283 = 1;
  sub_1003AC048(v2158, (long long *)v284, (long long *)v278);
  sub_100004950(v276, "TV");
  sub_100004950(v270, "TUVALU");
  sub_100004950(&v272, "TV");
  __int16 v274 = 257;
  char v275 = 1;
  sub_1003AC048(v2159, (long long *)v276, (long long *)v270);
  sub_100004950(v268, "VA");
  sub_100004950(v262, "HOLY SEE (VATICAN CITY STATE)");
  sub_100004950(&v264, "VA");
  __int16 v266 = 257;
  char v267 = 1;
  sub_1003AC048(v2160, (long long *)v268, (long long *)v262);
  sub_100004950(v260, "WF");
  sub_100004950(v254, "WALLIS AND FUTUNA");
  sub_100004950(&v256, "WF");
  __int16 v258 = 257;
  char v259 = 1;
  sub_1003AC048(v2161, (long long *)v260, (long long *)v254);
  sub_100004950(v252, "YE");
  sub_100004950(v246, "YEMEN");
  sub_100004950(&v248, "YE");
  __int16 v250 = 257;
  char v251 = 1;
  sub_1003AC048(v2162, (long long *)v252, (long long *)v246);
  sub_100004950(v244, "YT");
  sub_100004950(v238, "MAYOTTE");
  sub_100004950(&v240, "YT");
  __int16 v242 = 257;
  char v243 = 1;
  sub_1003AC048(v2163, (long long *)v244, (long long *)v238);
  sub_100004950(v236, "ER");
  sub_100004950(v230, "ERITREA");
  sub_100004950(&v232, "ER");
  __int16 v234 = 257;
  char v235 = 1;
  sub_1003AC048(v2164, (long long *)v236, (long long *)v230);
  sub_100004950(v228, "FO");
  sub_100004950(v222, "FAROE ISLANDS");
  sub_100004950(&v224, "FO");
  __int16 v226 = 257;
  char v227 = 1;
  sub_1003AC048(v2165, (long long *)v228, (long long *)v222);
  sub_100004950(v220, "SO");
  sub_100004950(v214, "SOMALIA");
  sub_100004950(&v216, "SO");
  __int16 v218 = 257;
  char v219 = 1;
  sub_1003AC048(v2166, (long long *)v220, (long long *)v214);
  sub_100004950(v212, "BQ");
  sub_100004950(v206, "BES");
  sub_100004950(&v208, "BQ");
  __int16 v210 = 257;
  char v211 = 0;
  sub_1003AC048(v2167, (long long *)v212, (long long *)v206);
  sub_100004950(v204, "GY");
  sub_100004950(v198, "Guyana");
  sub_100004950(&v200, "GY");
  __int16 v202 = 257;
  char v203 = 0;
  sub_1003AC048(v2168, (long long *)v204, (long long *)v198);
  sub_100004950(v196, "AS");
  sub_100004950(v190, "America Samoa");
  sub_100004950(&v192, "AS");
  __int16 v194 = 257;
  char v195 = 0;
  sub_1003AC048(v2169, (long long *)v196, (long long *)v190);
  sub_100004950(v188, "BW");
  sub_100004950(v182, "Botswana");
  sub_100004950(&v184, "BW");
  __int16 v186 = 257;
  char v187 = 1;
  sub_1003AC048(v2170, (long long *)v188, (long long *)v182);
  sub_100004950(v180, "XK");
  sub_100004950(v174, "Kosovo");
  sub_100004950(&v176, "XK");
  __int16 v178 = 257;
  char v179 = 1;
  sub_1003AC048(v2171, (long long *)v180, (long long *)v174);
  sub_100004950(v172, "PS");
  sub_100004950(v166, "Palestine");
  sub_100004950(&v168, "PS");
  __int16 v170 = 257;
  char v171 = 1;
  sub_1003AC048(v2172, (long long *)v172, (long long *)v166);
  sub_100004950(v164, "TJ");
  sub_100004950(v158, "Tajikistan");
  sub_100004950(&v160, "TJ");
  __int16 v162 = 0;
  char v163 = 6;
  sub_1003AC048(v2173, (long long *)v164, (long long *)v158);
  sub_100004950(v156, "SD");
  sub_100004950(v150, "SUDAN");
  sub_100004950(&v152, "SD");
  __int16 v154 = 257;
  char v155 = 1;
  sub_1003AC048(v2174, (long long *)v156, (long long *)v150);
  sub_100004950(v148, "IM");
  sub_100004950(v142, "Isle of MAN");
  sub_100004950(&v144, "IM");
  __int16 v146 = 257;
  char v147 = 1;
  sub_1003AC048(v2175, (long long *)v148, (long long *)v142);
  sub_100004950(v140, "TL");
  sub_100004950(v134, "East Timor");
  sub_100004950(&v136, "TL");
  __int16 v138 = 257;
  char v139 = 1;
  sub_1003AC048(v2176, (long long *)v140, (long long *)v134);
  sub_100004950(v132, "DJ");
  sub_100004950(v126, "Djibouti ");
  sub_100004950(&v128, "DJ");
  __int16 v130 = 257;
  char v131 = 1;
  sub_1003AC048(v2177, (long long *)v132, (long long *)v126);
  sub_100004950(v124, "FK");
  sub_100004950(v118, "Falkland Islands");
  sub_100004950(&v120, "FK");
  __int16 v122 = 257;
  char v123 = 1;
  sub_1003AC048(v2178, (long long *)v124, (long long *)v118);
  sub_100004950(v116, "KI");
  sub_100004950(v110, "Kiribati");
  sub_100004950(&v112, "KI");
  __int16 v114 = 257;
  char v115 = 1;
  sub_1003AC048(v2179, (long long *)v116, (long long *)v110);
  sub_100004950(v108, "KM");
  sub_100004950(v102, "Comoros ");
  sub_100004950(&v104, "KM");
  __int16 v106 = 257;
  char v107 = 1;
  sub_1003AC048(v2180, (long long *)v108, (long long *)v102);
  sub_100004950(v100, "PM");
  sub_100004950(v94, "St. Pierre & Miquelon");
  sub_100004950(&v96, "PM");
  __int16 v98 = 257;
  char v99 = 1;
  sub_1003AC048(v2181, (long long *)v100, (long long *)v94);
  sub_100004950(v92, "SM");
  sub_100004950(v86, "San Marino");
  sub_100004950(&v88, "SM");
  __int16 v90 = 257;
  char v91 = 1;
  sub_1003AC048(v2182, (long long *)v92, (long long *)v86);
  sub_100004950(v84, "MP");
  sub_100004950(v78, "Northern Mariana Islands");
  sub_100004950(&v80, "MP");
  __int16 v82 = 257;
  char v83 = 0;
  sub_1003AC048(v2183, (long long *)v84, (long long *)v78);
  sub_100004950(v76, "A2");
  sub_100004950(v70, "French West Indies");
  sub_100004950(&v72, "A2");
  __int16 v74 = 257;
  char v75 = 1;
  sub_1003AC048(v2184, (long long *)v76, (long long *)v70);
  sub_100004950(v68, off_10089F748[0]);
  sub_100004950(v62, "Shared MCC");
  sub_100004950(&v64, off_10089F748[0]);
  __int16 v66 = 0;
  char v67 = 0;
  sub_1003AC048(v2185, (long long *)v68, (long long *)v62);
  sub_100004950(v60, off_10089F768[0]);
  sub_100004950(v54, "JPSS");
  sub_100004950(&v56, off_10089F768[0]);
  __int16 v58 = 0;
  char v59 = 4;
  sub_1003AC048(v2186, (long long *)v60, (long long *)v54);
  sub_100004950(v52, off_10089F770[0]);
  sub_100004950(v46, "USCW");
  sub_100004950(&v48, off_10089F770[0]);
  __int16 v50 = 0;
  char v51 = 0;
  sub_1003AC048(v2187, (long long *)v52, (long long *)v46);
  sub_100004950(v44, off_10089F778[0]);
  sub_100004950(v38, "GridRestricted");
  sub_100004950(&v40, off_10089F778[0]);
  __int16 v42 = 0;
  char v43 = 0;
  sub_1003AC048(v2188, (long long *)v44, (long long *)v38);
  sub_100004950(v36, off_10089F790[0]);
  sub_100004950(v30, "BACKOFF");
  sub_100004950(&v32, off_10089F790[0]);
  __int16 v34 = 0;
  char v35 = 0;
  sub_1003AC048(v2189, (long long *)v36, (long long *)v30);
  sub_100004950(v28, off_10089F750[0]);
  sub_100004950(v22, "TEST5");
  sub_100004950(&v24, off_10089F750[0]);
  __int16 v26 = 1;
  char v27 = 0;
  sub_1003AC048(v2190, (long long *)v28, (long long *)v22);
  sub_100004950(v20, off_10089F760[0]);
  sub_100004950(v14, "ApFakeCountry");
  sub_100004950(&v16, off_10089F760[0]);
  __int16 v18 = 0;
  char v19 = 0;
  sub_1003AC048(v2191, (long long *)v20, (long long *)v14);
  sub_100004950(v12, off_10089F758[0]);
  sub_100004950(v6, "kUnknownCountry");
  sub_100004950(&__p, off_10089F758[0]);
  __int16 v10 = 0;
  char v11 = 0;
  sub_1003AC048(v2192, (long long *)v12, (long long *)v6);
  sub_1003AC230((uint64_t)qword_1008AC5D8, v1950, 243);
  unint64_t v3 = 19440;
  do
  {
    long long v4 = &v1950[v3];
    if (SHIBYTE(v1948[v3 / 8 + 1]) < 0) {
      operator delete(*((void **)v4 - 4));
    }
    if ((char)*(v4 - 33) < 0) {
      operator delete(*((void **)v4 - 7));
    }
    if (*(&v1943 + v3) < 0) {
      operator delete(*((void **)v4 - 10));
    }
    v3 -= 80;
  }
  while (v3);
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (v49 < 0) {
    operator delete(v48);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (v57 < 0) {
    operator delete(v56);
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  if (v65 < 0) {
    operator delete(v64);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  if (v73 < 0) {
    operator delete(v72);
  }
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  if (v77 < 0) {
    operator delete(v76[0]);
  }
  if (v81 < 0) {
    operator delete(v80);
  }
  if (v79 < 0) {
    operator delete(v78[0]);
  }
  if (v85 < 0) {
    operator delete(v84[0]);
  }
  if (v89 < 0) {
    operator delete(v88);
  }
  if (v87 < 0) {
    operator delete(v86[0]);
  }
  if (v93 < 0) {
    operator delete(v92[0]);
  }
  if (v97 < 0) {
    operator delete(v96);
  }
  if (v95 < 0) {
    operator delete(v94[0]);
  }
  if (v101 < 0) {
    operator delete(v100[0]);
  }
  if (v105 < 0) {
    operator delete(v104);
  }
  if (v103 < 0) {
    operator delete(v102[0]);
  }
  if (v109 < 0) {
    operator delete(v108[0]);
  }
  if (v113 < 0) {
    operator delete(v112);
  }
  if (v111 < 0) {
    operator delete(v110[0]);
  }
  if (v117 < 0) {
    operator delete(v116[0]);
  }
  if (v121 < 0) {
    operator delete(v120);
  }
  if (v119 < 0) {
    operator delete(v118[0]);
  }
  if (v125 < 0) {
    operator delete(v124[0]);
  }
  if (v129 < 0) {
    operator delete(v128);
  }
  if (v127 < 0) {
    operator delete(v126[0]);
  }
  if (v133 < 0) {
    operator delete(v132[0]);
  }
  if (v137 < 0) {
    operator delete(v136);
  }
  if (v135 < 0) {
    operator delete(v134[0]);
  }
  if (v141 < 0) {
    operator delete(v140[0]);
  }
  if (v145 < 0) {
    operator delete(v144);
  }
  if (v143 < 0) {
    operator delete(v142[0]);
  }
  if (v149 < 0) {
    operator delete(v148[0]);
  }
  if (v153 < 0) {
    operator delete(v152);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  if (v157 < 0) {
    operator delete(v156[0]);
  }
  if (v161 < 0) {
    operator delete(v160);
  }
  if (v159 < 0) {
    operator delete(v158[0]);
  }
  if (v165 < 0) {
    operator delete(v164[0]);
  }
  if (v169 < 0) {
    operator delete(v168);
  }
  if (v167 < 0) {
    operator delete(v166[0]);
  }
  if (v173 < 0) {
    operator delete(v172[0]);
  }
  if (v177 < 0) {
    operator delete(v176);
  }
  if (v175 < 0) {
    operator delete(v174[0]);
  }
  if (v181 < 0) {
    operator delete(v180[0]);
  }
  if (v185 < 0) {
    operator delete(v184);
  }
  if (v183 < 0) {
    operator delete(v182[0]);
  }
  if (v189 < 0) {
    operator delete(v188[0]);
  }
  if (v193 < 0) {
    operator delete(v192);
  }
  if (v191 < 0) {
    operator delete(v190[0]);
  }
  if (v197 < 0) {
    operator delete(v196[0]);
  }
  if (v201 < 0) {
    operator delete(v200);
  }
  if (v199 < 0) {
    operator delete(v198[0]);
  }
  if (v205 < 0) {
    operator delete(v204[0]);
  }
  if (v209 < 0) {
    operator delete(v208);
  }
  if (v207 < 0) {
    operator delete(v206[0]);
  }
  if (v213 < 0) {
    operator delete(v212[0]);
  }
  if (v217 < 0) {
    operator delete(v216);
  }
  if (v215 < 0) {
    operator delete(v214[0]);
  }
  if (v221 < 0) {
    operator delete(v220[0]);
  }
  if (v225 < 0) {
    operator delete(v224);
  }
  if (v223 < 0) {
    operator delete(v222[0]);
  }
  if (v229 < 0) {
    operator delete(v228[0]);
  }
  if (v233 < 0) {
    operator delete(v232);
  }
  if (v231 < 0) {
    operator delete(v230[0]);
  }
  if (v237 < 0) {
    operator delete(v236[0]);
  }
  if (v241 < 0) {
    operator delete(v240);
  }
  if (v239 < 0) {
    operator delete(v238[0]);
  }
  if (v245 < 0) {
    operator delete(v244[0]);
  }
  if (v249 < 0) {
    operator delete(v248);
  }
  if (v247 < 0) {
    operator delete(v246[0]);
  }
  if (v253 < 0) {
    operator delete(v252[0]);
  }
  if (v257 < 0) {
    operator delete(v256);
  }
  if (v255 < 0) {
    operator delete(v254[0]);
  }
  if (v261 < 0) {
    operator delete(v260[0]);
  }
  if (v265 < 0) {
    operator delete(v264);
  }
  if (v263 < 0) {
    operator delete(v262[0]);
  }
  if (v269 < 0) {
    operator delete(v268[0]);
  }
  if (v273 < 0) {
    operator delete(v272);
  }
  if (v271 < 0) {
    operator delete(v270[0]);
  }
  if (v277 < 0) {
    operator delete(v276[0]);
  }
  if (v281 < 0) {
    operator delete(v280);
  }
  if (v279 < 0) {
    operator delete(v278[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  if (v289 < 0) {
    operator delete(v288);
  }
  if (v287 < 0) {
    operator delete(v286[0]);
  }
  if (v293 < 0) {
    operator delete(v292[0]);
  }
  if (v297 < 0) {
    operator delete(v296);
  }
  if (v295 < 0) {
    operator delete(v294[0]);
  }
  if (v301 < 0) {
    operator delete(v300[0]);
  }
  if (v305 < 0) {
    operator delete(v304);
  }
  if (v303 < 0) {
    operator delete(v302[0]);
  }
  if (v309 < 0) {
    operator delete(v308[0]);
  }
  if (v313 < 0) {
    operator delete(v312);
  }
  if (v311 < 0) {
    operator delete(v310[0]);
  }
  if (v317 < 0) {
    operator delete(v316[0]);
  }
  if (v321 < 0) {
    operator delete(v320);
  }
  if (v319 < 0) {
    operator delete(v318[0]);
  }
  if (v325 < 0) {
    operator delete(v324[0]);
  }
  if (v329 < 0) {
    operator delete(v328);
  }
  if (v327 < 0) {
    operator delete(v326[0]);
  }
  if (v333 < 0) {
    operator delete(v332[0]);
  }
  if (v337 < 0) {
    operator delete(v336);
  }
  if (v335 < 0) {
    operator delete(v334[0]);
  }
  if (v341 < 0) {
    operator delete(v340[0]);
  }
  if (v345 < 0) {
    operator delete(v344);
  }
  if (v343 < 0) {
    operator delete(v342[0]);
  }
  if (v349 < 0) {
    operator delete(v348[0]);
  }
  if (v353 < 0) {
    operator delete(v352);
  }
  if (v351 < 0) {
    operator delete(v350[0]);
  }
  if (v357 < 0) {
    operator delete(v356[0]);
  }
  if (v361 < 0) {
    operator delete(v360);
  }
  if (v359 < 0) {
    operator delete(v358[0]);
  }
  if (v365 < 0) {
    operator delete(v364[0]);
  }
  if (v369 < 0) {
    operator delete(v368);
  }
  if (v367 < 0) {
    operator delete(v366[0]);
  }
  if (v373 < 0) {
    operator delete(v372[0]);
  }
  if (v377 < 0) {
    operator delete(v376);
  }
  if (v375 < 0) {
    operator delete(v374[0]);
  }
  if (v381 < 0) {
    operator delete(v380[0]);
  }
  if (v385 < 0) {
    operator delete(v384);
  }
  if (v383 < 0) {
    operator delete(v382[0]);
  }
  if (v389 < 0) {
    operator delete(v388[0]);
  }
  if (v393 < 0) {
    operator delete(v392);
  }
  if (v391 < 0) {
    operator delete(v390[0]);
  }
  if (v397 < 0) {
    operator delete(v396[0]);
  }
  if (v401 < 0) {
    operator delete(v400);
  }
  if (v399 < 0) {
    operator delete(v398[0]);
  }
  if (v405 < 0) {
    operator delete(v404[0]);
  }
  if (v409 < 0) {
    operator delete(v408);
  }
  if (v407 < 0) {
    operator delete(v406[0]);
  }
  if (v413 < 0) {
    operator delete(v412[0]);
  }
  if (v417 < 0) {
    operator delete(v416);
  }
  if (v415 < 0) {
    operator delete(v414[0]);
  }
  if (v421 < 0) {
    operator delete(v420[0]);
  }
  if (v425 < 0) {
    operator delete(v424);
  }
  if (v423 < 0) {
    operator delete(v422[0]);
  }
  if (v429 < 0) {
    operator delete(v428[0]);
  }
  if (v433 < 0) {
    operator delete(v432);
  }
  if (v431 < 0) {
    operator delete(v430[0]);
  }
  if (v437 < 0) {
    operator delete(v436[0]);
  }
  if (v441 < 0) {
    operator delete(v440);
  }
  if (v439 < 0) {
    operator delete(v438[0]);
  }
  if (v445 < 0) {
    operator delete(v444[0]);
  }
  if (v449 < 0) {
    operator delete(v448);
  }
  if (v447 < 0) {
    operator delete(v446[0]);
  }
  if (v453 < 0) {
    operator delete(v452[0]);
  }
  if (v457 < 0) {
    operator delete(v456);
  }
  if (v455 < 0) {
    operator delete(v454[0]);
  }
  if (v461 < 0) {
    operator delete(v460[0]);
  }
  if (v465 < 0) {
    operator delete(v464);
  }
  if (v463 < 0) {
    operator delete(v462[0]);
  }
  if (v469 < 0) {
    operator delete(v468[0]);
  }
  if (v473 < 0) {
    operator delete(v472);
  }
  if (v471 < 0) {
    operator delete(v470[0]);
  }
  if (v477 < 0) {
    operator delete(v476[0]);
  }
  if (v481 < 0) {
    operator delete(v480);
  }
  if (v479 < 0) {
    operator delete(v478[0]);
  }
  if (v485 < 0) {
    operator delete(v484[0]);
  }
  if (v489 < 0) {
    operator delete(v488);
  }
  if (v487 < 0) {
    operator delete(v486[0]);
  }
  if (v493 < 0) {
    operator delete(v492[0]);
  }
  if (v497 < 0) {
    operator delete(v496);
  }
  if (v495 < 0) {
    operator delete(v494[0]);
  }
  if (v501 < 0) {
    operator delete(v500[0]);
  }
  if (v505 < 0) {
    operator delete(v504);
  }
  if (v503 < 0) {
    operator delete(v502[0]);
  }
  if (v509 < 0) {
    operator delete(v508[0]);
  }
  if (v513 < 0) {
    operator delete(v512);
  }
  if (v511 < 0) {
    operator delete(v510[0]);
  }
  if (v517 < 0) {
    operator delete(v516[0]);
  }
  if (v521 < 0) {
    operator delete(v520);
  }
  if (v519 < 0) {
    operator delete(v518[0]);
  }
  if (v525 < 0) {
    operator delete(v524[0]);
  }
  if (v529 < 0) {
    operator delete(v528);
  }
  if (v527 < 0) {
    operator delete(v526[0]);
  }
  if (v533 < 0) {
    operator delete(v532[0]);
  }
  if (v537 < 0) {
    operator delete(v536);
  }
  if (v535 < 0) {
    operator delete(v534[0]);
  }
  if (v541 < 0) {
    operator delete(v540[0]);
  }
  if (v545 < 0) {
    operator delete(v544);
  }
  if (v543 < 0) {
    operator delete(v542[0]);
  }
  if (v549 < 0) {
    operator delete(v548[0]);
  }
  if (v553 < 0) {
    operator delete(v552);
  }
  if (v551 < 0) {
    operator delete(v550[0]);
  }
  if (v557 < 0) {
    operator delete(v556[0]);
  }
  if (v561 < 0) {
    operator delete(v560);
  }
  if (v559 < 0) {
    operator delete(v558[0]);
  }
  if (v565 < 0) {
    operator delete(v564[0]);
  }
  if (v569 < 0) {
    operator delete(v568);
  }
  if (v567 < 0) {
    operator delete(v566[0]);
  }
  if (v573 < 0) {
    operator delete(v572[0]);
  }
  if (v577 < 0) {
    operator delete(v576);
  }
  if (v575 < 0) {
    operator delete(v574[0]);
  }
  if (v581 < 0) {
    operator delete(v580[0]);
  }
  if (v585 < 0) {
    operator delete(v584);
  }
  if (v583 < 0) {
    operator delete(v582[0]);
  }
  if (v589 < 0) {
    operator delete(v588[0]);
  }
  if (v593 < 0) {
    operator delete(v592);
  }
  if (v591 < 0) {
    operator delete(v590[0]);
  }
  if (v597 < 0) {
    operator delete(v596[0]);
  }
  if (v601 < 0) {
    operator delete(v600);
  }
  if (v599 < 0) {
    operator delete(v598[0]);
  }
  if (v605 < 0) {
    operator delete(v604[0]);
  }
  if (v609 < 0) {
    operator delete(v608);
  }
  if (v607 < 0) {
    operator delete(v606[0]);
  }
  if (v613 < 0) {
    operator delete(v612[0]);
  }
  if (v617 < 0) {
    operator delete(v616);
  }
  if (v615 < 0) {
    operator delete(v614[0]);
  }
  if (v621 < 0) {
    operator delete(v620[0]);
  }
  if (v625 < 0) {
    operator delete(v624);
  }
  if (v623 < 0) {
    operator delete(v622[0]);
  }
  if (v629 < 0) {
    operator delete(v628[0]);
  }
  if (v633 < 0) {
    operator delete(v632);
  }
  if (v631 < 0) {
    operator delete(v630[0]);
  }
  if (v637 < 0) {
    operator delete(v636[0]);
  }
  if (v641 < 0) {
    operator delete(v640);
  }
  if (v639 < 0) {
    operator delete(v638[0]);
  }
  if (v645 < 0) {
    operator delete(v644[0]);
  }
  if (v649 < 0) {
    operator delete(v648);
  }
  if (v647 < 0) {
    operator delete(v646[0]);
  }
  if (v653 < 0) {
    operator delete(v652[0]);
  }
  if (v657 < 0) {
    operator delete(v656);
  }
  if (v655 < 0) {
    operator delete(v654[0]);
  }
  if (v661 < 0) {
    operator delete(v660[0]);
  }
  if (v665 < 0) {
    operator delete(v664);
  }
  if (v663 < 0) {
    operator delete(v662[0]);
  }
  if (v669 < 0) {
    operator delete(v668[0]);
  }
  if (v673 < 0) {
    operator delete(v672);
  }
  if (v671 < 0) {
    operator delete(v670[0]);
  }
  if (v677 < 0) {
    operator delete(v676[0]);
  }
  if (v681 < 0) {
    operator delete(v680);
  }
  if (v679 < 0) {
    operator delete(v678[0]);
  }
  if (v685 < 0) {
    operator delete(v684[0]);
  }
  if (v689 < 0) {
    operator delete(v688);
  }
  if (v687 < 0) {
    operator delete(v686[0]);
  }
  if (v693 < 0) {
    operator delete(v692[0]);
  }
  if (v697 < 0) {
    operator delete(v696);
  }
  if (v695 < 0) {
    operator delete(v694[0]);
  }
  if (v701 < 0) {
    operator delete(v700[0]);
  }
  if (v705 < 0) {
    operator delete(v704);
  }
  if (v703 < 0) {
    operator delete(v702[0]);
  }
  if (v709 < 0) {
    operator delete(v708[0]);
  }
  if (v713 < 0) {
    operator delete(v712);
  }
  if (v711 < 0) {
    operator delete(v710[0]);
  }
  if (v717 < 0) {
    operator delete(v716[0]);
  }
  if (v721 < 0) {
    operator delete(v720);
  }
  if (v719 < 0) {
    operator delete(v718[0]);
  }
  if (v725 < 0) {
    operator delete(v724[0]);
  }
  if (v729 < 0) {
    operator delete(v728);
  }
  if (v727 < 0) {
    operator delete(v726[0]);
  }
  if (v733 < 0) {
    operator delete(v732[0]);
  }
  if (v737 < 0) {
    operator delete(v736);
  }
  if (v735 < 0) {
    operator delete(v734[0]);
  }
  if (v741 < 0) {
    operator delete(v740[0]);
  }
  if (v745 < 0) {
    operator delete(v744);
  }
  if (v743 < 0) {
    operator delete(v742[0]);
  }
  if (v749 < 0) {
    operator delete(v748[0]);
  }
  if (v753 < 0) {
    operator delete(v752);
  }
  if (v751 < 0) {
    operator delete(v750[0]);
  }
  if (v757 < 0) {
    operator delete(v756[0]);
  }
  if (v761 < 0) {
    operator delete(v760);
  }
  if (v759 < 0) {
    operator delete(v758[0]);
  }
  if (v765 < 0) {
    operator delete(v764[0]);
  }
  if (v769 < 0) {
    operator delete(v768);
  }
  if (v767 < 0) {
    operator delete(v766[0]);
  }
  if (v773 < 0) {
    operator delete(v772[0]);
  }
  if (v777 < 0) {
    operator delete(v776);
  }
  if (v775 < 0) {
    operator delete(v774[0]);
  }
  if (v781 < 0) {
    operator delete(v780[0]);
  }
  if (v785 < 0) {
    operator delete(v784);
  }
  if (v783 < 0) {
    operator delete(v782[0]);
  }
  if (v789 < 0) {
    operator delete(v788[0]);
  }
  if (v793 < 0) {
    operator delete(v792);
  }
  if (v791 < 0) {
    operator delete(v790[0]);
  }
  if (v797 < 0) {
    operator delete(v796[0]);
  }
  if (v801 < 0) {
    operator delete(v800);
  }
  if (v799 < 0) {
    operator delete(v798[0]);
  }
  if (v805 < 0) {
    operator delete(v804[0]);
  }
  if (v809 < 0) {
    operator delete(v808);
  }
  if (v807 < 0) {
    operator delete(v806[0]);
  }
  if (v813 < 0) {
    operator delete(v812[0]);
  }
  if (v817 < 0) {
    operator delete(v816);
  }
  if (v815 < 0) {
    operator delete(v814[0]);
  }
  if (v821 < 0) {
    operator delete(v820[0]);
  }
  if (v825 < 0) {
    operator delete(v824);
  }
  if (v823 < 0) {
    operator delete(v822[0]);
  }
  if (v829 < 0) {
    operator delete(v828[0]);
  }
  if (v833 < 0) {
    operator delete(v832);
  }
  if (v831 < 0) {
    operator delete(v830[0]);
  }
  if (v837 < 0) {
    operator delete(v836[0]);
  }
  if (v841 < 0) {
    operator delete(v840);
  }
  if (v839 < 0) {
    operator delete(v838[0]);
  }
  if (v845 < 0) {
    operator delete(v844[0]);
  }
  if (v849 < 0) {
    operator delete(v848);
  }
  if (v847 < 0) {
    operator delete(v846[0]);
  }
  if (v853 < 0) {
    operator delete(v852[0]);
  }
  if (v857 < 0) {
    operator delete(v856);
  }
  if (v855 < 0) {
    operator delete(v854[0]);
  }
  if (v861 < 0) {
    operator delete(v860[0]);
  }
  if (v865 < 0) {
    operator delete(v864);
  }
  if (v863 < 0) {
    operator delete(v862[0]);
  }
  if (v869 < 0) {
    operator delete(v868[0]);
  }
  if (v873 < 0) {
    operator delete(v872);
  }
  if (v871 < 0) {
    operator delete(v870[0]);
  }
  if (v877 < 0) {
    operator delete(v876[0]);
  }
  if (v881 < 0) {
    operator delete(v880);
  }
  if (v879 < 0) {
    operator delete(v878[0]);
  }
  if (v885 < 0) {
    operator delete(v884[0]);
  }
  if (v889 < 0) {
    operator delete(v888);
  }
  if (v887 < 0) {
    operator delete(v886[0]);
  }
  if (v893 < 0) {
    operator delete(v892[0]);
  }
  if (v897 < 0) {
    operator delete(v896);
  }
  if (v895 < 0) {
    operator delete(v894[0]);
  }
  if (v901 < 0) {
    operator delete(v900[0]);
  }
  if (v905 < 0) {
    operator delete(v904);
  }
  if (v903 < 0) {
    operator delete(v902[0]);
  }
  if (v909 < 0) {
    operator delete(v908[0]);
  }
  if (v913 < 0) {
    operator delete(v912);
  }
  if (v911 < 0) {
    operator delete(v910[0]);
  }
  if (v917 < 0) {
    operator delete(v916[0]);
  }
  if (v921 < 0) {
    operator delete(v920);
  }
  if (v919 < 0) {
    operator delete(v918[0]);
  }
  if (v925 < 0) {
    operator delete(v924[0]);
  }
  if (v929 < 0) {
    operator delete(v928);
  }
  if (v927 < 0) {
    operator delete(v926[0]);
  }
  if (v933 < 0) {
    operator delete(v932[0]);
  }
  if (v937 < 0) {
    operator delete(v936);
  }
  if (v935 < 0) {
    operator delete(v934[0]);
  }
  if (v941 < 0) {
    operator delete(v940[0]);
  }
  if (v945 < 0) {
    operator delete(v944);
  }
  if (v943 < 0) {
    operator delete(v942[0]);
  }
  if (v949 < 0) {
    operator delete(v948[0]);
  }
  if (v953 < 0) {
    operator delete(v952);
  }
  if (v951 < 0) {
    operator delete(v950[0]);
  }
  if (v957 < 0) {
    operator delete(v956[0]);
  }
  if (v961 < 0) {
    operator delete(v960);
  }
  if (v959 < 0) {
    operator delete(v958[0]);
  }
  if (v965 < 0) {
    operator delete(v964[0]);
  }
  if (v969 < 0) {
    operator delete(v968);
  }
  if (v967 < 0) {
    operator delete(v966[0]);
  }
  if (v973 < 0) {
    operator delete(v972[0]);
  }
  if (v977 < 0) {
    operator delete(v976);
  }
  if (v975 < 0) {
    operator delete(v974[0]);
  }
  if (v981 < 0) {
    operator delete(v980[0]);
  }
  if (v985 < 0) {
    operator delete(v984);
  }
  if (v983 < 0) {
    operator delete(v982[0]);
  }
  if (v989 < 0) {
    operator delete(v988[0]);
  }
  if (v993 < 0) {
    operator delete(v992);
  }
  if (v991 < 0) {
    operator delete(v990[0]);
  }
  if (v997 < 0) {
    operator delete(v996[0]);
  }
  if (v1001 < 0) {
    operator delete(v1000);
  }
  if (v999 < 0) {
    operator delete(v998[0]);
  }
  if (v1005 < 0) {
    operator delete(v1004[0]);
  }
  if (v1009 < 0) {
    operator delete(v1008);
  }
  if (v1007 < 0) {
    operator delete(v1006[0]);
  }
  if (v1013 < 0) {
    operator delete(v1012[0]);
  }
  if (v1017 < 0) {
    operator delete(v1016);
  }
  if (v1015 < 0) {
    operator delete(v1014[0]);
  }
  if (v1021 < 0) {
    operator delete(v1020[0]);
  }
  if (v1025 < 0) {
    operator delete(v1024);
  }
  if (v1023 < 0) {
    operator delete(v1022[0]);
  }
  if (v1029 < 0) {
    operator delete(v1028[0]);
  }
  if (v1033 < 0) {
    operator delete(v1032);
  }
  if (v1031 < 0) {
    operator delete(v1030[0]);
  }
  if (v1037 < 0) {
    operator delete(v1036[0]);
  }
  if (v1041 < 0) {
    operator delete(v1040);
  }
  if (v1039 < 0) {
    operator delete(v1038[0]);
  }
  if (v1045 < 0) {
    operator delete(v1044[0]);
  }
  if (v1049 < 0) {
    operator delete(v1048);
  }
  if (v1047 < 0) {
    operator delete(v1046[0]);
  }
  if (v1053 < 0) {
    operator delete(v1052[0]);
  }
  if (v1057 < 0) {
    operator delete(v1056);
  }
  if (v1055 < 0) {
    operator delete(v1054[0]);
  }
  if (v1061 < 0) {
    operator delete(v1060[0]);
  }
  if (v1065 < 0) {
    operator delete(v1064);
  }
  if (v1063 < 0) {
    operator delete(v1062[0]);
  }
  if (v1069 < 0) {
    operator delete(v1068[0]);
  }
  if (v1073 < 0) {
    operator delete(v1072);
  }
  if (v1071 < 0) {
    operator delete(v1070[0]);
  }
  if (v1077 < 0) {
    operator delete(v1076[0]);
  }
  if (v1081 < 0) {
    operator delete(v1080);
  }
  if (v1079 < 0) {
    operator delete(v1078[0]);
  }
  if (v1085 < 0) {
    operator delete(v1084[0]);
  }
  if (v1089 < 0) {
    operator delete(v1088);
  }
  if (v1087 < 0) {
    operator delete(v1086[0]);
  }
  if (v1093 < 0) {
    operator delete(v1092[0]);
  }
  if (v1097 < 0) {
    operator delete(v1096);
  }
  if (v1095 < 0) {
    operator delete(v1094[0]);
  }
  if (v1101 < 0) {
    operator delete(v1100[0]);
  }
  if (v1105 < 0) {
    operator delete(v1104);
  }
  if (v1103 < 0) {
    operator delete(v1102[0]);
  }
  if (v1109 < 0) {
    operator delete(v1108[0]);
  }
  if (v1113 < 0) {
    operator delete(v1112);
  }
  if (v1111 < 0) {
    operator delete(v1110[0]);
  }
  if (v1117 < 0) {
    operator delete(v1116[0]);
  }
  if (v1121 < 0) {
    operator delete(v1120);
  }
  if (v1119 < 0) {
    operator delete(v1118[0]);
  }
  if (v1125 < 0) {
    operator delete(v1124[0]);
  }
  if (v1129 < 0) {
    operator delete(v1128);
  }
  if (v1127 < 0) {
    operator delete(v1126[0]);
  }
  if (v1133 < 0) {
    operator delete(v1132[0]);
  }
  if (v1137 < 0) {
    operator delete(v1136);
  }
  if (v1135 < 0) {
    operator delete(v1134[0]);
  }
  if (v1141 < 0) {
    operator delete(v1140[0]);
  }
  if (v1145 < 0) {
    operator delete(v1144);
  }
  if (v1143 < 0) {
    operator delete(v1142[0]);
  }
  if (v1149 < 0) {
    operator delete(v1148[0]);
  }
  if (v1153 < 0) {
    operator delete(v1152);
  }
  if (v1151 < 0) {
    operator delete(v1150[0]);
  }
  if (v1157 < 0) {
    operator delete(v1156[0]);
  }
  if (v1161 < 0) {
    operator delete(v1160);
  }
  if (v1159 < 0) {
    operator delete(v1158[0]);
  }
  if (v1165 < 0) {
    operator delete(v1164[0]);
  }
  if (v1169 < 0) {
    operator delete(v1168);
  }
  if (v1167 < 0) {
    operator delete(v1166[0]);
  }
  if (v1173 < 0) {
    operator delete(v1172[0]);
  }
  if (v1177 < 0) {
    operator delete(v1176);
  }
  if (v1175 < 0) {
    operator delete(v1174[0]);
  }
  if (v1181 < 0) {
    operator delete(v1180[0]);
  }
  if (v1185 < 0) {
    operator delete(v1184);
  }
  if (v1183 < 0) {
    operator delete(v1182[0]);
  }
  if (v1189 < 0) {
    operator delete(v1188[0]);
  }
  if (v1193 < 0) {
    operator delete(v1192);
  }
  if (v1191 < 0) {
    operator delete(v1190[0]);
  }
  if (v1197 < 0) {
    operator delete(v1196[0]);
  }
  if (v1201 < 0) {
    operator delete(v1200);
  }
  if (v1199 < 0) {
    operator delete(v1198[0]);
  }
  if (v1205 < 0) {
    operator delete(v1204[0]);
  }
  if (v1209 < 0) {
    operator delete(v1208);
  }
  if (v1207 < 0) {
    operator delete(v1206[0]);
  }
  if (v1213 < 0) {
    operator delete(v1212[0]);
  }
  if (v1217 < 0) {
    operator delete(v1216);
  }
  if (v1215 < 0) {
    operator delete(v1214[0]);
  }
  if (v1221 < 0) {
    operator delete(v1220[0]);
  }
  if (v1225 < 0) {
    operator delete(v1224);
  }
  if (v1223 < 0) {
    operator delete(v1222[0]);
  }
  if (v1229 < 0) {
    operator delete(v1228[0]);
  }
  if (v1233 < 0) {
    operator delete(v1232);
  }
  if (v1231 < 0) {
    operator delete(v1230[0]);
  }
  if (v1237 < 0) {
    operator delete(v1236[0]);
  }
  if (v1241 < 0) {
    operator delete(v1240);
  }
  if (v1239 < 0) {
    operator delete(v1238[0]);
  }
  if (v1245 < 0) {
    operator delete(v1244[0]);
  }
  if (v1249 < 0) {
    operator delete(v1248);
  }
  if (v1247 < 0) {
    operator delete(v1246[0]);
  }
  if (v1253 < 0) {
    operator delete(v1252[0]);
  }
  if (v1257 < 0) {
    operator delete(v1256);
  }
  if (v1255 < 0) {
    operator delete(v1254[0]);
  }
  if (v1261 < 0) {
    operator delete(v1260[0]);
  }
  if (v1265 < 0) {
    operator delete(v1264);
  }
  if (v1263 < 0) {
    operator delete(v1262[0]);
  }
  if (v1269 < 0) {
    operator delete(v1268[0]);
  }
  if (v1273 < 0) {
    operator delete(v1272);
  }
  if (v1271 < 0) {
    operator delete(v1270[0]);
  }
  if (v1277 < 0) {
    operator delete(v1276[0]);
  }
  if (v1281 < 0) {
    operator delete(v1280);
  }
  if (v1279 < 0) {
    operator delete(v1278[0]);
  }
  if (v1285 < 0) {
    operator delete(v1284[0]);
  }
  if (v1289 < 0) {
    operator delete(v1288);
  }
  if (v1287 < 0) {
    operator delete(v1286[0]);
  }
  if (v1293 < 0) {
    operator delete(v1292[0]);
  }
  if (v1297 < 0) {
    operator delete(v1296);
  }
  if (v1295 < 0) {
    operator delete(v1294[0]);
  }
  if (v1301 < 0) {
    operator delete(v1300[0]);
  }
  if (v1305 < 0) {
    operator delete(v1304);
  }
  if (v1303 < 0) {
    operator delete(v1302[0]);
  }
  if (v1309 < 0) {
    operator delete(v1308[0]);
  }
  if (v1313 < 0) {
    operator delete(v1312);
  }
  if (v1311 < 0) {
    operator delete(v1310[0]);
  }
  if (v1317 < 0) {
    operator delete(v1316[0]);
  }
  if (v1321 < 0) {
    operator delete(v1320);
  }
  if (v1319 < 0) {
    operator delete(v1318[0]);
  }
  if (v1325 < 0) {
    operator delete(v1324[0]);
  }
  if (v1329 < 0) {
    operator delete(v1328);
  }
  if (v1327 < 0) {
    operator delete(v1326[0]);
  }
  if (v1333 < 0) {
    operator delete(v1332[0]);
  }
  if (v1337 < 0) {
    operator delete(v1336);
  }
  if (v1335 < 0) {
    operator delete(v1334[0]);
  }
  if (v1341 < 0) {
    operator delete(v1340[0]);
  }
  if (v1345 < 0) {
    operator delete(v1344);
  }
  if (v1343 < 0) {
    operator delete(v1342[0]);
  }
  if (v1349 < 0) {
    operator delete(v1348[0]);
  }
  if (v1353 < 0) {
    operator delete(v1352);
  }
  if (v1351 < 0) {
    operator delete(v1350[0]);
  }
  if (v1357 < 0) {
    operator delete(v1356[0]);
  }
  if (v1361 < 0) {
    operator delete(v1360);
  }
  if (v1359 < 0) {
    operator delete(v1358[0]);
  }
  if (v1365 < 0) {
    operator delete(v1364[0]);
  }
  if (v1369 < 0) {
    operator delete(v1368);
  }
  if (v1367 < 0) {
    operator delete(v1366[0]);
  }
  if (v1373 < 0) {
    operator delete(v1372[0]);
  }
  if (v1377 < 0) {
    operator delete(v1376);
  }
  if (v1375 < 0) {
    operator delete(v1374[0]);
  }
  if (v1381 < 0) {
    operator delete(v1380[0]);
  }
  if (v1385 < 0) {
    operator delete(v1384);
  }
  if (v1383 < 0) {
    operator delete(v1382[0]);
  }
  if (v1389 < 0) {
    operator delete(v1388[0]);
  }
  if (v1393 < 0) {
    operator delete(v1392);
  }
  if (v1391 < 0) {
    operator delete(v1390[0]);
  }
  if (v1397 < 0) {
    operator delete(v1396[0]);
  }
  if (v1401 < 0) {
    operator delete(v1400);
  }
  if (v1399 < 0) {
    operator delete(v1398[0]);
  }
  if (v1405 < 0) {
    operator delete(v1404[0]);
  }
  if (v1409 < 0) {
    operator delete(v1408);
  }
  if (v1407 < 0) {
    operator delete(v1406[0]);
  }
  if (v1413 < 0) {
    operator delete(v1412[0]);
  }
  if (v1417 < 0) {
    operator delete(v1416);
  }
  if (v1415 < 0) {
    operator delete(v1414[0]);
  }
  if (v1421 < 0) {
    operator delete(v1420[0]);
  }
  if (v1425 < 0) {
    operator delete(v1424);
  }
  if (v1423 < 0) {
    operator delete(v1422[0]);
  }
  if (v1429 < 0) {
    operator delete(v1428[0]);
  }
  if (v1433 < 0) {
    operator delete(v1432);
  }
  if (v1431 < 0) {
    operator delete(v1430[0]);
  }
  if (v1437 < 0) {
    operator delete(v1436[0]);
  }
  if (v1441 < 0) {
    operator delete(v1440);
  }
  if (v1439 < 0) {
    operator delete(v1438[0]);
  }
  if (v1445 < 0) {
    operator delete(v1444[0]);
  }
  if (v1449 < 0) {
    operator delete(v1448);
  }
  if (v1447 < 0) {
    operator delete(v1446[0]);
  }
  if (v1453 < 0) {
    operator delete(v1452[0]);
  }
  if (v1457 < 0) {
    operator delete(v1456);
  }
  if (v1455 < 0) {
    operator delete(v1454[0]);
  }
  if (v1461 < 0) {
    operator delete(v1460[0]);
  }
  if (v1465 < 0) {
    operator delete(v1464);
  }
  if (v1463 < 0) {
    operator delete(v1462[0]);
  }
  if (v1469 < 0) {
    operator delete(v1468[0]);
  }
  if (v1473 < 0) {
    operator delete(v1472);
  }
  if (v1471 < 0) {
    operator delete(v1470[0]);
  }
  if (v1477 < 0) {
    operator delete(v1476[0]);
  }
  if (v1481 < 0) {
    operator delete(v1480);
  }
  if (v1479 < 0) {
    operator delete(v1478[0]);
  }
  if (v1485 < 0) {
    operator delete(v1484[0]);
  }
  if (v1489 < 0) {
    operator delete(v1488);
  }
  if (v1487 < 0) {
    operator delete(v1486[0]);
  }
  if (v1493 < 0) {
    operator delete(v1492[0]);
  }
  if (v1497 < 0) {
    operator delete(v1496);
  }
  if (v1495 < 0) {
    operator delete(v1494[0]);
  }
  if (v1501 < 0) {
    operator delete(v1500[0]);
  }
  if (v1505 < 0) {
    operator delete(v1504);
  }
  if (v1503 < 0) {
    operator delete(v1502[0]);
  }
  if (v1509 < 0) {
    operator delete(v1508[0]);
  }
  if (v1513 < 0) {
    operator delete(v1512);
  }
  if (v1511 < 0) {
    operator delete(v1510[0]);
  }
  if (v1517 < 0) {
    operator delete(v1516[0]);
  }
  if (v1521 < 0) {
    operator delete(v1520);
  }
  if (v1519 < 0) {
    operator delete(v1518[0]);
  }
  if (v1525 < 0) {
    operator delete(v1524[0]);
  }
  if (v1529 < 0) {
    operator delete(v1528);
  }
  if (v1527 < 0) {
    operator delete(v1526[0]);
  }
  if (v1533 < 0) {
    operator delete(v1532[0]);
  }
  if (v1537 < 0) {
    operator delete(v1536);
  }
  if (v1535 < 0) {
    operator delete(v1534[0]);
  }
  if (v1541 < 0) {
    operator delete(v1540[0]);
  }
  if (v1545 < 0) {
    operator delete(v1544);
  }
  if (v1543 < 0) {
    operator delete(v1542[0]);
  }
  if (v1549 < 0) {
    operator delete(v1548[0]);
  }
  if (v1553 < 0) {
    operator delete(v1552);
  }
  if (v1551 < 0) {
    operator delete(v1550[0]);
  }
  if (v1557 < 0) {
    operator delete(v1556[0]);
  }
  if (v1561 < 0) {
    operator delete(v1560);
  }
  if (v1559 < 0) {
    operator delete(v1558[0]);
  }
  if (v1565 < 0) {
    operator delete(v1564[0]);
  }
  if (v1569 < 0) {
    operator delete(v1568);
  }
  if (v1567 < 0) {
    operator delete(v1566[0]);
  }
  if (v1573 < 0) {
    operator delete(v1572[0]);
  }
  if (v1577 < 0) {
    operator delete(v1576);
  }
  if (v1575 < 0) {
    operator delete(v1574[0]);
  }
  if (v1581 < 0) {
    operator delete(v1580[0]);
  }
  if (v1585 < 0) {
    operator delete(v1584);
  }
  if (v1583 < 0) {
    operator delete(v1582[0]);
  }
  if (v1589 < 0) {
    operator delete(v1588[0]);
  }
  if (v1593 < 0) {
    operator delete(v1592);
  }
  if (v1591 < 0) {
    operator delete(v1590[0]);
  }
  if (v1597 < 0) {
    operator delete(v1596[0]);
  }
  if (v1601 < 0) {
    operator delete(v1600);
  }
  if (v1599 < 0) {
    operator delete(v1598[0]);
  }
  if (v1605 < 0) {
    operator delete(v1604[0]);
  }
  if (v1609 < 0) {
    operator delete(v1608);
  }
  if (v1607 < 0) {
    operator delete(v1606[0]);
  }
  if (v1613 < 0) {
    operator delete(v1612[0]);
  }
  if (v1617 < 0) {
    operator delete(v1616);
  }
  if (v1615 < 0) {
    operator delete(v1614[0]);
  }
  if (v1621 < 0) {
    operator delete(v1620[0]);
  }
  if (v1625 < 0) {
    operator delete(v1624);
  }
  if (v1623 < 0) {
    operator delete(v1622[0]);
  }
  if (v1629 < 0) {
    operator delete(v1628[0]);
  }
  if (v1633 < 0) {
    operator delete(v1632);
  }
  if (v1631 < 0) {
    operator delete(v1630[0]);
  }
  if (v1637 < 0) {
    operator delete(v1636[0]);
  }
  if (v1641 < 0) {
    operator delete(v1640);
  }
  if (v1639 < 0) {
    operator delete(v1638[0]);
  }
  if (v1645 < 0) {
    operator delete(v1644[0]);
  }
  if (v1649 < 0) {
    operator delete(v1648);
  }
  if (v1647 < 0) {
    operator delete(v1646[0]);
  }
  if (v1653 < 0) {
    operator delete(v1652[0]);
  }
  if (v1657 < 0) {
    operator delete(v1656);
  }
  if (v1655 < 0) {
    operator delete(v1654[0]);
  }
  if (v1661 < 0) {
    operator delete(v1660[0]);
  }
  if (v1665 < 0) {
    operator delete(v1664);
  }
  if (v1663 < 0) {
    operator delete(v1662[0]);
  }
  if (v1669 < 0) {
    operator delete(v1668[0]);
  }
  if (v1673 < 0) {
    operator delete(v1672);
  }
  if (v1671 < 0) {
    operator delete(v1670[0]);
  }
  if (v1677 < 0) {
    operator delete(v1676[0]);
  }
  if (v1681 < 0) {
    operator delete(v1680);
  }
  if (v1679 < 0) {
    operator delete(v1678[0]);
  }
  if (v1685 < 0) {
    operator delete(v1684[0]);
  }
  if (v1689 < 0) {
    operator delete(v1688);
  }
  if (v1687 < 0) {
    operator delete(v1686[0]);
  }
  if (v1693 < 0) {
    operator delete(v1692[0]);
  }
  if (v1697 < 0) {
    operator delete(v1696);
  }
  if (v1695 < 0) {
    operator delete(v1694[0]);
  }
  if (v1701 < 0) {
    operator delete(v1700[0]);
  }
  if (v1705 < 0) {
    operator delete(v1704);
  }
  if (v1703 < 0) {
    operator delete(v1702[0]);
  }
  if (v1709 < 0) {
    operator delete(v1708[0]);
  }
  if (v1713 < 0) {
    operator delete(v1712);
  }
  if (v1711 < 0) {
    operator delete(v1710[0]);
  }
  if (v1717 < 0) {
    operator delete(v1716[0]);
  }
  if (v1721 < 0) {
    operator delete(v1720);
  }
  if (v1719 < 0) {
    operator delete(v1718[0]);
  }
  if (v1725 < 0) {
    operator delete(v1724[0]);
  }
  if (v1729 < 0) {
    operator delete(v1728);
  }
  if (v1727 < 0) {
    operator delete(v1726[0]);
  }
  if (v1733 < 0) {
    operator delete(v1732[0]);
  }
  if (v1737 < 0) {
    operator delete(v1736);
  }
  if (v1735 < 0) {
    operator delete(v1734[0]);
  }
  if (v1741 < 0) {
    operator delete(v1740[0]);
  }
  if (v1745 < 0) {
    operator delete(v1744);
  }
  if (v1743 < 0) {
    operator delete(v1742[0]);
  }
  if (v1749 < 0) {
    operator delete(v1748[0]);
  }
  if (v1753 < 0) {
    operator delete(v1752);
  }
  if (v1751 < 0) {
    operator delete(v1750[0]);
  }
  if (v1757 < 0) {
    operator delete(v1756[0]);
  }
  if (v1761 < 0) {
    operator delete(v1760);
  }
  if (v1759 < 0) {
    operator delete(v1758[0]);
  }
  if (v1765 < 0) {
    operator delete(v1764[0]);
  }
  if (v1769 < 0) {
    operator delete(v1768);
  }
  if (v1767 < 0) {
    operator delete(v1766[0]);
  }
  if (v1773 < 0) {
    operator delete(v1772[0]);
  }
  if (v1777 < 0) {
    operator delete(v1776);
  }
  if (v1775 < 0) {
    operator delete(v1774[0]);
  }
  if (v1781 < 0) {
    operator delete(v1780[0]);
  }
  if (v1785 < 0) {
    operator delete(v1784);
  }
  if (v1783 < 0) {
    operator delete(v1782[0]);
  }
  if (v1789 < 0) {
    operator delete(v1788[0]);
  }
  if (v1793 < 0) {
    operator delete(v1792);
  }
  if (v1791 < 0) {
    operator delete(v1790[0]);
  }
  if (v1797 < 0) {
    operator delete(v1796[0]);
  }
  if (v1801 < 0) {
    operator delete(v1800);
  }
  if (v1799 < 0) {
    operator delete(v1798[0]);
  }
  if (v1805 < 0) {
    operator delete(v1804[0]);
  }
  if (v1809 < 0) {
    operator delete(v1808);
  }
  if (v1807 < 0) {
    operator delete(v1806[0]);
  }
  if (v1813 < 0) {
    operator delete(v1812[0]);
  }
  if (v1817 < 0) {
    operator delete(v1816);
  }
  if (v1815 < 0) {
    operator delete(v1814[0]);
  }
  if (v1821 < 0) {
    operator delete(v1820[0]);
  }
  if (v1825 < 0) {
    operator delete(v1824);
  }
  if (v1823 < 0) {
    operator delete(v1822[0]);
  }
  if (v1829 < 0) {
    operator delete(v1828[0]);
  }
  if (v1833 < 0) {
    operator delete(v1832);
  }
  if (v1831 < 0) {
    operator delete(v1830[0]);
  }
  if (v1837 < 0) {
    operator delete(v1836[0]);
  }
  if (v1841 < 0) {
    operator delete(v1840);
  }
  if (v1839 < 0) {
    operator delete(v1838[0]);
  }
  if (v1845 < 0) {
    operator delete(v1844[0]);
  }
  if (v1849 < 0) {
    operator delete(v1848);
  }
  if (v1847 < 0) {
    operator delete(v1846[0]);
  }
  if (v1853 < 0) {
    operator delete(v1852[0]);
  }
  if (v1857 < 0) {
    operator delete(v1856);
  }
  if (v1855 < 0) {
    operator delete(v1854[0]);
  }
  if (v1861 < 0) {
    operator delete(v1860[0]);
  }
  if (v1865 < 0) {
    operator delete(v1864);
  }
  if (v1863 < 0) {
    operator delete(v1862[0]);
  }
  if (v1869 < 0) {
    operator delete(v1868[0]);
  }
  if (v1873 < 0) {
    operator delete(v1872);
  }
  if (v1871 < 0) {
    operator delete(v1870[0]);
  }
  if (v1877 < 0) {
    operator delete(v1876[0]);
  }
  if (v1881 < 0) {
    operator delete(v1880);
  }
  if (v1879 < 0) {
    operator delete(v1878[0]);
  }
  if (v1885 < 0) {
    operator delete(v1884[0]);
  }
  if (v1889 < 0) {
    operator delete(v1888);
  }
  if (v1887 < 0) {
    operator delete(v1886[0]);
  }
  if (v1893 < 0) {
    operator delete(v1892[0]);
  }
  if (v1897 < 0) {
    operator delete(v1896);
  }
  if (v1895 < 0) {
    operator delete(v1894[0]);
  }
  if (v1901 < 0) {
    operator delete(v1900[0]);
  }
  if (v1905 < 0) {
    operator delete(v1904);
  }
  if (v1903 < 0) {
    operator delete(v1902[0]);
  }
  if (v1909 < 0) {
    operator delete(v1908[0]);
  }
  if (v1913 < 0) {
    operator delete(v1912);
  }
  if (v1911 < 0) {
    operator delete(v1910[0]);
  }
  if (v1917 < 0) {
    operator delete(v1916[0]);
  }
  if (v1921 < 0) {
    operator delete(v1920);
  }
  if (v1919 < 0) {
    operator delete(v1918[0]);
  }
  if (v1925 < 0) {
    operator delete(v1924[0]);
  }
  if (v1929 < 0) {
    operator delete(v1928);
  }
  if (v1927 < 0) {
    operator delete(v1926[0]);
  }
  if (v1933 < 0) {
    operator delete(v1932[0]);
  }
  if (v1937 < 0) {
    operator delete(v1936);
  }
  if (v1935 < 0) {
    operator delete(v1934[0]);
  }
  if (v1941 < 0) {
    operator delete(v1940[0]);
  }
  if (v1945 < 0) {
    operator delete(v1944);
  }
  if (v1943 < 0) {
    operator delete(v1942[0]);
  }
  if (v1949 < 0) {
    operator delete(v1948[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1003AC040, qword_1008AC5D8, (void *)&_mh_execute_header);
}

void sub_1003B65E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62,uint64_t a63)
{
  uint64_t v82 = -19440;
  uint64_t v83 = v76;
  do
  {
    uint64_t v83 = sub_1003ABFEC(v83) - 80;
    v82 += 80;
  }
  while (v82);
  sub_1001F8580((uint64_t)&a10);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1001F8580((uint64_t)&a23);
  if (a35 < 0) {
    operator delete(a30);
  }
  sub_1001F8580((uint64_t)&a36);
  if (a48 < 0) {
    operator delete(a43);
  }
  sub_1001F8580((uint64_t)&a49);
  if (a61 < 0) {
    operator delete(a56);
  }
  sub_1001F8580((uint64_t)&a62);
  if (a72 < 0) {
    operator delete(a69);
  }
  sub_1001F8580((uint64_t)&a73);
  if (a75 < 0) {
    operator delete(a74);
  }
  sub_1001F8580((uint64_t)&a76);
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  sub_1001F8580((uint64_t)&STACK[0x238]);
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  sub_1001F8580((uint64_t)&STACK[0x288]);
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  sub_1001F8580((uint64_t)&STACK[0x328]);
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  sub_1001F8580((uint64_t)&STACK[0x378]);
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3C8]);
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }
  sub_1001F8580((uint64_t)&STACK[0x418]);
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  sub_1001F8580((uint64_t)&STACK[0x468]);
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4B8]);
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x508]);
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete((void *)STACK[0x540]);
  }
  sub_1001F8580((uint64_t)&STACK[0x558]);
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  sub_1001F8580((uint64_t)&STACK[0x5A8]);
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x5F8]);
  if (SLOBYTE(STACK[0x647]) < 0) {
    operator delete((void *)STACK[0x630]);
  }
  sub_1001F8580((uint64_t)&STACK[0x648]);
  if (SLOBYTE(STACK[0x697]) < 0) {
    operator delete((void *)STACK[0x680]);
  }
  sub_1001F8580((uint64_t)&STACK[0x698]);
  if (SLOBYTE(STACK[0x6E7]) < 0) {
    operator delete((void *)STACK[0x6D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x6E8]);
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  sub_1001F8580((uint64_t)&STACK[0x738]);
  if (SLOBYTE(STACK[0x787]) < 0) {
    operator delete((void *)STACK[0x770]);
  }
  sub_1001F8580((uint64_t)&STACK[0x788]);
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x7D8]);
  if (SLOBYTE(STACK[0x827]) < 0) {
    operator delete((void *)STACK[0x810]);
  }
  sub_1001F8580((uint64_t)&STACK[0x828]);
  if (SLOBYTE(STACK[0x877]) < 0) {
    operator delete((void *)STACK[0x860]);
  }
  sub_1001F8580((uint64_t)&STACK[0x878]);
  if (SLOBYTE(STACK[0x8C7]) < 0) {
    operator delete((void *)STACK[0x8B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x8C8]);
  if (SLOBYTE(STACK[0x917]) < 0) {
    operator delete((void *)STACK[0x900]);
  }
  sub_1001F8580((uint64_t)&STACK[0x918]);
  if (SLOBYTE(STACK[0x967]) < 0) {
    operator delete((void *)STACK[0x950]);
  }
  sub_1001F8580((uint64_t)&STACK[0x968]);
  if (SLOBYTE(STACK[0x9B7]) < 0) {
    operator delete((void *)STACK[0x9A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x9B8]);
  if (SLOBYTE(STACK[0xA07]) < 0) {
    operator delete((void *)STACK[0x9F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xA08]);
  if (SLOBYTE(STACK[0xA57]) < 0) {
    operator delete((void *)STACK[0xA40]);
  }
  sub_1001F8580((uint64_t)&STACK[0xA58]);
  if (SLOBYTE(STACK[0xAA7]) < 0) {
    operator delete((void *)STACK[0xA90]);
  }
  sub_1001F8580((uint64_t)&STACK[0xAA8]);
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xAF8]);
  if (SLOBYTE(STACK[0xB47]) < 0) {
    operator delete((void *)STACK[0xB30]);
  }
  sub_1001F8580((uint64_t)&STACK[0xB48]);
  if (SLOBYTE(STACK[0xB97]) < 0) {
    operator delete((void *)STACK[0xB80]);
  }
  sub_1001F8580((uint64_t)&STACK[0xB98]);
  if (SLOBYTE(STACK[0xBE7]) < 0) {
    operator delete((void *)STACK[0xBD0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xBE8]);
  if (SLOBYTE(STACK[0xC37]) < 0) {
    operator delete((void *)STACK[0xC20]);
  }
  sub_1001F8580((uint64_t)&STACK[0xC38]);
  if (SLOBYTE(STACK[0xC87]) < 0) {
    operator delete((void *)STACK[0xC70]);
  }
  sub_1001F8580((uint64_t)&STACK[0xC88]);
  if (SLOBYTE(STACK[0xCD7]) < 0) {
    operator delete((void *)STACK[0xCC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xCD8]);
  if (SLOBYTE(STACK[0xD27]) < 0) {
    operator delete((void *)STACK[0xD10]);
  }
  sub_1001F8580((uint64_t)&STACK[0xD28]);
  if (SLOBYTE(STACK[0xD77]) < 0) {
    operator delete((void *)STACK[0xD60]);
  }
  sub_1001F8580((uint64_t)&STACK[0xD78]);
  if (SLOBYTE(STACK[0xDC7]) < 0) {
    operator delete((void *)STACK[0xDB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xDC8]);
  if (SLOBYTE(STACK[0xE17]) < 0) {
    operator delete((void *)STACK[0xE00]);
  }
  sub_1001F8580((uint64_t)&STACK[0xE18]);
  if (SLOBYTE(STACK[0xE67]) < 0) {
    operator delete((void *)STACK[0xE50]);
  }
  sub_1001F8580((uint64_t)&STACK[0xE68]);
  if (SLOBYTE(STACK[0xEB7]) < 0) {
    operator delete((void *)STACK[0xEA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xEB8]);
  if (SLOBYTE(STACK[0xF07]) < 0) {
    operator delete((void *)STACK[0xEF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xF08]);
  if (SLOBYTE(STACK[0xF57]) < 0) {
    operator delete((void *)STACK[0xF40]);
  }
  sub_1001F8580((uint64_t)&STACK[0xF58]);
  if (v80[79] < 0) {
    operator delete((void *)STACK[0xF90]);
  }
  sub_1001F8580((uint64_t)&STACK[0xFA8]);
  if (v80[159] < 0) {
    operator delete((void *)STACK[0xFE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xFF8]);
  if (v80[239] < 0) {
    operator delete((void *)STACK[0x1030]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1048]);
  if (v80[319] < 0) {
    operator delete((void *)STACK[0x1080]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1098]);
  if (v80[399] < 0) {
    operator delete((void *)STACK[0x10D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x10E8]);
  if (v80[479] < 0) {
    operator delete((void *)STACK[0x1120]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1138]);
  if (v80[559] < 0) {
    operator delete((void *)STACK[0x1170]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1188]);
  if (v80[639] < 0) {
    operator delete((void *)STACK[0x11C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x11D8]);
  if (v80[719] < 0) {
    operator delete((void *)STACK[0x1210]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1228]);
  if (v80[799] < 0) {
    operator delete((void *)STACK[0x1260]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1278]);
  if (v80[879] < 0) {
    operator delete((void *)STACK[0x12B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x12C8]);
  if (v80[959] < 0) {
    operator delete((void *)STACK[0x1300]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1318]);
  if (v80[1039] < 0) {
    operator delete((void *)STACK[0x1350]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1368]);
  if (v80[1119] < 0) {
    operator delete((void *)STACK[0x13A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x13B8]);
  if (v80[1199] < 0) {
    operator delete((void *)STACK[0x13F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1408]);
  if (v80[1279] < 0) {
    operator delete((void *)STACK[0x1440]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1458]);
  if (v80[1359] < 0) {
    operator delete((void *)STACK[0x1490]);
  }
  sub_1001F8580((uint64_t)&STACK[0x14A8]);
  if (v80[1439] < 0) {
    operator delete((void *)STACK[0x14E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x14F8]);
  if (v80[1519] < 0) {
    operator delete((void *)STACK[0x1530]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1548]);
  if (v80[1599] < 0) {
    operator delete((void *)STACK[0x1580]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1598]);
  if (v80[1679] < 0) {
    operator delete((void *)STACK[0x15D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x15E8]);
  if (v80[1759] < 0) {
    operator delete((void *)STACK[0x1620]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1638]);
  if (v80[1839] < 0) {
    operator delete((void *)STACK[0x1670]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1688]);
  if (v80[1919] < 0) {
    operator delete((void *)STACK[0x16C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x16D8]);
  if (v80[1999] < 0) {
    operator delete((void *)STACK[0x1710]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1728]);
  if (v80[2079] < 0) {
    operator delete((void *)STACK[0x1760]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1778]);
  if (v80[2159] < 0) {
    operator delete((void *)STACK[0x17B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x17C8]);
  if (v80[2239] < 0) {
    operator delete((void *)STACK[0x1800]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1818]);
  if (v80[2319] < 0) {
    operator delete((void *)STACK[0x1850]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1868]);
  if (v80[2399] < 0) {
    operator delete((void *)STACK[0x18A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x18B8]);
  if (v80[2479] < 0) {
    operator delete((void *)STACK[0x18F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1908]);
  if (v80[2559] < 0) {
    operator delete((void *)STACK[0x1940]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1958]);
  if (v80[2639] < 0) {
    operator delete((void *)STACK[0x1990]);
  }
  sub_1001F8580((uint64_t)&STACK[0x19A8]);
  if (v80[2719] < 0) {
    operator delete((void *)STACK[0x19E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x19F8]);
  if (v80[2799] < 0) {
    operator delete((void *)STACK[0x1A30]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1A48]);
  if (v80[2879] < 0) {
    operator delete((void *)STACK[0x1A80]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1A98]);
  if (v80[2959] < 0) {
    operator delete((void *)STACK[0x1AD0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1AE8]);
  if (v80[3039] < 0) {
    operator delete((void *)STACK[0x1B20]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1B38]);
  if (v80[3119] < 0) {
    operator delete((void *)STACK[0x1B70]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1B88]);
  if (v80[3199] < 0) {
    operator delete((void *)STACK[0x1BC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1BD8]);
  if (v80[3279] < 0) {
    operator delete((void *)STACK[0x1C10]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1C28]);
  if (v80[3359] < 0) {
    operator delete((void *)STACK[0x1C60]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1C78]);
  if (v80[3439] < 0) {
    operator delete((void *)STACK[0x1CB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1CC8]);
  if (v80[3519] < 0) {
    operator delete((void *)STACK[0x1D00]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1D18]);
  if (v80[3599] < 0) {
    operator delete((void *)STACK[0x1D50]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1D68]);
  if (v80[3679] < 0) {
    operator delete((void *)STACK[0x1DA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1DB8]);
  if (v80[3759] < 0) {
    operator delete((void *)STACK[0x1DF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1E08]);
  if (v80[3839] < 0) {
    operator delete((void *)STACK[0x1E40]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1E58]);
  if (v80[3919] < 0) {
    operator delete((void *)STACK[0x1E90]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1EA8]);
  if (v80[3999] < 0) {
    operator delete((void *)STACK[0x1EE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1EF8]);
  if (v80[4079] < 0) {
    operator delete((void *)STACK[0x1F30]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1F48]);
  if (v79[79] < 0) {
    operator delete((void *)STACK[0x1F80]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1F98]);
  if (v79[159] < 0) {
    operator delete((void *)STACK[0x1FD0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1FE8]);
  if (v79[239] < 0) {
    operator delete((void *)STACK[0x2020]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2038]);
  if (v79[319] < 0) {
    operator delete((void *)STACK[0x2070]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2088]);
  if (v79[399] < 0) {
    operator delete((void *)STACK[0x20C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x20D8]);
  if (v79[479] < 0) {
    operator delete((void *)STACK[0x2110]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2128]);
  if (v79[559] < 0) {
    operator delete((void *)STACK[0x2160]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2178]);
  if (v79[639] < 0) {
    operator delete((void *)STACK[0x21B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x21C8]);
  if (v79[719] < 0) {
    operator delete((void *)STACK[0x2200]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2218]);
  if (v79[799] < 0) {
    operator delete((void *)STACK[0x2250]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2268]);
  if (v79[879] < 0) {
    operator delete((void *)STACK[0x22A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x22B8]);
  if (v79[959] < 0) {
    operator delete((void *)STACK[0x22F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2308]);
  if (v79[1039] < 0) {
    operator delete((void *)STACK[0x2340]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2358]);
  if (v79[1119] < 0) {
    operator delete((void *)STACK[0x2390]);
  }
  sub_1001F8580((uint64_t)&STACK[0x23A8]);
  if (v79[1199] < 0) {
    operator delete((void *)STACK[0x23E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x23F8]);
  if (v79[1279] < 0) {
    operator delete((void *)STACK[0x2430]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2448]);
  if (v79[1359] < 0) {
    operator delete((void *)STACK[0x2480]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2498]);
  if (v79[1439] < 0) {
    operator delete((void *)STACK[0x24D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x24E8]);
  if (v79[1519] < 0) {
    operator delete((void *)STACK[0x2520]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2538]);
  if (v79[1599] < 0) {
    operator delete((void *)STACK[0x2570]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2588]);
  if (v79[1679] < 0) {
    operator delete((void *)STACK[0x25C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x25D8]);
  if (v79[1759] < 0) {
    operator delete((void *)STACK[0x2610]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2628]);
  if (v79[1839] < 0) {
    operator delete((void *)STACK[0x2660]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2678]);
  if (v79[1919] < 0) {
    operator delete((void *)STACK[0x26B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x26C8]);
  if (v79[1999] < 0) {
    operator delete((void *)STACK[0x2700]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2718]);
  if (v79[2079] < 0) {
    operator delete((void *)STACK[0x2750]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2768]);
  if (v79[2159] < 0) {
    operator delete((void *)STACK[0x27A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x27B8]);
  if (v79[2239] < 0) {
    operator delete((void *)STACK[0x27F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2808]);
  if (v79[2319] < 0) {
    operator delete((void *)STACK[0x2840]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2858]);
  if (v79[2399] < 0) {
    operator delete((void *)STACK[0x2890]);
  }
  sub_1001F8580((uint64_t)&STACK[0x28A8]);
  if (v79[2479] < 0) {
    operator delete((void *)STACK[0x28E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x28F8]);
  if (v79[2559] < 0) {
    operator delete((void *)STACK[0x2930]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2948]);
  if (v79[2639] < 0) {
    operator delete((void *)STACK[0x2980]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2998]);
  if (v79[2719] < 0) {
    operator delete((void *)STACK[0x29D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x29E8]);
  if (v79[2799] < 0) {
    operator delete((void *)STACK[0x2A20]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2A38]);
  if (v79[2879] < 0) {
    operator delete((void *)STACK[0x2A70]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2A88]);
  if (v79[2959] < 0) {
    operator delete((void *)STACK[0x2AC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2AD8]);
  if (v79[3039] < 0) {
    operator delete((void *)STACK[0x2B10]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2B28]);
  if (v79[3119] < 0) {
    operator delete((void *)STACK[0x2B60]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2B78]);
  if (v79[3199] < 0) {
    operator delete((void *)STACK[0x2BB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2BC8]);
  if (v79[3279] < 0) {
    operator delete((void *)STACK[0x2C00]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2C18]);
  if (v79[3359] < 0) {
    operator delete((void *)STACK[0x2C50]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2C68]);
  if (v79[3439] < 0) {
    operator delete((void *)STACK[0x2CA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2CB8]);
  if (v79[3519] < 0) {
    operator delete((void *)STACK[0x2CF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2D08]);
  if (v79[3599] < 0) {
    operator delete((void *)STACK[0x2D40]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2D58]);
  if (v79[3679] < 0) {
    operator delete((void *)STACK[0x2D90]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2DA8]);
  if (v79[3759] < 0) {
    operator delete((void *)STACK[0x2DE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2DF8]);
  if (v79[3839] < 0) {
    operator delete((void *)STACK[0x2E30]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2E48]);
  if (v79[3919] < 0) {
    operator delete((void *)STACK[0x2E80]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2E98]);
  if (v79[3999] < 0) {
    operator delete((void *)STACK[0x2ED0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2EE8]);
  if (v79[4079] < 0) {
    operator delete((void *)STACK[0x2F20]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2F38]);
  if (v78[79] < 0) {
    operator delete((void *)STACK[0x2F70]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2F88]);
  if (v78[159] < 0) {
    operator delete((void *)STACK[0x2FC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2FD8]);
  if (v78[239] < 0) {
    operator delete((void *)STACK[0x3010]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3028]);
  if (v78[319] < 0) {
    operator delete((void *)STACK[0x3060]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3078]);
  if (v78[399] < 0) {
    operator delete((void *)STACK[0x30B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x30C8]);
  if (v78[479] < 0) {
    operator delete((void *)STACK[0x3100]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3118]);
  if (v78[559] < 0) {
    operator delete((void *)STACK[0x3150]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3168]);
  if (v78[639] < 0) {
    operator delete((void *)STACK[0x31A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x31B8]);
  if (v78[719] < 0) {
    operator delete((void *)STACK[0x31F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3208]);
  if (v78[799] < 0) {
    operator delete((void *)STACK[0x3240]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3258]);
  if (v78[879] < 0) {
    operator delete((void *)STACK[0x3290]);
  }
  sub_1001F8580((uint64_t)&STACK[0x32A8]);
  if (v78[959] < 0) {
    operator delete((void *)STACK[0x32E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x32F8]);
  if (v78[1039] < 0) {
    operator delete((void *)STACK[0x3330]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3348]);
  if (v78[1119] < 0) {
    operator delete((void *)STACK[0x3380]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3398]);
  if (v78[1199] < 0) {
    operator delete((void *)STACK[0x33D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x33E8]);
  if (v78[1279] < 0) {
    operator delete((void *)STACK[0x3420]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3438]);
  if (v78[1359] < 0) {
    operator delete((void *)STACK[0x3470]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3488]);
  if (v78[1439] < 0) {
    operator delete((void *)STACK[0x34C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x34D8]);
  if (v78[1519] < 0) {
    operator delete((void *)STACK[0x3510]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3528]);
  if (v78[1599] < 0) {
    operator delete((void *)STACK[0x3560]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3578]);
  if (v78[1679] < 0) {
    operator delete((void *)STACK[0x35B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x35C8]);
  if (v78[1759] < 0) {
    operator delete((void *)STACK[0x3600]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3618]);
  if (v78[1839] < 0) {
    operator delete((void *)STACK[0x3650]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3668]);
  if (v78[1919] < 0) {
    operator delete((void *)STACK[0x36A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x36B8]);
  if (v78[1999] < 0) {
    operator delete((void *)STACK[0x36F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3708]);
  if (v78[2079] < 0) {
    operator delete((void *)STACK[0x3740]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3758]);
  if (v78[2159] < 0) {
    operator delete((void *)STACK[0x3790]);
  }
  sub_1001F8580((uint64_t)&STACK[0x37A8]);
  if (v78[2239] < 0) {
    operator delete((void *)STACK[0x37E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x37F8]);
  if (v78[2319] < 0) {
    operator delete((void *)STACK[0x3830]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3848]);
  if (v78[2399] < 0) {
    operator delete((void *)STACK[0x3880]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3898]);
  if (v78[2479] < 0) {
    operator delete((void *)STACK[0x38D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x38E8]);
  if (v78[2559] < 0) {
    operator delete((void *)STACK[0x3920]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3938]);
  if (v78[2639] < 0) {
    operator delete((void *)STACK[0x3970]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3988]);
  if (v78[2719] < 0) {
    operator delete((void *)STACK[0x39C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x39D8]);
  if (v78[2799] < 0) {
    operator delete((void *)STACK[0x3A10]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3A28]);
  if (v78[2879] < 0) {
    operator delete((void *)STACK[0x3A60]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3A78]);
  if (v78[2959] < 0) {
    operator delete((void *)STACK[0x3AB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3AC8]);
  if (v78[3039] < 0) {
    operator delete((void *)STACK[0x3B00]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3B18]);
  if (v78[3119] < 0) {
    operator delete((void *)STACK[0x3B50]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3B68]);
  if (v78[3199] < 0) {
    operator delete((void *)STACK[0x3BA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3BB8]);
  if (v78[3279] < 0) {
    operator delete((void *)STACK[0x3BF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3C08]);
  if (v78[3359] < 0) {
    operator delete((void *)STACK[0x3C40]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3C58]);
  if (v78[3439] < 0) {
    operator delete((void *)STACK[0x3C90]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3CA8]);
  if (v78[3519] < 0) {
    operator delete((void *)STACK[0x3CE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3CF8]);
  if (v78[3599] < 0) {
    operator delete((void *)STACK[0x3D30]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3D48]);
  if (v78[3679] < 0) {
    operator delete((void *)STACK[0x3D80]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3D98]);
  if (v78[3759] < 0) {
    operator delete((void *)STACK[0x3DD0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3DE8]);
  if (v78[3839] < 0) {
    operator delete((void *)STACK[0x3E20]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3E38]);
  if (v78[3919] < 0) {
    operator delete((void *)STACK[0x3E70]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3E88]);
  if (v78[3999] < 0) {
    operator delete((void *)STACK[0x3EC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3ED8]);
  if (v78[4079] < 0) {
    operator delete((void *)STACK[0x3F10]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3F28]);
  if (v77[79] < 0) {
    operator delete((void *)STACK[0x3F60]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3F78]);
  if (v77[159] < 0) {
    operator delete((void *)STACK[0x3FB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3FC8]);
  if (v77[239] < 0) {
    operator delete((void *)STACK[0x4000]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4018]);
  if (v77[319] < 0) {
    operator delete((void *)STACK[0x4050]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4068]);
  if (v77[399] < 0) {
    operator delete((void *)STACK[0x40A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x40B8]);
  if (v77[479] < 0) {
    operator delete((void *)STACK[0x40F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4108]);
  if (v77[559] < 0) {
    operator delete((void *)STACK[0x4140]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4158]);
  if (v77[639] < 0) {
    operator delete((void *)STACK[0x4190]);
  }
  sub_1001F8580((uint64_t)&STACK[0x41A8]);
  if (v77[719] < 0) {
    operator delete((void *)STACK[0x41E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x41F8]);
  if (v77[799] < 0) {
    operator delete((void *)STACK[0x4230]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4248]);
  if (v77[879] < 0) {
    operator delete((void *)STACK[0x4280]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4298]);
  if (v77[959] < 0) {
    operator delete((void *)STACK[0x42D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x42E8]);
  if (v77[1039] < 0) {
    operator delete((void *)STACK[0x4320]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4338]);
  if (v77[1119] < 0) {
    operator delete((void *)STACK[0x4370]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4388]);
  if (v77[1199] < 0) {
    operator delete((void *)STACK[0x43C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x43D8]);
  if (v77[1279] < 0) {
    operator delete((void *)STACK[0x4410]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4428]);
  if (v77[1359] < 0) {
    operator delete((void *)STACK[0x4460]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4478]);
  if (v77[1439] < 0) {
    operator delete((void *)STACK[0x44B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x44C8]);
  if (v77[1519] < 0) {
    operator delete((void *)STACK[0x4500]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4518]);
  if (v77[1599] < 0) {
    operator delete((void *)STACK[0x4550]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4568]);
  if (v77[1679] < 0) {
    operator delete((void *)STACK[0x45A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x45B8]);
  if (v77[1759] < 0) {
    operator delete((void *)STACK[0x45F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4608]);
  if (v77[1839] < 0) {
    operator delete((void *)STACK[0x4640]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4658]);
  if (v77[1919] < 0) {
    operator delete((void *)STACK[0x4690]);
  }
  sub_1001F8580((uint64_t)&STACK[0x46A8]);
  if (v77[1999] < 0) {
    operator delete((void *)STACK[0x46E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x46F8]);
  if (v77[2079] < 0) {
    operator delete((void *)STACK[0x4730]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4748]);
  if (v77[2159] < 0) {
    operator delete((void *)STACK[0x4780]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4798]);
  if (v77[2239] < 0) {
    operator delete((void *)STACK[0x47D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x47E8]);
  if (v77[2319] < 0) {
    operator delete((void *)STACK[0x4820]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4838]);
  if (v77[2399] < 0) {
    operator delete((void *)STACK[0x4870]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4888]);
  if (v77[2479] < 0) {
    operator delete((void *)STACK[0x48C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x48D8]);
  if (v77[2559] < 0) {
    operator delete((void *)STACK[0x4910]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4928]);
  if (v77[2639] < 0) {
    operator delete((void *)STACK[0x4960]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4978]);
  if (v77[2719] < 0) {
    operator delete((void *)STACK[0x49B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x49C8]);
  if (v77[2799] < 0) {
    operator delete((void *)STACK[0x4A00]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4A18]);
  if (v77[2879] < 0) {
    operator delete((void *)STACK[0x4A50]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4A68]);
  if (v77[2959] < 0) {
    operator delete((void *)STACK[0x4AA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4AB8]);
  if (v77[3039] < 0) {
    operator delete((void *)STACK[0x4AF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4B08]);
  if (v77[3119] < 0) {
    operator delete((void *)STACK[0x4B40]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4B58]);
  if (v77[3199] < 0) {
    operator delete((void *)STACK[0x4B90]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4BA8]);
  if (v77[3279] < 0) {
    operator delete((void *)STACK[0x4BE0]);
  }
  _Unwind_Resume(a1);
}

void sub_1003B80D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1003B6744);
}

void sub_1003B80F8()
{
}

void sub_1003B8108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1003B675CLL);
}

void sub_1003B812C()
{
}

void sub_1003B813C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1003B6774);
}

void sub_1003B8160()
{
}

void sub_1003B8170()
{
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  JUMPOUT(0x1003B678CLL);
}

void sub_1003B8194()
{
}

void sub_1003B81A4()
{
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  JUMPOUT(0x1003B67A4);
}

void sub_1003B81C8()
{
}

void sub_1003B81D8()
{
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  JUMPOUT(0x1003B67BCLL);
}

void sub_1003B81FC()
{
}

void sub_1003B820C()
{
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  JUMPOUT(0x1003B67D4);
}

void sub_1003B8230()
{
}

void sub_1003B8240()
{
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete((void *)STACK[0x378]);
  }
  JUMPOUT(0x1003B67ECLL);
}

void sub_1003B8264()
{
}

void sub_1003B8274()
{
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  JUMPOUT(0x1003B6804);
}

void sub_1003B8298()
{
}

void sub_1003B82A8()
{
  if (SLOBYTE(STACK[0x42F]) < 0) {
    operator delete((void *)STACK[0x418]);
  }
  JUMPOUT(0x1003B681CLL);
}

void sub_1003B82CC()
{
}

void sub_1003B82DC()
{
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  JUMPOUT(0x1003B6834);
}

void sub_1003B8300()
{
}

void sub_1003B8310()
{
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  JUMPOUT(0x1003B684CLL);
}

void sub_1003B8334()
{
}

void sub_1003B8344()
{
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  JUMPOUT(0x1003B6864);
}

void sub_1003B8368()
{
}

void sub_1003B8378()
{
  if (SLOBYTE(STACK[0x56F]) < 0) {
    operator delete((void *)STACK[0x558]);
  }
  JUMPOUT(0x1003B687CLL);
}

void sub_1003B839C()
{
}

void sub_1003B83AC()
{
  if (SLOBYTE(STACK[0x5BF]) < 0) {
    operator delete((void *)STACK[0x5A8]);
  }
  JUMPOUT(0x1003B6894);
}

void sub_1003B83D0()
{
}

void sub_1003B83E0()
{
  if (SLOBYTE(STACK[0x60F]) < 0) {
    operator delete((void *)STACK[0x5F8]);
  }
  JUMPOUT(0x1003B68ACLL);
}

void sub_1003B8404()
{
}

void sub_1003B8414()
{
  if (SLOBYTE(STACK[0x65F]) < 0) {
    operator delete((void *)STACK[0x648]);
  }
  JUMPOUT(0x1003B68C4);
}

void sub_1003B8438()
{
}

void sub_1003B8448()
{
  if (SLOBYTE(STACK[0x6AF]) < 0) {
    operator delete((void *)STACK[0x698]);
  }
  JUMPOUT(0x1003B68DCLL);
}

void sub_1003B846C()
{
}

void sub_1003B847C()
{
  if (SLOBYTE(STACK[0x6FF]) < 0) {
    operator delete((void *)STACK[0x6E8]);
  }
  JUMPOUT(0x1003B68F4);
}

void sub_1003B84A0()
{
}

void sub_1003B84B0()
{
  if (SLOBYTE(STACK[0x74F]) < 0) {
    operator delete((void *)STACK[0x738]);
  }
  JUMPOUT(0x1003B690CLL);
}

void sub_1003B84D4()
{
}

void sub_1003B84E4()
{
  if (SLOBYTE(STACK[0x79F]) < 0) {
    operator delete((void *)STACK[0x788]);
  }
  JUMPOUT(0x1003B6924);
}

void sub_1003B8508()
{
}

void sub_1003B8518()
{
  if (SLOBYTE(STACK[0x7EF]) < 0) {
    operator delete((void *)STACK[0x7D8]);
  }
  JUMPOUT(0x1003B693CLL);
}

void sub_1003B853C()
{
}

void sub_1003B854C()
{
  if (SLOBYTE(STACK[0x83F]) < 0) {
    operator delete((void *)STACK[0x828]);
  }
  JUMPOUT(0x1003B6954);
}

void sub_1003B8570()
{
}

void sub_1003B8580()
{
  if (SLOBYTE(STACK[0x88F]) < 0) {
    operator delete((void *)STACK[0x878]);
  }
  JUMPOUT(0x1003B696CLL);
}

void sub_1003B85A4()
{
}

void sub_1003B85B4()
{
  if (SLOBYTE(STACK[0x8DF]) < 0) {
    operator delete((void *)STACK[0x8C8]);
  }
  JUMPOUT(0x1003B6984);
}

void sub_1003B85D8()
{
}

void sub_1003B85E8()
{
  if (SLOBYTE(STACK[0x92F]) < 0) {
    operator delete((void *)STACK[0x918]);
  }
  JUMPOUT(0x1003B699CLL);
}

void sub_1003B860C()
{
}

void sub_1003B861C()
{
  if (SLOBYTE(STACK[0x97F]) < 0) {
    operator delete((void *)STACK[0x968]);
  }
  JUMPOUT(0x1003B69B4);
}

void sub_1003B8640()
{
}

void sub_1003B8650()
{
  if (SLOBYTE(STACK[0x9CF]) < 0) {
    operator delete((void *)STACK[0x9B8]);
  }
  JUMPOUT(0x1003B69CCLL);
}

void sub_1003B8674()
{
}

void sub_1003B8684()
{
  if (SLOBYTE(STACK[0xA1F]) < 0) {
    operator delete((void *)STACK[0xA08]);
  }
  JUMPOUT(0x1003B69E4);
}

void sub_1003B86A8()
{
}

void sub_1003B86B8()
{
  if (SLOBYTE(STACK[0xA6F]) < 0) {
    operator delete((void *)STACK[0xA58]);
  }
  JUMPOUT(0x1003B69FCLL);
}

void sub_1003B86DC()
{
}

void sub_1003B86EC()
{
  if (SLOBYTE(STACK[0xABF]) < 0) {
    operator delete((void *)STACK[0xAA8]);
  }
  JUMPOUT(0x1003B6A14);
}

void sub_1003B8710()
{
}

void sub_1003B8720()
{
  if (SLOBYTE(STACK[0xB0F]) < 0) {
    operator delete((void *)STACK[0xAF8]);
  }
  JUMPOUT(0x1003B6A2CLL);
}

void sub_1003B8744()
{
}

void sub_1003B8754()
{
  if (SLOBYTE(STACK[0xB5F]) < 0) {
    operator delete((void *)STACK[0xB48]);
  }
  JUMPOUT(0x1003B6A44);
}

void sub_1003B8778()
{
}

void sub_1003B8788()
{
  if (SLOBYTE(STACK[0xBAF]) < 0) {
    operator delete((void *)STACK[0xB98]);
  }
  JUMPOUT(0x1003B6A5CLL);
}

void sub_1003B87AC()
{
}

void sub_1003B87BC()
{
  if (SLOBYTE(STACK[0xBFF]) < 0) {
    operator delete((void *)STACK[0xBE8]);
  }
  JUMPOUT(0x1003B6A74);
}

void sub_1003B87E0()
{
}

void sub_1003B87F0()
{
  if (SLOBYTE(STACK[0xC4F]) < 0) {
    operator delete((void *)STACK[0xC38]);
  }
  JUMPOUT(0x1003B6A8CLL);
}

void sub_1003B8814()
{
}

void sub_1003B8824()
{
  if (SLOBYTE(STACK[0xC9F]) < 0) {
    operator delete((void *)STACK[0xC88]);
  }
  JUMPOUT(0x1003B6AA4);
}

void sub_1003B8848()
{
}

void sub_1003B8858()
{
  if (SLOBYTE(STACK[0xCEF]) < 0) {
    operator delete((void *)STACK[0xCD8]);
  }
  JUMPOUT(0x1003B6ABCLL);
}

void sub_1003B887C()
{
}

void sub_1003B888C()
{
  if (SLOBYTE(STACK[0xD3F]) < 0) {
    operator delete((void *)STACK[0xD28]);
  }
  JUMPOUT(0x1003B6AD4);
}

void sub_1003B88B0()
{
}

void sub_1003B88C0()
{
  if (SLOBYTE(STACK[0xD8F]) < 0) {
    operator delete((void *)STACK[0xD78]);
  }
  JUMPOUT(0x1003B6AECLL);
}

void sub_1003B88E4()
{
}

void sub_1003B88F4()
{
  if (SLOBYTE(STACK[0xDDF]) < 0) {
    operator delete((void *)STACK[0xDC8]);
  }
  JUMPOUT(0x1003B6B04);
}

void sub_1003B8918()
{
}

void sub_1003B8928()
{
  if (SLOBYTE(STACK[0xE2F]) < 0) {
    operator delete((void *)STACK[0xE18]);
  }
  JUMPOUT(0x1003B6B1CLL);
}

void sub_1003B894C()
{
}

void sub_1003B895C()
{
  if (SLOBYTE(STACK[0xE7F]) < 0) {
    operator delete((void *)STACK[0xE68]);
  }
  JUMPOUT(0x1003B6B34);
}

void sub_1003B8980()
{
}

void sub_1003B8990()
{
  if (SLOBYTE(STACK[0xECF]) < 0) {
    operator delete((void *)STACK[0xEB8]);
  }
  JUMPOUT(0x1003B6B4CLL);
}

void sub_1003B89B4()
{
}

void sub_1003B89C4()
{
  if (SLOBYTE(STACK[0xF1F]) < 0) {
    operator delete((void *)STACK[0xF08]);
  }
  JUMPOUT(0x1003B6B64);
}

void sub_1003B89E8()
{
}

void sub_1003B89F8()
{
  if (SLOBYTE(STACK[0xF6F]) < 0) {
    operator delete((void *)STACK[0xF58]);
  }
  JUMPOUT(0x1003B6B7CLL);
}

void sub_1003B8A1C()
{
}

void sub_1003B8A2C()
{
  if (*(char *)(v0 + 103) < 0) {
    operator delete((void *)STACK[0xFA8]);
  }
  JUMPOUT(0x1003B6B94);
}

void sub_1003B8A50()
{
}

void sub_1003B8A60()
{
  if (*(char *)(v0 + 183) < 0) {
    operator delete((void *)STACK[0xFF8]);
  }
  JUMPOUT(0x1003B6BACLL);
}

void sub_1003B8A84()
{
}

void sub_1003B8A94()
{
  if (*(char *)(v0 + 263) < 0) {
    operator delete((void *)STACK[0x1048]);
  }
  JUMPOUT(0x1003B6BC8);
}

void sub_1003B8AB8()
{
}

void sub_1003B8AC8()
{
  if (*(char *)(v0 + 343) < 0) {
    operator delete((void *)STACK[0x1098]);
  }
  JUMPOUT(0x1003B6BE4);
}

void sub_1003B8AEC()
{
}

void sub_1003B8AFC()
{
  if (*(char *)(v0 + 423) < 0) {
    operator delete((void *)STACK[0x10E8]);
  }
  JUMPOUT(0x1003B6C00);
}

void sub_1003B8B20()
{
}

void sub_1003B8B30()
{
  if (*(char *)(v0 + 503) < 0) {
    operator delete((void *)STACK[0x1138]);
  }
  JUMPOUT(0x1003B6C1CLL);
}

void sub_1003B8B54()
{
}

void sub_1003B8B64()
{
  if (*(char *)(v0 + 583) < 0) {
    operator delete((void *)STACK[0x1188]);
  }
  JUMPOUT(0x1003B6C38);
}

void sub_1003B8B88()
{
}

void sub_1003B8B98()
{
  if (*(char *)(v0 + 663) < 0) {
    operator delete((void *)STACK[0x11D8]);
  }
  JUMPOUT(0x1003B6C54);
}

void sub_1003B8BBC()
{
}

void sub_1003B8BCC()
{
  if (*(char *)(v0 + 743) < 0) {
    operator delete((void *)STACK[0x1228]);
  }
  JUMPOUT(0x1003B6C70);
}

void sub_1003B8BF0()
{
}

void sub_1003B8C00()
{
  if (*(char *)(v0 + 823) < 0) {
    operator delete((void *)STACK[0x1278]);
  }
  JUMPOUT(0x1003B6C8CLL);
}

void sub_1003B8C24()
{
}

void sub_1003B8C34()
{
  if (*(char *)(v0 + 903) < 0) {
    operator delete((void *)STACK[0x12C8]);
  }
  JUMPOUT(0x1003B6CA8);
}

void sub_1003B8C58()
{
}

void sub_1003B8C68()
{
  if (*(char *)(v0 + 983) < 0) {
    operator delete((void *)STACK[0x1318]);
  }
  JUMPOUT(0x1003B6CC4);
}

void sub_1003B8C8C()
{
}

void sub_1003B8C9C()
{
  if (*(char *)(v0 + 1063) < 0) {
    operator delete((void *)STACK[0x1368]);
  }
  JUMPOUT(0x1003B6CE0);
}

void sub_1003B8CC0()
{
}

void sub_1003B8CD0()
{
  if (*(char *)(v0 + 1143) < 0) {
    operator delete((void *)STACK[0x13B8]);
  }
  JUMPOUT(0x1003B6CFCLL);
}

void sub_1003B8CF4()
{
}

void sub_1003B8D04()
{
  if (*(char *)(v0 + 1223) < 0) {
    operator delete((void *)STACK[0x1408]);
  }
  JUMPOUT(0x1003B6D18);
}

void sub_1003B8D28()
{
}

void sub_1003B8D38()
{
  if (*(char *)(v0 + 1303) < 0) {
    operator delete((void *)STACK[0x1458]);
  }
  JUMPOUT(0x1003B6D34);
}

void sub_1003B8D5C()
{
}

void sub_1003B8D6C()
{
  if (*(char *)(v0 + 1383) < 0) {
    operator delete((void *)STACK[0x14A8]);
  }
  JUMPOUT(0x1003B6D50);
}

void sub_1003B8D90()
{
}

void sub_1003B8DA0()
{
  if (*(char *)(v0 + 1463) < 0) {
    operator delete((void *)STACK[0x14F8]);
  }
  JUMPOUT(0x1003B6D6CLL);
}

void sub_1003B8DC4()
{
}

void sub_1003B8DD4()
{
  if (*(char *)(v0 + 1543) < 0) {
    operator delete((void *)STACK[0x1548]);
  }
  JUMPOUT(0x1003B6D88);
}

void sub_1003B8DF8()
{
}

void sub_1003B8E08()
{
  if (*(char *)(v0 + 1623) < 0) {
    operator delete((void *)STACK[0x1598]);
  }
  JUMPOUT(0x1003B6DA4);
}

void sub_1003B8E2C()
{
}

void sub_1003B8E3C()
{
  if (*(char *)(v0 + 1703) < 0) {
    operator delete((void *)STACK[0x15E8]);
  }
  JUMPOUT(0x1003B6DC0);
}

void sub_1003B8E60()
{
}

void sub_1003B8E70()
{
  if (*(char *)(v0 + 1783) < 0) {
    operator delete((void *)STACK[0x1638]);
  }
  JUMPOUT(0x1003B6DDCLL);
}

void sub_1003B8E94()
{
}

void sub_1003B8EA4()
{
  if (*(char *)(v0 + 1863) < 0) {
    operator delete((void *)STACK[0x1688]);
  }
  JUMPOUT(0x1003B6DF8);
}

void sub_1003B8EC8()
{
}

void sub_1003B8ED8()
{
  if (*(char *)(v0 + 1943) < 0) {
    operator delete((void *)STACK[0x16D8]);
  }
  JUMPOUT(0x1003B6E14);
}

void sub_1003B8EFC()
{
}

void sub_1003B8F0C()
{
  if (*(char *)(v0 + 2023) < 0) {
    operator delete((void *)STACK[0x1728]);
  }
  JUMPOUT(0x1003B6E30);
}

void sub_1003B8F30()
{
}

void sub_1003B8F40()
{
  if (*(char *)(v0 + 2103) < 0) {
    operator delete((void *)STACK[0x1778]);
  }
  JUMPOUT(0x1003B6E4CLL);
}

void sub_1003B8F64()
{
}

void sub_1003B8F74()
{
  if (*(char *)(v0 + 2183) < 0) {
    operator delete((void *)STACK[0x17C8]);
  }
  JUMPOUT(0x1003B6E68);
}

void sub_1003B8F98()
{
}

void sub_1003B8FA8()
{
  if (*(char *)(v0 + 2263) < 0) {
    operator delete((void *)STACK[0x1818]);
  }
  JUMPOUT(0x1003B6E84);
}

void sub_1003B8FCC()
{
}

void sub_1003B8FDC()
{
  if (*(char *)(v0 + 2343) < 0) {
    operator delete((void *)STACK[0x1868]);
  }
  JUMPOUT(0x1003B6EA0);
}

void sub_1003B9000()
{
}

void sub_1003B9010()
{
  if (*(char *)(v0 + 2423) < 0) {
    operator delete((void *)STACK[0x18B8]);
  }
  JUMPOUT(0x1003B6EBCLL);
}

void sub_1003B9034()
{
}

void sub_1003B9044()
{
  if (*(char *)(v0 + 2503) < 0) {
    operator delete((void *)STACK[0x1908]);
  }
  JUMPOUT(0x1003B6ED8);
}

void sub_1003B9068()
{
}

void sub_1003B9078()
{
  if (*(char *)(v0 + 2583) < 0) {
    operator delete((void *)STACK[0x1958]);
  }
  JUMPOUT(0x1003B6EF4);
}

void sub_1003B909C()
{
}

void sub_1003B90AC()
{
  if (*(char *)(v0 + 2663) < 0) {
    operator delete((void *)STACK[0x19A8]);
  }
  JUMPOUT(0x1003B6F10);
}

void sub_1003B90D0()
{
}

void sub_1003B90E0()
{
  if (*(char *)(v0 + 2743) < 0) {
    operator delete((void *)STACK[0x19F8]);
  }
  JUMPOUT(0x1003B6F2CLL);
}

void sub_1003B9104()
{
}

void sub_1003B9114()
{
  if (*(char *)(v0 + 2823) < 0) {
    operator delete((void *)STACK[0x1A48]);
  }
  JUMPOUT(0x1003B6F48);
}

void sub_1003B9138()
{
}

void sub_1003B9148()
{
  if (*(char *)(v0 + 2903) < 0) {
    operator delete((void *)STACK[0x1A98]);
  }
  JUMPOUT(0x1003B6F64);
}

void sub_1003B916C()
{
}

void sub_1003B917C()
{
  if (*(char *)(v0 + 2983) < 0) {
    operator delete((void *)STACK[0x1AE8]);
  }
  JUMPOUT(0x1003B6F80);
}

void sub_1003B91A0()
{
}

void sub_1003B91B0()
{
  if (*(char *)(v0 + 3063) < 0) {
    operator delete((void *)STACK[0x1B38]);
  }
  JUMPOUT(0x1003B6F9CLL);
}

void sub_1003B91D4()
{
}

void sub_1003B91E4()
{
  if (*(char *)(v0 + 3143) < 0) {
    operator delete((void *)STACK[0x1B88]);
  }
  JUMPOUT(0x1003B6FB8);
}

void sub_1003B9208()
{
}

void sub_1003B9218()
{
  if (*(char *)(v0 + 3223) < 0) {
    operator delete((void *)STACK[0x1BD8]);
  }
  JUMPOUT(0x1003B6FD4);
}

void sub_1003B923C()
{
}

void sub_1003B924C()
{
  if (*(char *)(v0 + 3303) < 0) {
    operator delete((void *)STACK[0x1C28]);
  }
  JUMPOUT(0x1003B6FF0);
}

void sub_1003B9270()
{
}

void sub_1003B9280()
{
  if (*(char *)(v0 + 3383) < 0) {
    operator delete((void *)STACK[0x1C78]);
  }
  JUMPOUT(0x1003B700CLL);
}

void sub_1003B92A4()
{
}

void sub_1003B92B4()
{
  if (*(char *)(v0 + 3463) < 0) {
    operator delete((void *)STACK[0x1CC8]);
  }
  JUMPOUT(0x1003B7028);
}

void sub_1003B92D8()
{
}

void sub_1003B92E8()
{
  if (*(char *)(v0 + 3543) < 0) {
    operator delete((void *)STACK[0x1D18]);
  }
  JUMPOUT(0x1003B7044);
}

void sub_1003B930C()
{
}

void sub_1003B931C()
{
  if (*(char *)(v0 + 3623) < 0) {
    operator delete((void *)STACK[0x1D68]);
  }
  JUMPOUT(0x1003B7060);
}

void sub_1003B9340()
{
}

void sub_1003B9350()
{
  if (*(char *)(v0 + 3703) < 0) {
    operator delete((void *)STACK[0x1DB8]);
  }
  JUMPOUT(0x1003B707CLL);
}

void sub_1003B9374()
{
}

void sub_1003B9384()
{
  if (*(char *)(v0 + 3783) < 0) {
    operator delete((void *)STACK[0x1E08]);
  }
  JUMPOUT(0x1003B7098);
}

void sub_1003B93A8()
{
}

void sub_1003B93B8()
{
  if (*(char *)(v0 + 3863) < 0) {
    operator delete((void *)STACK[0x1E58]);
  }
  JUMPOUT(0x1003B70B4);
}

void sub_1003B93DC()
{
}

void sub_1003B93EC()
{
  if (*(char *)(v0 + 3943) < 0) {
    operator delete((void *)STACK[0x1EA8]);
  }
  JUMPOUT(0x1003B70D0);
}

void sub_1003B9410()
{
}

void sub_1003B9420()
{
  if (*(char *)(v0 + 4023) < 0) {
    operator delete((void *)STACK[0x1EF8]);
  }
  JUMPOUT(0x1003B70ECLL);
}

void sub_1003B9444()
{
}

void sub_1003B9454()
{
  if (*(char *)(v0 + 23) < 0) {
    operator delete((void *)STACK[0x1F48]);
  }
  JUMPOUT(0x1003B7108);
}

void sub_1003B9478()
{
}

void sub_1003B9488()
{
  if (*(char *)(v0 + 103) < 0) {
    operator delete((void *)STACK[0x1F98]);
  }
  JUMPOUT(0x1003B7124);
}

void sub_1003B94AC()
{
}

void sub_1003B94BC()
{
  if (*(char *)(v0 + 183) < 0) {
    operator delete((void *)STACK[0x1FE8]);
  }
  JUMPOUT(0x1003B7140);
}

void sub_1003B94E0()
{
}

void sub_1003B94F0()
{
  if (*(char *)(v0 + 263) < 0) {
    operator delete((void *)STACK[0x2038]);
  }
  JUMPOUT(0x1003B715CLL);
}

void sub_1003B9514()
{
}

void sub_1003B9524()
{
  if (*(char *)(v0 + 343) < 0) {
    operator delete((void *)STACK[0x2088]);
  }
  JUMPOUT(0x1003B7178);
}

void sub_1003B9548()
{
}

void sub_1003B9558()
{
  if (*(char *)(v0 + 423) < 0) {
    operator delete((void *)STACK[0x20D8]);
  }
  JUMPOUT(0x1003B7194);
}

void sub_1003B957C()
{
}

void sub_1003B958C()
{
  if (*(char *)(v0 + 503) < 0) {
    operator delete((void *)STACK[0x2128]);
  }
  JUMPOUT(0x1003B71B0);
}

void sub_1003B95B0()
{
}

void sub_1003B95C0()
{
  if (*(char *)(v0 + 583) < 0) {
    operator delete((void *)STACK[0x2178]);
  }
  JUMPOUT(0x1003B71CCLL);
}

void sub_1003B95E4()
{
}

void sub_1003B95F4()
{
  if (*(char *)(v0 + 663) < 0) {
    operator delete((void *)STACK[0x21C8]);
  }
  JUMPOUT(0x1003B71E8);
}

void sub_1003B9618()
{
}

void sub_1003B9628()
{
  if (*(char *)(v0 + 743) < 0) {
    operator delete((void *)STACK[0x2218]);
  }
  JUMPOUT(0x1003B7204);
}

void sub_1003B964C()
{
}

void sub_1003B965C()
{
  if (*(char *)(v0 + 823) < 0) {
    operator delete((void *)STACK[0x2268]);
  }
  JUMPOUT(0x1003B7220);
}

void sub_1003B9680()
{
}

void sub_1003B9690()
{
  if (*(char *)(v0 + 903) < 0) {
    operator delete((void *)STACK[0x22B8]);
  }
  JUMPOUT(0x1003B723CLL);
}

void sub_1003B96B4()
{
}

void sub_1003B96C4()
{
  if (*(char *)(v0 + 983) < 0) {
    operator delete((void *)STACK[0x2308]);
  }
  JUMPOUT(0x1003B7258);
}

void sub_1003B96E8()
{
}

void sub_1003B96F8()
{
  if (*(char *)(v0 + 1063) < 0) {
    operator delete((void *)STACK[0x2358]);
  }
  JUMPOUT(0x1003B7274);
}

void sub_1003B971C()
{
}

void sub_1003B972C()
{
  if (*(char *)(v0 + 1143) < 0) {
    operator delete((void *)STACK[0x23A8]);
  }
  JUMPOUT(0x1003B7290);
}

void sub_1003B9750()
{
}

void sub_1003B9760()
{
  if (*(char *)(v0 + 1223) < 0) {
    operator delete((void *)STACK[0x23F8]);
  }
  JUMPOUT(0x1003B72ACLL);
}

void sub_1003B9784()
{
}

void sub_1003B9794()
{
  if (*(char *)(v0 + 1303) < 0) {
    operator delete((void *)STACK[0x2448]);
  }
  JUMPOUT(0x1003B72C8);
}

void sub_1003B97B8()
{
}

void sub_1003B97C8()
{
  if (*(char *)(v0 + 1383) < 0) {
    operator delete((void *)STACK[0x2498]);
  }
  JUMPOUT(0x1003B72E4);
}

void sub_1003B97EC()
{
}

void sub_1003B97FC()
{
  if (*(char *)(v0 + 1463) < 0) {
    operator delete((void *)STACK[0x24E8]);
  }
  JUMPOUT(0x1003B7300);
}

void sub_1003B9820()
{
}

void sub_1003B9830()
{
  if (*(char *)(v0 + 1543) < 0) {
    operator delete((void *)STACK[0x2538]);
  }
  JUMPOUT(0x1003B731CLL);
}

void sub_1003B9854()
{
}

void sub_1003B9864()
{
  if (*(char *)(v0 + 1623) < 0) {
    operator delete((void *)STACK[0x2588]);
  }
  JUMPOUT(0x1003B7338);
}

void sub_1003B9888()
{
}

void sub_1003B9898()
{
  if (*(char *)(v0 + 1703) < 0) {
    operator delete((void *)STACK[0x25D8]);
  }
  JUMPOUT(0x1003B7354);
}

void sub_1003B98BC()
{
}

void sub_1003B98CC()
{
  if (*(char *)(v0 + 1783) < 0) {
    operator delete((void *)STACK[0x2628]);
  }
  JUMPOUT(0x1003B7370);
}

void sub_1003B98F0()
{
}

void sub_1003B9900()
{
  if (*(char *)(v0 + 1863) < 0) {
    operator delete((void *)STACK[0x2678]);
  }
  JUMPOUT(0x1003B738CLL);
}

void sub_1003B9924()
{
}

void sub_1003B9934()
{
  if (*(char *)(v0 + 1943) < 0) {
    operator delete((void *)STACK[0x26C8]);
  }
  JUMPOUT(0x1003B73A8);
}

void sub_1003B9958()
{
}

void sub_1003B9968()
{
  if (*(char *)(v0 + 2023) < 0) {
    operator delete((void *)STACK[0x2718]);
  }
  JUMPOUT(0x1003B73C4);
}

void sub_1003B998C()
{
}

void sub_1003B999C()
{
  if (*(char *)(v0 + 2103) < 0) {
    operator delete((void *)STACK[0x2768]);
  }
  JUMPOUT(0x1003B73E0);
}

void sub_1003B99C0()
{
}

void sub_1003B99D0()
{
  if (*(char *)(v0 + 2183) < 0) {
    operator delete((void *)STACK[0x27B8]);
  }
  JUMPOUT(0x1003B73FCLL);
}

void sub_1003B99F4()
{
}

void sub_1003B9A04()
{
  if (*(char *)(v0 + 2263) < 0) {
    operator delete((void *)STACK[0x2808]);
  }
  JUMPOUT(0x1003B7418);
}

void sub_1003B9A28()
{
}

void sub_1003B9A38()
{
  if (*(char *)(v0 + 2343) < 0) {
    operator delete((void *)STACK[0x2858]);
  }
  JUMPOUT(0x1003B7434);
}

void sub_1003B9A5C()
{
}

void sub_1003B9A6C()
{
  if (*(char *)(v0 + 2423) < 0) {
    operator delete((void *)STACK[0x28A8]);
  }
  JUMPOUT(0x1003B7450);
}

void sub_1003B9A90()
{
}

void sub_1003B9AA0()
{
  if (*(char *)(v0 + 2503) < 0) {
    operator delete((void *)STACK[0x28F8]);
  }
  JUMPOUT(0x1003B746CLL);
}

void sub_1003B9AC4()
{
}

void sub_1003B9AD4()
{
  if (*(char *)(v0 + 2583) < 0) {
    operator delete((void *)STACK[0x2948]);
  }
  JUMPOUT(0x1003B7488);
}

void sub_1003B9AF8()
{
}

void sub_1003B9B08()
{
  if (*(char *)(v0 + 2663) < 0) {
    operator delete((void *)STACK[0x2998]);
  }
  JUMPOUT(0x1003B74A4);
}

void sub_1003B9B2C()
{
}

void sub_1003B9B3C()
{
  if (*(char *)(v0 + 2743) < 0) {
    operator delete((void *)STACK[0x29E8]);
  }
  JUMPOUT(0x1003B74C0);
}

void sub_1003B9B60()
{
}

void sub_1003B9B70()
{
  if (*(char *)(v0 + 2823) < 0) {
    operator delete((void *)STACK[0x2A38]);
  }
  JUMPOUT(0x1003B74DCLL);
}

void sub_1003B9B94()
{
}

void sub_1003B9BA4()
{
  if (*(char *)(v0 + 2903) < 0) {
    operator delete((void *)STACK[0x2A88]);
  }
  JUMPOUT(0x1003B74F8);
}

void sub_1003B9BC8()
{
}

void sub_1003B9BD8()
{
  if (*(char *)(v0 + 2983) < 0) {
    operator delete((void *)STACK[0x2AD8]);
  }
  JUMPOUT(0x1003B7514);
}

void sub_1003B9BFC()
{
}

void sub_1003B9C0C()
{
  if (*(char *)(v0 + 3063) < 0) {
    operator delete((void *)STACK[0x2B28]);
  }
  JUMPOUT(0x1003B7530);
}

void sub_1003B9C30()
{
}

void sub_1003B9C40()
{
  if (*(char *)(v0 + 3143) < 0) {
    operator delete((void *)STACK[0x2B78]);
  }
  JUMPOUT(0x1003B754CLL);
}

void sub_1003B9C64()
{
}

void sub_1003B9C74()
{
  if (*(char *)(v0 + 3223) < 0) {
    operator delete((void *)STACK[0x2BC8]);
  }
  JUMPOUT(0x1003B7568);
}

void sub_1003B9C98()
{
}

void sub_1003B9CA8()
{
  if (*(char *)(v0 + 3303) < 0) {
    operator delete((void *)STACK[0x2C18]);
  }
  JUMPOUT(0x1003B7584);
}

void sub_1003B9CCC()
{
}

void sub_1003B9CDC()
{
  if (*(char *)(v0 + 3383) < 0) {
    operator delete((void *)STACK[0x2C68]);
  }
  JUMPOUT(0x1003B75A0);
}

void sub_1003B9D00()
{
}

void sub_1003B9D10()
{
  if (*(char *)(v0 + 3463) < 0) {
    operator delete((void *)STACK[0x2CB8]);
  }
  JUMPOUT(0x1003B75BCLL);
}

void sub_1003B9D34()
{
}

void sub_1003B9D44()
{
  if (*(char *)(v0 + 3543) < 0) {
    operator delete((void *)STACK[0x2D08]);
  }
  JUMPOUT(0x1003B75D8);
}

void sub_1003B9D68()
{
}

void sub_1003B9D78()
{
  if (*(char *)(v0 + 3623) < 0) {
    operator delete((void *)STACK[0x2D58]);
  }
  JUMPOUT(0x1003B75F4);
}

void sub_1003B9D9C()
{
}

void sub_1003B9DAC()
{
  if (*(char *)(v0 + 3703) < 0) {
    operator delete((void *)STACK[0x2DA8]);
  }
  JUMPOUT(0x1003B7610);
}

void sub_1003B9DD0()
{
}

void sub_1003B9DE0()
{
  if (*(char *)(v0 + 3783) < 0) {
    operator delete((void *)STACK[0x2DF8]);
  }
  JUMPOUT(0x1003B762CLL);
}

void sub_1003B9E04()
{
}

void sub_1003B9E14()
{
  if (*(char *)(v0 + 3863) < 0) {
    operator delete((void *)STACK[0x2E48]);
  }
  JUMPOUT(0x1003B7648);
}

void sub_1003B9E38()
{
}

void sub_1003B9E48()
{
  if (*(char *)(v0 + 3943) < 0) {
    operator delete((void *)STACK[0x2E98]);
  }
  JUMPOUT(0x1003B7664);
}

void sub_1003B9E6C()
{
}

void sub_1003B9E7C()
{
  if (*(char *)(v0 + 4023) < 0) {
    operator delete((void *)STACK[0x2EE8]);
  }
  JUMPOUT(0x1003B7680);
}

void sub_1003B9EA0()
{
}

void sub_1003B9EB0()
{
  if (*(char *)(v0 + 23) < 0) {
    operator delete((void *)STACK[0x2F38]);
  }
  JUMPOUT(0x1003B769CLL);
}

void sub_1003B9ED4()
{
}

void sub_1003B9EE4()
{
  if (*(char *)(v0 + 103) < 0) {
    operator delete((void *)STACK[0x2F88]);
  }
  JUMPOUT(0x1003B76B8);
}

void sub_1003B9F08()
{
}

void sub_1003B9F18()
{
  if (*(char *)(v0 + 183) < 0) {
    operator delete((void *)STACK[0x2FD8]);
  }
  JUMPOUT(0x1003B76D4);
}

void sub_1003B9F3C()
{
}

void sub_1003B9F4C()
{
  if (*(char *)(v0 + 263) < 0) {
    operator delete((void *)STACK[0x3028]);
  }
  JUMPOUT(0x1003B76F0);
}

void sub_1003B9F70()
{
}

void sub_1003B9F80()
{
  if (*(char *)(v0 + 343) < 0) {
    operator delete((void *)STACK[0x3078]);
  }
  JUMPOUT(0x1003B770CLL);
}

void sub_1003B9FA4()
{
}

void sub_1003B9FB4()
{
  if (*(char *)(v0 + 423) < 0) {
    operator delete((void *)STACK[0x30C8]);
  }
  JUMPOUT(0x1003B7728);
}

void sub_1003B9FD8()
{
}

void sub_1003B9FE8()
{
  if (*(char *)(v0 + 503) < 0) {
    operator delete((void *)STACK[0x3118]);
  }
  JUMPOUT(0x1003B7744);
}

void sub_1003BA00C()
{
}

void sub_1003BA01C()
{
  if (*(char *)(v0 + 583) < 0) {
    operator delete((void *)STACK[0x3168]);
  }
  JUMPOUT(0x1003B7760);
}

void sub_1003BA040()
{
}

void sub_1003BA050()
{
  if (*(char *)(v0 + 663) < 0) {
    operator delete((void *)STACK[0x31B8]);
  }
  JUMPOUT(0x1003B777CLL);
}

void sub_1003BA074()
{
}

void sub_1003BA084()
{
  if (*(char *)(v0 + 743) < 0) {
    operator delete((void *)STACK[0x3208]);
  }
  JUMPOUT(0x1003B7798);
}

void sub_1003BA0A8()
{
}

void sub_1003BA0B8()
{
  if (*(char *)(v0 + 823) < 0) {
    operator delete((void *)STACK[0x3258]);
  }
  JUMPOUT(0x1003B77B4);
}

void sub_1003BA0DC()
{
}

void sub_1003BA0EC()
{
  if (*(char *)(v0 + 903) < 0) {
    operator delete((void *)STACK[0x32A8]);
  }
  JUMPOUT(0x1003B77D0);
}

void sub_1003BA110()
{
}

void sub_1003BA120()
{
  if (*(char *)(v0 + 983) < 0) {
    operator delete((void *)STACK[0x32F8]);
  }
  JUMPOUT(0x1003B77ECLL);
}

void sub_1003BA144()
{
}

void sub_1003BA154()
{
  if (*(char *)(v0 + 1063) < 0) {
    operator delete((void *)STACK[0x3348]);
  }
  JUMPOUT(0x1003B7808);
}

void sub_1003BA178()
{
}

void sub_1003BA188()
{
  if (*(char *)(v0 + 1143) < 0) {
    operator delete((void *)STACK[0x3398]);
  }
  JUMPOUT(0x1003B7824);
}

void sub_1003BA1AC()
{
}

void sub_1003BA1BC()
{
  if (*(char *)(v0 + 1223) < 0) {
    operator delete((void *)STACK[0x33E8]);
  }
  JUMPOUT(0x1003B7840);
}

void sub_1003BA1E0()
{
}

void sub_1003BA1F0()
{
  if (*(char *)(v0 + 1303) < 0) {
    operator delete((void *)STACK[0x3438]);
  }
  JUMPOUT(0x1003B785CLL);
}

void sub_1003BA214()
{
}

void sub_1003BA224()
{
  if (*(char *)(v0 + 1383) < 0) {
    operator delete((void *)STACK[0x3488]);
  }
  JUMPOUT(0x1003B7878);
}

void sub_1003BA248()
{
}

void sub_1003BA258()
{
  if (*(char *)(v0 + 1463) < 0) {
    operator delete((void *)STACK[0x34D8]);
  }
  JUMPOUT(0x1003B7894);
}

void sub_1003BA27C()
{
}

void sub_1003BA28C()
{
  if (*(char *)(v0 + 1543) < 0) {
    operator delete((void *)STACK[0x3528]);
  }
  JUMPOUT(0x1003B78B0);
}

void sub_1003BA2B0()
{
}

void sub_1003BA2C0()
{
  if (*(char *)(v0 + 1623) < 0) {
    operator delete((void *)STACK[0x3578]);
  }
  JUMPOUT(0x1003B78CCLL);
}

void sub_1003BA2E4()
{
}

void sub_1003BA2F4()
{
  if (*(char *)(v0 + 1703) < 0) {
    operator delete((void *)STACK[0x35C8]);
  }
  JUMPOUT(0x1003B78E8);
}

void sub_1003BA318()
{
}

void sub_1003BA328()
{
  if (*(char *)(v0 + 1783) < 0) {
    operator delete((void *)STACK[0x3618]);
  }
  JUMPOUT(0x1003B7904);
}

void sub_1003BA34C()
{
}

void sub_1003BA35C()
{
  if (*(char *)(v0 + 1863) < 0) {
    operator delete((void *)STACK[0x3668]);
  }
  JUMPOUT(0x1003B7920);
}

void sub_1003BA380()
{
}

void sub_1003BA390()
{
  if (*(char *)(v0 + 1943) < 0) {
    operator delete((void *)STACK[0x36B8]);
  }
  JUMPOUT(0x1003B793CLL);
}

void sub_1003BA3B4()
{
}

void sub_1003BA3C4()
{
  if (*(char *)(v0 + 2023) < 0) {
    operator delete((void *)STACK[0x3708]);
  }
  JUMPOUT(0x1003B7958);
}

void sub_1003BA3E8()
{
}

void sub_1003BA3F8()
{
  if (*(char *)(v0 + 2103) < 0) {
    operator delete((void *)STACK[0x3758]);
  }
  JUMPOUT(0x1003B7974);
}

void sub_1003BA41C()
{
}

void sub_1003BA42C()
{
  if (*(char *)(v0 + 2183) < 0) {
    operator delete((void *)STACK[0x37A8]);
  }
  JUMPOUT(0x1003B7990);
}

void sub_1003BA450()
{
}

void sub_1003BA460()
{
  if (*(char *)(v0 + 2263) < 0) {
    operator delete((void *)STACK[0x37F8]);
  }
  JUMPOUT(0x1003B79ACLL);
}

void sub_1003BA484()
{
}

void sub_1003BA494()
{
  if (*(char *)(v0 + 2343) < 0) {
    operator delete((void *)STACK[0x3848]);
  }
  JUMPOUT(0x1003B79C8);
}

void sub_1003BA4B8()
{
}

void sub_1003BA4C8()
{
  if (*(char *)(v0 + 2423) < 0) {
    operator delete((void *)STACK[0x3898]);
  }
  JUMPOUT(0x1003B79E4);
}

void sub_1003BA4EC()
{
}

void sub_1003BA4FC()
{
  if (*(char *)(v0 + 2503) < 0) {
    operator delete((void *)STACK[0x38E8]);
  }
  JUMPOUT(0x1003B7A00);
}

void sub_1003BA520()
{
}

void sub_1003BA530()
{
  if (*(char *)(v0 + 2583) < 0) {
    operator delete((void *)STACK[0x3938]);
  }
  JUMPOUT(0x1003B7A1CLL);
}

void sub_1003BA554()
{
}

void sub_1003BA564()
{
  if (*(char *)(v0 + 2663) < 0) {
    operator delete((void *)STACK[0x3988]);
  }
  JUMPOUT(0x1003B7A38);
}

void sub_1003BA588()
{
}

void sub_1003BA598()
{
  if (*(char *)(v0 + 2743) < 0) {
    operator delete((void *)STACK[0x39D8]);
  }
  JUMPOUT(0x1003B7A54);
}

void sub_1003BA5BC()
{
}

void sub_1003BA5CC()
{
  if (*(char *)(v0 + 2823) < 0) {
    operator delete((void *)STACK[0x3A28]);
  }
  JUMPOUT(0x1003B7A70);
}

void sub_1003BA5F0()
{
}

void sub_1003BA600()
{
  if (*(char *)(v0 + 2903) < 0) {
    operator delete((void *)STACK[0x3A78]);
  }
  JUMPOUT(0x1003B7A8CLL);
}

void sub_1003BA624()
{
}

void sub_1003BA634()
{
  if (*(char *)(v0 + 2983) < 0) {
    operator delete((void *)STACK[0x3AC8]);
  }
  JUMPOUT(0x1003B7AA8);
}

void sub_1003BA658()
{
}

void sub_1003BA668()
{
  if (*(char *)(v0 + 3063) < 0) {
    operator delete((void *)STACK[0x3B18]);
  }
  JUMPOUT(0x1003B7AC4);
}

void sub_1003BA68C()
{
}

void sub_1003BA69C()
{
  if (*(char *)(v0 + 3143) < 0) {
    operator delete((void *)STACK[0x3B68]);
  }
  JUMPOUT(0x1003B7AE0);
}

void sub_1003BA6C0()
{
}

void sub_1003BA6D0()
{
  if (*(char *)(v0 + 3223) < 0) {
    operator delete((void *)STACK[0x3BB8]);
  }
  JUMPOUT(0x1003B7AFCLL);
}

void sub_1003BA6F4()
{
}

void sub_1003BA704()
{
  if (*(char *)(v0 + 3303) < 0) {
    operator delete((void *)STACK[0x3C08]);
  }
  JUMPOUT(0x1003B7B18);
}

void sub_1003BA728()
{
}

void sub_1003BA738()
{
  if (*(char *)(v0 + 3383) < 0) {
    operator delete((void *)STACK[0x3C58]);
  }
  JUMPOUT(0x1003B7B34);
}

void sub_1003BA75C()
{
}

void sub_1003BA76C()
{
  if (*(char *)(v0 + 3463) < 0) {
    operator delete((void *)STACK[0x3CA8]);
  }
  JUMPOUT(0x1003B7B50);
}

void sub_1003BA790()
{
}

void sub_1003BA7A0()
{
  if (*(char *)(v0 + 3543) < 0) {
    operator delete((void *)STACK[0x3CF8]);
  }
  JUMPOUT(0x1003B7B6CLL);
}

void sub_1003BA7C4()
{
}

void sub_1003BA7D4()
{
  if (*(char *)(v0 + 3623) < 0) {
    operator delete((void *)STACK[0x3D48]);
  }
  JUMPOUT(0x1003B7B88);
}

void sub_1003BA7F8()
{
}

void sub_1003BA808()
{
  if (*(char *)(v0 + 3703) < 0) {
    operator delete((void *)STACK[0x3D98]);
  }
  JUMPOUT(0x1003B7BA4);
}

void sub_1003BA82C()
{
}

void sub_1003BA83C()
{
  if (*(char *)(v0 + 3783) < 0) {
    operator delete((void *)STACK[0x3DE8]);
  }
  JUMPOUT(0x1003B7BC0);
}

void sub_1003BA860()
{
}

void sub_1003BA870()
{
  if (*(char *)(v0 + 3863) < 0) {
    operator delete((void *)STACK[0x3E38]);
  }
  JUMPOUT(0x1003B7BDCLL);
}

void sub_1003BA894()
{
}

void sub_1003BA8A4()
{
  if (*(char *)(v0 + 3943) < 0) {
    operator delete((void *)STACK[0x3E88]);
  }
  JUMPOUT(0x1003B7BF8);
}

void sub_1003BA8C8()
{
}

void sub_1003BA8D8()
{
  if (*(char *)(v0 + 4023) < 0) {
    operator delete((void *)STACK[0x3ED8]);
  }
  JUMPOUT(0x1003B7C14);
}

void sub_1003BA8FC()
{
}

void sub_1003BA90C()
{
  if (*(char *)(v0 + 23) < 0) {
    operator delete((void *)STACK[0x3F28]);
  }
  JUMPOUT(0x1003B7C30);
}

void sub_1003BA930()
{
}

void sub_1003BA940()
{
  if (*(char *)(v0 + 103) < 0) {
    operator delete((void *)STACK[0x3F78]);
  }
  JUMPOUT(0x1003B7C4CLL);
}

void sub_1003BA964()
{
}

void sub_1003BA974()
{
  if (*(char *)(v0 + 183) < 0) {
    operator delete((void *)STACK[0x3FC8]);
  }
  JUMPOUT(0x1003B7C68);
}

void sub_1003BA998()
{
}

void sub_1003BA9A8()
{
  if (*(char *)(v0 + 263) < 0) {
    operator delete((void *)STACK[0x4018]);
  }
  JUMPOUT(0x1003B7C84);
}

void sub_1003BA9CC()
{
}

void sub_1003BA9DC()
{
  if (*(char *)(v0 + 343) < 0) {
    operator delete((void *)STACK[0x4068]);
  }
  JUMPOUT(0x1003B7CA0);
}

void sub_1003BAA00()
{
}

void sub_1003BAA10()
{
  if (*(char *)(v0 + 423) < 0) {
    operator delete((void *)STACK[0x40B8]);
  }
  JUMPOUT(0x1003B7CBCLL);
}

void sub_1003BAA34()
{
}

void sub_1003BAA44()
{
  if (*(char *)(v0 + 503) < 0) {
    operator delete((void *)STACK[0x4108]);
  }
  JUMPOUT(0x1003B7CD8);
}

void sub_1003BAA68()
{
}

void sub_1003BAA78()
{
  if (*(char *)(v0 + 583) < 0) {
    operator delete((void *)STACK[0x4158]);
  }
  JUMPOUT(0x1003B7CF4);
}

void sub_1003BAA9C()
{
}

void sub_1003BAAAC()
{
  if (*(char *)(v0 + 663) < 0) {
    operator delete((void *)STACK[0x41A8]);
  }
  JUMPOUT(0x1003B7D10);
}

void sub_1003BAAD0()
{
}

void sub_1003BAAE0()
{
  if (*(char *)(v0 + 743) < 0) {
    operator delete((void *)STACK[0x41F8]);
  }
  JUMPOUT(0x1003B7D2CLL);
}

void sub_1003BAB04()
{
}

void sub_1003BAB14()
{
  if (*(char *)(v0 + 823) < 0) {
    operator delete((void *)STACK[0x4248]);
  }
  JUMPOUT(0x1003B7D48);
}

void sub_1003BAB38()
{
}

void sub_1003BAB48()
{
  if (*(char *)(v0 + 903) < 0) {
    operator delete((void *)STACK[0x4298]);
  }
  JUMPOUT(0x1003B7D64);
}

void sub_1003BAB6C()
{
}

void sub_1003BAB7C()
{
  if (*(char *)(v0 + 983) < 0) {
    operator delete((void *)STACK[0x42E8]);
  }
  JUMPOUT(0x1003B7D80);
}

void sub_1003BABA0()
{
}

void sub_1003BABB0()
{
  if (*(char *)(v0 + 1063) < 0) {
    operator delete((void *)STACK[0x4338]);
  }
  JUMPOUT(0x1003B7D9CLL);
}

void sub_1003BABD4()
{
}

void sub_1003BABE4()
{
  if (*(char *)(v0 + 1143) < 0) {
    operator delete((void *)STACK[0x4388]);
  }
  JUMPOUT(0x1003B7DB8);
}

void sub_1003BAC08()
{
}

void sub_1003BAC18()
{
  if (*(char *)(v0 + 1223) < 0) {
    operator delete((void *)STACK[0x43D8]);
  }
  JUMPOUT(0x1003B7DD4);
}

void sub_1003BAC3C()
{
}

void sub_1003BAC4C()
{
  if (*(char *)(v0 + 1303) < 0) {
    operator delete((void *)STACK[0x4428]);
  }
  JUMPOUT(0x1003B7DF0);
}

void sub_1003BAC70()
{
}

void sub_1003BAC80()
{
  if (*(char *)(v0 + 1383) < 0) {
    operator delete((void *)STACK[0x4478]);
  }
  JUMPOUT(0x1003B7E0CLL);
}

void sub_1003BACA4()
{
}

void sub_1003BACB4()
{
  if (*(char *)(v0 + 1463) < 0) {
    operator delete((void *)STACK[0x44C8]);
  }
  JUMPOUT(0x1003B7E28);
}

void sub_1003BACD8()
{
}

void sub_1003BACE8()
{
  if (*(char *)(v0 + 1543) < 0) {
    operator delete((void *)STACK[0x4518]);
  }
  JUMPOUT(0x1003B7E44);
}

void sub_1003BAD0C()
{
}

void sub_1003BAD1C()
{
  if (*(char *)(v0 + 1623) < 0) {
    operator delete((void *)STACK[0x4568]);
  }
  JUMPOUT(0x1003B7E60);
}

void sub_1003BAD40()
{
}

void sub_1003BAD50()
{
  if (*(char *)(v0 + 1703) < 0) {
    operator delete((void *)STACK[0x45B8]);
  }
  JUMPOUT(0x1003B7E7CLL);
}

void sub_1003BAD74()
{
}

void sub_1003BAD84()
{
  if (*(char *)(v0 + 1783) < 0) {
    operator delete((void *)STACK[0x4608]);
  }
  JUMPOUT(0x1003B7E98);
}

void sub_1003BADA8()
{
}

void sub_1003BADB8()
{
  if (*(char *)(v0 + 1863) < 0) {
    operator delete((void *)STACK[0x4658]);
  }
  JUMPOUT(0x1003B7EB4);
}

void sub_1003BADDC()
{
}

void sub_1003BADEC()
{
  if (*(char *)(v0 + 1943) < 0) {
    operator delete((void *)STACK[0x46A8]);
  }
  JUMPOUT(0x1003B7ED0);
}

void sub_1003BAE10()
{
}

void sub_1003BAE20()
{
  if (*(char *)(v0 + 2023) < 0) {
    operator delete((void *)STACK[0x46F8]);
  }
  JUMPOUT(0x1003B7EECLL);
}

void sub_1003BAE44()
{
}

void sub_1003BAE54()
{
  if (*(char *)(v0 + 2103) < 0) {
    operator delete((void *)STACK[0x4748]);
  }
  JUMPOUT(0x1003B7F08);
}

void sub_1003BAE78()
{
}

void sub_1003BAE88()
{
  if (*(char *)(v0 + 2183) < 0) {
    operator delete((void *)STACK[0x4798]);
  }
  JUMPOUT(0x1003B7F24);
}

void sub_1003BAEAC()
{
}

void sub_1003BAEBC()
{
  if (*(char *)(v0 + 2263) < 0) {
    operator delete((void *)STACK[0x47E8]);
  }
  JUMPOUT(0x1003B7F40);
}

void sub_1003BAEE0()
{
}

void sub_1003BAEF0()
{
  if (*(char *)(v0 + 2343) < 0) {
    operator delete((void *)STACK[0x4838]);
  }
  JUMPOUT(0x1003B7F5CLL);
}

void sub_1003BAF14()
{
}

void sub_1003BAF24()
{
  if (*(char *)(v0 + 2423) < 0) {
    operator delete((void *)STACK[0x4888]);
  }
  JUMPOUT(0x1003B7F78);
}

void sub_1003BAF48()
{
}

void sub_1003BAF58()
{
  if (*(char *)(v0 + 2503) < 0) {
    operator delete((void *)STACK[0x48D8]);
  }
  JUMPOUT(0x1003B7F94);
}

void sub_1003BAF7C()
{
}

void sub_1003BAF8C()
{
  if (*(char *)(v0 + 2583) < 0) {
    operator delete((void *)STACK[0x4928]);
  }
  JUMPOUT(0x1003B7FB0);
}

void sub_1003BAFB0()
{
}

void sub_1003BAFC0()
{
  if (*(char *)(v0 + 2663) < 0) {
    operator delete((void *)STACK[0x4978]);
  }
  JUMPOUT(0x1003B7FCCLL);
}

void sub_1003BAFE4()
{
}

void sub_1003BAFF4()
{
  if (*(char *)(v0 + 2743) < 0) {
    operator delete((void *)STACK[0x49C8]);
  }
  JUMPOUT(0x1003B7FE8);
}

void sub_1003BB018()
{
}

void sub_1003BB028()
{
  if (*(char *)(v0 + 2823) < 0) {
    operator delete((void *)STACK[0x4A18]);
  }
  JUMPOUT(0x1003B8004);
}

void sub_1003BB04C()
{
}

void sub_1003BB05C()
{
  if (*(char *)(v0 + 2903) < 0) {
    operator delete((void *)STACK[0x4A68]);
  }
  JUMPOUT(0x1003B8020);
}

void sub_1003BB080()
{
}

void sub_1003BB090()
{
  if (*(char *)(v0 + 2983) < 0) {
    operator delete((void *)STACK[0x4AB8]);
  }
  JUMPOUT(0x1003B803CLL);
}

void sub_1003BB0B4()
{
}

void sub_1003BB0C4()
{
  if (*(char *)(v0 + 3063) < 0) {
    operator delete((void *)STACK[0x4B08]);
  }
  JUMPOUT(0x1003B8058);
}

void sub_1003BB0E8()
{
}

void sub_1003BB0F8()
{
  if (*(char *)(v0 + 3143) < 0) {
    operator delete((void *)STACK[0x4B58]);
  }
  JUMPOUT(0x1003B8074);
}

void sub_1003BB11C()
{
}

void sub_1003BB128()
{
}

void sub_1003BB13C()
{
  if (*(char *)(v0 + 3223) < 0) {
    operator delete((void *)STACK[0x4BA8]);
  }
  JUMPOUT(0x1003B8090);
}

void sub_1003BB168()
{
}

uint64_t sub_1003BB170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __chkstk_darwin(a1, a2, a3);
  sub_100004950(v1803, "SV");
  sub_100004950(v1798, "El Salvador");
  sub_100004950(&v1800, "SV");
  __int16 v1802 = 1;
  sub_1003AC140((char *)v1805, (long long *)v1803, (long long *)v1798);
  sub_100004950(v1796, "IN");
  sub_100004950(v1791, "India");
  sub_100004950(&v1793, "IN");
  __int16 v1795 = 1;
  sub_1003AC140(v1806, (long long *)v1796, (long long *)v1791);
  sub_100004950(v1789, "PE");
  sub_100004950(v1784, "Peru");
  sub_100004950(&v1786, "PE");
  __int16 v1788 = 2;
  sub_1003AC140(v1807, (long long *)v1789, (long long *)v1784);
  sub_100004950(v1782, "WS");
  sub_100004950(v1777, "Samoa");
  sub_100004950(&v1779, "WS");
  __int16 v1781 = 1;
  sub_1003AC140(v1808, (long long *)v1782, (long long *)v1777);
  sub_100004950(v1775, "NI");
  sub_100004950(v1770, "Nicaragua");
  sub_100004950(&v1772, "NI");
  __int16 v1774 = 1;
  sub_1003AC140(v1809, (long long *)v1775, (long long *)v1770);
  sub_100004950(v1768, "BO");
  sub_100004950(v1763, "Bolivia");
  sub_100004950(&v1765, "BO");
  __int16 v1767 = 1;
  sub_1003AC140(v1810, (long long *)v1768, (long long *)v1763);
  sub_100004950(v1761, "JM");
  sub_100004950(v1756, "Jamaica");
  sub_100004950(&v1758, "JM");
  __int16 v1760 = 1;
  sub_1003AC140(v1811, (long long *)v1761, (long long *)v1756);
  sub_100004950(v1754, "US");
  sub_100004950(v1749, "United States");
  sub_100004950(&v1751, "US");
  __int16 v1753 = 257;
  sub_1003AC140(v1812, (long long *)v1754, (long long *)v1749);
  sub_100004950(v1747, "CA");
  sub_100004950(v1742, "Canada");
  sub_100004950(&v1744, "CA");
  __int16 v1746 = 257;
  sub_1003AC140(v1813, (long long *)v1747, (long long *)v1742);
  sub_100004950(v1740, "CO");
  sub_100004950(v1735, "Colombia");
  sub_100004950(&v1737, "CO");
  __int16 v1739 = 258;
  sub_1003AC140(v1814, (long long *)v1740, (long long *)v1735);
  sub_100004950(v1733, "PR");
  sub_100004950(v1728, "Puerto Rico");
  sub_100004950(&v1730, "PR");
  __int16 v1732 = 257;
  sub_1003AC140(v1815, (long long *)v1733, (long long *)v1728);
  sub_100004950(v1726, "CR");
  sub_100004950(v1721, "Costa Rica");
  sub_100004950(&v1723, "CR");
  __int16 v1725 = 258;
  sub_1003AC140(v1816, (long long *)v1726, (long long *)v1721);
  sub_100004950(v1719, "EC");
  sub_100004950(v1714, "Ecuador");
  sub_100004950(&v1716, "EC");
  __int16 v1718 = 257;
  sub_1003AC140(v1817, (long long *)v1719, (long long *)v1714);
  sub_100004950(v1712, "AR");
  sub_100004950(v1707, "Argentina");
  sub_100004950(&v1709, "AR");
  __int16 v1711 = 257;
  sub_1003AC140(v1818, (long long *)v1712, (long long *)v1707);
  sub_100004950(v1705, "VI");
  sub_100004950(v1700, "USVI");
  sub_100004950(&v1702, "VI");
  __int16 v1704 = 257;
  sub_1003AC140(v1819, (long long *)v1705, (long long *)v1700);
  sub_100004950(v1698, "GT");
  sub_100004950(v1693, "Guatemala");
  sub_100004950(&v1695, "GT");
  __int16 v1697 = 257;
  sub_1003AC140(v1820, (long long *)v1698, (long long *)v1693);
  sub_100004950(v1691, "UM");
  sub_100004950(v1686, "US Minor Outlying Islands");
  sub_100004950(&v1688, "UM");
  __int16 v1690 = 257;
  sub_1003AC140(v1821, (long long *)v1691, (long long *)v1686);
  sub_100004950(v1684, "CL");
  sub_100004950(v1679, "Chile");
  sub_100004950(&v1681, "CL");
  __int16 v1683 = 257;
  sub_1003AC140(v1822, (long long *)v1684, (long long *)v1679);
  sub_100004950(v1677, "PA");
  sub_100004950(v1672, "Panama");
  sub_100004950(&v1674, "PA");
  __int16 v1676 = 257;
  sub_1003AC140(v1823, (long long *)v1677, (long long *)v1672);
  sub_100004950(v1670, "VE");
  sub_100004950(v1665, "Venezuela");
  sub_100004950(&v1667, "VE");
  __int16 v1669 = 257;
  sub_1003AC140(v1824, (long long *)v1670, (long long *)v1665);
  sub_100004950(v1663, "UY");
  sub_100004950(v1658, "Uruguay");
  sub_100004950(&v1660, "UY");
  __int16 v1662 = 257;
  sub_1003AC140(v1825, (long long *)v1663, (long long *)v1658);
  sub_100004950(v1656, "DO");
  sub_100004950(v1651, "Dominican Rep");
  sub_100004950(&v1653, "DO");
  __int16 v1655 = 258;
  sub_1003AC140(v1826, (long long *)v1656, (long long *)v1651);
  sub_100004950(v1649, "GU");
  sub_100004950(v1644, "Guam");
  sub_100004950(&v1646, "GU");
  __int16 v1648 = 257;
  sub_1003AC140(v1827, (long long *)v1649, (long long *)v1644);
  sub_100004950(v1642, "HN");
  sub_100004950(v1637, "Honduras");
  sub_100004950(&v1639, "HN");
  __int16 v1641 = 257;
  sub_1003AC140(v1828, (long long *)v1642, (long long *)v1637);
  sub_100004950(v1635, "AI");
  sub_100004950(v1630, "Anguilla");
  sub_100004950(&v1632, "AI");
  __int16 v1634 = 257;
  sub_1003AC140(v1829, (long long *)v1635, (long long *)v1630);
  sub_100004950(v1628, "AG");
  sub_100004950(v1623, "Antigua/ Barbuda");
  sub_100004950(&v1625, "AG");
  __int16 v1627 = 257;
  sub_1003AC140(v1830, (long long *)v1628, (long long *)v1623);
  sub_100004950(v1621, "AW");
  sub_100004950(v1616, "Aruba");
  sub_100004950(&v1618, "AW");
  __int16 v1620 = 257;
  sub_1003AC140(v1831, (long long *)v1621, (long long *)v1616);
  sub_100004950(v1614, "BS");
  sub_100004950(v1609, "Bahamas");
  sub_100004950(&v1611, "BS");
  __int16 v1613 = 257;
  sub_1003AC140(v1832, (long long *)v1614, (long long *)v1609);
  sub_100004950(v1607, "BB");
  sub_100004950(v1602, "Barbados");
  sub_100004950(&v1604, "BB");
  __int16 v1606 = 257;
  sub_1003AC140(v1833, (long long *)v1607, (long long *)v1602);
  sub_100004950(v1600, "BM");
  sub_100004950(v1595, "Bermuda");
  sub_100004950(&v1597, "BM");
  __int16 v1599 = 257;
  sub_1003AC140(v1834, (long long *)v1600, (long long *)v1595);
  sub_100004950(v1593, "VG");
  sub_100004950(v1588, "British Virgin Islands");
  sub_100004950(&v1590, "VG");
  __int16 v1592 = 257;
  sub_1003AC140(v1835, (long long *)v1593, (long long *)v1588);
  sub_100004950(v1586, "KY");
  sub_100004950(v1581, "Cayman Islands");
  sub_100004950(&v1583, "KY");
  __int16 v1585 = 257;
  sub_1003AC140(v1836, (long long *)v1586, (long long *)v1581);
  sub_100004950(v1579, "DM");
  sub_100004950(v1574, "Dominica");
  sub_100004950(&v1576, "DM");
  __int16 v1578 = 257;
  sub_1003AC140(v1837, (long long *)v1579, (long long *)v1574);
  sub_100004950(v1572, "GD");
  sub_100004950(v1567, "Grenada");
  sub_100004950(&v1569, "GD");
  __int16 v1571 = 257;
  sub_1003AC140(v1838, (long long *)v1572, (long long *)v1567);
  sub_100004950(v1565, "MS");
  sub_100004950(v1560, "Montserrat");
  sub_100004950(&v1562, "MS");
  __int16 v1564 = 257;
  sub_1003AC140(v1839, (long long *)v1565, (long long *)v1560);
  sub_100004950(v1558, "KN");
  sub_100004950(v1553, "St Kitts/ Nevis");
  sub_100004950(&v1555, "KN");
  __int16 v1557 = 257;
  sub_1003AC140(v1840, (long long *)v1558, (long long *)v1553);
  sub_100004950(v1551, "LC");
  sub_100004950(v1546, "St Lucia");
  sub_100004950(&v1548, "LC");
  __int16 v1550 = 257;
  sub_1003AC140(v1841, (long long *)v1551, (long long *)v1546);
  sub_100004950(v1544, "VC");
  sub_100004950(v1539, "St Vincent/ Grenadines");
  sub_100004950(&v1541, "VC");
  __int16 v1543 = 257;
  sub_1003AC140(v1842, (long long *)v1544, (long long *)v1539);
  sub_100004950(v1537, "TC");
  sub_100004950(v1532, "Turks & Caicos");
  sub_100004950(&v1534, "TC");
  __int16 v1536 = 257;
  sub_1003AC140(v1843, (long long *)v1537, (long long *)v1532);
  sub_100004950(v1530, "PY");
  sub_100004950(v1525, "Paraguay");
  sub_100004950(&v1527, "PY");
  __int16 v1529 = 258;
  sub_1003AC140(v1844, (long long *)v1530, (long long *)v1525);
  sub_100004950(v1523, "TT");
  sub_100004950(v1518, "Trinidad & Tobago");
  sub_100004950(&v1520, "TT");
  __int16 v1522 = 257;
  sub_1003AC140(v1845, (long long *)v1523, (long long *)v1518);
  sub_100004950(v1516, "CW");
  sub_100004950(v1511, "CURACAO");
  sub_100004950(&v1513, "CW");
  __int16 v1515 = 257;
  sub_1003AC140(v1846, (long long *)v1516, (long long *)v1511);
  sub_100004950(v1509, "BZ");
  sub_100004950(v1504, "BELIZE");
  sub_100004950(&v1506, "BZ");
  __int16 v1508 = 257;
  sub_1003AC140(v1847, (long long *)v1509, (long long *)v1504);
  sub_100004950(v1502, "HT");
  sub_100004950(v1497, "HAITI");
  sub_100004950(&v1499, "HT");
  __int16 v1501 = 257;
  sub_1003AC140(v1848, (long long *)v1502, (long long *)v1497);
  sub_100004950(v1495, "SX");
  sub_100004950(v1490, "Sint Maarten");
  sub_100004950(&v1492, "SX");
  __int16 v1494 = 257;
  sub_1003AC140(v1849, (long long *)v1495, (long long *)v1490);
  sub_100004950(v1488, "SR");
  sub_100004950(v1483, "SURINAME");
  sub_100004950(&v1485, "SR");
  __int16 v1487 = 257;
  sub_1003AC140(v1850, (long long *)v1488, (long long *)v1483);
  sub_100004950(v1481, "BQ");
  sub_100004950(v1476, "BES");
  sub_100004950(&v1478, "BQ");
  __int16 v1480 = 257;
  sub_1003AC140(v1851, (long long *)v1481, (long long *)v1476);
  sub_100004950(v1474, "GY");
  sub_100004950(v1469, "Guyana");
  sub_100004950(&v1471, "GY");
  __int16 v1473 = 257;
  sub_1003AC140(v1852, (long long *)v1474, (long long *)v1469);
  sub_100004950(v1467, "AS");
  sub_100004950(v1462, "American Samoa ");
  sub_100004950(&v1464, "AS");
  __int16 v1466 = 257;
  sub_1003AC140(v1853, (long long *)v1467, (long long *)v1462);
  sub_100004950(v1460, "MF");
  sub_100004950(v1455, "Saint Martin (North of Island)");
  sub_100004950(&v1457, "MF");
  __int16 v1459 = 259;
  sub_1003AC140(v1854, (long long *)v1460, (long long *)v1455);
  sub_100004950(v1453, "MP");
  sub_100004950(v1448, "Northern Mariana Island");
  sub_100004950(&v1450, "MP");
  __int16 v1452 = 257;
  sub_1003AC140(v1855, (long long *)v1453, (long long *)v1448);
  sub_100004950(v1446, "FM");
  sub_100004950(v1441, "MICRONESIA, FEDERATED STATES OF");
  sub_100004950(&v1443, "FM");
  __int16 v1445 = 257;
  sub_1003AC140(v1856, (long long *)v1446, (long long *)v1441);
  sub_100004950(v1439, "MH");
  sub_100004950(v1434, "MARSHALL ISLANDS");
  sub_100004950(&v1436, "MH");
  __int16 v1438 = 257;
  sub_1003AC140(v1857, (long long *)v1439, (long long *)v1434);
  sub_100004950(v1432, "PW");
  sub_100004950(v1427, "Palau");
  sub_100004950(&v1429, "PW");
  __int16 v1431 = 257;
  sub_1003AC140(v1858, (long long *)v1432, (long long *)v1427);
  sub_100004950(v1425, "AT");
  sub_100004950(v1420, "Austria");
  sub_100004950(&v1422, "AT");
  __int16 v1424 = 1283;
  sub_1003AC140(v1859, (long long *)v1425, (long long *)v1420);
  sub_100004950(v1418, "BE");
  sub_100004950(v1413, "Belgium");
  sub_100004950(&v1415, "BE");
  __int16 v1417 = 1283;
  sub_1003AC140(v1860, (long long *)v1418, (long long *)v1413);
  sub_100004950(v1411, "BG");
  sub_100004950(v1406, "Bulgaria");
  sub_100004950(&v1408, "BG");
  __int16 v1410 = 1283;
  sub_1003AC140(v1861, (long long *)v1411, (long long *)v1406);
  sub_100004950(v1404, "CY");
  sub_100004950(v1399, "Cyprus");
  sub_100004950(&v1401, "CY");
  __int16 v1403 = 1283;
  sub_1003AC140(v1862, (long long *)v1404, (long long *)v1399);
  sub_100004950(v1397, "CZ");
  sub_100004950(v1392, "Czech Republic");
  sub_100004950(&v1394, "CZ");
  __int16 v1396 = 1283;
  sub_1003AC140(v1863, (long long *)v1397, (long long *)v1392);
  sub_100004950(v1390, "DK");
  sub_100004950(v1385, "Denmark");
  sub_100004950(&v1387, "DK");
  __int16 v1389 = 1283;
  sub_1003AC140(v1864, (long long *)v1390, (long long *)v1385);
  sub_100004950(v1383, "EE");
  sub_100004950(v1378, "Estonia");
  sub_100004950(&v1380, "EE");
  __int16 v1382 = 1283;
  sub_1003AC140(v1865, (long long *)v1383, (long long *)v1378);
  sub_100004950(v1376, "FR");
  sub_100004950(v1371, "France");
  sub_100004950(&v1373, "FR");
  __int16 v1375 = 1283;
  sub_1003AC140(v1866, (long long *)v1376, (long long *)v1371);
  sub_100004950(v1369, "FI");
  sub_100004950(v1364, "Finland");
  sub_100004950(&v1366, "FI");
  __int16 v1368 = 1283;
  sub_1003AC140(v1867, (long long *)v1369, (long long *)v1364);
  sub_100004950(v1362, "DE");
  sub_100004950(v1357, "Germany");
  sub_100004950(&v1359, "DE");
  __int16 v1361 = 1283;
  sub_1003AC140(v1868, (long long *)v1362, (long long *)v1357);
  sub_100004950(v1355, "GR");
  sub_100004950(v1350, "Greece");
  sub_100004950(&v1352, "GR");
  __int16 v1354 = 1283;
  sub_1003AC140(v1869, (long long *)v1355, (long long *)v1350);
  sub_100004950(v1348, "HU");
  sub_100004950(v1343, "Hungary");
  sub_100004950(&v1345, "HU");
  __int16 v1347 = 1283;
  sub_1003AC140(v1870, (long long *)v1348, (long long *)v1343);
  sub_100004950(v1341, "IS");
  sub_100004950(v1336, "Iceland");
  sub_100004950(&v1338, "IS");
  __int16 v1340 = 1283;
  sub_1003AC140(v1871, (long long *)v1341, (long long *)v1336);
  sub_100004950(v1334, "IT");
  sub_100004950(v1329, "Italy");
  sub_100004950(&v1331, "IT");
  __int16 v1333 = 1283;
  sub_1003AC140(v1872, (long long *)v1334, (long long *)v1329);
  sub_100004950(v1327, "IE");
  sub_100004950(v1322, "Ireland");
  sub_100004950(&v1324, "IE");
  __int16 v1326 = 1283;
  sub_1003AC140(v1873, (long long *)v1327, (long long *)v1322);
  sub_100004950(v1320, "LV");
  sub_100004950(v1315, "Latvia");
  sub_100004950(&v1317, "LV");
  __int16 v1319 = 1283;
  sub_1003AC140(v1874, (long long *)v1320, (long long *)v1315);
  sub_100004950(v1313, "LI");
  sub_100004950(v1308, "Liechtenstein");
  sub_100004950(&v1310, "LI");
  __int16 v1312 = 1283;
  sub_1003AC140(v1875, (long long *)v1313, (long long *)v1308);
  sub_100004950(v1306, "LT");
  sub_100004950(v1301, "Lithuania");
  sub_100004950(&v1303, "LT");
  __int16 v1305 = 1283;
  sub_1003AC140(v1876, (long long *)v1306, (long long *)v1301);
  sub_100004950(v1299, "LU");
  sub_100004950(v1294, "Luxembourg");
  sub_100004950(&v1296, "LU");
  __int16 v1298 = 1283;
  sub_1003AC140(v1877, (long long *)v1299, (long long *)v1294);
  sub_100004950(v1292, "MT");
  sub_100004950(v1287, "Malta");
  sub_100004950(&v1289, "MT");
  __int16 v1291 = 1283;
  sub_1003AC140(v1878, (long long *)v1292, (long long *)v1287);
  sub_100004950(v1285, "NL");
  sub_100004950(v1280, "Netherlands");
  sub_100004950(&v1282, "NL");
  __int16 v1284 = 1283;
  sub_1003AC140(v1879, (long long *)v1285, (long long *)v1280);
  sub_100004950(v1278, "NO");
  sub_100004950(v1273, "Norway");
  sub_100004950(&v1275, "NO");
  __int16 v1277 = 1283;
  sub_1003AC140(v1880, (long long *)v1278, (long long *)v1273);
  sub_100004950(v1271, "PL");
  sub_100004950(v1266, "Poland");
  sub_100004950(&v1268, "PL");
  __int16 v1270 = 1283;
  sub_1003AC140(v1881, (long long *)v1271, (long long *)v1266);
  sub_100004950(v1264, "PT");
  sub_100004950(v1259, "Portugal");
  sub_100004950(&v1261, "PT");
  __int16 v1263 = 1283;
  sub_1003AC140(v1882, (long long *)v1264, (long long *)v1259);
  sub_100004950(v1257, "RO");
  sub_100004950(v1252, "Romania");
  sub_100004950(&v1254, "RO");
  __int16 v1256 = 1283;
  sub_1003AC140(v1883, (long long *)v1257, (long long *)v1252);
  sub_100004950(v1250, "SK");
  sub_100004950(v1245, "Slovakia");
  sub_100004950(&v1247, "SK");
  __int16 v1249 = 1283;
  sub_1003AC140(v1884, (long long *)v1250, (long long *)v1245);
  sub_100004950(v1243, "SI");
  sub_100004950(v1238, "Slovenia");
  sub_100004950(&v1240, "SI");
  __int16 v1242 = 1283;
  sub_1003AC140(v1885, (long long *)v1243, (long long *)v1238);
  sub_100004950(v1236, "ES");
  sub_100004950(v1231, "Spain");
  sub_100004950(&v1233, "ES");
  __int16 v1235 = 1283;
  sub_1003AC140(v1886, (long long *)v1236, (long long *)v1231);
  sub_100004950(v1229, "SE");
  sub_100004950(v1224, "Sweden");
  sub_100004950(&v1226, "SE");
  __int16 v1228 = 1283;
  sub_1003AC140(v1887, (long long *)v1229, (long long *)v1224);
  sub_100004950(v1222, "CH");
  sub_100004950(v1217, "Switzerland");
  sub_100004950(&v1219, "CH");
  __int16 v1221 = 1283;
  sub_1003AC140(v1888, (long long *)v1222, (long long *)v1217);
  sub_100004950(v1215, "GB");
  sub_100004950(v1210, "UK");
  sub_100004950(&v1212, "GB");
  __int16 v1214 = 1283;
  sub_1003AC140(v1889, (long long *)v1215, (long long *)v1210);
  sub_100004950(v1208, "ZA");
  sub_100004950(v1203, "South Africa");
  sub_100004950(&v1205, "ZA");
  __int16 v1207 = 1283;
  sub_1003AC140(v1890, (long long *)v1208, (long long *)v1203);
  sub_100004950(v1201, "TR");
  sub_100004950(v1196, "Turkey");
  sub_100004950(&v1198, "TR");
  __int16 v1200 = 1283;
  sub_1003AC140(v1891, (long long *)v1201, (long long *)v1196);
  sub_100004950(v1194, "AE");
  sub_100004950(v1189, "UAE");
  sub_100004950(&v1191, "AE");
  __int16 v1193 = 1283;
  sub_1003AC140(v1892, (long long *)v1194, (long long *)v1189);
  sub_100004950(v1187, "SA");
  sub_100004950(v1182, "Saudi Arabia");
  sub_100004950(&v1184, "SA");
  __int16 v1186 = 1283;
  sub_1003AC140(v1893, (long long *)v1187, (long long *)v1182);
  sub_100004950(v1180, "HR");
  sub_100004950(v1175, "Croatia");
  sub_100004950(&v1177, "HR");
  __int16 v1179 = 1283;
  sub_1003AC140(v1894, (long long *)v1180, (long long *)v1175);
  sub_100004950(v1173, "RS");
  sub_100004950(v1168, "Serbia");
  sub_100004950(&v1170, "RS");
  __int16 v1172 = 1283;
  sub_1003AC140(v1895, (long long *)v1173, (long long *)v1168);
  sub_100004950(v1166, "HK");
  sub_100004950(v1161, "Hong Kong ");
  sub_100004950(&v1163, "HK");
  __int16 v1165 = 514;
  sub_1003AC140(v1896, (long long *)v1166, (long long *)v1161);
  sub_100004950(v1159, "SG");
  sub_100004950(v1154, "Singapore");
  sub_100004950(&v1156, "SG");
  __int16 v1158 = 514;
  sub_1003AC140(v1897, (long long *)v1159, (long long *)v1154);
  sub_100004950(v1152, "VN");
  sub_100004950(v1147, "Vietnam");
  sub_100004950(&v1149, "VN");
  __int16 v1151 = 514;
  sub_1003AC140(v1898, (long long *)v1152, (long long *)v1147);
  sub_100004950(v1145, "BN");
  sub_100004950(v1140, "Brunei");
  sub_100004950(&v1142, "BN");
  __int16 v1144 = 514;
  sub_1003AC140(v1899, (long long *)v1145, (long long *)v1140);
  sub_100004950(v1138, "KH");
  sub_100004950(v1133, "Cambodia");
  sub_100004950(&v1135, "KH");
  __int16 v1137 = 514;
  sub_1003AC140(v1900, (long long *)v1138, (long long *)v1133);
  sub_100004950(v1131, "LA");
  sub_100004950(v1126, "Laos");
  sub_100004950(&v1128, "LA");
  __int16 v1130 = 514;
  sub_1003AC140(v1901, (long long *)v1131, (long long *)v1126);
  sub_100004950(v1124, "MM");
  sub_100004950(v1119, "Myanmar");
  sub_100004950(&v1121, "MM");
  __int16 v1123 = 514;
  sub_1003AC140(v1902, (long long *)v1124, (long long *)v1119);
  sub_100004950(v1117, "CN");
  sub_100004950(v1112, "China ");
  sub_100004950(&v1114, "CN");
  __int16 v1116 = 514;
  sub_1003AC140(v1903, (long long *)v1117, (long long *)v1112);
  sub_100004950(v1110, "PK");
  sub_100004950(v1105, "Pakistan");
  sub_100004950(&v1107, "PK");
  __int16 v1109 = 514;
  sub_1003AC140(v1904, (long long *)v1110, (long long *)v1105);
  sub_100004950(v1103, "BD");
  sub_100004950(v1098, "Bangladesh");
  sub_100004950(&v1100, "BD");
  __int16 v1102 = 514;
  sub_1003AC140(v1905, (long long *)v1103, (long long *)v1098);
  sub_100004950(v1096, "LK");
  sub_100004950(v1091, "Sri Lanka");
  sub_100004950(&v1093, "LK");
  __int16 v1095 = 514;
  sub_1003AC140(v1906, (long long *)v1096, (long long *)v1091);
  sub_100004950(v1089, "MV");
  sub_100004950(v1084, "Maldives");
  sub_100004950(&v1086, "MV");
  __int16 v1088 = 514;
  sub_1003AC140(v1907, (long long *)v1089, (long long *)v1084);
  sub_100004950(v1082, "AF");
  sub_100004950(v1077, "Afghanistan");
  sub_100004950(&v1079, "AF");
  __int16 v1081 = 514;
  sub_1003AC140(v1908, (long long *)v1082, (long long *)v1077);
  sub_100004950(v1075, "MN");
  sub_100004950(v1070, "Mongolia");
  sub_100004950(&v1072, "MN");
  __int16 v1074 = 514;
  sub_1003AC140(v1909, (long long *)v1075, (long long *)v1070);
  sub_100004950(v1068, "BT");
  sub_100004950(v1063, "Bhutan");
  sub_100004950(&v1065, "BT");
  __int16 v1067 = 514;
  sub_1003AC140(v1910, (long long *)v1068, (long long *)v1063);
  sub_100004950(v1061, "MO");
  sub_100004950(v1056, "Macau");
  sub_100004950(&v1058, "MO");
  __int16 v1060 = 514;
  sub_1003AC140(v1911, (long long *)v1061, (long long *)v1056);
  sub_100004950(v1054, "PH");
  sub_100004950(v1049, "Philippines");
  sub_100004950(&v1051, "PH");
  __int16 v1053 = 514;
  sub_1003AC140(v1912, (long long *)v1054, (long long *)v1049);
  sub_100004950(v1047, "NC");
  sub_100004950(v1042, "New Caledonia");
  sub_100004950(&v1044, "NC");
  __int16 v1046 = 1283;
  sub_1003AC140(v1913, (long long *)v1047, (long long *)v1042);
  sub_100004950(v1040, "PG");
  sub_100004950(v1035, "Papua New Guinea");
  sub_100004950(&v1037, "PG");
  __int16 v1039 = 514;
  sub_1003AC140(v1914, (long long *)v1040, (long long *)v1035);
  sub_100004950(v1033, "VU");
  sub_100004950(v1028, "Vanuatu");
  sub_100004950(&v1030, "VU");
  __int16 v1032 = 514;
  sub_1003AC140(v1915, (long long *)v1033, (long long *)v1028);
  sub_100004950(v1026, "EG");
  sub_100004950(v1021, "Egypt");
  sub_100004950(&v1023, "EG");
  __int16 v1025 = 1283;
  sub_1003AC140(v1916, (long long *)v1026, (long long *)v1021);
  sub_100004950(v1019, "KW");
  sub_100004950(v1014, "Kuwait");
  sub_100004950(&v1016, "KW");
  __int16 v1018 = 1283;
  sub_1003AC140(v1917, (long long *)v1019, (long long *)v1014);
  sub_100004950(v1012, "MA");
  sub_100004950(v1007, "Morocco");
  sub_100004950(&v1009, "MA");
  __int16 v1011 = 1283;
  sub_1003AC140(v1918, (long long *)v1012, (long long *)v1007);
  sub_100004950(v1005, "UA");
  sub_100004950(v1000, "Ukraine");
  sub_100004950(&v1002, "UA");
  __int16 v1004 = 1283;
  sub_1003AC140(v1919, (long long *)v1005, (long long *)v1000);
  sub_100004950(v998, "BY");
  sub_100004950(v993, "Belarus");
  sub_100004950(&v995, "BY");
  __int16 v997 = 514;
  sub_1003AC140(v1920, (long long *)v998, (long long *)v993);
  sub_100004950(v991, "AZ");
  sub_100004950(v986, "Azerbaijan");
  sub_100004950(&v988, "AZ");
  __int16 v990 = 1283;
  sub_1003AC140(v1921, (long long *)v991, (long long *)v986);
  sub_100004950(v984, "KZ");
  sub_100004950(v979, "Kazakhstan");
  sub_100004950(&v981, "KZ");
  __int16 v983 = 514;
  sub_1003AC140(v1922, (long long *)v984, (long long *)v979);
  sub_100004950(v977, "ID");
  sub_100004950(v972, "Indonesia");
  sub_100004950(&v974, "ID");
  __int16 v976 = 514;
  sub_1003AC140(v1923, (long long *)v977, (long long *)v972);
  sub_100004950(v970, "AL");
  sub_100004950(v965, "Albania");
  sub_100004950(&v967, "AL");
  __int16 v969 = 1283;
  sub_1003AC140(v1924, (long long *)v970, (long long *)v965);
  sub_100004950(v963, "DZ");
  sub_100004950(v958, "Algeria");
  sub_100004950(&v960, "DZ");
  __int16 v962 = 1283;
  sub_1003AC140(v1925, (long long *)v963, (long long *)v958);
  sub_100004950(v956, "AO");
  sub_100004950(v951, "Angola");
  sub_100004950(&v953, "AO");
  __int16 v955 = 1283;
  sub_1003AC140(v1926, (long long *)v956, (long long *)v951);
  sub_100004950(v949, "AM");
  sub_100004950(v944, "Armenia");
  sub_100004950(&v946, "AM");
  __int16 v948 = 514;
  sub_1003AC140(v1927, (long long *)v949, (long long *)v944);
  sub_100004950(v942, "BJ");
  sub_100004950(v937, "Benin");
  sub_100004950(&v939, "BJ");
  __int16 v941 = 1283;
  sub_1003AC140(v1928, (long long *)v942, (long long *)v937);
  sub_100004950(v935, "BA");
  sub_100004950(v930, "Bosnia & Hertzgovena");
  sub_100004950(&v932, "BA");
  __int16 v934 = 1283;
  sub_1003AC140(v1929, (long long *)v935, (long long *)v930);
  sub_100004950(v928, "BI");
  sub_100004950(v923, "Burundi");
  sub_100004950(&v925, "BI");
  __int16 v927 = 1283;
  sub_1003AC140(v1930, (long long *)v928, (long long *)v923);
  sub_100004950(v921, "BF");
  sub_100004950(v916, "Burkina-Faso");
  sub_100004950(&v918, "BF");
  __int16 v920 = 1283;
  sub_1003AC140(v1931, (long long *)v921, (long long *)v916);
  sub_100004950(v914, "CF");
  sub_100004950(v909, "Central Africa Republic");
  sub_100004950(&v911, "CF");
  __int16 v913 = 1283;
  sub_1003AC140(v1932, (long long *)v914, (long long *)v909);
  sub_100004950(v907, "TD");
  sub_100004950(v902, "Chad");
  sub_100004950(&v904, "TD");
  __int16 v906 = 1283;
  sub_1003AC140(v1933, (long long *)v907, (long long *)v902);
  sub_100004950(v900, "CD");
  sub_100004950(v895, "Congo-Brazzaville");
  sub_100004950(&v897, "CD");
  __int16 v899 = 1283;
  sub_1003AC140(v1934, (long long *)v900, (long long *)v895);
  sub_100004950(v893, "CG");
  sub_100004950(v888, "Congo, Democratic Rebuplic of");
  sub_100004950(&v890, "CG");
  __int16 v892 = 1283;
  sub_1003AC140(v1935, (long long *)v893, (long long *)v888);
  sub_100004950(v886, "GQ");
  sub_100004950(v881, "Equatorial Guinea");
  sub_100004950(&v883, "GQ");
  __int16 v885 = 1283;
  sub_1003AC140(v1936, (long long *)v886, (long long *)v881);
  sub_100004950(v879, "ET");
  sub_100004950(v874, "Ethiopia");
  sub_100004950(&v876, "ET");
  __int16 v878 = 1283;
  sub_1003AC140(v1937, (long long *)v879, (long long *)v874);
  sub_100004950(v872, "PF");
  sub_100004950(v867, "French Polynesia, Tahiti");
  sub_100004950(&v869, "PF");
  __int16 v871 = 1283;
  sub_1003AC140(v1938, (long long *)v872, (long long *)v867);
  sub_100004950(v865, "GA");
  sub_100004950(v860, "Gabon");
  sub_100004950(&v862, "GA");
  __int16 v864 = 1283;
  sub_1003AC140(v1939, (long long *)v865, (long long *)v860);
  sub_100004950(v858, "GM");
  sub_100004950(v853, "Gambia");
  sub_100004950(&v855, "GM");
  __int16 v857 = 1283;
  sub_1003AC140(v1940, (long long *)v858, (long long *)v853);
  sub_100004950(v851, "GH");
  sub_100004950(v846, "Ghana");
  sub_100004950(&v848, "GH");
  __int16 v850 = 1283;
  sub_1003AC140(v1941, (long long *)v851, (long long *)v846);
  sub_100004950(v844, "GI");
  sub_100004950(v839, "Gibraltar");
  sub_100004950(&v841, "GI");
  __int16 v843 = 1283;
  sub_1003AC140(v1942, (long long *)v844, (long long *)v839);
  sub_100004950(v837, "GL");
  sub_100004950(v832, "Greenland");
  sub_100004950(&v834, "GL");
  __int16 v836 = 1283;
  sub_1003AC140(v1943, (long long *)v837, (long long *)v832);
  sub_100004950(v830, "GP");
  sub_100004950(v825, "Guadeloupe");
  sub_100004950(&v827, "GP");
  __int16 v829 = 1283;
  sub_1003AC140(v1944, (long long *)v830, (long long *)v825);
  sub_100004950(v823, "GW");
  sub_100004950(v818, "Guinea - Bissau");
  sub_100004950(&v820, "GW");
  __int16 v822 = 1283;
  sub_1003AC140(v1945, (long long *)v823, (long long *)v818);
  sub_100004950(v816, "GN");
  sub_100004950(v811, "Guinea-Conakry");
  sub_100004950(&v813, "GN");
  __int16 v815 = 1283;
  sub_1003AC140(v1946, (long long *)v816, (long long *)v811);
  sub_100004950(v809, "IQ");
  sub_100004950(v804, "Iraq");
  sub_100004950(&v806, "IQ");
  __int16 v808 = 1283;
  sub_1003AC140(v1947, (long long *)v809, (long long *)v804);
  sub_100004950(v802, "CI");
  sub_100004950(v797, "Ivory Coast");
  sub_100004950(&v799, "CI");
  __int16 v801 = 1283;
  sub_1003AC140(v1948, (long long *)v802, (long long *)v797);
  sub_100004950(v795, "KE");
  sub_100004950(v790, "Kenya");
  sub_100004950(&v792, "KE");
  __int16 v794 = 1283;
  sub_1003AC140(v1949, (long long *)v795, (long long *)v790);
  sub_100004950(v788, "KG");
  sub_100004950(v783, "Kyrgyzstan");
  sub_100004950(&v785, "KG");
  __int16 v787 = 514;
  sub_1003AC140(v1950, (long long *)v788, (long long *)v783);
  sub_100004950(v781, "LB");
  sub_100004950(v776, "Lebanon");
  sub_100004950(&v778, "LB");
  __int16 v780 = 1283;
  sub_1003AC140(v1951, (long long *)v781, (long long *)v776);
  sub_100004950(v774, "LS");
  sub_100004950(v769, "Lesotho");
  sub_100004950(&v771, "LS");
  __int16 v773 = 1283;
  sub_1003AC140(v1952, (long long *)v774, (long long *)v769);
  sub_100004950(v767, "LR");
  sub_100004950(v762, "Liberia");
  sub_100004950(&v764, "LR");
  __int16 v766 = 1283;
  sub_1003AC140(v1953, (long long *)v767, (long long *)v762);
  sub_100004950(v760, "LY");
  sub_100004950(v755, "Libya");
  sub_100004950(&v757, "LY");
  __int16 v759 = 1283;
  sub_1003AC140(v1954, (long long *)v760, (long long *)v755);
  sub_100004950(v753, "MK");
  sub_100004950(v748, "Macedonia");
  sub_100004950(&v750, "MK");
  __int16 v752 = 1283;
  sub_1003AC140(v1955, (long long *)v753, (long long *)v748);
  sub_100004950(v746, "MG");
  sub_100004950(v741, "Madagascar");
  sub_100004950(&v743, "MG");
  __int16 v745 = 1283;
  sub_1003AC140(v1956, (long long *)v746, (long long *)v741);
  sub_100004950(v739, "ML");
  sub_100004950(v734, "Mali");
  sub_100004950(&v736, "ML");
  __int16 v738 = 1283;
  sub_1003AC140(v1957, (long long *)v739, (long long *)v734);
  sub_100004950(v732, "MQ");
  sub_100004950(v727, "Martinique");
  sub_100004950(&v729, "MQ");
  __int16 v731 = 1283;
  sub_1003AC140(v1958, (long long *)v732, (long long *)v727);
  sub_100004950(v725, "MU");
  sub_100004950(v720, "Mauritius");
  sub_100004950(&v722, "MU");
  __int16 v724 = 1283;
  sub_1003AC140(v1959, (long long *)v725, (long long *)v720);
  sub_100004950(v718, "MD");
  sub_100004950(v713, "Moldova");
  sub_100004950(&v715, "MD");
  __int16 v717 = 1283;
  sub_1003AC140(v1960, (long long *)v718, (long long *)v713);
  sub_100004950(v711, "MC");
  sub_100004950(v706, "Monaco");
  sub_100004950(&v708, "MC");
  __int16 v710 = 1283;
  sub_1003AC140(v1961, (long long *)v711, (long long *)v706);
  sub_100004950(v704, "ME");
  sub_100004950(v699, "Montenegro");
  sub_100004950(&v701, "ME");
  __int16 v703 = 1283;
  sub_1003AC140(v1962, (long long *)v704, (long long *)v699);
  sub_100004950(v697, "MZ");
  sub_100004950(v692, "Mozambique");
  sub_100004950(&v694, "MZ");
  __int16 v696 = 1283;
  sub_1003AC140(v1963, (long long *)v697, (long long *)v692);
  sub_100004950(v690, "NA");
  sub_100004950(v685, "Namibia");
  sub_100004950(&v687, "NA");
  __int16 v689 = 1283;
  sub_1003AC140(v1964, (long long *)v690, (long long *)v685);
  sub_100004950(v683, "NE");
  sub_100004950(v678, "Niger");
  sub_100004950(&v680, "NE");
  __int16 v682 = 1283;
  sub_1003AC140(v1965, (long long *)v683, (long long *)v678);
  sub_100004950(v676, "OM");
  sub_100004950(v671, "Oman");
  sub_100004950(&v673, "OM");
  __int16 v675 = 1283;
  sub_1003AC140(v1966, (long long *)v676, (long long *)v671);
  sub_100004950(v669, "RE");
  sub_100004950(v664, "Reunion");
  sub_100004950(&v666, "RE");
  __int16 v668 = 1283;
  sub_1003AC140(v1967, (long long *)v669, (long long *)v664);
  sub_100004950(v662, "SN");
  sub_100004950(v657, "Senegal");
  sub_100004950(&v659, "SN");
  __int16 v661 = 1283;
  sub_1003AC140(v1968, (long long *)v662, (long long *)v657);
  sub_100004950(v655, "TZ");
  sub_100004950(v650, "Tanzania");
  sub_100004950(&v652, "TZ");
  __int16 v654 = 1283;
  sub_1003AC140(v1969, (long long *)v655, (long long *)v650);
  sub_100004950(v648, "TG");
  sub_100004950(v643, "Togo");
  sub_100004950(&v645, "TG");
  __int16 v647 = 1283;
  sub_1003AC140(v1970, (long long *)v648, (long long *)v643);
  sub_100004950(v641, "UG");
  sub_100004950(v636, "Uganda");
  sub_100004950(&v638, "UG");
  __int16 v640 = 1283;
  sub_1003AC140(v1971, (long long *)v641, (long long *)v636);
  sub_100004950(v634, "UZ");
  sub_100004950(v629, "Uzbekistan");
  sub_100004950(&v631, "UZ");
  __int16 v633 = 1283;
  sub_1003AC140(v1972, (long long *)v634, (long long *)v629);
  sub_100004950(v627, "ZM");
  sub_100004950(v622, "Zambia");
  sub_100004950(&v624, "ZM");
  __int16 v626 = 1283;
  sub_1003AC140(v1973, (long long *)v627, (long long *)v622);
  sub_100004950(v620, "ZW");
  sub_100004950(v615, "Zimbabwe");
  sub_100004950(&v617, "ZW");
  __int16 v619 = 1283;
  sub_1003AC140(v1974, (long long *)v620, (long long *)v615);
  sub_100004950(v613, "GE");
  sub_100004950(v608, "Georgia");
  sub_100004950(&v610, "GE");
  __int16 v612 = 1283;
  sub_1003AC140(v1975, (long long *)v613, (long long *)v608);
  sub_100004950(v606, "MW");
  sub_100004950(v601, "Malawi");
  sub_100004950(&v603, "MW");
  __int16 v605 = 1283;
  sub_1003AC140(v1976, (long long *)v606, (long long *)v601);
  sub_100004950(v599, "RW");
  sub_100004950(v594, "Rwanda");
  sub_100004950(&v596, "RW");
  __int16 v598 = 1283;
  sub_1003AC140(v1977, (long long *)v599, (long long *)v594);
  sub_100004950(v592, "SC");
  sub_100004950(v587, "Seychelles");
  sub_100004950(&v589, "SC");
  __int16 v591 = 1283;
  sub_1003AC140(v1978, (long long *)v592, (long long *)v587);
  sub_100004950(v585, "SZ");
  sub_100004950(v580, "Swaziland");
  sub_100004950(&v582, "SZ");
  __int16 v584 = 1283;
  sub_1003AC140(v1979, (long long *)v585, (long long *)v580);
  sub_100004950(v578, "QA");
  sub_100004950(v573, "Qatar");
  sub_100004950(&v575, "QA");
  __int16 v577 = 1283;
  sub_1003AC140(v1980, (long long *)v578, (long long *)v573);
  sub_100004950(v571, "JO");
  sub_100004950(v566, "Jordan");
  sub_100004950(&v568, "JO");
  __int16 v570 = 1283;
  sub_1003AC140(v1981, (long long *)v571, (long long *)v566);
  sub_100004950(v564, "BH");
  sub_100004950(v559, "Bahrain");
  sub_100004950(&v561, "BH");
  __int16 v563 = 1283;
  sub_1003AC140(v1982, (long long *)v564, (long long *)v559);
  sub_100004950(v557, "AD");
  sub_100004950(v552, "Andorra");
  sub_100004950(&v554, "AD");
  __int16 v556 = 1283;
  sub_1003AC140(v1983, (long long *)v557, (long long *)v552);
  sub_100004950(v550, "CM");
  sub_100004950(v545, "CAMEROON");
  sub_100004950(&v547, "CM");
  __int16 v549 = 1283;
  sub_1003AC140(v1984, (long long *)v550, (long long *)v545);
  sub_100004950(v543, "CV");
  sub_100004950(v538, "CAPE VERDE");
  sub_100004950(&v540, "CV");
  __int16 v542 = 1283;
  sub_1003AC140(v1985, (long long *)v543, (long long *)v538);
  sub_100004950(v536, "GF");
  sub_100004950(v531, "French Guinea");
  sub_100004950(&v533, "GF");
  __int16 v535 = 1283;
  sub_1003AC140(v1986, (long long *)v536, (long long *)v531);
  sub_100004950(v529, "GG");
  sub_100004950(v524, "Guernsey");
  sub_100004950(&v526, "GG");
  __int16 v528 = 1283;
  sub_1003AC140(v1987, (long long *)v529, (long long *)v524);
  sub_100004950(v522, "IO");
  sub_100004950(v517, "BRITISH INDIAN OCEAN TERRITORY");
  sub_100004950(&v519, "IO");
  __int16 v521 = 1283;
  sub_1003AC140(v1988, (long long *)v522, (long long *)v517);
  sub_100004950(v515, "MR");
  sub_100004950(v510, "MAURITANIA");
  sub_100004950(&v512, "MR");
  __int16 v514 = 1283;
  sub_1003AC140(v1989, (long long *)v515, (long long *)v510);
  sub_100004950(v508, "NG");
  sub_100004950(v503, "NIGERIA");
  sub_100004950(&v505, "NG");
  __int16 v507 = 1283;
  sub_1003AC140(v1990, (long long *)v508, (long long *)v503);
  sub_100004950(v501, "NR");
  sub_100004950(v496, "NAURU");
  sub_100004950(&v498, "NR");
  __int16 v500 = 514;
  sub_1003AC140(v1991, (long long *)v501, (long long *)v496);
  sub_100004950(v494, "PN");
  sub_100004950(v489, "PITCAIRN");
  sub_100004950(&v491, "PN");
  __int16 v493 = 514;
  sub_1003AC140(v1992, (long long *)v494, (long long *)v489);
  sub_100004950(v487, "SB");
  sub_100004950(v482, "SOLOMON ISLANDS");
  sub_100004950(&v484, "SB");
  __int16 v486 = 514;
  sub_1003AC140(v1993, (long long *)v487, (long long *)v482);
  sub_100004950(v480, "SL");
  sub_100004950(v475, "SIERRA LEONE");
  sub_100004950(&v477, "SL");
  __int16 v479 = 1283;
  sub_1003AC140(v1994, (long long *)v480, (long long *)v475);
  sub_100004950(v473, "ST");
  sub_100004950(v468, "SAO TOME AND PRINCIPE");
  sub_100004950(&v470, "ST");
  __int16 v472 = 1283;
  sub_1003AC140(v1995, (long long *)v473, (long long *)v468);
  sub_100004950(v466, "TF");
  sub_100004950(v461, "FRENCH SOUTHERN TERRITORIES");
  sub_100004950(&v463, "TF");
  __int16 v465 = 0;
  sub_1003AC140(v1996, (long long *)v466, (long long *)v461);
  sub_100004950(v459, "TM");
  sub_100004950(v454, "TURKMENISTAN");
  sub_100004950(&v456, "TM");
  __int16 v458 = 1283;
  sub_1003AC140(v1997, (long long *)v459, (long long *)v454);
  sub_100004950(v452, "VA");
  sub_100004950(v447, "HOLY SEE (VATICAN CITY STATE)");
  sub_100004950(&v449, "VA");
  __int16 v451 = 1283;
  sub_1003AC140(v1998, (long long *)v452, (long long *)v447);
  sub_100004950(v445, "WF");
  sub_100004950(v440, "WALLIS AND FUTUNA");
  sub_100004950(&v442, "WF");
  __int16 v444 = 1283;
  sub_1003AC140(v1999, (long long *)v445, (long long *)v440);
  sub_100004950(v438, "YT");
  sub_100004950(v433, "MAYOTTE");
  sub_100004950(&v435, "YT");
  __int16 v437 = 1283;
  sub_1003AC140(v2000, (long long *)v438, (long long *)v433);
  sub_100004950(v431, "ER");
  sub_100004950(v426, "ERITREA");
  sub_100004950(&v428, "ER");
  __int16 v430 = 1283;
  sub_1003AC140(v2001, (long long *)v431, (long long *)v426);
  sub_100004950(v424, "FO");
  sub_100004950(v419, "FAROE ISLANDS");
  sub_100004950(&v421, "FO");
  __int16 v423 = 1283;
  sub_1003AC140(v2002, (long long *)v424, (long long *)v419);
  sub_100004950(v417, "SO");
  sub_100004950(v412, "SOMALIA");
  sub_100004950(&v414, "SO");
  __int16 v416 = 1283;
  sub_1003AC140(v2003, (long long *)v417, (long long *)v412);
  sub_100004950(v410, "KM");
  sub_100004950(v405, "Comoros");
  sub_100004950(&v407, "KM");
  __int16 v409 = 1283;
  sub_1003AC140(v2004, (long long *)v410, (long long *)v405);
  sub_100004950(v403, "DJ");
  sub_100004950(v398, "Djibouti");
  sub_100004950(&v400, "DJ");
  __int16 v402 = 1283;
  sub_1003AC140(v2005, (long long *)v403, (long long *)v398);
  sub_100004950(v396, "FK");
  sub_100004950(v391, "Falklands");
  sub_100004950(&v393, "FK");
  __int16 v395 = 1283;
  sub_1003AC140(v2006, (long long *)v396, (long long *)v391);
  sub_100004950(v389, "SM");
  sub_100004950(v384, "San Marino");
  sub_100004950(&v386, "SM");
  __int16 v388 = 1283;
  sub_1003AC140(v2007, (long long *)v389, (long long *)v384);
  sub_100004950(v382, "SH");
  sub_100004950(v377, "Saint Helena Ascension");
  sub_100004950(&v379, "SH");
  __int16 v381 = 1283;
  sub_1003AC140(v2008, (long long *)v382, (long long *)v377);
  sub_100004950(v375, "BW");
  sub_100004950(v370, "Botswana");
  sub_100004950(&v372, "BW");
  __int16 v374 = 1283;
  sub_1003AC140(v2009, (long long *)v375, (long long *)v370);
  sub_100004950(v368, "PS");
  sub_100004950(v363, "Palestine");
  sub_100004950(&v365, "PS");
  __int16 v367 = 1283;
  sub_1003AC140(v2010, (long long *)v368, (long long *)v363);
  sub_100004950(v361, "TJ");
  sub_100004950(v356, "Tajikistan");
  sub_100004950(&v358, "TJ");
  __int16 v360 = 1283;
  sub_1003AC140(v2011, (long long *)v361, (long long *)v356);
  sub_100004950(v354, "PM");
  sub_100004950(v349, "Saint Pierre et Miquelon");
  sub_100004950(&v351, "PM");
  __int16 v353 = 1283;
  sub_1003AC140(v2012, (long long *)v354, (long long *)v349);
  sub_100004950(v347, "IL");
  sub_100004950(v342, "Israel");
  sub_100004950(&v344, "IL");
  __int16 v346 = 1283;
  sub_1003AC140(v2013, (long long *)v347, (long long *)v342);
  sub_100004950(v340, "XK");
  sub_100004950(v335, "Kosovo");
  sub_100004950(&v337, "XK");
  __int16 v339 = 1283;
  sub_1003AC140(v2014, (long long *)v340, (long long *)v335);
  sub_100004950(v333, "TN");
  sub_100004950(v328, "Tunisia");
  sub_100004950(&v330, "TN");
  __int16 v332 = 1283;
  sub_1003AC140(v2015, (long long *)v333, (long long *)v328);
  sub_100004950(v326, "TO");
  sub_100004950(v321, "TONGA");
  sub_100004950(&v323, "TO");
  __int16 v325 = 514;
  sub_1003AC140(v2016, (long long *)v326, (long long *)v321);
  sub_100004950(v319, "YE");
  sub_100004950(v314, "YEMEN");
  sub_100004950(&v316, "YE");
  __int16 v318 = 1283;
  sub_1003AC140(v2017, (long long *)v319, (long long *)v314);
  sub_100004950(v312, "TL");
  sub_100004950(v307, "East Timor ");
  sub_100004950(&v309, "TL");
  __int16 v311 = 514;
  sub_1003AC140(v2018, (long long *)v312, (long long *)v307);
  sub_100004950(v305, "A0");
  sub_100004950(v300, "Abkhazia");
  sub_100004950(&v302, "A0");
  __int16 v304 = 1283;
  sub_1003AC140(v2019, (long long *)v305, (long long *)v300);
  sub_100004950(v298, "A2");
  sub_100004950(v293, "French West Indies");
  sub_100004950(&v295, "A2");
  __int16 v297 = 515;
  sub_1003AC140(v2020, (long long *)v298, (long long *)v293);
  sub_100004950(v291, "BV");
  sub_100004950(v286, "Bouvet Island [Norway]");
  sub_100004950(&v288, "BV");
  __int16 v290 = 1283;
  sub_1003AC140(v2021, (long long *)v291, (long long *)v286);
  sub_100004950(v284, "IM");
  sub_100004950(v279, "Isle of Man [United Kingdom]");
  sub_100004950(&v281, "IM");
  __int16 v283 = 1283;
  sub_1003AC140(v2022, (long long *)v284, (long long *)v279);
  sub_100004950(v277, "JE");
  sub_100004950(v272, "Jersey [United Kingdom]");
  sub_100004950(&v274, "JE");
  __int16 v276 = 1283;
  sub_1003AC140(v2023, (long long *)v277, (long long *)v272);
  sub_100004950(v270, "KI");
  sub_100004950(v265, "Kiribati");
  sub_100004950(&v267, "KI");
  __int16 v269 = 514;
  sub_1003AC140(v2024, (long long *)v270, (long long *)v265);
  sub_100004950(v263, "GS");
  sub_100004950(v258, "South Georgia and the South Sandwich Islands [United Kingdom]");
  sub_100004950(&v260, "GS");
  __int16 v262 = 1;
  sub_1003AC140(v2025, (long long *)v263, (long long *)v258);
  sub_100004950(v256, "SJ");
  sub_100004950(v251, "Svalbard and Jan Mayen [Norway]");
  sub_100004950(&v253, "SJ");
  __int16 v255 = 1283;
  sub_1003AC140(v2026, (long long *)v256, (long long *)v251);
  sub_100004950(v249, "EH");
  sub_100004950(v244, "Western Sahara");
  sub_100004950(&v246, "EH");
  __int16 v248 = 1283;
  sub_1003AC140(v2027, (long long *)v249, (long long *)v244);
  sub_100004950(v242, "A4");
  sub_100004950(v237, "Netherlands Antilles [Netherlands]");
  sub_100004950(&v239, "A4");
  __int16 v241 = 1;
  sub_1003AC140(v2028, (long long *)v242, (long long *)v237);
  sub_100004950(v235, "A5");
  sub_100004950(v230, "Tahiti");
  sub_100004950(&v232, "A5");
  __int16 v234 = 1283;
  sub_1003AC140(v2029, (long long *)v235, (long long *)v230);
  sub_100004950(v228, "KR");
  sub_100004950(v223, "South Korea");
  sub_100004950(&v225, "KR");
  __int16 v227 = 769;
  sub_1003AC140(v2030, (long long *)v228, (long long *)v223);
  sub_100004950(v221, "MX");
  sub_100004950(v216, "Mexico");
  sub_100004950(&v218, "MX");
  __int16 v220 = 1026;
  sub_1003AC140(v2031, (long long *)v221, (long long *)v216);
  sub_100004950(v214, "BR");
  sub_100004950(v209, "Brazil");
  sub_100004950(&v211, "BR");
  __int16 v213 = 1026;
  sub_1003AC140(v2032, (long long *)v214, (long long *)v209);
  sub_100004950(v207, "AU");
  sub_100004950(v202, "Australia");
  sub_100004950(&v204, "AU");
  __int16 v206 = 1026;
  sub_1003AC140(v2033, (long long *)v207, (long long *)v202);
  sub_100004950(v200, "NZ");
  sub_100004950(v195, "New Zealand");
  sub_100004950(&v197, "NZ");
  __int16 v199 = 1026;
  sub_1003AC140(v2034, (long long *)v200, (long long *)v195);
  sub_100004950(v193, "MY");
  sub_100004950(v188, "Malaysia");
  sub_100004950(&v190, "MY");
  __int16 v192 = 1026;
  sub_1003AC140(v2035, (long long *)v193, (long long *)v188);
  sub_100004950(v186, "TH");
  sub_100004950(v181, "Thailand");
  sub_100004950(&v183, "TH");
  __int16 v185 = 1026;
  sub_1003AC140(v2036, (long long *)v186, (long long *)v181);
  sub_100004950(v179, "TW");
  sub_100004950(v174, "Taiwan");
  sub_100004950(&v176, "TW");
  __int16 v178 = 1026;
  sub_1003AC140(v2037, (long long *)v179, (long long *)v174);
  sub_100004950(v172, "NP");
  sub_100004950(v167, "Nepal");
  sub_100004950(&v169, "NP");
  __int16 v171 = 1026;
  sub_1003AC140(v2038, (long long *)v172, (long long *)v167);
  sub_100004950(v165, "FJ");
  sub_100004950(v160, "Fiji");
  sub_100004950(&v162, "FJ");
  __int16 v164 = 1026;
  sub_1003AC140(v2039, (long long *)v165, (long long *)v160);
  sub_100004950(v158, "CC");
  sub_100004950(v153, "Cocos Islands");
  sub_100004950(&v155, "CC");
  __int16 v157 = 1026;
  sub_1003AC140(v2040, (long long *)v158, (long long *)v153);
  sub_100004950(v151, "CK");
  sub_100004950(v146, "COOK ISLANDS");
  sub_100004950(&v148, "CK");
  __int16 v150 = 1026;
  sub_1003AC140(v2041, (long long *)v151, (long long *)v146);
  sub_100004950(v144, "CX");
  sub_100004950(v139, "Christmas Islands");
  sub_100004950(&v141, "CX");
  __int16 v143 = 1026;
  sub_1003AC140(v2042, (long long *)v144, (long long *)v139);
  sub_100004950(v137, "HM");
  sub_100004950(v132, "Heard Island and MCDonald");
  sub_100004950(&v134, "HM");
  __int16 v136 = 1026;
  sub_1003AC140(v2043, (long long *)v137, (long long *)v132);
  sub_100004950(v130, "NU");
  sub_100004950(v125, "NIUE");
  sub_100004950(&v127, "NU");
  __int16 v129 = 1026;
  sub_1003AC140(v2044, (long long *)v130, (long long *)v125);
  sub_100004950(v123, "TK");
  sub_100004950(v118, "TOKELAU");
  sub_100004950(&v120, "TK");
  __int16 v122 = 1026;
  sub_1003AC140(v2045, (long long *)v123, (long long *)v118);
  sub_100004950(v116, "TV");
  sub_100004950(v111, "TUVALU");
  sub_100004950(&v113, "TV");
  __int16 v115 = 1026;
  sub_1003AC140(v2046, (long long *)v116, (long long *)v111);
  sub_100004950(v109, "RU");
  sub_100004950(v104, "Russia");
  sub_100004950(&v106, "RU");
  __int16 v108 = -510;
  sub_1003AC140(v2047, (long long *)v109, (long long *)v104);
  sub_100004950(v102, "SS");
  sub_100004950(v97, "South Sudan");
  sub_100004950(&v99, "SS");
  __int16 v101 = -509;
  sub_1003AC140(v2048, (long long *)v102, (long long *)v97);
  sub_100004950(v95, "XZ");
  sub_100004950(v90, "");
  sub_100004950(&v92, "XZ");
  __int16 v94 = -512;
  sub_1003AC140(v2049, (long long *)v95, (long long *)v90);
  sub_100004950(v88, "A6");
  sub_100004950(v83, "International Water");
  sub_100004950(&v85, "A6");
  __int16 v87 = -512;
  sub_1003AC140(v2050, (long long *)v88, (long long *)v83);
  sub_100004950(v81, "KP");
  sub_100004950(v76, "North Korea");
  sub_100004950(&v78, "KP");
  __int16 v80 = -512;
  sub_1003AC140(v2051, (long long *)v81, (long long *)v76);
  sub_100004950(v74, "JP");
  sub_100004950(v69, "Japan");
  sub_100004950(&v71, "JP");
  __int16 v73 = -510;
  sub_1003AC140(v2052, (long long *)v74, (long long *)v69);
  sub_100004950(v67, "CU");
  sub_100004950(v62, "Cuba");
  sub_100004950(&v64, "CU");
  __int16 v66 = -511;
  sub_1003AC140(v2053, (long long *)v67, (long long *)v62);
  sub_100004950(v60, "IR");
  sub_100004950(v55, "Iran");
  sub_100004950(&v57, "IR");
  __int16 v59 = -509;
  sub_1003AC140(v2054, (long long *)v60, (long long *)v55);
  sub_100004950(v53, "SD");
  sub_100004950(v48, "Sudan");
  sub_100004950(&v50, "SD");
  __int16 v52 = -509;
  sub_1003AC140(v2055, (long long *)v53, (long long *)v48);
  sub_100004950(v46, "SY");
  sub_100004950(v41, "Syria");
  sub_100004950(&v43, "SY");
  __int16 v45 = -509;
  sub_1003AC140(v2056, (long long *)v46, (long long *)v41);
  sub_100004950(v39, "A1");
  sub_100004950(v34, "Bajo Nueva Bank");
  sub_100004950(&v36, "A1");
  __int16 v38 = -512;
  sub_1003AC140(v2057, (long long *)v39, (long long *)v34);
  sub_100004950(v32, "A3");
  sub_100004950(v27, "Serranilla Bank");
  sub_100004950(&v29, "A3");
  __int16 v31 = -512;
  sub_1003AC140(v2058, (long long *)v32, (long long *)v27);
  sub_100004950(v25, "AQ");
  sub_100004950(v20, "Antartica");
  sub_100004950(&v22, "AQ");
  __int16 v24 = -512;
  sub_1003AC140(v2059, (long long *)v25, (long long *)v20);
  sub_100004950(v18, "NF");
  sub_100004950(v13, "Norfolk Island [Australia]");
  sub_100004950(&v15, "NF");
  __int16 v17 = -512;
  sub_1003AC140(v2060, (long long *)v18, (long long *)v13);
  sub_100004950(v11, off_10089F758[0]);
  sub_100004950(v6, "kUnknownCountry");
  sub_100004950(&__p, off_10089F758[0]);
  __int16 v10 = 1;
  sub_1003AC140(v2061, (long long *)v11, (long long *)v6);
  sub_1003AC6F8((uint64_t)qword_1008AC600, v1805, 257);
  unint64_t v3 = 20560;
  do
  {
    long long v4 = &v1805[v3];
    if (SHIBYTE(v1803[v3 / 8 + 1]) < 0) {
      operator delete(*((void **)v4 - 4));
    }
    if ((char)*(v4 - 33) < 0) {
      operator delete(*((void **)v4 - 7));
    }
    if (*(&v1799 + v3) < 0) {
      operator delete(*((void **)v4 - 10));
    }
    v3 -= 80;
  }
  while (v3);
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (v51 < 0) {
    operator delete(v50);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  if (v65 < 0) {
    operator delete(v64);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  if (v68 < 0) {
    operator delete(v67[0]);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v75 < 0) {
    operator delete(v74[0]);
  }
  if (v79 < 0) {
    operator delete(v78);
  }
  if (v77 < 0) {
    operator delete(v76[0]);
  }
  if (v82 < 0) {
    operator delete(v81[0]);
  }
  if (v86 < 0) {
    operator delete(v85);
  }
  if (v84 < 0) {
    operator delete(v83[0]);
  }
  if (v89 < 0) {
    operator delete(v88[0]);
  }
  if (v93 < 0) {
    operator delete(v92);
  }
  if (v91 < 0) {
    operator delete(v90[0]);
  }
  if (v96 < 0) {
    operator delete(v95[0]);
  }
  if (v100 < 0) {
    operator delete(v99);
  }
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v103 < 0) {
    operator delete(v102[0]);
  }
  if (v107 < 0) {
    operator delete(v106);
  }
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if (v110 < 0) {
    operator delete(v109[0]);
  }
  if (v114 < 0) {
    operator delete(v113);
  }
  if (v112 < 0) {
    operator delete(v111[0]);
  }
  if (v117 < 0) {
    operator delete(v116[0]);
  }
  if (v121 < 0) {
    operator delete(v120);
  }
  if (v119 < 0) {
    operator delete(v118[0]);
  }
  if (v124 < 0) {
    operator delete(v123[0]);
  }
  if (v128 < 0) {
    operator delete(v127);
  }
  if (v126 < 0) {
    operator delete(v125[0]);
  }
  if (v131 < 0) {
    operator delete(v130[0]);
  }
  if (v135 < 0) {
    operator delete(v134);
  }
  if (v133 < 0) {
    operator delete(v132[0]);
  }
  if (v138 < 0) {
    operator delete(v137[0]);
  }
  if (v142 < 0) {
    operator delete(v141);
  }
  if (v140 < 0) {
    operator delete(v139[0]);
  }
  if (v145 < 0) {
    operator delete(v144[0]);
  }
  if (v149 < 0) {
    operator delete(v148);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  if (v152 < 0) {
    operator delete(v151[0]);
  }
  if (v156 < 0) {
    operator delete(v155);
  }
  if (v154 < 0) {
    operator delete(v153[0]);
  }
  if (v159 < 0) {
    operator delete(v158[0]);
  }
  if (v163 < 0) {
    operator delete(v162);
  }
  if (v161 < 0) {
    operator delete(v160[0]);
  }
  if (v166 < 0) {
    operator delete(v165[0]);
  }
  if (v170 < 0) {
    operator delete(v169);
  }
  if (v168 < 0) {
    operator delete(v167[0]);
  }
  if (v173 < 0) {
    operator delete(v172[0]);
  }
  if (v177 < 0) {
    operator delete(v176);
  }
  if (v175 < 0) {
    operator delete(v174[0]);
  }
  if (v180 < 0) {
    operator delete(v179[0]);
  }
  if (v184 < 0) {
    operator delete(v183);
  }
  if (v182 < 0) {
    operator delete(v181[0]);
  }
  if (v187 < 0) {
    operator delete(v186[0]);
  }
  if (v191 < 0) {
    operator delete(v190);
  }
  if (v189 < 0) {
    operator delete(v188[0]);
  }
  if (v194 < 0) {
    operator delete(v193[0]);
  }
  if (v198 < 0) {
    operator delete(v197);
  }
  if (v196 < 0) {
    operator delete(v195[0]);
  }
  if (v201 < 0) {
    operator delete(v200[0]);
  }
  if (v205 < 0) {
    operator delete(v204);
  }
  if (v203 < 0) {
    operator delete(v202[0]);
  }
  if (v208 < 0) {
    operator delete(v207[0]);
  }
  if (v212 < 0) {
    operator delete(v211);
  }
  if (v210 < 0) {
    operator delete(v209[0]);
  }
  if (v215 < 0) {
    operator delete(v214[0]);
  }
  if (v219 < 0) {
    operator delete(v218);
  }
  if (v217 < 0) {
    operator delete(v216[0]);
  }
  if (v222 < 0) {
    operator delete(v221[0]);
  }
  if (v226 < 0) {
    operator delete(v225);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  if (v229 < 0) {
    operator delete(v228[0]);
  }
  if (v233 < 0) {
    operator delete(v232);
  }
  if (v231 < 0) {
    operator delete(v230[0]);
  }
  if (v236 < 0) {
    operator delete(v235[0]);
  }
  if (v240 < 0) {
    operator delete(v239);
  }
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  if (v243 < 0) {
    operator delete(v242[0]);
  }
  if (v247 < 0) {
    operator delete(v246);
  }
  if (v245 < 0) {
    operator delete(v244[0]);
  }
  if (v250 < 0) {
    operator delete(v249[0]);
  }
  if (v254 < 0) {
    operator delete(v253);
  }
  if (v252 < 0) {
    operator delete(v251[0]);
  }
  if (v257 < 0) {
    operator delete(v256[0]);
  }
  if (v261 < 0) {
    operator delete(v260);
  }
  if (v259 < 0) {
    operator delete(v258[0]);
  }
  if (v264 < 0) {
    operator delete(v263[0]);
  }
  if (v268 < 0) {
    operator delete(v267);
  }
  if (v266 < 0) {
    operator delete(v265[0]);
  }
  if (v271 < 0) {
    operator delete(v270[0]);
  }
  if (v275 < 0) {
    operator delete(v274);
  }
  if (v273 < 0) {
    operator delete(v272[0]);
  }
  if (v278 < 0) {
    operator delete(v277[0]);
  }
  if (v282 < 0) {
    operator delete(v281);
  }
  if (v280 < 0) {
    operator delete(v279[0]);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  if (v289 < 0) {
    operator delete(v288);
  }
  if (v287 < 0) {
    operator delete(v286[0]);
  }
  if (v292 < 0) {
    operator delete(v291[0]);
  }
  if (v296 < 0) {
    operator delete(v295);
  }
  if (v294 < 0) {
    operator delete(v293[0]);
  }
  if (v299 < 0) {
    operator delete(v298[0]);
  }
  if (v303 < 0) {
    operator delete(v302);
  }
  if (v301 < 0) {
    operator delete(v300[0]);
  }
  if (v306 < 0) {
    operator delete(v305[0]);
  }
  if (v310 < 0) {
    operator delete(v309);
  }
  if (v308 < 0) {
    operator delete(v307[0]);
  }
  if (v313 < 0) {
    operator delete(v312[0]);
  }
  if (v317 < 0) {
    operator delete(v316);
  }
  if (v315 < 0) {
    operator delete(v314[0]);
  }
  if (v320 < 0) {
    operator delete(v319[0]);
  }
  if (v324 < 0) {
    operator delete(v323);
  }
  if (v322 < 0) {
    operator delete(v321[0]);
  }
  if (v327 < 0) {
    operator delete(v326[0]);
  }
  if (v331 < 0) {
    operator delete(v330);
  }
  if (v329 < 0) {
    operator delete(v328[0]);
  }
  if (v334 < 0) {
    operator delete(v333[0]);
  }
  if (v338 < 0) {
    operator delete(v337);
  }
  if (v336 < 0) {
    operator delete(v335[0]);
  }
  if (v341 < 0) {
    operator delete(v340[0]);
  }
  if (v345 < 0) {
    operator delete(v344);
  }
  if (v343 < 0) {
    operator delete(v342[0]);
  }
  if (v348 < 0) {
    operator delete(v347[0]);
  }
  if (v352 < 0) {
    operator delete(v351);
  }
  if (v350 < 0) {
    operator delete(v349[0]);
  }
  if (v355 < 0) {
    operator delete(v354[0]);
  }
  if (v359 < 0) {
    operator delete(v358);
  }
  if (v357 < 0) {
    operator delete(v356[0]);
  }
  if (v362 < 0) {
    operator delete(v361[0]);
  }
  if (v366 < 0) {
    operator delete(v365);
  }
  if (v364 < 0) {
    operator delete(v363[0]);
  }
  if (v369 < 0) {
    operator delete(v368[0]);
  }
  if (v373 < 0) {
    operator delete(v372);
  }
  if (v371 < 0) {
    operator delete(v370[0]);
  }
  if (v376 < 0) {
    operator delete(v375[0]);
  }
  if (v380 < 0) {
    operator delete(v379);
  }
  if (v378 < 0) {
    operator delete(v377[0]);
  }
  if (v383 < 0) {
    operator delete(v382[0]);
  }
  if (v387 < 0) {
    operator delete(v386);
  }
  if (v385 < 0) {
    operator delete(v384[0]);
  }
  if (v390 < 0) {
    operator delete(v389[0]);
  }
  if (v394 < 0) {
    operator delete(v393);
  }
  if (v392 < 0) {
    operator delete(v391[0]);
  }
  if (v397 < 0) {
    operator delete(v396[0]);
  }
  if (v401 < 0) {
    operator delete(v400);
  }
  if (v399 < 0) {
    operator delete(v398[0]);
  }
  if (v404 < 0) {
    operator delete(v403[0]);
  }
  if (v408 < 0) {
    operator delete(v407);
  }
  if (v406 < 0) {
    operator delete(v405[0]);
  }
  if (v411 < 0) {
    operator delete(v410[0]);
  }
  if (v415 < 0) {
    operator delete(v414);
  }
  if (v413 < 0) {
    operator delete(v412[0]);
  }
  if (v418 < 0) {
    operator delete(v417[0]);
  }
  if (v422 < 0) {
    operator delete(v421);
  }
  if (v420 < 0) {
    operator delete(v419[0]);
  }
  if (v425 < 0) {
    operator delete(v424[0]);
  }
  if (v429 < 0) {
    operator delete(v428);
  }
  if (v427 < 0) {
    operator delete(v426[0]);
  }
  if (v432 < 0) {
    operator delete(v431[0]);
  }
  if (v436 < 0) {
    operator delete(v435);
  }
  if (v434 < 0) {
    operator delete(v433[0]);
  }
  if (v439 < 0) {
    operator delete(v438[0]);
  }
  if (v443 < 0) {
    operator delete(v442);
  }
  if (v441 < 0) {
    operator delete(v440[0]);
  }
  if (v446 < 0) {
    operator delete(v445[0]);
  }
  if (v450 < 0) {
    operator delete(v449);
  }
  if (v448 < 0) {
    operator delete(v447[0]);
  }
  if (v453 < 0) {
    operator delete(v452[0]);
  }
  if (v457 < 0) {
    operator delete(v456);
  }
  if (v455 < 0) {
    operator delete(v454[0]);
  }
  if (v460 < 0) {
    operator delete(v459[0]);
  }
  if (v464 < 0) {
    operator delete(v463);
  }
  if (v462 < 0) {
    operator delete(v461[0]);
  }
  if (v467 < 0) {
    operator delete(v466[0]);
  }
  if (v471 < 0) {
    operator delete(v470);
  }
  if (v469 < 0) {
    operator delete(v468[0]);
  }
  if (v474 < 0) {
    operator delete(v473[0]);
  }
  if (v478 < 0) {
    operator delete(v477);
  }
  if (v476 < 0) {
    operator delete(v475[0]);
  }
  if (v481 < 0) {
    operator delete(v480[0]);
  }
  if (v485 < 0) {
    operator delete(v484);
  }
  if (v483 < 0) {
    operator delete(v482[0]);
  }
  if (v488 < 0) {
    operator delete(v487[0]);
  }
  if (v492 < 0) {
    operator delete(v491);
  }
  if (v490 < 0) {
    operator delete(v489[0]);
  }
  if (v495 < 0) {
    operator delete(v494[0]);
  }
  if (v499 < 0) {
    operator delete(v498);
  }
  if (v497 < 0) {
    operator delete(v496[0]);
  }
  if (v502 < 0) {
    operator delete(v501[0]);
  }
  if (v506 < 0) {
    operator delete(v505);
  }
  if (v504 < 0) {
    operator delete(v503[0]);
  }
  if (v509 < 0) {
    operator delete(v508[0]);
  }
  if (v513 < 0) {
    operator delete(v512);
  }
  if (v511 < 0) {
    operator delete(v510[0]);
  }
  if (v516 < 0) {
    operator delete(v515[0]);
  }
  if (v520 < 0) {
    operator delete(v519);
  }
  if (v518 < 0) {
    operator delete(v517[0]);
  }
  if (v523 < 0) {
    operator delete(v522[0]);
  }
  if (v527 < 0) {
    operator delete(v526);
  }
  if (v525 < 0) {
    operator delete(v524[0]);
  }
  if (v530 < 0) {
    operator delete(v529[0]);
  }
  if (v534 < 0) {
    operator delete(v533);
  }
  if (v532 < 0) {
    operator delete(v531[0]);
  }
  if (v537 < 0) {
    operator delete(v536[0]);
  }
  if (v541 < 0) {
    operator delete(v540);
  }
  if (v539 < 0) {
    operator delete(v538[0]);
  }
  if (v544 < 0) {
    operator delete(v543[0]);
  }
  if (v548 < 0) {
    operator delete(v547);
  }
  if (v546 < 0) {
    operator delete(v545[0]);
  }
  if (v551 < 0) {
    operator delete(v550[0]);
  }
  if (v555 < 0) {
    operator delete(v554);
  }
  if (v553 < 0) {
    operator delete(v552[0]);
  }
  if (v558 < 0) {
    operator delete(v557[0]);
  }
  if (v562 < 0) {
    operator delete(v561);
  }
  if (v560 < 0) {
    operator delete(v559[0]);
  }
  if (v565 < 0) {
    operator delete(v564[0]);
  }
  if (v569 < 0) {
    operator delete(v568);
  }
  if (v567 < 0) {
    operator delete(v566[0]);
  }
  if (v572 < 0) {
    operator delete(v571[0]);
  }
  if (v576 < 0) {
    operator delete(v575);
  }
  if (v574 < 0) {
    operator delete(v573[0]);
  }
  if (v579 < 0) {
    operator delete(v578[0]);
  }
  if (v583 < 0) {
    operator delete(v582);
  }
  if (v581 < 0) {
    operator delete(v580[0]);
  }
  if (v586 < 0) {
    operator delete(v585[0]);
  }
  if (v590 < 0) {
    operator delete(v589);
  }
  if (v588 < 0) {
    operator delete(v587[0]);
  }
  if (v593 < 0) {
    operator delete(v592[0]);
  }
  if (v597 < 0) {
    operator delete(v596);
  }
  if (v595 < 0) {
    operator delete(v594[0]);
  }
  if (v600 < 0) {
    operator delete(v599[0]);
  }
  if (v604 < 0) {
    operator delete(v603);
  }
  if (v602 < 0) {
    operator delete(v601[0]);
  }
  if (v607 < 0) {
    operator delete(v606[0]);
  }
  if (v611 < 0) {
    operator delete(v610);
  }
  if (v609 < 0) {
    operator delete(v608[0]);
  }
  if (v614 < 0) {
    operator delete(v613[0]);
  }
  if (v618 < 0) {
    operator delete(v617);
  }
  if (v616 < 0) {
    operator delete(v615[0]);
  }
  if (v621 < 0) {
    operator delete(v620[0]);
  }
  if (v625 < 0) {
    operator delete(v624);
  }
  if (v623 < 0) {
    operator delete(v622[0]);
  }
  if (v628 < 0) {
    operator delete(v627[0]);
  }
  if (v632 < 0) {
    operator delete(v631);
  }
  if (v630 < 0) {
    operator delete(v629[0]);
  }
  if (v635 < 0) {
    operator delete(v634[0]);
  }
  if (v639 < 0) {
    operator delete(v638);
  }
  if (v637 < 0) {
    operator delete(v636[0]);
  }
  if (v642 < 0) {
    operator delete(v641[0]);
  }
  if (v646 < 0) {
    operator delete(v645);
  }
  if (v644 < 0) {
    operator delete(v643[0]);
  }
  if (v649 < 0) {
    operator delete(v648[0]);
  }
  if (v653 < 0) {
    operator delete(v652);
  }
  if (v651 < 0) {
    operator delete(v650[0]);
  }
  if (v656 < 0) {
    operator delete(v655[0]);
  }
  if (v660 < 0) {
    operator delete(v659);
  }
  if (v658 < 0) {
    operator delete(v657[0]);
  }
  if (v663 < 0) {
    operator delete(v662[0]);
  }
  if (v667 < 0) {
    operator delete(v666);
  }
  if (v665 < 0) {
    operator delete(v664[0]);
  }
  if (v670 < 0) {
    operator delete(v669[0]);
  }
  if (v674 < 0) {
    operator delete(v673);
  }
  if (v672 < 0) {
    operator delete(v671[0]);
  }
  if (v677 < 0) {
    operator delete(v676[0]);
  }
  if (v681 < 0) {
    operator delete(v680);
  }
  if (v679 < 0) {
    operator delete(v678[0]);
  }
  if (v684 < 0) {
    operator delete(v683[0]);
  }
  if (v688 < 0) {
    operator delete(v687);
  }
  if (v686 < 0) {
    operator delete(v685[0]);
  }
  if (v691 < 0) {
    operator delete(v690[0]);
  }
  if (v695 < 0) {
    operator delete(v694);
  }
  if (v693 < 0) {
    operator delete(v692[0]);
  }
  if (v698 < 0) {
    operator delete(v697[0]);
  }
  if (v702 < 0) {
    operator delete(v701);
  }
  if (v700 < 0) {
    operator delete(v699[0]);
  }
  if (v705 < 0) {
    operator delete(v704[0]);
  }
  if (v709 < 0) {
    operator delete(v708);
  }
  if (v707 < 0) {
    operator delete(v706[0]);
  }
  if (v712 < 0) {
    operator delete(v711[0]);
  }
  if (v716 < 0) {
    operator delete(v715);
  }
  if (v714 < 0) {
    operator delete(v713[0]);
  }
  if (v719 < 0) {
    operator delete(v718[0]);
  }
  if (v723 < 0) {
    operator delete(v722);
  }
  if (v721 < 0) {
    operator delete(v720[0]);
  }
  if (v726 < 0) {
    operator delete(v725[0]);
  }
  if (v730 < 0) {
    operator delete(v729);
  }
  if (v728 < 0) {
    operator delete(v727[0]);
  }
  if (v733 < 0) {
    operator delete(v732[0]);
  }
  if (v737 < 0) {
    operator delete(v736);
  }
  if (v735 < 0) {
    operator delete(v734[0]);
  }
  if (v740 < 0) {
    operator delete(v739[0]);
  }
  if (v744 < 0) {
    operator delete(v743);
  }
  if (v742 < 0) {
    operator delete(v741[0]);
  }
  if (v747 < 0) {
    operator delete(v746[0]);
  }
  if (v751 < 0) {
    operator delete(v750);
  }
  if (v749 < 0) {
    operator delete(v748[0]);
  }
  if (v754 < 0) {
    operator delete(v753[0]);
  }
  if (v758 < 0) {
    operator delete(v757);
  }
  if (v756 < 0) {
    operator delete(v755[0]);
  }
  if (v761 < 0) {
    operator delete(v760[0]);
  }
  if (v765 < 0) {
    operator delete(v764);
  }
  if (v763 < 0) {
    operator delete(v762[0]);
  }
  if (v768 < 0) {
    operator delete(v767[0]);
  }
  if (v772 < 0) {
    operator delete(v771);
  }
  if (v770 < 0) {
    operator delete(v769[0]);
  }
  if (v775 < 0) {
    operator delete(v774[0]);
  }
  if (v779 < 0) {
    operator delete(v778);
  }
  if (v777 < 0) {
    operator delete(v776[0]);
  }
  if (v782 < 0) {
    operator delete(v781[0]);
  }
  if (v786 < 0) {
    operator delete(v785);
  }
  if (v784 < 0) {
    operator delete(v783[0]);
  }
  if (v789 < 0) {
    operator delete(v788[0]);
  }
  if (v793 < 0) {
    operator delete(v792);
  }
  if (v791 < 0) {
    operator delete(v790[0]);
  }
  if (v796 < 0) {
    operator delete(v795[0]);
  }
  if (v800 < 0) {
    operator delete(v799);
  }
  if (v798 < 0) {
    operator delete(v797[0]);
  }
  if (v803 < 0) {
    operator delete(v802[0]);
  }
  if (v807 < 0) {
    operator delete(v806);
  }
  if (v805 < 0) {
    operator delete(v804[0]);
  }
  if (v810 < 0) {
    operator delete(v809[0]);
  }
  if (v814 < 0) {
    operator delete(v813);
  }
  if (v812 < 0) {
    operator delete(v811[0]);
  }
  if (v817 < 0) {
    operator delete(v816[0]);
  }
  if (v821 < 0) {
    operator delete(v820);
  }
  if (v819 < 0) {
    operator delete(v818[0]);
  }
  if (v824 < 0) {
    operator delete(v823[0]);
  }
  if (v828 < 0) {
    operator delete(v827);
  }
  if (v826 < 0) {
    operator delete(v825[0]);
  }
  if (v831 < 0) {
    operator delete(v830[0]);
  }
  if (v835 < 0) {
    operator delete(v834);
  }
  if (v833 < 0) {
    operator delete(v832[0]);
  }
  if (v838 < 0) {
    operator delete(v837[0]);
  }
  if (v842 < 0) {
    operator delete(v841);
  }
  if (v840 < 0) {
    operator delete(v839[0]);
  }
  if (v845 < 0) {
    operator delete(v844[0]);
  }
  if (v849 < 0) {
    operator delete(v848);
  }
  if (v847 < 0) {
    operator delete(v846[0]);
  }
  if (v852 < 0) {
    operator delete(v851[0]);
  }
  if (v856 < 0) {
    operator delete(v855);
  }
  if (v854 < 0) {
    operator delete(v853[0]);
  }
  if (v859 < 0) {
    operator delete(v858[0]);
  }
  if (v863 < 0) {
    operator delete(v862);
  }
  if (v861 < 0) {
    operator delete(v860[0]);
  }
  if (v866 < 0) {
    operator delete(v865[0]);
  }
  if (v870 < 0) {
    operator delete(v869);
  }
  if (v868 < 0) {
    operator delete(v867[0]);
  }
  if (v873 < 0) {
    operator delete(v872[0]);
  }
  if (v877 < 0) {
    operator delete(v876);
  }
  if (v875 < 0) {
    operator delete(v874[0]);
  }
  if (v880 < 0) {
    operator delete(v879[0]);
  }
  if (v884 < 0) {
    operator delete(v883);
  }
  if (v882 < 0) {
    operator delete(v881[0]);
  }
  if (v887 < 0) {
    operator delete(v886[0]);
  }
  if (v891 < 0) {
    operator delete(v890);
  }
  if (v889 < 0) {
    operator delete(v888[0]);
  }
  if (v894 < 0) {
    operator delete(v893[0]);
  }
  if (v898 < 0) {
    operator delete(v897);
  }
  if (v896 < 0) {
    operator delete(v895[0]);
  }
  if (v901 < 0) {
    operator delete(v900[0]);
  }
  if (v905 < 0) {
    operator delete(v904);
  }
  if (v903 < 0) {
    operator delete(v902[0]);
  }
  if (v908 < 0) {
    operator delete(v907[0]);
  }
  if (v912 < 0) {
    operator delete(v911);
  }
  if (v910 < 0) {
    operator delete(v909[0]);
  }
  if (v915 < 0) {
    operator delete(v914[0]);
  }
  if (v919 < 0) {
    operator delete(v918);
  }
  if (v917 < 0) {
    operator delete(v916[0]);
  }
  if (v922 < 0) {
    operator delete(v921[0]);
  }
  if (v926 < 0) {
    operator delete(v925);
  }
  if (v924 < 0) {
    operator delete(v923[0]);
  }
  if (v929 < 0) {
    operator delete(v928[0]);
  }
  if (v933 < 0) {
    operator delete(v932);
  }
  if (v931 < 0) {
    operator delete(v930[0]);
  }
  if (v936 < 0) {
    operator delete(v935[0]);
  }
  if (v940 < 0) {
    operator delete(v939);
  }
  if (v938 < 0) {
    operator delete(v937[0]);
  }
  if (v943 < 0) {
    operator delete(v942[0]);
  }
  if (v947 < 0) {
    operator delete(v946);
  }
  if (v945 < 0) {
    operator delete(v944[0]);
  }
  if (v950 < 0) {
    operator delete(v949[0]);
  }
  if (v954 < 0) {
    operator delete(v953);
  }
  if (v952 < 0) {
    operator delete(v951[0]);
  }
  if (v957 < 0) {
    operator delete(v956[0]);
  }
  if (v961 < 0) {
    operator delete(v960);
  }
  if (v959 < 0) {
    operator delete(v958[0]);
  }
  if (v964 < 0) {
    operator delete(v963[0]);
  }
  if (v968 < 0) {
    operator delete(v967);
  }
  if (v966 < 0) {
    operator delete(v965[0]);
  }
  if (v971 < 0) {
    operator delete(v970[0]);
  }
  if (v975 < 0) {
    operator delete(v974);
  }
  if (v973 < 0) {
    operator delete(v972[0]);
  }
  if (v978 < 0) {
    operator delete(v977[0]);
  }
  if (v982 < 0) {
    operator delete(v981);
  }
  if (v980 < 0) {
    operator delete(v979[0]);
  }
  if (v985 < 0) {
    operator delete(v984[0]);
  }
  if (v989 < 0) {
    operator delete(v988);
  }
  if (v987 < 0) {
    operator delete(v986[0]);
  }
  if (v992 < 0) {
    operator delete(v991[0]);
  }
  if (v996 < 0) {
    operator delete(v995);
  }
  if (v994 < 0) {
    operator delete(v993[0]);
  }
  if (v999 < 0) {
    operator delete(v998[0]);
  }
  if (v1003 < 0) {
    operator delete(v1002);
  }
  if (v1001 < 0) {
    operator delete(v1000[0]);
  }
  if (v1006 < 0) {
    operator delete(v1005[0]);
  }
  if (v1010 < 0) {
    operator delete(v1009);
  }
  if (v1008 < 0) {
    operator delete(v1007[0]);
  }
  if (v1013 < 0) {
    operator delete(v1012[0]);
  }
  if (v1017 < 0) {
    operator delete(v1016);
  }
  if (v1015 < 0) {
    operator delete(v1014[0]);
  }
  if (v1020 < 0) {
    operator delete(v1019[0]);
  }
  if (v1024 < 0) {
    operator delete(v1023);
  }
  if (v1022 < 0) {
    operator delete(v1021[0]);
  }
  if (v1027 < 0) {
    operator delete(v1026[0]);
  }
  if (v1031 < 0) {
    operator delete(v1030);
  }
  if (v1029 < 0) {
    operator delete(v1028[0]);
  }
  if (v1034 < 0) {
    operator delete(v1033[0]);
  }
  if (v1038 < 0) {
    operator delete(v1037);
  }
  if (v1036 < 0) {
    operator delete(v1035[0]);
  }
  if (v1041 < 0) {
    operator delete(v1040[0]);
  }
  if (v1045 < 0) {
    operator delete(v1044);
  }
  if (v1043 < 0) {
    operator delete(v1042[0]);
  }
  if (v1048 < 0) {
    operator delete(v1047[0]);
  }
  if (v1052 < 0) {
    operator delete(v1051);
  }
  if (v1050 < 0) {
    operator delete(v1049[0]);
  }
  if (v1055 < 0) {
    operator delete(v1054[0]);
  }
  if (v1059 < 0) {
    operator delete(v1058);
  }
  if (v1057 < 0) {
    operator delete(v1056[0]);
  }
  if (v1062 < 0) {
    operator delete(v1061[0]);
  }
  if (v1066 < 0) {
    operator delete(v1065);
  }
  if (v1064 < 0) {
    operator delete(v1063[0]);
  }
  if (v1069 < 0) {
    operator delete(v1068[0]);
  }
  if (v1073 < 0) {
    operator delete(v1072);
  }
  if (v1071 < 0) {
    operator delete(v1070[0]);
  }
  if (v1076 < 0) {
    operator delete(v1075[0]);
  }
  if (v1080 < 0) {
    operator delete(v1079);
  }
  if (v1078 < 0) {
    operator delete(v1077[0]);
  }
  if (v1083 < 0) {
    operator delete(v1082[0]);
  }
  if (v1087 < 0) {
    operator delete(v1086);
  }
  if (v1085 < 0) {
    operator delete(v1084[0]);
  }
  if (v1090 < 0) {
    operator delete(v1089[0]);
  }
  if (v1094 < 0) {
    operator delete(v1093);
  }
  if (v1092 < 0) {
    operator delete(v1091[0]);
  }
  if (v1097 < 0) {
    operator delete(v1096[0]);
  }
  if (v1101 < 0) {
    operator delete(v1100);
  }
  if (v1099 < 0) {
    operator delete(v1098[0]);
  }
  if (v1104 < 0) {
    operator delete(v1103[0]);
  }
  if (v1108 < 0) {
    operator delete(v1107);
  }
  if (v1106 < 0) {
    operator delete(v1105[0]);
  }
  if (v1111 < 0) {
    operator delete(v1110[0]);
  }
  if (v1115 < 0) {
    operator delete(v1114);
  }
  if (v1113 < 0) {
    operator delete(v1112[0]);
  }
  if (v1118 < 0) {
    operator delete(v1117[0]);
  }
  if (v1122 < 0) {
    operator delete(v1121);
  }
  if (v1120 < 0) {
    operator delete(v1119[0]);
  }
  if (v1125 < 0) {
    operator delete(v1124[0]);
  }
  if (v1129 < 0) {
    operator delete(v1128);
  }
  if (v1127 < 0) {
    operator delete(v1126[0]);
  }
  if (v1132 < 0) {
    operator delete(v1131[0]);
  }
  if (v1136 < 0) {
    operator delete(v1135);
  }
  if (v1134 < 0) {
    operator delete(v1133[0]);
  }
  if (v1139 < 0) {
    operator delete(v1138[0]);
  }
  if (v1143 < 0) {
    operator delete(v1142);
  }
  if (v1141 < 0) {
    operator delete(v1140[0]);
  }
  if (v1146 < 0) {
    operator delete(v1145[0]);
  }
  if (v1150 < 0) {
    operator delete(v1149);
  }
  if (v1148 < 0) {
    operator delete(v1147[0]);
  }
  if (v1153 < 0) {
    operator delete(v1152[0]);
  }
  if (v1157 < 0) {
    operator delete(v1156);
  }
  if (v1155 < 0) {
    operator delete(v1154[0]);
  }
  if (v1160 < 0) {
    operator delete(v1159[0]);
  }
  if (v1164 < 0) {
    operator delete(v1163);
  }
  if (v1162 < 0) {
    operator delete(v1161[0]);
  }
  if (v1167 < 0) {
    operator delete(v1166[0]);
  }
  if (v1171 < 0) {
    operator delete(v1170);
  }
  if (v1169 < 0) {
    operator delete(v1168[0]);
  }
  if (v1174 < 0) {
    operator delete(v1173[0]);
  }
  if (v1178 < 0) {
    operator delete(v1177);
  }
  if (v1176 < 0) {
    operator delete(v1175[0]);
  }
  if (v1181 < 0) {
    operator delete(v1180[0]);
  }
  if (v1185 < 0) {
    operator delete(v1184);
  }
  if (v1183 < 0) {
    operator delete(v1182[0]);
  }
  if (v1188 < 0) {
    operator delete(v1187[0]);
  }
  if (v1192 < 0) {
    operator delete(v1191);
  }
  if (v1190 < 0) {
    operator delete(v1189[0]);
  }
  if (v1195 < 0) {
    operator delete(v1194[0]);
  }
  if (v1199 < 0) {
    operator delete(v1198);
  }
  if (v1197 < 0) {
    operator delete(v1196[0]);
  }
  if (v1202 < 0) {
    operator delete(v1201[0]);
  }
  if (v1206 < 0) {
    operator delete(v1205);
  }
  if (v1204 < 0) {
    operator delete(v1203[0]);
  }
  if (v1209 < 0) {
    operator delete(v1208[0]);
  }
  if (v1213 < 0) {
    operator delete(v1212);
  }
  if (v1211 < 0) {
    operator delete(v1210[0]);
  }
  if (v1216 < 0) {
    operator delete(v1215[0]);
  }
  if (v1220 < 0) {
    operator delete(v1219);
  }
  if (v1218 < 0) {
    operator delete(v1217[0]);
  }
  if (v1223 < 0) {
    operator delete(v1222[0]);
  }
  if (v1227 < 0) {
    operator delete(v1226);
  }
  if (v1225 < 0) {
    operator delete(v1224[0]);
  }
  if (v1230 < 0) {
    operator delete(v1229[0]);
  }
  if (v1234 < 0) {
    operator delete(v1233);
  }
  if (v1232 < 0) {
    operator delete(v1231[0]);
  }
  if (v1237 < 0) {
    operator delete(v1236[0]);
  }
  if (v1241 < 0) {
    operator delete(v1240);
  }
  if (v1239 < 0) {
    operator delete(v1238[0]);
  }
  if (v1244 < 0) {
    operator delete(v1243[0]);
  }
  if (v1248 < 0) {
    operator delete(v1247);
  }
  if (v1246 < 0) {
    operator delete(v1245[0]);
  }
  if (v1251 < 0) {
    operator delete(v1250[0]);
  }
  if (v1255 < 0) {
    operator delete(v1254);
  }
  if (v1253 < 0) {
    operator delete(v1252[0]);
  }
  if (v1258 < 0) {
    operator delete(v1257[0]);
  }
  if (v1262 < 0) {
    operator delete(v1261);
  }
  if (v1260 < 0) {
    operator delete(v1259[0]);
  }
  if (v1265 < 0) {
    operator delete(v1264[0]);
  }
  if (v1269 < 0) {
    operator delete(v1268);
  }
  if (v1267 < 0) {
    operator delete(v1266[0]);
  }
  if (v1272 < 0) {
    operator delete(v1271[0]);
  }
  if (v1276 < 0) {
    operator delete(v1275);
  }
  if (v1274 < 0) {
    operator delete(v1273[0]);
  }
  if (v1279 < 0) {
    operator delete(v1278[0]);
  }
  if (v1283 < 0) {
    operator delete(v1282);
  }
  if (v1281 < 0) {
    operator delete(v1280[0]);
  }
  if (v1286 < 0) {
    operator delete(v1285[0]);
  }
  if (v1290 < 0) {
    operator delete(v1289);
  }
  if (v1288 < 0) {
    operator delete(v1287[0]);
  }
  if (v1293 < 0) {
    operator delete(v1292[0]);
  }
  if (v1297 < 0) {
    operator delete(v1296);
  }
  if (v1295 < 0) {
    operator delete(v1294[0]);
  }
  if (v1300 < 0) {
    operator delete(v1299[0]);
  }
  if (v1304 < 0) {
    operator delete(v1303);
  }
  if (v1302 < 0) {
    operator delete(v1301[0]);
  }
  if (v1307 < 0) {
    operator delete(v1306[0]);
  }
  if (v1311 < 0) {
    operator delete(v1310);
  }
  if (v1309 < 0) {
    operator delete(v1308[0]);
  }
  if (v1314 < 0) {
    operator delete(v1313[0]);
  }
  if (v1318 < 0) {
    operator delete(v1317);
  }
  if (v1316 < 0) {
    operator delete(v1315[0]);
  }
  if (v1321 < 0) {
    operator delete(v1320[0]);
  }
  if (v1325 < 0) {
    operator delete(v1324);
  }
  if (v1323 < 0) {
    operator delete(v1322[0]);
  }
  if (v1328 < 0) {
    operator delete(v1327[0]);
  }
  if (v1332 < 0) {
    operator delete(v1331);
  }
  if (v1330 < 0) {
    operator delete(v1329[0]);
  }
  if (v1335 < 0) {
    operator delete(v1334[0]);
  }
  if (v1339 < 0) {
    operator delete(v1338);
  }
  if (v1337 < 0) {
    operator delete(v1336[0]);
  }
  if (v1342 < 0) {
    operator delete(v1341[0]);
  }
  if (v1346 < 0) {
    operator delete(v1345);
  }
  if (v1344 < 0) {
    operator delete(v1343[0]);
  }
  if (v1349 < 0) {
    operator delete(v1348[0]);
  }
  if (v1353 < 0) {
    operator delete(v1352);
  }
  if (v1351 < 0) {
    operator delete(v1350[0]);
  }
  if (v1356 < 0) {
    operator delete(v1355[0]);
  }
  if (v1360 < 0) {
    operator delete(v1359);
  }
  if (v1358 < 0) {
    operator delete(v1357[0]);
  }
  if (v1363 < 0) {
    operator delete(v1362[0]);
  }
  if (v1367 < 0) {
    operator delete(v1366);
  }
  if (v1365 < 0) {
    operator delete(v1364[0]);
  }
  if (v1370 < 0) {
    operator delete(v1369[0]);
  }
  if (v1374 < 0) {
    operator delete(v1373);
  }
  if (v1372 < 0) {
    operator delete(v1371[0]);
  }
  if (v1377 < 0) {
    operator delete(v1376[0]);
  }
  if (v1381 < 0) {
    operator delete(v1380);
  }
  if (v1379 < 0) {
    operator delete(v1378[0]);
  }
  if (v1384 < 0) {
    operator delete(v1383[0]);
  }
  if (v1388 < 0) {
    operator delete(v1387);
  }
  if (v1386 < 0) {
    operator delete(v1385[0]);
  }
  if (v1391 < 0) {
    operator delete(v1390[0]);
  }
  if (v1395 < 0) {
    operator delete(v1394);
  }
  if (v1393 < 0) {
    operator delete(v1392[0]);
  }
  if (v1398 < 0) {
    operator delete(v1397[0]);
  }
  if (v1402 < 0) {
    operator delete(v1401);
  }
  if (v1400 < 0) {
    operator delete(v1399[0]);
  }
  if (v1405 < 0) {
    operator delete(v1404[0]);
  }
  if (v1409 < 0) {
    operator delete(v1408);
  }
  if (v1407 < 0) {
    operator delete(v1406[0]);
  }
  if (v1412 < 0) {
    operator delete(v1411[0]);
  }
  if (v1416 < 0) {
    operator delete(v1415);
  }
  if (v1414 < 0) {
    operator delete(v1413[0]);
  }
  if (v1419 < 0) {
    operator delete(v1418[0]);
  }
  if (v1423 < 0) {
    operator delete(v1422);
  }
  if (v1421 < 0) {
    operator delete(v1420[0]);
  }
  if (v1426 < 0) {
    operator delete(v1425[0]);
  }
  if (v1430 < 0) {
    operator delete(v1429);
  }
  if (v1428 < 0) {
    operator delete(v1427[0]);
  }
  if (v1433 < 0) {
    operator delete(v1432[0]);
  }
  if (v1437 < 0) {
    operator delete(v1436);
  }
  if (v1435 < 0) {
    operator delete(v1434[0]);
  }
  if (v1440 < 0) {
    operator delete(v1439[0]);
  }
  if (v1444 < 0) {
    operator delete(v1443);
  }
  if (v1442 < 0) {
    operator delete(v1441[0]);
  }
  if (v1447 < 0) {
    operator delete(v1446[0]);
  }
  if (v1451 < 0) {
    operator delete(v1450);
  }
  if (v1449 < 0) {
    operator delete(v1448[0]);
  }
  if (v1454 < 0) {
    operator delete(v1453[0]);
  }
  if (v1458 < 0) {
    operator delete(v1457);
  }
  if (v1456 < 0) {
    operator delete(v1455[0]);
  }
  if (v1461 < 0) {
    operator delete(v1460[0]);
  }
  if (v1465 < 0) {
    operator delete(v1464);
  }
  if (v1463 < 0) {
    operator delete(v1462[0]);
  }
  if (v1468 < 0) {
    operator delete(v1467[0]);
  }
  if (v1472 < 0) {
    operator delete(v1471);
  }
  if (v1470 < 0) {
    operator delete(v1469[0]);
  }
  if (v1475 < 0) {
    operator delete(v1474[0]);
  }
  if (v1479 < 0) {
    operator delete(v1478);
  }
  if (v1477 < 0) {
    operator delete(v1476[0]);
  }
  if (v1482 < 0) {
    operator delete(v1481[0]);
  }
  if (v1486 < 0) {
    operator delete(v1485);
  }
  if (v1484 < 0) {
    operator delete(v1483[0]);
  }
  if (v1489 < 0) {
    operator delete(v1488[0]);
  }
  if (v1493 < 0) {
    operator delete(v1492);
  }
  if (v1491 < 0) {
    operator delete(v1490[0]);
  }
  if (v1496 < 0) {
    operator delete(v1495[0]);
  }
  if (v1500 < 0) {
    operator delete(v1499);
  }
  if (v1498 < 0) {
    operator delete(v1497[0]);
  }
  if (v1503 < 0) {
    operator delete(v1502[0]);
  }
  if (v1507 < 0) {
    operator delete(v1506);
  }
  if (v1505 < 0) {
    operator delete(v1504[0]);
  }
  if (v1510 < 0) {
    operator delete(v1509[0]);
  }
  if (v1514 < 0) {
    operator delete(v1513);
  }
  if (v1512 < 0) {
    operator delete(v1511[0]);
  }
  if (v1517 < 0) {
    operator delete(v1516[0]);
  }
  if (v1521 < 0) {
    operator delete(v1520);
  }
  if (v1519 < 0) {
    operator delete(v1518[0]);
  }
  if (v1524 < 0) {
    operator delete(v1523[0]);
  }
  if (v1528 < 0) {
    operator delete(v1527);
  }
  if (v1526 < 0) {
    operator delete(v1525[0]);
  }
  if (v1531 < 0) {
    operator delete(v1530[0]);
  }
  if (v1535 < 0) {
    operator delete(v1534);
  }
  if (v1533 < 0) {
    operator delete(v1532[0]);
  }
  if (v1538 < 0) {
    operator delete(v1537[0]);
  }
  if (v1542 < 0) {
    operator delete(v1541);
  }
  if (v1540 < 0) {
    operator delete(v1539[0]);
  }
  if (v1545 < 0) {
    operator delete(v1544[0]);
  }
  if (v1549 < 0) {
    operator delete(v1548);
  }
  if (v1547 < 0) {
    operator delete(v1546[0]);
  }
  if (v1552 < 0) {
    operator delete(v1551[0]);
  }
  if (v1556 < 0) {
    operator delete(v1555);
  }
  if (v1554 < 0) {
    operator delete(v1553[0]);
  }
  if (v1559 < 0) {
    operator delete(v1558[0]);
  }
  if (v1563 < 0) {
    operator delete(v1562);
  }
  if (v1561 < 0) {
    operator delete(v1560[0]);
  }
  if (v1566 < 0) {
    operator delete(v1565[0]);
  }
  if (v1570 < 0) {
    operator delete(v1569);
  }
  if (v1568 < 0) {
    operator delete(v1567[0]);
  }
  if (v1573 < 0) {
    operator delete(v1572[0]);
  }
  if (v1577 < 0) {
    operator delete(v1576);
  }
  if (v1575 < 0) {
    operator delete(v1574[0]);
  }
  if (v1580 < 0) {
    operator delete(v1579[0]);
  }
  if (v1584 < 0) {
    operator delete(v1583);
  }
  if (v1582 < 0) {
    operator delete(v1581[0]);
  }
  if (v1587 < 0) {
    operator delete(v1586[0]);
  }
  if (v1591 < 0) {
    operator delete(v1590);
  }
  if (v1589 < 0) {
    operator delete(v1588[0]);
  }
  if (v1594 < 0) {
    operator delete(v1593[0]);
  }
  if (v1598 < 0) {
    operator delete(v1597);
  }
  if (v1596 < 0) {
    operator delete(v1595[0]);
  }
  if (v1601 < 0) {
    operator delete(v1600[0]);
  }
  if (v1605 < 0) {
    operator delete(v1604);
  }
  if (v1603 < 0) {
    operator delete(v1602[0]);
  }
  if (v1608 < 0) {
    operator delete(v1607[0]);
  }
  if (v1612 < 0) {
    operator delete(v1611);
  }
  if (v1610 < 0) {
    operator delete(v1609[0]);
  }
  if (v1615 < 0) {
    operator delete(v1614[0]);
  }
  if (v1619 < 0) {
    operator delete(v1618);
  }
  if (v1617 < 0) {
    operator delete(v1616[0]);
  }
  if (v1622 < 0) {
    operator delete(v1621[0]);
  }
  if (v1626 < 0) {
    operator delete(v1625);
  }
  if (v1624 < 0) {
    operator delete(v1623[0]);
  }
  if (v1629 < 0) {
    operator delete(v1628[0]);
  }
  if (v1633 < 0) {
    operator delete(v1632);
  }
  if (v1631 < 0) {
    operator delete(v1630[0]);
  }
  if (v1636 < 0) {
    operator delete(v1635[0]);
  }
  if (v1640 < 0) {
    operator delete(v1639);
  }
  if (v1638 < 0) {
    operator delete(v1637[0]);
  }
  if (v1643 < 0) {
    operator delete(v1642[0]);
  }
  if (v1647 < 0) {
    operator delete(v1646);
  }
  if (v1645 < 0) {
    operator delete(v1644[0]);
  }
  if (v1650 < 0) {
    operator delete(v1649[0]);
  }
  if (v1654 < 0) {
    operator delete(v1653);
  }
  if (v1652 < 0) {
    operator delete(v1651[0]);
  }
  if (v1657 < 0) {
    operator delete(v1656[0]);
  }
  if (v1661 < 0) {
    operator delete(v1660);
  }
  if (v1659 < 0) {
    operator delete(v1658[0]);
  }
  if (v1664 < 0) {
    operator delete(v1663[0]);
  }
  if (v1668 < 0) {
    operator delete(v1667);
  }
  if (v1666 < 0) {
    operator delete(v1665[0]);
  }
  if (v1671 < 0) {
    operator delete(v1670[0]);
  }
  if (v1675 < 0) {
    operator delete(v1674);
  }
  if (v1673 < 0) {
    operator delete(v1672[0]);
  }
  if (v1678 < 0) {
    operator delete(v1677[0]);
  }
  if (v1682 < 0) {
    operator delete(v1681);
  }
  if (v1680 < 0) {
    operator delete(v1679[0]);
  }
  if (v1685 < 0) {
    operator delete(v1684[0]);
  }
  if (v1689 < 0) {
    operator delete(v1688);
  }
  if (v1687 < 0) {
    operator delete(v1686[0]);
  }
  if (v1692 < 0) {
    operator delete(v1691[0]);
  }
  if (v1696 < 0) {
    operator delete(v1695);
  }
  if (v1694 < 0) {
    operator delete(v1693[0]);
  }
  if (v1699 < 0) {
    operator delete(v1698[0]);
  }
  if (v1703 < 0) {
    operator delete(v1702);
  }
  if (v1701 < 0) {
    operator delete(v1700[0]);
  }
  if (v1706 < 0) {
    operator delete(v1705[0]);
  }
  if (v1710 < 0) {
    operator delete(v1709);
  }
  if (v1708 < 0) {
    operator delete(v1707[0]);
  }
  if (v1713 < 0) {
    operator delete(v1712[0]);
  }
  if (v1717 < 0) {
    operator delete(v1716);
  }
  if (v1715 < 0) {
    operator delete(v1714[0]);
  }
  if (v1720 < 0) {
    operator delete(v1719[0]);
  }
  if (v1724 < 0) {
    operator delete(v1723);
  }
  if (v1722 < 0) {
    operator delete(v1721[0]);
  }
  if (v1727 < 0) {
    operator delete(v1726[0]);
  }
  if (v1731 < 0) {
    operator delete(v1730);
  }
  if (v1729 < 0) {
    operator delete(v1728[0]);
  }
  if (v1734 < 0) {
    operator delete(v1733[0]);
  }
  if (v1738 < 0) {
    operator delete(v1737);
  }
  if (v1736 < 0) {
    operator delete(v1735[0]);
  }
  if (v1741 < 0) {
    operator delete(v1740[0]);
  }
  if (v1745 < 0) {
    operator delete(v1744);
  }
  if (v1743 < 0) {
    operator delete(v1742[0]);
  }
  if (v1748 < 0) {
    operator delete(v1747[0]);
  }
  if (v1752 < 0) {
    operator delete(v1751);
  }
  if (v1750 < 0) {
    operator delete(v1749[0]);
  }
  if (v1755 < 0) {
    operator delete(v1754[0]);
  }
  if (v1759 < 0) {
    operator delete(v1758);
  }
  if (v1757 < 0) {
    operator delete(v1756[0]);
  }
  if (v1762 < 0) {
    operator delete(v1761[0]);
  }
  if (v1766 < 0) {
    operator delete(v1765);
  }
  if (v1764 < 0) {
    operator delete(v1763[0]);
  }
  if (v1769 < 0) {
    operator delete(v1768[0]);
  }
  if (v1773 < 0) {
    operator delete(v1772);
  }
  if (v1771 < 0) {
    operator delete(v1770[0]);
  }
  if (v1776 < 0) {
    operator delete(v1775[0]);
  }
  if (v1780 < 0) {
    operator delete(v1779);
  }
  if (v1778 < 0) {
    operator delete(v1777[0]);
  }
  if (v1783 < 0) {
    operator delete(v1782[0]);
  }
  if (v1787 < 0) {
    operator delete(v1786);
  }
  if (v1785 < 0) {
    operator delete(v1784[0]);
  }
  if (v1790 < 0) {
    operator delete(v1789[0]);
  }
  if (v1794 < 0) {
    operator delete(v1793);
  }
  if (v1792 < 0) {
    operator delete(v1791[0]);
  }
  if (v1797 < 0) {
    operator delete(v1796[0]);
  }
  if (v1801 < 0) {
    operator delete(v1800);
  }
  if (v1799 < 0) {
    operator delete(v1798[0]);
  }
  if (v1804 < 0) {
    operator delete(v1803[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1003AC044, qword_1008AC600, (void *)&_mh_execute_header);
}

void sub_1003C4E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62,uint64_t a63)
{
  for (uint64_t i = 20480; i != -80; i -= 80)
    sub_1003ABFEC(v81 + i);
  sub_1001F8580((uint64_t)&a10);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1001F8580((uint64_t)&a23);
  if (a35 < 0) {
    operator delete(a30);
  }
  sub_1001F8580((uint64_t)&a36);
  if (a48 < 0) {
    operator delete(a43);
  }
  sub_1001F8580((uint64_t)&a49);
  if (a61 < 0) {
    operator delete(a56);
  }
  sub_1001F8580((uint64_t)&a62);
  if (a72 < 0) {
    operator delete(a69);
  }
  sub_1001F8580((uint64_t)&a73);
  if (a75 < 0) {
    operator delete(a74);
  }
  sub_1001F8580((uint64_t)&a76);
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  sub_1001F8580((uint64_t)&STACK[0x238]);
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  sub_1001F8580((uint64_t)&STACK[0x288]);
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  sub_1001F8580((uint64_t)&STACK[0x328]);
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  sub_1001F8580((uint64_t)&STACK[0x378]);
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3C8]);
  if (SLOBYTE(STACK[0x417]) < 0) {
    operator delete((void *)STACK[0x400]);
  }
  sub_1001F8580((uint64_t)&STACK[0x418]);
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  sub_1001F8580((uint64_t)&STACK[0x468]);
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4B8]);
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x508]);
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete((void *)STACK[0x540]);
  }
  sub_1001F8580((uint64_t)&STACK[0x558]);
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  sub_1001F8580((uint64_t)&STACK[0x5A8]);
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x5F8]);
  if (SLOBYTE(STACK[0x647]) < 0) {
    operator delete((void *)STACK[0x630]);
  }
  sub_1001F8580((uint64_t)&STACK[0x648]);
  if (SLOBYTE(STACK[0x697]) < 0) {
    operator delete((void *)STACK[0x680]);
  }
  sub_1001F8580((uint64_t)&STACK[0x698]);
  if (SLOBYTE(STACK[0x6E7]) < 0) {
    operator delete((void *)STACK[0x6D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x6E8]);
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  sub_1001F8580((uint64_t)&STACK[0x738]);
  if (SLOBYTE(STACK[0x787]) < 0) {
    operator delete((void *)STACK[0x770]);
  }
  sub_1001F8580((uint64_t)&STACK[0x788]);
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x7D8]);
  if (SLOBYTE(STACK[0x827]) < 0) {
    operator delete((void *)STACK[0x810]);
  }
  sub_1001F8580((uint64_t)&STACK[0x828]);
  if (SLOBYTE(STACK[0x877]) < 0) {
    operator delete((void *)STACK[0x860]);
  }
  sub_1001F8580((uint64_t)&STACK[0x878]);
  if (SLOBYTE(STACK[0x8C7]) < 0) {
    operator delete((void *)STACK[0x8B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x8C8]);
  if (SLOBYTE(STACK[0x917]) < 0) {
    operator delete((void *)STACK[0x900]);
  }
  sub_1001F8580((uint64_t)&STACK[0x918]);
  if (SLOBYTE(STACK[0x967]) < 0) {
    operator delete((void *)STACK[0x950]);
  }
  sub_1001F8580((uint64_t)&STACK[0x968]);
  if (SLOBYTE(STACK[0x9B7]) < 0) {
    operator delete((void *)STACK[0x9A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x9B8]);
  if (SLOBYTE(STACK[0xA07]) < 0) {
    operator delete((void *)STACK[0x9F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xA08]);
  if (SLOBYTE(STACK[0xA57]) < 0) {
    operator delete((void *)STACK[0xA40]);
  }
  sub_1001F8580((uint64_t)&STACK[0xA58]);
  if (SLOBYTE(STACK[0xAA7]) < 0) {
    operator delete((void *)STACK[0xA90]);
  }
  sub_1001F8580((uint64_t)&STACK[0xAA8]);
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xAF8]);
  if (SLOBYTE(STACK[0xB47]) < 0) {
    operator delete((void *)STACK[0xB30]);
  }
  sub_1001F8580((uint64_t)&STACK[0xB48]);
  if (SLOBYTE(STACK[0xB97]) < 0) {
    operator delete((void *)STACK[0xB80]);
  }
  sub_1001F8580((uint64_t)&STACK[0xB98]);
  if (SLOBYTE(STACK[0xBE7]) < 0) {
    operator delete((void *)STACK[0xBD0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xBE8]);
  if (SLOBYTE(STACK[0xC37]) < 0) {
    operator delete((void *)STACK[0xC20]);
  }
  sub_1001F8580((uint64_t)&STACK[0xC38]);
  if (SLOBYTE(STACK[0xC87]) < 0) {
    operator delete((void *)STACK[0xC70]);
  }
  sub_1001F8580((uint64_t)&STACK[0xC88]);
  if (SLOBYTE(STACK[0xCD7]) < 0) {
    operator delete((void *)STACK[0xCC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xCD8]);
  if (SLOBYTE(STACK[0xD27]) < 0) {
    operator delete((void *)STACK[0xD10]);
  }
  sub_1001F8580((uint64_t)&STACK[0xD28]);
  if (SLOBYTE(STACK[0xD77]) < 0) {
    operator delete((void *)STACK[0xD60]);
  }
  sub_1001F8580((uint64_t)&STACK[0xD78]);
  if (SLOBYTE(STACK[0xDC7]) < 0) {
    operator delete((void *)STACK[0xDB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xDC8]);
  if (SLOBYTE(STACK[0xE17]) < 0) {
    operator delete((void *)STACK[0xE00]);
  }
  sub_1001F8580((uint64_t)&STACK[0xE18]);
  if (SLOBYTE(STACK[0xE67]) < 0) {
    operator delete((void *)STACK[0xE50]);
  }
  sub_1001F8580((uint64_t)&STACK[0xE68]);
  if (SLOBYTE(STACK[0xEB7]) < 0) {
    operator delete((void *)STACK[0xEA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xEB8]);
  if (SLOBYTE(STACK[0xF07]) < 0) {
    operator delete((void *)STACK[0xEF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xF08]);
  if (SLOBYTE(STACK[0xF57]) < 0) {
    operator delete((void *)STACK[0xF40]);
  }
  sub_1001F8580((uint64_t)&STACK[0xF58]);
  if (v80[23] < 0) {
    operator delete((void *)STACK[0xF90]);
  }
  sub_1001F8580((uint64_t)&STACK[0xFA8]);
  if (v80[103] < 0) {
    operator delete((void *)STACK[0xFE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0xFF8]);
  if (v80[183] < 0) {
    operator delete((void *)STACK[0x1030]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1048]);
  if (v80[263] < 0) {
    operator delete((void *)STACK[0x1080]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1098]);
  if (v80[343] < 0) {
    operator delete((void *)STACK[0x10D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x10E8]);
  if (v80[423] < 0) {
    operator delete((void *)STACK[0x1120]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1138]);
  if (v80[503] < 0) {
    operator delete((void *)STACK[0x1170]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1188]);
  if (v80[583] < 0) {
    operator delete((void *)STACK[0x11C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x11D8]);
  if (v80[663] < 0) {
    operator delete((void *)STACK[0x1210]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1228]);
  if (v80[743] < 0) {
    operator delete((void *)STACK[0x1260]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1278]);
  if (v80[823] < 0) {
    operator delete((void *)STACK[0x12B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x12C8]);
  if (v80[903] < 0) {
    operator delete((void *)STACK[0x1300]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1318]);
  if (v80[983] < 0) {
    operator delete((void *)STACK[0x1350]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1368]);
  if (v80[1063] < 0) {
    operator delete((void *)STACK[0x13A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x13B8]);
  if (v80[1143] < 0) {
    operator delete((void *)STACK[0x13F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1408]);
  if (v80[1223] < 0) {
    operator delete((void *)STACK[0x1440]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1458]);
  if (v80[1303] < 0) {
    operator delete((void *)STACK[0x1490]);
  }
  sub_1001F8580((uint64_t)&STACK[0x14A8]);
  if (v80[1383] < 0) {
    operator delete((void *)STACK[0x14E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x14F8]);
  if (v80[1463] < 0) {
    operator delete((void *)STACK[0x1530]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1548]);
  if (v80[1543] < 0) {
    operator delete((void *)STACK[0x1580]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1598]);
  if (v80[1623] < 0) {
    operator delete((void *)STACK[0x15D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x15E8]);
  if (v80[1703] < 0) {
    operator delete((void *)STACK[0x1620]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1638]);
  if (v80[1783] < 0) {
    operator delete((void *)STACK[0x1670]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1688]);
  if (v80[1863] < 0) {
    operator delete((void *)STACK[0x16C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x16D8]);
  if (v80[1943] < 0) {
    operator delete((void *)STACK[0x1710]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1728]);
  if (v80[2023] < 0) {
    operator delete((void *)STACK[0x1760]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1778]);
  if (v80[2103] < 0) {
    operator delete((void *)STACK[0x17B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x17C8]);
  if (v80[2183] < 0) {
    operator delete((void *)STACK[0x1800]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1818]);
  if (v80[2263] < 0) {
    operator delete((void *)STACK[0x1850]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1868]);
  if (v80[2343] < 0) {
    operator delete((void *)STACK[0x18A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x18B8]);
  if (v80[2423] < 0) {
    operator delete((void *)STACK[0x18F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1908]);
  if (v80[2503] < 0) {
    operator delete((void *)STACK[0x1940]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1958]);
  if (v80[2583] < 0) {
    operator delete((void *)STACK[0x1990]);
  }
  sub_1001F8580((uint64_t)&STACK[0x19A8]);
  if (v80[2663] < 0) {
    operator delete((void *)STACK[0x19E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x19F8]);
  if (v80[2743] < 0) {
    operator delete((void *)STACK[0x1A30]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1A48]);
  if (v80[2823] < 0) {
    operator delete((void *)STACK[0x1A80]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1A98]);
  if (v80[2903] < 0) {
    operator delete((void *)STACK[0x1AD0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1AE8]);
  if (v80[2983] < 0) {
    operator delete((void *)STACK[0x1B20]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1B38]);
  if (v80[3063] < 0) {
    operator delete((void *)STACK[0x1B70]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1B88]);
  if (v80[3143] < 0) {
    operator delete((void *)STACK[0x1BC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1BD8]);
  if (v80[3223] < 0) {
    operator delete((void *)STACK[0x1C10]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1C28]);
  if (v80[3303] < 0) {
    operator delete((void *)STACK[0x1C60]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1C78]);
  if (v80[3383] < 0) {
    operator delete((void *)STACK[0x1CB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1CC8]);
  if (v80[3463] < 0) {
    operator delete((void *)STACK[0x1D00]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1D18]);
  if (v80[3543] < 0) {
    operator delete((void *)STACK[0x1D50]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1D68]);
  if (v80[3623] < 0) {
    operator delete((void *)STACK[0x1DA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1DB8]);
  if (v80[3703] < 0) {
    operator delete((void *)STACK[0x1DF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1E08]);
  if (v80[3783] < 0) {
    operator delete((void *)STACK[0x1E40]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1E58]);
  if (v80[3863] < 0) {
    operator delete((void *)STACK[0x1E90]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1EA8]);
  if (v80[3943] < 0) {
    operator delete((void *)STACK[0x1EE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1EF8]);
  if (v80[4023] < 0) {
    operator delete((void *)STACK[0x1F30]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1F48]);
  if (v79[23] < 0) {
    operator delete((void *)STACK[0x1F80]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1F98]);
  if (v79[103] < 0) {
    operator delete((void *)STACK[0x1FD0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x1FE8]);
  if (v79[183] < 0) {
    operator delete((void *)STACK[0x2020]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2038]);
  if (v79[263] < 0) {
    operator delete((void *)STACK[0x2070]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2088]);
  if (v79[343] < 0) {
    operator delete((void *)STACK[0x20C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x20D8]);
  if (v79[423] < 0) {
    operator delete((void *)STACK[0x2110]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2128]);
  if (v79[503] < 0) {
    operator delete((void *)STACK[0x2160]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2178]);
  if (v79[583] < 0) {
    operator delete((void *)STACK[0x21B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x21C8]);
  if (v79[663] < 0) {
    operator delete((void *)STACK[0x2200]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2218]);
  if (v79[743] < 0) {
    operator delete((void *)STACK[0x2250]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2268]);
  if (v79[823] < 0) {
    operator delete((void *)STACK[0x22A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x22B8]);
  if (v79[903] < 0) {
    operator delete((void *)STACK[0x22F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2308]);
  if (v79[983] < 0) {
    operator delete((void *)STACK[0x2340]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2358]);
  if (v79[1063] < 0) {
    operator delete((void *)STACK[0x2390]);
  }
  sub_1001F8580((uint64_t)&STACK[0x23A8]);
  if (v79[1143] < 0) {
    operator delete((void *)STACK[0x23E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x23F8]);
  if (v79[1223] < 0) {
    operator delete((void *)STACK[0x2430]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2448]);
  if (v79[1303] < 0) {
    operator delete((void *)STACK[0x2480]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2498]);
  if (v79[1383] < 0) {
    operator delete((void *)STACK[0x24D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x24E8]);
  if (v79[1463] < 0) {
    operator delete((void *)STACK[0x2520]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2538]);
  if (v79[1543] < 0) {
    operator delete((void *)STACK[0x2570]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2588]);
  if (v79[1623] < 0) {
    operator delete((void *)STACK[0x25C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x25D8]);
  if (v79[1703] < 0) {
    operator delete((void *)STACK[0x2610]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2628]);
  if (v79[1783] < 0) {
    operator delete((void *)STACK[0x2660]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2678]);
  if (v79[1863] < 0) {
    operator delete((void *)STACK[0x26B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x26C8]);
  if (v79[1943] < 0) {
    operator delete((void *)STACK[0x2700]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2718]);
  if (v79[2023] < 0) {
    operator delete((void *)STACK[0x2750]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2768]);
  if (v79[2103] < 0) {
    operator delete((void *)STACK[0x27A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x27B8]);
  if (v79[2183] < 0) {
    operator delete((void *)STACK[0x27F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2808]);
  if (v79[2263] < 0) {
    operator delete((void *)STACK[0x2840]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2858]);
  if (v79[2343] < 0) {
    operator delete((void *)STACK[0x2890]);
  }
  sub_1001F8580((uint64_t)&STACK[0x28A8]);
  if (v79[2423] < 0) {
    operator delete((void *)STACK[0x28E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x28F8]);
  if (v79[2503] < 0) {
    operator delete((void *)STACK[0x2930]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2948]);
  if (v79[2583] < 0) {
    operator delete((void *)STACK[0x2980]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2998]);
  if (v79[2663] < 0) {
    operator delete((void *)STACK[0x29D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x29E8]);
  if (v79[2743] < 0) {
    operator delete((void *)STACK[0x2A20]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2A38]);
  if (v79[2823] < 0) {
    operator delete((void *)STACK[0x2A70]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2A88]);
  if (v79[2903] < 0) {
    operator delete((void *)STACK[0x2AC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2AD8]);
  if (v79[2983] < 0) {
    operator delete((void *)STACK[0x2B10]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2B28]);
  if (v79[3063] < 0) {
    operator delete((void *)STACK[0x2B60]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2B78]);
  if (v79[3143] < 0) {
    operator delete((void *)STACK[0x2BB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2BC8]);
  if (v79[3223] < 0) {
    operator delete((void *)STACK[0x2C00]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2C18]);
  if (v79[3303] < 0) {
    operator delete((void *)STACK[0x2C50]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2C68]);
  if (v79[3383] < 0) {
    operator delete((void *)STACK[0x2CA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2CB8]);
  if (v79[3463] < 0) {
    operator delete((void *)STACK[0x2CF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2D08]);
  if (v79[3543] < 0) {
    operator delete((void *)STACK[0x2D40]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2D58]);
  if (v79[3623] < 0) {
    operator delete((void *)STACK[0x2D90]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2DA8]);
  if (v79[3703] < 0) {
    operator delete((void *)STACK[0x2DE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2DF8]);
  if (v79[3783] < 0) {
    operator delete((void *)STACK[0x2E30]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2E48]);
  if (v79[3863] < 0) {
    operator delete((void *)STACK[0x2E80]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2E98]);
  if (v79[3943] < 0) {
    operator delete((void *)STACK[0x2ED0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2EE8]);
  if (v79[4023] < 0) {
    operator delete((void *)STACK[0x2F20]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2F38]);
  if (v78[23] < 0) {
    operator delete((void *)STACK[0x2F70]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2F88]);
  if (v78[103] < 0) {
    operator delete((void *)STACK[0x2FC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x2FD8]);
  if (v78[183] < 0) {
    operator delete((void *)STACK[0x3010]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3028]);
  if (v78[263] < 0) {
    operator delete((void *)STACK[0x3060]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3078]);
  if (v78[343] < 0) {
    operator delete((void *)STACK[0x30B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x30C8]);
  if (v78[423] < 0) {
    operator delete((void *)STACK[0x3100]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3118]);
  if (v78[503] < 0) {
    operator delete((void *)STACK[0x3150]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3168]);
  if (v78[583] < 0) {
    operator delete((void *)STACK[0x31A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x31B8]);
  if (v78[663] < 0) {
    operator delete((void *)STACK[0x31F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3208]);
  if (v78[743] < 0) {
    operator delete((void *)STACK[0x3240]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3258]);
  if (v78[823] < 0) {
    operator delete((void *)STACK[0x3290]);
  }
  sub_1001F8580((uint64_t)&STACK[0x32A8]);
  if (v78[903] < 0) {
    operator delete((void *)STACK[0x32E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x32F8]);
  if (v78[983] < 0) {
    operator delete((void *)STACK[0x3330]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3348]);
  if (v78[1063] < 0) {
    operator delete((void *)STACK[0x3380]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3398]);
  if (v78[1143] < 0) {
    operator delete((void *)STACK[0x33D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x33E8]);
  if (v78[1223] < 0) {
    operator delete((void *)STACK[0x3420]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3438]);
  if (v78[1303] < 0) {
    operator delete((void *)STACK[0x3470]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3488]);
  if (v78[1383] < 0) {
    operator delete((void *)STACK[0x34C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x34D8]);
  if (v78[1463] < 0) {
    operator delete((void *)STACK[0x3510]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3528]);
  if (v78[1543] < 0) {
    operator delete((void *)STACK[0x3560]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3578]);
  if (v78[1623] < 0) {
    operator delete((void *)STACK[0x35B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x35C8]);
  if (v78[1703] < 0) {
    operator delete((void *)STACK[0x3600]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3618]);
  if (v78[1783] < 0) {
    operator delete((void *)STACK[0x3650]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3668]);
  if (v78[1863] < 0) {
    operator delete((void *)STACK[0x36A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x36B8]);
  if (v78[1943] < 0) {
    operator delete((void *)STACK[0x36F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3708]);
  if (v78[2023] < 0) {
    operator delete((void *)STACK[0x3740]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3758]);
  if (v78[2103] < 0) {
    operator delete((void *)STACK[0x3790]);
  }
  sub_1001F8580((uint64_t)&STACK[0x37A8]);
  if (v78[2183] < 0) {
    operator delete((void *)STACK[0x37E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x37F8]);
  if (v78[2263] < 0) {
    operator delete((void *)STACK[0x3830]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3848]);
  if (v78[2343] < 0) {
    operator delete((void *)STACK[0x3880]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3898]);
  if (v78[2423] < 0) {
    operator delete((void *)STACK[0x38D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x38E8]);
  if (v78[2503] < 0) {
    operator delete((void *)STACK[0x3920]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3938]);
  if (v78[2583] < 0) {
    operator delete((void *)STACK[0x3970]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3988]);
  if (v78[2663] < 0) {
    operator delete((void *)STACK[0x39C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x39D8]);
  if (v78[2743] < 0) {
    operator delete((void *)STACK[0x3A10]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3A28]);
  if (v78[2823] < 0) {
    operator delete((void *)STACK[0x3A60]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3A78]);
  if (v78[2903] < 0) {
    operator delete((void *)STACK[0x3AB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3AC8]);
  if (v78[2983] < 0) {
    operator delete((void *)STACK[0x3B00]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3B18]);
  if (v78[3063] < 0) {
    operator delete((void *)STACK[0x3B50]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3B68]);
  if (v78[3143] < 0) {
    operator delete((void *)STACK[0x3BA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3BB8]);
  if (v78[3223] < 0) {
    operator delete((void *)STACK[0x3BF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3C08]);
  if (v78[3303] < 0) {
    operator delete((void *)STACK[0x3C40]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3C58]);
  if (v78[3383] < 0) {
    operator delete((void *)STACK[0x3C90]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3CA8]);
  if (v78[3463] < 0) {
    operator delete((void *)STACK[0x3CE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3CF8]);
  if (v78[3543] < 0) {
    operator delete((void *)STACK[0x3D30]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3D48]);
  if (v78[3623] < 0) {
    operator delete((void *)STACK[0x3D80]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3D98]);
  if (v78[3703] < 0) {
    operator delete((void *)STACK[0x3DD0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3DE8]);
  if (v78[3783] < 0) {
    operator delete((void *)STACK[0x3E20]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3E38]);
  if (v78[3863] < 0) {
    operator delete((void *)STACK[0x3E70]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3E88]);
  if (v78[3943] < 0) {
    operator delete((void *)STACK[0x3EC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3ED8]);
  if (v78[4023] < 0) {
    operator delete((void *)STACK[0x3F10]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3F28]);
  if (v77[23] < 0) {
    operator delete((void *)STACK[0x3F60]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3F78]);
  if (v77[103] < 0) {
    operator delete((void *)STACK[0x3FB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x3FC8]);
  if (v77[183] < 0) {
    operator delete((void *)STACK[0x4000]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4018]);
  if (v77[263] < 0) {
    operator delete((void *)STACK[0x4050]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4068]);
  if (v77[343] < 0) {
    operator delete((void *)STACK[0x40A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x40B8]);
  if (v77[423] < 0) {
    operator delete((void *)STACK[0x40F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4108]);
  if (v77[503] < 0) {
    operator delete((void *)STACK[0x4140]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4158]);
  if (v77[583] < 0) {
    operator delete((void *)STACK[0x4190]);
  }
  sub_1001F8580((uint64_t)&STACK[0x41A8]);
  if (v77[663] < 0) {
    operator delete((void *)STACK[0x41E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x41F8]);
  if (v77[743] < 0) {
    operator delete((void *)STACK[0x4230]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4248]);
  if (v77[823] < 0) {
    operator delete((void *)STACK[0x4280]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4298]);
  if (v77[903] < 0) {
    operator delete((void *)STACK[0x42D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x42E8]);
  if (v77[983] < 0) {
    operator delete((void *)STACK[0x4320]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4338]);
  if (v77[1063] < 0) {
    operator delete((void *)STACK[0x4370]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4388]);
  if (v77[1143] < 0) {
    operator delete((void *)STACK[0x43C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x43D8]);
  if (v77[1223] < 0) {
    operator delete((void *)STACK[0x4410]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4428]);
  if (v77[1303] < 0) {
    operator delete((void *)STACK[0x4460]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4478]);
  if (v77[1383] < 0) {
    operator delete((void *)STACK[0x44B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x44C8]);
  if (v77[1463] < 0) {
    operator delete((void *)STACK[0x4500]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4518]);
  if (v77[1543] < 0) {
    operator delete((void *)STACK[0x4550]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4568]);
  if (v77[1623] < 0) {
    operator delete((void *)STACK[0x45A0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x45B8]);
  if (v77[1703] < 0) {
    operator delete((void *)STACK[0x45F0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4608]);
  if (v77[1783] < 0) {
    operator delete((void *)STACK[0x4640]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4658]);
  if (v77[1863] < 0) {
    operator delete((void *)STACK[0x4690]);
  }
  sub_1001F8580((uint64_t)&STACK[0x46A8]);
  if (v77[1943] < 0) {
    operator delete((void *)STACK[0x46E0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x46F8]);
  if (v77[2023] < 0) {
    operator delete((void *)STACK[0x4730]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4748]);
  if (v77[2103] < 0) {
    operator delete((void *)STACK[0x4780]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4798]);
  if (v77[2183] < 0) {
    operator delete((void *)STACK[0x47D0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x47E8]);
  if (v77[2263] < 0) {
    operator delete((void *)STACK[0x4820]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4838]);
  if (v77[2343] < 0) {
    operator delete((void *)STACK[0x4870]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4888]);
  if (v77[2423] < 0) {
    operator delete((void *)STACK[0x48C0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x48D8]);
  if (v77[2503] < 0) {
    operator delete((void *)STACK[0x4910]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4928]);
  if (v77[2583] < 0) {
    operator delete((void *)STACK[0x4960]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4978]);
  if (v77[2663] < 0) {
    operator delete((void *)STACK[0x49B0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x49C8]);
  if (v77[2743] < 0) {
    operator delete((void *)STACK[0x4A00]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4A18]);
  if (v77[2823] < 0) {
    operator delete((void *)STACK[0x4A50]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4A68]);
  if (v77[2903] < 0) {
    operator delete((void *)STACK[0x4AA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4AB8]);
  if (v77[2983] < 0) {
    operator delete((void *)STACK[0x4AF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4B08]);
  if (v77[3063] < 0) {
    operator delete((void *)STACK[0x4B40]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4B58]);
  if (v77[3143] < 0) {
    operator delete((void *)STACK[0x4B90]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4BA8]);
  if (v77[3223] < 0) {
    operator delete((void *)STACK[0x4BE0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4BF8]);
  if (v77[3303] < 0) {
    operator delete((void *)STACK[0x4C30]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4C48]);
  if (v77[3383] < 0) {
    operator delete((void *)STACK[0x4C80]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4C98]);
  if (v77[3463] < 0) {
    operator delete((void *)STACK[0x4CD0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4CE8]);
  if (v77[3543] < 0) {
    operator delete((void *)STACK[0x4D20]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4D38]);
  if (v77[3623] < 0) {
    operator delete((void *)STACK[0x4D70]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4D88]);
  if (v77[3703] < 0) {
    operator delete((void *)STACK[0x4DC0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4DD8]);
  if (v77[3783] < 0) {
    operator delete((void *)STACK[0x4E10]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4E28]);
  if (v77[3863] < 0) {
    operator delete((void *)STACK[0x4E60]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4E78]);
  if (v77[3943] < 0) {
    operator delete((void *)STACK[0x4EB0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4EC8]);
  if (v77[4023] < 0) {
    operator delete((void *)STACK[0x4F00]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4F18]);
  if (v76[23] < 0) {
    operator delete((void *)STACK[0x4F50]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4F68]);
  if (v76[103] < 0) {
    operator delete((void *)STACK[0x4FA0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x4FB8]);
  if (v76[183] < 0) {
    operator delete((void *)STACK[0x4FF0]);
  }
  sub_1001F8580((uint64_t)&STACK[0x5008]);
  if (v76[263] < 0) {
    operator delete((void *)STACK[0x5040]);
  }
  _Unwind_Resume(a1);
}

void sub_1003C6AD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1003C4FBCLL);
}

void sub_1003C6AF8()
{
}

void sub_1003C6B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1003C4FD4);
}

void sub_1003C6B2C()
{
}

void sub_1003C6B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1003C4FECLL);
}

void sub_1003C6B60()
{
}

void sub_1003C6B70()
{
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  JUMPOUT(0x1003C5004);
}

void sub_1003C6B94()
{
}

void sub_1003C6BA4()
{
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  JUMPOUT(0x1003C501CLL);
}

void sub_1003C6BC8()
{
}

void sub_1003C6BD8()
{
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  JUMPOUT(0x1003C5034);
}

void sub_1003C6BFC()
{
}

void sub_1003C6C0C()
{
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  JUMPOUT(0x1003C504CLL);
}

void sub_1003C6C30()
{
}

void sub_1003C6C40()
{
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete((void *)STACK[0x378]);
  }
  JUMPOUT(0x1003C5064);
}

void sub_1003C6C64()
{
}

void sub_1003C6C74()
{
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  JUMPOUT(0x1003C507CLL);
}

void sub_1003C6C98()
{
}

void sub_1003C6CA8()
{
  if (SLOBYTE(STACK[0x42F]) < 0) {
    operator delete((void *)STACK[0x418]);
  }
  JUMPOUT(0x1003C5094);
}

void sub_1003C6CCC()
{
}

void sub_1003C6CDC()
{
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  JUMPOUT(0x1003C50ACLL);
}

void sub_1003C6D00()
{
}

void sub_1003C6D10()
{
  if (SLOBYTE(STACK[0x4CF]) < 0) {
    operator delete((void *)STACK[0x4B8]);
  }
  JUMPOUT(0x1003C50C4);
}

void sub_1003C6D34()
{
}

void sub_1003C6D44()
{
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  JUMPOUT(0x1003C50DCLL);
}

void sub_1003C6D68()
{
}

void sub_1003C6D78()
{
  if (SLOBYTE(STACK[0x56F]) < 0) {
    operator delete((void *)STACK[0x558]);
  }
  JUMPOUT(0x1003C50F4);
}

void sub_1003C6D9C()
{
}

void sub_1003C6DAC()
{
  if (SLOBYTE(STACK[0x5BF]) < 0) {
    operator delete((void *)STACK[0x5A8]);
  }
  JUMPOUT(0x1003C510CLL);
}

void sub_1003C6DD0()
{
}

void sub_1003C6DE0()
{
  if (SLOBYTE(STACK[0x60F]) < 0) {
    operator delete((void *)STACK[0x5F8]);
  }
  JUMPOUT(0x1003C5124);
}

void sub_1003C6E04()
{
}

void sub_1003C6E14()
{
  if (SLOBYTE(STACK[0x65F]) < 0) {
    operator delete((void *)STACK[0x648]);
  }
  JUMPOUT(0x1003C513CLL);
}

void sub_1003C6E38()
{
}

void sub_1003C6E48()
{
  if (SLOBYTE(STACK[0x6AF]) < 0) {
    operator delete((void *)STACK[0x698]);
  }
  JUMPOUT(0x1003C5154);
}

void sub_1003C6E6C()
{
}

void sub_1003C6E7C()
{
  if (SLOBYTE(STACK[0x6FF]) < 0) {
    operator delete((void *)STACK[0x6E8]);
  }
  JUMPOUT(0x1003C516CLL);
}

void sub_1003C6EA0()
{
}

void sub_1003C6EB0()
{
  if (SLOBYTE(STACK[0x74F]) < 0) {
    operator delete((void *)STACK[0x738]);
  }
  JUMPOUT(0x1003C5184);
}

void sub_1003C6ED4()
{
}

void sub_1003C6EE4()
{
  if (SLOBYTE(STACK[0x79F]) < 0) {
    operator delete((void *)STACK[0x788]);
  }
  JUMPOUT(0x1003C519CLL);
}

void sub_1003C6F08()
{
}

void sub_1003C6F18()
{
  if (SLOBYTE(STACK[0x7EF]) < 0) {
    operator delete((void *)STACK[0x7D8]);
  }
  JUMPOUT(0x1003C51B4);
}

void sub_1003C6F3C()
{
}

void sub_1003C6F4C()
{
  if (SLOBYTE(STACK[0x83F]) < 0) {
    operator delete((void *)STACK[0x828]);
  }
  JUMPOUT(0x1003C51CCLL);
}

void sub_1003C6F70()
{
}

void sub_1003C6F80()
{
  if (SLOBYTE(STACK[0x88F]) < 0) {
    operator delete((void *)STACK[0x878]);
  }
  JUMPOUT(0x1003C51E4);
}

void sub_1003C6FA4()
{
}

void sub_1003C6FB4()
{
  if (SLOBYTE(STACK[0x8DF]) < 0) {
    operator delete((void *)STACK[0x8C8]);
  }
  JUMPOUT(0x1003C51FCLL);
}

void sub_1003C6FD8()
{
}

void sub_1003C6FE8()
{
  if (SLOBYTE(STACK[0x92F]) < 0) {
    operator delete((void *)STACK[0x918]);
  }
  JUMPOUT(0x1003C5214);
}

void sub_1003C700C()
{
}

void sub_1003C701C()
{
  if (SLOBYTE(STACK[0x97F]) < 0) {
    operator delete((void *)STACK[0x968]);
  }
  JUMPOUT(0x1003C522CLL);
}

void sub_1003C7040()
{
}

void sub_1003C7050()
{
  if (SLOBYTE(STACK[0x9CF]) < 0) {
    operator delete((void *)STACK[0x9B8]);
  }
  JUMPOUT(0x1003C5244);
}

void sub_1003C7074()
{
}

void sub_1003C7084()
{
  if (SLOBYTE(STACK[0xA1F]) < 0) {
    operator delete((void *)STACK[0xA08]);
  }
  JUMPOUT(0x1003C525CLL);
}

void sub_1003C70A8()
{
}

void sub_1003C70B8()
{
  if (SLOBYTE(STACK[0xA6F]) < 0) {
    operator delete((void *)STACK[0xA58]);
  }
  JUMPOUT(0x1003C5274);
}

void sub_1003C70DC()
{
}

void sub_1003C70EC()
{
  if (SLOBYTE(STACK[0xABF]) < 0) {
    operator delete((void *)STACK[0xAA8]);
  }
  JUMPOUT(0x1003C528CLL);
}

void sub_1003C7110()
{
}

void sub_1003C7120()
{
  if (SLOBYTE(STACK[0xB0F]) < 0) {
    operator delete((void *)STACK[0xAF8]);
  }
  JUMPOUT(0x1003C52A4);
}

void sub_1003C7144()
{
}

void sub_1003C7154()
{
  if (SLOBYTE(STACK[0xB5F]) < 0) {
    operator delete((void *)STACK[0xB48]);
  }
  JUMPOUT(0x1003C52BCLL);
}

void sub_1003C7178()
{
}

void sub_1003C7188()
{
  if (SLOBYTE(STACK[0xBAF]) < 0) {
    operator delete((void *)STACK[0xB98]);
  }
  JUMPOUT(0x1003C52D4);
}

void sub_1003C71AC()
{
}

void sub_1003C71BC()
{
  if (SLOBYTE(STACK[0xBFF]) < 0) {
    operator delete((void *)STACK[0xBE8]);
  }
  JUMPOUT(0x1003C52ECLL);
}

void sub_1003C71E0()
{
}

void sub_1003C71F0()
{
  if (SLOBYTE(STACK[0xC4F]) < 0) {
    operator delete((void *)STACK[0xC38]);
  }
  JUMPOUT(0x1003C5304);
}

void sub_1003C7214()
{
}

void sub_1003C7224()
{
  if (SLOBYTE(STACK[0xC9F]) < 0) {
    operator delete((void *)STACK[0xC88]);
  }
  JUMPOUT(0x1003C531CLL);
}

void sub_1003C7248()
{
}

void sub_1003C7258()
{
  if (SLOBYTE(STACK[0xCEF]) < 0) {
    operator delete((void *)STACK[0xCD8]);
  }
  JUMPOUT(0x1003C5334);
}

void sub_1003C727C()
{
}

void sub_1003C728C()
{
  if (SLOBYTE(STACK[0xD3F]) < 0) {
    operator delete((void *)STACK[0xD28]);
  }
  JUMPOUT(0x1003C534CLL);
}

void sub_1003C72B0()
{
}

void sub_1003C72C0()
{
  if (SLOBYTE(STACK[0xD8F]) < 0) {
    operator delete((void *)STACK[0xD78]);
  }
  JUMPOUT(0x1003C5364);
}

void sub_1003C72E4()
{
}

void sub_1003C72F4()
{
  if (SLOBYTE(STACK[0xDDF]) < 0) {
    operator delete((void *)STACK[0xDC8]);
  }
  JUMPOUT(0x1003C537CLL);
}

void sub_1003C7318()
{
}

void sub_1003C7328()
{
  if (SLOBYTE(STACK[0xE2F]) < 0) {
    operator delete((void *)STACK[0xE18]);
  }
  JUMPOUT(0x1003C5394);
}

void sub_1003C734C()
{
}

void sub_1003C735C()
{
  if (SLOBYTE(STACK[0xE7F]) < 0) {
    operator delete((void *)STACK[0xE68]);
  }
  JUMPOUT(0x1003C53ACLL);
}

void sub_1003C7380()
{
}

void sub_1003C7390()
{
  if (SLOBYTE(STACK[0xECF]) < 0) {
    operator delete((void *)STACK[0xEB8]);
  }
  JUMPOUT(0x1003C53C4);
}

void sub_1003C73B4()
{
}

void sub_1003C73C4()
{
  if (SLOBYTE(STACK[0xF1F]) < 0) {
    operator delete((void *)STACK[0xF08]);
  }
  JUMPOUT(0x1003C53DCLL);
}

void sub_1003C73E8()
{
}

void sub_1003C73F8()
{
  if (SLOBYTE(STACK[0xF6F]) < 0) {
    operator delete((void *)STACK[0xF58]);
  }
  JUMPOUT(0x1003C53F4);
}

void sub_1003C741C()
{
}

void sub_1003C742C()
{
  if (*(char *)(v0 + 47) < 0) {
    operator delete((void *)STACK[0xFA8]);
  }
  JUMPOUT(0x1003C540CLL);
}

void sub_1003C7450()
{
}

void sub_1003C7460()
{
  if (*(char *)(v0 + 127) < 0) {
    operator delete((void *)STACK[0xFF8]);
  }
  JUMPOUT(0x1003C5424);
}

void sub_1003C7484()
{
}

void sub_1003C7494()
{
  if (*(char *)(v0 + 207) < 0) {
    operator delete((void *)STACK[0x1048]);
  }
  JUMPOUT(0x1003C5440);
}

void sub_1003C74B8()
{
}

void sub_1003C74C8()
{
  if (*(char *)(v0 + 287) < 0) {
    operator delete((void *)STACK[0x1098]);
  }
  JUMPOUT(0x1003C545CLL);
}

void sub_1003C74EC()
{
}

void sub_1003C74FC()
{
  if (*(char *)(v0 + 367) < 0) {
    operator delete((void *)STACK[0x10E8]);
  }
  JUMPOUT(0x1003C5478);
}

void sub_1003C7520()
{
}

void sub_1003C7530()
{
  if (*(char *)(v0 + 447) < 0) {
    operator delete((void *)STACK[0x1138]);
  }
  JUMPOUT(0x1003C5494);
}

void sub_1003C7554()
{
}

void sub_1003C7564()
{
  if (*(char *)(v0 + 527) < 0) {
    operator delete((void *)STACK[0x1188]);
  }
  JUMPOUT(0x1003C54B0);
}

void sub_1003C7588()
{
}

void sub_1003C7598()
{
  if (*(char *)(v0 + 607) < 0) {
    operator delete((void *)STACK[0x11D8]);
  }
  JUMPOUT(0x1003C54CCLL);
}

void sub_1003C75BC()
{
}

void sub_1003C75CC()
{
  if (*(char *)(v0 + 687) < 0) {
    operator delete((void *)STACK[0x1228]);
  }
  JUMPOUT(0x1003C54E8);
}

void sub_1003C75F0()
{
}

void sub_1003C7600()
{
  if (*(char *)(v0 + 767) < 0) {
    operator delete((void *)STACK[0x1278]);
  }
  JUMPOUT(0x1003C5504);
}

void sub_1003C7624()
{
}

void sub_1003C7634()
{
  if (*(char *)(v0 + 847) < 0) {
    operator delete((void *)STACK[0x12C8]);
  }
  JUMPOUT(0x1003C5520);
}

void sub_1003C7658()
{
}

void sub_1003C7668()
{
  if (*(char *)(v0 + 927) < 0) {
    operator delete((void *)STACK[0x1318]);
  }
  JUMPOUT(0x1003C553CLL);
}

void sub_1003C768C()
{
}

void sub_1003C769C()
{
  if (*(char *)(v0 + 1007) < 0) {
    operator delete((void *)STACK[0x1368]);
  }
  JUMPOUT(0x1003C5558);
}

void sub_1003C76C0()
{
}

void sub_1003C76D0()
{
  if (*(char *)(v0 + 1087) < 0) {
    operator delete((void *)STACK[0x13B8]);
  }
  JUMPOUT(0x1003C5574);
}

void sub_1003C76F4()
{
}

void sub_1003C7704()
{
  if (*(char *)(v0 + 1167) < 0) {
    operator delete((void *)STACK[0x1408]);
  }
  JUMPOUT(0x1003C5590);
}

void sub_1003C7728()
{
}

void sub_1003C7738()
{
  if (*(char *)(v0 + 1247) < 0) {
    operator delete((void *)STACK[0x1458]);
  }
  JUMPOUT(0x1003C55ACLL);
}

void sub_1003C775C()
{
}

void sub_1003C776C()
{
  if (*(char *)(v0 + 1327) < 0) {
    operator delete((void *)STACK[0x14A8]);
  }
  JUMPOUT(0x1003C55C8);
}

void sub_1003C7790()
{
}

void sub_1003C77A0()
{
  if (*(char *)(v0 + 1407) < 0) {
    operator delete((void *)STACK[0x14F8]);
  }
  JUMPOUT(0x1003C55E4);
}

void sub_1003C77C4()
{
}

void sub_1003C77D4()
{
  if (*(char *)(v0 + 1487) < 0) {
    operator delete((void *)STACK[0x1548]);
  }
  JUMPOUT(0x1003C5600);
}

void sub_1003C77F8()
{
}

void sub_1003C7808()
{
  if (*(char *)(v0 + 1567) < 0) {
    operator delete((void *)STACK[0x1598]);
  }
  JUMPOUT(0x1003C561CLL);
}

void sub_1003C782C()
{
}

void sub_1003C783C()
{
  if (*(char *)(v0 + 1647) < 0) {
    operator delete((void *)STACK[0x15E8]);
  }
  JUMPOUT(0x1003C5638);
}

void sub_1003C7860()
{
}

void sub_1003C7870()
{
  if (*(char *)(v0 + 1727) < 0) {
    operator delete((void *)STACK[0x1638]);
  }
  JUMPOUT(0x1003C5654);
}

void sub_1003C7894()
{
}

void sub_1003C78A4()
{
  if (*(char *)(v0 + 1807) < 0) {
    operator delete((void *)STACK[0x1688]);
  }
  JUMPOUT(0x1003C5670);
}

void sub_1003C78C8()
{
}

void sub_1003C78D8()
{
  if (*(char *)(v0 + 1887) < 0) {
    operator delete((void *)STACK[0x16D8]);
  }
  JUMPOUT(0x1003C568CLL);
}

void sub_1003C78FC()
{
}

void sub_1003C790C()
{
  if (*(char *)(v0 + 1967) < 0) {
    operator delete((void *)STACK[0x1728]);
  }
  JUMPOUT(0x1003C56A8);
}

void sub_1003C7930()
{
}

void sub_1003C7940()
{
  if (*(char *)(v0 + 2047) < 0) {
    operator delete((void *)STACK[0x1778]);
  }
  JUMPOUT(0x1003C56C4);
}

void sub_1003C7964()
{
}

void sub_1003C7974()
{
  if (*(char *)(v0 + 2127) < 0) {
    operator delete((void *)STACK[0x17C8]);
  }
  JUMPOUT(0x1003C56E0);
}

void sub_1003C7998()
{
}

void sub_1003C79A8()
{
  if (*(char *)(v0 + 2207) < 0) {
    operator delete((void *)STACK[0x1818]);
  }
  JUMPOUT(0x1003C56FCLL);
}

void sub_1003C79CC()
{
}

void sub_1003C79DC()
{
  if (*(char *)(v0 + 2287) < 0) {
    operator delete((void *)STACK[0x1868]);
  }
  JUMPOUT(0x1003C5718);
}

void sub_1003C7A00()
{
}

void sub_1003C7A10()
{
  if (*(char *)(v0 + 2367) < 0) {
    operator delete((void *)STACK[0x18B8]);
  }
  JUMPOUT(0x1003C5734);
}

void sub_1003C7A34()
{
}

void sub_1003C7A44()
{
  if (*(char *)(v0 + 2447) < 0) {
    operator delete((void *)STACK[0x1908]);
  }
  JUMPOUT(0x1003C5750);
}

void sub_1003C7A68()
{
}

void sub_1003C7A78()
{
  if (*(char *)(v0 + 2527) < 0) {
    operator delete((void *)STACK[0x1958]);
  }
  JUMPOUT(0x1003C576CLL);
}

void sub_1003C7A9C()
{
}

void sub_1003C7AAC()
{
  if (*(char *)(v0 + 2607) < 0) {
    operator delete((void *)STACK[0x19A8]);
  }
  JUMPOUT(0x1003C5788);
}

void sub_1003C7AD0()
{
}

void sub_1003C7AE0()
{
  if (*(char *)(v0 + 2687) < 0) {
    operator delete((void *)STACK[0x19F8]);
  }
  JUMPOUT(0x1003C57A4);
}

void sub_1003C7B04()
{
}

void sub_1003C7B14()
{
  if (*(char *)(v0 + 2767) < 0) {
    operator delete((void *)STACK[0x1A48]);
  }
  JUMPOUT(0x1003C57C0);
}

void sub_1003C7B38()
{
}

void sub_1003C7B48()
{
  if (*(char *)(v0 + 2847) < 0) {
    operator delete((void *)STACK[0x1A98]);
  }
  JUMPOUT(0x1003C57DCLL);
}

void sub_1003C7B6C()
{
}

void sub_1003C7B7C()
{
  if (*(char *)(v0 + 2927) < 0) {
    operator delete((void *)STACK[0x1AE8]);
  }
  JUMPOUT(0x1003C57F8);
}

void sub_1003C7BA0()
{
}

void sub_1003C7BB0()
{
  if (*(char *)(v0 + 3007) < 0) {
    operator delete((void *)STACK[0x1B38]);
  }
  JUMPOUT(0x1003C5814);
}

void sub_1003C7BD4()
{
}

void sub_1003C7BE4()
{
  if (*(char *)(v0 + 3087) < 0) {
    operator delete((void *)STACK[0x1B88]);
  }
  JUMPOUT(0x1003C5830);
}

void sub_1003C7C08()
{
}

void sub_1003C7C18()
{
  if (*(char *)(v0 + 3167) < 0) {
    operator delete((void *)STACK[0x1BD8]);
  }
  JUMPOUT(0x1003C584CLL);
}

void sub_1003C7C3C()
{
}

void sub_1003C7C4C()
{
  if (*(char *)(v0 + 3247) < 0) {
    operator delete((void *)STACK[0x1C28]);
  }
  JUMPOUT(0x1003C5868);
}

void sub_1003C7C70()
{
}

void sub_1003C7C80()
{
  if (*(char *)(v0 + 3327) < 0) {
    operator delete((void *)STACK[0x1C78]);
  }
  JUMPOUT(0x1003C5884);
}

void sub_1003C7CA4()
{
}

void sub_1003C7CB4()
{
  if (*(char *)(v0 + 3407) < 0) {
    operator delete((void *)STACK[0x1CC8]);
  }
  JUMPOUT(0x1003C58A0);
}

void sub_1003C7CD8()
{
}

void sub_1003C7CE8()
{
  if (*(char *)(v0 + 3487) < 0) {
    operator delete((void *)STACK[0x1D18]);
  }
  JUMPOUT(0x1003C58BCLL);
}

void sub_1003C7D0C()
{
}

void sub_1003C7D1C()
{
  if (*(char *)(v0 + 3567) < 0) {
    operator delete((void *)STACK[0x1D68]);
  }
  JUMPOUT(0x1003C58D8);
}

void sub_1003C7D40()
{
}

void sub_1003C7D50()
{
  if (*(char *)(v0 + 3647) < 0) {
    operator delete((void *)STACK[0x1DB8]);
  }
  JUMPOUT(0x1003C58F4);
}

void sub_1003C7D74()
{
}

void sub_1003C7D84()
{
  if (*(char *)(v0 + 3727) < 0) {
    operator delete((void *)STACK[0x1E08]);
  }
  JUMPOUT(0x1003C5910);
}

void sub_1003C7DA8()
{
}

void sub_1003C7DB8()
{
  if (*(char *)(v0 + 3807) < 0) {
    operator delete((void *)STACK[0x1E58]);
  }
  JUMPOUT(0x1003C592CLL);
}

void sub_1003C7DDC()
{
}

void sub_1003C7DEC()
{
  if (*(char *)(v0 + 3887) < 0) {
    operator delete((void *)STACK[0x1EA8]);
  }
  JUMPOUT(0x1003C5948);
}

void sub_1003C7E10()
{
}

void sub_1003C7E20()
{
  if (*(char *)(v0 + 3967) < 0) {
    operator delete((void *)STACK[0x1EF8]);
  }
  JUMPOUT(0x1003C5964);
}

void sub_1003C7E44()
{
}

void sub_1003C7E54()
{
  if (*(char *)(v0 + 4047) < 0) {
    operator delete((void *)STACK[0x1F48]);
  }
  JUMPOUT(0x1003C5980);
}

void sub_1003C7E78()
{
}

void sub_1003C7E88()
{
  if (*(char *)(v0 + 47) < 0) {
    operator delete((void *)STACK[0x1F98]);
  }
  JUMPOUT(0x1003C599CLL);
}

void sub_1003C7EAC()
{
}

void sub_1003C7EBC()
{
  if (*(char *)(v0 + 127) < 0) {
    operator delete((void *)STACK[0x1FE8]);
  }
  JUMPOUT(0x1003C59B8);
}

void sub_1003C7EE0()
{
}

void sub_1003C7EF0()
{
  if (*(char *)(v0 + 207) < 0) {
    operator delete((void *)STACK[0x2038]);
  }
  JUMPOUT(0x1003C59D4);
}

void sub_1003C7F14()
{
}

void sub_1003C7F24()
{
  if (*(char *)(v0 + 287) < 0) {
    operator delete((void *)STACK[0x2088]);
  }
  JUMPOUT(0x1003C59F0);
}

void sub_1003C7F48()
{
}

void sub_1003C7F58()
{
  if (*(char *)(v0 + 367) < 0) {
    operator delete((void *)STACK[0x20D8]);
  }
  JUMPOUT(0x1003C5A0CLL);
}

void sub_1003C7F7C()
{
}

void sub_1003C7F8C()
{
  if (*(char *)(v0 + 447) < 0) {
    operator delete((void *)STACK[0x2128]);
  }
  JUMPOUT(0x1003C5A28);
}

void sub_1003C7FB0()
{
}

void sub_1003C7FC0()
{
  if (*(char *)(v0 + 527) < 0) {
    operator delete((void *)STACK[0x2178]);
  }
  JUMPOUT(0x1003C5A44);
}

void sub_1003C7FE4()
{
}

void sub_1003C7FF4()
{
  if (*(char *)(v0 + 607) < 0) {
    operator delete((void *)STACK[0x21C8]);
  }
  JUMPOUT(0x1003C5A60);
}

void sub_1003C8018()
{
}

void sub_1003C8028()
{
  if (*(char *)(v0 + 687) < 0) {
    operator delete((void *)STACK[0x2218]);
  }
  JUMPOUT(0x1003C5A7CLL);
}

void sub_1003C804C()
{
}

void sub_1003C805C()
{
  if (*(char *)(v0 + 767) < 0) {
    operator delete((void *)STACK[0x2268]);
  }
  JUMPOUT(0x1003C5A98);
}

void sub_1003C8080()
{
}

void sub_1003C8090()
{
  if (*(char *)(v0 + 847) < 0) {
    operator delete((void *)STACK[0x22B8]);
  }
  JUMPOUT(0x1003C5AB4);
}

void sub_1003C80B4()
{
}

void sub_1003C80C4()
{
  if (*(char *)(v0 + 927) < 0) {
    operator delete((void *)STACK[0x2308]);
  }
  JUMPOUT(0x1003C5AD0);
}

void sub_1003C80E8()
{
}

void sub_1003C80F8()
{
  if (*(char *)(v0 + 1007) < 0) {
    operator delete((void *)STACK[0x2358]);
  }
  JUMPOUT(0x1003C5AECLL);
}

void sub_1003C811C()
{
}

void sub_1003C812C()
{
  if (*(char *)(v0 + 1087) < 0) {
    operator delete((void *)STACK[0x23A8]);
  }
  JUMPOUT(0x1003C5B08);
}

void sub_1003C8150()
{
}

void sub_1003C8160()
{
  if (*(char *)(v0 + 1167) < 0) {
    operator delete((void *)STACK[0x23F8]);
  }
  JUMPOUT(0x1003C5B24);
}

void sub_1003C8184()
{
}

void sub_1003C8194()
{
  if (*(char *)(v0 + 1247) < 0) {
    operator delete((void *)STACK[0x2448]);
  }
  JUMPOUT(0x1003C5B40);
}

void sub_1003C81B8()
{
}

void sub_1003C81C8()
{
  if (*(char *)(v0 + 1327) < 0) {
    operator delete((void *)STACK[0x2498]);
  }
  JUMPOUT(0x1003C5B5CLL);
}

void sub_1003C81EC()
{
}

void sub_1003C81FC()
{
  if (*(char *)(v0 + 1407) < 0) {
    operator delete((void *)STACK[0x24E8]);
  }
  JUMPOUT(0x1003C5B78);
}

void sub_1003C8220()
{
}

void sub_1003C8230()
{
  if (*(char *)(v0 + 1487) < 0) {
    operator delete((void *)STACK[0x2538]);
  }
  JUMPOUT(0x1003C5B94);
}

void sub_1003C8254()
{
}

void sub_1003C8264()
{
  if (*(char *)(v0 + 1567) < 0) {
    operator delete((void *)STACK[0x2588]);
  }
  JUMPOUT(0x1003C5BB0);
}

void sub_1003C8288()
{
}

void sub_1003C8298()
{
  if (*(char *)(v0 + 1647) < 0) {
    operator delete((void *)STACK[0x25D8]);
  }
  JUMPOUT(0x1003C5BCCLL);
}

void sub_1003C82BC()
{
}

void sub_1003C82CC()
{
  if (*(char *)(v0 + 1727) < 0) {
    operator delete((void *)STACK[0x2628]);
  }
  JUMPOUT(0x1003C5BE8);
}

void sub_1003C82F0()
{
}

void sub_1003C8300()
{
  if (*(char *)(v0 + 1807) < 0) {
    operator delete((void *)STACK[0x2678]);
  }
  JUMPOUT(0x1003C5C04);
}

void sub_1003C8324()
{
}

void sub_1003C8334()
{
  if (*(char *)(v0 + 1887) < 0) {
    operator delete((void *)STACK[0x26C8]);
  }
  JUMPOUT(0x1003C5C20);
}

void sub_1003C8358()
{
}

void sub_1003C8368()
{
  if (*(char *)(v0 + 1967) < 0) {
    operator delete((void *)STACK[0x2718]);
  }
  JUMPOUT(0x1003C5C3CLL);
}

void sub_1003C838C()
{
}

void sub_1003C839C()
{
  if (*(char *)(v0 + 2047) < 0) {
    operator delete((void *)STACK[0x2768]);
  }
  JUMPOUT(0x1003C5C58);
}

void sub_1003C83C0()
{
}

void sub_1003C83D0()
{
  if (*(char *)(v0 + 2127) < 0) {
    operator delete((void *)STACK[0x27B8]);
  }
  JUMPOUT(0x1003C5C74);
}

void sub_1003C83F4()
{
}

void sub_1003C8404()
{
  if (*(char *)(v0 + 2207) < 0) {
    operator delete((void *)STACK[0x2808]);
  }
  JUMPOUT(0x1003C5C90);
}

void sub_1003C8428()
{
}

void sub_1003C8438()
{
  if (*(char *)(v0 + 2287) < 0) {
    operator delete((void *)STACK[0x2858]);
  }
  JUMPOUT(0x1003C5CACLL);
}

void sub_1003C845C()
{
}

void sub_1003C846C()
{
  if (*(char *)(v0 + 2367) < 0) {
    operator delete((void *)STACK[0x28A8]);
  }
  JUMPOUT(0x1003C5CC8);
}

void sub_1003C8490()
{
}

void sub_1003C84A0()
{
  if (*(char *)(v0 + 2447) < 0) {
    operator delete((void *)STACK[0x28F8]);
  }
  JUMPOUT(0x1003C5CE4);
}

void sub_1003C84C4()
{
}

void sub_1003C84D4()
{
  if (*(char *)(v0 + 2527) < 0) {
    operator delete((void *)STACK[0x2948]);
  }
  JUMPOUT(0x1003C5D00);
}

void sub_1003C84F8()
{
}

void sub_1003C8508()
{
  if (*(char *)(v0 + 2607) < 0) {
    operator delete((void *)STACK[0x2998]);
  }
  JUMPOUT(0x1003C5D1CLL);
}

void sub_1003C852C()
{
}

void sub_1003C853C()
{
  if (*(char *)(v0 + 2687) < 0) {
    operator delete((void *)STACK[0x29E8]);
  }
  JUMPOUT(0x1003C5D38);
}

void sub_1003C8560()
{
}

void sub_1003C8570()
{
  if (*(char *)(v0 + 2767) < 0) {
    operator delete((void *)STACK[0x2A38]);
  }
  JUMPOUT(0x1003C5D54);
}

void sub_1003C8594()
{
}

void sub_1003C85A4()
{
  if (*(char *)(v0 + 2847) < 0) {
    operator delete((void *)STACK[0x2A88]);
  }
  JUMPOUT(0x1003C5D70);
}

void sub_1003C85C8()
{
}

void sub_1003C85D8()
{
  if (*(char *)(v0 + 2927) < 0) {
    operator delete((void *)STACK[0x2AD8]);
  }
  JUMPOUT(0x1003C5D8CLL);
}

void sub_1003C85FC()
{
}

void sub_1003C860C()
{
  if (*(char *)(v0 + 3007) < 0) {
    operator delete((void *)STACK[0x2B28]);
  }
  JUMPOUT(0x1003C5DA8);
}

void sub_1003C8630()
{
}

void sub_1003C8640()
{
  if (*(char *)(v0 + 3087) < 0) {
    operator delete((void *)STACK[0x2B78]);
  }
  JUMPOUT(0x1003C5DC4);
}

void sub_1003C8664()
{
}

void sub_1003C8674()
{
  if (*(char *)(v0 + 3167) < 0) {
    operator delete((void *)STACK[0x2BC8]);
  }
  JUMPOUT(0x1003C5DE0);
}

void sub_1003C8698()
{
}

void sub_1003C86A8()
{
  if (*(char *)(v0 + 3247) < 0) {
    operator delete((void *)STACK[0x2C18]);
  }
  JUMPOUT(0x1003C5DFCLL);
}

void sub_1003C86CC()
{
}

void sub_1003C86DC()
{
  if (*(char *)(v0 + 3327) < 0) {
    operator delete((void *)STACK[0x2C68]);
  }
  JUMPOUT(0x1003C5E18);
}

void sub_1003C8700()
{
}

void sub_1003C8710()
{
  if (*(char *)(v0 + 3407) < 0) {
    operator delete((void *)STACK[0x2CB8]);
  }
  JUMPOUT(0x1003C5E34);
}

void sub_1003C8734()
{
}

void sub_1003C8744()
{
  if (*(char *)(v0 + 3487) < 0) {
    operator delete((void *)STACK[0x2D08]);
  }
  JUMPOUT(0x1003C5E50);
}

void sub_1003C8768()
{
}

void sub_1003C8778()
{
  if (*(char *)(v0 + 3567) < 0) {
    operator delete((void *)STACK[0x2D58]);
  }
  JUMPOUT(0x1003C5E6CLL);
}

void sub_1003C879C()
{
}

void sub_1003C87AC()
{
  if (*(char *)(v0 + 3647) < 0) {
    operator delete((void *)STACK[0x2DA8]);
  }
  JUMPOUT(0x1003C5E88);
}

void sub_1003C87D0()
{
}

void sub_1003C87E0()
{
  if (*(char *)(v0 + 3727) < 0) {
    operator delete((void *)STACK[0x2DF8]);
  }
  JUMPOUT(0x1003C5EA4);
}

void sub_1003C8804()
{
}

void sub_1003C8814()
{
  if (*(char *)(v0 + 3807) < 0) {
    operator delete((void *)STACK[0x2E48]);
  }
  JUMPOUT(0x1003C5EC0);
}

void sub_1003C8838()
{
}

void sub_1003C8848()
{
  if (*(char *)(v0 + 3887) < 0) {
    operator delete((void *)STACK[0x2E98]);
  }
  JUMPOUT(0x1003C5EDCLL);
}

void sub_1003C886C()
{
}

void sub_1003C887C()
{
  if (*(char *)(v0 + 3967) < 0) {
    operator delete((void *)STACK[0x2EE8]);
  }
  JUMPOUT(0x1003C5EF8);
}

void sub_1003C88A0()
{
}

void sub_1003C88B0()
{
  if (*(char *)(v0 + 4047) < 0) {
    operator delete((void *)STACK[0x2F38]);
  }
  JUMPOUT(0x1003C5F14);
}

void sub_1003C88D4()
{
}

void sub_1003C88E4()
{
  if (*(char *)(v0 + 47) < 0) {
    operator delete((void *)STACK[0x2F88]);
  }
  JUMPOUT(0x1003C5F30);
}

void sub_1003C8908()
{
}

void sub_1003C8918()
{
  if (*(char *)(v0 + 127) < 0) {
    operator delete((void *)STACK[0x2FD8]);
  }
  JUMPOUT(0x1003C5F4CLL);
}

void sub_1003C893C()
{
}

void sub_1003C894C()
{
  if (*(char *)(v0 + 207) < 0) {
    operator delete((void *)STACK[0x3028]);
  }
  JUMPOUT(0x1003C5F68);
}

void sub_1003C8970()
{
}

void sub_1003C8980()
{
  if (*(char *)(v0 + 287) < 0) {
    operator delete((void *)STACK[0x3078]);
  }
  JUMPOUT(0x1003C5F84);
}

void sub_1003C89A4()
{
}

void sub_1003C89B4()
{
  if (*(char *)(v0 + 367) < 0) {
    operator delete((void *)STACK[0x30C8]);
  }
  JUMPOUT(0x1003C5FA0);
}

void sub_1003C89D8()
{
}

void sub_1003C89E8()
{
  if (*(char *)(v0 + 447) < 0) {
    operator delete((void *)STACK[0x3118]);
  }
  JUMPOUT(0x1003C5FBCLL);
}

void sub_1003C8A0C()
{
}

void sub_1003C8A1C()
{
  if (*(char *)(v0 + 527) < 0) {
    operator delete((void *)STACK[0x3168]);
  }
  JUMPOUT(0x1003C5FD8);
}

void sub_1003C8A40()
{
}

void sub_1003C8A50()
{
  if (*(char *)(v0 + 607) < 0) {
    operator delete((void *)STACK[0x31B8]);
  }
  JUMPOUT(0x1003C5FF4);
}

void sub_1003C8A74()
{
}

void sub_1003C8A84()
{
  if (*(char *)(v0 + 687) < 0) {
    operator delete((void *)STACK[0x3208]);
  }
  JUMPOUT(0x1003C6010);
}

void sub_1003C8AA8()
{
}

void sub_1003C8AB8()
{
  if (*(char *)(v0 + 767) < 0) {
    operator delete((void *)STACK[0x3258]);
  }
  JUMPOUT(0x1003C602CLL);
}

void sub_1003C8ADC()
{
}

void sub_1003C8AEC()
{
  if (*(char *)(v0 + 847) < 0) {
    operator delete((void *)STACK[0x32A8]);
  }
  JUMPOUT(0x1003C6048);
}

void sub_1003C8B10()
{
}

void sub_1003C8B20()
{
  if (*(char *)(v0 + 927) < 0) {
    operator delete((void *)STACK[0x32F8]);
  }
  JUMPOUT(0x1003C6064);
}

void sub_1003C8B44()
{
}

void sub_1003C8B54()
{
  if (*(char *)(v0 + 1007) < 0) {
    operator delete((void *)STACK[0x3348]);
  }
  JUMPOUT(0x1003C6080);
}

void sub_1003C8B78()
{
}

void sub_1003C8B88()
{
  if (*(char *)(v0 + 1087) < 0) {
    operator delete((void *)STACK[0x3398]);
  }
  JUMPOUT(0x1003C609CLL);
}

void sub_1003C8BAC()
{
}

void sub_1003C8BBC()
{
  if (*(char *)(v0 + 1167) < 0) {
    operator delete((void *)STACK[0x33E8]);
  }
  JUMPOUT(0x1003C60B8);
}

void sub_1003C8BE0()
{
}

void sub_1003C8BF0()
{
  if (*(char *)(v0 + 1247) < 0) {
    operator delete((void *)STACK[0x3438]);
  }
  JUMPOUT(0x1003C60D4);
}

void sub_1003C8C14()
{
}

void sub_1003C8C24()
{
  if (*(char *)(v0 + 1327) < 0) {
    operator delete((void *)STACK[0x3488]);
  }
  JUMPOUT(0x1003C60F0);
}

void sub_1003C8C48()
{
}

void sub_1003C8C58()
{
  if (*(char *)(v0 + 1407) < 0) {
    operator delete((void *)STACK[0x34D8]);
  }
  JUMPOUT(0x1003C610CLL);
}

void sub_1003C8C7C()
{
}

void sub_1003C8C8C()
{
  if (*(char *)(v0 + 1487) < 0) {
    operator delete((void *)STACK[0x3528]);
  }
  JUMPOUT(0x1003C6128);
}

void sub_1003C8CB0()
{
}

void sub_1003C8CC0()
{
  if (*(char *)(v0 + 1567) < 0) {
    operator delete((void *)STACK[0x3578]);
  }
  JUMPOUT(0x1003C6144);
}

void sub_1003C8CE4()
{
}

void sub_1003C8CF4()
{
  if (*(char *)(v0 + 1647) < 0) {
    operator delete((void *)STACK[0x35C8]);
  }
  JUMPOUT(0x1003C6160);
}

void sub_1003C8D18()
{
}

void sub_1003C8D28()
{
  if (*(char *)(v0 + 1727) < 0) {
    operator delete((void *)STACK[0x3618]);
  }
  JUMPOUT(0x1003C617CLL);
}

void sub_1003C8D4C()
{
}

void sub_1003C8D5C()
{
  if (*(char *)(v0 + 1807) < 0) {
    operator delete((void *)STACK[0x3668]);
  }
  JUMPOUT(0x1003C6198);
}

void sub_1003C8D80()
{
}

void sub_1003C8D90()
{
  if (*(char *)(v0 + 1887) < 0) {
    operator delete((void *)STACK[0x36B8]);
  }
  JUMPOUT(0x1003C61B4);
}

void sub_1003C8DB4()
{
}

void sub_1003C8DC4()
{
  if (*(char *)(v0 + 1967) < 0) {
    operator delete((void *)STACK[0x3708]);
  }
  JUMPOUT(0x1003C61D0);
}

void sub_1003C8DE8()
{
}

void sub_1003C8DF8()
{
  if (*(char *)(v0 + 2047) < 0) {
    operator delete((void *)STACK[0x3758]);
  }
  JUMPOUT(0x1003C61ECLL);
}

void sub_1003C8E1C()
{
}

void sub_1003C8E2C()
{
  if (*(char *)(v0 + 2127) < 0) {
    operator delete((void *)STACK[0x37A8]);
  }
  JUMPOUT(0x1003C6208);
}

void sub_1003C8E50()
{
}

void sub_1003C8E60()
{
  if (*(char *)(v0 + 2207) < 0) {
    operator delete((void *)STACK[0x37F8]);
  }
  JUMPOUT(0x1003C6224);
}

void sub_1003C8E84()
{
}

void sub_1003C8E94()
{
  if (*(char *)(v0 + 2287) < 0) {
    operator delete((void *)STACK[0x3848]);
  }
  JUMPOUT(0x1003C6240);
}

void sub_1003C8EB8()
{
}

void sub_1003C8EC8()
{
  if (*(char *)(v0 + 2367) < 0) {
    operator delete((void *)STACK[0x3898]);
  }
  JUMPOUT(0x1003C625CLL);
}

void sub_1003C8EEC()
{
}

void sub_1003C8EFC()
{
  if (*(char *)(v0 + 2447) < 0) {
    operator delete((void *)STACK[0x38E8]);
  }
  JUMPOUT(0x1003C6278);
}

void sub_1003C8F20()
{
}

void sub_1003C8F30()
{
  if (*(char *)(v0 + 2527) < 0) {
    operator delete((void *)STACK[0x3938]);
  }
  JUMPOUT(0x1003C6294);
}

void sub_1003C8F54()
{
}

void sub_1003C8F64()
{
  if (*(char *)(v0 + 2607) < 0) {
    operator delete((void *)STACK[0x3988]);
  }
  JUMPOUT(0x1003C62B0);
}

void sub_1003C8F88()
{
}

void sub_1003C8F98()
{
  if (*(char *)(v0 + 2687) < 0) {
    operator delete((void *)STACK[0x39D8]);
  }
  JUMPOUT(0x1003C62CCLL);
}

void sub_1003C8FBC()
{
}

void sub_1003C8FCC()
{
  if (*(char *)(v0 + 2767) < 0) {
    operator delete((void *)STACK[0x3A28]);
  }
  JUMPOUT(0x1003C62E8);
}

void sub_1003C8FF0()
{
}

void sub_1003C9000()
{
  if (*(char *)(v0 + 2847) < 0) {
    operator delete((void *)STACK[0x3A78]);
  }
  JUMPOUT(0x1003C6304);
}

void sub_1003C9024()
{
}

void sub_1003C9034()
{
  if (*(char *)(v0 + 2927) < 0) {
    operator delete((void *)STACK[0x3AC8]);
  }
  JUMPOUT(0x1003C6320);
}

void sub_1003C9058()
{
}

void sub_1003C9068()
{
  if (*(char *)(v0 + 3007) < 0) {
    operator delete((void *)STACK[0x3B18]);
  }
  JUMPOUT(0x1003C633CLL);
}

void sub_1003C908C()
{
}

void sub_1003C909C()
{
  if (*(char *)(v0 + 3087) < 0) {
    operator delete((void *)STACK[0x3B68]);
  }
  JUMPOUT(0x1003C6358);
}

void sub_1003C90C0()
{
}

void sub_1003C90D0()
{
  if (*(char *)(v0 + 3167) < 0) {
    operator delete((void *)STACK[0x3BB8]);
  }
  JUMPOUT(0x1003C6374);
}

void sub_1003C90F4()
{
}

void sub_1003C9104()
{
  if (*(char *)(v0 + 3247) < 0) {
    operator delete((void *)STACK[0x3C08]);
  }
  JUMPOUT(0x1003C6390);
}

void sub_1003C9128()
{
}

void sub_1003C9138()
{
  if (*(char *)(v0 + 3327) < 0) {
    operator delete((void *)STACK[0x3C58]);
  }
  JUMPOUT(0x1003C63ACLL);
}

void sub_1003C915C()
{
}

void sub_1003C916C()
{
  if (*(char *)(v0 + 3407) < 0) {
    operator delete((void *)STACK[0x3CA8]);
  }
  JUMPOUT(0x1003C63C8);
}

void sub_1003C9190()
{
}

void sub_1003C91A0()
{
  if (*(char *)(v0 + 3487) < 0) {
    operator delete((void *)STACK[0x3CF8]);
  }
  JUMPOUT(0x1003C63E4);
}

void sub_1003C91C4()
{
}

void sub_1003C91D4()
{
  if (*(char *)(v0 + 3567) < 0) {
    operator delete((void *)STACK[0x3D48]);
  }
  JUMPOUT(0x1003C6400);
}

void sub_1003C91F8()
{
}

void sub_1003C9208()
{
  if (*(char *)(v0 + 3647) < 0) {
    operator delete((void *)STACK[0x3D98]);
  }
  JUMPOUT(0x1003C641CLL);
}

void sub_1003C922C()
{
}

void sub_1003C923C()
{
  if (*(char *)(v0 + 3727) < 0) {
    operator delete((void *)STACK[0x3DE8]);
  }
  JUMPOUT(0x1003C6438);
}

void sub_1003C9260()
{
}

void sub_1003C9270()
{
  if (*(char *)(v0 + 3807) < 0) {
    operator delete((void *)STACK[0x3E38]);
  }
  JUMPOUT(0x1003C6454);
}

void sub_1003C9294()
{
}

void sub_1003C92A4()
{
  if (*(char *)(v0 + 3887) < 0) {
    operator delete((void *)STACK[0x3E88]);
  }
  JUMPOUT(0x1003C6470);
}

void sub_1003C92C8()
{
}

void sub_1003C92D8()
{
  if (*(char *)(v0 + 3967) < 0) {
    operator delete((void *)STACK[0x3ED8]);
  }
  JUMPOUT(0x1003C648CLL);
}

void sub_1003C92FC()
{
}

void sub_1003C930C()
{
  if (*(char *)(v0 + 4047) < 0) {
    operator delete((void *)STACK[0x3F28]);
  }
  JUMPOUT(0x1003C64A8);
}

void sub_1003C9330()
{
}

void sub_1003C9340()
{
  if (*(char *)(v0 + 47) < 0) {
    operator delete((void *)STACK[0x3F78]);
  }
  JUMPOUT(0x1003C64C4);
}

void sub_1003C9364()
{
}

void sub_1003C9374()
{
  if (*(char *)(v0 + 127) < 0) {
    operator delete((void *)STACK[0x3FC8]);
  }
  JUMPOUT(0x1003C64E0);
}

void sub_1003C9398()
{
}

void sub_1003C93A8()
{
  if (*(char *)(v0 + 207) < 0) {
    operator delete((void *)STACK[0x4018]);
  }
  JUMPOUT(0x1003C64FCLL);
}

void sub_1003C93CC()
{
}

void sub_1003C93DC()
{
  if (*(char *)(v0 + 287) < 0) {
    operator delete((void *)STACK[0x4068]);
  }
  JUMPOUT(0x1003C6518);
}

void sub_1003C9400()
{
}

void sub_1003C9410()
{
  if (*(char *)(v0 + 367) < 0) {
    operator delete((void *)STACK[0x40B8]);
  }
  JUMPOUT(0x1003C6534);
}

void sub_1003C9434()
{
}

void sub_1003C9444()
{
  if (*(char *)(v0 + 447) < 0) {
    operator delete((void *)STACK[0x4108]);
  }
  JUMPOUT(0x1003C6550);
}

void sub_1003C9468()
{
}

void sub_1003C9478()
{
  if (*(char *)(v0 + 527) < 0) {
    operator delete((void *)STACK[0x4158]);
  }
  JUMPOUT(0x1003C656CLL);
}

void sub_1003C949C()
{
}

void sub_1003C94AC()
{
  if (*(char *)(v0 + 607) < 0) {
    operator delete((void *)STACK[0x41A8]);
  }
  JUMPOUT(0x1003C6588);
}

void sub_1003C94D0()
{
}

void sub_1003C94E0()
{
  if (*(char *)(v0 + 687) < 0) {
    operator delete((void *)STACK[0x41F8]);
  }
  JUMPOUT(0x1003C65A4);
}

void sub_1003C9504()
{
}

void sub_1003C9514()
{
  if (*(char *)(v0 + 767) < 0) {
    operator delete((void *)STACK[0x4248]);
  }
  JUMPOUT(0x1003C65C0);
}

void sub_1003C9538()
{
}

void sub_1003C9548()
{
  if (*(char *)(v0 + 847) < 0) {
    operator delete((void *)STACK[0x4298]);
  }
  JUMPOUT(0x1003C65DCLL);
}

void sub_1003C956C()
{
}

void sub_1003C957C()
{
  if (*(char *)(v0 + 927) < 0) {
    operator delete((void *)STACK[0x42E8]);
  }
  JUMPOUT(0x1003C65F8);
}

void sub_1003C95A0()
{
}

void sub_1003C95B0()
{
  if (*(char *)(v0 + 1007) < 0) {
    operator delete((void *)STACK[0x4338]);
  }
  JUMPOUT(0x1003C6614);
}

void sub_1003C95D4()
{
}

void sub_1003C95E4()
{
  if (*(char *)(v0 + 1087) < 0) {
    operator delete((void *)STACK[0x4388]);
  }
  JUMPOUT(0x1003C6630);
}

void sub_1003C9608()
{
}

void sub_1003C9618()
{
  if (*(char *)(v0 + 1167) < 0) {
    operator delete((void *)STACK[0x43D8]);
  }
  JUMPOUT(0x1003C664CLL);
}

void sub_1003C963C()
{
}

void sub_1003C964C()
{
  if (*(char *)(v0 + 1247) < 0) {
    operator delete((void *)STACK[0x4428]);
  }
  JUMPOUT(0x1003C6668);
}

void sub_1003C9670()
{
}

void sub_1003C9680()
{
  if (*(char *)(v0 + 1327) < 0) {
    operator delete((void *)STACK[0x4478]);
  }
  JUMPOUT(0x1003C6684);
}

void sub_1003C96A4()
{
}

void sub_1003C96B4()
{
  if (*(char *)(v0 + 1407) < 0) {
    operator delete((void *)STACK[0x44C8]);
  }
  JUMPOUT(0x1003C66A0);
}

void sub_1003C96D8()
{
}

void sub_1003C96E8()
{
  if (*(char *)(v0 + 1487) < 0) {
    operator delete((void *)STACK[0x4518]);
  }
  JUMPOUT(0x1003C66BCLL);
}

void sub_1003C970C()
{
}

void sub_1003C971C()
{
  if (*(char *)(v0 + 1567) < 0) {
    operator delete((void *)STACK[0x4568]);
  }
  JUMPOUT(0x1003C66D8);
}

void sub_1003C9740()
{
}

void sub_1003C9750()
{
  if (*(char *)(v0 + 1647) < 0) {
    operator delete((void *)STACK[0x45B8]);
  }
  JUMPOUT(0x1003C66F4);
}

void sub_1003C9774()
{
}

void sub_1003C9784()
{
  if (*(char *)(v0 + 1727) < 0) {
    operator delete((void *)STACK[0x4608]);
  }
  JUMPOUT(0x1003C6710);
}

void sub_1003C97A8()
{
}

void sub_1003C97B8()
{
  if (*(char *)(v0 + 1807) < 0) {
    operator delete((void *)STACK[0x4658]);
  }
  JUMPOUT(0x1003C672CLL);
}

void sub_1003C97DC()
{
}

void sub_1003C97EC()
{
  if (*(char *)(v0 + 1887) < 0) {
    operator delete((void *)STACK[0x46A8]);
  }
  JUMPOUT(0x1003C6748);
}

void sub_1003C9810()
{
}

void sub_1003C9820()
{
  if (*(char *)(v0 + 1967) < 0) {
    operator delete((void *)STACK[0x46F8]);
  }
  JUMPOUT(0x1003C6764);
}

void sub_1003C9844()
{
}

void sub_1003C9854()
{
  if (*(char *)(v0 + 2047) < 0) {
    operator delete((void *)STACK[0x4748]);
  }
  JUMPOUT(0x1003C6780);
}

void sub_1003C9878()
{
}

void sub_1003C9888()
{
  if (*(char *)(v0 + 2127) < 0) {
    operator delete((void *)STACK[0x4798]);
  }
  JUMPOUT(0x1003C679CLL);
}

void sub_1003C98AC()
{
}

void sub_1003C98BC()
{
  if (*(char *)(v0 + 2207) < 0) {
    operator delete((void *)STACK[0x47E8]);
  }
  JUMPOUT(0x1003C67B8);
}

void sub_1003C98E0()
{
}

void sub_1003C98F0()
{
  if (*(char *)(v0 + 2287) < 0) {
    operator delete((void *)STACK[0x4838]);
  }
  JUMPOUT(0x1003C67D4);
}

void sub_1003C9914()
{
}

void sub_1003C9924()
{
  if (*(char *)(v0 + 2367) < 0) {
    operator delete((void *)STACK[0x4888]);
  }
  JUMPOUT(0x1003C67F0);
}

void sub_1003C9948()
{
}

void sub_1003C9958()
{
  if (*(char *)(v0 + 2447) < 0) {
    operator delete((void *)STACK[0x48D8]);
  }
  JUMPOUT(0x1003C680CLL);
}

void sub_1003C997C()
{
}

void sub_1003C998C()
{
  if (*(char *)(v0 + 2527) < 0) {
    operator delete((void *)STACK[0x4928]);
  }
  JUMPOUT(0x1003C6828);
}

void sub_1003C99B0()
{
}

void sub_1003C99C0()
{
  if (*(char *)(v0 + 2607) < 0) {
    operator delete((void *)STACK[0x4978]);
  }
  JUMPOUT(0x1003C6844);
}

void sub_1003C99E4()
{
}

void sub_1003C99F4()
{
  if (*(char *)(v0 + 2687) < 0) {
    operator delete((void *)STACK[0x49C8]);
  }
  JUMPOUT(0x1003C6860);
}

void sub_1003C9A18()
{
}

void sub_1003C9A28()
{
  if (*(char *)(v0 + 2767) < 0) {
    operator delete((void *)STACK[0x4A18]);
  }
  JUMPOUT(0x1003C687CLL);
}

void sub_1003C9A4C()
{
}

void sub_1003C9A5C()
{
  if (*(char *)(v0 + 2847) < 0) {
    operator delete((void *)STACK[0x4A68]);
  }
  JUMPOUT(0x1003C6898);
}

void sub_1003C9A80()
{
}

void sub_1003C9A90()
{
  if (*(char *)(v0 + 2927) < 0) {
    operator delete((void *)STACK[0x4AB8]);
  }
  JUMPOUT(0x1003C68B4);
}

void sub_1003C9AB4()
{
}

void sub_1003C9AC4()
{
  if (*(char *)(v0 + 3007) < 0) {
    operator delete((void *)STACK[0x4B08]);
  }
  JUMPOUT(0x1003C68D0);
}

void sub_1003C9AE8()
{
}

void sub_1003C9AF8()
{
  if (*(char *)(v0 + 3087) < 0) {
    operator delete((void *)STACK[0x4B58]);
  }
  JUMPOUT(0x1003C68ECLL);
}

void sub_1003C9B1C()
{
}

void sub_1003C9B2C()
{
  if (*(char *)(v0 + 3167) < 0) {
    operator delete((void *)STACK[0x4BA8]);
  }
  JUMPOUT(0x1003C6908);
}

void sub_1003C9B50()
{
}

void sub_1003C9B60()
{
  if (*(char *)(v0 + 3247) < 0) {
    operator delete((void *)STACK[0x4BF8]);
  }
  JUMPOUT(0x1003C6924);
}

void sub_1003C9B84()
{
}

void sub_1003C9B94()
{
  if (*(char *)(v0 + 3327) < 0) {
    operator delete((void *)STACK[0x4C48]);
  }
  JUMPOUT(0x1003C6940);
}

void sub_1003C9BB8()
{
}

void sub_1003C9BC8()
{
  if (*(char *)(v0 + 3407) < 0) {
    operator delete((void *)STACK[0x4C98]);
  }
  JUMPOUT(0x1003C695CLL);
}

void sub_1003C9BEC()
{
}

void sub_1003C9BFC()
{
  if (*(char *)(v0 + 3487) < 0) {
    operator delete((void *)STACK[0x4CE8]);
  }
  JUMPOUT(0x1003C6978);
}

void sub_1003C9C20()
{
}

void sub_1003C9C30()
{
  if (*(char *)(v0 + 3567) < 0) {
    operator delete((void *)STACK[0x4D38]);
  }
  JUMPOUT(0x1003C6994);
}

void sub_1003C9C54()
{
}

void sub_1003C9C64()
{
  if (*(char *)(v0 + 3647) < 0) {
    operator delete((void *)STACK[0x4D88]);
  }
  JUMPOUT(0x1003C69B0);
}

void sub_1003C9C88()
{
}

void sub_1003C9C98()
{
  if (*(char *)(v0 + 3727) < 0) {
    operator delete((void *)STACK[0x4DD8]);
  }
  JUMPOUT(0x1003C69CCLL);
}

void sub_1003C9CBC()
{
}

void sub_1003C9CCC()
{
  if (*(char *)(v0 + 3807) < 0) {
    operator delete((void *)STACK[0x4E28]);
  }
  JUMPOUT(0x1003C69E8);
}

void sub_1003C9CF0()
{
}

void sub_1003C9D00()
{
  if (*(char *)(v0 + 3887) < 0) {
    operator delete((void *)STACK[0x4E78]);
  }
  JUMPOUT(0x1003C6A04);
}

void sub_1003C9D24()
{
}

void sub_1003C9D34()
{
  if (*(char *)(v0 + 3967) < 0) {
    operator delete((void *)STACK[0x4EC8]);
  }
  JUMPOUT(0x1003C6A20);
}

void sub_1003C9D58()
{
}

void sub_1003C9D68()
{
  if (*(char *)(v0 + 4047) < 0) {
    operator delete((void *)STACK[0x4F18]);
  }
  JUMPOUT(0x1003C6A3CLL);
}

void sub_1003C9D8C()
{
}

void sub_1003C9D9C()
{
  if (*(char *)(v0 + 47) < 0) {
    operator delete((void *)STACK[0x4F68]);
  }
  JUMPOUT(0x1003C6A58);
}

void sub_1003C9DC0()
{
}

void sub_1003C9DD0()
{
  if (*(char *)(v0 + 127) < 0) {
    operator delete((void *)STACK[0x4FB8]);
  }
  JUMPOUT(0x1003C6A74);
}

void sub_1003C9DF4()
{
}

void sub_1003C9E00()
{
}

void sub_1003C9E14()
{
  if (*(char *)(v0 + 207) < 0) {
    operator delete((void *)STACK[0x5008]);
  }
  JUMPOUT(0x1003C6A90);
}

void sub_1003C9E40()
{
}

uint64_t sub_1003C9E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_1003ACB60(a1, a2, a3);

  return sub_1003BB170(v3, v4, v5);
}

uint64_t sub_1003C9E70(uint64_t a1)
{
  sub_1002363E4((uint64_t)v43);
  uint64_t v2 = sub_100056628(v43, (uint64_t)"Hello response:", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v3 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v4 = sub_100056628(v43, (uint64_t)"    Rose firmware version: ", 27);
  if (*(char *)(a1 + 23) < 0) {
    sub_100002DE4(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v6 = strlen((const char *)p_p);
  char v7 = sub_100056628(v4, (uint64_t)p_p, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  unint64_t v8 = std::locale::use_facet(&v45, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v45);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v9 = sub_100056628(v43, (uint64_t)"    Rose interface version: ", 28);
  sub_1003CA8A4(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v10 = &__p;
  }
  else {
    __int16 v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v12 = sub_100056628(v9, (uint64_t)v10, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  char v13 = std::locale::use_facet(&v45, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v45);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v14 = sub_100056628(v43, (uint64_t)"    Rose hardware version: ", 27);
  sub_1003A8A68(*(unsigned __int16 *)(a1 + 26), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v15 = &__p;
  }
  else {
    char v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
  }
  __int16 v17 = sub_100056628(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __int16 v18 = std::locale::use_facet(&v45, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v45);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 96))
  {
    sub_100056628(v43, (uint64_t)"    Rose AP firmware version: ", 30);
    char v19 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
    unint64_t v20 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    sub_100056628(v43, (uint64_t)"    Rose DSP firmware version: ", 31);
    char v21 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
    uint64_t v22 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    char v23 = sub_100056628(v43, (uint64_t)"    Rose target: ", 17);
    __int16 v24 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      __int16 v24 = *(const char **)v24;
    }
    size_t v25 = strlen(v24);
    char v26 = sub_100056628(v23, (uint64_t)v24, v25);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
    char v27 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    sub_100056628(v43, (uint64_t)"    Rose calibration data version: ", 35);
    char v28 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
    char v29 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    sub_100056628(v43, (uint64_t)"    Rose module ID: ", 20);
    char v30 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
    __int16 v31 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    sub_100056628(v43, (uint64_t)"    Rose modem init version: ", 29);
    uint64_t v32 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
    char v33 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    if (*(unsigned char *)(a1 + 108))
    {
      sub_100056628(v43, (uint64_t)"    Rose board ID: ", 19);
      if ((*(void *)(a1 + 104) & 0xFF00000000) == 0) {
        sub_10000AE44();
      }
      __int16 v34 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
      char v35 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
    }
    if (*(char *)(a1 + 95) < 0)
    {
      if (!*(void *)(a1 + 80)) {
        goto LABEL_38;
      }
    }
    else if (!*(unsigned char *)(a1 + 95))
    {
      goto LABEL_38;
    }
    uint64_t v36 = sub_100056628(v43, (uint64_t)"    Extra bytes in the Hello Response: ", 39);
    char v37 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      char v37 = *(const char **)v37;
    }
    size_t v38 = strlen(v37);
    char v39 = sub_100056628(v36, (uint64_t)v37, v38);
    std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
    char v40 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
  }
LABEL_38:
  std::stringbuf::str();
  if (v44 < 0) {
    operator delete((void *)v43[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1003CA814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void sub_1003CA8A4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *(unsigned __int8 *)(a1 + 24));
  uint64_t v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(unsigned __int8 *)(a1 + 25));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1003CA97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003CA9C8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1003CA9FC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1003CAA30(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1003CAA6C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  *(unsigned char *)(a1 + 41) = 1;
  if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
    sub_100437D14();
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
      sub_100437CA0();
    }
    sub_1003CAB68((std::string *)a1, (char *)a1, *(CFAbsoluteTime *)(a1 + 32));
  }
  else
  {
    sub_1003CAF84((std::string *)a1, (std::string *)a1, (std::string::size_type *)(a1 + 32));
    if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
      sub_100437C2C();
    }
  }
  std::mutex::unlock(v2);
}

void sub_1003CAB54(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003CAB68(std::string *a1, char *a2, CFAbsoluteTime Current)
{
  size_t v6 = strlen(off_10089F760[0]);
  size_t v7 = v6;
  if (a2[23] < 0)
  {
    if (v6 != *((void *)a2 + 1)) {
      goto LABEL_9;
    }
    if (v6 == -1) {
      goto LABEL_45;
    }
    unint64_t v8 = *(char **)a2;
  }
  else
  {
    if (v6 != a2[23]) {
      goto LABEL_9;
    }
    unint64_t v8 = a2;
    if (v7 == -1) {
LABEL_45:
    }
      sub_10019CC84();
  }
  if (memcmp(v8, off_10089F760[0], v7))
  {
LABEL_9:
    char v9 = +[NSString stringWithUTF8String:off_10089F7A0[0]];
    std::string v10 = +[NSString stringWithUTF8String:off_10089F7A8[0]];
    std::string::operator=(a1, (const std::string *)a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
    if (Current == 0.0) {
      Current = CFAbsoluteTimeGetCurrent();
    }
    *(CFAbsoluteTime *)&a1[1].__r_.__value_.__l.__size_ = Current;
    p_std::string::size_type size = (double *)&a1[1].__r_.__value_.__l.__size_;
    if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
      sub_100437EF4();
    }
    if (!a1[1].__r_.__value_.__s.__data_[17])
    {
      if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
        sub_100437D88();
      }
      uint64_t v12 = 1;
      goto LABEL_43;
    }
    if (a2[23] < 0)
    {
      if (!*((void *)a2 + 1))
      {
LABEL_23:
        a2 = off_10089F788[0];
        NSStringEncoding v13 = +[NSString defaultCStringEncoding];
LABEL_24:
        char v14 = +[NSString stringWithCString:a2 encoding:v13];
        char v28 = v10;
        char v15 = +[NSMutableDictionary dictionary];
        id v16 = objc_alloc((Class)NSNumber);
        double v17 = *p_size;
        *(float *)&double v17 = *p_size;
        id v18 = [v16 initWithFloat:v17];
        [v15 setObject:v14 forKey:v9];
        [v15 setObject:v18 forKey:v10];
        id v31 = 0;
        char v19 = +[NSPropertyListSerialization dataWithPropertyList:v15 format:200 options:0 error:&v31];
        id v20 = v31;
        id v21 = v20;
        if (!v19 || v20)
        {
          if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
            sub_100437DBC();
          }
          uint64_t v12 = 0;
        }
        else
        {
          char v27 = v9;
          sub_100007D00();
          sub_100003118(off_10089F7B0[0], &__p);
          id v22 = objc_alloc((Class)NSString);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          id v24 = [v22 initWithCString:p_p encoding:4];
          id v29 = 0;
          uint64_t v12 = (uint64_t)[v19 writeToFile:v24 options:1073741825 error:&v29];
          id v21 = v29;
          BOOL v25 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
          if (v12)
          {
            if (v25) {
              sub_100437E24();
            }
            a1[1].__r_.__value_.__s.__data_[16] = 1;
          }
          else if (v25)
          {
            sub_100437E8C();
          }

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v9 = v27;
        }

        std::string v10 = v28;
LABEL_43:

        return v12;
      }
      a2 = *(char **)a2;
    }
    else if (!a2[23])
    {
      goto LABEL_23;
    }
    NSStringEncoding v13 = +[NSString defaultCStringEncoding];
    goto LABEL_24;
  }
  return 1;
}

void sub_1003CAEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL sub_1003CAF84(std::string *__str, std::string *this, std::string::size_type *a3)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  if (__str[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, __str);
    *a3 = __str[1].__r_.__value_.__l.__size_;
    if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
      sub_100438148();
    }
    return 1;
  }
  if (!__str[1].__r_.__value_.__s.__data_[17])
  {
    if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
      sub_100437F68();
    }
    return 1;
  }
  sub_100007D00();
  sub_100003118(off_10089F7B0[0], &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unint64_t v8 = +[NSString stringWithCString:p_p encoding:4];
  id v22 = 0;
  char v9 = +[NSData dataWithContentsOfFile:v8 options:0 error:&v22];
  id v10 = v22;
  std::string v11 = v10;
  if (!v9 || v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
      sub_100437F9C();
    }
    BOOL v6 = 0;
  }
  else
  {
    id v20 = 0;
    uint64_t v21 = 0;
    uint64_t v12 = +[NSPropertyListSerialization propertyListWithData:v9 options:0 format:&v21 error:&v20];
    id v13 = v20;
    std::string v11 = v13;
    if (!v12 || v13)
    {
      if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
        sub_100438004();
      }
      BOOL v6 = 0;
    }
    else
    {
      char v14 = +[NSString stringWithUTF8String:off_10089F7A0[0]];
      char v15 = [v12 objectForKey:v14];

      if (v15)
      {
        id v16 = +[NSString stringWithUTF8String:off_10089F7A8[0]];
        double v17 = [v12 objectForKey:v16];

        BOOL v6 = v17 != 0;
        if (v17)
        {
          std::string::assign(this, (const std::string::value_type *)[v15 UTF8String]);
          [v17 doubleValue];
          *a3 = v18;
          __str[1].__r_.__value_.__s.__data_[16] = 1;
          if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
            sub_1004380A0();
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG))
        {
          sub_100438114();
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
          sub_10043806C();
        }
        BOOL v6 = 0;
      }
    }
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v6;
}

void sub_1003CB2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003CB338(uint64_t a1, char *a2, CFAbsoluteTime a3)
{
  BOOL v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v7 = sub_1003CAB68((std::string *)a1, a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_1003CB39C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1003CB3B0(uint64_t a1, std::string *a2, std::string::size_type *a3)
{
  BOOL v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  BOOL v7 = sub_1003CAF84((std::string *)a1, a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_1003CB40C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_1003CB420@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 2) {
    uint64_t v2 = "";
  }
  else {
    uint64_t v2 = off_100863CB8[(char)a1];
  }
  return sub_100004950(a2, v2);
}

void *sub_1003CB450@<X0>(char a1@<W0>, void *a2@<X8>)
{
  if ((a1 + 1) > 8u) {
    uint64_t v2 = "";
  }
  else {
    uint64_t v2 = (char *)*((void *)&off_100863CD0 + (char)(a1 + 1));
  }
  return sub_100004950(a2, v2);
}

void *sub_1003CB488@<X0>(char a1@<W0>, void *a2@<X8>)
{
  if ((a1 + 2) > 5u) {
    uint64_t v2 = "";
  }
  else {
    uint64_t v2 = (&off_100863D18)[(char)(a1 + 2)];
  }
  return sub_100004950(a2, v2);
}

void *sub_1003CB4C0@<X0>(char a1@<W0>, void *a2@<X8>)
{
  if ((a1 + 2) > 7u) {
    uint64_t v2 = "";
  }
  else {
    uint64_t v2 = (&off_100863D48)[(char)(a1 + 2)];
  }
  return sub_100004950(a2, v2);
}

uint64_t sub_1003CB4F8(uint64_t a1)
{
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(void *)(a1 + 136) = 0;
  sub_1003CB5D4(a1 + 152);
  if (qword_1008AB838 != -1) {
    dispatch_once(&qword_1008AB838, &stru_100863BD8);
  }
  *(unsigned char *)(a1 + 216) = byte_1008AB830;
  sub_1003CC80C();
  return a1;
}

void sub_1003CB5A8(_Unwind_Exception *a1)
{
  sub_1003CCDD0(v2);
  sub_1001FBFC0(v1 + 112);
  sub_1003CCE10(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003CB5D4@<X0>(uint64_t a1@<X8>)
{
  int v2 = *((_DWORD *)sub_100007D00() + 144);
  int v3 = sub_1003CCE50();
  memset(v37, 0, sizeof(v37));
  int v38 = 1065353216;
  if (v2 <= 99)
  {
    switch(v2)
    {
      case 0:
        sub_1003E225C(0, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v23 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CD0C8((uint64_t)(v23 + 3), (uint64_t *)&v30);
        sub_1003CD114((uint64_t)&v30);
        sub_1003E225C(0, v3, 1u, (uint64_t)&v30);
        int v29 = 1;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        id v24 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CD0C8((uint64_t)(v24 + 3), (uint64_t *)&v30);
        sub_1003CD114((uint64_t)&v30);
        char v30 = 0;
        id v31 = 0;
        uint64_t v32 = 0;
        sub_100004950(&__str, "A2183");
        sub_1003CFD1C((uint64_t)&v30, &__str, &v40, 1uLL);
        goto LABEL_94;
      case 1:
        sub_1003E225C(1, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        BOOL v25 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CD0C8((uint64_t)(v25 + 3), (uint64_t *)&v30);
        sub_1003CD114((uint64_t)&v30);
        sub_1003E225C(1, v3, 2u, (uint64_t)&v30);
        int v29 = 2;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v26 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CD0C8((uint64_t)(v26 + 3), (uint64_t *)&v30);
        sub_1003CD114((uint64_t)&v30);
        char v30 = 0;
        id v31 = 0;
        uint64_t v32 = 0;
        sub_100004950(&__str, "A2184");
        sub_1003CFD1C((uint64_t)&v30, &__str, &v40, 1uLL);
        goto LABEL_94;
      case 2:
        sub_1003E225C(2, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v27 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CD0C8((uint64_t)(v27 + 3), (uint64_t *)&v30);
        sub_1003CD114((uint64_t)&v30);
        sub_1003E225C(2, v3, 3u, (uint64_t)&v30);
        int v29 = 3;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v28 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CD0C8((uint64_t)(v28 + 3), (uint64_t *)&v30);
        sub_1003CD114((uint64_t)&v30);
        char v30 = 0;
        id v31 = 0;
        uint64_t v32 = 0;
        sub_100004950(&__str, "A2180");
        sub_1003CFD1C((uint64_t)&v30, &__str, &v40, 1uLL);
LABEL_94:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_90;
      case 3:
      case 4:
      case 5:
      case 6:
        sub_1003E225C(v2, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        BOOL v6 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v6 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v6 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v6 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 4u, (uint64_t)&v30);
        int v29 = 4;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        BOOL v7 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v7 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v7 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v7 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 5u, (uint64_t)&v30);
        int v29 = 5;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        unint64_t v8 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v8 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v8 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v8 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 6u, (uint64_t)&v30);
        int v29 = 6;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v9 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v9 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v9 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v9 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 7u, (uint64_t)&v30);
        int v29 = 7;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        id v10 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v10 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v10 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v10 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 8u, (uint64_t)&v30);
        int v29 = 8;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        std::string v11 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v11 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v11 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v11 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 9u, (uint64_t)&v30);
        int v29 = 9;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        uint64_t v12 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v12 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v12 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v12 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 0xAu, (uint64_t)&v30);
        int v29 = 10;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        id v13 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v13 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v13 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v13 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        goto LABEL_76;
      case 7:
      case 8:
      case 9:
      case 10:
        sub_1003E225C(v2, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v14 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v14 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v14 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v14 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 0xBu, (uint64_t)&v30);
        int v29 = 11;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v15 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v15 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v15 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v15 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 0xCu, (uint64_t)&v30);
        int v29 = 12;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        id v16 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v16 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v16 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v16 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 0xDu, (uint64_t)&v30);
        int v29 = 13;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        double v17 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v17 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v17 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v17 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 7u, (uint64_t)&v30);
        int v29 = 7;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        std::string::size_type v18 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v18 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v18 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v18 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 8u, (uint64_t)&v30);
        int v29 = 8;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        char v19 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v19 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v19 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v19 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 9u, (uint64_t)&v30);
        int v29 = 9;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        id v20 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v20 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v20 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v20 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
        goto LABEL_76;
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        sub_1003E225C(v2, v3, 0, (uint64_t)&v30);
        int v29 = 0;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        long long v5 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v5 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v5 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v5 + 14), (uint64_t)v35);
        if (v36) {
          sub_1001FBF38((uint64_t)v35);
        }
        if (v34) {
          sub_1001FBF38((uint64_t)v33);
        }
LABEL_76:
        sub_1001FBF38((uint64_t)&v30);
        sub_1003E225C(v2, v3, 0x3E7u, (uint64_t)&v30);
        int v29 = 999;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        uint64_t v21 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
        sub_1003CF438((uint64_t)(v21 + 3), (uint64_t *)&v30);
        sub_1003CF534((uint64_t)(v21 + 8), (uint64_t)v33);
        sub_1003CF534((uint64_t)(v21 + 14), (uint64_t)v35);
        break;
      default:
        goto LABEL_82;
    }
  }
  else
  {
    if (v2 > 199)
    {
      if ((v2 - 200) >= 2 && v2 != 997 && v2 != 999) {
        goto LABEL_82;
      }
    }
    else if ((v2 - 100) >= 0x16)
    {
      goto LABEL_82;
    }
    sub_1003E225C(v2, v3, 0, (uint64_t)&v30);
    int v29 = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    uint64_t v4 = sub_1003CFA38((uint64_t)v37, &v29, (uint64_t)&unk_1004BC2F8, &__str);
    sub_1003CF438((uint64_t)(v4 + 3), (uint64_t *)&v30);
    sub_1003CF534((uint64_t)(v4 + 8), (uint64_t)v33);
    sub_1003CF534((uint64_t)(v4 + 14), (uint64_t)v35);
  }
  if (v36) {
    sub_1001FBF38((uint64_t)v35);
  }
  if (v34) {
    sub_1001FBF38((uint64_t)v33);
  }
  sub_1001FBF38((uint64_t)&v30);
LABEL_82:
  char v30 = 0;
  id v31 = 0;
  uint64_t v32 = 0;
  if (v2 > 199)
  {
    if ((v2 - 200) >= 2 && v2 != 997 && v2 != 999) {
      goto LABEL_90;
    }
LABEL_89:
    sub_1003CFD1C((uint64_t)&v30, 0, 0, 0);
    goto LABEL_90;
  }
  if ((v2 - 100) < 0x16 || (v2 - 3) < 0x15) {
    goto LABEL_89;
  }
LABEL_90:
  sub_1003CFF30(a1, (uint64_t)v37);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_1003D0E20((char *)(a1 + 40), v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  sub_10017D7B4((void ***)&__str);
  return sub_1001FBE64((uint64_t)v37);
}

void sub_1003CC5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (*(char *)(v28 - 73) < 0) {
    operator delete(*(void **)(v27 + 48));
  }
  *(void *)(v27 + 48) = &a10;
  sub_10017D7B4((void ***)(v28 - 96));
  sub_1001FBE64((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_1003CC80C()
{
  sub_1003CF384((uint64_t)off_10089F798[0]);
  LODWORD(v30) = 0;
  BOOL v0 = sub_1003CECA0((uint64_t)off_10089F7B8[0], &v30);
  BOOL v1 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v0)
  {
    if (v1) {
      sub_1004381BC();
    }
  }
  else if (v1)
  {
    sub_100438224();
  }
  uint64_t v30 = 0;
  BOOL v2 = sub_1003CEC04((uint64_t)off_10089F7C0[0], (double *)&v30);
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v3) {
      sub_10043828C();
    }
  }
  else if (v3)
  {
    sub_100438224();
  }
  uint64_t v30 = 0;
  BOOL v4 = sub_1003CEC04((uint64_t)off_10089F7C8[0], (double *)&v30);
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    if (v5) {
      sub_10043828C();
    }
  }
  else if (v5)
  {
    sub_100438224();
  }
  uint64_t v30 = 0;
  BOOL v6 = sub_1003CEC04((uint64_t)off_10089F7D0[0], (double *)&v30);
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    if (v7) {
      sub_10043828C();
    }
  }
  else if (v7)
  {
    sub_100438224();
  }
  sub_1003CF384((uint64_t)off_10089F7D8[0]);
  LODWORD(v30) = 0;
  BOOL v8 = sub_1003CECA0((uint64_t)off_10089F7E0[0], &v30);
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    if (v9) {
      sub_1004381BC();
    }
  }
  else if (v9)
  {
    sub_100438224();
  }
  LODWORD(v30) = 0;
  BOOL v10 = sub_1003CECA0((uint64_t)off_10089F7E8[0], &v30);
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v10)
  {
    if (v11) {
      sub_1004381BC();
    }
  }
  else if (v11)
  {
    sub_100438224();
  }
  LODWORD(v30) = 0;
  BOOL v12 = sub_1003CECA0((uint64_t)off_10089F7F0[0], &v30);
  BOOL v13 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v12)
  {
    if (v13) {
      sub_1004381BC();
    }
  }
  else if (v13)
  {
    sub_100438224();
  }
  sub_1003CF384((uint64_t)off_10089F7F8[0]);
  LODWORD(v30) = 0;
  BOOL v14 = sub_1003CECA0((uint64_t)off_10089F808[0], &v30);
  BOOL v15 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v14)
  {
    if (v15) {
      sub_1004381BC();
    }
  }
  else if (v15)
  {
    sub_100438224();
  }
  sub_1003CF384((uint64_t)off_10089F800[0]);
  LODWORD(v30) = 0;
  BOOL v16 = sub_1003CECA0((uint64_t)off_10089F810[0], &v30);
  BOOL v17 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v16)
  {
    if (v17) {
      sub_1004381BC();
    }
  }
  else if (v17)
  {
    sub_100438224();
  }
  LODWORD(v30) = 0;
  BOOL v18 = sub_1003CECA0((uint64_t)off_10089F818[0], &v30);
  BOOL v19 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v18)
  {
    if (v19) {
      sub_1004381BC();
    }
  }
  else if (v19)
  {
    sub_100438224();
  }
  LODWORD(v30) = 0;
  BOOL v20 = sub_1003CECA0((uint64_t)off_10089F820[0], &v30);
  BOOL v21 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v20)
  {
    if (v21) {
      sub_1004381BC();
    }
  }
  else if (v21)
  {
    sub_100438224();
  }
  LODWORD(v30) = 0;
  BOOL v22 = sub_1003CECA0((uint64_t)off_10089F828[0], &v30);
  BOOL v23 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v22)
  {
    if (v23) {
      sub_1004381BC();
    }
  }
  else if (v23)
  {
    sub_100438224();
  }
  LODWORD(v30) = 0;
  BOOL v24 = sub_1003CECA0((uint64_t)off_10089F830[0], &v30);
  BOOL v25 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v24)
  {
    if (v25) {
      sub_1004381BC();
    }
  }
  else if (v25)
  {
    sub_100438224();
  }
  LODWORD(v30) = 0;
  BOOL v26 = sub_1003CECA0((uint64_t)off_10089F838[0], &v30);
  BOOL v27 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v26)
  {
    if (v27) {
      sub_1004381BC();
    }
  }
  else if (v27)
  {
    sub_100438224();
  }
  LODWORD(v30) = 0;
  BOOL v28 = sub_1003CECA0((uint64_t)off_10089F848, &v30);
  BOOL v29 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v28)
  {
    if (v29) {
      sub_1004381BC();
    }
  }
  else if (v29)
  {
    sub_100438224();
  }
}

uint64_t sub_1003CCDD0(uint64_t a1)
{
  BOOL v3 = (void **)(a1 + 40);
  sub_10017D7B4(&v3);
  return sub_1001FBE64(a1);
}

uint64_t sub_1003CCE10(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1003CCE50()
{
  BOOL v0 = +[NSUserDefaults standardUserDefaults];
  BOOL v1 = [v0 objectForKey:@"RegulatoryTestBasebandSupportsFR2Override"];
  if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    unsigned int v2 = [v1 BOOLValue];
    BOOL v3 = qword_1008AB7B8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v4)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDeviceBasebandType,set by default,SUPPORTS_5G_NR_FR2", buf, 2u);
      }
      uint64_t v5 = 0;
    }
    else
    {
      if (v4)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDeviceBasebandType,set by default,DOES_NOT_SUPPORT_5G_NR_FR2", buf, 2u);
      }
      uint64_t v5 = 1;
    }
  }
  else
  {
    sub_100222164();
    id v6 = objc_claimAutoreleasedReturnValue();
    sub_100004950(buf, (char *)[v6 UTF8String]);

    BOOL v7 = sub_1003CF934(qword_1008AC628, buf);
    if (v7) {
      uint64_t v5 = *((unsigned int *)v7 + 10);
    }
    else {
      uint64_t v5 = 2;
    }
    BOOL v8 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100004950(__p, (&off_100863D88)[(int)v5]);
      BOOL v9 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)BOOL v15 = 136315138;
      BOOL v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDeviceBasebandType,%s", v15, 0xCu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    if (v14 < 0) {
      operator delete(*(void **)buf);
    }
  }

  return v5;
}

void sub_1003CD070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1003CD0C8(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t sub_1003CD114(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128)) {
    sub_1001FBF38(a1 + 88);
  }
  if (*(unsigned char *)(a1 + 80)) {
    sub_1001FBF38(a1 + 40);
  }

  return sub_1001FBF38(a1);
}

BOOL sub_1003CD168(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (char *)a2 + 23;
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v6 = a2[1];
    if (!v6) {
      return v6 != 0;
    }
  }
  else
  {
    uint64_t v6 = *((unsigned __int8 *)a2 + 23);
    if (!*((unsigned char *)a2 + 23)) {
      return v6 != 0;
    }
  }
  BOOL v7 = sub_100003520(qword_1008AC600, (unsigned __int8 *)a2);
  if (!v7)
  {
    BOOL v8 = qword_1008AB7B8;
    if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v9 = a2;
      if (*v5 < 0) {
        BOOL v9 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getRegulatoryNBCountryParams,cantFind,country,%s", __p, 0xCu);
    }
    sub_100004950(__p, off_10089F758[0]);
    BOOL v7 = sub_100003520(qword_1008AC600, __p);
    if (v16 < 0) {
      operator delete(*(void **)__p);
    }
    BOOL v10 = qword_1008AB7B8;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEFAULT);
    if (!v7) {
      sub_1004383FC(v11, v10);
    }
    if (v11)
    {
      char v12 = a2;
      if (*v5 < 0) {
        char v12 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getRegulatoryNBCountryParams,cantFind,country,%s,setting it to unknown.", __p, 0xCu);
    }
    std::string::assign((std::string *)a2, off_10089F758[0]);
  }
  BOOL v13 = qword_1008AB7B8;
  if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
    sub_100438454(v5, a2, v13);
  }
  std::string::operator=((std::string *)a3, (const std::string *)(v7 + 40));
  std::string::operator=((std::string *)(a3 + 24), (const std::string *)(v7 + 64));
  *(_WORD *)(a3 + 48) = *((_WORD *)v7 + 44);
  return v6 != 0;
}

void sub_1003CD360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1003CD384(uint64_t a1, int a2, int a3, int a4)
{
  unsigned __int8 v19 = a2;
  int v18 = (a3 << 31 >> 31) & a4;
  uint64_t v6 = (void *)(a1 + 152);
  BOOL v7 = sub_10002A5C8((void *)(a1 + 152), &v18);
  if (!v7)
  {
    BOOL v8 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10039D144();
      BOOL v9 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      int v21 = a2;
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 2080;
      BOOL v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getTx_UWB_PowerTableFromIsoGroup,accessory regulatory params not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    int v18 = 0;
    BOOL v7 = sub_10002A5C8(v6, &v18);
    if (!v7)
    {
      char v12 = (id)qword_1008AB7B8;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
        goto LABEL_14;
      }
      sub_10039D144();
      BOOL v15 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      int v21 = a2;
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 2080;
      BOOL v25 = v15;
      _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "regulatory,comp,getTx_UWB_PowerTableFromIsoGroup,NO_ACCESSORY regulatory params also not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_24;
    }
  }
  BOOL v10 = sub_1003D0F68(v7 + 3, &v19);
  if (v10) {
    return (uint64_t *)(v10 + 3);
  }
  char v12 = (id)qword_1008AB7B8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
  {
    int v13 = v19;
    sub_10039D144();
    char v14 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109634;
    int v21 = v13;
    __int16 v22 = 1024;
    int v23 = a3;
    __int16 v24 = 2080;
    BOOL v25 = v14;
    _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "regulatory,comp,getTx_UWB_PowerTableFromIsoGroup,iso table group not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
    if (v17 < 0) {
LABEL_24:
    }
      operator delete(__p[0]);
  }
LABEL_14:

  return &qword_1008AB7C0;
}

void sub_1003CD624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_1003CD644(uint64_t a1, int a2, int a3, int a4)
{
  unsigned __int8 v19 = a2;
  int v18 = (a3 << 31 >> 31) & a4;
  uint64_t v6 = (void *)(a1 + 152);
  BOOL v7 = sub_10002A5C8((void *)(a1 + 152), &v18);
  if (!v7)
  {
    BOOL v8 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10039D144();
      BOOL v9 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      int v21 = a2;
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 2080;
      BOOL v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getTx_NB_SAR_PowerTableFromIsoGroup,accessory regulatory params not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    int v18 = 0;
    BOOL v7 = sub_10002A5C8(v6, &v18);
    if (!v7)
    {
      char v12 = (id)qword_1008AB7B8;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
        goto LABEL_16;
      }
      sub_10039D144();
      BOOL v15 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      int v21 = a2;
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 2080;
      BOOL v25 = v15;
      _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "regulatory,comp,getTx_NB_SAR_PowerTableFromIsoGroup,NO_ACCESSORY regulatory params also not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_27;
    }
  }
  if (*((unsigned char *)v7 + 104))
  {
    BOOL v10 = sub_1003D0F68(v7 + 8, &v19);
    if (!*((unsigned char *)v7 + 104)) {
      sub_10000AE44();
    }
    if (v10) {
      return (uint64_t *)(v10 + 3);
    }
    char v12 = (id)qword_1008AB7B8;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
      goto LABEL_16;
    }
    int v13 = v19;
    sub_10039D144();
    char v14 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109634;
    int v21 = v13;
    __int16 v22 = 1024;
    int v23 = a3;
    __int16 v24 = 2080;
    BOOL v25 = v14;
    _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "regulatory,comp,getTx_NB_SAR_PowerTableFromIsoGroup,iso table group not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_27:
    operator delete(__p[0]);
LABEL_16:
  }
  return &qword_1008AB7D8;
}

void sub_1003CD904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_1003CD924(uint64_t a1, int a2, int a3, int a4)
{
  unsigned __int8 v19 = a2;
  int v18 = (a3 << 31 >> 31) & a4;
  uint64_t v6 = (void *)(a1 + 152);
  BOOL v7 = sub_10002A5C8((void *)(a1 + 152), &v18);
  if (!v7)
  {
    BOOL v8 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10039D144();
      BOOL v9 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      int v21 = a2;
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 2080;
      BOOL v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getTx_NB_UNII3_PowerTableFromIsoGroup,accessory regulatory params not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    int v18 = 0;
    BOOL v7 = sub_10002A5C8(v6, &v18);
    if (!v7)
    {
      char v12 = (id)qword_1008AB7B8;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        sub_10039D144();
        BOOL v15 = v17 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 67109634;
        int v21 = a2;
        __int16 v22 = 1024;
        int v23 = a3;
        __int16 v24 = 2080;
        BOOL v25 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getTx_NB_UNII3_PowerTableFromIsoGroup,NO_ACCESSORY regulatory params also not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
LABEL_26:

      return &qword_1008AB7F0;
    }
  }
  if (*((unsigned char *)v7 + 152))
  {
    BOOL v10 = sub_1003D0F68(v7 + 14, &v19);
    if (!*((unsigned char *)v7 + 152)) {
      sub_10000AE44();
    }
    if (v10) {
      return (uint64_t *)(v10 + 3);
    }
    char v12 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = v19;
      sub_10039D144();
      if (v17 >= 0) {
        char v14 = __p;
      }
      else {
        char v14 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67109634;
      int v21 = v13;
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 2080;
      BOOL v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getTx_NB_UNII3_PowerTableFromIsoGroup,iso table group not found,isoGroup,%d,flags,%d,accessory,%s", buf, 0x18u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_26;
  }
  return &qword_1008AB7F0;
}

void sub_1003CDBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_1003CDBFC(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v6 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v8 = a2[1];
    if (v8)
    {
      __int16 v29 = 0;
      *(_OWORD *)BOOL v27 = 0u;
      long long v28 = 0u;
      *(_OWORD *)BOOL v26 = 0u;
      unsigned __int8 v30 = -1;
      sub_100002DE4(__p, (void *)*a2, v8);
      goto LABEL_6;
    }
    return &qword_1008AB7C0;
  }
  if (!*((unsigned char *)a2 + 23)) {
    return &qword_1008AB7C0;
  }
  __int16 v29 = 0;
  *(_OWORD *)BOOL v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)BOOL v26 = 0u;
  unsigned __int8 v30 = -1;
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v25 = a2[2];
LABEL_6:
  BOOL v9 = sub_100003274(a1, (uint64_t)__p, (std::string *)v26);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (v9)
  {
    int v10 = v30;
    BOOL v11 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v6;
      }
      sub_1003CB450(v10, v22);
      int v12 = v23;
      int v13 = (void **)v22[0];
      sub_10039D144();
      char v14 = v22;
      if (v12 < 0) {
        char v14 = v13;
      }
      if (v21 >= 0) {
        BOOL v15 = &v20;
      }
      else {
        BOOL v15 = v20;
      }
      *(_DWORD *)buf = 136315906;
      uint64_t v32 = v6;
      __int16 v33 = 2080;
      *(void *)char v34 = v14;
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = a3;
      __int16 v35 = 2080;
      char v36 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDesignatedTx_UWB_PowerTable,country,%s,isoGroup,%s,flags,%d,accessory,%s", buf, 0x26u);
      if (v21 < 0) {
        operator delete(v20);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    char v16 = sub_1003CD384(a1, v10, a3, a4);
  }
  else
  {
    char v17 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v6;
      }
      sub_10039D144();
      if (v23 >= 0) {
        unsigned __int8 v19 = v22;
      }
      else {
        unsigned __int8 v19 = (void **)v22[0];
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v32 = v6;
      __int16 v33 = 1024;
      *(_DWORD *)char v34 = a3;
      *(_WORD *)&v34[4] = 2080;
      *(void *)&v34[6] = v19;
      _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "regulatory,comp,getDesignatedTx_UWB_PowerTable,country not found,country,%s,flags,%d,accessory,%s", buf, 0x1Cu);
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    char v16 = &qword_1008AB7C0;
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[1]);
  }
  if (SHIBYTE(v27[0]) < 0) {
    operator delete(v26[0]);
  }
  return v16;
}

void sub_1003CDEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_1001F8580((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003CDF58(void *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t)a1;
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v8 = a2[1];
    if (v8)
    {
      *(_OWORD *)BOOL v27 = 0u;
      long long v28 = 0u;
      *(_OWORD *)BOOL v26 = 0u;
      __int16 v29 = -1;
      a1 = sub_100002DE4(__p, (void *)*a2, v8);
      goto LABEL_6;
    }
    return &qword_1008AB7D8;
  }
  if (!*((unsigned char *)a2 + 23)) {
    return &qword_1008AB7D8;
  }
  *(_OWORD *)BOOL v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)BOOL v26 = 0u;
  __int16 v29 = -1;
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v25 = a2[2];
LABEL_6:
  BOOL v9 = sub_1003CD168((uint64_t)a1, (uint64_t *)__p, (uint64_t)v26);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (v9)
  {
    int v10 = v29;
    BOOL v11 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v6;
      }
      sub_1003CB488(v10, v22);
      int v12 = v23;
      int v13 = (void **)v22[0];
      sub_10039D144();
      char v14 = v22;
      if (v12 < 0) {
        char v14 = v13;
      }
      if (v21 >= 0) {
        BOOL v15 = &v20;
      }
      else {
        BOOL v15 = v20;
      }
      *(_DWORD *)buf = 136315906;
      id v31 = v6;
      __int16 v32 = 2080;
      *(void *)__int16 v33 = v14;
      *(_WORD *)&v33[8] = 1024;
      *(_DWORD *)&v33[10] = a3;
      __int16 v34 = 2080;
      __int16 v35 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDesignatedTx_NB_SAR_PowerTable,country,%s,isoGroup,%s,flags,%d,accessory,%s", buf, 0x26u);
      if (v21 < 0) {
        operator delete(v20);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    char v16 = sub_1003CD644(v7, v10, a3, a4);
  }
  else
  {
    char v17 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v6;
      }
      sub_10039D144();
      if (v23 >= 0) {
        unsigned __int8 v19 = v22;
      }
      else {
        unsigned __int8 v19 = (void **)v22[0];
      }
      *(_DWORD *)buf = 136315650;
      id v31 = v6;
      __int16 v32 = 1024;
      *(_DWORD *)__int16 v33 = a3;
      *(_WORD *)&v33[4] = 2080;
      *(void *)&v33[6] = v19;
      _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "regulatory,comp,getDesignatedTx_NB_SAR_PowerTable,country not found,country,%s,flags,%d,accessory,%s", buf, 0x1Cu);
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    char v16 = &qword_1008AB7D8;
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[1]);
  }
  if (SHIBYTE(v27[0]) < 0) {
    operator delete(v26[0]);
  }
  return v16;
}

void sub_1003CE240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_1001F8580((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003CE2A8(void *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t)a1;
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v8 = a2[1];
    if (v8)
    {
      *(_OWORD *)BOOL v27 = 0u;
      long long v28 = 0u;
      *(_OWORD *)BOOL v26 = 0u;
      __int16 v29 = -1;
      a1 = sub_100002DE4(__p, (void *)*a2, v8);
      goto LABEL_6;
    }
    return &qword_1008AB7F0;
  }
  if (!*((unsigned char *)a2 + 23)) {
    return &qword_1008AB7F0;
  }
  *(_OWORD *)BOOL v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)BOOL v26 = 0u;
  __int16 v29 = -1;
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v25 = a2[2];
LABEL_6:
  BOOL v9 = sub_1003CD168((uint64_t)a1, (uint64_t *)__p, (uint64_t)v26);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (v9)
  {
    int v10 = HIBYTE(v29);
    BOOL v11 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v6;
      }
      sub_1003CB4C0(v10, v22);
      int v12 = v23;
      int v13 = (void **)v22[0];
      sub_10039D144();
      char v14 = v22;
      if (v12 < 0) {
        char v14 = v13;
      }
      if (v21 >= 0) {
        BOOL v15 = &v20;
      }
      else {
        BOOL v15 = v20;
      }
      *(_DWORD *)buf = 136315906;
      id v31 = v6;
      __int16 v32 = 2080;
      *(void *)__int16 v33 = v14;
      *(_WORD *)&v33[8] = 1024;
      *(_DWORD *)&v33[10] = a3;
      __int16 v34 = 2080;
      __int16 v35 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "regulatory,comp,getDesignatedTx_NB_UNII3_PowerTable,country,%s,isoGroup,%s,flags,%d,accessory,%s", buf, 0x26u);
      if (v21 < 0) {
        operator delete(v20);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    char v16 = sub_1003CD924(v7, v10, a3, a4);
  }
  else
  {
    char v17 = (id)qword_1008AB7B8;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v6;
      }
      sub_10039D144();
      if (v23 >= 0) {
        unsigned __int8 v19 = v22;
      }
      else {
        unsigned __int8 v19 = (void **)v22[0];
      }
      *(_DWORD *)buf = 136315650;
      id v31 = v6;
      __int16 v32 = 1024;
      *(_DWORD *)__int16 v33 = a3;
      *(_WORD *)&v33[4] = 2080;
      *(void *)&v33[6] = v19;
      _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "regulatory,comp,getDesignatedTx_NB_UNII3_PowerTable,country not found,country,%s,flags,%d,accessory,%s", buf, 0x1Cu);
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    char v16 = &qword_1008AB7F0;
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[1]);
  }
  if (SHIBYTE(v27[0]) < 0) {
    operator delete(v26[0]);
  }
  return v16;
}

void sub_1003CE590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_1001F8580((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_1003CE5F8(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  BOOL v3 = (void *)a2;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __int16 v42 = 0;
  *(_OWORD *)long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)char v39 = 0u;
  char v43 = -1;
  uint64_t v6 = (char *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100002DE4(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v38 = *(void *)(a2 + 16);
  }
  BOOL v7 = sub_100003274(a1, (uint64_t)__p, (std::string *)v39);
  BOOL v8 = v7;
  if (SHIBYTE(v38) < 0)
  {
    operator delete(__p[0]);
    if (v8) {
      goto LABEL_6;
    }
  }
  else if (v7)
  {
LABEL_6:
    if (HIBYTE(v42))
    {
      int v10 = (unsigned char *)a3[1];
      unint64_t v9 = a3[2];
      if ((unint64_t)v10 >= v9)
      {
        unint64_t v14 = *a3;
        BOOL v15 = &v10[-*a3];
        unint64_t v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0) {
          sub_1000267C4();
        }
        unint64_t v17 = v9 - v14;
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          unint64_t v19 = (unint64_t)operator new(v18);
        }
        else {
          unint64_t v19 = 0;
        }
        BOOL v20 = (char *)(v19 + v18);
        v15[v19] = 9;
        uint64_t v11 = (uint64_t)&v15[v19 + 1];
        if (v10 == (unsigned char *)v14)
        {
          v19 += (unint64_t)v15;
        }
        else
        {
          char v21 = &v10[~v14];
          do
          {
            char v22 = *--v10;
            (v21--)[v19] = v22;
          }
          while (v10 != (unsigned char *)v14);
        }
        *a3 = v19;
        a3[1] = v11;
        a3[2] = (unint64_t)v20;
        if (v14) {
          operator delete((void *)v14);
        }
      }
      else
      {
        unsigned char *v10 = 9;
        uint64_t v11 = (uint64_t)(v10 + 1);
      }
      a3[1] = v11;
      int v13 = 1;
    }
    else
    {
      int v13 = 0;
    }
    if ((_BYTE)v42)
    {
      __int16 v24 = (unsigned char *)a3[1];
      unint64_t v23 = a3[2];
      if ((unint64_t)v24 >= v23)
      {
        unint64_t v27 = *a3;
        long long v28 = &v24[-*a3];
        unint64_t v29 = (unint64_t)(v28 + 1);
        if ((uint64_t)(v28 + 1) < 0) {
          sub_1000267C4();
        }
        unint64_t v30 = v23 - v27;
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v31 = v29;
        }
        if (v31) {
          unint64_t v32 = (unint64_t)operator new(v31);
        }
        else {
          unint64_t v32 = 0;
        }
        __int16 v33 = (char *)(v32 + v31);
        v28[v32] = 5;
        uint64_t v25 = (uint64_t)&v28[v32 + 1];
        if (v24 == (unsigned char *)v27)
        {
          v32 += (unint64_t)v28;
        }
        else
        {
          __int16 v34 = &v24[~v27];
          do
          {
            char v35 = *--v24;
            (v34--)[v32] = v35;
          }
          while (v24 != (unsigned char *)v27);
        }
        *a3 = v32;
        a3[1] = v25;
        a3[2] = (unint64_t)v33;
        if (v27) {
          operator delete((void *)v27);
        }
      }
      else
      {
        *__int16 v24 = 5;
        uint64_t v25 = (uint64_t)(v24 + 1);
      }
      a3[1] = v25;
      int v26 = 1;
    }
    else
    {
      int v26 = 0;
    }
    char v36 = qword_1008AB7B8;
    if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG))
    {
      if (*v6 < 0) {
        BOOL v3 = (void *)*v3;
      }
      *(_DWORD *)buf = 136315906;
      std::locale v45 = v3;
      __int16 v46 = 1024;
      int v47 = v26;
      __int16 v48 = 1024;
      int v49 = v13;
      __int16 v50 = 2080;
      char v51 = "fromCountryTable";
      _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "regulatory,comp,getDesignatedRfChannels,country,%s,ch5,%d,ch9,%d,note,%s", buf, 0x22u);
    }
    goto LABEL_52;
  }
  int v12 = qword_1008AB7B8;
  if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
    sub_1004384CC(v6, v3, v12);
  }
LABEL_52:
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[1]);
  }
  if (SHIBYTE(v40[0]) < 0) {
    operator delete(v39[0]);
  }
}

void sub_1003CE964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void sub_1003CE9B0(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_OWORD *)int v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)unint64_t v9 = 0u;
  __int16 v12 = -1;
  if (*(char *)(a2 + 23) < 0)
  {
    a1 = sub_100002DE4(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  BOOL v4 = sub_1003CD168((uint64_t)a1, (uint64_t *)__p, (uint64_t)v9);
  BOOL v5 = v4;
  if (SHIBYTE(v8) < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_6;
    }
  }
  else if (v4)
  {
LABEL_6:
    if (HIBYTE(v12) <= 0xFDu && v12 != 254 && v12 != 255)
    {
      uint64_t v6 = operator new(1uLL);
      *uint64_t v6 = 1;
      a3[1] = v6 + 1;
      a3[2] = v6 + 1;
      *a3 = v6;
    }
    goto LABEL_13;
  }
  if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
    sub_10043857C();
  }
LABEL_13:
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[1]);
  }
  if (SHIBYTE(v10[0]) < 0) {
    operator delete(v9[0]);
  }
}

void sub_1003CEACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_1001F8580((uint64_t)&a16);
  size_t v18 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003CEB0C(uint64_t a1)
{
  return a1 + 192;
}

BOOL sub_1003CEB14(uint64_t a1, uint64_t a2)
{
  BOOL v3 = +[NSString stringWithUTF8String:a1];
  BOOL v4 = +[NSUserDefaults standardUserDefaults];
  BOOL v5 = v4;
  if (v4)
  {
    uint64_t v6 = [v4 stringForKey:v3];
    BOOL v7 = v6;
    if (v6)
    {
      std::string::assign((std::string *)a2, (const std::string::value_type *)[v6 UTF8String]);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
  }
  return v5 != 0;
}

void sub_1003CEBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1003CEC04(uint64_t a1, double *a2)
{
  BOOL v3 = +[NSString stringWithUTF8String:a1];
  BOOL v4 = +[NSUserDefaults standardUserDefaults];
  BOOL v5 = v4;
  if (v4)
  {
    [v4 floatForKey:v3];
    *a2 = v6;
  }

  return v5 != 0;
}

void sub_1003CEC84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1003CECA0(uint64_t a1, _DWORD *a2)
{
  BOOL v3 = +[NSString stringWithUTF8String:a1];
  BOOL v4 = +[NSUserDefaults standardUserDefaults];
  BOOL v5 = v4;
  if (v4) {
    *a2 = [v4 integerForKey:v3];
  }

  return v5 != 0;
}

void sub_1003CED1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003CED38(uint64_t a1, char *a2)
{
  return sub_1003CB338(a1, a2, 0.0);
}

BOOL sub_1003CED40(uint64_t a1, std::string *a2)
{
  return sub_1003CB3B0(a1, a2, &v3);
}

void sub_1003CED64(id a1)
{
  if (!sub_100006BA0((uint64_t)off_10089F7E0[0], &byte_1008AB830)) {
    byte_1008AB830 = 0;
  }
}

uint64_t sub_1003CED98()
{
  char v1 = 0;
  LODWORD(result) = sub_100006BA0((uint64_t)off_10089F848, &v1);
  if (v1) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_1003CEDD4(uint64_t a1, int *a2, int a3)
{
  int v8 = 0;
  if (!sub_1003CECA0((uint64_t)off_10089F7F0[0], &v8) || v8 < 1)
  {
    *a2 = a3;
  }
  else
  {
    *a2 = v8;
    float v6 = qword_1008AB7B8;
    if (os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG)) {
      sub_100438620(a2, v6);
    }
  }
}

void sub_1003CEE58(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1008AB858, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1008AB858))
  {
    xmmword_1008AB840 = 0uLL;
    unk_1008AB850 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB840, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1008AB858);
  }
  if (qword_1008AB860 != -1) {
    dispatch_once(&qword_1008AB860, &stru_100863BF8);
  }
  if (byte_1008AB857 < 0)
  {
    long long v2 = xmmword_1008AB840;
    sub_100002DE4((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1008AB840;
    *(void *)(a1 + 16) = unk_1008AB850;
  }
}

void sub_1003CEF4C(id a1)
{
  char v2 = 0;
  BOOL v1 = !sub_100006BA0((uint64_t)off_10089F808[0], &v2) || v2 == 0;
  if (!v1 && !sub_1003CEB14((uint64_t)off_10089F800[0], (uint64_t)&xmmword_1008AB840))
  {
    if (byte_1008AB857 < 0)
    {
      *(unsigned char *)xmmword_1008AB840 = 0;
      *((void *)&xmmword_1008AB840 + 1) = 0;
    }
    else
    {
      LOBYTE(xmmword_1008AB840) = 0;
      byte_1008AB857 = 0;
    }
  }
}

BOOL sub_1003CEFD4(uint64_t a1, double *a2)
{
  if (qword_1008AB870 != -1) {
    dispatch_once(&qword_1008AB870, &stru_100863C18);
  }
  int v3 = dword_1008AB868;
  *a2 = (double)dword_1008AB868;
  return v3 != 0;
}

void sub_1003CF034(id a1)
{
  if (!sub_1003CECA0((uint64_t)off_10089F810[0], &dword_1008AB868)) {
    dword_1008AB868 = 0;
  }
}

BOOL sub_1003CF068(uint64_t a1, double *a2)
{
  if (qword_1008AB880 != -1) {
    dispatch_once(&qword_1008AB880, &stru_100863C38);
  }
  int v3 = dword_1008AB878;
  *a2 = (double)dword_1008AB878;
  return v3 != 0;
}

void sub_1003CF0C8(id a1)
{
  if (!sub_1003CECA0((uint64_t)off_10089F818[0], &dword_1008AB878)) {
    dword_1008AB878 = 0;
  }
}

BOOL sub_1003CF0FC(uint64_t a1, void *a2)
{
  if (qword_1008AB890 != -1) {
    dispatch_once(&qword_1008AB890, &stru_100863C58);
  }
  int v3 = dword_1008AB888;
  if (dword_1008AB888) {
    *a2 = dword_1008AB888;
  }
  return v3 != 0;
}

void sub_1003CF15C(id a1)
{
  if (!sub_1003CECA0((uint64_t)off_10089F840[0], &dword_1008AB888)) {
    dword_1008AB888 = 0;
  }
}

BOOL sub_1003CF190(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (qword_1008AB8A8 != -1) {
    dispatch_once(&qword_1008AB8A8, &stru_100863C78);
  }
  int v5 = byte_1008AB8A0;
  if (byte_1008AB8A0)
  {
    *a2 = dword_1008AB898;
    *a3 = dword_1008AB89C;
  }
  return v5 != 0;
}

void sub_1003CF208(id a1)
{
  BOOL v1 = sub_100006BA0((uint64_t)off_10089F820[0], &byte_1008AB8A0);
  char v2 = byte_1008AB8A0;
  if (!v1 && !byte_1008AB8A0) {
    goto LABEL_11;
  }
  if (byte_1008AB8A0)
  {
    BOOL v3 = sub_1003CECA0((uint64_t)off_10089F828[0], &dword_1008AB898);
    BOOL v4 = dword_1008AB898 && v3;
    byte_1008AB8A0 = v4;
    if (v4)
    {
      BOOL v5 = sub_1003CECA0((uint64_t)off_10089F830[0], &dword_1008AB89C);
      if (dword_1008AB89C) {
        char v2 = v5;
      }
      else {
        char v2 = 0;
      }
LABEL_11:
      byte_1008AB8A0 = v2;
    }
  }
}

BOOL sub_1003CF2AC(uint64_t a1, _DWORD *a2)
{
  if (qword_1008AB8B8 != -1) {
    dispatch_once(&qword_1008AB8B8, &stru_100863C98);
  }
  int v3 = byte_1008AB8B4;
  if (byte_1008AB8B4) {
    *a2 = dword_1008AB8B0;
  }
  return v3 != 0;
}

void sub_1003CF314(id a1)
{
  BOOL v1 = sub_100006BA0((uint64_t)off_10089F820[0], &byte_1008AB8B4);
  char v2 = byte_1008AB8B4;
  if (v1 || byte_1008AB8B4)
  {
    if (!byte_1008AB8B4) {
      return;
    }
    BOOL v3 = sub_1003CECA0((uint64_t)off_10089F838[0], &dword_1008AB8B0);
    if (dword_1008AB8B0) {
      char v2 = v3;
    }
    else {
      char v2 = 0;
    }
  }
  byte_1008AB8B4 = v2;
}

void sub_1003CF384(uint64_t a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  BOOL v1 = sub_1003CEB14(a1, (uint64_t)__p);
  BOOL v2 = os_log_type_enabled((os_log_t)qword_1008AB7B8, OS_LOG_TYPE_DEBUG);
  if (v1)
  {
    if (v2) {
      sub_10043869C();
    }
  }
  else if (v2)
  {
    sub_100438224();
  }
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003CF41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003CF438(uint64_t a1, uint64_t *a2)
{
  sub_1003CF4DC(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  BOOL v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  BOOL v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *BOOL v7 = 0;
    v7[1] = 0;
  }
}

void sub_1003CF4DC(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001FBF74(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_1003CF534(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      sub_1003CF438(a1, (uint64_t *)a2);
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    *(unsigned char *)(sub_1001FBF38(a1) + 40) = 0;
  }
  else
  {
    *(unsigned char *)(sub_100390B94(a1, (uint64_t *)a2) + 40) = 1;
  }
}

uint64_t sub_1003CF590(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      sub_1003CF608(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_1003CF5F4(_Unwind_Exception *a1)
{
  sub_10003AD90(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1003CF608(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  BOOL v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100003624(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100007880(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1003CF888(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_10002AA24(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *char v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1003CF864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10003B4EC((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1003CF888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_100002DE4(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1003CF918(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10003B4EC(v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1003CF934(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_100003624((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_100007880(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *sub_1003CFA38(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  unint64_t v14 = (char *)operator new(0xA0uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)unint64_t v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 56) = 0u;
  *((void *)v14 + 19) = 0;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_10002AA24(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  size_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *size_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1003CFCC4((uint64_t)v24, 0);
  return i;
}

void sub_1003CFCAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003CFCC4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1003CFCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1001FBEE4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_1003CFD1C(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint8x8_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1003CFE94((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000267C4();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100026770((void *)a1, v11);
    unint64_t v12 = sub_10017D674(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_1003CFED0(__str, v13, v9);
    unint64_t v12 = sub_10017D674(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1003CFED0(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1003CFE84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003CFE8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003CFE94(uint64_t *a1)
{
  if (*a1)
  {
    sub_10017D808(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_1003CFED0(std::string *__str, std::string *a2, std::string *this)
{
  unint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t sub_1003CFF30(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002AA24(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    sub_1003CFFA8(a1, i + 4, i + 4);
  return a1;
}

void sub_1003CFF90(_Unwind_Exception *a1)
{
  sub_1001FBE64(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003CFFA8(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t i = *v8; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v10 = i[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)i + 4) == v5) {
            return i;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1003D01F0(a1, *a2, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_10002AA24(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0] = *v17;
    *BOOL v17 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v20[0];
    }
  }
  uint64_t i = (uint64_t *)v20[0];
  v20[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1003CFCC4((uint64_t)v20, 0);
  return i;
}

void sub_1003D01D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003CFCC4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D01F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0xA0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_1003D0268((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1003D0250(_Unwind_Exception *a1)
{
  sub_1003CFCC4(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D0268(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = (uint64_t)(a2 + 12);
  *(_DWORD *)a1 = *a2;
  unint64_t v5 = (unsigned char *)(a1 + 48);
  sub_1003D0304(a1 + 8, (uint64_t)(a2 + 2));
  sub_1003D06B8(v5, v4);
  sub_1003D0A6C((unsigned char *)(a1 + 96), (uint64_t)(a2 + 24));
  return a1;
}

void sub_1003D02D8(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v2 + 88)) {
    sub_1001FBF38(v3);
  }
  sub_1001FBF38(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D0304(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002AA24(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_1003D037C(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1003D0364(_Unwind_Exception *a1)
{
  sub_1001FBF38(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1003D037C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint64_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t result = *v8; result; uint64_t result = (uint64_t **)*result)
      {
        unint64_t v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
          if (*((unsigned __int8 *)result + 16) == v5) {
            return result;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1003D05B8(a1, *a2, a3, (uint64_t)v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_10002AA24(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v19[0] = *v17;
    *BOOL v17 = v19[0];
  }
  else
  {
    *(void *)v19[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v19[0])
    {
      unint64_t v18 = *(void *)(*(void *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v19[0];
    }
  }
  uint64_t result = (uint64_t **)v19[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1003D0594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_1003D0658((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003D05B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  *((unsigned char *)v8 + 16) = *(unsigned char *)a3;
  v8[4] = 0;
  void v8[5] = 0;
  v8[3] = 0;
  uint64_t result = sub_100236044(v8 + 3, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1003D063C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1003D0658(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1003D0658(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

unsigned char *sub_1003D06B8(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    sub_1003D0718((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_1003D06FC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    sub_1001FBF38(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D0718(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002AA24(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_1003D0790(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1003D0778(_Unwind_Exception *a1)
{
  sub_1001FBF38(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1003D0790(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint64_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t result = *v8; result; uint64_t result = (uint64_t **)*result)
      {
        unint64_t v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
          if (*((unsigned __int8 *)result + 16) == v5) {
            return result;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1003D09CC(a1, *a2, a3, (uint64_t)v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_10002AA24(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v19[0] = *v17;
    *BOOL v17 = v19[0];
  }
  else
  {
    *(void *)v19[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v19[0])
    {
      unint64_t v18 = *(void *)(*(void *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v19[0];
    }
  }
  uint64_t result = (uint64_t **)v19[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1003D09A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_1003D0658((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003D09CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  *((unsigned char *)v8 + 16) = *(unsigned char *)a3;
  v8[4] = 0;
  void v8[5] = 0;
  v8[3] = 0;
  uint64_t result = sub_1002360C0(v8 + 3, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1003D0A50(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1003D0658(v3, v2);
  _Unwind_Resume(a1);
}

unsigned char *sub_1003D0A6C(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    sub_1003D0ACC((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_1003D0AB0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    sub_1001FBF38(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D0ACC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002AA24(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_1003D0B44(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1003D0B2C(_Unwind_Exception *a1)
{
  sub_1001FBF38(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1003D0B44(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint64_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t result = *v8; result; uint64_t result = (uint64_t **)*result)
      {
        unint64_t v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
          if (*((unsigned __int8 *)result + 16) == v5) {
            return result;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1003D0D80(a1, *a2, a3, (uint64_t)v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_10002AA24(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v19[0] = *v17;
    *BOOL v17 = v19[0];
  }
  else
  {
    *(void *)v19[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v19[0])
    {
      unint64_t v18 = *(void *)(*(void *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v19[0];
    }
  }
  uint64_t result = (uint64_t **)v19[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1003D0D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_1003D0658((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003D0D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  *((unsigned char *)v8 + 16) = *(unsigned char *)a3;
  v8[4] = 0;
  void v8[5] = 0;
  v8[3] = 0;
  uint64_t result = sub_10023613C(v8 + 3, *(const void **)(a3 + 8), *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1003D0E04(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1003D0658(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_1003D0E20(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_100026770(result, a4);
    uint64_t result = sub_1003D0EA8((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_1003D0E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10017D7B4(&a9);
  _Unwind_Resume(a1);
}

char *sub_1003D0EA8(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  float v11 = __dst;
  float v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100002DE4(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      float v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10017D734((uint64_t)v9);
  return v4;
}

void sub_1003D0F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **sub_1003D0F68(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void sub_1003D104C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1003D1058(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1003D1068(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1003D1074()
{
  qword_1008AB7B8 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
  qword_1008AB7C8 = 0;
  unk_1008AB7D0 = 0;
  qword_1008AB7C0 = 0;
  __cxa_atexit((void (*)(void *))sub_1003CA9C8, &qword_1008AB7C0, (void *)&_mh_execute_header);
  qword_1008AB7E0 = 0;
  unk_1008AB7E8 = 0;
  qword_1008AB7D8 = 0;
  __cxa_atexit((void (*)(void *))sub_1003CA9FC, &qword_1008AB7D8, (void *)&_mh_execute_header);
  qword_1008AB7F8 = 0;
  unk_1008AB800 = 0;
  qword_1008AB7F0 = 0;
  __cxa_atexit((void (*)(void *))sub_1003CAA30, &qword_1008AB7F0, (void *)&_mh_execute_header);
  xmmword_1008AB808 = 0u;
  unk_1008AB818 = 0u;
  dword_1008AB828 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1003CAA64, &xmmword_1008AB808, (void *)&_mh_execute_header);
  sub_100004950(v2, "01000000000000004D47575700000000");
  int v3 = 0;
  sub_100004950(v4, "01000000000000004757570000000000");
  int v5 = 1;
  sub_100004950(v6, "01000000000000004752530000000000");
  int v7 = 1;
  sub_100004950(v8, "01000000000000005253000000000000");
  int v9 = 1;
  sub_100004950(v10, "0100000000000000554D525300000000");
  int v11 = 1;
  sub_100004950(v12, "0100000000000000524F570000000000");
  int v13 = 1;
  sub_100004950(v14, "01000000000000005757000000000000");
  int v15 = 1;
  sub_100004950(v16, "01000000000000004D57574A00000000");
  int v17 = 0;
  sub_100004950(v18, "01000000000000004450450000000000");
  int v19 = 1;
  sub_100004950(v20, "01000000000000004450000000000000");
  int v21 = 1;
  sub_100004950(v22, "01000000000000004D57570000000000");
  int v23 = 0;
  sub_100004950(v24, "01000000000000004D44500000000000");
  int v25 = 0;
  sub_1003CF590((uint64_t)qword_1008AC628, v2, 12);
  uint64_t v1 = 384;
  do
  {
    if ((char)v2[v1 - 9] < 0) {
      operator delete(*(void **)&v2[v1 - 32]);
    }
    v1 -= 32;
  }
  while (v1);
  __cxa_atexit((void (*)(void *))sub_1003CAA68, qword_1008AC628, (void *)&_mh_execute_header);
}

void sub_1003D1348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 384;
  while (1)
  {
    if (*(char *)(v10 + v12 - 9) < 0) {
      operator delete(*(void **)(v10 + v12 - 32));
    }
    v12 -= 32;
    if (!v12) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_1003D13C4()
{
}

uint64_t sub_1003D13CC()
{
  if (qword_1008AB8C0 != -1) {
    dispatch_once(&qword_1008AB8C0, &stru_100863DC0);
  }
  return dword_10089F850;
}

void sub_1003D1410(id a1)
{
  uint64_t v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    int v9 = v1;
    CFTypeID v10 = CFGetTypeID(v1);
    if (v10 == CFNumberGetTypeID())
    {
      unsigned int valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt32Type, &valuePtr))
      {
        if (valuePtr == 8228)
        {
          dword_10089F850 = 1;
          unint64_t v18 = "Chip type 2";
          goto LABEL_13;
        }
        if (valuePtr == 8198)
        {
          dword_10089F850 = 0;
          unint64_t v18 = "Chip type 1";
LABEL_13:
          sub_10000486C(v18, v11, v12, v13, v14, v15, v16, v17, v20);
LABEL_16:
          CFRelease(v9);
          return;
        }
        uint64_t v20 = valuePtr;
        int v19 = "Unrecognized ChipID 0x%x";
      }
      else
      {
        int v19 = "Failed to extract ChipID as a number";
      }
    }
    else
    {
      int v19 = "ChipID has unexpected type";
    }
    sub_1003A9600(v19, v11, v12, v13, v14, v15, v16, v17, v20);
    goto LABEL_16;
  }

  sub_1003A9600("Failed to get ChipID", v2, v3, v4, v5, v6, v7, v8, v23);
}

void sub_1003D151C(char **a1@<X1>, uint64_t a2@<X8>)
{
  __int16 __dst = 0;
  unsigned __int8 v71 = 0;
  __int16 v70 = 0;
  char v69 = 0;
  __int16 v68 = 0;
  unsigned __int8 v67 = 0;
  sub_1003E0514(*a1, 2uLL, &__dst, 1);
  sub_1003E0514(*a1 + 2, 1uLL, &v71, 1);
  sub_1003E0514(*a1 + 3, 2uLL, &v70, 1);
  sub_1003E0514(*a1 + 5, 1uLL, &v69, 1);
  sub_1003E0514(*a1 + 6, 2uLL, &v68, 1);
  uint64_t v75 = 0;
  sub_1003E0514(*a1 + 8, 1uLL, &v67, 1);
  sub_1003D1F1C(v66, v67);
  if (v67)
  {
    unint64_t v10 = 0;
    int v11 = 9;
    do
    {
      LOWORD(v57) = 0;
      __p[32] = 0;
      v62[0] = 0;
      v62[8] = 0;
      v62[16] = 0;
      v62[24] = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      uint64_t v63 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      memset(__p, 0, 25);
      uint64_t v12 = &(*a1)[v11];
      unsigned __int8 v56 = 0;
      sub_1003E0514(v12, 1uLL, &v56, 1);
      uint64_t v13 = sub_1003A90BC(v56);
      if ((v13 & 0xFF0000) == 0) {
        __assert_rtn("decodeRangeCIREventVersion1", "roseCIRDataDecoderV1.cpp", 61, "packetType.has_value()");
      }
      uint64_t v14 = v11;
      LOWORD(v57) = v13;
      sub_1003E0514(&(*a1)[v11 + 1], 1uLL, (unsigned char *)&v57 + 2, 1);
      int v15 = sub_10039DF54();
      size_t v16 = v15;
      LOBYTE(__src[0]) = 0;
      uint64_t v17 = (unsigned char *)v58;
      if ((unint64_t)v15 <= *((void *)&v58 + 1) - (void)v58)
      {
        if ((unint64_t)v15 < *((void *)&v58 + 1) - (void)v58) {
          *((void *)&v58 + 1) = v58 + v15;
        }
      }
      else
      {
        sub_10021DF20(&v58, v15 - (*((void *)&v58 + 1) - v58), __src);
        uint64_t v17 = (unsigned char *)v58;
      }
      uint64_t v18 = v14 + 2;
      sub_1003E0514(&(*a1)[v18], v16, v17, 1);
      int v19 = sub_10039E024();
      int v20 = v19;
      size_t v21 = v19;
      LOBYTE(__src[0]) = 0;
      unint64_t v22 = (unsigned char *)*((void *)&v59 + 1);
      if ((unint64_t)v19 <= (void)v60 - *((void *)&v59 + 1))
      {
        if ((unint64_t)v19 < (void)v60 - *((void *)&v59 + 1)) {
          *(void *)&long long v60 = *((void *)&v59 + 1) + v19;
        }
      }
      else
      {
        sub_10021DF20((void *)&v59 + 1, v19 - (v60 - *((void *)&v59 + 1)), __src);
        unint64_t v22 = (unsigned char *)*((void *)&v59 + 1);
      }
      size_t v23 = v16 + (int)v18;
      sub_1003E0514(&(*a1)[v23], v21, v22, 1);
      int v24 = 0;
      int v11 = v20 + v23;
      unint64_t v53 = v10;
      do
      {
        if ((BYTE2(v57) >> v24))
        {
          bzero(__src, 0x400uLL);
          for (uint64_t i = 0; i != 1024; i += 4)
          {
            LOWORD(v73) = 0;
            __int16 v55 = 0;
            sub_1003E0514(&(*a1)[v11 + i], 2uLL, &v73, 1);
            sub_1003E0514(&(*a1)[v11 + 2 + i], 2uLL, &v55, 1);
            __int16 v26 = (__int16)v73;
            unint64_t v27 = (_WORD *)((char *)__src + i);
            *unint64_t v27 = v55;
            v27[1] = v26;
          }
          int v54 = v11;
          long long v28 = *(char **)&__p[8];
          if (*(void *)&__p[8] >= *(void *)&__p[16])
          {
            unint64_t v30 = *(char **)__p;
            uint64_t v31 = (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 10;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 54) {
              sub_1000267C4();
            }
            uint64_t v33 = *(void *)&__p[16] - *(void *)__p;
            if ((uint64_t)(*(void *)&__p[16] - *(void *)__p) >> 9 > v32) {
              unint64_t v32 = v33 >> 9;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFC00) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              char v35 = (char *)sub_10016D5C4((uint64_t)&__p[16], v34);
              uint64_t v37 = v36;
              unint64_t v30 = *(char **)__p;
              long long v28 = *(char **)&__p[8];
            }
            else
            {
              char v35 = 0;
              uint64_t v37 = 0;
            }
            uint64_t v38 = &v35[1024 * v31];
            memcpy(v38, __src, 0x400uLL);
            char v39 = v38;
            while (v28 != v30)
            {
              v28 -= 1024;
              v39 -= 1024;
              memcpy(v39, v28, 0x400uLL);
            }
            long long v40 = &v35[1024 * v37];
            unint64_t v29 = v38 + 1024;
            *(void *)std::string __p = v39;
            *(void *)&__p[8] = v38 + 1024;
            *(void *)&__p[16] = v40;
            if (v30) {
              operator delete(v30);
            }
            unint64_t v10 = v53;
          }
          else
          {
            memcpy(*(void **)&__p[8], __src, 0x400uLL);
            unint64_t v29 = v28 + 1024;
          }
          int v11 = v54 + 1024;
          *(void *)&__p[8] = v29;
        }
        ++v24;
      }
      while (v24 != 3);
      long long v41 = v66[0];
      __int16 v42 = &v66[0][76 * v10];
      __int16 v43 = v57;
      *((unsigned char *)v42 + 2) = BYTE2(v57);
      *__int16 v42 = v43;
      if (v42 == (__int16 *)&v57)
      {
        int v47 = &v41[76 * v10];
        long long v48 = *(_OWORD *)&__p[24];
        long long v49 = *(_OWORD *)v62;
        *(_OWORD *)((char *)v47 + 105) = *(_OWORD *)&v62[9];
        *((_OWORD *)v47 + 5) = v48;
        *((_OWORD *)v47 + 6) = v49;
      }
      else
      {
        sub_1001BE070(&v41[76 * v10 + 4], (char *)v58, *((char **)&v58 + 1), *((void *)&v58 + 1) - v58);
        sub_1001BE070(&v41[76 * v10 + 16], *((char **)&v59 + 1), (char *)v60, v60 - *((void *)&v59 + 1));
        sub_1003D1C08((char *)&v41[76 * v10 + 28], *(char **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 10);
        char v44 = &v41[76 * v10];
        long long v45 = *(_OWORD *)&__p[24];
        long long v46 = *(_OWORD *)v62;
        *(_OWORD *)((char *)v44 + 105) = *(_OWORD *)&v62[9];
        *((_OWORD *)v44 + 5) = v45;
        *((_OWORD *)v44 + 6) = v46;
        sub_1003D1D14((uint64_t *)v44 + 16, v63, v64, (v64 - v63) >> 5);
      }
      *(void *)&__src[0] = &v63;
      sub_10016D6F0((void ***)__src);
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      if (*((void *)&v59 + 1))
      {
        *(void *)&long long v60 = *((void *)&v59 + 1);
        operator delete(*((void **)&v59 + 1));
      }
      if ((void)v58)
      {
        *((void *)&v58 + 1) = v58;
        operator delete((void *)v58);
      }
      ++v10;
    }
    while (v10 < v67);
  }
  __int16 v50 = __dst;
  char v51 = sub_1003A7FD8(v71, v3, v4, v5, v6, v7, v8, v9);
  uint64_t v57 = 0;
  long long v58 = 0uLL;
  sub_1003A6080((uint64_t)__src, v50, v51, v70, v69, &v75, v66, &v57);
  *(_OWORD *)a2 = __src[0];
  *(void *)(a2 + 16) = *(void *)&__src[1];
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&__src[1] + 8);
  *(void *)(a2 + 40) = *((void *)&__src[2] + 1);
  *((void *)&__src[1] + 1) = 0;
  *(void *)&__src[2] = 0;
  *(_OWORD *)(a2 + 48) = __src[3];
  *(void *)(a2 + 64) = *(void *)&__src[4];
  *((void *)&__src[2] + 1) = 0;
  memset(&__src[3], 0, 24);
  *(unsigned char *)(a2 + 72) = 1;
  __int16 v73 = (void **)&__src[3];
  sub_10016D6F0(&v73);
  __int16 v73 = (void **)&__src[1] + 1;
  sub_10016D794(&v73);
  __int16 v73 = (void **)&v57;
  sub_10016D6F0(&v73);
  *(void *)&__src[0] = v66;
  sub_10016D794((void ***)__src);
}

void sub_1003D1B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,void **a46)
{
  *(void *)(v47 + 192) = v46;
  sub_10016D6F0(&a45);
  a46 = (void **)&a40;
  sub_10016D794(&a46);
  _Unwind_Resume(a1);
}

char *sub_1003D1C08(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 10)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 54) {
      sub_1000267C4();
    }
    uint64_t v10 = v8 >> 9;
    if (v8 >> 9 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFC00) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10016D580(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 10;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  size_t v16 = &__src[1024 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

void sub_1003D1D14(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    sub_1003D1E6C(a1);
    if (a4 >> 59) {
      sub_1000267C4();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_10016D8B4(a1, v12);
    uint64_t v13 = sub_10016D930(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  unint64_t v14 = (a1[1] - v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    sub_1003D1EA8((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = sub_10016D930(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  sub_1003D1EA8((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      int v19 = *(void **)(v18 - 24);
      if (v19)
      {
        *(void *)(v18 - 16) = v19;
        operator delete(v19);
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  a1[1] = v17;
}

void sub_1003D1E5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003D1E64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003D1E6C(uint64_t *a1)
{
  if (*a1)
  {
    sub_10016D744(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1003D1EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v5;
      if (v5 != a4) {
        sub_1001BE070((void *)(a4 + 8), *(char **)(v5 + 8), *(char **)(v5 + 16), *(void *)(v5 + 16) - *(void *)(v5 + 8));
      }
      v5 += 32;
      a4 += 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_1003D1F1C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10016D224(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 152 * ((152 * a2 - 152) / 0x98) + 152;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1003D1FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_1003D1FC8(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 213) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = 999;
  *(void *)(a1 + 584) = 850045863;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 648) = 850045863;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 736) = 0;
  sub_1003D20B0(a1);
  unsigned int v2 = sub_1003D13CC();
  *(_DWORD *)(a1 + 744) = v2;
  if (v2 <= 2) {
    *(_DWORD *)(a1 + 748) = dword_1004C5480[v2];
  }
  return a1;
}

void sub_1003D207C(_Unwind_Exception *a1)
{
  sub_10000AF74((void *)(v1 + 712));
  std::mutex::~mutex(v4);
  std::mutex::~mutex(v3);
  sub_10000AFF8(v2);
  sub_10000AE90(v1);
  _Unwind_Resume(a1);
}

void sub_1003D20B0(uint64_t a1)
{
  uint64_t v2 = MGGetProductType();
  if (v2 > 2625074842)
  {
    if (v2 > 3571532205)
    {
      if (v2 > 3825599859)
      {
        if (v2 > 3885279869)
        {
          switch(v2)
          {
            case 3885279870:
              uint64_t v10 = 3;
              goto LABEL_113;
            case 4068102502:
              uint64_t v10 = 120;
              goto LABEL_113;
            case 4201643249:
              uint64_t v10 = 6;
              goto LABEL_113;
          }
        }
        else
        {
          switch(v2)
          {
            case 3825599860:
              uint64_t v10 = 16;
              goto LABEL_113;
            case 3839750255:
              uint64_t v10 = 117;
              goto LABEL_113;
            case 3867318491:
              uint64_t v10 = 113;
              goto LABEL_113;
          }
        }
      }
      else if (v2 > 3742999857)
      {
        switch(v2)
        {
          case 3742999858:
            uint64_t v10 = 110;
            goto LABEL_113;
          case 3767261006:
            uint64_t v10 = 104;
            goto LABEL_113;
          case 3819635030:
            uint64_t v10 = 112;
            goto LABEL_113;
        }
      }
      else
      {
        switch(v2)
        {
          case 3571532206:
            uint64_t v10 = 102;
            goto LABEL_113;
          case 3585085679:
            uint64_t v10 = 8;
            goto LABEL_113;
          case 3663011141:
            uint64_t v10 = 109;
            goto LABEL_113;
        }
      }
    }
    else if (v2 > 2941181570)
    {
      if (v2 > 3001488777)
      {
        switch(v2)
        {
          case 3001488778:
            uint64_t v10 = 5;
            goto LABEL_113;
          case 3143587592:
            uint64_t v10 = 118;
            goto LABEL_113;
          case 3348380076:
            uint64_t v10 = 200;
            goto LABEL_113;
        }
      }
      else
      {
        switch(v2)
        {
          case 2941181571:
            uint64_t v10 = 18;
            goto LABEL_113;
          case 2943112657:
            uint64_t v10 = 100;
            goto LABEL_113;
          case 2979575960:
            uint64_t v10 = 106;
            goto LABEL_113;
        }
      }
    }
    else if (v2 > 2793418700)
    {
      switch(v2)
      {
        case 2793418701:
          uint64_t v10 = 15;
          goto LABEL_113;
        case 2795618603:
          uint64_t v10 = 21;
          goto LABEL_113;
        case 2940697645:
          uint64_t v10 = 13;
          goto LABEL_113;
      }
    }
    else
    {
      switch(v2)
      {
        case 2625074843:
          uint64_t v10 = 114;
          goto LABEL_113;
        case 2688879999:
          uint64_t v10 = 14;
          goto LABEL_113;
        case 2722529672:
          uint64_t v10 = 2;
          goto LABEL_113;
      }
    }
LABEL_112:
    uint64_t v10 = 997;
    goto LABEL_113;
  }
  if (v2 > 1408738133)
  {
    if (v2 > 2021146988)
    {
      if (v2 > 2085054104)
      {
        switch(v2)
        {
          case 2085054105:
            uint64_t v10 = 111;
            goto LABEL_113;
          case 2132302344:
            uint64_t v10 = 101;
            goto LABEL_113;
          case 2309863438:
            uint64_t v10 = 10;
            goto LABEL_113;
        }
      }
      else
      {
        switch(v2)
        {
          case 2021146989:
            uint64_t v10 = 12;
            goto LABEL_113;
          case 2080700391:
            uint64_t v10 = 0;
            goto LABEL_113;
          case 2084894489:
            uint64_t v10 = 115;
            goto LABEL_113;
        }
      }
    }
    else if (v2 > 1554479184)
    {
      switch(v2)
      {
        case 1554479185:
          uint64_t v10 = 121;
          goto LABEL_113;
        case 1602181456:
          uint64_t v10 = 107;
          goto LABEL_113;
        case 1770142589:
          uint64_t v10 = 116;
          goto LABEL_113;
      }
    }
    else
    {
      switch(v2)
      {
        case 1408738134:
          uint64_t v10 = 103;
          goto LABEL_113;
        case 1434404433:
          uint64_t v10 = 11;
          goto LABEL_113;
        case 1540760353:
          uint64_t v10 = 201;
          goto LABEL_113;
      }
    }
    goto LABEL_112;
  }
  if (v2 > 749116820)
  {
    if (v2 > 1169082143)
    {
      switch(v2)
      {
        case 1169082144:
          uint64_t v10 = 4;
          goto LABEL_113;
        case 1280909812:
          uint64_t v10 = 105;
          goto LABEL_113;
        case 1371389549:
          uint64_t v10 = 1;
          goto LABEL_113;
      }
    }
    else
    {
      switch(v2)
      {
        case 749116821:
          uint64_t v10 = 119;
          goto LABEL_113;
        case 851437781:
          uint64_t v10 = 19;
          goto LABEL_113;
        case 1060988941:
          uint64_t v10 = 7;
          goto LABEL_113;
      }
    }
    goto LABEL_112;
  }
  if (v2 > 425046864)
  {
    switch(v2)
    {
      case 425046865:
        uint64_t v10 = 108;
        goto LABEL_113;
      case 574536383:
        uint64_t v10 = 20;
        goto LABEL_113;
      case 689804742:
        uint64_t v10 = 9;
        goto LABEL_113;
    }
    goto LABEL_112;
  }
  if (v2 == -1)
  {
    uint64_t v10 = 999;
    goto LABEL_113;
  }
  if (v2 == 133314240)
  {
    uint64_t v10 = 17;
    goto LABEL_113;
  }
  if (v2 != 330877086) {
    goto LABEL_112;
  }
  uint64_t v10 = 22;
LABEL_113:
  *(_DWORD *)(a1 + 576) = v10;
  sub_10000486C("RoseParameterCache: device type %d", v3, v4, v5, v6, v7, v8, v9, v10);
}

void sub_1003D2660(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 648);
  std::mutex::lock((std::mutex *)(a1 + 648));
  sub_1001BE4D0(a1);
  sub_10000B198((void *)a1, a2);
  *(unsigned char *)(a1 + 112) = 1;
  sub_10000486C("RoseParameterCache::cacheHelloResponse", v5, v6, v7, v8, v9, v10, v11, v19);
  sub_1003D26F0((unsigned char *)a1, v12, v13, v14, v15, v16, v17, v18);

  std::mutex::unlock(v4);
}

void sub_1003D26DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1003D26F0(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[112]) {
    uint64_t v9 = "cached";
  }
  else {
    uint64_t v9 = "not cached";
  }
  sub_10000486C("RoseParameterCache: HelloResponse %s", a2, a3, a4, a5, a6, a7, a8, (uint64_t)v9);
  if (a1[213]) {
    uint64_t v17 = "cached";
  }
  else {
    uint64_t v17 = "not cached";
  }
  sub_10000486C("RoseParameterCache: AlishaCapabilities %s", v10, v11, v12, v13, v14, v15, v16, (uint64_t)v17);
  if (a1[568]) {
    int v25 = "cached";
  }
  else {
    int v25 = "not cached";
  }
  sub_10000486C("RoseParameterCache: RoseCalFileParser %s", v18, v19, v20, v21, v22, v23, v24, (uint64_t)v25);
  if (a1[568])
  {
    __int16 v26 = sub_100004950(__p, "AOAtoPDOAMapping_CV_Ch5");
    sub_1003D2BFC((uint64_t)v26, (uint64_t)(a1 + 280), (uint64_t)__p, v27, v28, v29, v30, v31);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
    if (!a1[568]) {
      goto LABEL_23;
    }
    unint64_t v32 = sub_100004950(__p, "AOAtoPDOAMapping_CH_Ch5");
    sub_1003D2BFC((uint64_t)v32, (uint64_t)(a1 + 344), (uint64_t)__p, v33, v34, v35, v36, v37);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
    if (!a1[568]) {
      goto LABEL_23;
    }
    uint64_t v38 = sub_100004950(__p, "AOAtoPDOAMapping_CV_Ch9");
    sub_1003D2BFC((uint64_t)v38, (uint64_t)(a1 + 408), (uint64_t)__p, v39, v40, v41, v42, v43);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
    if (!a1[568]) {
LABEL_23:
    }
      sub_10000AE44();
    char v44 = sub_100004950(__p, "AOAtoPDOAMapping_CH_Ch9");
    sub_1003D2BFC((uint64_t)v44, (uint64_t)(a1 + 472), (uint64_t)__p, v45, v46, v47, v48, v49);
    if (v51 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1003D2868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D2890(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 213)) {
    *(unsigned char *)(a1 + 213) = 0;
  }
  long long v9 = *a2;
  *(_OWORD *)(a1 + 136) = a2[1];
  *(_OWORD *)(a1 + 120) = v9;
  long long v10 = a2[2];
  long long v11 = a2[3];
  long long v12 = a2[4];
  *(_OWORD *)(a1 + 197) = *(long long *)((char *)a2 + 77);
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(unsigned char *)(a1 + 213) = 1;
  sub_10000486C("RoseParameterCache::cacheAlishaCapabilities", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v20);

  sub_1003D26F0((unsigned char *)a1, v13, v14, v15, v16, v17, v18, v19);
}

void sub_1003D290C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)(a1 + 568))
  {
    sub_10000486C("RoseParameterCache::cacheRoseCalFileParser: returning because roseCalFileParser is already cached", (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    sub_1003D29E0(a1 + 216, a2);
    sub_10000486C("RoseParameterCache::cacheRoseCalFileParser", v10, v11, v12, v13, v14, v15, v16, v32);
    sub_1003D26F0((unsigned char *)a1, v17, v18, v19, v20, v21, v22, v23);
    std::mutex::lock((std::mutex *)(a1 + 584));
    if (*(void *)(a1 + 736))
    {
      sub_10000486C("RoseParameterCache::cacheRoseCalFileParser: start executing CalFileParsingDone callback function", v24, v25, v26, v27, v28, v29, v30, v33);
      if (*(unsigned char *)(a1 + 568)) {
        char v31 = sub_1001C8E0C((unsigned __int8 *)(a1 + 272));
      }
      else {
        char v31 = 0;
      }
      sub_1000220A0(a1 + 712, v31);
    }
    std::mutex::unlock((std::mutex *)(a1 + 584));
  }
}

void sub_1003D29CC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D29E0(uint64_t a1, long long *a2)
{
  sub_1003D2D44(a1);
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  sub_1003D2F88(a1 + 56, (uint64_t)a2 + 56);
  *(_WORD *)(a1 + 320) = *((_WORD *)a2 + 160);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  uint64_t v7 = *((void *)a2 + 42);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  *(void *)(a1 + 336) = v7;
  *(void *)(a1 + 344) = *((void *)a2 + 43);
  *((void *)a2 + 41) = 0;
  *((void *)a2 + 42) = 0;
  *((void *)a2 + 43) = 0;
  *(unsigned char *)(a1 + 352) = 1;
  return a1;
}

void sub_1003D2A60(id a1)
{
  uint64_t v25 = 1;
  uint64_t v8 = (char *)container_system_group_path_for_identifier();
  if (!v8) {
    sub_100438720(&v25, v1, v2, v3, v4, v5, v6, v7);
  }
  sub_100004950(&v24, v8);
  sub_100004950(__p, "/Library/");
  if ((v23 & 0x80u) == 0) {
    long long v9 = __p;
  }
  else {
    long long v9 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v10 = v23;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  uint64_t v11 = std::string::append(&v24, (const std::string::value_type *)v9, v10);
  std::string::size_type v19 = v11->__r_.__value_.__r.__words[0];
  v26[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v20 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (byte_1008AB8DF < 0) {
    operator delete((void *)xmmword_1008AB8C8);
  }
  *(void *)&xmmword_1008AB8C8 = v19;
  *((void *)&xmmword_1008AB8C8 + 1) = v26[0];
  *(void *)((char *)&xmmword_1008AB8C8 + 15) = *(void *)((char *)v26 + 7);
  byte_1008AB8DF = v20;
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (byte_1008AB8DF >= 0) {
    uint64_t v21 = &xmmword_1008AB8C8;
  }
  else {
    uint64_t v21 = (long long *)xmmword_1008AB8C8;
  }
  sub_10000486C("system group container path: %s", v12, v13, v14, v15, v16, v17, v18, (uint64_t)v21);
  free(v8);
}

void sub_1003D2BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D2BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *(void *)a3;
  }
  if (*(unsigned char *)(a2 + 56)) {
    sub_10000486C("RoseParameterCache: mapping %s cached (%zu x %zu)", a2, a3, a4, a5, a6, a7, a8, v8);
  }
  else {
    sub_10000486C("RoseParameterCache: mapping %s not cached", a2, a3, a4, a5, a6, a7, a8, v8);
  }
}

void sub_1003D2C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 584);
  std::mutex::lock((std::mutex *)(a1 + 584));
  sub_10000486C("RoseParameterCache: CalFileParsingDone callback function is registered", v5, v6, v7, v8, v9, v10, v11, v12);
  sub_1003D2CD0((void *)(a1 + 712), a2);

  std::mutex::unlock(v4);
}

void sub_1003D2CBC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_1003D2CD0(void *a1, uint64_t a2)
{
  sub_100027124((uint64_t)v4, a2);
  sub_1003D30B4(v4, a1);
  sub_10000AF74(v4);
  return a1;
}

void sub_1003D2D44(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 352))
  {
    uint64_t v6 = (void **)(a1 + 328);
    sub_10000B09C(&v6);
    if (*(unsigned char *)(a1 + 312))
    {
      uint64_t v2 = *(void **)(a1 + 288);
      if (v2)
      {
        *(void *)(a1 + 296) = v2;
        operator delete(v2);
      }
    }
    if (*(unsigned char *)(a1 + 248))
    {
      uint64_t v3 = *(void **)(a1 + 224);
      if (v3)
      {
        *(void *)(a1 + 232) = v3;
        operator delete(v3);
      }
    }
    if (*(unsigned char *)(a1 + 184))
    {
      uint64_t v4 = *(void **)(a1 + 160);
      if (v4)
      {
        *(void *)(a1 + 168) = v4;
        operator delete(v4);
      }
    }
    if (*(unsigned char *)(a1 + 120))
    {
      uint64_t v5 = *(void **)(a1 + 96);
      if (v5)
      {
        *(void *)(a1 + 104) = v5;
        operator delete(v5);
      }
    }
    *(unsigned char *)(a1 + 352) = 0;
  }
}

uint64_t sub_1003D2DE8(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 648);
  std::mutex::lock((std::mutex *)(a1 + 648));
  if (*(unsigned char *)(a1 + 112))
  {
    __int16 v3 = *(_WORD *)(a1 + 26);
    int v4 = v3 & 0xFF00;
    int v5 = v3;
    int v6 = 0x10000;
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
    int v4 = 0;
  }
  std::mutex::unlock(v2);
  return v5 | v6 | v4;
}

BOOL sub_1003D2E54(uint64_t a1)
{
  return sub_10039CE24(*(_DWORD *)(a1 + 576));
}

uint64_t sub_1003D2E5C(uint64_t a1)
{
  return sub_10039CE34(*(_DWORD *)(a1 + 576));
}

BOOL sub_1003D2E64(uint64_t a1)
{
  return sub_10039CF2C(*(_DWORD *)(a1 + 576));
}

uint64_t sub_1003D2E6C(uint64_t a1)
{
  return sub_10039CED4(*(_DWORD *)(a1 + 576));
}

BOOL sub_1003D2E74(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 744) & 0xFFFFFFFD) != 0;
}

uint64_t sub_1003D2E84(uint64_t a1)
{
  uint64_t result = sub_10039CED4(*(_DWORD *)(a1 + 576));
  if (result)
  {
    uint64_t v3 = sub_1003D2DE8(a1);
    return (v3 & 0xFF0000) != 0 && (unsigned __int16)v3 == 6;
  }
  return result;
}

BOOL sub_1003D2ECC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 744) == 1;
}

BOOL sub_1003D2EDC(uint64_t a1)
{
  return sub_10039D03C(*(_DWORD *)(a1 + 576));
}

BOOL sub_1003D2EE4(uint64_t a1)
{
  BOOL result = sub_100005424(*(_DWORD *)(a1 + 576));
  if (result)
  {
    uint64_t v3 = sub_1003D2DE8(a1);
    return (v3 & 0xFF0000) != 0 && (unsigned __int16)v3 == 6;
  }
  return result;
}

uint64_t sub_1003D2F2C(uint64_t a1)
{
  return sub_10039D064(*(_DWORD *)(a1 + 576));
}

BOOL sub_1003D2F34(uint64_t a1)
{
  return *(_DWORD *)(a1 + 744) == 1 && sub_100005424(*(_DWORD *)(a1 + 576));
}

uint64_t sub_1003D2F50(uint64_t a1)
{
  uint64_t v1 = sub_1003D2DE8(a1);
  if ((unsigned __int16)v1 - 5 >= 2) {
    unsigned int v2 = 295;
  }
  else {
    unsigned int v2 = 310;
  }
  if ((v1 & 0xFF0000) != 0) {
    return v2;
  }
  else {
    return 0;
  }
}

__n128 sub_1003D2F88(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  if (*(unsigned char *)(a2 + 64))
  {
    long long v2 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v2;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    __n128 result = *(__n128 *)(a2 + 40);
    *(__n128 *)(a1 + 40) = result;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    long long v4 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v4;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 104) = 0;
    __n128 result = *(__n128 *)(a2 + 104);
    *(__n128 *)(a1 + 104) = result;
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  if (*(unsigned char *)(a2 + 192))
  {
    long long v5 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v5;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 168) = 0;
    __n128 result = *(__n128 *)(a2 + 168);
    *(__n128 *)(a1 + 168) = result;
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(unsigned char *)(a1 + 192) = 1;
  }
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  if (*(unsigned char *)(a2 + 256))
  {
    long long v6 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v6;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 232) = 0;
    __n128 result = *(__n128 *)(a2 + 232);
    *(__n128 *)(a1 + 232) = result;
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a2 + 232) = 0;
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    *(unsigned char *)(a1 + 256) = 1;
  }
  return result;
}

void *sub_1003D30B4(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    long long v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1003D3314(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100012C10(a1);
}

uint64_t sub_1003D3320(uint64_t result, void *a2, uint64_t a3, int a4)
{
  *(void *)__n128 result = 850045863;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(void *)(result + 56) = 0;
  uint64_t v4 = a2[1];
  *(void *)(result + 64) = *a2;
  *(void *)(result + 72) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 80) = a3;
  *(_DWORD *)(result + 88) = a4;
  return result;
}

uint64_t sub_1003D3364(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (std::__shared_weak_count *)a1[9];
  if (v9)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v9);
    if (v12)
    {
      uint64_t v13 = a1[8];
      if (v13)
      {
        int v14 = sub_1003A6F0C(a2);
        if (v14 == 2)
        {
          unsigned int v34 = sub_1003A72DC(a2) - 19;
          if (v34 > 0x3B || ((1 << v34) & 0x800000000000081) == 0)
          {
            sub_10000486C("got factory test response packet with  0x%02x", v27, v28, v29, v30, v31, v32, v33, *(unsigned __int8 *)(a2 + 1));
            goto LABEL_12;
          }
          unsigned __int16 __dst = 0;
          sub_1003E0514((char *)(*a3 + 4), 2uLL, &__dst, 1);
          int v35 = sub_1003A72DC(a2);
          switch(v35)
          {
            case 78:
              uint64_t v36 = "TEST_NB_TX";
              break;
            case 26:
              uint64_t v36 = "TEST_TX2";
              break;
            case 19:
              uint64_t v36 = "TEST_UWB_TX";
              break;
            default:
              __assert_rtn("factoryTestMsgIdToString", "roseResponseHandler.cpp", 55, "false");
          }
          sub_100004950(v144, v36);
          int v47 = v144[23];
          uint64_t v48 = *(unsigned char **)v144;
          sub_1003A8354(__dst, &v140);
          unsigned __int8 v56 = v144;
          if (v47 < 0) {
            unsigned __int8 v56 = v48;
          }
          sub_10000486C("got factory %s response packet with  0x%02x, status %s", v49, v50, v51, v52, v53, v54, v55, (uint64_t)v56);
          if (v142 < 0) {
            operator delete((void *)v140);
          }
LABEL_39:
          if ((v144[23] & 0x80000000) == 0) {
            goto LABEL_12;
          }
          uint64_t v57 = *(void **)v144;
        }
        else
        {
          if (v14 != 1)
          {
            if (v14)
            {
              uint64_t v37 = *(unsigned __int8 *)(a2 + 1);
              uint64_t v38 = "got response packet with unknown groupID 0x%02x";
            }
            else
            {
              int v22 = sub_1003A6F80(a2);
              if (v22 <= 79)
              {
                switch(v22)
                {
                  case 0:
                    sub_1003D421C(a3, v144);
                    unsigned __int8 v23 = sub_100007D00();
                    sub_1003D2660((uint64_t)v23, (long long *)v144);
                    v122[0] = v13;
                    v122[1] = v12;
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    sub_1003D46C8(v123, (long long *)v144);
                    sub_1003D4750((uint64_t)&v140, (uint64_t)v122);
                    sub_1003D4840((uint64_t)v122);
                    uint64_t v24 = a1[10];
                    sub_1001B1758((uint64_t)v139, (uint64_t)&v140);
                    sub_10039D740(v24, (uint64_t)v139);
                    sub_100196E1C(v139);
                    sub_100196E1C(&v140);
                    sub_1001BD608((uint64_t)v144);
                    break;
                  case 1:
                    int v94 = sub_1003D4888(a3);
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    char v95 = operator new(0x20uLL);
                    void *v95 = off_100863EB0;
                    v95[1] = v13;
                    v95[2] = v12;
                    *((_DWORD *)v95 + 6) = v94;
                    *(void *)&v144[24] = v95;
                    uint64_t v96 = a1[10];
                    sub_1001B1758((uint64_t)v138, (uint64_t)v144);
                    sub_10039D740(v96, (uint64_t)v138);
                    uint64_t v42 = v138;
                    goto LABEL_28;
                  case 2:
                    int v82 = sub_1003D494C(a3);
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    uint64_t v83 = operator new(0x20uLL);
                    *uint64_t v83 = off_100863F30;
                    v83[1] = v13;
                    v83[2] = v12;
                    *((_DWORD *)v83 + 6) = v82;
                    *(void *)&v144[24] = v83;
                    uint64_t v84 = a1[10];
                    sub_1001B1758((uint64_t)v137, (uint64_t)v144);
                    sub_10039D740(v84, (uint64_t)v137);
                    uint64_t v42 = v137;
                    goto LABEL_28;
                  case 3:
                    int v97 = sub_1003D4C5C(a3);
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    char v98 = operator new(0x20uLL);
                    *char v98 = off_100864130;
                    v98[1] = v13;
                    v98[2] = v12;
                    *((_DWORD *)v98 + 6) = v97;
                    *(void *)&v144[24] = v98;
                    uint64_t v99 = a1[10];
                    sub_1001B1758((uint64_t)v133, (uint64_t)v144);
                    sub_10039D740(v99, (uint64_t)v133);
                    uint64_t v42 = v133;
                    goto LABEL_28;
                  case 4:
                    sub_1003D4D20(a3, (uint64_t)v144);
                    v119[0] = v13;
                    v119[1] = v12;
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    __int16 v120 = *(_WORD *)v144;
                    memset(v121, 0, sizeof(v121));
                    sub_100236680(v121, *(uint64_t *)&v144[8], *(uint64_t *)&v144[16], (uint64_t)(*(void *)&v144[16] - *(void *)&v144[8]) >> 5);
                    sub_1003D502C((uint64_t)&v140, (uint64_t)v119);
                    sub_1003D50D8((uint64_t)v119);
                    uint64_t v100 = a1[10];
                    sub_1001B1758((uint64_t)v132, (uint64_t)&v140);
                    sub_10039D740(v100, (uint64_t)v132);
                    sub_100196E1C(v132);
                    __int16 v101 = (void ***)sub_100196E1C(&v140);
                    *(void *)&long long v140 = &v144[8];
                    sub_10016D6F0(v101);
                    break;
                  case 5:
                    unint64_t v79 = sub_1003D5120(a3);
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    __int16 v80 = operator new(0x20uLL);
                    *__int16 v80 = off_100864230;
                    v80[1] = v13;
                    v80[2] = v12;
                    *((_DWORD *)v80 + 6) = v79;
                    *((unsigned char *)v80 + 28) = BYTE4(v79);
                    *(void *)&v144[24] = v80;
                    uint64_t v81 = a1[10];
                    sub_1001B1758((uint64_t)v131, (uint64_t)v144);
                    sub_10039D740(v81, (uint64_t)v131);
                    uint64_t v42 = v131;
                    goto LABEL_28;
                  case 9:
                    sub_1003D5580((uint64_t)a3, (uint64_t)v144);
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    uint64_t v76 = (char *)operator new(0x58uLL);
                    long long v77 = *(_OWORD *)&v144[16];
                    *(_OWORD *)(v76 + 24) = *(_OWORD *)v144;
                    *(void *)uint64_t v76 = off_1008644B0;
                    *((void *)v76 + 1) = v13;
                    *((void *)v76 + 2) = v12;
                    *(_OWORD *)(v76 + 40) = v77;
                    *(_OWORD *)(v76 + 56) = v145[0];
                    *(_OWORD *)(v76 + 68) = *(_OWORD *)((char *)v145 + 12);
                    __int16 v143 = v76;
                    uint64_t v78 = a1[10];
                    sub_1001B1758((uint64_t)v126, (uint64_t)&v140);
                    sub_10039D740(v78, (uint64_t)v126);
                    sub_100196E1C(v126);
                    uint64_t v46 = &v140;
                    goto LABEL_29;
                  case 13:
                    int v73 = sub_1003D4B74(a3);
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    __int16 v74 = operator new(0x20uLL);
                    *__int16 v74 = off_1008640B0;
                    v74[1] = v13;
                    v74[2] = v12;
                    *((_DWORD *)v74 + 6) = v73;
                    *(void *)&v144[24] = v74;
                    uint64_t v75 = a1[10];
                    sub_1001B1758((uint64_t)v134, (uint64_t)v144);
                    sub_10039D740(v75, (uint64_t)v134);
                    uint64_t v42 = v134;
                    goto LABEL_28;
                  case 21:
                    unsigned __int16 v85 = sub_1003D520C(a3, v15, v16, v17, v18, v19, v20, v21);
                    sub_1003A8354(v85, v144);
                    if (v144[23] >= 0) {
                      char v93 = v144;
                    }
                    else {
                      char v93 = *(unsigned char **)v144;
                    }
                    sub_10000486C("got tx power backoff response packet with status: %s", v86, v87, v88, v89, v90, v91, v92, (uint64_t)v93);
                    goto LABEL_39;
                  case 22:
                    unsigned __int16 v64 = sub_1003D5274(a3, v15, v16, v17, v18, v19, v20, v21);
                    sub_1003A8354(v64, v144);
                    if (v144[23] >= 0) {
                      char v72 = v144;
                    }
                    else {
                      char v72 = *(unsigned char **)v144;
                    }
                    sub_10000486C("got measure temperature response packet with status: %s, temperature (%f degree Celsius)", v65, v66, v67, v68, v69, v70, v71, (uint64_t)v72);
                    goto LABEL_39;
                  default:
                    goto LABEL_73;
                }
                goto LABEL_12;
              }
              switch(v22)
              {
                case 'P':
                  int v39 = sub_1003D5514((uint64_t)a3);
                  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                  uint64_t v40 = operator new(0x20uLL);
                  *uint64_t v40 = off_100864430;
                  v40[1] = v13;
                  v40[2] = v12;
                  *((_DWORD *)v40 + 6) = v39;
                  *(void *)&v144[24] = v40;
                  uint64_t v41 = a1[10];
                  sub_1001B1758((uint64_t)v127, (uint64_t)v144);
                  sub_10039D740(v41, (uint64_t)v127);
                  uint64_t v42 = v127;
                  goto LABEL_28;
                case 'Q':
                  unint64_t v107 = sub_1003D54A0((uint64_t)a3);
                  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                  __int16 v108 = operator new(0x20uLL);
                  *__int16 v108 = off_1008643B0;
                  v108[1] = v13;
                  v108[2] = v12;
                  v108[3] = v107;
                  *(void *)&v144[24] = v108;
                  uint64_t v109 = a1[10];
                  sub_1001B1758((uint64_t)v128, (uint64_t)v144);
                  sub_10039D740(v109, (uint64_t)v128);
                  uint64_t v42 = v128;
                  goto LABEL_28;
                case 'R':
                  unint64_t v102 = sub_1003D54A0((uint64_t)a3);
                  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                  char v103 = operator new(0x20uLL);
                  *char v103 = off_100864330;
                  v103[1] = v13;
                  v103[2] = v12;
                  v103[3] = v102;
                  *(void *)&v144[24] = v103;
                  uint64_t v104 = a1[10];
                  sub_1001B1758((uint64_t)v129, (uint64_t)v144);
                  sub_10039D740(v104, (uint64_t)v129);
                  uint64_t v42 = v129;
                  goto LABEL_28;
                case 'S':
                  sub_1003D5310((uint64_t)a3, (uint64_t)&v140);
                  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                  char v105 = (char *)operator new(0x30uLL);
                  *(void *)char v105 = off_1008642B0;
                  *((void *)v105 + 1) = v13;
                  *((void *)v105 + 2) = v12;
                  *(_OWORD *)(v105 + 24) = v140;
                  *((_DWORD *)v105 + 10) = v141;
                  *(void *)&v144[24] = v105;
                  uint64_t v106 = a1[10];
                  sub_1001B1758((uint64_t)v130, (uint64_t)v144);
                  sub_10039D740(v106, (uint64_t)v130);
                  uint64_t v42 = v130;
                  goto LABEL_28;
                default:
                  if (v22 == 96)
                  {
                    int v110 = sub_1003D4A10(a3);
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    char v111 = operator new(0x20uLL);
                    *char v111 = off_100863FB0;
                    v111[1] = v13;
                    v111[2] = v12;
                    *((_DWORD *)v111 + 6) = v110;
                    *(void *)&v144[24] = v111;
                    uint64_t v112 = a1[10];
                    sub_1001B1758((uint64_t)v136, (uint64_t)v144);
                    sub_10039D740(v112, (uint64_t)v136);
                    uint64_t v42 = v136;
                    goto LABEL_28;
                  }
                  if (v22 == 112)
                  {
                    __int16 v58 = sub_1003D4AD4(a3);
                    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    long long v59 = operator new(0x20uLL);
                    *long long v59 = off_100864030;
                    v59[1] = v13;
                    v59[2] = v12;
                    *((_WORD *)v59 + 12) = v58;
                    *(void *)&v144[24] = v59;
                    uint64_t v60 = a1[10];
                    sub_1001B1758((uint64_t)v135, (uint64_t)v144);
                    sub_10039D740(v60, (uint64_t)v135);
                    uint64_t v42 = v135;
                    goto LABEL_28;
                  }
LABEL_73:
                  uint64_t v37 = *(unsigned __int16 *)(a2 + 2);
                  uint64_t v38 = "got ranging response with unknown message ID 0x%02x";
                  break;
              }
            }
            goto LABEL_31;
          }
          int v26 = sub_1003A7228(a2);
          if (v26 == 84)
          {
            int v43 = sub_1003D5918(a3, v15, v16, v17, v18, v19, v20, v21);
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            char v44 = operator new(0x20uLL);
            *char v44 = off_1008645B0;
            v44[1] = v13;
            v44[2] = v12;
            *((_DWORD *)v44 + 6) = v43 & 0xFFFFFF;
            *(void *)&v144[24] = v44;
            uint64_t v45 = a1[10];
            sub_1001B1758((uint64_t)v124, (uint64_t)v144);
            sub_10039D740(v45, (uint64_t)v124);
            uint64_t v42 = v124;
LABEL_28:
            sub_100196E1C(v42);
            uint64_t v46 = (long long *)v144;
LABEL_29:
            sub_100196E1C(v46);
            goto LABEL_12;
          }
          if (v26 != 82)
          {
            uint64_t v37 = *(unsigned __int16 *)(a2 + 2);
            uint64_t v38 = "got debug command response with unknown message ID 0x%02x";
LABEL_31:
            sub_1003A9600(v38, v15, v16, v17, v18, v19, v20, v21, v37);
            goto LABEL_12;
          }
          sub_1003D57B4(a3, v15, v16, v17, v18, v19, v20, v21, (uint64_t)v144);
          *(void *)&long long v115 = v13;
          *((void *)&v115 + 1) = v12;
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          __int16 v116 = *(_WORD *)v144;
          if ((v144[31] & 0x80000000) != 0)
          {
            sub_100002DE4(&__p, *(void **)&v144[8], *(unint64_t *)&v144[16]);
          }
          else
          {
            long long __p = *(_OWORD *)&v144[8];
            uint64_t v118 = *(void *)&v144[24];
          }
          char v61 = (char *)operator new(0x38uLL);
          *(void *)char v61 = off_100864530;
          *(_OWORD *)(v61 + 8) = v115;
          long long v115 = 0uLL;
          *((_WORD *)v61 + 12) = v116;
          uint64_t v62 = v61 + 32;
          if (SHIBYTE(v118) < 0)
          {
            sub_100002DE4(v62, (void *)__p, *((unint64_t *)&__p + 1));
            __int16 v143 = v61;
            if (SHIBYTE(v118) < 0) {
              operator delete((void *)__p);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v62 = __p;
            *((void *)v61 + 6) = v118;
            __int16 v143 = v61;
          }
          if (*((void *)&v115 + 1)) {
            sub_10001A970(*((std::__shared_weak_count **)&v115 + 1));
          }
          uint64_t v63 = a1[10];
          sub_1001B1758((uint64_t)v125, (uint64_t)&v140);
          sub_10039D740(v63, (uint64_t)v125);
          sub_100196E1C(v125);
          sub_100196E1C(&v140);
          if ((v144[31] & 0x80000000) == 0) {
            goto LABEL_12;
          }
          uint64_t v57 = *(void **)&v144[8];
        }
        operator delete(v57);
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  sub_10000486C("No response listener, ignoring response packet", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v113);
  if (v12) {
LABEL_12:
  }
    sub_10001A970(v12);
  return 0;
}

void sub_1003D3EC4(_Unwind_Exception *a1)
{
  sub_100196E1C(&STACK[0x288]);
  sub_100196E1C((void *)(v2 - 184));
  sub_10001A970(v1);
  _Unwind_Resume(a1);
}

void sub_1003D421C(void *a1@<X0>, void *a2@<X8>)
{
  if (*((_DWORD *)sub_100007D00() + 187) == 1)
  {
    sub_1003D59B4(a1, (uint64_t)a2);
    return;
  }
  uint64_t v11 = *a1;
  if (a1[1] - *a1 <= 0x48uLL)
  {
    sub_1003A9600("Not enough bytes in Hello Response (%zu < %u)", v4, v5, v6, v7, v8, v9, v10, a1[1] - *a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Not enough bytes in Hello Response");
    goto LABEL_33;
  }
  __dst[0] = 0;
  sub_1003E0514((char *)(v11 + 4), 2uLL, __dst, 1);
  if (__dst[0])
  {
    sub_1003A9600("Error status in Hello Response: 0x%x", v12, v13, v14, v15, v16, v17, v18, __dst[0]);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Error status in Hello Response");
LABEL_33:
  }
  uint64_t v19 = *a1;
  uint64_t v20 = operator new(0x28uLL);
  long long v59 = v20;
  long long v60 = xmmword_1004C5490;
  long long v21 = *(_OWORD *)(v19 + 22);
  *uint64_t v20 = *(_OWORD *)(v19 + 6);
  v20[1] = v21;
  *((unsigned char *)v20 + 32) = 0;
  int v57 = 0;
  int v58 = 0;
  sub_1003E0514((char *)(v19 + 38), 2uLL, (unsigned char *)&v58 + 2, 1);
  sub_1003E0514((char *)(*a1 + 40), 2uLL, &v58, 1);
  sub_1003E0514((char *)(*a1 + 69), 4uLL, &v57, 1);
  __int16 v22 = HIWORD(v58);
  int v49 = 0;
  sub_100004950(__p, "");
  __int16 v53 = 0;
  v54[0] = 0;
  int v55 = 0;
  sub_100004950(&v56, "");
  char v48 = 0;
  sub_1003E0514((char *)(*a1 + 42), 2uLL, &v49, 1);
  sub_1003E0514((char *)(*a1 + 44), 2uLL, (unsigned char *)&v49 + 2, 1);
  uint64_t v23 = *a1;
  uint64_t v24 = *(void **)(*a1 + 46);
  uint64_t v25 = *(void **)(*a1 + 54);
  if (v52 < 0)
  {
    operator delete(__p[0]);
    uint64_t v23 = *a1;
  }
  __p[0] = v24;
  __p[1] = v25;
  char v51 = 0;
  char v52 = 16;
  sub_1003E0514((char *)(v23 + 62), 2uLL, &v53, 1);
  sub_1003E0514((char *)(*a1 + 64), 1uLL, v54, 1);
  sub_1003E0514((char *)(*a1 + 65), 4uLL, &v55, 1);
  uint64_t v33 = (*((unsigned char *)a1 + 8) - *(_DWORD *)a1 - 73);
  if (*((unsigned char *)a1 + 8) - *(_DWORD *)a1 != 73)
  {
    uint64_t v34 = 0;
    do
    {
      snprintf(__str, 4uLL, "%X", *(unsigned __int8 *)(*a1 + v34 + 73));
      sub_100004950(&v43, __str);
      int v35 = std::string::insert(&v43, 0, "0x");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      uint64_t v37 = std::string::append(&v44, " ");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      int64_t v46 = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v45 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (v46 >= 0) {
        int v39 = v45;
      }
      else {
        int v39 = (void **)v45[0];
      }
      if (v46 >= 0) {
        std::string::size_type v40 = HIBYTE(v46);
      }
      else {
        std::string::size_type v40 = (std::string::size_type)v45[1];
      }
      std::string::append(&v56, (const std::string::value_type *)v39, v40);
      if (SHIBYTE(v46) < 0) {
        operator delete(v45[0]);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      ++v34;
    }
    while (v33 != v34);
  }
  __int16 v41 = sub_1003A89D8((unsigned __int16)v58, v26, v27, v28, v29, v30, v31, v32);
  sub_1003D6164(a2, (long long *)&v59, SHIBYTE(v22), v22, v41, (int *)&v48, v57);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (v52 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete(v59);
  }
}

void sub_1003D461C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __cxa_free_exception(v38);
  _Unwind_Resume(a1);
}

void *sub_1003D46C8(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)unsigned __int16 __dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_10000B2C8((unsigned char *)__dst + 32, (uint64_t)(a2 + 2));
  __dst[13] = *((void *)a2 + 13);
  return __dst;
}

void sub_1003D4734(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D4750(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  long long v4 = (char *)operator new(0x88uLL);
  uint64_t v5 = v4;
  *(void *)long long v4 = off_100863E30;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100002DE4(v4 + 24, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 5) = *(void *)(a2 + 32);
  }
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 40);
  sub_10000B2C8(v5 + 56, a2 + 48);
  *((void *)v5 + 16) = *(void *)(a2 + 120);
  *(void *)(a1 + 24) = v5;
  return a1;
}

void sub_1003D4808(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[2];
  if (v3) {
    sub_10001A970(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D4840(uint64_t a1)
{
  sub_10000AED4(a1 + 48);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

uint64_t sub_1003D4888(void *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Range config response not of expected size");
  }
  int __dst = 0;
  sub_1003E0514((char *)(v1 + 4), 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*a1 + 6), 2uLL, &__dst, 1);
  int v10 = sub_1003A82F0(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_1003D4938(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D494C(void *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Range enable response not of expected size");
  }
  int __dst = 0;
  sub_1003E0514((char *)(v1 + 4), 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*a1 + 6), 2uLL, &__dst, 1);
  int v10 = sub_1003A82F0(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_1003D49FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D4A10(void *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Test NMI range enable response not of expected size");
  }
  int __dst = 0;
  sub_1003E0514((char *)(v1 + 4), 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*a1 + 6), 2uLL, &__dst, 1);
  int v10 = sub_1003A82F0(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_1003D4AC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D4AD4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "GPIO power switch disable response not of expected size");
  }
  unsigned __int16 __dst = 0;
  sub_1003E0514((char *)(v1 + 4), 2uLL, &__dst, 1);
  return sub_1003A82F0(__dst, v2, v3, v4, v5, v6, v7, v8);
}

void sub_1003D4B60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D4B74(void *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "SAR state response not of expected size");
  }
  unsigned __int16 __dst = 0;
  __int16 v13 = 0;
  sub_1003E0514((char *)(v1 + 4), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*a1 + 6), 1uLL, (unsigned char *)&v13 + 1, 1);
  sub_1003E0514((char *)(*a1 + 7), 1uLL, &v13, 1);
  int v10 = sub_1003A82F0(__dst, v3, v4, v5, v6, v7, v8, v9);
  return v10 | (HIBYTE(v13) << 16) | (v13 << 24);
}

void sub_1003D4C48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D4C5C(void *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] - *a1 != 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Range disable response not of expected size");
  }
  int __dst = 0;
  sub_1003E0514((char *)(v1 + 4), 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*a1 + 6), 2uLL, &__dst, 1);
  int v10 = sub_1003A82F0(HIWORD(__dst), v3, v4, v5, v6, v7, v8, v9);
  return v10 | ((unsigned __int16)__dst << 16);
}

void sub_1003D4D0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1003D4D20(void *a1@<X0>, uint64_t a2@<X8>)
{
  __dst[0] = 0;
  sub_1003E0514((char *)(*a1 + 4), 2uLL, __dst, 1);
  __int16 v11 = sub_1003A82F0(__dst[0], v4, v5, v6, v7, v8, v9, v10);
  int v19 = *(unsigned __int8 *)(*a1 + 6);
  uint64_t v43 = 0;
  std::string v44 = 0;
  unint64_t v45 = 0;
  if (v19)
  {
    __int16 v41 = v11;
    uint64_t v42 = a2;
    LODWORD(v20) = 7;
    do
    {
      unint64_t v21 = (int)v20 + 2;
      if (a1[1] - *a1 < v21)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Get config response not of expected size");
      }
      char v22 = sub_1003A81D4(*(unsigned __int8 *)(*a1 + (int)v20), v12, v13, v14, v15, v16, v17, v18);
      uint64_t v23 = *a1;
      size_t v24 = *(unsigned __int8 *)((int)v20 + *a1 + 1);
      size_t v20 = v24 + (int)v21;
      if (a1[1] - *a1 < v20)
      {
        std::string::size_type v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v40, "Get config response not of expected size");
      }
      char v25 = v22;
      int v47 = 0;
      char v48 = 0;
      int v49 = 0;
      sub_100253FD4(&v47, (const void *)(v23 + v21), v23 + v21 + v24, v24);
      uint64_t v27 = v47;
      uint64_t v26 = v48;
      uint64_t v28 = v49;
      uint64_t v29 = v44;
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v31 = (uint64_t)&v44[-v43] >> 5;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 59) {
          sub_1000267C4();
        }
        uint64_t v33 = v45 - v43;
        if ((uint64_t)(v45 - v43) >> 4 > v32) {
          unint64_t v32 = v33 >> 4;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        char v51 = &v45;
        int v35 = (void **)sub_10016D8F8((uint64_t)&v45, v34);
        long long v36 = &v35[4 * v31];
        int v47 = v35;
        char v48 = v36;
        uint64_t v50 = &v35[4 * v37];
        *(unsigned char *)long long v36 = v25;
        v36[1] = v27;
        v36[2] = 0;
        v36[2] = v26;
        v36[3] = v28;
        int v49 = v36 + 4;
        sub_1003D89B4(&v43, &v47);
        uint64_t v30 = (uint64_t)v44;
        sub_1003A67CC((uint64_t)&v47);
      }
      else
      {
        *std::string v44 = v25;
        v29[1] = v27;
        v29[2] = v26;
        uint64_t v30 = (uint64_t)(v29 + 4);
        v29[3] = v28;
      }
      std::string v44 = (unsigned char *)v30;
      --v19;
    }
    while (v19);
    a2 = v42;
    uint64_t v38 = v43;
    __int16 v11 = v41;
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v38 = 0;
  }
  *(_WORD *)a2 = v11;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  sub_100236680((void *)(a2 + 8), v38, v30, (v30 - v38) >> 5);
  int v47 = (void **)&v43;
  sub_10016D6F0(&v47);
}

void sub_1003D4FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a11;
  sub_10016D6F0(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D502C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v4 = off_1008641B0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((_WORD *)v4 + 12) = *(_WORD *)(a2 + 16);
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 4) = 0;
  sub_100236680((void *)v4 + 4, *(void *)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_1003D50B8(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[2];
  if (v3) {
    sub_10001A970(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D50D8(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 24);
  sub_10016D6F0(&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

unint64_t sub_1003D5120(void *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(a1[1] - *a1 - 7) >= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Set config response not of expected size");
  }
  unsigned __int16 __dst = 0;
  sub_1003E0514((char *)(v1 + 4), 2uLL, &__dst, 1);
  int v10 = sub_1003A82F0(__dst, v3, v4, v5, v6, v7, v8, v9);
  if (a1[1] - *a1 == 8)
  {
    __int16 v11 = *(unsigned __int8 *)(*a1 + 7);
    __int16 v12 = 256;
  }
  else
  {
    __int16 v11 = 0;
    __int16 v12 = 0;
  }
  sub_1003D638C((uint64_t)&v16, v10, *(unsigned __int8 *)(*a1 + 6), v12 | v11);
  return v16 | ((unint64_t)v17 << 32);
}

void sub_1003D51F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D520C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 __dst = 0;
  if (a1[1] - *a1 == 6)
  {
    sub_1003E0514((char *)(*a1 + 4), 2uLL, &__dst, 1);
    return sub_1003A82F0(__dst, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    sub_1003A9600("got tx power backoff response packet with wrong size: expect %d, actual %zu", a2, a3, a4, a5, a6, a7, a8, 6);
    return 5;
  }
}

unint64_t sub_1003D5274(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 __dst = 0;
  unsigned int v18 = 0;
  if (a1[1] - *a1 == 10)
  {
    sub_1003E0514((char *)(*a1 + 4), 2uLL, &__dst, 1);
    sub_1003E0514((char *)(*a1 + 6), 4uLL, &v18, 1);
    unsigned int v16 = sub_1003A82F0(__dst, v9, v10, v11, v12, v13, v14, v15);
    return v16 | ((unint64_t)v18 << 32);
  }
  else
  {
    sub_1003A9600("got measure temperature response packet with wrong size: expect %d, actual %zu", a2, a3, a4, a5, a6, a7, a8, 10);
    return 5;
  }
}

uint64_t sub_1003D5310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 __dst = 0;
  char v27 = 0;
  __int16 v26 = 0;
  __int16 v25 = 0;
  char v24 = 0;
  int v23 = 0;
  __int16 v22 = 0;
  __int16 v21 = 0;
  sub_1003E0514((char *)(*(void *)a1 + 4), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*(void *)a1 + 6), 1uLL, &v27, 1);
  sub_1003E0514((char *)(*(void *)a1 + 7), 2uLL, &v26, 1);
  sub_1003E0514((char *)(*(void *)a1 + 9), 2uLL, &v25, 1);
  sub_1003E0514((char *)(*(void *)a1 + 27), 1uLL, &v24, 1);
  sub_1003E0514((char *)(*(void *)a1 + 28), 4uLL, &v23, 1);
  sub_1003E0514((char *)(*(void *)a1 + 32), 1uLL, (unsigned char *)&v22 + 1, 1);
  sub_1003E0514((char *)(*(void *)a1 + 33), 1uLL, &v22, 1);
  sub_1003E0514((char *)(*(void *)a1 + 34), 1uLL, (unsigned char *)&v21 + 1, 1);
  sub_1003E0514((char *)(*(void *)a1 + 35), 1uLL, &v21, 1);
  uint64_t result = sub_1003A82F0(__dst, v4, v5, v6, v7, v8, v9, v10);
  char v12 = v27;
  __int16 v13 = v26;
  __int16 v14 = v25;
  char v15 = v24;
  int v16 = v23;
  char v17 = HIBYTE(v22);
  char v18 = v22;
  char v19 = HIBYTE(v21);
  char v20 = v21;
  *(_WORD *)a2 = result;
  *(unsigned char *)(a2 + 2) = v12;
  *(_WORD *)(a2 + 4) = v13;
  *(_WORD *)(a2 + 6) = v14;
  *(unsigned char *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 12) = v16;
  *(unsigned char *)(a2 + 16) = v17;
  *(unsigned char *)(a2 + 17) = v18;
  *(unsigned char *)(a2 + 18) = v19;
  *(unsigned char *)(a2 + 19) = v20;
  return result;
}

unint64_t sub_1003D54A0(uint64_t a1)
{
  unsigned __int16 __dst = 0;
  unsigned int v11 = 0;
  sub_1003E0514((char *)(*(void *)a1 + 4), 2uLL, &__dst, 1);
  sub_1003E0514((char *)(*(void *)a1 + 6), 4uLL, &v11, 1);
  unsigned int v9 = sub_1003A82F0(__dst, v2, v3, v4, v5, v6, v7, v8);
  return v9 | ((unint64_t)v11 << 32);
}

uint64_t sub_1003D5514(uint64_t a1)
{
  int __dst = 0;
  sub_1003E0514((char *)(*(void *)a1 + 4), 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*(void *)a1 + 6), 2uLL, &__dst, 1);
  int v9 = sub_1003A82F0(HIWORD(__dst), v2, v3, v4, v5, v6, v7, v8);
  return v9 | ((unsigned __int16)__dst << 16);
}

uint64_t sub_1003D5580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = 0;
  uint64_t __dst = 0;
  int v28 = 0;
  int v27 = 0;
  uint64_t v26 = 0;
  int v24 = 0;
  int v25 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v4 = (char *)(*(void *)a1 + 4);
  int v21 = 0;
  sub_1003E0514(v4, 4uLL, (unsigned char *)&__dst + 4, 1);
  sub_1003E0514((char *)(*(void *)a1 + 8), 4uLL, &__dst, 1);
  sub_1003E0514((char *)(*(void *)a1 + 12), 4uLL, (unsigned char *)&v29 + 4, 1);
  sub_1003E0514((char *)(*(void *)a1 + 16), 4uLL, &v29, 1);
  sub_1003E0514((char *)(*(void *)a1 + 20), 4uLL, &v28, 1);
  sub_1003E0514((char *)(*(void *)a1 + 24), 4uLL, &v27, 1);
  sub_1003E0514((char *)(*(void *)a1 + 28), 4uLL, (unsigned char *)&v26 + 4, 1);
  sub_1003E0514((char *)(*(void *)a1 + 32), 4uLL, &v26, 1);
  sub_1003E0514((char *)(*(void *)a1 + 36), 4uLL, &v25, 1);
  sub_1003E0514((char *)(*(void *)a1 + 40), 2uLL, (unsigned char *)&v24 + 2, 1);
  sub_1003E0514((char *)(*(void *)a1 + 42), 2uLL, &v24, 1);
  sub_1003E0514((char *)(*(void *)a1 + 44), 4uLL, (unsigned char *)&v23 + 4, 1);
  sub_1003E0514((char *)(*(void *)a1 + 48), 4uLL, &v23, 1);
  uint64_t v5 = sub_100007D00();
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
  if (v5[187] == 2)
  {
    sub_1003E0514((char *)(*(void *)a1 + 52), 4uLL, (unsigned char *)&v22 + 4, 1);
    sub_1003E0514((char *)(*(void *)a1 + 56), 4uLL, &v22, 1);
    sub_1003E0514((char *)(*(void *)a1 + 60), 4uLL, &v21, 1);
    int v7 = v22;
    int v8 = HIDWORD(v22);
    int v6 = v21;
  }
  int v9 = __dst;
  int v11 = v29;
  int v10 = HIDWORD(v29);
  int v12 = v28;
  int v14 = HIDWORD(v26);
  int v13 = v27;
  int v16 = v25;
  uint64_t result = v26;
  __int16 v17 = HIWORD(v24);
  __int16 v18 = v24;
  int v20 = v23;
  int v19 = HIDWORD(v23);
  *(_DWORD *)a2 = HIDWORD(__dst);
  *(_DWORD *)(a2 + 4) = v9;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  *(_DWORD *)(a2 + 20) = v13;
  *(_DWORD *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 32) = v16;
  *(_WORD *)(a2 + 36) = v17;
  *(_WORD *)(a2 + 38) = v18;
  *(_DWORD *)(a2 + 40) = v19;
  *(_DWORD *)(a2 + 44) = v20;
  *(_DWORD *)(a2 + 48) = v8;
  *(_DWORD *)(a2 + 52) = v7;
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

void sub_1003D57B4(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = *a1;
  if (a1[1] - *a1 == 10)
  {
    unsigned __int16 __dst = 0;
    sub_1003E0514((char *)(v10 + 4), 2uLL, &__dst, 1);
    __int16 v19 = sub_1003A82F0(__dst, v12, v13, v14, v15, v16, v17, v18);
    memset(&v22, 0, sizeof(v22));
    std::string::resize(&v22, 4uLL, 0);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v20 = &v22;
    }
    else {
      int v20 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    sub_1003E0514((char *)(*a1 + 6), 4uLL, v20, 1);
    *(_WORD *)a9 = v19;
    int v21 = (std::string *)(a9 + 8);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100002DE4(v21, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *int v21 = v22;
    }
  }
  else
  {
    sub_1003A9600("got log request response packet with wrong size: expect %d, actual %zu", a2, a3, a4, a5, a6, a7, a8, 10);
    *(_WORD *)a9 = 0;
    *(void *)(a9 + 16) = 0;
    *(void *)(a9 + 24) = 0;
    *(void *)(a9 + 8) = 0;
  }
}

void sub_1003D58BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D58D8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

uint64_t sub_1003D5918(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 __dst = 0;
  if (a1[1] - *a1 == 7)
  {
    sub_1003E0514((char *)(*a1 + 4), 2uLL, &__dst, 1);
    int v16 = sub_1003A82F0(__dst, v9, v10, v11, v12, v13, v14, v15);
    unsigned __int8 v18 = 0;
    sub_1003E0514((char *)(*a1 + 6), 1uLL, &v18, 1);
    return v16 | (v18 << 16);
  }
  else
  {
    sub_1003A9600("got log config response packet with wrong size: expect %d, actual %zu", a2, a3, a4, a5, a6, a7, a8, 7);
    return 0x40000;
  }
}

void sub_1003D59B4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1] - *a1 <= 0x27uLL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "Not enough bytes in Hello Response");
  }
  uint64_t v5 = operator new(0x28uLL);
  uint64_t v69 = v5;
  long long v70 = xmmword_1004C5490;
  long long v6 = *(_OWORD *)(v3 + 20);
  *uint64_t v5 = *(_OWORD *)(v3 + 4);
  v5[1] = v6;
  *((unsigned char *)v5 + 32) = 0;
  int __dst = 0;
  sub_1003E0514((char *)(v3 + 36), 2uLL, (unsigned char *)&__dst + 2, 1);
  sub_1003E0514((char *)(*a1 + 38), 2uLL, &__dst, 1);
  __int16 v14 = HIWORD(__dst);
  unint64_t v15 = a1[1] - *a1;
  if (HIWORD(__dst) <= 0x13u)
  {
    if (v15 == 40)
    {
      __int16 v16 = sub_1003A89D8((unsigned __int16)__dst, v7, v8, v9, v10, v11, v12, v13);
      sub_100002DE4((unsigned char *)a2, v5, 0x20uLL);
      *(unsigned char *)(a2 + 24) = HIBYTE(v14);
      *(unsigned char *)(a2 + 25) = v14;
      *(_WORD *)(a2 + 26) = v16;
      *(unsigned char *)(a2 + 32) = 0;
      *(unsigned char *)(a2 + 96) = 0;
      *(unsigned char *)(a2 + 104) = 0;
      *(unsigned char *)(a2 + 108) = 0;
LABEL_31:
      operator delete(v69);
      return;
    }
    sub_1003A9600("Hello Response (%zu) not of expected size (%u)", v7, v8, v9, v10, v11, v12, v13, a1[1] - *a1);
    std::string v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Hello Response not of expected size");
LABEL_36:
  }
  if (v15 <= 0x43)
  {
    sub_1003A9600("Hello Response (%zu) size is less than the expected size (%u)", v7, v8, v9, v10, v11, v12, v13, a1[1] - *a1);
    std::string v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Hello Response size is less than the expected size");
    goto LABEL_36;
  }
  v59[0] = 0;
  int v60 = 0;
  sub_100004950(v61, "");
  __int16 v64 = 0;
  v65[0] = 0;
  int v66 = 0;
  sub_100004950(&v67, "");
  sub_1003E0514((char *)(*a1 + 40), 1uLL, v59, 1);
  unsigned __int8 v24 = v59[0] - 27;
  if (a1[1] - *a1 != (v59[0] - 27) + 68)
  {
    sub_1003A9600("Hello Response (%zu) not of expected size (%u)", v17, v18, v19, v20, v21, v22, v23, a1[1] - *a1);
    unint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Hello Response not of expected size");
  }
  if (v59[0] <= 0x1Au)
  {
    sub_100054E28((uint64_t)__p);
    int64_t v46 = sub_100056628(&v58, (uint64_t)"Additional Info Len as reported by the packet is less than expected. HSI Major: ", 80);
    v56.__r_.__value_.__s.__data_[0] = HIBYTE(v14);
    int v47 = sub_100056628(v46, (uint64_t)&v56, 1);
    char v48 = sub_100056628(v47, (uint64_t)", HSI Minor: ", 13);
    v56.__r_.__value_.__s.__data_[0] = v14;
    int v49 = sub_100056628(v48, (uint64_t)&v56, 1);
    uint64_t v50 = sub_100056628(v49, (uint64_t)", expected len: ", 16);
    v56.__r_.__value_.__s.__data_[0] = v59[0];
    char v51 = sub_100056628(v50, (uint64_t)&v56, 1);
    sub_100056628(v51, (uint64_t)", reported len: ", 16);
    char v52 = (void *)std::ostream::operator<<();
    sub_1003D60AC(v52);
    __int16 v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v53, &v56);
  }
  sub_1003E0514((char *)(*a1 + 41), 2uLL, &v60, 1);
  sub_1003E0514((char *)(*a1 + 43), 2uLL, (unsigned char *)&v60 + 2, 1);
  uint64_t v25 = *a1;
  uint64_t v26 = *(void **)(*a1 + 45);
  int v27 = *(void **)(*a1 + 53);
  if (v63 < 0)
  {
    operator delete(v61[0]);
    uint64_t v25 = *a1;
  }
  v61[0] = v26;
  v61[1] = v27;
  char v62 = 0;
  char v63 = 16;
  sub_1003E0514((char *)(v25 + 61), 2uLL, &v64, 1);
  sub_1003E0514((char *)(*a1 + 63), 1uLL, v65, 1);
  sub_1003E0514((char *)(*a1 + 64), 4uLL, &v66, 1);
  if (v59[0] >= 0x1Cu && v24)
  {
    uint64_t v35 = 0;
    do
    {
      snprintf(__str, 4uLL, "%X", *(unsigned __int8 *)(*a1 + v35 + 68));
      sub_100004950(&v54, __str);
      long long v36 = std::string::insert(&v54, 0, "0x");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      uint64_t v38 = std::string::append(&v56, " ");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      int64_t v58 = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (v58 >= 0) {
        std::string::size_type v40 = __p;
      }
      else {
        std::string::size_type v40 = (void **)__p[0];
      }
      if (v58 >= 0) {
        std::string::size_type v41 = HIBYTE(v58);
      }
      else {
        std::string::size_type v41 = (std::string::size_type)__p[1];
      }
      std::string::append(&v67, (const std::string::value_type *)v40, v41);
      if (SHIBYTE(v58) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      ++v35;
    }
    while (v24 != v35);
  }
  __int16 v42 = sub_1003A89D8((unsigned __int16)__dst, v28, v29, v30, v31, v32, v33, v34);
  sub_1003D62E0((void *)a2, (long long *)&v69, SHIBYTE(v14), v14, v42, (int *)v59);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (v63 < 0) {
    operator delete(v61[0]);
  }
  if (SHIBYTE(v70) < 0) {
    goto LABEL_31;
  }
}

void sub_1003D5F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      sub_100055100((uint64_t)&a25);
      sub_100157CC4(v32 - 192);
      if (*(char *)(v32 - 97) < 0) {
        operator delete(*(void **)(v32 - 120));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void *sub_1003D60AC(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1003D6150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_1003D6164(void *__dst, long long *a2, char a3, char a4, __int16 a5, int *a6, int a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v13;
  }
  *((unsigned char *)__dst + 24) = a3;
  *((unsigned char *)__dst + 25) = a4;
  *((_WORD *)__dst + 13) = a5;
  sub_1003D6218((uint64_t)(__dst + 4), a6);
  *((_DWORD *)__dst + 26) = a7;
  *((unsigned char *)__dst + 108) = 1;
  return __dst;
}

void sub_1003D61FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D6218(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  if (*((char *)a2 + 31) < 0)
  {
    sub_100002DE4((unsigned char *)(a1 + 8), *((void **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  long long v6 = (unsigned char *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    sub_100002DE4(v6, *((void **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 10);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(_OWORD *)long long v6 = v7;
  }
  *(unsigned char *)(a1 + 64) = 1;
  return a1;
}

void sub_1003D62C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003D62E0(void *__dst, long long *a2, char a3, char a4, __int16 a5, int *a6)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v11;
  }
  *((unsigned char *)__dst + 24) = a3;
  *((unsigned char *)__dst + 25) = a4;
  *((_WORD *)__dst + 13) = a5;
  sub_1003D6218((uint64_t)(__dst + 4), a6);
  *((unsigned char *)__dst + 104) = 0;
  *((unsigned char *)__dst + 108) = 0;
  return __dst;
}

void sub_1003D6370(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D638C(uint64_t result, int a2, int a3, __int16 a4)
{
  *(_WORD *)uint64_t result = a2;
  *(unsigned char *)(result + 2) = a3;
  *(_WORD *)(result + 3) = a4;
  if (a2 == 1)
  {
    if (a3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1003A1A8C(exception, "expect numConfigsSetSuccessfully == 0 when status == INVALID_CMD_PARAM");
    }
  }
  return result;
}

void sub_1003D63F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D640C(uint64_t a1)
{
  *(void *)a1 = off_100863E30;
  sub_10000AED4(a1 + 56);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D646C(uint64_t a1)
{
  *(void *)a1 = off_100863E30;
  sub_10000AED4(a1 + 56);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete();
}

void *sub_1003D64EC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x88uLL);
  *uint64_t v2 = off_100863E30;
  sub_1003D6640((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003D6540(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D6554(uint64_t a1, void *a2)
{
  *a2 = off_100863E30;
  return sub_1003D6640((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1003D6580(uint64_t a1)
{
}

void sub_1003D6588(void *a1)
{
  sub_1003D6704((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_1003D65C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D65F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D6634()
{
}

uint64_t sub_1003D6640(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100002DE4((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_10000B2C8((unsigned char *)(a1 + 48), a2 + 48);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

void sub_1003D66D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10001A970(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D6704(uint64_t a1)
{
  sub_10000AED4(a1 + 48);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_10001A970(v2);
  }
}

void *sub_1003D6760(void *a1)
{
  *a1 = off_100863EB0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D67AC(void *a1)
{
  *a1 = off_100863EB0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D6818(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_100863EB0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003D687C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_100863EB0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void sub_1003D68BC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D68CC(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D690C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D693C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D697C()
{
}

void *sub_1003D6988(void *a1)
{
  *a1 = off_100863F30;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D69D4(void *a1)
{
  *a1 = off_100863F30;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D6A40(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_100863F30;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003D6AA4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_100863F30;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void sub_1003D6AE4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D6AF4(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D6B34(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D6B64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D6BA4()
{
}

void *sub_1003D6BB0(void *a1)
{
  *a1 = off_100863FB0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D6BFC(void *a1)
{
  *a1 = off_100863FB0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D6C68(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_100863FB0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003D6CCC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_100863FB0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void sub_1003D6D0C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D6D1C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D6D5C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D6D8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D6DCC()
{
}

void *sub_1003D6DD8(void *a1)
{
  *a1 = off_100864030;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D6E24(void *a1)
{
  *a1 = off_100864030;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D6E90(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_100864030;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_WORD *)result + 12) = *(_WORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003D6EF4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_100864030;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a2 + 24) = *(_WORD *)(result + 24);
  return result;
}

void sub_1003D6F34(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D6F44(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D6F84(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D6FB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D6FF4()
{
}

void *sub_1003D7000(void *a1)
{
  *a1 = off_1008640B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D704C(void *a1)
{
  *a1 = off_1008640B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D70B8(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1008640B0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003D711C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1008640B0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void sub_1003D715C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D716C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D71AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D71DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D721C()
{
}

void *sub_1003D7228(void *a1)
{
  *a1 = off_100864130;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D7274(void *a1)
{
  *a1 = off_100864130;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D72E0(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_100864130;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003D7344(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_100864130;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void sub_1003D7384(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D7394(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D73D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D7404(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D7444()
{
}

uint64_t sub_1003D7450(uint64_t a1)
{
  *(void *)a1 = off_1008641B0;
  uint64_t v4 = (void **)(a1 + 32);
  sub_10016D6F0(&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D74B4(uint64_t a1)
{
  *(void *)a1 = off_1008641B0;
  uint64_t v3 = (void **)(a1 + 32);
  sub_10016D6F0(&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10001A970(v2);
  }
  operator delete();
}

void *sub_1003D752C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = off_1008641B0;
  sub_1003D7680((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003D7580(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D7594(uint64_t a1, void *a2)
{
  *a2 = off_1008641B0;
  return sub_1003D7680((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1003D75C0(uint64_t a1)
{
}

void sub_1003D75C8(void *a1)
{
  sub_1003D76FC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_1003D7604(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D7634(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D7674()
{
}

uint64_t sub_1003D7680(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v4 = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_100236680((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
  return a1;
}

void sub_1003D76E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10001A970(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D76FC(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_10016D6F0(&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10001A970(v2);
  }
}

void *sub_1003D7740(void *a1)
{
  *a1 = off_100864230;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D778C(void *a1)
{
  *a1 = off_100864230;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D77F8(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_100864230;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_WORD *)result + 14) = *(_WORD *)(a1 + 28);
  return result;
}

uint64_t sub_1003D7864(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_100864230;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(_DWORD *)(result + 24);
  *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

void sub_1003D78AC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D78BC(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D78FC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D792C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D796C()
{
}

void *sub_1003D7978(void *a1)
{
  *a1 = off_1008642B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D79C4(void *a1)
{
  *a1 = off_1008642B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

__n128 sub_1003D7A30(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1008642B0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return result;
}

__n128 sub_1003D7A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1008642B0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_1003D7AE4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D7AF4(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D7B34(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D7B64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D7BA4()
{
}

void *sub_1003D7BB0(void *a1)
{
  *a1 = off_100864330;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D7BFC(void *a1)
{
  *a1 = off_100864330;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D7C68(void *a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = off_100864330;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *sub_1003D7CCC(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = off_100864330;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void sub_1003D7D0C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D7D1C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D7D5C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D7D8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D7DCC()
{
}

void *sub_1003D7DD8(void *a1)
{
  *a1 = off_1008643B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D7E24(void *a1)
{
  *a1 = off_1008643B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D7E90(void *a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = off_1008643B0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *sub_1003D7EF4(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = off_1008643B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void sub_1003D7F34(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D7F44(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D7F84(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D7FB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D7FF4()
{
}

void *sub_1003D8000(void *a1)
{
  *a1 = off_100864430;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D804C(void *a1)
{
  *a1 = off_100864430;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D80B8(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_100864430;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003D811C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_100864430;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void sub_1003D815C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D816C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D81AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D81DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D821C()
{
}

void *sub_1003D8228(void *a1)
{
  *a1 = off_1008644B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D8274(void *a1)
{
  *a1 = off_1008644B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

__n128 sub_1003D82E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = off_1008644B0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  __n128 result = *(__n128 *)(a1 + 68);
  *(__n128 *)(v2 + 68) = result;
  return result;
}

__n128 sub_1003D835C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_1008644B0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  long long v5 = *(_OWORD *)(a1 + 40);
  long long v6 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 68);
  *(_OWORD *)(a2 + 56) = v6;
  *(_OWORD *)(a2 + 40) = v5;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_1003D83B4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D83C4(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D8404(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D8434(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D8474()
{
}

uint64_t sub_1003D8480(uint64_t a1)
{
  *(void *)a1 = off_100864530;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D84DC(uint64_t a1)
{
  *(void *)a1 = off_100864530;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete();
}

void *sub_1003D8558(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = off_100864530;
  sub_1003D86AC((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003D85AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D85C0(uint64_t a1, void *a2)
{
  *a2 = off_100864530;
  return sub_1003D86AC((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1003D85EC(uint64_t a1)
{
}

void sub_1003D85F4(void *a1)
{
  sub_1003D8738((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_1003D8630(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D8660(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D86A0()
{
}

uint64_t sub_1003D86AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = (unsigned char *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_100002DE4(v4, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_1003D8720(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10001A970(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D8738(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_10001A970(v2);
  }
}

void *sub_1003D878C(void *a1)
{
  *a1 = off_1008645B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_1003D87D8(void *a1)
{
  *a1 = off_1008645B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10001A970(v1);
  }

  operator delete();
}

void *sub_1003D8844(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1008645B0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_1003D88A8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1008645B0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void sub_1003D88E8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10001A970(v1);
  }
}

void sub_1003D88F8(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10001A970(v2);
  }

  operator delete(__p);
}

uint64_t sub_1003D8938(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), a1 + 24);
}

uint64_t sub_1003D8968(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003D89A8()
{
}

uint64_t sub_1003D89B4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003D8A2C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003D8A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      char v8 = *(unsigned char *)(a3 - 32);
      a3 -= 32;
      *(unsigned char *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1003D8AD8((uint64_t)v11);
  return v9;
}

uint64_t sub_1003D8AD8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1003A6784(a1);
  }
  return a1;
}

uint64_t sub_1003D8B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_WORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = a2;
  sub_1003DECE8(a1 + 56, a3);
  sub_1003DED80(a1 + 88, a4);
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  if (!*(void *)(a1 + 80)) {
    __assert_rtn("RoseDebugManager", "roseDebugManager.cpp", 47, "fClientCallback");
  }
  return a1;
}

void sub_1003D8BA8(_Unwind_Exception *a1)
{
  sub_100236914(v2);
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  _Unwind_Resume(a1);
}

void sub_1003D8BE8(uint64_t a1, int a2)
{
  int v16 = a2;
  LODWORD(v17) = 0;
  sub_100004950(v18, "Idle");
  int v19 = 1;
  sub_100004950(v20, "ClientTriggeredFatal");
  int v21 = 2;
  sub_100004950(v22, "ClientTriggeredNonFatal");
  sub_1003DEE18((uint64_t)v15, (int *)&v17, 3);
  for (uint64_t i = 0; i != -12; i -= 4)
  {
    if (SHIBYTE(v22[i + 2]) < 0) {
      operator delete((void *)v22[i]);
    }
  }
  if (!a2)
  {
    if (*(char *)(a1 + 47) < 0)
    {
      **(unsigned char **)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 47) = 0;
    }
  }
  uint64_t v5 = (int *)(a1 + 4);
  uint64_t v17 = v5;
  uint64_t v6 = sub_10000529C(v15, v5, (uint64_t)&unk_1004BC2F8, &v17);
  uint64_t v7 = v6 + 5;
  if (*((char *)v6 + 63) < 0) {
    uint64_t v7 = (void *)*v7;
  }
  uint64_t v17 = &v16;
  sub_10000529C(v15, &v16, (uint64_t)&unk_1004BC2F8, &v17);
  sub_10000486C("DebugLogState transition from: %s to: %s", v8, v9, v10, v11, v12, v13, v14, (uint64_t)v7);
  *uint64_t v5 = v16;
  sub_1001FC648((uint64_t)v15, (char *)v15[1]);
}

void sub_1003D8D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v18 = 0;
  while (1)
  {
    if (*(char *)(v16 + v18 + 95) < 0) {
      operator delete(*(void **)(v16 + v18 + 72));
    }
    v18 -= 32;
    if (v18 == -96) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_1003D8E04(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (*(unsigned char *)a1)
  {
    os_unfair_lock_unlock(v8);
    return 1;
  }
  else
  {
    if (a2)
    {
      *(void *)(a1 + 120) = a2;
      *(unsigned char *)(a1 + 129) = a3;
      *(unsigned char *)(a1 + 128) = a4;
      uint64_t v16 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)a2);
      *(void *)(a1 + 16) = v16;
      if (!v16)
      {
        sub_1003A9600("Unable to create the timer", v17, v18, v19, v20, v21, v22, v23, v31[0]);
        *(void *)(a1 + 120) = 0;
        os_unfair_lock_unlock(v8);
        return 0;
      }
      v31[0] = (uint64_t)_NSConcreteStackBlock;
      v31[1] = 0x40000000;
      v31[2] = (uint64_t)sub_1003D90B4;
      v31[3] = (uint64_t)&unk_100864620;
      v31[4] = a1;
      dispatch_source_set_event_handler(v16, v31);
      *(unsigned char *)(a1 + 1) = 1;
      uint64_t v24 = *(void *)(a1 + 48);
      uint64_t v25 = operator new(0x20uLL);
      *uint64_t v25 = off_100864670;
      v25[1] = sub_1003DA4F4;
      v25[2] = 0;
      void v25[3] = a1;
      v34[3] = v25;
      sub_1003AADA4(v24, (uint64_t)v34);
      sub_1003AB554(v34);
      uint64_t v26 = *(void *)(a1 + 48);
      int v27 = operator new(0x20uLL);
      *int v27 = off_100864730;
      v27[1] = sub_1003DA72C;
      __n128 v27[2] = 0;
      v27[3] = a1;
      v33[3] = v27;
      sub_1003AAE20(v26, (uint64_t)v33);
      sub_1003AB5D8(v33);
      uint64_t v28 = *(void *)(a1 + 48);
      uint64_t v29 = operator new(0x20uLL);
      *uint64_t v29 = off_1008647F0;
      v29[1] = sub_1003DA858;
      v29[2] = 0;
      v29[3] = a1;
      v32[3] = v29;
      sub_1003AAE9C(v28, (uint64_t)v32);
      sub_1003AB65C(v32);
      a2 = 1;
      *(unsigned char *)a1 = 1;
    }
    else
    {
      sub_1003A9600("RoseDebugManager: queue shouldn't be null", v9, v10, v11, v12, v13, v14, v15, v31[0]);
    }
    os_unfair_lock_unlock(v8);
  }
  return a2;
}

void sub_1003D9078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1003AB65C(va);
  _Unwind_Resume(a1);
}

void sub_1003D90B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 32);
  sub_1003A9600("Crashlog callback timer expired", a2, a3, a4, a5, a6, a7, a8, v19[0]);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 8));
  sub_10000486C("RoseDebugManager: Suspending the crashlog timer", v9, v10, v11, v12, v13, v14, v15, v19[0]);
  dispatch_suspend(*(dispatch_object_t *)(v8 + 16));
  *(unsigned char *)(v8 + 1) = 1;
  int v16 = *(_DWORD *)(v8 + 4);
  if (v16 == 2)
  {
    sub_100004950(v19, "Crashlog callback timer expired");
    sub_1003D91FC((unsigned char *)v8, v8 + 24, 0, (std::string::size_type)v19);
    int v17 = 3;
    if (v20 < 0)
    {
      uint64_t v18 = (void **)v19;
      goto LABEL_7;
    }
LABEL_8:
    sub_1003D8BE8(v8, 0);
    sub_1003DA4A0(v8 + 56, v17);
    goto LABEL_9;
  }
  if (v16 == 1)
  {
    sub_100004950(v21, "Crashlog callback timer expired");
    sub_1003D91FC((unsigned char *)v8, v8 + 24, 0, (std::string::size_type)v21);
    int v17 = 1;
    if (v22 < 0)
    {
      uint64_t v18 = (void **)v21;
LABEL_7:
      operator delete(*v18);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 8));
}

void sub_1003D91C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D91FC(unsigned char *a1, std::string::size_type a2, uint64_t a3, std::string::size_type a4)
{
  sub_100004950(v193, "/private/var/mobile/Library/Logs/CrashReporter/Rose/");
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  time_t v191 = std::chrono::system_clock::to_time_t(&__t);
  sub_100054E28((uint64_t)v188);
  uint64_t v8 = localtime(&v191);
  strftime(__s, 0x32uLL, "%Y-%m-%d-%H-%M-%S", v8);
  memset(&v187, 0, sizeof(v187));
  if ((v194 & 0x80u) == 0) {
    uint64_t v9 = v193;
  }
  else {
    uint64_t v9 = (void **)v193[0];
  }
  if ((v194 & 0x80u) == 0) {
    uint64_t v10 = v194;
  }
  else {
    uint64_t v10 = (uint64_t)v193[1];
  }
  uint64_t v11 = sub_100056628(v189, (uint64_t)v9, v10);
  uint64_t v12 = sub_100056628(v11, (uint64_t)"Rose-", 5);
  sub_100004950(__p, __s);
  if ((v196 & 0x80u) == 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if ((v196 & 0x80u) == 0) {
    uint64_t v14 = v196;
  }
  else {
    uint64_t v14 = (uint64_t)__p[1];
  }
  uint64_t v15 = sub_100056628(v12, (uint64_t)v13, v14);
  int v16 = sub_100056628(v15, (uint64_t)".", 1);
  LOBYTE(v197) = 48;
  int v17 = sub_1001771C8(v16, (char *)&v197);
  *(void *)((char *)v17 + *(void *)(*v17 - 24) + 24) = 3;
  uint64_t v18 = (void *)std::ostream::operator<<();
  sub_100056628(v18, (uint64_t)"/", 1);
  if ((char)v196 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v163 = a3;
  std::stringbuf::str();
  memset(&v184, 0, sizeof(v184));
  sub_1003DDA48(v183);
  sub_1003DDA48(v182);
  *(void *)((char *)&v198[-1] + (void)*(v197 - 3)) = v19;
  char v20 = (std::ios_base *)((char *)&v198[-1] + (void)*(v197 - 3));
  std::ios_base::init(v20, v198);
  v20[1].__vftable = 0;
  v20[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  sub_1003DFDDC(v181, 2uLL);
  bzero(__p, 0x400uLL);
  __int16 v164 = getpwnam("mobile");
  __int16 v180 = 0;
  if (!*a1)
  {
    uint64_t v28 = 0;
    goto LABEL_56;
  }
  if (confstr(65537, (char *)__p, 0x400uLL) - 1024 <= 0xFFFFFFFFFFFFFC00)
  {
    sub_1003A9600("failed to get process temp directory path", v21, v22, v23, v24, v25, v26, v27, v162);
LABEL_50:
    uint64_t v28 = 0;
    goto LABEL_51;
  }
  sub_100054E28((uint64_t)&__from);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::operator=();
  *(std::string::size_type *)((char *)__from.__pn_.__r_.__value_.__r.__words
  __from.__pn_.__r_.__value_.__r.__words[2] = v29;
  if (v179 < 0) {
    operator delete(v178);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  size_t v30 = strlen((const char *)__p);
  int v31 = sub_100056628(v189, (uint64_t)__p, v30);
  uint64_t v32 = sub_100056628(v31, (uint64_t)"/Rose-", 6);
  sub_100004950(&__from, __s);
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_from = &__from;
  }
  else {
    p_from = (std::__fs::filesystem::path *)__from.__pn_.__r_.__value_.__r.__words[0];
  }
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __from.__pn_.__r_.__value_.__l.__size_;
  }
  uint64_t v35 = sub_100056628(v32, (uint64_t)p_from, size);
  long long v36 = sub_100056628(v35, (uint64_t)".", 1);
  v165.__r_.__value_.__s.__data_[0] = 48;
  long long v37 = sub_1001771C8(v36, (char *)&v165);
  *(void *)((char *)v37 + *(void *)(*v37 - 24) + 24) = 3;
  uint64_t v38 = (void *)std::ostream::operator<<();
  sub_100056628(v38, (uint64_t)"/", 1);
  if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  if (SHIBYTE(v187.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path v187 = __from;
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v39 = HIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v39 = v187.__pn_.__r_.__value_.__l.__size_;
  }
  std::string::size_type v40 = &__from;
  sub_100158FEC((uint64_t)&__from, v39 + 12);
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v40 = (std::__fs::filesystem::path *)__from.__pn_.__r_.__value_.__r.__words[0];
  }
  if (v39)
  {
    if ((v187.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v44 = &v187;
    }
    else {
      std::string v44 = (std::__fs::filesystem::path *)v187.__pn_.__r_.__value_.__r.__words[0];
    }
    memmove(v40, v44, v39);
  }
  strcpy((char *)v40 + v39, "summary.json");
  if (SHIBYTE(v184.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v184.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path v184 = __from;
  if (a1[128] || a1[129])
  {
    if ((v187.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v45 = &v187;
    }
    else {
      unint64_t v45 = (std::__fs::filesystem::path *)v187.__pn_.__r_.__value_.__r.__words[0];
    }
    if (mkdir((const char *)v45, 0x1F8u))
    {
      int64_t v46 = __error();
      sub_1003A9600("Unable to create a temp directory location: %d", v47, v48, v49, v50, v51, v52, v53, *v46);
      goto LABEL_50;
    }
    if (v164)
    {
      std::string v56 = (v187.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v187
          : (std::__fs::filesystem::path *)v187.__pn_.__r_.__value_.__r.__words[0];
      if (chown((const char *)v56, v164->pw_uid, 0xFFFFFFFF))
      {
        int v57 = __error();
        sub_1003A9600("Error changing the ownership of the temp directory to _nearbyd: %d", v58, v59, v60, v61, v62, v63, v64, *v57);
        LOBYTE(v180) = 1;
      }
    }
    if ((v187.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v65 = &v187;
    }
    else {
      uint64_t v65 = (std::__fs::filesystem::path *)v187.__pn_.__r_.__value_.__r.__words[0];
    }
    if (chmod((const char *)v65, 0x1F8u))
    {
      int v66 = SHIBYTE(v187.__pn_.__r_.__value_.__r.__words[2]);
      std::string::size_type v67 = v187.__pn_.__r_.__value_.__r.__words[0];
      __error();
      uint64_t v75 = &v187;
      if (v66 < 0) {
        uint64_t v75 = (std::__fs::filesystem::path *)v67;
      }
      sub_1003A9600("Unable to chmod '%s': %d", v68, v69, v70, v71, v72, v73, v74, (uint64_t)v75);
      LOBYTE(v180) = 1;
    }
    std::ofstream::open();
    if ((v184.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v83 = &v184;
    }
    else {
      uint64_t v83 = (std::__fs::filesystem::path *)v184.__pn_.__r_.__value_.__r.__words[0];
    }
    if (!v198[15])
    {
      sub_1003A9600("Error trying to open file: %s", v76, v77, v78, v79, v80, v81, v82, (uint64_t)v83);
      goto LABEL_50;
    }
    if (chmod((const char *)v83, 0x1B0u))
    {
      int v84 = SHIBYTE(v184.__pn_.__r_.__value_.__r.__words[2]);
      std::string::size_type v85 = v184.__pn_.__r_.__value_.__r.__words[0];
      __error();
      char v93 = &v184;
      if (v84 < 0) {
        char v93 = (std::__fs::filesystem::path *)v85;
      }
      sub_1003A9600("Unable to chmod '%s': %d", v86, v87, v88, v89, v90, v91, v92, (uint64_t)v93);
      LOBYTE(v180) = 1;
    }
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v94 = a2;
    }
    else {
      std::string::size_type v94 = *(void *)a2;
    }
    uint64_t v175 = 0;
    __from.__pn_.__r_.__value_.__r.__words[0] = v94;
    v174[0] = 0;
    sub_1003DF49C((uint64_t)v174, &__from.__pn_.__r_.__value_.__l.__data_);
    sub_1003DEB54(v174);
    uint64_t v95 = sub_1003DBF20(v183, "Reason");
    sub_1003DC0F0(v95, (uint64_t)v174);
    sub_1003DEAC4(v174);
    if (a1[129]) {
      uint64_t v96 = "Enabled";
    }
    else {
      uint64_t v96 = "Disabled";
    }
    __from.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
    v172[0] = 0;
    uint64_t v173 = 0;
    sub_1003DF49C((uint64_t)v172, &__from.__pn_.__r_.__value_.__l.__data_);
    sub_1003DEB54(v172);
    uint64_t v97 = sub_1003DBF20(v183, "Firmware Logs");
    sub_1003DC0F0(v97, (uint64_t)v172);
    sub_1003DEAC4(v172);
    if (a1[128]) {
      char v98 = "Enabled";
    }
    else {
      char v98 = "Disabled";
    }
    __from.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
    v170[0] = 0;
    uint64_t v171 = 0;
    sub_1003DF49C((uint64_t)v170, &__from.__pn_.__r_.__value_.__l.__data_);
    sub_1003DEB54(v170);
    uint64_t v99 = sub_1003DBF20(v183, "Crash Logs");
    std::string::size_type v100 = a4;
    sub_1003DC0F0(v99, (uint64_t)v170);
    sub_1003DEAC4(v170);
    if (*(char *)(a4 + 23) < 0) {
      std::string::size_type v100 = *(void *)a4;
    }
    __from.__pn_.__r_.__value_.__r.__words[0] = v100;
    v168[0] = 0;
    uint64_t v169 = 0;
    sub_1003DF49C((uint64_t)v168, &__from.__pn_.__r_.__value_.__l.__data_);
    sub_1003DEB54(v168);
    uint64_t v101 = sub_1003DBF20(v183, "Log Collection Error");
    sub_1003DC0F0(v101, (uint64_t)v168);
    sub_1003DEAC4(v168);
  }
  if ((sub_1003DCD2C((uint64_t)a1, (const void **)&v187.__pn_.__r_.__value_.__l.__data_, v182, (uint64_t)&v180 + 1, &v180, v41, v42, v43) & 1) == 0)sub_1003A9600("Error collecting firmware logs.", v102, v103, v104, v105, v106, v107, v108, v162); {
  uint64_t v28 = sub_1003DB260((uint64_t)a1, (const void **)&v187.__pn_.__r_.__value_.__l.__data_, v163, v181, v182, (unsigned char *)&v180 + 1, &v180);
  }
  if (v28 == 2)
  {
    if (sub_1003DC5F0((uint64_t)a1, (const void **)&v187.__pn_.__r_.__value_.__l.__data_, v181, v182, (unsigned char *)&v180 + 1, &v180, v109, v110))uint64_t v28 = 2; {
    else
    }
      uint64_t v28 = 3;
  }
  sub_1003DFE80((uint64_t)v167, (uint64_t)v182);
  uint64_t v111 = sub_1003DBF20(v183, "Files Collected");
  sub_1003DC0F0(v111, (uint64_t)v167);
  sub_1003DEAC4(v167);
  sub_1003DDA80((uint64_t)v183, 4);
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v112 = &__from;
  }
  else {
    uint64_t v112 = (std::__fs::filesystem::path *)__from.__pn_.__r_.__value_.__r.__words[0];
  }
  if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v113 = HIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v113 = __from.__pn_.__r_.__value_.__l.__size_;
  }
  char v114 = sub_100056628(&v197, (uint64_t)v112, v113);
  std::ios_base::getloc((const std::ios_base *)((char *)v114 + *(void *)(*v114 - 24)));
  long long v115 = std::locale::use_facet((const std::locale *)&v165, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v115->__vftable[2].~facet_0)(v115, 10);
  std::locale::~locale((std::locale *)&v165);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)&v198[-1] + (void)*(v197 - 3)), *(_DWORD *)((char *)&v198[3] + (void)*(v197 - 3)) | 4);
  }
  if (!a1[128] && !a1[129]) {
    goto LABEL_52;
  }
  __int16 v116 = (char *)v193;
  if ((v194 & 0x80u) != 0) {
    __int16 v116 = (char *)v193[0];
  }
  char v166 = v116;
  sub_1002BA388(&__from.__pn_, &v166);
  std::__fs::filesystem::__status(&__from, 0);
  unsigned __int8 v117 = v165.__r_.__value_.__s.__data_[0];
  if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  }
  if (v117 == 255 || !v117)
  {
    if ((v194 & 0x80u) == 0) {
      uint64_t v118 = v193;
    }
    else {
      uint64_t v118 = (void **)v193[0];
    }
    if (mkdir((const char *)v118, 0x1F8u) && *__error() != 17)
    {
      __int16 v130 = __error();
      sub_1003A9600("Unable to create the parent directory for debug logs: %d", v131, v132, v133, v134, v135, v136, v137, *v130);
      goto LABEL_51;
    }
    if ((v194 & 0x80u) == 0) {
      char v119 = v193;
    }
    else {
      char v119 = (void **)v193[0];
    }
    if (chmod((const char *)v119, 0x1F8u))
    {
      int v120 = (char)v194;
      char v121 = (void **)v193[0];
      __error();
      __int16 v129 = v193;
      if (v120 < 0) {
        __int16 v129 = v121;
      }
      sub_1003A9600("Unable to chmod '%s': %d", v122, v123, v124, v125, v126, v127, v128, (uint64_t)v129);
      goto LABEL_51;
    }
    if (v164)
    {
      char v138 = (v194 & 0x80u) == 0 ? (const char *)v193 : (const char *)v193[0];
      if (chown(v138, v164->pw_uid, 0xFFFFFFFF))
      {
        char v139 = __error();
        sub_1003A9600("Error changing the ownership of parent directory to _nearbyd: %d", v140, v141, v142, v143, v144, v145, v146, *v139);
        goto LABEL_51;
      }
    }
  }
  if (sub_1003DD5A4((char *)v193))
  {
    sub_10019C9FC(&__from.__pn_, (char *)&v187);
    sub_10019C9FC(&v165, (char *)v185);
    std::__fs::filesystem::__copy(&__from, (const std::__fs::filesystem::path *)&v165, recursive, 0);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v165.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    }
    char v161 = v185;
    if (v186 < 0) {
      char v161 = (void **)v185[0];
    }
    sub_10000486C("Logs can be found in this directory: %s", v154, v155, v156, v157, v158, v159, v160, (uint64_t)v161);
    sub_10019C9FC(&__from.__pn_, (char *)&v187);
    std::__fs::filesystem::__remove_all(&__from, 0);
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    }
    goto LABEL_52;
  }
  sub_1003A9600("Unable to make room for new logs", v147, v148, v149, v150, v151, v152, v153, v162);
LABEL_51:
  LOBYTE(v180) = 1;
LABEL_52:
  if (HIBYTE(v180)) {
    sub_1003DA4A0((uint64_t)(a1 + 56), 5);
  }
  if ((_BYTE)v180) {
    sub_1003DA4A0((uint64_t)(a1 + 56), 6);
  }
LABEL_56:
  __p[0] = v181;
  sub_100149DEC((void ***)__p);
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  sub_1003DEAC4(v182);
  sub_1003DEAC4(v183);
  if (SHIBYTE(v184.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v184.__pn_.__r_.__value_.__l.__data_);
  }
  if (v186 < 0) {
    operator delete(v185[0]);
  }
  if (SHIBYTE(v187.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v187.__pn_.__r_.__value_.__l.__data_);
  }
  *(void *)((char *)v188
  v189[0] = v54;
  if (v190 < 0) {
    operator delete((void *)v189[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if ((char)v194 < 0) {
    operator delete(v193[0]);
  }
  return v28;
}

#error "1003DA164: call analysis failed (funcsize=60)"

uint64_t sub_1003DA4A0(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1003DA4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000486C("crashReceived", a2, a3, a4, a5, a6, a7, a8, (uint64_t)__p[0]);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (*(unsigned char *)a1)
  {
    if (a2)
    {
      if (!*(_DWORD *)(a1 + 4))
      {
        sub_100004950(&v30, "FW Generated");
        int v17 = (void **)(a1 + 24);
        if (*(char *)(a1 + 47) < 0) {
          operator delete(*v17);
        }
        *(_OWORD *)int v17 = v30;
        *(void *)(a1 + 40) = v31;
      }
      sub_100004950(__p, "");
      int v25 = sub_1003D91FC((unsigned char *)a1, a1 + 24, a2, (std::string::size_type)__p);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      switch(v25)
      {
        case 0:
          sub_1003A9600("No crashlogs were available to dequeue", v18, v19, v20, v21, v22, v23, v24, (uint64_t)__p[0]);
          break;
        case 1:
          if (*(_DWORD *)(a1 + 4) == 2)
          {
            sub_10000486C("RoseDebugManager: Suspending the crashlog timer", v18, v19, v20, v21, v22, v23, v24, (uint64_t)__p[0]);
            dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
            *(unsigned char *)(a1 + 1) = 1;
            sub_1003D8BE8(a1, 0);
            uint64_t v26 = a1 + 56;
            int v27 = 4;
            goto LABEL_23;
          }
          break;
        case 2:
          if (*(_DWORD *)(a1 + 4))
          {
            sub_10000486C("RoseDebugManager: Suspending the crashlog timer", v18, v19, v20, v21, v22, v23, v24, (uint64_t)__p[0]);
            dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
            *(unsigned char *)(a1 + 1) = 1;
            sub_1003D8BE8(a1, 0);
          }
          uint64_t v26 = a1 + 56;
          int v27 = 2;
          goto LABEL_23;
        case 3:
          if (*(_DWORD *)(a1 + 4))
          {
            sub_10000486C("RoseDebugManager: Suspending the crashlog timer", v18, v19, v20, v21, v22, v23, v24, (uint64_t)__p[0]);
            dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
            *(unsigned char *)(a1 + 1) = 1;
            sub_1003D8BE8(a1, 0);
          }
          uint64_t v26 = a1 + 56;
          int v27 = 1;
LABEL_23:
          sub_1003DA4A0(v26, v27);
          break;
        default:
          break;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      return;
    }
    sub_1003A9600("descriptor is null", v10, v11, v12, v13, v14, v15, v16, (uint64_t)__p[0]);
    sub_1003DA4A0(a1 + 56, 5);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
}

void sub_1003DA700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003DA72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  switch((int)a2)
  {
    case 0:
      sub_10000486C("fwStateChangeReceived: FW is in SecureROM", a2, a3, a4, a5, a6, a7, a8, v20);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
      if (*(_DWORD *)(a1 + 4) == 2)
      {
        sub_10000486C("RoseDebugManager: Suspending the crashlog timer", v10, v11, v12, v13, v14, v15, v16, v21);
        dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
        *(unsigned char *)(a1 + 1) = 1;
        sub_1003D8BE8(a1, 0);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      uint64_t v17 = a1 + 56;
      int v18 = 7;
      goto LABEL_6;
    case 1:
      uint64_t v19 = "fwStateChangeReceived: FW is in FirmwareRunning";
      goto LABEL_12;
    case 2:
      sub_10000486C("fwStateChangeReceived: FW is in FirmwareLogCollectionInProgress", a2, a3, a4, a5, a6, a7, a8, v20);
      uint64_t v17 = a1 + 56;
      int v18 = 0;
LABEL_6:
      sub_1003DA4A0(v17, v18);
      return;
    case 3:
      uint64_t v19 = "fwStateChangeReceived: FW is in FirmwareCrashed";
      goto LABEL_12;
    case 4:
      uint64_t v19 = "fwStateChangeReceived: Unable to decode the FW state.";
LABEL_12:
      sub_10000486C(v19, a2, a3, a4, a5, a6, a7, a8, a9);
      break;
    default:
      return;
  }
}

void sub_1003DA858(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    unint64_t v10 = a4;
    if (a4)
    {
      if (a4 >= 0x101)
      {
        sub_1003A9600("Received error packet of size %zu, truncating to %d", a2, a3, a4, a5, a6, a7, a8, a4);
        unint64_t v10 = 256;
      }
      if (a2 == 4 || a2 == 2)
      {
        sub_100004950(v17, "Error Reporting Packet:\n");
        sub_100004950(__p, "\n");
        sub_1003E0ABC((uint64_t)v17, a3, v10, 4u, (uint64_t)__p);
      }
      else
      {
        sub_100004950(v17, "Error Reporting Packet Header:\n");
        sub_100004950(__p, "\n");
        if (v10 > 0x13) {
          sub_1003E0ABC((uint64_t)v17, a3, 0x14uLL, 4u, (uint64_t)__p);
        }
        else {
          sub_1003E0ABC((uint64_t)v17, a3, v10, 4u, (uint64_t)__p);
        }
      }
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
  }
  switch((int)a2)
  {
    case 0:
      sub_1003A9600("errorReportReceived: FWPktSeqMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 8;
      goto LABEL_30;
    case 1:
      sub_1003A9600("errorReportReceived: FWPktDroppedMagicMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 9;
      goto LABEL_30;
    case 2:
      sub_1003A9600("errorReportReceived: FWPktDroppedTooLarge", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 10;
      goto LABEL_30;
    case 3:
      sub_1003A9600("errorReportReceived: FWPktDroppedFWFailure", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 11;
      goto LABEL_30;
    case 4:
      sub_1003A9600("errorReportReceived: FWPktDroppedCRCMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 12;
      goto LABEL_30;
    case 5:
      sub_1003A9600("errorReportReceived: FWPktDroppedRespSeqMismatch", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 13;
      goto LABEL_30;
    case 6:
      sub_1003A9600("errorReportReceived: FWPktDroppedUnhandledType", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 14;
      goto LABEL_30;
    case 7:
      sub_1003A9600("errorReportReceived: FWPktDroppedUnhandledInterface", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 15;
      goto LABEL_30;
    case 8:
      sub_1003A9600("errorReportReceived: FWPktDroppedUnknownError", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 16;
      goto LABEL_30;
    case 9:
      sub_1003A9600("errorReportReceived: DriverCrashlogPktError", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 17;
      goto LABEL_30;
    case 10:
      sub_1003A9600("errorReportReceived: RKOSPktError", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 18;
      goto LABEL_30;
    case 11:
      sub_1003A9600("errorReportReceived: InvalidEventParameter", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 19;
      goto LABEL_30;
    case 12:
      sub_1003A9600("errorReportReceived: UnknownError", a2, a3, a4, a5, a6, a7, a8, v14);
      uint64_t v12 = a1 + 56;
      int v13 = 20;
LABEL_30:
      sub_1003DA4A0(v12, v13);
      break;
    default:
      sub_1003A9600("errorReportReceived: Error Undefined (%d)", a2, a3, a4, a5, a6, a7, a8, a2);
      break;
  }
}

void sub_1003DAB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003DAB88(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 120);
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1003DAC00;
    block[3] = &unk_100864640;
    block[4] = a1;
    dispatch_sync(v2, block);
  }
}

void sub_1003DAC00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 8));
  if (*(unsigned char *)v1)
  {
    if (*(unsigned char *)(v1 + 1)) {
      dispatch_resume(*(dispatch_object_t *)(v1 + 16));
    }
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 16));
    dispatch_release(*(dispatch_object_t *)(v1 + 16));
    uint64_t v2 = *(void *)(v1 + 48);
    v3[3] = 0;
    sub_1003AADA4(v2, (uint64_t)v3);
    sub_1003AB554(v3);
    *(unsigned char *)uint64_t v1 = 0;
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 120) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 8));
}

void sub_1003DACB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003AB554((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1003DACC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000486C("RoseDebugManager: Resuming the crashlog timer", a2, a3, a4, a5, a6, a7, a8, v11);
  uint64_t v9 = *(NSObject **)(a1 + 16);
  dispatch_time_t v10 = dispatch_time(0, 5000000000);
  dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 16));
  *(unsigned char *)(a1 + 1) = 0;
}

void sub_1003DAD30(uint64_t a1, uint64_t a2, unint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a3 - 32;
  if (a3 - 32 < 0x31) {
    return;
  }
  uint64_t v11 = a2;
  uint64_t v12 = 32;
  while (1)
  {
    uint64_t v13 = v11 + v12;
    uint64_t v14 = *(unsigned int *)(v11 + v12 + 12);
    uint64_t v15 = *(unsigned int *)(v11 + v12);
    if (v14 <= 0xF)
    {
      sub_1003A9600("crashlog section is too small. Section signature: 0x%x version: 0x%x size: %d", a2, a3, (uint64_t)a4, a5, a6, a7, a8, v15);
      return;
    }
    if (v15 == 1130587248) {
      break;
    }
LABEL_7:
    v12 += v14;
    if (v12 + 16 >= v8) {
      return;
    }
  }
  if (*(_DWORD *)(v13 + 8) != 512)
  {
    sub_1003A9600("CoredumpRegions version mismatch. Expected: 0x%x Version in Crashlog: 0x%x", a2, a3, (uint64_t)a4, a5, a6, a7, a8, 512);
    LODWORD(v14) = *(_DWORD *)(v13 + 12);
    goto LABEL_7;
  }
  if (v12 + v14 <= a3)
  {
    if (v14 >= 0x24)
    {
      char v16 = (unint64_t *)(a4 + 2);
      uint64_t v17 = 16;
      uint64_t v18 = 36;
      while (1)
      {
        uint64_t v19 = (_OWORD *)(v13 + v17);
        long long v33 = *(_OWORD *)(v13 + v17);
        unsigned int v20 = *(_DWORD *)(v13 + v17 + 16);
        if (v20 > 0x200000)
        {
          sub_1003A9600("Coredump region size is too large: %d", a2, a3, (uint64_t)a4, a5, a6, a7, a8, *(unsigned int *)(v13 + v17 + 16));
          goto LABEL_37;
        }
        uint64_t v17 = v18;
        unint64_t v21 = (unint64_t)a4[1];
        uint64_t v22 = v21 - (void)*a4;
        if (v22 == 1280) {
          break;
        }
        if (v21 >= *v16)
        {
          uint64_t v24 = v22 / 20;
          unint64_t v25 = v22 / 20 + 1;
          if (v25 > 0xCCCCCCCCCCCCCCCLL) {
            sub_1000267C4();
          }
          if (0x999999999999999ALL * ((uint64_t)(*v16 - (void)*a4) >> 2) > v25) {
            unint64_t v25 = 0x999999999999999ALL * ((uint64_t)(*v16 - (void)*a4) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v16 - (void)*a4) >> 2) >= 0x666666666666666) {
            a2 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            a2 = v25;
          }
          if (a2) {
            uint64_t v26 = (char *)sub_1003DF324((uint64_t)(a4 + 2), a2);
          }
          else {
            uint64_t v26 = 0;
          }
          int v27 = &v26[20 * v24];
          *(_OWORD *)int v27 = v33;
          *((_DWORD *)v27 + 4) = v20;
          char v29 = *a4;
          uint64_t v28 = a4[1];
          long long v30 = v27;
          if (v28 != *a4)
          {
            do
            {
              long long v31 = *(_OWORD *)(v28 - 20);
              *((_DWORD *)v30 - 1) = *((_DWORD *)v28 - 1);
              *(_OWORD *)(v30 - 20) = v31;
              v30 -= 20;
              v28 -= 20;
            }
            while (v28 != v29);
            uint64_t v28 = *a4;
          }
          uint64_t v23 = v27 + 20;
          *a4 = v30;
          a4[1] = v27 + 20;
          a4[2] = &v26[20 * a2];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v21 = *v19;
          *(_DWORD *)(v21 + 16) = v20;
          uint64_t v23 = (char *)(v21 + 20);
        }
        a4[1] = v23;
        uint64_t v18 = v17 + 20;
        if (v17 + 20 > (unint64_t)*(unsigned int *)(v13 + 12)) {
          return;
        }
      }
      sub_1003A9600("There are more coredump regions than expected in the crashlog", a2, a3, (uint64_t)a4, a5, a6, a7, a8, v32);
LABEL_37:
      a4[1] = *a4;
    }
  }
  else
  {
    sub_1003A9600("Parsing error while extracting the coredump regions. crashlog size: %zu offset and section size: %lu", a2, a3, (uint64_t)a4, a5, a6, a7, a8, a3);
  }
}

void sub_1003DAFA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, std::string *__str, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a3 <= 0x1F)
  {
    sub_1003A9600("crashLogSize is too small", a2, a3, a4, (uint64_t)__str, a6, a7, a8, a9);
    return;
  }
  int v9 = a6;
  std::string::value_type v11 = a4;
  int v14 = *(unsigned __int8 *)(a2 + 12);
  if (a3 - 32 < 0x31)
  {
LABEL_12:
    std::string::value_type v19 = 0;
    std::string::value_type v20 = 0;
  }
  else
  {
    uint64_t v15 = 32;
    while (1)
    {
      uint64_t v16 = a2 + v15;
      uint64_t v17 = *(unsigned int *)(a2 + v15 + 12);
      uint64_t v18 = *(unsigned int *)(a2 + v15);
      if (v17 <= 0xF)
      {
        sub_1003A9600("crashlog section is too small. Section signature: 0x%x version: 0x%x size: %d", a2, a3, a4, (uint64_t)__str, a6, a7, a8, v18);
        goto LABEL_12;
      }
      if (v18 == 1131639922) {
        break;
      }
      v15 += v17;
      if (v15 + 16 >= a3 - 32) {
        goto LABEL_12;
      }
    }
    if (*(_DWORD *)(v16 + 8) == 257)
    {
      if (v15 + v17 <= a3)
      {
        sub_1002A4440(&__dst, (void *)(v16 + 20), (int)v17 - 20);
        if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str->__r_.__value_.__l.__data_);
        }
        *std::string __str = __dst;
        if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v31 = __str;
        }
        else {
          long long v31 = (std::string *)__str->__r_.__value_.__r.__words[0];
        }
        sub_10000486C("CrashString is: %s", v24, v25, v26, v27, v28, v29, v30, (uint64_t)v31);
      }
      else
      {
        sub_1003A9600("Parsing error while extracting the crash string reason. crashlog size: %zu offset and section size: %lu", a2, a3, a4, (uint64_t)__str, a6, a7, a8, a3);
      }
      std::string::value_type v19 = 1;
    }
    else
    {
      sub_1003A9600("Crash string section version mismatch. Expected: 0x%x Version in Crashlog: 0x%x", a2, a3, a4, (uint64_t)__str, a6, a7, a8, 257);
      std::string::value_type v19 = 0;
    }
    std::string::value_type v20 = 1;
  }
  unsigned int v21 = v14 - 1;
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v23 = *(void *)(a1 + 112);
    if (v23 && v9)
    {
      memset(&__dst, 0, sizeof(__dst));
      std::string::operator=(&__dst, __str);
      int v33 = *(_DWORD *)(a2 + 12);
      BOOL v34 = v21 < 0x3F;
      std::string::value_type v35 = v11;
      sub_1003DB204(a1 + 88, 0, (uint64_t)&__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      return;
    }
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 112);
  }
  if (v23 && v9)
  {
    __dst.__r_.__value_.__s.__data_[0] = v20;
    __dst.__r_.__value_.__s.__data_[1] = v19;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 12);
    __dst.__r_.__value_.__s.__data_[8] = v21 < 0x3F;
    __dst.__r_.__value_.__s.__data_[9] = v11;
    sub_1003DB204(a1 + 88, 1, (uint64_t)&__dst);
  }
}

void sub_1003DB1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DB204(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_1003DB260(uint64_t a1, const void **a2, uint64_t a3, void *a4, unsigned __int8 *a5, unsigned char *a6, unsigned char *a7)
{
  size_t v152 = 0;
  *(void *)uint64_t v153 = 0;
  sub_100004950(&v151, "");
  char v14 = 0;
  uint64_t v15 = 0;
  unsigned __int8 v16 = 0;
  char v132 = 0;
  char v17 = 1;
  do
  {
    v156[v15] = 1;
    v150[v15] = 0;
    char v139 = v17;
    std::string::value_type v138 = v14 & 1;
    uint64_t v18 = a3;
    uint64_t v19 = a3 + 30 * v15;
    unsigned int v20 = 1;
    while (sub_1003DBCC0(a1, v16, &v152, a6, v10, v11, v12, v13))
    {
      memset(v149, 0, 15);
      size_t v24 = v152;
      v154.__r_.__value_.__s.__data_[0] = 0;
      sub_1001B0664(v148, v152, &v154);
      char v27 = sub_1003AAAE0(*(void *)(a1 + 48), v16, (uint64_t)v149, (uint64_t)v148[0], (char *)v148[2] - (char *)v148[0], (uint64_t)v153, v25, v26);
      if (*(void *)v153 == v24) {
        char v35 = v27;
      }
      else {
        char v35 = 0;
      }
      if (v35)
      {
        if (BYTE4(v149[1]))
        {
          std::string::assign(&v151, "Corrupted");
          v154.__r_.__value_.__s.__data_[0] = v138;
          if (*(void *)(a1 + 112)) {
            sub_1003DB204(a1 + 88, 2, (uint64_t)&v154);
          }
        }
        else if (*((_DWORD *)v148[0] + 3) > 0x3Fu)
        {
          std::string::assign(&v151, "NonFatal");
        }
        else
        {
          std::string::assign(&v151, "Fatal");
          if (v18)
          {
            *(std::string::size_type *)((char *)v154.__r_.__value_.__r.__words + 7) = 0;
            v154.__r_.__value_.__r.__words[0] = 0;
            if (sub_1003AAB84(*(void *)(a1 + 48), v16, (uint64_t)&v154, v39, v40, v41, v42, v43))
            {
              if (*(void *)(v19 + 15) == v154.__r_.__value_.__r.__words[0])
              {
                sub_10000486C("Crashlog's log_id matches the coredump's log_id. Extracting the coredump regions.", v44, v45, v46, v47, v48, v49, v50, v128);
                sub_1003DAD30(v51, (uint64_t)v148[0], *(unint64_t *)v153, (char **)(*a4 + 24 * v15), v52, v53, v54, v55);
              }
              else
              {
                sub_1003A9600("The coredump log_id does not match with the crashlog log_id", v44, v45, v46, v47, v48, v49, v50, v128);
              }
            }
            else
            {
              sub_1003A9600("No coredump to be dequeued for core: %d", v44, v45, v46, v47, v48, v49, v50, v15);
            }
          }
          else
          {
            sub_1003A9600("No crashlog descriptor available.", v37, v38, v39, v40, v41, v42, v43, v128);
          }
          char v132 = 1;
        }
        if (v139)
        {
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v151.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v151.__r_.__value_.__l.__size_;
          }
          sub_100158FEC((uint64_t)&v154, size + 3);
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v64 = &v154;
          }
          else {
            uint64_t v64 = (std::string *)v154.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v65 = &v151;
            }
            else {
              uint64_t v65 = (std::string *)v151.__r_.__value_.__r.__words[0];
            }
            memmove(v64, v65, size);
          }
          *(_DWORD *)((char *)&v64->__r_.__value_.__l.__data_ + size) = 5259565;
        }
        else
        {
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v66 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v66 = v151.__r_.__value_.__l.__size_;
          }
          sub_100158FEC((uint64_t)&v154, v66 + 4);
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v67 = &v154;
          }
          else {
            std::string::size_type v67 = (std::string *)v154.__r_.__value_.__r.__words[0];
          }
          if (v66)
          {
            if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v68 = &v151;
            }
            else {
              uint64_t v68 = (std::string *)v151.__r_.__value_.__r.__words[0];
            }
            memmove(v67, v68, v66);
          }
          strcpy((char *)v67 + v66, "-DSP");
        }
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v151.__r_.__value_.__l.__data_);
        }
        std::string v151 = v154;
        uint64_t v69 = &v151;
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v69 = (std::string *)v154.__r_.__value_.__r.__words[0];
        }
        sub_10000486C("Received %s crash log", v57, v58, v59, v60, v61, v62, v63, (uint64_t)v69);
        memset(&__str, 0, sizeof(__str));
        int v72 = *(char *)(a1 + 47);
        if (v72 < 0)
        {
          if (*(void *)(a1 + 32) != 12) {
            goto LABEL_62;
          }
          uint64_t v73 = *(void *)(a1 + 24);
        }
        else
        {
          uint64_t v73 = a1 + 24;
          if (v72 != 12)
          {
LABEL_62:
            BOOL v77 = 0;
            goto LABEL_63;
          }
        }
        uint64_t v74 = *(void *)v73;
        int v75 = *(_DWORD *)(v73 + 8);
        BOOL v77 = v74 == 0x72656E6547205746 && v75 == 1684370529;
LABEL_63:
        if (BYTE4(v149[1])) {
          uint64_t v78 = 0;
        }
        else {
          uint64_t v78 = v77;
        }
        sub_1003DAFA0(a1, (uint64_t)v148[0], *(unint64_t *)v153, v16, &__str, v78, v70, v71, v129);
        if (*(unsigned char *)(a1 + 128))
        {
          std::operator+<char>();
          uint64_t v86 = std::string::append(&v143, "-");
          long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          unsigned int v88 = v20 + 1;
          v156[v15] = v20 + 1;
          std::to_string(&v142, v20);
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v89 = &v142;
          }
          else {
            uint64_t v89 = (std::string *)v142.__r_.__value_.__r.__words[0];
          }
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v90 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v90 = v142.__r_.__value_.__l.__size_;
          }
          uint64_t v91 = std::string::append(&v144, (const std::string::value_type *)v89, v90);
          long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
          v154.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v92;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          char v93 = std::string::append(&v154, ".bin");
          long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
          int64_t v146 = v93->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long __p = v94;
          v93->__r_.__value_.__l.__size_ = 0;
          v93->__r_.__value_.__r.__words[2] = 0;
          v93->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v154.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v142.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v144.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1001589F4(a2, (const void **)__p, (uint64_t)&v144);
          sub_1003DBD54((void (__cdecl ***)(std::ofstream *__hidden))&v154);
          if (v155)
          {
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            v143.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
            v140[0] = 0;
            uint64_t v141 = 0;
            sub_1003DF49C((uint64_t)v140, &v143.__r_.__value_.__l.__data_);
            sub_1003DEB54(v140);
            if (v146 >= 0) {
              uint64_t v103 = (char *)__p;
            }
            else {
              uint64_t v103 = (char *)__p[0];
            }
            uint64_t v104 = sub_1003DBF20(a5, v103);
            sub_1003DC0F0(v104, (uint64_t)v140);
            sub_1003DEAC4(v140);
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v105 = &v144;
            }
            else {
              uint64_t v105 = (std::string *)v144.__r_.__value_.__r.__words[0];
            }
            if (chmod((const char *)v105, 0x1B0u))
            {
              int v113 = SHIBYTE(v144.__r_.__value_.__r.__words[2]);
              std::string::size_type v114 = v144.__r_.__value_.__r.__words[0];
              __error();
              uint64_t v122 = &v144;
              if (v113 < 0) {
                uint64_t v122 = (std::string *)v114;
              }
              sub_1003A9600("Unable to chmod file '%s': %d", v115, v116, v117, v118, v119, v120, v121, (uint64_t)v122);
              *a7 = 1;
            }
            uint64_t v123 = &v151;
            if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v123 = (std::string *)v151.__r_.__value_.__r.__words[0];
            }
            sub_10000486C("Writing %s crash log to %s", v106, v107, v108, v109, v110, v111, v112, (uint64_t)v123);
            std::ostream::write();
          }
          else
          {
            uint64_t v124 = &v144;
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v124 = (std::string *)v144.__r_.__value_.__r.__words[0];
            }
            sub_1003A9600("Error trying to open file: %s", v95, v96, v97, v98, v99, v100, v101, (uint64_t)v124);
            *a7 = 1;
          }
          v154.__r_.__value_.__r.__words[0] = v136;
          *(std::string::size_type *)((char *)v154.__r_.__value_.__r.__words + *(void *)(v136 - 24)) = v135;
          std::filebuf::~filebuf();
          std::ostream::~ostream();
          std::ios::~ios();
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v144.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v146) < 0) {
            operator delete(__p[0]);
          }
          unsigned int v20 = v88;
          if (v18)
          {
LABEL_107:
            if (v149[0] == *(void *)v19)
            {
              v150[v15] = 1;
              if (LODWORD(v149[1]) != *(_DWORD *)(v19 + 8))
              {
                sub_1003A9600("Size of the dequeued crash log does not match the size in descriptor", v21, v22, v23, v10, v11, v12, v13, v128);
                *a6 = 1;
              }
              if (BYTE5(v149[1]) != *(unsigned __int8 *)(v19 + 13))
              {
                sub_1003A9600("core type of the dequeued crash log does not match the core type in descriptor", v21, v22, v23, v10, v11, v12, v13, v128);
                *a6 = 1;
              }
              if (BYTE6(v149[1]) != *(unsigned __int8 *)(v19 + 14))
              {
                sub_1003A9600("log type of the dequeued crash log does not match the log type in descriptor", v21, v22, v23, v10, v11, v12, v13, v128);
                *a6 = 1;
              }
              if (BYTE4(v149[1]) != *(unsigned __int8 *)(v19 + 12))
              {
                sub_1003A9600("is_corrupted flag of the dequeued crash log does not match the flag in descriptor", v21, v22, v23, v10, v11, v12, v13, v128);
                *a6 = 1;
              }
              int v36 = 6;
              goto LABEL_118;
            }
          }
        }
        else
        {
          sub_10000486C("Crash log saving is disabled", v79, v80, v81, v82, v83, v84, v85, v130);
          if (v18) {
            goto LABEL_107;
          }
        }
        int v36 = 0;
LABEL_118:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_120;
      }
      sub_1003A9600("DequeueCrashLog for core: %d failed. Buffer Size: %zu, received Size: %zu", v28, v29, v30, v31, v32, v33, v34, v15);
      *a6 = 1;
      int v36 = 6;
LABEL_120:
      if (v148[0])
      {
        v148[1] = v148[0];
        operator delete(v148[0]);
      }
      if (v36) {
        break;
      }
    }
    char v17 = 0;
    ++v16;
    char v14 = 1;
    uint64_t v15 = 1;
    a3 = v18;
  }
  while ((v139 & 1) != 0);
  if (v18)
  {
    if (*(_DWORD *)(v18 + 8) && !v150[0])
    {
      sub_1003A9600("No AP crashlog available with ID that matches the descriptor", v21, v22, v23, v10, v11, v12, v13, v128);
      *a6 = 1;
    }
    if (*(_DWORD *)(v18 + 38) && !v150[1])
    {
      sub_1003A9600("No DSP crashlog available with ID that matches the descriptor", v21, v22, v23, v10, v11, v12, v13, v128);
      *a6 = 1;
    }
  }
  if (v132) {
    uint64_t v125 = 2;
  }
  else {
    uint64_t v125 = v156[0] > 1u || v156[1] > 1u;
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  return v125;
}

void sub_1003DBB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003DBCC0(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v20 = 0;
  int v10 = sub_1003AAAE0(*(void *)(a1 + 48), a2, 0, 0, 0, (uint64_t)&v20, a7, a8);
  if (v10) {
    BOOL v18 = v20 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    if (v10) {
      return 0;
    }
    goto LABEL_10;
  }
  if (v20 > 0x200000)
  {
    sub_1003A9600("Unexpectedly large crashlog of size:%zu is available", v11, v12, v13, v14, v15, v16, v17, v20);
LABEL_10:
    uint64_t result = 0;
    *a4 = 1;
    return result;
  }
  *a3 = v20;
  return 1;
}

void (__cdecl ***sub_1003DBD54(void (__cdecl ***a1)(std::ofstream *__hidden this)))(std::ofstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  int v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 1);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_1003DBEE8(_Unwind_Exception *a1)
{
}

uint64_t sub_1003DBF20(unsigned __int8 *a1, char *__s)
{
  int v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    uint64_t v5 = operator new(0x18uLL);
    void v5[2] = 0;
    v5[1] = 0;
    *uint64_t v5 = v5 + 1;
    *((void *)a1 + 1) = v5;
    sub_1003DEB54(a1);
    int v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003DF36C((char *)a1, &v12);
    int v10 = std::string::insert(&v12, 0, "cannot use operator[] with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &__p);
  }
  int v6 = (uint64_t **)*((void *)a1 + 1);
  sub_100004950(&__p, __s);
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v7 = sub_1003DF39C(v6, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1004BC2F8, &v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return (uint64_t)v7 + 56;
}

void sub_1003DC078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1003DC0F0(uint64_t a1, uint64_t a2)
{
  sub_1003DEB54((unsigned __int8 *)a2);
  unsigned __int8 v4 = *(unsigned char *)a1;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)a2 = v4;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  sub_1003DEB54((unsigned __int8 *)a1);
  return a1;
}

void sub_1003DC14C(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = -51 * ((uint64_t)(a2[1] - *a2) >> 2);
  long long v33 = xmmword_1004C6690;
  uint64_t v4 = v3;
  uint64_t v5 = v3;
  unint64_t v6 = (unint64_t)v3 << 6;
  int v7 = 56 * v3;
  int v34 = v3 + 1;
  int v35 = v7 + 84;
  int v36 = 0;
  uint64_t v32 = 0x5400000004;
  uint64_t v31 = 0x1100000001;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int v30 = 0;
  sub_1003DF584(&__p, v3);
  uint64_t v15 = __p;
  if (v25 - (unsigned char *)__p >= 1)
  {
    unint64_t v16 = (v25 - (unsigned char *)__p) / 0x38uLL + 1;
    do
    {
      v15[6] = 0;
      *((_OWORD *)v15 + 1) = 0uLL;
      *((_OWORD *)v15 + 2) = 0uLL;
      *(_OWORD *)uint64_t v15 = 0uLL;
      v15 += 7;
      --v16;
    }
    while (v16 > 1);
  }
  sub_10000486C("Number of coredump sections available for AP is: %d", v8, v9, v10, v11, v12, v13, v14, v4);
  if (v4)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = v7 + 112;
    unint64_t v20 = (char *)__p;
    do
    {
      uint64_t v21 = &v20[v18];
      *(void *)uint64_t v21 = 0x3800000001;
      v21[8] = 95;
      *((unsigned char *)__p + v18 + 9) = 95;
      *((unsigned char *)__p + v18 + 10) = 84;
      *((unsigned char *)__p + v18 + 11) = 69;
      *((unsigned char *)__p + v18 + 12) = 88;
      *((unsigned char *)__p + v18 + 13) = 84;
      uint64_t v22 = *a2 + v17;
      unint64_t v20 = (char *)__p;
      uint64_t v23 = (char *)__p + v18;
      v23[6] = *(void *)v22;
      LODWORD(v22) = *(_DWORD *)(v22 + 16);
      v23[7] = v22;
      v23[8] = v19;
      v23[9] = v22;
      v19 += v22;
      v18 += 56;
      v17 += 20;
    }
    while (v6 - 8 * v5 != v18);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  if (__p)
  {
    uint64_t v25 = __p;
    operator delete(__p);
  }
}

void sub_1003DC368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003DC388(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t)(a2[1] - *a2) >> 2;
  int v46 = 0;
  long long v43 = xmmword_1004C66A0;
  unint64_t v4 = (-51 * v3);
  int v44 = v4 + 1;
  uint64_t v45 = (72 * v4 + 288);
  uint64_t v42 = 0x12000000004;
  uint64_t v41 = 0x4400000001;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  sub_1003DF628(&__p, v4);
  uint64_t v12 = __p;
  if (v23 - (unsigned char *)__p >= 1)
  {
    unint64_t v13 = (v23 - (unsigned char *)__p) / 0x48uLL + 1;
    do
    {
      v12[8] = 0;
      *((_OWORD *)v12 + 2) = 0uLL;
      *((_OWORD *)v12 + 3) = 0uLL;
      *(_OWORD *)uint64_t v12 = 0uLL;
      *((_OWORD *)v12 + 1) = 0uLL;
      v12 += 9;
      --v13;
    }
    while (v13 > 1);
  }
  sub_10000486C("Number of coredump sections available for DSP is: %d", v5, v6, v7, v8, v9, v10, v11, v4);
  if (v4)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unsigned int v16 = 72 * v4 + 320;
    uint64_t v17 = (char *)__p;
    do
    {
      uint64_t v18 = &v17[v15];
      *(void *)uint64_t v18 = 0x4800000019;
      v18[8] = 95;
      *((unsigned char *)__p + v15 + 9) = 95;
      *((unsigned char *)__p + v15 + 10) = 84;
      *((unsigned char *)__p + v15 + 11) = 69;
      *((unsigned char *)__p + v15 + 12) = 88;
      *((unsigned char *)__p + v15 + 13) = 84;
      uint64_t v19 = *a2 + v14;
      uint64_t v17 = (char *)__p;
      unint64_t v20 = (char *)__p + v15;
      void v20[3] = *(void *)v19;
      uint64_t v21 = *(unsigned int *)(v19 + 16);
      v20[4] = v21;
      v20[5] = v16;
      v20[6] = v21;
      v16 += v21;
      v15 += 72;
      v14 += 20;
    }
    while (72 * v4 != v15);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
}

void sub_1003DC5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DC5F0(uint64_t a1, const void **a2, void *a3, unsigned __int8 *a4, unsigned char *a5, unsigned char *a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 128))
  {
    sub_10000486C("Core dump saving is disabled", (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v94);
    char v91 = 1;
    return v91 & 1;
  }
  v112.__r_.__value_.__s.__data_[0] = 0;
  sub_1001B0664(v110, 0x1000uLL, &v112);
  sub_100004950(&v109, "");
  uint64_t v16 = 0;
  unsigned __int8 v17 = 0;
  char v18 = 1;
  char v95 = 1;
  while (1)
  {
    char v19 = v18;
    *(void *)((char *)v108 + 7) = 0;
    v108[0] = 0;
    if (!sub_1003AAB84(*(void *)(a1 + 48), v17, (uint64_t)v108, v11, v12, v13, v14, v15))
    {
      long long v92 = "Unable to get the coredump info for core: %d";
      uint64_t v27 = v16;
LABEL_88:
      sub_1003A9600(v92, v20, v21, v22, v23, v24, v25, v26, v27);
      goto LABEL_89;
    }
    uint64_t v27 = LODWORD(v108[1]);
    if (LODWORD(v108[1])) {
      break;
    }
    sub_10000486C("No coredumps to read for core: %d", v20, v21, v22, v23, v24, v25, v26, v16);
LABEL_81:
    char v18 = 0;
    ++v17;
    uint64_t v16 = 1;
    if ((v19 & 1) == 0) {
      goto LABEL_90;
    }
  }
  if (LODWORD(v108[1]) > 0x200000)
  {
    long long v92 = "Coredump size is unexpectedly large: %d";
    goto LABEL_88;
  }
  if (v16 != BYTE5(v108[1]))
  {
    sub_1003A9600("Descriptor core: %d doesn't match the requested core: %d", v20, v21, v22, v23, v24, v25, v26, BYTE5(v108[1]));
LABEL_89:
    char v95 = 0;
    *a5 = 1;
    goto LABEL_90;
  }
  uint64_t v27 = BYTE6(v108[1]);
  if (BYTE6(v108[1]) != 1)
  {
    long long v92 = "Invalid log type: %d in the coredump descriptor";
    goto LABEL_88;
  }
  if (v19) {
    long long v28 = "AP";
  }
  else {
    long long v28 = "DSP";
  }
  std::string::assign(&v109, v28);
  if (BYTE4(v108[1]))
  {
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v109.__r_.__value_.__l.__size_;
    }
    sub_100158FEC((uint64_t)&v112, size + 10);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v37 = &v112;
    }
    else {
      long long v37 = (std::string *)v112.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v38 = &v109;
      }
      else {
        long long v38 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      memmove(v37, v38, size);
    }
    strcpy((char *)v37 + size, "-Corrupted");
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    std::string v109 = v112;
  }
  if (*(void *)(*a3 + 24 * v16) == *(void *)(*a3 + 24 * v16 + 8))
  {
    sub_1003A9600("No coredump regions available for core %d. Saving the raw coredump.", v29, v30, v31, v32, v33, v34, v35, v16);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v39 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v39 = v109.__r_.__value_.__l.__size_;
    }
    sub_100158FEC((uint64_t)&v112, v39 + 4);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v40 = &v112;
    }
    else {
      long long v40 = (std::string *)v112.__r_.__value_.__r.__words[0];
    }
    if (v39)
    {
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v41 = &v109;
      }
      else {
        uint64_t v41 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      memmove(v40, v41, v39);
    }
    strcpy((char *)v40 + v39, "-Raw");
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    std::string v109 = v112;
    *a5 = 1;
  }
  uint64_t v42 = &v109;
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v42 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  sub_10000486C("Received %s coredump", v29, v30, v31, v32, v33, v34, v35, (uint64_t)v42);
  std::operator+<char>();
  long long v43 = std::string::append(&v112, ".bin");
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  int64_t v107 = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v106 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  sub_1001589F4(a2, (const void **)v106, (uint64_t)__p);
  sub_1003DBD54((void (__cdecl ***)(std::ofstream *__hidden))&v112);
  uint64_t v52 = v113;
  if (v105 >= 0) {
    uint64_t v53 = __p;
  }
  else {
    uint64_t v53 = (void **)__p[0];
  }
  if (!v113)
  {
    sub_1003A9600("Error trying to open file: %s", v45, v46, v47, v48, v49, v50, v51, (uint64_t)v53);
    uint64_t v74 = a6;
    goto LABEL_75;
  }
  if (chmod((const char *)v53, 0x1B0u))
  {
    int v61 = v105;
    uint64_t v62 = (void **)__p[0];
    __error();
    uint64_t v70 = __p;
    if (v61 < 0) {
      uint64_t v70 = v62;
    }
    sub_1003A9600("Unable to chmod file '%s': %d", v63, v64, v65, v66, v67, v68, v69, (uint64_t)v70);
    *a6 = 1;
  }
  uint64_t v71 = v106;
  if (v107 < 0) {
    uint64_t v71 = (void **)v106[0];
  }
  sub_10000486C("Writing coredump to %s", v54, v55, v56, v57, v58, v59, v60, (uint64_t)v71);
  uint64_t v73 = (void *)*a3;
  if (v19)
  {
    if (*v73 != v73[1]) {
      sub_1003DC14C(v72, v73);
    }
  }
  else
  {
    int v75 = &v73[3 * v16];
    if (*v75 != v75[1]) {
      sub_1003DC388(v72, v75);
    }
  }
  v102[0] = 0;
  uint64_t v103 = 0;
  sub_1003DF724((uint64_t)v102, "");
  sub_1003DEB54(v102);
  if (v107 >= 0) {
    uint64_t v76 = (char *)v106;
  }
  else {
    uint64_t v76 = (char *)v106[0];
  }
  uint64_t v77 = sub_1003DBF20(a4, v76);
  sub_1003DC0F0(v77, (uint64_t)v102);
  sub_1003DEAC4(v102);
  if (LODWORD(v108[1]))
  {
    unsigned int v80 = 0;
    while (1)
    {
      unint64_t v101 = 0;
      int v81 = sub_1003AAC0C(*(void *)(a1 + 48), v17, v80, v111 - (unint64_t)v110[0], (uint64_t)v110[0], (uint64_t)&v101, v78, v79);
      int v89 = v101;
      int v90 = v101 ? v81 : 0;
      if (v90 != 1) {
        break;
      }
      uint64_t v82 = v110[0];
      if (v101 > v111 - (unint64_t)v110[0]) {
        break;
      }
      std::ostream::write();
      v80 += v89;
      if (v80 >= LODWORD(v108[1])) {
        goto LABEL_76;
      }
    }
    sub_1003A9600("reading coredump failed. received size is: %zu", (uint64_t)v82, v83, v84, v85, v86, v87, v88, v101);
    char v95 = 0;
    uint64_t v74 = a5;
LABEL_75:
    *uint64_t v74 = 1;
  }
LABEL_76:
  v112.__r_.__value_.__r.__words[0] = v100;
  *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + *(void *)(v100 - 24)) = v99;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (v105 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v107) < 0) {
    operator delete(v106[0]);
  }
  if (v52) {
    goto LABEL_81;
  }
  char v95 = 0;
LABEL_90:
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  char v91 = v95;
  if (v110[0])
  {
    v110[1] = v110[0];
    operator delete(v110[0]);
  }
  return v91 & 1;
}

void sub_1003DCC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a44) {
    operator delete(a44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DCD2C(uint64_t a1, const void **a2, unsigned __int8 *a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 129))
  {
    uint64_t v9 = (unsigned char *)a4;
    unint64_t v77 = 0;
    sub_100004950(v75, "RoseFirmwareLogs.bin");
    sub_1001589F4(a2, (const void **)v75, (uint64_t)v73);
    sub_1003DBD54(v78);
    char v70 = 0;
    sub_1001B0664(__p, 0x1000uLL, &v70);
    if (v74 >= 0) {
      uint64_t v20 = v73;
    }
    else {
      uint64_t v20 = (void **)v73[0];
    }
    if (v78[16])
    {
      if (chmod((const char *)v20, 0x1B0u))
      {
        int v28 = v74;
        uint64_t v29 = (void **)v73[0];
        __error();
        long long v37 = v73;
        if (v28 < 0) {
          long long v37 = v29;
        }
        sub_1003A9600("Unable to chmod file '%s': %d", v30, v31, v32, v33, v34, v35, v36, (uint64_t)v37);
        *a5 = 1;
      }
      long long v38 = v75;
      if (v76 < 0) {
        long long v38 = (void **)v75[0];
      }
      sub_10000486C("Writing firmware logs to %s", v21, v22, v23, v24, v25, v26, v27, (uint64_t)v38);
      v68[0] = 0;
      uint64_t v69 = 0;
      sub_1003DF724((uint64_t)v68, "");
      sub_1003DEB54(v68);
      if (v76 >= 0) {
        size_t v39 = (char *)v75;
      }
      else {
        size_t v39 = (char *)v75[0];
      }
      uint64_t v40 = sub_1003DBF20(a3, v39);
      sub_1003DC0F0(v40, (uint64_t)v68);
      sub_1003DEAC4(v68);
      if (sub_1003AAC78(*(void *)(a1 + 48), v41, v42, v43, v44, v45, v46, v47))
      {
        while (1)
        {
          int v55 = sub_1003AAD30(*(void *)(a1 + 48), (uint64_t)__p[0], v72 - (unint64_t)__p[0], (uint64_t)&v77, v51, v52, v53, v54);
          int v62 = v77 ? v55 : 0;
          if (v62 != 1) {
            break;
          }
          if (v77 > v72 - (unint64_t)__p[0])
          {
            sub_1003A9600("dequeued more data (%zu) than the buffer capacity.", (uint64_t)__p[0], v77, v57, v58, v59, v60, v61, v77);
            std::ostream::write();
            goto LABEL_30;
          }
          std::ostream::write();
        }
        if (!v55) {
          goto LABEL_30;
        }
        if (sub_1003AACD4(*(void *)(a1 + 48), v56, v77, v57, v58, v59, v60, v61))
        {
          uint64_t v63 = 1;
          goto LABEL_31;
        }
        uint64_t v64 = "Error while resuming the firmware logs";
      }
      else
      {
        uint64_t v64 = "Error while pausing the firmware logs";
      }
      sub_1003A9600(v64, v48, v49, v50, v51, v52, v53, v54, v67);
    }
    else
    {
      sub_1003A9600("Error trying to open file: %s", v13, v14, v15, v16, v17, v18, v19, (uint64_t)v20);
      uint64_t v9 = a5;
    }
LABEL_30:
    uint64_t v63 = 0;
    *uint64_t v9 = 1;
LABEL_31:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    std::filebuf::~filebuf();
    std::ostream::~ostream();
    std::ios::~ios();
    if (v74 < 0) {
      operator delete(v73[0]);
    }
    if (v76 < 0) {
      operator delete(v75[0]);
    }
  }
  else
  {
    sub_10000486C("Firmware logs are disabled", (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, v66);
    return 1;
  }
  return v63;
}

void sub_1003DD08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100164F4C(&a31);
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003DD104(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(void *)(a3 + 8))
    {
LABEL_9:
      sub_1003A9600("reason can't be empty", a2, a3, a4, a5, a6, a7, a8, v56);
      return 4;
    }
    uint64_t v11 = *(void *)a3;
  }
  else
  {
    uint64_t v11 = a3;
    if (!*(unsigned char *)(a3 + 23)) {
      goto LABEL_9;
    }
  }
  sub_10000486C("Request to dump logs for reason: %s", a2, a3, a4, a5, a6, a7, a8, v11);
  uint64_t v12 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (!*(unsigned char *)a1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    return 5;
  }
  int v20 = *(_DWORD *)(a1 + 4);
  if (v20 != 1)
  {
    if (v9 && v20 == 2)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      return 2;
    }
    if (!v9 && v20 == 2)
    {
      sub_10000486C("Promoting crashlog trigger from NonFatal to Fatal. Cancel the existing timer.", v13, v14, v15, v16, v17, v18, v19, v57);
      sub_10000486C("RoseDebugManager: Suspending the crashlog timer", v22, v23, v24, v25, v26, v27, v28, v58);
      dispatch_suspend(*(dispatch_object_t *)(a1 + 16));
      int v29 = 1;
      *(unsigned char *)(a1 + 1) = 1;
      std::string::operator=((std::string *)(a1 + 24), (const std::string *)a3);
LABEL_29:
      sub_1003D8BE8(a1, v29);
      if (!sub_1003AAFC0(*(void *)(a1 + 48), v9 == 0, v35, v36, v37, v38, v39, v40))
      {
        sub_1003A9600("Triggering crashlog failed", v41, v42, v43, v44, v45, v46, v47, v57);
        sub_100004950(v59, "Triggering crashlog failed");
        sub_1003D91FC((unsigned char *)a1, a3, 0, (std::string::size_type)v59);
        if (v60 < 0) {
          operator delete(v59[0]);
        }
        sub_1003D8BE8(a1, 0);
        uint64_t v21 = 1;
        goto LABEL_35;
      }
      sub_10000486C("Successfully triggered a crashlog. Start timer.", v41, v42, v43, v44, v45, v46, v47, v57);
      sub_1003DACC8(a1, v48, v49, v50, v51, v52, v53, v54);
LABEL_31:
      uint64_t v21 = 0;
LABEL_35:
      os_unfair_lock_unlock(v12);
      return v21;
    }
    if (v9 == 2)
    {
      if ((sub_1003DBCC0(a1, 0, &v64, &v63, v16, v17, v18, v19) & 1) == 0
        && !sub_1003DBCC0(a1, 1, &v64, &v63, v31, v32, v33, v34))
      {
        goto LABEL_31;
      }
      sub_100004950(__p, "");
      sub_1003D91FC((unsigned char *)a1, a3, 0, (std::string::size_type)__p);
      if ((v62 & 0x80000000) == 0) {
        goto LABEL_31;
      }
      uint64_t v30 = __p[0];
    }
    else
    {
      if (v9 != 3)
      {
        std::string::operator=((std::string *)(a1 + 24), (const std::string *)a3);
        if (v9) {
          int v29 = 2;
        }
        else {
          int v29 = 1;
        }
        goto LABEL_29;
      }
      sub_100004950(v65, "");
      sub_1003D91FC((unsigned char *)a1, a3, 0, (std::string::size_type)v65);
      if ((v66 & 0x80000000) == 0) {
        goto LABEL_31;
      }
      uint64_t v30 = (void *)v65[0];
    }
    operator delete(v30);
    goto LABEL_31;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  return 3;
}

void sub_1003DD388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uintmax_t sub_1003DD3CC(char *a1)
{
  sub_10019C9FC(&v8.__pn_, a1);
  std::__fs::filesystem::__status(&v8, 0);
  if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  }
  if (__p.__pn_.__r_.__value_.__s.__data_[0] == 2)
  {
    sub_10019C9FC(&__p.__pn_, a1);
    std::__fs::filesystem::recursive_directory_iterator::recursive_directory_iterator((std::__fs::filesystem::recursive_directory_iterator *)&v8, &__p, skip_permission_denied, 0);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    }
    long long v2 = *(_OWORD *)&v8.__pn_.__r_.__value_.__l.__data_;
    if (v8.__pn_.__r_.__value_.__l.__size_)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8.__pn_.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      size_t size = (std::__shared_weak_count *)v8.__pn_.__r_.__value_.__l.__size_;
      *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = v2;
      __p.__pn_.__r_.__value_.__s.__data_[16] = v8.__pn_.__r_.__value_.__s.__data_[16];
      if (v8.__pn_.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8.__pn_.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        sub_10001A970(size);
      }
    }
    else
    {
      *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = v8.__pn_.__r_.__value_.__r.__words[0];
      __p.__pn_.__r_.__value_.__s.__data_[16] = v8.__pn_.__r_.__value_.__s.__data_[16];
    }
    uintmax_t v4 = 0;
    while (__p.__pn_.__r_.__value_.__r.__words[0])
    {
      uint64_t v5 = std::__fs::filesystem::recursive_directory_iterator::__dereference((const std::__fs::filesystem::recursive_directory_iterator *)&__p);
      std::__fs::filesystem::__status(&v5->__p_, 0);
      if (v9 != 2) {
        v4 += std::__fs::filesystem::__file_size(&v5->__p_, 0);
      }
      std::__fs::filesystem::recursive_directory_iterator::__increment((std::__fs::filesystem::recursive_directory_iterator *)&__p, 0);
    }
    if (__p.__pn_.__r_.__value_.__l.__size_) {
      sub_10001A970((std::__shared_weak_count *)__p.__pn_.__r_.__value_.__l.__size_);
    }
    if (v8.__pn_.__r_.__value_.__l.__size_) {
      sub_10001A970((std::__shared_weak_count *)v8.__pn_.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    sub_10019C9FC(&v8.__pn_, a1);
    uintmax_t v4 = std::__fs::filesystem::__file_size(&v8, 0);
    if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__pn_.__r_.__value_.__l.__data_);
    }
  }
  return v4;
}

void sub_1003DD54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DD5A4(char *a1)
{
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  uintmax_t v2 = sub_1003DD3CC(a1);
  if ((v2 + 0x200000) >> 26)
  {
    uintmax_t v11 = v2;
    v73[0] = off_100864898;
    v73[3] = v73;
    char v70 = 0;
    uint64_t v71 = 0;
    sub_1003DF960((uint64_t)v72, (uint64_t)v73);
    uint64_t v69 = &v70;
    sub_10019C9FC(&__dst.__pn_, a1);
    std::__fs::filesystem::directory_iterator::directory_iterator(&v67, &__dst, 0, none);
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    }
    ptr = v67.__imp_.__ptr_;
    cntrl = v67.__imp_.__cntrl_;
    if (v67.__imp_.__cntrl_)
    {
      atomic_fetch_add_explicit(&v67.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v21 = v67.__imp_.__cntrl_;
      v66.__imp_.__ptr_ = ptr;
      v66.__imp_.__cntrl_ = cntrl;
      if (v67.__imp_.__cntrl_)
      {
        atomic_fetch_add_explicit(&v67.__imp_.__cntrl_->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10001A970(v21);
      }
    }
    else
    {
      v66.__imp_.__ptr_ = v67.__imp_.__ptr_;
      v66.__imp_.__cntrl_ = 0;
    }
    while (v66.__imp_.__ptr_)
    {
      uint64_t v22 = std::__fs::filesystem::directory_iterator::__dereference(&v66);
      v23.__d_.__rep_ = std::__fs::filesystem::__last_write_time(&v22->__p_, &__ec).__d_.__rep_;
      if (__ec.__val_)
      {
        std::error_code::message(&__dst.__pn_, &__ec);
        if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
        }
        sub_1003A9600("Error: %s while getting the last write time of %s", v45, v46, v47, v48, v49, v50, v51, (uint64_t)p_dst);
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
        }
        if (v66.__imp_.__cntrl_) {
          sub_10001A970(v66.__imp_.__cntrl_);
        }
        if (v67.__imp_.__cntrl_) {
          sub_10001A970(v67.__imp_.__cntrl_);
        }
        goto LABEL_53;
      }
      if (SHIBYTE(v22->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        sub_100002DE4(&__dst, v22->__p_.__pn_.__r_.__value_.__l.__data_, v22->__p_.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::__fs::filesystem::path __dst = v22->__p_;
      }
      std::chrono::duration<__int128, std::ratio<1, 1000000000>>::rep rep = v23.__d_.__rep_;
      sub_1003DF9F8((uint64_t **)&v69, (long long *)&__dst, (uint64_t)&__dst);
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      }
      std::__fs::filesystem::directory_iterator::__increment(&v66, 0);
    }
    if (v66.__imp_.__cntrl_) {
      sub_10001A970(v66.__imp_.__cntrl_);
    }
    if (v67.__imp_.__cntrl_) {
      sub_10001A970(v67.__imp_.__cntrl_);
    }
    if (v71)
    {
      uint64_t v24 = (uint64_t *)v69;
      if (v69 == &v70)
      {
LABEL_37:
        uint64_t v10 = 1;
        goto LABEL_54;
      }
      while (1)
      {
        uintmax_t v32 = sub_1003DD3CC((char *)v24 + 32);
        uint64_t v33 = (uint64_t)(v24 + 4);
        if (*((char *)v24 + 55) < 0) {
          uint64_t v33 = v24[4];
        }
        sub_10000486C("removing directory: %s of size: %ju", v25, v26, v27, v28, v29, v30, v31, v33);
        sub_10019C9FC(&__dst.__pn_, (char *)v24 + 32);
        std::__fs::filesystem::__remove_all(&__dst, &__ec);
        if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
        }
        if (__ec.__val_) {
          break;
        }
        BOOL v41 = v11 >= v32;
        v11 -= v32;
        if (!v41)
        {
          sub_1003A9600("Error while deleting the oldest directory", v34, v35, v36, v37, v38, v39, v40, v63);
          goto LABEL_53;
        }
        if ((v11 + 0x200000) >> 26)
        {
          uint64_t v42 = (char *)v24[1];
          if (v42)
          {
            do
            {
              uint64_t v43 = (char **)v42;
              uint64_t v42 = *(char **)v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              uint64_t v43 = (char **)v24[2];
              BOOL v44 = *v43 == (char *)v24;
              uint64_t v24 = (uint64_t *)v43;
            }
            while (!v44);
          }
          uint64_t v24 = (uint64_t *)v43;
          if (v43 != &v70) {
            continue;
          }
        }
        goto LABEL_37;
      }
      std::error_code::message(&__dst.__pn_, &__ec);
      if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v60 = &__dst;
      }
      else {
        char v60 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
      }
      sub_1003A9600("Error: %s while deleting the directory: %s", v53, v54, v55, v56, v57, v58, v59, (uint64_t)v60);
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      sub_1003A9600("Unable to iterate through the directory", v12, v13, v14, v15, v16, v17, v18, v62);
    }
LABEL_53:
    uint64_t v10 = 0;
LABEL_54:
    sub_10019C998((uint64_t)&v69, v70);
    sub_1003DF8DC(v72);
    sub_1003DF8DC(v73);
  }
  else
  {
    sub_10000486C("Rose logging directory usage is below the maximum threshold", v3, v4, v5, v6, v7, v8, v9, v62);
    return 1;
  }
  return v10;
}

void sub_1003DD964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_1003DDA14((uint64_t)&a26);
  sub_1003DF8DC((void *)(v26 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_1003DDA14(uint64_t a1)
{
  return a1;
}

unsigned __int8 *sub_1003DDA48(unsigned __int8 *a1)
{
  *a1 = 0;
  sub_1003DEB54(a1);
  sub_1003DEB54(a1);
  return a1;
}

uint64_t sub_1003DDA80(uint64_t a1, int a2)
{
  sub_100054E28((uint64_t)v6);
  sub_1003DDCA8(a1, v7, a2 >= 0, a2 & ~(a2 >> 31), 0);
  std::stringbuf::str();
  *(void *)((char *)v6
  v7[0] = v4;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1003DDC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100055100((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1003DDC18@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100864918[a1]);
}

std::runtime_error *sub_1003DDC2C(std::runtime_error *a1, uint64_t a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  result[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  result[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  result[2].__imp_.__imp_ = (const char *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1003DDCA8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(*(unsigned char *)a1)
  {
    case 0:
      uint64_t v10 = "null";
      uintmax_t v11 = a2;
      uint64_t v12 = 4;
      goto LABEL_113;
    case 1:
      if (!*(void *)(*(void *)(a1 + 8) + 16))
      {
        uint64_t v10 = "{}";
        goto LABEL_112;
      }
      sub_100056628(a2, (uint64_t)"{", 1);
      if (a3)
      {
        a5 = (a5 + a4);
        sub_100056628(a2, (uint64_t)"\n", 1);
      }
      uint64_t v13 = *(void **)(a1 + 8);
      uint64_t v14 = (void *)*v13;
      if ((void *)*v13 != v13 + 1)
      {
        if (a3) {
          uint64_t v15 = ",\n";
        }
        else {
          uint64_t v15 = ",";
        }
        uint64_t v16 = 1;
        if (a3) {
          uint64_t v16 = 2;
        }
        uint64_t v55 = v16;
        uint64_t v56 = (uint64_t)v15;
        if (a3) {
          uint64_t v17 = " ";
        }
        else {
          uint64_t v17 = "";
        }
        do
        {
          if (v14 != (void *)*v13) {
            sub_100056628(a2, v56, v55);
          }
          sub_100056954(__b, a5, 32);
          if ((SBYTE7(v59) & 0x80u) == 0) {
            uint64_t v18 = __b;
          }
          else {
            uint64_t v18 = (void **)__b[0];
          }
          if ((SBYTE7(v59) & 0x80u) == 0) {
            uint64_t v19 = BYTE7(v59);
          }
          else {
            uint64_t v19 = (uint64_t)__b[1];
          }
          int v20 = sub_100056628(a2, (uint64_t)v18, v19);
          uint64_t v21 = sub_100056628(v20, (uint64_t)"\"", 1);
          sub_1003DE3F8((uint64_t)(v14 + 4), (uint64_t *)&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          uint64_t v24 = sub_100056628(v21, (uint64_t)p_p, size);
          uint64_t v25 = sub_100056628(v24, (uint64_t)"\":", 2);
          sub_100056628(v25, (uint64_t)v17, a3);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SBYTE7(v59) < 0) {
            operator delete(__b[0]);
          }
          sub_1003DDCA8(v14 + 7, a2, a3, a4, a5);
          uint64_t v26 = (void *)v14[1];
          if (v26)
          {
            do
            {
              uint64_t v27 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v27 = (void *)v14[2];
              BOOL v28 = *v27 == (void)v14;
              uint64_t v14 = v27;
            }
            while (!v28);
          }
          uint64_t v13 = *(void **)(a1 + 8);
          uint64_t v14 = v27;
        }
        while (v27 != v13 + 1);
      }
      if (a3)
      {
        sub_100056628(a2, (uint64_t)"\n", 1);
        LODWORD(a5) = a5 - a4;
      }
      sub_100056954(&__p, a5, 32);
      uint64_t v29 = std::string::append(&__p, "}");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      *(void *)&long long v59 = *((void *)&v29->__r_.__value_.__l + 2);
      *(_OWORD *)__b = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v59) & 0x80u) == 0) {
        uint64_t v31 = __b;
      }
      else {
        uint64_t v31 = (void **)__b[0];
      }
      if ((SBYTE7(v59) & 0x80u) == 0) {
        uint64_t v32 = BYTE7(v59);
      }
      else {
        uint64_t v32 = (uint64_t)__b[1];
      }
      sub_100056628(a2, (uint64_t)v31, v32);
      if (SBYTE7(v59) < 0) {
        operator delete(__b[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v33 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_97;
      }
      break;
    case 2:
      if (**(void **)(a1 + 8) == *(void *)(*(void *)(a1 + 8) + 8))
      {
        uint64_t v10 = "[]";
LABEL_112:
        uintmax_t v11 = a2;
        uint64_t v12 = 2;
LABEL_113:
        sub_100056628(v11, (uint64_t)v10, v12);
      }
      else
      {
        sub_100056628(a2, (uint64_t)"[", 1);
        if (a3)
        {
          a5 = (a5 + a4);
          sub_100056628(a2, (uint64_t)"\n", 1);
        }
        uint64_t v34 = *(uint64_t **)(a1 + 8);
        uint64_t v35 = *v34;
        if (*v34 != v34[1])
        {
          if (a3) {
            uint64_t v36 = ",\n";
          }
          else {
            uint64_t v36 = ",";
          }
          if (a3) {
            uint64_t v37 = 2;
          }
          else {
            uint64_t v37 = 1;
          }
          do
          {
            if (v35 != *v34) {
              sub_100056628(a2, (uint64_t)v36, v37);
            }
            sub_100056954(__b, a5, 32);
            if ((SBYTE7(v59) & 0x80u) == 0) {
              uint64_t v38 = __b;
            }
            else {
              uint64_t v38 = (void **)__b[0];
            }
            if ((SBYTE7(v59) & 0x80u) == 0) {
              uint64_t v39 = BYTE7(v59);
            }
            else {
              uint64_t v39 = (uint64_t)__b[1];
            }
            sub_100056628(a2, (uint64_t)v38, v39);
            if (SBYTE7(v59) < 0) {
              operator delete(__b[0]);
            }
            sub_1003DDCA8(v35, a2, a3, a4, a5);
            v35 += 16;
            uint64_t v34 = *(uint64_t **)(a1 + 8);
          }
          while (v35 != v34[1]);
        }
        if (a3)
        {
          sub_100056628(a2, (uint64_t)"\n", 1);
          LODWORD(a5) = a5 - a4;
        }
        sub_100056954(__b, a5, 32);
        if ((SBYTE7(v59) & 0x80u) == 0) {
          uint64_t v40 = __b;
        }
        else {
          uint64_t v40 = (void **)__b[0];
        }
        if ((SBYTE7(v59) & 0x80u) == 0) {
          uint64_t v41 = BYTE7(v59);
        }
        else {
          uint64_t v41 = (uint64_t)__b[1];
        }
        uint64_t v42 = sub_100056628(a2, (uint64_t)v40, v41);
        sub_100056628(v42, (uint64_t)"]", 1);
LABEL_95:
        if (SBYTE7(v59) < 0)
        {
          uint64_t v33 = __b[0];
LABEL_97:
          operator delete(v33);
        }
      }
      break;
    case 3:
      sub_100004950(__b, "\"");
      if ((SBYTE7(v59) & 0x80u) == 0) {
        uint64_t v43 = __b;
      }
      else {
        uint64_t v43 = (void **)__b[0];
      }
      if ((SBYTE7(v59) & 0x80u) == 0) {
        uint64_t v44 = BYTE7(v59);
      }
      else {
        uint64_t v44 = (uint64_t)__b[1];
      }
      uint64_t v45 = sub_100056628(a2, (uint64_t)v43, v44);
      sub_1003DE3F8(*(void *)(a1 + 8), (uint64_t *)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v46 = &__p;
      }
      else {
        uint64_t v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v47 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v48 = sub_100056628(v45, (uint64_t)v46, v47);
      sub_100056628(v48, (uint64_t)"\"", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_95;
    case 4:
      if (*(unsigned char *)(a1 + 8)) {
        uint64_t v10 = "true";
      }
      else {
        uint64_t v10 = "false";
      }
      if (*(unsigned char *)(a1 + 8)) {
        uint64_t v12 = 4;
      }
      else {
        uint64_t v12 = 5;
      }
      uintmax_t v11 = a2;
      goto LABEL_113;
    case 5:
      uint64_t v49 = *(void *)(a1 + 8);
      *(_OWORD *)__b = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      sub_1003DE710(__b, v49);
      size_t v50 = strlen((const char *)__b);
      sub_100056628(a2, (uint64_t)__b, v50);
      return;
    case 6:
      unint64_t v51 = *(void *)(a1 + 8);
      *(_OWORD *)__b = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      sub_1003DE7E0(__b, v51);
      size_t v52 = strlen((const char *)__b);
      sub_100056628(a2, (uint64_t)__b, v52);
      return;
    case 7:
      double v53 = *(double *)(a1 + 8);
      *(_OWORD *)__b = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      sub_1003DE87C((char *)__b, v53);
      size_t v54 = strlen((const char *)__b);
      sub_100056628(a2, (uint64_t)__b, v54);
      return;
    case 8:
      uint64_t v10 = "<discarded>";
      uintmax_t v11 = a2;
      uint64_t v12 = 11;
      goto LABEL_113;
    default:
      return;
  }
}

void sub_1003DE354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DE3F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003DE670((uint64_t *)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if (result)
  {
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    uint64_t result = (uint64_t)sub_100056954(a2, v5 + result, 92);
    int v6 = *(char *)(a1 + 23);
    BOOL v7 = v6 < 0;
    if (v6 >= 0) {
      char v8 = (unsigned char *)a1;
    }
    else {
      char v8 = *(unsigned char **)a1;
    }
    if (v7) {
      uint64_t v9 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
    }
    if (v9)
    {
      uint64_t v10 = 0;
      uintmax_t v11 = &v8[v9];
      uint64_t result = 116;
      while (2)
      {
        int v12 = (char)*v8;
        switch(*v8)
        {
          case 8:
            if (*((char *)a2 + 23) >= 0) {
              uint64_t v13 = a2;
            }
            else {
              uint64_t v13 = (uint64_t *)*a2;
            }
            *((unsigned char *)v13 + v10 + 1) = 98;
            goto LABEL_46;
          case 9:
            if (*((char *)a2 + 23) >= 0) {
              uint64_t v17 = a2;
            }
            else {
              uint64_t v17 = (uint64_t *)*a2;
            }
            *((unsigned char *)v17 + v10 + 1) = 116;
            goto LABEL_46;
          case 0xA:
            if (*((char *)a2 + 23) >= 0) {
              uint64_t v18 = a2;
            }
            else {
              uint64_t v18 = (uint64_t *)*a2;
            }
            *((unsigned char *)v18 + v10 + 1) = 110;
            goto LABEL_46;
          case 0xB:
            goto LABEL_23;
          case 0xC:
            if (*((char *)a2 + 23) >= 0) {
              uint64_t v19 = a2;
            }
            else {
              uint64_t v19 = (uint64_t *)*a2;
            }
            *((unsigned char *)v19 + v10 + 1) = 102;
            goto LABEL_46;
          case 0xD:
            if (*((char *)a2 + 23) >= 0) {
              int v20 = a2;
            }
            else {
              int v20 = (uint64_t *)*a2;
            }
            *((unsigned char *)v20 + v10 + 1) = 114;
            goto LABEL_46;
          default:
            if (v12 == 92) {
              goto LABEL_46;
            }
            if (v12 == 34)
            {
              if (*((char *)a2 + 23) >= 0) {
                uint64_t v14 = a2;
              }
              else {
                uint64_t v14 = (uint64_t *)*a2;
              }
              *((unsigned char *)v14 + v10 + 1) = 34;
LABEL_46:
              v10 += 2;
            }
            else
            {
LABEL_23:
              if (*v8 > 0x1Fu)
              {
                if (*((char *)a2 + 23) >= 0) {
                  uint64_t v21 = a2;
                }
                else {
                  uint64_t v21 = (uint64_t *)*a2;
                }
                *((unsigned char *)v21 + v10) = v12;
              }
              else
              {
                uint64_t v15 = 0;
                qmemcpy(v24, "u00", sizeof(v24));
                char v25 = byte_1004C66B0[(unint64_t)v12 >> 4];
                char v26 = byte_1004C66B0[v12 & 0xF];
                do
                {
                  if (*((char *)a2 + 23) >= 0) {
                    uint64_t v16 = a2;
                  }
                  else {
                    uint64_t v16 = (uint64_t *)*a2;
                  }
                  *((unsigned char *)v16 + v10 + v15 + 1) = v24[v15];
                  ++v15;
                }
                while (v15 != 5);
                v10 += 5;
              }
              ++v10;
            }
            if (++v8 == v11) {
              return result;
            }
            continue;
        }
      }
    }
  }
  else if ((v5 & 0x80) != 0)
  {
    uint64_t v22 = *(void **)a1;
    unint64_t v23 = *(void *)(a1 + 8);
    return (uint64_t)sub_100002DE4(a2, v22, v23);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    a2[2] = *(void *)(a1 + 16);
  }
  return result;
}

uint64_t sub_1003DE670(uint64_t *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  uint64_t v2 = a1[1];
  if ((v1 & 0x80u) != 0)
  {
    a1 = (uint64_t *)*a1;
    uint64_t v1 = v2;
  }
  return sub_1003DE6AC(a1, (unsigned char *)a1 + v1, 0);
}

uint64_t sub_1003DE6AC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  for (; a1 != a2; ++a1)
  {
    unsigned int v3 = (char)*a1;
    BOOL v4 = v3 > 0x22 || ((1 << *a1) & 0x400003700) == 0;
    if (!v4 || v3 == 92)
    {
      ++a3;
    }
    else if (*a1 < 0x20u)
    {
      a3 += 5;
    }
  }
  return a3;
}

unsigned char *sub_1003DE710(unsigned char *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = 0;
    uint64_t v3 = a2;
    do
    {
      if (v2 == 63) {
        sub_100438760();
      }
      uint64_t v4 = v3 % 10;
      if (v3 % 10 < 0) {
        LOBYTE(v4) = 10 * (v3 / 10) - v3;
      }
      char v5 = v4 + 48;
      uint64_t v6 = v2 + 1;
      result[v2] = v5;
      unint64_t v7 = v3 + 9;
      v3 /= 10;
      ++v2;
    }
    while (v7 >= 0x13);
    if (a2 < 0)
    {
      if ((unint64_t)(v6 - 1) >= 0x3D) {
        sub_10043878C();
      }
      result[v6++] = 45;
    }
    char v8 = &result[v6 - 1];
    if (v8 > result)
    {
      uint64_t v9 = result + 1;
      do
      {
        char v10 = *(v9 - 1);
        *(v9 - 1) = *v8;
        *v8-- = v10;
      }
      while (v9++ < v8);
    }
  }
  else
  {
    std::runtime_error *result = 48;
  }
  return result;
}

unsigned char *sub_1003DE7E0(unsigned char *result, unint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = 0;
    do
    {
      if (v2 == 63) {
        sub_100438760();
      }
      uint64_t v3 = v2 + 1;
      result[v2++] = (a2 % 0xA) | 0x30;
      BOOL v4 = a2 >= 0xA;
      a2 /= 0xAuLL;
    }
    while (v4);
    char v5 = &result[v3 - 1];
    if (v5 > result)
    {
      uint64_t v6 = result + 1;
      do
      {
        char v7 = *(v6 - 1);
        *(v6 - 1) = *v5;
        *v5-- = v7;
        BOOL v4 = v6++ >= v5;
      }
      while (!v4);
    }
  }
  else
  {
    std::runtime_error *result = 48;
  }
  return result;
}

void sub_1003DE87C(char *__str, double a2)
{
  if (a2 == 0.0)
  {
    if ((*(void *)&a2 & 0x8000000000000000) != 0)
    {
      *std::string __str = 45;
      uint64_t v3 = 1;
    }
    else
    {
      uint64_t v3 = 0;
    }
    uint64_t v9 = &__str[v3];
    *(_WORD *)uint64_t v9 = 11824;
    v9[2] = 48;
    return;
  }
  int v4 = snprintf(__str, 0x40uLL, "%.*g", 15, a2);
  if (v4 <= 0) {
    sub_1004387B8();
  }
  int v5 = v4;
  if (v4 >= 0x40) {
    sub_100438894();
  }
  uint64_t v6 = localeconv();
  if (!v6) {
    sub_1004387E4();
  }
  thousands_sep = v6->thousands_sep;
  if (thousands_sep) {
    LODWORD(thousands_sep) = *thousands_sep;
  }
  unsigned __int8 v16 = thousands_sep;
  if (!v6->decimal_point)
  {
    int v8 = 0;
    if (!thousands_sep) {
      goto LABEL_18;
    }
LABEL_16:
    char v10 = sub_1003DEA5C(__str, (unsigned __int8 *)&__str[v5], &v16);
    int64_t v11 = __str - (char *)v10 + 64;
    if (v11 >= 1) {
      bzero(v10, v11);
    }
    goto LABEL_18;
  }
  int v8 = *v6->decimal_point;
  if (thousands_sep) {
    goto LABEL_16;
  }
LABEL_18:
  if (v8 && v8 != 46)
  {
    uint64_t v12 = 0;
    while (v8 != __str[v12])
    {
      if (++v12 == 64) {
        goto LABEL_25;
      }
    }
    __str[v12] = 46;
  }
LABEL_25:
  int v13 = *__str;
  if (*__str)
  {
    unint64_t v14 = 0;
    LOBYTE(v15) = 1;
    while (1)
    {
      if ((v15 & 1) != 0
        && ((v13 - 46) > 0x37 || ((1 << (v13 - 46)) & 0x80000000800001) == 0))
      {
        if (++v14 == 64) {
          goto LABEL_46;
        }
        int v15 = 1;
      }
      else
      {
        if (++v14 == 64) {
          return;
        }
        int v15 = 0;
      }
      int v13 = __str[v14];
      if (!__str[v14]) {
        goto LABEL_37;
      }
    }
  }
  unint64_t v14 = 0;
  int v15 = 1;
LABEL_37:
  if (v15)
  {
    if (v14 >= 0x3E) {
LABEL_46:
    }
      sub_100438868();
    if (!__str[v14 - 1]) {
      sub_100438810();
    }
    *(_WORD *)&__str[v14] = 12334;
    if (__str[v14 + 2]) {
      sub_10043883C();
    }
  }
}

unsigned __int8 *sub_1003DEA5C(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (unsigned char *)a1);
  if (!result) {
    uint64_t result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

unsigned __int8 *sub_1003DEAC4(unsigned __int8 *a1)
{
  sub_1003DEB54(a1);
  int v2 = *a1;
  switch(v2)
  {
    case 3:
      uint64_t v3 = (char *)*((void *)a1 + 1);
      if ((v3[23] & 0x80000000) == 0)
      {
LABEL_9:
        operator delete(v3);
        return a1;
      }
      operator delete(*(void **)v3);
LABEL_8:
      uint64_t v3 = (char *)*((void *)a1 + 1);
      goto LABEL_9;
    case 2:
      int v5 = (void **)*((void *)a1 + 1);
      sub_1003DEC64(&v5);
      goto LABEL_8;
    case 1:
      sub_1003DEBA8(*((void *)a1 + 1), *(char **)(*((void *)a1 + 1) + 8));
      goto LABEL_8;
  }
  return a1;
}

unsigned __int8 *sub_1003DEB54(unsigned __int8 *result)
{
  int v1 = *result;
  if (v1 == 3)
  {
    if (!*((void *)result + 1)) {
      sub_100438918();
    }
  }
  else if (v1 == 2)
  {
    if (!*((void *)result + 1)) {
      sub_1004388EC();
    }
  }
  else if (v1 == 1 && !*((void *)result + 1))
  {
    sub_1004388C0();
  }
  return result;
}

void sub_1003DEBA8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1003DEBA8(a1, *(void *)a2);
    sub_1003DEBA8(a1, *((void *)a2 + 1));
    sub_1003DEAC4(a2 + 56);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_1003DEC14(uint64_t a1, uint64_t a2)
{
  sub_1003DEAC4((unsigned __int8 *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void sub_1003DEC64(void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1003DEAC4(v4 - 16);
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1003DECE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1003DED80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1003DEE18(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_1003DEE98((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1003DEE80(_Unwind_Exception *a1)
{
  sub_1001FC648(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1003DEE98(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_1002382C4(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_1003DEF1C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_100026D98(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void *sub_1003DEF1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  uint64_t result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t result = sub_100002DE4(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1003DEFAC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10025A61C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1003DEFCC()
{
}

__n128 sub_1003DEFE0(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = off_100864670;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003DF034(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100864670;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003DF06C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

uint64_t sub_1003DF098(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003DF0D8()
{
}

void sub_1003DF0E8()
{
}

__n128 sub_1003DF0FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100864730;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003DF150(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100864730;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003DF188(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

uint64_t sub_1003DF1B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003DF1F4()
{
}

void sub_1003DF204()
{
}

__n128 sub_1003DF218(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1008647F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003DF26C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1008647F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003DF2A4(void *a1, unsigned int *a2, void *a3, void *a4)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = (uint64_t (*)(void *, void, void, void))a1[1];
  uint64_t v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(uint64_t (**)(void *, void, void, void))(*v6 + v5);
  }
  return v5(v6, *a2, *a3, *a4);
}

uint64_t sub_1003DF2D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003DF318()
{
}

void *sub_1003DF324(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_1000257D8();
  }
  return operator new(20 * a2);
}

void *sub_1003DF36C@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *a1;
  if (v4 > 8) {
    uint64_t v5 = "number";
  }
  else {
    uint64_t v5 = off_100864938[v4];
  }
  return sub_100004950(a2, v5);
}

void *sub_1003DF39C(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_100026C8C((uint64_t)a1, &v12, a2);
  char v7 = *v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    char v7 = operator new(0x48uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    *((_OWORD *)v7 + 2) = **a4;
    *((void *)v7 + 6) = v10;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    sub_1003DDA48((unsigned __int8 *)v7 + 56);
    sub_100026D98(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1003DF440(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_1003DEC14(*(void *)a1, (uint64_t)__p + 32);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void sub_1003DF49C(uint64_t a1, char **a2)
{
  sub_100004950(__p, *a2);
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1003DF518((uint64_t)__p);
  sub_1003DEB54((unsigned __int8 *)a1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003DF4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003DF518(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_100002DE4(v2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
    v2[2] = *(void *)(a1 + 16);
  }
  return v3;
}

void sub_1003DF570(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1003DF584(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1001504A8(a1, a2);
    char v4 = (char *)a1[1];
    size_t v5 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1003DF60C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003DF628(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1003DF6CC(a1, a2);
    char v4 = (char *)a1[1];
    size_t v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1003DF6B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003DF6CC(void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_1000267C4();
  }
  __n128 result = (char *)sub_10028BA54((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void sub_1003DF724(uint64_t a1, char *a2)
{
  sub_100004950(__p, a2);
  *(unsigned char *)a1 = 3;
  *(void *)(a1 + 8) = sub_1003DF518((uint64_t)__p);
  sub_1003DEB54((unsigned __int8 *)a1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003DF780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003DF7A0()
{
}

void *sub_1003DF7B4()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_100864898;
  return result;
}

void sub_1003DF7EC(uint64_t a1, void *a2)
{
  *a2 = off_100864898;
}

BOOL sub_1003DF814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a2;
  int v4 = *(char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v6 = *(void *)(a2 + 32);
  unint64_t v5 = *(void *)(a2 + 40);
  char v7 = *(void **)a3;
  int v8 = *(char *)(a3 + 23);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  unint64_t v10 = *(void *)(a3 + 32);
  unint64_t v9 = *(void *)(a3 + 40);
  if (v8 < 0)
  {
    operator delete(v7);
    if ((v4 & 0x80000000) == 0) {
      return (__int128)__PAIR128__(v5, v6) < (__int128)__PAIR128__(v9, v10);
    }
LABEL_5:
    operator delete(v3);
    return (__int128)__PAIR128__(v5, v6) < (__int128)__PAIR128__(v9, v10);
  }
  if (v4 < 0) {
    goto LABEL_5;
  }
  return (__int128)__PAIR128__(v5, v6) < (__int128)__PAIR128__(v9, v10);
}

uint64_t sub_1003DF890(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1003DF8D0()
{
}

void *sub_1003DF8DC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1003DF960(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_1003DF9F8(uint64_t **a1, long long *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)sub_1003DFA78((uint64_t)a1, &v8, a2);
  __n128 result = *v5;
  if (!*v5)
  {
    sub_1003DFD34((uint64_t)a1, a3, (uint64_t)&v7);
    sub_100026D98(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t *sub_1003DFA78(uint64_t a1, void *a2, long long *a3)
{
  int v4 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    char v7 = a3 + 2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v3;
        if (*((char *)a3 + 23) < 0)
        {
          sub_100002DE4(&__dst, *(void **)a3, *((void *)a3 + 1));
        }
        else
        {
          long long __dst = *a3;
          uint64_t v26 = *((void *)a3 + 2);
        }
        long long v27 = *v7;
        unint64_t v9 = v8 + 4;
        if (*((char *)v8 + 55) < 0)
        {
          sub_100002DE4(__p, (void *)v8[4], v8[5]);
        }
        else
        {
          *(_OWORD *)std::string __p = *v9;
          uint64_t v23 = v8[6];
        }
        long long v24 = *((_OWORD *)v8 + 4);
        uint64_t v10 = *(void *)(a1 + 48);
        if (!v10) {
          sub_100027894();
        }
        int v11 = (*(uint64_t (**)(uint64_t, long long *, void **))(*(void *)v10 + 48))(v10, &__dst, __p);
        if (SHIBYTE(v23) < 0) {
          operator delete(__p[0]);
        }
        if ((SHIBYTE(v26) & 0x80000000) == 0) {
          break;
        }
        operator delete((void *)__dst);
        if (v11) {
          goto LABEL_14;
        }
LABEL_17:
        if (*((char *)v8 + 55) < 0)
        {
          sub_100002DE4(v19, (void *)v8[4], v8[5]);
        }
        else
        {
          *(_OWORD *)uint64_t v19 = *v9;
          uint64_t v20 = v8[6];
        }
        long long v21 = *((_OWORD *)v8 + 4);
        if (*((char *)a3 + 23) < 0)
        {
          sub_100002DE4(v16, *(void **)a3, *((void *)a3 + 1));
        }
        else
        {
          *(_OWORD *)unsigned __int8 v16 = *a3;
          uint64_t v17 = *((void *)a3 + 2);
        }
        long long v18 = *v7;
        uint64_t v12 = *(void *)(a1 + 48);
        if (!v12) {
          sub_100027894();
        }
        int v13 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)v12 + 48))(v12, v19, v16);
        if (SHIBYTE(v17) < 0) {
          operator delete(v16[0]);
        }
        if (SHIBYTE(v20) < 0) {
          operator delete(v19[0]);
        }
        if (v13)
        {
          int v4 = v8 + 1;
          uint64_t v3 = (uint64_t *)v8[1];
          if (v3) {
            continue;
          }
        }
        goto LABEL_32;
      }
      if (!v11) {
        goto LABEL_17;
      }
LABEL_14:
      uint64_t v3 = (uint64_t *)*v8;
      int v4 = v8;
      if (!*v8) {
        goto LABEL_32;
      }
    }
  }
  uint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_32:
  *a2 = v8;
  return v4;
}

void sub_1003DFCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1003DFD34@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (__n128 *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  char v7 = v6 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100002DE4(v7, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *char v7 = *(__n128 *)a2;
    v6[3].n128_u64[0] = *(void *)(a2 + 16);
  }
  __n128 result = *(__n128 *)(a2 + 32);
  v6[4] = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1003DFDC0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1001FD964(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_1003DFDDC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100026770(a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1003DFE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_1003DFE80(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  sub_1003DEB54((unsigned __int8 *)a2);
  switch(*(unsigned char *)a1)
  {
    case 1:
      int v4 = sub_1003DFF44(*(const void ****)(a2 + 8));
      goto LABEL_7;
    case 2:
      int v4 = sub_1003E01F4(*(uint64_t **)(a2 + 8));
      goto LABEL_7;
    case 3:
      int v4 = sub_1003DF518(*(void *)(a2 + 8));
      goto LABEL_7;
    case 4:
      int v4 = (uint64_t *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_7;
    case 5:
    case 6:
    case 7:
      int v4 = *(uint64_t **)(a2 + 8);
LABEL_7:
      *(void *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  sub_1003DEB54((unsigned __int8 *)a1);
  return a1;
}

uint64_t *sub_1003DFF44(const void ***a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x18uLL);
  sub_1003DFF90(v2, a1);
  return v2;
}

void sub_1003DFF7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003DFF90(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1003DFFE8(a1, *a2, a2 + 1);
  return a1;
}

void sub_1003DFFD0(_Unwind_Exception *a1)
{
  sub_1003DEBA8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1003DFFE8(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    int v4 = a2;
    size_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_1003E0074(v5, v6, v4 + 4, (long long *)v4 + 2);
      char v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          char v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          int v4 = (const void **)v8;
        }
        while (!v9);
      }
      int v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1003E0074(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  unint64_t v6 = (uint64_t **)sub_10025A8FC(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    sub_1003E00F8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_100026D98(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

char *sub_1003E00F8@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = sub_1003E017C(v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1003E0160(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1003DF440(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_1003E017C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_1003DFE80(__dst + 24, (char *)a2 + 24);
  return __dst;
}

void sub_1003E01D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003E01F4(uint64_t *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  sub_1003E0250(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_1003E023C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1003E0250(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_100155838(result, a4);
    __n128 result = (void *)sub_1003E02D8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1003E02B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1003DEC64(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E02D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_1003DFE80(a4 + v7, a2 + v7);
      v7 += 16;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1003E0338(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 16;
    do
    {
      sub_1003DEAC4((unsigned __int8 *)(v4 + v2));
      v2 -= 16;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003E035C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  uint64_t v9 = (IOPMAssertionID *)(a1 + 24);
  if (*(_DWORD *)(a1 + 24))
  {
    sub_10000486C("power assertion (%u) is already taken for %s", a2, a3, a4, a5, a6, a7, a8, *(unsigned int *)(a1 + 24));
    return 1;
  }
  int v11 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    int v11 = *(const char **)a1;
  }
  CFStringRef v12 = CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x8000100u);
  if (v12)
  {
    CFStringRef v20 = v12;
    IOReturn v21 = IOPMAssertionCreateWithName(@"PreventUserIdleSystemSleep", 0xFFu, v12, v9);
    CFRelease(v20);
    if (!v21)
    {
      sub_10000486C("Successfully taken powerAssertionId (%u) for %s", v22, v23, v24, v25, v26, v27, v28, *(unsigned int *)(v8 + 24));
      return 1;
    }
    if (*(char *)(v8 + 23) < 0) {
      uint64_t v8 = *(void *)v8;
    }
    sub_1003A9600("Failed to take powerAssertionId for %s, return value: 0x%x", v22, v23, v24, v25, v26, v27, v28, v8);
  }
  else
  {
    if (*(char *)(v8 + 23) < 0) {
      uint64_t v8 = *(void *)v8;
    }
    sub_1003A9600("Failed to create CFString for %s", v13, v14, v15, v16, v17, v18, v19, v8);
  }
  return 0;
}

unint64_t sub_1003E0470(unsigned int a1)
{
  return ((unint64_t)((a1 >> 17) & 3) << 32) | ((unint64_t)(HIWORD(a1) & 1) << 40) | ((unint64_t)(a1 & 0x3FF) << 16) | (((a1 >> 10) & 0xFLL) << 8) | ((unsigned __int16)a1 >> 14);
}

uint64_t sub_1003E0498(unsigned int **a1)
{
  if ((unint64_t)((char *)a1[1] - (char *)*a1) <= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003A1A8C(exception, "packet too short to contain a 4-byte header");
  }
  return **a1;
}

void sub_1003E0500(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_1003E0514(char *__src, size_t __len, unsigned char *__dst, int a4)
{
  uint64_t v4 = __dst;
  size_t v5 = __len;
  if (a4 == 1)
  {
    if (__len) {
      memmove(__dst, __src, __len);
    }
    v4 += v5;
  }
  else if (__len)
  {
    do
      *v4++ = __src[--v5];
    while (v5);
  }
  return v4;
}

void sub_1003E0578(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(unsigned int **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  size_t v5 = v4 - *(void *)a1;
  if (v5 > 0x30)
  {
    if (v5 >= 0x89)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1003A1A8C(exception, "logical packet too long to split into multiple physical packets");
    }
    int v8 = sub_1003E0498((unsigned int **)a1);
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    int v9 = *(_DWORD *)(a1 + 8) - *(void *)a1 - 4;
    if (*(unsigned char *)(a1 + 8) - *(void *)a1 != 4)
    {
      int v10 = v8;
      int v11 = (char *)(*(void *)a1 + 4);
      do
      {
        uint64_t v13 = *a2;
        uint64_t v12 = a2[1];
        if (v9 >= 0x2Cu) {
          size_t v14 = 44;
        }
        else {
          size_t v14 = v9;
        }
        LOBYTE(v20) = 0;
        sub_1001B0664(&__p, v14 + 4, &v20);
        if (v9 <= 0x2Cu) {
          int v15 = 327680;
        }
        else {
          int v15 = 196608;
        }
        if (v12 == v13) {
          int v15 = 0x10000;
        }
        uint64_t v16 = (char *)__p;
        *(_DWORD *)std::string __p = v10 | v15;
        memmove(v16 + 4, v11, v14);
        uint64_t v17 = (void *)a2[1];
        if ((unint64_t)v17 >= a2[2])
        {
          uint64_t v18 = sub_1003E0BE8(a2, (uint64_t)&__p);
        }
        else
        {
          *uint64_t v17 = 0;
          v17[1] = 0;
          v17[2] = 0;
          sub_10016D488(v17, __p, (uint64_t)v23, v23 - (unsigned char *)__p);
          uint64_t v18 = (uint64_t)(v17 + 3);
          a2[1] = (uint64_t)(v17 + 3);
        }
        a2[1] = v18;
        if (__p)
        {
          uint64_t v23 = __p;
          operator delete(__p);
        }
        v11 += v14;
        LOBYTE(v9) = v9 - v14;
      }
      while ((_BYTE)v9);
    }
  }
  else
  {
    std::string __p = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    sub_10016D488(&__p, v3, v4, v5);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    CFStringRef v20 = a2;
    char v21 = 0;
    unint64_t v6 = operator new(0x18uLL);
    *a2 = (uint64_t)v6;
    a2[1] = (uint64_t)v6;
    a2[2] = (uint64_t)(v6 + 3);
    a2[1] = (uint64_t)sub_1003E0B38((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v25, v6);
    if (__p)
    {
      uint64_t v23 = __p;
      operator delete(__p);
    }
  }
}

void sub_1003E0790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E0810(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  sub_1002363E4((uint64_t)v21);
  int v9 = *(char *)(a1 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = *(void *)a1;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  sub_100056628(v21, v10, v11);
  char v20 = 48;
  uint64_t v12 = sub_1001771C8(v21, &v20);
  *(_DWORD *)((char *)v12 + *(void *)(*v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 8;
  if (a3)
  {
    unint64_t v13 = 0;
    unint64_t v14 = a4;
    do
    {
      *(void *)((char *)&v21[3] + *(void *)(v21[0] - 24)) = 2;
      int v15 = (void *)std::ostream::operator<<();
      sub_100056628(v15, (uint64_t)" ", 1);
      if (v13 % a4 == a4 - 1) {
        sub_100056628(v21, (uint64_t)"\n", 1);
      }
      ++v13;
    }
    while (a3 != v13);
  }
  else
  {
    unint64_t v14 = a4;
  }
  if (a3 % v14) {
    sub_100056628(v21, (uint64_t)"\n", 1);
  }
  int v16 = *(char *)(a5 + 23);
  if (v16 >= 0) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = *(void *)a5;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v18 = *(void *)(a5 + 8);
  }
  sub_100056628(v21, v17, v18);
  std::stringbuf::str();
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1003E0A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10023657C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003E0ABC(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  sub_1003E0810(a1, a2, a3, a4, a5);
  if (v14 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_1003A94A4("%s", v5, v6, v7, v8, v9, v10, v11, (uint64_t)p_p);
  if (v14 < 0) {
    operator delete(__p);
  }
}

void sub_1003E0B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003E0B38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_10016D488(v4, *(const void **)v6, *(void *)(v6 + 8), *(void *)(v6 + 8) - *(void *)v6);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_10032EACC((uint64_t)v8);
  return v4;
}

void sub_1003E0BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003E0BE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1000267C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000267DC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  int v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_10016D488(v11, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  v15 += 24;
  sub_10032EB04(a1, v14);
  uint64_t v12 = a1[1];
  sub_1001533B8((uint64_t)v14);
  return v12;
}

void sub_1003E0CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001533B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E0CFC(char *a1, _DWORD *__dst)
{
  __dst[8] = 0;
  *(_OWORD *)long long __dst = 0u;
  *((_OWORD *)__dst + 1) = 0u;
  int __src = 0x4000;
  unint64_t v4 = sub_1003E0514((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003E0514(a1, 0x20uLL, v4, 1);
  if (__dst + 9 >= (_DWORD *)v5)
  {
    if (__dst + 9 > (_DWORD *)v5) {
      sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildHelloCommandPacket");
    }
    if (*((unsigned char *)__dst + 35))
    {
      sub_10000486C("%s: software version string was overrun.", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildHelloCommandPacket");
      uint64_t result = 0;
      *((unsigned char *)__dst + 35) = 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    sub_1003A9600("%s: Memory bounds of array exceeded.", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildHelloCommandPacket");
    return 1;
  }
  return result;
}

uint64_t sub_1003E0DD4(uint64_t a1, void *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
  if (v8 >= 0x11)
  {
    uint64_t v9 = "Too many devices in device list in ranging config command.";
LABEL_10:
    sub_1003A9600(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v27);
    return 1;
  }
  if (v8 <= 3)
  {
    uint64_t v9 = "Not enough devices in device list in ranging config command.";
    goto LABEL_10;
  }
  a2[1] = *a2;
  char v30 = 0;
  sub_10021DF20(a2, v8 + 24, &v30);
  uint64_t v12 = (unsigned char *)*a2;
  int __src = 16385;
  unint64_t v13 = sub_1003E0514((char *)&__src, 4uLL, v12, 1);
  char v14 = sub_1003E0514((char *)a1, 2uLL, v13, 1);
  int v15 = sub_1003E0514((char *)(a1 + 2), 1uLL, v14, 1);
  int v16 = sub_1003E0514((char *)(a1 + 3), 1uLL, v15, 1);
  uint64_t v17 = sub_1003E0514((char *)(a1 + 4), 2uLL, v16, 1);
  uint64_t v18 = sub_1003E0514((char *)(a1 + 6), 2uLL, v17, 1);
  uint64_t v19 = sub_1003E0514((char *)(a1 + 8), 1uLL, v18, 1);
  char v20 = sub_1003E0514((char *)(a1 + 9), 1uLL, v19, 1);
  char v21 = sub_1003E0514((char *)(a1 + 10), 1uLL, v20, 1);
  unsigned __int8 v28 = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1;
  char v22 = sub_1003E0514((char *)&v28, 1uLL, v21 + 7, 1);
  a3 = sub_1003E0514((char *)(a1 + 11), 1uLL, v22, 1);
  if (v28)
  {
    uint64_t v23 = 0;
    for (unint64_t i = 0; i < v28; ++i)
    {
      a3 = sub_1003E0514((char *)(*(void *)(a1 + 16) + v23), 2uLL, a3, 1);
      v23 += 2;
    }
  }
  unint64_t v25 = a2[1];
  if (v25 < (unint64_t)a3)
  {
    uint64_t v27 = "buildRangingConfigCommandPacket";
    uint64_t v9 = "%s: Memory bounds of array exceeded.";
    goto LABEL_10;
  }
  if (v25 > (unint64_t)a3) {
    sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"buildRangingConfigCommandPacket");
  }
  return 0;
}

uint64_t sub_1003E0FD8(uint64_t a1, void *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
  if (v8 >= 0x11)
  {
    uint64_t v9 = "Too many devices in device list in ranging config command.";
LABEL_10:
    sub_1003A9600(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v33);
    return 1;
  }
  if (v8 <= 3)
  {
    uint64_t v9 = "Not enough devices in device list in ranging config command.";
    goto LABEL_10;
  }
  uint64_t v12 = (char *)(a1 + 48);
  a2[1] = *a2;
  char v36 = 0;
  sub_10021DF20(a2, v8 + 28, &v36);
  unint64_t v13 = (unsigned char *)*a2;
  int __src = 16385;
  char v14 = sub_1003E0514((char *)&__src, 4uLL, v13, 1);
  int v15 = sub_1003E0514((char *)a1, 2uLL, v14, 1);
  int v16 = sub_1003E0514((char *)(a1 + 2), 1uLL, v15, 1);
  uint64_t v17 = sub_1003E0514((char *)(a1 + 3), 1uLL, v16, 1);
  uint64_t v18 = sub_1003E0514((char *)(a1 + 4), 2uLL, v17, 1);
  uint64_t v19 = sub_1003E0514((char *)(a1 + 6), 2uLL, v18, 1);
  char v20 = sub_1003E0514((char *)(a1 + 8), 1uLL, v19, 1);
  char v21 = sub_1003E0514((char *)(a1 + 9), 1uLL, v20, 1);
  char v22 = sub_1003E0514((char *)(a1 + 10), 1uLL, v21, 1);
  uint64_t v23 = sub_1003E0514(v12, 2uLL, v22, 1);
  uint64_t v24 = sub_1003E0514((char *)(a1 + 50), 2uLL, v23, 1);
  unsigned __int8 v34 = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1;
  unint64_t v25 = sub_1003E0514((char *)&v34, 1uLL, v24 + 3, 1);
  uint64_t v26 = sub_1003E0514((char *)(a1 + 11), 1uLL, v25, 1);
  uint64_t v27 = sub_1003E0514((char *)(a1 + 52), 1uLL, v26, 1);
  unsigned __int8 v28 = sub_1003E0514((char *)(a1 + 53), 1uLL, v27, 1);
  a3 = sub_1003E0514((char *)(a1 + 54), 2uLL, v28, 1);
  if (v34)
  {
    uint64_t v29 = 0;
    for (unint64_t i = 0; i < v34; ++i)
    {
      a3 = sub_1003E0514((char *)(*(void *)(a1 + 16) + v29), 2uLL, a3, 1);
      v29 += 2;
    }
  }
  unint64_t v31 = a2[1];
  if (v31 < (unint64_t)a3)
  {
    uint64_t v33 = "buildRangingConfigCommandPacketR2";
    uint64_t v9 = "%s: Memory bounds of array exceeded.";
    goto LABEL_10;
  }
  if (v31 > (unint64_t)a3) {
    sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"buildRangingConfigCommandPacketR2");
  }
  return 0;
}

uint64_t sub_1003E1244(char *a1, void *__dst)
{
  *long long __dst = 0;
  __dst[1] = 0;
  *(void *)((char *)__dst + 14) = 0;
  int __src = 16386;
  unint64_t v4 = sub_1003E0514((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003E0514(a1, 2uLL, v4, 1);
  uint64_t v6 = sub_1003E0514(a1 + 8, 8uLL, v5, 1);
  uint64_t v7 = sub_1003E0514(a1 + 16, 4uLL, v6, 1);
  unint64_t v8 = sub_1003E0514(a1 + 20, 4uLL, v7, 1);
  if ((char *)__dst + 22 >= v8)
  {
    if ((char *)__dst + 22 > v8) {
      sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"buildRangingEnableCommandPacket");
    }
    return 0;
  }
  else
  {
    sub_1003A9600("%s: Memory bounds of array exceeded.", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"buildRangingEnableCommandPacket");
    return 1;
  }
}

uint64_t sub_1003E1330(char *a1, char *__dst)
{
  *(_DWORD *)(__dst + 3) = 0;
  *(_DWORD *)long long __dst = 0;
  int __src = 16387;
  unint64_t v4 = sub_1003E0514((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003E0514(a1, 2uLL, v4, 1);
  uint64_t v6 = sub_1003E0514(a1 + 2, 1uLL, v5, 1);
  if (__dst + 7 >= v6)
  {
    if (__dst + 7 > v6) {
      sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"buildRangingDisableCommandPacket");
    }
    return 0;
  }
  else
  {
    sub_1003A9600("%s: Memory bounds of array exceeded.", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"buildRangingDisableCommandPacket");
    return 1;
  }
}

uint64_t sub_1003E13F4(char *a1, char *__dst)
{
  *(void *)(__dst + 78) = 0;
  *((_OWORD *)__dst + 3) = 0u;
  *((_OWORD *)__dst + 4) = 0u;
  *((_OWORD *)__dst + 1) = 0u;
  *((_OWORD *)__dst + 2) = 0u;
  *(_OWORD *)long long __dst = 0u;
  int __src = 16480;
  unint64_t v4 = sub_1003E0514((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003E0514(a1, 2uLL, v4, 1);
  uint64_t v6 = sub_1003E0514(a1 + 2, 1uLL, v5, 1);
  uint64_t v7 = sub_1003E0514(a1 + 3, 1uLL, v6, 1);
  uint64_t v8 = sub_1003E0514(a1 + 4, 1uLL, v7, 1);
  uint64_t v9 = sub_1003E0514(a1 + 6, 2uLL, v8, 1);
  uint64_t v10 = sub_1003E0514(a1 + 8, 2uLL, v9, 1);
  uint64_t v11 = sub_1003E0514(a1 + 22, 1uLL, v10 + 12, 1);
  uint64_t v12 = sub_1003E0514(a1 + 23, 1uLL, v11, 1);
  uint64_t v13 = sub_1003E0514(a1 + 24, 1uLL, v12, 1);
  uint64_t v14 = sub_1003E0514(a1 + 26, 2uLL, v13, 1);
  uint64_t v15 = sub_1003E0514(a1 + 28, 1uLL, v14, 1);
  int v16 = sub_1003E0514(a1 + 30, 2uLL, v15, 1);
  uint64_t v17 = sub_1003E0514(a1 + 43, 1uLL, v16 + 11, 1);
  uint64_t v18 = sub_1003E0514(a1 + 44, 1uLL, v17, 1);
  uint64_t v19 = sub_1003E0514(a1 + 62, 2uLL, v18 + 16, 1);
  char v20 = sub_1003E0514(a1 + 64, 8uLL, v19, 1);
  char v21 = sub_1003E0514(a1 + 72, 4uLL, v20, 1);
  char v22 = sub_1003E0514(a1 + 76, 2uLL, v21, 1);
  uint64_t v23 = sub_1003E0514(a1 + 80, 8uLL, v22, 1);
  if (__dst + 86 >= v23)
  {
    if (__dst + 86 > v23) {
      sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"buildTestNBAMMSRangeEnableCommandPacket");
    }
    return 0;
  }
  else
  {
    sub_1003A9600("%s: Memory bounds of array exceeded.", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"buildTestNBAMMSRangeEnableCommandPacket");
    return 1;
  }
}

uint64_t sub_1003E1618(_DWORD *a1, unint64_t *a2)
{
  int __src = 16388;
  unint64_t v4 = (unsigned char *)*a2;
  unint64_t v5 = a2[1] - *a2;
  if (v5 > 3)
  {
    if (v5 != 4) {
      a2[1] = (unint64_t)(v4 + 4);
    }
  }
  else
  {
    sub_10003F834(a2, 4 - v5);
    unint64_t v4 = (unsigned char *)*a2;
  }
  sub_1003E0514((char *)&__src, 4uLL, v4, 1);
  int v6 = a1[2] - *a1;
  uint64_t v8 = (unsigned char *)a2[1];
  unint64_t v7 = a2[2];
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v10 = *a2;
    uint64_t v11 = &v8[-*a2];
    unint64_t v12 = (unint64_t)(v11 + 1);
    if ((uint64_t)(v11 + 1) < 0) {
LABEL_44:
    }
      sub_1000267C4();
    unint64_t v13 = v7 - v10;
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v14 = v12;
    }
    if (v14) {
      unint64_t v15 = (unint64_t)operator new(v14);
    }
    else {
      unint64_t v15 = 0;
    }
    int v16 = (char *)(v15 + v14);
    v11[v15] = v6;
    uint64_t v9 = &v11[v15 + 1];
    if (v8 == (unsigned char *)v10)
    {
      v15 += (unint64_t)v11;
    }
    else
    {
      uint64_t v17 = &v8[~v10];
      do
      {
        char v18 = *--v8;
        (v17--)[v15] = v18;
      }
      while (v8 != (unsigned char *)v10);
      uint64_t v8 = (unsigned char *)*a2;
    }
    *a2 = v15;
    a2[1] = (unint64_t)v9;
    a2[2] = (unint64_t)v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v8 = v6;
    uint64_t v9 = v8 + 1;
  }
  a2[1] = (unint64_t)v9;
  uint64_t v19 = *(char **)a1;
  char v20 = (char *)*((void *)a1 + 1);
  if (*(char **)a1 != v20)
  {
    do
    {
      char v21 = *v19;
      unint64_t v22 = a2[2];
      if ((unint64_t)v9 >= v22)
      {
        unint64_t v24 = *a2;
        uint64_t v25 = &v9[-*a2];
        unint64_t v26 = (unint64_t)(v25 + 1);
        if ((uint64_t)(v25 + 1) < 0) {
          goto LABEL_44;
        }
        unint64_t v27 = v22 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unint64_t v29 = (unint64_t)operator new(v28);
        }
        else {
          unint64_t v29 = 0;
        }
        uint64_t v30 = (char *)(v29 + v28);
        v25[v29] = v21;
        uint64_t v23 = (uint64_t)&v25[v29 + 1];
        if (v9 == (unsigned char *)v24)
        {
          *a2 = (unint64_t)&v25[v29];
          a2[1] = v23;
          a2[2] = (unint64_t)v30;
        }
        else
        {
          unint64_t v31 = &v9[~v24];
          do
          {
            char v32 = *--v9;
            (v31--)[v29] = v32;
          }
          while (v9 != (unsigned char *)v24);
          uint64_t v9 = (unsigned char *)*a2;
          *a2 = v29;
          a2[1] = v23;
          a2[2] = (unint64_t)v30;
          if (!v9) {
            goto LABEL_42;
          }
        }
        operator delete(v9);
      }
      else
      {
        *uint64_t v9 = v21;
        uint64_t v23 = (uint64_t)(v9 + 1);
      }
LABEL_42:
      a2[1] = v23;
      ++v19;
      uint64_t v9 = (unsigned char *)v23;
    }
    while (v19 != v20);
  }
  return 0;
}

uint64_t sub_1003E1858(char **a1, unint64_t *a2)
{
  if ((unint64_t)(a1[1] - *a1) > 0x1FE0) {
    return 1;
  }
  int __src = 16389;
  unint64_t v5 = (unsigned char *)*a2;
  unint64_t v6 = a2[1] - *a2;
  if (v6 > 3)
  {
    if (v6 != 4) {
      a2[1] = (unint64_t)(v5 + 4);
    }
  }
  else
  {
    sub_10003F834(a2, 4 - v6);
    unint64_t v5 = (unsigned char *)*a2;
  }
  sub_1003E0514((char *)&__src, 4uLL, v5, 1);
  unint64_t v7 = a1[1] - *a1;
  uint64_t v9 = (unsigned char *)a2[1];
  unint64_t v8 = a2[2];
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = *a2;
    unint64_t v12 = &v9[-*a2];
    unint64_t v13 = (unint64_t)(v12 + 1);
    if ((uint64_t)(v12 + 1) < 0) {
LABEL_87:
    }
      sub_1000267C4();
    unint64_t v14 = v8 - v11;
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v13;
    }
    if (v15) {
      unint64_t v16 = (unint64_t)operator new(v15);
    }
    else {
      unint64_t v16 = 0;
    }
    uint64_t v17 = (char *)(v16 + v15);
    v12[v16] = v7 >> 5;
    unint64_t v10 = &v12[v16 + 1];
    if (v9 == (unsigned char *)v11)
    {
      v16 += (unint64_t)v12;
    }
    else
    {
      char v18 = &v9[~v11];
      do
      {
        char v19 = *--v9;
        (v18--)[v16] = v19;
      }
      while (v9 != (unsigned char *)v11);
      uint64_t v9 = (unsigned char *)*a2;
    }
    *a2 = v16;
    a2[1] = (unint64_t)v10;
    a2[2] = (unint64_t)v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v9 = v7 >> 5;
    unint64_t v10 = v9 + 1;
  }
  a2[1] = (unint64_t)v10;
  char v20 = *a1;
  uint64_t v62 = a1[1];
  if (*a1 != v62)
  {
    while (1)
    {
      if (*((void *)v20 + 2) - *((void *)v20 + 1) > 0xFFuLL) {
        return 1;
      }
      char v21 = *v20;
      unint64_t v22 = a2[2];
      if ((unint64_t)v10 < v22)
      {
        unsigned char *v10 = v21;
        uint64_t v23 = v10 + 1;
        goto LABEL_45;
      }
      unint64_t v24 = *a2;
      uint64_t v25 = &v10[-*a2];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) < 0) {
        goto LABEL_87;
      }
      unint64_t v27 = v22 - v24;
      if (2 * v27 > v26) {
        unint64_t v26 = 2 * v27;
      }
      size_t v28 = v27 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v26;
      unint64_t v29 = v28 ? (unint64_t)operator new(v28) : 0;
      uint64_t v30 = &v25[v29];
      unint64_t v31 = (char *)(v29 + v28);
      char v32 = &v25[v29];
      *char v32 = v21;
      uint64_t v23 = v32 + 1;
      if (v10 == (unsigned char *)v24) {
        break;
      }
      uint64_t v33 = &v10[~v24];
      do
      {
        char v34 = *--v10;
        (v33--)[v29] = v34;
      }
      while (v10 != (unsigned char *)v24);
      unint64_t v10 = (unsigned char *)*a2;
      *a2 = v29;
      a2[1] = (unint64_t)v23;
      a2[2] = (unint64_t)v31;
      if (v10) {
        goto LABEL_44;
      }
LABEL_45:
      a2[1] = (unint64_t)v23;
      int v35 = *((_DWORD *)v20 + 4) - *((_DWORD *)v20 + 2);
      unint64_t v36 = a2[2];
      if ((unint64_t)v23 >= v36)
      {
        unint64_t v38 = *a2;
        uint64_t v39 = &v23[-*a2];
        unint64_t v40 = (unint64_t)(v39 + 1);
        if ((uint64_t)(v39 + 1) < 0) {
          goto LABEL_87;
        }
        unint64_t v41 = v36 - v38;
        if (2 * v41 > v40) {
          unint64_t v40 = 2 * v41;
        }
        if (v41 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v42 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v42 = v40;
        }
        if (v42) {
          unint64_t v43 = (unint64_t)operator new(v42);
        }
        else {
          unint64_t v43 = 0;
        }
        uint64_t v44 = &v39[v43];
        uint64_t v45 = (char *)(v43 + v42);
        uint64_t v46 = &v39[v43];
        *uint64_t v46 = v35;
        uint64_t v37 = v46 + 1;
        if (v23 == (unsigned char *)v38)
        {
          *a2 = (unint64_t)v44;
          a2[1] = (unint64_t)v37;
          a2[2] = (unint64_t)v45;
        }
        else
        {
          std::string::size_type v47 = &v23[~v38];
          do
          {
            char v48 = *--v23;
            (v47--)[v43] = v48;
          }
          while (v23 != (unsigned char *)v38);
          uint64_t v23 = (unsigned char *)*a2;
          *a2 = v43;
          a2[1] = (unint64_t)v37;
          a2[2] = (unint64_t)v45;
          if (!v23) {
            goto LABEL_63;
          }
        }
        operator delete(v23);
      }
      else
      {
        *uint64_t v23 = v35;
        uint64_t v37 = v23 + 1;
      }
LABEL_63:
      a2[1] = (unint64_t)v37;
      uint64_t v49 = (char *)*((void *)v20 + 1);
      size_t v50 = (char *)*((void *)v20 + 2);
      if (v49 != v50)
      {
        while (1)
        {
          char v51 = *v49;
          unint64_t v52 = a2[2];
          if ((unint64_t)v37 >= v52)
          {
            unint64_t v53 = *a2;
            size_t v54 = &v37[-*a2];
            unint64_t v55 = (unint64_t)(v54 + 1);
            if ((uint64_t)(v54 + 1) < 0) {
              goto LABEL_87;
            }
            unint64_t v56 = v52 - v53;
            if (2 * v56 > v55) {
              unint64_t v55 = 2 * v56;
            }
            if (v56 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v57 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v57 = v55;
            }
            if (v57) {
              unint64_t v58 = (unint64_t)operator new(v57);
            }
            else {
              unint64_t v58 = 0;
            }
            long long v59 = (char *)(v58 + v57);
            v54[v58] = v51;
            unint64_t v10 = &v54[v58 + 1];
            if (v37 == (unsigned char *)v53)
            {
              *a2 = (unint64_t)&v54[v58];
              a2[1] = (unint64_t)v10;
              a2[2] = (unint64_t)v59;
            }
            else
            {
              long long v60 = &v37[~v53];
              do
              {
                char v61 = *--v37;
                (v60--)[v58] = v61;
              }
              while (v37 != (unsigned char *)v53);
              uint64_t v37 = (unsigned char *)*a2;
              *a2 = v58;
              a2[1] = (unint64_t)v10;
              a2[2] = (unint64_t)v59;
              if (!v37) {
                goto LABEL_82;
              }
            }
            operator delete(v37);
          }
          else
          {
            *uint64_t v37 = v51;
            unint64_t v10 = v37 + 1;
          }
LABEL_82:
          a2[1] = (unint64_t)v10;
          ++v49;
          uint64_t v37 = v10;
          if (v49 == v50) {
            goto LABEL_85;
          }
        }
      }
      unint64_t v10 = v37;
LABEL_85:
      v20 += 32;
      if (v20 == v62) {
        return 0;
      }
    }
    *a2 = (unint64_t)v30;
    a2[1] = (unint64_t)v23;
    a2[2] = (unint64_t)v31;
LABEL_44:
    operator delete(v10);
    goto LABEL_45;
  }
  return 0;
}

uint64_t sub_1003E1C68(char *a1, _WORD *__dst)
{
  __dst[4] = 0;
  *(void *)long long __dst = 0;
  int __src = 16390;
  unint64_t v4 = sub_1003E0514((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003E0514(a1, 1uLL, v4, 1);
  unint64_t v6 = sub_1003E0514(a1 + 1, 1uLL, v5, 1);
  unint64_t v7 = sub_1003E0514(a1 + 4, 4uLL, v6, 1);
  if (__dst + 5 >= (_WORD *)v7)
  {
    if (__dst + 5 > (_WORD *)v7) {
      sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"buildSleepEnableCommandPacket");
    }
    return 0;
  }
  else
  {
    sub_1003A9600("%s: Memory bounds of array exceeded.", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"buildSleepEnableCommandPacket");
    return 1;
  }
}

uint64_t sub_1003E1D40(char *a1, unsigned char *__dst)
{
  __dst[4] = 0;
  *(_DWORD *)long long __dst = 0;
  int __src = 16397;
  unint64_t v4 = sub_1003E0514((char *)&__src, 4uLL, __dst, 1);
  unint64_t v5 = sub_1003E0514(a1, 1uLL, v4, 1);
  if (__dst + 5 >= v5)
  {
    if (__dst + 5 > v5) {
      sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildSetNBSARStateCommandPacket");
    }
    return 0;
  }
  else
  {
    sub_1003A9600("%s: Memory bounds of array exceeded.", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildSetNBSARStateCommandPacket");
    return 1;
  }
}

uint64_t sub_1003E1DF0(int a1, char *__dst)
{
  *(_DWORD *)long long __dst = 0;
  uint64_t v2 = __dst + 4;
  int __src = 16467;
  uint64_t v3 = sub_1003E0514((char *)&__src, 4uLL, __dst, 1);
  if (v2 >= v3)
  {
    if (v2 > v3) {
      sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"buildAlishaGetCapCommandPacket");
    }
    return 0;
  }
  else
  {
    sub_1003A9600("%s: Memory bounds of array exceeded.", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"buildAlishaGetCapCommandPacket");
    return 1;
  }
}

uint64_t sub_1003E1E80(char *a1, void *__dst)
{
  __dst[4] = 0;
  *(_OWORD *)long long __dst = 0u;
  *((_OWORD *)__dst + 1) = 0u;
  int __src = 16466;
  uint64_t v4 = sub_1003E0514((char *)&__src, 4uLL, __dst, 1);
  uint64_t v5 = sub_1003E0514(a1, 4uLL, v4, 1);
  uint64_t v6 = sub_1003E0514(a1 + 4, 0x20uLL, v5, 1);
  if (__dst + 5 >= (void *)v6)
  {
    if (__dst + 5 > (void *)v6) {
      sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"buildAlishaDbgSetKeyCommandPacket");
    }
    return 0;
  }
  else
  {
    sub_1003A9600("%s: Memory bounds of array exceeded.", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"buildAlishaDbgSetKeyCommandPacket");
    return 1;
  }
}

uint64_t sub_1003E1F48(char *a1, char *__dst)
{
  *(void *)long long __dst = 0;
  uint64_t v3 = __dst + 8;
  int __src = 16465;
  uint64_t v4 = sub_1003E0514((char *)&__src, 4uLL, __dst, 1);
  uint64_t v5 = sub_1003E0514(a1, 4uLL, v4, 1);
  if (v3 >= v5)
  {
    if (v3 > v5) {
      sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildAlishaGetKeyCommandPacket");
    }
    return 0;
  }
  else
  {
    sub_1003A9600("%s: Memory bounds of array exceeded.", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"buildAlishaGetKeyCommandPacket");
    return 1;
  }
}

uint64_t sub_1003E1FF0(char *a1, _OWORD *__dst)
{
  __dst[1] = 0u;
  __dst[2] = 0u;
  *long long __dst = 0u;
  int __src = 16464;
  uint64_t v4 = sub_1003E0514((char *)&__src, 4uLL, __dst, 1);
  uint64_t v5 = sub_1003E0514(a1, 2uLL, v4, 1);
  uint64_t v6 = sub_1003E0514(a1 + 2, 1uLL, v5, 1);
  uint64_t v7 = sub_1003E0514(a1 + 3, 1uLL, v6, 1);
  uint64_t v8 = sub_1003E0514(a1 + 4, 1uLL, v7, 1);
  uint64_t v9 = sub_1003E0514(a1 + 5, 1uLL, v8, 1);
  uint64_t v10 = sub_1003E0514(a1 + 6, 1uLL, v9, 1);
  uint64_t v11 = sub_1003E0514(a1 + 7, 1uLL, v10, 1);
  uint64_t v12 = sub_1003E0514(a1 + 8, 4uLL, v11, 1);
  uint64_t v13 = sub_1003E0514(a1 + 12, 2uLL, v12, 1);
  uint64_t v14 = sub_1003E0514(a1 + 14, 2uLL, v13, 1);
  size_t v15 = sub_1003E0514(a1 + 16, 2uLL, v14, 1);
  unint64_t v16 = sub_1003E0514(a1 + 18, 1uLL, v15, 1);
  uint64_t v17 = sub_1003E0514(a1 + 19, 1uLL, v16, 1);
  char v18 = sub_1003E0514(a1 + 20, 1uLL, v17, 1);
  char v19 = sub_1003E0514(a1 + 21, 1uLL, v18, 1);
  char v20 = sub_1003E0514(a1 + 24, 4uLL, v19, 1);
  char v21 = sub_1003E0514(a1 + 28, 4uLL, v20, 1);
  unint64_t v22 = sub_1003E0514(a1 + 32, 1uLL, v21, 1);
  uint64_t v23 = sub_1003E0514(a1 + 33, 1uLL, v22, 1);
  unint64_t v24 = sub_1003E0514(a1 + 34, 1uLL, v23, 1);
  uint64_t v25 = sub_1003E0514(a1 + 35, 1uLL, v24, 1);
  unint64_t v26 = sub_1003E0514(a1 + 36, 2uLL, v25, 1);
  unint64_t v27 = sub_1003E0514(a1 + 40, 8uLL, v26, 1);
  if (__dst + 3 >= (_OWORD *)v27)
  {
    if (__dst + 3 > (_OWORD *)v27) {
      sub_10000486C("%s: Memory bounds of array not reached. struct member not copied?", v28, v29, v30, v31, v32, v33, v34, (uint64_t)"buildAlishaRangeEnableCommandPacket");
    }
    return 0;
  }
  else
  {
    sub_1003A9600("%s: Memory bounds of array exceeded.", v28, v29, v30, v31, v32, v33, v34, (uint64_t)"buildAlishaRangeEnableCommandPacket");
    return 1;
  }
}

uint64_t sub_1003E225C@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  long long v23 = 0u;
  long long v24 = 0u;
  int v25 = 1065353216;
  long long v20 = 0u;
  long long v21 = 0u;
  int v22 = 1065353216;
  long long v17 = 0u;
  long long v18 = 0u;
  int v19 = 1065353216;
  unint64_t v16 = &v23;
  size_t v15 = &v20;
  uint64_t v14 = &v17;
  if (a1 <= 99)
  {
    switch(a1)
    {
      case 0:
        uint64_t v12 = &unk_1005F321F;
        if (a3 - 2 < 0xC || a3 - 998 < 2 || !a3) {
          goto LABEL_153;
        }
        if (a3 != 1) {
          goto LABEL_154;
        }
        uint64_t v12 = &unk_1005EDF97;
        goto LABEL_153;
      case 1:
        if (a3 > 0xD)
        {
          if (a3 - 998 >= 2) {
            goto LABEL_154;
          }
LABEL_88:
          uint64_t v12 = &unk_1005FD72F;
          goto LABEL_153;
        }
        if (a3 != 2) {
          goto LABEL_88;
        }
        uint64_t v12 = &unk_1005F84A7;
        goto LABEL_153;
      case 2:
        if (a3 > 0xD)
        {
          if (a3 - 998 >= 2) {
            goto LABEL_154;
          }
        }
        else if (a3 == 3)
        {
          uint64_t v12 = &unk_1006029B7;
LABEL_153:
          sub_1003E34F0((uint64_t *)&v16, v12);
          goto LABEL_154;
        }
        uint64_t v12 = &unk_100607C3F;
        goto LABEL_153;
      case 3:
        uint64_t v12 = &unk_10060CEC7;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_146;
          case 4u:
            goto LABEL_153;
          case 5u:
            uint64_t v12 = &unk_10061214F;
            goto LABEL_153;
          case 6u:
            uint64_t v12 = &unk_1006173D7;
            goto LABEL_153;
          case 7u:
            uint64_t v12 = &unk_10061C65F;
            goto LABEL_153;
          case 8u:
            uint64_t v12 = &unk_1006218E7;
            goto LABEL_153;
          case 9u:
            uint64_t v12 = &unk_100626B6F;
            goto LABEL_153;
          case 0xAu:
            uint64_t v12 = &unk_10062BDF7;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2) {
              goto LABEL_154;
            }
LABEL_146:
            uint64_t v12 = &unk_10063107F;
            break;
        }
        goto LABEL_153;
      case 4:
        uint64_t v12 = &unk_100636307;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_142;
          case 4u:
            goto LABEL_153;
          case 5u:
            uint64_t v12 = &unk_10063B58F;
            goto LABEL_153;
          case 6u:
            uint64_t v12 = &unk_100640817;
            goto LABEL_153;
          case 7u:
            uint64_t v12 = &unk_100645A9F;
            goto LABEL_153;
          case 8u:
            uint64_t v12 = &unk_10064AD27;
            goto LABEL_153;
          case 9u:
            uint64_t v12 = &unk_10064FFAF;
            goto LABEL_153;
          case 0xAu:
            uint64_t v12 = &unk_100655237;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2) {
              goto LABEL_154;
            }
LABEL_142:
            uint64_t v12 = &unk_10065A4BF;
            break;
        }
        goto LABEL_153;
      case 5:
        uint64_t v12 = &unk_10065F747;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_150;
          case 4u:
            goto LABEL_153;
          case 5u:
            uint64_t v12 = &unk_1006649CF;
            goto LABEL_153;
          case 6u:
            uint64_t v12 = &unk_100669C57;
            goto LABEL_153;
          case 7u:
            uint64_t v12 = &unk_10066EEDF;
            goto LABEL_153;
          case 8u:
            uint64_t v12 = &unk_100674167;
            goto LABEL_153;
          case 9u:
            uint64_t v12 = &unk_1006793EF;
            goto LABEL_153;
          case 0xAu:
            uint64_t v12 = &unk_10067E677;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2) {
              goto LABEL_154;
            }
LABEL_150:
            uint64_t v12 = &unk_1006838FF;
            break;
        }
        goto LABEL_153;
      case 6:
        uint64_t v12 = &unk_100688B87;
        switch(a3)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 0xBu:
          case 0xCu:
          case 0xDu:
            goto LABEL_152;
          case 4u:
            goto LABEL_153;
          case 5u:
            uint64_t v12 = &unk_10068DE0F;
            goto LABEL_153;
          case 6u:
            uint64_t v12 = &unk_100693097;
            goto LABEL_153;
          case 7u:
            uint64_t v12 = &unk_10069831F;
            goto LABEL_153;
          case 8u:
            uint64_t v12 = &unk_10069D5A7;
            goto LABEL_153;
          case 9u:
            uint64_t v12 = &unk_1006A282F;
            goto LABEL_153;
          case 0xAu:
            uint64_t v12 = &unk_1006A7AB7;
            goto LABEL_153;
          default:
            if (a3 - 998 >= 2) {
              goto LABEL_154;
            }
LABEL_152:
            uint64_t v12 = &unk_1006ACD3F;
            break;
        }
        goto LABEL_153;
      case 7:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 540;
            goto LABEL_239;
          }
          uint64_t v12 = &unk_1006C69E7;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_125;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_1006CBC6F;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_1006D0EF7;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_125:
              uint64_t v12 = &unk_1006D617F;
              break;
          }
        }
        else
        {
          uint64_t v12 = &unk_1006B1FC7;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_127;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_1006B724F;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_1006BC4D7;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_127:
              uint64_t v12 = &unk_1006C175F;
              break;
          }
        }
        goto LABEL_153;
      case 8:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 611;
            goto LABEL_239;
          }
          uint64_t v12 = &unk_1006EFE27;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_136;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_1006F50AF;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_1006FA337;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_136:
              uint64_t v12 = &unk_1006FF5BF;
              break;
          }
        }
        else
        {
          uint64_t v12 = &unk_1006DB407;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_140;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_1006E068F;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_1006E5917;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_140:
              uint64_t v12 = &unk_1006EAB9F;
              break;
          }
        }
        goto LABEL_153;
      case 9:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 682;
            goto LABEL_239;
          }
          uint64_t v12 = &unk_100719267;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_121;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_10071E4EF;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_100723777;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_121:
              uint64_t v12 = &unk_1007289FF;
              break;
          }
        }
        else
        {
          uint64_t v12 = &unk_100704847;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_123;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_100709ACF;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_10070ED57;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_123:
              uint64_t v12 = &unk_100713FDF;
              break;
          }
        }
        goto LABEL_153;
      case 10:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 753;
            goto LABEL_239;
          }
          uint64_t v12 = &unk_1007426A7;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_134;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_10074792F;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_10074CBB7;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_134:
              uint64_t v12 = &unk_100751E3F;
              break;
          }
        }
        else
        {
          uint64_t v12 = &unk_10072DC87;
          switch(a3)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 7u:
            case 8u:
            case 9u:
            case 0xAu:
              goto LABEL_138;
            case 0xBu:
              goto LABEL_153;
            case 0xCu:
              uint64_t v12 = &unk_100732F0F;
              goto LABEL_153;
            case 0xDu:
              uint64_t v12 = &unk_100738197;
              goto LABEL_153;
            default:
              if (a3 - 998 >= 2) {
                goto LABEL_154;
              }
LABEL_138:
              uint64_t v12 = &unk_10073D41F;
              break;
          }
        }
        goto LABEL_153;
      case 11:
        uint64_t v7 = &unk_1007570C7;
        goto LABEL_100;
      case 12:
        uint64_t v7 = &unk_100759A0F;
        goto LABEL_100;
      case 13:
        uint64_t v7 = &unk_10075C357;
        goto LABEL_100;
      case 14:
        uint64_t v7 = &unk_10075EC9F;
LABEL_100:
        if (a3 >= 0xE && a3 - 998 >= 2) {
          goto LABEL_154;
        }
        goto LABEL_101;
      case 15:
        sub_1003E37D0((uint64_t *)&v16, byte_1004C6EF5);
        sub_1003E3940((uint64_t *)&v15, byte_1004DB0BD);
        uint64_t v6 = &unk_1004DB1F1;
        goto LABEL_132;
      case 16:
        sub_1003E37D0((uint64_t *)&v16, byte_1004DB47F);
        sub_1003E3940((uint64_t *)&v15, byte_1004EF647);
        uint64_t v6 = &unk_1004EF77B;
        goto LABEL_132;
      case 17:
      case 23:
        sub_1003E37D0((uint64_t *)&v16, byte_100569B45);
        sub_1003E3940((uint64_t *)&v15, byte_10057DD0D);
        uint64_t v6 = &unk_10057DE41;
        goto LABEL_132;
      case 18:
        sub_1003E37D0((uint64_t *)&v16, byte_10057E0CF);
        sub_1003E3940((uint64_t *)&v15, byte_100592297);
        uint64_t v6 = &unk_1005923CB;
        goto LABEL_132;
      case 19:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 900;
            goto LABEL_239;
          }
          sub_1003E37D0((uint64_t *)&v16, byte_100503F93);
          sub_1003E3940((uint64_t *)&v15, byte_10051815B);
          uint64_t v6 = &unk_10051828F;
        }
        else
        {
          sub_1003E37D0((uint64_t *)&v16, byte_1004EFA09);
          sub_1003E3940((uint64_t *)&v15, byte_100503BD1);
          uint64_t v6 = &unk_100503D05;
        }
        goto LABEL_132;
      case 20:
        if (a2)
        {
          if (a2 != 1)
          {
            if (a2 != 2) {
              goto LABEL_154;
            }
            uint64_t v8 = "false";
            int v9 = 928;
            goto LABEL_239;
          }
          sub_1003E37D0((uint64_t *)&v16, byte_10052CAA7);
          sub_1003E3940((uint64_t *)&v15, byte_100540C6F);
          uint64_t v6 = &unk_100540DA3;
        }
        else
        {
          sub_1003E37D0((uint64_t *)&v16, byte_10051851D);
          sub_1003E3940((uint64_t *)&v15, byte_10052C6E5);
          uint64_t v6 = &unk_10052C819;
        }
LABEL_132:
        sub_1003E3AB4((uint64_t *)&v14, v6);
        goto LABEL_154;
      case 21:
        sub_1003E37D0((uint64_t *)&v16, byte_100541031);
        sub_1003E3940((uint64_t *)&v15, byte_1005551F9);
        uint64_t v6 = &unk_10055532D;
        goto LABEL_132;
      case 22:
        sub_1003E37D0((uint64_t *)&v16, byte_1005555BB);
        sub_1003E3940((uint64_t *)&v15, byte_100569783);
        uint64_t v6 = &unk_1005698B7;
        goto LABEL_132;
      default:
        goto LABEL_154;
    }
  }
  if (a1 <= 199)
  {
    switch(a1)
    {
      case 'd':
        if (!a3)
        {
          uint64_t v5 = &unk_1007615E7;
LABEL_59:
          sub_1003E3C28((uint64_t *)&v16, v5);
          goto LABEL_154;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 969;
        break;
      case 'e':
        if (!a3)
        {
          uint64_t v5 = &unk_100762A8F;
          goto LABEL_59;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 974;
        break;
      case 'f':
        if (!a3)
        {
          uint64_t v5 = &unk_100763F37;
          goto LABEL_59;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 979;
        break;
      case 'g':
        if (!a3)
        {
          uint64_t v5 = &unk_1007653DF;
          goto LABEL_59;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 984;
        break;
      case 'h':
        if (!a3)
        {
          uint64_t v5 = &unk_100766887;
          goto LABEL_59;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 989;
        break;
      case 'i':
        if (!a3)
        {
          uint64_t v5 = &unk_100767D2F;
          goto LABEL_59;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 994;
        break;
      case 'j':
        if (!a3)
        {
          uint64_t v5 = &unk_1007691D7;
          goto LABEL_59;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 999;
        break;
      case 'k':
        if (!a3)
        {
          uint64_t v5 = &unk_10076A67F;
          goto LABEL_59;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1004;
        break;
      case 'l':
        if (!a3)
        {
          uint64_t v11 = &unk_10076BB27;
          goto LABEL_66;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1009;
        break;
      case 'm':
        if (!a3)
        {
          uint64_t v11 = &unk_10076CBAF;
          goto LABEL_66;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1014;
        break;
      case 'n':
        if (!a3)
        {
          uint64_t v11 = &unk_10076DC37;
          goto LABEL_66;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1019;
        break;
      case 'o':
        if (!a3)
        {
          uint64_t v11 = &unk_10076ECBF;
LABEL_66:
          sub_1003E3D98((uint64_t *)&v16, v11);
          goto LABEL_154;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1024;
        break;
      case 'p':
        if (!a3)
        {
          uint64_t v11 = &unk_10076FD47;
          goto LABEL_66;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1029;
        break;
      case 'q':
        if (!a3)
        {
          sub_1003E3F08((uint64_t *)&v16, byte_100592659);
          sub_1003E4078((uint64_t *)&v15, byte_10059C741);
          uint64_t v10 = &unk_10059C7DD;
          goto LABEL_114;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1034;
        break;
      case 'r':
        if (!a3)
        {
          sub_1003E3F08((uint64_t *)&v16, byte_10059C927);
          sub_1003E4078((uint64_t *)&v15, byte_1005A6A0F);
          uint64_t v10 = &unk_1005A6AAB;
          goto LABEL_114;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1043;
        break;
      case 's':
        if (!a3)
        {
          sub_1003E3F08((uint64_t *)&v16, byte_1005A6BF5);
          sub_1003E4078((uint64_t *)&v15, byte_1005B0CDD);
          uint64_t v10 = &unk_1005B0D79;
          goto LABEL_114;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1052;
        break;
      case 't':
        if (!a3)
        {
          sub_1003E3F08((uint64_t *)&v16, byte_1005B0EC3);
          sub_1003E4078((uint64_t *)&v15, byte_1005BAFAB);
          uint64_t v10 = &unk_1005BB047;
LABEL_114:
          sub_1003E41BC((uint64_t *)&v14, v10);
          goto LABEL_154;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1061;
        break;
      case 'u':
        if (!a3)
        {
          sub_1003E3F08((uint64_t *)&v16, byte_1005BB191);
          sub_1003E4078((uint64_t *)&v15, byte_1005C5279);
          uint64_t v10 = &unk_1005C5315;
          goto LABEL_114;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1070;
        break;
      case 'v':
        if (!a3)
        {
          sub_1003E3F08((uint64_t *)&v16, byte_1005C545F);
          sub_1003E4078((uint64_t *)&v15, byte_1005CF547);
          uint64_t v10 = &unk_1005CF5E3;
          goto LABEL_114;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1079;
        break;
      case 'w':
        if (!a3)
        {
          sub_1003E3F08((uint64_t *)&v16, byte_1005CF72D);
          sub_1003E4078((uint64_t *)&v15, byte_1005D9815);
          uint64_t v10 = &unk_1005D98B1;
          goto LABEL_114;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1088;
        break;
      case 'x':
        if (!a3)
        {
          sub_1003E3F08((uint64_t *)&v16, byte_1005D99FB);
          sub_1003E4078((uint64_t *)&v15, byte_1005E3AE3);
          uint64_t v10 = &unk_1005E3B7F;
          goto LABEL_114;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1097;
        break;
      case 'y':
        if (!a3)
        {
          sub_1003E3F08((uint64_t *)&v16, byte_1005E3CC9);
          sub_1003E4078((uint64_t *)&v15, byte_1005EDDB1);
          uint64_t v10 = &unk_1005EDE4D;
          goto LABEL_114;
        }
        uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
        int v9 = 1106;
        break;
      default:
        goto LABEL_154;
    }
LABEL_239:
    __assert_rtn("ConstructRegulatoryTxPowerTableMap", "roseRegulatoryCompliancePowerTables.cpp", v9, v8);
  }
  if (a1 > 996)
  {
    if ((a1 == 997 || a1 == 999) && a3)
    {
      uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
      int v9 = 1126;
      goto LABEL_239;
    }
  }
  else
  {
    if (a1 == 200)
    {
      if (!a3)
      {
        sub_1003E4330((uint64_t *)&v16);
        goto LABEL_154;
      }
      uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
      int v9 = 1115;
      goto LABEL_239;
    }
    if (a1 != 201) {
      goto LABEL_154;
    }
    if (a3)
    {
      uint64_t v8 = "accessoryType == AccessoryType::NO_ACCESSORY";
      int v9 = 1120;
      goto LABEL_239;
    }
    uint64_t v7 = &unk_100771A37;
LABEL_101:
    sub_1003E3660((uint64_t *)&v16, v7);
  }
LABEL_154:
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  *(unsigned char *)(a4 + 40) = 0;
  *(unsigned char *)(a4 + 80) = 0;
  *(unsigned char *)(a4 + 88) = 0;
  *(unsigned char *)(a4 + 128) = 0;
  if (&v23 != (long long *)a4)
  {
    *(_DWORD *)(a4 + 32) = v25;
    sub_1003E4C4C((void *)a4, (void *)v24, 0);
  }
  if (*((void *)&v21 + 1)) {
    sub_1003E4484(a4 + 40, (uint64_t)&v20);
  }
  if (*((void *)&v18 + 1)) {
    sub_1003E44E4(a4 + 88, (uint64_t)&v17);
  }
  sub_1001FBF38((uint64_t)&v17);
  sub_1001FBF38((uint64_t)&v20);
  return sub_1001FBF38((uint64_t)&v23);
}

void sub_1003E3164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_1003CD114(v5);
  sub_1001FBF38((uint64_t)va);
  sub_1001FBF38((uint64_t)va1);
  sub_1001FBF38(v6 - 80);
  _Unwind_Resume(a1);
}

void sub_1003E34F0(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  long long v23 = a2;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t)&a2[2641 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      long long v24 = v4;
      int v9 = sub_1003E4544(v8, v4, (uint64_t)&unk_1004BC2F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          long long v18 = (char *)sub_100056BF0((uint64_t)(v9 + 5), v17);
        }
        else {
          long long v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v7;
        uint64_t v12 = v19 + 1;
        long long v21 = (char *)v9[3];
        long long v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          long long v20 = (char *)v9[3];
        }
        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        uint64_t *v10 = v7;
        uint64_t v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }
    while (v5 != 80);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[2641 * v3];
  }
  while (v3 != 8);
}

void sub_1003E3660(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  long long v23 = a2;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t)&a2[1321 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      long long v24 = v4;
      int v9 = sub_1003E4544(v8, v4, (uint64_t)&unk_1004BC2F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          long long v18 = (char *)sub_100056BF0((uint64_t)(v9 + 5), v17);
        }
        else {
          long long v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v7;
        uint64_t v12 = v19 + 1;
        long long v21 = (char *)v9[3];
        long long v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          long long v20 = (char *)v9[3];
        }
        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        uint64_t *v10 = v7;
        uint64_t v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }
    while (v5 != 40);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[1321 * v3];
  }
  while (v3 != 8);
}

void sub_1003E37D0(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  long long v23 = a2;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t)&a2[10297 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      long long v24 = v4;
      int v9 = sub_1003E4544(v8, v4, (uint64_t)&unk_1004BC2F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          long long v18 = (char *)sub_100056BF0((uint64_t)(v9 + 5), v17);
        }
        else {
          long long v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v7;
        uint64_t v12 = v19 + 1;
        long long v21 = (char *)v9[3];
        long long v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          long long v20 = (char *)v9[3];
        }
        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        uint64_t *v10 = v7;
        uint64_t v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }
    while (v5 != 312);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[10297 * v3];
  }
  while (v3 != 8);
}

void sub_1003E3940(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  long long v23 = a2;
  do
  {
    uint64_t v5 = 0;
    uint64_t v24 = v3;
    uint64_t v6 = (uint64_t)&a2[77 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      int v25 = v4;
      int v9 = sub_1003E479C(v8, v4, (uint64_t)&unk_1004BC2F8, &v25);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          long long v18 = (char *)sub_100056BF0((uint64_t)(v9 + 5), v17);
        }
        else {
          long long v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v7;
        uint64_t v12 = v19 + 1;
        long long v21 = (char *)v9[3];
        long long v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          long long v20 = (char *)v9[3];
        }
        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        uint64_t *v10 = v7;
        uint64_t v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 38 * v5;
    }
    while (v5 != 2);
    a2 = v23;
    uint64_t v3 = v24 + 1;
    uint64_t v4 = &v23[77 * v24 + 77];
  }
  while (v24 != 3);
}

void sub_1003E3AB4(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  long long v23 = a2;
  do
  {
    uint64_t v5 = 0;
    uint64_t v24 = v3;
    uint64_t v6 = (uint64_t)&a2[109 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      int v25 = v4;
      int v9 = sub_1003E49F4(v8, v4, (uint64_t)&unk_1004BC2F8, &v25);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          long long v18 = (char *)sub_100056BF0((uint64_t)(v9 + 5), v17);
        }
        else {
          long long v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v7;
        uint64_t v12 = v19 + 1;
        long long v21 = (char *)v9[3];
        long long v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          long long v20 = (char *)v9[3];
        }
        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        uint64_t *v10 = v7;
        uint64_t v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 18 * v5;
    }
    while (v5 != 6);
    a2 = v23;
    uint64_t v3 = v24 + 1;
    uint64_t v4 = &v23[109 * v24 + 109];
  }
  while (v24 != 5);
}

void sub_1003E3C28(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  long long v23 = a2;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t)&a2[661 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      uint64_t v24 = v4;
      int v9 = sub_1003E4544(v8, v4, (uint64_t)&unk_1004BC2F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          long long v18 = (char *)sub_100056BF0((uint64_t)(v9 + 5), v17);
        }
        else {
          long long v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v7;
        uint64_t v12 = v19 + 1;
        long long v21 = (char *)v9[3];
        long long v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          long long v20 = (char *)v9[3];
        }
        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        uint64_t *v10 = v7;
        uint64_t v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }
    while (v5 != 20);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[661 * v3];
  }
  while (v3 != 8);
}

void sub_1003E3D98(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  long long v23 = a2;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t)&a2[529 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      uint64_t v24 = v4;
      int v9 = sub_1003E4544(v8, v4, (uint64_t)&unk_1004BC2F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          long long v18 = (char *)sub_100056BF0((uint64_t)(v9 + 5), v17);
        }
        else {
          long long v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v7;
        uint64_t v12 = v19 + 1;
        long long v21 = (char *)v9[3];
        long long v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          long long v20 = (char *)v9[3];
        }
        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        uint64_t *v10 = v7;
        uint64_t v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }
    while (v5 != 16);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[529 * v3];
  }
  while (v3 != 8);
}

void sub_1003E3F08(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  long long v23 = a2;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t)&a2[5149 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      uint64_t v24 = v4;
      int v9 = sub_1003E4544(v8, v4, (uint64_t)&unk_1004BC2F8, &v24);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          long long v18 = (char *)sub_100056BF0((uint64_t)(v9 + 5), v17);
        }
        else {
          long long v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v7;
        uint64_t v12 = v19 + 1;
        long long v21 = (char *)v9[3];
        long long v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          long long v20 = (char *)v9[3];
        }
        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        uint64_t *v10 = v7;
        uint64_t v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 33 * v5;
    }
    while (v5 != 156);
    ++v3;
    a2 = v23;
    uint64_t v4 = &v23[5149 * v3];
  }
  while (v3 != 8);
}

void sub_1003E4078(uint64_t *a1, unsigned char *a2)
{
  uint64_t v2 = a2;
  for (uint64_t i = 0; i != 4; a2 = &v2[39 * i])
  {
    uint64_t v5 = (uint64_t)&v2[39 * i + 1];
    uint64_t v6 = *a1;
    long long v21 = a2;
    uint64_t v7 = sub_1003E479C(v6, a2, (uint64_t)&unk_1004BC2F8, &v21);
    uint64_t v8 = (uint64_t *)v7[4];
    unint64_t v9 = v7[5];
    if ((unint64_t)v8 >= v9)
    {
      uint64_t v11 = v7[3];
      uint64_t v12 = ((uint64_t)v8 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        sub_1000267C4();
      }
      uint64_t v13 = v9 - v11;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        uint64_t v16 = (char *)sub_100056BF0((uint64_t)(v7 + 5), v15);
      }
      else {
        uint64_t v16 = 0;
      }
      unint64_t v17 = (uint64_t *)&v16[8 * v12];
      *unint64_t v17 = v5;
      uint64_t v10 = v17 + 1;
      int v19 = (char *)v7[3];
      long long v18 = (char *)v7[4];
      if (v18 != v19)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *--unint64_t v17 = v20;
        }
        while (v18 != v19);
        long long v18 = (char *)v7[3];
      }
      v7[3] = v17;
      v7[4] = v10;
      v7[5] = &v16[8 * v15];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *uint64_t v8 = v5;
      uint64_t v10 = v8 + 1;
    }
    v7[4] = v10;
    ++i;
  }
}

void sub_1003E41BC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2;
  long long v23 = a2;
  do
  {
    uint64_t v5 = 0;
    uint64_t v24 = v3;
    uint64_t v6 = (uint64_t)&a2[55 * v3 + 1];
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *a1;
      int v25 = v4;
      unint64_t v9 = sub_1003E49F4(v8, v4, (uint64_t)&unk_1004BC2F8, &v25);
      uint64_t v10 = (uint64_t *)v9[4];
      unint64_t v11 = v9[5];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v9[3];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v15 = v11 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          long long v18 = (char *)sub_100056BF0((uint64_t)(v9 + 5), v17);
        }
        else {
          long long v18 = 0;
        }
        int v19 = (uint64_t *)&v18[8 * v14];
        *int v19 = v7;
        uint64_t v12 = v19 + 1;
        long long v21 = (char *)v9[3];
        uint64_t v20 = (char *)v9[4];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--int v19 = v22;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)v9[3];
        }
        void v9[3] = v19;
        v9[4] = v12;
        v9[5] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        uint64_t *v10 = v7;
        uint64_t v12 = v10 + 1;
      }
      v9[4] = v12;
      ++v5;
      uint64_t v7 = v6 + 18 * v5;
    }
    while (v5 != 3);
    a2 = v23;
    uint64_t v3 = v24 + 1;
    uint64_t v4 = &v23[55 * v24 + 55];
  }
  while (v24 != 5);
}

void sub_1003E4330(uint64_t *a1)
{
  uint64_t v2 = &unk_100770DCF;
  do
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = v2 + 397;
    do
    {
      uint64_t v5 = *a1;
      uint64_t v20 = v2;
      uint64_t v6 = sub_1003E4544(v5, v2, (uint64_t)&unk_1004BC2F8, &v20);
      uint64_t v7 = (void *)v6[4];
      unint64_t v8 = v6[5];
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v10 = v6[3];
        uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v12 = v8 - v10;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          uint64_t v15 = (char *)sub_100056BF0((uint64_t)(v6 + 5), v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v15[8 * v11];
        *(void *)uint64_t v16 = v3;
        unint64_t v9 = v16 + 8;
        long long v18 = (char *)v6[3];
        unint64_t v17 = (char *)v6[4];
        if (v17 != v18)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          unint64_t v17 = (char *)v6[3];
        }
        void v6[3] = v16;
        v6[4] = v9;
        v6[5] = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *uint64_t v7 = v3;
        unint64_t v9 = v7 + 1;
      }
      v6[4] = v9;
      v3 += 33;
    }
    while (v3 != v4);
    v2 += 397;
  }
  while (v4 != (unsigned char *)&unk_100771A37);
}

uint64_t sub_1003E4484(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      sub_1003E538C((void *)a1, *(void **)(a2 + 16), 0);
    }
  }
  else
  {
    sub_1003D0718(a1, a2);
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t sub_1003E44E4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (a1 != a2)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      sub_1003E55D8((void *)a1, *(void **)(a2 + 16), 0);
    }
  }
  else
  {
    sub_1003D0ACC(a1, a2);
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

void *sub_1003E4544(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  void v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *long long v21 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1003E4780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_1003D0658(v11, v10);
  _Unwind_Resume(a1);
}

void *sub_1003E479C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  void v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *long long v21 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1003E49D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_1003D0658(v11, v10);
  _Unwind_Resume(a1);
}

void *sub_1003E49F4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  void v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *long long v21 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1003E4C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_1003D0658(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1003E4C4C(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_1003E4D74(v13, (uint64_t)(v4 + 2));
        uint64_t v10 = (void *)*v8;
        unint64_t v11 = *((unsigned __int8 *)v8 + 16);
        v8[1] = v11;
        unint64_t v12 = (void *)sub_1003E4DC4((uint64_t)a1, v11, (unsigned __int8 *)v8 + 16);
        sub_1003E4F1C(a1, v8, v12);
        unint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        unint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    sub_1001FBF74((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_1003E5268(a1, (uint64_t)(v4 + 2));
    unint64_t v4 = (void *)*v4;
  }
}

void sub_1003E4D44(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1001FBF74(v1, v2);
  __cxa_rethrow();
}

void sub_1003E4D60(_Unwind_Exception *a1)
{
}

unsigned char **sub_1003E4D74(unsigned char **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  *unint64_t v4 = *(unsigned char *)a2;
  if (v3 != (char *)(a2 + 8)) {
    sub_10015E510(v3, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return a1;
}

uint64_t sub_1003E4DC4(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_1003E5004(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void *)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = *(void *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = *(void *)(v16 + 8);
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && *(unsigned __int8 *)(v16 + 16) == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *sub_1003E4F1C(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_1003E5004(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_1003E50F4(a1, prime);
    }
  }
}

void sub_1003E50F4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000257D8();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (uint64_t *)*v13;
            }
            while (v13 && *((unsigned __int8 *)i + 16) == *((unsigned __int8 *)v13 + 16));
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_1003E5268(void *a1, uint64_t a2)
{
  sub_1003E52E8((uint64_t)a1, a2, (uint64_t)v8);
  int8x8_t v3 = (void *)v8[0];
  unint64_t v5 = (unsigned __int8 *)(v8[0] + 16);
  unint64_t v4 = *(unsigned __int8 *)(v8[0] + 16);
  *(void *)(v8[0] + 8) = v4;
  uint64_t v6 = (void *)sub_1003E4DC4((uint64_t)a1, v4, v5);
  sub_1003E4F1C(a1, v3, v6);
  return v3;
}

void sub_1003E52C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_1003D0658((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003E52E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t v6 = 0;
  v6[1] = 0;
  *((unsigned char *)v6 + 16) = *(unsigned char *)a2;
  v6[4] = 0;
  v6[5] = 0;
  void v6[3] = 0;
  uint64_t result = sub_100236044(v6 + 3, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(unsigned char *)(a3 + 16) = 1;
  v6[1] = *((unsigned __int8 *)v6 + 16);
  return result;
}

void sub_1003E5370(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1003D0658(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1003E538C(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      BOOL v10 = v8;
    }
    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_1003E4D74(v13, (uint64_t)(v4 + 2));
        BOOL v10 = (void *)*v8;
        unint64_t v11 = *((unsigned __int8 *)v8 + 16);
        v8[1] = v11;
        unint64_t v12 = (void *)sub_1003E4DC4((uint64_t)a1, v11, (unsigned __int8 *)v8 + 16);
        sub_1003E4F1C(a1, v8, v12);
        unint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        unint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    sub_1001FBF74((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_1003E54B4(a1, (uint64_t)(v4 + 2));
    unint64_t v4 = (void *)*v4;
  }
}

void sub_1003E5484(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1001FBF74(v1, v2);
  __cxa_rethrow();
}

void sub_1003E54A0(_Unwind_Exception *a1)
{
}

void *sub_1003E54B4(void *a1, uint64_t a2)
{
  sub_1003E5534((uint64_t)a1, a2, (uint64_t)v8);
  uint64_t v3 = (void *)v8[0];
  uint64_t v5 = (unsigned __int8 *)(v8[0] + 16);
  unint64_t v4 = *(unsigned __int8 *)(v8[0] + 16);
  *(void *)(v8[0] + 8) = v4;
  uint64_t v6 = (void *)sub_1003E4DC4((uint64_t)a1, v4, v5);
  sub_1003E4F1C(a1, v3, v6);
  return v3;
}

void sub_1003E5510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_1003D0658((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003E5534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t v6 = 0;
  v6[1] = 0;
  *((unsigned char *)v6 + 16) = *(unsigned char *)a2;
  v6[4] = 0;
  v6[5] = 0;
  void v6[3] = 0;
  uint64_t result = sub_1002360C0(v6 + 3, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(unsigned char *)(a3 + 16) = 1;
  v6[1] = *((unsigned __int8 *)v6 + 16);
  return result;
}

void sub_1003E55BC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1003D0658(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1003E55D8(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      BOOL v10 = v8;
    }
    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_1003E4D74(v13, (uint64_t)(v4 + 2));
        BOOL v10 = (void *)*v8;
        unint64_t v11 = *((unsigned __int8 *)v8 + 16);
        v8[1] = v11;
        unint64_t v12 = (void *)sub_1003E4DC4((uint64_t)a1, v11, (unsigned __int8 *)v8 + 16);
        sub_1003E4F1C(a1, v8, v12);
        unint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        unint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    sub_1001FBF74((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_1003E5700(a1, (uint64_t)(v4 + 2));
    unint64_t v4 = (void *)*v4;
  }
}

void sub_1003E56D0(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1001FBF74(v1, v2);
  __cxa_rethrow();
}

void sub_1003E56EC(_Unwind_Exception *a1)
{
}

void *sub_1003E5700(void *a1, uint64_t a2)
{
  sub_1003E5780((uint64_t)a1, a2, (uint64_t)v8);
  uint64_t v3 = (void *)v8[0];
  uint64_t v5 = (unsigned __int8 *)(v8[0] + 16);
  unint64_t v4 = *(unsigned __int8 *)(v8[0] + 16);
  *(void *)(v8[0] + 8) = v4;
  uint64_t v6 = (void *)sub_1003E4DC4((uint64_t)a1, v4, v5);
  sub_1003E4F1C(a1, v3, v6);
  return v3;
}

void sub_1003E575C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_1003D0658((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003E5780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t v6 = 0;
  v6[1] = 0;
  *((unsigned char *)v6 + 16) = *(unsigned char *)a2;
  v6[4] = 0;
  v6[5] = 0;
  void v6[3] = 0;
  uint64_t result = sub_10023613C(v6 + 3, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(unsigned char *)(a3 + 16) = 1;
  v6[1] = *((unsigned __int8 *)v6 + 16);
  return result;
}

void sub_1003E5808(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1003D0658(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1003E5824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 1177));
  if (v9)
  {
    sub_10000486C("packetReceived: ignoring packet because fIgnorePacketsUntilFirmwareDownloaded == true", a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    int v10 = a3;
    if (*(unsigned char *)(a1 + 1176))
    {
      std::mutex::lock((std::mutex *)(a1 + 8));
      size_t v13 = (void *)(a1 + 72);
      if (v10) {
        sub_1003E6548((uint64_t)v13, a2);
      }
      else {
        sub_1003E65EC(v13, a2);
      }
      std::mutex::unlock((std::mutex *)(a1 + 8));
    }
    else
    {
      unsigned int v14 = sub_1003E0498((unsigned int **)a2);
      unint64_t v15 = sub_1003E0470(v14);
      int v52 = v15;
      __int16 v53 = WORD2(v15);
      if (sub_1003A73B8(*(_DWORD *)(a1 + 1180), 5))
      {
        sub_100054E28((uint64_t)v49);
        uint64_t v16 = sub_100056628(v50, (uint64_t)"===========", 11);
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
        int v17 = std::locale::use_facet(&v47, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
        unint64_t v18 = sub_100056628(v50, (uint64_t)"RX Packet:", 10);
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
        unint64_t v19 = std::locale::use_facet(&v47, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
        LOBYTE(v47.__locale_) = 48;
        unint64_t v20 = sub_1001771C8(v50, (char *)&v47);
        *(_DWORD *)((char *)v20 + *(void *)(*v20 - 24) + 8) = *(_DWORD *)((unsigned char *)v20 + *(void *)(*v20 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        BOOL v21 = sub_100056628(v50, (uint64_t)"Message Type: ", 14);
        *(void *)((char *)v21 + *(void *)(*v21 - 24) + 24) = 2;
        std::ostream::operator<<();
        int v22 = sub_100056628(v50, (uint64_t)" Group ID: ", 11);
        *(void *)((char *)v22 + *(void *)(*v22 - 24) + 24) = 2;
        std::ostream::operator<<();
        long long v23 = sub_100056628(v50, (uint64_t)" Message ID: ", 13);
        *(void *)((char *)v23 + *(void *)(*v23 - 24) + 24) = 2;
        uint64_t v24 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        int v25 = std::locale::use_facet(&v47, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
        std::stringbuf::str();
        unint64_t v26 = *(unsigned int **)a2;
        uint64_t v27 = *(void *)(a2 + 8);
        sub_100004950(__p, "===========\n");
        sub_1003E0ABC((uint64_t)&v47, (uint64_t)v26, v27 - (void)v26, 4u, (uint64_t)__p);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
        if (v48 < 0) {
          operator delete(v47.__locale_);
        }
        *(void *)((char *)v49
        v50[0] = v28;
        if (v51 < 0) {
          operator delete((void *)v50[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
      }
      if (sub_1003A6E80((unsigned __int8 *)&v52))
      {
        int v36 = sub_1003A6E94((unsigned __int8 *)&v52);
        switch(v36)
        {
          case 3:
            if (v10) {
              sub_1003A9600("Unexpected event received", v37, v38, v39, v40, v41, v42, v43, v44);
            }
            sub_1003E6760(a1, (uint64_t)&v52, (void *)a2);
            break;
          case 2:
            if ((v10 & 1) == 0) {
              sub_1003A9600("Unexpected response received", v37, v38, v39, v40, v41, v42, v43, v44);
            }
            sub_1003E66A0(a1, (uint64_t)&v52, a2);
            break;
          case 1:
            sub_1003A9600("Packet received with unexpected message type 0x%02x (command), groupId 0x%02x, messageId 0x%02x", v37, v38, v39, v40, v41, v42, v43, v52);
            break;
          default:
            sub_1003A9600("Packet received with unknown message type 0x%02x, groupId 0x%02x, messageId 0x%02x, isResponse %u", v37, v38, v39, v40, v41, v42, v43, v52);
            break;
        }
      }
      else
      {
        sub_1003A9600("Packet received with unknown message type 0x%02x, groupId 0x%02x, messageId 0x%02x", v29, v30, v31, v32, v33, v34, v35, v52);
      }
    }
  }
}

void sub_1003E5E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19.__locale_);
  }
  sub_100055100((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_1003E5E98(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  sub_1003A1960((void *)(a1 + 600), &v2);
}

void sub_1003E5EC8(std::mutex *this)
{
  sig = (void *)this[2].__m_.__sig;
  if (sig)
  {
    *(void *)this[2].__m_.__opaque = sig;
    operator delete(sig);
  }
  uint64_t v3 = *(void **)&this[1].__m_.__opaque[32];
  if (v3)
  {
    *(void *)&this[1].__m_.__opaque[40] = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  std::mutex::~mutex(this);
}

void sub_1003E5F28(std::mutex *this)
{
  long long v2 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  std::mutex::~mutex(this);
}

void sub_1003E5F68(uint64_t a1)
{
  *(void *)a1 = off_100864990;
  *(void *)(a1 + 8) = 850045863;
  *(void *)(a1 + 120) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 232) = 850045863;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 281) = 0u;
  sub_100004950(&__p, "RoseCommunicationMgrQueue");
  sub_10039D6B4(a1 + 304, &__p);
}

void sub_1003E6210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, std::mutex *a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_100236AB8(&a19);
  sub_100236914(&a23);
  sub_1003A6CF4(v29);
  sub_1003AB4CC(v28);
  sub_1003E5EC8(v32);
  sub_1003E5F28(a9);
  sub_10039D73C(v31);
  std::mutex::~mutex(v30);
  sub_1003EC178((void *)(v27 + 184));
  std::mutex::~mutex(a10);
  sub_1003EC6B0((void *)(v27 + 72));
  std::mutex::~mutex(a11);
  _Unwind_Resume(a1);
}

void sub_1003E62AC()
{
  sub_1003AB4D0((void *)(v0 - 128));
  JUMPOUT(0x1003E625CLL);
}

void sub_1003E62BC()
{
}

void sub_1003E62C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  JUMPOUT(0x1003E6264);
}

void sub_1003E62D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  JUMPOUT(0x1003E626CLL);
}

void sub_1003E62EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1003E6274);
}

void sub_1003E6304()
{
}

uint64_t sub_1003E6310(uint64_t a1)
{
  *(void *)a1 = off_100864990;
  sub_1003E6404(a1);
  sub_100236AB8((void *)(a1 + 1128));
  sub_100236914((void *)(a1 + 1096));
  if (*(char *)(a1 + 1087) < 0) {
    operator delete(*(void **)(a1 + 1064));
  }
  sub_1003A6CF4((std::thread *)(a1 + 968));
  sub_1003AB4CC((void *)(a1 + 752));
  long long v2 = *(void **)(a1 + 728);
  if (v2)
  {
    *(void *)(a1 + 736) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 704);
  if (v3)
  {
    *(void *)(a1 + 712) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 672);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 600));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 576);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 504));
  sub_10039D73C(a1 + 304);
  std::mutex::~mutex((std::mutex *)(a1 + 232));
  sub_1003EC178((void *)(a1 + 184));
  std::mutex::~mutex((std::mutex *)(a1 + 120));
  sub_1003EC6B0((void *)(a1 + 72));
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_1003E6404(uint64_t a1)
{
  sub_1003DAB88(a1 + 1040);
  sub_1003AA000(a1 + 752);
  long long v2 = *(NSObject **)(a1 + 1192);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 1192) = 0;
  }
  *(unsigned char *)(a1 + 296) = 0;
}

void sub_1003E644C(uint64_t a1)
{
  sub_1003E6310(a1);

  operator delete();
}

uint64_t sub_1003E6484(uint64_t a1, char a2, char a3)
{
  if (*(unsigned char *)(a1 + 296)) {
    return 1;
  }
  dispatch_queue_t v7 = dispatch_queue_create("RoseQueue", 0);
  *(void *)(a1 + 1192) = v7;
  if (!v7)
  {
    unint64_t v15 = "failed to create dispatch queue";
LABEL_12:
    sub_1003A9600(v15, v8, v9, v10, v11, v12, v13, v14, v16);
    return 0;
  }
  if ((sub_1003D8E04(a1 + 1040, (uint64_t)v7, a2, a3) & 1) == 0)
  {
    unint64_t v15 = "Failed to connect to rose debug manager";
    goto LABEL_12;
  }
  if ((sub_1003A9BE4(a1 + 752, *(void *)(a1 + 1192), v9, v10, v11, v12, v13, v14) & 1) == 0)
  {
    unint64_t v15 = "Failed to connect to rose service";
    goto LABEL_12;
  }
  if ((a2 & 1) == 0) {
    sub_1003AB20C(a1 + 752, v8, v9, v10, v11, v12, v13, v14);
  }
  uint64_t result = 1;
  *(unsigned char *)(a1 + 296) = 1;
  return result;
}

int64x2_t sub_1003E6548(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_1003EC808((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0xAA));
  unint64_t v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 == *v6) {
    uint64_t v8 = *(v6 - 1) + 4080;
  }
  *(void *)(v8 - 24) = 0;
  *(void *)(v8 - 16) = 0;
  uint64_t v9 = (void *)(v8 - 24);
  v9[2] = 0;
  sub_10016D488(v9, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1004C4010);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void *sub_1003E65EC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1003ECB24(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (void *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  *uint64_t v8 = 0;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  int64x2_t result = sub_10016D488(v8, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  ++a1[5];
  return result;
}

void sub_1003E66A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  int v7 = *(_DWORD *)a2;
  __int16 v8 = *(_WORD *)(a2 + 4);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  long long __p = 0;
  sub_10016D488(&__p, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  sub_1003ECE3C((void *)(a1 + 184), &v7);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  std::mutex::unlock(v6);
}

void sub_1003E6734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_1003E6760(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_1003A73B8(*(_DWORD *)(a1 + 1180), 5)) {
    sub_10000486C("got event packet with groupID 0x%02x, message ID 0x%02x", v6, v7, v8, v9, v10, v11, v12, *(unsigned __int8 *)(a2 + 1));
  }
  int v13 = *(unsigned __int16 *)(a2 + 2);
  if (v13 == 515)
  {
    LOWORD(__dst) = 0;
    int v52 = 0;
    sub_1003E0514((char *)(*a3 + 4), 2uLL, &__dst, 1);
    sub_1003E0514((char *)(*a3 + 6), 2uLL, (unsigned char *)&v52 + 2, 1);
    sub_1003E0514((char *)(*a3 + 8), 2uLL, &v52, 1);
    sub_10000486C("Range Complete Event: status (0x%04x), session (%d), reason (0x%04x)", v14, v15, v16, v17, v18, v19, v20, (unsigned __int16)__dst);
    switch((__int16)v52)
    {
      case 15:
        uint64_t v28 = "Range Complete Event occurred for reason LOCAL_SESSION_REMOVAL_SUCCESS";
        goto LABEL_22;
      case 16:
        uint64_t v28 = "Range Complete Event occurred for reason LOCAL_SESSION_DISABLE_SUCCESS";
        goto LABEL_22;
      case 17:
        uint64_t v28 = "Range Complete Event occurred for reason SESSION_COMPLETED";
        goto LABEL_22;
      case 18:
        uint64_t v28 = "Range Complete Event occurred for reason SESSION_ALREADY_ACTIVE";
        goto LABEL_22;
      case 19:
        uint64_t v28 = "Range Complete Event occurred for reason SESSION_ALREADY_DISABLED";
LABEL_22:
        sub_10000486C(v28, v21, v22, v23, v24, v25, v26, v27, v50);
        break;
      default:
        sub_1003A9600("Range Complete Event occurred for reason (0x%04x)", v21, v22, v23, v24, v25, v26, v27, (unsigned __int16)v52);
        break;
    }
    goto LABEL_29;
  }
  if (*(unsigned char *)(a2 + 1) == 2)
  {
    if (v13 == 144)
    {
      HIWORD(v52) = 0;
      uint64_t __dst = 0;
      sub_1003E0514((char *)(*a3 + 4), 2uLL, (unsigned char *)&v52 + 2, 1);
      sub_1003E0514((char *)(*a3 + 6), 8uLL, &__dst, 1);
      if (HIWORD(v52) || __dst || !*(void *)(a1 + 1184))
      {
        sub_1003A9600("Factory FDR Trust Evaluation Complete Event: status (0x%04x), trust evaluation error (0x%016llx)", v43, v44, v45, v46, v47, v48, v49, HIWORD(v52));
        goto LABEL_29;
      }
      sub_10000486C("Factory FDR Trust Evaluation Complete Event: status (0x%04x), trust evaluation error (0x%016llx)", v43, v44, v45, v46, v47, v48, v49, 0);
    }
    else
    {
      if (v13 != 128) {
        goto LABEL_29;
      }
      LOWORD(__dst) = 0;
      HIWORD(v52) = 0;
      sub_1003E0514((char *)(*a3 + 4), 2uLL, &__dst, 1);
      sub_1003E0514((char *)(*a3 + 6), 2uLL, (unsigned char *)&v52 + 2, 1);
      if ((_WORD)__dst || HIWORD(v52) != 32 || !*(void *)(a1 + 1184))
      {
        sub_1003A9600("Factory Command Complete Event: status (0x%04x), completed command OID (0x%x)", v36, v37, v38, v39, v40, v41, v42, (unsigned __int16)__dst);
        goto LABEL_29;
      }
      sub_10000486C("Factory Command Complete Event: status (0x%04x), completed command OID (0x%x)", v36, v37, v38, v39, v40, v41, v42, 0);
    }
LABEL_33:
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 1184));
    return;
  }
  if (!*(unsigned char *)(a2 + 1) && v13 == 525)
  {
    LOWORD(__dst) = 0;
    sub_1003E0514((char *)(*a3 + 4), 2uLL, &__dst, 1);
    if (!(_WORD)__dst && *(void *)(a1 + 1184))
    {
      sub_10000486C("UWB Init Done Event: status (0x%04x)", v29, v30, v31, v32, v33, v34, v35, 0);
      goto LABEL_33;
    }
    sub_1003A9600("UWB Init Done Event: status (0x%04x)", v29, v30, v31, v32, v33, v34, v35, (unsigned __int16)__dst);
  }
LABEL_29:
  sub_10039EFBC(a1 + 600, a2, a3, v8, v9, v10, v11, v12);
}

BOOL sub_1003E6A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 120);
  std::mutex::lock((std::mutex *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 224);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 192) + ((*(void *)(a1 + 216) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * (*(void *)(a1 + 216) & 0x7FLL);
    int v7 = *(_DWORD *)v6;
    *(_WORD *)(a2 + 4) = *(_WORD *)(v6 + 4);
    *(_DWORD *)a2 = v7;
    if (v6 != a2) {
      sub_1001BE070((void *)(a2 + 8), *(char **)(v6 + 8), *(char **)(v6 + 16), *(void *)(v6 + 16) - *(void *)(v6 + 8));
    }
    sub_1003ED20C((void *)(a1 + 184));
  }
  std::mutex::unlock(v4);
  return v5 != 0;
}

void sub_1003E6AE8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_1003E6AFC@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  __int16 v21 = 0;
  int v20 = 0;
  __p[1] = 0;
  uint64_t v23 = 0;
  __p[0] = 0;
  do
  {
    if (sub_1003E6A48(a1, (uint64_t)&v20))
    {
      if (HIWORD(v20) == a2 && BYTE1(v20) == a3)
      {
        *(_DWORD *)a5 = v20;
        *(_WORD *)(a5 + 4) = v21;
        double result = *(double *)__p;
        *(_OWORD *)(a5 + 8) = *(_OWORD *)__p;
        *(void *)(a5 + 24) = v23;
        *(unsigned char *)(a5 + 32) = 1;
        return result;
      }
      sub_1003A9600("waitForResponse: unexpected response at front of responseQueue: expected groupID %02x messageID %02x, got groupID %02x messageID %02x", v10, v11, v12, v13, v14, v15, v16, a3);
    }
    if (a4 >= 10) {
      unsigned int v18 = 10;
    }
    else {
      unsigned int v18 = a4;
    }
    if (a4 < 1) {
      break;
    }
    __ns.__rep_ = 1000000 * v18;
    std::this_thread::sleep_for (&__ns);
    a4 -= v18;
  }
  while (a4 >= 0);
  sub_1003A9600("Timed out waiting for response: groupID %02x messageId %02x", v10, v11, v12, v13, v14, v15, v16, a3);
  *(unsigned char *)a5 = 0;
  *(unsigned char *)(a5 + 32) = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return result;
}

void sub_1003E6C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003E6C4C(uint64_t a1, unsigned __int8 *a2)
{
  sub_1003E6CE8(a1, a2, 2000, v10);
  int v8 = v12;
  if (v12)
  {
    sub_1003D3364((void *)(a1 + 504), (uint64_t)v10, (uint64_t *)__p, v3, v4, v5, v6, v7);
    if (v12)
    {
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  return v8 != 0;
}

void sub_1003E6CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1003E6CE8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, unsigned char *a4@<X8>)
{
  if ((char)a2[23] < 0)
  {
    size_t v7 = *((void *)a2 + 1);
    if (v7 > 0x1F) {
      goto LABEL_9;
    }
    long long __dst = 0u;
    long long v14 = 0u;
    a2 = *(unsigned __int8 **)a2;
    if (v7) {
LABEL_4:
    }
      memmove(&__dst, a2, v7);
  }
  else
  {
    size_t v7 = a2[23];
    if (a2[23] >= 0x20u)
    {
LABEL_9:
      *a4 = 0;
      a4[32] = 0;
      return;
    }
    long long __dst = 0u;
    long long v14 = 0u;
    if (v7) {
      goto LABEL_4;
    }
  }
  if (sub_1003E0CFC((char *)&__dst, v12)) {
    goto LABEL_9;
  }
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)v12, 0x24uLL, 0, v8, v9, v10, v11))
  {
    *a4 = 0;
    a4[32] = 0;
  }
  else
  {
    sub_1003E6AFC(a1, 0, 0, a3, (uint64_t)a4);
  }
  std::mutex::unlock((std::mutex *)(a1 + 232));
}

void sub_1003E6E00(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1003E6E1C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1003E6CE8(a1, a2, 2000, v7);
  if (v9 && !sub_1003A6F80((uint64_t)v7))
  {
    if (!v9) {
      sub_10000AE44();
    }
    sub_1003D421C(v8, __p);
    sub_1003EC2BC((void *)a3, (long long *)__p);
    sub_10000AED4((uint64_t)&v6);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 112) = 0;
  }
  if (v9)
  {
    if (v8[0])
    {
      v8[1] = v8[0];
      operator delete(v8[0]);
    }
  }
}

void sub_1003E6ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001BD608((uint64_t)va);
  if (*(unsigned char *)(v2 - 24))
  {
    uint64_t v4 = *(void **)(v2 - 48);
    if (v4)
    {
      *(void *)(v2 - 40) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003E6F08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 296))
  {
    unsigned int v18 = "connect to Rose before sending commands";
LABEL_15:
    sub_1003A9600(v18, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v19);
    return 1;
  }
  if (!a2 || a3 - 49 <= 0xFFFFFFFFFFFFFFD2)
  {
    uint64_t v19 = "sendRoseCommand";
    unsigned int v18 = "%s: Invalid payload %zu";
    goto LABEL_15;
  }
  if (sub_1003A73B8(*(_DWORD *)(a1 + 1180), 5))
  {
    sub_100054E28((uint64_t)v24);
    unsigned __int8 v12 = sub_100056628(v25, (uint64_t)"===========", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    uint64_t v13 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    long long v14 = sub_100056628(v25, (uint64_t)"TX Packet:", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
    uint64_t v15 = std::locale::use_facet(&v22, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    sub_100004950(__p, "===========");
    sub_1003E0ABC((uint64_t)&v22, a2, a3, 4u, (uint64_t)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v22.__locale_);
    }
    *(void *)((char *)v24
    v25[0] = v16;
    if (v26 < 0) {
      operator delete((void *)v25[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  return sub_1003AA730(a1 + 752, a2, a3, a4) ^ 1;
}

void sub_1003E725C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::locale a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18.__locale_);
  }
  sub_100055100((uint64_t)&a24);
  _Unwind_Resume(a1);
}

BOOL sub_1003E72B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000486C("%s", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"sendRangeConfigCommand");
  *(_DWORD *)((char *)v23 + 7) = 0;
  v23[0] = 0;
  char v21 = 0;
  v22[0] = 0;
  *(void *)((char *)v22 + 7) = 0;
  uint64_t v15 = *(void *)a2;
  long long __p = 0;
  uint64_t v18 = v15;
  int v19 = *(_DWORD *)(a2 + 8);
  if (&v18 != (uint64_t *)a2) {
    sub_1001D09E4((char *)&__p, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 1);
  }
  LODWORD(v23[0]) = *(_DWORD *)(a2 + 40);
  BYTE4(v23[0]) = *(unsigned char *)(a2 + 44);
  BYTE5(v23[0]) = *(unsigned char *)(a2 + 48);
  HIWORD(v23[0]) = *(_WORD *)(a2 + 46);
  int v16 = sub_1003E73A8(a1, (unsigned __int16 *)&v18, 2000, v10, v11, v12, v13, v14);
  if (__p)
  {
    char v21 = __p;
    operator delete(__p);
  }
  return v16 == 0;
}

void sub_1003E738C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003E73A8(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  sub_10000486C("%s", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (uint64_t)"sendRangingConfigCommandPacket");
  size_t v54 = 0;
  unint64_t v55 = 0;
  uint64_t v56 = 0;
  int v18 = *((_DWORD *)sub_100007D00() + 187);
  if (!v18)
  {
    sub_1003A9600("RangingConfig unknown HSI version", v11, (uint64_t)v12, v13, v14, v15, v16, v17, v45);
    goto LABEL_10;
  }
  if (v18 != 1)
  {
    if (v18 == 2)
    {
      uint64_t v19 = sub_1003E0FD8((uint64_t)a2, &v54, v12, v13, v14, v15, v16, v17);
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v27 = 1;
    goto LABEL_11;
  }
  uint64_t v19 = sub_1003E0DD4((uint64_t)a2, &v54, v12, v13, v14, v15, v16, v17);
LABEL_7:
  uint64_t v27 = v19;
  if (v19) {
    goto LABEL_11;
  }
  sub_10000486C("Sending RangingConfig command, session ID %hu", v20, v21, v22, v23, v24, v25, v26, *a2);
  v51[0] = 0;
  char v53 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)v54, (v55 - v54), 0, v28, v29, v30, v31))
  {
    sub_1003A9600("RangingConfig response failed", v32, v33, v34, v35, v36, v37, v38, v46);
    std::mutex::unlock((std::mutex *)(a1 + 232));
    goto LABEL_10;
  }
  sub_10000486C("Ranging configured, session ID %hu", v32, v33, v34, v35, v36, v37, v38, *a2);
  sub_1003E6AFC(a1, 1, 0, v8, (uint64_t)&v47);
  sub_1003EC34C((uint64_t)v51, &v47);
  if (v50 && __p)
  {
    uint64_t v49 = __p;
    operator delete(__p);
  }
  std::mutex::unlock((std::mutex *)(a1 + 232));
  if (!v53) {
    goto LABEL_10;
  }
  sub_1003D3364((void *)(a1 + 504), (uint64_t)v51, (uint64_t *)v52, v40, v41, v42, v43, v44);
  if (v53 && v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  uint64_t v27 = 0;
LABEL_11:
  if (v54)
  {
    unint64_t v55 = v54;
    operator delete(v54);
  }
  return v27;
}

void sub_1003E7554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19 && __p) {
    operator delete(__p);
  }
  uint64_t v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(void *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003E75AC(uint64_t a1, uint64_t a2)
{
  *(_WORD *)uint64_t v3 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  return sub_1003E75F4(a1, v3, 2000) == 0;
}

uint64_t sub_1003E75F4(uint64_t a1, char *a2, int a3)
{
  uint64_t v13 = sub_1003E1244(a2, __dst);
  if (v13) {
    return v13;
  }
  sub_10000486C("Sending RangingEnable command, sessionID %hu", v6, v7, v8, v9, v10, v11, v12, *(unsigned __int16 *)a2);
  v36[0] = 0;
  char v38 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)__dst, 0x16uLL, 0, v15, v16, v17, v18))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 2, 0, a3, (uint64_t)&v32);
    sub_1003EC34C((uint64_t)v36, &v32);
    if (v35 && __p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v38)
    {
      sub_10000486C("Ranging session enabled, sessionID %hu", v19, v20, v21, v22, v23, v24, v25, *(unsigned __int16 *)a2);
      sub_1003D3364((void *)(a1 + 504), (uint64_t)v36, (uint64_t *)v37, v26, v27, v28, v29, v30);
      uint64_t v13 = 0;
      goto LABEL_11;
    }
    sub_1003A9600("RangingEnable response failed", v19, v20, v21, v22, v23, v24, v25, v31);
  }
  uint64_t v13 = 1;
LABEL_11:
  if (v38 && v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  return v13;
}

void sub_1003E7764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_100012C10(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003E77B4(uint64_t a1, __int16 *a2)
{
  __int16 v3 = *a2;
  char v4 = *((unsigned char *)a2 + 2);
  return sub_1003E77F4(a1, (char *)&v3, 2000) == 0;
}

uint64_t sub_1003E77F4(uint64_t a1, char *a2, int a3)
{
  uint64_t v13 = sub_1003E1330(a2, __dst);
  if (v13) {
    return v13;
  }
  sub_10000486C("Sending RangingDisable command, sessionID %hu", v6, v7, v8, v9, v10, v11, v12, *(unsigned __int16 *)a2);
  v36[0] = 0;
  char v38 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)__dst, 7uLL, 0, v15, v16, v17, v18))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 3, 0, a3, (uint64_t)&v32);
    sub_1003EC34C((uint64_t)v36, &v32);
    if (v35 && __p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v38)
    {
      sub_10000486C("Ranging session disabled, sessionID %hu", v19, v20, v21, v22, v23, v24, v25, *(unsigned __int16 *)a2);
      sub_1003D3364((void *)(a1 + 504), (uint64_t)v36, (uint64_t *)v37, v26, v27, v28, v29, v30);
      uint64_t v13 = 0;
      goto LABEL_11;
    }
    sub_1003A9600("RangingDisable response failed", v19, v20, v21, v22, v23, v24, v25, v31);
  }
  uint64_t v13 = 1;
LABEL_11:
  if (v38 && v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  return v13;
}

void sub_1003E793C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  std::mutex::unlock(v19);
  _Unwind_Resume(a1);
}

BOOL sub_1003E7974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000486C("%s", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"sendTestNBAMMSRangeEnableCommand");
  __int16 v11 = *(_WORD *)a2;
  char v12 = *(unsigned char *)(a2 + 2);
  __int16 v13 = *(_WORD *)(a2 + 3);
  int v14 = *(_DWORD *)(a2 + 6);
  char v15 = *(unsigned char *)(a2 + 10);
  __int16 v16 = *(_WORD *)(a2 + 11);
  __int16 v17 = *(_WORD *)(a2 + 14);
  char v18 = *(unsigned char *)(a2 + 16);
  __int16 v19 = *(_WORD *)(a2 + 18);
  char v20 = *(unsigned char *)(a2 + 20);
  char v21 = *(unsigned char *)(a2 + 21);
  __int16 v22 = *(unsigned __int8 *)(a2 + 48);
  uint64_t v23 = *(void *)(a2 + 24);
  int v24 = *(_DWORD *)(a2 + 32);
  __int16 v25 = *(_WORD *)(a2 + 36);
  uint64_t v26 = *(void *)(a2 + 40);
  return sub_1003E7A7C(a1, (char *)&v11, 2000) == 0;
}

uint64_t sub_1003E7A7C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v13 = sub_1003E13F4(a2, __dst);
  if (v13) {
    return v13;
  }
  sub_10000486C("Sending test NMI range enable command, sessionID %hu", v6, v7, v8, v9, v10, v11, v12, *(unsigned __int16 *)a2);
  v38[0] = 0;
  char v40 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  int v37 = 0;
  uint64_t v13 = sub_1003E7CD4(a1, __dst, 0x56uLL, a3, &v37, v15, v16, v17);
  if (v13)
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
    goto LABEL_19;
  }
  int v18 = v37;
  if (v37 >= 2)
  {
    do
    {
      sub_1003E6AFC(a1, 1, 4, a3, (uint64_t)&v33);
      sub_1003EC34C((uint64_t)v38, &v33);
      if (v36 && __p)
      {
        char v35 = __p;
        operator delete(__p);
      }
    }
    while (v18-- > 2);
    int v37 = 1;
    goto LABEL_13;
  }
  if (v37 == 1)
  {
LABEL_13:
    sub_1003E6AFC(a1, 96, 0, a3, (uint64_t)&v33);
    sub_1003EC34C((uint64_t)v38, &v33);
    if (v36 && __p)
    {
      char v35 = __p;
      operator delete(__p);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 232));
  if (v40)
  {
    sub_10000486C("Test NMI ranging session enabled, sessionID %hu", v20, v21, v22, v23, v24, v25, v26, *(unsigned __int16 *)a2);
    sub_1003D3364((void *)(a1 + 504), (uint64_t)v38, (uint64_t *)v39, v27, v28, v29, v30, v31);
    uint64_t v13 = 0;
  }
  else
  {
    sub_1003A9600("TestNMIRangeEnable response failed", v20, v21, v22, v23, v24, v25, v26, v32);
    uint64_t v13 = 1;
  }
LABEL_19:
  if (v40 && v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  return v13;
}

void sub_1003E7C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    sub_100012C10(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003E7CD4(uint64_t a1, const void *a2, size_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  if (!*(unsigned char *)(a1 + 296))
  {
    uint64_t v31 = "connect to Rose before sending multi-part commands";
LABEL_29:
    sub_1003A9600(v31, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)v34);
    return 1;
  }
  if (!a2 || a3 - 137 <= 0xFFFFFFFFFFFFFFA7)
  {
    uint64_t v34 = "sendRoseMultiPartCommand";
    uint64_t v31 = "%s: Invalid payload %zu";
    goto LABEL_29;
  }
  unsigned int v11 = a4;
  LOBYTE(v42[0]) = 0;
  sub_1001B0664(v49, a3, v42);
  memmove(v49[0], a2, a3);
  sub_1003E0578((uint64_t)v49, (uint64_t *)&v47);
  if (sub_1003A73B8(*(_DWORD *)(a1 + 1180), 5))
  {
    sub_100054E28((uint64_t)v42);
    uint64_t v13 = sub_100056628(&v43, (uint64_t)"==================", 18);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    int v14 = std::locale::use_facet(&v40, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v15 = sub_100056628(&v43, (uint64_t)"TX Packet (orig):", 17);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v16 = std::locale::use_facet(&v40, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    sub_100004950(__p, "==================");
    sub_1003E0ABC((uint64_t)&v40, (uint64_t)a2, a3, 4u, (uint64_t)__p);
    if (v39 < 0) {
      operator delete(__p[0]);
    }
    if (v41 < 0) {
      operator delete(v40.__locale_);
    }
    *(void ***)((char *)v42
    uint64_t v43 = v17;
    if (v46 < 0) {
      operator delete(v45);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  int v18 = v47;
  __int16 v19 = (uint64_t *)v48;
  if (v47 == (uint64_t *)v48)
  {
    uint64_t v30 = (uint64_t)v47;
LABEL_31:
    uint64_t v32 = 0;
    *a5 = -1431655765 * ((unint64_t)(v30 - (void)v18) >> 3);
  }
  else
  {
    while (1)
    {
      if (sub_1003A73B8(*(_DWORD *)(a1 + 1180), 5))
      {
        sub_100054E28((uint64_t)v42);
        uint64_t v24 = sub_100056628(&v43, (uint64_t)"===================", 19);
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        uint64_t v25 = std::locale::use_facet(&v40, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale(&v40);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v26 = sub_100056628(&v43, (uint64_t)"TX Packet (split):", 18);
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
        uint64_t v27 = std::locale::use_facet(&v40, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(&v40);
        std::ostream::put();
        std::ostream::flush();
        std::stringbuf::str();
        uint64_t v28 = *v18;
        uint64_t v29 = v18[1];
        sub_100004950(__p, "===================");
        sub_1003E0ABC((uint64_t)&v40, v28, (v29 - v28), 4u, (uint64_t)__p);
        if (v39 < 0) {
          operator delete(__p[0]);
        }
        if (v41 < 0) {
          operator delete(v40.__locale_);
        }
        v42[0] = v37;
        *(void ***)((char *)v42 + (void)*(v37 - 3)) = v36;
        uint64_t v43 = v35;
        if (v46 < 0) {
          operator delete(v45);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
      }
      if (sub_1003E6F08(a1, *v18, v18[1] - *v18, 0, v20, v21, v22, v23)) {
        break;
      }
      if (v11)
      {
        v40.__locale_ = (std::locale::__imp *)(1000000 * v11);
        std::this_thread::sleep_for ((const std::chrono::nanoseconds *)&v40);
      }
      v18 += 3;
      if (v18 == v19)
      {
        int v18 = v47;
        uint64_t v30 = v48;
        goto LABEL_31;
      }
    }
    uint64_t v32 = 1;
  }
  v42[0] = (void **)&v47;
  sub_100149DEC(v42);
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
  return v32;
}

void sub_1003E83B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::locale a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23.__locale_);
  }
  sub_100055100((uint64_t)&a29);
  a29 = v29 - 136;
  sub_100149DEC((void ***)&a29);
  uint64_t v31 = *(void **)(v29 - 112);
  if (v31)
  {
    *(void *)(v29 - 104) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1003E8470(uint64_t a1, char **a2)
{
  long long __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (&__p != (void **)a2) {
    sub_1001BE070(&__p, *a2, a2[1], a2[1] - *a2);
  }
  int v3 = sub_1003E8508(a1, &__p, 2000);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  return v3 == 0;
}

void sub_1003E84EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003E8508(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v5 = sub_1003E1618(a2, (unint64_t *)&v23);
  if (!v5)
  {
    v20[0] = 0;
    char v22 = 0;
    std::mutex::lock((std::mutex *)(a1 + 232));
    if (sub_1003E6F08(a1, (uint64_t)v23, v24 - v23, 0, v6, v7, v8, v9))
    {
      std::mutex::unlock((std::mutex *)(a1 + 232));
LABEL_4:
      uint64_t v5 = 1;
      goto LABEL_13;
    }
    sub_1003E6AFC(a1, 4, 0, a3, (uint64_t)&v16);
    sub_1003EC34C((uint64_t)v20, &v16);
    if (v19 && __p)
    {
      int v18 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v22) {
      goto LABEL_4;
    }
    sub_1003D3364((void *)(a1 + 504), (uint64_t)v20, (uint64_t *)v21, v10, v11, v12, v13, v14);
    if (v22 && v21[0])
    {
      v21[1] = v21[0];
      operator delete(v21[0]);
    }
    uint64_t v5 = 0;
  }
LABEL_13:
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  return v5;
}

void sub_1003E8628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19 && __p) {
    operator delete(__p);
  }
  uint64_t v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(void *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003E8680(uint64_t a1@<X0>, char **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (&v22 != (void **)a2) {
    sub_1001BE070(&v22, *a2, a2[1], a2[1] - *a2);
  }
  long long __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (sub_1003E1618(&v22, (unint64_t *)&__p)) {
    goto LABEL_4;
  }
  v15[0] = 0;
  char v18 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)__p, v20 - (unsigned char *)__p, 0, v7, v8, v9, v10))
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 24) = 0;
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 4, 0, a3, (uint64_t)&v11);
    sub_1003EC34C((uint64_t)v15, &v11);
    if (v14 && v12)
    {
      uint64_t v13 = v12;
      operator delete(v12);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v18)
    {
LABEL_4:
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 24) = 0;
      goto LABEL_7;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_10016D488((void *)a4, v16, (uint64_t)v17, v17 - (unsigned char *)v16);
    *(unsigned char *)(a4 + 24) = 1;
    if (v18 && v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
  }
LABEL_7:
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
}

void sub_1003E87E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20)
{
  if (a18 && __p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  char v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(void *)(v20 - 48) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003E8858(uint64_t a1, uint64_t *a2)
{
  memset(v5, 0, sizeof(v5));
  if (v5 != (char **)a2) {
    sub_1003ED284((uint64_t *)v5, *a2, a2[1], (a2[1] - *a2) >> 5);
  }
  BOOL v3 = sub_1003E88F4(a1, v5, 2000) == 0;
  uint64_t v6 = v5;
  sub_10016D6F0((void ***)&v6);
  return v3;
}

void sub_1003E88D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10016D6F0(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E88F4(uint64_t a1, char **a2, int a3)
{
  uint64_t v6 = a1 + 504;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = off_100864BF8;
  v7[1] = sub_1003D3364;
  void v7[2] = 0;
  v7[3] = v6;
  void v10[3] = v7;
  uint64_t v8 = sub_1003E8A80(a1, a2, (uint64_t)v10, a3);
  sub_100236EEC(v10);
  return v8;
}

void sub_1003E89C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100236EEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1003E89D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  memset(v7, 0, sizeof(v7));
  if (v7 != (char **)a2) {
    sub_1003ED284((uint64_t *)v7, *a2, a2[1], (a2[1] - *a2) >> 5);
  }
  BOOL v5 = sub_1003E8A80(a1, v7, a3, 2000) == 0;
  uint64_t v8 = v7;
  sub_10016D6F0((void ***)&v8);
  return v5;
}

void sub_1003E8A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10016D6F0(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E8A80(uint64_t a1, char **a2, uint64_t a3, int a4)
{
  uint64_t v21 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v7 = sub_1003E1858(a2, (unint64_t *)&v21);
  if (!v7)
  {
    v18[0] = 0;
    char v20 = 0;
    std::mutex::lock((std::mutex *)(a1 + 232));
    if (sub_1003E6F08(a1, (uint64_t)v21, v22 - v21, 0, v8, v9, v10, v11))
    {
      std::mutex::unlock((std::mutex *)(a1 + 232));
LABEL_4:
      uint64_t v7 = 1;
      goto LABEL_5;
    }
    sub_1003E6AFC(a1, 5, 0, a4, (uint64_t)&v14);
    sub_1003EC34C((uint64_t)v18, &v14);
    if (v17 && __p)
    {
      int v16 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v20) {
      goto LABEL_4;
    }
    uint64_t v13 = *(void *)(a3 + 24);
    if (!v13) {
      sub_100027894();
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **))(*(void *)v13 + 48))(v13, v18, v19);
    if (v20 && v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
  }
LABEL_5:
  if (v21)
  {
    char v22 = v21;
    operator delete(v21);
  }
  return v7;
}

void sub_1003E8BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  std::mutex::unlock(v19);
  char v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(void *)(v20 - 48) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1003E8C28(uint64_t a1, char *a2)
{
  return sub_1003E8C50(a1, *a2, 2000) == 0;
}

uint64_t sub_1003E8C50(uint64_t a1, char a2, int a3)
{
  char v31 = a2;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int __src = 17490;
  sub_10003F834((unint64_t *)&v28, 5uLL);
  BOOL v5 = sub_1003E0514((char *)&__src, 4uLL, v28, 1);
  sub_1003E0514(&v31, 1uLL, v5, 1);
  v24[0] = 0;
  char v26 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)v28, v29 - v28, 0, v6, v7, v8, v9))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 82, 1, a3, (uint64_t)&v20);
    sub_1003EC34C((uint64_t)v24, &v20);
    if (v23 && __p)
    {
      char v22 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v26)
    {
      sub_1003D3364((void *)(a1 + 504), (uint64_t)v24, (uint64_t *)v25, v13, v14, v15, v16, v17);
      uint64_t v10 = 0;
      goto LABEL_9;
    }
    sub_1003A9600("no response from Rose for log request", v11, v12, v13, v14, v15, v16, v17, v19);
  }
  uint64_t v10 = 1;
LABEL_9:
  if (v26 && v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  return v10;
}

void sub_1003E8DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19 && __p) {
    operator delete(__p);
  }
  uint64_t v21 = *(void **)(v19 - 64);
  if (v21)
  {
    *(void *)(v19 - 56) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003E8E04(uint64_t a1, __int16 *a2)
{
  __int16 v3 = *a2;
  return sub_1003E8E3C(a1, (char *)&v3, 2000) == 0;
}

uint64_t sub_1003E8E3C(uint64_t a1, char *a2, int a3)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int __src = 17492;
  sub_10003F834((unint64_t *)&v29, 6uLL);
  uint64_t v6 = sub_1003E0514((char *)&__src, 4uLL, v29, 1);
  uint64_t v7 = sub_1003E0514(a2 + 1, 1uLL, v6, 1);
  sub_1003E0514(a2, 1uLL, v7, 1);
  v25[0] = 0;
  char v27 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)v29, v30 - v29, 0, v8, v9, v10, v11))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 84, 1, a3, (uint64_t)&v21);
    sub_1003EC34C((uint64_t)v25, (int *)&v21);
    if (v24 && __p)
    {
      char v23 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v27)
    {
      sub_1003D3364((void *)(a1 + 504), (uint64_t)v25, (uint64_t *)v26, v15, v16, v17, v18, v19);
      uint64_t v12 = 0;
      goto LABEL_9;
    }
    sub_1003A9600("no response from Rose for log config", v13, v14, v15, v16, v17, v18, v19, v21);
  }
  uint64_t v12 = 1;
LABEL_9:
  if (v27 && v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  return v12;
}

void sub_1003E8FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a18 && __p) {
    operator delete(__p);
  }
  int v20 = *(void **)(v18 - 56);
  if (v20)
  {
    *(void *)(v18 - 48) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003E9004(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v63 = 0;
  uint64_t valuePtr = 0;
  if (!*(unsigned char *)(a1 + 296))
  {
    sub_1003A9600("connect to Rose before timesync", a2, a3, a4, a5, a6, a7, a8, v63);
    *(unsigned char *)a9 = 0;
    *(unsigned char *)(a9 + 16) = 0;
    return;
  }
  uint64_t v11 = (std::mutex *)(a1 + 232);
  std::mutex::lock((std::mutex *)(a1 + 232));
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    sub_1003A9600("failed to create time dictionary", v12, v13, v14, v15, v16, v17, v18, v63);
LABEL_16:
    char v62 = 0;
    *(unsigned char *)a9 = 0;
    goto LABEL_17;
  }
  if ((sub_1003AAA74(a1 + 752, (uint64_t)Mutable, v13, v14, v15, v16, v17, v18) & 1) == 0)
  {
    sub_1003A9600("timesync failed", v20, v21, v22, v23, v24, v25, v26, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(Mutable, @"rose_time");
  CFNumberRef v35 = Value;
  if (!Value)
  {
    sub_1003A9600("failed to get rose time entry", v28, v29, v30, v31, v32, v33, v34, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }
  CFTypeID v36 = CFGetTypeID(Value);
  if (v36 != CFNumberGetTypeID())
  {
    sub_1003A9600("invalid type for rose time", v37, v38, v39, v40, v41, v42, v43, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }
  CFNumberGetValue(v35, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(Mutable, @"continuous_time");
  CFNumberRef v52 = v44;
  if (!v44)
  {
    sub_1003A9600("unable to get continuous time entry", v45, v46, v47, v48, v49, v50, v51, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }
  CFTypeID v53 = CFGetTypeID(v44);
  if (v53 != CFNumberGetTypeID())
  {
    sub_1003A9600("invalid type for mach time", v54, v55, v56, v57, v58, v59, v60, v63);
    CFRelease(Mutable);
    goto LABEL_16;
  }
  CFNumberGetValue(v52, kCFNumberLongLongType, &v63);
  CFRelease(Mutable);
  uint64_t v61 = valuePtr;
  *(void *)a9 = v63;
  *(void *)(a9 + 8) = v61;
  char v62 = 1;
LABEL_17:
  *(unsigned char *)(a9 + 16) = v62;
  std::mutex::unlock(v11);
}

void sub_1003E91DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

const void **sub_1003E91F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  CFDataRef v10 = (const __CFData *)sub_1003AA668(a1 + 752, a2, a3, a4, a5, a6, a7, a8);
  CFDataRef theData = v10;
  if (v10)
  {
    BytePtr = CFDataGetBytePtr(v10);
    if (BytePtr)
    {
      CFIndex Length = CFDataGetLength(theData);
      if (Length)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        do
        {
          unint64_t v15 = a9[2];
          if ((unint64_t)v13 >= v15)
          {
            unint64_t v17 = *a9;
            uint64_t v18 = &v13[-*a9];
            unint64_t v19 = (unint64_t)(v18 + 1);
            if ((uint64_t)(v18 + 1) < 0) {
              sub_1000267C4();
            }
            unint64_t v20 = v15 - v17;
            if (2 * v20 > v19) {
              unint64_t v19 = 2 * v20;
            }
            if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v21 = v19;
            }
            if (v21) {
              uint64_t v22 = (char *)operator new(v21);
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v23 = &v18[(void)v22];
            uint64_t v24 = &v18[(void)v22];
            *uint64_t v24 = BytePtr[v14];
            uint64_t v16 = v24 + 1;
            if (v13 != (unsigned char *)v17)
            {
              uint64_t v25 = &v13[~v17];
              do
              {
                char v26 = *--v13;
                (v25--)[(void)v22] = v26;
              }
              while (v13 != (unsigned char *)v17);
              uint64_t v13 = (unsigned char *)*a9;
              uint64_t v23 = v22;
            }
            *a9 = (unint64_t)v23;
            a9[1] = (unint64_t)v16;
            a9[2] = (unint64_t)&v22[v21];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            *uint64_t v13 = BytePtr[v14];
            uint64_t v16 = v13 + 1;
          }
          a9[1] = (unint64_t)v16;
          ++v14;
          uint64_t v13 = v16;
        }
        while (v14 != Length);
      }
    }
  }
  return sub_1003EC408((const void **)&theData);
}

void sub_1003E9354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003EC408((const void **)va);
  char v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003E9384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v81 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (!*(unsigned char *)(a1 + 296))
  {
    uint64_t v50 = "perform connect before FW load";
LABEL_12:
    sub_1003A9600(v50, a2, a3, a4, a5, a6, a7, a8, v78);
    return 0;
  }
  int v9 = a2;
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  *(void *)(a1 + 1184) = v11;
  if (!v11)
  {
    uint64_t v50 = "failed to create event semaphore";
    goto LABEL_12;
  }
  if ((sub_1003E962C((uint64_t)v11, 0) & 1) == 0)
  {
    sub_1003A9600("failed to set CalDataPushed property to false", v12, v13, v14, v15, v16, v17, v18, v78);
    *(unsigned char *)(a3 + 18) = 1;
    dispatch_release(*(dispatch_object_t *)(a1 + 1184));
    uint64_t v49 = 0;
    *(void *)(a1 + 1184) = 0;
    return v49;
  }
  if (clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) <= 0x4614FF81FFLL) {
    uint64_t v26 = 15000000000;
  }
  else {
    uint64_t v26 = 5000000000;
  }
  sub_1003A94A4("uwb init done timeout = %llu ns, cal event timeout = %llu ns, time since system boot = %llu s", v19, v20, v21, v22, v23, v24, v25, v26);
  if ((sub_1003AA474(a1 + 752, (_DWORD *)a3, v27, v28, v29, v30, v31, v32) & 1) == 0)
  {
    sub_1003A9600("firmware download failed", v33, v34, v35, v36, v37, v38, v39, v79);
LABEL_15:
    uint64_t v49 = 0;
    goto LABEL_16;
  }
  uint64_t v40 = *(NSObject **)(a1 + 1184);
  dispatch_time_t v41 = dispatch_time(0, v26);
  if (dispatch_semaphore_wait(v40, v41))
  {
    sub_1003A9600("timeout on uwb init done event", v42, v43, v44, v45, v46, v47, v48, v79);
    uint64_t v49 = 0;
    *(unsigned char *)(a3 + 17) = 1;
    goto LABEL_16;
  }
  if (v9)
  {
    uint64_t v52 = sub_1003AA550(a1 + 752, 4, &v81, 0, 0, a3, v47, v48);
    char v60 = v52;
    if ((v52 & 1) == 0) {
      sub_1003A9600("failed to load calibration", v53, v54, v55, v56, v57, v58, v59, v79);
    }
    if (v81)
    {
      for (unsigned int i = 0; i < v81; ++i)
      {
        char v62 = *(NSObject **)(a1 + 1184);
        dispatch_time_t v63 = dispatch_time(0, v26);
        uint64_t v52 = dispatch_semaphore_wait(v62, v63);
        if (v52)
        {
          sub_1003A9600("timeout on calibration event", v64, v65, v66, v67, v68, v69, v70, v79);
          char v60 = 0;
          *(unsigned char *)(a3 + 16) = 1;
        }
      }
    }
    if ((v60 & 1) == 0)
    {
      uint64_t v49 = v60 & 1;
      goto LABEL_16;
    }
    uint64_t v49 = 1;
    if ((sub_1003E962C(v52, 1) & 1) == 0)
    {
      sub_1003A9600("failed to set CalDataPushed property to true", v71, v72, v73, v74, v75, v76, v77, v79);
      *(unsigned char *)(a3 + 19) = 1;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v49 = 1;
  }
LABEL_16:
  if (*(void *)(a1 + 1184))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_1003E9828;
    block[3] = &unk_100864A38;
    block[4] = a1;
    dispatch_async_and_wait(*(dispatch_queue_t *)(a1 + 1192), block);
  }
  return v49;
}

uint64_t sub_1003E962C(uint64_t a1, char a2)
{
  char inputStruct = a2;
  io_connect_t connect = 0;
  uint64_t input = 0;
  strcpy(cStr, "rose-supervisor");
  CFDictionaryRef v9 = IOServiceMatching("AppleSPUInterface");
  if (!v9)
  {
    sub_1003A9600("Failed to create a matching dictionary", v2, v3, v4, v5, v6, v7, v8, (uint64_t)outputStruct);
    LODWORD(MutableCopy) = 0;
    CFStringRef v19 = 0;
LABEL_21:
    uint64_t v39 = 0;
    goto LABEL_22;
  }
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v9);
  CFStringRef v11 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  CFStringRef v19 = v11;
  if (MutableCopy) {
    BOOL v20 = v11 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (v20)
  {
    sub_1003A9600("Unable to create CF Objects", v12, v13, v14, v15, v16, v17, v18, (uint64_t)outputStruct);
    if (MutableCopy)
    {
      CFRelease(MutableCopy);
      LODWORD(MutableCopy) = 0;
    }
    goto LABEL_21;
  }
  CFDictionarySetValue(MutableCopy, @"IONameMatch", v11);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, MutableCopy);
  LODWORD(MutableCopy) = MatchingService;
  if (!MatchingService)
  {
    uint64_t v38 = "Can't find the rose-supervisor service";
LABEL_20:
    sub_1003A9600(v38, v22, v23, v24, v25, v26, v27, v28, (uint64_t)outputStruct);
    goto LABEL_21;
  }
  uint64_t v36 = IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
  if (v36) {
    BOOL v37 = 1;
  }
  else {
    BOOL v37 = connect == 0;
  }
  if (v37)
  {
    sub_1003A9600("Unable to open rose-supervisor service: 0x%X", v29, v30, v31, v32, v33, v34, v35, v36);
    goto LABEL_21;
  }
  uint64_t input = 213;
  uint64_t v39 = 1;
  uint64_t v40 = (void *)IOConnectCallMethod(connect, 1u, &input, 1u, &inputStruct, 1uLL, 0, 0, 0, 0);
  if (v40)
  {
    outputStruct = v40;
    uint64_t v38 = "Error while trying to set the CalDataPushed property: 0x%X";
    goto LABEL_20;
  }
LABEL_22:
  if (connect) {
    IOServiceClose(connect);
  }
  if (MutableCopy) {
    IOObjectRelease((io_object_t)MutableCopy);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v39;
}

void sub_1003E9828(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_release(*(dispatch_object_t *)(v1 + 1184));
  *(void *)(v1 + 1184) = 0;
}

uint64_t sub_1003E9854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 296))
  {
    uint64_t v15 = sub_1003AA3C0(a1 + 752, a2, a3, a4, a5, a6, a7, a8);
    if (v15) {
      sub_10000486C("successfully gathered rose preflight info", v8, v9, v10, v11, v12, v13, v14, v17);
    }
    else {
      sub_1003A9600("getting chip preflight info failed", v8, v9, v10, v11, v12, v13, v14, v17);
    }
  }
  else
  {
    sub_1003A9600("connect to Rose before querying preflight info", a2, a3, a4, a5, a6, a7, a8, v17);
    return 0;
  }
  return v15;
}

uint64_t sub_1003E98BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 296))
  {
    uint64_t v17 = "connect to Rose before querying chip info";
LABEL_8:
    sub_1003A9600(v17, a2, a3, a4, a5, a6, a7, a8, v18);
    return 0;
  }
  if (a2)
  {
    if (sub_1003AA8B4(a1 + 752, a2, a3, a4, a5, a6, a7, a8))
    {
      sub_10000486C("boardID: 0x%04hx chipID: 0x%04hx ECID: 0x%016llx", a2, a3, a4, a5, a6, a7, a8, *(unsigned __int16 *)(a2 + 10));
      sub_10000486C("bootMode: 0x%x prodMode: 0x%x secureMode: 0x%x securityDomain: 0x%x", v9, v10, v11, v12, v13, v14, v15, *(unsigned int *)(a2 + 12));
      return 1;
    }
    uint64_t v17 = "getting chip info failed";
    goto LABEL_8;
  }
  sub_1003A9600("%s: invalid parameter", 0, a3, a4, a5, a6, a7, a8, (uint64_t)"getChipInfo");
  return 0;
}

uint64_t sub_1003E9980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 296))
  {
    sub_1003A9600("connect to Rose before resetting chip", a2, a3, a4, a5, a6, a7, a8, v36);
    return 0;
  }
  uint64_t v9 = sub_100007D00();
  if (sub_1003D2E6C((uint64_t)v9))
  {
    uint64_t v16 = 0;
    if (!sub_1003AB2D0(a1 + 752, 0, v10, v11, v12, v13, v14, v15)) {
      return v16;
    }
    __ns.__rep_ = 200000000;
    std::this_thread::sleep_for (&__ns);
  }
  uint64_t v17 = sub_100007D00();
  if (sub_1003D2ECC((uint64_t)v17))
  {
    if (sub_1003E9A7C(a1))
    {
      __ns.__rep_ = 70000000;
      std::this_thread::sleep_for (&__ns);
      uint64_t v32 = "successfully applied reset glitch workaround, proceeding with reset";
    }
    else
    {
      uint64_t v32 = "failed to apply reset glitch workaround, proceeding with reset anyway";
    }
    sub_10000486C(v32, v25, v26, v27, v28, v29, v30, v31, v36);
  }
  uint64_t v33 = a1 + 752;
  int v34 = 5;
  do
  {
    uint64_t v16 = sub_1003AA1B4(v33, v18, v19, v20, v21, v22, v23, v24);
    if (v16) {
      break;
    }
    __ns.__rep_ = 20000000;
    std::this_thread::sleep_for (&__ns);
    --v34;
  }
  while (v34);
  return v16;
}

BOOL sub_1003E9A7C(uint64_t a1)
{
  dispatch_time_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int __src = 16496;
  sub_10003F834((unint64_t *)&v41, 4uLL);
  uint64_t v2 = v41;
  sub_10000486C("send out GPIO power switch disable command", v3, v4, v5, v6, v7, v8, v9, v31);
  sub_1003E0514((char *)&__src, 4uLL, v2, 1);
  v37[0] = 0;
  char v39 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)v41, v42 - v41, 0x100000096, v10, v11, v12, v13))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 112, 0, 150, (uint64_t)&v33);
    sub_1003EC34C((uint64_t)v37, &v33);
    if (v36 && __p)
    {
      uint64_t v35 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v39)
    {
      sub_1003D3364((void *)(a1 + 504), (uint64_t)v37, (uint64_t *)v38, v17, v18, v19, v20, v21);
      unsigned __int16 v22 = sub_1003D4AD4((uint64_t *)v38);
      sub_10000486C("received GPIO power switch disable response with status 0x%04hx", v23, v24, v25, v26, v27, v28, v29, v22);
      BOOL v14 = v22 == 0;
      goto LABEL_9;
    }
    sub_1003A9600("timed out waiting for GPIO power switch disable response", v15, v16, v17, v18, v19, v20, v21, v32);
  }
  BOOL v14 = 0;
LABEL_9:
  if (v39 && v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  return v14;
}

void sub_1003E9BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (a20 && __p) {
    operator delete(__p);
  }
  unsigned __int16 v22 = *(void **)(v20 - 40);
  if (v22)
  {
    *(void *)(v20 - 32) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003E9C54(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1003DD104(a1 + 1040, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1003E9C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1003AB01C(a1 + 752, a2, a3, a4, a5, a6, a7, a8);
}

CFDataRef sub_1003E9C64(uint64_t a1)
{
  if (!*((_DWORD *)sub_100007D00() + 186))
  {
    uint64_t v17 = "querying chip public key isn't supported for R1";
LABEL_7:
    sub_1003A9600(v17, v2, v3, v4, v5, v6, v7, v8, v19);
    return 0;
  }
  if (!*(unsigned char *)(a1 + 296))
  {
    uint64_t v17 = "connect to Rose before querying chip public key";
    goto LABEL_7;
  }
  CFDataRef v16 = sub_1003AB3DC(a1 + 752, v2, v3, v4, v5, v6, v7, v8);
  if (v16) {
    sub_10000486C("successfully gathered rose chip public key", v9, v10, v11, v12, v13, v14, v15, v19);
  }
  else {
    sub_1003A9600("getting chip public key failed", v9, v10, v11, v12, v13, v14, v15, v19);
  }
  return v16;
}

uint64_t sub_1003E9CE8(uint64_t a1, void *a2, int a3, int a4)
{
  int v7 = *((_DWORD *)sub_100007D00() + 187);
  if (v7 == 1)
  {
    uint64_t v44 = a2[1];
    if (*a2 == v44)
    {
      char v81 = 1;
    }
    else
    {
      uint64_t v45 = *a2 + 8;
      char v81 = 1;
      do
      {
        uint64_t v46 = *(const void **)(v45 - 8);
        long long v92 = 0;
        char v93 = 0;
        uint64_t v94 = 0;
        sub_10003AD14(&v92, v46, (uint64_t)v46 + 23, 0x17uLL);
        if (a4)
        {
          uint64_t v47 = (char *)v92;
          if (v93 - (unsigned char *)v92 != 23) {
            __assert_rtn("sendUwbTxPowerTable", "libRose.cpp", 1660, "r1PowerTableEntry.size() == sizeof(set_cfg_pwrtbl_entry_v2_t)");
          }
          if (*(unsigned char *)v92 != 2) {
            __assert_rtn("sendUwbTxPowerTable", "libRose.cpp", 1662, "ptEntry->pwr_tbl_ver == SET_CFG_PWRTBL_ENTRY_V2_VERSION");
          }
          sub_100004950(&v97, "UWB PwrTblMax before:\n");
          uint64_t v49 = v92;
          uint64_t v48 = v93;
          sub_100004950(&__p, "==========");
          sub_1003E0810((uint64_t)&v97, (uint64_t)v49, v48 - v49, 0x10u, (uint64_t)&__p);
          if (SHIBYTE(v91) < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v98) < 0) {
            operator delete((void *)v97);
          }
          uint64_t v57 = v83;
          if (SHIBYTE(v84) < 0) {
            uint64_t v57 = (void **)v83[0];
          }
          sub_1003A94A4("%s", v50, v51, v52, v53, v54, v55, v56, (uint64_t)v57);
          *(_DWORD *)(v47 + 14) = 5242960;
          *((_WORD *)v47 + 9) = 80;
          sub_100004950(&__p, "UWB PwrTblMax after:\n");
          uint64_t v59 = v92;
          uint64_t v58 = v93;
          sub_100004950(&v86, "==========");
          sub_1003E0810((uint64_t)&__p, (uint64_t)v59, v58 - v59, 0x10u, (uint64_t)&v86);
          if (SHIBYTE(v84) < 0) {
            operator delete(v83[0]);
          }
          *(_OWORD *)uint64_t v83 = v97;
          uint64_t v84 = v98;
          HIBYTE(v98) = 0;
          LOBYTE(v97) = 0;
          if (SHIBYTE(v88) < 0) {
            operator delete(v86);
          }
          if (SHIBYTE(v91) < 0) {
            operator delete(__p);
          }
          uint64_t v67 = v83;
          if (SHIBYTE(v84) < 0) {
            uint64_t v67 = (void **)v83[0];
          }
          sub_1003A94A4("%s", v60, v61, v62, v63, v64, v65, v66, (uint64_t)v67);
          if (SHIBYTE(v84) < 0) {
            operator delete(v83[0]);
          }
        }
        LOBYTE(v83[0]) = 31;
        uint64_t v84 = 0;
        uint64_t v85 = 0;
        v83[1] = 0;
        sub_10016D488(&v83[1], v92, (uint64_t)v93, v93 - (unsigned char *)v92);
        LOBYTE(v97) = v83[0];
        uint64_t v98 = 0;
        uint64_t v99 = 0;
        *((void *)&v97 + 1) = 0;
        sub_10016D488((void *)&v97 + 1, v83[1], (uint64_t)v84, (size_t)v84 - (unint64_t)v83[1]);
        uint64_t v86 = 0;
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        char v95 = &v86;
        char v96 = 0;
        uint64_t v86 = operator new(0x20uLL);
        uint64_t v87 = (uint64_t)v86;
        uint64_t v88 = (char *)v86 + 32;
        uint64_t v87 = sub_100236B3C((uint64_t)&v88, (uint64_t)&v97, (uint64_t)v100, (uint64_t)v86);
        uint64_t v90 = 0;
        uint64_t v91 = 0;
        long long __p = 0;
        sub_100236680(&__p, (uint64_t)v86, v87, (v87 - (uint64_t)v86) >> 5);
        char v95 = &v86;
        sub_10016D6F0(&v95);
        if (*((void *)&v97 + 1))
        {
          uint64_t v98 = (void *)*((void *)&v97 + 1);
          operator delete(*((void **)&v97 + 1));
        }
        char v75 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 64))(a1, &__p);
        if (v75)
        {
          if (a3)
          {
            uint64_t v76 = operator new(1uLL);
            *uint64_t v76 = 31;
            uint64_t v98 = 0;
            long long v97 = 0uLL;
            sub_10016D488(&v97, v76, (uint64_t)(v76 + 1), 1uLL);
            operator delete(v76);
            (*(void (**)(uint64_t, long long *))(*(void *)a1 + 56))(a1, &v97);
            if ((void)v97)
            {
              *((void *)&v97 + 1) = v97;
              operator delete((void *)v97);
            }
          }
        }
        else
        {
          sub_1003A9600("PRRose::setConfigParameters: failed to set power table", v68, v69, v70, v71, v72, v73, v74, v79);
          char v81 = 0;
        }
        *(void *)&long long v97 = &__p;
        sub_10016D6F0((void ***)&v97);
        if (v83[1])
        {
          uint64_t v84 = v83[1];
          operator delete(v83[1]);
        }
        if (v92)
        {
          char v93 = v92;
          operator delete(v92);
        }
        if (v45 == v44) {
          char v77 = 0;
        }
        else {
          char v77 = v75;
        }
        v45 += 8;
      }
      while ((v77 & 1) != 0);
    }
    char v43 = v81 & 1;
    goto LABEL_82;
  }
  if (v7 != 2)
  {
    if (!v7)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "HSI version error");
    }
    goto LABEL_42;
  }
  uint64_t v9 = a2[1];
  if (*a2 == v9)
  {
LABEL_42:
    char v43 = 1;
LABEL_82:
    char v80 = v43;
    return v80 & 1;
  }
  uint64_t v10 = *a2 + 8;
  char v80 = 1;
  do
  {
    uint64_t v11 = *(const void **)(v10 - 8);
    long long v92 = 0;
    char v93 = 0;
    uint64_t v94 = 0;
    sub_10003AD14(&v92, v11, (uint64_t)v11 + 33, 0x21uLL);
    if (a4)
    {
      uint64_t v12 = (char *)v92;
      if (v93 - (unsigned char *)v92 != 33) {
        __assert_rtn("sendUwbTxPowerTable", "libRose.cpp", 1693, "r2PowerTableEntry.size() == sizeof(set_cfg_pwrtbl_entry_v3_t)");
      }
      if (*(unsigned char *)v92 != 3) {
        __assert_rtn("sendUwbTxPowerTable", "libRose.cpp", 1696, "ptEntry->pwr_tbl_ver == SET_CFG_PWRTBL_ENTRY_V3_VERSION");
      }
      sub_100004950(&v97, "UWB PwrTblMax before:\n");
      uint64_t v14 = v92;
      uint64_t v13 = v93;
      sub_100004950(&__p, "==========");
      sub_1003E0810((uint64_t)&v97, (uint64_t)v14, v13 - v14, 0x10u, (uint64_t)&__p);
      if (SHIBYTE(v91) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v98) < 0) {
        operator delete((void *)v97);
      }
      unsigned __int16 v22 = v83;
      if (SHIBYTE(v84) < 0) {
        unsigned __int16 v22 = (void **)v83[0];
      }
      sub_1003A94A4("%s", v15, v16, v17, v18, v19, v20, v21, (uint64_t)v22);
      *(void *)(v12 + 19) = 0x50005000500050;
      sub_100004950(&__p, "UWB PwrTblMax after:\n");
      uint64_t v24 = v92;
      uint64_t v23 = v93;
      sub_100004950(&v86, "==========");
      sub_1003E0810((uint64_t)&__p, (uint64_t)v24, v23 - v24, 0x10u, (uint64_t)&v86);
      if (SHIBYTE(v84) < 0) {
        operator delete(v83[0]);
      }
      *(_OWORD *)uint64_t v83 = v97;
      uint64_t v84 = v98;
      HIBYTE(v98) = 0;
      LOBYTE(v97) = 0;
      if (SHIBYTE(v88) < 0) {
        operator delete(v86);
      }
      if (SHIBYTE(v91) < 0) {
        operator delete(__p);
      }
      uint64_t v32 = v83;
      if (SHIBYTE(v84) < 0) {
        uint64_t v32 = (void **)v83[0];
      }
      sub_1003A94A4("%s", v25, v26, v27, v28, v29, v30, v31, (uint64_t)v32);
      if (SHIBYTE(v84) < 0) {
        operator delete(v83[0]);
      }
    }
    LOBYTE(v83[0]) = 41;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    v83[1] = 0;
    sub_10016D488(&v83[1], v92, (uint64_t)v93, v93 - (unsigned char *)v92);
    LOBYTE(v97) = v83[0];
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    *((void *)&v97 + 1) = 0;
    sub_10016D488((void *)&v97 + 1, v83[1], (uint64_t)v84, (size_t)v84 - (unint64_t)v83[1]);
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    char v95 = &v86;
    char v96 = 0;
    uint64_t v86 = operator new(0x20uLL);
    uint64_t v87 = (uint64_t)v86;
    uint64_t v88 = (char *)v86 + 32;
    uint64_t v87 = sub_100236B3C((uint64_t)&v88, (uint64_t)&v97, (uint64_t)v100, (uint64_t)v86);
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    long long __p = 0;
    sub_100236680(&__p, (uint64_t)v86, v87, (v87 - (uint64_t)v86) >> 5);
    char v95 = &v86;
    sub_10016D6F0(&v95);
    if (*((void *)&v97 + 1))
    {
      uint64_t v98 = (void *)*((void *)&v97 + 1);
      operator delete(*((void **)&v97 + 1));
    }
    char v40 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 64))(a1, &__p);
    if (v40)
    {
      if (a3)
      {
        dispatch_time_t v41 = operator new(1uLL);
        *dispatch_time_t v41 = 41;
        uint64_t v98 = 0;
        long long v97 = 0uLL;
        sub_10016D488(&v97, v41, (uint64_t)(v41 + 1), 1uLL);
        operator delete(v41);
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 56))(a1, &v97);
        if ((void)v97)
        {
          *((void *)&v97 + 1) = v97;
          operator delete((void *)v97);
        }
      }
    }
    else
    {
      sub_1003A9600("PRRose::setConfigParameters: failed to set power table", v33, v34, v35, v36, v37, v38, v39, v79);
      char v80 = 0;
    }
    *(void *)&long long v97 = &__p;
    sub_10016D6F0((void ***)&v97);
    if (v83[1])
    {
      uint64_t v84 = v83[1];
      operator delete(v83[1]);
    }
    if (v92)
    {
      char v93 = v92;
      operator delete(v92);
    }
    if (v10 == v9) {
      char v42 = 0;
    }
    else {
      char v42 = v40;
    }
    v10 += 8;
  }
  while ((v42 & 1) != 0);
  return v80 & 1;
}

void sub_1003EA584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_1003EA714(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v46 = a3;
  uint64_t v8 = a2[1];
  if (*a2 == v8)
  {
    sub_1003A9600("libRose::sendNBTxPowerTable failure: NB power tables are empty", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v45);
    char v47 = 0;
  }
  else
  {
    int v9 = a4;
    uint64_t v11 = *a2 + 8;
    char v47 = 1;
    do
    {
      uint64_t v12 = *(const void **)(v11 - 8);
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      sub_10003AD14(&v56, v12, (uint64_t)v12 + 18, 0x12uLL);
      if (v9)
      {
        uint64_t v13 = (char *)v56;
        if (v57 - (unsigned char *)v56 != 18) {
          __assert_rtn("sendNBTxPowerTable", "libRose.cpp", 1743, "powerTableRow.size() == sizeof(set_cfg_nb_reg_tbl_entry_t)");
        }
        if (*(unsigned char *)v56 != 1) {
          __assert_rtn("sendNBTxPowerTable", "libRose.cpp", 1747, "ptEntry->ver_type == SET_CFG_NB_REG_TBL_ENTRY_VERSION");
        }
        sub_100004950(&v61, "NB PwrTblMax before:\n");
        uint64_t v14 = v56;
        uint64_t v15 = v57;
        sub_100004950(__p, "==========");
        sub_1003E0810((uint64_t)&v61, (uint64_t)v14, v15 - v14, 0x10u, (uint64_t)__p);
        if (SHIBYTE(v55) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v62) < 0) {
          operator delete((void *)v61);
        }
        uint64_t v23 = v48;
        if (SHIBYTE(v49) < 0) {
          uint64_t v23 = (void **)v48[0];
        }
        sub_1003A94A4("%s", v16, v17, v18, v19, v20, v21, v22, (uint64_t)v23);
        *(_DWORD *)(v13 + 6) = 26214800;
        *(_DWORD *)(v13 + 14) = 26214800;
        sub_100004950(__p, "NB PwrTblMax after:\n");
        uint64_t v24 = v56;
        uint64_t v25 = v57;
        sub_100004950(&v51, "==========");
        sub_1003E0810((uint64_t)__p, (uint64_t)v24, v25 - v24, 0x10u, (uint64_t)&v51);
        if (SHIBYTE(v49) < 0) {
          operator delete(v48[0]);
        }
        *(_OWORD *)uint64_t v48 = v61;
        uint64_t v49 = v62;
        HIBYTE(v62) = 0;
        LOBYTE(v61) = 0;
        if (SHIBYTE(v53) < 0) {
          operator delete(v51);
        }
        if (SHIBYTE(v55) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v33 = v48;
        if (SHIBYTE(v49) < 0) {
          uint64_t v33 = (void **)v48[0];
        }
        sub_1003A94A4("%s", v26, v27, v28, v29, v30, v31, v32, (uint64_t)v33);
        if (SHIBYTE(v49) < 0) {
          operator delete(v48[0]);
        }
      }
      LOBYTE(v48[0]) = 46;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      v48[1] = 0;
      sub_10016D488(&v48[1], v56, (uint64_t)v57, v57 - (unsigned char *)v56);
      LOBYTE(v61) = v48[0];
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      *((void *)&v61 + 1) = 0;
      sub_10016D488((void *)&v61 + 1, v48[1], (uint64_t)v49, (size_t)v49 - (unint64_t)v48[1]);
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v59 = &v51;
      char v60 = 0;
      uint64_t v51 = operator new(0x20uLL);
      uint64_t v52 = (uint64_t)v51;
      uint64_t v53 = (char *)v51 + 32;
      uint64_t v52 = sub_100236B3C((uint64_t)&v53, (uint64_t)&v61, (uint64_t)&v64, (uint64_t)v51);
      __p[1] = 0;
      uint64_t v55 = 0;
      __p[0] = 0;
      sub_100236680(__p, (uint64_t)v51, v52, (v52 - (uint64_t)v51) >> 5);
      uint64_t v59 = &v51;
      sub_10016D6F0(&v59);
      if (*((void *)&v61 + 1))
      {
        uint64_t v62 = (void *)*((void *)&v61 + 1);
        operator delete(*((void **)&v61 + 1));
      }
      char v41 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 64))(a1, __p);
      if (v41)
      {
        if (v46)
        {
          char v42 = operator new(1uLL);
          *char v42 = 46;
          uint64_t v62 = 0;
          long long v61 = 0uLL;
          sub_10016D488(&v61, v42, (uint64_t)(v42 + 1), 1uLL);
          operator delete(v42);
          (*(void (**)(uint64_t, long long *))(*(void *)a1 + 56))(a1, &v61);
          if ((void)v61)
          {
            *((void *)&v61 + 1) = v61;
            operator delete((void *)v61);
          }
        }
      }
      else
      {
        sub_1003A9600("libRose::sendNBTxPowerTable: failed to set NB power table", v34, v35, v36, v37, v38, v39, v40, v45);
        char v47 = 0;
      }
      *(void *)&long long v61 = __p;
      sub_10016D6F0((void ***)&v61);
      if (v48[1])
      {
        uint64_t v49 = v48[1];
        operator delete(v48[1]);
      }
      if (v56)
      {
        uint64_t v57 = v56;
        operator delete(v56);
      }
      if (v11 == v8) {
        char v43 = 0;
      }
      else {
        char v43 = v41;
      }
      v11 += 8;
    }
    while ((v43 & 1) != 0);
  }
  return v47 & 1;
}

void sub_1003EAB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  a18 = &a24;
  sub_10016D6F0(&a18);
  if (__p) {
    operator delete(__p);
  }
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003EACB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v46 = a3;
  uint64_t v8 = a2[1];
  if (*a2 == v8)
  {
    sub_1003A9600("libRose::sendNBSARTable: failure: NB SAR tables are empty", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v45);
    char v47 = 0;
  }
  else
  {
    int v9 = a4;
    uint64_t v11 = *a2 + 8;
    char v47 = 1;
    do
    {
      uint64_t v12 = *(const void **)(v11 - 8);
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      sub_10003AD14(&v56, v12, (uint64_t)v12 + 38, 0x26uLL);
      if (v9)
      {
        uint64_t v13 = (char *)v56;
        if (v57 - (unsigned char *)v56 != 38) {
          __assert_rtn("sendNBSARTable", "libRose.cpp", 1791, "powerTableRow.size() == sizeof(set_cfg_nb_sar_tbl_entry_t)");
        }
        if (*(unsigned char *)v56 != 2) {
          __assert_rtn("sendNBSARTable", "libRose.cpp", 1795, "sarEntry->ver_type == SET_CFG_NB_SAR_TBL_ENTRY_VERSION");
        }
        sub_100004950(&v61, "NB SARTbl before:\n");
        uint64_t v14 = v56;
        uint64_t v15 = v57;
        sub_100004950(__p, "==========");
        sub_1003E0810((uint64_t)&v61, (uint64_t)v14, v15 - v14, 0x10u, (uint64_t)__p);
        if (SHIBYTE(v55) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v62) < 0) {
          operator delete((void *)v61);
        }
        uint64_t v23 = v48;
        if (SHIBYTE(v49) < 0) {
          uint64_t v23 = (void **)v48[0];
        }
        sub_1003A94A4("%s", v16, v17, v18, v19, v20, v21, v22, (uint64_t)v23);
        memset_pattern16(v13 + 6, &unk_1004BC270, 0x20uLL);
        sub_100004950(__p, "NB SARTbl after:\n");
        uint64_t v24 = v56;
        uint64_t v25 = v57;
        sub_100004950(&v51, "==========");
        sub_1003E0810((uint64_t)__p, (uint64_t)v24, v25 - v24, 0x10u, (uint64_t)&v51);
        if (SHIBYTE(v49) < 0) {
          operator delete(v48[0]);
        }
        *(_OWORD *)uint64_t v48 = v61;
        uint64_t v49 = v62;
        HIBYTE(v62) = 0;
        LOBYTE(v61) = 0;
        if (SHIBYTE(v53) < 0) {
          operator delete(v51);
        }
        if (SHIBYTE(v55) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v33 = v48;
        if (SHIBYTE(v49) < 0) {
          uint64_t v33 = (void **)v48[0];
        }
        sub_1003A94A4("%s", v26, v27, v28, v29, v30, v31, v32, (uint64_t)v33);
        if (SHIBYTE(v49) < 0) {
          operator delete(v48[0]);
        }
      }
      LOBYTE(v48[0]) = 47;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      v48[1] = 0;
      sub_10016D488(&v48[1], v56, (uint64_t)v57, v57 - (unsigned char *)v56);
      LOBYTE(v61) = v48[0];
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      *((void *)&v61 + 1) = 0;
      sub_10016D488((void *)&v61 + 1, v48[1], (uint64_t)v49, (size_t)v49 - (unint64_t)v48[1]);
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v59 = &v51;
      char v60 = 0;
      uint64_t v51 = operator new(0x20uLL);
      uint64_t v52 = (uint64_t)v51;
      uint64_t v53 = (char *)v51 + 32;
      uint64_t v52 = sub_100236B3C((uint64_t)&v53, (uint64_t)&v61, (uint64_t)&v64, (uint64_t)v51);
      __p[1] = 0;
      uint64_t v55 = 0;
      __p[0] = 0;
      sub_100236680(__p, (uint64_t)v51, v52, (v52 - (uint64_t)v51) >> 5);
      uint64_t v59 = &v51;
      sub_10016D6F0(&v59);
      if (*((void *)&v61 + 1))
      {
        uint64_t v62 = (void *)*((void *)&v61 + 1);
        operator delete(*((void **)&v61 + 1));
      }
      char v41 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 64))(a1, __p);
      if (v41)
      {
        if (v46)
        {
          char v42 = operator new(1uLL);
          *char v42 = 47;
          uint64_t v62 = 0;
          long long v61 = 0uLL;
          sub_10016D488(&v61, v42, (uint64_t)(v42 + 1), 1uLL);
          operator delete(v42);
          (*(void (**)(uint64_t, long long *))(*(void *)a1 + 56))(a1, &v61);
          if ((void)v61)
          {
            *((void *)&v61 + 1) = v61;
            operator delete((void *)v61);
          }
        }
      }
      else
      {
        sub_1003A9600("libRose::sendNBSARTable: failed to set NB SAR table", v34, v35, v36, v37, v38, v39, v40, v45);
        char v47 = 0;
      }
      *(void *)&long long v61 = __p;
      sub_10016D6F0((void ***)&v61);
      if (v48[1])
      {
        uint64_t v49 = v48[1];
        operator delete(v48[1]);
      }
      if (v56)
      {
        uint64_t v57 = v56;
        operator delete(v56);
      }
      if (v11 == v8) {
        char v43 = 0;
      }
      else {
        char v43 = v41;
      }
      v11 += 8;
    }
    while ((v43 & 1) != 0);
  }
  return v47 & 1;
}

void sub_1003EB120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  a18 = &a24;
  sub_10016D6F0(&a18);
  if (__p) {
    operator delete(__p);
  }
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003EB258(uint64_t a1, unsigned int a2)
{
  char v33 = a2;
  if (sub_1003E1D40(&v33, __dst)) {
    return 1;
  }
  sub_10000486C("Updating NB SAR state: %u", v4, v5, v6, v7, v8, v9, v10, a2);
  v28[0] = 0;
  char v31 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)__dst, 5uLL, 0, v13, v14, v15, v16))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 13, 0, 2000, (uint64_t)&v24);
    sub_1003EC34C((uint64_t)v28, &v24);
    if (v27 && v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (!v31) {
      return 1;
    }
    if (v30 - (unsigned char *)__p == 8)
    {
      sub_1003D3364((void *)(a1 + 504), (uint64_t)v28, (uint64_t *)&__p, v19, v20, v21, v22, v23);
      uint64_t v11 = 0;
      goto LABEL_7;
    }
    sub_1003A9600("Size of response: %zu for SAR state command is different from the expected size: %zu", v17, v18, v19, v20, v21, v22, v23, v30 - (unsigned char *)__p);
  }
  uint64_t v11 = 1;
LABEL_7:
  if (v31 && __p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
  return v11;
}

void sub_1003EB398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (a21)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003EB3D4(uint64_t a1, unsigned char *a2)
{
  return sub_1003AB128(a1 + 752, a2);
}

uint64_t sub_1003EB3DC(uint64_t a1)
{
  return sub_1003AB1B4(a1 + 752);
}

BOOL sub_1003EB3E4(uint64_t a1, uint64_t a2)
{
  *(_WORD *)uint64_t v3 = *(_WORD *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 2);
  return sub_1003EB424(a1, v3, 2000) == 0;
}

uint64_t sub_1003EB424(uint64_t a1, char *a2, int a3)
{
  uint64_t v12 = sub_1003E1C68(a2, v42);
  if (v12) {
    return v12;
  }
  sub_10000486C("Sending SleepEnable command", v5, v6, v7, v8, v9, v10, v11, v32);
  v38[0] = 0;
  char v41 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)v42, 0xAuLL, 0, v14, v15, v16, v17))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
    goto LABEL_14;
  }
  sub_1003E6AFC(a1, 6, 0, a3, (uint64_t)&__dst);
  sub_1003EC34C((uint64_t)v38, &__dst);
  if (v37 && __p)
  {
    uint64_t v36 = __p;
    operator delete(__p);
  }
  std::mutex::unlock((std::mutex *)(a1 + 232));
  if (!v41)
  {
LABEL_13:
    sub_1003A9600("Sleep Enable response failed", v18, v19, v20, v21, v22, v23, v24, v33);
    goto LABEL_14;
  }
  LOWORD(__dst) = 0;
  if (v40 - (unsigned char *)v39 != 6)
  {
    sub_1003A9600("Size of response: %zu for sleep enable command is different from the expected size: %zu", v18, v19, v20, v21, v22, v23, v24, v40 - (unsigned char *)v39);
    goto LABEL_13;
  }
  sub_1003E0514((char *)v39 + 4, 2uLL, &__dst, 1);
  if (!(_WORD)__dst)
  {
    sub_10000486C("Sleep enable command completed successfully.", v25, v26, v27, v28, v29, v30, v31, v33);
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  sub_1003A9600("Error response for the sleep enable command: %d", v25, v26, v27, v28, v29, v30, v31, (unsigned __int16)__dst);
LABEL_14:
  uint64_t v12 = 1;
LABEL_15:
  if (v41 && v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  return v12;
}

void sub_1003EB5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (a21)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003EB624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v10 = sub_100007D00();
    if (sub_1003D2ECC((uint64_t)v10))
    {
      if (sub_1003E9A7C(a1))
      {
        __ns.__rep_ = 70000000;
        std::this_thread::sleep_for (&__ns);
        uint64_t v18 = "successfully applied reset glitch workaround, proceeding with power off";
      }
      else
      {
        uint64_t v18 = "failed to apply reset glitch workaround, proceeding with power off anyway";
      }
      sub_10000486C(v18, v11, v12, v13, v14, v15, v16, v17, v30);
    }
  }
  uint64_t v19 = a1 + 752;
  if (sub_1003AB274(v19, a2, a3, a4, a5, a6, a7, a8)) {
    return 1;
  }
  unsigned int v21 = 0;
  do
  {
    unsigned int v22 = v21;
    __ns.__rep_ = 20000000;
    std::this_thread::sleep_for (&__ns);
    if (v22 == 4) {
      break;
    }
    char v29 = sub_1003AB274(v19, a2, v23, v24, v25, v26, v27, v28);
    unsigned int v21 = v22 + 1;
  }
  while ((v29 & 1) == 0);
  return v22 < 4;
}

uint64_t sub_1003EB6FC(uint64_t a1, BOOL *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v12 = Mutable;
    if (sub_1003AB370(a1 + 752, (uint64_t)Mutable, v6, v7, v8, v9, v10, v11))
    {
      value = 0;
      HIDWORD(v23) = 0;
      if (CFDictionaryGetValueIfPresent(v12, @"RosePowerState", (const void **)&value))
      {
        if (CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&v23 + 4))
        {
          *a2 = HIDWORD(v23) != 0;
          uint64_t v20 = 1;
LABEL_12:
          CFRelease(v12);
          return v20;
        }
        unsigned int v21 = "Failed to read RosePowerState value from the dictionary";
      }
      else
      {
        unsigned int v21 = "RosePowerState isn't present in the dictionary";
      }
      sub_1003A9600(v21, v13, v14, v15, v16, v17, v18, v19, v23);
      uint64_t v20 = 0;
      goto LABEL_12;
    }
    CFRelease(v12);
  }
  else
  {
    sub_1003A9600("Failed to create a dictionary", v5, v6, v7, v8, v9, v10, v11, v23);
  }
  return 0;
}

BOOL sub_1003EB800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000486C("Sending Alisha Get Cap command", a2, a3, a4, a5, a6, a7, a8, v10);
  return sub_1003EB84C(a1, (int)&v11, 2000) == 0;
}

uint64_t sub_1003EB84C(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = sub_1003E1DF0(a2, __dst);
  if (v5) {
    return v5;
  }
  v23[0] = 0;
  char v25 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)__dst, 4uLL, 0, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 83, 0, a3, (uint64_t)&v19);
    sub_1003EC34C((uint64_t)v23, &v19);
    if (v22 && __p)
    {
      unsigned int v21 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v25)
    {
      sub_1003D3364((void *)(a1 + 504), (uint64_t)v23, (uint64_t *)v24, v13, v14, v15, v16, v17);
      uint64_t v5 = 0;
      goto LABEL_11;
    }
    sub_1003A9600("Alisha Get Cap command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }
  uint64_t v5 = 1;
LABEL_11:
  if (v25 && v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  return v5;
}

void sub_1003EB968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003EB9A4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000486C("Sending Alisha Dbg Set Key command\n    UwbSesId = %u (0x%08x)\n    URSK     = 0x%02x%02x%02x%02x", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *a2);
  int v11 = *a2;
  long long v12 = *(_OWORD *)(a2 + 1);
  long long v13 = *(_OWORD *)(a2 + 5);
  return sub_1003EBA5C(a1, (char *)&v11, 2000) == 0;
}

uint64_t sub_1003EBA5C(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = sub_1003E1E80(a2, __dst);
  if (v5) {
    return v5;
  }
  v22[0] = 0;
  char v24 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)__dst, 0x28uLL, 0, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 82, 0, a3, (uint64_t)&v18);
    sub_1003EC34C((uint64_t)v22, (int *)&v18);
    if (v21 && __p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v24)
    {
      sub_1003D3364((void *)(a1 + 504), (uint64_t)v22, (uint64_t *)v23, v13, v14, v15, v16, v17);
      uint64_t v5 = 0;
      goto LABEL_11;
    }
    sub_1003A9600("Alisha Dbg Set Key command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }
  uint64_t v5 = 1;
LABEL_11:
  if (v24 && v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  return v5;
}

void sub_1003EBBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003EBBF4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000486C("Sending Alisha Get Key command\n    UwbSesId = %u (0x%08x)", (uint64_t)a2, a3, a4, a5, a6, a7, a8, *a2);
  int v11 = *a2;
  return sub_1003EBC54(a1, (char *)&v11, 2000) == 0;
}

uint64_t sub_1003EBC54(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = sub_1003E1F48(a2, __dst);
  if (v5) {
    return v5;
  }
  v22[0] = 0;
  char v24 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)__dst, 8uLL, 0, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 81, 0, a3, (uint64_t)&v18);
    sub_1003EC34C((uint64_t)v22, (int *)&v18);
    if (v21 && __p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v24)
    {
      sub_1003D3364((void *)(a1 + 504), (uint64_t)v22, (uint64_t *)v23, v13, v14, v15, v16, v17);
      uint64_t v5 = 0;
      goto LABEL_11;
    }
    sub_1003A9600("Alisha Get Key command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }
  uint64_t v5 = 1;
LABEL_11:
  if (v24 && v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  return v5;
}

void sub_1003EBD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003EBDEC(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 v14 = 0;
  int v13 = 0;
  sub_10000486C("Sending Alisha Range Enable command\n    SesId = %u\n    SesRole = %u\n    TxAntMask = %u\n    RxAntMask = %u\n    RxSyncSearchAntMask = %u\n    Channel = %u\n    Preamble = %u\n    UwbSesId = %u (0x%08x)\n    ResponderDevId = %u\n    SelProtocolVersion = %u\n    SelUwbCfgId = %u\n    RanMultiplier = %u\n    NchapsPerSlot = %u\n    NslotsPerRound = %u\n    Nresponders = %u\n    ResponderStsIndex0 = %u\n    ResponderHopKey = %u\n    ResponderIdx = %u\n"
    "    SelHopCfgBitmask = 0x%02x\n"
    "    SelPulseShapeCombo = %u\n"
    "    DebugFlags = %u\n"
    "    StartTime = %llu\n",
    *((unsigned __int8 *)a2 + 19),
    *((unsigned __int8 *)a2 + 20),
    *((unsigned __int8 *)a2 + 21),
    *((unsigned __int8 *)a2 + 32),
    *((unsigned __int8 *)a2 + 33),
    *((unsigned __int8 *)a2 + 34),
    a2[18],
    *a2);
  __int16 v5 = *a2;
  int v6 = *(_DWORD *)(a2 + 1);
  unsigned __int16 v7 = a2[3];
  int v8 = *((_DWORD *)a2 + 2);
  unsigned __int16 v9 = a2[6];
  int v10 = *(_DWORD *)(a2 + 7);
  int v11 = *(_DWORD *)(a2 + 9);
  uint64_t v12 = *((void *)a2 + 3);
  LOWORD(v13) = a2[16];
  BYTE2(v13) = *((unsigned char *)a2 + 34);
  unsigned __int16 v14 = a2[18];
  uint64_t v15 = *((void *)a2 + 5);
  return sub_1003EBF48(a1, (char *)&v5, 2000) == 0;
}

uint64_t sub_1003EBF48(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = sub_1003E1FF0(a2, __dst);
  if (v5) {
    return v5;
  }
  v23[0] = 0;
  char v25 = 0;
  std::mutex::lock((std::mutex *)(a1 + 232));
  if (sub_1003E6F08(a1, (uint64_t)__dst, 0x30uLL, 0, v7, v8, v9, v10))
  {
    std::mutex::unlock((std::mutex *)(a1 + 232));
  }
  else
  {
    sub_1003E6AFC(a1, 80, 0, a3, (uint64_t)&v19);
    sub_1003EC34C((uint64_t)v23, &v19);
    if (v22 && __p)
    {
      char v21 = __p;
      operator delete(__p);
    }
    std::mutex::unlock((std::mutex *)(a1 + 232));
    if (v25)
    {
      sub_1003D3364((void *)(a1 + 504), (uint64_t)v23, (uint64_t *)v24, v13, v14, v15, v16, v17);
      uint64_t v5 = 0;
      goto LABEL_11;
    }
    sub_1003A9600("Alisha Range Enable command failed", v11, v12, v13, v14, v15, v16, v17, v18);
  }
  uint64_t v5 = 1;
LABEL_11:
  if (v25 && v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  return v5;
}

void sub_1003EC090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a19)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003EC0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1003EC178(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    int v6 = &v2[v5 >> 7];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(void **)(v8 + 8);
        if (v10)
        {
          *(void *)(v8 + 16) = v10;
          operator delete(v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *int v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 64;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 128;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }

  return sub_10003ACC4((uint64_t)a1);
}

void *sub_1003EC2BC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    void __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)int __dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_10000B2C8((unsigned char *)__dst + 32, (uint64_t)(a2 + 2));
  __dst[13] = *((void *)a2 + 13);
  *((unsigned char *)__dst + 112) = 1;
  return __dst;
}

void sub_1003EC330(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1003EC34C(uint64_t a1, int *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      int v3 = *a2;
      *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
      *(_DWORD *)a1 = v3;
      uint64_t v4 = a1 + 8;
      unint64_t v5 = (__n128 *)(a2 + 2);
      result.n128_u64[0] = sub_100150500(v4, v5).n128_u64[0];
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v7 = *(void **)(a1 + 8);
    if (v7)
    {
      *(void *)(a1 + 16) = v7;
      operator delete(v7);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    int v8 = *a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    *(_DWORD *)a1 = v8;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    __n128 result = *(__n128 *)(a2 + 2);
    *(__n128 *)(a1 + 8) = result;
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

const void **sub_1003EC408(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1003EC440()
{
}

__n128 sub_1003EC454(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100864A90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003EC4A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100864A90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003EC4E0(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void))a1[1];
  unint64_t v5 = (void *)(a1[3] + (v3 >> 1));
  if (v3) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void))(*v5 + v4);
  }
  return v4(v5, a2, *a3);
}

uint64_t sub_1003EC52C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EC56C()
{
}

void sub_1003EC57C()
{
}

__n128 sub_1003EC590(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100864B38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003EC5E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100864B38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003EC61C(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_1003EC664(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003EC6A4()
{
}

uint64_t sub_1003EC6B0(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    int v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 85;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 170;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }

  return sub_10003ACC4((uint64_t)a1);
}

void sub_1003EC808(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 170 * v4 - 1;
  }
  int v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0xAA)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    unint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      int v46 = a1 + 3;
      long long __p = sub_100056BF0(v7, v11);
      char v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      char v41 = operator new(0xFF0uLL);
      sub_100151A50(&__p, &v41);
      unint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              char v24 = (char *)sub_100056BF0((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                char v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)char v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              uint64_t v31 = __p;
              long long __p = v24;
              char v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              char v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              char v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      char v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      long long __p = v36;
      char v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 85;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        long long __p = operator new(0xFF0uLL);
        sub_100151818(a1, &__p);
        uint64_t v34 = a1[2];
        long long __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        long long __p = operator new(0xFF0uLL);
      }
      sub_100151930((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 85;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 170;
    long long __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100151930((uint64_t)a1, &__p);
  }
}

void sub_1003ECAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1003ECB24(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_100151930((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      char v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      char v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_100151A50(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1003ECDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1003ECE3C(void *a1, int *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1003ECEF4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = *(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F);
  int v9 = *a2;
  *(_WORD *)(v8 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t v8 = v9;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 8) = 0;
  __n128 result = *(__n128 *)(a2 + 2);
  *(__n128 *)(v8 + 8) = result;
  *(void *)(v8 + 24) = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  ++a1[5];
  return result;
}

void sub_1003ECEF4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100151930((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      char v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      char v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100151A50(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1003ED1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003ED20C(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(a1[1] + ((v2 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v2 & 0x7F);
  unint64_t v4 = *(void **)(v3 + 8);
  if (v4)
  {
    *(void *)(v3 + 16) = v4;
    operator delete(v4);
    unint64_t v2 = a1[4];
  }
  uint64_t v5 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v5;

  return sub_10037C354((uint64_t)a1, 1);
}

void sub_1003ED284(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    sub_1003D1E6C(a1);
    if (a4 >> 59) {
      sub_1000267C4();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_10016D8B4(a1, v12);
    uint64_t v13 = sub_100236708(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  unint64_t v14 = (a1[1] - v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    sub_1003ED3DC((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = sub_100236708(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  sub_1003ED3DC((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(void **)(v18 - 24);
      if (v19)
      {
        *(void *)(v18 - 16) = v19;
        operator delete(v19);
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  a1[1] = v17;
}

void sub_1003ED3CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003ED3D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003ED3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(unsigned char *)a4 = *(unsigned char *)v5;
      if (v5 != a4) {
        sub_1001BE070((void *)(a4 + 8), *(char **)(v5 + 8), *(char **)(v5 + 16), *(void *)(v5 + 16) - *(void *)(v5 + 8));
      }
      v5 += 32;
      a4 += 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1003ED454()
{
}

__n128 sub_1003ED468(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100864BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003ED4BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100864BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003ED4F4(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_1003ED51C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003ED55C()
{
}

uint64_t sub_1003ED568(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 5) = sub_10039CE34(a2);
  uint64_t v7 = a3[1];
  *(void *)(a1 + 8) = *a3;
  *(void *)(a1 + 16) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  sub_1003EFD88(a1 + 240);
  sub_1003EFD88(a1 + 320);
  sub_1003EFD88(a1 + 400);
  long long v8 = *(_OWORD *)(a4 + 48);
  v11[2] = *(_OWORD *)(a4 + 32);
  void v11[3] = v8;
  uint64_t v12 = *(void *)(a4 + 64);
  long long v9 = *(_OWORD *)(a4 + 16);
  v11[0] = *(_OWORD *)a4;
  v11[1] = v9;
  sub_1003FE688((uint64_t)v11);
  sub_1003FE710(0.01, 0.000000961703842, 0.0000000194955149, 1.0);
  return a1;
}

void sub_1003ED698(_Unwind_Exception *a1)
{
  sub_10016CC78(v7);
  sub_10016CC78(v6);
  sub_10016CD20(v5);
  sub_10016CDA4(v4);
  sub_10002AC70(v3);
  sub_10016CC78((void *)(v1 + 72));
  sub_10016CFA4(v2);
  long long v9 = *(std::__shared_weak_count **)(v1 + 16);
  if (v9) {
    sub_10001A970(v9);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1003ED70C(uint64_t a1, double *a2)
{
  if (!*(unsigned char *)(a1 + 5)) {
    return 0;
  }
  if (!sub_1003ED9E0(a1, a2))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100438944();
    return 0;
  }
  long long __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v4 = *(void **)(a1 + 176);
  if (v4)
  {
    uint64_t v5 = (void *)(a1 + 160);
    do
    {
      sub_1003F3B2C((uint64_t)(v4 + 3));
      double v7 = v6;
      if (v6 <= 0.0 || *a2 - v6 <= 3.0)
      {
        sub_1003F18EC((uint64_t)(v4 + 3), (void *)(a1 + 24));
      }
      else
      {
        long long v8 = v26;
        if (v26 >= v27)
        {
          uint64_t v10 = __p;
          uint64_t v11 = (v26 - __p) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            sub_1000267C4();
          }
          uint64_t v13 = v27 - __p;
          if ((v27 - __p) >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)sub_100056BF0((uint64_t)&v27, v14);
            uint64_t v10 = __p;
            long long v8 = v26;
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v4[2];
          long long v9 = v16 + 8;
          while (v8 != v10)
          {
            uint64_t v17 = *((void *)v8 - 1);
            v8 -= 8;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          long long __p = v16;
          uint64_t v27 = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v26 = v4[2];
          long long v9 = v26 + 8;
        }
        uint64_t v26 = v9;
        uint64_t v18 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = v4[2];
          double v20 = *a2;
          *(_DWORD *)buf = 134218496;
          *(void *)&uint8_t buf[4] = v19;
          __int16 v29 = 2048;
          double v30 = v7;
          __int16 v31 = 2048;
          double v32 = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionManager: Timing out target with ID 0x%llx - Last received measurement time is %f s, last IMU data time is %f s", buf, 0x20u);
        }
      }
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
    uint64_t v23 = __p;
    unint64_t v22 = v26;
    if (__p != v26)
    {
      uint64_t v24 = (void *)(a1 + 200);
      do
      {
        *(void *)buf = *(void *)v23;
        sub_1003F073C(v5, (unint64_t *)buf);
        sub_1003F06B8(v24, (unint64_t *)buf);
        v23 += 8;
      }
      while (v23 != v26);
      unint64_t v22 = __p;
    }
    if (v22) {
      operator delete(v22);
    }
  }
  return 1;
}

void sub_1003ED9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t sub_1003ED9E0(uint64_t a1, double *a2)
{
  uint64_t v4 = (int64x2_t *)(a1 + 24);
  if (!sub_10040A9C8(a1 + 24))
  {
    unint64_t v5 = *(void *)(a1 + 112) + *(void *)(a1 + 104) - 1;
    if (*a2 <= *(double *)(*(void *)(*(void *)(a1 + 80) + ((v5 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v5 & 0x1FF))) {
      return 0;
    }
  }
  if (sub_1003EEB20((void *)a1, a2)) {
    sub_1003EE554(a1);
  }
  sub_1003EFC04((uint64_t)v9, (uint64_t)a2);
  sub_1003EED14((double *)a1, (uint64_t)v9);
  sub_10040A85C(v4, v9);
  if (!*(unsigned char *)(a1 + 4)) {
    *(unsigned char *)(a1 + 4) = 1;
  }
  if ((unint64_t)sub_10040AC08((uint64_t)v4) >= 0x1F5) {
    sub_10040A960(v4);
  }
  if (sub_10040AC08((uint64_t)v4))
  {
    double v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = sub_10040AC08((uint64_t)v4);
      sub_100438978((void *)a1, buf, v7, v6);
    }
  }
  if (__p)
  {
    char v21 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  return 1;
}

void sub_1003EDB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1003EDBB4(unsigned int *a1, uint64_t **a2)
{
  if (*((unsigned char *)a1 + 5))
  {
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
    if (v4 == *a2)
    {
      BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100438A10();
    }
    else
    {
      uint64_t v6 = *v3;
      unint64_t v42 = *v3;
      uint64_t v7 = v3;
      do
      {
        if (*v7 != v6)
        {
          BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          sub_100438A78();
          return 0;
        }
        v7 += 19;
      }
      while (v7 != v4);
      if (*((double *)v3 + 6) >= 0.0)
      {
        if (*((unsigned char *)a1 + 4))
        {
          uint64_t v11 = (uint64_t)(a1 + 40);
          if (!sub_1003217DC((void *)a1 + 20, &v42))
          {
            uint64_t v12 = *a1;
            uint64_t v13 = v42;
            unint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 2);
            uint64_t v40 = *((void *)a1 + 1);
            char v41 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_1003F18E8(buf, v12, v13, &v40);
            char v43 = (uint64_t *)&v42;
            uint64_t v15 = sub_1003F00B0((uint64_t)(a1 + 40), (uint64_t *)&v42, (uint64_t)&unk_1004BC2F8, &v43);
            long long v17 = v47;
            long long v16 = v48;
            long long v18 = v46;
            *(_OWORD *)(v15 + 7) = v45;
            *(_OWORD *)(v15 + 9) = v18;
            long long v20 = v51;
            long long v19 = v52;
            long long v21 = v50;
            *(_OWORD *)(v15 + 15) = v49;
            *(_OWORD *)(v15 + 17) = v21;
            char v22 = v56;
            long long v23 = v55;
            long long v24 = v53;
            *(_OWORD *)(v15 + 25) = v54;
            *(_OWORD *)(v15 + 23) = v24;
            *(_OWORD *)(v15 + 27) = v23;
            *((unsigned char *)v15 + 232) = v22;
            *(_OWORD *)(v15 + 19) = v20;
            *(_OWORD *)(v15 + 21) = v19;
            *(_OWORD *)(v15 + 11) = v17;
            *(_OWORD *)(v15 + 13) = v16;
            long long v25 = *(_OWORD *)&buf[16];
            *(_OWORD *)(v15 + 3) = *(_OWORD *)buf;
            *(_OWORD *)(v15 + 5) = v25;
            sub_1003EEDA8(v15 + 30);
            *((_OWORD *)v15 + 15) = v57;
            v15[32] = v58;
            int v26 = v64;
            long long v28 = v62;
            long long v27 = v63;
            long long v30 = v60;
            long long v29 = v61;
            *(_OWORD *)(v15 + 33) = v59;
            uint64_t v58 = 0;
            long long v57 = 0uLL;
            *(_OWORD *)(v15 + 39) = v28;
            *(_OWORD *)(v15 + 41) = v27;
            *((_DWORD *)v15 + 86) = v26;
            *(_OWORD *)(v15 + 35) = v30;
            *(_OWORD *)(v15 + 37) = v29;
            sub_1001F2744((uint64_t)(v15 + 44), (uint64_t)v65);
            *((_DWORD *)v15 + 100) = v66;
            *((unsigned char *)v15 + 408) = v67;
            sub_1001F2744((uint64_t)(v15 + 52), (uint64_t)v68);
            v15[58] = v68[6];
            sub_10034226C((uint64_t)(v15 + 59), (uint64_t)&v69);
            long long v31 = v70;
            long long v70 = 0u;
            double v32 = (std::__shared_weak_count *)v15[74];
            *(_OWORD *)(v15 + 73) = v31;
            if (v32)
            {
              sub_10001A970(v32);
              if (*((void *)&v70 + 1)) {
                sub_10001A970(*((std::__shared_weak_count **)&v70 + 1));
              }
            }
            uint64_t v69 = off_100853598;
            sub_10016CC78(v68);
            sub_10016CC78(v65);
            char v43 = (uint64_t *)&v57;
            sub_10016CE98((void ***)&v43);
            if (v41) {
              sub_10001A970(v41);
            }
          }
          *(void *)buf = &v42;
          unint64_t v33 = sub_1003F00B0((uint64_t)(a1 + 40), (uint64_t *)&v42, (uint64_t)&unk_1004BC2F8, (void **)buf);
          sub_1003F1A88((uint64_t)(v33 + 3), a2, (void *)a1 + 3);
          uint64_t v34 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v35 = v42;
            *(void *)buf = &v42;
            uint64_t v36 = sub_1003F00B0(v11, (uint64_t *)&v42, (uint64_t)&unk_1004BC2F8, (void **)buf);
            double v37 = sub_1003F3AF8((uint64_t)(v36 + 3));
            *(void *)buf = &v42;
            uint64_t v38 = sub_1003F00B0(v11, (uint64_t *)&v42, (uint64_t)&unk_1004BC2F8, (void **)buf);
            sub_1003F3B2C((uint64_t)(v38 + 3));
            *(_DWORD *)buf = 134218496;
            *(void *)&uint8_t buf[4] = v35;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(double *)&buf[14] = v37;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&unsigned char buf[24] = v39;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionManager::addRoseMeasurementsToTrackingTargetSet: TargetID 0x%llx, measurement update time ranges from %f to %f after consuming current rose measurements", buf, 0x20u);
          }
          return 1;
        }
        BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        sub_100438A44();
      }
      else
      {
        long long v8 = qword_1008ABDE0;
        BOOL v9 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (!v9) {
          return result;
        }
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionManager: negative range measurement, return", buf, 2u);
      }
    }
  }
  return 0;
}

void sub_1003EE014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a11) {
    sub_10001A970(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003EE044(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 568);
  if (v2) {
    sub_10001A970(v2);
  }
  *(void *)(a1 + 448) = off_100853598;
  sub_10016CC78((void *)(a1 + 392));
  sub_10016CC78((void *)(a1 + 328));
  uint64_t v4 = (void **)(a1 + 216);
  sub_10016CE98(&v4);
  return a1;
}

BOOL sub_1003EE0BC(uint64_t a1, uint64_t **a2, unsigned __int16 a3)
{
  unsigned __int16 v22 = a3;
  uint64_t v5 = a1 + 24;
  BOOL v6 = sub_10040A9C8(a1 + 24);
  uint64_t v7 = qword_1008ABDE0;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (!v8) {
      goto LABEL_7;
    }
    *(_WORD *)buf = 0;
    BOOL v9 = "#sf,RoseSensorFusionManager::addRoseMeasurementsToTrackingTargetSet: Empty IMU buffer";
    uint64_t v10 = v7;
    uint32_t v11 = 2;
  }
  else
  {
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v12 = sub_10040AC08(v5);
    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = *(void *)(*(void *)(v13 + ((*(void *)(a1 + 104) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (*(void *)(a1 + 104) & 0x1FFLL));
    uint64_t v15 = *(void *)(*(void *)(v13
                                + (((unint64_t)(*(void *)(a1 + 104) + *(void *)(a1 + 112) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((*(void *)(a1 + 104) + *(void *)(a1 + 112) - 1) & 0x1FF));
    *(_DWORD *)buf = 134218496;
    *(void *)&uint8_t buf[4] = v12;
    __int16 v24 = 2048;
    uint64_t v25 = v14;
    __int16 v26 = 2048;
    uint64_t v27 = v15;
    BOOL v9 = "#sf,RoseSensorFusionManager::addRoseMeasurementsToTrackingTargetSet: IMU buffer size is %lu, time from %f to %f"
         " before measurement update";
    uint64_t v10 = v7;
    uint32_t v11 = 32;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
LABEL_7:
  BOOL v16 = sub_1003EDBB4((unsigned int *)a1, a2);
  if (v16)
  {
    *(void *)buf = *a2;
    long long v17 = (uint64_t **)sub_1003F03CC(a1 + 200, *(unint64_t **)buf, (uint64_t)&unk_1004BC2F8, (uint64_t **)buf);
    sub_1002FC348(v17 + 3, &v22, &v22);
  }
  else
  {
    BOOL v18 = sub_10040A9C8(v5);
    long long v19 = qword_1008ABDE0;
    BOOL v20 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (v18)
    {
      if (v20) {
        sub_100438AAC();
      }
    }
    else if (v20)
    {
      sub_100438AE0(v5, (void *)a1, v19);
    }
  }
  return v16;
}

uint64_t sub_1003EE2A0(void *a1, unsigned __int16 a2)
{
  unsigned __int16 v16 = a2;
  uint64_t v3 = a1 + 25;
  sub_1003F078C((uint64_t)v14, (uint64_t)(a1 + 25));
  uint64_t v4 = v15;
  if (!v15) {
    return sub_10016CD20((uint64_t)v14);
  }
  uint64_t v5 = a1 + 15;
  BOOL v6 = a1 + 20;
  do
  {
    uint64_t v7 = (uint64_t **)v4[4];
    if (!v7) {
      goto LABEL_14;
    }
    BOOL v8 = v4 + 2;
    while (1)
    {
      unsigned int v9 = *((unsigned __int16 *)v7 + 13);
      if (v16 >= v9) {
        break;
      }
LABEL_8:
      uint64_t v7 = (uint64_t **)*v7;
      if (!v7) {
        goto LABEL_14;
      }
    }
    if (v9 < v16)
    {
      ++v7;
      goto LABEL_8;
    }
    *(void *)buf = v4 + 2;
    uint64_t v10 = sub_1003F03CC((uint64_t)v3, v4 + 2, (uint64_t)&unk_1004BC2F8, (uint64_t **)buf);
    sub_1003F0AD0((uint64_t)(v10 + 3), &v16);
    if (!v10[5])
    {
      uint32_t v11 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *v8;
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#sf,RoseSensorFusionManager: Timing out target with ID 0x%llx since it has no attached service left", buf, 0xCu);
      }
      *(void *)buf = *v8;
      sub_1003F0680(v5, (unint64_t *)buf);
      sub_1003F06B8(v3, (unint64_t *)buf);
      *(void *)buf = *v8;
      sub_1003F073C(v6, (unint64_t *)buf);
      sub_1003F06B8(v3, (unint64_t *)buf);
    }
LABEL_14:
    uint64_t v4 = (void *)*v4;
  }
  while (v4);
  return sub_10016CD20((uint64_t)v14);
}

void sub_1003EE464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1003EE480(uint64_t a1)
{
  sub_1003EF500((uint64_t)v3, a1 + 456);
  sub_1003EF690(a1 + 544, (uint64_t)&v2);
}

void *sub_1003EE4E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v7 = a2;
  uint64_t v4 = (void *)(a1 + 160);
  BOOL result = sub_1003217DC((void *)(a1 + 160), &v7);
  if (result)
  {
    BOOL v6 = sub_1003217DC(v4, &v7);
    if (!v6) {
      sub_10015FDEC("unordered_map::at: key not found");
    }
    return (void *)sub_1003F3B54((uint64_t)(v6 + 3), a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

BOOL sub_1003EE554(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 144);
  if (v1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100438BBC();
    }
  }
  else
  {
    *(unsigned char *)(a1 + 4) = 0;
    sub_10040AA78((void *)(a1 + 24));
    uint64_t v2 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionManager: IMU history is cleared.", v4, 2u);
    }
  }
  return v1 == 0;
}

void sub_1003EE600(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v21 = a2;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  uint64_t v4 = a3 + 152;
  *(unsigned char *)(a3 + 200) = 0;
  if (!*(unsigned char *)(a1 + 4))
  {
    long long v19 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)buf = 134217984;
    unint64_t v23 = a2;
    BOOL v20 = "#sf,getSolutionInternalsFromTrackingTargetSet: target 0x%llx failed: no motion state";
    goto LABEL_27;
  }
  BOOL v6 = (void *)(a1 + 160);
  if (!sub_1003217DC((void *)(a1 + 160), &v21))
  {
    long long v19 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)buf = 134217984;
    unint64_t v23 = v21;
    BOOL v20 = "#sf,getSolutionInternalsFromTrackingTargetSet: target 0x%llx failed: RoseEstimatorArrayMap count is zero";
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
    return;
  }
  unint64_t v7 = sub_100056B3C(v6, &v21);
  if (!v7) {
    sub_10015FDEC("unordered_map::at: key not found");
  }
  sub_1003F3528((uint64_t)(v7 + 3), (uint64_t)buf);
  sub_10016DC08(a3, (uint64_t)buf);
  long long v8 = v27;
  *(_OWORD *)uint64_t v4 = v26;
  *(_OWORD *)(v4 + 16) = v8;
  *(_OWORD *)(v4 + 32) = v28;
  *(unsigned char *)(v4 + 48) = v29;
  if (v25) {
    sub_10003E96C((uint64_t)v24, v24[1]);
  }
  if (*(unsigned char *)(a3 + 144))
  {
    if (v21 != *(void *)(a3 + 8)) {
      __assert_rtn("getSolutionAndInternalsFromTrackingTargetSet", "RoseSensorFusionManager.cpp", 421, "targetID == solution.ID");
    }
    double v10 = *(double *)(a3 + 48);
    double v9 = *(double *)(a3 + 56);
    BOOL v11 = v10 >= -145.0;
    if (v10 > 0.0) {
      BOOL v11 = 0;
    }
    if (v9 < -55.0) {
      BOOL v11 = 0;
    }
    BOOL v12 = v9 <= 55.0 && v11;
    double v13 = *(double *)a3;
    uint64_t v14 = sub_100056B3C(v6, &v21);
    if (!v14) {
      sub_10015FDEC("unordered_map::at: key not found");
    }
    sub_1003F3B2C((uint64_t)(v14 + 3));
    if (v13 - v15 <= 1.0 && v12)
    {
      long long v17 = (unsigned __int16 *)sub_100056B3C((void *)(a1 + 200), &v21);
      if (v17)
      {
        if ((unsigned __int16 *)(a3 + 16) != v17 + 12) {
          sub_10016DCC8((uint64_t **)(a3 + 16), *((unsigned __int16 **)v17 + 3), v17 + 16);
        }
      }
    }
    else if (*(unsigned char *)(a3 + 144))
    {
      sub_10003E96C(a3 + 16, *(void **)(a3 + 24));
      *(unsigned char *)(a3 + 144) = 0;
    }
  }
}

void sub_1003EE8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (*(unsigned char *)(v29 + 144)) {
    sub_10003E96C(v29 + 16, *(void **)(v29 + 24));
  }
  _Unwind_Resume(exception_object);
}

void sub_1003EE904(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    uint64_t v4 = (void *)(a1 + 200);
    do
    {
      sub_1003F3528((uint64_t)(v2 + 3), (uint64_t)v14);
      if (v16)
      {
        sub_10040AD00(v12);
        if (v2[2] != v12[1]) {
          __assert_rtn("getSolutionFromAllTrackingTargetSets", "RoseSensorFusionManager.cpp", 447, "targetId == sol.ID");
        }
        uint64_t v5 = v13[4];
        BOOL v6 = v13[5];
        double v7 = *(double *)v12;
        sub_1003F3B2C((uint64_t)(v2 + 3));
        if (*(double *)&v6 <= 55.0
          && *(double *)&v6 >= -55.0
          && *(double *)&v5 >= -145.0
          && *(double *)&v5 <= 0.0
          && v7 - v8 <= 1.0)
        {
          double v9 = (unsigned __int16 *)sub_100056B3C(v4, v2 + 2);
          if (v9 && v13 != (uint64_t **)(v9 + 12)) {
            sub_10016DCC8(v13, *((unsigned __int16 **)v9 + 3), v9 + 16);
          }
          unint64_t v10 = a2[1];
          if (v10 >= a2[2])
          {
            uint64_t v11 = sub_1003F0DD4(a2);
          }
          else
          {
            sub_10040AD00(a2[1]);
            uint64_t v11 = v10 + 144;
            a2[1] = v10 + 144;
          }
          a2[1] = v11;
        }
        sub_10003E96C((uint64_t)v13, v13[1]);
        if (v16) {
          sub_10003E96C((uint64_t)v15, v15[1]);
        }
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
}

void sub_1003EEAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  *(void *)(v45 + 8) = v48;
  sub_10003E96C(v47, a12);
  if (a45) {
    sub_10003E96C(v46, a30);
  }
  a27 = (void **)v45;
  sub_10016EA58(&a27);
  _Unwind_Resume(a1);
}

BOOL sub_1003EEB20(void *a1, double *a2)
{
  if (a1[23] || sub_10040A9C8((uint64_t)(a1 + 3))) {
    return 0;
  }
  unint64_t v5 = a1[14] + a1[13] - 1;
  return *a2 - *(double *)(*(void *)(a1[10] + ((v5 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v5 & 0x1FF)) > 1.0;
}

BOOL sub_1003EEB98(double *a1, double **a2)
{
  return a1[39] < 0.025 && a1[49] < 0.025 && a1[59] < 0.025;
}

double sub_1003EEC24(uint64_t a1, double a2)
{
  double v9 = a2;
  if (*(void *)(a1 + 40)) {
    *(void *)(a1 + 56) = *(void *)(*(void *)(*(void *)(a1 + 8)
  }
                                                 + ((*(void *)(a1 + 32) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * (*(void *)(a1 + 32) & 0x1FFLL));
  sub_1001F2440((void *)a1, &v9);
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0x33)
  {
    ++*(void *)(a1 + 32);
    *(void *)(a1 + 40) = v3 - 1;
    sub_1001F286C(a1, 1);
    unint64_t v3 = *(void *)(a1 + 40);
  }
  if (v3 == 50)
  {
    double v4 = *(double *)(*(void *)(*(void *)(a1 + 8)
                               + (((unint64_t)(*(void *)(a1 + 32) + 49) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((*(void *)(a1 + 32) + 49) & 0x1FF));
    *(double *)(a1 + 64) = v4;
  }
  else
  {
    double v4 = *(double *)(a1 + 64);
  }
  double v5 = *(double *)(a1 + 48);
  double v6 = *(double *)(a1 + 56);
  double v7 = v5 + (v4 - v6) / 50.0;
  *(double *)(a1 + 48) = v7;
  double result = (v4 - v6) * (v6 + v4 - v7 - v5);
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_1003EED14(double *a1, uint64_t a2)
{
  long long __p = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  sub_10015036C(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  if (sub_1003EEB98(a1, (double **)&__p))
  {
    double v4 = *(void **)(a2 + 16);
    *double v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  if (__p)
  {
    double v6 = __p;
    operator delete(__p);
  }
}

void sub_1003EED8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003EEDA8(uint64_t *a1)
{
  if (*a1)
  {
    sub_10016CEEC((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_1003EEDE4(void *result)
{
  void *result = off_100853598;
  return result;
}

void *sub_1003EEE04(void *result)
{
  void *result = off_100853598;
  return result;
}

void sub_1003EEE24(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1003EEE54(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003EEE60(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_1003EEEB0(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1003EEEE0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003EEEEC(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_1003EEF10(void *a1, unint64_t a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      char v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      long long v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          double v32 = (uint64_t *)a1[1];
          unint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            unint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          double v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            unint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          char v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            unint64_t v3 = (char *)a1[1];
          }
          long long v27 = &v3[-8 * (v24 >> 1)];
          unint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)unint64_t v3 = v18;
      unint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100151818(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100151930((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        int v66 = (char *)a1[2];
        do
        {
          char v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v78);
              char v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              int v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                int v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              uint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                int v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              char v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                int v66 = (char *)a1[1];
              }
              char v77 = &v66[-8 * (v74 >> 1)];
              int v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)int v66 = v69;
          int v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v91 = a1 + 3;
      if (v13) {
        double v15 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v13);
      }
      else {
        double v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        sub_100151A50(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              long long v49 = (char *)sub_100056BF0((uint64_t)v91, v48);
              long long v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              char v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      long long v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_100151B68((uint64_t)__p, v57);
      }
      long long v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1003EF428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003EF49C(uint64_t a1, uint64_t a2)
{
  double result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

__n128 sub_1003EF500(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000006;
  *(void *)(a1 + 24) = 0x100000006;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100864CD8;
  if (a1 == a2)
  {
    char v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    uint64_t v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 6)
  {
    char v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    uint64_t v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    char v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  unint64_t v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    char v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    char v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    unint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    unint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    *unint64_t v12 = result;
  }
  else if (v5)
  {
    unint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)unint64_t v6 = v9;
      unint64_t v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1003EF670(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1003EF690(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1003EF948((uint64_t)v4, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  sub_1003416E8(a1, v4);
  uint64_t v7 = 0x600000006;
  uint64_t v5 = off_100864C90;
  long long v6 = xmmword_1007749C0;
  unint64_t v8 = &v9;
  sub_1003419A0((uint64_t)v4, a1, (uint64_t)&v5);
  *(void *)(a2 + 24) = 0x600000006;
  *(void *)a2 = off_100864C90;
  *(_OWORD *)(a2 + 8) = xmmword_1007749C0;
  *(void *)(a2 + 32) = a2 + 40;
  uint64_t v17 = 0x100000006;
  long long v16 = xmmword_1007749D0;
  long long v15 = off_100864D20;
  uint64_t v18 = &v19;
  uint64_t v12 = 0x100000018;
  long long v11 = xmmword_1007749E0;
  uint64_t v10 = off_100864D68;
  uint64_t v13 = &v14;
  sub_1003517F4((uint64_t)&v5, (uint64_t)&v15, (uint64_t)&v10, a2);
}

void sub_1003EF7FC(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void *sub_1003EF81C(void *result)
{
  void *result = off_100853598;
  return result;
}

void *sub_1003EF83C(void *result)
{
  void *result = off_100862050;
  return result;
}

void sub_1003EF85C(void *a1)
{
  *a1 = off_100862050;
  operator delete();
}

uint64_t sub_1003EF88C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003EF898(uint64_t a1)
{
  sub_100351B60(a1, v1);
}

void sub_1003EF8BC(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1003EF8EC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003EF8F8(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_1003EF948(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x600000006;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = off_100864C90;
  if (a2 > 6)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 7)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003EF9F0(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_1003EFA10(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  sub_1003EF500(a1, a2);
  sub_1003EFA78(v7 + 88, a3);
  *(_DWORD *)(a1 + 416) = a4;
  return a1;
}

void sub_1003EFA58(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

__n128 sub_1003EFA78(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x600000006;
  *(void *)(a1 + 24) = 0x600000006;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100864C90;
  if (a1 == a2)
  {
    long long v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    uint64_t v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 6)
  {
    long long v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    uint64_t v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 7)
  {
    long long v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  long long v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    long long v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 6u)
  {
    long long v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    long long v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    *uint64_t v12 = result;
  }
  else if (v5)
  {
    unint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)long long v6 = v9;
      long long v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1003EFBE4(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_1003EFC04(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_10015036C((void *)(a1 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_10015036C((void *)(a1 + 40), *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_10015036C((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_10015036C((void *)(a1 + 88), *(const void **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  sub_10015036C((void *)(a1 + 112), *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  sub_10015036C((void *)(a1 + 136), *(const void **)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3);
  return a1;
}

void sub_1003EFD0C(_Unwind_Exception *exception_object)
{
  unint64_t v8 = *v6;
  if (*v6)
  {
    v1[15] = v8;
    operator delete(v8);
  }
  unint64_t v9 = *v5;
  if (*v5)
  {
    v1[12] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v4;
  if (*v4)
  {
    v1[9] = v10;
    operator delete(v10);
  }
  long long v11 = *v3;
  if (*v3)
  {
    char v1[6] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v2;
  if (*v2)
  {
    v1[3] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003EFD88(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v3 = 0;
  sub_1003EFDE8((void *)a1, 0x32uLL, &v3);
  return a1;
}

void sub_1003EFDD4(_Unwind_Exception *a1)
{
  sub_10016CC78(v1);
  _Unwind_Resume(a1);
}

void *sub_1003EFDE8(void *result, unint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t)result;
  unint64_t v4 = result[5];
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return sub_1003EFE98(result, v6, a3);
  }
  else if (!v5)
  {
    uint64_t v7 = result[1];
    if (result[2] == v7) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = *(void *)(v7 + 8 * (result[4] >> 9)) + 8 * (result[4] & 0x1FFLL);
    }
    v11[0] = v7 + 8 * (result[4] >> 9);
    v11[1] = v8;
    unint64_t v9 = (char *)sub_1003EF49C((uint64_t)v11, a2);
    return (void *)sub_1003EFFB4(v3, v9, v10);
  }
  return result;
}

void *sub_1003EFE98(void *a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) << 6) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  BOOL v11 = a2 > v10;
  unint64_t v12 = a2 - v10;
  if (v11)
  {
    sub_1003EEF10(a1, v12);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v9 & 0x1FF);
  }
  v21[0] = v6 + 8 * (v9 >> 9);
  v21[1] = v14;
  __n128 result = sub_1003EF49C((uint64_t)v21, a2);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        uint64_t v19 = (void *)v14;
        do
          *v19++ = *a3;
        while (v19 != (void *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result) {
        break;
      }
      uint64_t v20 = v13[1];
      ++v13;
      uint64_t v14 = v20;
    }
    while (v20 != v16);
    a1[5] = v17;
  }
  return result;
}

uint64_t sub_1003EFFB4(uint64_t result, char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v8 = (char *)(v6 + 8 * (v5 >> 9));
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + 8 * (v5 & 0x1FF);
  }
  if (v9 != a3)
  {
    uint64_t v10 = ((v9 - *(void *)v8) >> 3) + ((v8 - a2) << 6);
    uint64_t v11 = a3 - *(void *)a2;
    uint64_t v12 = v10 - (v11 >> 3);
    if (v12 >= 1)
    {
      uint64_t v13 = (char *)(v6 + 8 * (v4 >> 9));
      if (v7 == v6) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = *(void *)v13 + 8 * (*(void *)(result + 32) & 0x1FFLL);
      }
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = (v11 >> 3) + ((a2 - v13) << 6) - ((v14 - *(void *)v13) >> 3);
      }
      sub_1003EF49C((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        __n128 result = sub_1001D14E8(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void *sub_1003F00B0(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_1003F02F8(a1, *a2, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_10002AA24(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *uint64_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1003F0374((uint64_t)v21, 0);
  return v10;
}

void sub_1003F02E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003F0374((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F02F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x258uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v8 = 0;
  v8[1] = a2;
  _OWORD v8[2] = **a3;
  uint64_t result = sub_1003F17A0((uint64_t)(v8 + 3));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1003F035C(_Unwind_Exception *a1)
{
  sub_1003F0374(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1003F0374(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10016CE24((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_1003F03CC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[5] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_10002AA24(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *BOOL v22 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *float v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1003F0608(_Unwind_Exception *a1)
{
  sub_1003F0624(v2, v1);
  _Unwind_Resume(a1);
}

void sub_1003F0624(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_10003E96C((uint64_t)(a2 + 3), a2[4]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t *sub_1003F0680(void *a1, unint64_t *a2)
{
  uint64_t result = sub_100056B3C(a1, a2);
  if (result)
  {
    sub_10002A67C(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *sub_1003F06B8(void *a1, unint64_t *a2)
{
  uint64_t result = sub_100056B3C(a1, a2);
  if (result)
  {
    sub_1003F06F0(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_1003F06F0(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10002A6C0(a1, a2, (uint64_t)&v5);
  uint64_t v3 = v5;
  unint64_t v5 = 0;
  if (v3) {
    sub_1003F0624((uint64_t)&v6, v3);
  }
  return v2;
}

uint64_t sub_1003F073C(void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)sub_100056B3C(a1, a2);
  if (result)
  {
    sub_10002A6C0(a1, (void *)result, (uint64_t)v4);
    sub_1003F0374((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t sub_1003F078C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10002AA24(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1003F0804(a1, i + 2, i + 2);
  return a1;
}

void sub_1003F07EC(_Unwind_Exception *a1)
{
  sub_10016CD20(v1);
  _Unwind_Resume(a1);
}

void *sub_1003F0804(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    unint64_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t result = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5) {
              return result;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_1003F0A3C(a1, *a2, a3, (uint64_t)&v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_10002AA24(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *unint64_t v19 = *v17;
    *BOOL v17 = v19;
  }
  else
  {
    *unint64_t v19 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v19)
    {
      unint64_t v18 = *(void *)(*v19 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v19;
    }
  }
  uint64_t result = v19;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_1003F0A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11)
{
  if (a10) {
    sub_1003F0624((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1003F0A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  _OWORD v8[2] = *a3;
  uint64_t result = sub_10016EAE8(v8 + 3, (uint64_t)(a3 + 1));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1003F0AB4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1003F0624(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F0AD0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 26);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 26)) {
    return 0;
  }
  sub_100027218((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t sub_1003F0B4C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003F0C10((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003F0BC4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    sub_1000257D8();
  }
  return operator new(144 * a2);
}

uint64_t sub_1003F0C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 144;
      sub_10040AD00(v7 - 144);
      uint64_t v7 = *((void *)&v15 + 1) - 144;
      *((void *)&v15 + 1) -= 144;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1003F0CCC((uint64_t)v12);
  return v10;
}

void sub_1003F0CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003F0CCC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1003F0D04(a1);
  }
  return a1;
}

void sub_1003F0D04(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    uint64_t v3 = v1 + 16;
    do
    {
      sub_10003E96C(v3, *(void **)(v3 + 8));
      uint64_t v4 = v3 + 128;
      v3 += 144;
    }
    while (v4 != v2);
  }
}

void **sub_1003F0D54(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1003F0D88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    sub_10003E96C(i - 128, *(void **)(i - 120));
  }
}

uint64_t sub_1003F0DD4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_1000267C4();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0x8E38E38E38E38E39 * ((a1[2] - v2) >> 4);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0xE38E38E38E38E3) {
    unint64_t v7 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_1003F0BC4(v5, v7);
  }
  else {
    uint64_t v8 = 0;
  }
  float v11 = v8;
  float v12 = &v8[144 * v3];
  long long v14 = &v8[144 * v7];
  sub_10040AD00(v12);
  char v13 = v12 + 144;
  sub_1003F0B4C(a1, &v11);
  uint64_t v9 = a1[1];
  sub_1003F0D54(&v11);
  return v9;
}

void sub_1003F0EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003F0D54((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F0EF4()
{
  sub_10039D144();
  uint64_t v0 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  uint64_t v2 = std::string::append(&v38, ".bin");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1008AB900 = v2->__r_.__value_.__r.__words[2];
  xmmword_1008AB8F0 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB8F0, (void *)&_mh_execute_header);
  sub_10039D144();
  unint64_t v4 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  unint64_t v6 = std::string::append(&v38, ".bin");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1008AB918 = v6->__r_.__value_.__r.__words[2];
  xmmword_1008AB908 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB908, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v8 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v38, ".bin");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1008AB930 = v10->__r_.__value_.__r.__words[2];
  xmmword_1008AB920 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB920, (void *)&_mh_execute_header);
  sub_10039D144();
  float v12 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  long long v14 = std::string::append(&v38, ".bin");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1008AB948 = v14->__r_.__value_.__r.__words[2];
  xmmword_1008AB938 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB938, (void *)&_mh_execute_header);
  sub_10039D144();
  size_t v16 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = std::string::append(&v38, ".bin");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1008AB960 = v18->__r_.__value_.__r.__words[2];
  xmmword_1008AB950 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB950, (void *)&_mh_execute_header);
  sub_10039D144();
  size_t v20 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  BOOL v22 = std::string::append(&v38, ".bin");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1008AB978 = v22->__r_.__value_.__r.__words[2];
  xmmword_1008AB968 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB968, (void *)&_mh_execute_header);
  sub_10039D144();
  uint64_t v24 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  int64_t v26 = std::string::append(&v38, ".bin");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1008AB990 = v26->__r_.__value_.__r.__words[2];
  xmmword_1008AB980 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB980, (void *)&_mh_execute_header);
  sub_10039D144();
  unint64_t v28 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append(&v38, ".bin");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1008AB9A8 = v30->__r_.__value_.__r.__words[2];
  xmmword_1008AB998 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB998, (void *)&_mh_execute_header);
  sub_10039D144();
  double v32 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  uint64_t v34 = std::string::append(&v38, ".bin");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1008AB9C0 = v34->__r_.__value_.__r.__words[2];
  xmmword_1008AB9B0 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB9B0, (void *)&_mh_execute_header);
}

void sub_1003F1524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003F1598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 1328);
  unint64_t v6 = *(void *)(a2 + 1328);
  if (v5 >= v6 + 15) {
    goto LABEL_10;
  }
  uint64_t v7 = a2;
  if (v6 >= v5 + 15)
  {
LABEL_11:
    uint64_t v11 = (uint64_t)a3;
    goto LABEL_12;
  }
  double v8 = *(double *)(a1 + 1312);
  double v9 = *(double *)(a2 + 1312);
  if (v8 >= v9 + 50.0)
  {
LABEL_10:
    uint64_t v11 = (uint64_t)a3;
    a2 = a1;
    goto LABEL_12;
  }
  if (v9 >= v8 + 50.0) {
    goto LABEL_11;
  }
  uint64_t result = sub_1003F1678(a1, a2);
  if (!result)
  {
    *a3 = 0;
    a3[1480] = 0;
    return result;
  }
  if (*(void *)(a1 + 1328) >= *(void *)(v7 + 1328)) {
    a2 = a1;
  }
  else {
    a2 = v7;
  }
  uint64_t v11 = (uint64_t)a3;
LABEL_12:

  return sub_1003F4C58(v11, a2);
}

uint64_t sub_1003F1678(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  sub_1003F6E5C(a1 + 8, a2 + 8);
  if (v3 < 40.0) {
    sub_1003F7620(v2);
  }
  return 0;
}

uint64_t sub_1003F16F0(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 376) = 999;
  *(unsigned char *)(a1 + 240) = 0;
  sub_10040B40C(a1 + 384);
  *(_OWORD *)(a1 + 560) = 0u;
  return a1;
}

void sub_1003F1780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10016CC78(v2);
  sub_10016CE98((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F17A4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v7 = (_OWORD *)(a1 + 24);
  *(unsigned char *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 376) = a2;
  sub_10040B40C(a1 + 384);
  *(void *)(a1 + 560) = *a4;
  uint64_t v8 = a4[1];
  *(void *)(a1 + 568) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10040B0AC(0, a2, (uint64_t)v15);
  long long v9 = v15[9];
  unsigned char v7[8] = v15[8];
  v7[9] = v9;
  v7[10] = v16[0];
  *(_OWORD *)((char *)v7 + 169) = *(_OWORD *)((char *)v16 + 9);
  long long v10 = v15[5];
  v7[4] = v15[4];
  v7[5] = v10;
  long long v11 = v15[7];
  v7[6] = v15[6];
  v7[7] = v11;
  long long v12 = v15[1];
  *uint64_t v7 = v15[0];
  v7[1] = v12;
  long long v13 = v15[3];
  void v7[2] = v15[2];
  v7[3] = v13;
  return a1;
}

void sub_1003F18AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  long long v12 = *(std::__shared_weak_count **)(v9 + 568);
  if (v12) {
    sub_10001A970(v12);
  }
  sub_100438BF0(v9);
  sub_10016CC78(v10);
  sub_10016CE98(&a9);
  _Unwind_Resume(a1);
}

void sub_1003F18EC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 216);
  for (uint64_t i = *(void *)(a1 + 224); v3 != i; v3 += 1480)
  {
    if (*(unsigned __int8 *)(v3 + 1304) - 1 <= 1) {
      sub_1004040A4(v3 + 8, a2);
    }
  }
  sub_1003F1984(a1);
  if (*(void *)(a1 + 224) == *(void *)(a1 + 216))
  {
    sub_1003F1A00(a1);
  }
}

uint64_t sub_1003F1984(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 216);
  uint64_t v1 = result + 216;
  if (v2 != *(void *)(result + 224))
  {
    uint64_t v3 = result;
    do
    {
      uint64_t result = sub_100402534(v2 + 8);
      if (result)
      {
        sub_1003F65F0((uint64_t)&v5, v2 + 1480, *(void *)(v3 + 224), v2);
        uint64_t result = sub_10016CEEC(v1, v4);
      }
      else
      {
        v2 += 1480;
      }
    }
    while (v2 != *(void *)(v3 + 224));
  }
  return result;
}

void sub_1003F1A00(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  sub_10016CEEC(a1 + 216, *(void *)(a1 + 216));
  *(_DWORD *)(a1 + 320) = 0;
  uint64_t v2 = *(void ***)(a1 + 336);
  uint64_t v3 = *(void *)(a1 + 344);
  *(void *)(a1 + 368) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 344);
      uint64_t v2 = (void **)(*(void *)(a1 + 336) + 8);
      *(void *)(a1 + 336) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 512;
  }
  *(void *)(a1 + 360) = v6;
}

BOOL sub_1003F1A88(uint64_t a1, void *a2, void *a3)
{
  if (a2[1] == *a2)
  {
    long long v19 = qword_1008ABDE0;
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100438C2C(v19);
    return 0;
  }
  if (!*(unsigned char *)(a1 + 208)) {
    sub_100438C70();
  }
  if (!*(_DWORD *)(a1 + 16) && *(unsigned char *)(*a2 + 144) == 5)
  {
    *(_DWORD *)(a1 + 16) = 1;
    sub_10040B0AC(1, *(_DWORD *)(a1 + 376), (uint64_t)buf);
    long long v6 = v92;
    *(_OWORD *)(a1 + 152) = v91;
    *(_OWORD *)(a1 + 168) = v6;
    *(_OWORD *)(a1 + 184) = v93[0];
    *(_OWORD *)(a1 + 193) = *(_OWORD *)((char *)v93 + 9);
    long long v7 = v88;
    *(_OWORD *)(a1 + 88) = v87;
    *(_OWORD *)(a1 + 104) = v7;
    long long v8 = v90;
    *(_OWORD *)(a1 + 120) = v89;
    *(_OWORD *)(a1 + 136) = v8;
    long long v9 = v84;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 40) = v9;
    long long v10 = v86;
    *(_OWORD *)(a1 + 56) = v85;
    *(_OWORD *)(a1 + 72) = v10;
    if (!*(unsigned char *)(a1 + 208)) {
      sub_10000AE44();
    }
  }
  uint64_t v11 = *a2;
  if (*(unsigned char *)(*a2 + 145) == 1)
  {
    if (*(unsigned char *)a1)
    {
      uint64_t v21 = a2[1];
      uint64_t v22 = 168;
      if (v21 - v11 == 152) {
        uint64_t v22 = 176;
      }
      uint64_t v23 = 184;
      if (v21 - v11 == 152) {
        uint64_t v23 = 192;
      }
      uint64_t v24 = *(void *)(a1 + 224);
      if (v24 == *(void *)(a1 + 216))
      {
        uint64_t v38 = *(void *)(a1 + 224);
      }
      else
      {
        unint64_t v25 = 0;
        double v26 = *(double *)(a1 + v22);
        double v27 = *(double *)(a1 + v23);
        double v28 = *(double *)(a1 + 160);
        unint64_t v29 = (v21 - v11) / 152;
        if (v29 <= 1) {
          unint64_t v29 = 1;
        }
        unint64_t v72 = v29;
        do
        {
          if (v21 == v11) {
            goto LABEL_46;
          }
          uint64_t v30 = 0;
          char v31 = 0;
          double v32 = 0.0;
          unint64_t v33 = v72;
          do
          {
            double v34 = COERCE_DOUBLE(sub_1003FD808(*(void *)(a1 + 216) + 1480 * v25 + 8, a3, *a2 + v30));
            if (v35) {
              BOOL v36 = v26 <= v34;
            }
            else {
              BOOL v36 = 1;
            }
            if (!v36)
            {
              if (v26 <= v28) {
                sub_100438C9C();
              }
              double v37 = v27;
              if (v28 < v34)
              {
                double v37 = 0.0;
                if (v26 >= v34) {
                  double v37 = v27 + -v27 / (v26 - v28) * (v34 - v28);
                }
              }
              if (v37 > v32) {
                double v32 = v37;
              }
              char v31 = 1;
            }
            v30 += 152;
            --v33;
          }
          while (v33);
          if ((v31 & 1) == 0) {
LABEL_46:
          }
            double v32 = *(double *)(a1 + 200);
          uint64_t v38 = *(void *)(a1 + 216);
          *(double *)(v38 + 1480 * v25++ + 1320) = v32;
          uint64_t v24 = *(void *)(a1 + 224);
        }
        while (0x9DC0588FE9DC0589 * ((v24 - v38) >> 3) > v25);
      }
      long long v49 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v50 = *(unsigned __int16 *)(*a2 + 8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v50;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionTrackingTargetSet internal state after measurement update of cycle_index %d of aiding channel:", buf, 8u);
        uint64_t v38 = *(void *)(a1 + 216);
        uint64_t v24 = *(void *)(a1 + 224);
      }
      if (v38 != v24)
      {
        int v51 = 0;
        do
        {
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
            sub_1003F3120(v38);
          }
          ++v51;
          v38 += 1480;
        }
        while (v38 != v24);
      }
      goto LABEL_103;
    }
    return 0;
  }
  if (!*(unsigned char *)(*a2 + 145))
  {
    uint64_t v12 = a2[1];
    if (!*(unsigned char *)a1)
    {
      if (v12 != v11)
      {
        uint64_t v39 = 0;
        unint64_t v40 = 0;
        do
        {
          *(_DWORD *)buf = 0;
          sub_1003F4D84((uint64_t)&buf[8]);
          char v94 = 0;
          uint64_t v96 = 0;
          uint64_t v97 = 0;
          uint64_t v95 = 0;
          uint64_t v98 = 0xFFFFFFFFLL;
          char v99 = 0;
          long long v100 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v105 = 0u;
          memset(v106, 0, sizeof(v106));
          int v41 = *(_DWORD *)(a1 + 320);
          *(_DWORD *)(a1 + 320) = v41 + 1;
          *(_DWORD *)buf = v41;
          sub_100402904((uint64_t)&buf[8], v11 + v39, a3);
          char v94 = 1;
          uint64_t v96 = 0;
          uint64_t v97 = 0;
          uint64_t v95 = 0;
          uint64_t v98 = v40;
          v106[3] = 0;
          v106[0] = *(void *)(v11 + v39 + 48);
          *(int8x16_t *)&v106[1] = vextq_s8(*(int8x16_t *)(v11 + v39 + 64), *(int8x16_t *)(v11 + v39 + 64), 8uLL);
          unint64_t v42 = *(void *)(a1 + 224);
          if (v42 >= *(void *)(a1 + 232))
          {
            uint64_t v43 = sub_1003F50B8((uint64_t *)(a1 + 216), (uint64_t)buf);
          }
          else
          {
            sub_1003F51E0(a1 + 232, *(void *)(a1 + 224), (uint64_t)buf);
            uint64_t v43 = v42 + 1480;
            *(void *)(a1 + 224) = v42 + 1480;
          }
          *(void *)(a1 + 224) = v43;
          ++v40;
          uint64_t v11 = *a2;
          v39 += 152;
        }
        while (0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 3) > v40);
      }
      *(unsigned char *)a1 = 1;
      goto LABEL_96;
    }
    unint64_t v13 = 0x86BCA1AF286BCA1BLL * ((v12 - v11) >> 3);
    unint64_t v14 = v13 - 0x623FA7701623FA77 * ((uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 3);
    v80[0] = 0;
    sub_10015587C(__p, v14, v80);
    sub_1003F5668(buf, v13, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    LOBYTE(v79[0]) = 0;
    sub_1003F5724(v80, v14, (unsigned __int8 *)v79);
    sub_1003F59A4(__p, v13, (uint64_t)v80);
    if (v80[0]) {
      operator delete(v80[0]);
    }
    int64_t v76 = (void *)0x408F400000000000;
    sub_10015587C(v79, v14, &v76);
    sub_1003F5668(v80, v13, (uint64_t)v79);
    if (v79[0])
    {
      v79[1] = v79[0];
      operator delete(v79[0]);
    }
    *(void *)char v81 = 0x408F400000000000;
    sub_10015587C(&v76, v14, v81);
    sub_1003F5668(v79, v13, (uint64_t)&v76);
    if (v76)
    {
      char v77 = v76;
      operator delete(v76);
    }
    int64_t v76 = 0;
    char v77 = 0;
    uint64_t v78 = 0;
    sub_1003F26B8(a1, a2, buf, __p, v80, v79, a3);
    sub_1003F28A8(a1, (uint64_t **)buf, (uint64_t *)__p, (char *)&v76);
    uint64_t v15 = (v77 - (unsigned char *)v76) >> 2;
    uint64_t v16 = *a2;
    unint64_t v17 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 3);
    if (v15 == v17)
    {
      memset(v81, 0, 24);
      sub_10015036C(v81, *(const void **)(v16 + 120), *(void *)(v16 + 128), (uint64_t)(*(void *)(v16 + 128) - *(void *)(v16 + 120)) >> 3);
      uint64_t v75 = 0;
      if (*(void *)v81 == *(void *)&v81[8]) {
        uint64_t v18 = 0x3FC5604189374BC7;
      }
      else {
        uint64_t v18 = *(void *)(*(void *)&v81[8] - 8);
      }
      uint64_t v75 = v18;
      sub_1001F2440((void *)(a1 + 328), (double *)&v75);
      unint64_t v52 = *(void *)(a1 + 368);
      if (v52 > *(int *)(a1 + 24))
      {
        ++*(void *)(a1 + 360);
        *(void *)(a1 + 368) = v52 - 1;
        sub_1001F286C(a1 + 328, 1);
      }
      if (*(void *)v81 == *(void *)&v81[8])
      {
        sub_10015587C(v73, 6uLL, &qword_100774A28);
        sub_1003F2A00(a1, a2, (uint64_t *)&v76, v80, v79, a3, v73);
        if (*(void *)v73)
        {
          uint64_t v74 = *(void **)v73;
          operator delete(*(void **)v73);
        }
      }
      else
      {
        sub_1003F2A00(a1, a2, (uint64_t *)&v76, v80, v79, a3, v81);
      }
      unint64_t v53 = *(void *)(a1 + 368);
      if (v53 == *(_DWORD *)(a1 + 24))
      {
        uint64_t v54 = *(void *)(a1 + 336);
        double v55 = 0.0;
        if (*(void *)(a1 + 344) != v54)
        {
          unint64_t v56 = *(void *)(a1 + 360);
          long long v57 = (double **)(v54 + 8 * (v56 >> 9));
          uint64_t v58 = *v57;
          long long v59 = &(*v57)[v56 & 0x1FF];
          uint64_t v60 = *(void *)(v54 + (((v56 + v53) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v56 + v53) & 0x1FF);
          while (v59 != (double *)v60)
          {
            double v61 = *v59++;
            double v62 = v61;
            if ((char *)v59 - (char *)v58 == 4096)
            {
              long long v63 = v57[1];
              ++v57;
              uint64_t v58 = v63;
              long long v59 = v63;
            }
            double v55 = v55 + v62;
          }
        }
        if (v55 / (double)v53 > *(double *)(a1 + 32))
        {
          *(unsigned char *)a1 = 0;
          sub_10016CEEC(a1 + 216, *(void *)(a1 + 216));
          *(_DWORD *)(a1 + 320) = 0;
          sub_1003F2988((void *)(a1 + 328));
          uint64_t v64 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v73 = 0;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionTrackingTargetSet:: killed all tracking targets because detected in NFOV consistently", v73, 2u);
          }
        }
      }
      if (*(void *)v81)
      {
        *(void *)&v81[8] = *(void *)v81;
        operator delete(*(void **)v81);
      }
      goto LABEL_93;
    }
    *(unsigned char *)a1 = 0;
    sub_10016CEEC(a1 + 216, *(void *)(a1 + 216));
    *(_DWORD *)(a1 + 320) = 0;
    uint64_t v44 = *(void ***)(a1 + 336);
    uint64_t v45 = *(void *)(a1 + 344);
    *(void *)(a1 + 368) = 0;
    unint64_t v46 = v45 - (void)v44;
    if (v46 >= 0x11)
    {
      do
      {
        operator delete(*v44);
        uint64_t v47 = *(void *)(a1 + 344);
        uint64_t v44 = (void **)(*(void *)(a1 + 336) + 8);
        *(void *)(a1 + 336) = v44;
        unint64_t v46 = v47 - (void)v44;
      }
      while (v46 > 0x10);
    }
    if (v46 >> 3 == 1)
    {
      uint64_t v48 = 256;
    }
    else
    {
      if (v46 >> 3 != 2) {
        goto LABEL_91;
      }
      uint64_t v48 = 512;
    }
    *(void *)(a1 + 360) = v48;
LABEL_91:
    uint64_t v65 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      unint64_t v71 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 3);
      *(_DWORD *)char v81 = 134218240;
      *(void *)&v81[4] = (v77 - (unsigned char *)v76) >> 2;
      *(_WORD *)&v81[12] = 2048;
      *(void *)&v81[14] = v71;
      _os_log_error_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "#sf,RoseSensorFusionTrackingTargetSet error: assignmentVec size is %zu, measurement size is %zu, reset state", v81, 0x16u);
    }
LABEL_93:
    if (v76)
    {
      char v77 = v76;
      operator delete(v76);
    }
    int64_t v76 = v79;
    sub_100149DEC((void ***)&v76);
    v79[0] = v80;
    sub_100149DEC((void ***)v79);
    v80[0] = __p;
    sub_1003F5BD4((void ***)v80);
    __p[0] = buf;
    sub_100149DEC((void ***)__p);
    if (v15 == v17)
    {
LABEL_96:
      int v66 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v67 = *(unsigned __int16 *)(*a2 + 8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v67;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#sf,RoseSensorFusionTrackingTargetSet internal state after measurement update of cycle_index %d of primary channel:", buf, 8u);
      }
      uint64_t v68 = *(void *)(a1 + 216);
      uint64_t v69 = *(void *)(a1 + 224);
      if (v68 != v69)
      {
        int v70 = 0;
        do
        {
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
            sub_1003F3120(v68);
          }
          ++v70;
          v68 += 1480;
        }
        while (v68 != v69);
      }
      goto LABEL_103;
    }
    return 0;
  }
LABEL_103:
  sub_1003F1984(a1);
  if (*(void *)(a1 + 224) == *(void *)(a1 + 216)) {
    sub_1003F1A00(a1);
  }
  return 1;
}

void sub_1003F2598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char ****a18, char ****a19, uint64_t a20,char ***a21,uint64_t a22,uint64_t a23,char **a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  if (a18)
  {
    a19 = a18;
    operator delete(a18);
  }
  a18 = &a21;
  sub_100149DEC((void ***)&a18);
  a21 = &a24;
  sub_100149DEC((void ***)&a21);
  a24 = &a31;
  sub_1003F5BD4((void ***)&a24);
  a31 = &a35;
  sub_100149DEC((void ***)&a31);
  _Unwind_Resume(a1);
}

void sub_1003F26B8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  if (!*(unsigned char *)(a1 + 208)) {
    sub_100438CC8();
  }
  uint64_t v8 = a3[1] - *a3;
  if (!v8 || (unint64_t v9 = v8 / 24, v10 = (uint64_t)(*(void *)(*a3 + 8) - *(void *)*a3) >> 3, v11 = v10 - v9, v10 <= v9)) {
    sub_100438CF4();
  }
  uint64_t v13 = 0;
  if (v9 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v9;
  }
  uint64_t v25 = v14;
  unint64_t v15 = v10 - v9;
  do
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 8;
    do
    {
      if (v11 <= v17)
      {
        if (v15 == v17)
        {
          *(void *)(*(void *)(*a4 + 24 * v13) + 8 * ((v11 + v13) >> 6)) |= 1 << (v11
                                                                                     + v13);
          long double v24 = *(double *)(a1 + 56);
          if (v24 <= 0.0) {
            sub_100438D20();
          }
          *(long double *)(*(void *)(*a3 + 24 * v13) + 8 * (v11 + v13)) = log(v24);
        }
      }
      else
      {
        int v19 = sub_1003F3C74(a1, *a2 + 152 * v13, *(void *)(a1 + 216) + v18, *(void *)(*a3 + 24 * v13) + v16, *(void *)(*a5 + 24 * v13) + v16, *(void *)(*a6 + 24 * v13) + v16, a7);
        uint64_t v20 = *(void *)(*a4 + 24 * v13);
        unint64_t v21 = v17 >> 6;
        uint64_t v22 = 1 << v17;
        if (v19) {
          uint64_t v23 = *(void *)(v20 + 8 * v21) | v22;
        }
        else {
          uint64_t v23 = *(void *)(v20 + 8 * v21) & ~v22;
        }
        *(void *)(v20 + 8 * v21) = v23;
      }
      ++v17;
      v18 += 1480;
      v16 += 8;
    }
    while (v10 != v17);
    ++v13;
    ++v15;
  }
  while (v13 != v25);
}

void sub_1003F28A8(uint64_t a1, uint64_t **a2, uint64_t *a3, char *a4)
{
  long long __p = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  memset(v7, 0, sizeof(v7));
  sub_1003F61EC(v7, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  unint64_t v11 = (void **)0xC1CDCD6500000000;
  sub_1003F400C(a1, a2, v7, a4, (uint64_t)&__p, 0, (double *)&v11, 0.0);
  unint64_t v11 = v7;
  sub_1003F5BD4(&v11);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_1003F2960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  *(void *)(v15 - 40) = v14;
  sub_1003F5BD4((void ***)(v15 - 40));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1003F2988(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = a1[2];
  a1[5] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
}

void sub_1003F2A00(uint64_t a1, void *a2, uint64_t *a3, void *a4, void *a5, void *a6, void *a7)
{
  if (a2[1] == *a2) {
    sub_100438D4C();
  }
  if (!*(unsigned char *)(a1 + 208)) {
    sub_100438D78();
  }
  unint64_t v11 = a2;
  uint64_t v12 = *(void *)(a1 + 216);
  double v62 = (uint64_t *)(a1 + 216);
  uint64_t v13 = *(void *)(a1 + 224);
  unint64_t v14 = 0x9DC0588FE9DC0589 * ((v13 - v12) >> 3);
  LOBYTE(v65) = 0;
  sub_1003F5724(&__p, v14, (unsigned __int8 *)&v65);
  uint64_t v57 = v12;
  if (v13 != v12)
  {
    if (v14 <= 1) {
      unint64_t v15 = 1;
    }
    else {
      unint64_t v15 = 0x9DC0588FE9DC0589 * ((v13 - v12) >> 3);
    }
    uint64_t v16 = (_DWORD *)(*v62 + 1336);
    do
    {
      *uint64_t v16 = -1;
      v16 += 370;
      --v15;
    }
    while (v15);
  }
  uint64_t v17 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v18 = 0;
    uint64_t v64 = v11;
    uint64_t v58 = a5;
    long long v59 = a6;
    do
    {
      unint64_t v19 = *(int *)(v17 + 4 * v18);
      if (v14 > v19)
      {
        uint64_t v20 = *v62;
        uint64_t v21 = *v62 + 1480 * (int)v19;
        uint64_t v87 = 0x100000003;
        long long v86 = xmmword_1004C1B50;
        long long v85 = off_100861B38;
        long long v88 = &v89;
        uint64_t v67 = 0x300000003;
        uint64_t v65 = off_100861B80;
        long long v66 = xmmword_1004C1E40;
        uint64_t v68 = v69;
        uint64_t v63 = v21;
        uint64_t v22 = v21 + 8;
        if (sub_1003FC5A8(v21 + 8, (uint64_t)&v85, (uint64_t)&v65, a6, *v11 + 152 * v18))
        {
          sub_10034CDD4((uint64_t)v84, (uint64_t)&v85);
          sub_10034CF64((uint64_t)&v83, (uint64_t)&v65);
          uint64_t v23 = 0;
          long double v24 = &v91;
          do
          {
            for (uint64_t i = 0; i != 3; ++i)
              *((void *)v24 + i) = *(void *)sub_10034185C((uint64_t)&v83, v23, i);
            ++v23;
            long double v24 = (long long *)((char *)v24 + 24);
          }
          while (v23 != 3);
          uint64_t v26 = *(void *)sub_1003416AC((uint64_t)v84, 0);
          double v27 = (double *)sub_1003416AC((uint64_t)v84, 1u);
          double v28 = sub_100030430(*v27);
          unint64_t v29 = (double *)sub_1003416AC((uint64_t)v84, 2u);
          double v30 = sub_100030430(*v29);
          long long v31 = v93;
          long long v32 = v94;
          long long v98 = v93;
          long long v99 = v94;
          uint64_t v33 = v95;
          uint64_t v100 = v95;
          long long v34 = v92;
          long long v35 = v91;
          long long v96 = v91;
          long long v97 = v92;
          uint64_t v36 = v20 + 1480 * (int)v19;
          *(unsigned char *)(v36 + 1344) = 1;
          *(void *)(v36 + 1352) = v26;
          *(double *)(v36 + 1360) = v28;
          *(double *)(v36 + 1368) = v30;
          *(_OWORD *)(v36 + 1392) = v34;
          *(_OWORD *)(v36 + 1408) = v31;
          *(_OWORD *)(v36 + 1424) = v32;
          *(void *)(v36 + 1440) = v33;
          *(_OWORD *)(v36 + 1376) = v35;
          uint64_t v83 = off_100853598;
          v84[0] = off_100853598;
          a5 = v58;
          a6 = v59;
        }
        else
        {
          uint64_t v41 = v20 + 1480 * (int)v19;
          *(void *)(v41 + 1440) = 0;
          *(_OWORD *)(v41 + 1424) = 0u;
          *(_OWORD *)(v41 + 1408) = 0u;
          *(_OWORD *)(v41 + 1392) = 0u;
          *(_OWORD *)(v41 + 1376) = 0u;
          *(_OWORD *)(v41 + 1360) = 0u;
          *(_OWORD *)(v41 + 1344) = 0u;
        }
        sub_100402904(v22, *v64 + 152 * v18, a6);
        double v42 = sub_100030430(*(double *)(*v64 + 152 * v18 + 72));
        double v43 = sub_100030430(*(double *)(*v64 + 152 * v18 + 64));
        double v44 = sub_1003F42B4(a1, a7, v42, v43);
        double v45 = *(double *)(*(void *)(*a4 + 24 * v18) + 8 * v19);
        long double v46 = log(sqrt(*(double *)(*(void *)(*a5 + 24 * v18) + 8 * v19)));
        uint64_t v47 = v20 + 1480 * (int)v19;
        uint64_t v48 = (double *)(v47 + 1312);
        double v49 = v44 * (5.0 - v46 + v45 * -0.5) + *(double *)(a1 + 64) * *(double *)(v47 + 1312);
        *(double *)(v47 + 1312) = v49;
        double v50 = *(double *)(v47 + 1320);
        if (v50 != 0.0)
        {
          double v49 = v50 + v49;
          double *v48 = v49;
          *(void *)(v47 + 1320) = 0;
        }
        double v51 = *(double *)(a1 + 96);
        if (v49 > v51) {
          double *v48 = v51;
        }
        uint64_t v52 = v20 + 1480 * (int)v19;
        ++*(void *)(v52 + 1328);
        *(_DWORD *)(v52 + 1336) = v18;
        *(_DWORD *)(v52 + 1340) = 0;
        sub_1003F4804(v63);
      }
      LODWORD(v65) = 0;
      sub_1003F4D84((uint64_t)&v66);
      char v75 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      memset(v82, 0, sizeof(v82));
      v69[1264] = 1;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      int v37 = *(_DWORD *)(a1 + 320);
      *(_DWORD *)(a1 + 320) = v37 + 1;
      LODWORD(v65) = v37;
      uint64_t v72 = 0;
      int v73 = v18;
      int v74 = 0;
      sub_100402904((uint64_t)&v66, *v11 + 152 * v18, a6);
      uint64_t v38 = (int8x16_t *)(*v11 + 152 * v18);
      v82[0] = v38[3].i64[0];
      *(int8x16_t *)&v82[1] = vextq_s8(v38[4], v38[4], 8uLL);
      v82[3] = 0;
      unint64_t v39 = *(void *)(a1 + 224);
      if (v39 >= *(void *)(a1 + 232))
      {
        uint64_t v40 = sub_1003F50B8(v62, (uint64_t)&v65);
      }
      else
      {
        sub_1003F51E0(a1 + 232, *(void *)(a1 + 224), (uint64_t)&v65);
        uint64_t v40 = v39 + 1480;
        *(void *)(a1 + 224) = v39 + 1480;
      }
      unint64_t v11 = v64;
      *(void *)(a1 + 224) = v40;
      ++v18;
      uint64_t v17 = *a3;
    }
    while (v18 < (a3[1] - *a3) >> 2);
  }
  if (v13 != v57)
  {
    unint64_t v53 = 0;
    if (v14 <= 1) {
      uint64_t v54 = 1;
    }
    else {
      uint64_t v54 = v14;
    }
    uint64_t v55 = 1344;
    do
    {
      if (((*(void *)((char *)__p + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
      {
        uint64_t v56 = *(void *)(a1 + 216) + v55;
        *(double *)(v56 - 32) = *(double *)(a1 + 72) + *(double *)(v56 - 32);
        ++*(void *)(v56 - 16);
        ++*(_DWORD *)(v56 - 4);
        sub_10040AD04(v56);
      }
      ++v53;
      v55 += 1480;
    }
    while (v54 != v53);
  }
  sub_1003F48FC(a1);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1003F3084(_Unwind_Exception *a1)
{
  if (STACK[0x760]) {
    operator delete((void *)STACK[0x760]);
  }
  _Unwind_Resume(a1);
}

void sub_1003F3120(uint64_t a1)
{
  sub_100054E28((uint64_t)&v15);
  sub_100056628(&v16, (uint64_t)"tid: ", 5);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100056628(v2, (uint64_t)", ", 2);
  uint64_t v3 = sub_100056628(&v16, (uint64_t)"status: ", 8);
  sub_10040AD1C(*(unsigned char *)(a1 + 1304), __p);
  if ((v14 & 0x80u) == 0) {
    unint64_t v4 = __p;
  }
  else {
    unint64_t v4 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v5 = v14;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  uint64_t v6 = sub_100056628(v3, (uint64_t)v4, v5);
  sub_100056628(v6, (uint64_t)", ", 2);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  sub_100056628(&v16, (uint64_t)"track score: ", 13);
  long long v7 = (void *)std::ostream::operator<<();
  sub_100056628(v7, (uint64_t)", ", 2);
  sub_100056628(&v16, (uint64_t)"score delta: ", 13);
  uint64_t v8 = (void *)std::ostream::operator<<();
  sub_100056628(v8, (uint64_t)", ", 2);
  sub_100056628(&v16, (uint64_t)"track epochs count: ", 20);
  unint64_t v9 = (void *)std::ostream::operator<<();
  sub_100056628(v9, (uint64_t)", ", 2);
  sub_100056628(&v16, (uint64_t)"assigned measurement: ", 22);
  uint64_t v10 = (void *)std::ostream::operator<<();
  sub_100056628(v10, (uint64_t)", ", 2);
  sub_100056628(&v16, (uint64_t)"missed count: ", 14);
  unint64_t v11 = (void *)std::ostream::operator<<();
  sub_100056628(v11, (uint64_t)", ", 2);
  uint64_t v12 = v16;
  *(_DWORD *)((char *)&v16 + *(void *)(v16 - 24) + 8) = *(_DWORD *)((unsigned char *)&v16 + *(void *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)&v16 + *(void *)(v12 - 24) + 16) = 2;
  sub_100056628(&v16, (uint64_t)"az: ", 4);
  sub_1003F7620(a1 + 8);
}

void sub_1003F34F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_1003F3528(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 208)) {
    sub_100438DA4();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  v51[0] = 0;
  v51[1] = v4;
  memset(v53, 0, sizeof(v53));
  uint64_t v52 = v53;
  int v54 = 8;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 144) = 0;
  *(unsigned char *)(a2 + 152) = 0;
  *(unsigned char *)(a2 + 200) = 0;
  if (*(unsigned char *)(a1 + 312))
  {
    *(unsigned char *)(a1 + 312) = 0;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
  }
  if (*(unsigned char *)(a1 + 384))
  {
    uint64_t v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v56[0] = v4;
      long long v7 = "#sf,sensor fusion report is locked, no sensor fusion solution for target 0x%llx";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
      BOOL v8 = *(unsigned char *)(a2 + 200) == 0;
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  unint64_t v9 = *(void *)(a1 + 368);
  if (v9 == *(_DWORD *)(a1 + 24))
  {
    uint64_t v10 = *(void *)(a1 + 336);
    double v11 = 0.0;
    if (*(void *)(a1 + 344) != v10)
    {
      unint64_t v12 = *(void *)(a1 + 360);
      uint64_t v13 = (double **)(v10 + 8 * (v12 >> 9));
      unsigned __int8 v14 = *v13;
      uint64_t v15 = &(*v13)[v12 & 0x1FF];
      uint64_t v16 = *(void *)(v10 + (((v12 + v9) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v12 + v9) & 0x1FF);
      while (v15 != (double *)v16)
      {
        double v17 = *v15++;
        double v18 = v17;
        if ((char *)v15 - (char *)v14 == 4096)
        {
          unint64_t v19 = v13[1];
          ++v13;
          unsigned __int8 v14 = v19;
          uint64_t v15 = v19;
        }
        double v11 = v11 + v18;
      }
    }
    if (v11 / (double)v9 > *(double *)(a1 + 40))
    {
      uint64_t v6 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v56[0] = v4;
        long long v7 = "#sf,average p6 is above threshold, no sensor fusion solution for target 0x%llx";
        goto LABEL_8;
      }
LABEL_19:
      BOOL v8 = 1;
LABEL_20:
      *(void *)(a2 + 152) = v4;
      *(unsigned char *)(a2 + 160) = v5;
      *(void *)(a2 + 168) = 0;
      *(unsigned char *)(a2 + 176) = 0;
      *(void *)(a2 + 184) = 0;
      *(unsigned char *)(a2 + 192) = 0;
      if (!v8) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
  }
  uint64_t v20 = *(void *)(a1 + 216);
  uint64_t v21 = *(void *)(a1 + 224) - v20;
  if (!v21) {
    goto LABEL_42;
  }
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  unint64_t v24 = 0;
  unint64_t v25 = v21 / 1480;
  uint64_t v26 = v25 <= 1 ? 1 : v25;
  double v27 = (unint64_t *)(v20 + 1328);
  int v28 = -1;
  int v29 = -1;
  do
  {
    if (*((unsigned char *)v27 - 24) == 2)
    {
      if (*v27 > v23)
      {
        unint64_t v23 = *v27;
        int v28 = v22;
      }
      if (*v27 > v24)
      {
        unint64_t v23 = v24;
        unint64_t v24 = *v27;
        int v28 = v29;
        int v29 = v22;
      }
    }
    ++v22;
    v27 += 185;
  }
  while (v26 != v22);
  if (v29 == -1)
  {
LABEL_42:
    *(void *)(a2 + 152) = v4;
    *(unsigned char *)(a2 + 160) = v5;
    *(void *)(a2 + 168) = 0;
    *(unsigned char *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(unsigned char *)(a2 + 192) = 0;
    goto LABEL_43;
  }
  int v30 = v29;
  if (v28 != -1)
  {
    sub_1003F1598(v20 + 1480 * v29, v20 + 1480 * v28, buf);
    if (v59)
    {
      sub_10040253C((uint64_t)v56 + 4, (uint64_t)v51);
      uint64_t v31 = *(void *)((char *)&v56[163] + 4);
      int v32 = *(_DWORD *)buf;
      uint64_t v33 = v51[0];
      uint64_t v34 = *(void *)&v53[1];
      int8x16_t v35 = *(int8x16_t *)((char *)&v53[1] + 8);
      BOOL v36 = v57 != -1;
      if (!*(unsigned char *)(a1 + 296)) {
        *(unsigned char *)(a1 + 296) = 1;
      }
      uint64_t v37 = v58;
      *(_DWORD *)(a1 + 240) = v32;
      uint64_t v38 = a1 + 240;
      *(void *)(v38 + 8) = v33;
      *(void *)(v38 + 16) = v34;
      *(int8x16_t *)(v38 + 24) = vextq_s8(v35, v35, 8uLL);
      *(void *)(v38 + 40) = v31;
      *(unsigned char *)(v38 + 48) = v36;
      sub_1003F3A58(a2, (uint64_t)v51);
      int v39 = *(unsigned __int8 *)(a2 + 200);
      *(void *)(a2 + 152) = v4;
      *(unsigned char *)(a2 + 160) = v5;
      *(void *)(a2 + 168) = v31;
      *(unsigned char *)(a2 + 176) = 1;
      *(void *)(a2 + 184) = v37;
      *(unsigned char *)(a2 + 192) = 1;
      if (v39) {
        goto LABEL_40;
      }
    }
    else
    {
      int v50 = *(unsigned __int8 *)(a2 + 200);
      *(void *)(a2 + 152) = v4;
      *(unsigned char *)(a2 + 160) = v5;
      *(void *)(a2 + 168) = 0;
      *(unsigned char *)(a2 + 176) = 0;
      *(void *)(a2 + 184) = 0;
      *(unsigned char *)(a2 + 192) = 0;
      if (v50)
      {
LABEL_40:
        if (v59)
        {
          *(void *)((char *)&v56[121] + 4) = off_100853598;
          *(void *)((char *)&v56[110] + 4) = off_100853598;
          *(void *)((char *)&v56[68] + 4) = off_100853598;
        }
        goto LABEL_44;
      }
    }
    *(unsigned char *)(a2 + 200) = 1;
    goto LABEL_40;
  }
  sub_10040253C(v20 + 1480 * v29 + 8, (uint64_t)v51);
  uint64_t v40 = (int *)(v20 + 1480 * v30);
  uint64_t v41 = *((void *)v40 + 164);
  uint64_t v42 = *((void *)v40 + 184);
  int v43 = *v40;
  uint64_t v44 = v51[0];
  uint64_t v45 = *(void *)&v53[1];
  int8x16_t v46 = *(int8x16_t *)((char *)&v53[1] + 8);
  BOOL v47 = v40[334] != -1;
  if (!*(unsigned char *)(a1 + 296)) {
    *(unsigned char *)(a1 + 296) = 1;
  }
  *(_DWORD *)(a1 + 240) = v43;
  uint64_t v48 = a1 + 240;
  *(void *)(v48 + 8) = v44;
  *(void *)(v48 + 16) = v45;
  *(int8x16_t *)(v48 + 24) = vextq_s8(v46, v46, 8uLL);
  *(void *)(v48 + 40) = v41;
  *(unsigned char *)(v48 + 48) = v47;
  sub_1003F3A58(a2, (uint64_t)v51);
  int v49 = *(unsigned __int8 *)(a2 + 200);
  *(void *)(a2 + 152) = v4;
  *(unsigned char *)(a2 + 160) = v5;
  *(void *)(a2 + 168) = v41;
  *(unsigned char *)(a2 + 176) = 1;
  *(void *)(a2 + 184) = v42;
  *(unsigned char *)(a2 + 192) = 1;
  if (!v49) {
LABEL_43:
  }
    *(unsigned char *)(a2 + 200) = 1;
LABEL_44:
  sub_10003E96C((uint64_t)&v52, *(void **)&v53[0]);
}

void sub_1003F3A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (*(unsigned char *)(v13 + 144)) {
    sub_10003E96C(v13 + 16, *(void **)(v13 + 24));
  }
  sub_10003E96C(v12, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F3A58(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 144))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (a1 != a2) {
      sub_10016DCC8((uint64_t **)(a1 + 16), *(unsigned __int16 **)(a2 + 16), (unsigned __int16 *)(a2 + 24));
    }
    long long v4 = *(_OWORD *)(a2 + 40);
    long long v5 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
    *(_OWORD *)(a1 + 40) = v4;
    long long v6 = *(_OWORD *)(a2 + 88);
    long long v7 = *(_OWORD *)(a2 + 104);
    long long v8 = *(_OWORD *)(a2 + 120);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v8;
    *(_OWORD *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 88) = v6;
  }
  else
  {
    sub_10040AD00(a1);
    *(unsigned char *)(a1 + 144) = 1;
  }
  return a1;
}

double sub_1003F3AF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 216);
  uint64_t v1 = *(void *)(a1 + 224);
  if (v1 == v2) {
    return 0.0;
  }
  double result = *(double *)(v2 + 880);
  do
  {
    if (*(double *)(v2 + 880) < result) {
      double result = *(double *)(v2 + 880);
    }
    v2 += 1480;
  }
  while (v2 != v1);
  return result;
}

uint64_t sub_1003F3B2C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 216);
  double v2 = 0.0;
  while (v1 != *(void *)(result + 224))
  {
    if (*(double *)(v1 + 880) > v2) {
      double v2 = *(double *)(v1 + 880);
    }
    v1 += 1480;
  }
  return result;
}

uint64_t sub_1003F3B54@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 216);
  uint64_t v4 = *(void *)(result + 224);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4 != v3) {
    sub_1003EE480(v3 + 8);
  }
  return result;
}

void sub_1003F3C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10016E9DC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F3C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (!*(unsigned char *)(a1 + 208)) {
    sub_100438DD0();
  }
  uint64_t v21 = 0x100000003;
  long long v20 = xmmword_1004C1B50;
  unint64_t v19 = off_100861B38;
  uint64_t v22 = &v23;
  uint64_t v16 = 0x300000003;
  long long v15 = xmmword_1004C1E40;
  unsigned __int8 v14 = off_100861B80;
  double v17 = &v18;
  uint64_t result = sub_1003FC5A8(a3, (uint64_t)&v19, (uint64_t)&v14, a7, a2);
  if (result)
  {
    sub_1003F6390((uint64_t)v13, DWORD1(v20), v20);
    sub_1003416E8((uint64_t)&v19, v13);
    uint64_t v10 = 0x300000003;
    long long v9 = xmmword_1004C1E40;
    long long v8 = off_100861B80;
    double v11 = &v12;
    uint64_t v31 = 0x100000003;
    long long v30 = xmmword_1004C1B50;
    int v29 = off_1008627E0;
    int v32 = &v33;
    uint64_t v26 = 0x10000000CLL;
    long long v25 = xmmword_1004C2700;
    unint64_t v24 = off_100862828;
    double v27 = &v28;
    sub_1003517F4((uint64_t)&v14, (uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v8);
  }
  return result;
}

void sub_1003F400C(uint64_t a1, uint64_t **a2, void *a3, char *a4, uint64_t a5, int a6, double *a7, double a8)
{
  uint64_t v8 = (char *)a2[1] - (char *)*a2;
  if (v8)
  {
    double v10 = a8;
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) <= a6)
    {
      if (*a7 < a8)
      {
        *a7 = a8;
        if (a4 != (char *)a5)
        {
          uint64_t v37 = *(__int32 **)a5;
          uint64_t v38 = *(void *)(a5 + 8);
          unint64_t v39 = (v38 - *(void *)a5) >> 2;
          sub_100312F60(a4, (char *)v37, v38, v39);
        }
      }
    }
    else
    {
      uint64_t v13 = **a2;
      uint64_t v14 = (*a2)[1];
      if (v14 != v13)
      {
        unint64_t v17 = 0;
        unint64_t v18 = (v14 - v13) >> 3;
        uint64_t v41 = (void *)(a5 + 16);
        unsigned int v40 = a6 + 1;
        if (v18 <= 1) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = v18;
        }
        do
        {
          if ((*(void *)(*(void *)(*a3 + 24 * a6) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17))
          {
            uint64_t v21 = *(__int32 **)(a5 + 8);
            uint64_t v22 = wmemchr(*(__int32 **)a5, v17, ((uint64_t)v21 - *(void *)a5) >> 2);
            uint64_t v23 = v22 ? v22 : v21;
            unint64_t v24 = *(__int32 **)(a5 + 8);
            if (v23 == v24)
            {
              double v25 = *(double *)((*a2)[3 * a6] + 8 * v17);
              if ((unint64_t)v23 >= *v41)
              {
                double v27 = *(__int32 **)a5;
                uint64_t v28 = ((uint64_t)v24 - *(void *)a5) >> 2;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62) {
                  sub_1000267C4();
                }
                uint64_t v30 = *v41 - (void)v27;
                if (v30 >> 1 > v29) {
                  unint64_t v29 = v30 >> 1;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  int v32 = (char *)sub_10003B54C((uint64_t)v41, v31);
                  double v27 = *(__int32 **)a5;
                  uint64_t v23 = *(__int32 **)(a5 + 8);
                }
                else
                {
                  int v32 = 0;
                }
                uint64_t v33 = &v32[4 * v28];
                *(_DWORD *)uint64_t v33 = v17;
                uint64_t v26 = v33 + 4;
                while (v23 != v27)
                {
                  int v34 = *--v23;
                  *((_DWORD *)v33 - 1) = v34;
                  v33 -= 4;
                }
                *(void *)a5 = v33;
                *(void *)(a5 + 8) = v26;
                *(void *)(a5 + 16) = &v32[4 * v31];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *uint64_t v23 = v17;
                uint64_t v26 = v23 + 1;
              }
              double v35 = v10 + v25;
              *(void *)(a5 + 8) = v26;
              sub_1003F400C(a1, a2, a3, a4, a5, v40, a7, v35);
              double v10 = v35 - *(double *)((*a2)[3 * a6] + 8 * v17);
              *(void *)(a5 + 8) -= 4;
            }
          }
          ++v17;
        }
        while (v17 != v20);
      }
    }
  }
  else
  {
    BOOL v36 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100438E28(v36);
    }
  }
}

double sub_1003F42B4(uint64_t a1, void *a2, double a3, double a4)
{
  if (!*(unsigned char *)(a1 + 208)) {
    sub_100438E6C();
  }
  double v57 = 0.0;
  double v58 = 0.0;
  sub_10003057C(&v58, &v57, a3, a4);
  if (v58 < 0.0 || v58 > 180.0 || (double v7 = v57, v57 < 0.0) || v57 > 180.0) {
    sub_100438EC4();
  }
  if (a2[1] - *a2 != 48) {
    sub_100438E98();
  }
  if (!*(_DWORD *)(a1 + 376) && a4 >= -60.0 && a3 >= -10.0 && a3 <= 10.0 && a4 <= 0.0 && *(double *)(*a2 + 40) > 0.7)
  {
    double v51 = qword_1008ABDE0;
    double v50 = 1.7;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 134217984;
      *(void *)((char *)&__p + 4) = 0x3FFB333333333333;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#sf,AoA is in golden area, use default scale factor %f and ignore neural network probability", (uint8_t *)&__p, 0xCu);
    }
    return v50;
  }
  double v8 = *(double *)(a1 + 104);
  if (v58 - v8 >= 0.0) {
    double v9 = v58 - v8;
  }
  else {
    double v9 = 0.0;
  }
  if (v58 + v8 <= 180.0) {
    double v10 = v58 + v8;
  }
  else {
    double v10 = 180.0;
  }
  double v11 = (double *)operator new(0x10uLL);
  *double v11 = v9;
  v11[1] = v10;
  uint64_t v12 = (double *)operator new(0x10uLL);
  uint64_t v13 = v12;
  uint64_t v14 = 0;
  double v15 = v7 + v8;
  if (v7 + v8 > 180.0) {
    double v15 = 180.0;
  }
  double v16 = v7 - v8;
  if (v7 - v8 < 0.0) {
    double v16 = 0.0;
  }
  *uint64_t v12 = v16;
  v12[1] = v15;
  long long __p = 0uLL;
  uint64_t v60 = 0;
  int v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  do
  {
    uint64_t v17 = 0;
    double v18 = v11[v14];
    do
    {
      uint64_t v19 = *(void *)(a1 + 560);
      if (v19)
      {
        unint64_t v20 = sub_1001553A8(v19, v18, v13[v17]);
        int v21 = v20;
        if ((v20 & 0xFF00000000) != 0)
        {
          uint64_t v22 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v60)
          {
            unint64_t v24 = (char *)__p;
            uint64_t v25 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62) {
              sub_1000267C4();
            }
            uint64_t v27 = (uint64_t)&v60[-__p];
            if ((uint64_t)&v60[-__p] >> 1 > v26) {
              unint64_t v26 = v27 >> 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            if (v28)
            {
              unint64_t v29 = (char *)sub_10003B54C((uint64_t)&v60, v28);
              uint64_t v22 = (char *)*((void *)&__p + 1);
              unint64_t v24 = (char *)__p;
            }
            else
            {
              unint64_t v29 = 0;
            }
            uint64_t v30 = &v29[4 * v25];
            *(_DWORD *)uint64_t v30 = v21;
            uint64_t v23 = v30 + 4;
            while (v22 != v24)
            {
              int v31 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v30 - 1) = v31;
              v30 -= 4;
            }
            *(void *)&long long __p = v30;
            *((void *)&__p + 1) = v23;
            uint64_t v60 = &v29[4 * v28];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            **((_DWORD **)&__p + 1) = v20;
            uint64_t v23 = v22 + 4;
          }
          *((void *)&__p + 1) = v23;
        }
      }
      ++v17;
    }
    while (v17 != 2);
    ++v14;
  }
  while (v14 != 2);
  uint64_t v33 = (_DWORD *)*((void *)&__p + 1);
  int v32 = (_DWORD *)__p;
  double v34 = 0.0;
  if ((void)__p == *((void *)&__p + 1)) {
    goto LABEL_79;
  }
  do
  {
    if ((*v32 - 7) <= 0xFFFFFFF9) {
      __assert_rtn("getAoaScaleFactor", "RoseSensorFusionTrackingTargetSet.cpp", 750, "region > 0 && region <= kNumberOfRegions");
    }
    uint64_t v35 = (*v32 - 1);
    uint64_t v36 = *a2;
    uint64_t v37 = v55;
    if (v55 >= v56)
    {
      unint64_t v39 = v54;
      uint64_t v40 = (v55 - v54) >> 3;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61) {
        sub_1000267C4();
      }
      uint64_t v42 = v56 - v54;
      if ((v56 - v54) >> 2 > v41) {
        unint64_t v41 = v42 >> 2;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43)
      {
        uint64_t v44 = (char *)sub_100056BF0((uint64_t)&v56, v43);
        unint64_t v39 = v54;
        uint64_t v37 = v55;
      }
      else
      {
        uint64_t v44 = 0;
      }
      uint64_t v45 = &v44[8 * v40];
      *(void *)uint64_t v45 = *(void *)(v36 + 8 * v35);
      uint64_t v38 = v45 + 8;
      while (v37 != v39)
      {
        uint64_t v46 = *((void *)v37 - 1);
        v37 -= 8;
        *((void *)v45 - 1) = v46;
        v45 -= 8;
      }
      int v54 = v45;
      uint64_t v56 = &v44[8 * v43];
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      *(void *)uint64_t v55 = *(void *)(v36 + 8 * v35);
      uint64_t v38 = v55 + 8;
    }
    uint64_t v55 = v38;
    ++v32;
  }
  while (v32 != v33);
  int v32 = (_DWORD *)__p;
  if (*((void *)&__p + 1) == (void)__p) {
    goto LABEL_79;
  }
  uint64_t v47 = 0;
  unint64_t v48 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
  if (v48 <= 1) {
    unint64_t v48 = 1;
  }
  int v49 = -1;
  double v34 = 0.0;
  do
  {
    if (*(double *)&v54[8 * v47] > v34)
    {
      int v49 = *(_DWORD *)(__p + 4 * v47);
      double v34 = *(double *)&v54[8 * v47];
    }
    ++v47;
  }
  while (v48 != v47);
  if (v49 != 2) {
    goto LABEL_79;
  }
  if (v34 <= *(double *)(a1 + 128))
  {
    if (v34 > *(double *)(a1 + 144))
    {
      double v50 = *(double *)(a1 + 152);
      goto LABEL_80;
    }
LABEL_79:
    double v50 = *(double *)(a1 + 120) + *(double *)(a1 + 112) * v34;
    goto LABEL_80;
  }
  double v50 = *(double *)(a1 + 136);
LABEL_80:
  if (v54)
  {
    operator delete(v54);
    int v32 = (_DWORD *)__p;
  }
  if (v32)
  {
    *((void *)&__p + 1) = v32;
    operator delete(v32);
  }
  operator delete(v13);
  operator delete(v11);
  return v50;
}

void sub_1003F47AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1003F4804(uint64_t a1)
{
  double v2 = *(double *)(a1 + 1464);
  __sincos_stret(*(double *)(a1 + 1456));
  __sincos_stret(v2);
  sub_1003F748C(a1 + 8);
}

uint64_t sub_1003F48FC(uint64_t result)
{
  if (!*(unsigned char *)(result + 208)) {
    sub_100438EF0();
  }
  uint64_t v1 = result;
  uint64_t v4 = *(void *)(result + 216);
  uint64_t v2 = *(void *)(result + 224);
  for (i = result + 216; v4 != v2; uint64_t v2 = *(void *)(v1 + 224))
  {
    double v5 = *(double *)(v4 + 1312);
    if (v5 < *(double *)(v1 + 88) || *(_DWORD *)(v4 + 1340) >= *(_DWORD *)(v1 + 28))
    {
      sub_1003F65F0((uint64_t)&v8, v4 + 1480, v2, v4);
      uint64_t result = sub_10016CEEC(i, v7);
    }
    else
    {
      if (v5 < *(double *)(v1 + 80)) {
        char v6 = 1;
      }
      else {
        char v6 = 2;
      }
      *(unsigned char *)(v4 + 1304) = v6;
      v4 += 1480;
    }
  }
  return result;
}

void sub_1003F49A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0x100000003;
  uint64_t v3 = off_1008627E0;
  long long v4 = xmmword_1004C1B50;
  char v6 = &v7;
  uint64_t v10 = 0x300000003;
  long long v9 = xmmword_1004C1E40;
  char v8 = off_100861B80;
  double v11 = &v12;
  sub_1003F645C(a3, (uint64_t)&v3, (uint64_t)&v8);
}

uint64_t sub_1003F4C58(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x1C8uLL);
  sub_1003EF500(a1 + 464, a2 + 464);
  sub_1003EFA78(a1 + 552, a2 + 552);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  sub_1003EF500(a1 + 888, a2 + 888);
  sub_1003EFA78(a1 + 976, a2 + 976);
  long long v4 = *(_OWORD *)(a2 + 1304);
  long long v5 = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1320) = *(_OWORD *)(a2 + 1320);
  *(_OWORD *)(a1 + 1336) = v5;
  *(_OWORD *)(a1 + 1304) = v4;
  long long v6 = *(_OWORD *)(a2 + 1352);
  long long v7 = *(_OWORD *)(a2 + 1368);
  long long v8 = *(_OWORD *)(a2 + 1400);
  *(_OWORD *)(a1 + 1384) = *(_OWORD *)(a2 + 1384);
  *(_OWORD *)(a1 + 1400) = v8;
  *(_OWORD *)(a1 + 1352) = v6;
  *(_OWORD *)(a1 + 1368) = v7;
  long long v9 = *(_OWORD *)(a2 + 1416);
  long long v10 = *(_OWORD *)(a2 + 1432);
  long long v11 = *(_OWORD *)(a2 + 1464);
  *(_OWORD *)(a1 + 1448) = *(_OWORD *)(a2 + 1448);
  *(_OWORD *)(a1 + 1464) = v11;
  *(_OWORD *)(a1 + 1416) = v9;
  *(_OWORD *)(a1 + 1432) = v10;
  *(unsigned char *)(a1 + 1480) = 1;
  return a1;
}

void sub_1003F4D24(_Unwind_Exception *a1)
{
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_1003F4D84(uint64_t a1)
{
  *(void *)a1 = 0x3200000032;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = xmmword_100774A50;
  *(void *)(a1 + 120) = 0x3FDA6B5764E3D198;
  *(_OWORD *)(a1 + 128) = xmmword_100774A68;
  *(void *)(a1 + 144) = 0x3FB144BFB34BD977;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = xmmword_100774A50;
  *(void *)(a1 + 264) = 0x3FDA6B5764E3D198;
  *(_OWORD *)(a1 + 272) = xmmword_100774A68;
  *(void *)(a1 + 288) = 0x3FB144BFB34BD977;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = xmmword_100774A50;
  *(void *)(a1 + 408) = 0x3FDA6B5764E3D198;
  *(void *)(a1 + 432) = 0x3FB144BFB34BD977;
  *(_OWORD *)(a1 + 416) = xmmword_100774A68;
  *(_DWORD *)(a1 + 440) = 8;
  *(unsigned char *)(a1 + 444) = 0;
  uint64_t v2 = a1 + 456;
  *(void *)(a1 + 480) = 0x100000006;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = off_100864CD8;
  *(_OWORD *)(a1 + 464) = xmmword_1007749D0;
  *(void *)(a1 + 488) = a1 + 496;
  sub_1003411F0((_DWORD *)(a1 + 456), 6, 1);
  sub_100341240(v2, 0.0);
  *(void *)(a1 + 568) = 0x600000006;
  *(void *)(a1 + 544) = off_100864C90;
  *(_OWORD *)(a1 + 552) = xmmword_1007749C0;
  *(void *)(a1 + 576) = a1 + 584;
  sub_1003411F0((_DWORD *)(a1 + 544), 6, 6);
  sub_100341240(a1 + 544, 0.0);
  for (int i = 0; i != 6; ++i)
    *(void *)sub_1003802D0(a1 + 544, i, i) = 0x3FF0000000000000;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 904) = 0x100000006;
  *(void *)(a1 + 880) = off_100864CD8;
  *(_OWORD *)(a1 + 888) = xmmword_1007749D0;
  *(void *)(a1 + 912) = a1 + 920;
  sub_1003411F0((_DWORD *)(a1 + 880), 6, 1);
  sub_100341240(a1 + 880, 0.0);
  *(void *)(a1 + 992) = 0x600000006;
  *(void *)(a1 + 968) = off_100864C90;
  *(_OWORD *)(a1 + 976) = xmmword_1007749C0;
  *(void *)(a1 + 1000) = a1 + 1008;
  sub_1003411F0((_DWORD *)(a1 + 968), 6, 6);
  sub_100341240(a1 + 968, 0.0);
  for (int j = 0; j != 6; ++j)
    *(void *)sub_1003802D0(a1 + 968, j, j) = 0x3FF0000000000000;
  return a1;
}

void sub_1003F5030(_Unwind_Exception *a1)
{
  *long long v4 = off_100853598;
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_1003F50B8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x9DC0588FE9DC0589 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2C47F4EE02C47FLL) {
    sub_1000267C4();
  }
  if (0x3B80B11FD3B80B12 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x3B80B11FD3B80B12 * ((a1[2] - *a1) >> 3);
  }
  if (0x9DC0588FE9DC0589 * ((a1[2] - *a1) >> 3) >= 0x1623FA7701623FLL) {
    unint64_t v6 = 0x2C47F4EE02C47FLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)sub_1003F5380((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  long long v10 = v7;
  long long v11 = &v7[1480 * v3];
  uint64_t v13 = &v7[1480 * v6];
  sub_1003F51E0((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 1480;
  sub_1003F5308(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1003F5578((uint64_t)&v10);
  return v8;
}

void sub_1003F51CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003F5578((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1003F51E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  memcpy((void *)(a2 + 8), (const void *)(a3 + 8), 0x1C8uLL);
  sub_1003EF500(a2 + 464, a3 + 464);
  sub_1003EFA78(a2 + 552, a3 + 552);
  *(void *)(a2 + 880) = *(void *)(a3 + 880);
  sub_1003EF500(a2 + 888, a3 + 888);
  sub_1003EFA78(a2 + 976, a3 + 976);
  long long v5 = *(_OWORD *)(a3 + 1304);
  long long v6 = *(_OWORD *)(a3 + 1336);
  *(_OWORD *)(a2 + 1320) = *(_OWORD *)(a3 + 1320);
  *(_OWORD *)(a2 + 1336) = v6;
  *(_OWORD *)(a2 + 1304) = v5;
  long long v7 = *(_OWORD *)(a3 + 1352);
  long long v8 = *(_OWORD *)(a3 + 1368);
  long long v9 = *(_OWORD *)(a3 + 1400);
  *(_OWORD *)(a2 + 1384) = *(_OWORD *)(a3 + 1384);
  *(_OWORD *)(a2 + 1400) = v9;
  *(_OWORD *)(a2 + 1352) = v7;
  *(_OWORD *)(a2 + 1368) = v8;
  __n128 result = *(__n128 *)(a3 + 1416);
  long long v11 = *(_OWORD *)(a3 + 1432);
  long long v12 = *(_OWORD *)(a3 + 1464);
  *(_OWORD *)(a2 + 1448) = *(_OWORD *)(a3 + 1448);
  *(_OWORD *)(a2 + 1464) = v12;
  *(__n128 *)(a2 + 1416) = result;
  *(_OWORD *)(a2 + 1432) = v11;
  return result;
}

void sub_1003F52A8(_Unwind_Exception *a1)
{
  *unint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_1003F5308(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003F53CC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003F5380(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2C47F4EE02C480) {
    sub_1000257D8();
  }
  return operator new(1480 * a2);
}

uint64_t sub_1003F53CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 1480;
      sub_1003F51E0(a1, v7 - 1480, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 1480;
      *((void *)&v16 + 1) -= 1480;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1003F5498((uint64_t)v13);
  return v11;
}

void sub_1003F5484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003F5498(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1003F54D0(a1);
  }
  return a1;
}

uint64_t sub_1003F54D0(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void **)(*(void *)(result + 8) + 8);
  if (v1 != v2)
  {
    unint64_t v3 = v1 + 122;
    do
    {
      v1[122] = off_100853598;
      v1[111] = off_100853598;
      v1[69] = off_100853598;
      v1[58] = off_100853598;
      v1 += 185;
      v3 += 185;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1003F5578(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1003F55B0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = v2 - 1016;
    do
    {
      *(void *)(v2 - 504) = off_100853598;
      *(void *)(v2 - 592) = off_100853598;
      *(void *)(v2 - 928) = off_100853598;
      *(void *)(v2 - 1016) = off_100853598;
      v3 -= 1480;
      v2 -= 1480;
    }
    while (v2 != a2);
    *(void *)(result + 16) = a2;
  }
  return result;
}

void *sub_1003F5668(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100026770(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *uint64_t v6 = 0;
      v6[1] = 0;
      void v6[2] = 0;
      sub_10015036C(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1003F5704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_1003F5724(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1003F57F8(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_1003F5840(&v13, a2);
        }
        else {
          sub_1003F58F4((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_1003F57F8(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_1000267C4();
  }
  uint64_t result = sub_100056BF0((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *sub_1003F5840(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_1003F58F4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void *sub_1003F59A4(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100026770(a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    unint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      sub_1003F5A50(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1003F5A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_1003F5A50(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    sub_1003F57F8(a1, v4);
    sub_1003F5AAC(a1, *(void **)a2, 0, (void *)(*(void *)a2 + 8 * (*(void *)(a2 + 8) >> 6)), *(void *)(a2 + 8) & 0x3F, *(void *)(a2 + 8));
  }
  return a1;
}

void sub_1003F5AAC(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41) {
      unint64_t v8 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
  }
  uint64_t v9 = *a1 + 8 * (v6 >> 6);
  int v10 = v6 & 0x3F;
  sub_1003F5B2C(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void sub_1003F5B2C(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a2;
  unint64_t v7 = *(uint64_t **)a5;
  int v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || a2 != a4)
  {
    do
    {
      uint64_t v9 = 1 << v8;
      if ((*a1 >> a2)) {
        uint64_t v10 = *v7 | v9;
      }
      else {
        uint64_t v10 = *v7 & ~v9;
      }
      *unint64_t v7 = v10;
      BOOL v11 = v6 == 63;
      BOOL v12 = v6 == 63;
      uint64_t v6 = (a2 + 1);
      if (v11) {
        uint64_t v6 = 0;
      }
      if (v8 == 63)
      {
        int v8 = 0;
        *(void *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || v6 != a4);
    a1 = a3;
  }
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void sub_1003F5BD4(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_1003F5C28((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1003F5C28(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    uint64_t v5 = *(void **)(i - 24);
    uint64_t v4 = v5;
    if (v5) {
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_1003F5C70(uint64_t a1, int *a2, uint64_t a3, char *a4, double *a5, double *a6, uint64_t *a7, int *a8, int *a9, long long *a10)
{
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t result = sub_1003F5E54(v11, *a2, a3, *a4, *a7, *a8, *a9, a10, *a5, *a6);
  *(void *)(a1 + 8) = v11 + 584;
  return result;
}

void sub_1003F5CC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003F5CD0(uint64_t *a1, int *a2, uint64_t a3, char *a4, double *a5, double *a6, uint64_t *a7, int *a8, int *a9, long long *a10)
{
  uint64_t v10 = a1;
  uint64_t v11 = *a1;
  uint64_t v12 = 0x7E3F1F8FC7E3F1F9 * ((a1[1] - *a1) >> 3);
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) > 0x70381C0E070381) {
    sub_1000267C4();
  }
  uint64_t v20 = (uint64_t)(a1 + 2);
  unint64_t v21 = 0x7E3F1F8FC7E3F1F9 * ((v10[2] - v11) >> 3);
  if (2 * v21 > v13) {
    unint64_t v13 = 2 * v21;
  }
  if (v21 >= 0x381C0E070381C0) {
    unint64_t v22 = 0x70381C0E070381;
  }
  else {
    unint64_t v22 = v13;
  }
  uint64_t v33 = v10 + 2;
  if (v22)
  {
    uint64_t v23 = a3;
    unint64_t v28 = v10;
    uint64_t v24 = v12;
    uint64_t v25 = (char *)sub_1003F5FBC(v20, v22);
    uint64_t v12 = v24;
    uint64_t v10 = v28;
    a3 = v23;
  }
  else
  {
    uint64_t v25 = 0;
  }
  unint64_t v29 = v25;
  uint64_t v30 = &v25[584 * v12];
  uint64_t v31 = (uint64_t)v30;
  int v32 = &v25[584 * v22];
  sub_1003F5E54((uint64_t)v30, *a2, a3, *a4, *a7, *a8, *a9, a10, *a5, *a6);
  uint64_t v31 = (uint64_t)(v30 + 584);
  sub_1003F5F44(v10, &v29);
  uint64_t v26 = v10[1];
  sub_1003F6154((uint64_t)&v29);
  return v26;
}

void sub_1003F5E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003F6154((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F5E54(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, int a6, int a7, long long *a8, double a9, double a10)
{
  *(_DWORD *)a1 = a2;
  uint64_t v19 = a1 + 96;
  sub_1003EF500(a1 + 8, a3);
  sub_1003EFA78(v19, a3 + 88);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a3 + 416);
  *(unsigned char *)(a1 + 432) = a4;
  *(double *)(a1 + 440) = a9;
  *(double *)(a1 + 448) = a10;
  *(void *)(a1 + 456) = a5;
  *(_DWORD *)(a1 + 464) = a6;
  *(_DWORD *)(a1 + 468) = a7;
  long long v20 = *a8;
  long long v21 = a8[2];
  *(_OWORD *)(a1 + 488) = a8[1];
  *(_OWORD *)(a1 + 504) = v21;
  *(_OWORD *)(a1 + 472) = v20;
  long long v22 = a8[3];
  long long v23 = a8[4];
  long long v24 = a8[6];
  *(_OWORD *)(a1 + 552) = a8[5];
  *(_OWORD *)(a1 + 568) = v24;
  *(_OWORD *)(a1 + 520) = v22;
  *(_OWORD *)(a1 + 536) = v23;
  return a1;
}

void sub_1003F5F24(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_1003F5F44(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003F6008((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003F5FBC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x70381C0E070382) {
    sub_1000257D8();
  }
  return operator new(584 * a2);
}

uint64_t sub_1003F6008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_1003F609C(a1, i + a7, i + a3))
    i -= 584;
  return a6;
}

__n128 sub_1003F609C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 96;
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v6 = a2 + 96;
  sub_1003EF500(a2 + 8, a3 + 8);
  sub_1003EFA78(v6, v5);
  *(_DWORD *)(a2 + 424) = *(_DWORD *)(a3 + 424);
  long long v7 = *(_OWORD *)(a3 + 448);
  *(_OWORD *)(a2 + 432) = *(_OWORD *)(a3 + 432);
  *(_OWORD *)(a2 + 448) = v7;
  long long v8 = *(_OWORD *)(a3 + 464);
  long long v9 = *(_OWORD *)(a3 + 480);
  long long v10 = *(_OWORD *)(a3 + 512);
  *(_OWORD *)(a2 + 496) = *(_OWORD *)(a3 + 496);
  *(_OWORD *)(a2 + 512) = v10;
  *(_OWORD *)(a2 + 464) = v8;
  *(_OWORD *)(a2 + 480) = v9;
  __n128 result = *(__n128 *)(a3 + 528);
  long long v12 = *(_OWORD *)(a3 + 544);
  long long v13 = *(_OWORD *)(a3 + 560);
  *(unsigned char *)(a2 + 576) = *(unsigned char *)(a3 + 576);
  *(_OWORD *)(a2 + 544) = v12;
  *(_OWORD *)(a2 + 560) = v13;
  *(__n128 *)(a2 + 528) = result;
  return result;
}

void sub_1003F6134(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_1003F6154(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = v3 - 72;
    uint64_t v5 = v4;
    do
    {
      v5[11] = off_100853598;
      *uint64_t v5 = off_100853598;
      uint64_t v6 = v5 - 1;
      v5 -= 73;
      v4 -= 73;
    }
    while (v6 != v2);
    *(void *)(a1 + 16) = v2;
  }
  long long v7 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v7);
  }
  return a1;
}

void *sub_1003F61EC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100026770(result, a4);
    __n128 result = sub_1003F6274((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1003F6254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1003F5BD4(&a9);
  _Unwind_Resume(a1);
}

void *sub_1003F6274(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1003F5A50(v4, v6);
      v6 += 24;
      uint64_t v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1003F6318((uint64_t)v8);
  return v4;
}

void sub_1003F6304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003F6318(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1003F6350(a1);
  }
  return a1;
}

void sub_1003F6350(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v4 = *(void **)(v1 - 24);
    v1 -= 24;
    uint64_t v3 = v4;
    if (v4) {
      operator delete(v3);
    }
  }
}

uint64_t sub_1003F6390(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x300000001;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = off_100862708;
  if (a2 > 1)
  {
    uint64_t v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 4)
  {
    uint64_t v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003F643C(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1003F645C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 == *(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a2 + 24) >= v3)
    {
      if (*(_DWORD *)(a3 + 24) >= v3)
      {
        if (*(_DWORD *)(a3 + 28) >= v3)
        {
          sub_10034226C(a3, a1);
          uint64_t v6 = *(unsigned int *)(a3 + 8);
          long long v7 = *(__CLPK_doublereal **)(a3 + 32);
          __CLPK_integer v8 = *(_DWORD *)(a3 + 20);
          char v9 = *(void **)(a2 + 32);
          __CLPK_integer __n = *(_DWORD *)(a3 + 12);
          __CLPK_integer __m = v6;
          __CLPK_integer __lda = v8;
          if ((int)v6 >= 1)
          {
            size_t v10 = 4 * v6;
            uint64_t v11 = (__CLPK_integer *)operator new[](4 * v6, &std::nothrow);
            if (v11)
            {
              long long v12 = v11;
              __CLPK_integer v13 = 0;
              dgetrf_(&__m, &__n, v7, &__lda, v11, &v13);
              memcpy(v9, v12, v10);
              operator delete[]();
            }
            sub_100438FF4();
          }
          sub_100438FF4();
        }
        sub_100438FC8();
      }
      sub_100438F9C();
    }
    sub_100438F70();
  }
  sub_100439050();
}

uint64_t sub_1003F65F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    memcpy((void *)(a4 + 8), (const void *)(v5 + 8), 0x1C8uLL);
    sub_10034226C(a4 + 464, v5 + 464);
    sub_10034226C(a4 + 552, v5 + 552);
    *(void *)(a4 + 880) = *(void *)(v5 + 880);
    sub_10034226C(a4 + 888, v5 + 888);
    sub_10034226C(a4 + 976, v5 + 976);
    long long v8 = *(_OWORD *)(v5 + 1320);
    long long v7 = *(_OWORD *)(v5 + 1336);
    *(_OWORD *)(a4 + 1304) = *(_OWORD *)(v5 + 1304);
    *(_OWORD *)(a4 + 1320) = v8;
    *(_OWORD *)(a4 + 1336) = v7;
    long long v9 = *(_OWORD *)(v5 + 1400);
    long long v11 = *(_OWORD *)(v5 + 1352);
    long long v10 = *(_OWORD *)(v5 + 1368);
    *(_OWORD *)(a4 + 1384) = *(_OWORD *)(v5 + 1384);
    *(_OWORD *)(a4 + 1400) = v9;
    *(_OWORD *)(a4 + 1352) = v11;
    *(_OWORD *)(a4 + 1368) = v10;
    long long v12 = *(_OWORD *)(v5 + 1464);
    long long v14 = *(_OWORD *)(v5 + 1416);
    long long v13 = *(_OWORD *)(v5 + 1432);
    *(_OWORD *)(a4 + 1448) = *(_OWORD *)(v5 + 1448);
    *(_OWORD *)(a4 + 1464) = v12;
    *(_OWORD *)(a4 + 1416) = v14;
    *(_OWORD *)(a4 + 1432) = v13;
    a4 += 1480;
    v5 += 1480;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_1003F66D8()
{
  sub_10039D144();
  uint64_t v0 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  uint64_t v2 = std::string::append(&v38, ".bin");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  qword_1008AB9D8 = v2->__r_.__value_.__r.__words[2];
  xmmword_1008AB9C8 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB9C8, (void *)&_mh_execute_header);
  sub_10039D144();
  int v4 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v38, ".bin");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_1008AB9F0 = v6->__r_.__value_.__r.__words[2];
  xmmword_1008AB9E0 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB9E0, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v8 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  long long v10 = std::string::append(&v38, ".bin");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  qword_1008ABA08 = v10->__r_.__value_.__r.__words[2];
  xmmword_1008AB9F8 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008AB9F8, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v12 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  long long v14 = std::string::append(&v38, ".bin");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  qword_1008ABA20 = v14->__r_.__value_.__r.__words[2];
  xmmword_1008ABA10 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008ABA10, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v16 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  double v18 = std::string::append(&v38, ".bin");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_1008ABA38 = v18->__r_.__value_.__r.__words[2];
  xmmword_1008ABA28 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008ABA28, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v20 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  long long v22 = std::string::append(&v38, ".bin");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_1008ABA50 = v22->__r_.__value_.__r.__words[2];
  xmmword_1008ABA40 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008ABA40, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v24 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  uint64_t v26 = std::string::append(&v38, ".bin");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  qword_1008ABA68 = v26->__r_.__value_.__r.__words[2];
  xmmword_1008ABA58 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008ABA58, (void *)&_mh_execute_header);
  sub_10039D144();
  unint64_t v28 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append(&v38, ".bin");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  qword_1008ABA80 = v30->__r_.__value_.__r.__words[2];
  xmmword_1008ABA70 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008ABA70, (void *)&_mh_execute_header);
  sub_10039D144();
  int v32 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  double v34 = std::string::append(&v38, ".bin");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  qword_1008ABA98 = v34->__r_.__value_.__r.__words[2];
  xmmword_1008ABA88 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008ABA88, (void *)&_mh_execute_header);
}

void sub_1003F6D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003F6D7C(void *result)
{
  result[16] = off_100853598;
  result[8] = off_100853598;
  void *result = off_100853598;
  return result;
}

void *sub_1003F6DDC(void *result)
{
  void *result = off_100862050;
  return result;
}

void *sub_1003F6DFC(void *result)
{
  void *result = off_100862050;
  return result;
}

void *sub_1003F6E1C(void *result)
{
  void *result = off_100862050;
  return result;
}

void *sub_1003F6E3C(void *result)
{
  void *result = off_100862050;
  return result;
}

void sub_1003F6E5C(uint64_t a1, uint64_t a2)
{
  sub_1003F7068(a1, (uint64_t)v9);
  sub_1003F7068(a2, (uint64_t)v8);
  double v3 = sub_1003F7120((uint64_t)v9, (uint64_t)v8);
  uint64_t v22 = 0x100000003;
  long long v21 = xmmword_1004C1B50;
  long long v20 = off_100861B38;
  long long v23 = v24;
  uint64_t v17 = 0x100000134;
  long long v16 = xmmword_1004C1B70;
  long long v15 = off_100861C10;
  double v18 = v19;
  uint64_t v12 = 0x100000003;
  long long v11 = xmmword_1004C1B50;
  long long v10 = off_100861B38;
  long long v13 = v14;
  sub_100341B04((uint64_t)v9, (uint64_t)&v20, (uint64_t)&v15, (uint64_t)&v10, "2");
  double v5 = v4;
  uint64_t v22 = 0x100000003;
  long long v21 = xmmword_1004C1B50;
  long long v20 = off_100861B38;
  long long v23 = v24;
  uint64_t v17 = 0x100000134;
  long long v16 = xmmword_1004C1B70;
  long long v15 = off_100861C10;
  double v18 = v19;
  uint64_t v12 = 0x100000003;
  long long v11 = xmmword_1004C1B50;
  long long v10 = off_100861B38;
  long long v13 = v14;
  sub_100341B04((uint64_t)v8, (uint64_t)&v20, (uint64_t)&v15, (uint64_t)&v10, "2");
  if (v5 > 0.0 && v6 > 0.0)
  {
    double v7 = acos(v3 / v5 / v6);
    sub_100030430(v7);
  }
}

double sub_1003F7068@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = 0x300000001;
  double v6 = off_100864DB0;
  long long v7 = xmmword_1004C2710;
  long long v9 = &v10;
  sub_1003411F0(&v6, 1, 3);
  for (unsigned int i = 0; i != 3; ++i)
    *(_DWORD *)sub_1004044E4((uint64_t)&v6, i) = i;
  return sub_1003F72FC(a1 + 456, (uint64_t)&v6, 0, a2);
}

double sub_1003F7120(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != 1 && *(_DWORD *)(a1 + 12) != 1) {
    sub_10043907C();
  }
  if (*(_DWORD *)(a2 + 8) != 1 && *(_DWORD *)(a2 + 12) != 1) {
    sub_1004390A8();
  }
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v4 != *(_DWORD *)(a2 + 16)) {
    sub_1004390D4();
  }
  if ((int)v4 < 1) {
    return 0.0;
  }
  double v5 = *(double **)(a1 + 32);
  double v6 = *(double **)(a2 + 32);
  double result = 0.0;
  do
  {
    double v8 = *v5++;
    double v9 = v8;
    double v10 = *v6++;
    double result = result + v9 * v10;
    --v4;
  }
  while (v4);
  return result;
}

void sub_1003F71A0(uint64_t a1)
{
  sub_1003F72FC(a1 + 456, (uint64_t)&qword_1008ABC18, 0, (uint64_t)&v11);
  uint64_t v3 = 0x100000003;
  long long v1 = off_100861B38;
  long long v2 = xmmword_1004C1B50;
  uint64_t v4 = &v5;
  sub_1003418A0((uint64_t)&v11, (uint64_t)&unk_1008AC690, (uint64_t)&v1);
  uint64_t v18 = 0x100000003;
  long long v16 = off_100861B38;
  long long v17 = xmmword_1004C1B50;
  long long v19 = &v20;
  uint64_t v13 = 0x100000134;
  long long v11 = off_100861C10;
  long long v12 = xmmword_1004C1B70;
  long long v14 = &v15;
  uint64_t v8 = 0x100000003;
  double v6 = off_100861B38;
  long long v7 = xmmword_1004C1B50;
  double v9 = &v10;
  sub_100341B04((uint64_t)&v1, (uint64_t)&v16, (uint64_t)&v11, (uint64_t)&v6, "2");
}

double sub_1003F72FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  sub_100404520(a4, *(_DWORD *)(a2 + 16), 1u);
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      double result = *(double *)(*(void *)(a1 + 32) + 8 * (sub_100404610(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(void *)(a4 + 32) + 8 * i) = result;
    }
  }
  return result;
}

void sub_1003F7384(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1003F73A4(uint64_t a1)
{
  sub_1003F72FC(a1 + 456, (uint64_t)&qword_1008ABC18, 0, (uint64_t)v3);
  uint64_t v6 = 0x100000003;
  uint64_t v4 = off_100861B38;
  long long v5 = xmmword_1004C1B50;
  long long v7 = &v8;
  sub_1003418A0((uint64_t)v3, (uint64_t)&unk_1008AC6D0, (uint64_t)&v4);
  double v1 = sub_1002A43C0((uint64_t)&v4, 2u);
  double v2 = sub_1002A43C0((uint64_t)&v4, 1u);
  atan2(v1, v2);
}

double sub_1003F745C(uint64_t a1)
{
  sub_1003F73A4(a1);
  return v1 * 180.0 / 3.14159265;
}

void sub_1003F748C(uint64_t a1)
{
  sub_1003F72FC(a1 + 456, (uint64_t)&qword_1008ABC18, 0, (uint64_t)&v2);
  uint64_t v6 = 0x100000003;
  long long v5 = xmmword_1004C1B50;
  uint64_t v4 = off_100861B38;
  long long v7 = v8;
  sub_1003418A0((uint64_t)&v2, (uint64_t)&unk_1008AC6D0, (uint64_t)&v4);
  sub_100404798((uint64_t)v1, (uint64_t)&v4);
  uint64_t v6 = 0x100000006;
  long long v5 = xmmword_1007749D0;
  uint64_t v4 = off_100864CD8;
  long long v7 = v8;
  sub_100404930((uint64_t)v3);
}

void sub_1003F7600(_Unwind_Exception *a1)
{
  sub_100404B50((void *)(v1 - 184));
  _Unwind_Resume(a1);
}

void sub_1003F7620(uint64_t a1)
{
}

double sub_1003F7650@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = off_100861B80;
  *(_OWORD *)(a2 + 8) = xmmword_1004C1E40;
  *(void *)(a2 + 32) = a2 + 40;
  sub_1003411F0((_DWORD *)a2, 3, 3);
  sub_100341240(a2, 0.0);
  double v4 = sub_1002A43C0(a1, 0);
  double v5 = sub_1002A43C0(a1, 1u);
  double v6 = sub_1002A43C0(a1, 2u);
  double v7 = sub_1002A43C0(a1, 3u);
  double v14 = v5 * v5;
  double v15 = v4 * v4;
  *(double *)sub_10034185C(a2, 0, 0) = v4 * v4 - v5 * v5 - v6 * v6 + v7 * v7;
  *(double *)sub_10034185C(a2, 0, 1) = v4 * v5 + v6 * v7 + v4 * v5 + v6 * v7;
  double v8 = v4 * v6;
  double v9 = v5 * v7;
  *(double *)sub_10034185C(a2, 0, 2) = v4 * v6 - v5 * v7 + v4 * v6 - v5 * v7;
  *(double *)sub_10034185C(a2, 1, 0) = v4 * v5 - v6 * v7 + v4 * v5 - v6 * v7;
  *(double *)sub_10034185C(a2, 1, 1) = v5 * v5 - v4 * v4 - v6 * v6 + v7 * v7;
  double v10 = v4 * v7;
  double v11 = v5 * v6;
  *(double *)sub_10034185C(a2, 1, 2) = v11 + v10 + v11 + v10;
  *(double *)sub_10034185C(a2, 2, 0) = v8 + v9 + v8 + v9;
  *(double *)sub_10034185C(a2, 2, 1) = v11 - v10 + v11 - v10;
  long long v12 = (double *)sub_10034185C(a2, 2, 2);
  double result = -v15 - v14 + v6 * v6 + v7 * v7;
  *long long v12 = result;
  return result;
}

void sub_1003F7884(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

double *sub_1003F78B8(uint64_t a1)
{
  uint64_t v19 = 0x100000004;
  long long v17 = off_100861BC8;
  long long v18 = xmmword_1004C1B60;
  uint64_t v20 = &v21;
  uint64_t v14 = 0x10000018BLL;
  long long v12 = off_100861FB0;
  long long v13 = xmmword_1004C1E50;
  double v15 = &v16;
  uint64_t v9 = 0x100000004;
  double v7 = off_100861BC8;
  long long v8 = xmmword_1004C1B60;
  double v10 = &v11;
  sub_100341B04(a1, (uint64_t)&v17, (uint64_t)&v12, (uint64_t)&v7, "2");
  if (v2 == 0.0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100439100();
    }
    *(void *)sub_1003416AC(a1, 0) = 0;
    *(void *)sub_1003416AC(a1, 1u) = 0;
    *(void *)sub_1003416AC(a1, 2u) = 0;
    double result = (double *)sub_1003416AC(a1, 3u);
    double *result = 1.0;
  }
  else
  {
    double v4 = v2;
    for (unsigned int i = 0; i != 4; ++i)
    {
      double v6 = *(double *)sub_1003416AC(a1, i) / v4;
      double result = (double *)sub_1003416AC(a1, i);
      double *result = v6;
    }
  }
  return result;
}

double *sub_1003F7A68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = off_100861B80;
  *(_OWORD *)(a2 + 8) = xmmword_1004C1E40;
  *(void *)(a2 + 32) = a2 + 40;
  sub_1003411F0((_DWORD *)a2, 3, 3);
  sub_100341240(a2, 0.0);
  double v4 = sub_1002A43C0(a1, 2u);
  *(double *)sub_10034185C(a2, 0, 1) = -v4;
  double v5 = sub_1002A43C0(a1, 1u);
  *(double *)sub_10034185C(a2, 0, 2) = v5;
  double v6 = sub_1002A43C0(a1, 2u);
  *(double *)sub_10034185C(a2, 1, 0) = v6;
  double v7 = sub_1002A43C0(a1, 0);
  *(double *)sub_10034185C(a2, 1, 2) = -v7;
  double v8 = sub_1002A43C0(a1, 1u);
  *(double *)sub_10034185C(a2, 2, 0) = -v8;
  double v9 = sub_1002A43C0(a1, 0);
  double result = (double *)sub_10034185C(a2, 2, 1);
  double *result = v9;
  return result;
}

void sub_1003F7BCC(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

double sub_1003F7BF0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x400000004;
  *(void *)a2 = off_100861ED8;
  *(_OWORD *)(a2 + 8) = xmmword_1004C1E60;
  *(void *)(a2 + 32) = a2 + 40;
  sub_1003411F0((_DWORD *)a2, 4, 4);
  sub_100341240(a2, 0.0);
  double v4 = sub_1002A43C0(a1, 2u);
  *(double *)sub_10034185C(a2, 0, 1) = v4;
  double v5 = sub_1002A43C0(a1, 1u);
  *(double *)sub_10034185C(a2, 0, 2) = -v5;
  double v6 = sub_1002A43C0(a1, 0);
  *(double *)sub_10034185C(a2, 0, 3) = v6;
  double v7 = sub_1002A43C0(a1, 2u);
  *(double *)sub_10034185C(a2, 1, 0) = -v7;
  double v8 = sub_1002A43C0(a1, 0);
  *(double *)sub_10034185C(a2, 1, 2) = v8;
  double v9 = sub_1002A43C0(a1, 1u);
  *(double *)sub_10034185C(a2, 1, 3) = v9;
  double v10 = sub_1002A43C0(a1, 1u);
  *(double *)sub_10034185C(a2, 2, 0) = v10;
  double v11 = sub_1002A43C0(a1, 0);
  *(double *)sub_10034185C(a2, 2, 1) = -v11;
  double v12 = sub_1002A43C0(a1, 2u);
  *(double *)sub_10034185C(a2, 2, 3) = v12;
  double v13 = sub_1002A43C0(a1, 0);
  *(double *)sub_10034185C(a2, 3, 0) = -v13;
  double v14 = sub_1002A43C0(a1, 1u);
  *(double *)sub_10034185C(a2, 3, 1) = -v14;
  double v15 = sub_1002A43C0(a1, 2u);
  uint64_t v16 = (double *)sub_10034185C(a2, 3, 2);
  double result = -v15;
  *uint64_t v16 = -v15;
  return result;
}

void sub_1003F7E38(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

BOOL sub_1003F7E5C(uint64_t a1, uint64_t a2, double *a3)
{
  if (*(unsigned char *)(a1 + 444))
  {
    double v5 = *a3 - *(double *)(a1 + 448);
    if (v5 < 0.0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100439168();
      }
LABEL_5:
      BOOL result = 0;
      *(_DWORD *)(a1 + 440) = 9;
      return result;
    }
    if (v5 != 0.0)
    {
      uint64_t v21 = 0x600000006;
      uint64_t v19 = off_100864C90;
      long long v20 = xmmword_1007749C0;
      uint64_t v22 = &v23;
      sub_1003411F0(&v19, 6, 6);
      sub_100341240((uint64_t)&v19, 0.0);
      for (int i = 0; i != 6; ++i)
        *(void *)sub_1003802D0((uint64_t)&v19, i, i) = 0x3FF0000000000000;
      uint64_t v16 = 0xC00000006;
      double v14 = off_100864F18;
      long long v15 = xmmword_100774B80;
      long long v17 = &v18;
      sub_1003411F0(&v14, 6, 12);
      sub_100341240((uint64_t)&v14, 0.0);
      if (sub_1003F81F4(a1, a2, (uint64_t)a3, (uint64_t)&v19, (uint64_t)&v14))
      {
        uint64_t v11 = 0x600000006;
        double v9 = off_100864C90;
        long long v10 = xmmword_1007749C0;
        double v12 = &v13;
        uint64_t v36 = 0x100000006;
        double v34 = off_100864D20;
        long long v35 = xmmword_1007749D0;
        std::string v37 = &v38;
        uint64_t v31 = 0x100000006;
        long long v30 = xmmword_1007749D0;
        long long v29 = off_100864D20;
        int v32 = &v33;
        uint64_t v26 = 0x100000018;
        long long v25 = xmmword_1007749E0;
        long long v24 = off_100864D68;
        long long v27 = &v28;
        sub_100404C58((uint64_t)&v19, (uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v9);
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_1004391D0();
      }
      goto LABEL_5;
    }
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100439134();
      return 0;
    }
  }
  return result;
}

BOOL sub_1003F81F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v6 = *(double *)a2;
  double v7 = *(double *)a3;
  double v8 = *(double *)(a1 + 448);
  BOOL v9 = v8 >= *(double *)a2 && v8 <= *(double *)a3;
  if (v9)
  {
    uint64_t v55 = 0x100000003;
    *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B50;
    *(void *)buf = off_100861B38;
    uint64_t v56 = &v57;
    sub_1003411F0(buf, 3, 1);
    sub_100341240((uint64_t)buf, 0.0);
    uint64_t v51 = 0x100000003;
    long long v50 = xmmword_1004C1B50;
    int v49 = off_100861B38;
    uint64_t v52 = &v53;
    sub_1003411F0(&v49, 3, 1);
    sub_100341240((uint64_t)&v49, 0.0);
    uint64_t v46 = 0x100000003;
    long long v45 = xmmword_1004C1B50;
    uint64_t v44 = off_100861B38;
    uint64_t v47 = &v48;
    sub_1003411F0(&v44, 3, 1);
    sub_100341240((uint64_t)&v44, 0.0);
    uint64_t v14 = 0;
    double v15 = v7 - v8;
    double v16 = v8 + (v7 - v8) * 0.5;
    double v17 = (v8 - v6) / (v7 - v6);
    double v18 = (v16 - v6) / (v7 - v6);
    do
    {
      uint64_t v19 = *(void *)(*(void *)(a2 + 40) + 8 * v14);
      *(void *)sub_1003416AC((uint64_t)buf, v14) = v19;
      uint64_t v20 = *(void *)(*(void *)(a3 + 40) + 8 * v14);
      *(void *)sub_1003416AC((uint64_t)&v49, v14) = v20;
      uint64_t v21 = *(void *)(*(void *)(a2 + 16) + 8 * v14);
      *(void *)sub_1003416AC((uint64_t)&v44, v14++) = v21;
    }
    while (v14 != 3);
    uint64_t v36 = 0x100000003;
    long long v35 = xmmword_1004C1B50;
    double v34 = off_100861B38;
    std::string v37 = v38;
    sub_1004053E0((uint64_t)buf, (uint64_t)&v34, 1.0 - v17);
    uint64_t v31 = 0x100000003;
    long long v29 = off_100861B38;
    long long v30 = xmmword_1004C1B50;
    int v32 = v33;
    sub_1004053E0((uint64_t)&v49, (uint64_t)&v29, v17);
    uint64_t v41 = 0x100000003;
    long long v40 = xmmword_1004C1B50;
    unint64_t v39 = off_100861B38;
    uint64_t v42 = &v43;
    sub_100342718((uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v39);
    uint64_t v31 = 0x100000003;
    long long v29 = off_100861B38;
    long long v30 = xmmword_1004C1B50;
    int v32 = v33;
    sub_1004053E0((uint64_t)buf, (uint64_t)&v29, 1.0 - v18);
    uint64_t v26 = 0x100000003;
    long long v24 = off_100861B38;
    long long v25 = xmmword_1004C1B50;
    long long v27 = &v28;
    sub_1004053E0((uint64_t)&v49, (uint64_t)&v24, v18);
    uint64_t v36 = 0x100000003;
    long long v35 = xmmword_1004C1B50;
    double v34 = off_100861B38;
    std::string v37 = v38;
    sub_100342718((uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v34);
    sub_10034CDD4((uint64_t)&v29, (uint64_t)&v49);
    sub_1003FA308(a1 + 456, a4, a5, (uint64_t)&v39, (uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v44, v15);
  }
  else
  {
    uint64_t v22 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v55 = *(void *)&v7;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#sf,RoseEKF PropagateX1 error: Filter time is not between the two IMU timestamps - state propagation aborted, PreviousIMUTime: %f, FilterTime: %f, CurrentIMUTime: %f", buf, 0x20u);
    }
    *(_DWORD *)(a1 + 440) = 6;
  }
  return v9;
}

void sub_1003F869C()
{
  __chkstk_darwin();
  sub_1003EF690(v0, (uint64_t)v1);
}

void sub_1003F8D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F8D9C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  double v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  uint64_t v28 = 0x1200000012;
  uint64_t v26 = off_100865110;
  long long v27 = xmmword_100774BA0;
  long long v29 = &v30;
  sub_1003411F0(&v26, 18, 18);
  sub_100341240((uint64_t)&v26, 0.0);
  uint64_t v23 = 0xC0000000CLL;
  uint64_t v21 = off_100865080;
  long long v22 = xmmword_100774B90;
  long long v24 = &v25;
  double v8 = sqrt(v4);
  sub_1003411F0(&v21, 12, 12);
  sub_100341240((uint64_t)&v21, 0.0);
  uint64_t v12 = 0x300000003;
  long long v10 = off_100861B80;
  long long v11 = xmmword_1004C1E40;
  uint64_t v13 = v14;
  sub_100351D20((uint64_t)&qword_1008AC940, (uint64_t)&v10, v8);
  sub_1004054BC((uint64_t)&v31, (uint64_t)&v21, (uint64_t)&qword_1008ABC18, (uint64_t)&qword_1008ABC18);
  sub_1003FB6DC((uint64_t)&v31, (uint64_t)&v10);
  uint64_t v12 = 0x300000003;
  long long v10 = off_100861B80;
  long long v11 = xmmword_1004C1E40;
  uint64_t v13 = v14;
  sub_100351D20((uint64_t)&qword_1008AC9B0, (uint64_t)&v10, v8);
  sub_1004054BC((uint64_t)&v31, (uint64_t)&v21, (uint64_t)&qword_1008ABC50, (uint64_t)&qword_1008ABC50);
  sub_1003FB6DC((uint64_t)&v31, (uint64_t)&v10);
  uint64_t v12 = 0x300000003;
  long long v10 = off_100861B80;
  long long v11 = xmmword_1004C1E40;
  uint64_t v13 = v14;
  double v9 = 1.0 / v8;
  sub_100351D20((uint64_t)&qword_1008AC8D0, (uint64_t)&v10, v9);
  sub_1004054BC((uint64_t)&v31, (uint64_t)&v21, (uint64_t)&qword_1008ABC88, (uint64_t)&qword_1008ABC88);
  sub_1003FB6DC((uint64_t)&v31, (uint64_t)&v10);
  uint64_t v12 = 0x300000003;
  long long v10 = off_100861B80;
  long long v11 = xmmword_1004C1E40;
  uint64_t v13 = v14;
  sub_100351D20((uint64_t)&qword_1008ACA20, (uint64_t)&v10, v9);
  sub_1004054BC((uint64_t)&v31, (uint64_t)&v21, (uint64_t)&qword_1008ABCC0, (uint64_t)&qword_1008ABCC0);
  sub_1003FB6DC((uint64_t)&v31, (uint64_t)&v10);
  sub_100405E78((uint64_t)&v31, (uint64_t)&v26, (uint64_t)&qword_1008ABAA8, (uint64_t)&qword_1008ABAA8);
  sub_1003FE144((uint64_t)&v31, (uint64_t)&v21);
  sub_1003FE280(v2, (uint64_t)v15);
  uint64_t v18 = 0x600000006;
  long long v17 = xmmword_1007749C0;
  double v16 = off_100864C90;
  uint64_t v19 = v20;
  sub_1003419A0((uint64_t)v15, v7, (uint64_t)&v16);
  uint64_t v12 = 0xC00000006;
  long long v10 = off_100864F18;
  long long v11 = xmmword_100774B80;
  uint64_t v13 = v14;
  sub_1003419A0((uint64_t)&v16, v6, (uint64_t)&v10);
  sub_10040610C((uint64_t)&v31, (uint64_t)&v26, (uint64_t)&qword_1008ABBA8, (uint64_t)&qword_1008ABAA8);
  sub_1003FE300((uint64_t)&v31, (uint64_t)&v10);
  uint64_t v12 = 0x600000006;
  long long v10 = off_100864C90;
  long long v11 = xmmword_1007749C0;
  uint64_t v13 = v14;
  sub_1003419A0(v2, v7, (uint64_t)&v10);
  sub_1004063B8((uint64_t)&v31, (uint64_t)&v26, (uint64_t)&qword_1008ABBA8, (uint64_t)&qword_1008ABBA8);
  sub_1003FE43C((uint64_t)&v31, (uint64_t)&v10);
  uint64_t v18 = 0x100000012;
  long long v17 = xmmword_100774BB0;
  double v16 = off_100865230;
  uint64_t v19 = v20;
  uint64_t v33 = 0x1200000012;
  uint64_t v31 = off_100865110;
  long long v32 = xmmword_100774BA0;
  double v34 = &v35;
  uint64_t v12 = 0x1200000012;
  long long v10 = off_100865110;
  long long v11 = xmmword_100774BA0;
  uint64_t v13 = v14;
  sub_10040664C((uint64_t)&v26, (uint64_t)&v16, (uint64_t)&v31, (uint64_t)&v10);
  sub_1003FE578((uint64_t)&v10, (uint64_t)&qword_1008ABBA8, (uint64_t)&qword_1008ABBA8, (uint64_t)&v31);
  sub_10034226C(v2, (uint64_t)&v31);
}

void *sub_1003F93B0(void *result)
{
  double *result = off_100853598;
  return result;
}

BOOL sub_1003F93D0(uint64_t a1, uint64_t *a2, double a3)
{
  if (*(unsigned char *)(a1 + 444))
  {
    double v6 = *(double *)(a1 + 448);
    if (a3 - v6 >= 0.0)
    {
      if (a3 - v6 != 0.0)
      {
        uint64_t v18 = 0x600000006;
        double v16 = off_100864C90;
        long long v17 = xmmword_1007749C0;
        uint64_t v19 = &v20;
        sub_1003411F0(&v16, 6, 6);
        sub_100341240((uint64_t)&v16, 0.0);
        for (int i = 0; i != 6; ++i)
          *(void *)sub_1003802D0((uint64_t)&v16, i, i) = 0x3FF0000000000000;
        uint64_t v32 = 0xC00000006;
        *(_OWORD *)&v31[8] = xmmword_100774B80;
        *(void *)uint64_t v31 = off_100864F18;
        uint64_t v33 = &v34;
        sub_1003411F0(v31, 6, 12);
        sub_100341240((uint64_t)v31, 0.0);
        sub_1003F97FC(a1, (uint64_t)a2, (uint64_t)&v16, (uint64_t)v31, a3);
        uint64_t v13 = 0x600000006;
        long long v11 = off_100864C90;
        long long v12 = xmmword_1007749C0;
        uint64_t v14 = &v15;
        uint64_t v28 = 0x100000006;
        long long v27 = xmmword_1007749D0;
        uint64_t v26 = off_100864D20;
        long long v29 = &v30;
        uint64_t v23 = 0x100000006;
        long long v22 = xmmword_1007749D0;
        uint64_t v21 = off_100864D20;
        long long v24 = &v25;
        uint64_t v37 = 0x100000018;
        long long v36 = xmmword_1007749E0;
        *(void *)buf = off_100864D68;
        uint64_t v38 = &v39;
        sub_100404C58((uint64_t)&v16, (uint64_t)&v26, (uint64_t)&v21, (uint64_t)buf, (uint64_t)&v11);
      }
      return 1;
    }
    else
    {
      uint64_t v7 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *a2;
        *(_DWORD *)uint64_t v31 = 134218496;
        *(double *)&v31[4] = v6;
        *(_WORD *)&v31[12] = 2048;
        *(double *)&v31[14] = a3;
        *(_WORD *)&v31[22] = 2048;
        uint64_t v32 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#sf,Attempted to propagate state to the past during measurement update - Filter time is ahead of the event time, FilterTime: %f, NewTime: %f, CurrentIMUTime: %f", v31, 0x20u);
      }
      BOOL result = 0;
      *(_DWORD *)(a1 + 440) = 9;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100439134();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003F97FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double v10 = *(double *)(a1 + 448);
  uint64_t v22 = 0x100000003;
  uint64_t v20 = off_100861B38;
  long long v21 = xmmword_1004C1B50;
  uint64_t v23 = &v24;
  sub_1003411F0(&v20, 3, 1);
  sub_100341240((uint64_t)&v20, 0.0);
  uint64_t v17 = 0x100000003;
  uint64_t v15 = off_100861B38;
  long long v16 = xmmword_1004C1B50;
  uint64_t v18 = &v19;
  sub_1003411F0(&v15, 3, 1);
  sub_100341240((uint64_t)&v15, 0.0);
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v12 = *(void *)(*(void *)(a2 + 40) + 8 * i);
    *(void *)sub_1003416AC((uint64_t)&v20, i) = v12;
    uint64_t v13 = *(void *)(*(void *)(a2 + 16) + 8 * i);
    *(void *)sub_1003416AC((uint64_t)&v15, i) = v13;
  }
  return sub_1003FA308(a1 + 456, a3, a4, (uint64_t)&v20, (uint64_t)&v20, (uint64_t)&v20, (uint64_t)&v15, a5 - v10);
}

BOOL sub_1003F996C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  if (*(unsigned char *)(a1 + 444))
  {
    double v6 = *(double *)(a1 + 448);
    if (a4 - v6 == 0.0)
    {
      return 1;
    }
    else
    {
      if (a4 - v6 < 0.0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100439168();
        }
      }
      else
      {
        uint64_t v23 = 0x600000006;
        long long v21 = off_100864C90;
        long long v22 = xmmword_1007749C0;
        uint64_t v24 = &v25;
        sub_1003411F0(&v21, 6, 6);
        sub_100341240((uint64_t)&v21, 0.0);
        for (int i = 0; i != 6; ++i)
          *(void *)sub_1003802D0((uint64_t)&v21, i, i) = 0x3FF0000000000000;
        uint64_t v18 = 0xC00000006;
        long long v16 = off_100864F18;
        long long v17 = xmmword_100774B80;
        uint64_t v19 = &v20;
        sub_1003411F0(&v16, 6, 12);
        sub_100341240((uint64_t)&v16, 0.0);
        if (sub_1003F9D84(a1, a2, a3, (uint64_t)&v21, (uint64_t)&v16, a4))
        {
          uint64_t v13 = 0x600000006;
          long long v11 = off_100864C90;
          long long v12 = xmmword_1007749C0;
          uint64_t v14 = &v15;
          uint64_t v33 = 0x100000006;
          long long v32 = xmmword_1007749D0;
          uint64_t v31 = off_100864D20;
          uint64_t v34 = &v35;
          uint64_t v28 = 0x100000006;
          long long v27 = xmmword_1007749D0;
          uint64_t v26 = off_100864D20;
          long long v29 = &v30;
          uint64_t v38 = 0x100000018;
          long long v37 = xmmword_1007749E0;
          *(void *)buf = off_100864D68;
          uint64_t v39 = &v40;
          sub_100404C58((uint64_t)&v21, (uint64_t)&v31, (uint64_t)&v26, (uint64_t)buf, (uint64_t)&v11);
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_1004391D0();
        }
      }
      BOOL result = 0;
      *(_DWORD *)(a1 + 440) = 9;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100439134();
      return 0;
    }
  }
  return result;
}

BOOL sub_1003F9D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v7 = *(double *)a2;
  double v8 = *(double *)a3;
  double v9 = *(double *)(a1 + 448);
  BOOL v10 = v9 >= *(double *)a2 && v9 <= *(double *)a3;
  if (v10)
  {
    uint64_t v64 = 0x100000003;
    *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B50;
    *(void *)buf = off_100861B38;
    uint64_t v65 = &v66;
    sub_1003411F0(buf, 3, 1);
    sub_100341240((uint64_t)buf, 0.0);
    uint64_t v60 = 0x100000003;
    long long v59 = xmmword_1004C1B50;
    double v58 = off_100861B38;
    double v61 = &v62;
    sub_1003411F0(&v58, 3, 1);
    sub_100341240((uint64_t)&v58, 0.0);
    uint64_t v55 = 0x100000003;
    long long v54 = xmmword_1004C1B50;
    uint64_t v53 = off_100861B38;
    uint64_t v56 = &v57;
    sub_1003411F0(&v53, 3, 1);
    sub_100341240((uint64_t)&v53, 0.0);
    uint64_t v16 = 0;
    double v17 = a6 - v9;
    double v18 = v9 + (a6 - v9) * 0.5;
    double v19 = v8 - v7;
    double v20 = (v9 - v7) / (v8 - v7);
    double v21 = (v18 - v7) / (v8 - v7);
    double v22 = (a6 - v7) / v19;
    do
    {
      uint64_t v23 = *(void *)(*(void *)(a2 + 40) + 8 * v16);
      *(void *)sub_1003416AC((uint64_t)buf, v16) = v23;
      uint64_t v24 = *(void *)(*(void *)(a3 + 40) + 8 * v16);
      *(void *)sub_1003416AC((uint64_t)&v58, v16) = v24;
      uint64_t v25 = *(void *)(*(void *)(a2 + 16) + 8 * v16);
      *(void *)sub_1003416AC((uint64_t)&v53, v16++) = v25;
    }
    while (v16 != 3);
    uint64_t v45 = 0x100000003;
    long long v44 = xmmword_1004C1B50;
    uint64_t v43 = off_100861B38;
    uint64_t v46 = v47;
    sub_1004053E0((uint64_t)buf, (uint64_t)&v43, 1.0 - v20);
    uint64_t v40 = 0x100000003;
    long long v39 = xmmword_1004C1B50;
    uint64_t v38 = off_100861B38;
    uint64_t v41 = v42;
    sub_1004053E0((uint64_t)&v58, (uint64_t)&v38, v20);
    uint64_t v50 = 0x100000003;
    long long v49 = xmmword_1004C1B50;
    uint64_t v48 = off_100861B38;
    uint64_t v51 = &v52;
    sub_100342718((uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v48);
    uint64_t v40 = 0x100000003;
    long long v39 = xmmword_1004C1B50;
    uint64_t v38 = off_100861B38;
    uint64_t v41 = v42;
    sub_1004053E0((uint64_t)buf, (uint64_t)&v38, 1.0 - v21);
    uint64_t v35 = 0x100000003;
    uint64_t v33 = off_100861B38;
    long long v34 = xmmword_1004C1B50;
    long long v36 = v37;
    sub_1004053E0((uint64_t)&v58, (uint64_t)&v33, v21);
    uint64_t v45 = 0x100000003;
    long long v44 = xmmword_1004C1B50;
    uint64_t v43 = off_100861B38;
    uint64_t v46 = v47;
    sub_100342718((uint64_t)&v38, (uint64_t)&v33, (uint64_t)&v43);
    uint64_t v35 = 0x100000003;
    uint64_t v33 = off_100861B38;
    long long v34 = xmmword_1004C1B50;
    long long v36 = v37;
    sub_1004053E0((uint64_t)buf, (uint64_t)&v33, 1.0 - v22);
    uint64_t v30 = 0x100000003;
    uint64_t v28 = off_100861B38;
    long long v29 = xmmword_1004C1B50;
    uint64_t v31 = &v32;
    sub_1004053E0((uint64_t)&v58, (uint64_t)&v28, v22);
    uint64_t v40 = 0x100000003;
    long long v39 = xmmword_1004C1B50;
    uint64_t v38 = off_100861B38;
    uint64_t v41 = v42;
    sub_100342718((uint64_t)&v33, (uint64_t)&v28, (uint64_t)&v38);
    sub_1003FA308(a1 + 456, a4, a5, (uint64_t)&v48, (uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v53, v17);
  }
  else
  {
    uint64_t v26 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v64 = *(void *)&v8;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#sf,RoseEKF PropagateX2 error: Filter time is not between the two IMU timestamps - state propagation aborted, PreviousIMUTime: %f, FilterTime: %f, CurrentIMUTime: %f", buf, 0x20u);
    }
    *(_DWORD *)(a1 + 440) = 6;
  }
  return v10;
}

uint64_t sub_1003FA308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, long double a8)
{
  uint64_t v114 = 0x100000004;
  std::string v112 = off_100861BC8;
  long long v113 = xmmword_1004C1B60;
  uint64_t v115 = &v116;
  sub_1003411F0(&v112, 4, 1);
  sub_100341240((uint64_t)&v112, 0.0);
  *(void *)sub_1003416AC((uint64_t)&v112, 0) = 0;
  *(void *)sub_1003416AC((uint64_t)&v112, 1u) = 0;
  *(void *)sub_1003416AC((uint64_t)&v112, 2u) = 0;
  *(void *)sub_1003416AC((uint64_t)&v112, 3u) = 0x3FF0000000000000;
  sub_1003F7BF0(a4, (uint64_t)&v32);
  uint64_t v54 = 0x400000004;
  long long v53 = xmmword_1004C1E60;
  uint64_t v52 = off_100861ED8;
  uint64_t v55 = v56;
  sub_100351D20((uint64_t)&v32, (uint64_t)&v52, 0.5);
  uint64_t v109 = 0x100000004;
  long long v108 = xmmword_1004C1B60;
  int64_t v107 = off_100861BC8;
  uint64_t v110 = &v111;
  sub_1003419A0((uint64_t)&v52, (uint64_t)&v112, (uint64_t)&v107);
  uint64_t v54 = 0x100000004;
  long long v53 = xmmword_1004C1B60;
  uint64_t v52 = off_100861BC8;
  uint64_t v55 = v56;
  sub_100351D20((uint64_t)&v107, (uint64_t)&v52, a8 * 0.5);
  uint64_t v104 = 0x100000004;
  long long v103 = xmmword_1004C1B60;
  long long v102 = off_100861BC8;
  long long v105 = &v106;
  sub_100342718((uint64_t)&v112, (uint64_t)&v52, (uint64_t)&v102);
  sub_1003F78B8((uint64_t)&v102);
  sub_1003F7BF0(a5, (uint64_t)&v32);
  uint64_t v54 = 0x400000004;
  long long v53 = xmmword_1004C1E60;
  uint64_t v52 = off_100861ED8;
  uint64_t v55 = v56;
  sub_100351D20((uint64_t)&v32, (uint64_t)&v52, 0.5);
  uint64_t v99 = 0x100000004;
  long long v98 = xmmword_1004C1B60;
  long long v97 = off_100861BC8;
  uint64_t v100 = &v101;
  sub_1003419A0((uint64_t)&v52, (uint64_t)&v102, (uint64_t)&v97);
  uint64_t v54 = 0x100000004;
  long long v53 = xmmword_1004C1B60;
  uint64_t v52 = off_100861BC8;
  uint64_t v55 = v56;
  sub_100351D20((uint64_t)&v97, (uint64_t)&v52, a8 * 0.5);
  uint64_t v94 = 0x100000004;
  long long v93 = xmmword_1004C1B60;
  long long v92 = off_100861BC8;
  uint64_t v95 = &v96;
  sub_100342718((uint64_t)&v112, (uint64_t)&v52, (uint64_t)&v92);
  sub_1003F78B8((uint64_t)&v92);
  sub_1003F7BF0(a5, (uint64_t)&v32);
  uint64_t v54 = 0x400000004;
  long long v53 = xmmword_1004C1E60;
  uint64_t v52 = off_100861ED8;
  uint64_t v55 = v56;
  sub_100351D20((uint64_t)&v32, (uint64_t)&v52, 0.5);
  uint64_t v89 = 0x100000004;
  long long v88 = xmmword_1004C1B60;
  uint64_t v87 = off_100861BC8;
  long long v90 = &v91;
  sub_1003419A0((uint64_t)&v52, (uint64_t)&v92, (uint64_t)&v87);
  uint64_t v54 = 0x100000004;
  long long v53 = xmmword_1004C1B60;
  uint64_t v52 = off_100861BC8;
  uint64_t v55 = v56;
  sub_100351D20((uint64_t)&v87, (uint64_t)&v52, a8);
  uint64_t v84 = 0x100000004;
  long long v83 = xmmword_1004C1B60;
  uint64_t v82 = off_100861BC8;
  long long v85 = &v86;
  sub_100342718((uint64_t)&v112, (uint64_t)&v52, (uint64_t)&v82);
  sub_1003F78B8((uint64_t)&v82);
  sub_1003F7BF0(a6, (uint64_t)&v32);
  uint64_t v54 = 0x400000004;
  long long v53 = xmmword_1004C1E60;
  uint64_t v52 = off_100861ED8;
  uint64_t v55 = v56;
  sub_100351D20((uint64_t)&v32, (uint64_t)&v52, 0.5);
  uint64_t v79 = 0x100000004;
  long long v78 = xmmword_1004C1B60;
  long long v77 = off_100861BC8;
  long long v80 = &v81;
  sub_1003419A0((uint64_t)&v52, (uint64_t)&v82, (uint64_t)&v77);
  uint64_t v49 = 0x100000004;
  long long v48 = xmmword_1004C1B60;
  uint64_t v47 = off_100861BC8;
  uint64_t v50 = v51;
  sub_100351D20((uint64_t)&v97, (uint64_t)&v47, 2.0);
  uint64_t v64 = 0x100000004;
  long long v63 = xmmword_1004C1B60;
  uint64_t v62 = off_100861BC8;
  uint64_t v65 = &v66;
  sub_100342718((uint64_t)&v107, (uint64_t)&v47, (uint64_t)&v62);
  uint64_t v44 = 0x100000004;
  long long v43 = xmmword_1004C1B60;
  uint64_t v42 = off_100861BC8;
  uint64_t v45 = v46;
  sub_100351D20((uint64_t)&v87, (uint64_t)&v42, 2.0);
  uint64_t v34 = 0x100000004;
  long long v33 = xmmword_1004C1B60;
  uint64_t v32 = off_100861BC8;
  uint64_t v35 = v36;
  sub_100342718((uint64_t)&v62, (uint64_t)&v42, (uint64_t)&v32);
  uint64_t v54 = 0x100000004;
  long long v53 = xmmword_1004C1B60;
  uint64_t v52 = off_100861BC8;
  uint64_t v55 = v56;
  sub_100342718((uint64_t)&v32, (uint64_t)&v77, (uint64_t)&v52);
  uint64_t v74 = 0x100000004;
  long long v73 = xmmword_1004C1B60;
  uint64_t v72 = off_100861BC8;
  char v75 = &v76;
  sub_100351D20((uint64_t)&v52, (uint64_t)&v72, 0.166666667);
  uint64_t v54 = 0x100000004;
  long long v53 = xmmword_1004C1B60;
  uint64_t v52 = off_100861BC8;
  uint64_t v55 = v56;
  sub_100351D20((uint64_t)&v72, (uint64_t)&v52, a8);
  uint64_t v69 = 0x100000004;
  long long v68 = xmmword_1004C1B60;
  uint64_t v67 = off_100861BC8;
  uint64_t v70 = &v71;
  sub_100342718((uint64_t)&v112, (uint64_t)&v52, (uint64_t)&v67);
  sub_1003F78B8((uint64_t)&v67);
  sub_1003F7650((uint64_t)&v67, (uint64_t)&v62);
  uint64_t v44 = 0x100000001;
  *(void *)&long long v16 = 0x100000001;
  *((void *)&v16 + 1) = 0x100000001;
  long long v43 = v16;
  uint64_t v42 = off_100862AD0;
  uint64_t v45 = v46;
  v46[0] = 0;
  sub_100405088((uint64_t)&v52, a1, (uint64_t)&qword_1008ABC50, (uint64_t)&v42);
  uint64_t v49 = 0x100000003;
  long long v48 = xmmword_1004C1B50;
  uint64_t v47 = off_100861B38;
  uint64_t v50 = v51;
  sub_1003419A0((uint64_t)&v62, (uint64_t)&v52, (uint64_t)&v47);
  uint64_t v34 = 0x100000003;
  long long v33 = xmmword_1004C1B50;
  uint64_t v32 = off_100861B38;
  uint64_t v35 = v36;
  sub_1004053E0((uint64_t)&v47, (uint64_t)&v32, a8);
  uint64_t v39 = 0x100000003;
  long long v38 = xmmword_1004C1B50;
  long long v37 = off_100861B38;
  uint64_t v40 = v41;
  sub_1003419A0((uint64_t)&v62, a7, (uint64_t)&v37);
  uint64_t v44 = 0x100000003;
  long long v43 = xmmword_1004C1B50;
  uint64_t v42 = off_100861B38;
  uint64_t v45 = v46;
  sub_100351D20((uint64_t)&v37, (uint64_t)&v42, a8 * a8 * 0.5);
  uint64_t v59 = 0x100000003;
  long long v58 = xmmword_1004C1B50;
  uint64_t v57 = off_100861B38;
  uint64_t v60 = &v61;
  sub_100342718((uint64_t)&v32, (uint64_t)&v42, (uint64_t)&v57);
  uint64_t v49 = 0x100000003;
  long long v48 = xmmword_1004C1B50;
  uint64_t v47 = off_100861B38;
  uint64_t v50 = v51;
  sub_1003419A0((uint64_t)&v62, (uint64_t)&unk_1008AC650, (uint64_t)&v47);
  uint64_t v34 = 0x100000003;
  long long v33 = xmmword_1004C1B50;
  uint64_t v32 = off_100861B38;
  uint64_t v35 = v36;
  sub_100342718((uint64_t)&v57, (uint64_t)&v47, (uint64_t)&v32);
  uint64_t v54 = 0x100000003;
  long long v53 = xmmword_1004C1B50;
  uint64_t v52 = off_100861B38;
  uint64_t v55 = v56;
  sub_1003418A0((uint64_t)&v32, (uint64_t)&unk_1008AC650, (uint64_t)&v52);
  sub_10034226C((uint64_t)&v57, (uint64_t)&v52);
  sub_1004054BC((uint64_t)&v52, a2, (uint64_t)&qword_1008ABC18, (uint64_t)&qword_1008ABC18);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&v62);
  sub_1003FB818((uint64_t)&v62, (uint64_t)&v47);
  uint64_t v34 = 0x300000003;
  long long v33 = xmmword_1004C1E40;
  uint64_t v32 = off_100861B80;
  uint64_t v35 = v36;
  sub_1004053E0((uint64_t)&v47, (uint64_t)&v32, a8);
  sub_1004054BC((uint64_t)&v52, a2, (uint64_t)&qword_1008ABC18, (uint64_t)&qword_1008ABC50);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&v32);
  sub_1004054BC((uint64_t)&v52, a2, (uint64_t)&qword_1008ABC50, (uint64_t)&qword_1008ABC50);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&v62);
  sub_1004054BC((uint64_t)&v52, a2, (uint64_t)&qword_1008ABC50, (uint64_t)&qword_1008ABC18);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&qword_1008ABD68);
  uint64_t v49 = 0x300000003;
  long long v48 = xmmword_1004C1E40;
  uint64_t v47 = off_100861B80;
  uint64_t v50 = v51;
  sub_100351D20((uint64_t)&v62, (uint64_t)&v47, a8 * a8 / -3.0);
  uint64_t v44 = 0x300000003;
  long long v43 = xmmword_1004C1E40;
  uint64_t v42 = off_100861B80;
  uint64_t v45 = v46;
  sub_100351D20((uint64_t)&qword_1008ABCF8, (uint64_t)&v42, a8 * a8 / 6.0);
  uint64_t v34 = 0x300000003;
  long long v33 = xmmword_1004C1E40;
  uint64_t v32 = off_100861B80;
  uint64_t v35 = v36;
  sub_1003418A0((uint64_t)&v47, (uint64_t)&v42, (uint64_t)&v32);
  sub_1004054BC((uint64_t)&v52, a3, (uint64_t)&qword_1008ABC18, (uint64_t)&qword_1008ABC18);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&v32);
  uint64_t v54 = 0x100000001;
  *(void *)&long long v17 = 0x100000001;
  *((void *)&v17 + 1) = 0x100000001;
  long long v53 = v17;
  uint64_t v52 = off_100862AD0;
  uint64_t v55 = v56;
  v56[0] = 0;
  sub_100405088((uint64_t)&v32, a1, (uint64_t)&qword_1008ABC18, (uint64_t)&v52);
  sub_1003F7A68((uint64_t)&v32, (uint64_t)&v37);
  uint64_t v44 = 0x300000003;
  long long v43 = xmmword_1004C1E40;
  uint64_t v42 = off_100861B80;
  uint64_t v45 = v46;
  sub_100351D20((uint64_t)&v37, (uint64_t)&v42, a8);
  sub_1003F7A68(a7, (uint64_t)v26);
  long double v18 = pow(a8, 3.0);
  uint64_t v29 = 0x300000003;
  long long v27 = off_100861B80;
  long long v28 = xmmword_1004C1E40;
  uint64_t v30 = &v31;
  sub_100351D20((uint64_t)v26, (uint64_t)&v27, v18 / 3.0);
  uint64_t v49 = 0x300000003;
  long long v48 = xmmword_1004C1E40;
  uint64_t v47 = off_100861B80;
  uint64_t v50 = v51;
  sub_1003418A0((uint64_t)&v42, (uint64_t)&v27, (uint64_t)&v47);
  sub_1004054BC((uint64_t)&v52, a3, (uint64_t)&qword_1008ABC18, (uint64_t)&qword_1008ABC50);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&v47);
  sub_1004054BC((uint64_t)&v52, a3, (uint64_t)&qword_1008ABC18, (uint64_t)&qword_1008ABC88);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&qword_1008ABCF8);
  sub_1004054BC((uint64_t)&v52, a3, (uint64_t)&qword_1008ABC18, (uint64_t)&qword_1008ABCC0);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&qword_1008ABD68);
  sub_1004054BC((uint64_t)&v52, a3, (uint64_t)&qword_1008ABC50, (uint64_t)&qword_1008ABC18);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&qword_1008ABD68);
  sub_1004054BC((uint64_t)&v52, a3, (uint64_t)&qword_1008ABC50, (uint64_t)&qword_1008ABC50);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&qword_1008ABD68);
  sub_1004054BC((uint64_t)&v52, a3, (uint64_t)&qword_1008ABC50, (uint64_t)&qword_1008ABC88);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&qword_1008ABD68);
  sub_1004054BC((uint64_t)&v52, a3, (uint64_t)&qword_1008ABC50, (uint64_t)&qword_1008ABCC0);
  sub_1003FB6DC((uint64_t)&v52, (uint64_t)&qword_1008ABCF8);
  uint64_t v34 = 0x100000001;
  *(void *)&long long v19 = 0x100000001;
  *((void *)&v19 + 1) = 0x100000001;
  long long v33 = v19;
  uint64_t v32 = off_100862AD0;
  uint64_t v35 = v36;
  v36[0] = 0;
  sub_100405088((uint64_t)&v52, a1, (uint64_t)&qword_1008ABC18, (uint64_t)&v32);
  uint64_t v44 = 0x100000003;
  long long v43 = xmmword_1004C1B50;
  uint64_t v42 = off_100861B38;
  uint64_t v45 = v46;
  sub_1003419A0((uint64_t)&v62, (uint64_t)&v52, (uint64_t)&v42);
  uint64_t v49 = 0x100000003;
  long long v48 = xmmword_1004C1B50;
  uint64_t v47 = off_100861B38;
  uint64_t v50 = v51;
  sub_1003418A0((uint64_t)&v42, (uint64_t)&v57, (uint64_t)&v47);
  uint64_t v39 = 0x100000001;
  *(void *)&long long v20 = 0x100000001;
  *((void *)&v20 + 1) = 0x100000001;
  long long v38 = v20;
  long long v37 = off_100862AD0;
  uint64_t v40 = v41;
  v41[0] = 0;
  sub_100405088((uint64_t)&v32, a1, (uint64_t)&qword_1008ABC18, (uint64_t)&v37);
  sub_1003FB898((uint64_t)&v32, (uint64_t)&v47);
  uint64_t v34 = 0x100000001;
  *(void *)&long long v21 = 0x100000001;
  *((void *)&v21 + 1) = 0x100000001;
  long long v33 = v21;
  uint64_t v32 = off_100862AD0;
  uint64_t v35 = v36;
  v36[0] = 0;
  sub_100405088((uint64_t)&v52, a1, (uint64_t)&qword_1008ABC50, (uint64_t)&v32);
  uint64_t v44 = 0x100000003;
  long long v43 = xmmword_1004C1B50;
  uint64_t v42 = off_100861B38;
  uint64_t v45 = v46;
  sub_1004053E0(a7, (uint64_t)&v42, a8);
  uint64_t v49 = 0x100000003;
  long long v48 = xmmword_1004C1B50;
  uint64_t v47 = off_100861B38;
  uint64_t v50 = v51;
  sub_100342718((uint64_t)&v52, (uint64_t)&v42, (uint64_t)&v47);
  uint64_t v39 = 0x100000001;
  *(void *)&long long v22 = 0x100000001;
  *((void *)&v22 + 1) = 0x100000001;
  long long v38 = v22;
  long long v37 = off_100862AD0;
  uint64_t v40 = v41;
  v41[0] = 0;
  sub_100405088((uint64_t)&v32, a1, (uint64_t)&qword_1008ABC50, (uint64_t)&v37);
  sub_1003FB898((uint64_t)&v32, (uint64_t)&v47);
  uint64_t v34 = 0x100000001;
  *(void *)&long long v23 = 0x100000001;
  *((void *)&v23 + 1) = 0x100000001;
  long long v33 = v23;
  uint64_t v32 = off_100862AD0;
  uint64_t v35 = v36;
  v36[0] = 0;
  sub_100405088((uint64_t)&v52, a1, (uint64_t)&qword_1008ABC50, (uint64_t)&v32);
  uint64_t v49 = 0x100000003;
  long long v48 = xmmword_1004C1B50;
  uint64_t v47 = off_100861B38;
  uint64_t v50 = v51;
  sub_1003419A0((uint64_t)&v62, (uint64_t)&v52, (uint64_t)&v47);
  uint64_t v44 = 0x100000001;
  *(void *)&long long v24 = 0x100000001;
  *((void *)&v24 + 1) = 0x100000001;
  long long v43 = v24;
  uint64_t v42 = off_100862AD0;
  uint64_t v45 = v46;
  v46[0] = 0;
  sub_100405088((uint64_t)&v32, a1, (uint64_t)&qword_1008ABC50, (uint64_t)&v42);
  return sub_1003FB898((uint64_t)&v32, (uint64_t)&v47);
}

void *sub_1003FB67C(void *result)
{
  result[16] = off_100862050;
  result[9] = off_100862050;
  double *result = off_100853598;
  return result;
}

uint64_t sub_1003FB6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_100439230();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_100439204();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_1003802D0(*(void *)(a1 + 112), *(_DWORD *)(*(void *)(a1 + 152) + 4 * j), *(_DWORD *)(*(void *)(a1 + 208) + 4 * i)) = v9;
          *(void *)sub_10034185C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

void *sub_1003FB7B8(void *result)
{
  result[22] = off_100862050;
  result[15] = off_100862050;
  double *result = off_100853598;
  return result;
}

double sub_1003FB818@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = off_100861B80;
  *(_OWORD *)(a2 + 8) = xmmword_1004C1E40;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_10040574C(a1, a2);
  return result;
}

void sub_1003FB878(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_1003FB898(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_100439230();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_100439204();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_1003802D0(*(void *)(a1 + 64), *(_DWORD *)(*(void *)(a1 + 104) + 4 * j), *(_DWORD *)(*(void *)(a1 + 160) + 4 * i)) = v9;
          *(void *)sub_10034185C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

BOOL sub_1003FB974(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v4 = a4 - a3;
  if (a4 - a3 == 0.0) {
    return 1;
  }
  if (a4 - a3 >= 0.0)
  {
    uint64_t v37 = 0x600000006;
    uint64_t v35 = off_100864C90;
    long long v36 = xmmword_1007749C0;
    long long v38 = &v39;
    sub_1003411F0(&v35, 6, 6);
    sub_100341240((uint64_t)&v35, 0.0);
    for (int i = 0; i != 6; ++i)
      *(void *)sub_1003802D0((uint64_t)&v35, i, i) = 0x3FF0000000000000;
    uint64_t v32 = 0xC00000006;
    long long v31 = xmmword_100774B80;
    uint64_t v30 = off_100864F18;
    long long v33 = &v34;
    sub_1003411F0(&v30, 6, 12);
    sub_100341240((uint64_t)&v30, 0.0);
    uint64_t v27 = 0x100000003;
    long long v26 = xmmword_1004C1B50;
    uint64_t v25 = off_100861B38;
    long long v28 = &v29;
    sub_1003411F0(&v25, 3, 1);
    sub_100341240((uint64_t)&v25, 0.0);
    uint64_t v22 = 0x100000003;
    long long v21 = xmmword_1004C1B50;
    long long v20 = off_100861B38;
    long long v23 = &v24;
    sub_1003411F0(&v20, 3, 1);
    sub_100341240((uint64_t)&v20, 0.0);
    for (uint64_t j = 0; j != 3; ++j)
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8 * j);
      *(void *)sub_1003416AC((uint64_t)&v25, j) = v13;
      uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 8 * j);
      *(void *)sub_1003416AC((uint64_t)&v20, j) = v14;
    }
    sub_1003FA308(a2, (uint64_t)&v35, (uint64_t)&v30, (uint64_t)&v25, (uint64_t)&v25, (uint64_t)&v25, (uint64_t)&v20, v4);
    uint64_t v17 = 0x600000006;
    uint64_t v15 = off_100864C90;
    long long v16 = xmmword_1007749C0;
    long double v18 = &v19;
    uint64_t v52 = 0x100000006;
    uint64_t v50 = off_100864D20;
    long long v51 = xmmword_1007749D0;
    long long v53 = &v54;
    uint64_t v47 = 0x100000006;
    long long v46 = xmmword_1007749D0;
    uint64_t v45 = off_100864D20;
    long long v48 = &v49;
    uint64_t v42 = 0x100000018;
    long long v41 = xmmword_1007749E0;
    uint64_t v40 = off_100864D68;
    long long v43 = &v44;
    sub_100404C58((uint64_t)&v35, (uint64_t)&v50, (uint64_t)&v45, (uint64_t)&v40, (uint64_t)&v15);
  }
  double v8 = qword_1008ABDE0;
  BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10043925C(v8, a3, a4);
    return 0;
  }
  return result;
}

BOOL sub_1003FBD60(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  double v7 = *(double *)a1;
  double v8 = *(double *)a2;
  double v9 = a5 - a4;
  if (a5 - a4 <= 0.0 || (double v10 = v8 - v7, v8 - v7 <= 0.0))
  {
    uint64_t v22 = qword_1008ABDE0;
    BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 134218752;
    *(double *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v84 = *(void *)&a4;
    *(_WORD *)long long v85 = 2048;
    *(double *)&v85[2] = a5;
    uint64_t v24 = "#sf,RoseEKF error: Either IMU data comes not in chronological order (PreviousIMUTime: %f, CurrentIMUTime: %f) "
          "or trying to propagate state backward (from time %f to time %f)";
    uint64_t v25 = v22;
    uint32_t v26 = 42;
    goto LABEL_16;
  }
  if (v8 >= a5 && v8 >= a4 && v7 <= a4 && v7 <= a5)
  {
    uint64_t v65 = 0x100000003;
    long long v64 = xmmword_1004C1B50;
    long long v63 = off_100861B38;
    uint64_t v66 = &v67;
    sub_1003411F0(&v63, 3, 1);
    sub_100341240((uint64_t)&v63, 0.0);
    uint64_t v60 = 0x100000003;
    long long v59 = xmmword_1004C1B50;
    long long v58 = off_100861B38;
    uint64_t v61 = &v62;
    sub_1003411F0(&v58, 3, 1);
    sub_100341240((uint64_t)&v58, 0.0);
    uint64_t v55 = 0x100000003;
    long long v54 = xmmword_1004C1B50;
    long long v53 = off_100861B38;
    uint64_t v56 = &v57;
    sub_1003411F0(&v53, 3, 1);
    sub_100341240((uint64_t)&v53, 0.0);
    uint64_t v14 = 0;
    double v15 = (a4 - v7) / v10;
    double v16 = (v9 * 0.5 + a4 - v7) / v10;
    double v17 = (a5 - v7) / v10;
    do
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8 * v14);
      *(void *)sub_1003416AC((uint64_t)&v63, v14) = v18;
      uint64_t v19 = *(void *)(*(void *)(a2 + 40) + 8 * v14);
      *(void *)sub_1003416AC((uint64_t)&v58, v14) = v19;
      uint64_t v20 = *(void *)(*(void *)(a1 + 16) + 8 * v14);
      *(void *)sub_1003416AC((uint64_t)&v53, v14++) = v20;
    }
    while (v14 != 3);
    uint64_t v84 = 0x100000003;
    *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B50;
    *(void *)buf = off_100861B38;
    *(void *)long long v85 = &v85[8];
    sub_1004053E0((uint64_t)&v63, (uint64_t)buf, 1.0 - v15);
    uint64_t v35 = 0x100000003;
    long long v34 = xmmword_1004C1B50;
    long long v33 = off_100861B38;
    long long v36 = v37;
    sub_1004053E0((uint64_t)&v58, (uint64_t)&v33, v15);
    uint64_t v50 = 0x100000003;
    long long v49 = xmmword_1004C1B50;
    long long v48 = off_100861B38;
    long long v51 = &v52;
    sub_100342718((uint64_t)buf, (uint64_t)&v33, (uint64_t)&v48);
    uint64_t v84 = 0x100000003;
    *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B50;
    *(void *)buf = off_100861B38;
    *(void *)long long v85 = &v85[8];
    sub_1004053E0((uint64_t)&v63, (uint64_t)buf, 1.0 - v16);
    uint64_t v35 = 0x100000003;
    long long v34 = xmmword_1004C1B50;
    long long v33 = off_100861B38;
    long long v36 = v37;
    sub_1004053E0((uint64_t)&v58, (uint64_t)&v33, v16);
    uint64_t v45 = 0x100000003;
    long long v44 = xmmword_1004C1B50;
    long long v43 = off_100861B38;
    long long v46 = &v47;
    sub_100342718((uint64_t)buf, (uint64_t)&v33, (uint64_t)&v43);
    uint64_t v84 = 0x100000003;
    *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B50;
    *(void *)buf = off_100861B38;
    *(void *)long long v85 = &v85[8];
    sub_1004053E0((uint64_t)&v63, (uint64_t)buf, 1.0 - v17);
    uint64_t v35 = 0x100000003;
    long long v34 = xmmword_1004C1B50;
    long long v33 = off_100861B38;
    long long v36 = v37;
    sub_1004053E0((uint64_t)&v58, (uint64_t)&v33, v17);
    uint64_t v40 = 0x100000003;
    long long v39 = xmmword_1004C1B50;
    long long v38 = off_100861B38;
    long long v41 = &v42;
    sub_100342718((uint64_t)buf, (uint64_t)&v33, (uint64_t)&v38);
    uint64_t v35 = 0x600000006;
    long long v34 = xmmword_1007749C0;
    long long v33 = off_100864C90;
    long long v36 = v37;
    sub_1003411F0(&v33, 6, 6);
    sub_100341240((uint64_t)&v33, 0.0);
    for (int i = 0; i != 6; ++i)
      *(void *)sub_1003802D0((uint64_t)&v33, i, i) = 0x3FF0000000000000;
    uint64_t v84 = 0xC00000006;
    *(_OWORD *)&uint8_t buf[8] = xmmword_100774B80;
    *(void *)buf = off_100864F18;
    *(void *)long long v85 = &v85[8];
    sub_1003411F0(buf, 6, 12);
    sub_100341240((uint64_t)buf, 0.0);
    sub_1003FA308(a3, (uint64_t)&v33, (uint64_t)buf, (uint64_t)&v48, (uint64_t)&v43, (uint64_t)&v38, (uint64_t)&v53, v9);
    uint64_t v30 = 0x600000006;
    long long v28 = off_100864C90;
    long long v29 = xmmword_1007749C0;
    long long v31 = &v32;
    uint64_t v80 = 0x100000006;
    long long v79 = xmmword_1007749D0;
    long long v78 = off_100864D20;
    uint64_t v81 = &v82;
    uint64_t v75 = 0x100000006;
    long long v74 = xmmword_1007749D0;
    long long v73 = off_100864D20;
    uint64_t v76 = &v77;
    uint64_t v70 = 0x100000018;
    long long v69 = xmmword_1007749E0;
    long long v68 = off_100864D68;
    uint64_t v71 = &v72;
    sub_100404C58((uint64_t)&v33, (uint64_t)&v78, (uint64_t)&v73, (uint64_t)&v68, (uint64_t)&v28);
  }
  uint64_t v27 = qword_1008ABDE0;
  BOOL result = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 134218496;
    *(double *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = a4;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v84 = *(void *)&v8;
    uint64_t v24 = "#sf,RoseEKF propagateStateAndCovariance error: Filter time is not between the two IMU timestamps - state propa"
          "gation aborted, PreviousIMUTime: %f, FilterTime: %f, CurrentIMUTime: %f";
    uint64_t v25 = v27;
    uint32_t v26 = 32;
LABEL_16:
    _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
    return 0;
  }
  return result;
}

uint64_t sub_1003FC5A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  double v121 = *(double *)(a5 + 40);
  if (v121 >= *(double *)(a1 + 448))
  {
    unint64_t v17 = a4[5] + a4[4] - 1;
    sub_1003EFC04((uint64_t)&v108, *(void *)(a4[1] + 8 * (v17 / 0x19)) + 160 * (v17 % 0x19));
    sub_1003EF500((uint64_t)&v103, a1 + 456);
    sub_1003EFA78((uint64_t)v100, a1 + 544);
    if (sub_1003FB974((uint64_t)&v108, (uint64_t)&v103, *(double *)(a1 + 448), v121))
    {
      uint64_t v97 = 0x100000003;
      long long v96 = xmmword_1004C1B50;
      uint64_t v95 = off_100861B38;
      long long v98 = v99;
      sub_1003411F0(&v95, 3, 1);
      sub_100341240((uint64_t)&v95, 0.0);
      uint64_t v92 = 0x600000003;
      long long v91 = xmmword_100774BC0;
      long long v90 = off_100864FF0;
      long long v93 = v94;
      sub_1003411F0(&v90, 3, 6);
      sub_100341240((uint64_t)&v90, 0.0);
      sub_1003FD510((uint64_t)&v95, (uint64_t)&v90, (uint64_t)&v103);
      uint64_t v87 = 0x100000003;
      long long v86 = xmmword_1004C1B50;
      long long v85 = off_100861B38;
      long long v88 = &v89;
      sub_1003411F0(&v85, 3, 1);
      sub_100341240((uint64_t)&v85, 0.0);
      uint64_t v18 = *(void *)(a5 + 48);
      *(void *)sub_1003416AC((uint64_t)&v85, 0) = v18;
      uint64_t v19 = *(void *)(a5 + 64);
      *(void *)sub_1003416AC((uint64_t)&v85, 1u) = v19;
      uint64_t v20 = *(void *)(a5 + 72);
      *(void *)sub_1003416AC((uint64_t)&v85, 2u) = v20;
      uint64_t v77 = 0x100000003;
      long long v76 = xmmword_1004C1B50;
      uint64_t v75 = off_100861B38;
      long long v78 = v79;
      sub_1003418A0((uint64_t)&v85, (uint64_t)&v95, (uint64_t)&v75);
      sub_10034226C(a2, (uint64_t)&v75);
      uint64_t v82 = 0x300000003;
      long long v81 = xmmword_1004C1E40;
      uint64_t v80 = off_100861B80;
      long long v83 = v84;
      sub_1003411F0(&v80, 3, 3);
      sub_100341240((uint64_t)&v80, 0.0);
      double v21 = *(double *)(a5 + 56);
      *(double *)sub_10034185C((uint64_t)&v80, 0, 0) = v21 * v21;
      double v22 = *(double *)(a5 + 80);
      *(double *)sub_10034185C((uint64_t)&v80, 1, 1) = v22 * v22;
      double v23 = *(double *)(a5 + 88);
      *(double *)sub_10034185C((uint64_t)&v80, 2, 2) = v23 * v23;
      sub_1003EF948((uint64_t)v69, v102, v101);
      sub_1003416E8((uint64_t)v100, v69);
      uint64_t v72 = 0x600000006;
      long long v71 = xmmword_1007749C0;
      uint64_t v70 = off_100864C90;
      long long v73 = v74;
      sub_1003419A0((uint64_t)v69, (uint64_t)v100, (uint64_t)&v70);
      uint64_t v77 = 0x600000006;
      long long v76 = xmmword_1007749C0;
      uint64_t v75 = off_100864C90;
      long long v78 = v79;
      uint64_t v66 = 0x100000006;
      long long v64 = off_100864D20;
      long long v65 = xmmword_1007749D0;
      uint64_t v67 = &v68;
      uint64_t v124 = 0x100000018;
      long long v123 = xmmword_1007749E0;
      uint64_t v122 = off_100864D68;
      uint64_t v125 = v126;
      sub_1003517F4((uint64_t)&v70, (uint64_t)&v64, (uint64_t)&v122, (uint64_t)&v75);
    }
    if (__p)
    {
      uint64_t v120 = __p;
      operator delete(__p);
    }
    if (v117)
    {
      uint64_t v118 = v117;
      operator delete(v117);
    }
    if (v115)
    {
      uint64_t v116 = v115;
      operator delete(v115);
    }
    if (v113)
    {
      uint64_t v114 = v113;
      operator delete(v113);
    }
    if (v112[0])
    {
      v112[1] = v112[0];
      operator delete(v112[0]);
    }
    if (*((void *)&v109 + 1))
    {
      uint64_t v110 = *((void *)&v109 + 1);
      operator delete(*((void **)&v109 + 1));
    }
  }
  else
  {
    unint64_t v9 = a4[10];
    uint64_t v10 = a4[7];
    long long v11 = (char *)(v10 + 8 * (v9 >> 9));
    if (a4[8] == v10)
    {
      long long v12 = 0;
      double v16 = 0;
      uint64_t v13 = a4 + 11;
      double v15 = (char *)(v10 + 8 * ((a4[11] + v9) >> 9));
    }
    else
    {
      long long v12 = (double *)(*(void *)v11 + 8 * (a4[10] & 0x1FFLL));
      uint64_t v13 = a4 + 11;
      unint64_t v14 = a4[11] + v9;
      double v15 = (char *)(v10 + 8 * (v14 >> 9));
      double v16 = (double *)(*(void *)v15 + 8 * (v14 & 0x1FF));
    }
    uint64_t v24 = (double *)(a1 + 872);
    uint64_t v25 = sub_100405A00(v11, v12, v15, v16, (double *)(a1 + 872));
    uint64_t v27 = v26;
    unint64_t v28 = a4[10];
    uint64_t v29 = a4[7];
    uint64_t v30 = (char *)(v29 + 8 * (v28 >> 9));
    if (a4[8] == v29)
    {
      long long v31 = 0;
      long long v34 = 0;
      long long v33 = (char *)(v29 + 8 * ((*v13 + v28) >> 9));
    }
    else
    {
      long long v31 = (double *)(*(void *)v30 + 8 * (a4[10] & 0x1FFLL));
      unint64_t v32 = *v13 + v28;
      long long v33 = (char *)(v29 + 8 * (v32 >> 9));
      long long v34 = (double *)(*(void *)v33 + 8 * (v32 & 0x1FF));
    }
    long long v36 = sub_100405A00(v30, v31, v33, v34, &v121);
    uint64_t v37 = v35;
    uint64_t v38 = a4[7];
    if (a4[8] == v38)
    {
      if (!v27) {
        return 0;
      }
      uint64_t v39 = 0;
    }
    else
    {
      if (*(void *)(v38 + ((a4[10] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a4[10] & 0x1FFLL) == v27) {
        return 0;
      }
      uint64_t v39 = *(void *)(v38 + (((*v13 + a4[10]) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((*v13 + a4[10]) & 0x1FFLL);
      if (v39 == v27) {
        return 0;
      }
    }
    if (v39 != v35)
    {
      sub_1003EF500((uint64_t)&v64, a1 + 880);
      sub_1003EFA78((uint64_t)v100, a1 + 968);
      uint64_t v40 = a4[7];
      uint64_t v41 = a4[8];
      uint64_t v42 = (char *)(v40 + 8 * (a4[10] >> 9));
      if (v41 == v40) {
        uint64_t v43 = 0;
      }
      else {
        uint64_t v43 = *(void *)v42 + 8 * (a4[10] & 0x1FFLL);
      }
      if (v27 == v43) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = ((v27 - *(void *)v25) >> 3) + ((v25 - v42) << 6) - ((v43 - *(void *)v42) >> 3);
      }
      if (v41 == v40) {
        uint64_t v45 = 0;
      }
      else {
        uint64_t v45 = *(void *)v42 + 8 * (a4[10] & 0x1FFLL);
      }
      if (v37 == v45) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = ((v37 - *(void *)v36) >> 3) + ((v36 - v42) << 6) - ((v45 - *(void *)v42) >> 3);
      }
      if (v44 < 1) {
        __assert_rtn("peekInnovationAndCovariance", "RoseSensorFusionEKF.cpp", 628, "indexFirstIMUDataToAdvanceTo > 0");
      }
      double v47 = *v24;
      if (v44 >= v46)
      {
LABEL_45:
        uint64_t v52 = a4[4];
        uint64_t v53 = a4[1];
        uint64_t v54 = *(void *)(v53 + 8 * ((v46 - 1 + v52) / 0x19uLL)) + 160 * ((v46 - 1 + v52) % 0x19uLL);
        uint64_t v55 = v52 + v46;
        uint64_t v56 = ((unint64_t)(v52 + v46) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
        if (sub_1003FBD60(v54, *(void *)(v53 + 8 * ((v56 + ((unint64_t)(v55 - v56) >> 1)) >> 4))+ 160 * (v55 - 25 * ((v56 + ((unint64_t)(v55 - v56) >> 1)) >> 4)), (uint64_t)&v64, v47, v121))
        {
          uint64_t v105 = 0x100000003;
          long long v104 = xmmword_1004C1B50;
          long long v103 = off_100861B38;
          uint64_t v106 = &v107;
          sub_1003411F0(&v103, 3, 1);
          sub_100341240((uint64_t)&v103, 0.0);
          uint64_t v92 = 0x600000003;
          long long v91 = xmmword_100774BC0;
          long long v90 = off_100864FF0;
          long long v93 = v94;
          sub_1003411F0(&v90, 3, 6);
          sub_100341240((uint64_t)&v90, 0.0);
          sub_1003FD510((uint64_t)&v103, (uint64_t)&v90, (uint64_t)&v64);
          uint64_t v97 = 0x100000003;
          long long v96 = xmmword_1004C1B50;
          uint64_t v95 = off_100861B38;
          long long v98 = v99;
          sub_1003411F0(&v95, 3, 1);
          sub_100341240((uint64_t)&v95, 0.0);
          uint64_t v57 = *(void *)(a5 + 48);
          *(void *)sub_1003416AC((uint64_t)&v95, 0) = v57;
          uint64_t v58 = *(void *)(a5 + 64);
          *(void *)sub_1003416AC((uint64_t)&v95, 1u) = v58;
          uint64_t v59 = *(void *)(a5 + 72);
          *(void *)sub_1003416AC((uint64_t)&v95, 2u) = v59;
          uint64_t v77 = 0x100000003;
          long long v76 = xmmword_1004C1B50;
          uint64_t v75 = off_100861B38;
          long long v78 = v79;
          sub_1003418A0((uint64_t)&v95, (uint64_t)&v103, (uint64_t)&v75);
          sub_10034226C(a2, (uint64_t)&v75);
          uint64_t v110 = 0x300000003;
          long long v109 = xmmword_1004C1E40;
          long long v108 = off_100861B80;
          uint64_t v111 = v112;
          sub_1003411F0(&v108, 3, 3);
          sub_100341240((uint64_t)&v108, 0.0);
          double v60 = *(double *)(a5 + 56);
          *(double *)sub_10034185C((uint64_t)&v108, 0, 0) = v60 * v60;
          double v61 = *(double *)(a5 + 80);
          *(double *)sub_10034185C((uint64_t)&v108, 1, 1) = v61 * v61;
          double v62 = *(double *)(a5 + 88);
          *(double *)sub_10034185C((uint64_t)&v108, 2, 2) = v62 * v62;
          sub_1003EF948((uint64_t)v69, v102, v101);
          sub_1003416E8((uint64_t)v100, v69);
          uint64_t v72 = 0x600000006;
          long long v71 = xmmword_1007749C0;
          uint64_t v70 = off_100864C90;
          long long v73 = v74;
          sub_1003419A0((uint64_t)v69, (uint64_t)v100, (uint64_t)&v70);
          uint64_t v77 = 0x600000006;
          long long v76 = xmmword_1007749C0;
          uint64_t v75 = off_100864C90;
          long long v78 = v79;
          uint64_t v82 = 0x100000006;
          long long v81 = xmmword_1007749D0;
          uint64_t v80 = off_100864D20;
          long long v83 = v84;
          uint64_t v124 = 0x100000018;
          long long v123 = xmmword_1007749E0;
          uint64_t v122 = off_100864D68;
          uint64_t v125 = v126;
          sub_1003517F4((uint64_t)&v70, (uint64_t)&v80, (uint64_t)&v122, (uint64_t)&v75);
        }
      }
      else
      {
        while (1)
        {
          double v48 = v47;
          double v47 = *(double *)(*(void *)(a4[7] + (((unint64_t)(v44 + a4[10]) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v44 + a4[10]) & 0x1FF));
          unint64_t v49 = v44 + a4[4];
          uint64_t v50 = ((v49 - 1) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
          unint64_t v51 = (v50 + ((v49 - 1 - v50) >> 1)) >> 4;
          if (!sub_1003FBD60(*(void *)(a4[1] + 8 * v51) + 160 * (v49 - 1 - 25 * v51), *(void *)(a4[1] + 8 * (v49 / 0x19)) + 160 * (v49 % 0x19), (uint64_t)&v64, v48, v47))break; {
          if (v46 == ++v44)
          }
            goto LABEL_45;
        }
      }
    }
  }
  return 0;
}

void sub_1003FD42C(_Unwind_Exception *a1)
{
}

uint64_t sub_1003FD510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = 0x100000001;
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  long long v27 = v6;
  uint64_t v26 = off_1008620C8;
  uint64_t v29 = &v30;
  sub_1003411F0(&v26, 1, 1);
  sub_100341240((uint64_t)&v26, 0.0);
  uint64_t v23 = 0x100000002;
  long long v22 = xmmword_1004C1E90;
  double v21 = off_100862110;
  uint64_t v24 = &v25;
  sub_1003411F0(&v21, 2, 1);
  sub_100341240((uint64_t)&v21, 0.0);
  uint64_t v18 = 0x600000001;
  long long v17 = xmmword_100774BD0;
  double v16 = off_100865278;
  uint64_t v19 = &v20;
  sub_1003411F0(&v16, 1, 6);
  sub_100341240((uint64_t)&v16, 0.0);
  uint64_t v13 = 0x600000002;
  long long v12 = xmmword_100774BE0;
  long long v11 = off_1008652C0;
  unint64_t v14 = &v15;
  sub_1003411F0(&v11, 2, 6);
  sub_100341240((uint64_t)&v11, 0.0);
  sub_1003FED14((uint64_t)&v26, (uint64_t)&v16, a3);
  sub_1003FEF08((uint64_t)&v21, (uint64_t)&v11, a3);
  if (DWORD2(v27) != 1) {
    sub_100438DFC();
  }
  uint64_t v7 = *v29;
  *(void *)sub_1003416AC(a1, 0) = v7;
  sub_100406AF8((uint64_t)v10, a1, (uint64_t)&qword_1008ABBE8);
  sub_1003FF1BC((uint64_t)v10, (uint64_t)&v21);
  uint64_t v33 = 0x100000001;
  *(void *)&long long v8 = 0x100000001;
  *((void *)&v8 + 1) = 0x100000001;
  long long v32 = v8;
  long long v31 = off_100862AD0;
  long long v34 = &v35;
  int v35 = 0;
  sub_100406D08((uint64_t)v10, a2, (uint64_t)&v31, (uint64_t)&qword_1008ABB00);
  sub_1003FF284((uint64_t)v10, (uint64_t)&v16);
  sub_100406F94((uint64_t)v10, a2, (uint64_t)&qword_1008ABBE8, (uint64_t)&qword_1008ABB00);
  return sub_1003FF3C0((uint64_t)v10, (uint64_t)&v11);
}

void *sub_1003FD7C8(void *result)
{
  double *result = off_100853598;
  return result;
}

void *sub_1003FD7E8(void *result)
{
  double *result = off_100853598;
  return result;
}

uint64_t sub_1003FD808(uint64_t a1, void *a2, uint64_t a3)
{
  double v62 = *(double *)(a3 + 40);
  if (v62 >= *(double *)(a1 + 448))
  {
    unint64_t v13 = a2[5] + a2[4] - 1;
    sub_1003EFC04((uint64_t)&v49, *(void *)(a2[1] + 8 * (v13 / 0x19)) + 160 * (v13 % 0x19));
    sub_1003EF500((uint64_t)v48, a1 + 456);
    sub_1003EFA78((uint64_t)v47, a1 + 544);
    if (sub_1003FB974((uint64_t)&v49, (uint64_t)v48, *(double *)(a1 + 448), v62))
    {
      uint64_t v67 = 0x100000006;
      long long v66 = xmmword_1007749D0;
      long long v65 = off_100864CD8;
      uint64_t v68 = &v69;
      sub_100404930((uint64_t)v64);
    }
    if (__p)
    {
      double v61 = __p;
      operator delete(__p);
    }
    if (v58)
    {
      uint64_t v59 = v58;
      operator delete(v58);
    }
    if (v56)
    {
      uint64_t v57 = v56;
      operator delete(v56);
    }
    if (v54)
    {
      uint64_t v55 = v54;
      operator delete(v54);
    }
    if (v53[0])
    {
      v53[1] = v53[0];
      operator delete(v53[0]);
    }
    if (*((void *)&v50 + 1))
    {
      uint64_t v51 = *((void *)&v50 + 1);
      operator delete(*((void **)&v50 + 1));
    }
    return 0;
  }
  unint64_t v5 = a2[10];
  uint64_t v6 = a2[7];
  uint64_t v7 = (char *)(v6 + 8 * (v5 >> 9));
  if (a2[8] == v6)
  {
    long long v8 = 0;
    long long v12 = 0;
    unint64_t v9 = a2 + 11;
    long long v11 = (char *)(v6 + 8 * ((a2[11] + v5) >> 9));
  }
  else
  {
    long long v8 = (double *)(*(void *)v7 + 8 * (a2[10] & 0x1FFLL));
    unint64_t v9 = a2 + 11;
    unint64_t v10 = a2[11] + v5;
    long long v11 = (char *)(v6 + 8 * (v10 >> 9));
    long long v12 = (double *)(*(void *)v11 + 8 * (v10 & 0x1FF));
  }
  unint64_t v14 = sub_100405A00(v7, v8, v11, v12, (double *)(a1 + 872));
  uint64_t v16 = v15;
  unint64_t v17 = a2[10];
  uint64_t v18 = a2[7];
  uint64_t v19 = (char *)(v18 + 8 * (v17 >> 9));
  if (a2[8] == v18)
  {
    uint64_t v20 = 0;
    uint64_t v23 = 0;
    long long v22 = (char *)(v18 + 8 * ((*v9 + v17) >> 9));
  }
  else
  {
    uint64_t v20 = (double *)(*(void *)v19 + 8 * (a2[10] & 0x1FFLL));
    unint64_t v21 = *v9 + v17;
    long long v22 = (char *)(v18 + 8 * (v21 >> 9));
    uint64_t v23 = (double *)(*(void *)v22 + 8 * (v21 & 0x1FF));
  }
  uint64_t v25 = sub_100405A00(v19, v20, v22, v23, &v62);
  uint64_t v26 = v24;
  uint64_t v27 = a2[7];
  if (a2[8] == v27)
  {
    uint64_t v28 = 0;
    if (!v16) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(v27 + ((a2[10] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a2[10] & 0x1FFLL) == v16) {
      return 0;
    }
    uint64_t v28 = *(void *)(v27 + (((*v9 + a2[10]) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((*v9 + a2[10]) & 0x1FFLL);
    if (v28 == v16) {
      return 0;
    }
  }
  if (v28 == v24) {
    return 0;
  }
  sub_1003EF500((uint64_t)v63, a1 + 880);
  sub_1003EFA78((uint64_t)v47, a1 + 968);
  uint64_t v29 = a2[7];
  uint64_t v30 = a2[8];
  long long v31 = (char *)(v29 + 8 * (a2[10] >> 9));
  if (v30 == v29) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = *(void *)v31 + 8 * (a2[10] & 0x1FFLL);
  }
  if (v16 == v32
    || (uint64_t v33 = *(void *)v31,
        uint64_t v34 = ((v16 - *(void *)v14) >> 3) + ((v14 - v31) << 6) - ((v32 - *(void *)v31) >> 3),
        v34 <= 0))
  {
    __assert_rtn("peekDirectionalError", "RoseSensorFusionEKF.cpp", 714, "indexFirstIMUDataToAdvanceTo > 0");
  }
  double v35 = *(double *)(a1 + 872);
  if (v30 == v29) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = v33 + 8 * (a2[10] & 0x1FFLL);
  }
  if (v26 == v36)
  {
    uint64_t v37 = 0;
    uint64_t v38 = -1;
LABEL_43:
    uint64_t v43 = a2[4];
    uint64_t v44 = ((unint64_t)(v38 + v43) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
    unint64_t v45 = (v44 + ((unint64_t)(v38 + v43 - v44) >> 1)) >> 4;
    if (sub_1003FBD60(*(void *)(a2[1] + 8 * v45) + 160 * (v38 + v43 - 25 * v45), *(void *)(a2[1] + 8 * ((v43 + v37) / 0x19uLL)) + 160 * ((v43 + v37) % 0x19uLL), (uint64_t)v63, v35, v62))
    {
      uint64_t v51 = 0x100000006;
      long long v50 = xmmword_1007749D0;
      unint64_t v49 = off_100864CD8;
      uint64_t v52 = v53;
      sub_100404930((uint64_t)v48);
    }
    return 0;
  }
  uint64_t v37 = ((v26 - *(void *)v25) >> 3) + ((v25 - v31) << 6) - ((v36 - v33) >> 3);
  uint64_t v38 = v37 - 1;
  if (v34 >= v37) {
    goto LABEL_43;
  }
  while (1)
  {
    double v39 = v35;
    double v35 = *(double *)(*(void *)(a2[7] + (((unint64_t)(v34 + a2[10]) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v34 + a2[10]) & 0x1FF));
    unint64_t v40 = v34 + a2[4];
    uint64_t v41 = ((v40 - 1) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
    unint64_t v42 = (v41 + ((v40 - 1 - v41) >> 1)) >> 4;
    if (!sub_1003FBD60(*(void *)(a2[1] + 8 * v42) + 160 * (v40 - 1 - 25 * v42), *(void *)(a2[1] + 8 * (v40 / 0x19)) + 160 * (v40 % 0x19), (uint64_t)v63, v39, v35))return 0; {
    if (++v34 >= v37)
    }
      goto LABEL_43;
  }
}

void sub_1003FDF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
}

void *sub_1003FDFD8(void *result)
{
  double *result = off_100853598;
  return result;
}

std::string *sub_1003FDFF8@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  int v2 = result->__r_.__value_.__r.__words[1];
  int v3 = HIDWORD(result->__r_.__value_.__r.__words[1]);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (v2)
  {
    uint64_t v4 = (uint64_t)result;
    for (int i = 0; i != v2; ++i)
    {
      if (v3)
      {
        for (int j = 0; j != v3; ++j)
        {
          double v8 = sub_1002A43FC(v4, i, j);
          std::to_string(&v12, v8);
          if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v9 = &v12;
          }
          else {
            unint64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
          }
          if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v12.__r_.__value_.__l.__size_;
          }
          std::string::append(a2, (const std::string::value_type *)v9, size);
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v12.__r_.__value_.__l.__data_);
          }
          if (j - v3 == -1) {
            long long v11 = ";";
          }
          else {
            long long v11 = ",";
          }
          BOOL result = std::string::append(a2, v11);
        }
      }
    }
  }
  return result;
}

void sub_1003FE0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003FE124(void *result)
{
  double *result = off_100853598;
  return result;
}

uint64_t sub_1003FE144(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_100439230();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_100439204();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_1003802D0(*(void *)(a1 + 1192), *(_DWORD *)(*(void *)(a1 + 1232) + 4 * j), *(_DWORD *)(*(void *)(a1 + 1320) + 4 * i)) = v9;
          *(void *)sub_10034185C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

void *sub_1003FE220(void *result)
{
  result[161] = off_100862050;
  result[150] = off_100862050;
  double *result = off_100853598;
  return result;
}

double sub_1003FE280@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x600000006;
  *(void *)a2 = off_100864C90;
  *(_OWORD *)(a2 + 8) = xmmword_1007749C0;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_10040574C(a1, a2);
  return result;
}

void sub_1003FE2E0(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_1003FE300(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_100439230();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_100439204();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_1003802D0(*(void *)(a1 + 616), *(_DWORD *)(*(void *)(a1 + 656) + 4 * j), *(_DWORD *)(*(void *)(a1 + 720) + 4 * i)) = v9;
          *(void *)sub_10034185C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

void *sub_1003FE3DC(void *result)
{
  result[86] = off_100862050;
  result[78] = off_100862050;
  double *result = off_100853598;
  return result;
}

uint64_t sub_1003FE43C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_100439230();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_100439204();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_1003802D0(*(void *)(a1 + 328), *(_DWORD *)(*(void *)(a1 + 368) + 4 * j), *(_DWORD *)(*(void *)(a1 + 432) + 4 * i)) = v9;
          *(void *)sub_10034185C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

void *sub_1003FE518(void *result)
{
  result[50] = off_100862050;
  result[42] = off_100862050;
  double *result = off_100853598;
  return result;
}

uint64_t sub_1003FE578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  unsigned int v9 = *(_DWORD *)(a3 + 16);
  uint64_t result = sub_1003EF948(a4, *(_DWORD *)(a2 + 16), v9);
  if (v9)
  {
    int v11 = 0;
    for (unsigned int i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
        {
          int v14 = sub_100404610(a2, j);
          uint64_t result = sub_100404610(a3, i);
          *(void *)(*(void *)(a4 + 32) + 8 * (v11 + j)) = *(void *)(*(void *)(a1 + 32)
                                                                                        + 8
                                                                                        * (v14 + *(_DWORD *)(a1 + 20) * result));
        }
      }
      v11 += v8;
    }
  }
  return result;
}

void sub_1003FE644(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void *sub_1003FE668(void *result)
{
  double *result = off_100853598;
  return result;
}

void *sub_1003FE688(uint64_t a1)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    int v3 = (uint64_t *)(a1 + 8 * i);
    uint64_t v4 = *v3;
    *(void *)sub_1003416AC((uint64_t)&unk_1008AC650, i) = v4;
    uint64_t v5 = v3[3];
    *(void *)sub_1003416AC((uint64_t)&unk_1008AC690, i) = v5;
    uint64_t v6 = v3[6];
    uint64_t result = (void *)sub_1003416AC((uint64_t)&unk_1008AC6D0, i);
    void *result = v6;
  }
  return result;
}

uint64_t sub_1003FE710(double a1, double a2, double a3, double a4)
{
  BOOL v8 = a2 <= 0.0;
  if (a3 <= 0.0) {
    BOOL v8 = 1;
  }
  int v9 = a1 <= 0.0 || v8;
  if (v9 == 1)
  {
    sub_100054E28((uint64_t)&v16);
    uint64_t v10 = *((void *)&v17 + 1);
    *(_DWORD *)((char *)&v17 + *(void *)(*((void *)&v17 + 1) - 24) + 16) = *(_DWORD *)((unsigned char *)&v17
                                                                                           + *(void *)(*((void *)&v17 + 1) - 24)
                                                                                           + 16) & 0xFFFFFEFB | 4;
    *(void *)&v20[*(void *)(v10 - 24) - 8] = 3;
    sub_100056628((void *)&v17 + 1, (uint64_t)"RoseEKF error: Trying to set dynamics noise intensity values that are not positive\n", 83);
    sub_100056628((void *)&v17 + 1, (uint64_t)"qT: ", 4);
    int v11 = (void *)std::ostream::operator<<();
    sub_100056628(v11, (uint64_t)", qA: ", 6);
    std::string v12 = (void *)std::ostream::operator<<();
    sub_100056628(v12, (uint64_t)", qG: ", 6);
    unint64_t v13 = (void *)std::ostream::operator<<();
    sub_100056628(v13, (uint64_t)", qV:", 5);
    std::ostream::operator<<();
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      sub_1004392E4();
    }
    *(uint64_t (***)())((char *)&v16
    *((void *)&v17 + 1) = v14;
    if (v22 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  else
  {
    uint64_t v18 = 0x300000003;
    uint64_t v16 = off_100861B80;
    long long v17 = xmmword_1004C1E40;
    uint64_t v19 = v20;
    sub_100351D20((uint64_t)&qword_1008ABCF8, (uint64_t)&v16, a1);
    sub_10034226C((uint64_t)&qword_1008AC710, (uint64_t)&v16);
    uint64_t v18 = 0x300000003;
    uint64_t v16 = off_100861B80;
    long long v17 = xmmword_1004C1E40;
    uint64_t v19 = v20;
    sub_100351D20((uint64_t)&qword_1008ABCF8, (uint64_t)&v16, a2);
    sub_10034226C((uint64_t)&qword_1008AC780, (uint64_t)&v16);
    uint64_t v18 = 0x300000003;
    uint64_t v16 = off_100861B80;
    long long v17 = xmmword_1004C1E40;
    uint64_t v19 = v20;
    sub_100351D20((uint64_t)&qword_1008ABCF8, (uint64_t)&v16, a3);
    sub_10034226C((uint64_t)&qword_1008AC7F0, (uint64_t)&v16);
    uint64_t v18 = 0x300000003;
    uint64_t v16 = off_100861B80;
    long long v17 = xmmword_1004C1E40;
    uint64_t v19 = v20;
    sub_100351D20((uint64_t)&qword_1008ABCF8, (uint64_t)&v16, a4);
    sub_10034226C((uint64_t)&qword_1008AC860, (uint64_t)&v16);
    uint64_t v18 = 0x300000003;
    uint64_t v16 = off_100861B80;
    long long v17 = xmmword_1004C1E40;
    uint64_t v19 = v20;
    sub_100351D20((uint64_t)&qword_1008ABCF8, (uint64_t)&v16, 1.0 / sqrt(a1));
    sub_10034226C((uint64_t)&qword_1008AC8D0, (uint64_t)&v16);
    uint64_t v18 = 0x300000003;
    uint64_t v16 = off_100861B80;
    long long v17 = xmmword_1004C1E40;
    uint64_t v19 = v20;
    sub_100351D20((uint64_t)&qword_1008ABCF8, (uint64_t)&v16, 1.0 / sqrt(a2));
    sub_10034226C((uint64_t)&qword_1008AC940, (uint64_t)&v16);
    uint64_t v18 = 0x300000003;
    uint64_t v16 = off_100861B80;
    long long v17 = xmmword_1004C1E40;
    uint64_t v19 = v20;
    sub_100351D20((uint64_t)&qword_1008ABCF8, (uint64_t)&v16, 1.0 / sqrt(a3));
    sub_10034226C((uint64_t)&qword_1008AC9B0, (uint64_t)&v16);
    uint64_t v18 = 0x300000003;
    uint64_t v16 = off_100861B80;
    long long v17 = xmmword_1004C1E40;
    uint64_t v19 = v20;
    sub_100351D20((uint64_t)&qword_1008ABCF8, (uint64_t)&v16, 1.0 / sqrt(a4));
    sub_10034226C((uint64_t)&qword_1008ACA20, (uint64_t)&v16);
  }
  return v9 ^ 1u;
}

void sub_1003FECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100055100((uint64_t)va);
  _Unwind_Resume(a1);
}

double *sub_1003FED14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1003F72FC(a3, (uint64_t)&qword_1008ABC18, 0, (uint64_t)&v21);
  uint64_t v13 = 0x100000003;
  int v11 = off_100861B38;
  long long v12 = xmmword_1004C1B50;
  uint64_t v14 = &v15;
  sub_1003418A0((uint64_t)&v21, (uint64_t)&unk_1008AC690, (uint64_t)&v11);
  uint64_t v28 = 0x100000003;
  uint64_t v26 = off_100861B38;
  long long v27 = xmmword_1004C1B50;
  uint64_t v29 = &v30;
  uint64_t v23 = 0x100000134;
  unint64_t v21 = off_100861C10;
  long long v22 = xmmword_1004C1B70;
  uint64_t v24 = &v25;
  uint64_t v18 = 0x100000003;
  uint64_t v16 = off_100861B38;
  long long v17 = xmmword_1004C1B50;
  uint64_t v19 = &v20;
  sub_100341B04((uint64_t)&v11, (uint64_t)&v26, (uint64_t)&v21, (uint64_t)&v16, "2");
  double v6 = v5;
  uint64_t result = (double *)sub_1003416AC(a1, 0);
  double *result = v6;
  if (v6 != 0.0)
  {
    double v8 = sub_1002A43C0((uint64_t)&v11, 0);
    *(double *)sub_1003416AC(a2, 0) = v8 / v6;
    double v9 = sub_1002A43C0((uint64_t)&v11, 1u);
    *(double *)sub_1003416AC(a2, 1u) = v9 / v6;
    double v10 = sub_1002A43C0((uint64_t)&v11, 2u);
    uint64_t result = (double *)sub_1003416AC(a2, 2u);
    double *result = v10 / v6;
  }
  return result;
}

void sub_1003FEF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1003F72FC(a3, (uint64_t)&qword_1008ABC18, 0, (uint64_t)&v26);
  uint64_t v18 = 0x100000003;
  uint64_t v16 = off_100861B38;
  long long v17 = xmmword_1004C1B50;
  uint64_t v19 = &v20;
  sub_1003418A0((uint64_t)&v26, (uint64_t)&unk_1008AC6D0, (uint64_t)&v16);
  uint64_t v33 = 0x100000003;
  long long v31 = off_100861B38;
  long long v32 = xmmword_1004C1B50;
  uint64_t v34 = &v35;
  uint64_t v28 = 0x100000134;
  uint64_t v26 = off_100861C10;
  long long v27 = xmmword_1004C1B70;
  uint64_t v29 = &v30;
  uint64_t v23 = 0x100000003;
  unint64_t v21 = off_100861B38;
  long long v22 = xmmword_1004C1B50;
  uint64_t v24 = &v25;
  sub_100341B04((uint64_t)&v16, (uint64_t)&v31, (uint64_t)&v26, (uint64_t)&v21, "2");
  double v6 = v5;
  double v7 = sub_1002A43C0((uint64_t)&v16, 0);
  long double v8 = sub_1002A43C0((uint64_t)&v16, 1u);
  double v9 = sub_1002A43C0((uint64_t)&v16, 2u);
  if (v6 != 0.0)
  {
    long double v10 = v9;
    int v11 = (long double *)sub_1003416AC(a1, 0);
    *int v11 = atan2(v10, v8);
    long long v12 = (long double *)sub_1003416AC(a1, 1u);
    *long long v12 = asin(v7 / v6);
    double v13 = v10 * v10 + v8 * v8;
    double v14 = 1.0 / (v6 * v6);
    *(void *)sub_10034185C(a2, 0, 0) = 0;
    double v15 = sqrt(v13);
    *(double *)sub_10034185C(a2, 1, 0) = v14 * v15;
    if (v13 != 0.0)
    {
      *(long double *)sub_10034185C(a2, 0, 1) = -v10 / v13;
      *(long double *)sub_10034185C(a2, 0, 2) = v8 / v13;
      *(long double *)sub_10034185C(a2, 1, 1) = v14 * (-(v7 * v8) / v15);
      *(long double *)sub_10034185C(a2, 1, 2) = v14 * (-(v7 * v10) / v15);
    }
  }
}

uint64_t sub_1003FF1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16)) {
    sub_100439348();
  }
  if ((int)v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 32) + 8 * i);
      *(void *)sub_100406C7C(*(void *)(a1 + 56), *(_DWORD *)(*(void *)(a1 + 96) + 4 * i)) = v6;
      *(void *)(*(void *)(a1 + 32) + 8 * i) = v6;
    }
  }
  return a1;
}

void *sub_1003FF244(void *result)
{
  result[8] = off_100862050;
  double *result = off_100853598;
  return result;
}

uint64_t sub_1003FF284(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_100439230();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_100439204();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_1003802D0(*(void *)(a1 + 88), *(_DWORD *)(*(void *)(a1 + 128) + 4 * j), *(_DWORD *)(*(void *)(a1 + 176) + 4 * i)) = v9;
          *(void *)sub_10034185C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

void *sub_1003FF360(void *result)
{
  result[18] = off_100862050;
  result[12] = off_100862050;
  double *result = off_100853598;
  return result;
}

uint64_t sub_1003FF3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_100439230();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_100439204();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_1003802D0(*(void *)(a1 + 136), *(_DWORD *)(*(void *)(a1 + 176) + 4 * j), *(_DWORD *)(*(void *)(a1 + 224) + 4 * i)) = v9;
          *(void *)sub_10034185C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

void *sub_1003FF49C(void *result)
{
  result[24] = off_100862050;
  result[18] = off_100862050;
  double *result = off_100853598;
  return result;
}

void *sub_1003FF4FC(void *result)
{
  double *result = off_100853598;
  return result;
}

void *sub_1003FF51C(void *result)
{
  double *result = off_100853598;
  return result;
}

void sub_1003FF53C(uint64_t a1, uint64_t a2, double a3, long double a4, long double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v69 = 0x100000003;
  long long v68 = xmmword_1004C1B50;
  uint64_t v67 = off_100861B38;
  uint64_t v70 = &v71;
  sub_1003418A0((uint64_t)&unk_1008AC690, (uint64_t)&unk_1008AC6D0, (uint64_t)&v67);
  uint64_t v64 = 0x100000003;
  long long v63 = xmmword_1004C1B50;
  double v62 = off_100861B38;
  long long v65 = v66;
  uint64_t v74 = 0x100000134;
  long long v73 = xmmword_1004C1B70;
  uint64_t v72 = off_100861C10;
  uint64_t v75 = v76;
  uint64_t v59 = 0x100000003;
  long long v58 = xmmword_1004C1B50;
  uint64_t v57 = off_100861B38;
  double v60 = v61;
  sub_100341B04((uint64_t)&v67, (uint64_t)&v62, (uint64_t)&v72, (uint64_t)&v57, "2");
  if (v16 == 0.0)
  {
    double v17 = *(double *)sub_1003416AC((uint64_t)&unk_1008AC6D0, 0);
    uint64_t v18 = (double *)sub_1003416AC(a1, 0);
    __double2 v19 = __sincos_stret(a5);
    *uint64_t v18 = v17 + a3 * v19.__sinval;
    double v20 = *(double *)sub_1003416AC((uint64_t)&unk_1008AC6D0, 1u);
    unint64_t v21 = (double *)sub_1003416AC(a1, 1u);
    __double2 v22 = __sincos_stret(a4);
    *unint64_t v21 = v20 + v19.__cosval * a3 * v22.__cosval;
    double v23 = *(double *)sub_1003416AC((uint64_t)&unk_1008AC6D0, 2u);
    uint64_t v24 = (double *)sub_1003416AC(a1, 2u);
    double v25 = v23 + v19.__cosval * a3 * v22.__sinval;
  }
  else
  {
    __double2 v26 = __sincos_stret(a5);
    double v47 = a6;
    __double2 v27 = __sincos_stret(a4);
    double v50 = a4;
    double v28 = a8;
    double v29 = sub_1002A43C0((uint64_t)&v67, 0);
    double v30 = sub_1002A43C0((uint64_t)&v67, 1u);
    double v31 = sub_1002A43C0((uint64_t)&v67, 2u);
    double v32 = (v27.__cosval * v26.__cosval * v30 + v29 * v26.__sinval + v31 * (v27.__sinval * v26.__cosval)) * -2.0;
    double v33 = (sqrt(fmax((v30 * v30 + v29 * v29 + v31 * v31 - a3 * a3) * -4.0 + v32 * v32, 0.0)) - v32) * 0.5;
    double v34 = *(double *)sub_1003416AC((uint64_t)&unk_1008AC6D0, 0);
    *(double *)sub_1003416AC(a1, 0) = v34 + v33 * v26.__sinval;
    double v35 = *(double *)sub_1003416AC((uint64_t)&unk_1008AC6D0, 1u);
    uint64_t v36 = (double *)sub_1003416AC(a1, 1u);
    double v37 = v35 + v33 * (v27.__cosval * v26.__cosval);
    a6 = v47;
    *uint64_t v36 = v37;
    double v38 = *(double *)sub_1003416AC((uint64_t)&unk_1008AC6D0, 2u);
    uint64_t v24 = (double *)sub_1003416AC(a1, 2u);
    double v25 = v38 + v33 * (v27.__sinval * v26.__cosval);
    a8 = v28;
    a4 = v50;
  }
  *uint64_t v24 = v25;
  if (1.57079633 - fabs(a5) > 0.01)
  {
    uint64_t v74 = 0x300000003;
    long long v73 = xmmword_1004C1E40;
    uint64_t v72 = off_100861B80;
    uint64_t v75 = v76;
    sub_1003411F0(&v72, 3, 3);
    sub_100341240((uint64_t)&v72, 0.0);
    *(double *)sub_10034185C((uint64_t)&v72, 0, 0) = a6 * a6;
    *(double *)sub_10034185C((uint64_t)&v72, 1, 1) = a7 * a7;
    *(double *)sub_10034185C((uint64_t)&v72, 2, 1) = a9;
    *(double *)sub_10034185C((uint64_t)&v72, 1, 2) = a9;
    *(double *)sub_10034185C((uint64_t)&v72, 2, 2) = a8 * a8;
    uint64_t v64 = 0x300000003;
    long long v63 = xmmword_1004C1E40;
    double v62 = off_100861B80;
    long long v65 = v66;
    sub_1003411F0(&v62, 3, 3);
    sub_100341240((uint64_t)&v62, 0.0);
    double v39 = sin(a5);
    *(double *)sub_10034185C((uint64_t)&v62, 0, 0) = v39;
    *(void *)sub_10034185C((uint64_t)&v62, 0, 1) = 0;
    double v40 = cos(a5);
    double v41 = v40 * a3;
    *(double *)sub_10034185C((uint64_t)&v62, 0, 2) = v40 * a3;
    double v42 = cos(a4);
    *(double *)sub_10034185C((uint64_t)&v62, 1, 0) = v42 * v40;
    double v43 = sin(a4);
    *(double *)sub_10034185C((uint64_t)&v62, 1, 1) = v43 * -(a3 * v40);
    double v44 = -(a3 * v39);
    *(double *)sub_10034185C((uint64_t)&v62, 1, 2) = v42 * v44;
    *(double *)sub_10034185C((uint64_t)&v62, 2, 0) = v43 * v40;
    *(double *)sub_10034185C((uint64_t)&v62, 2, 1) = v42 * v41;
    *(double *)sub_10034185C((uint64_t)&v62, 2, 2) = v43 * v44;
    uint64_t v54 = 0x300000003;
    uint64_t v52 = off_100861B80;
    long long v53 = xmmword_1004C1E40;
    uint64_t v55 = &v56;
    sub_1003419A0((uint64_t)&v62, (uint64_t)&v72, (uint64_t)&v52);
    sub_100341794((uint64_t)v51, DWORD1(v63), v63);
    sub_1003416E8((uint64_t)&v62, v51);
    uint64_t v59 = 0x300000003;
    long long v58 = xmmword_1004C1E40;
    uint64_t v57 = off_100861B80;
    double v60 = v61;
    sub_1003419A0((uint64_t)&v52, (uint64_t)v51, (uint64_t)&v57);
    sub_10034226C(a2, (uint64_t)&v57);
  }
  else
  {
    uint64_t v74 = 0x300000003;
    long long v73 = xmmword_1004C1E40;
    uint64_t v72 = off_100861B80;
    uint64_t v75 = v76;
    sub_1003411F0(&v72, 3, 3);
    sub_100341240((uint64_t)&v72, 0.0);
    sub_10034226C(a2, (uint64_t)&v72);
    *(double *)sub_10034185C(a2, 0, 0) = a6 * a6;
    double v45 = a3 * a3 * (a8 * a8);
    *(double *)sub_10034185C(a2, 1, 1) = v45;
    *(double *)sub_10034185C(a2, 2, 2) = v45;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100439374();
    }
  }
}

std::string *sub_1003FFC94@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  int v2 = result->__r_.__value_.__r.__words[1];
  int v3 = HIDWORD(result->__r_.__value_.__r.__words[1]);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (v2)
  {
    uint64_t v4 = (uint64_t)result;
    for (int i = 0; i != v2; ++i)
    {
      if (v3)
      {
        for (int j = 0; j != v3; ++j)
        {
          double v8 = sub_1002A43FC(v4, i, j);
          std::to_string(&v12, v8);
          if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v9 = &v12;
          }
          else {
            uint64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
          }
          if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v12.__r_.__value_.__l.__size_;
          }
          std::string::append(a2, (const std::string::value_type *)v9, size);
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v12.__r_.__value_.__l.__data_);
          }
          if (j - v3 == -1) {
            int v11 = ";";
          }
          else {
            int v11 = ",";
          }
          uint64_t result = std::string::append(a2, v11);
        }
      }
    }
  }
  return result;
}

void sub_1003FFD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003FFDC0@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_1004393A8();
  }
  signed int v7 = *(_DWORD *)(a2 + 12);
  sub_1004072C4((uint64_t)v10, v7, 1u);
  if (v7 >= 1)
  {
    for (unsigned int i = 0; i != v7; ++i)
      *(_DWORD *)sub_1004073C8((uint64_t)v10, i) = i;
  }
  return sub_100407404(a4, a2, a3, (uint64_t)v10);
}

void *sub_1003FFE68(void *result)
{
  result[50] = off_100862050;
  result[42] = off_100862050;
  double *result = off_100853598;
  return result;
}

uint64_t sub_1003FFEC8@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_1004393A8();
  }
  signed int v7 = *(_DWORD *)(a2 + 12);
  sub_1004072C4((uint64_t)v10, v7, 1u);
  if (v7 >= 1)
  {
    for (unsigned int i = 0; i != v7; ++i)
      *(_DWORD *)sub_1004073C8((uint64_t)v10, i) = i;
  }
  return sub_1004076A8(a4, a2, a3, (uint64_t)v10);
}

uint64_t sub_1003FFF70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_100439230();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_100439204();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_1003802D0(*(void *)(a1 + 184), *(_DWORD *)(*(void *)(a1 + 224) + 4 * j), *(_DWORD *)(*(void *)(a1 + 280) + 4 * i)) = v9;
          *(void *)sub_10034185C(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

void *sub_10040004C(void *result)
{
  result[31] = off_100862050;
  result[24] = off_100862050;
  double *result = off_100853598;
  return result;
}

uint64_t sub_1004000AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16)) {
    sub_100439348();
  }
  if ((int)v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 32) + 8 * i);
      *(void *)sub_100406C7C(*(void *)(a1 + 64), *(_DWORD *)(*(void *)(a1 + 104) + 4 * i)) = v6;
      *(void *)(*(void *)(a1 + 32) + 8 * i) = v6;
    }
  }
  return a1;
}

void *sub_100400134(void *result)
{
  result[9] = off_100862050;
  double *result = off_100853598;
  return result;
}

void *sub_100400174(void *result)
{
  double *result = off_100853598;
  return result;
}

double sub_100400194@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  sub_1004080AC(a4, *(_DWORD *)(a2 + 16), 1u);
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      double result = *(double *)(*(void *)(a1 + 32) + 8 * (sub_100404610(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(void *)(a4 + 32) + 8 * i) = result;
    }
  }
  return result;
}

void sub_10040021C(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void *sub_10040023C(void *result)
{
  double *result = off_100853598;
  return result;
}

void *sub_10040025C(void *result)
{
  double *result = off_100853598;
  return result;
}

void sub_10040027C(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100439400(a3, v4);
  }
  uint64_t v23 = 0x300000003;
  long long v22 = xmmword_1004C1E40;
  unint64_t v21 = off_100861B80;
  uint64_t v24 = &v25;
  LOBYTE(v6) = 0;
  sub_100405C94((uint64_t)a3, (uint64_t)&v21, (BOOL *)&v6);
  if ((_BYTE)v6)
  {
    sub_100341794((uint64_t)v5, DWORD1(v22), v22);
    sub_1003416E8((uint64_t)&v21, v5);
    uint64_t v18 = 0x300000003;
    long long v17 = xmmword_1004C1E40;
    double v16 = off_100861B80;
    __double2 v19 = &v20;
    uint64_t v13 = 0x100000003;
    long long v12 = xmmword_1004C1B50;
    int v11 = off_1008627E0;
    double v14 = &v15;
    uint64_t v8 = 0x10000000CLL;
    long long v7 = xmmword_1004C2700;
    uint64_t v6 = off_100862828;
    uint64_t v9 = &v10;
    sub_1003517F4((uint64_t)v5, (uint64_t)&v11, (uint64_t)&v6, (uint64_t)&v16);
  }
  sub_1004393D4();
}

void sub_100400AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004394A4(a3, v4);
  }
  uint64_t v25 = 0x100000001;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v24 = v5;
  uint64_t v23 = off_1008620C8;
  __double2 v26 = &v27;
  LOBYTE(v12) = 0;
  sub_100405C94(a3, (uint64_t)&v23, (BOOL *)&v12);
  if ((_BYTE)v12)
  {
    sub_100406944((uint64_t)v17, DWORD1(v24), v24);
    sub_1003416E8((uint64_t)&v23, v17);
    uint64_t v20 = 0x100000001;
    *(void *)&long long v6 = 0x100000001;
    *((void *)&v6 + 1) = 0x100000001;
    long long v19 = v6;
    uint64_t v18 = off_1008620C8;
    unint64_t v21 = &v22;
    uint64_t v9 = 0x100000001;
    long long v8 = v6;
    long long v7 = off_100862AD0;
    uint64_t v10 = &v11;
    uint64_t v14 = 0x100000004;
    long long v13 = xmmword_1004C1B60;
    long long v12 = off_100861BC8;
    uint64_t v15 = &v16;
    sub_1003517F4((uint64_t)v17, (uint64_t)&v7, (uint64_t)&v12, (uint64_t)&v18);
  }
  sub_1004393D4();
}

uint64_t sub_1004012E0@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_100439530();
  }
  uint64_t v14 = 0x100000001;
  long long v12 = off_100862AD0;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  long long v13 = v7;
  uint64_t v15 = &v16;
  *(_DWORD *)sub_1004073C8((uint64_t)&v12, 0) = a3;
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  sub_100408228((uint64_t)v11, v8, 1u);
  if (v8)
  {
    for (unsigned int i = 0; i != v8; ++i)
      *(_DWORD *)sub_1004073C8((uint64_t)v11, i) = i;
  }
  return sub_100408318(a4, a2, (uint64_t)&v12, (uint64_t)v11);
}

void *sub_1004013C4(void *result)
{
  result[18] = off_100862050;
  result[12] = off_100862050;
  double *result = off_100853598;
  return result;
}

void *sub_100401424(void *result)
{
  double *result = off_100853598;
  return result;
}

double sub_100401444@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  sub_1004080AC(a4, *(_DWORD *)(a2 + 16), 1u);
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      double result = *(double *)(*(void *)(a1 + 32) + 8 * (sub_100404610(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(void *)(a4 + 32) + 8 * i) = result;
    }
  }
  return result;
}

void sub_1004014CC(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void *sub_1004014EC(void *result)
{
  double *result = off_100853598;
  return result;
}

void *sub_10040150C(void *result)
{
  double *result = off_100853598;
  return result;
}

void sub_10040152C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10043955C(a3, v4);
  }
  uint64_t v23 = 0x200000002;
  long long v22 = xmmword_1004C1EB0;
  unint64_t v21 = off_1008621A0;
  long long v24 = &v25;
  LOBYTE(v6) = 0;
  sub_100405C94(a3, (uint64_t)&v21, (BOOL *)&v6);
  if ((_BYTE)v6)
  {
    sub_10035257C((uint64_t)v5, DWORD1(v22), v22);
    sub_1003416E8((uint64_t)&v21, v5);
    uint64_t v18 = 0x200000002;
    long long v17 = xmmword_1004C1EB0;
    uint64_t v16 = off_1008621A0;
    long long v19 = &v20;
    uint64_t v13 = 0x100000002;
    long long v12 = xmmword_1004C1E90;
    uint64_t v11 = off_1008656B0;
    uint64_t v14 = &v15;
    uint64_t v8 = 0x100000008;
    long long v7 = xmmword_100774C50;
    long long v6 = off_1008656F8;
    uint64_t v9 = &v10;
    sub_1003517F4((uint64_t)v5, (uint64_t)&v11, (uint64_t)&v6, (uint64_t)&v16);
  }
  sub_1004393D4();
}

uint64_t sub_100401D78@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_1004393A8();
  }
  signed int v7 = *(_DWORD *)(a2 + 12);
  sub_1004072C4((uint64_t)v10, v7, 1u);
  if (v7 >= 1)
  {
    for (unsigned int i = 0; i != v7; ++i)
      *(_DWORD *)sub_1004073C8((uint64_t)v10, i) = i;
  }
  return sub_100408900(a4, a2, a3, (uint64_t)v10);
}

void *sub_100401E20(void *result)
{
  result[24] = off_100862050;
  result[18] = off_100862050;
  double *result = off_100853598;
  return result;
}

void *sub_100401E80(void *result)
{
  double *result = off_100853598;
  return result;
}

double sub_100401EA0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  sub_1004080AC(a4, *(_DWORD *)(a2 + 16), 1u);
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      double result = *(double *)(*(void *)(a1 + 32) + 8 * (sub_100404610(a2, i) + *(_DWORD *)(a1 + 20) * a3));
      *(double *)(*(void *)(a4 + 32) + 8 * i) = result;
    }
  }
  return result;
}

void sub_100401F28(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void *sub_100401F48(void *result)
{
  double *result = off_100853598;
  return result;
}

void *sub_100401F68(void *result)
{
  double *result = off_100853598;
  return result;
}

void sub_100401F88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 444))
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_1004396C4();
    }
    if (fabs(*(double *)(a2 + 16)) <= 1.57079633 && fabs(*(double *)(a2 + 8)) <= 3.14159265)
    {
      if (sub_1003F93D0(a1, a3, *(double *)a2))
      {
        uint64_t v19 = 0x100000002;
        long long v17 = off_100862110;
        long long v18 = xmmword_1004C1E90;
        uint64_t v20 = &v21;
        sub_1003411F0(&v17, 2, 1);
        sub_100341240((uint64_t)&v17, 0.0);
        uint64_t v14 = 0x200000002;
        long long v12 = off_1008621A0;
        long long v13 = xmmword_1004C1EB0;
        uint64_t v15 = &v16;
        sub_1003411F0(&v12, 2, 2);
        sub_100341240((uint64_t)&v12, 0.0);
        uint64_t v6 = *(void *)(a2 + 8);
        *(void *)sub_1003416AC((uint64_t)&v17, 0) = v6;
        uint64_t v7 = *(void *)(a2 + 16);
        *(void *)sub_1003416AC((uint64_t)&v17, 1u) = v7;
        double v8 = *(double *)(a2 + 24);
        *(double *)sub_10034185C((uint64_t)&v12, 0, 0) = v8 * v8;
        uint64_t v9 = *(void *)(a2 + 40);
        *(void *)sub_10034185C((uint64_t)&v12, 1, 0) = v9;
        uint64_t v10 = *(void *)(a2 + 40);
        *(void *)sub_10034185C((uint64_t)&v12, 0, 1) = v10;
        double v11 = *(double *)(a2 + 32);
        *(double *)sub_10034185C((uint64_t)&v12, 1, 1) = v11 * v11;
        sub_10040152C(a1, (uint64_t)&v17, (uint64_t)&v12);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100439690();
      }
      *(_DWORD *)(a1 + 440) = 3;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10043965C();
  }
}

void sub_1004021E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 444))
  {
    if (*(double *)(a2 + 8) <= 0.0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_10043972C();
      }
      *(_DWORD *)(a1 + 440) = 3;
    }
    else if (sub_1003F93D0(a1, a3, *(double *)a2))
    {
      uint64_t v16 = 0x100000001;
      uint64_t v14 = off_1008620C8;
      *(void *)&long long v5 = 0x100000001;
      *((void *)&v5 + 1) = 0x100000001;
      long long v15 = v5;
      long long v17 = &v18;
      sub_1003411F0(&v14, 1, 1);
      sub_100341240((uint64_t)&v14, 0.0);
      uint64_t v11 = 0x100000001;
      uint64_t v9 = off_1008620C8;
      *(void *)&long long v6 = 0x100000001;
      *((void *)&v6 + 1) = 0x100000001;
      long long v10 = v6;
      long long v12 = &v13;
      sub_1003411F0(&v9, 1, 1);
      sub_100341240((uint64_t)&v9, 0.0);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)sub_1003416AC((uint64_t)&v14, 0) = v7;
      double v8 = *(double *)(a2 + 16);
      *(double *)sub_10034185C((uint64_t)&v9, 0, 0) = v8 * v8;
      sub_100400AA8(a1, (uint64_t)&v14, (uint64_t)&v9);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_1004396F8();
  }
}

void sub_100402380(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 444))
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_1004397C8();
    }
    if (fabs(*(double *)(a2 + 72)) > 1.57079633
      || fabs(*(double *)(a2 + 64)) > 3.14159265
      || *(double *)(a2 + 48) <= 0.0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100439794();
      }
      *(_DWORD *)(a1 + 440) = 3;
    }
    else if (sub_1003F93D0(a1, a3, *(double *)(a2 + 40)))
    {
      uint64_t v12 = 0x100000003;
      long long v10 = off_100861B38;
      long long v11 = xmmword_1004C1B50;
      uint64_t v13 = &v14;
      uint64_t v7 = 0x300000003;
      v6.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100861B80;
      *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_1004C1E40;
      double v8 = &v9;
      sub_1003FF53C((uint64_t)&v10, (uint64_t)&v6, *(double *)(a2 + 48), *(long double *)(a2 + 64), *(long double *)(a2 + 72), *(double *)(a2 + 56), *(double *)(a2 + 80), *(double *)(a2 + 88), *(double *)(a2 + 96));
      sub_10040027C(a1, (uint64_t)&v10, &v6);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100439760();
  }
}

uint64_t sub_100402534(uint64_t a1)
{
  return *(unsigned int *)(a1 + 440);
}

uint64_t sub_10040253C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)result;
  if (*(unsigned char *)(result + 444))
  {
    *(void *)a2 = *(void *)(result + 448);
    uint64_t v15 = 0x100000003;
    long long v14 = xmmword_1004C1B50;
    uint64_t v13 = off_100861B38;
    uint64_t v16 = &v17;
    sub_1003411F0(&v13, 3, 1);
    sub_100341240((uint64_t)&v13, 0.0);
    uint64_t v10 = 0x600000003;
    long long v9 = xmmword_100774BC0;
    double v8 = off_100864FF0;
    long long v11 = &v12;
    sub_1003411F0(&v8, 3, 6);
    sub_100341240((uint64_t)&v8, 0.0);
    uint64_t v3 = v2[4];
    uint64_t v4 = v2[22];
    uint64_t v5 = v2[40];
    sub_1003EF500((uint64_t)v7, (uint64_t)(v2 + 57));
    *(void *)sub_1003416AC((uint64_t)v7, 0) = v3;
    *(void *)sub_1003416AC((uint64_t)v7, 1u) = v4;
    *(void *)sub_1003416AC((uint64_t)v7, 2u) = v5;
    sub_1003FD510((uint64_t)&v13, (uint64_t)&v8, (uint64_t)v7);
    sub_1003EF690((uint64_t)(v2 + 68), (uint64_t)v6);
  }
  *(void *)a2 = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_DWORD *)(a2 + 136) = *(_DWORD *)(result + 440);
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  return result;
}

void sub_100402904(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t)a3;
  uint64_t v5 = a1;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    sub_100439D48();
    uint64_t v5 = a1;
    uint64_t v3 = (uint64_t)a3;
  }
  double v7 = *(double *)(a2 + 40);
  double v6 = *(double *)(a2 + 48);
  v96[7] = v7;
  v96[8] = v6;
  long double v8 = *(double *)(a2 + 64);
  double v81 = *(double *)(a2 + 56);
  v96[9] = v81;
  v96[1] = v7;
  v96[2] = v8;
  double v9 = *(double *)(a2 + 80);
  double v82 = *(double *)(a2 + 72);
  v96[3] = v82;
  v96[4] = v9;
  double v10 = *(double *)(a2 + 88);
  double v11 = *(double *)(a2 + 96);
  v96[5] = v10;
  v96[6] = v11;
  v96[0] = v7;
  if (!*(unsigned char *)(v5 + 444))
  {
    if (v6 <= 0.0)
    {
      __double2 v26 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(long double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v8;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
        uint64_t v119 = *(void *)&v82;
        *(_WORD *)uint64_t v120 = 2048;
        *(double *)&v120[2] = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#sf,RoseEKF error: Aborted initializing filter due to negative range measurement w/ range: %f m, El: %f rad, and Az: %f rad at t = %f s", (uint8_t *)&buf, 0x2Au);
      }
    }
    else
    {
      if (!sub_10040A9C8(v3))
      {
        double v12 = v96[0];
        if (v96[0] >= *(double *)(*(void *)(a3[7] + ((a3[10] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a3[10] & 0x1FFLL)))
        {
          *(double *)(a1 + 448) = v96[0];
          *(unsigned char *)(a1 + 444) = 1;
          double v50 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
            *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(long double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v8;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
            uint64_t v119 = *(void *)&v82;
            *(_WORD *)uint64_t v120 = 2048;
            *(double *)&v120[2] = v12;
            _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Initializing filter w/ range: %f m, El: %f rad, and Az: %f rad at t = %f s", (uint8_t *)&buf, 0x2Au);
          }
          uint64_t v119 = 0x600000006;
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_1007749C0;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100864C90;
          *(void *)uint64_t v120 = &v120[8];
          sub_1003411F0(&buf, 6, 6);
          sub_100341240((uint64_t)&buf, 0.0);
          uint64_t v93 = 0x100000003;
          long long v92 = xmmword_1004C1B50;
          long long v91 = off_100861B38;
          uint64_t v94 = &v95;
          sub_1003411F0(&v91, 3, 1);
          sub_100341240((uint64_t)&v91, 0.0);
          uint64_t v88 = 0x300000003;
          long long v86 = off_100861B80;
          long long v87 = xmmword_1004C1E40;
          uint64_t v89 = &v90;
          sub_1003411F0(&v86, 3, 3);
          sub_100341240((uint64_t)&v86, 0.0);
          sub_1003FF53C((uint64_t)&v91, (uint64_t)&v86, v6, v8, v82, v81, v9, v10, v11);
          uint64_t v109 = 0x100000001;
          *(void *)&long long v51 = 0x100000001;
          *((void *)&v51 + 1) = 0x100000001;
          long long v108 = v51;
          *(void *)uint64_t v107 = off_100862AD0;
          uint64_t v110 = v111;
          v111[0] = 0;
          sub_100405088((uint64_t)v112, a1 + 456, (uint64_t)&qword_1008ABC18, (uint64_t)v107);
          sub_1003FB898((uint64_t)v112, (uint64_t)&v91);
          double v52 = *(double *)sub_1003416AC(a1 + 456, 0);
          double v53 = *(double *)sub_1003416AC(a1 + 456, 1u);
          uint64_t v54 = (double *)sub_1003416AC(a1 + 456, 2u);
          sub_10040400C(a1, v52, v53, *v54);
          sub_1004054BC((uint64_t)v112, (uint64_t)&buf, (uint64_t)&qword_1008ABC18, (uint64_t)&qword_1008ABC18);
          sub_1003FB6DC((uint64_t)v112, (uint64_t)&v86);
          sub_1004054BC((uint64_t)v112, (uint64_t)&buf, (uint64_t)&qword_1008ABC50, (uint64_t)&qword_1008ABC50);
          sub_1003FB6DC((uint64_t)v112, (uint64_t)&qword_1008ABCF8);
          uint64_t v55 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v75 = *(void *)sub_1003416AC(a1 + 456, 0);
            uint64_t v76 = *(void *)sub_1003416AC(a1 + 456, 1u);
            uint64_t v77 = *(void *)sub_1003416AC(a1 + 456, 2u);
            v112[0] = 134218752;
            *(void *)&v112[1] = v75;
            __int16 v113 = 2048;
            uint64_t v114 = v76;
            __int16 v115 = 2048;
            uint64_t v116 = v77;
            v117[0] = 2048;
            *(double *)&v117[1] = v96[0];
            _os_log_debug_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Initializing filter w/ state: [%f,%f,%f] at t = %f s", (uint8_t *)v112, 0x2Au);
            uint64_t v55 = qword_1008ABDE0;
          }
          if (1.57079633 - fabs(v82) <= 0.01 && os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(v112[0]) = 0;
            _os_log_debug_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Az angle close to singularity - initializing filter covariance without measurement Jacobian", (uint8_t *)v112, 2u);
            uint64_t v55 = qword_1008ABDE0;
          }
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            sub_1003FDFF8(&buf, &v85);
            sub_1004398F8();
          }
          uint64_t v109 = 0x600000006;
          long long v108 = xmmword_1007749C0;
          *(void *)uint64_t v107 = off_100864C90;
          uint64_t v110 = v111;
          uint64_t v104 = 0x100000006;
          long long v103 = xmmword_1007749D0;
          unsigned int v102 = off_100864D20;
          uint64_t v105 = &v106;
          uint64_t v99 = 0x100000018;
          long long v98 = xmmword_1007749E0;
          uint64_t v97 = off_100864D68;
          uint64_t v100 = &v101;
          sub_1003517F4((uint64_t)&buf, (uint64_t)&v102, (uint64_t)&v97, (uint64_t)v107);
        }
      }
      BOOL v13 = sub_10040A9C8((uint64_t)a3);
      BOOL v14 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
      if (v13)
      {
        if (v14) {
          sub_100439830();
        }
      }
      else if (v14)
      {
        sub_100439864();
      }
    }
    goto LABEL_73;
  }
  if (sub_10040A9C8(v3))
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100439954();
    }
    return;
  }
  double v15 = *(double *)(a1 + 448);
  uint64_t v16 = qword_1008ABDE0;
  BOOL v17 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
  if (v96[0] >= v15)
  {
    uint64_t v27 = a3;
    if (v17)
    {
      std::string::size_type v72 = *(void *)(a2 + 48);
      uint64_t v74 = *(void *)(a2 + 64);
      uint64_t v73 = *(void *)(a2 + 72);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v96[0];
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v72;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      uint64_t v119 = v73;
      *(_WORD *)uint64_t v120 = 2048;
      *(void *)&v120[2] = v74;
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Measurement update with a non-delayed measurement at t = %f s , range = %f m, Az = %f rad, El = %f rad", (uint8_t *)&buf, 0x2Au);
      uint64_t v16 = qword_1008ABDE0;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      sub_100439D14();
      uint64_t v27 = a3;
    }
    unint64_t v28 = v27[5] + v27[4] - 1;
    sub_1003EFC04((uint64_t)&buf, *(void *)(v27[1] + 8 * (v28 / 0x19)) + 160 * (v28 % 0x19));
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100439CE0();
    }
    sub_1003F748C(a1);
  }
  if (v17)
  {
    std::string::size_type v69 = *(void *)(a2 + 48);
    uint64_t v71 = *(void *)(a2 + 64);
    uint64_t v70 = *(void *)(a2 + 72);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
    *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v96[0];
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v69;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    uint64_t v119 = v70;
    *(_WORD *)uint64_t v120 = 2048;
    *(void *)&v120[2] = v71;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Measurement update with a delayed measurement at t = %f s, range = %f m, Az = %f rad, El = %f rad", (uint8_t *)&buf, 0x2Au);
  }
  unint64_t v18 = a3[10];
  uint64_t v19 = a3[7];
  uint64_t v20 = (char *)(v19 + 8 * (v18 >> 9));
  if (a3[8] == v19)
  {
    uint64_t v21 = 0;
    uint64_t v25 = 0;
    long long v22 = a3 + 11;
    long long v24 = (char *)(v19 + 8 * ((a3[11] + v18) >> 9));
  }
  else
  {
    uint64_t v21 = (double *)(*(void *)v20 + 8 * (a3[10] & 0x1FFLL));
    long long v22 = a3 + 11;
    unint64_t v23 = a3[11] + v18;
    long long v24 = (char *)(v19 + 8 * (v23 >> 9));
    uint64_t v25 = (double *)(*(void *)v24 + 8 * (v23 & 0x1FF));
  }
  double v29 = sub_100405A00(v20, v21, v24, v25, (double *)(a1 + 872));
  uint64_t v31 = v30;
  unint64_t v32 = a3[10];
  uint64_t v33 = a3[7];
  double v34 = (char *)(v33 + 8 * (v32 >> 9));
  if (a3[8] == v33)
  {
    double v35 = 0;
    double v38 = 0;
    double v37 = (char *)(v33 + 8 * ((*v22 + v32) >> 9));
  }
  else
  {
    double v35 = (double *)(*(void *)v34 + 8 * (a3[10] & 0x1FFLL));
    unint64_t v36 = *v22 + v32;
    double v37 = (char *)(v33 + 8 * (v36 >> 9));
    double v38 = (double *)(*(void *)v37 + 8 * (v36 & 0x1FF));
  }
  double v40 = sub_100405A00(v34, v35, v37, v38, v96);
  uint64_t v41 = v39;
  uint64_t v42 = a3[7];
  if (a3[8] != v42)
  {
    if (*(void *)(v42 + ((a3[10] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a3[10] & 0x1FFLL) == v31) {
      goto LABEL_44;
    }
    uint64_t v43 = *(void *)(v42 + (((*v22 + a3[10]) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((*v22 + a3[10]) & 0x1FFLL);
    if (v43 == v31) {
      goto LABEL_44;
    }
LABEL_39:
    if (v43 != v39)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100439B24();
      }
      uint64_t v44 = a1 + 456;
      sub_10034226C(a1 + 456, a1 + 880);
      sub_10034226C(a1 + 544, a1 + 968);
      *(void *)(a1 + 448) = *(void *)(a1 + 872);
      sub_100403F98(a1);
      unint64_t v45 = a3[10];
      uint64_t v47 = a3[7];
      uint64_t v46 = a3[8];
      double v48 = (char *)(v47 + 8 * (v45 >> 9));
      if (v46 == v47) {
        uint64_t v49 = 0;
      }
      else {
        uint64_t v49 = *(void *)v48 + 8 * (a3[10] & 0x1FFLL);
      }
      if (v31 == v49) {
        uint64_t v56 = 0;
      }
      else {
        uint64_t v56 = ((v31 - *(void *)v29) >> 3) + ((v29 - v48) << 6) - ((v49 - *(void *)v48) >> 3);
      }
      if (v46 == v47) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = *(void *)v48 + 8 * (a3[10] & 0x1FFLL);
      }
      if (v41 == v57) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = ((v41 - *(void *)v40) >> 3) + ((v40 - v48) << 6) - ((v57 - *(void *)v48) >> 3);
      }
      uint64_t v59 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
      {
        std::string::size_type v78 = *(void *)(*(void *)(v47 + (((v56 - 1 + v45) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v56 - 1 + v45) & 0x1FF));
        uint64_t v79 = *(void *)(*(void *)(v47 + (((v58 - 1 + v45) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v58 - 1 + v45) & 0x1FF));
        LODWORD(buf.__r_.__value_.__l.__data_) = 134218496;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v78;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v56 - 1;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
        uint64_t v119 = v79;
        _os_log_debug_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "#sf,RoseEKF: Will propagate using IMU data from t = %f s (index %ld) to t = %f s", (uint8_t *)&buf, 0x20u);
      }
      uint64_t v80 = v58 - 1;
      if (v56 >= 1)
      {
        if (v56 < v58)
        {
          do
          {
            unint64_t v60 = v56 + a3[4];
            uint64_t v61 = ((v60 - 1) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
            unint64_t v62 = (v61 + ((v60 - 1 - v61) >> 1)) >> 4;
            sub_1003F7E5C(a1, *(void *)(a3[1] + 8 * v62) + 160 * (v60 - 1 - 25 * v62), (double *)(*(void *)(a3[1] + 8 * (v60 / 0x19)) + 160 * (v60 % 0x19)));
            double v63 = *(double *)sub_1003416AC(v44, 0);
            double v64 = *(double *)sub_1003416AC(v44, 1u);
            double v65 = *(double *)sub_1003416AC(v44, 2u);
            sub_10040441C(a1 + 8, v63);
            sub_10040441C(a1 + 152, v64);
            sub_10040441C(a1 + 296, v65);
            ++v56;
          }
          while (v58 != v56);
        }
        uint64_t v66 = a3[4];
        uint64_t v67 = ((unint64_t)(v66 + v80) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
        unint64_t v68 = (v67 + ((unint64_t)(v66 + v80 - v67) >> 1)) >> 4;
        sub_1003F996C(a1, *(void *)(a3[1] + 8 * v68) + 160 * (v66 + v80 - 25 * v68), *(void *)(a3[1] + 8 * ((v66 + v58) / 0x19uLL)) + 160 * ((v66 + v58) % 0x19uLL), v96[0]);
        sub_1003F748C(a1);
      }
      sub_1004399F0();
    }
    goto LABEL_44;
  }
  if (v31)
  {
    uint64_t v43 = 0;
    goto LABEL_39;
  }
LABEL_44:
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100439988();
  }
  *(_DWORD *)(a1 + 440) = 7;
LABEL_73:
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004397FC();
  }
}

void sub_100403E68(_Unwind_Exception *a1)
{
}

double sub_100403EC4(uint64_t a1)
{
  unsigned int v2 = 0;
  *(void *)(a1 + 872) = *(void *)(a1 + 448);
  uint64_t v3 = a1 + 456;
  uint64_t v4 = a1 + 880;
  uint64_t v5 = a1 + 544;
  uint64_t v6 = a1 + 968;
  do
  {
    uint64_t v7 = *(void *)sub_1003416AC(v3, v2);
    int v8 = 0;
    *(void *)sub_1003416AC(v4, v2) = v7;
    do
    {
      uint64_t v9 = *(void *)sub_10034185C(v5, v2, v8);
      *(void *)sub_10034185C(v6, v2, v8++) = v9;
    }
    while (v8 != 6);
    ++v2;
  }
  while (v2 != 6);

  return sub_1004043A4(a1);
}

double sub_100403F98(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = a1 + 80;
  do
  {
    uint64_t v3 = v2 + v1;
    *(void *)(v3 - 72) = *(void *)(v2 + v1 - 24);
    *(void *)(v3 - 48) = *(void *)(v2 + v1);
    v1 += 8;
  }
  while (v1 != 24);
  uint64_t v4 = a1 + 224;
  uint64_t v5 = -24;
  do
  {
    uint64_t v6 = v4 + v5;
    *(void *)(v6 - 48) = *(void *)(v4 + v5);
    *(void *)(v6 - 24) = *(void *)(v4 + v5 + 24);
    v5 += 8;
  }
  while (v5);
  uint64_t v7 = a1 + 368;
  uint64_t v8 = -24;
  do
  {
    uint64_t v9 = v7 + v8;
    *(void *)(v9 - 48) = *(void *)(v7 + v8);
    double result = *(double *)(v7 + v8 + 24);
    *(double *)(v9 - 24) = result;
    v8 += 8;
  }
  while (v8);
  return result;
}

void sub_10040400C(uint64_t a1, double a2, double a3, double a4)
{
  if (*(_DWORD *)(a1 + 4))
  {
    unsigned int v8 = 0;
    uint64_t v9 = a1 + 8;
    uint64_t v10 = a1 + 152;
    uint64_t v11 = a1 + 296;
    do
    {
      sub_10040441C(v9, a2);
      sub_10040441C(v10, a3);
      sub_10040441C(v11, a4);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 4));
  }
}

void sub_1004040A4(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 444))
  {
    if (sub_10040A9C8((uint64_t)a2))
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100439D7C();
      }
    }
    else
    {
      unint64_t v4 = a2[10];
      uint64_t v5 = a2[7];
      uint64_t v6 = (char *)(v5 + 8 * (v4 >> 9));
      if (a2[8] == v5)
      {
        uint64_t v7 = 0;
        uint64_t v10 = 0;
        uint64_t v9 = (char *)(v5 + 8 * ((a2[11] + v4) >> 9));
      }
      else
      {
        uint64_t v7 = (double *)(*(void *)v6 + 8 * (a2[10] & 0x1FFLL));
        unint64_t v8 = a2[11] + v4;
        uint64_t v9 = (char *)(v5 + 8 * (v8 >> 9));
        uint64_t v10 = (double *)(*(void *)v9 + 8 * (v8 & 0x1FF));
      }
      uint64_t v11 = sub_100405A00(v6, v7, v9, v10, (double *)(a1 + 448));
      unint64_t v13 = a2[10];
      uint64_t v14 = a2[7];
      double v15 = (char *)(v14 + 8 * (v13 >> 9));
      if (a2[8] == v14) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = *(void *)v15 + 8 * (a2[10] & 0x1FFLL);
      }
      if (v12 == v16
        || (uint64_t v17 = ((v12 - *(void *)v11) >> 3) + ((v11 - v15) << 6),
            uint64_t v18 = v16 - *(void *)v15,
            unint64_t v19 = v17 - (v18 >> 3),
            v17 == v18 >> 3))
      {
        __double2 v26 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = *(void *)(a1 + 448);
          uint64_t v28 = *(void *)(*(void *)v15 + 8 * (v13 & 0x1FF));
          *(_DWORD *)std::string buf = 134218240;
          uint64_t v30 = v27;
          __int16 v31 = 2048;
          uint64_t v32 = v28;
          _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#sf,RoseEKF error: Could not complete dynamic propagation because the filter tries to advance to a new IMUData without a preceding one to interpolate from, Filter time = %f s, new IMU time = %f s", buf, 0x16u);
        }
      }
      else
      {
        if (v19 >= sub_10040AC08((uint64_t)a2)) {
          return;
        }
        while (1)
        {
          unint64_t v20 = v19 + a2[4];
          uint64_t v21 = ((v20 - 1) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
          unint64_t v22 = (v21 + ((v20 - 1 - v21) >> 1)) >> 4;
          if (!sub_1003F7E5C(a1, *(void *)(a2[1] + 8 * v22) + 160 * (v20 - 1 - 25 * v22), (double *)(*(void *)(a2[1] + 8 * (v20 / 0x19)) + 160 * (v20 % 0x19))))break; {
          double v23 = *(double *)sub_1003416AC(a1 + 456, 0);
          }
          double v24 = *(double *)sub_1003416AC(a1 + 456, 1u);
          double v25 = *(double *)sub_1003416AC(a1 + 456, 2u);
          sub_10040441C(a1 + 8, v23);
          sub_10040441C(a1 + 152, v24);
          sub_10040441C(a1 + 296, v25);
          if (++v19 >= sub_10040AC08((uint64_t)a2)) {
            return;
          }
        }
      }
      *(_DWORD *)(a1 + 440) = 9;
    }
  }
}

double sub_1004043A4(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  uint64_t v2 = -24;
  do
  {
    uint64_t v3 = v1 + v2;
    *(void *)(v3 + 24) = *(void *)(v1 + v2 - 24);
    *(void *)(v3 + 48) = *(void *)(v1 + v2);
    v2 += 8;
  }
  while (v2);
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 152;
  do
  {
    uint64_t v6 = v5 + v4;
    *(void *)(v6 + 48) = *(void *)(v5 + v4);
    *(void *)(v6 + 72) = *(void *)(v5 + v4 + 24);
    v4 += 8;
  }
  while (v4 != 24);
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 296;
  do
  {
    uint64_t v9 = v8 + v7;
    *(void *)(v9 + 48) = *(void *)(v8 + v7);
    double result = *(double *)(v8 + v7 + 24);
    *(double *)(v9 + 72) = result;
    v7 += 8;
  }
  while (v7 != 24);
  return result;
}

double sub_10040441C(uint64_t a1, double a2)
{
  uint64_t v2 = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 24);
  *(double *)a1 = a2;
  double v3 = 0.0;
  do
  {
    if (v2) {
      double v3 = v3
    }
         + *(double *)(a1 + 96 + v2 + 24) * *(double *)(a1 + v2)
         - *(double *)(a1 + 96 + v2) * *(double *)(a1 + 96 + v2 - 72);
    else {
      double v3 = v3 + *(double *)(a1 + 120) * a2;
    }
    v2 += 8;
  }
  while (v2 != 24);
  *(double *)(a1 + 24) = v3;
  return v3;
}

void sub_100404484(void *a1)
{
  *a1 = off_100862050;
  operator delete();
}

uint64_t sub_1004044B4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004044C0(uint64_t a1)
{
  sub_100351B60(a1, v1);
}

uint64_t sub_1004044E4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_100439DB0();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_100439DDC();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_100439E08();
  }
  return v2 + 4 * a2;
}

uint64_t sub_100404520(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000003;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_100861B38;
  if ((a3 & 0x80000000) != 0)
  {
    double v3 = "nc >= 0";
    int v4 = 487;
    uint64_t v5 = "cnmatrix.h";
    uint64_t v6 = "CNMatrix";
    goto LABEL_9;
  }
  if (a2 > 3)
  {
    double v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
LABEL_8:
    uint64_t v5 = "cnmatrixbase.h";
    uint64_t v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 2)
  {
    double v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004045F0(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_100404610(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_100429554();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_100429580();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_1004295AC();
  }
  return *(unsigned int *)(v2 + 4 * a2);
}

void sub_10040464C(void *a1)
{
  *a1 = off_100862050;
  operator delete();
}

uint64_t sub_10040467C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100404688(uint64_t a1)
{
  sub_100351B60(a1, v1);
}

void sub_1004046D8(void *a1)
{
  *a1 = off_100862050;
  operator delete();
}

uint64_t sub_100404708(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100404714(uint64_t a1)
{
  sub_100351B60(a1, v1);
}

void sub_100404738(void *a1)
{
  *a1 = off_100862050;
  operator delete();
}

uint64_t sub_100404768(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100404774(uint64_t a1)
{
  sub_100351B60(a1, v1);
}

uint64_t sub_100404798(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x100000006;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100864CD8;
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 6)
  {
    uint64_t v9 = "this->max_num_rows_ >= num_rows";
    int v10 = 422;
LABEL_11:
    uint64_t v11 = "cnmatrixbase.h";
    uint64_t v12 = "SetMatrixSize";
    goto LABEL_15;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v5 >= 2)
  {
    uint64_t v9 = "this->max_num_cols_ >= num_cols";
    int v10 = 423;
    goto LABEL_11;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v5;
  int v6 = v5 * v3;
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = v3;
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    uint64_t v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
LABEL_14:
    uint64_t v11 = "cnmatrix.h";
    uint64_t v12 = "CNMatrix";
LABEL_15:
    __assert_rtn(v12, v11, v10, v9);
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    uint64_t v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
    goto LABEL_14;
  }
  if (v6)
  {
    uint64_t v7 = 0;
    do
    {
      *(double *)(*(void *)(a1 + 32) + 8 * v7) = sub_1004048F0(a2, v7);
      ++v7;
    }
    while (v7 < *(int *)(a1 + 16));
  }
  return a1;
}

void sub_1004048CC(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

double sub_1004048F0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_100439E34();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_100439E60();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_100439E8C();
  }
  return *(double *)(v2 + 8 * a2);
}

void sub_100404930(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000245;
  *(void *)a1 = off_100864ED0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_100774C80;
  sub_100404A48();
}

void sub_100404998(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    operator delete[]();
  }
  void *v1 = off_100853598;
  _Unwind_Resume(exception_object);
}

void sub_1004049E0(void *a1)
{
  sub_100404B50(a1);

  operator delete();
}

void sub_100404A18()
{
}

void sub_100404A48()
{
}

void sub_100404AB8()
{
}

void sub_100404B2C()
{
}

void *sub_100404B50(void *a1)
{
  *a1 = off_100864ED0;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    operator delete[]();
  }
  *a1 = off_100853598;
  return a1;
}

void sub_100404BCC(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100404BFC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100404C08(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_100404C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 == *(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a2 + 28) * *(_DWORD *)(a2 + 24) >= v5)
    {
      if (*(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24) >= v5)
      {
        if (*(_DWORD *)(a4 + 28) * *(_DWORD *)(a4 + 24) >= 4 * v5)
        {
          if (*(_DWORD *)(a5 + 24) >= v5)
          {
            if (*(_DWORD *)(a5 + 28) >= v5)
            {
              sub_10034226C(a5, a1);
              uint64_t v8 = *(unsigned int *)(a5 + 8);
              __CLPK_integer v9 = *(_DWORD *)(a5 + 12);
              int v10 = *(__CLPK_doublereal **)(a5 + 32);
              __CLPK_integer v11 = *(_DWORD *)(a5 + 20);
              uint64_t v12 = *(void **)(a2 + 32);
              __m[0] = v8;
              __n[0] = v9;
              __CLPK_integer __lda = v11;
              if ((int)v8 >= 1)
              {
                size_t v13 = 4 * v8;
                uint64_t v14 = (__CLPK_integer *)operator new[](4 * v8, &std::nothrow);
                if (v14)
                {
                  double v15 = v14;
                  __CLPK_integer __info = 0;
                  dgetrf_(__m, __n, v10, &__lda, v14, &__info);
                  memcpy(v12, v15, v13);
                  operator delete[]();
                }
                sub_100439FC0();
              }
              sub_100439FC0();
            }
            sub_100439F94();
          }
          sub_100439F68();
        }
        sub_100439F3C();
      }
      sub_100439F10();
    }
    sub_100439EE4();
  }
  sub_10043A06C();
}

uint64_t sub_100405088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(_OWORD *)(a1 + 8) = xmmword_1004C1B50;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_100864F60;
  *(void *)(a1 + 96) = 0x300000001;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = off_100864DB0;
  *(_OWORD *)(a1 + 80) = xmmword_1004C2710;
  *(void *)(a1 + 104) = a1 + 112;
  uint64_t v7 = a1 + 128;
  *(void *)(a1 + 152) = 0x100000001;
  *(void *)(a1 + 128) = off_100862AD0;
  *(void *)&long long v8 = 0x100000001;
  *((void *)&v8 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 136) = v8;
  *(void *)(a1 + 160) = a1 + 168;
  sub_100405324(a1 + 72, a3);
  sub_100405324(v7, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 24) < v9)
  {
    double v15 = "this->max_num_rows_ >= num_rows";
    int v16 = 422;
    goto LABEL_12;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 28) < v10)
  {
    double v15 = "this->max_num_cols_ >= num_cols";
    int v16 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v16, v15);
  }
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (v10)
  {
    int v11 = 0;
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (v9)
      {
        for (uint64_t j = 0; j != v9; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v11 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 104) + 4 * j), *(_DWORD *)(*(void *)(a1 + 160) + 4 * i));
      }
      v11 += v9;
    }
  }
  return a1;
}

void sub_100405258(_Unwind_Exception *a1)
{
  v1[16] = off_100862050;
  v1[9] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1004052B4(void *a1)
{
  a1[16] = off_100862050;
  a1[9] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100405324(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    unsigned int v2 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(result + 24) < v2) {
      sub_1004324FC();
    }
    unsigned int v3 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(result + 28) < v3) {
      sub_100432528();
    }
    *(_DWORD *)(result + 8) = v2;
    *(_DWORD *)(result + 12) = v3;
    int v4 = v3 * v2;
    *(_DWORD *)(result + 16) = v4;
    *(_DWORD *)(result + 20) = v2;
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      uint64_t v9 = (v5 - 1);
      uint64_t v10 = *(_DWORD **)(result + 32);
      int v11 = *(int **)(a2 + 32);
      uint64_t v12 = v9;
      size_t v13 = v10;
      uint64_t v14 = v11;
      do
      {
        int v15 = *v14++;
        *v13++ = v15;
        --v12;
      }
      while (v12);
      v10[v9] = v11[v9];
    }
    else if (v4 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(a2 + 32);
      uint64_t v8 = *(void *)(result + 32);
      do
      {
        *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v7 + 4 * v6);
        ++v6;
      }
      while (v6 < *(int *)(result + 16));
    }
  }
  return result;
}

float64x2_t sub_1004053E0(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 == a2) {
    sub_10043A098();
  }
  sub_1003411F0((_DWORD *)a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = *(double **)(a1 + 32);
    uint64_t v8 = *(double **)(a2 + 32);
    uint64_t v9 = *(unsigned int *)(a2 + 16);
    do
    {
      double v10 = *v7++;
      *v8++ = v10 * a3;
      --v9;
    }
    while (v9);
    if ((int)v6 > 3)
    {
      uint64_t v14 = *(float64x2_t **)(a1 + 32);
      int v15 = *(float64x2_t **)(a2 + 32);
      int v16 = (float64x2_t *)((char *)v14 + 8 * (v6 - 2));
      uint64_t v17 = (float64x2_t *)((char *)v15 + 8 * (v6 - 2));
      uint64_t v18 = (v6 - 1) >> 1;
      do
      {
        float64x2_t v19 = *v14++;
        *v15++ = vmulq_n_f64(v19, a3);
        --v18;
      }
      while (v18);
      float64x2_t result = vmulq_n_f64(*v16, a3);
      *uint64_t v17 = result;
    }
    else
    {
      int v11 = *(double **)(a1 + 32);
      uint64_t v12 = *(double **)(a2 + 32);
      do
      {
        double v13 = *v11++;
        result.f64[0] = v13 * a3;
        *v12++ = v13 * a3;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_1004054BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x300000003;
  *(_OWORD *)(a1 + 8) = xmmword_1004C1E40;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_100864FA8;
  *(void *)(a1 + 144) = 0x300000001;
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = off_100864DB0;
  *(_OWORD *)(a1 + 128) = xmmword_1004C2710;
  *(void *)(a1 + 152) = a1 + 160;
  uint64_t v7 = a1 + 176;
  *(void *)(a1 + 200) = 0x300000001;
  *(void *)(a1 + 176) = off_100864DB0;
  *(_OWORD *)(a1 + 184) = xmmword_1004C2710;
  *(void *)(a1 + 208) = a1 + 216;
  sub_100405324(a1 + 120, a3);
  sub_100405324(v7, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 136);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    uint64_t v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 192);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    uint64_t v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    int v10 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v10 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 152) + 4 * j), *(_DWORD *)(*(void *)(a1 + 208) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_100405680(_Unwind_Exception *a1)
{
  v1[22] = off_100862050;
  v1[15] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1004056DC(void *a1)
{
  a1[22] = off_100862050;
  a1[15] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

float64x2_t sub_10040574C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    sub_10043A0C4();
  }
  unsigned int v4 = *(_DWORD *)(a2 + 24);
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v4 < v5) {
    sub_10043A0F0();
  }
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a2 + 28) < v6) {
    sub_10043A11C();
  }
  sub_1003411F0((_DWORD *)a2, v5, v6);
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  if ((int)v8 > 3)
  {
    uint64_t v12 = *(float64x2_t **)(a1 + 32);
    double v13 = *(float64x2_t **)(a2 + 32);
    uint64_t v14 = (float64x2_t *)((char *)v12 + 8 * (v8 - 2));
    int v15 = (float64x2_t *)((char *)v13 + 8 * (v8 - 2));
    uint64_t v16 = (v8 - 1) >> 1;
    do
    {
      float64x2_t v17 = *v12++;
      *v13++ = vnegq_f64(v17);
      --v16;
    }
    while (v16);
    float64x2_t result = vnegq_f64(*v14);
    *int v15 = result;
  }
  else if ((int)v8 >= 1)
  {
    uint64_t v9 = *(double **)(a1 + 32);
    int v10 = *(double **)(a2 + 32);
    do
    {
      double v11 = *v9++;
      result.f64[0] = -v11;
      *v10++ = -v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_10040581C(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_10040584C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100405858(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_1004058A8(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x300000006;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)float64x2_t result = off_100865038;
  if (a2 > 6)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 4)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100405954(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100405974(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1004059A4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004059B0(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

char *sub_100405A00(char *result, double *a2, char *a3, double *a4, double *a5)
{
  uint64_t v14 = result;
  int v15 = a2;
  if (a4 != a2)
  {
    uint64_t v5 = (((uint64_t)a4 - *(void *)a3) >> 3) + ((a3 - result) << 6);
    uint64_t v6 = (uint64_t)a2 - *(void *)result;
    unint64_t v7 = v5 - (v6 >> 3);
    if (v5 != v6 >> 3)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        int v10 = (char *)sub_1003EF49C((uint64_t)&v14, v7 >> 1);
        if (*a5 >= *v11)
        {
          uint64_t v12 = v11 + 1;
          if ((double *)((char *)v11 - *(void *)v10 + 8) == (double *)4096)
          {
            double v13 = (double *)*((void *)v10 + 1);
            v10 += 8;
            uint64_t v12 = v13;
          }
          uint64_t v14 = v10;
          int v15 = v12;
          unint64_t v9 = v7 + ~v9;
        }
        unint64_t v7 = v9;
      }
      while (v9);
      return v14;
    }
  }
  return result;
}

void sub_100405AB0(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100405AE0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100405AEC(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100405B3C(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x60000000CLL;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)float64x2_t result = off_1008650C8;
  if (a2 > 0xC)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 7)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100405BE8(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100405C08(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100405C38(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100405C44(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100405C94(uint64_t a1, uint64_t a2, BOOL *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 != *(_DWORD *)(a1 + 12)) {
    sub_10043A1A0();
  }
  if (*(_DWORD *)(a2 + 24) < v3) {
    sub_10043A148();
  }
  if (*(_DWORD *)(a2 + 28) < v3) {
    sub_10043A174();
  }
  sub_10034226C(a2, a1);
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  unint64_t v7 = *(__CLPK_doublereal **)(a2 + 32);
  __CLPK_integer v8 = *(_DWORD *)(a2 + 20);
  char __uplo = 85;
  __CLPK_integer __lda = v8;
  __CLPK_integer __n = v6;
  __CLPK_integer __info = 0;
  uint64_t result = dpotrf_(&__uplo, &__n, v7, &__lda, &__info);
  __CLPK_integer v10 = __info;
  *a3 = __info == 0;
  if (v10)
  {
    LOWORD(__n) = 4;
    if (v10 < 1) {
      LOBYTE(__lda) = 5;
    }
    else {
      LOBYTE(__lda) = 4;
    }
    return cnprint::CNPrinter::Print();
  }
  else if (v6)
  {
    unsigned int v11 = 0;
    uint64_t v12 = *(void *)(a2 + 32);
    unsigned int v13 = v6 - 1;
    int v14 = 1;
    do
    {
      ++v11;
      int v15 = v14;
      unsigned int v16 = v13;
      if (v11 < v6)
      {
        do
        {
          *(void *)(v12 + 8 * v15++) = 0;
          --v16;
        }
        while (v16);
      }
      --v13;
      v14 += v6 + 1;
    }
    while (v11 != v6);
  }
  return result;
}

void sub_100405DE4(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100405E14(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100405E20(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100405E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 8) = xmmword_100774B90;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_100865158;
  *(void *)(a1 + 1192) = a2;
  *(void *)(a1 + 1224) = 0xC00000001;
  *(void *)(a1 + 1200) = off_100864DF8;
  *(_OWORD *)(a1 + 1208) = xmmword_100774C90;
  *(void *)(a1 + 1232) = a1 + 1240;
  uint64_t v7 = a1 + 1288;
  *(void *)(a1 + 1312) = 0xC00000001;
  *(void *)(a1 + 1288) = off_100864DF8;
  *(_OWORD *)(a1 + 1296) = xmmword_100774C90;
  *(void *)(a1 + 1320) = a1 + 1328;
  sub_100405324(a1 + 1200, a3);
  sub_100405324(v7, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 1216);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    int v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 1304);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    int v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    int v10 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v10 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 1232) + 4 * j), *(_DWORD *)(*(void *)(a1 + 1320) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_100406040(_Unwind_Exception *a1)
{
  v1[161] = off_100862050;
  v1[150] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_10040609C(void *a1)
{
  a1[161] = off_100862050;
  a1[150] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_10040610C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0xC00000006;
  *(_OWORD *)(a1 + 8) = xmmword_100774B80;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_1008651A0;
  *(void *)(a1 + 616) = a2;
  *(void *)(a1 + 648) = 0x600000001;
  *(void *)(a1 + 624) = off_100864E40;
  *(_OWORD *)(a1 + 632) = xmmword_100774BD0;
  *(void *)(a1 + 656) = a1 + 664;
  uint64_t v7 = a1 + 688;
  *(void *)(a1 + 712) = 0xC00000001;
  *(void *)(a1 + 688) = off_100864DF8;
  *(_OWORD *)(a1 + 696) = xmmword_100774C90;
  *(void *)(a1 + 720) = a1 + 728;
  sub_100405324(a1 + 624, a3);
  sub_100405324(v7, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 640);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    int v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 704);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    int v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    int v10 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v10 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 656) + 4 * j), *(_DWORD *)(*(void *)(a1 + 720) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_1004062EC(_Unwind_Exception *a1)
{
  v1[86] = off_100862050;
  v1[78] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100406348(void *a1)
{
  a1[86] = off_100862050;
  a1[78] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1004063B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000006;
  *(_OWORD *)(a1 + 8) = xmmword_1007749C0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_1008651E8;
  *(void *)(a1 + 360) = 0x600000001;
  *(void *)(a1 + 328) = a2;
  *(void *)(a1 + 336) = off_100864E40;
  *(_OWORD *)(a1 + 344) = xmmword_100774BD0;
  *(void *)(a1 + 368) = a1 + 376;
  uint64_t v7 = a1 + 400;
  *(void *)(a1 + 424) = 0x600000001;
  *(void *)(a1 + 400) = off_100864E40;
  *(_OWORD *)(a1 + 408) = xmmword_100774BD0;
  *(void *)(a1 + 432) = a1 + 440;
  sub_100405324(a1 + 336, a3);
  sub_100405324(v7, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 352);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    int v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 416);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    int v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    int v10 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v10 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 368) + 4 * j), *(_DWORD *)(*(void *)(a1 + 432) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_100406580(_Unwind_Exception *a1)
{
  v1[50] = off_100862050;
  v1[42] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1004065DC(void *a1)
{
  a1[50] = off_100862050;
  a1[42] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

_DWORD *sub_10040664C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a2) {
    sub_10043A1CC();
  }
  if (a1 == a3) {
    sub_10043A1F8();
  }
  if (a1 == a4) {
    sub_10043A224();
  }
  if (a2 == a3) {
    sub_10043A250();
  }
  if (a2 == a4) {
    sub_10043A27C();
  }
  if (a3 == a4) {
    sub_10043A2A8();
  }
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 24) < v8) {
    sub_10043A2D4();
  }
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a4 + 28) < v9) {
    sub_10043A300();
  }
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  if (v8 >= v9)
  {
    if (v10 < v9) {
      sub_10043A3DC();
    }
  }
  else if (v10 < v8)
  {
    sub_10043A32C();
  }
  if (*(_DWORD *)(a3 + 24) < v9) {
    sub_10043A358();
  }
  if (*(_DWORD *)(a3 + 28) < v9) {
    sub_10043A384();
  }
  sub_10034226C(a4, a1);
  __CLPK_integer v11 = *(_DWORD *)(a4 + 8);
  uint64_t v12 = *(__CLPK_doublereal **)(a4 + 32);
  __CLPK_integer v13 = *(_DWORD *)(a4 + 20);
  int v14 = *(__CLPK_doublereal **)(a2 + 32);
  int v15 = *(__CLPK_doublereal **)(a3 + 32);
  __CLPK_integer v16 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  __CLPK_integer __n = *(_DWORD *)(a4 + 12);
  __CLPK_integer __m = v11;
  __CLPK_integer __lwork = v16;
  __CLPK_integer __lda = v13;
  __CLPK_integer __info = 0;
  uint64_t v17 = dgeqrf_(&__m, &__n, v12, &__lda, v14, v15, &__lwork, &__info);
  __CLPK_integer v18 = __info;
  if (__info)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    uint64_t v17 = cnprint::CNPrinter::Print();
  }
  if (v16 < (int)**(double **)(a3 + 32)
    && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v17) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print();
  }
  if (v18) {
    sub_10043A3B0();
  }
  if (*(_DWORD *)(a1 + 8) >= *(_DWORD *)(a1 + 12)) {
    int v19 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v19 = *(_DWORD *)(a1 + 8);
  }
  sub_1003411F0((_DWORD *)a2, v19, 1);
  uint64_t result = sub_1003411F0((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  int v21 = *(_DWORD *)(a4 + 12);
  if (v21)
  {
    unsigned int v22 = 0;
    unsigned int v23 = *(_DWORD *)(a4 + 8);
    uint64_t v24 = *(void *)(a4 + 32);
    unsigned int v25 = v23 - 1;
    int v26 = *(_DWORD *)(a4 + 20) + 1;
    int v27 = 1;
    do
    {
      ++v22;
      int v28 = v27;
      unsigned int v29 = v25;
      if (v22 < v23)
      {
        do
        {
          *(void *)(v24 + 8 * v28++) = 0;
          --v29;
        }
        while (v29);
      }
      --v25;
      v27 += v26;
    }
    while (v22 != v21);
  }
  return result;
}

void *sub_100406898(void *result)
{
  _DWORD *result = off_100853598;
  return result;
}

void sub_1004068B8(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1004068E8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004068F4(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100406944(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000001;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_1008620C8;
  if (a2 > 1)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 2)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004069EC(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100406A0C(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100406A3C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100406A48(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_100406A6C(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100406A9C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100406AA8(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100406AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x200000001;
  *(_OWORD *)(a1 + 8) = xmmword_100774CA0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_100865308;
  *(void *)(a1 + 88) = 0x200000001;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = off_100864E88;
  *(_OWORD *)(a1 + 72) = xmmword_100774CA0;
  *(void *)(a1 + 96) = a1 + 104;
  sub_100405324(a1 + 64, a3);
  unsigned int v5 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a1 + 24) < v5)
  {
    unsigned int v10 = "this->max_num_rows_ >= num_rows";
    int v11 = 422;
    goto LABEL_9;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 76);
  if (*(_DWORD *)(a1 + 28) < v6)
  {
    unsigned int v10 = "this->max_num_cols_ >= num_cols";
    int v11 = 423;
LABEL_9:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v11, v10);
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  uint64_t v7 = v6 * v5;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    for (uint64_t i = 0; i != v7; ++i)
      *(void *)(*(void *)(a1 + 32) + 8 * i) = *(void *)sub_100406C7C(a2, *(_DWORD *)(*(void *)(a1 + 96) + 4 * i));
  }
  return a1;
}

void sub_100406C3C(_Unwind_Exception *a1)
{
  v1[8] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_100406C7C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_100439DB0();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_100439DDC();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_100439E08();
  }
  return v2 + 8 * a2;
}

void sub_100406CB8(void *a1)
{
  a1[8] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100406D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000001;
  *(_OWORD *)(a1 + 8) = xmmword_100774BD0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_100865350;
  *(void *)(a1 + 120) = 0x100000001;
  *(void *)(a1 + 88) = a2;
  *(void *)(a1 + 96) = off_100862AD0;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 128) = a1 + 136;
  uint64_t v8 = a1 + 144;
  *(void *)(a1 + 168) = 0x600000001;
  *(void *)(a1 + 144) = off_100864E40;
  *(_OWORD *)(a1 + 152) = xmmword_100774BD0;
  *(void *)(a1 + 176) = a1 + 184;
  sub_100405324(a1 + 96, a3);
  sub_100405324(v8, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 112);
  if (*(_DWORD *)(a1 + 24) < v9)
  {
    int v15 = "this->max_num_rows_ >= num_rows";
    int v16 = 422;
    goto LABEL_12;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 28) < v10)
  {
    int v15 = "this->max_num_cols_ >= num_cols";
    int v16 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v16, v15);
  }
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (v10)
  {
    int v11 = 0;
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (v9)
      {
        for (uint64_t j = 0; j != v9; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v11 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 128) + 4 * j), *(_DWORD *)(*(void *)(a1 + 176) + 4 * i));
      }
      v11 += v9;
    }
  }
  return a1;
}

void sub_100406EC8(_Unwind_Exception *a1)
{
  char v1[18] = off_100862050;
  char v1[12] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100406F24(void *a1)
{
  a1[18] = off_100862050;
  a1[12] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100406F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000002;
  *(_OWORD *)(a1 + 8) = xmmword_100774BE0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_100865398;
  *(void *)(a1 + 168) = 0x200000001;
  *(void *)(a1 + 136) = a2;
  *(void *)(a1 + 144) = off_100864E88;
  *(_OWORD *)(a1 + 152) = xmmword_100774CA0;
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v7 = a1 + 192;
  *(void *)(a1 + 216) = 0x600000001;
  *(void *)(a1 + 192) = off_100864E40;
  *(_OWORD *)(a1 + 200) = xmmword_100774BD0;
  *(void *)(a1 + 224) = a1 + 232;
  sub_100405324(a1 + 144, a3);
  sub_100405324(v7, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    int v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 208);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    int v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    int v10 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v10 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 176) + 4 * j), *(_DWORD *)(*(void *)(a1 + 224) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_10040716C(_Unwind_Exception *a1)
{
  char v1[24] = off_100862050;
  char v1[18] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1004071C8(void *a1)
{
  a1[24] = off_100862050;
  a1[18] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

void sub_100407238(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100407268(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100407274(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_1004072C4(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000006;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_100864D20;
  if ((a2 & 0x80000000) != 0)
  {
    unsigned int v3 = "nr >= 0";
    int v4 = 419;
LABEL_8:
    unsigned int v5 = "cnmatrix.h";
    unsigned int v6 = "CNMatrix";
    goto LABEL_12;
  }
  if ((a3 & 0x80000000) != 0)
  {
    unsigned int v3 = "nc >= 0";
    int v4 = 420;
    goto LABEL_8;
  }
  if (a2 > 6)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
LABEL_11:
    unsigned int v5 = "cnmatrixbase.h";
    unsigned int v6 = "SetMatrixSize";
LABEL_12:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 2)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
    goto LABEL_11;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004073A8(_Unwind_Exception *a1)
{
  void *v1 = off_100862050;
  _Unwind_Resume(a1);
}

uint64_t sub_1004073C8(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_100431E48();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_100431E74();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_100431EA0();
  }
  return v2 + 4 * a2;
}

uint64_t sub_100407404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000006;
  *(_OWORD *)(a1 + 8) = xmmword_1007749C0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_100865428;
  *(void *)(a1 + 360) = 0x600000001;
  *(void *)(a1 + 328) = a2;
  *(void *)(a1 + 336) = off_100864E40;
  *(_OWORD *)(a1 + 344) = xmmword_100774BD0;
  *(void *)(a1 + 368) = a1 + 376;
  uint64_t v7 = a1 + 400;
  *(void *)(a1 + 424) = 0x100000006;
  *(void *)(a1 + 400) = off_100864D20;
  *(_OWORD *)(a1 + 408) = xmmword_1007749D0;
  *(void *)(a1 + 432) = a1 + 440;
  sub_100405324(a1 + 336, a3);
  sub_100405324(v7, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 352);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    int v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 416);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    int v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    int v10 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v10 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 368) + 4 * j), *(_DWORD *)(*(void *)(a1 + 432) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_1004075DC(_Unwind_Exception *a1)
{
  v1[50] = off_100862050;
  v1[42] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100407638(void *a1)
{
  a1[50] = off_100862050;
  a1[42] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1004076A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000003;
  *(_OWORD *)(a1 + 8) = xmmword_100774BC0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_100865470;
  *(void *)(a1 + 216) = 0x300000001;
  *(void *)(a1 + 184) = a2;
  *(void *)(a1 + 192) = off_100864DB0;
  *(_OWORD *)(a1 + 200) = xmmword_1004C2710;
  *(void *)(a1 + 224) = a1 + 232;
  uint64_t v7 = a1 + 248;
  *(void *)(a1 + 272) = 0x100000006;
  *(void *)(a1 + 248) = off_100864D20;
  *(_OWORD *)(a1 + 256) = xmmword_1007749D0;
  *(void *)(a1 + 280) = a1 + 288;
  sub_100405324(a1 + 192, a3);
  sub_100405324(v7, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 208);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    int v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 264);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    int v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    int v10 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v10 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 224) + 4 * j), *(_DWORD *)(*(void *)(a1 + 280) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_100407880(_Unwind_Exception *a1)
{
  v1[31] = off_100862050;
  char v1[24] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1004078DC(void *a1)
{
  a1[31] = off_100862050;
  a1[24] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

void sub_10040794C(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_10040797C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100407988(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_1004079D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x300000001;
  *(_OWORD *)(a1 + 8) = xmmword_1004C2710;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_100865500;
  *(void *)(a1 + 96) = 0x300000001;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = off_100864DB0;
  *(_OWORD *)(a1 + 80) = xmmword_1004C2710;
  *(void *)(a1 + 104) = a1 + 112;
  sub_100405324(a1 + 72, a3);
  unsigned int v5 = *(_DWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 24) < v5)
  {
    int v10 = "this->max_num_rows_ >= num_rows";
    int v11 = 422;
    goto LABEL_9;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 84);
  if (*(_DWORD *)(a1 + 28) < v6)
  {
    int v10 = "this->max_num_cols_ >= num_cols";
    int v11 = 423;
LABEL_9:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v11, v10);
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  uint64_t v7 = v6 * v5;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    for (uint64_t i = 0; i != v7; ++i)
      *(void *)(*(void *)(a1 + 32) + 8 * i) = *(void *)sub_100406C7C(a2, *(_DWORD *)(*(void *)(a1 + 104) + 4 * i));
  }
  return a1;
}

void sub_100407B1C(_Unwind_Exception *a1)
{
  char v1[9] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100407B5C(void *a1)
{
  a1[9] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

void sub_100407BAC(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100407BDC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100407BE8(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

_DWORD *sub_100407C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 == a2) {
    sub_10043A408();
  }
  if (a1 == a3) {
    sub_10043A434();
  }
  if (a1 == a4) {
    sub_10043A460();
  }
  if (a1 == a5) {
    sub_10043A48C();
  }
  if (a2 == a3) {
    sub_10043A4B8();
  }
  if (a2 == a4) {
    sub_10043A4E4();
  }
  if (a2 == a5) {
    sub_10043A510();
  }
  if (a3 == a4) {
    sub_10043A53C();
  }
  if (a3 == a5) {
    sub_10043A568();
  }
  if (a4 == a5) {
    sub_10043A594();
  }
  unsigned int v10 = *(_DWORD *)(a4 + 24);
  unsigned int v11 = *(_DWORD *)(a1 + 8);
  if (v10 < v11) {
    sub_10043A5C0();
  }
  unsigned int v12 = *(_DWORD *)(a1 + 12);
  if (v10 < v12) {
    sub_10043A5EC();
  }
  unsigned int v13 = *(_DWORD *)(a4 + 28);
  if (v13 < v11) {
    sub_10043A618();
  }
  if (v13 < v12) {
    sub_10043A644();
  }
  if (*(_DWORD *)(a5 + 24) < v11) {
    sub_10043A670();
  }
  if (*(_DWORD *)(a5 + 28) < v12) {
    sub_10043A69C();
  }
  unsigned int v14 = *(_DWORD *)(a2 + 24);
  if (v11 >= v12)
  {
    if (v14 < v12) {
      sub_10043A7A4();
    }
  }
  else if (v14 < v11)
  {
    sub_10043A6C8();
  }
  if (*(_DWORD *)(a3 + 24) < v12) {
    sub_10043A6F4();
  }
  if (*(_DWORD *)(a3 + 28) < v12) {
    sub_10043A720();
  }
  sub_10034226C(a5, a1);
  __CLPK_integer v15 = *(_DWORD *)(a5 + 8);
  int v16 = *(__CLPK_doublereal **)(a5 + 32);
  __CLPK_integer v17 = *(_DWORD *)(a5 + 20);
  __CLPK_integer v18 = *(__CLPK_doublereal **)(a2 + 32);
  int v19 = *(__CLPK_doublereal **)(a3 + 32);
  __CLPK_integer v20 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  __CLPK_integer __n = *(_DWORD *)(a5 + 12);
  __CLPK_integer __m = v15;
  __CLPK_integer __lwork = v20;
  __CLPK_integer __lda = v17;
  __CLPK_integer __info = 0;
  __tau = v18;
  uint64_t v21 = dgeqrf_(&__m, &__n, v16, &__lda, v18, v19, &__lwork, &__info);
  __CLPK_integer v22 = __info;
  if (__info)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    uint64_t v21 = cnprint::CNPrinter::Print();
  }
  if (v20 < (int)**(double **)(a3 + 32)
    && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v21) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print();
  }
  if (v22) {
    sub_10043A778();
  }
  sub_10034226C(a4, a5);
  unsigned int v23 = *(_DWORD *)(a1 + 8);
  unsigned int v24 = *(_DWORD *)(a1 + 12);
  if (v24 >= v23) {
    unsigned int v24 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v25 = *(__CLPK_doublereal **)(a4 + 32);
  __CLPK_integer __n = *(_DWORD *)(a1 + 8);
  __CLPK_integer __m = v23;
  __CLPK_integer __lwork = v17;
  __CLPK_integer __lda = v24;
  __CLPK_integer v40 = 0;
  __CLPK_integer __info = v20;
  uint64_t v26 = dorgqr_(&__m, &__n, &__lda, v25, &__lwork, __tau, v19, &__info, &v40);
  __CLPK_integer v27 = v40;
  if (v40)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    uint64_t v26 = cnprint::CNPrinter::Print();
  }
  if (v20 < (int)**(double **)(a3 + 32)
    && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v26) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print();
  }
  if (v27) {
    sub_10043A74C();
  }
  if (*(_DWORD *)(a1 + 8) >= *(_DWORD *)(a1 + 12)) {
    int v28 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v28 = *(_DWORD *)(a1 + 8);
  }
  sub_1003411F0((_DWORD *)a2, v28, 1);
  sub_1003411F0((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  uint64_t result = sub_1003411F0((_DWORD *)a4, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 8));
  int v30 = *(_DWORD *)(a5 + 12);
  if (v30)
  {
    unsigned int v31 = 0;
    unsigned int v32 = *(_DWORD *)(a5 + 8);
    uint64_t v33 = *(void *)(a5 + 32);
    unsigned int v34 = v32 - 1;
    int v35 = *(_DWORD *)(a5 + 20) + 1;
    int v36 = 1;
    do
    {
      ++v31;
      int v37 = v36;
      unsigned int v38 = v34;
      if (v31 < v32)
      {
        do
        {
          *(void *)(v33 + 8 * v37++) = 0;
          --v38;
        }
        while (v38);
      }
      --v34;
      v36 += v35;
    }
    while (v31 != v30);
  }
  return result;
}

uint64_t sub_100407FE4(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x900000009;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_100865548;
  if (a2 > 9)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 0xA)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10040808C(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_1004080AC(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000006;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_100864CD8;
  if ((a3 & 0x80000000) != 0)
  {
    unsigned int v3 = "nc >= 0";
    int v4 = 487;
    unsigned int v5 = "cnmatrix.h";
    unsigned int v6 = "CNMatrix";
    goto LABEL_9;
  }
  if (a2 > 6)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
LABEL_8:
    unsigned int v5 = "cnmatrixbase.h";
    unsigned int v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 2)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10040817C(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_10040819C(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1004081CC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004081D8(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100408228(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000006;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_100864D20;
  if ((a3 & 0x80000000) != 0)
  {
    unsigned int v3 = "nc >= 0";
    int v4 = 487;
    unsigned int v5 = "cnmatrix.h";
    unsigned int v6 = "CNMatrix";
    goto LABEL_9;
  }
  if (a2 > 6)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
LABEL_8:
    unsigned int v5 = "cnmatrixbase.h";
    unsigned int v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 2)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004082F8(_Unwind_Exception *a1)
{
  void *v1 = off_100862050;
  _Unwind_Resume(a1);
}

uint64_t sub_100408318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000001;
  *(_OWORD *)(a1 + 8) = xmmword_100774BD0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_1008655D8;
  *(void *)(a1 + 120) = 0x100000001;
  *(void *)(a1 + 88) = a2;
  *(void *)(a1 + 96) = off_100862AD0;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 128) = a1 + 136;
  uint64_t v8 = a1 + 144;
  *(void *)(a1 + 168) = 0x100000006;
  *(void *)(a1 + 144) = off_100864D20;
  *(_OWORD *)(a1 + 152) = xmmword_1007749D0;
  *(void *)(a1 + 176) = a1 + 184;
  sub_100405324(a1 + 96, a3);
  sub_100405324(v8, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 112);
  if (*(_DWORD *)(a1 + 24) < v9)
  {
    __CLPK_integer v15 = "this->max_num_rows_ >= num_rows";
    int v16 = 422;
    goto LABEL_12;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 28) < v10)
  {
    __CLPK_integer v15 = "this->max_num_cols_ >= num_cols";
    int v16 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v16, v15);
  }
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (v10)
  {
    int v11 = 0;
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (v9)
      {
        for (uint64_t j = 0; j != v9; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v11 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 128) + 4 * j), *(_DWORD *)(*(void *)(a1 + 176) + 4 * i));
      }
      v11 += v9;
    }
  }
  return a1;
}

void sub_1004084E8(_Unwind_Exception *a1)
{
  char v1[18] = off_100862050;
  char v1[12] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100408544(void *a1)
{
  a1[18] = off_100862050;
  a1[12] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

void sub_1004085B4(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1004085E4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004085F0(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100408614(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x700000007;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_100865668;
  if (a2 > 7)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 8)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004086BC(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1004086DC(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_10040870C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100408718(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void *sub_100408768(void *result)
{
  _DWORD *result = off_100862050;
  return result;
}

void sub_100408788(void *a1)
{
  *a1 = off_100862050;
  operator delete();
}

uint64_t sub_1004087B8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004087C4(uint64_t a1)
{
  sub_100351B60(a1, v1);
}

void sub_1004087E8(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100408818(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100408824(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_100408874(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1004088A4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1004088B0(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100408900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000002;
  *(_OWORD *)(a1 + 8) = xmmword_100774BE0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_100865788;
  *(void *)(a1 + 168) = 0x200000001;
  *(void *)(a1 + 136) = a2;
  *(void *)(a1 + 144) = off_100864E88;
  *(_OWORD *)(a1 + 152) = xmmword_100774CA0;
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v7 = a1 + 192;
  *(void *)(a1 + 216) = 0x100000006;
  *(void *)(a1 + 192) = off_100864D20;
  *(_OWORD *)(a1 + 200) = xmmword_1007749D0;
  *(void *)(a1 + 224) = a1 + 232;
  sub_100405324(a1 + 144, a3);
  sub_100405324(v7, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 160);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    unsigned int v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 208);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    unsigned int v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    int v10 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v10 + j)) = *(void *)sub_1003802D0(a2, *(_DWORD *)(*(void *)(a1 + 176) + 4 * j), *(_DWORD *)(*(void *)(a1 + 224) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_100408AD8(_Unwind_Exception *a1)
{
  char v1[24] = off_100862050;
  char v1[18] = off_100862050;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100408B34(void *a1)
{
  a1[24] = off_100862050;
  a1[18] = off_100862050;
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100408BA4(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x800000008;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_1008657D0;
  if (a2 > 8)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 9)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100408C4C(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100408C6C(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100408C9C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100408CA8(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100408CF8()
{
  return cnprint::CNPrinter::Print();
}

uint64_t sub_100408D10()
{
  __n128 v0 = sub_10040A690((uint64_t)v11, &xmmword_100774CB0, &xmmword_100774CC8, &xmmword_100774CE0);
  sub_10040A858(&unk_1008AC650, v11, v0);
  __cxa_atexit((void (*)(void *))sub_1003F6D7C, &unk_1008AC650, (void *)&_mh_execute_header);
  qword_1008AC728 = 0x300000003;
  qword_1008AC710 = (uint64_t)off_100861B80;
  unk_1008AC718 = xmmword_1004C1E40;
  qword_1008AC730 = (uint64_t)algn_1008AC738;
  __cxa_atexit((void (*)(void *))sub_10033F4F8, &qword_1008AC710, (void *)&_mh_execute_header);
  qword_1008AC798 = 0x300000003;
  qword_1008AC780 = (uint64_t)off_100861B80;
  unk_1008AC788 = xmmword_1004C1E40;
  qword_1008AC7A0 = (uint64_t)&unk_1008AC7A8;
  __cxa_atexit((void (*)(void *))sub_10033F4F8, &qword_1008AC780, (void *)&_mh_execute_header);
  qword_1008AC808 = 0x300000003;
  qword_1008AC7F0 = (uint64_t)off_100861B80;
  unk_1008AC7F8 = xmmword_1004C1E40;
  qword_1008AC810 = (uint64_t)&unk_1008AC818;
  __cxa_atexit((void (*)(void *))sub_10033F4F8, &qword_1008AC7F0, (void *)&_mh_execute_header);
  qword_1008AC878 = 0x300000003;
  qword_1008AC860 = (uint64_t)off_100861B80;
  unk_1008AC868 = xmmword_1004C1E40;
  qword_1008AC880 = (uint64_t)&unk_1008AC888;
  __cxa_atexit((void (*)(void *))sub_10033F4F8, &qword_1008AC860, (void *)&_mh_execute_header);
  qword_1008AC8E8 = 0x300000003;
  qword_1008AC8D0 = (uint64_t)off_100861B80;
  unk_1008AC8D8 = xmmword_1004C1E40;
  qword_1008AC8F0 = (uint64_t)&unk_1008AC8F8;
  __cxa_atexit((void (*)(void *))sub_10033F4F8, &qword_1008AC8D0, (void *)&_mh_execute_header);
  qword_1008AC958 = 0x300000003;
  qword_1008AC940 = (uint64_t)off_100861B80;
  unk_1008AC948 = xmmword_1004C1E40;
  qword_1008AC960 = (uint64_t)&unk_1008AC968;
  __cxa_atexit((void (*)(void *))sub_10033F4F8, &qword_1008AC940, (void *)&_mh_execute_header);
  qword_1008AC9C8 = 0x300000003;
  qword_1008AC9B0 = (uint64_t)off_100861B80;
  unk_1008AC9B8 = xmmword_1004C1E40;
  qword_1008AC9D0 = (uint64_t)&unk_1008AC9D8;
  __cxa_atexit((void (*)(void *))sub_10033F4F8, &qword_1008AC9B0, (void *)&_mh_execute_header);
  qword_1008ACA38 = 0x300000003;
  qword_1008ACA20 = (uint64_t)off_100861B80;
  unk_1008ACA28 = xmmword_1004C1E40;
  qword_1008ACA40 = (uint64_t)&unk_1008ACA48;
  __cxa_atexit((void (*)(void *))sub_10033F4F8, &qword_1008ACA20, (void *)&_mh_execute_header);
  qword_1008ABAA0 = 0x40F86A0000000000;
  qword_1008ABAC0 = 0xC00000001;
  qword_1008ABAA8 = (uint64_t)off_100864DF8;
  *(_OWORD *)algn_1008ABAB0 = xmmword_100774C90;
  qword_1008ABAC8 = (uint64_t)algn_1008ABAD0;
  sub_1003411F0(&qword_1008ABAA8, 1, 12);
  for (unsigned int i = 0; i != 12; ++i)
    *(_DWORD *)sub_1004044E4((uint64_t)&qword_1008ABAA8, i) = i;
  __cxa_atexit((void (*)(void *))sub_1003F6DDC, &qword_1008ABAA8, (void *)&_mh_execute_header);
  qword_1008ABB18 = 0x600000001;
  qword_1008ABB00[0] = (uint64_t)off_100864E40;
  unk_1008ABB08 = xmmword_100774BD0;
  qword_1008ABB20 = (uint64_t)algn_1008ABB28;
  sub_1003411F0(qword_1008ABB00, 1, 6);
  for (unsigned int j = 0; j != 6; ++j)
    *(_DWORD *)sub_1004044E4((uint64_t)qword_1008ABB00, j) = j;
  __cxa_atexit((void (*)(void *))sub_1003F6DFC, qword_1008ABB00, (void *)&_mh_execute_header);
  qword_1008ABB58 = 0x300000001;
  qword_1008ABB40[0] = (uint64_t)off_100864DB0;
  unk_1008ABB48 = xmmword_1004C2710;
  qword_1008ABB60 = (uint64_t)&unk_1008ABB68;
  sub_1003411F0(qword_1008ABB40, 1, 3);
  for (unsigned int k = 0; k != 3; ++k)
    *(_DWORD *)sub_1004044E4((uint64_t)qword_1008ABB40, k) = k + 6;
  __cxa_atexit((void (*)(void *))sub_1003F6E1C, qword_1008ABB40, (void *)&_mh_execute_header);
  qword_1008ABB90 = 0x200000001;
  qword_1008ABB78[0] = (uint64_t)off_100864E88;
  unk_1008ABB80 = xmmword_100774CA0;
  qword_1008ABB98 = (uint64_t)&unk_1008ABBA0;
  sub_1003411F0(qword_1008ABB78, 1, 2);
  *(_DWORD *)sub_1004044E4((uint64_t)qword_1008ABB78, 0) = 6;
  *(_DWORD *)sub_1004044E4((uint64_t)qword_1008ABB78, 1u) = 7;
  __cxa_atexit((void (*)(void *))sub_1003F6E3C, qword_1008ABB78, (void *)&_mh_execute_header);
  qword_1008ABBC0 = 0x600000001;
  qword_1008ABBA8 = (uint64_t)off_100864E40;
  *(_OWORD *)algn_1008ABBB0 = xmmword_100774BD0;
  qword_1008ABBC8 = (uint64_t)&unk_1008ABBD0;
  sub_1003411F0(&qword_1008ABBA8, 1, 6);
  for (unsigned int m = 0; m != 6; ++m)
    *(_DWORD *)sub_1004044E4((uint64_t)&qword_1008ABBA8, m) = m + 12;
  __cxa_atexit((void (*)(void *))sub_1003F6DFC, &qword_1008ABBA8, (void *)&_mh_execute_header);
  qword_1008ABC00 = 0x200000001;
  qword_1008ABBE8 = (uint64_t)off_100864E88;
  *(_OWORD *)algn_1008ABBF0 = xmmword_100774CA0;
  qword_1008ABC08 = (uint64_t)&unk_1008ABC10;
  sub_1003411F0(&qword_1008ABBE8, 1, 2);
  *(_DWORD *)sub_1004044E4((uint64_t)&qword_1008ABBE8, 0) = 1;
  *(_DWORD *)sub_1004044E4((uint64_t)&qword_1008ABBE8, 1u) = 2;
  __cxa_atexit((void (*)(void *))sub_1003F6E3C, &qword_1008ABBE8, (void *)&_mh_execute_header);
  qword_1008ABC30 = 0x300000001;
  qword_1008ABC18[0] = (uint64_t)off_100864DB0;
  unk_1008ABC20 = xmmword_1004C2710;
  qword_1008ABC38 = (uint64_t)&unk_1008ABC40;
  sub_1003411F0(qword_1008ABC18, 1, 3);
  for (unsigned int n = 0; n != 3; ++n)
    *(_DWORD *)sub_1004044E4((uint64_t)qword_1008ABC18, n) = n;
  __cxa_atexit((void (*)(void *))sub_1003F6E1C, qword_1008ABC18, (void *)&_mh_execute_header);
  qword_1008ABC68 = 0x300000001;
  qword_1008ABC50[0] = (uint64_t)off_100864DB0;
  unk_1008ABC58 = xmmword_1004C2710;
  qword_1008ABC70 = (uint64_t)&unk_1008ABC78;
  sub_1003411F0(qword_1008ABC50, 1, 3);
  for (iunsigned int i = 0; ii != 3; ++ii)
    *(_DWORD *)sub_1004044E4((uint64_t)qword_1008ABC50, ii) = ii + 3;
  __cxa_atexit((void (*)(void *))sub_1003F6E1C, qword_1008ABC50, (void *)&_mh_execute_header);
  qword_1008ABCA0 = 0x300000001;
  qword_1008ABC88 = (uint64_t)off_100864DB0;
  *(_OWORD *)algn_1008ABC90 = xmmword_1004C2710;
  qword_1008ABCA8 = (uint64_t)algn_1008ABCB0;
  sub_1003411F0(&qword_1008ABC88, 1, 3);
  for (junsigned int j = 0; jj != 3; ++jj)
    *(_DWORD *)sub_1004044E4((uint64_t)&qword_1008ABC88, jj) = jj + 6;
  __cxa_atexit((void (*)(void *))sub_1003F6E1C, &qword_1008ABC88, (void *)&_mh_execute_header);
  qword_1008ABCD8 = 0x300000001;
  qword_1008ABCC0[0] = (uint64_t)off_100864DB0;
  unk_1008ABCC8 = xmmword_1004C2710;
  qword_1008ABCE0 = (uint64_t)&unk_1008ABCE8;
  sub_1003411F0(qword_1008ABCC0, 1, 3);
  for (kunsigned int k = 0; kk != 3; ++kk)
    *(_DWORD *)sub_1004044E4((uint64_t)qword_1008ABCC0, kk) = kk + 9;
  __cxa_atexit((void (*)(void *))sub_1003F6E1C, qword_1008ABCC0, (void *)&_mh_execute_header);
  qword_1008ABD10 = 0x300000003;
  qword_1008ABCF8[0] = (uint64_t)off_100861B80;
  unk_1008ABD00 = xmmword_1004C1E40;
  qword_1008ABD18 = (uint64_t)&unk_1008ABD20;
  sub_1003411F0(qword_1008ABCF8, 3, 3);
  sub_100341240((uint64_t)qword_1008ABCF8, 0.0);
  for (munsigned int m = 0; mm != 3; ++mm)
    *(void *)sub_1003802D0((uint64_t)qword_1008ABCF8, mm, mm) = 0x3FF0000000000000;
  __cxa_atexit((void (*)(void *))sub_10033F4F8, qword_1008ABCF8, (void *)&_mh_execute_header);
  qword_1008ABD80 = 0x300000003;
  qword_1008ABD68 = (uint64_t)off_100861B80;
  *(_OWORD *)algn_1008ABD70 = xmmword_1004C1E40;
  qword_1008ABD88 = (uint64_t)&unk_1008ABD90;
  sub_1003411F0(&qword_1008ABD68, 3, 3);
  sub_100341240((uint64_t)&qword_1008ABD68, 0.0);
  return __cxa_atexit((void (*)(void *))sub_10033F4F8, &qword_1008ABD68, (void *)&_mh_execute_header);
}

void sub_100409748(_Unwind_Exception *a1)
{
  void *v1 = off_100862050;
  _Unwind_Resume(a1);
}

void *sub_1004097D8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100865808)[a1]);
}

void *sub_1004097EC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100865860)[a1]);
}

void *sub_100409800@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_1008658A8)[a1]);
}

void *sub_100409814@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_1008658C8)[a1]);
}

uint64_t sub_100409828@<X0>(double *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  for (uint64_t i = 0; i != 3; ++i)
    *(double *)&v7[i * 8] = a1[i + 3] * -9.80665;
  return sub_10040A608(a2, v7, a1 + 6, a1 + 9, a1 + 13, a1 + 16, a3, *a1);
}

void sub_100409894(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  v41[0] = a3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  char v40 = *(unsigned char *)(a1 + 368) == 5;
  int v37 = 0;
  unsigned int v38 = 0;
  uint64_t v39 = 0;
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  if (v4 != v5)
  {
    uint64_t v7 = (const void *)(a1 + 115);
    uint64_t v8 = a1 + 123;
    uint64_t v9 = (char *)(a1 + 72);
    while (1)
    {
      if (*(unsigned char *)(a1 + 528) && *(unsigned char *)(v4 + 32) && *(unsigned char *)(v4 + 48))
      {
        uint64_t v35 = *(void *)(a1 + 64);
        double v36 = 0.0;
        __int16 v34 = *(_WORD *)(a1 + 112);
        char v33 = *(unsigned char *)(a1 + 114);
        long long __p = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        sub_10003AD14(&__p, v7, v8, 8uLL);
        double v29 = *(double *)(a1 + 304);
        double v28 = sub_100030414(*(double *)(v4 + 8));
        double v27 = sub_100030414(*(double *)v4);
        double v26 = 0.2;
        if (!*(unsigned char *)(v4 + 48)) {
          sub_10000AE44();
        }
        double v25 = sub_100030414(*(double *)(v4 + 40));
        if (!*(unsigned char *)(v4 + 32)) {
          sub_10000AE44();
        }
        double v10 = sub_100030414(*(double *)(v4 + 24));
        double v24 = v10;
        uint64_t v11 = *(void *)(a1 + 536);
        uint64_t v12 = *(void *)(a1 + 544);
        v23[0] = v11;
        v23[1] = v12;
        char v13 = *(unsigned char *)(a1 + 368);
        char v22 = v13;
        unint64_t v14 = a2[1];
        if (v14 >= a2[2])
        {
          uint64_t v18 = sub_100409C8C(a2, &v35, &v34, &v33, (uint64_t)&__p, v41, &v29, &v28, &v27, &v26, &v25, &v24, &v36, v23, (uint64_t)&v37, &v22, &v40);
          goto LABEL_15;
        }
        sub_100409ED8(v14, v35, v34, v33, (uint64_t)&__p, v11, v12, (uint64_t)&v37, v41[0], v29, v28, v27, v26, v25, v10, v36, v13, v40);
      }
      else
      {
        v23[0] = *(void *)(a1 + 64);
        LOWORD(v27) = *(_WORD *)(a1 + 112);
        LOBYTE(v26) = *(unsigned char *)(a1 + 114);
        long long __p = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        sub_10003AD14(&__p, v7, v8, 8uLL);
        double v15 = *(double *)(a1 + 48);
        uint64_t v35 = *(void *)(a1 + 304);
        double v36 = v15;
        double v29 = sub_100030414(*(double *)(v4 + 8));
        double v16 = sub_100030414(*(double *)v4);
        double v28 = v16;
        char v17 = *(unsigned char *)(a1 + 368);
        LOBYTE(v25) = v17;
        unint64_t v14 = a2[1];
        if (v14 >= a2[2])
        {
          uint64_t v18 = sub_10040A25C(a2, v23, (__int16 *)&v27, (char *)&v26, (uint64_t)&__p, &v36, (double *)&v35, &v29, &v28, (uint64_t)&unk_1004C4575, (uint64_t)&v37, (char *)&v25, &v40);
          goto LABEL_15;
        }
        sub_100409ED8(v14, v23[0], SLOWORD(v27), SLOBYTE(v26), (uint64_t)&__p, 0, 0, (uint64_t)&v37, v36, *(double *)&v35, v29, v16, 0.1, 0.174532925, 0.174532925, 0.0, v17, v40);
      }
      uint64_t v18 = v14 + 152;
      a2[1] = v14 + 152;
LABEL_15:
      a2[1] = v18;
      if (__p)
      {
        unsigned int v31 = __p;
        operator delete(__p);
      }
      int v19 = *(char **)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 80);
      if (v19 != (char *)v20)
      {
        uint64_t v21 = (char *)(a2[1] - 32);
        if (v21 != v9) {
          sub_10015E510(v21, v19, v20, (v20 - (uint64_t)v19) >> 3);
        }
      }
      v4 += 56;
      if (v4 == v5)
      {
        if (v37)
        {
          unsigned int v38 = v37;
          operator delete(v37);
        }
        return;
      }
    }
  }
}

void sub_100409C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  *(void *)(v28 + 8) = v29;
  if (__p) {
    operator delete(__p);
  }
  uint64_t v32 = *(void **)(v30 - 144);
  if (v32)
  {
    *(void *)(v30 - 136) = v32;
    operator delete(v32);
  }
  *(void *)(v30 - 144) = v28;
  sub_10016E8EC((void ***)(v30 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_100409C8C(uint64_t *a1, uint64_t *a2, __int16 *a3, char *a4, uint64_t a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, uint64_t *a14, uint64_t a15, char *a16, char *a17)
{
  unint64_t v18 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v19 = v18 + 1;
  if (v18 + 1 > 0x1AF286BCA1AF286) {
    sub_1000267C4();
  }
  unsigned int v23 = a4;
  double v27 = a16;
  double v26 = a17;
  uint64_t v29 = a14;
  uint64_t v28 = a15;
  unsigned int v31 = a12;
  uint64_t v30 = a13;
  char v33 = a10;
  uint64_t v32 = a11;
  __int16 v34 = a9;
  uint64_t v35 = (uint64_t)(a1 + 2);
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 3) > v19) {
    unint64_t v19 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943) {
    unint64_t v36 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v36 = v19;
  }
  uint64_t v49 = a1 + 2;
  if (v36)
  {
    int v37 = a6;
    uint64_t v44 = a5;
    unint64_t v43 = v18;
    uint64_t v39 = a8;
    char v40 = (char *)sub_10016D27C((uint64_t)(a1 + 2), v36);
    uint64_t v30 = a13;
    uint64_t v29 = a14;
    double v27 = a16;
    uint64_t v28 = a15;
    double v26 = a17;
    unsigned int v31 = a12;
    a5 = v44;
    a8 = v39;
    unint64_t v18 = v43;
    unsigned int v23 = a4;
    __int16 v34 = a9;
    char v33 = a10;
    a6 = v37;
    uint64_t v32 = a11;
  }
  else
  {
    char v40 = 0;
  }
  unint64_t v45 = v40;
  uint64_t v46 = &v40[152 * v18];
  double v48 = &v40[152 * v36];
  sub_100409E70(v35, (uint64_t)v46, a2, a3, v23, a5, a6, a7, a8, v34, v33, v32, v31, v30, v29, v28, v27, v26);
  uint64_t v47 = v46 + 152;
  sub_100409FDC(a1, &v45);
  uint64_t v41 = a1[1];
  sub_10040A1E0(&v45);
  return v41;
}

void sub_100409E5C(_Unwind_Exception *a1)
{
  sub_10040A1E0((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_100409E70(uint64_t a1, uint64_t a2, uint64_t *a3, __int16 *a4, char *a5, uint64_t a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, uint64_t *a15, uint64_t a16, char *a17, char *a18)
{
  return sub_100409ED8(a2, *a3, *a4, *a5, a6, *a15, a15[1], a16, *a7, *a8, *a9, *a10, *a11, *a12, *a13, *a14, *a17, *a18);
}

uint64_t sub_100409ED8(uint64_t a1, uint64_t a2, __int16 a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, char a17, char a18)
{
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 10) = a4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_10016D488((void *)(a1 + 16), *(const void **)a5, *(void *)(a5 + 8), *(void *)(a5 + 8) - *(void *)a5);
  *(void *)(a1 + 120) = 0;
  *(double *)(a1 + 40) = a9;
  *(double *)(a1 + 48) = a10;
  *(double *)(a1 + 56) = a13;
  *(double *)(a1 + 64) = a11;
  *(double *)(a1 + 72) = a12;
  *(double *)(a1 + 80) = a14;
  *(double *)(a1 + 88) = a15;
  *(double *)(a1 + 96) = a16;
  *(void *)(a1 + 104) = a6;
  *(void *)(a1 + 112) = a7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  sub_10015036C((void *)(a1 + 120), *(const void **)a8, *(void *)(a8 + 8), (uint64_t)(*(void *)(a8 + 8) - *(void *)a8) >> 3);
  *(unsigned char *)(a1 + 144) = a17;
  *(unsigned char *)(a1 + 145) = a18;
  return a1;
}

void sub_100409FC0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100409FDC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10040A054((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10040A054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 152);
      a3 -= 152;
      *(_DWORD *)(v7 - 145) = *(_DWORD *)(a3 + 7);
      *(void *)(v7 - 152) = v8;
      *(void *)(v7 - 128) = 0;
      *(void *)(v7 - 120) = 0;
      *(void *)(v7 - 136) = 0;
      *(_OWORD *)(v7 - 136) = *(_OWORD *)(a3 + 16);
      *(void *)(v7 - 120) = *(void *)(a3 + 32);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 16) = 0;
      long long v9 = *(_OWORD *)(a3 + 56);
      long long v10 = *(_OWORD *)(a3 + 72);
      long long v11 = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(v7 - 55) = *(_OWORD *)(a3 + 97);
      *(_OWORD *)(v7 - 80) = v10;
      *(_OWORD *)(v7 - 64) = v11;
      *(_OWORD *)(v7 - 96) = v9;
      *(_OWORD *)(v7 - 112) = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 120);
      *(void *)(v7 - 16) = *(void *)(a3 + 136);
      *(void *)(a3 + 120) = 0;
      *(void *)(a3 + 128) = 0;
      *(void *)(a3 + 136) = 0;
      *(_WORD *)(v7 - 8) = *(_WORD *)(a3 + 144);
      uint64_t v7 = *((void *)&v17 + 1) - 152;
      *((void *)&v17 + 1) -= 152;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_10040A154((uint64_t)v14);
  return v12;
}

uint64_t sub_10040A154(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10040A18C((uint64_t *)a1);
  }
  return a1;
}

void sub_10040A18C(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  uint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10016E984(v3, v1);
      v1 += 19;
    }
    while (v1 != v2);
  }
}

void **sub_10040A1E0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10040A214(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 152;
    sub_10016E984(v4, (void *)(i - 152));
  }
}

uint64_t sub_10040A25C(uint64_t *a1, uint64_t *a2, __int16 *a3, char *a4, uint64_t a5, double *a6, double *a7, double *a8, double *a9, uint64_t a10, uint64_t a11, char *a12, char *a13)
{
  uint64_t v14 = *a1;
  unint64_t v15 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v16 = v15 + 1;
  if (v15 + 1 > 0x1AF286BCA1AF286) {
    sub_1000267C4();
  }
  char v22 = a12;
  unsigned int v23 = a9;
  uint64_t v24 = (uint64_t)(a1 + 2);
  unint64_t v25 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v14) >> 3);
  if (2 * v25 > v16) {
    unint64_t v16 = 2 * v25;
  }
  if (v25 >= 0xD79435E50D7943) {
    unint64_t v26 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v26 = v16;
  }
  unint64_t v36 = a1 + 2;
  if (v26)
  {
    uint64_t v27 = a5;
    unsigned int v31 = a3;
    uint64_t v28 = (char *)sub_10016D27C(v24, v26);
    unsigned int v23 = a9;
    a3 = v31;
    char v22 = a12;
    a5 = v27;
  }
  else
  {
    uint64_t v28 = 0;
  }
  uint64_t v32 = v28;
  char v33 = &v28[152 * v15];
  uint64_t v34 = (uint64_t)v33;
  uint64_t v35 = &v28[152 * v26];
  sub_100409ED8((uint64_t)v33, *a2, *a3, *a4, a5, 0, 0, a11, *a6, *a7, *a8, *v23, 0.1, 0.174532925, 0.174532925, 0.0, *v22, *a13);
  uint64_t v34 = (uint64_t)(v33 + 152);
  sub_100409FDC(a1, &v32);
  uint64_t v29 = a1[1];
  sub_10040A1E0(&v32);
  return v29;
}

void sub_10040A410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10040A1E0((void **)va);
  _Unwind_Resume(a1);
}

double *sub_10040A424(double *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, double a7, double a8)
{
  *a1 = 0.0;
  a1[1] = 0.0;
  uint64_t v23 = 0;
  sub_10015587C((void *)a1 + 2, 3uLL, &v23);
  uint64_t v23 = 0;
  sub_10015587C((void *)a1 + 5, 3uLL, &v23);
  uint64_t v23 = 0;
  sub_10015587C((void *)a1 + 8, 4uLL, &v23);
  uint64_t v23 = 0;
  sub_10015587C((void *)a1 + 11, 3uLL, &v23);
  uint64_t v23 = 0;
  sub_10015587C((void *)a1 + 14, 3uLL, &v23);
  uint64_t v16 = 0;
  a1[17] = 0.0;
  a1[18] = 0.0;
  a1[19] = 0.0;
  *a1 = a7;
  a1[1] = a8;
  long long v17 = (void *)*((void *)a1 + 2);
  *long long v17 = *a2;
  v17[1] = a2[1];
  v17[2] = a2[2];
  unint64_t v18 = (void *)*((void *)a1 + 5);
  *unint64_t v18 = *a3;
  v18[1] = a3[1];
  v18[2] = a3[2];
  uint64_t v19 = *((void *)a1 + 8);
  do
  {
    *(void *)(v19 + v16) = *(void *)(a4 + v16);
    v16 += 8;
  }
  while (v16 != 32);
  uint64_t v20 = (void *)*((void *)a1 + 11);
  *uint64_t v20 = *a5;
  v20[1] = a5[1];
  v20[2] = a5[2];
  uint64_t v21 = (void *)*((void *)a1 + 14);
  *uint64_t v21 = *a6;
  v21[1] = a6[1];
  void v21[2] = a6[2];
  return a1;
}

void sub_10040A5A4(_Unwind_Exception *exception_object)
{
  uint64_t v7 = *v5;
  if (*v5)
  {
    char v1[12] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v4;
  if (*v4)
  {
    char v1[9] = v8;
    operator delete(v8);
  }
  long long v9 = *v3;
  if (*v3)
  {
    char v1[6] = v9;
    operator delete(v9);
  }
  long long v10 = *v2;
  if (*v2)
  {
    char v1[3] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10040A60C(void *a1)
{
  uint64_t v1 = 0;
  LOBYTE(v2) = 1;
  do
  {
    BOOL v2 = v2 && *(double *)(a1[2] + v1) == 0.0 && *(double *)(a1[5] + v1) == 0.0;
    v1 += 8;
  }
  while (v1 != 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  LOBYTE(v4) = 1;
  do
  {
    BOOL v4 = v4 && *(double *)(a1[8] + v3) == 0.0;
    v3 += 8;
  }
  while (v3 != 32);
  return !v4;
}

__n128 sub_10040A690(uint64_t a1, long long *a2, long long *a3, __n128 *a4)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  long long v5 = *a3;
  *(void *)(a1 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v5;
  __n128 result = *a4;
  *(void *)(a1 + 64) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_10040A6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = off_100861B38;
  *(_OWORD *)(a1 + 8) = xmmword_1004C1B50;
  *(void *)(a1 + 32) = a1 + 40;
  uint64_t v5 = a1 + 64;
  *(void *)(a1 + 88) = 0x100000003;
  *(void *)(a1 + 64) = off_100861B38;
  *(_OWORD *)(a1 + 72) = xmmword_1004C1B50;
  *(void *)(a1 + 96) = a1 + 104;
  uint64_t v6 = a1 + 128;
  *(void *)(a1 + 152) = 0x100000003;
  *(void *)(a1 + 128) = off_100861B38;
  *(_OWORD *)(a1 + 136) = xmmword_1004C1B50;
  *(void *)(a1 + 160) = a1 + 168;
  do
  {
    uint64_t v7 = *(void *)(a2 + 8 * v4);
    *(void *)sub_1003416AC(a1, v4) = v7;
    uint64_t v8 = a2 + 8 * v4;
    uint64_t v9 = *(void *)(v8 + 24);
    *(void *)sub_1003416AC(v5, v4) = v9;
    uint64_t v10 = *(void *)(v8 + 48);
    *(void *)sub_1003416AC(v6, v4++) = v10;
  }
  while (v4 != 3);
  return a1;
}

void sub_10040A800(_Unwind_Exception *a1)
{
  v1[16] = off_100853598;
  char v1[8] = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10040A85C(void *a1, double *a2)
{
  sub_1001F2440(a1 + 6, a2);

  return sub_10040A8A0(a1, (uint64_t)a2);
}

uint64_t sub_10040A8A0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 25 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    sub_10040AD34(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x19)) + 160 * (v7 % 0x19);
  }
  uint64_t result = sub_1003EFC04(v8, a2);
  ++a1[5];
  return result;
}

uint64_t sub_10040A960(int64x2_t *a1)
{
  uint64_t result = sub_10040AC08((uint64_t)a1);
  if (result)
  {
    sub_10040A9E8(a1);
    a1[5] = vaddq_s64(a1[5], (int64x2_t)xmmword_1004B59B0);
    return sub_1001F286C((uint64_t)a1[3].i64, 1);
  }
  return result;
}

BOOL sub_10040A9C8(uint64_t a1)
{
  return sub_10040AC08(a1) == 0;
}

uint64_t sub_10040A9E8(int64x2_t *a1)
{
  sub_10016D104((uint64_t)&a1[2].i64[1], (void *)(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x19uLL)) + 160 * (a1[2].i64[0] % 0x19uLL)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1004B59B0);

  return sub_10040B04C((uint64_t)a1, 1);
}

void sub_10040AA78(void *a1)
{
  if (!sub_10040AC08((uint64_t)a1)) {
    return;
  }
  BOOL v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1[4];
    uint64_t v5 = &v2[v4 / 0x19];
    uint64_t v6 = (char *)*v5 + 160 * (v4 % 0x19);
    unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x19] + 160 * ((a1[5] + v4) % 0x19);
    if (v6 != (char *)v7)
    {
      do
      {
        sub_10016D104((uint64_t)(a1 + 5), v6);
        v6 += 160;
        if (v6 - (unsigned char *)*v5 == 4000)
        {
          uint64_t v8 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      BOOL v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  a1[5] = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v10 = a1[2];
      BOOL v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v9 = v10 - (void)v2;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 12;
    goto LABEL_15;
  }
  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 25;
LABEL_15:
    a1[4] = v11;
  }
  uint64_t v12 = (void **)a1[7];
  uint64_t v13 = a1[8];
  a1[11] = 0;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = a1[8];
      uint64_t v12 = (void **)(a1[7] + 8);
      a1[7] = v12;
      unint64_t v14 = v15 - (void)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 256;
  }
  else
  {
    if (v14 >> 3 != 2) {
      return;
    }
    uint64_t v16 = 512;
  }
  a1[10] = v16;
}

uint64_t sub_10040AC08(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result != *(void *)(a1 + 88))
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "IMU data buffer and time buffer have different sizes.");
  }
  return result;
}

void sub_10040AC70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10040AC84(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_10016EAE8((uint64_t *)(a1 + 16), a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

double sub_10040AD04(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void *sub_10040AD1C@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_1008658E8)[a1]);
}

void sub_10040AD34(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x19;
  unint64_t v4 = v2 - 25;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFA0uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFA0uLL);
    sub_100151930((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFA0uLL);
  sub_100151A50(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10040B000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10040B04C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x19) {
    a2 = 1;
  }
  if (v2 < 0x32) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 25;
  }
  return v4 ^ 1u;
}

uint64_t sub_10040B0AC@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (result == 1)
  {
    if (a2 <= 99)
    {
      if (a2 > 0x17) {
        return result;
      }
      if (((1 << a2) & 0xFFFF80) == 0)
      {
        BOOL v3 = &xmmword_100775408;
LABEL_20:
        long long v5 = v3[9];
        *(_OWORD *)(a3 + 128) = v3[8];
        *(_OWORD *)(a3 + 144) = v5;
        *(_OWORD *)(a3 + 160) = v3[10];
        *(void *)(a3 + 176) = *((void *)v3 + 22);
        long long v6 = v3[5];
        *(_OWORD *)(a3 + 64) = v3[4];
        *(_OWORD *)(a3 + 80) = v6;
        long long v7 = v3[7];
        *(_OWORD *)(a3 + 96) = v3[6];
        *(_OWORD *)(a3 + 112) = v7;
        long long v8 = v3[1];
        *(_OWORD *)a3 = *v3;
        *(_OWORD *)(a3 + 16) = v8;
        long long v9 = v3[2];
        long long v10 = v3[3];
        char v4 = 1;
        *(_OWORD *)(a3 + 32) = v9;
        *(_OWORD *)(a3 + 48) = v10;
        goto LABEL_13;
      }
LABEL_12:
      char v4 = 0;
      *(unsigned char *)a3 = 0;
LABEL_13:
      *(unsigned char *)(a3 + 184) = v4;
      return result;
    }
LABEL_7:
    if (a2 > 199)
    {
      if ((a2 - 200) >= 2 && a2 != 997 && a2 != 999) {
        return result;
      }
    }
    else if ((a2 - 100) >= 0x16)
    {
      return result;
    }
    goto LABEL_12;
  }
  if (result) {
    return result;
  }
  if (a2 > 99) {
    goto LABEL_7;
  }
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      BOOL v3 = &xmmword_100775350;
      goto LABEL_20;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      goto LABEL_12;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10040B20C(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v2 = a1 + 64;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 88) = 0x300000003;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = off_100861B80;
  *(_OWORD *)(a1 + 72) = xmmword_1004C1E40;
  *(void *)(a1 + 96) = a1 + 104;
  sub_1003411F0((_DWORD *)(a1 + 64), 3, 3);
  sub_100341240(v2, 0.0);
  for (int i = 0; i != 3; ++i)
    *(void *)sub_1003802D0(v2, i, i) = 0x3FF0000000000000;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v13 = 0x300000003;
  uint64_t v11 = off_100861B80;
  long long v12 = xmmword_1004C1E40;
  BOOL v14 = &v15;
  sub_1003411F0(&v11, 3, 3);
  sub_100341240((uint64_t)&v11, 0.0);
  for (int j = 0; j != 3; ++j)
    *(void *)sub_1003802D0((uint64_t)&v11, j, j) = 0x3FF0000000000000;
  sub_10034226C(v2, (uint64_t)&v11);
  long long v5 = *(void ***)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 48) = 0;
  unint64_t v7 = v6 - (void)v5;
  if (v7 >= 0x11)
  {
    do
    {
      operator delete(*v5);
      uint64_t v8 = *(void *)(a1 + 24);
      long long v5 = (void **)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v5;
      unint64_t v7 = v8 - (void)v5;
    }
    while (v7 > 0x10);
  }
  if (v7 >> 3 == 1)
  {
    uint64_t v9 = 256;
    goto LABEL_11;
  }
  if (v7 >> 3 == 2)
  {
    uint64_t v9 = 512;
LABEL_11:
    *(void *)(a1 + 40) = v9;
  }
  return a1;
}

void sub_10040B3CC(_Unwind_Exception *a1)
{
  *uint64_t v2 = off_100853598;
  sub_10016CC78(v1);
  _Unwind_Resume(a1);
}

void sub_10040B410(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Accepting connection from an entitled client with pid %d", (uint8_t *)v2, 8u);
}

void sub_10040B488(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Entitlement check failed! - rejecting unentitled client with pid %d", (uint8_t *)v2, 8u);
}

void sub_10040B500(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PRBTRangingService] shouldAcceptNewConnection", v1, 2u);
}

void sub_10040B544(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Accepting connection from an entitled client with pid %d", (uint8_t *)v2, 8u);
}

void sub_10040B5BC(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Entitlement check failed! - rejecting unentitled client with pid %d", (uint8_t *)v2, 8u);
}

void sub_10040B634(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PRDiagnosticsService] shouldAcceptNewConnection", v1, 2u);
}

void sub_10040B678(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040B6E4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#reg-assist, given nil iso code.", v1, 2u);
}

void sub_10040B728(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040B794(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040B800()
{
  __assert_rtn("-[PRDiagnosticsService publishBytes:amount:]", "PRDiagnosticsService.mm", 509, "amount <= kRemoteProtobufMaxMessageSize");
}

void sub_10040B82C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ble,CBSpatial interrupted.", v2, v3, v4, v5, v6);
}

void sub_10040B860()
{
  sub_1000104D4(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ble,setDeviceRelationshipFlags failed, state is %s", v2, v3, v4, v5, v6);
}

void sub_10040B8E4(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#ble,setDeviceRelationshipFlags[0x%08x] waiting for activation complete", (uint8_t *)v2, 8u);
}

void sub_10040B95C(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#ble,setDeviceRelationshipFlags[0x%08x]", (uint8_t *)v2, 8u);
}

void sub_10040B9D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040BA44(uint64_t a1, NSObject *a2, uint64_t a3, double a4)
{
  int v4 = 134218242;
  double v5 = a4;
  __int16 v6 = 2112;
  uint64_t v7 = a1;
  sub_10001050C((void *)&_mh_execute_header, a2, a3, "#ble,Activation failed [%0.6f s]. Error: %@", (uint8_t *)&v4);
}

void sub_10040BAC0()
{
  sub_1000104D4(__stack_chk_guard);
  if (!v5 & v4) {
    __int16 v6 = "Unknown";
  }
  else {
    __int16 v6 = off_100846210[v2];
  }
  int v7 = 136315394;
  uint64_t v8 = v6;
  __int16 v9 = 2048;
  uint64_t v10 = v3;
  sub_10001050C((void *)&_mh_execute_header, v0, v1, "#ble,Activation completed but session in unexpected state %s [%0.6f s]", (uint8_t *)&v7);
}

void sub_10040BB58()
{
  sub_100010530();
  sub_100010548(5.8081e-34, v1, v2, v3, v4, v5);
  sub_10001050C((void *)&_mh_execute_header, v8, v6, "#ble,addPeerToken %{private}@ failed, state is %s", v7);
}

void sub_10040BBBC()
{
  sub_100010530();
  sub_100010548(5.8081e-34, v1, v2, v3, v4, v5);
  sub_10001050C((void *)&_mh_execute_header, v8, v6, "#ble,removePeerToken %{private}@ failed, state is %s", v7);
}

void sub_10040BC20()
{
  sub_1000104D4(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ble,startAdvertising failed, state is %s", v2, v3, v4, v5, v6);
}

void sub_10040BCA4()
{
  sub_1000104D4(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ble,stopAdvertising failed, state is %s", v2, v3, v4, v5, v6);
}

void sub_10040BD28()
{
  sub_1000104D4(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ble,startScanning failed, state is %s", v2, v3, v4, v5, v6);
}

void sub_10040BDAC()
{
  sub_1000104D4(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ble,startAdvertisingBurstForDeviceDiscovery failed, state is %s", v2, v3, v4, v5, v6);
}

void sub_10040BE30(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "#ble,Overriding advertising T19 payload to burst adv rate: [%@]", (uint8_t *)&v2, 0xCu);
}

void sub_10040BEA8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ble,startAdvertisingBurstForDeviceDiscovery without currently advertising", v2, v3, v4, v5, v6);
}

void sub_10040BEDC()
{
  sub_1000104D4(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ble,clearWifiRangingActiveAdvertisement failed, state is %s", v2, v3, v4, v5, v6);
}

void sub_10040BF60()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ble,setWifiRangingActiveAdvertisement not allowed", v2, v3, v4, v5, v6);
}

void sub_10040BF94()
{
  sub_1000104D4(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ble,setWifiRangingActiveAdvertisement failed, state is %s", v2, v3, v4, v5, v6);
}

void sub_10040C018()
{
  sub_1000104D4(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ble,startScanningWithBurstPeriod failed, state is %s", v2, v3, v4, v5, v6);
}

void sub_10040C09C()
{
  sub_100010578();
  sub_100010560();
  sub_10001050C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#ble,stopScanningAndRemovePeers[%s] failed, state is %s", v1);
}

void sub_10040C13C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ble,PRBLEDiscoverySession nil addrBytes", v2, v3, v4, v5, v6);
}

void sub_10040C170(uint8_t *buf, uint64_t a2, os_log_t log)
{
  *(_DWORD *)std::string buf = 134218240;
  *(void *)(buf + 4) = a2;
  *((_WORD *)buf + 6) = 1024;
  *(_DWORD *)(buf + 14) = 6;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#ble,PRBLEDiscoverySession addrBytes length %lu does not match expected value of %d", buf, 0x12u);
}

void sub_10040C1C8()
{
  sub_100010578();
  sub_100010560();
  sub_10001050C((void *)&_mh_execute_header, v0, (uint64_t)v0, "#ble,allowScreenOffOperation[%s] failed, state is %s", v1);
}

void sub_10040C268()
{
  sub_1000104D4(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ble,setBleRSSIThresholdHint failed, state is %s", v2, v3, v4, v5, v6);
}

void sub_10040C2EC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ble,Discovered device with invalid btAddressData.", v2, v3, v4, v5, v6);
}

void sub_10040C320()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ble,Lost device with invalid btAddressData.", v2, v3, v4, v5, v6);
}

void sub_10040C354(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040C3C0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "[Debug Options] No user debug options provided.", v2, v3, v4, v5, v6);
}

void sub_10040C3F4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "[Range Params] interval_min_ms must be less than or equal to interval_max_ms.", v2, v3, v4, v5, v6);
}

void sub_10040C428(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid interval_max_ms: %d", v4);
}

void sub_10040C460(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid interval_min_ms: %d", v4);
}

void sub_10040C498()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "[Range Params] naccess_slots_min must equal naccess_slots_max for initiator.", v2, v3, v4, v5, v6);
}

void sub_10040C4CC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "[Range Params] naccess_slots_min must be less than or equal to naccess_slots_max for responder.", v2, v3, v4, v5, v6);
}

void sub_10040C500(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid naccess_slots_min: %d", v4);
}

void sub_10040C538(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid dual_ranging_enable: %d", v4);
}

void sub_10040C570(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid debug_flags: %d", v4);
}

void sub_10040C5A8(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_pkt_type: %d", v4);
}

void sub_10040C5E0(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid tx_pkt_type: %d", v4);
}

void sub_10040C618(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_preamble: %d", v4);
}

void sub_10040C650(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid tx_preamble: %d", v4);
}

void sub_10040C688(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_sync_search_ant_mask2: 0x%x", v4);
}

void sub_10040C6C0(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_ant_mask2: 0x%x", v4);
}

void sub_10040C6F8(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid tx_ant_mask2: 0x%x", v4);
}

void sub_10040C730(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_sync_search_ant_mask: 0x%x", v4);
}

void sub_10040C768(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid rx_ant_mask: 0x%x", v4);
}

void sub_10040C7A0(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid tx_ant_mask: 0x%x", v4);
}

void sub_10040C7D8(uint64_t a1, int a2)
{
  sub_100013138(a1, a2, 1.5047e-36);
  sub_10001311C((void *)&_mh_execute_header, v2, v3, "[Range Params] got invalid role: %d", v4);
}

void sub_10040C810()
{
  sub_10001AC8C();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "PRCompanionRanging: actOnRemoteObjectWithBarrierBlock failed. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10040C878()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unexpected PRRangingRequestStatusDidStart #companion-retry", v2, v3, v4, v5, v6);
}

void sub_10040C8AC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unexpected PRRangingRequestStatusFailedToStart #companion-retry", v2, v3, v4, v5, v6);
}

void sub_10040C8E0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unexpected PRRangingRequestStatusStopped #companion-retry", v2, v3, v4, v5, v6);
}

void sub_10040C914()
{
  sub_100010524();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "didReceiveSessionStartNotification: unexpected PRSessionStartNotification properties.", v1, 2u);
}

void sub_10040C954(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001AC98((void *)&_mh_execute_header, a2, a3, "PRRangingManager didReceiveSessionStartNotification but _companionRangingState (%d) != CompanionRangingState::STOPPED #companion-retry", a5, a6, a7, a8, 0);
}

void sub_10040C9C4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001AC98((void *)&_mh_execute_header, a2, a3, "PRRangingManager didReceiveSessionStartNotification but _localRangingState (%d) != CompanionRangingState::STARTING #companion-retry", a5, a6, a7, a8, 0);
}

void sub_10040CA34()
{
  sub_10001AC8C();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "PRCompanionRangingClientProxy failed to parse range enable parameters. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10040CA9C()
{
  sub_10001AC54();
  sub_10001AC6C((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed with error: %@, for device: %@");
}

void sub_10040CB04()
{
  sub_10001AC54();
  sub_10001AC6C((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed to connect to peer: %@, error: %@");
}

void sub_10040CB6C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Disconnected while connecting", v2, v3, v4, v5, v6);
}

void sub_10040CBA0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Disconnected while rose activity incomplete", v2, v3, v4, v5, v6);
}

void sub_10040CBD4()
{
  sub_10001AC54();
  sub_10001AC6C((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed to configure ranging parameters on peer: %@, error: %@");
}

void sub_10040CC3C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unexpected didConfigureRangingOnDevice", v2, v3, v4, v5, v6);
}

void sub_10040CC70()
{
  sub_10001ACB4();
  sub_10001ACCC((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed to initialize ranging on device: %@, errNo: %i");
}

void sub_10040CCD8()
{
  sub_10001AC54();
  sub_10001AC6C((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed to initialize ranging on device: %@, error: %@");
}

void sub_10040CD40()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unexpected didInitRangingOnDevice", v2, v3, v4, v5, v6);
}

void sub_10040CD74()
{
  sub_10001AC54();
  sub_10001AC6C((void *)&_mh_execute_header, v0, v1, "CLFindMyAccessoryManager failed to stop Rose on device: %@, error: %@");
}

void sub_10040CDDC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unexpected didDeinitRangingOnDevice", v2, v3, v4, v5, v6);
}

void sub_10040CE10()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unexpected didStartRangingOnDevice", v2, v3, v4, v5, v6);
}

void sub_10040CE44(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040CEB0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unexpected didCompleteRoseRangingOnDevice", v2, v3, v4, v5, v6);
}

void sub_10040CEE4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unexpected didReceiveRangingTimestampsFromDevice", v2, v3, v4, v5, v6);
}

void sub_10040CF18()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unexpected didPrepareForStartRangingOnDevice", v2, v3, v4, v5, v6);
}

void sub_10040CF4C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Received didPrepareForStartRangingOnDevice with error", v2, v3, v4, v5, v6);
}

void sub_10040CF80(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Unexpected activity state %ld", (uint8_t *)&v2, 0xCu);
}

void sub_10040CFF8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040D030(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040D068(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "tried to run unrecognized activity %@", (uint8_t *)&v2, 0xCu);
}

void sub_10040D0E0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040D118(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040D18C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Could not get wifi chipset or product type. Assuming incapable of wifi ranging.", v2, v3, v4, v5, v6);
}

void sub_10040D1C0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,startRanging called with empty peer list", v2, v3, v4, v5, v6);
}

void sub_10040D1F4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,list of peers have unspecified roles", v2, v3, v4, v5, v6);
}

void sub_10040D228()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,self role was unspecified yet the peer map isn't empty!", v2, v3, v4, v5, v6);
}

void sub_10040D25C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,list of peers request responding but current role is initiating", v2, v3, v4, v5, v6);
}

void sub_10040D290()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,list of peers request initiating but current role is responding", v2, v3, v4, v5, v6);
}

void sub_10040D2C4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,list of peers have mismatched roles", v2, v3, v4, v5, v6);
}

void sub_10040D2F8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,wifi ranging peer map was empty but the role was not unspecified", v2, v3, v4, v5, v6);
}

void sub_10040D32C(unsigned char *a1, unsigned char *a2)
{
  sub_100029E3C(a1, a2);
  sub_100029E20((void *)&_mh_execute_header, v2, v3, "#wifi-service,part of a peer was nil! not addding to peer map", v4);
}

void sub_10040D358()
{
  sub_100029DCC();
  sub_100029E14(v1, v2, v3, 5.7779e-34);
  sub_100029DB0((void *)&_mh_execute_header, "#wifi-service,peer %@ added multiple times with different secure ranging keys", v4, v5);
}

void sub_10040D39C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,attempted to stop when there is no active ranging request", v2, v3, v4, v5, v6);
}

void sub_10040D3D0()
{
  sub_100029DCC();
  sub_100029E14(v1, v2, v3, 5.7779e-34);
  sub_100029DB0((void *)&_mh_execute_header, "#wifi-service,no map entry found when attempting to erase peer %@", v4, v5);
}

void sub_10040D414()
{
  sub_100029DCC();
  sub_100029E14(v1, v2, v3, 5.7779e-34);
  sub_100029DB0((void *)&_mh_execute_header, "#wifi-service,found a map entry for %@ but no peers were erased", v4, v5);
}

void sub_10040D458()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,WiFiManagerClientCreate returned NULL", v2, v3, v4, v5, v6);
}

void sub_10040D48C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040D504(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040D57C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040D5F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040D66C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Still not attached! Releasing wifi manager to start over", v2, v3, v4, v5, v6);
}

void sub_10040D6A0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Found interface attachment through manual check", v2, v3, v4, v5, v6);
}

void sub_10040D6D4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Ranging unsupported", v2, v3, v4, v5, v6);
}

void sub_10040D708()
{
  sub_100029DCC();
  sub_100029E14(v1, v2, v3, 5.7779e-34);
  sub_100029DB0((void *)&_mh_execute_header, "#wifi-service,error callback is nullptr for peer ID: %@", v4, v5);
}

void sub_10040D74C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Resetting state after reporting errors to all clients", v2, v3, v4, v5, v6);
}

void sub_10040D780()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,no awdl device", v2, v3, v4, v5, v6);
}

void sub_10040D7B4()
{
  sub_100029E4C();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "#wifi-service,Start network failed: %d", v2, v3, v4, v5, v6);
}

void sub_10040D81C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Start network failed: kA11OpNotPermitted; retrying",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_10040D850()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Start network failed: EPERM; missing entitlement?",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_10040D884()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Start network failed: EALREADY; we must have tried to start already and will wait for the callback",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_10040D8B8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Start network failed: EPWROFF; cannot range when power is off",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_10040D8EC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Ignoring attempt to start ranging while waiting for callback for existing attempt", v2, v3, v4, v5, v6);
}

void sub_10040D920()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,network not yet ready for ranging", v2, v3, v4, v5, v6);
}

void sub_10040D954(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a2 + 40);
  int v4 = 134218240;
  uint64_t v5 = a1;
  __int16 v6 = 2048;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#wifi-service,No AWDL references to stop network: awdlInterface %p; fNetworkAwdl %p",
    (uint8_t *)&v4,
    0x16u);
}

void sub_10040D9E0()
{
  sub_100029E4C();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "#wifi-service,error %d when attempting to stop AWDL network", v2, v3, v4, v5, v6);
}

void sub_10040DA48()
{
}

void sub_10040DA74()
{
}

void sub_10040DAA0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,WiFiManagerClientCopyInterfaces returned null", v2, v3, v4, v5, v6);
}

void sub_10040DAD4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,could not find AWDL Device Client", v2, v3, v4, v5, v6);
}

void sub_10040DB08()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Cannot update state machine. Manager interface faliure!", v2, v3, v4, v5, v6);
}

void sub_10040DB3C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,AWDL is up but device has no specified role, stopping AWDL", v2, v3, v4, v5, v6);
}

void sub_10040DB70()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,AWDL is up but we don't yet have a self ID!", v2, v3, v4, v5, v6);
}

void sub_10040DBA4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,AWDL is ready for ranging but device has no specified role, stopping AWDL", v2, v3, v4, v5, v6);
}

void sub_10040DBD8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,attempting to set self ID with a null ID", v2, v3, v4, v5, v6);
}

void sub_10040DC0C()
{
  sub_100029E4C();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "#wifi-service,Setting wifi ranging self ID failed with error %d", v2, v3, v4, v5, v6);
}

void sub_10040DC74()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,attempting to set self ID when AWDL is not active", v2, v3, v4, v5, v6);
}

void sub_10040DCA8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Cannot request ranging. WiFi not ready.", v2, v3, v4, v5, v6);
}

void sub_10040DCDC()
{
  sub_100029D98();
  sub_100029DDC((void *)&_mh_execute_header, v0, v1, "#wifi-service,Error starting ranging, wifi error %{public}d (%{public}#X)", v2, v3, v4, v5, v6);
}

void sub_10040DD44(os_log_t log)
{
  int v1 = 134217984;
  uint64_t v2 = 0x3FF0000000000000;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#wifi-service,Ranging start failed: kA11OpNotPermitted; retrying in %f seconds",
    (uint8_t *)&v1,
    0xCu);
}

void sub_10040DDC4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,attempted to initiate wifi ranging with no peers", v2, v3, v4, v5, v6);
}

void sub_10040DDF8()
{
}

void sub_10040DE24()
{
  sub_100029D98();
  sub_100029DDC((void *)&_mh_execute_header, v0, v1, "#wifi-service,Error setting rangeable, wifi error %{public}d (%{public}#X)", v2, v3, v4, v5, v6);
}

__n128 sub_10040DE8C(uint8_t *a1, unint64_t a2, int8x8_t *a3, NSObject *a4)
{
  uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(a2);
  v5.i64[0] = 255;
  v5.i64[1] = 255;
  int8x16_t v6 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v4, (uint64x2_t)xmmword_1004A0060), v5), (uint64x2_t)xmmword_1004A0070), vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v4, (uint64x2_t)xmmword_1004A0040), v5), (uint64x2_t)xmmword_1004A0050), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v4, (uint64x2_t)xmmword_1004A0020), v5), (uint64x2_t)xmmword_1004A0030)));
  *(_DWORD *)a1 = 134217984;
  *a3 = vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  sub_100029DB0((void *)&_mh_execute_header, "#wifi-service,found empty peer list when creating array of peers for key 0x%llx", a1, a4);
  return result;
}

void sub_10040DF38(uint8_t *buf, _DWORD *a2, os_log_t log)
{
  *(_DWORD *)std::string buf = 67109120;
  *a2 = 4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#wifi-service,maximum number of peers already being serviced: %i", buf, 8u);
}

void sub_10040DF84(unsigned char *a1, unsigned char *a2)
{
  sub_100029E3C(a1, a2);
  sub_100029E20((void *)&_mh_execute_header, v2, v3, "#wifi-service,part of a peer was nil! not adding to cfarray of peers", v4);
}

void sub_10040DFB0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,could not find WiFi Device Client", v2, v3, v4, v5, v6);
}

void sub_10040DFE4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040E05C(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)std::string buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#wifi-service,error callback is nullptr for peer ID: %@", buf, 0xCu);
}

void sub_10040E0B4()
{
  sub_100029DCC();
  sub_100029E14(v1, v2, v3, 5.7779e-34);
  sub_100029DB0((void *)&_mh_execute_header, "#wifi-service,readiness callback is nullptr for peer ID: %@", v4, v5);
}

void sub_10040E0F8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,ERROR: no awdl device 1", v2, v3, v4, v5, v6);
}

void sub_10040E12C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040E1A4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,peer was nil! not adding to cfarray of peers", v2, v3, v4, v5, v6);
}

void sub_10040E1D8()
{
  sub_100010524();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "#wifi-service,Didn't expect the 2.4GHz peer to be empty", v1, 2u);
}

void sub_10040E218(unsigned char *a1, unsigned char *a2)
{
  sub_100029E3C(a1, a2);
  sub_100029E20((void *)&_mh_execute_header, v2, v3, "#wifi-service,measurements is empty", v4);
}

void sub_10040E244()
{
  sub_100029DCC();
  sub_100029E14(v1, v2, v3, 5.7779e-34);
  sub_100029DB0((void *)&_mh_execute_header, "#wifi-service,No results callback for peer with matched ranging results. peerID: %@", v4, v5);
}

void sub_10040E288(uint8_t *buf, void *a2, os_log_t log)
{
  *(_DWORD *)std::string buf = 136315138;
  *a2 = "onWiFiDeviceClientRangingCallback2p4GHz";
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "#wifi-service,%s: fPeer2p4GHz should not be null when we are processing ranging results", buf, 0xCu);
}

void sub_10040E2D8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Releasing retained awdl network reference in start network callback", v2, v3, v4, v5, v6);
}

void sub_10040E30C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Got valid network ref at network start with error EALREADY.", v2, v3, v4, v5, v6);
}

void sub_10040E340()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Attempted to start AWDL when it was already up, resetting state", v2, v3, v4, v5, v6);
}

void sub_10040E374()
{
  sub_100029E4C();
  sub_100029DDC((void *)&_mh_execute_header, v0, v1, "#wifi-service,onWiFiDeviceClientStartNetworkCallback got called: error %d (%#x)", v2, v3, v4, v5, v6);
}

void sub_10040E3E8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,Device attachment callback returned but interfaces are still null", v2, v3, v4, v5, v6);
}

void sub_10040E41C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,isLinkDown information missing from state info", v2, v3, v4, v5, v6);
}

void sub_10040E450()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,part of a peer was nil! not addding to peer map", v2, v3, v4, v5, v6);
}

void sub_10040E484()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,stop network callback refcon is NULL", v2, v3, v4, v5, v6);
}

void sub_10040E4B8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,WiFiDeviceClientRangingCallback refcon is NULL", v2, v3, v4, v5, v6);
}

void sub_10040E4EC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,WiFiDeviceClientRangingReportCallback refcon is NULL", v2, v3, v4, v5, v6);
}

void sub_10040E520()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,device attach callback refcon is NULL", v2, v3, v4, v5, v6);
}

void sub_10040E554()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#wifi-service,start network callback refcon is NULL", v2, v3, v4, v5, v6);
}

void sub_10040E588(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "[NIPrivacyAuthorizationManager] asked to present prompt, but no display name.", v1, 2u);
}

void sub_10040E5CC(void *a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)std::string buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#bundle Error while getting bundle proxy for app: %@. Error: %@", buf, 0x16u);
}

void sub_10040E634(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PRRangingService] shouldAcceptNewConnection", v1, 2u);
}

void sub_10040E678()
{
  __assert_rtn("PRCommonConvertTicksToSeconds", "PRCommon.mm", 43, "timebaseResult == KERN_SUCCESS");
}

void sub_10040E6A4(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#wifi,Default value set for \"WiFiServiceNumMeas\" must be 1, 2, 4, or 8. invalid value: %d", (uint8_t *)v2, 8u);
}

void sub_10040E71C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#wifi,ranging role unspecified", v1, 2u);
}

void sub_10040E760()
{
}

void sub_10040E78C()
{
}

void sub_10040E7B8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PRBeaconRangingService] shouldAcceptNewConnection", v1, 2u);
}

void sub_10040E7FC(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "WRTT: Unexpected hardware %u in getUnlockThreshold", (uint8_t *)v2, 8u);
}

void sub_10040E874()
{
}

void sub_10040E8A0()
{
}

void sub_10040E8CC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#ni-ca,Unexpected location type received", v1, 2u);
}

void sub_10040E910()
{
}

void sub_10040E93C()
{
  sub_10001AC8C();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "PRBeaconRanging: actOnRemoteObjectWithBarrierBlock failed. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10040E9A4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to create a beacon listener job.", v2, v3, v4, v5, v6);
}

void sub_10040E9D8()
{
  sub_10001AC8C();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "PRBeaconRangingClientProxy failed to parse range enable parameters. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10040EA40()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "No point to share initiator job defined", v2, v3, v4, v5, v6);
}

void sub_10040EA74()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "createBeaconListenerJob: Configuration Manager Error.", v2, v3, v4, v5, v6);
}

void sub_10040EAA8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "PRBeaconRangingClientProxy: Failed to register for job: point to share responder", v2, v3, v4, v5, v6);
}

void sub_10040EADC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "PRBeaconRangingClientProxy failed to parse range enable parameters.", v2, v3, v4, v5, v6);
}

void sub_10040EB10()
{
  sub_10001AC8C();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "PRBTRanging: actOnRemoteObjectWithBarrierBlock failed. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10040EB78()
{
  sub_10001AC8C();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "CLFindMyAccessoryManager failed with error: %@, for device: %@", v2, 0x16u);
}

void sub_10040EBFC()
{
  sub_10001AC8C();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "PRGenericRanging: actOnRemoteObjectWithBarrierBlock failed. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10040EC64()
{
  sub_10001AC8C();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "PRRangingServiceProxy failed to parse range enable parameters. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10040ECCC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "peerADD passed in is too long", v1, 2u);
}

void sub_10040ED10(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "peerID passed in is too long", v1, 2u);
}

void sub_10040ED54(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = [a2 serviceName];
  int v5 = 138412546;
  uint8_t v6 = v4;
  __int16 v7 = 2112;
  uint64_t v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[PRXPCServicesManager] no service listening for %@, connection: %@", (uint8_t *)&v5, 0x16u);
}

void sub_10040EE10()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ses-container,Cannot add observers. Specialized session does not support observation.", v2, v3, v4, v5, v6);
}

void sub_10040EE44()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ses-container,Cannot remove observers. Specialized session does not support observation.", v2, v3, v4, v5, v6);
}

void sub_10040EE78()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,FORCE CRASH: SESSION ACTIVATE", v2, v3, v4, v5, v6);
}

void sub_10040EEAC()
{
  sub_100056C28();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ses-container,Required parameter missing. Error: %ld", v2, v3, v4, v5, v6);
}

void sub_10040EF18()
{
  sub_100056CB0(__stack_chk_guard);
  sub_100056C54();
  sub_10001AC6C((void *)&_mh_execute_header, v0, v1, "#ses-container,Failed to run specialized session %@. Error: %@");
}

void sub_10040EF80()
{
  sub_100056CB0(__stack_chk_guard);
  sub_100056CBC((void *)&_mh_execute_header, v0, v1, "#ses-container,Failed to configure specialized session %@. Error: %@", v2, v3, v4, v5, 2u);
}

void sub_10040EFF8()
{
  sub_100056CB0(__stack_chk_guard);
  sub_100056C54();
  sub_10001AC6C((void *)&_mh_execute_header, v0, v1, "#ses-container,Failed to configure specialized session %@. Error: %@");
}

void sub_10040F060()
{
  sub_100056CB0(__stack_chk_guard);
  sub_100056C54();
  sub_10001AC6C((void *)&_mh_execute_header, v0, v1, "#ses-container,Failed to create specialized session %@. Error: %@");
}

void sub_10040F0C8()
{
  sub_100056CB0(__stack_chk_guard);
  sub_100056C54();
  sub_10001AC6C((void *)&_mh_execute_header, v0, v1, "#ses-container,Failed to categorize specialized session class %@. Error: %@");
}

void sub_10040F130(uint8_t *buf, uint64_t a2, os_log_t log)
{
  *(_DWORD *)std::string buf = 134217984;
  *(void *)(buf + 4) = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#ses-container,Unable to run session due to activation failure. Activation error code: %ld", buf, 0xCu);
}

void sub_10040F178()
{
  sub_100056C84();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#ses-container,Required parameter missing. Error: %ld", v2, v3, v4, v5, v6);
}

void sub_10040F1E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040F258(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040F2D0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040F344()
{
  sub_100056CD8();
  sub_100056CBC((void *)&_mh_execute_header, v0, v1, "#ses-container,%@: Required parameter missing. Error: %ld", v2, v3, v4, v5, v6);
}

void sub_10040F3B4()
{
  sub_100056CD8();
  sub_100056CBC((void *)&_mh_execute_header, v0, v1, "#ses-container,%@ failed due to session interruptions (Error: %ld). See next log line for interruptions.", v2, v3, v4, v5, v6);
}

void sub_10040F424()
{
  sub_100029DCC();
  sub_100056C6C(v1, v2, v3, 5.778e-34);
  sub_100056C94((void *)&_mh_execute_header, "#ses-container,Configuring local device not authorized. Signing identity: %@, pid: %d.", v4, v5);
}

void sub_10040F468(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040F4D4(uint64_t a1, NSObject *a2)
{
  int v2 = *(_DWORD *)(a1 + 244);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#ses-container,Failed to get bundle identifier for pid: %d. Non-fatal - bundle identifier will be nil", (uint8_t *)v3, 8u);
}

void sub_10040F550()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,UWB provider is nil when requested from NIServerSessionResourceManager", v2, v3, v4, v5, v6);
}

void sub_10040F584()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,WiFi provider is nil when requested from NIServerSessionResourceManager", v2, v3, v4, v5, v6);
}

void sub_10040F5B8(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "#ses-container,Entitlement with integer value %d is out of bounds", (uint8_t *)v2, 8u);
}

void sub_10040F630()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpectedly received didFailWithErrorCode:errorString:", v2, v3, v4, v5, v6);
}

void sub_10040F664()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpectedly received didReceiveNewSolution:", v2, v3, v4, v5, v6);
}

void sub_10040F698()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpectedly received didReceiveSessionStartNotification:", v2, v3, v4, v5, v6);
}

void sub_10040F6CC()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpectedly received didReceiveRemoteData:", v2, v3, v4, v5, v6);
}

void sub_10040F700()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpectedly received serviceRequestDidUpdateStatus:", v2, v3, v4, v5, v6);
}

void sub_10040F734()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ses-container,Error activating BT resource: no token data", v2, v3, v4, v5, v6);
}

void sub_10040F768(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040F7D4()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpected BT state: CBManagerStateUnauthorized", v2, v3, v4, v5, v6);
}

void sub_10040F808()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,Unexpected BT state: CBManagerStateUnsupported", v2, v3, v4, v5, v6);
}

void sub_10040F83C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10040F8A8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ses-container,#interrupt Session interruption ended but reason not present in queue.", v2, v3, v4, v5, v6);
}

void sub_10040F8DC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#ses-container,Fatal error: unsupported platform", v2, v3, v4, v5, v6);
}

void sub_10040F910()
{
}

void sub_10040F93C()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,UWB system is off with unspecified reason", v2, v3, v4, v5, v6);
}

void sub_10040F970()
{
}

void sub_10040F99C()
{
  sub_100010524();
  sub_100056C38((void *)&_mh_execute_header, v0, v1, "#ses-container,received app state unknown.", v2, v3, v4, v5, v6);
}

void sub_10040F9D0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "FORCE CRASH: STARTUP", v1, 2u);
}

void sub_10040FA14(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "unable to set user directory", v1, 2u);
}

void sub_10040FA58(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[PRCompanionRangingService] shouldAcceptNewConnection", v1, 2u);
}

void sub_10040FA9C()
{
}

void sub_10040FAC8()
{
}

void sub_10040FAF4()
{
}

void sub_10040FB20()
{
}

void sub_10040FB4C()
{
}

void sub_10040FB78()
{
}

void sub_10040FBA4()
{
}

void sub_10040FBD0()
{
}

void sub_10040FBFC()
{
}

void sub_10040FC28()
{
}

void sub_10040FC54()
{
}

void sub_10040FC80()
{
}

void sub_10040FCAC()
{
}

void sub_10040FCD8()
{
}

void sub_10040FD04()
{
}

void sub_10040FD30()
{
}

void sub_10040FD5C()
{
}

void sub_10040FD88()
{
}

void sub_10040FDB4()
{
}

void sub_10040FDE0()
{
}

void sub_10040FE0C()
{
}

void sub_10040FE38()
{
}

void sub_10040FE64()
{
}

void sub_10040FE90()
{
}

void sub_10040FEBC()
{
}

void sub_10040FEE8()
{
}

void sub_10040FF14()
{
}

void sub_10040FF40()
{
}

void sub_10040FF6C()
{
}

void sub_10040FF98()
{
}

void sub_10040FFC4()
{
}

void sub_10040FFF0()
{
}

void sub_10041001C()
{
}

void sub_100410048()
{
}

void sub_100410074()
{
}

void sub_1004100A0()
{
}

void sub_1004100CC()
{
}

void sub_1004100F8()
{
}

void sub_100410124()
{
}

void sub_100410150()
{
}

void sub_10041017C()
{
}

void sub_1004101A8()
{
}

void sub_1004101D4()
{
}

void sub_100410200()
{
}

void sub_10041022C()
{
}

void sub_100410258()
{
}

void sub_100410284()
{
}

void sub_1004102B0()
{
}

void sub_1004102DC()
{
}

void sub_100410308()
{
}

void sub_100410334()
{
}

void sub_100410360()
{
}

void sub_10041038C()
{
}

void sub_1004103B8(uint64_t a1, void **a2)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*a2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_10001A970(v3);
  }
}

void sub_1004103F4()
{
}

void sub_100410420()
{
}

void sub_10041044C()
{
}

void sub_100410478()
{
}

void sub_1004104A4()
{
}

void sub_1004104D0()
{
}

void sub_1004104FC()
{
}

void sub_100410528()
{
}

void sub_100410554()
{
}

void sub_100410580()
{
}

void sub_1004105AC()
{
}

void sub_1004105D8()
{
}

void sub_100410604()
{
}

void sub_100410630()
{
}

void sub_10041065C()
{
}

void sub_100410688()
{
}

void sub_1004106B4()
{
}

void sub_1004106E0()
{
}

void sub_10041070C()
{
}

void sub_100410738()
{
}

void sub_100410764()
{
}

void sub_100410790()
{
}

void sub_1004107BC()
{
}

void sub_1004107E8()
{
}

void sub_100410814()
{
}

void sub_100410840()
{
}

void sub_10041086C()
{
  __assert_rtn("coarseSearch", "LutGenerator.cpp", 129, "row >= 0 && column >= 0");
}

void sub_100410898()
{
  __assert_rtn("coarseSearch", "LutGenerator.cpp", 117, "errorTable.size() == kErrorTableSize && errorTable[0].size() == kErrorTableSize");
}

void sub_1004108C4()
{
  __assert_rtn("excludeCone", "LutGenerator.cpp", 161, "errorTable.size() == kErrorTableSize && errorTable[0].size() == kErrorTableSize");
}

void sub_1004108F0(uint64_t a1, void *a2, NSObject *a3)
{
  if (*(char *)(a1 + 63) < 0) {
    a2 = (void *)*a2;
  }
  LODWORD(v3) = 136315138;
  HIDWORD(v3) = a2;
  sub_10014CD18((void *)&_mh_execute_header, (uint64_t)a2, a3, "#lut,setting AoACalculator LUT using file %s failed", v3);
}

void sub_100410968(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1004109A0()
{
}

void sub_1004109CC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100410A04(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100410A3C()
{
  __assert_rtn("loadNNCoeffFromFile", "AoALUTManager.mm", 142, "NNClassifierPtr != nullptr");
}

void sub_100410A68(uint64_t a1, void *a2, NSObject *a3)
{
  if (*(char *)(a1 + 63) < 0) {
    a2 = (void *)*a2;
  }
  LODWORD(v3) = 136315138;
  HIDWORD(v3) = a2;
  sub_10014CD18((void *)&_mh_execute_header, (uint64_t)a2, a3, "#lut,writing LUT file %s fails", v3);
}

void sub_100410AE0(os_log_t log, double a2)
{
  int v2 = 134217984;
  double v3 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#me,MeasEngMetricsCalculator::checkTOACIRDataEvent: firstPathAmplitude <= 0: %3f\n", (uint8_t *)&v2, 0xCu);
}

void sub_100410B5C()
{
  __assert_rtn("addRangeMeasurement", "MeasurementEngineTypes.cpp", 36, "timestampOfOldestMeasurement <= rangeMeasurement.machAbsoluteTimeSec");
}

void sub_100410B88()
{
  __assert_rtn("getRangeOffsetFromMedian", "MeasurementEngineTypes.cpp", 62, "history.size() <= kNumMeasurementsForOutlierCheck");
}

void sub_100410BB4()
{
  __assert_rtn("getAoaHypotheses", "AoACalculator.cpp", 81, "fRevLUTs_ptr != nullptr");
}

void sub_100410BE0()
{
  __assert_rtn("nn_preprocess", "NeuralNetworkClassifier.cpp", 169, "fNNParamsPtr != nullptr");
}

void sub_100410C0C()
{
  __assert_rtn("nn_preprocess", "NeuralNetworkClassifier.cpp", 184, "cir_samples.size() == kNumOfChains && cir_samples[0].size() == kNumOfCirSamplesPerChain");
}

void sub_100410C38()
{
  __assert_rtn("nn_core", "NeuralNetworkClassifier.cpp", 244, "fNNParamsPtr != nullptr");
}

void sub_100410C64()
{
  __assert_rtn("nn_core", "NeuralNetworkClassifier.cpp", 246, "input.size() == kNNLayer0InputDimension");
}

void sub_100410C90()
{
}

void sub_100410CBC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#accessory,download,triggerUpdate,copyFromCLMobileAsset,skipped", v2, v3, v4, v5, v6);
}

void sub_100410CF0(char *a1, uint8_t *buf, os_log_t log)
{
  if (a1[23] >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(char **)a1;
  }
  *(_DWORD *)std::string buf = 136315138;
  *(void *)(buf + 4) = v4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#accessory,download,data of accessory %s not present", buf, 0xCu);
  if (a1[23] < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_100410D64()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#accessory,file queue,invalid PDOA correction file,calBolbPtr is null", v2, v3, v4, v5, v6);
}

void sub_100410D98()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#accessory,file queue,download,dstIsNull", v2, v3, v4, v5, v6);
}

void sub_100410DCC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#accessory,file queue,download,srcIsNull", v2, v3, v4, v5, v6);
}

void sub_100410E00()
{
  __assert_rtn("loadNNCoefFromFile", "AccessoryFileManager.mm", 283, "NNClassifierPtr != nullptr");
}

void sub_100410E2C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#accessory,file queue,ch9 NN is not valid", v2, v3, v4, v5, v6);
}

void sub_100410E60(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#aggr,addRangeResult: no mach continuous time (mach abs = %.9f), ignoring", (uint8_t *)&v3, 0xCu);
}

BOOL sub_100410EDC(os_log_t log, unsigned char *a2)
{
  *(_WORD *)uint64_t v4 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#aggr,addRangeResult: got both AOA and TOA CIR events, purging both!", v4, 2u);
  return *a2 == 0;
}

void sub_100410F38(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "#aggr,RoseMeasurementBuffer::clear", v1, 2u);
}

void sub_100410F7C()
{
  sub_10016015C(__stack_chk_guard);
  sub_100160124();
  sub_10016013C((void *)&_mh_execute_header, v0, v1, "#aggr,haveReceivedRoseMeasurements ticketId %hu targetMac 0x%016llx: no buffer slot", v2, v3);
}

void sub_100410FE4()
{
  sub_10016015C(__stack_chk_guard);
  sub_100160124();
  sub_10016013C((void *)&_mh_execute_header, v0, v1, "#aggr,haveReceivedRoseMeasurements ticketId %hu targetMac 0x%016llx YES", v2, v3);
}

void sub_10041104C()
{
  sub_10016015C(__stack_chk_guard);
  sub_100160124();
  sub_10016013C((void *)&_mh_execute_header, v0, v1, "#aggr,haveReceivedRoseMeasurements ticketId %hu targetMac 0x%016llx NO", v2, v3);
}

void sub_1004110B4(unsigned __int16 a1, uint64_t a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 2048;
  uint64_t v5 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#aggr,sendReceivedRoseMeasurements: no measurements for ticketId %hu targetMac 0x%016llx", (uint8_t *)v3, 0x12u);
}

void sub_100411140()
{
}

void sub_10041116C(unsigned __int16 a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#aggr,failed to obtain device mac address for ticket_id %hu", (uint8_t *)v2, 8u);
}

void sub_1004111E8()
{
  __assert_rtn("sendIfHaveReceivedRoseMeasurementsFromTimestamps", "MeasurementAggregator.cpp", 490, "matchingLocalRangeTimestampEvent.value().ticketId() == matchingRemoteRangeTimestampEvent.value().ticketId()");
}

void sub_100411214()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#me,handleReceivedRoseMeasurements: getRangeResult failed", v2, v3, v4, v5, v6);
}

void sub_100411248()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::getRangeResult: error: localRangeTimestampEvent has no rawLocalEvent", v2, v3, v4, v5, v6);
}

void sub_10041127C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::getRangeResult: error: localRangeTimestampEvent has no machAbsoluteTime", v2, v3, v4, v5, v6);
}

void sub_1004112B0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::getRangeResult: error: localRangeTimestampEvent has no rfChannel", v2, v3, v4, v5, v6);
}

void sub_1004112E4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::getRangeResult: error: remoteRangeTimestampEvent has no rfChannel", v2, v3, v4, v5, v6);
}

void sub_100411318(os_log_t log, double a2)
{
  int v2 = 134217984;
  double v3 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "#me,RoseMeasurementEngine::getRangeResult: error: local and remote timestamp values are inconsistent with measured frequency. Computed range: %lf", (uint8_t *)&v2, 0xCu);
}

void sub_100411394()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::getRangeResult: error: no range result or range timestamps; cannot use measurement set",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_1004113C8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::checkTimestampAndFrequencyConsistency: denominator is zero, returning false", v2, v3, v4, v5, v6);
}

void sub_1004113FC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#me,RoseMeasurementEngine::computeRange: denominator is zero, returning NaN", v2, v3, v4, v5, v6);
}

void sub_100411430()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#lut,In AoaHypothesesFileUtils::prepareRevLutFile, PRFileUtils::writeHeader failed.", v2, v3, v4, v5, v6);
}

void sub_100411464()
{
  sub_1001659E8(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#lut,closeFile(), Could not seekp to PRFileUtils::HeaderV1::kCrcOffset for file %s", v2, v3, v4, v5, v6);
}

void sub_1004114CC()
{
  sub_1001659E8(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#lut,closeFile(), PRFileUtils::generateCrc failed, for file %s", v2, v3, v4, v5, v6);
}

void sub_100411534()
{
}

void sub_100411560()
{
  sub_1001659E8(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#lut,cannot open reverse LUT file %s", v2, v3, v4, v5, v6);
}

void sub_1004115C8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#lut,reading ch9 reverse LUTs failed", v2, v3, v4, v5, v6);
}

void sub_1004115FC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#lut,reading ch5 reverse LUTs failed", v2, v3, v4, v5, v6);
}

void sub_100411630()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#lut,file size does not match expected size", v2, v3, v4, v5, v6);
}

void sub_100411664()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#lut,readOneChannelReverseLUTsFromFile failed", v2, v3, v4, v5, v6);
}

void sub_100411698()
{
  __assert_rtn("writeSingleChannelReverseLUT", "AoAFileUtils.cpp", 162, "(*fRevLUTs_ptr).size() == kNumOfLUT");
}

void sub_1004116C4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "#lut,writeReverseLUTs, AoaHypothesesFileUtils::prepareFile failed.", v2, v3, v4, v5, v6);
}

void sub_1004116F8()
{
  sub_1001659E8(__stack_chk_guard);
  sub_100010500();
  sub_10000B3E0((void *)&_mh_execute_header, v0, v1, "#lut,readNNCoefFromFile:integrity check fails for file %s", v2, v3, v4, v5, v6);
}

void sub_100411760(void *a1)
{
}

void sub_100411790()
{
}

void sub_1004117BC()
{
  __assert_rtn("relayMessage", "CoexProxyObject.cpp", 29, "fDataProvider != nullptr");
}

void sub_1004117E8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "CoexProxy: skip event because EventConsumer is not ready yet", v1, 2u);
}

void sub_100411834()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,Did not get nb_rx_status and(or) mms_rx_status", v2, v3, v4, v5, v6);
}

void sub_100411868(unsigned __int8 a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)std::string buf = 67109120;
  *((_DWORD *)buf + 1) = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "#sp,mms_rx_status = %d", buf, 8u);
}

void sub_1004118B4()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestMeasEngineRoseMeasurementSet", v2, v3, v4, v5, v6);
}

void sub_1004118E8()
{
  __assert_rtn("registerForComputationType", "RoseSolutionProvider.cpp", 88, "type != RoseComputationPreference::Unspecified");
}

void sub_100411914()
{
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "#sp,No computation preference found for ticket id %d", v2, v3, v4, v5, v6);
}

void sub_100411980()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestMeasurement(RoseDeviceMotion)", v2, v3, v4, v5, v6);
}

void sub_1004119B4(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#sp,[Solution Provider] computeAndEmitSensorFusionSolution(imu_data): No ticket IDs is associated with given mac address (0x%llx)", (uint8_t *)&v2, 0xCu);
}

void sub_100411A2C(void *a1, NSObject *a2)
{
  uint64_t v2 = (a1[1] - *a1) / 144;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "#sp,computeAndEmitSensorFusionSolution(imu_data): got %zu solutions", (uint8_t *)&v3, 0xCu);
}

void sub_100411AB4()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,computeAndEmitSensorFusionSolution(imu_data)", v2, v3, v4, v5, v6);
}

void sub_100411AE8()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::RangeResult", v2, v3, v4, v5, v6);
}

void sub_100411B1C()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::CIRData", v2, v3, v4, v5, v6);
}

void sub_100411B50()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::AOACIRDataEvent", v2, v3, v4, v5, v6);
}

void sub_100411B84()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::TOACIRDataEvent", v2, v3, v4, v5, v6);
}

void sub_100411BB8()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::TOACIRDataV2Event", v2, v3, v4, v5, v6);
}

void sub_100411BEC()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::ResponderSuperframeStats", v2, v3, v4, v5, v6);
}

void sub_100411C20()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::TimestampEvent", v2, v3, v4, v5, v6);
}

void sub_100411C54()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::RangeResultDebugEvent", v2, v3, v4, v5, v6);
}

void sub_100411C88()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::RangeResultV2DebugEvent", v2, v3, v4, v5, v6);
}

void sub_100411CBC()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::SessionStartNotification", v2, v3, v4, v5, v6);
}

void sub_100411CF0()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,         RoseRawMeasurement::Type::RangingRateUpdateEvent", v2, v3, v4, v5, v6);
}

void sub_100411D24()
{
  sub_100010524();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "#sp,RoseSolutionProvider got RoseRawMeasurement::Type::Unspecified", v1, 2u);
}

void sub_100411D64()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestMeasurement(RoseRawMeasurement)", v2, v3, v4, v5, v6);
}

void sub_100411D98()
{
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResult: service request database entry has no computation preference for ticket ID: %d; ignoring event",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100411E04()
{
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResult: service request database entry has no UWB rx_ant_mask for ticket ID %d; ignoring event",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100411E70()
{
  sub_10016F0F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "#sp,RoseSolutionProvider::ingestRangeResult: service request database entry has no NB rx_ant_mask for ticket ID %d; ignoring event",
    v1,
    8u);
}

void sub_100411EE8()
{
  __assert_rtn("ingestRangeResult", "RoseSolutionProvider.cpp", 270, "range_rslt.source() == RangeResultSource::Firmware");
}

void sub_100411F14()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResult", v2, v3, v4, v5, v6);
}

void sub_100411F48()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestCIRData: no longer supported by ME, ignoring!", v2, v3, v4, v5, v6);
}

void sub_100411F7C()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestAOACIRDataEvent", v2, v3, v4, v5, v6);
}

void sub_100411FB0()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestTOACIRDataEvent", v2, v3, v4, v5, v6);
}

void sub_100411FE4()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestTOACIRDataV2Event", v2, v3, v4, v5, v6);
}

void sub_100412018()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestSuperframeStats", v2, v3, v4, v5, v6);
}

void sub_10041204C()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestSessionStartNotification", v2, v3, v4, v5, v6);
}

void sub_100412080()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangingRateUpdateEvent", v2, v3, v4, v5, v6);
}

void sub_1004120B4()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestAOACIRDataEvent logged AOACIRDataEvent", v2, v3, v4, v5, v6);
}

void sub_1004120E8()
{
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeTimestampEvent: service request database entry has no rf_channel for ticket ID %d; ignoring event",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_100412154()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResultDebugEvent", v2, v3, v4, v5, v6);
}

void sub_100412188()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestRangeResultDebugV2Event", v2, v3, v4, v5, v6);
}

void sub_1004121BC()
{
}

void sub_1004121E8()
{
  sub_100160124();
  sub_10001ACCC((void *)&_mh_execute_header, v0, v1, "#sp,No computation preference found for ticket ID: %d. Peer: 0x%llx", v2, v3);
}

void sub_100412258()
{
  sub_100160124();
  sub_10001ACCC((void *)&_mh_execute_header, v0, v1, "#sp,Ticket id %d has unspecified solution type preference. Peer: 0x%llx", v2, v3);
}

void sub_1004122C8()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "#sp,RoseSolutionProvider::ingestMeasEngineRoseMeasurementSet: logging rangeResult", v2, v3, v4, v5, v6);
}

void sub_1004122FC(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 64);
  int v4 = 134218240;
  uint64_t v5 = v2;
  __int16 v6 = 2048;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#sp,computeAndEmitSensorFusionSolution(rose_data): failed to convert mach abs time %.9f to mach continuous; ignoring. Peer: 0x%llx",
    (uint8_t *)&v4,
    0x16u);
}

void sub_100412388(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#sp,computeAndEmitSensorFusionSolution(rose_data): RangeResult with no hypotheses, ignoring. Peer: 0x%llx", (uint8_t *)&v3, 0xCu);
}

void sub_100412404()
{
  sub_100160124();
  sub_10001ACCC((void *)&_mh_execute_header, v0, v1, "#sp,computeAndEmitSensorFusionSolution(rose_data): Failed to add rose data to filter. Ticket ID: %d, Peer: 0x%llx", v2, v3);
}

void sub_100412474(uint64_t a1)
{
}

void sub_100412484(uint64_t a1)
{
  int v2 = *(void **)(a1 + 832);
  if (v2)
  {
    *(void *)(a1 + 840) = v2;
    operator delete(v2);
  }
}

void sub_10041249C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to probe proxy objects. Service considered OFF.", v2, v3, v4, v5, v6);
}

void sub_1004124D0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "[RoseServiceProvider] Timed out while waiting for ingestServiceRequest to complete", v2, v3, v4, v5, v6);
}

void sub_100412504()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "[RoseServiceProvider] ingestServiceRequest failed.", v2, v3, v4, v5, v6);
}

void sub_100412538()
{
  sub_100175C04();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "fRequestsDatabase does not have an entry with ticket_id %d", v2, v3, v4, v5, v6);
}

void sub_1004125A0()
{
  sub_100175C04();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "The ticket ID: %d start notification has already been submitted", v2, v3, v4, v5, v6);
}

void sub_100412608(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100412674()
{
  sub_100175C04();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "Could not find ticket id %d in fServiceRequestsDatabase", v2, v3, v4, v5, v6);
}

void sub_1004126DC()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Error updating fServiceRequestsDatabase entry", v2, v3, v4, v5, v6);
}

void sub_100412710()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Got trigger stop, but state is ServiceRequestState::Inactive", v2, v3, v4, v5, v6);
}

void sub_100412744()
{
  sub_100175C04();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "Ticket ID %d not found in requests database.", v2, v3, v4, v5, v6);
}

void sub_1004127AC()
{
  sub_100010524();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "RoseServiceProvider::handleDataEvent", v1, 2u);
}

void sub_1004127EC()
{
  sub_100010524();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "RoseServiceProvider::updateSessionDataPayload", v1, 2u);
}

void sub_10041282C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "[RoseServiceProvider] Cannot service this request. Service is not ready.", v2, v3, v4, v5, v6);
}

void sub_100412860(uint64_t a1)
{
}

void sub_100412884(uint64_t a1)
{
}

void sub_1004128A8(uint64_t a1)
{
}

void sub_1004128B8()
{
}

void sub_1004128E4()
{
}

void sub_100412910()
{
}

void sub_10041293C()
{
}

void sub_100412968()
{
}

void sub_100412994()
{
  __assert_rtn("emitServiceResponse", "RoseServiceProvider.mm", 414, "fServiceClient != nullptr");
}

void sub_1004129C0()
{
}

void sub_1004129EC()
{
}

void sub_100412A18()
{
}

void sub_100412A44()
{
  sub_100175C1C();
  if (v6 != v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v1;
  }
  *(_DWORD *)uint64_t v2 = 136315138;
  *(void *)(v2 + 4) = v8;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[RoseServiceProvider] %s", v4, 0xCu);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void sub_100412AA8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to register computation type.", v2, v3, v4, v5, v6);
}

void sub_100412ADC()
{
}

void sub_100412B08()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "[RoseServiceProvider] RoseInfrastructureEvent::Unspecified", v2, v3, v4, v5, v6);
}

void sub_100412B3C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    sub_100175C14(a1);
  }
}

void sub_100412B4C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
}

void sub_100412B64()
{
}

void sub_100412B90()
{
}

void sub_100412BBC()
{
}

void sub_100412BE8()
{
}

void sub_100412C14()
{
}

void sub_100412C40()
{
}

void sub_100412C6C(uint64_t a1, NSObject *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider]   r1 access_slot_index: %d", (uint8_t *)v3, 8u);
}

void sub_100412CE8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider] mach cont time: UNKNOWN", v1, 2u);
}

void sub_100412D2C(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider] mach cont time: %.6f", (uint8_t *)&v3, 0xCu);
}

void sub_100412DA8(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "#sp,[Solution Provider] mach abs time: %.6f", (uint8_t *)&v3, 0xCu);
}

void sub_100412E24()
{
  __assert_rtn("RoseServiceRequest", "RoseServiceRequest.cpp", 58, "role != serviceattributes::Role::Unspecified");
}

void sub_100412E50()
{
  __assert_rtn("RoseServiceRequest", "RoseServiceRequest.cpp", 59, "mac_mode != serviceattributes::MacMode::Unspecified");
}

void sub_100412E7C()
{
}

void sub_100412EA8()
{
}

void sub_100412ED4()
{
}

void sub_100412F00()
{
}

void sub_100412F2C()
{
}

void sub_100412F58()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 331, "params.updateRate != UpdateRate::Unspecified");
}

void sub_100412F84()
{
}

void sub_100412FB0()
{
}

void sub_100412FDC()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 338, "txSlotSize250Usec >= GR_DEFAULT_TX_MINI_SLOT_SIZE_250us");
}

void sub_100413008()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 339, "rxSlotSize250Usec >= GR_DEFAULT_TX_MINI_SLOT_SIZE_250us");
}

void sub_100413034()
{
}

void sub_100413060()
{
}

void sub_10041308C()
{
}

void sub_1004130B8()
{
  __assert_rtn("grJobRequestAssignInitiatorParameters", "RoseRequestsFactory.cpp", 370, "params.expectedNumberOfPeers == 1");
}

void sub_1004130E4()
{
  __assert_rtn("getGrJobType", "RoseRequestsFactory.cpp", 656, "grType != HSI_GR_TYPE_MAX");
}

void sub_100413110()
{
  __assert_rtn("ServiceRequest", "RoseRequestsFactory.cpp", 851, "aopJobType == aop::AOPRoseJobType::Alisha_CCC || aopJobType == aop::AOPRoseJobType::Alisha_ACWG");
}

void sub_10041313C()
{
}

void sub_100413168()
{
}

void sub_100413194()
{
}

void sub_1004131C0()
{
}

void sub_1004131EC()
{
}

void sub_100413218()
{
}

void sub_100413244()
{
}

void sub_100413270()
{
}

void sub_10041329C()
{
}

void sub_1004132C8()
{
}

void sub_1004132F4()
{
}

void sub_100413320()
{
}

void sub_10041334C()
{
}

void sub_100413378()
{
}

void sub_1004133A4()
{
}

void sub_1004133D0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Client has not provided values for antenna masks, using default values.", v1, 2u);
}

void sub_100413414(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "BluetoothProxyObject received event before event consumer defined. Dropping event.", v1, 2u);
}

void sub_100413458()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to probe bluetooth proxy object.", v2, v3, v4, v5, v6);
}

void sub_10041348C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to probe coex proxy object.", v2, v3, v4, v5, v6);
}

void sub_1004134C0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to probe regulatory proxy object.", v2, v3, v4, v5, v6);
}

void sub_1004134F4()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to probe motion proxy object.", v2, v3, v4, v5, v6);
}

void sub_100413528()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Rose did not become ready in time.", v2, v3, v4, v5, v6);
}

void sub_10041355C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to probe rose proxy object.", v2, v3, v4, v5, v6);
}

void sub_100413590()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] Cannot send scheduling message to AOP.", v2, v3, v4, v5, v6);
}

void sub_1004135C4()
{
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "fRequestsDatabase does not have an entry with ticket_id %d", v2, v3, v4, v5, v6);
}

void sub_100413630()
{
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "Failed to schedule ranging start for ticket ID: %d", v2, v3, v4, v5, v6);
}

void sub_10041369C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to send RangingStart to AOPRoseProxy", v2, v3, v4, v5, v6);
}

void sub_1004136D0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Unsupported or unspecified mac mode.", v2, v3, v4, v5, v6);
}

void sub_100413704()
{
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "Stop Service: No service request matches ticket id %d", v2, v3, v4, v5, v6);
}

void sub_100413770()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to send RangingStop to AOPRoseProxy", v2, v3, v4, v5, v6);
}

void sub_1004137A4()
{
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] Cancel Service: No service request matches ticket id %d", v2, v3, v4, v5, v6);
}

void sub_100413810()
{
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] Cancel Service: Failed to schedule P2P ranging cancel for ticket ID: %d", v2, v3, v4, v5, v6);
}

void sub_10041387C()
{
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] Cancel Service: Failed to send CancelServiceRequest to AOPRoseProxy, ticket ID: %d", v2, v3, v4, v5, v6);
}

void sub_1004138E8()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Proxy objects are not ready", v2, v3, v4, v5, v6);
}

void sub_10041391C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "proxyObjRef is nullptr", v2, v3, v4, v5, v6);
}

void sub_100413950(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 688);
  if (v2) {
    sub_100186D70(v2, a1);
  }
}

void sub_100413964()
{
  sub_100010524();
  sub_10016F0D8((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] Scheduler handleEvent", v2, v3, v4, v5, v6);
}

void sub_100413998()
{
}

void sub_1004139C4()
{
}

void sub_1004139F0()
{
}

void sub_100413A1C()
{
}

void sub_100413A48()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "[AP Scheduler] handleEventInternal AOPRoseEvent unspecified type", v2, v3, v4, v5, v6);
}

void sub_100413A7C()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to send Fatal Log Collection message to AOPRoseProxy", v2, v3, v4, v5, v6);
}

void sub_100413AB0()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "RoseSupervisor reported BT_TIME_SYNC_EVENT_TIMEOUT.", v2, v3, v4, v5, v6);
}

void sub_100413AE4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1001768DC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100186DAC();
  sub_100186D8C((void *)&_mh_execute_header, v8, v9, "RoseScheduler - %s", v10, v11, v12, v13, v14, (uint64_t)__p, v17, v18, 2u);
  if (v19 < 0) {
    operator delete(__pa);
  }
}

void sub_100413B80()
{
  sub_100010524();
  sub_1000104E4((void *)&_mh_execute_header, v0, v1, "Failed to communicate with MotionProxyObject!", v2, v3, v4, v5, v6);
}

void sub_100413BB4()
{
  sub_100186D80();
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "JobStart: Failed to update service request state to Active. Ticket ID: %d", v2, v3, v4, v5, v6);
}

void sub_100413C1C()
{
  sub_100186D80();
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "RangingDidStart: Failed to update service request state to Active. Ticket ID: %d", v2, v3, v4, v5, v6);
}

void sub_100413C84()
{
  sub_100186D80();
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "RangingFailedToStart: Failed to update service request state to Inactive. Ticket ID: %d", v2, v3, v4, v5, v6);
}

void sub_100413CEC()
{
  sub_100186D80();
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "JobStop: Failed to update service request state to Inactive. Ticket ID: %d", v2, v3, v4, v5, v6);
}

void sub_100413D54()
{
  sub_100186D80();
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "RangingStopped: Failed to update service request state to Inactive. Ticket ID: %d", v2, v3, v4, v5, v6);
}

void sub_100413DBC()
{
  sub_100186D80();
  sub_10016F0F4();
  sub_10001AC98((void *)&_mh_execute_header, v0, v1, "RequestInvalidated: Failed to update service request state to Inactive. Ticket ID: %d. Returning.", v2, v3, v4, v5, v6);
}

void sub_100413E24()
{
  sub_100010524();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "[RoseScheduler] ServiceRequestStatusUpdate - Unspecified, cancel current service request.", v1, 2u);
}

void sub_100413E64(int a1)
{
  sub_100185E34(a1, __p);
  sub_100186DAC();
  HIDWORD(v11) = v1;
  sub_100186D8C((void *)&_mh_execute_header, v2, v3, "RoseScheduler::handleServiceRequestStatusUpdate got unexpected status update %s", v4, v5, v6, v7, v8, (uint64_t)__p[0], (uint64_t)__p[1], v10, 2u);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100413F00()
{
}