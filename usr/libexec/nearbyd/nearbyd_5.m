void sub_1002F9C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002FC950((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1002F9C80(uint64_t a1, uint64_t a2)
{
  return sub_1002F9BD4(a1 - 24, a2);
}

void *sub_1002F9C88(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  v5[0] = off_1008605A8;
  v5[1] = a2;
  v5[3] = v5;
  sub_1002F991C(a1, (uint64_t)v5);
  return sub_1002FC950(v5);
}

void sub_1002F9D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FC950((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002F9D34(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  int v4 = *(_DWORD *)(a2 + 4);
  switch(v4)
  {
    case 1:
      if (!*(unsigned char *)(a2 + 20)) {
        sub_10042E560();
      }
      sub_1002F9E54(a1, a2 + 8);
      if (!*(unsigned char *)(a2 + 20)) {
        sub_10000AE44();
      }
      sub_1002F9F8C(a1, (unsigned __int16 *)(a2 + 8));
      break;
    case 2:
      if (!*(unsigned char *)(a2 + 56)) {
        sub_10042E58C();
      }
      unsigned __int16 v5 = *(_WORD *)a2;
      sub_1002FA040(a1, v5, a2 + 24);
      break;
    case 0:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "PRRangingService got unspecified service response");
  }
}

void sub_1002F9E40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002F9E54(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  BOOL v3 = v2 > 9;
  int v4 = (1 << v2) & 0x390;
  if (!v3 && v4 != 0)
  {
    v8 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100004950(__p, off_1008607D0[*(int *)(a2 + 4)]);
      if (v11 >= 0) {
        v9 = __p;
      }
      else {
        v9 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315138;
      v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PRRangingManager::handlePossibleRequestInvalidation - %s", buf, 0xCu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1002FA118(a1, *(_WORD *)a2);
  }
}

void sub_1002F9F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F9F8C(uint64_t a1, unsigned __int16 *a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  sub_1002F963C(a1, *a2, &v5);
  if (v5) {
    (*(void (**)(uint64_t, unsigned __int16 *))(*(void *)v5 + 80))(v5, a2);
  }
  int v4 = v6;
  if (v6)
  {
    sub_10001A970(v4);
  }
}

void sub_1002FA028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10001A970(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FA040(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 56));
  sub_1002F963C(a1, a2, &v6);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 104))(v6, a3);
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10042E5B8();
  }
  if (v7) {
    sub_10001A970(v7);
  }
}

void sub_1002FA0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10001A970(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FA118(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v19 = a2;
  BOOL v3 = (std::recursive_mutex *)(a1 + 64);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
  int v4 = sub_10016F024((void *)(a1 + 232), &v19);
  uint64_t v5 = (uint64_t *)v4;
  if (v4)
  {
    uint64_t v6 = v4[3];
    v7 = (std::__shared_weak_count *)v4[4];
    *(void *)buf = v6;
    v23 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v6)
    {
      v8 = sub_1002FC658((void *)(a1 + 272), buf);
      if (v8)
      {
        uint64_t v11 = v8[5];
        v9 = (uint64_t **)(v8 + 5);
        uint64_t v10 = v11;
        if (!v11) {
          goto LABEL_17;
        }
        v12 = (uint64_t *)v9;
        do
        {
          unsigned int v13 = *(unsigned __int16 *)(v10 + 26);
          BOOL v14 = v13 >= v19;
          if (v13 >= v19) {
            v15 = (uint64_t *)v10;
          }
          else {
            v15 = (uint64_t *)(v10 + 8);
          }
          if (v14) {
            v12 = (uint64_t *)v10;
          }
          uint64_t v10 = *v15;
        }
        while (*v15);
        if (v12 != (uint64_t *)v9 && v19 >= *((unsigned __int16 *)v12 + 13))
        {
          sub_100027218(v9 - 1, v12);
          operator delete(v12);
        }
        else
        {
LABEL_17:
          sub_1002FCE4C((void *)(a1 + 272), buf);
        }
      }
      else
      {
        v17 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_10042E68C((uint64_t *)buf, v17);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_10042E624();
    }
    v18 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v20 = 67109120;
      int v21 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "PRRangingManager: Speculative Cleanup - erasing ticketId (%d) from fRequestToClientMap", v20, 8u);
    }
    sub_10020BB70((void *)(a1 + 232), v5);
    sub_1001B944C(a1 + 3264);
    if (v23) {
      sub_10001A970(v23);
    }
  }
  else
  {
    v16 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Speculative Cleanup: no request found with ticket: %d", buf, 8u);
    }
  }
  std::recursive_mutex::unlock(v3);
}

void sub_1002FA358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_1002FA390(std::recursive_mutex *a1, uint64_t a2)
{
  int v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Enumerating registered service requests", v7, 2u);
  }
  uint64_t v5 = a1 + 1;
  std::recursive_mutex::lock(a1 + 1);
  uint64_t sig = a1[101].__m_.__sig;
  sub_1002FCCA8((uint64_t)v8, a2);
  (*(void (**)(uint64_t, void *))(*(void *)sig + 80))(sig, v8);
  sub_1001D3984(v8);
  std::recursive_mutex::unlock(v5);
}

void sub_1002FA48C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001D3984((uint64_t *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1002FA4B8(uint64_t a1, unint64_t *a2)
{
  int v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client connecting.", v5, 2u);
  }
  if (*a2)
  {
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
    sub_1002FCD40((uint64_t **)(a1 + 208), a2, (uint64_t *)a2);
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 64));
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10042E708();
  }
}

void sub_1002FA580(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1002FA594(uint64_t a1, unint64_t *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10042E770();
  }
  if (*a2)
  {
    int v4 = (std::__shared_weak_count *)a2[1];
    unint64_t v5 = *a2;
    uint64_t v6 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1002FA664(a1, &v5);
    if (v6) {
      sub_10001A970(v6);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10042E73C();
  }
}

void sub_1002FA64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10001A970(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FA664(uint64_t a1, unint64_t *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10042E7E4();
  }
  if (*a2)
  {
    int v4 = (std::recursive_mutex *)(a1 + 64);
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 64));
    unint64_t v5 = *(void **)(a1 + 216);
    if (v5)
    {
      unint64_t v6 = *a2;
      v7 = (uint64_t *)(a1 + 216);
      do
      {
        unint64_t v8 = v5[4];
        BOOL v9 = v8 >= v6;
        if (v8 >= v6) {
          uint64_t v10 = v5;
        }
        else {
          uint64_t v10 = v5 + 1;
        }
        if (v9) {
          v7 = v5;
        }
        unint64_t v5 = (void *)*v10;
      }
      while (*v10);
      if (v7 != (uint64_t *)(a1 + 216) && v6 >= v7[4])
      {
        sub_1002FCE0C((uint64_t **)(a1 + 208), v7);
        uint64_t v11 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Cleanup: removed from client record", buf, 2u);
        }
      }
    }
    v12 = sub_1002FC658((void *)(a1 + 272), a2);
    unsigned int v13 = v12;
    if (v12)
    {
      sub_10016EAE8((uint64_t *)&v25, (uint64_t)(v12 + 4));
      BOOL v14 = v25;
      if (v25 != v26)
      {
        do
        {
          int v15 = *((unsigned __int16 *)v14 + 13);
          (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 6464) + 48))(buf);
          if (v33) {
            sub_1002FBFEC();
          }
          if (!BYTE4(v32))
          {
            v16 = (id)qword_1008ABDE0;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              sub_1002F70F8(buf, v23);
              v20 = v23;
              if (v24 < 0) {
                v20 = (void **)v23[0];
              }
              *(_DWORD *)v27 = 67109378;
              int v28 = v15;
              __int16 v29 = 2080;
              v30 = v20;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Cleanup: Failed to unregister for service with ticket: %d. Error: %s", v27, 0x12u);
              if (v24 < 0) {
                operator delete(v23[0]);
              }
            }

            sub_1002FA118(a1, v15);
          }
          if (v36 && v35 < 0) {
            operator delete(__p);
          }
          v17 = v14[1];
          if (v17)
          {
            do
            {
              v18 = (void **)v17;
              v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (void **)v14[2];
              BOOL v19 = *v18 == v14;
              BOOL v14 = v18;
            }
            while (!v19);
          }
          BOOL v14 = v18;
        }
        while (v18 != v26);
      }
      sub_10002A6C0((void *)(a1 + 272), v13, (uint64_t)buf);
      sub_1002FC2F0((uint64_t)buf, 0);
      sub_10003E96C((uint64_t)&v25, v26[0]);
    }
    else
    {
      int v21 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v22 = *a2;
        *(_DWORD *)buf = 134217984;
        unint64_t v32 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Cleanup: no requests found for client %p", buf, 0xCu);
      }
    }
    std::recursive_mutex::unlock(v4);
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10042E7B0();
  }
}

void sub_1002FA9BC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FAA24@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      unint64_t v8 = (std::__shared_weak_count *)v7[5];
      uint64_t v14 = v7[4];
      int v15 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(void *)(a3 + 24);
      if (!v9) {
        sub_100027894();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v14);
      if (v15) {
        sub_10001A970(v15);
      }
      uint64_t v10 = (void *)v7[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v7[2];
          BOOL v12 = *v11 == (void)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != a2);
  }
  return sub_1002FD0AC(a4, a3);
}

void sub_1002FAB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10001A970(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FAB2C(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_1002FABB0((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1002FAB98(_Unwind_Exception *a1)
{
  sub_10019C998(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002FABB0(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_10025A8FC(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_1002FAC34((uint64_t)a1, a4, (uint64_t)&v8);
    sub_100026D98(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void *sub_1002FAC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_100002DE4(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1002FACB8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1001FD964(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FACD4(uint64_t a1, long long *a2, long long *a3, const void ***a4)
{
  *(void *)a1 = off_100856040;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4((unsigned char *)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_100002DE4((unsigned char *)(a1 + 32), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v8;
  }
  sub_1002FADC8((uint64_t *)(a1 + 56), a4);
  return a1;
}

void sub_1002FAD94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1002FADC8(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002FAE20(a1, *a2, a2 + 1);
  return a1;
}

void sub_1002FAE08(_Unwind_Exception *a1)
{
  sub_10019C998(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002FAE20(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      result = sub_1002FABB0(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      long long v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = (const void ***)v7;
          long long v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          int v4 = (const void **)v8;
        }
        while (!v9);
      }
      int v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void *sub_1002FAEAC@<X0>(void *a1@<X1>, unsigned __int8 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x2C8uLL);
  result = sub_1002FAF10(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1002FAEFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002FAF10(void *a1, void *a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1008601A8;
  sub_1000EC88C(a1 + 3, *a2, *a3);
  return a1;
}

void sub_1002FAF60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002FAF74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008601A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002FAF94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008601A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002FAFE8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1002FB010@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xB8uLL);
  result = sub_1002FB08C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1002FB078(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002FB08C(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1008601F8;
  sub_1002FB1A4((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1002FB0F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002FB108(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008601F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002FB128(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008601F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002FB17C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1002FB1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v9 = *a4;
  *a4 = 0;
  uint64_t v16 = v9;
  sub_1002FB2C8(&v14, a5);
  uint64_t v10 = (std::__shared_weak_count *)a6[1];
  uint64_t v12 = *a6;
  unsigned int v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1002936CC(a2, a3, &v16, &v14, &v12);
  if (v13) {
    sub_10001A970(v13);
  }
  if (v15) {
    sub_10001A970(v15);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1002FB26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14)
{
  if (a11) {
    sub_10001A970(a11);
  }
  if (a13) {
    sub_10001A970(a13);
  }
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1002FB2C8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_1002FB34C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002FB384(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1002FB3B4(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *sub_1002FB3F8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x28uLL);
  uint64_t result = sub_1002FB45C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1002FB448(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002FB45C(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1008602A8;
  sub_1002CDE28(a1 + 3, a2 + 8, a3 + 8);
  return a1;
}

void sub_1002FB4AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002FB4C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008602A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002FB4E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008602A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1002FB540()
{
}

__n128 sub_1002FB554(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1008602F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1002FB5A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1008602F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1002FB5E0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  int v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

uint64_t sub_1002FB62C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002FB66C()
{
}

void sub_1002FB678(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002FB678(a1, *a2);
    sub_1002FB678(a1, a2[1]);
    int v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      sub_10001A970(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_1002FB6D8(uint64_t a1)
{
  sub_1002FB714(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1002FB714(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1002FB758((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_1002FB758(uint64_t a1)
{
  sub_10003E96C(a1 + 16, *(void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_10001A970(v2);
  }
}

void *sub_1002FB7A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0xAA8uLL);
  __n128 result = sub_1002FB834(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1002FB820(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002FB834(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1008603A8;
  sub_1002FB950((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1002FB8A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002FB8B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008603A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002FB8D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008603A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002FB928(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1002FB950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8 = *a5;
  uint64_t v9 = *a6;
  uint64_t v10 = (std::__shared_weak_count *)a7[1];
  uint64_t v11 = *a7;
  uint64_t v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10017029C(a2, a3, a4, v8, v9, &v11);
  if (v12) {
    sub_10001A970(v12);
  }
}

void sub_1002FB9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10001A970(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002FB9D0@<X0>(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x48uLL);
  __n128 result = sub_1002FBA34(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1002FBA20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002FBA34(void *a1, void *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1008603F8;
  sub_10017490C(a1 + 3, *a2, *a3);
  return a1;
}

void sub_1002FBA84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002FBA98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008603F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002FBAB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008603F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002FBB0C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1002FBB34(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  sub_1002FBB98(v2);
  *a1 = v2 + 3;
  a1[1] = v2;

  sub_10001ABCC((uint64_t)a1, v2 + 3, (uint64_t)(v2 + 3));
}

void sub_1002FBB84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002FBB98(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100860448;
  sub_1001FE9FC((uint64_t)(a1 + 3));
  return a1;
}

void sub_1002FBBE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002FBBF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100860448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002FBC14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100860448;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1002FBC68(uint64_t a1)
{
  sub_1002FBC94((uint64_t)&v1, a1 + 24);
}

void sub_1002FBC94(uint64_t a1, uint64_t a2)
{
  std::mutex::~mutex((std::mutex *)(a2 + 16));
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t sub_1002FBCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1002FBD80(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1002FBFE0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100012C10(a1);
}

void sub_1002FBFEC()
{
  exception = __cxa_allocate_exception(8uLL);
}

void *sub_1002FC03C(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unsigned int v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unsigned int v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  uint64_t v16 = operator new(0x38uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = **a4;
  uint64_t v18 = v17[1];
  v16[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  v16[5] = 0;
  v16[6] = 0;
  v16[4] = v16 + 5;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_10002AA24(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    void *v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10) {
          v26 %= v10;
        }
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  unsigned int v13 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1002FC2F0((uint64_t)v28, 0);
  return v13;
}

void sub_1002FC2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FC2F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1002FC2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1002FB758((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t **sub_1002FC348(uint64_t **a1, unsigned __int16 *a2, _WORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 13);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_WORD *)v10 + 13) = *a3;
    sub_100026D98(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *sub_1002FC404(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint8x8_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint8x8_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unsigned int v13 = (void *)(a1 + 16);
  uint8x8_t v11 = operator new(0x28uLL);
  *uint8x8_t v11 = 0;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = **a4;
  v11[3] = 0;
  v11[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  BOOL v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint8x8_t v11 = *v21;
LABEL_38:
    *BOOL v21 = v11;
    goto LABEL_39;
  }
  *uint8x8_t v11 = *v13;
  *unsigned int v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    BOOL v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1002FC63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10020BBBC(v11, v10);
  _Unwind_Resume(a1);
}

void *sub_1002FC658(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  __n128 result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1002FC744(uint64_t a1)
{
  sub_10003E96C(a1 + 16, *(void **)(a1 + 24));
  int8x8_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void *sub_1002FC780(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10016EAE8(a1 + 2, (uint64_t)(a2 + 2));
  return a1;
}

void sub_1002FC7C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10001A970(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FC7E4()
{
}

_DWORD *sub_1002FC7F8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_100860498;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1002FC844(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_100860498;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1002FC874(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 96))(v3, a1 + 8);
  }
  if (v4)
  {
    sub_10001A970(v4);
  }
}

void sub_1002FC8EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10001A970(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FC904(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002FC944()
{
}

void *sub_1002FC950(void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1002FC9D8()
{
}

void *sub_1002FC9EC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_100860528;
  result[1] = v3;
  return result;
}

uint64_t sub_1002FCA34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100860528;
  a2[1] = v2;
  return result;
}

void sub_1002FCA60(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(void *)(a1 + 8));
  }
  if (v4)
  {
    sub_10001A970(v4);
  }
}

void sub_1002FCAD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10001A970(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FCAF0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002FCB30()
{
}

void sub_1002FCB40()
{
}

void *sub_1002FCB54(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1008605A8;
  result[1] = v3;
  return result;
}

uint64_t sub_1002FCB9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1008605A8;
  a2[1] = v2;
  return result;
}

void sub_1002FCBC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t, void, void))(*(void *)v3 + 88))(v3, **(unsigned int **)(a1 + 8), *(unsigned int *)(*(void *)(a1 + 8) + 4));
  }
  if (v4)
  {
    sub_10001A970(v4);
  }
}

void sub_1002FCC44(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10001A970(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FCC5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002FCC9C()
{
}

uint64_t sub_1002FCCA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_1002FCD40(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint8x8_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint8x8_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        return (uint64_t *)v8;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint8x8_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    v10[4] = *a3;
    v10[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100026D98(a1, (uint64_t)v8, v6, v10);
  }
  return v10;
}

uint64_t *sub_1002FCE0C(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_100027218(a1, a2);
  unint64_t v4 = (std::__shared_weak_count *)a2[5];
  if (v4) {
    sub_10001A970(v4);
  }
  operator delete(a2);
  return v3;
}

uint64_t sub_1002FCE4C(void *a1, void *a2)
{
  uint64_t result = (uint64_t)sub_1002FC658(a1, a2);
  if (result)
  {
    sub_10002A6C0(a1, (void *)result, (uint64_t)v4);
    sub_1002FC2F0((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void sub_1002FCEA0()
{
}

__n128 sub_1002FCEB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0xB8uLL);
  *(void *)uint64_t v2 = off_100860628;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1002FCF50(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100860628;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  __n128 result = *(__n128 *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 136);
  long long v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

void sub_1002FCFD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, a1 + 8);
  }
  if (v4)
  {
    sub_10001A970(v4);
  }
}

void sub_1002FD048(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10001A970(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FD060(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002FD0A0()
{
}

uint64_t sub_1002FD0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_1002FD12C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1002FD1C4(float a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (v5 >= 0) {
    long long v6 = a3;
  }
  else {
    long long v6 = (void *)*a3;
  }
  *(float *)a4 = a1;
  *(_DWORD *)(a4 + 4) = v4;
  *(_WORD *)(a4 + 8) = 2080;
  *(void *)(a4 + 10) = v6;
}

void sub_1002FD200(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x12u);
}

void sub_1002FD21C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C888))
  {
    sub_100004950(qword_10089C870, "PRRoseProviderNetworkListener");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C870, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C888);
  }
}

void sub_1002FD2B4(_Unwind_Exception *a1)
{
}

void sub_1002FD2CC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8A8))
  {
    sub_100004950(&qword_10089C890, "com.apple.nearbyd.accessory.download");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C890, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8A8);
  }
}

void sub_1002FD364(_Unwind_Exception *a1)
{
}

void sub_1002FD37C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8C8))
  {
    sub_100004950(&qword_10089C8B0, "com.apple.nearbyd.accessory.files");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C8B0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8C8);
  }
}

void sub_1002FD414(_Unwind_Exception *a1)
{
}

void sub_1002FD42C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C8E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C8E8))
  {
    sub_100004950(qword_10089C8D0, "MA_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C8E8);
  }
}

void sub_1002FD4C4(_Unwind_Exception *a1)
{
}

void sub_1002FD4DC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C908))
  {
    sub_100004950(qword_10089C8F0, "MB_");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C8F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C908);
  }
}

void sub_1002FD574(_Unwind_Exception *a1)
{
}

void sub_1002FD58C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C928))
  {
    sub_100004950(qword_10089C910, "D");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C910, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C928);
  }
}

void sub_1002FD624(_Unwind_Exception *a1)
{
}

void sub_1002FD63C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C948, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C948))
  {
    sub_100004950(&qword_10089C930, "A");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10089C930, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C948);
  }
}

void sub_1002FD6D4(_Unwind_Exception *a1)
{
}

void sub_1002FD6EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C968))
  {
    sub_100004950(qword_10089C950, "FAS.bin");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10089C950, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C968);
  }
}

void sub_1002FD784(_Unwind_Exception *a1)
{
}

void sub_1002FD79C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089C988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089C988))
  {
    qword_10089C970 = 0;
    qword_10089C978 = 0;
    qword_10089C980 = 0;
    v0 = operator new(0x30uLL);
    qword_10089C978 = (uint64_t)(v0 + 3);
    qword_10089C980 = (uint64_t)(v0 + 3);
    _OWORD *v0 = xmmword_1004BF6F8;
    v0[1] = unk_1004BF708;
    v0[2] = xmmword_1004BF718;
    qword_10089C970 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_100008CAC, &qword_10089C970, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089C988);
  }
}

void sub_1002FD858(_Unwind_Exception *a1)
{
}

void sub_1002FD870()
{
  sub_10039D144();
  uint64_t v1 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  uint64_t v3 = std::string::append(&v38, ".bin");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  qword_1008A8080 = v3->__r_.__value_.__r.__words[2];
  xmmword_1008A8070 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A8070, (void *)&_mh_execute_header);
  sub_10039D144();
  int v5 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  unint64_t v7 = std::string::append(&v38, ".bin");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  qword_1008A8098 = v7->__r_.__value_.__r.__words[2];
  xmmword_1008A8088 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A8088, (void *)&_mh_execute_header);
  sub_10039D144();
  long long v9 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v38, ".bin");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  qword_1008A80B0 = v11->__r_.__value_.__r.__words[2];
  xmmword_1008A80A0 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A80A0, (void *)&_mh_execute_header);
  sub_10039D144();
  unsigned int v13 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  float v15 = std::string::append(&v38, ".bin");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  qword_1008A80C8 = v15->__r_.__value_.__r.__words[2];
  xmmword_1008A80B8 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A80B8, (void *)&_mh_execute_header);
  sub_10039D144();
  unint64_t v17 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  size_t v19 = std::string::append(&v38, ".bin");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  qword_1008A80E0 = v19->__r_.__value_.__r.__words[2];
  xmmword_1008A80D0 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A80D0, (void *)&_mh_execute_header);
  sub_10039D144();
  BOOL v21 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  unint64_t v23 = std::string::append(&v38, ".bin");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  qword_1008A80F8 = v23->__r_.__value_.__r.__words[2];
  xmmword_1008A80E8 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A80E8, (void *)&_mh_execute_header);
  sub_10039D144();
  v25 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v38, ".bin");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  qword_1008A8110 = v27->__r_.__value_.__r.__words[2];
  xmmword_1008A8100 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A8100, (void *)&_mh_execute_header);
  sub_10039D144();
  char v29 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v38, ".bin");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  qword_1008A8128 = v31->__r_.__value_.__r.__words[2];
  xmmword_1008A8118 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A8118, (void *)&_mh_execute_header);
  sub_10039D144();
  int v33 = std::string::insert(&v37, 0, "reverseLUT_A");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  char v35 = std::string::append(&v38, ".bin");
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  qword_1008A8140 = v35->__r_.__value_.__r.__words[2];
  xmmword_1008A8130 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008A8130, (void *)&_mh_execute_header);
}

void sub_1002FDEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FE058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1002FE084(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8));
  if (v12)
  {
    long long v6 = [*(id *)(a1 + 32) delegate];
    char v7 = objc_opt_respondsToSelector();

    if (v7)
    {
      long long v8 = [*(id *)(a1 + 32) delegate];
      [v8 DataCallback:v12];
    }
  }
  if (v5)
  {
    long long v9 = [*(id *)(a1 + 32) delegate];
    char v10 = objc_opt_respondsToSelector();

    if (v10)
    {
      uint64_t v11 = [*(id *)(a1 + 32) delegate];
      [v11 ErrorCallback:v5];
    }
  }
}

void sub_1002FE180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002FE2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1002FE310(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8));
  if (v12)
  {
    long long v6 = [*(id *)(a1 + 32) delegate];
    char v7 = objc_opt_respondsToSelector();

    if (v7)
    {
      long long v8 = [*(id *)(a1 + 32) delegate];
      [v8 DataCallback:v12];
    }
  }
  if (v5)
  {
    long long v9 = [*(id *)(a1 + 32) delegate];
    char v10 = objc_opt_respondsToSelector();

    if (v10)
    {
      uint64_t v11 = [*(id *)(a1 + 32) delegate];
      [v11 ErrorCallback:v5];
    }
  }
}

void sub_1002FE40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002FE76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void *sub_1002FE83C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_1000257D8();
  }
  return operator new(48 * a2);
}

void *sub_1002FE884@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_1008609C8)[a1]);
}

void *sub_1002FE898@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100860A20)[a1]);
}

void *sub_1002FE8AC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100860A68)[a1]);
}

void *sub_1002FE8C0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100860A88)[a1]);
}

void sub_1002FEBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FF138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Unwind_Resume(a1);
}

void sub_1002FF38C(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1002FF480(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1002FF508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FF614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002FF780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FFBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002FFE64(_Unwind_Exception *a1)
{
  long long v6 = v4;

  _Unwind_Resume(a1);
}

void sub_100300038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100300280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100300360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100300400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100300620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10030065C(uint64_t a1)
{
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)_NIServerTestWiFiOnlySession;
  long long v2 = [[super resourcesManager];
  uint64_t v3 = [v2 remote];
  [v3 uwbSessionDidFailWithError:*(void *)(a1 + 40)];
}

void sub_1003006D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003007C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100300930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100300A64(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 64))
  {
    v4.receiver = *(id *)(a1 + 32);
    v4.super_class = (Class)_NIServerTestWiFiOnlySession;
    long long v2 = [[super resourcesManager];
    uint64_t v3 = [v2 remote];
    [v3 didUpdateNearbyObjects:*(void *)(a1 + 40)];
  }
}

void sub_100300AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100300BF0(uint64_t a1)
{
  return a1;
}

void sub_100300C1C(uint64_t a1)
{
  operator delete();
}

void *sub_100300C68(uint64_t a1)
{
  long long v2 = operator new(0x10uLL);
  *long long v2 = off_100860858;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100300CC0(uint64_t a1, void *a2)
{
  *a2 = off_100860858;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100300D08(uint64_t a1)
{
}

void sub_100300D10(id *a1)
{
  operator delete(a1);
}

id sub_100300D4C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 8) wifiRangingRangeResults:a2];
}

uint64_t sub_100300D58(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008608B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100300D98()
{
  return &off_1008608B8;
}

uint64_t sub_100300DA4(uint64_t a1)
{
  return a1;
}

void sub_100300DD0(uint64_t a1)
{
  operator delete();
}

void *sub_100300E1C(uint64_t a1)
{
  long long v2 = operator new(0x10uLL);
  *long long v2 = off_1008608D8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100300E74(uint64_t a1, void *a2)
{
  *a2 = off_1008608D8;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100300EBC(uint64_t a1)
{
}

void sub_100300EC4(id *a1)
{
  operator delete(a1);
}

id sub_100300F00(uint64_t a1, int *a2)
{
  int v3 = *a2;
  return [*(id *)(a1 + 8) wifiRangingRangeError:&v3];
}

uint64_t sub_100300F30(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100860938)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100300F70()
{
  return &off_100860938;
}

uint64_t sub_100300F7C(uint64_t a1)
{
  return a1;
}

void sub_100300FA8(uint64_t a1)
{
  operator delete();
}

void *sub_100300FF4(uint64_t a1)
{
  long long v2 = operator new(0x10uLL);
  *long long v2 = off_100860958;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10030104C(uint64_t a1, void *a2)
{
  *a2 = off_100860958;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100301094(uint64_t a1)
{
}

void sub_10030109C(id *a1)
{
  operator delete(a1);
}

id sub_1003010D8(uint64_t a1, int *a2)
{
  int v3 = *a2;
  return [*(id *)(a1 + 8) wifiRangingReadiness:&v3];
}

uint64_t sub_100301108(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008609B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100301148()
{
  return &off_1008609B8;
}

void sub_100301154()
{
  v10[0] = xmmword_1004C0170;
  v10[1] = unk_1004C0180;
  sub_1001A003C((uint64_t)&unk_1008A9AE8, (int *)v10, 4);
  xmmword_1008A9B00 = xmmword_1004B7660;
  *(_OWORD *)algn_1008A9B10 = xmmword_1004B7670;
  qword_1008A9B28 = 0;
  unk_1008A9B30 = 0;
  qword_1008A9B20 = 0x3FD999999999999ALL;
  unk_1008A9B38 = xmmword_1004B7680;
  dword_1008A9B48 = 5;
  qword_1008A9B50 = 0x4000000000000000;
  dword_1008A9B58 = 5;
  byte_1008A9B60 = 0;
  *(void *)&algn_1008A9B61[3] = 0x30000000ALL;
  xmmword_1008A9B70 = xmmword_1004B7690;
  unk_1008A9B80 = xmmword_1004B76A0;
  xmmword_1008A9B90 = xmmword_1004B76B0;
  qword_1008A9BA0 = 0x3FE3333333333333;
  dword_1008A9BA8 = 3;
  xmmword_1008A9BB0 = xmmword_1004B76C0;
  unk_1008A9BC0 = xmmword_1004B76A0;
  xmmword_1008A9BD0 = xmmword_1004B7690;
  qword_1008A9BE0 = 0x3FE3333333333333;
  byte_1008A9BE8 = 0;
  xmmword_1008A9BF0 = xmmword_1004B76D0;
  unk_1008A9C00 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v8 = _Q0;
  xmmword_1008A9C10 = _Q0;
  qword_1008A9C20 = 0xBFD3333333333333;
  xmmword_1008A9C28 = xmmword_1004B76F0;
  qword_1008A9C38 = 0x3E99999A40000000;
  xmmword_1008A9C40 = xmmword_1004B7670;
  qword_1008A9C58 = 0;
  unk_1008A9C60 = 0;
  qword_1008A9C50 = 0x3FD999999999999ALL;
  xmmword_1008A9C68 = xmmword_1004B7680;
  dword_1008A9C78 = 5;
  qword_1008A9C80 = 0x4000000000000000;
  dword_1008A9C88 = 4;
  qword_1008A9C90 = 0x300000008;
  qword_1008A9C98 = 0xC04E800000000000;
  unint64_t v9 = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)&unk_1008A9CA0, (double *)&v9, 1);
  xmmword_1008A9CB8 = xmmword_1004B7700;
  qword_1008A9CC8 = 0x4024000000000000;
  dword_1008A9CD0 = 45;
  byte_1008A9CD8 = 0;
  byte_1008A9CF0 = 0;
  qword_1008A9CF8 = 0;
  byte_1008A9D00 = 0;
  dword_1008A9D04 = 1;
  byte_1008A9D08 = 1;
  xmmword_1008A9D10 = xmmword_1004B7710;
  unk_1008A9D20 = xmmword_1004B7720;
  xmmword_1008A9D30 = v8;
  qword_1008A9D40 = 0xC059000000000000;
  xmmword_1008A9D48 = xmmword_1004B7730;
  qword_1008A9D58 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008A9D60 = xmmword_1004B7670;
  qword_1008A9D70 = 0x3FD999999999999ALL;
  qword_1008A9D80 = 0;
  qword_1008A9D78 = 0;
  xmmword_1008A9D88 = xmmword_1004B7680;
  dword_1008A9D98 = 5;
  qword_1008A9DA0 = 0x4000000000000000;
  dword_1008A9DA8 = 10;
  qword_1008A9DB0 = 0x4034000000000000;
  dword_1008A9DB8 = 3;
  xmmword_1008A9DC0 = xmmword_1004B7740;
  __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008A9AE8, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_72, &off_10089F488, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_73, &off_10089F490, (void *)&_mh_execute_header);
  qword_1008A9DD8 = 0;
  unk_1008A9DE0 = 0;
  qword_1008A9DD0 = 0;
  long long v6 = operator new(0x40uLL);
  qword_1008A9DD8 = (uint64_t)(v6 + 4);
  unk_1008A9DE0 = v6 + 4;
  _OWORD *v6 = xmmword_1004C0190;
  v6[1] = unk_1004C01A0;
  v6[2] = xmmword_1004C01B0;
  void v6[3] = unk_1004C01C0;
  qword_1008A9DD0 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A9DD0, (void *)&_mh_execute_header);
  qword_1008A9DF0 = 0;
  unk_1008A9DF8 = 0;
  qword_1008A9DE8 = 0;
  char v7 = operator new(0x10uLL);
  qword_1008A9DF0 = (uint64_t)(v7 + 1);
  unk_1008A9DF8 = v7 + 1;
  _OWORD *v7 = xmmword_1004C01D0;
  qword_1008A9DE8 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008A9DE8, (void *)&_mh_execute_header);
}

void sub_100301514(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1003015AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003016FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100301968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  os_unfair_lock_unlock(v14);
  _Unwind_Resume(a1);
}

void sub_1003019B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  double v5 = *(double *)(a1 + 40);
  [v4 timestamp];
  if (v5 - v6 <= *(double *)(a1 + 48))
  {
    [*(id *)(a1 + 32) addObject:v4];
  }
  else
  {
    char v7 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#recent-obj-cache,Result too old: %@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_100301A90(_Unwind_Exception *exception_object)
{
}

int64_t sub_100301AA8(id a1, NINearbyObject *a2, NINearbyObject *a3)
{
  id v4 = a3;
  [(NINearbyObject *)a2 distance];
  float v6 = v5;
  [(NINearbyObject *)v4 distance];
  if (v6 < v7) {
    int64_t v8 = -1;
  }
  else {
    int64_t v8 = v6 > v7;
  }

  return v8;
}

void sub_100301B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100301C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100301D2C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) initAccessoryListener];
}

void sub_100301F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003022F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void sub_1003023D0(uint64_t a1)
{
  long long v2 = [*(id *)(a1 + 32) userInfo];
  int v3 = [v2 objectForKey:EAAccessoryKey];
  id v4 = qword_1008A9E00;
  if (os_log_type_enabled((os_log_t)qword_1008A9E00, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412546;
    float v6 = v3;
    __int16 v7 = 2112;
    int64_t v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "regulatory,acc,connected,accessory,%@,userinfo,%@", (uint8_t *)&v5, 0x16u);
  }
  [*(id *)(a1 + 40) accessoryNotify:v3 isAttached:1];
}

void sub_1003024C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100302580(uint64_t a1)
{
  long long v2 = [*(id *)(a1 + 32) userInfo];
  int v3 = [v2 objectForKey:EAAccessoryKey];
  id v4 = qword_1008A9E00;
  if (os_log_type_enabled((os_log_t)qword_1008A9E00, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412546;
    float v6 = v3;
    __int16 v7 = 2112;
    int64_t v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "regulatory,acc,disconnected,accessory,%@,userinfo,%@", (uint8_t *)&v5, 0x16u);
  }
  [*(id *)(a1 + 40) accessoryNotify:v3 isAttached:0];
}

void sub_100302674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100302934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100302BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100302CBC(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      float v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      float v6 = a3[1];
    }
    if (v5 >= 0) {
      __int16 v7 = (unsigned __int8 *)a3;
    }
    else {
      __int16 v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        id v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        id v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

unsigned __int8 *sub_100302D74(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100003624(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100007880(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_10030300C(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_10002AA24(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_100302FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_10003B4EC((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10030300C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  id result = v8 + 16;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    id result = sub_100002DE4(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)id result = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10030309C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10003B4EC(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1003030B8(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10002A6C0(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  __p = 0;
  if (v3) {
    sub_10003B4EC((uint64_t)&v6, v3);
  }
  return v2;
}

void sub_100303104()
{
  qword_1008A9E00 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
}

id sub_100303158()
{
  v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___UWBSessionServerProtocol];
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  id v67 = [v1 initWithObjects:v2, v3, objc_opt_class(), 0];
  [v0 setClasses:forSelector:argumentIndex:ofReply:];
  id v4 = objc_alloc((Class)NSSet);
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  id v66 = [v4 initWithObjects:v5, v6, v7, objc_opt_class(), 0];
  [v0 setClasses:forSelector:argumentIndex:ofReply:];
  id v8 = objc_alloc((Class)NSSet);
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  id v65 = [v8 initWithObjects:v9, v10, objc_opt_class(), 0];
  [v0 setClasses:forSelector:argumentIndex:ofReply:];
  id v11 = objc_alloc((Class)NSMutableSet);
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  uint64_t v14 = objc_opt_class();
  uint64_t v15 = objc_opt_class();
  uint64_t v16 = objc_opt_class();
  id v68 = [v11 initWithObjects:v12, v13, v14, v15, v16, objc_opt_class(), 0];
  v74[0] = objc_opt_class();
  v74[1] = objc_opt_class();
  v74[2] = objc_opt_class();
  v74[3] = objc_opt_class();
  v64 = +[NSArray arrayWithObjects:v74 count:4];
  [v68 addObjectsFromArray:];
  v73[0] = objc_opt_class();
  v73[1] = objc_opt_class();
  v73[2] = objc_opt_class();
  v63 = +[NSArray arrayWithObjects:v73 count:3];
  [v68 addObjectsFromArray:];
  v72[0] = objc_opt_class();
  v72[1] = objc_opt_class();
  v72[2] = objc_opt_class();
  v72[3] = objc_opt_class();
  v72[4] = objc_opt_class();
  v72[5] = objc_opt_class();
  v59 = +[NSArray arrayWithObjects:v72 count:6];
  [v68 addObjectsFromArray:];
  v71[0] = objc_opt_class();
  v71[1] = objc_opt_class();
  v58 = +[NSArray arrayWithObjects:v71 count:2];
  [v68 addObjectsFromArray:];
  uint64_t v70 = objc_opt_class();
  v60 = +[NSArray arrayWithObjects:&v70 count:1];
  [v68 addObjectsFromArray:];
  v69[0] = objc_opt_class();
  v69[1] = objc_opt_class();
  v69[2] = objc_opt_class();
  v61 = +[NSArray arrayWithObjects:v69 count:3];
  [v68 addObjectsFromArray:];
  id v17 = objc_alloc((Class)NSSet);
  uint64_t v18 = objc_opt_class();
  uint64_t v19 = objc_opt_class();
  id v62 = [v17 initWithObjects:v18, v19, objc_opt_class(), 0];
  unint64_t v20 = [v68 setByAddingObjectsFromSet:];
  [v0 setClasses:v20 forSelector:"runWithConfiguration:reply:" argumentIndex:0 ofReply:0];

  [v0 setClass:objc_opt_class() forSelector:"_addObject:reply:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"_removeObject:reply:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"processDCKMessage:reply:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"processDCKMessage:reply:" argumentIndex:0 ofReply:1];
  [v0 setClass:objc_opt_class() forSelector:"processDCKMessage:reply:" argumentIndex:1 ofReply:1];
  [v0 setClass:objc_opt_class() forSelector:"processBluetoothHostTimeSyncWithType:btcClockTicks:eventCounter:reply:" argumentIndex:0 ofReply:1];
  [v0 setClass:objc_opt_class() forSelector:"isRangingLimitExceeded:" argumentIndex:1 ofReply:1];
  id v21 = objc_alloc((Class)NSSet);
  uint64_t v22 = objc_opt_class();
  uint64_t v23 = objc_opt_class();
  id v57 = [v21 initWithObjects:v22, v23, objc_opt_class(), 0];
  [v0 setClasses:forSelector:argumentIndex:ofReply:];
  [v0 setClass:objc_opt_class() forSelector:"_processCarKeyEvent:reply:" argumentIndex:0 ofReply:1];
  [v0 setClass:objc_opt_class() forSelector:"processAcwgM1Msg:withSessionTriggerReason:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"processAcwgM3Msg:" argumentIndex:0 ofReply:0];
  id v24 = objc_alloc((Class)NSSet);
  uint64_t v25 = objc_opt_class();
  id v55 = [v24 initWithObjects:v25, objc_opt_class(), 0];
  [v0 setClasses:forSelector:argumentIndex:ofReply:];
  id v56 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v0 setClasses:forSelector:argumentIndex:ofReply:];
  id v26 = objc_alloc((Class)NSSet);
  uint64_t v27 = objc_opt_class();
  uint64_t v28 = objc_opt_class();
  id v54 = [v26 initWithObjects:v27, v28, objc_opt_class(), 0];
  [v0 setClasses:forSelector:argumentIndex:ofReply:];
  id v29 = objc_alloc((Class)NSSet);
  uint64_t v30 = objc_opt_class();
  id v31 = [v29 initWithObjects:v30, objc_opt_class(), 0];
  [v0 setClasses:v31 forSelector:"setLocalDeviceCanInteract:withDiscoveryTokens:reply:" argumentIndex:1 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"setLocalDeviceCanInteract:withDiscoveryTokens:reply:" argumentIndex:0 ofReply:1];
  [v0 setClasses:v31 forSelector:"setLocalDeviceInteractableDiscoveryTokens:reply:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"setLocalDeviceInteractableDiscoveryTokens:reply:" argumentIndex:0 ofReply:1];
  [v0 setClasses:v31 forSelector:"getInteractableDiscoveryTokens:" argumentIndex:0 ofReply:1];
  [v0 setClass:objc_opt_class() forSelector:"getInteractableDiscoveryTokens:" argumentIndex:1 ofReply:1];
  [v0 setClasses:v31 forSelector:"getActivelyInteractingDiscoveryTokens:" argumentIndex:0 ofReply:1];
  [v0 setClass:objc_opt_class() forSelector:"getActivelyInteractingDiscoveryTokens:" argumentIndex:1 ofReply:1];
  id v32 = objc_alloc((Class)NSSet);
  uint64_t v33 = objc_opt_class();
  uint64_t v34 = objc_opt_class();
  id v53 = [v32 initWithObjects:v33, v34, objc_opt_class(), 0];
  [v0 setClasses:forSelector:argumentIndex:ofReply:];
  [v0 setClass:objc_opt_class() forSelector:"getLocalDevicePrintableState:" argumentIndex:1 ofReply:1];
  id v35 = objc_alloc((Class)NSSet);
  uint64_t v36 = objc_opt_class();
  uint64_t v37 = objc_opt_class();
  uint64_t v38 = objc_opt_class();
  uint64_t v39 = objc_opt_class();
  uint64_t v40 = objc_opt_class();
  uint64_t v41 = objc_opt_class();
  uint64_t v42 = objc_opt_class();
  id v43 = [v35 initWithObjects:v36, v37, v38, v39, v40, v41, v42, objc_opt_class(), 0];
  [v0 setClasses:v43 forSelector:"_processFindingEvent:reply:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"_processFindingEvent:reply:" argumentIndex:0 ofReply:1];
  id v44 = objc_alloc((Class)NSSet);
  uint64_t v45 = objc_opt_class();
  uint64_t v46 = objc_opt_class();
  id v47 = [v44 initWithObjects:v45, v46, objc_opt_class(), 0];
  [v0 setClasses:v47 forSelector:"setLocalDeviceDebugParameters:reply:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"setLocalDeviceDebugParameters:reply:" argumentIndex:0 ofReply:1];
  id v48 = objc_alloc((Class)NSSet);
  uint64_t v49 = objc_opt_class();
  uint64_t v50 = objc_opt_class();
  id v51 = [v48 initWithObjects:v49, v50, objc_opt_class(), 0];
  [v0 setClasses:v51 forSelector:"_processSystemEvent:reply:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"_processSystemEvent:reply:" argumentIndex:0 ofReply:1];

  return v0;
}

void sub_100303DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33)
{
  _Unwind_Resume(a1);
}

id sub_100303F7C()
{
  v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___UWBSessionDelegateProxyProtocol];
  [v0 setClass:objc_opt_class() forSelector:"didUpdateLocalDiscoveryToken:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"uwbSessionDidInvalidateWithError:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"uwbSessionDidFailWithError:" argumentIndex:0 ofReply:0];
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  id v7 = [v1 initWithObjects:v2, v3, v4, v5, v6, nil];
  [v0 setClasses:v7 forSelector:"didUpdateNearbyObjects:" argumentIndex:0 ofReply:0];
  [v0 setClasses:v7 forSelector:"didRemoveNearbyObjects:withReason:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"didDiscoverNearbyObject:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"object:didUpdateRegion:previousRegion:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"object:didUpdateRegion:previousRegion:" argumentIndex:1 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"object:didUpdateRegion:previousRegion:" argumentIndex:2 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"relayDCKMessage:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"didProcessAcwgM1MsgWithResponse:error:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"didProcessAcwgM3MsgWithResponse:error:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"didProcessAcwgRangingSessionResumeRequestMsgWithResponse:error:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"didReceiveRangingAuthRecommendation:forObject:" argumentIndex:1 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"didUpdateAlgorithmState:forObject:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"didUpdateAlgorithmState:forObject:" argumentIndex:1 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"systemDidUpdateState:" argumentIndex:0 ofReply:0];
  [v0 setClass:objc_opt_class() forSelector:"systemDidUpdateResourceUsageLimitExceeded:forSessionConfigurationTypeWithName:" argumentIndex:1 ofReply:0];

  return v0;
}

void sub_10030430C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef sub_10030432C(unint64_t a1)
{
  if (a1 > 7) {
    return @"AirplaneModeActive";
  }
  else {
    return off_100860AE8[a1];
  }
}

CFStringRef sub_100304350(uint64_t a1)
{
  CFStringRef v1 = @"Timeout";
  if (a1 == 1) {
    CFStringRef v1 = @"PeerEnded";
  }
  if (a1 == 2) {
    return @"LocalForceRemoved";
  }
  else {
    return v1;
  }
}

void *sub_10030437C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100860ED8)[a1]);
}

void *sub_100304390@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100860F30)[a1]);
}

void *sub_1003043A4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100860F78)[a1]);
}

void *sub_1003043B8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100860F98)[a1]);
}

void sub_1003043CC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *(void *)a1 = off_100860B38;
  *(void *)(a1 + 8) = off_100860C00;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)sub_100007D00() + 144);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = dispatch_queue_create("com.apple.nearbyd.regulatory", 0);
  sub_1002C0FF8(a1 + 48);
  *(unsigned char *)(a1 + 272) = 0;
  uint64_t v6 = *(void **)(a1 + 40);
  v9[0] = off_100860D58;
  v9[1] = a1;
  v9[3] = v9;
  v8[0] = off_100860DD8;
  v8[1] = a1;
  v8[3] = v8;
  v7[0] = off_100860E58;
  v7[1] = a1;
  v7[3] = v7;
  sub_1001F79F8((_DWORD *)(a1 + 280), v6);
}

void sub_100304730(_Unwind_Exception *a1)
{
  sub_1001F7BD4(v4);
  sub_100304B70(v3);

  _Unwind_Resume(a1);
}

BOOL sub_1003047E0(uint64_t a1)
{
  return sub_1003047E8(*(void *)(a1 + 32));
}

BOOL sub_1003047E8(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  if (*(unsigned char *)(a1 + 272)) {
    return 1;
  }
  if (MKBDeviceUnlockedSinceBoot() != 1) {
    return *(unsigned char *)(a1 + 272) != 0;
  }
  uint64_t v3 = qword_1008A9E08;
  if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#reg-prov,regulatory provider processing device unlocked since boot", v5, 2u);
  }
  uint64_t v4 = sub_100006A00();
  sub_1001F7BD8(a1 + 280);
  sub_1003CAA6C((uint64_t)v4);
  sub_1001FB238(a1 + 280);
  BOOL result = 1;
  *(unsigned char *)(a1 + 272) = 1;
  return result;
}

char *sub_1003048B8(uint64_t a1)
{
  CFStringRef v1 = sub_100304910(*(void *)(a1 + 32));
  uint64_t v2 = sub_10002DA78(@"PRRegulatoryProvider", v1);

  return v2;
}

void sub_100304900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100304910(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
  uint64_t v2 = objc_opt_new();
  [v2 addObject:@"GeoMonitor"];
  uint64_t v4 = sub_1001FBA5C(a1 + 280);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100307434;
  v14[3] = &unk_100857048;
  id v5 = v2;
  id v15 = v5;
  [v4 enumerateObjectsUsingBlock:v14];
  [v5 addObject:@"Settings"];
  uint64_t v6 = sub_1002C352C(a1 + 48);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1003074B0;
  v12[3] = &unk_100857048;
  id v7 = v5;
  id v13 = v7;
  [v6 enumerateObjectsUsingBlock:v12];
  if (*(void *)(a1 + 2160))
  {
    [v7 addObject:@"Narrowband SAR"];
    id v8 = [*(id *)(a1 + 2160) printableStateOnQueue];

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _OWORD v10[2] = sub_10030752C;
    v10[3] = &unk_100857048;
    id v11 = v7;
    [v8 enumerateObjectsUsingBlock:v10];
  }
  else
  {
    id v8 = v6;
  }

  return v7;
}

void sub_100304B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100304B70(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100304BE0(uint64_t a1)
{
  *(void *)a1 = off_100860B38;
  *(void *)(a1 + 8) = off_100860C00;

  sub_1001F7BD4(a1 + 280);
  std::mutex::~mutex((std::mutex *)(a1 + 200));
  sub_10003E96C(a1 + 176, *(void **)(a1 + 184));
  sub_10015E1A0(a1 + 152, *(void **)(a1 + 160));
  sub_10003E96C(a1 + 128, *(void **)(a1 + 136));
  sub_10015E1A0(a1 + 104, *(void **)(a1 + 112));
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }

  return a1;
}

uint64_t sub_100304CC4(uint64_t a1)
{
  return sub_100304BE0(a1 - 8);
}

void sub_100304CCC(uint64_t a1)
{
  sub_100304BE0(a1);

  operator delete();
}

void sub_100304D04(uint64_t a1)
{
  sub_100304BE0(a1 - 8);

  operator delete();
}

id sub_100304D40(uint64_t a1)
{
  uint64_t v2 = a1 + 280;
  sub_1001F7BE0(a1 + 280);
  sub_100305018((void *)a1);
  uint64_t v3 = *(void **)(a1 + 2144);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1003051B8;
  v15[3] = &unk_100860C78;
  v15[4] = a1;
  [v3 setAirplaneModeChangedHandler:v15];
  uint64_t v4 = *(void **)(a1 + 2152);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10030533C;
  v14[3] = &unk_100860C98;
  void v14[4] = a1;
  [v4 setStateChangedHandler:v14];
  id v5 = *(void **)(a1 + 2160);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100305514;
  v13[3] = &unk_100860CB8;
  v13[4] = a1;
  [v5 setStateChangeHandler:v13];
  if (!sub_10039CE24(*(_DWORD *)(a1 + 24)))
  {
    id v8 = qword_1008A9E08;
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#reg-prov,fGeoMonitor startMonitoring,skipped,device does not support UWB.", buf, 2u);
    }
    goto LABEL_8;
  }
  unsigned int v6 = sub_1001F80B0(v2);
  id v7 = qword_1008A9E08;
  if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#reg-prov,fGeoMonitor startMonitoring completed, status, %d", buf, 8u);
  }
  if (v6) {
LABEL_8:
  }
    unsigned int v6 = [*(id *)(a1 + 2144) startMonitoring];
  uint64_t v9 = qword_1008A9E08;
  if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#reg-prov,fSystemSettingsMonitor startMonitoring done, status, %d", buf, 8u);
  }
  if (v6) {
    unsigned int v6 = [*(id *)(a1 + 2152) startMonitoring];
  }
  uint64_t v10 = qword_1008A9E08;
  if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#reg-prov,fAttachedAccessoryMonitor startMonitoring done, status, %d", buf, 8u);
  }
  uint64_t v11 = *(void *)(a1 + 2160);
  if (v11) {
    id result = 0;
  }
  else {
    id result = (id)v6;
  }
  if (v11)
  {
    if (((v6 ^ 1) & 1) == 0) {
      return [*(id *)(a1 + 2160) startMonitoring];
    }
  }
  return result;
}

void *sub_100305018(void *result)
{
  if (!result[271])
  {
    CFStringRef v1 = result;
    uint64_t v2 = [PRSettingsObserver alloc];
    uint64_t v3 = +[PRGlobalDebugSettings sharedSettings];
    uint64_t v4 = [(PRSettingsObserver *)v2 initWithSettings:v3 queue:v1[5]];
    id v5 = (void *)v1[271];
    v1[271] = v4;

    unsigned int v6 = (void *)v1[271];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1003069A8;
    v11[3] = &unk_100857300;
    v11[4] = v1;
    [v6 startObserving:PRDebugConfigArgMcc observeImmediately:0 callback:v11];
    id v7 = (void *)v1[271];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _OWORD v10[2] = sub_100306B9C;
    v10[3] = &unk_100857300;
    void v10[4] = v1;
    [v7 startObserving:PRDebugConfigArgAccessoryState observeImmediately:0 callback:v10];
    id v8 = (void *)v1[271];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100306D1C;
    v9[3] = &unk_100857300;
    void v9[4] = v1;
    return [v8 startObserving:PRDebugConfigArgIsoCountry observeImmediately:0 callback:v9];
  }
  return result;
}

void sub_1003051A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003051B8(uint64_t a1, uint64_t a2)
{
}

void sub_1003051C0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = sub_10039CE24(*(_DWORD *)(a1 + 24));
  id v5 = qword_1008A9E08;
  if (v4)
  {
    unsigned int v6 = (id)qword_1008A9E08;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = sub_1002CC5A8(a2);
      int v11 = 138412290;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#reg-prov,Airplane Mode changed: %@.", (uint8_t *)&v11, 0xCu);
    }
    BOOL v8 = a2 == 1;
    int v9 = sub_1002C1F2C(a1 + 48, v8);
    if (v8) {
      int v10 = 1;
    }
    else {
      int v10 = 2;
    }
    sub_1001FB704(a1 + 280, v10);
    if (v9) {
      sub_100305830(a1, 1u, 1);
    }
    if ((v9 & 0x10000) != 0) {
      sub_100305A0C(a1, 1u, 1);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#reg-prov,onAirplaneModeStateChange,exited early,device does not support UWB.", (uint8_t *)&v11, 2u);
  }
}

void sub_100305324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030533C(uint64_t a1, int a2, uint64_t a3, int a4)
{
}

void sub_100305344(uint64_t a1, int a2, uint64_t a3, int a4)
{
  BOOL v8 = (id)qword_1008A9E08;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10039D144();
    int v9 = "detached";
    if (a2) {
      int v9 = "attached";
    }
    if (v20 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v22 = v9;
    __int16 v23 = 2080;
    id v24 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#reg-prov,accessory:%s,type:%s", buf, 0x16u);
    if (v20 < 0) {
      operator delete(__p);
    }
  }

  int v11 = sub_100007D00();
  if (sub_1003D2E5C((uint64_t)v11))
  {
    if (!a3)
    {
      uint64_t v12 = sub_1002C1DF0(a1 + 48, a2, a4);
      if (a2) {
        int v13 = 4;
      }
      else {
        int v13 = 5;
      }
      LODWORD(__p) = 2;
      HIDWORD(__p) = v13;
      char v16 = BYTE1(v12) & 1;
      int v17 = a4;
      char v18 = 1;
      __int16 v19 = 0;
      sub_100305BF4(a1, (uint64_t)&__p);
    }
  }
  else
  {
    uint64_t v14 = qword_1008A9E08;
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#reg-prov,Ignore accessory event", (uint8_t *)&__p, 2u);
    }
  }
}

void sub_1003054FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100305514(uint64_t a1, int a2)
{
}

void sub_10030551C(uint64_t a1, int a2)
{
  BOOL v4 = qword_1008A9E08;
  if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v5) = 67109120;
    DWORD1(v5) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#reg-prov,onNarrowbandSARChange,index,%d", (uint8_t *)&v5, 8u);
  }
  *(void *)&long long v5 = 0x800000005;
  BYTE8(v5) = 1;
  BYTE12(v5) = 0;
  char v6 = 0;
  char v7 = a2;
  char v8 = 1;
  sub_100305764(a1, &v5);
}

id sub_1003055F8(uint64_t a1)
{
  return sub_100304D40(a1 - 8);
}

uint64_t sub_100305600(id *a1)
{
  return 1;
}

uint64_t sub_100305648(id *a1)
{
  return 1;
}

void sub_100305690(uint64_t a1)
{
  if (sub_10039CE24(*(_DWORD *)(a1 + 24)))
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030575C;
    block[3] = &unk_1008466D8;
    block[4] = a1;
    dispatch_async(v2, block);
  }
  else
  {
    uint64_t v3 = qword_1008A9E08;
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#reg-prov,onFirstUnlock,exited early,device does not support UWB.", buf, 2u);
    }
  }
}

BOOL sub_10030575C(uint64_t a1)
{
  return sub_1003047E8(*(void *)(a1 + 32));
}

void sub_100305764(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v2 = *(NSObject **)(a1 + 32);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1003057F0;
    v3[3] = &unk_100860CD8;
    v3[4] = a1;
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
    dispatch_async(v2, v3);
  }
}

void sub_1003057F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 16);
  long long v2 = *(_OWORD *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 56);
  sub_100186EF8(v1, (uint64_t)&v2);
}

void sub_100305830(uint64_t a1, unsigned int a2, int a3)
{
  BOOL v6 = sub_1003059C0(a1);
  char v7 = (id)qword_1008A9E08;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 8) {
      char v8 = "Unknown";
    }
    else {
      char v8 = (&off_100860FB8)[a2];
    }
    sub_100004950(__p, v8);
    int v9 = (void **)__p[0];
    int v10 = "UWBDisallowed";
    if (v13 >= 0) {
      int v9 = __p;
    }
    if (v6) {
      int v10 = "UWBAllowed";
    }
    *(_DWORD *)buf = 136315650;
    id v15 = v9;
    __int16 v16 = 2080;
    int v17 = v10;
    if (a3) {
      int v11 = "yes";
    }
    else {
      int v11 = "no";
    }
    __int16 v18 = 2080;
    __int16 v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#reg-prov,relayUwbState,%s,allowed,%s,actionRequired,%s", buf, 0x20u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  *(_DWORD *)buf = v6;
  LODWORD(v15) = a2;
  BYTE4(v15) = a3;
  LOBYTE(v16) = 0;
  BYTE2(v17) = 0;
  HIWORD(v17) = 0;
  sub_100305764(a1, (long long *)buf);
}

void sub_1003059A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1003059C0(uint64_t a1)
{
  sub_1002C3348(a1 + 48, (uint64_t)v3);
  int v1 = v3[0];
  if (v5 < 0) {
    operator delete(__p);
  }
  return v1 != 0;
}

void sub_100305A0C(uint64_t a1, unsigned int a2, int a3)
{
  BOOL v6 = sub_100305BA8(a1);
  char v7 = (id)qword_1008A9E08;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 8) {
      char v8 = "Unknown";
    }
    else {
      char v8 = (&off_100860FB8)[a2];
    }
    sub_100004950(__p, v8);
    int v9 = (void **)__p[0];
    int v10 = "NBDisallowed";
    if (v14 >= 0) {
      int v9 = __p;
    }
    if (v6) {
      int v10 = "NBAllowed";
    }
    *(_DWORD *)buf = 136315650;
    __int16 v16 = v9;
    __int16 v17 = 2080;
    __int16 v18 = v10;
    if (a3) {
      int v11 = "yes";
    }
    else {
      int v11 = "no";
    }
    __int16 v19 = 2080;
    char v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#reg-prov,relayNBState,%s,allowed,%s,actionRequired,%s", buf, 0x20u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v6) {
    int v12 = 4;
  }
  else {
    int v12 = 3;
  }
  *(_DWORD *)buf = v12;
  LODWORD(v16) = a2;
  BYTE4(v16) = a3;
  LOBYTE(v17) = 0;
  BYTE2(v18) = 0;
  HIWORD(v18) = 0;
  sub_100305764(a1, (long long *)buf);
}

void sub_100305B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100305BA8(uint64_t a1)
{
  sub_1002C3348(a1 + 48, (uint64_t)v3);
  int v1 = v3[1];
  if (v5 < 0) {
    operator delete(__p);
  }
  return v1 != 0;
}

void sub_100305BF4(uint64_t a1, uint64_t a2)
{
  sub_1002C3348(a1 + 48, (uint64_t)v12);
  long long v4 = (id)qword_1008A9E08;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(int *)(a2 + 4);
    if (v5 > 8) {
      BOOL v6 = "Unknown";
    }
    else {
      BOOL v6 = (&off_100860FB8)[v5];
    }
    sub_100004950(__p, v6);
    if (v11 >= 0) {
      char v7 = __p;
    }
    else {
      char v7 = (void **)__p[0];
    }
    char v8 = &v13;
    if (v14 < 0) {
      char v8 = v13;
    }
    if (*(unsigned char *)(a2 + 8)) {
      int v9 = "yes";
    }
    else {
      int v9 = "no";
    }
    *(_DWORD *)buf = 136315906;
    __int16 v17 = v7;
    __int16 v18 = 2080;
    __int16 v19 = v8;
    __int16 v20 = 1024;
    int v21 = v15;
    __int16 v22 = 2080;
    __int16 v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#reg-prov,relaySettingsChange,%s,country,%s,flags,%d,actionRequired,%s", buf, 0x26u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_100305764(a1, (long long *)a2);
  if (v14 < 0) {
    operator delete(v13);
  }
}

void sub_100305D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100305DA0(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  long long v4 = sub_100006A00();
  sub_1002C3348(a1 + 48, (uint64_t)v7);
  if (SHIBYTE(v9) < 0)
  {
    sub_100002DE4(__p, (void *)v8, *((unint64_t *)&v8 + 1));
  }
  else
  {
    *(_OWORD *)__p = v8;
    uint64_t v6 = v9;
  }
  sub_1003CE5F8((uint64_t)v4, (uint64_t)__p, a2);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)v8);
  }
}

void sub_100305E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100305E7C(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
}

void sub_100305E84(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = sub_100006A00();
  sub_1002C3348(a1 + 48, (uint64_t)v7);
  if (SHIBYTE(v9) < 0)
  {
    sub_100002DE4(__p, (void *)v8, *((unint64_t *)&v8 + 1));
  }
  else
  {
    *(_OWORD *)__p = v8;
    uint64_t v6 = v9;
  }
  sub_1003CE9B0(v4, (uint64_t)__p, a2);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)v8);
  }
}

void sub_100305F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100305F60(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_100305F68(uint64_t a1, char *a2)
{
  long long v4 = qword_1008A9E08;
  if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#reg-prov,onCountryChange", buf, 2u);
  }
  if ((a2[23] & 0x80000000) == 0)
  {
    if (a2[23])
    {
      std::string __p = *(std::string *)a2;
      goto LABEL_8;
    }
LABEL_14:
    unsigned int v6 = sub_1002C2C44(a1 + 48);
    uint64_t v11 = qword_1008A9E08;
    if (!os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    *(_WORD *)buf = 0;
    long long v8 = "#reg-prov,onCountryChange callback: <empty isoCode>.";
    uint64_t v9 = v11;
    uint32_t v10 = 2;
    goto LABEL_16;
  }
  unint64_t v5 = *((void *)a2 + 1);
  if (!v5) {
    goto LABEL_14;
  }
  sub_100002DE4(&__p, *(void **)a2, v5);
LABEL_8:
  unsigned int v6 = sub_1002C23F0(a1 + 48, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = qword_1008A9E08;
  if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] < 0) {
      a2 = *(char **)a2;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = a2;
    long long v8 = "#reg-prov,onCountryChange callback: %s.";
    uint64_t v9 = v7;
    uint32_t v10 = 12;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
  }
LABEL_17:
  if ((_BYTE)v6) {
    sub_100305830(a1, 3u, 1);
  }
  if ((v6 & 0xFF00) != 0)
  {
    *(void *)buf = 0x300000002;
    uint8_t buf[8] = 1;
    char v14 = 0;
    char v15 = 0;
    __int16 v16 = 0;
    sub_100305BF4(a1, (uint64_t)buf);
  }
  if ((v6 & 0xFF0000) != 0) {
    sub_100305A0C(a1, 3u, 1);
  }
  if (HIBYTE(v6))
  {
    *(void *)buf = 0x300000005;
    uint8_t buf[8] = 1;
    char v14 = 0;
    char v15 = 0;
    __int16 v16 = 0;
    sub_100305BF4(a1, (uint64_t)buf);
  }
}

void sub_100306190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003061B4(uint64_t a1, int a2)
{
  int v4 = sub_1002C2194(a1 + 48, a2);
  if ((_BYTE)v4)
  {
    unint64_t v5 = (id)qword_1008A9E08;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 79) < 0)
      {
        sub_100002DE4(__p, *(void **)(a1 + 56), *(void *)(a1 + 64));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 56);
        uint64_t v10 = *(void *)(a1 + 72);
      }
      unsigned int v6 = __p;
      if (v10 < 0) {
        unsigned int v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67109378;
      int v12 = a2;
      __int16 v13 = 2080;
      char v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#reg-prov,onRestrictedRegionChanged,%d,isoCountry,%s,uwbChannelSettingChanged", buf, 0x12u);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
    }

    sub_100305830(a1, 7u, 1);
  }
  if ((v4 & 0xFF0000) != 0)
  {
    uint64_t v7 = (id)qword_1008A9E08;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 79) < 0)
      {
        sub_100002DE4(__p, *(void **)(a1 + 56), *(void *)(a1 + 64));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 56);
        uint64_t v10 = *(void *)(a1 + 72);
      }
      long long v8 = __p;
      if (v10 < 0) {
        long long v8 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67109378;
      int v12 = a2;
      __int16 v13 = 2080;
      char v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#reg-prov,onRestrictedRegionChanged,%d,isoCountry,%s,isNBChannelSettingChanged", buf, 0x12u);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
    }

    sub_100305A0C(a1, 7u, 1);
  }
}

void sub_1003063B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003063D0(uint64_t a1)
{
  long long v2 = +[NSUserDefaults standardUserDefaults];
  uint64_t v3 = [v2 stringForKey:@"RegulatoryGroup"];
  int v4 = v3;
  if (v3)
  {
    if ([v3 isEqualToString:@"US"])
    {
      int v5 = 0;
      goto LABEL_18;
    }
    if ([v4 isEqualToString:@"EU"])
    {
      int v5 = 1;
      goto LABEL_18;
    }
    if ([v4 isEqualToString:@"TW"])
    {
      int v5 = 2;
      goto LABEL_18;
    }
    if ([v4 isEqualToString:@"CN"])
    {
      int v5 = 3;
      goto LABEL_18;
    }
    if ([v4 isEqualToString:@"JP"])
    {
      int v5 = 4;
      goto LABEL_18;
    }
    if ([v4 isEqualToString:@"KR"])
    {
      int v5 = 5;
      goto LABEL_18;
    }
    if ([v4 isEqualToString:@"RU"])
    {
      int v5 = 6;
      goto LABEL_18;
    }
    if ([v4 isEqualToString:@"AR"])
    {
      int v5 = 7;
LABEL_18:
      unsigned int v6 = qword_1008A9E08;
      if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEBUG)) {
        sub_10042EE18((uint64_t)v4, v6);
      }
      goto LABEL_24;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEBUG)) {
    sub_10042EDD8();
  }
  sub_1002C3348(a1 + 48, (uint64_t)&v8);
  int v5 = v11;
  if (v10 < 0) {
    operator delete(__p);
  }
LABEL_24:

  return v5 | 0x100u;
}

void sub_100306580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003065A0(uint64_t a1)
{
  return sub_1003063D0(a1 - 8);
}

uint64_t sub_1003065A8(uint64_t a1)
{
  uint64_t v5 = 0;
  unsigned int v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  int v1 = *(NSObject **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100306654;
  v4[3] = &unk_100856F20;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

BOOL sub_100306654(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1003047E8(v2);
  BOOL result = sub_1003059C0(v2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_100306694(uint64_t a1)
{
  return sub_1003065A8(a1 - 8);
}

uint64_t sub_10030669C(uint64_t a1)
{
  uint64_t v5 = 0;
  unsigned int v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  int v1 = *(NSObject **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100306748;
  v4[3] = &unk_100856F20;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

BOOL sub_100306748(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1003047E8(v2);
  BOOL result = sub_100305BA8(v2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_100306788(uint64_t a1)
{
  return sub_10030669C(a1 - 8);
}

uint64_t *sub_100306790(uint64_t a1)
{
  uint64_t v2 = sub_100006A00();
  sub_1002C3348(a1 + 48, (uint64_t)v7);
  if (SHIBYTE(v9) < 0)
  {
    sub_100002DE4(__p, (void *)v8, *((unint64_t *)&v8 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = v8;
    uint64_t v6 = v9;
  }
  uint64_t v3 = sub_1003CDBFC((uint64_t)v2, (uint64_t *)__p, v10, v11);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)v8);
  }
  return v3;
}

void sub_100306838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10030686C(uint64_t a1)
{
  return sub_100306790(a1 - 8);
}

uint64_t sub_100306874()
{
  return 1;
}

uint64_t sub_10030687C(uint64_t a1, _DWORD *a2)
{
  if (!*a2 && os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_ERROR)) {
    sub_10042EE90();
  }
  return 0;
}

void sub_1003068C8(uint64_t a1)
{
  if (sub_10039CE24(*(_DWORD *)(a1 + 24)))
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100306994;
    block[3] = &unk_1008466D8;
    block[4] = a1;
    dispatch_async(v2, block);
  }
  else
  {
    uint64_t v3 = qword_1008A9E08;
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#reg-prov,refreshRegulatoryInformation,exited early,device does not support UWB.", buf, 2u);
    }
  }
}

uint64_t sub_100306994(uint64_t a1)
{
  return sub_1001FB238(*(void *)(a1 + 32) + 280);
}

void sub_1003069A0(uint64_t a1)
{
}

void sub_1003069A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[PRGlobalDebugSettings sharedSettings];
  uint64_t v6 = [v5 objectForKey:v3 ofClass:objc_opt_class()];

  uint64_t v7 = (id)qword_1008A9E08;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)[v6 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#reg-prov,test,received mcc: %s", (uint8_t *)&__p, 0xCu);
  }

  if (sub_10039CE24(*(_DWORD *)(v4 + 24)))
  {
    sub_100004950(&__p, (char *)[v6 UTF8String]);
    sub_1001FA73C((int *)(v4 + 280), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v8 = qword_1008A9E08;
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#reg-prov,test,received mcc,skipped,device does not support UWB", (uint8_t *)&__p, 2u);
    }
  }
}

void sub_100306B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100306B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[PRGlobalDebugSettings sharedSettings];
  id v6 = [v5 integerForKey:v3];

  int v7 = sub_10039D2C8((uint64_t)v6);
  long long v8 = (id)qword_1008A9E08;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10039D144();
    if (v11 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)buf = 67109378;
    int v13 = (int)v6;
    __int16 v14 = 2080;
    char v15 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#reg-prov,test,received accessoryState %d, accessoryType %s", buf, 0x12u);
    if (v11 < 0) {
      operator delete(__p);
    }
  }

  sub_100305344(v4, v7 != 0, 0, v7);
}

void sub_100306CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100306D1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[PRGlobalDebugSettings sharedSettings];
  id v6 = [v5 objectForKey:v3 ofClass:objc_opt_class()];

  int v7 = (id)qword_1008A9E08;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    id v12 = [v6 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#reg-prov,test,received isoCountry %s", buf, 0xCu);
  }

  if (sub_10039CE24(*(_DWORD *)(v4 + 24)))
  {
    sub_100004950(__p, (char *)[v6 UTF8String]);
    sub_100305F68(v4, (char *)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v8 = qword_1008A9E08;
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#reg-prov,test,received isoCountry,skipped,device does not support UWB", buf, 2u);
    }
  }
}

void sub_100306EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100306F04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002C3348(a1 + 48, (uint64_t)v15);
  if (v15[4])
  {
    int v3 = 0;
    goto LABEL_8;
  }
  if (!v17)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_FAULT)) {
      sub_10042EED0();
    }
    int v8 = 587;
LABEL_32:
    __assert_rtn("toRegulatoryState", "PRRegulatoryProvider.mm", v8, "false");
  }
  if ((v16 - 2) < 2)
  {
    int v3 = 2;
    goto LABEL_8;
  }
  if (!v16)
  {
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_FAULT)) {
      sub_10042EF10();
    }
    int v8 = 599;
    goto LABEL_32;
  }
  int v3 = 1;
LABEL_8:
  uint64_t v4 = sub_100006A00();
  if (SHIBYTE(v19) < 0)
  {
    sub_100002DE4(__dst, (void *)v18, *((unint64_t *)&v18 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v18;
    uint64_t v14 = v19;
  }
  uint64_t v5 = sub_1003CDBFC((uint64_t)v4, (uint64_t *)__dst, v20, v21);
  if (SHIBYTE(v19) < 0)
  {
    sub_100002DE4(v11, (void *)v18, *((unint64_t *)&v18 + 1));
  }
  else
  {
    *(_OWORD *)char v11 = v18;
    uint64_t v12 = v19;
  }
  id v6 = sub_1003CDF58(v4, (uint64_t *)v11, v20, v21);
  if (SHIBYTE(v19) < 0)
  {
    sub_100002DE4(__p, (void *)v18, *((unint64_t *)&v18 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = v18;
    uint64_t v10 = v19;
  }
  int v7 = sub_1003CE2A8(v4, (uint64_t *)__p, v20, v21);
  sub_1003075A8(a2, v3, (uint64_t)v5, (uint64_t)v6, (uint64_t)v7);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
}

void sub_100307110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_100307178(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100307180(uint64_t a1, uint64_t *a2)
{
  if (sub_10039CF54(*(_DWORD *)(a1 + 24)) && sub_10039CE24(*(_DWORD *)(a1 + 24)))
  {
    uint64_t v4 = sub_1001FABE4((int *)(a1 + 280), (uint64_t)a2);
    uint64_t v5 = qword_1008A9E08;
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEBUG)) {
      sub_10042EF50(a2, v4, v5);
    }
  }
  else
  {
    id v6 = qword_1008A9E08;
    uint64_t v4 = 0;
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#reg-prov,injectIsoCode,exited early,device is not a UWB watch.", v8, 2u);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_100307254(uint64_t a1, uint64_t *a2)
{
  return sub_100307180(a1 - 8, a2);
}

id sub_10030725C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 2160);
  if (v2)
  {
    return [v2 injectNarrowbandSARState:a2];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008A9E08, OS_LOG_TYPE_ERROR)) {
      sub_10042EFEC();
    }
    return 0;
  }
}

id sub_1003072C8(uint64_t a1, uint64_t a2)
{
  return sub_10030725C(a1 - 8, a2);
}

id sub_1003072D0(uint64_t a1)
{
  return _[*(id *)(a1 + 2160) clearSARStateOverride];
}

id sub_1003072D8(uint64_t a1)
{
  return _[*(id *)(a1 + 2152) clearSARStateOverride];
}

id sub_1003072E0(uint64_t a1)
{
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000;
  int v8 = sub_1003073D0;
  uint64_t v9 = sub_1003073E0;
  id v10 = 0;
  int v1 = *(NSObject **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003073E8;
  v4[3] = &unk_100856F20;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

uint64_t sub_1003073D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1003073E0(uint64_t a1)
{
}

void sub_1003073E8(uint64_t a1)
{
  uint64_t v2 = sub_100304910(*(void *)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100307434(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSString stringWithFormat:@"    %@", a2];
  [v2 addObject:];
}

void sub_10030749C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003074B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSString stringWithFormat:@"    %@", a2];
  [v2 addObject:];
}

void sub_100307518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030752C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSString stringWithFormat:@"    %@", a2];
  [v2 addObject:];
}

void sub_100307594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003075A8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_100236044((void *)(a1 + 8), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_1002360C0((void *)(a1 + 32), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_10023613C((void *)(a1 + 56), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
  return a1;
}

void sub_100307644(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  id v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030767C()
{
}

void *sub_100307690(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_100860D58;
  result[1] = v3;
  return result;
}

uint64_t sub_1003076D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100860D58;
  a2[1] = v2;
  return result;
}

void sub_100307704(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100002DE4(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v4 = *(void *)(a2 + 16);
  }
  sub_100305F68(v2, (char *)__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100307774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100307790(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003077D0()
{
}

void sub_1003077E0()
{
}

void *sub_1003077F4(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_100860DD8;
  result[1] = v3;
  return result;
}

uint64_t sub_10030783C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100860DD8;
  a2[1] = v2;
  return result;
}

void sub_100307868(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t sub_100307874(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003078B4()
{
}

void sub_1003078C4()
{
}

void *sub_1003078D8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_100860E58;
  result[1] = v3;
  return result;
}

uint64_t sub_100307920(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100860E58;
  a2[1] = v2;
  return result;
}

void sub_10030794C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (_OWORD *)(v3 + 56);
  if (*(char *)(v3 + 79) < 0)
  {
    sub_100002DE4(__s1, *(void **)(v3 + 56), *(void *)(v3 + 64));
  }
  else
  {
    *(_OWORD *)__s1 = *v4;
    uint64_t v24 = *(void *)(v3 + 72);
  }
  uint64_t v5 = (id)qword_1008A9E08;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(v3 + 79) < 0)
    {
      sub_100002DE4(__p, *(void **)(v3 + 56), *(void *)(v3 + 64));
    }
    else
    {
      *(_OWORD *)std::string __p = *v4;
      uint64_t v22 = *(void *)(v3 + 72);
    }
    id v6 = __p;
    if (v22 < 0) {
      id v6 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    id v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#reg-prov,IsoCountry %s", buf, 0xCu);
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v7 = (void *)strlen(off_10089F778[0]);
  size_t v8 = (size_t)v7;
  size_t v9 = HIBYTE(v24);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (v7 != (void *)HIBYTE(v24))
    {
      uint64_t v12 = off_10089F790[0];
      size_t v13 = strlen(off_10089F790[0]);
LABEL_23:
      if (v13 != v9)
      {
        char v15 = off_10089F760[0];
        size_t v16 = strlen(off_10089F760[0]);
LABEL_32:
        if (v16 != v9)
        {
          long long v18 = off_10089F788[0];
          size_t v19 = strlen(off_10089F788[0]);
          goto LABEL_42;
        }
        char v17 = __s1;
        char v11 = (void *)v9;
        goto LABEL_40;
      }
      uint64_t v14 = __s1;
      char v11 = (void *)v9;
      goto LABEL_30;
    }
    if (v7 != (void *)-1)
    {
      id v10 = __s1;
      goto LABEL_19;
    }
LABEL_54:
    sub_10019CC84();
  }
  char v11 = __s1[1];
  if (v7 != __s1[1])
  {
    uint64_t v12 = off_10089F790[0];
    size_t v13 = strlen(off_10089F790[0]);
    goto LABEL_27;
  }
  if (v7 == (void *)-1) {
    goto LABEL_54;
  }
  id v10 = (void **)__s1[0];
LABEL_19:
  if (!memcmp(v10, off_10089F778[0], v8)) {
    goto LABEL_51;
  }
  uint64_t v12 = off_10089F790[0];
  size_t v13 = strlen(off_10089F790[0]);
  if ((v9 & 0x80) == 0) {
    goto LABEL_23;
  }
  char v11 = __s1[1];
LABEL_27:
  if ((void *)v13 != v11)
  {
    char v15 = off_10089F760[0];
    size_t v16 = strlen(off_10089F760[0]);
    goto LABEL_37;
  }
  if (v11 == (void *)-1) {
    sub_10019CC84();
  }
  uint64_t v14 = (void **)__s1[0];
LABEL_30:
  if (!memcmp(v14, v12, (size_t)v11)) {
    goto LABEL_51;
  }
  char v15 = off_10089F760[0];
  size_t v16 = strlen(off_10089F760[0]);
  if ((v9 & 0x80) == 0) {
    goto LABEL_32;
  }
  char v11 = __s1[1];
LABEL_37:
  if ((void *)v16 != v11)
  {
    long long v18 = off_10089F788[0];
    size_t v19 = strlen(off_10089F788[0]);
    goto LABEL_46;
  }
  if (v11 == (void *)-1) {
    sub_10019CC84();
  }
  char v17 = (void **)__s1[0];
LABEL_40:
  if (!memcmp(v17, v15, (size_t)v11)) {
    goto LABEL_51;
  }
  long long v18 = off_10089F788[0];
  size_t v19 = strlen(off_10089F788[0]);
  if ((v9 & 0x80) == 0)
  {
LABEL_42:
    if (v19 == v9)
    {
      unsigned __int16 v20 = __s1;
      goto LABEL_49;
    }
LABEL_50:
    *(_OWORD *)a2 = *(_OWORD *)__s1;
    a2[2] = v24;
    return;
  }
  char v11 = __s1[1];
LABEL_46:
  if ((void *)v19 != v11) {
    goto LABEL_50;
  }
  if (v11 == (void *)-1) {
    sub_10019CC84();
  }
  unsigned __int16 v20 = (void **)__s1[0];
  size_t v9 = (size_t)v11;
LABEL_49:
  if (memcmp(v20, v18, v9)) {
    goto LABEL_50;
  }
LABEL_51:
  sub_100004950(a2, "");
  if (SHIBYTE(v24) < 0) {
    operator delete(__s1[0]);
  }
}

void sub_100307CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_100012C10(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100307D10(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100307D50()
{
}

void sub_100307D5C()
{
  qword_1008A9E08 = (uint64_t)os_log_create("com.apple.nearbyd", "Regulatory");
}

void sub_100307E04(id a1)
{
  id v1 = [[_FindingAdvertiser alloc] _initInternal];
  uint64_t v2 = (void *)qword_1008A9E10;
  qword_1008A9E10 = (uint64_t)v1;

  id v3 = +[NIServerSpatialInteractionPayloadAggregator sharedInstance];
  [v3 addPayloadChangeObserver:qword_1008A9E10];
}

void sub_100307E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100308014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100308028(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100308038(uint64_t a1)
{
}

void sub_100308040(uint64_t a1)
{
  uint64_t v2 = sub_1002E0C44(*(unsigned __int8 *)(a1 + 64));
  id v3 = *(void **)(a1 + 32);
  id v12 = 0;
  id v13 = 0;
  uint64_t v4 = (id *)[v3 _peerIndexReferenceForAdvertisementType:v2 outPeers:&v13 outAdvertisements:&v12];
  id v5 = v13;
  id v6 = v12;
  id v7 = [v5 indexOfObject:*(void *)(a1 + 40)];
  if (v7 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    size_t v8 = [*(id *)(a1 + 32) _configureAdvertiserForType:v2 toPeer:*(void *)(a1 + 40) withAdvertisement:*(void *)(a1 + 48)];
    if (v8)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v8);
    }
    else
    {
      [v5 addObject:*(void *)(a1 + 40)];
      [v6 addObject:*(void *)(a1 + 48)];
      id v11 = [v5 count];
      if (v11 != [v6 count]) {
        __assert_rtn("-[_FindingAdvertiser startAdvertisingAsFinder:toPeer:withAdvertisement:]_block_invoke", "NIServerFindingDiscovery.mm", 168, "_peers.count == _advertisements.count");
      }
      *uint64_t v4 = (char *)[v5 count] - 1;
      if ([*(id *)(a1 + 32) _totalPeers] == (id)1) {
        [*(id *)(a1 + 32) _startRoundRobinTimer];
      }
    }
    goto LABEL_10;
  }
  [v6 setObject:*(void *)(a1 + 48) atIndexedSubscript:v7];
  if (*v4 == v7)
  {
    uint64_t v9 = [*(id *)(a1 + 32) _configureAdvertiserForType:v2 toPeer:*(void *)(a1 + 40) withAdvertisement:*(void *)(a1 + 48)];
    if (v9)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
      size_t v8 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;
LABEL_10:
    }
  }
}

void sub_1003081DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100308324(uint64_t a1)
{
  uint64_t v2 = sub_1002E0C44(*(unsigned __int8 *)(a1 + 56));
  id v3 = *(void **)(a1 + 32);
  id v16 = 0;
  id v17 = 0;
  uint64_t v4 = [v3 _peerIndexReferenceForAdvertisementType:v2 outPeers:&v17 outAdvertisements:&v16];
  id v5 = v17;
  id v6 = v16;
  id v7 = [v5 indexOfObject:*(void *)(a1 + 40)];
  if (v7 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    [v5 removeObjectAtIndex:v7];
    [v6 removeObjectAtIndex:v7];
    id v8 = [v5 count];
    if (v8 != [v6 count]) {
      __assert_rtn("-[_FindingAdvertiser stopAdvertisingAsFinder:toPeer:]_block_invoke", "NIServerFindingDiscovery.mm", 202, "_peers.count == _advertisements.count");
    }
    *uint64_t v4 = 0;
    id v9 = [v5 count];
    uint64_t v10 = *(void **)(a1 + 32);
    if (v9)
    {
      id v11 = [v5 firstObject];
      id v12 = [v6 firstObject];
      uint64_t v13 = [v10 _configureAdvertiserForType:v2 toPeer:v11 withAdvertisement:v12];

      if (v13)
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
        char v15 = *(void **)(v14 + 40);
        *(void *)(v14 + 40) = v13;

        goto LABEL_9;
      }
    }
    else
    {
      [*(id *)(a1 + 32) _resetAdvertiserForType:v2];
    }
    if (![*(id *)(a1 + 32) _totalPeers]) {
      [*(id *)(a1 + 32) _stopRoundRobinTimer];
    }
  }
LABEL_9:
}

void sub_1003084B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003085E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v3 = +[NSString stringWithFormat:@"Advertiser singleton. Round robin timer active: %d", *(void *)(*(void *)(a1 + 32) + 16) != 0];
  [v2 addObject:v3];

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 24);
  if (v5 && *(unsigned char *)(v4 + 32))
  {
    id v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v7 = [v5 advertisingAddressDataConnectable];
    id v8 = CUPrintNSDataAddress();
    int v9 = [*(id *)(*(void *)(a1 + 32) + 24) advertiseRate];
    if (v9 > 39)
    {
      if (v9 <= 44)
      {
        if (v9 == 40)
        {
          uint64_t v10 = "Medium";
          goto LABEL_28;
        }
        if (v9 == 42)
        {
          uint64_t v10 = "MediumMid";
          goto LABEL_28;
        }
      }
      else
      {
        switch(v9)
        {
          case '-':
            uint64_t v10 = "MediumHigh";
            goto LABEL_28;
          case '2':
            uint64_t v10 = "High";
            goto LABEL_28;
          case '<':
            uint64_t v10 = "Max";
            goto LABEL_28;
        }
      }
    }
    else if (v9 <= 14)
    {
      if (!v9)
      {
        uint64_t v10 = "Default";
        goto LABEL_28;
      }
      if (v9 == 10)
      {
        uint64_t v10 = "Periodic";
        goto LABEL_28;
      }
    }
    else
    {
      switch(v9)
      {
        case 15:
          uint64_t v10 = "PeriodicHigh";
          goto LABEL_28;
        case 20:
          uint64_t v10 = "Background";
          goto LABEL_28;
        case 30:
          uint64_t v10 = "Low";
LABEL_28:
          uint64_t v13 = +[NSString stringWithFormat:@"    T26 conn-addr: %@. Adv rate: %s.", v8, v10];
          [v6 addObject:v13];

          uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          id v15 = [*(id *)(*(void *)(a1 + 32) + 24) nearbyActionNoWakeType];
          id v12 = [*(id *)(*(void *)(a1 + 32) + 24) nearbyActionNoWakeAuthTagData];
          id v16 = CUPrintNSDataHex();
          id v17 = [*(id *)(*(void *)(a1 + 32) + 24) nearbyActionNWPrecisionFindingStatus];
          long long v18 = [*(id *)(*(void *)(a1 + 32) + 24) nearbyActionNoWakeConfigData];
          size_t v19 = CUPrintNSDataHex();
          unsigned __int16 v20 = +[NSString stringWithFormat:@"    T26 type: %d. ATag: 0x%@. Status: 0x%02X. Cfg: 0x%@", v15, v16, v17, v19];
          [v14 addObject:v20];

          goto LABEL_29;
      }
    }
    uint64_t v10 = "?";
    goto LABEL_28;
  }
  id v11 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v12 = +[NSString stringWithFormat:@"    T26 advertiser: %d. Activated: %d", v5 != 0, *(unsigned __int8 *)(v4 + 32)];
  [v11 addObject:v12];
LABEL_29:

  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void **)(v21 + 40);
  if (v22 && *(unsigned char *)(v21 + 48))
  {
    __int16 v23 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    uint64_t v24 = [v22 advertisingAddressData];
    uint64_t v25 = CUPrintNSDataAddress();
    int v26 = [*(id *)(*(void *)(a1 + 32) + 40) advertiseRate];
    if (v26 > 39)
    {
      if (v26 <= 44)
      {
        if (v26 == 40)
        {
          uint64_t v27 = "Medium";
          goto LABEL_56;
        }
        if (v26 == 42)
        {
          uint64_t v27 = "MediumMid";
          goto LABEL_56;
        }
      }
      else
      {
        switch(v26)
        {
          case '-':
            uint64_t v27 = "MediumHigh";
            goto LABEL_56;
          case '2':
            uint64_t v27 = "High";
            goto LABEL_56;
          case '<':
            uint64_t v27 = "Max";
            goto LABEL_56;
        }
      }
    }
    else if (v26 <= 14)
    {
      if (!v26)
      {
        uint64_t v27 = "Default";
        goto LABEL_56;
      }
      if (v26 == 10)
      {
        uint64_t v27 = "Periodic";
        goto LABEL_56;
      }
    }
    else
    {
      switch(v26)
      {
        case 15:
          uint64_t v27 = "PeriodicHigh";
          goto LABEL_56;
        case 20:
          uint64_t v27 = "Background";
          goto LABEL_56;
        case 30:
          uint64_t v27 = "Low";
LABEL_56:
          uint64_t v30 = [*(id *)(*(void *)(a1 + 32) + 40) clientIrkData];
          id v31 = CUPrintNSObjectMasked();
          id v32 = [*(id *)(*(void *)(a1 + 32) + 40) clientIdentifierData];
          uint64_t v33 = CUPrintNSDataHex();
          uint64_t v34 = +[NSString stringWithFormat:@"    T19 non-conn-addr: %@. Adv rate: %s. CIRK: %@. CID: %@", v25, v27, v31, v33];
          [v23 addObject:v34];

          id v35 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          id v36 = [*(id *)(*(void *)(a1 + 32) + 40) controlFlags];
          id v29 = [*(id *)(*(void *)(a1 + 32) + 40) uwbConfigData];
          uint64_t v37 = CUPrintNSDataHex();
          uint64_t v38 = +[NSString stringWithFormat:@"    T19 control flags: 0x%08X. UWB config data: %@", v36, v37];
          [v35 addObject:v38];

          goto LABEL_57;
      }
    }
    uint64_t v27 = "?";
    goto LABEL_56;
  }
  uint64_t v28 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v29 = +[NSString stringWithFormat:@"    T19 advertiser: %d. Activated: %d", v22 != 0, *(unsigned __int8 *)(v21 + 48)];
  [v28 addObject:v29];
LABEL_57:

  char v39 = 1;
  do
  {
    char v40 = v39;
    uint64_t v41 = 80;
    if (v39)
    {
      uint64_t v41 = 56;
      uint64_t v42 = 64;
    }
    else
    {
      uint64_t v42 = 88;
    }
    if (v39) {
      uint64_t v43 = 72;
    }
    else {
      uint64_t v43 = 96;
    }
    if (v39) {
      CFStringRef v44 = @"T26";
    }
    else {
      CFStringRef v44 = @"T19";
    }
    id v45 = *(id *)(*(void *)(a1 + 32) + v41);
    id v46 = *(id *)(*(void *)(a1 + 32) + v42);
    uint64_t v47 = *(void *)(*(void *)(a1 + 32) + v43);
    id v48 = [v45 count];
    id v49 = [v46 count];
    uint64_t v50 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    char v59 = v40;
    if (v48 == v49)
    {
      id v51 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"    %@ peers (%d)", v44, [v45 count]);
      [v50 addObject:v51];

      for (unint64_t i = 0; i < (unint64_t)[v45 count]; ++i)
      {
        id v53 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        if (v47 == i)
        {
          id v54 = [v45 objectAtIndexedSubscript:v47];
          id v55 = [v54 descriptionInternal];
          id v56 = [v46 objectAtIndexedSubscript:v47];
          +[NSString stringWithFormat:@"      > %@: %@", v55, v56];
        }
        else
        {
          id v54 = [v45 objectAtIndexedSubscript:i];
          id v55 = [v54 descriptionInternal];
          id v56 = [v46 objectAtIndexedSubscript:i];
          +[NSString stringWithFormat:@"        %@: %@", v55, v56];
        id v57 = };
        [v53 addObject:v57];
      }
    }
    else
    {
      v58 = +[NSString stringWithFormat:@"    %@ state mismatch!!! %d peers, %d advertisements, %d current index", v44, [v45 count], objc_msgSend(v46, "count"), v47];
      [v50 addObject:v58];
    }
    char v39 = 0;
  }
  while ((v59 & 1) != 0);
}

void sub_100308D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100308FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003091B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100309714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  _Unwind_Resume(a1);
}

void sub_1003097D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _cbAdvertisingAddressChanged];
}

void sub_10030981C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100309830(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(double *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    double v7 = v4 - v5;
    id v8 = qword_1008ABDE0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_10042F13C();
      }
      int v9 = (void *)WeakRetained[3];
      WeakRetained[3] = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 134217984;
        double v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#find-disc,NearbyActionNoWake: activate advertiser complete [%0.6f s]", (uint8_t *)&v10, 0xCu);
      }
      *((unsigned char *)WeakRetained + 32) = 1;
      [*(id *)(a1 + 32) _updateAdvertisementAfterActivationForType:26];
    }
  }
}

void sub_100309958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10030997C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = v4;
  if (!v3)
  {
    uint64_t v13 = "token";
    int v14 = 2463;
    goto LABEL_19;
  }
  if (!v4)
  {
    uint64_t v13 = "address";
    int v14 = 2464;
LABEL_19:
    __assert_rtn("_getAuthTagForToken", "NIServerFindingDiscovery.mm", v14, v13);
  }
  id v6 = [v3 getIRK];
  double v7 = v6;
  if (v6 && [v6 length] == (id)16)
  {
    if (qword_1008A9E28 != -1) {
      dispatch_once(&qword_1008A9E28, &stru_1008611B8);
    }
    int v8 = byte_1008A9E20;
    [v7 bytes];
    if (!v8)
    {
      id v11 = v5;
      [v11 bytes];
      [v11 length];
    }
    uint64_t v9 = SipHash();
    __int16 v15 = v9;
    char v16 = BYTE2(v9);
    int v10 = +[NSData dataWithBytes:&v15 length:3];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_10042F1A4();
    }
    int v10 = 0;
  }

  return v10;
}

void sub_100309B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030A17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  _Unwind_Resume(a1);
}

void sub_10030A254(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(double *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    double v7 = v4 - v5;
    int v8 = qword_1008ABDE0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_10042F20C();
      }
      uint64_t v9 = (void *)WeakRetained[5];
      WeakRetained[5] = 0;

      int v10 = +[NIServerSpatialInteractionPayloadAggregator sharedInstance];
      [v10 setFindingEnabled:0];

      id v11 = +[NIServerSpatialInteractionPayloadAggregator sharedInstance];
      [v11 commitChange];
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 134217984;
        double v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#find-disc,SpatialInteraction: activate advertiser complete [%0.6f s]", (uint8_t *)&v12, 0xCu);
      }
      *((unsigned char *)WeakRetained + 48) = 1;
      [*(id *)(a1 + 32) _updateAdvertisementAfterActivationForType:19];
    }
  }
}

void sub_10030A3B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030A540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030A63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030A7A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _roundRobinTimerHandler];
}

void sub_10030A7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030AA38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10030ABA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030AD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030B1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030B6A8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 120));
  _Unwind_Resume(a1);
}

void sub_10030B770(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _cbInterruptionHandler];
}

void sub_10030B7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030B7CC(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _cbErrorHandler:v3];
}

void sub_10030B828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030B840(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _cbBluetoothStateChangedHandler];
}

void sub_10030B888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030B89C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(double *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    double v7 = v4 - v5;
    int v8 = qword_1008ABDE0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_10042F274();
      }
      id v9 = (id)*((void *)WeakRetained + 8);
      *((void *)WeakRetained + 8) = 0;
      goto LABEL_6;
    }
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 134217984;
      double v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#find-disc,Activate controller complete [%0.6f s]", (uint8_t *)&v10, 0xCu);
    }
    *((unsigned char *)WeakRetained + 72) = 1;
    [WeakRetained _cbBluetoothStateChangedHandler];
    if (*((unsigned char *)WeakRetained + 72) && *((unsigned char *)WeakRetained + 88))
    {
      id v9 = objc_loadWeakRetained((id *)WeakRetained + 5);
      [v9 bluetoothDiscoveryFinishedActivating];
LABEL_6:
    }
  }
}

void sub_10030B9E0(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10030BA14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _cbAdvertisingAddressChangedHandler];
}

void sub_10030BA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030BA70(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(double *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    double v7 = v4 - v5;
    int v8 = qword_1008ABDE0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_10042F2DC();
      }
      id v9 = (id)*((void *)WeakRetained + 10);
      *((void *)WeakRetained + 10) = 0;
      goto LABEL_6;
    }
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 134217984;
      double v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#find-disc,Activate address observer complete [%0.6f s]", (uint8_t *)&v10, 0xCu);
    }
    *((unsigned char *)WeakRetained + 88) = 1;
    [WeakRetained _cbAdvertisingAddressChangedHandler];
    if (*((unsigned char *)WeakRetained + 72) && *((unsigned char *)WeakRetained + 88))
    {
      id v9 = objc_loadWeakRetained((id *)WeakRetained + 5);
      [v9 bluetoothDiscoveryFinishedActivating];
LABEL_6:
    }
  }
}

void sub_10030BBB4(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10030BD10(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = +[_FindingAdvertiser sharedInstance];
  id v4 = [v3 stopAdvertisingAsFinder:*(unsigned __int8 *)(*(void *)(a1 + 32) + 32) toPeer:v5];
}

void sub_10030BD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030C104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030C18C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0) {
    [*(id *)(a1 + 40) addObject:v3];
  }
}

void sub_10030C1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030C200(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (([*(id *)(a1 + 32) containsObject:v6] & 1) == 0)
  {
    dispatch_source_cancel(v5);
    [*(id *)(a1 + 40) addObject:v6];
  }
}

void sub_10030C278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030C564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030C5A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
  [WeakRetained didGenerateAdvertisement:*(void *)(a1 + 40) toSendOOBToPeer:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) _configureAdvertisementOOBRefreshTimerForToken:*(void *)(a1 + 48)];
}

void sub_10030C608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030C834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030C978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030CB30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030CD54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030CD80(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
  [WeakRetained didLosePeer:*(void *)(a1 + 40)];
}

void sub_10030CDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030D8A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

const char *sub_10030D990(unint64_t a1)
{
  if (a1 > 0xA) {
    return "?";
  }
  else {
    return off_1008611F8[a1];
  }
}

void sub_10030D9B4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v6 = [a2 descriptionInternal];
  double v7 = +[NSString stringWithFormat:@"        %@: %@", v6, v8];
  [v5 addObject:v7];
}

void sub_10030DA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10030DA88(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v6 = [a2 descriptionInternal];
  double v7 = sub_1002E10F4(v9);
  id v8 = +[NSString stringWithFormat:@"        %@: %@", v6, v7];
  [v5 addObject:v8];
}

void sub_10030DB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10030DB78(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v6 = [a2 descriptionInternal];
  double v7 = +[NSString stringWithFormat:@"        %@: %@", v6, v8];
  [v5 addObject:v7];
}

void sub_10030DC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10030DD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030DD90(id a1, NIDiscoveryToken *a2, OS_dispatch_source *a3, BOOL *a4)
{
}

void sub_10030DE04(id a1, NIDiscoveryToken *a2, OS_dispatch_source *a3, BOOL *a4)
{
}

void sub_10030DE0C(id a1, NIDiscoveryToken *a2, OS_dispatch_source *a3, BOOL *a4)
{
}

void sub_10030E318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_10030E398(uint64_t a1)
{
  return [*(id *)(a1 + 32) didDiscoverPeer:*(void *)(a1 + 40) advertisement:*(void *)(a1 + 48) overBluetooth:0];
}

void sub_10030E5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030E8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030E90C(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [[*(id *)(*(void *)(a1 + 32) + 168) objectForKey:];
  id v4 = [v3 copy];

  [v4 setAddress:*(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32)];
  [*(id *)(*(void *)(a1 + 32) + 168) setObject:v4 forKey:v5];
}

void sub_10030E9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030E9D4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = +[_FindingAdvertiser sharedInstance];
  id v7 = [v6 startAdvertisingAsFinder:*(unsigned __int8 *)(*(void *)(a1 + 32) + 32) toPeer:v8 withAdvertisement:v5];
}

void sub_10030EA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030EA88(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) didGenerateAdvertisement:v5 toSendOOBToPeer:v6];
  [*(id *)(a1 + 40) _configureAdvertisementOOBRefreshTimerForToken:v6];
}

void sub_10030EAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030EC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030EDCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030EF0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030EFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030F0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10030F0B8(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = objc_opt_new();
  [v3 setKeyType:1];
  id v4 = [v6 getIRK];
  [v3 setIrkData:v4];

  id v5 = sub_1002E1B1C(v6);
  [v3 setBtAddressData:v5];

  [*(id *)(a1 + 32) addObject:v3];
}

void sub_10030F16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030F2C8(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    if (![WeakRetained[17] count]
      && ((unint64_t)[v2[12] discoveryFlags] & 0x200100000) != 0)
    {
      id v3 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        v5[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#find-disc,NearbyActionNoWake: disabling scan dupes", (uint8_t *)v5, 2u);
      }
      [v2[12] setDiscoveryFlags:((unint64_t)[v2[12] discoveryFlags] & 0xFFFFFFFDFFEFFFFFLL)];
    }
    id v4 = v2[15];
    v2[15] = 0;
  }
}

void sub_10030F394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030F7C4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 80));
  _Unwind_Resume(a1);
}

void sub_10030F828(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _cbDeviceFoundHandler:v3];
}

void sub_10030F884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030F89C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(double *)(a1 + 40);
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    double v8 = v4 - v5;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_10042F674();
      }
      id v9 = v7[12];
      v7[12] = 0;
    }
    else
    {
      *((unsigned char *)WeakRetained + 112) = 1;
      int v10 = [WeakRetained _nearbyActionNoWakeOOBKeysFromEligibleDiscoveryPeers];
      [v7[12] setOobKeys:v10];

      if (![v7[17] count]) {
        [v7 _nearbyActionNoWakeDisableScanDupesIfNecessary];
      }
      double v11 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = v7[12];
        int v14 = 134218243;
        double v15 = v8;
        __int16 v16 = 2113;
        id v17 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#find-disc,NearbyActionNoWake: activated scanner [%0.6f s]: %{private}@", (uint8_t *)&v14, 0x16u);
      }
      id v9 = (id)qword_1008ABDE0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        double v13 = [v7[12] discoveredDevices];
        int v14 = 138477827;
        double v15 = *(double *)&v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#find-disc,NearbyActionNoWake: discovered devices after activating scanner: %{private}@", (uint8_t *)&v14, 0xCu);
      }
    }
  }
}

void sub_10030FA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030FD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10030FDDC(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _cbDeviceFoundHandler:v3];
}

void sub_10030FE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10030FE50(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(double *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    double v8 = v4 - v5;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_10042F6DC();
      }
      id v9 = (void *)v7[13];
      v7[13] = 0;

      int v10 = (void *)v7[25];
      v7[25] = 0;
    }
    else
    {
      *((unsigned char *)WeakRetained + 112) = 1;
      uint64_t v11 = +[NSDate now];
      id v12 = (void *)v7[25];
      v7[25] = v11;

      double v13 = (void *)v7[16];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100310030;
      v16[3] = &unk_100858FC0;
      v16[4] = v7;
      [v13 enumerateObjectsUsingBlock:v16];
      int v14 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = v7[13];
        *(_DWORD *)buf = 134218243;
        double v18 = v8;
        __int16 v19 = 2113;
        uint64_t v20 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#find-disc,SpatialInteraction: activated scanner [%0.6f s]: %{private}@", buf, 0x16u);
      }
    }
  }
}

void sub_100310008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100310030(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38();
  double v5 = *(void **)(*(void *)(a1 + 32) + 104);
  id v6 = [v3 rawToken];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100310128;
  v8[3] = &unk_10085A838;
  double v10 = v4;
  id v7 = v3;
  id v9 = v7;
  [v5 addPeerToken:v6 completion:v8];
}

void sub_100310104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100310128(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = sub_100006C38() - *(double *)(a1 + 40);
  double v5 = qword_1008ABDE0;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_10042F744();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138478083;
    uint64_t v8 = v6;
    __int16 v9 = 2048;
    double v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#find-disc,SpatialInteraction: added %{private}@ to scanner [%0.6f s]", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100310228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  uint64_t v24 = v23;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1003105E0(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = sub_1002E1B1C(v8);
  double v4 = [v8 getIRK];
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  id v6 = v3;
  xpc_dictionary_set_data(v5, "btAd", [v6 bytes], (size_t)[v6 length]);
  id v7 = v4;
  xpc_dictionary_set_data(v5, "irkD", [v7 bytes], (size_t)[v7 length]);
  xpc_dictionary_set_uint64(v5, "irkT", 1uLL);
  xpc_array_set_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), 0xFFFFFFFFFFFFFFFFLL, v5);
}

void sub_10031070C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003108C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_100310908(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    xpc_object_t v5 = WeakRetained;
    [WeakRetained[22] removeObjectForKey:*(void *)(a1 + 32)];
    id v3 = [v5[21] objectForKey:*(void *)(a1 + 32)];
    if (v3)
    {
      id v4 = objc_loadWeakRetained(v5 + 5);
      [v4 didGenerateAdvertisement:v3 toSendOOBToPeer:*(void *)(a1 + 32)];
      [v5 _configureAdvertisementOOBRefreshTimerForToken:*(void *)(a1 + 32)];
    }
    id WeakRetained = v5;
  }
}

void sub_1003109B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100310B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_100310BCC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    [WeakRetained[23] removeObjectForKey:*(void *)(a1 + 32)];
    id v3 = [v6[21] objectForKey:*(void *)(a1 + 32)];

    id WeakRetained = v6;
    if (v3)
    {
      id v4 = [v6 stopAdvertisingToPeer:*(void *)(a1 + 32)];
      id v5 = objc_loadWeakRetained(v6 + 5);
      [v5 didStopAdvertisingToPeer:*(void *)(a1 + 32)];

      id WeakRetained = v6;
    }
  }
}

void sub_100310C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100310E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_100310E58(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    [WeakRetained[19] removeObjectForKey:*(void *)(a1 + 32)];
    id v3 = [v5[17] objectForKey:*(void *)(a1 + 32)];

    [v5 _resetDiscoveryStateForPeer:*(void *)(a1 + 32)];
    id WeakRetained = v5;
    if (v3)
    {
      id v4 = objc_loadWeakRetained(v5 + 5);
      [v4 didLosePeer:*(void *)(a1 + 32)];

      id WeakRetained = v5;
    }
  }
}

void sub_100310EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10031116C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003111AC(uint64_t a1, void *a2, unsigned char *a3)
{
  id v10 = a2;
  id v6 = [*(id *)(a1 + 32) btAddressData];
  id v7 = sub_10030997C(v10, v6);

  id v8 = [*(id *)(a1 + 32) nearbyActionNoWakeAuthTagData];
  unsigned int v9 = [v7 isEqualToData:v8];

  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }
}

void sub_100311278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100311528(_Unwind_Exception *a1)
{
  operator delete(v3);

  _Unwind_Resume(a1);
}

void sub_1003119C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

void sub_100311D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100311F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100312090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003123F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10031252C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100312864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_100312AB8(_Unwind_Exception *a1)
{
  if (v3) {

  }
  _Unwind_Resume(a1);
}

void *sub_100312BE4(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return sub_100312EE4(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
}

char *sub_100312C1C(char *result, uint64_t a2)
{
  if (result != (char *)a2) {
    return sub_100312F60(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void sub_100312CB8(id a1)
{
  if (+[NIPlatformInfo isInternalBuild])
  {
    id v1 = +[NSUserDefaults standardUserDefaults];
    byte_1008A9E20 = [v1 BOOLForKey:@"FindingTestModeStaticAuthTag"];

    uint64_t v2 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    v7[0] = 67109120;
    v7[1] = byte_1008A9E20;
    uint64_t v3 = "#find-disc,Static tag test mode: %d";
    id v4 = v2;
    uint32_t v5 = 8;
  }
  else
  {
    byte_1008A9E20 = 0;
    uint64_t v6 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v7[0]) = 0;
    uint64_t v3 = "#find-disc,Static tag test mode never allowed";
    id v4 = v6;
    uint32_t v5 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)v7, v5);
}

void sub_100312DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100312DFC(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  byte_1008A9E38 = [v1 BOOLForKey:@"FindingDisableClientDiscoveryEvents"];

  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = byte_1008A9E38;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#find-disc,Disable client discovery events: %d", (uint8_t *)v3, 8u);
  }
}

void sub_100312ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100312EE4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = sub_10003B600(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100312F44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100312F60(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unsigned int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_1000267C4();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = sub_10003B600(v7, v11);
    double v13 = (char *)v7[1];
    id v12 = (void **)(v7 + 1);
    unsigned int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      __int16 v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  id v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  __int16 v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unsigned int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    __int16 v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

void sub_10031306C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void *sub_100313088@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100861400)[a1]);
}

void *sub_10031309C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_100861458)[a1]);
}

void *sub_1003130B0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_1008614A0)[a1]);
}

void *sub_1003130C4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, (&off_1008614C0)[a1]);
}

void sub_10031341C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1003136F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a12 && __p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }

  _Unwind_Resume(a1);
}

void sub_100313CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100315318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  STACK[0x400] = (unint64_t)&STACK[0x310];
  sub_10031F5E0((void ***)&STACK[0x400]);

  _Unwind_Resume(a1);
}

uint64_t sub_100315740(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_1000267C4();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    uint8_t v20[4] = v4;
    if (v14) {
      unint64_t v15 = (char *)sub_1002FE83C(v4, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    __int16 v16 = &v15[48 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int16 v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((_WORD *)v16 + 20) = *((_WORD *)a2 + 20);
    *(_OWORD *)(v16 + 24) = v18;
    v20[2] = v16 + 48;
    sub_10031F684(a1, v20);
    uint64_t v10 = a1[1];
    sub_10031F82C((uint64_t)v20);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(_WORD *)(v7 + 40) = *((_WORD *)a2 + 20);
    *(_OWORD *)(v7 + 24) = v9;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return v10 - 48;
}

void sub_10031588C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10031F82C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100315B10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1008AA280);

  _Unwind_Resume(a1);
}

void sub_100316894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100316AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100316C34()
{
}

void sub_100316D60()
{
}

void sub_100316E74()
{
}

void sub_100316F7C()
{
}

void sub_100317090()
{
}

void sub_100317714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }

  _Unwind_Resume(a1);
}

void *sub_100317874(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    sub_1003212C8(a1, a3);
    a1[1] = sub_100321364(v4, a2, a2 + 160 * a3, a1[1]);
  }
  return a1;
}

void sub_1003178F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1003214E4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100317914(int a1)
{
  sub_1002363E4((uint64_t)v4);
  uint64_t v2 = v4[0];
  *(void *)((char *)&v4[2] + *(void *)(v4[0] - 24)) = a1;
  *(_DWORD *)((char *)&v4[1] + *(void *)(v2 - 24)) = *(_DWORD *)((unsigned char *)&v4[1] + *(void *)(v2 - 24)) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100317AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023657C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003189C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100318EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003190A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  _Unwind_Resume(a1);
}

void sub_100319604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

void *sub_1003196BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10089F510, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10089F510))
  {
    __cxa_atexit((void (*)(void *))nullsub_148, &unk_10089F508, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10089F510);
  }
  return &unk_10089F508;
}

void sub_100319828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100319994(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10038E240();
    operator delete();
  }
  return result;
}

void sub_10031A474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_10031A918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031AAA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031ACD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  sub_1001500AC(&a11);
  _Unwind_Resume(a1);
}

void sub_10031B3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45)
{
  if (__p) {
    operator delete(__p);
  }

  if (a43 < 0) {
    operator delete(a38);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10031B528()
{
  sub_100054E28((uint64_t)v2);
  *(void *)((char *)&v2[2] + *(void *)(v2[0] - 24)) = 4;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v2
  v2[2] = v0;
  if (v3 < 0) {
    operator delete((void *)v2[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10031B6C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100055100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10031B85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10031BF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  _Unwind_Resume(a1);
}

void sub_10031C5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48)
{
  _Unwind_Resume(a1);
}

void sub_10031CA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  _Unwind_Resume(a1);
}

void sub_10031D19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031D914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10031DA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10031DE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031E104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031E238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031E370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031E4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031E5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031E658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031E6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031E82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10031E964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031EDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  sub_10023657C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10031EF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031F0A0(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10031F33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031F440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031F524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10031F564(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_1001503E8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10031F5C4(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10031F5E0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10031F634((uint64_t *)v2);
    char v3 = **a1;
    operator delete(v3);
  }
}

void sub_10031F634(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  a1[1] = v2;
}

uint64_t sub_10031F684(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10031F6FC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10031F6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(_WORD *)(v9 - 8) = *(_WORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  sub_10031F7AC((uint64_t)v13);
  return a6;
}

uint64_t sub_10031F7AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10031F7E4(a1);
  }
  return a1;
}

void sub_10031F7E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 48;
  }
}

uint64_t sub_10031F82C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10031F864(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 6;
      *(void *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t *sub_10031F8BC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002C3FA0(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_10031F8FC(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_10031F914(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10031F998(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10031FA1C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10031FAA0(uint64_t a1)
{
  return a1;
}

void sub_10031FACC(uint64_t a1)
{
  operator delete();
}

void *sub_10031FB18(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100861260;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_10031FB70(uint64_t a1, void *a2)
{
  *a2 = off_100861260;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_10031FBB8(uint64_t a1)
{
}

void sub_10031FBC0(id *a1)
{
  operator delete(a1);
}

void sub_10031FBFC(uint64_t a1, double *a2, uint64_t *a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t *a7, unsigned __int8 *a8)
{
  double v8 = *a2;
  uint64_t v9 = *a3;
  LOBYTE(v30[0]) = 0;
  char v34 = 0;
  if (*(unsigned char *)(a4 + 48))
  {
    *(_OWORD *)uint64_t v30 = *(_OWORD *)a4;
    uint64_t v31 = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    long long v32 = *(_OWORD *)(a4 + 24);
    __int16 v33 = *(_WORD *)(a4 + 40);
    char v34 = 1;
  }
  LOBYTE(__p[0]) = 0;
  char v29 = 0;
  if (*(unsigned char *)(a5 + 48))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a5;
    uint64_t v26 = *(void *)(a5 + 16);
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    long long v27 = *(_OWORD *)(a5 + 24);
    __int16 v28 = *(_WORD *)(a5 + 40);
    char v29 = 1;
  }
  long long v21 = a6[8];
  long long v22 = a6[9];
  long long v23 = a6[10];
  long long v24 = a6[11];
  long long v17 = a6[4];
  long long v18 = a6[5];
  long long v19 = a6[6];
  long long v20 = a6[7];
  long long v13 = *a6;
  long long v14 = a6[1];
  long long v15 = a6[2];
  long long v16 = a6[3];
  uint64_t v10 = *a7;
  int v11 = *a8;
  unint64_t v12 = *(void **)(a1 + 8);
  sub_10031FE98((char *)v39, (long long *)v30);
  sub_10031FE98((char *)v36, (long long *)__p);
  v35[8] = v21;
  v35[9] = v22;
  v35[10] = v23;
  v35[11] = v24;
  v35[4] = v17;
  v35[5] = v18;
  v35[6] = v19;
  v35[7] = v20;
  v35[0] = v13;
  v35[1] = v14;
  v35[2] = v15;
  v35[3] = v16;
  [v12 _handleRegionChangeForDevice:v9 currentRegion:v39 prevRegion:v36 timestamp:v35 rangeResult:v10 intentPrediction:v11 != 0 regionTransitionSuppressed:v8];
  if (v38 && v37 < 0) {
    operator delete(v36[0]);
  }
  if (v41 && v40 < 0) {
    operator delete(v39[0]);
  }
  if (v29 && SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (v34)
  {
    if (SHIBYTE(v31) < 0) {
      operator delete(v30[0]);
    }
  }
}

void sub_10031FDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (*(unsigned char *)(v53 - 128) && *(char *)(v53 - 153) < 0) {
    operator delete(*(void **)(v53 - 176));
  }
  if (*(unsigned char *)(v53 - 72) && *(char *)(v53 - 97) < 0) {
    operator delete(*(void **)(v53 - 120));
  }
  if (a42 && a38 < 0) {
    operator delete(__p);
  }
  if (a53)
  {
    if (a49 < 0) {
      operator delete(a44);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10031FE4C(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008612D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031FE8C()
{
  return &off_1008612D0;
}

char *sub_10031FE98(char *a1, long long *a2)
{
  *a1 = 0;
  a1[48] = 0;
  sub_10031FEE4(a1, a2);
  return a1;
}

void sub_10031FEC8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48)) {
    sub_1004305AC((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10031FEE4(char *__dst, long long *a2)
{
  if (*((unsigned char *)a2 + 48))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    __n128 result = *(__n128 *)((char *)a2 + 24);
    *((_WORD *)__dst + 20) = *((_WORD *)a2 + 20);
    *(__n128 *)(__dst + 24) = result;
    __dst[48] = 1;
  }
  return result;
}

uint64_t sub_10031FF50(uint64_t a1)
{
  return a1;
}

void sub_10031FF7C(uint64_t a1)
{
  operator delete();
}

void *sub_10031FFC8(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_1008612F0;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_100320020(uint64_t a1, void *a2)
{
  *a2 = off_1008612F0;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100320068(uint64_t a1)
{
}

void sub_100320070(id *a1)
{
  operator delete(a1);
}

void sub_1003200AC(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, double *a4, unsigned int *a5, long long *a6, unsigned int *a7)
{
  int v7 = *a2;
  uint64_t v8 = *a3;
  double v9 = *a4;
  uint64_t v10 = *a5;
  LOBYTE(v13) = 0;
  char v15 = 0;
  if (*((unsigned char *)a6 + 24))
  {
    long long v13 = *a6;
    uint64_t v14 = *((void *)a6 + 2);
    *((void *)a6 + 1) = 0;
    *((void *)a6 + 2) = 0;
    *(void *)a6 = 0;
    char v15 = 1;
  }
  else if (v7)
  {
    __assert_rtn("operator()", "NIServerNearbyUpdatesEngine.mm", 405, "regionsVector.has_value()");
  }
  uint64_t v11 = *a7;
  unint64_t v12 = *(void **)(a1 + 8);
  sub_10032024C((char *)v16, (uint64_t)&v13);
  [v12 _handleDeviceMonitorActivation:v7 != 0 forDevice:v8 timestamp:v10 regionSizeCategory:v16 regions:v11 predictorType:v9];
  if (v17)
  {
    long long v18 = v16;
    sub_10031F5E0((void ***)&v18);
  }
  if (v15)
  {
    v16[0] = (void **)&v13;
    sub_10031F5E0(v16);
  }
}

void sub_1003201BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t *a18)
{
  if (a17)
  {
    a18 = (uint64_t *)&a14;
    sub_10031F5E0((void ***)&a18);
  }
  if (a12)
  {
    a18 = &a9;
    sub_10031F5E0((void ***)&a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100320200(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_100861360)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100320240()
{
  return &off_100861360;
}

char *sub_10032024C(char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[24] = 0;
  sub_1003202A4(a1, a2);
  return a1;
}

void sub_100320284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 24))
  {
    a10 = v10;
    sub_10031F5E0((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003202A4(char *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *(void *)id result = 0;
    *((void *)result + 1) = 0;
    *((void *)result + 2) = 0;
    id result = sub_1003202FC(result, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    v2[24] = 1;
  }
  return result;
}

char *sub_1003202FC(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100320384(result, a4);
    id result = sub_1003203D8((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_100320364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10031F5E0(&a9);
  _Unwind_Resume(a1);
}

char *sub_100320384(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_1000267C4();
  }
  id result = (char *)sub_1002FE83C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

char *sub_1003203D8(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  long long v13 = __dst;
  uint64_t v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_100002DE4(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v8 = v14;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
        uint64_t v8 = v4;
      }
      long long v9 = *(long long *)((char *)v6 + 24);
      *((_WORD *)v4 + 20) = *((_WORD *)v6 + 20);
      *(_OWORD *)(v4 + 24) = v9;
      v6 += 3;
      uint64_t v4 = v8 + 48;
      uint64_t v14 = v8 + 48;
    }
    while (v6 != a3);
  }
  char v12 = 1;
  sub_1003204AC((uint64_t)v11);
  return v4;
}

void sub_100320498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003204AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1003204E4(a1);
  }
  return a1;
}

void sub_1003204E4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0) {
      operator delete(*(void **)(v1 - 48));
    }
    v1 -= 48;
  }
}

uint64_t sub_10032052C(uint64_t a1)
{
  return a1;
}

void sub_100320558(uint64_t a1)
{
  operator delete();
}

void *sub_1003205A4(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = off_100861380;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_1003205FC(uint64_t a1, void *a2)
{
  *a2 = off_100861380;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_100320644(uint64_t a1)
{
}

void sub_10032064C(id *a1)
{
  operator delete(a1);
}

id sub_100320688(uint64_t a1, double *a2, uint64_t *a3, _OWORD *a4)
{
  double v4 = *a2;
  uint64_t v5 = *a3;
  long long v6 = a4[9];
  v13[8] = a4[8];
  v13[9] = v6;
  long long v7 = a4[11];
  v13[10] = a4[10];
  v13[11] = v7;
  long long v8 = a4[5];
  v13[4] = a4[4];
  void v13[5] = v8;
  long long v9 = a4[7];
  v13[6] = a4[6];
  v13[7] = v9;
  long long v10 = a4[1];
  v13[0] = *a4;
  v13[1] = v10;
  long long v11 = a4[3];
  v13[2] = a4[2];
  void v13[3] = v11;
  return [*(id *)(a1 + 8) _handleBoundedRegionRange:v5 forDevice:v13 rangeResult:v4];
}

uint64_t sub_1003206E8(uint64_t a1, uint64_t a2)
{
  if (sub_10003E730(a2, (uint64_t)&off_1008613F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100320728()
{
  return &off_1008613F0;
}

uint64_t sub_100320734(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1003207CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100320864(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1003208FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100320980(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100320A04(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100320A88(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4, uint64_t **a5)
{
  unint64_t v9 = *a2;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v5 = *a2;
      if (v9 >= v10) {
        unint64_t v5 = v9 % v10;
      }
    }
    else
    {
      unint64_t v5 = (v10 - 1) & v9;
    }
    char v12 = *(void ***)(*(void *)a1 + 8 * v5);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == v9) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v5) {
            break;
          }
        }
      }
    }
  }
  char v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v9;
  long long v16 = *a5;
  i[2] = **a4;
  uint64_t v17 = *v16;
  uint64_t *v16 = 0;
  i[3] = v17;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_10002AA24(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v5 = v9 % v10;
      }
      else {
        unint64_t v5 = v9;
      }
    }
    else
    {
      unint64_t v5 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v5);
  if (v25)
  {
    void *i = *v25;
LABEL_38:
    void *v25 = i;
    goto LABEL_39;
  }
  void *i = *v15;
  void *v15 = i;
  *(void *)(v24 + 8 * v5) = v15;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_100320CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_100320CE8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_100320CE8(uint64_t a1, uint64_t *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_100319994(__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void sub_100320D40(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    double v4 = (void **)(a2 + 528);
    sub_100320DD0(&v4);
    sub_10003AC1C((void *)(a2 + 456));
    sub_100320E74((void *)(a2 + 136), 0);
    if (*(unsigned char *)(a2 + 128))
    {
      uint64_t v3 = *(void **)(a2 + 96);
      if (v3)
      {
        *(void *)(a2 + 104) = v3;
        operator delete(v3);
      }
    }
    sub_100320EFC((uint64_t *)(a2 + 72), 0);
    operator delete();
  }
}

void sub_100320DD0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100320E24((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100320E24(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 96)
  {
    if (*(char *)(i - 73) < 0) {
      operator delete(*(void **)(i - 96));
    }
  }
  a1[1] = v2;
}

void *sub_100320E74(void *a1, uint64_t a2)
{
  id result = (void *)*a1;
  *a1 = a2;
  if (result)
  {
    result[21] = off_100853598;
    result[13] = off_100853598;
    result[5] = off_100853598;
    operator delete();
  }
  return result;
}

uint64_t sub_100320EFC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100320F4C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100320F4C(uint64_t a1)
{
  *(void *)(a1 + 856) = off_100853598;
  *(void *)(a1 + 776) = off_100853598;
  long long v7 = (void **)(a1 + 712);
  sub_1003210D8(&v7);
  long long v7 = (void **)(a1 + 688);
  sub_100321130(&v7);
  long long v7 = (void **)(a1 + 664);
  sub_1003210D8(&v7);
  *(void *)(a1 + 536) = off_100853598;
  *(void *)(a1 + 472) = off_100853598;
  *(void *)(a1 + 336) = off_100853598;
  *(void *)(a1 + 264) = off_100853598;
  *(void *)(a1 + 192) = off_100853598;
  long long v7 = (void **)(a1 + 168);
  sub_1003211A8(&v7);
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + 48) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1003210D8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    if (v3 != v2)
    {
      double v4 = v3 - 72;
      do
      {
        *((void *)v3 - 9) = off_100853598;
        v4 -= 112;
        v3 -= 112;
      }
      while (v3 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

void sub_100321130(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    if (v3 != v2)
    {
      double v4 = v3 - 176;
      do
      {
        *((void *)v3 - 14) = off_100853598;
        *((void *)v3 - 22) = off_100853598;
        v4 -= 208;
        v3 -= 208;
      }
      while (v3 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

void sub_1003211A8(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_1003211FC((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_1003211FC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 != a2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = v2 + v3;
      *(void *)(v4 - 64) = off_100853598;
      *(void *)(v4 - 192) = off_100853598;
      *(void *)(v2 + v3 - 304) = off_100853598;
      *(void *)(v2 + v3 - 368) = off_100853598;
      *(void *)(v2 + v3 - 432) = off_100853598;
      v3 -= 432;
    }
    while (v2 + v3 != a2);
  }
  *(void *)(result + 8) = a2;
  return result;
}

char *sub_1003212C8(void *a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    sub_1000267C4();
  }
  uint64_t result = (char *)sub_10032131C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[160 * v4];
  return result;
}

void *sub_10032131C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    sub_1000257D8();
  }
  return operator new(160 * a2);
}

uint64_t sub_100321364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v16 = a4;
  uint64_t v17 = a4;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  char v15 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_10016D488((void *)v4, *(const void **)v6, *(void *)(v6 + 8), *(void *)(v6 + 8) - *(void *)v6);
      *(_OWORD *)(v4 + 24) = *(_OWORD *)(v6 + 24);
      long long v7 = *(_OWORD *)(v6 + 40);
      long long v8 = *(_OWORD *)(v6 + 56);
      long long v9 = *(_OWORD *)(v6 + 72);
      *(_OWORD *)(v4 + 88) = *(_OWORD *)(v6 + 88);
      *(_OWORD *)(v4 + 72) = v9;
      *(_OWORD *)(v4 + 56) = v8;
      *(_OWORD *)(v4 + 40) = v7;
      long long v10 = *(_OWORD *)(v6 + 104);
      long long v11 = *(_OWORD *)(v6 + 120);
      long long v12 = *(_OWORD *)(v6 + 136);
      *(unsigned char *)(v4 + 152) = *(unsigned char *)(v6 + 152);
      *(_OWORD *)(v4 + 136) = v12;
      *(_OWORD *)(v4 + 120) = v11;
      *(_OWORD *)(v4 + 104) = v10;
      uint64_t v4 = v17 + 160;
      v17 += 160;
      v6 += 160;
    }
    while (v6 != a3);
  }
  char v15 = 1;
  sub_10032145C((uint64_t)v14);
  return v4;
}

void sub_100321448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10032145C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100321494(a1);
  }
  return a1;
}

void sub_100321494(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 160);
      v3 -= 160;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 152) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_1003214E4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100321538((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100321538(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 160);
      v4 -= 160;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 152) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *sub_100321590(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *long long v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1003217C0(_Unwind_Exception *a1)
{
  sub_1001A6714(v2, v1);
  _Unwind_Resume(a1);
}

void *sub_1003217DC(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_100321890(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100321890(a1, *a2);
    sub_100321890(a1, a2[1]);
    sub_1003218EC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1003218EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96) && *(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  int8x8_t v2 = *(void **)(a1 + 24);

  sub_10003E96C(a1 + 16, v2);
}

uint64_t *sub_10032193C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    double v6 = *(double *)(a2 + 8);
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t *)v4;
        double v8 = *(double *)(v4 + 40);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *(void *)v4;
        unint64_t v5 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4)
      {
        unint64_t v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_100321A00(a1, a3, (uint64_t)v10);
    sub_100026D98((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100321B58((uint64_t)v10, 0);
  }
  return v7;
}

void sub_100321A00(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  double v6 = operator new(0x160uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  sub_100321A70(v5, (uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_100321A58(_Unwind_Exception *a1)
{
  sub_100321B58(v1, 0);
  _Unwind_Resume(a1);
}

__n128 sub_100321A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  sub_10025A138((uint64_t *)(a2 + 16), a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a3 + 52);
  *(_OWORD *)(a2 + 40) = v5;
  sub_10025A21C(a2 + 72, (long long *)(a3 + 72));
  long long v6 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(a2 + 104) = v6;
  long long v7 = *(_OWORD *)(a3 + 136);
  long long v8 = *(_OWORD *)(a3 + 152);
  long long v9 = *(_OWORD *)(a3 + 168);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
  *(_OWORD *)(a2 + 168) = v9;
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  long long v10 = *(_OWORD *)(a3 + 200);
  long long v11 = *(_OWORD *)(a3 + 216);
  long long v12 = *(_OWORD *)(a3 + 232);
  *(_OWORD *)(a2 + 248) = *(_OWORD *)(a3 + 248);
  *(_OWORD *)(a2 + 232) = v12;
  *(_OWORD *)(a2 + 216) = v11;
  *(_OWORD *)(a2 + 200) = v10;
  __n128 result = *(__n128 *)(a3 + 264);
  long long v14 = *(_OWORD *)(a3 + 280);
  long long v15 = *(_OWORD *)(a3 + 296);
  *(void *)(a2 + 312) = *(void *)(a3 + 312);
  *(_OWORD *)(a2 + 280) = v14;
  *(_OWORD *)(a2 + 296) = v15;
  *(__n128 *)(a2 + 264) = result;
  return result;
}

void sub_100321B40(_Unwind_Exception *a1)
{
  sub_10003E96C(v2, *(void **)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_100321B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1003218EC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_100321BB0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100321C08(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100321BF0(_Unwind_Exception *a1)
{
  sub_100321890(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100321C08(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = (double *)(result + 1);
    do
    {
      __n128 result = sub_100321C94(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      long long v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          long long v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100321C94(uint64_t **a1, double *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = sub_100321D2C(a1, a2, &v12, &v11, a3);
  long long v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    long long v8 = (uint64_t **)v6;
    sub_100321A00((uint64_t)a1, a4, (uint64_t)v10);
    sub_100026D98(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_100321B58((uint64_t)v10, 0);
  }
  return v7;
}

double *sub_100321D2C(void *a1, double *a2, double **a3, double *a4, uint64_t a5)
{
  long long v5 = (double *)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (double v6 = *(double *)(a5 + 8), v7 = a2[5], v6 < v7))
  {
    long long v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      long long v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = *(uint64_t **)a2;
      do
      {
        long long v10 = (double *)v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        long long v10 = (double *)*((void *)v13 + 2);
        BOOL v14 = *(void *)v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    double v15 = *(double *)(a5 + 8);
    if (v10[5] < v15) {
      goto LABEL_17;
    }
    BOOL v16 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = v16;
          double v18 = v16[5];
          if (v15 >= v18) {
            break;
          }
          BOOL v16 = *(double **)v16;
          long long v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v16 + 1;
        BOOL v16 = (double *)*((void *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    unint64_t v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *(void *)a4 = a2;
    return a4;
  }
  uint64_t v11 = *((void *)a2 + 1);
  if (v11)
  {
    long long v12 = (double *)*((void *)a2 + 1);
    do
    {
      a4 = v12;
      long long v12 = *(double **)v12;
    }
    while (v12);
  }
  else
  {
    size_t v19 = a2;
    do
    {
      a4 = (double *)*((void *)v19 + 2);
      BOOL v14 = *(void *)a4 == (void)v19;
      size_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[5])
  {
    uint64_t v20 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = v20;
          double v21 = v20[5];
          if (v6 >= v21) {
            break;
          }
          uint64_t v20 = *(double **)v20;
          long long v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v21 >= v6) {
          break;
        }
        long long v5 = v20 + 1;
        uint64_t v20 = (double *)*((void *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_100321EC8(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001A6A4C(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_100321F20(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_100321F78(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_100321F78(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_100319994(v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_100321FC0(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  double v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    uint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        double v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        double v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v8 = a1 + 1;
LABEL_10:
    long long v10 = (uint64_t *)operator new(0x28uLL);
    void v10[4] = *a3;
    sub_100026D98(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_10032207C(uint64_t a1)
{
  sub_100321F78(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1003220B8(void **a1)
{
}

void sub_1003220C0()
{
  sub_100004950(&qword_1008A9E40, "/System/Library/NearbyInteractionBundles");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008A9E40, (void *)&_mh_execute_header);
  sub_100004950(&qword_1008A9E58, "BiasEstimatorResourceBundle.bundle");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008A9E58, (void *)&_mh_execute_header);
  v9[0] = xmmword_1004C09C8;
  v9[1] = unk_1004C09D8;
  sub_1001A003C((uint64_t)&unk_1008A9E70, (int *)v9, 4);
  xmmword_1008A9E88 = xmmword_1004B7660;
  *(_OWORD *)&qword_1008A9E98 = xmmword_1004B7670;
  qword_1008A9EB0 = 0;
  unk_1008A9EB8 = 0;
  qword_1008A9EA8 = 0x3FD999999999999ALL;
  unk_1008A9EC0 = xmmword_1004B7680;
  dword_1008A9ED0 = 5;
  qword_1008A9ED8 = 0x4000000000000000;
  LODWORD(qword_1008A9EE0) = 5;
  byte_1008A9EE8 = 0;
  unk_1008A9EEC = 0x30000000ALL;
  xmmword_1008A9EF8 = xmmword_1004B7690;
  unk_1008A9F08 = xmmword_1004B76A0;
  xmmword_1008A9F18 = xmmword_1004B76B0;
  qword_1008A9F28 = 0x3FE3333333333333;
  dword_1008A9F30 = 3;
  xmmword_1008A9F38 = xmmword_1004B76C0;
  unk_1008A9F48 = xmmword_1004B76A0;
  xmmword_1008A9F58 = xmmword_1004B7690;
  qword_1008A9F68 = 0x3FE3333333333333;
  LOBYTE(qword_1008A9F70) = 0;
  xmmword_1008A9F78 = xmmword_1004B76D0;
  unk_1008A9F88 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v8 = _Q0;
  xmmword_1008A9F98 = _Q0;
  qword_1008A9FA8 = 0xBFD3333333333333;
  xmmword_1008A9FB0 = xmmword_1004B76F0;
  qword_1008A9FC0 = 0x3E99999A40000000;
  xmmword_1008A9FC8 = xmmword_1004B7670;
  qword_1008A9FE0 = 0;
  unk_1008A9FE8 = 0;
  qword_1008A9FD8 = 0x3FD999999999999ALL;
  xmmword_1008A9FF0 = xmmword_1004B7680;
  dword_1008AA000 = 5;
  qword_1008AA008 = 0x4000000000000000;
  dword_1008AA010 = 4;
  *(void *)&xmmword_1008AA018 = 0x300000008;
  *((void *)&xmmword_1008AA018 + 1) = 0xC04E800000000000;
  long long v10 = (char *)0xC04E800000000000;
  sub_1001A02EC((uint64_t)algn_1008AA028, (double *)&v10, 1);
  xmmword_1008AA040 = xmmword_1004B7700;
  qword_1008AA050 = 0x4024000000000000;
  dword_1008AA058 = 45;
  LOBYTE(byte_1008AA060) = 0;
  byte_1008AA078 = 0;
  *(void *)&xmmword_1008AA080 = 0;
  BYTE8(xmmword_1008AA080) = 0;
  HIDWORD(xmmword_1008AA080) = 1;
  byte_1008AA090 = 1;
  xmmword_1008AA098 = xmmword_1004B7710;
  unk_1008AA0A8 = xmmword_1004B7720;
  xmmword_1008AA0B8 = v8;
  qword_1008AA0C8 = 0xC059000000000000;
  xmmword_1008AA0D0 = xmmword_1004B7730;
  *(int32x2_t *)&xmmword_1008AA0E0 = vdup_n_s32(0x3DCCCCCDu);
  *(long long *)((char *)&xmmword_1008AA0E0 + 8) = xmmword_1004B7670;
  qword_1008AA0F8 = 0x3FD999999999999ALL;
  xmmword_1008AA100 = 0uLL;
  xmmword_1008AA110 = xmmword_1004B7680;
  LODWORD(xmmword_1008AA120) = 5;
  *((void *)&xmmword_1008AA120 + 1) = 0x4000000000000000;
  dword_1008AA130 = 10;
  qword_1008AA138 = 0x4034000000000000;
  LODWORD(xmmword_1008AA140) = 3;
  *(long long *)((char *)&xmmword_1008AA140 + 8) = xmmword_1004B7740;
  __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008A9E70, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_72, off_10089F4F8, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_73, &off_10089F500, (void *)&_mh_execute_header);
  qword_1008AA160 = 0;
  unk_1008AA168 = 0;
  qword_1008AA158 = 0;
  double v6 = operator new(0x40uLL);
  qword_1008AA160 = (uint64_t)(v6 + 4);
  unk_1008AA168 = v6 + 4;
  _OWORD *v6 = xmmword_1004C09E8;
  v6[1] = unk_1004C09F8;
  v6[2] = xmmword_1004C0A08;
  void v6[3] = unk_1004C0A18;
  qword_1008AA158 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA158, (void *)&_mh_execute_header);
  qword_1008AA178 = 0;
  unk_1008AA180 = 0;
  qword_1008AA170 = 0;
  uint64_t v7 = operator new(0x10uLL);
  qword_1008AA178 = (uint64_t)(v7 + 1);
  unk_1008AA180 = v7 + 1;
  _OWORD *v7 = xmmword_1004C0A28;
  qword_1008AA170 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA170, (void *)&_mh_execute_header);
  *(void *)&v9[0] = "AntennaMask_1_NN_V5_Model_DeviceType_201.mlmodelc/fp16_model.espresso";
  *((void *)&v9[0] + 1) = "net";
  sub_1002A4368(&qword_1008AA188, (char **)v9);
  long long v10 = "AntennaMask_2_NN_V5_Model_DeviceType_201.mlmodelc/fp16_model.espresso";
  uint64_t v11 = "net";
  sub_1002A4368(qword_1008AA1B8, &v10);
  __cxa_atexit((void (*)(void *))sub_1002933D4, &qword_1008AA188, (void *)&_mh_execute_header);
  *(void *)&v9[0] = "AntennaMask_1_NN_V5_ScalingModel_DeviceType_201";
  *((void *)&v9[0] + 1) = "mlmodelc";
  sub_1002A4368(&qword_1008AA1E8, (char **)v9);
  long long v10 = "AntennaMask_2_NN_V5_ScalingModel_DeviceType_201";
  uint64_t v11 = "mlmodelc";
  sub_1002A4368(qword_1008AA218, &v10);
  __cxa_atexit((void (*)(void *))sub_1002933D4, &qword_1008AA1E8, (void *)&_mh_execute_header);
  sub_100004950(qword_1008AA248, "input_1");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008AA248, (void *)&_mh_execute_header);
  sub_100004950(qword_1008AA260, "Identity");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1008AA260, (void *)&_mh_execute_header);
}

void sub_100322620(_Unwind_Exception *exception_object)
{
  if (byte_1008AA217 < 0) {
    sub_1004305BC();
  }
  if (byte_1008AA1FF < 0) {
    operator delete((void *)qword_1008AA1E8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003228D4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100322AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100322EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100323340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10032369C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100323934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100323D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_100324180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003242E0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1003243D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003244E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100324614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003246D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100324824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100324920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100324A80(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100324B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100324C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100324D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100324E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100324F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100325034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003250C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100325148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100325240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100325364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003254E8(id a1)
{
  uint64_t v1 = objc_alloc_init(PRGlobalDebugSettings);
  uint64_t v2 = (void *)qword_1008AA288;
  qword_1008AA288 = (uint64_t)v1;
}

void sub_10032599C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100325BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100325CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100325E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100326128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100326304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100326404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100326574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100326688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100326804(char *a1@<X0>, void *a2@<X8>)
{
  if (a1[23] >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(char **)a1;
  }
  long long v5 = +[NSString stringWithCString:v4 encoding:4];
  double v6 = +[NSMutableString stringWithString:v5];
  id v7 = objc_alloc_init((Class)NSDateFormatter);
  uint64_t v8 = +[NSLocale localeWithLocaleIdentifier:@"en_US_POSIX"];
  uint64_t v9 = (void *)v8;
  if (v7) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    uint64_t v11 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004305FC(v11);
    }
    double v12 = sub_100006C38();
    std::to_string(&v19, v12);
    sub_1001589F4((const void **)a1, (const void **)&v19.__r_.__value_.__l.__data_, (uint64_t)&__p);
    long long v13 = std::string::append(&__p, ".protobuf.log");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    [v7 setLocale:v8];
    [v7 setDateFormat:@"yyyy_MM_dd_HH_mm_ss"];
    double v15 = +[NSTimeZone timeZoneWithName:@"UTC"];
    [v7 setTimeZone:v15];

    BOOL v16 = +[NSDate date];
    unint64_t v17 = [v7 stringFromDate:v16];

    [v6 appendString:v17];
    [v6 appendString:@".protobuf.log"];
    sub_100004950(a2, (char *)[v6 UTF8String]);
  }
}

void sub_100326A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_100326CB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100326CCC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100326D58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100326ED4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100326EE8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_100326F58(void *a1, id a2)
{
  id v3 = a1;
  uint64_t v4 = +[NSUserDefaults standardUserDefaults];
  long long v5 = [v4 objectForKey:v3];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    a2 = [v5 intValue];
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *((void *)&off_1008615D0 + v6);
    int v10 = 138412802;
    id v11 = v3;
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 1024;
    int v15 = (int)a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#PRDefaults,%@[%@] = %d", (uint8_t *)&v10, 0x1Cu);
  }

  return a2;
}

void sub_1003270A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003270D8(void *a1, id a2)
{
  id v3 = a1;
  uint64_t v4 = +[NSUserDefaults standardUserDefaults];
  long long v5 = [v4 objectForKey:v3];

  if (v5) {
    a2 = [v4 BOOLForKey:v3];
  }
  uint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *((void *)&off_1008615D0 + (v5 != 0));
    int v9 = 138412802;
    id v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    __int16 v13 = 1024;
    int v14 = (int)a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#PRDefaults,%@[%@] = %d", (uint8_t *)&v9, 0x1Cu);
  }

  return a2;
}

void sub_100327208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_100327230(void *a1, double a2)
{
  id v3 = a1;
  uint64_t v4 = +[NSUserDefaults standardUserDefaults];
  long long v5 = [v4 objectForKey:v3];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    [v5 doubleValue];
    a2 = v6;
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *((void *)&off_1008615D0 + v7);
    int v11 = 138412802;
    id v12 = v3;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    __int16 v15 = 2048;
    double v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#PRDefaults,%@[%@] = %f", (uint8_t *)&v11, 0x20u);
  }

  return a2;
}

void sub_100327384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100327528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100327628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003276FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10032789C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100327A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100327B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100327C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *AONSenseSampleProvider.AONSENSE_FRAMEWORK_AVAILABLE.unsafeMutableAddressor()
{
  return &static AONSenseSampleProvider.AONSENSE_FRAMEWORK_AVAILABLE;
}

uint64_t static AONSenseSampleProvider.AONSENSE_FRAMEWORK_AVAILABLE.getter()
{
  return 1;
}

id sub_100327CE4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AONSenseSampleProvider()) init];
  static AONSenseSampleProvider.shared = (uint64_t)result;
  return result;
}

id AONSenseSampleProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

uint64_t *AONSenseSampleProvider.shared.unsafeMutableAddressor()
{
  if (qword_1008AA298 != -1) {
    swift_once();
  }
  return &static AONSenseSampleProvider.shared;
}

id static AONSenseSampleProvider.shared.getter()
{
  if (qword_1008AA298 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static AONSenseSampleProvider.shared;

  return v0;
}

uint64_t AONSenseSampleProvider.register(queue:callback:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  double v6 = &v4[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__callout];
  uint64_t v7 = *(void *)&v4[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__callout];
  *(void *)double v6 = a2;
  *((void *)v6 + 1) = a3;
  swift_retain();
  sub_100327FCC(v7);
  type metadata accessor for ALFBtAdvResultsRequester();
  swift_allocObject();
  id v8 = a1;
  uint64_t v9 = ALFBtAdvResultsRequester.init(queue:)();
  uint64_t v10 = OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__aonSense;
  *(void *)&v4[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__aonSense] = v9;
  uint64_t result = swift_release();
  if (*(void *)&v4[v10])
  {
    *(void *)(swift_allocObject() + 16) = v4;
    swift_retain();
    id v12 = v4;
    dispatch thunk of ALFBtAdvResultsRequester.register(callback:intervalSec:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100327FCC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100327FDC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100328014(uint64_t a1, char a2)
{
  return sub_10032812C(a1, a2);
}

unint64_t sub_100328038()
{
  unint64_t result = qword_10089F528;
  if (!qword_10089F528)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10089F528);
  }
  return result;
}

uint64_t variable initialization expression of AONSenseSampleProvider._callout()
{
  return 0;
}

uint64_t variable initialization expression of AONSenseSampleProvider._aonSense()
{
  return 0;
}

uint64_t sub_10032812C(uint64_t a1, char a2)
{
  uint64_t v5 = sub_100328A24(&qword_10089F558);
  __chkstk_darwin(v5 - 8, v6, v7);
  v85 = (char *)v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ALBtAdvertisement.BtType();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v13 = __chkstk_darwin(v9, v11, v12);
  __int16 v15 = (char *)v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16, v17);
  v78 = (char *)v63 - v18;
  uint64_t v84 = type metadata accessor for ALBtAdvertisement();
  uint64_t v19 = *(void *)(v84 - 8);
  __chkstk_darwin(v84, v20, v21);
  size_t v23 = (char *)v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for ALBtNotification();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v28 = __chkstk_darwin(v24, v26, v27);
  id v65 = (char *)v63 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v28, v30, v31);
  v72 = (char *)v63 - v33;
  uint64_t v70 = *(void *)(a1 + 16);
  if (v70)
  {
    v79 = (uint64_t *)(v2 + OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__callout);
    id v35 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    uint64_t v34 = v25 + 16;
    v75 = v35;
    uint64_t v69 = a1 + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v68 = *(void *)(v34 + 56);
    v74 = (void (**)(char *, uint64_t))(v34 - 8);
    v88 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    uint64_t v89 = v19 + 16;
    v82 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
    unsigned int v81 = enum case for ALBtAdvertisement.BtType.type7(_:);
    v80 = (void (**)(char *, void, uint64_t))(v10 + 104);
    v87 = (void (**)(char *, uint64_t))(v19 + 8);
    v63[0] = a1;
    swift_bridgeObjectRetain();
    v83 = v15;
    uint64_t v36 = 0;
    unsigned int v76 = a2 & 1;
    *(void *)&long long v37 = 136315394;
    long long v64 = v37;
    v63[1] = (char *)&type metadata for Any + 8;
    uint64_t v38 = v84;
    uint64_t v66 = v34;
    char v39 = v72;
    uint64_t v71 = v19;
    uint64_t v67 = v24;
    v86 = (void (**)(char *, uint64_t))(v10 + 8);
    do
    {
      uint64_t v77 = v36;
      v75(v39, v69 + v68 * v36, v24);
      char v40 = ALBtNotification.isScreenOn.getter();
      char v41 = v39;
      if (v40 != 2)
      {
        char v42 = v40;
        os_log_type_t v43 = static os_log_type_t.debug.getter();
        sub_100328038();
        CFStringRef v44 = static OS_os_log.default.getter();
        id v45 = v65;
        v75(v65, (uint64_t)v41, v24);
        if (os_log_type_enabled(v44, v43))
        {
          uint64_t v46 = swift_slowAlloc();
          uint64_t v91 = swift_slowAlloc();
          *(_DWORD *)uint64_t v46 = v64;
          if (v42) {
            unint64_t v47 = 0xE90000000000006ELL;
          }
          else {
            unint64_t v47 = 0xEA00000000006666;
          }
          *(void *)(v46 + 4) = sub_100328AC0(0x4F206E6565726353, v47, &v91);
          swift_bridgeObjectRelease();
          *(_WORD *)(v46 + 12) = 2048;
          uint64_t v48 = *(void *)(ALBtNotification.advertisements.getter() + 16);
          swift_bridgeObjectRelease();
          (*v74)(v45, v24);
          *(void *)(v46 + 14) = v48;
          _os_log_impl((void *)&_mh_execute_header, v44, v43, "#AONSenseSampleProvider #QE_Log - screen state for this notification: %s with Advertisement count: %ld", (uint8_t *)v46, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          (*v74)(v45, v24);
        }

        uint64_t v19 = v71;
        char v41 = v72;
      }
      char v39 = v41;
      uint64_t v49 = ALBtNotification.advertisements.getter();
      uint64_t v50 = *(void *)(v49 + 16);
      if (v50)
      {
        uint64_t v51 = *(unsigned __int8 *)(v19 + 80);
        uint64_t v73 = v49;
        uint64_t v52 = v49 + ((v51 + 32) & ~v51);
        uint64_t v90 = *(void *)(v19 + 72);
        uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
        id v54 = v78;
        uint64_t v55 = (uint64_t)v85;
        v53(v23, v52, v38);
        while (1)
        {
          ALBtAdvertisement.type.getter();
          if ((*v88)(v55, 1, v9) == 1)
          {
            (*v87)(v23, v38);
            sub_10032A0F0(v55, &qword_10089F558);
          }
          else
          {
            (*v82)(v54, v55, v9);
            id v56 = v83;
            (*v80)(v83, v81, v9);
            sub_100328A68();
            id v57 = v54;
            char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
            char v59 = *v86;
            (*v86)(v56, v9);
            if (v58)
            {
              v60 = (void (*)(uint64_t, void))*v79;
              if (*v79)
              {
                sub_10032988C(*v79);
                uint64_t v61 = sub_100329118();
                if (v61)
                {
                  id v62 = (void *)v61;
                  v60(v61, v76);
                  sub_100327FCC((uint64_t)v60);
                }
                else
                {
                  sub_100327FCC((uint64_t)v60);
                }
              }
              id v54 = v78;
              v59(v78, v9);
              uint64_t v38 = v84;
              (*v87)(v23, v84);
            }
            else
            {
              v59(v57, v9);
              uint64_t v38 = v84;
              (*v87)(v23, v84);
              id v54 = v57;
            }
            uint64_t v55 = (uint64_t)v85;
          }
          v52 += v90;
          if (!--v50) {
            break;
          }
          v53(v23, v52, v38);
        }
        swift_bridgeObjectRelease();
        uint64_t v19 = v71;
        char v39 = v72;
        uint64_t v24 = v67;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = v67;
      }
      uint64_t v36 = v77 + 1;
      (*v74)(v39, v24);
    }
    while (v36 != v70);
    return swift_bridgeObjectRelease();
  }
  return result;
}

id AONSenseSampleProvider.init()()
{
  id v1 = &v0[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__callout];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC19ProximityDaemonCore22AONSenseSampleProvider__aonSense] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for AONSenseSampleProvider();
  return [super init];
}

uint64_t type metadata accessor for AONSenseSampleProvider()
{
  return self;
}

id AONSenseSampleProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AONSenseSampleProvider();
  return [super dealloc];
}

uint64_t sub_100328A24(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_100328A68()
{
  unint64_t result = qword_10089F560;
  if (!qword_10089F560)
  {
    type metadata accessor for ALBtAdvertisement.BtType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10089F560);
  }
  return result;
}

uint64_t sub_100328AC0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100328B94(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1003298EC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1003298EC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10032989C((uint64_t)v12);
  return v7;
}

uint64_t sub_100328B94(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100328D50(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100328D50(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100328DE8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100328FC8(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100328FC8(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100328DE8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100328F60(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100328F60(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100328A24(&qword_10089F568);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100328FC8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100328A24(&qword_10089F568);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100329118()
{
  uint64_t v0 = sub_100328A24(&qword_10089F570);
  __chkstk_darwin(v0 - 8, v1, v2);
  unint64_t v4 = (char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ALBtAdvInfoType7();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7, v8);
  uint64_t v10 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = ALBtAdvertisement.rssidB.getter();
  if ((v11 & 0x100000000) != 0) {
    goto LABEL_6;
  }
  int v12 = v11;
  if ((v11 & 0x80000000) == 0)
  {
    os_log_type_t v13 = static os_log_type_t.error.getter();
    sub_100328038();
    uint64_t v14 = static OS_os_log.default.getter();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 67109120;
      LODWORD(v54) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "#AONSenseSampleProvider - invalid RSSI: %d", v16, 8u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v18 = ALBtAdvertisement.identifier.getter();
  if (!v19)
  {
LABEL_6:
    static os_log_type_t.error.getter();
    sub_100328038();
    uint64_t v17 = static OS_os_log.default.getter();
LABEL_14:
    os_log(_:dso:log:_:_:)();
LABEL_15:

    return 0;
  }
  uint64_t v20 = v18;
  uint64_t v21 = v19;
  uint64_t v22 = ALBtAdvertisement.productID.getter();
  if ((v22 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    sub_100328038();
    uint64_t v17 = static OS_os_log.default.getter();
    goto LABEL_14;
  }
  uint64_t v23 = v22;
  if (!sub_10032994C(v22) || sub_100329974(v23))
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.debug.getter();
    sub_100328038();
    uint64_t v17 = static OS_os_log.default.getter();
    goto LABEL_14;
  }
  sub_10032998C(v23);
  v49[1] = String.init(cString:)();
  uint64_t v51 = v26;
  id v27 = sub_100329D1C(v23);
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v50 = v30;

    unint64_t v31 = v50;
  }
  else
  {
    unint64_t v31 = 0xE700000000000000;
    uint64_t v29 = 0x6E776F6E6B6E55;
  }
  uint64_t v54 = v29;
  unint64_t v55 = v31;
  v32._countAndFlagsBits = v20;
  v32._object = v21;
  String.append(_:)(v32);
  ALBtAdvertisement.type7Info.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10032A0F0((uint64_t)v4, &qword_10089F570);
    static os_log_type_t.error.getter();
    sub_100328038();
    uint64_t v17 = static OS_os_log.default.getter();
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
  char v33 = ALBtAdvInfoType7.isLeftBud.getter();
  if (v33 == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    sub_100328038();
    uint64_t v34 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    return 0;
  }
  uint64_t v52 = v20;
  uint64_t v53 = v21;
  if (v33)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = 1952867660;
    unint64_t v36 = 0xE400000000000000;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = 0x7468676952;
    unint64_t v36 = 0xE500000000000000;
  }
  String.append(_:)(*(Swift::String *)&v35);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  uint64_t v37 = ALBtAdvertisement.channel.getter();
  if ((v37 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    sub_100328038();
    uint64_t v17 = static OS_os_log.default.getter();
    goto LABEL_14;
  }
  uint64_t v38 = v37;
  if ((v37 - 37) >= 3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    sub_100328038();
    uint64_t v17 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v17, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 67109120;
      LODWORD(v52) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v47, "#AONSenseSampleProvider - invalid Channel: %d", v48, 8u);
      swift_slowDealloc();
    }
    goto LABEL_15;
  }
  uint64_t result = ALBtAdvertisement.machContTimeNs.getter();
  if ((v39 & 1) == 0)
  {
    double v40 = (double)v12;
    double v41 = (double)(unint64_t)result / 1000000000.0;
    id v42 = objc_allocWithZone((Class)NIBluetoothSample);
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v24 = [v42 initWithRSSI:v43 identifier:v44 model:v38 channel:v45 machContinuousTimeSeconds:v46 partIdentifier:0 name:v40 presenceConfigData:v41];

    return (uint64_t)v24;
  }
  __break(1u);
  return result;
}

uint64_t sub_10032988C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10032989C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1003298EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10032994C(int a1)
{
  return ((a1 - 8194) < 0x23) & (0x472863101uLL >> (a1 - 2));
}

BOOL sub_100329974(int a1)
{
  return a1 == 8202 || a1 == 8223;
}

const char *sub_10032998C(int a1)
{
  if (a1 > 21759)
  {
    if (a1 <= 28943)
    {
      if (a1 > 28935)
      {
        if (a1 == 28936) {
          return "AppleTV6,2";
        }
        if (a1 == 28943) {
          return "AudioAccessory1,1";
        }
      }
      else
      {
        if (a1 == 21760) {
          return "Device1,21760";
        }
        if (a1 == 28420) {
          return "AppleTV5,3";
        }
      }
    }
    else if (a1 <= 29714)
    {
      if (a1 == 28944) {
        return "AudioAccessory1,2";
      }
      if (a1 == 29455) {
        return "AppleTV11,2";
      }
    }
    else
    {
      switch(a1)
      {
        case 29715:
          return "AudioAccessory5,1";
        case 65533:
          return "HeGn";
        case 65534:
          return "ApGn";
      }
    }
    return "?";
  }
  if (a1 <= 8193)
  {
    switch(a1)
    {
      case 0:
        return "Invalid";
      case 614:
        return "ATVRemote1,1";
      case 621:
        return "ATVRemote1,2";
    }
    return "?";
  }
  switch(a1)
  {
    case 8194:
      uint64_t result = "AirPods1,1";
      break;
    case 8195:
      uint64_t result = "PowerBeats3,1";
      break;
    case 8197:
      uint64_t result = "BeatsX1,1";
      break;
    case 8198:
      uint64_t result = "BeatsSolo3,1";
      break;
    case 8201:
      uint64_t result = "BeatsStudio3,2";
      break;
    case 8202:
      uint64_t result = "Device1,8202";
      break;
    case 8203:
      uint64_t result = "PowerbeatsPro1,1";
      break;
    case 8204:
      uint64_t result = "BeatsSoloPro1,1";
      break;
    case 8205:
      uint64_t result = "Powerbeats4,1";
      break;
    case 8206:
      uint64_t result = "AirPodsPro1,1";
      break;
    case 8207:
      uint64_t result = "AirPods1,3";
      break;
    case 8208:
      uint64_t result = "Device1,8208";
      break;
    case 8209:
      uint64_t result = "BeatsStudioBuds1,1";
      break;
    case 8210:
      uint64_t result = "Device1,8210";
      break;
    case 8211:
      uint64_t result = "Device1,8211";
      break;
    case 8212:
      uint64_t result = "Device1,8212";
      break;
    case 8213:
      uint64_t result = "Device1,8213";
      break;
    case 8214:
      uint64_t result = "BeatsStudioBuds1,2";
      break;
    case 8215:
      uint64_t result = "BeatsStudioPro1,1";
      break;
    case 8216:
      uint64_t result = "Device1,8216";
      break;
    case 8217:
      uint64_t result = "Device1,8217";
      break;
    case 8218:
      uint64_t result = "Device1,8218";
      break;
    case 8219:
      uint64_t result = "Device1,8219";
      break;
    case 8220:
      uint64_t result = "Device1,8220";
      break;
    case 8221:
      uint64_t result = "Device1,8221";
      break;
    case 8222:
      uint64_t result = "Device1,8222";
      break;
    case 8223:
      uint64_t result = "Device1,8223";
      break;
    case 8224:
      uint64_t result = "Device1,8224";
      break;
    case 8228:
      uint64_t result = "Device1,8228";
      break;
    case 8229:
      uint64_t result = "Device1,8229";
      break;
    case 8230:
      uint64_t result = "Device1,8230";
      break;
    default:
      return "?";
  }
  return result;
}

id sub_100329D1C(uint64_t a1)
{
  if ((int)a1 > 665)
  {
    if ((int)a1 <= 799)
    {
      if ((int)a1 > 776)
      {
        switch((int)a1)
        {
          case 777:
            uint64_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
            uint64_t v2 = v1;
            CFStringRef v3 = @"apple_wireless_mouse";
            goto LABEL_39;
          case 780:
            uint64_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
            uint64_t v2 = v1;
            CFStringRef v3 = @"apple_mighty_mouse";
            goto LABEL_39;
          case 781:
LABEL_33:
            uint64_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
            uint64_t v2 = v1;
            CFStringRef v3 = @"apple_magic_mouse";
            goto LABEL_39;
          case 782:
LABEL_24:
            uint64_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
            uint64_t v2 = v1;
            CFStringRef v3 = @"apple_magic_trackpad";
            goto LABEL_39;
          default:
            goto LABEL_48;
        }
      }
      switch(a1)
      {
        case 0x29A:
LABEL_44:
          uint64_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
          uint64_t v2 = v1;
          CFStringRef v3 = @"apple_magic_keyboard_touch";
          break;
        case 0x29C:
LABEL_34:
          uint64_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
          uint64_t v2 = v1;
          CFStringRef v3 = @"apple_magic_keyboard";
          break;
        case 0x29F:
LABEL_32:
          uint64_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
          uint64_t v2 = v1;
          CFStringRef v3 = @"apple_magic_keyboard_touch_keypad";
          break;
        default:
LABEL_48:
          uint64_t v2 = +[CBProductInfo productInfoWithProductID:a1];
          uint64_t v4 = [v2 productName];
          goto LABEL_40;
      }
    }
    else
    {
      if ((int)a1 <= 8212)
      {
        switch((int)a1)
        {
          case 800:
            goto LABEL_34;
          case 801:
            goto LABEL_44;
          case 802:
            goto LABEL_32;
          case 803:
            goto LABEL_33;
          case 804:
            goto LABEL_24;
          default:
            goto LABEL_48;
        }
      }
      if (a1 != 8220 && a1 != 8216 && a1 != 8213) {
        goto LABEL_48;
      }
      uint64_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
      uint64_t v2 = v1;
      CFStringRef v3 = @"apple_airpods_case";
    }
LABEL_39:
    uint64_t v4 = [v1 localizedStringForKey:v3 value:&stru_100869B68 table:@"CBLocalizable"];
LABEL_40:
    uint64_t v5 = (void *)v4;

    goto LABEL_41;
  }
  if ((int)a1 > 570)
  {
    if ((int)a1 > 598)
    {
      switch((int)a1)
      {
        case 613:
          goto LABEL_24;
        case 614:
        case 616:
        case 618:
        case 619:
          goto LABEL_48;
        case 615:
          goto LABEL_34;
        case 617:
          goto LABEL_33;
        case 620:
          uint64_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
          uint64_t v2 = v1;
          CFStringRef v3 = @"apple_magic_keyboard_keypad";
          goto LABEL_39;
        default:
          if (a1 != 599) {
            goto LABEL_48;
          }
          goto LABEL_38;
      }
    }
    if (a1 != 571 && a1 != 597 && a1 != 598) {
      goto LABEL_48;
    }
    goto LABEL_38;
  }
  if ((int)a1 > 555)
  {
    if ((int)a1 > 558 && a1 != 569 && a1 != 570) {
      goto LABEL_48;
    }
    goto LABEL_38;
  }
  if ((int)a1 > 520)
  {
    if (a1 != 521 && a1 != 522) {
      goto LABEL_48;
    }
    goto LABEL_38;
  }
  if (a1)
  {
    if (a1 != 520) {
      goto LABEL_48;
    }
LABEL_38:
    uint64_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
    uint64_t v2 = v1;
    CFStringRef v3 = @"apple_wireless_keyboard";
    goto LABEL_39;
  }
  uint64_t v5 = 0;
LABEL_41:

  return v5;
}

uint64_t sub_10032A0F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100328A24(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10032A14C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10032A184()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10032A1A0(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v8 = a4[1];
  *(void *)a1 = *a4;
  *(void *)(a1 + 8) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_1001D0B70((void *)(a1 + 32), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  uint64_t v10 = *(void *)(a2 + 24);
  __int16 v11 = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 64) = v11;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_10016D488((void *)(a1 + 72), *(const void **)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 48) - *(void *)(a2 + 40));
  *(_DWORD *)(a1 + 96) = 0;
  sub_10032B498(a1 + 104, a5);
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 158) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 172) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 204) = 0;
  if (!*(void *)(a1 + 16))
  {
    os_log_type_t v13 = "_uwbSystem";
    int v14 = 254;
    goto LABEL_12;
  }
  if (!*(void *)a1)
  {
    os_log_type_t v13 = "_configProvider";
    int v14 = 255;
    goto LABEL_12;
  }
  if (!*(void *)(a1 + 128))
  {
    os_log_type_t v13 = "_getTimeCb";
    int v14 = 256;
LABEL_12:
    __assert_rtn("ParameterNegotiator", "AlishaParameterNegotiation.cpp", v14, v13);
  }
  return a1;
}

void sub_10032A2E4(_Unwind_Exception *a1)
{
  sub_1002DC368(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    sub_10001A970(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    sub_10001A970(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10032A344(uint64_t result)
{
  if (*(unsigned char *)(result + 144)) {
    *(unsigned char *)(result + 144) = 0;
  }
  return result;
}

uint64_t sub_10032A354(uint64_t result)
{
  *(_DWORD *)(result + 96) = 0;
  if (*(unsigned char *)(result + 158)) {
    *(unsigned char *)(result + 158) = 0;
  }
  if (*(unsigned char *)(result + 168)) {
    *(unsigned char *)(result + 168) = 0;
  }
  if (*(unsigned char *)(result + 184)) {
    *(unsigned char *)(result + 184) = 0;
  }
  if (*(unsigned char *)(result + 204)) {
    *(unsigned char *)(result + 204) = 0;
  }
  return result;
}

void sub_10032A38C(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a2;
  if (v6 == 12) {
    __int16 v7 = 1000;
  }
  else {
    __int16 v7 = 0;
  }
  if (v6 == 138) {
    __int16 v8 = 0;
  }
  else {
    __int16 v8 = v7;
  }
  if (v6 == 138) {
    char v9 = 2;
  }
  else {
    char v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = sub_10027FBF4((uint64_t)a2, v6);
  (*(void (**)(void *__return_ptr, uint64_t, unint64_t))(*(void *)v10 + 48))(v33, v10, v11);
  if (LODWORD(v33[0]) || !v34)
  {
    uint64_t v22 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      if (*a2 == 12) {
        id v27 = "LESetPHY";
      }
      else {
        id v27 = "ConnCmpltEventCount0";
      }
      sub_100004950(buf, v27);
      int v28 = v41[9];
      uint64_t v29 = *(unsigned char **)buf;
      unint64_t v31 = sub_10027FBF4((uint64_t)a2, v30);
      Swift::String v32 = buf;
      if (v28 < 0) {
        Swift::String v32 = v29;
      }
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v32;
      __int16 v36 = 2048;
      unint64_t v37 = v31;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#alisha-param-neg,BT event %s. Failed to convert BT clock %llu [us]", __p, 0x16u);
      if ((v41[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    uint64_t v23 = 0;
    char v24 = 0;
    uint64_t v25 = -1;
  }
  else
  {
    uint64_t v12 = v33[1];
    os_log_type_t v13 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      if (*a2 == 12) {
        int v14 = "LESetPHY";
      }
      else {
        int v14 = "ConnCmpltEventCount0";
      }
      sub_100004950(__p, v14);
      int v15 = v38;
      uint64_t v16 = *(unsigned char **)__p;
      unint64_t v18 = sub_10027FBF4((uint64_t)a2, v17);
      uint64_t v19 = __p;
      *(_DWORD *)buf = 136315650;
      if (v15 < 0) {
        uint64_t v19 = v16;
      }
      *(void *)&uint8_t buf[4] = v19;
      __int16 v40 = 2048;
      *(void *)double v41 = v18;
      *(_WORD *)&v41[8] = 2048;
      *(void *)&v41[10] = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,BT event %s. Converted BT clock %llu [us] to UWB clock %llu [us]", buf, 0x20u);
      if (v38 < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (*(unsigned char *)(a1 + 144))
    {
      uint64_t v20 = *(void *)(a1 + 136);
      if (v12 < v20)
      {
        uint64_t v21 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v12;
          __int16 v40 = 2048;
          *(void *)double v41 = v20;
          _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "#alisha-param-neg,BT event UWB clock (%llu [us]) < shared event UWB clock (%llu [us])", buf, 0x16u);
          uint64_t v21 = qword_1008ABDE0;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/AlishaSupport/AlishaParameterNegotiation.cpp";
          __int16 v40 = 1024;
          *(_DWORD *)double v41 = 337;
          *(_WORD *)&v41[4] = 2080;
          *(void *)&v41[6] = "processBluetoothEvent";
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#alisha-param-neg,%s:%d: assertion failure in %s", buf, 0x1Cu);
        }
        abort();
      }
    }
    else
    {
      uint64_t v26 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)
        || (*(_WORD *)buf = 0,
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,Setting this BT event as the shared event for sending timing info to vehicle", buf, 2u), !*(unsigned char *)(a1 + 144)))
      {
        *(unsigned char *)(a1 + 144) = 1;
      }
      *(void *)(a1 + 136) = v12;
      uint64_t v20 = v12;
    }
    __int16 v8 = 0;
    uint64_t v23 = v12 - v20;
    uint64_t v25 = *((void *)a2 + 5);
    char v24 = 1;
    char v9 = 1;
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = v25;
  *(void *)(a3 + 16) = v23;
  *(unsigned char *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 25) = v24;
  *(_WORD *)(a3 + 26) = 100;
  *(unsigned char *)(a3 + 28) = v9;
  *(_WORD *)(a3 + 30) = v8;
  *(unsigned char *)(a3 + 32) = 1;
}

void sub_10032A75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_10032A794(uint64_t a1, const char **a2)
{
  if (!*(unsigned char *)(a1 + 144))
  {
    __int16 v7 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v8 = *a2;
      int v10 = 134217984;
      unint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,Setting ranging start time UWB clock (%llu [us]) as the shared event for sending timing info to vehicle", (uint8_t *)&v10, 0xCu);
      uint64_t v5 = *a2;
      if (*(unsigned char *)(a1 + 144))
      {
LABEL_13:
        *(void *)(a1 + 136) = v5;
        return (const char *)(*a2 - v5);
      }
    }
    else
    {
      uint64_t v5 = *a2;
    }
    *(unsigned char *)(a1 + 144) = 1;
    goto LABEL_13;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *(const char **)(a1 + 136);
  if ((uint64_t)*a2 < (uint64_t)v5)
  {
    uint64_t v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
    {
      int v10 = 134218240;
      unint64_t v11 = v4;
      __int16 v12 = 2048;
      v13[0] = v5;
      _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "#alisha-param-neg,Ranging start time UWB clock (%llu [us]) < shared event UWB clock (%llu [us])", (uint8_t *)&v10, 0x16u);
      uint64_t v6 = qword_1008ABDE0;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315650;
      unint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/AlishaSupport/AlishaParameterNegotiation.cpp";
      __int16 v12 = 1024;
      LODWORD(v13[0]) = 360;
      WORD2(v13[0]) = 2080;
      *(void *)((char *)v13 + 6) = "getUwbTime0";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#alisha-param-neg,%s:%d: assertion failure in %s", (uint8_t *)&v10, 0x1Cu);
    }
    abort();
  }
  return (const char *)(*a2 - v5);
}

uint64_t sub_10032A95C(uint64_t a1, unsigned __int16 **a2)
{
  if (*(_DWORD *)(a1 + 96))
  {
    LODWORD(v23[0]) = -2000;
    *(void *)((char *)v23 + 4) = 0;
    return v23[0];
  }
  (*(void (**)(void **__return_ptr))(**(void **)a1 + 16))(&__p);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = (unsigned __int16 *)__p;
  if (*a2 != v5)
  {
    while (__p == v22)
    {
LABEL_8:
      if (++v4 == v5) {
        goto LABEL_28;
      }
    }
    __int16 v7 = (unsigned __int16 *)__p;
    while (*v4 != *v7)
    {
      if (++v7 == v22) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == v5)
  {
LABEL_28:
    int v16 = -2002;
    goto LABEL_36;
  }
  __int16 v8 = a2[3];
  char v9 = a2[4];
  if (v8 != v9)
  {
    int v10 = *(unsigned __int16 **)(a1 + 40);
    while (*(unsigned __int16 **)(a1 + 32) == v10)
    {
LABEL_17:
      if (++v8 == v9) {
        goto LABEL_34;
      }
    }
    unint64_t v11 = *(unsigned __int16 **)(a1 + 32);
    while (*v8 != *v11)
    {
      if (++v11 == v10) {
        goto LABEL_17;
      }
    }
  }
  if (v8 == v9)
  {
LABEL_34:
    int v16 = -2003;
    goto LABEL_36;
  }
  __int16 v12 = (unsigned __int8 *)a2[6];
  os_log_type_t v13 = (unsigned __int8 *)a2[7];
  if (v12 != v13)
  {
    int v14 = *(unsigned __int8 **)(a1 + 80);
    while (*(unsigned __int8 **)(a1 + 72) == v14)
    {
LABEL_26:
      if (++v12 == v13) {
        goto LABEL_35;
      }
    }
    int v15 = *(unsigned __int8 **)(a1 + 72);
    while (*v12 != *v15)
    {
      if (++v15 == v14) {
        goto LABEL_26;
      }
    }
  }
  if (v12 == v13)
  {
LABEL_35:
    int v16 = -2004;
LABEL_36:
    LODWORD(v23[0]) = v16;
    *(void *)((char *)v23 + 4) = 0;
    if (!__p) {
      return v23[0];
    }
LABEL_37:
    uint64_t v22 = v6;
    operator delete(v6);
    return v23[0];
  }
  unsigned __int16 v17 = *v4;
  unsigned __int16 v18 = *v8;
  unsigned __int8 v19 = *v12;
  if (!*(unsigned char *)(a1 + 158)) {
    *(unsigned char *)(a1 + 158) = 1;
  }
  *(_WORD *)(a1 + 152) = v17;
  *(_WORD *)(a1 + 154) = v18;
  *(unsigned char *)(a1 + 156) = v19;
  LODWORD(v23[0]) = 0;
  *(void *)((char *)v23 + 4) = *(void *)(a1 + 152);
  if (v6) {
    goto LABEL_37;
  }
  return v23[0];
}

void sub_10032AB40(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a1 + 96))
  {
    int v4 = -2000;
LABEL_10:
    *(_DWORD *)a3 = v4;
    *(unsigned char *)(a3 + 4) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return;
  }
  int v7 = *(unsigned __int8 *)(a1 + 158);
  __int16 v8 = qword_1008ABDE0;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v9)
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,Negotiating session parameters WITH a previously cached capability response", (uint8_t *)&__p, 2u);
      if (!*(unsigned char *)(a1 + 158)) {
        sub_10000AE44();
      }
    }
    if (*a2 != *(unsigned __int16 *)(a1 + 152)
      || a2[1] != *(unsigned __int16 *)(a1 + 154)
      || *((unsigned __int8 *)a2 + 4) != *(unsigned __int8 *)(a1 + 156))
    {
      int v4 = -2005;
      goto LABEL_10;
    }
    goto LABEL_42;
  }
  if (v9)
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,Negotiating session parameters WITHOUT a previously cached capability response", (uint8_t *)&__p, 2u);
  }
  (*(void (**)(void **__return_ptr))(**(void **)a1 + 16))(&__p);
  int v10 = (unsigned __int16 *)__p;
  unint64_t v11 = v32;
  if (__p == v32)
  {
    __int16 v12 = (unsigned __int16 *)__p;
  }
  else
  {
    __int16 v12 = (unsigned __int16 *)__p;
    while (*v12 != *a2)
    {
      if (++v12 == v32)
      {
        __int16 v12 = v32;
        break;
      }
    }
  }
  int v14 = *(unsigned __int16 **)(a1 + 32);
  os_log_type_t v13 = *(unsigned __int16 **)(a1 + 40);
  if (v14 != v13)
  {
    while (*v14 != a2[1])
    {
      if (++v14 == v13)
      {
        int v14 = *(unsigned __int16 **)(a1 + 40);
        break;
      }
    }
  }
  int v15 = *(void **)(a1 + 80);
  int v16 = memchr(*(void **)(a1 + 72), *((char *)a2 + 4), (size_t)v15 - *(void *)(a1 + 72));
  if (v16) {
    unsigned __int16 v17 = v16;
  }
  else {
    unsigned __int16 v17 = v15;
  }
  BOOL v19 = v12 == v11 || v14 == v13 || v17 == v15;
  char v20 = v19;
  if (v19)
  {
    *(_DWORD *)a3 = -2020;
    *(unsigned char *)(a3 + 4) = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  if (v10)
  {
    Swift::String v32 = v10;
    operator delete(v10);
  }
  if ((v20 & 1) == 0)
  {
LABEL_42:
    unsigned int v21 = (*(unsigned char *)(a1 + 64) & *((unsigned char *)a2 + 5));
    (*(void (**)(void **__return_ptr))(**(void **)a1 + 24))(&__p);
    if (v21)
    {
      for (uint64_t i = (unsigned __int16 *)__p; ; uint64_t i = (unsigned __int16 *)((char *)i + 1))
      {
        if (i == v32)
        {
          int v24 = -2008;
          goto LABEL_49;
        }
        char v23 = *(unsigned char *)i;
        if ((v21 >> *(unsigned char *)i)) {
          break;
        }
      }
      if (a2[3]) {
        char v25 = 1;
      }
      else {
        char v25 = a2[3] & 2;
      }
      if (*(unsigned char *)(a1 + 168))
      {
        int v26 = *(_DWORD *)a2;
        *(_DWORD *)(a1 + 163) = *(_DWORD *)((char *)a2 + 3);
        *(_DWORD *)(a1 + 160) = v26;
      }
      else
      {
        *(void *)(a1 + 160) = *(void *)a2;
        *(unsigned char *)(a1 + 168) = 1;
      }
      char v27 = (*(uint64_t (**)(void))(**(void **)a1 + 40))();
      char v28 = *(unsigned char *)(a1 + 56);
      int v29 = *(_DWORD *)(a1 + 60);
      char v30 = *(unsigned char *)(a1 + 65);
      if (!*(unsigned char *)(a1 + 184)) {
        *(unsigned char *)(a1 + 184) = 1;
      }
      *(unsigned char *)(a1 + 172) = v27;
      *(unsigned char *)(a1 + 173) = v28;
      *(_DWORD *)(a1 + 176) = v29;
      *(unsigned char *)(a1 + 180) = v23;
      *(unsigned char *)(a1 + 181) = v30;
      *(unsigned char *)(a1 + 182) = v25;
      *(_DWORD *)(a1 + 96) = 1;
      *(_DWORD *)a3 = 0;
      *(_OWORD *)(a3 + 4) = *(_OWORD *)(a1 + 172);
    }
    else
    {
      int v24 = -2016;
LABEL_49:
      *(_DWORD *)a3 = v24;
      *(unsigned char *)(a3 + 4) = 0;
      *(unsigned char *)(a3 + 16) = 0;
    }
    if (__p)
    {
      Swift::String v32 = (unsigned __int16 *)__p;
      operator delete(__p);
    }
  }
}

void sub_10032AE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10032AEA0@<X0>(unint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(result + 96) != 1)
  {
    int v7 = -2000;
    goto LABEL_8;
  }
  int v4 = (void *)result;
  if (!*(unsigned char *)(result + 168) || !*(unsigned char *)(result + 184))
  {
    int v7 = -2001;
    goto LABEL_8;
  }
  unsigned int v6 = *a2;
  if (v6 < *(unsigned __int8 *)(result + 172))
  {
    int v7 = -2007;
LABEL_8:
    *(_DWORD *)a3 = v7;
LABEL_9:
    *(unsigned char *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 40) = 0;
    return result;
  }
  int v8 = a2[10];
  if (a2[10]) {
    uint64_t v9 = *(unsigned __int8 *)(result + 182);
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int v10 = a2[1];
  int v11 = -2010;
  if (v10 > 0x18 || ((1 << v10) & 0x1001358) == 0)
  {
LABEL_23:
    *(_DWORD *)a3 = v11;
    goto LABEL_9;
  }
  unsigned int v12 = a2[3];
  int v13 = a2[2];
  if ((v12 > 0x30 || ((1 << v12) & 0x1001101051350) == 0) && v12 != 96 && v12 != 72)
  {
    int v11 = -2009;
    goto LABEL_23;
  }
  int v14 = v13 + (v13 & ((int)(v9 << 30) >> 31)) + 4;
  unsigned __int8 v15 = v13 + 5;
  if ((v9 & 1) == 0) {
    unsigned __int8 v15 = v14;
  }
  if (v12 < v15)
  {
    int v11 = -2012;
    goto LABEL_23;
  }
  if (0x120 % (v12 * v10))
  {
    int v11 = -2011;
    goto LABEL_23;
  }
  char v16 = 1;
  switch(a2[1])
  {
    case 3u:
      goto LABEL_36;
    case 4u:
      char v16 = 2;
      goto LABEL_36;
    case 5u:
    case 7u:
    case 0xAu:
    case 0xBu:
      goto LABEL_31;
    case 6u:
      char v16 = 4;
      goto LABEL_36;
    case 8u:
      char v16 = 8;
      goto LABEL_36;
    case 9u:
      char v16 = 16;
      goto LABEL_36;
    case 0xCu:
      char v16 = 32;
      goto LABEL_36;
    default:
      if (v10 != 24)
      {
LABEL_31:
        int v7 = -2009;
        goto LABEL_8;
      }
      char v16 = 64;
LABEL_36:
      if ((*(unsigned char *)(result + 173) & v16) == 0)
      {
        int v7 = -2017;
        goto LABEL_8;
      }
      int v17 = a2[8];
      int v18 = v17 & 0xE0;
      if (v18 == 32 || v18 == 64)
      {
        if ((((v17 & 0x1F) - 8) & 0xFFFFFFF7) == 0) {
          goto LABEL_41;
        }
LABEL_47:
        int v7 = -2015;
        goto LABEL_8;
      }
      if (v18 != 128)
      {
        int v7 = -2014;
        goto LABEL_8;
      }
      if ((v17 & 0x1F) != 0) {
        goto LABEL_47;
      }
LABEL_41:
      if ((v17 & ~*(unsigned __int8 *)(result + 181)) != 0)
      {
        int v7 = -2019;
        goto LABEL_8;
      }
      if (v8)
      {
        uint64_t result = sub_10032B290(a2[9], v9, v6, v10, v12);
        if (result)
        {
          *(_DWORD *)a3 = result;
          goto LABEL_9;
        }
        unsigned int v20 = HIDWORD(result) & 0xFF000000;
        int v21 = HIDWORD(result) & 0xFFFF00;
        int v19 = BYTE4(result);
      }
      else
      {
        int v19 = 0;
        unsigned int v20 = 0;
        int v21 = 0;
      }
      uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*v4 + 32))(*v4, (*((_DWORD *)a2 + 1) & v4[22]));
      if ((result & 0xFF000000000000) != 0) {
        int v11 = 0;
      }
      else {
        int v11 = -1004;
      }
      if (result) {
        int v11 = result;
      }
      if (v11) {
        goto LABEL_23;
      }
      if ((result & 0xFF000000000000) == 0 || !*((unsigned char *)v4 + 184) || !*((unsigned char *)v4 + 168)) {
        sub_10000AE44();
      }
      unsigned __int8 v24 = a2[8];
      v22.i32[0] = *(_DWORD *)a2;
      *((unsigned char *)v4 + 188) = *((unsigned char *)v4 + 180);
      int v25 = *((_DWORD *)v4 + 40);
      char v26 = *((unsigned char *)v4 + 164);
      int v27 = *((unsigned __int8 *)v4 + 204);
      int16x4_t v28 = (int16x4_t)vmovl_u8(v22).u64[0];
      *((unsigned char *)v4 + 189) = BYTE5(result);
      *(int16x4_t *)v23.i8 = vrev32_s16(v28);
      v23.i32[0] = v28.i32[0];
      *(_DWORD *)((char *)v4 + 190) = v25;
      *(_DWORD *)((char *)v4 + 194) = vmovn_s16(v23).u32[0];
      *((unsigned char *)v4 + 198) = v24;
      *((unsigned char *)v4 + 199) = v26;
      *((_DWORD *)v4 + 50) = v20 | v19 | v21;
      if (!v27) {
        *((unsigned char *)v4 + 204) = 1;
      }
      unint64_t v29 = HIDWORD(result);
      *((unsigned char *)v4 + 168) = 0;
      *((unsigned char *)v4 + 184) = 0;
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 48))(*v4, (uint64_t)v4 + 188);
      *((_DWORD *)v4 + 24) = 2;
      *(_OWORD *)&v30[7] = *(_OWORD *)((char *)v4 + 188);
      *(_OWORD *)(a3 + 9) = *(_OWORD *)v30;
      *(_DWORD *)a3 = 0;
      *(unsigned char *)(a3 + 8) = v29;
      *(void *)(a3 + 24) = *(void *)&v30[15];
      *(void *)(a3 + 32) = result;
      *(unsigned char *)(a3 + 40) = 1;
      return result;
  }
}

uint64_t sub_10032B290(unsigned int a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5 = a1 >> 6;
  if (!(a1 >> 6)) {
    return (a2 << 48) | 0x100000000000000;
  }
  char v6 = a1;
  uint64_t result = 4294965273;
  if (v5 != 1) {
    return 4294965274;
  }
  if (!a4) {
    return 4294965286;
  }
  if (!a5) {
    return 4294965287;
  }
  unsigned int v8 = 288 * a3 / a4;
  if (v8 < a5) {
    return 4294965275;
  }
  uint64_t v9 = v6 & 0x3F;
  if (v9 && v9 <= 0x10 && v8 / a5 - 1 >= v9) {
    return (v9 << 40) | (a2 << 48) | 0x100000100000000;
  }
  return result;
}

double sub_10032B328@<D0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((_DWORD *)a1 + 24) != 2)
  {
    int v9 = -2000;
LABEL_12:
    *(_DWORD *)a3 = v9;
    *(unsigned char *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 40) = 0;
    return result;
  }
  if (!*((unsigned char *)a1 + 204))
  {
    int v9 = -2001;
    goto LABEL_12;
  }
  long long v14 = *(_OWORD *)((char *)a1 + 188);
  __int16 v6 = a2[1];
  if (a2[1])
  {
    __int16 v6 = *a2;
    if (!*a2)
    {
      int v7 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_8;
      }
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#alisha-param-neg,Recovery RAN multiplier of 0 was specified. Using a multiplier of 1 instead.", (uint8_t *)buf, 2u);
      if (!a2[1]) {
        sub_10000AE44();
      }
      __int16 v6 = *a2;
      if (!*a2) {
LABEL_8:
      }
        __int16 v6 = 1;
    }
    BYTE6(v14) = v6;
    __int16 v8 = 1;
  }
  else
  {
    __int16 v8 = 0;
  }
  __int16 v10 = v6 | (v8 << 8);
  uint64_t v11 = (*(uint64_t (**)(void, long long *))(*(void *)*a1 + 48))(*a1, &v14);
  *(_OWORD *)((char *)buf + 6) = v14;
  double result = buf[0];
  *(_OWORD *)(a3 + 10) = *(_OWORD *)buf;
  uint64_t v13 = *(void *)((char *)&buf[1] + 6);
  *(_DWORD *)a3 = 0;
  *(_WORD *)(a3 + 8) = v10;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v11;
  *(unsigned char *)(a3 + 40) = 1;
  return result;
}

uint64_t sub_10032B498(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10032B530@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1 == 2)
  {
    uint64_t v2 = "RequireCapabilityExchange";
  }
  else if (a1 == 255)
  {
    uint64_t v2 = "WrongParameters";
  }
  else
  {
    uint64_t v2 = "UnsupportedChannelBitmask";
  }
  return sub_100004950(a2, v2);
}

void *sub_10032B56C@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_1008616B0[a1 - 1]);
}

void sub_10032B584(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  sub_100004950(&v20, off_1008616E8[(char)*a1 - 1]);
  memset(&v19, 0, sizeof(v19));
  int v4 = *a1;
  switch(v4)
  {
    case 3:
      if (!a1[6])
      {
        long long v14 = "deviceRangingIntentSubEventCode.has_value()";
        int v15 = 323;
        goto LABEL_36;
      }
      sub_100004950(&v18, off_100861700[(char)a1[5]]);
      break;
    case 2:
      if (!a1[4])
      {
        long long v14 = "rangingSessionStatusChangedSubEventCode.has_value()";
        int v15 = 319;
        goto LABEL_36;
      }
      sub_10032B56C(a1[3], &v18);
      break;
    case 1:
      if (a1[2])
      {
        int v5 = a1[1];
        if (v5 == 2)
        {
          __int16 v6 = "RequireCapabilityExchange";
        }
        else if (v5 == 255)
        {
          __int16 v6 = "WrongParameters";
        }
        else
        {
          __int16 v6 = "UnsupportedChannelBitmask";
        }
        sub_100004950(&v18, v6);
        break;
      }
      long long v14 = "commandCompleteSubEventCode.has_value()";
      int v15 = 315;
LABEL_36:
      __assert_rtn("toString", "AlishaDCKCoder.cpp", v15, v14);
    default:
      goto LABEL_16;
  }
  std::string v19 = v18;
LABEL_16:
  std::operator+<char>();
  int v7 = std::string::append(&v16, ", ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v9 = &v19;
  }
  else {
    int v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v17, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v18, ")");
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
}

void sub_10032B7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_10032B83C(_WORD *result, __int16 a2)
{
  const char *result = a2;
  return result;
}

unint64_t sub_10032B844(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 4294963292;
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1] - *a2;
  if (v4 >= 4)
  {
    if (v4 >> 16)
    {
      unsigned int v5 = 0;
      int v6 = 0;
      uint64_t v2 = 4294963295;
    }
    else if (v4 == __rev16(*(unsigned __int16 *)(v3 + 2)) + 4)
    {
      unsigned int v5 = *(unsigned char *)v3 & 0x3F;
      if (v5 > 5)
      {
        unsigned int v5 = 0;
        int v6 = 0;
        uint64_t v2 = 4294963293;
      }
      else
      {
        int v7 = *(unsigned __int8 *)(v3 + 1);
        if ((v7 - 1) > 0x14)
        {
          unsigned int v5 = 0;
          int v6 = 0;
        }
        else
        {
          int v6 = v7 << 8;
          uint64_t v2 = 0x1000000000000;
        }
      }
    }
    else
    {
      unsigned int v5 = 0;
      int v6 = 0;
      uint64_t v2 = 4294963294;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
    uint64_t v2 = 4294963296;
  }
  return v2 | ((unint64_t)(v6 | v5) << 32);
}

uint64_t sub_10032B8F4(int a1)
{
  if (a1 == 256) {
    return 65792;
  }
  else {
    return 256;
  }
}

void sub_10032B90C(__int16 a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v2 = (unsigned char *)a2[1];
  uint64_t v4 = (uint64_t)&v2[-*a2];
  if ((unint64_t)(v4 - 65534) <= 0xFFFFFFFFFFFEFFFFLL) {
    sub_1004306FC();
  }
  unint64_t v7 = a2[2];
  if ((unint64_t)v2 >= v7)
  {
    if (v4 <= -2) {
      goto LABEL_41;
    }
    unint64_t v9 = v7 - v3;
    if (2 * v9 <= v4 + 1) {
      uint64_t v10 = v4 + 1;
    }
    else {
      uint64_t v10 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)(v12 + v11);
    *(unsigned char *)(v12 + v4) = HIBYTE(a1);
    long long v8 = (unsigned char *)(v12 + v4 + 1);
    if (v2 == (unsigned char *)v3)
    {
      v12 += v4;
    }
    else
    {
      long long v14 = &v2[~v3];
      do
      {
        char v15 = *--v2;
        (v14--)[v12] = v15;
      }
      while (v2 != (unsigned char *)v3);
      uint64_t v2 = (unsigned char *)*a2;
    }
    *a2 = v12;
    a2[1] = (unint64_t)v8;
    a2[2] = (unint64_t)v13;
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *uint64_t v2 = HIBYTE(a1);
    long long v8 = v2 + 1;
  }
  a2[1] = (unint64_t)v8;
  unint64_t v16 = a2[2];
  if ((unint64_t)v8 < v16)
  {
    unsigned char *v8 = a1;
    uint64_t v17 = (uint64_t)(v8 + 1);
    goto LABEL_39;
  }
  unint64_t v18 = *a2;
  std::string v19 = &v8[-*a2];
  unint64_t v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0) {
LABEL_41:
  }
    sub_1000267C4();
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (unint64_t)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  unsigned __int8 v24 = (char *)(v23 + v22);
  v19[v23] = a1;
  uint64_t v17 = (uint64_t)&v19[v23 + 1];
  if (v8 == (unsigned char *)v18)
  {
    *a2 = (unint64_t)&v19[v23];
    a2[1] = v17;
    a2[2] = (unint64_t)v24;
LABEL_38:
    operator delete(v8);
    goto LABEL_39;
  }
  int v25 = &v8[~v18];
  do
  {
    char v26 = *--v8;
    (v25--)[v23] = v26;
  }
  while (v8 != (unsigned char *)v18);
  long long v8 = (unsigned char *)*a2;
  *a2 = v23;
  a2[1] = v17;
  a2[2] = (unint64_t)v24;
  if (v8) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = v17;
}

void sub_10032BAD8(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  LOBYTE(v22) = 0;
  sub_1001B0664(&__p, 4uLL, &v22);
  sub_10032B90C(*(_WORD *)a1, (unint64_t *)&__p);
  sub_10032B90C(*(_WORD *)(a1 + 2), (unint64_t *)&__p);
  unint64_t v5 = (unint64_t)__p;
  uint64_t v4 = v27;
  uint64_t v6 = v27 - (unsigned char *)__p;
  if ((unint64_t)(v27 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
    std::string v19 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    int v20 = 225;
    unint64_t v21 = "append";
    goto LABEL_31;
  }
  char v7 = *(unsigned char *)(a1 + 4);
  if ((unint64_t)v27 >= v28)
  {
    unint64_t v9 = v28 - (void)__p;
    if (2 * (v28 - (unint64_t)__p) <= v6 + 1) {
      uint64_t v10 = v6 + 1;
    }
    else {
      uint64_t v10 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)v12 + v11;
    *((unsigned char *)v12 + v6) = v7;
    long long v8 = (char *)v12 + v6 + 1;
    if (v4 == (unsigned char *)v5)
    {
      unint64_t v12 = (char *)v12 + v6;
    }
    else
    {
      long long v14 = &v4[~v5];
      do
      {
        char v15 = *--v4;
        (v14--)[(void)v12] = v15;
      }
      while (v4 != (unsigned char *)v5);
      uint64_t v4 = __p;
    }
    std::string __p = v12;
    int v27 = v8;
    unint64_t v28 = (unint64_t)v13;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    unsigned char *v27 = v7;
    long long v8 = v4 + 1;
  }
  int v27 = v8;
  unint64_t v16 = __p;
  unint64_t v17 = v8 - (unsigned char *)__p;
  if ((unint64_t)(v8 - (unsigned char *)__p) >= 0x10000)
  {
    std::string v19 = "msg.size() <= kMaxMessageSize";
    int v20 = 166;
    unint64_t v21 = "populateHeader";
LABEL_31:
    __assert_rtn(v21, "AlishaDCKCoder.cpp", v20, v19);
  }
  if (v17 <= 3)
  {
    sub_10003F834((unint64_t *)&__p, 4 - v17);
    unint64_t v16 = __p;
    LOWORD(v17) = (_WORD)v27 - (_WORD)__p;
  }
  __int16 v18 = v17 - 4;
  unsigned char *v16 = 2;
  *((unsigned char *)__p + 1) = 2;
  *((unsigned char *)__p + 2) = HIBYTE(v18);
  *((unsigned char *)__p + 3) = v18;
  size_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_10016D488(&v22, __p, (uint64_t)v27, v27 - (unsigned char *)__p);
  char v25 = 1;
  *a2 = 0;
  sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&v22);
  if (v25 && v22)
  {
    unint64_t v23 = v22;
    operator delete(v22);
  }
  if (__p)
  {
    int v27 = __p;
    operator delete(__p);
  }
}

void sub_10032BCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032BD34(int a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v2 = (unsigned char *)a2[1];
  uint64_t v4 = (uint64_t)&v2[-*a2];
  if ((unint64_t)(v4 - 65532) <= 0xFFFFFFFFFFFEFFFFLL) {
    sub_100430728();
  }
  unint64_t v7 = a2[2];
  if ((unint64_t)v2 >= v7)
  {
    if (v4 <= -2) {
      goto LABEL_77;
    }
    unint64_t v9 = v7 - v3;
    if (2 * v9 <= v4 + 1) {
      uint64_t v10 = v4 + 1;
    }
    else {
      uint64_t v10 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)(v12 + v11);
    *(unsigned char *)(v12 + v4) = HIBYTE(a1);
    long long v8 = (unsigned char *)(v12 + v4 + 1);
    if (v2 == (unsigned char *)v3)
    {
      v12 += v4;
    }
    else
    {
      long long v14 = &v2[~v3];
      do
      {
        char v15 = *--v2;
        (v14--)[v12] = v15;
      }
      while (v2 != (unsigned char *)v3);
      uint64_t v2 = (unsigned char *)*a2;
    }
    *a2 = v12;
    a2[1] = (unint64_t)v8;
    a2[2] = (unint64_t)v13;
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *uint64_t v2 = HIBYTE(a1);
    long long v8 = v2 + 1;
  }
  a2[1] = (unint64_t)v8;
  unint64_t v16 = a2[2];
  if ((unint64_t)v8 < v16)
  {
    unsigned char *v8 = BYTE2(a1);
    unint64_t v17 = v8 + 1;
    goto LABEL_39;
  }
  unint64_t v18 = *a2;
  std::string v19 = &v8[-*a2];
  unint64_t v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0) {
    goto LABEL_77;
  }
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (unint64_t)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  uint64_t v24 = (char *)(v23 + v22);
  v19[v23] = BYTE2(a1);
  unint64_t v17 = &v19[v23 + 1];
  if (v8 == (unsigned char *)v18)
  {
    *a2 = (unint64_t)&v19[v23];
    a2[1] = (unint64_t)v17;
    a2[2] = (unint64_t)v24;
LABEL_38:
    operator delete(v8);
    goto LABEL_39;
  }
  char v25 = &v8[~v18];
  do
  {
    char v26 = *--v8;
    (v25--)[v23] = v26;
  }
  while (v8 != (unsigned char *)v18);
  long long v8 = (unsigned char *)*a2;
  *a2 = v23;
  a2[1] = (unint64_t)v17;
  a2[2] = (unint64_t)v24;
  if (v8) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v17;
  unint64_t v27 = a2[2];
  if ((unint64_t)v17 < v27)
  {
    unsigned char *v17 = BYTE1(a1);
    unint64_t v28 = v17 + 1;
    goto LABEL_57;
  }
  unint64_t v29 = *a2;
  char v30 = &v17[-*a2];
  unint64_t v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0) {
    goto LABEL_77;
  }
  unint64_t v32 = v27 - v29;
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v33 = v31;
  }
  if (v33) {
    unint64_t v34 = (unint64_t)operator new(v33);
  }
  else {
    unint64_t v34 = 0;
  }
  uint64_t v35 = (char *)(v34 + v33);
  v30[v34] = BYTE1(a1);
  unint64_t v28 = &v30[v34 + 1];
  if (v17 == (unsigned char *)v29)
  {
    *a2 = (unint64_t)&v30[v34];
    a2[1] = (unint64_t)v28;
    a2[2] = (unint64_t)v35;
LABEL_56:
    operator delete(v17);
    goto LABEL_57;
  }
  __int16 v36 = &v17[~v29];
  do
  {
    char v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (unsigned char *)v29);
  unint64_t v17 = (unsigned char *)*a2;
  *a2 = v34;
  a2[1] = (unint64_t)v28;
  a2[2] = (unint64_t)v35;
  if (v17) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v28;
  unint64_t v38 = a2[2];
  if ((unint64_t)v28 < v38)
  {
    *unint64_t v28 = a1;
    uint64_t v39 = (uint64_t)(v28 + 1);
    goto LABEL_75;
  }
  unint64_t v40 = *a2;
  double v41 = &v28[-*a2];
  unint64_t v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0) {
LABEL_77:
  }
    sub_1000267C4();
  unint64_t v43 = v38 - v40;
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v44 = v42;
  }
  if (v44) {
    unint64_t v45 = (unint64_t)operator new(v44);
  }
  else {
    unint64_t v45 = 0;
  }
  NSString v46 = (char *)(v45 + v44);
  v41[v45] = a1;
  uint64_t v39 = (uint64_t)&v41[v45 + 1];
  if (v28 == (unsigned char *)v40)
  {
    *a2 = (unint64_t)&v41[v45];
    a2[1] = v39;
    a2[2] = (unint64_t)v46;
LABEL_74:
    operator delete(v28);
    goto LABEL_75;
  }
  os_log_type_t v47 = &v28[~v40];
  do
  {
    char v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (unsigned char *)v40);
  unint64_t v28 = (unsigned char *)*a2;
  *a2 = v45;
  a2[1] = v39;
  a2[2] = (unint64_t)v46;
  if (v28) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = v39;
}

void sub_10032C080(char *a1@<X1>, _DWORD *a2@<X8>)
{
  LOBYTE(v56) = 0;
  sub_1001B0664(&__p, 4uLL, &v56);
  unint64_t v5 = (unint64_t)__p;
  uint64_t v4 = v61;
  uint64_t v6 = v61 - (unsigned char *)__p;
  if ((unint64_t)(v61 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000) {
    goto LABEL_86;
  }
  char v7 = *a1;
  if ((unint64_t)v61 >= v62)
  {
    unint64_t v9 = v62 - (void)__p;
    if (2 * (v62 - (unint64_t)__p) <= v6 + 1) {
      uint64_t v10 = v6 + 1;
    }
    else {
      uint64_t v10 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)v12 + v11;
    *((unsigned char *)v12 + v6) = v7;
    long long v8 = (char *)v12 + v6 + 1;
    if (v4 == (unsigned char *)v5)
    {
      unint64_t v12 = (char *)v12 + v6;
    }
    else
    {
      long long v14 = &v4[~v5];
      do
      {
        char v15 = *--v4;
        (v14--)[(void)v12] = v15;
      }
      while (v4 != (unsigned char *)v5);
      uint64_t v4 = __p;
    }
    std::string __p = v12;
    uint64_t v61 = v8;
    unint64_t v62 = (unint64_t)v13;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    unsigned char *v61 = v7;
    long long v8 = v4 + 1;
  }
  uint64_t v61 = v8;
  unint64_t v16 = (unint64_t)__p;
  uint64_t v17 = v8 - (unsigned char *)__p;
  if ((unint64_t)(v8 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000) {
    goto LABEL_86;
  }
  char v18 = a1[1];
  if ((unint64_t)v8 >= v62)
  {
    unint64_t v20 = v62 - (void)__p;
    if (2 * (v62 - (unint64_t)__p) <= v17 + 1) {
      uint64_t v21 = v17 + 1;
    }
    else {
      uint64_t v21 = 2 * v20;
    }
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v22 = v21;
    }
    if (v22) {
      unint64_t v23 = operator new(v22);
    }
    else {
      unint64_t v23 = 0;
    }
    uint64_t v24 = (char *)v23 + v22;
    *((unsigned char *)v23 + v17) = v18;
    std::string v19 = (char *)v23 + v17 + 1;
    if (v8 == (unsigned char *)v16)
    {
      std::string __p = (char *)v23 + v17;
      uint64_t v61 = (char *)v23 + v17 + 1;
      unint64_t v62 = (unint64_t)v24;
    }
    else
    {
      char v25 = &v8[~v16];
      do
      {
        char v26 = *--v8;
        (v25--)[(void)v23] = v26;
      }
      while (v8 != (unsigned char *)v16);
      long long v8 = __p;
      std::string __p = v23;
      uint64_t v61 = (char *)v23 + v17 + 1;
      unint64_t v62 = (unint64_t)v24;
      if (!v8) {
        goto LABEL_39;
      }
    }
    operator delete(v8);
  }
  else
  {
    unsigned char *v8 = v18;
    std::string v19 = v8 + 1;
  }
LABEL_39:
  uint64_t v61 = v19;
  sub_10032BD34(*((_DWORD *)a1 + 1), (unint64_t *)&__p);
  unint64_t v28 = (unint64_t)__p;
  unint64_t v27 = v61;
  uint64_t v29 = v61 - (unsigned char *)__p;
  if ((unint64_t)(v61 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000) {
    goto LABEL_86;
  }
  char v30 = a1[8];
  if ((unint64_t)v61 >= v62)
  {
    unint64_t v32 = v62 - (void)__p;
    if (2 * (v62 - (unint64_t)__p) <= v29 + 1) {
      uint64_t v33 = v29 + 1;
    }
    else {
      uint64_t v33 = 2 * v32;
    }
    if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v34 = v33;
    }
    if (v34) {
      uint64_t v35 = operator new(v34);
    }
    else {
      uint64_t v35 = 0;
    }
    __int16 v36 = (char *)v35 + v34;
    *((unsigned char *)v35 + v29) = v30;
    unint64_t v31 = (char *)v35 + v29 + 1;
    if (v27 == (unsigned char *)v28)
    {
      uint64_t v35 = (char *)v35 + v29;
    }
    else
    {
      char v37 = &v27[~v28];
      do
      {
        char v38 = *--v27;
        (v37--)[(void)v35] = v38;
      }
      while (v27 != (unsigned char *)v28);
      unint64_t v27 = __p;
    }
    std::string __p = v35;
    uint64_t v61 = v31;
    unint64_t v62 = (unint64_t)v36;
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    unsigned char *v61 = v30;
    unint64_t v31 = v27 + 1;
  }
  uint64_t v61 = v31;
  unint64_t v39 = (unint64_t)__p;
  uint64_t v40 = v31 - (unsigned char *)__p;
  if ((unint64_t)(v31 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
LABEL_86:
    uint64_t v53 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    int v54 = 225;
    unint64_t v55 = "append";
    goto LABEL_87;
  }
  char v41 = a1[9];
  if ((unint64_t)v31 < v62)
  {
    unsigned char *v31 = v41;
    unint64_t v42 = v31 + 1;
    goto LABEL_77;
  }
  unint64_t v43 = v62 - (void)__p;
  if (2 * (v62 - (unint64_t)__p) <= v40 + 1) {
    uint64_t v44 = v40 + 1;
  }
  else {
    uint64_t v44 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v45 = v44;
  }
  if (v45) {
    NSString v46 = operator new(v45);
  }
  else {
    NSString v46 = 0;
  }
  os_log_type_t v47 = (char *)v46 + v45;
  *((unsigned char *)v46 + v40) = v41;
  unint64_t v42 = (char *)v46 + v40 + 1;
  if (v31 == (unsigned char *)v39)
  {
    std::string __p = (char *)v46 + v40;
    uint64_t v61 = (char *)v46 + v40 + 1;
    unint64_t v62 = (unint64_t)v47;
LABEL_76:
    operator delete(v31);
    goto LABEL_77;
  }
  char v48 = &v31[~v39];
  do
  {
    char v49 = *--v31;
    (v48--)[(void)v46] = v49;
  }
  while (v31 != (unsigned char *)v39);
  unint64_t v31 = __p;
  std::string __p = v46;
  uint64_t v61 = (char *)v46 + v40 + 1;
  unint64_t v62 = (unint64_t)v47;
  if (v31) {
    goto LABEL_76;
  }
LABEL_77:
  uint64_t v61 = v42;
  unint64_t v50 = __p;
  unint64_t v51 = v42 - (unsigned char *)__p;
  if ((unint64_t)(v42 - (unsigned char *)__p) >= 0x10000)
  {
    uint64_t v53 = "msg.size() <= kMaxMessageSize";
    int v54 = 166;
    unint64_t v55 = "populateHeader";
LABEL_87:
    __assert_rtn(v55, "AlishaDCKCoder.cpp", v54, v53);
  }
  if (v51 <= 3)
  {
    sub_10003F834((unint64_t *)&__p, 4 - v51);
    unint64_t v50 = __p;
    LOWORD(v51) = (_WORD)v61 - (_WORD)__p;
  }
  __int16 v52 = v51 - 4;
  *unint64_t v50 = 2;
  *((unsigned char *)__p + 1) = 4;
  *((unsigned char *)__p + 2) = HIBYTE(v52);
  *((unsigned char *)__p + 3) = v52;
  id v56 = 0;
  id v57 = 0;
  uint64_t v58 = 0;
  sub_10016D488(&v56, __p, (uint64_t)v61, v61 - (unsigned char *)__p);
  char v59 = 1;
  *a2 = 0;
  sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&v56);
  if (v59 && v56)
  {
    id v57 = v56;
    operator delete(v56);
  }
  if (__p)
  {
    uint64_t v61 = __p;
    operator delete(__p);
  }
}

void sub_10032C4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032C530(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  LOBYTE(v22) = 0;
  sub_1001B0664(&__p, 4uLL, &v22);
  sub_10032BD34(*(_DWORD *)a1, (unint64_t *)&__p);
  sub_10032C79C(*(void *)(a1 + 8), (unint64_t *)&__p);
  sub_10032BD34(*(_DWORD *)(a1 + 16), (unint64_t *)&__p);
  unint64_t v5 = (unint64_t)__p;
  uint64_t v4 = v27;
  uint64_t v6 = v27 - (unsigned char *)__p;
  if ((unint64_t)(v27 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
    std::string v19 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    int v20 = 225;
    uint64_t v21 = "append";
    goto LABEL_31;
  }
  char v7 = *(unsigned char *)(a1 + 20);
  if ((unint64_t)v27 >= v28)
  {
    unint64_t v9 = v28 - (void)__p;
    if (2 * (v28 - (unint64_t)__p) <= v6 + 1) {
      uint64_t v10 = v6 + 1;
    }
    else {
      uint64_t v10 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)v12 + v11;
    *((unsigned char *)v12 + v6) = v7;
    long long v8 = (char *)v12 + v6 + 1;
    if (v4 == (unsigned char *)v5)
    {
      unint64_t v12 = (char *)v12 + v6;
    }
    else
    {
      long long v14 = &v4[~v5];
      do
      {
        char v15 = *--v4;
        (v14--)[(void)v12] = v15;
      }
      while (v4 != (unsigned char *)v5);
      uint64_t v4 = __p;
    }
    std::string __p = v12;
    unint64_t v27 = v8;
    unint64_t v28 = (unint64_t)v13;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    unsigned char *v27 = v7;
    long long v8 = v4 + 1;
  }
  unint64_t v27 = v8;
  unint64_t v16 = __p;
  unint64_t v17 = v8 - (unsigned char *)__p;
  if ((unint64_t)(v8 - (unsigned char *)__p) >= 0x10000)
  {
    std::string v19 = "msg.size() <= kMaxMessageSize";
    int v20 = 166;
    uint64_t v21 = "populateHeader";
LABEL_31:
    __assert_rtn(v21, "AlishaDCKCoder.cpp", v20, v19);
  }
  if (v17 <= 3)
  {
    sub_10003F834((unint64_t *)&__p, 4 - v17);
    unint64_t v16 = __p;
    LOWORD(v17) = (_WORD)v27 - (_WORD)__p;
  }
  __int16 v18 = v17 - 4;
  unsigned char *v16 = 2;
  *((unsigned char *)__p + 1) = 6;
  *((unsigned char *)__p + 2) = HIBYTE(v18);
  *((unsigned char *)__p + 3) = v18;
  size_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_10016D488(&v22, __p, (uint64_t)v27, v27 - (unsigned char *)__p);
  char v25 = 1;
  *a2 = 0;
  sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&v22);
  if (v25 && v22)
  {
    unint64_t v23 = v22;
    operator delete(v22);
  }
  if (__p)
  {
    unint64_t v27 = __p;
    operator delete(__p);
  }
}

void sub_10032C75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032C79C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v2 = (unsigned char *)a2[1];
  uint64_t v4 = (uint64_t)&v2[-*a2];
  if ((unint64_t)(v4 - 65528) <= 0xFFFFFFFFFFFEFFFFLL) {
    sub_100430754();
  }
  unint64_t v7 = a2[2];
  if ((unint64_t)v2 >= v7)
  {
    if (v4 <= -2) {
      goto LABEL_149;
    }
    unint64_t v9 = v7 - v3;
    if (2 * v9 <= v4 + 1) {
      uint64_t v10 = v4 + 1;
    }
    else {
      uint64_t v10 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)(v12 + v11);
    *(unsigned char *)(v12 + v4) = HIBYTE(a1);
    long long v8 = (unsigned char *)(v12 + v4 + 1);
    if (v2 == (unsigned char *)v3)
    {
      v12 += v4;
    }
    else
    {
      long long v14 = &v2[~v3];
      do
      {
        char v15 = *--v2;
        (v14--)[v12] = v15;
      }
      while (v2 != (unsigned char *)v3);
      uint64_t v2 = (unsigned char *)*a2;
    }
    *a2 = v12;
    a2[1] = (unint64_t)v8;
    a2[2] = (unint64_t)v13;
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *uint64_t v2 = HIBYTE(a1);
    long long v8 = v2 + 1;
  }
  a2[1] = (unint64_t)v8;
  unint64_t v16 = a2[2];
  if ((unint64_t)v8 < v16)
  {
    unsigned char *v8 = BYTE6(a1);
    unint64_t v17 = v8 + 1;
    goto LABEL_39;
  }
  unint64_t v18 = *a2;
  std::string v19 = &v8[-*a2];
  unint64_t v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0) {
    goto LABEL_149;
  }
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (unint64_t)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  uint64_t v24 = (char *)(v23 + v22);
  v19[v23] = BYTE6(a1);
  unint64_t v17 = &v19[v23 + 1];
  if (v8 == (unsigned char *)v18)
  {
    *a2 = (unint64_t)&v19[v23];
    a2[1] = (unint64_t)v17;
    a2[2] = (unint64_t)v24;
LABEL_38:
    operator delete(v8);
    goto LABEL_39;
  }
  char v25 = &v8[~v18];
  do
  {
    char v26 = *--v8;
    (v25--)[v23] = v26;
  }
  while (v8 != (unsigned char *)v18);
  long long v8 = (unsigned char *)*a2;
  *a2 = v23;
  a2[1] = (unint64_t)v17;
  a2[2] = (unint64_t)v24;
  if (v8) {
    goto LABEL_38;
  }
LABEL_39:
  a2[1] = (unint64_t)v17;
  unint64_t v27 = a2[2];
  if ((unint64_t)v17 < v27)
  {
    unsigned char *v17 = BYTE5(a1);
    unint64_t v28 = v17 + 1;
    goto LABEL_57;
  }
  unint64_t v29 = *a2;
  char v30 = &v17[-*a2];
  unint64_t v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0) {
    goto LABEL_149;
  }
  unint64_t v32 = v27 - v29;
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v33 = v31;
  }
  if (v33) {
    unint64_t v34 = (unint64_t)operator new(v33);
  }
  else {
    unint64_t v34 = 0;
  }
  uint64_t v35 = (char *)(v34 + v33);
  v30[v34] = BYTE5(a1);
  unint64_t v28 = &v30[v34 + 1];
  if (v17 == (unsigned char *)v29)
  {
    *a2 = (unint64_t)&v30[v34];
    a2[1] = (unint64_t)v28;
    a2[2] = (unint64_t)v35;
LABEL_56:
    operator delete(v17);
    goto LABEL_57;
  }
  __int16 v36 = &v17[~v29];
  do
  {
    char v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (unsigned char *)v29);
  unint64_t v17 = (unsigned char *)*a2;
  *a2 = v34;
  a2[1] = (unint64_t)v28;
  a2[2] = (unint64_t)v35;
  if (v17) {
    goto LABEL_56;
  }
LABEL_57:
  a2[1] = (unint64_t)v28;
  unint64_t v38 = a2[2];
  if ((unint64_t)v28 < v38)
  {
    *unint64_t v28 = BYTE4(a1);
    unint64_t v39 = v28 + 1;
    goto LABEL_75;
  }
  unint64_t v40 = *a2;
  char v41 = &v28[-*a2];
  unint64_t v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0) {
    goto LABEL_149;
  }
  unint64_t v43 = v38 - v40;
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v44 = v42;
  }
  if (v44) {
    unint64_t v45 = (unint64_t)operator new(v44);
  }
  else {
    unint64_t v45 = 0;
  }
  NSString v46 = (char *)(v45 + v44);
  v41[v45] = BYTE4(a1);
  unint64_t v39 = &v41[v45 + 1];
  if (v28 == (unsigned char *)v40)
  {
    *a2 = (unint64_t)&v41[v45];
    a2[1] = (unint64_t)v39;
    a2[2] = (unint64_t)v46;
LABEL_74:
    operator delete(v28);
    goto LABEL_75;
  }
  os_log_type_t v47 = &v28[~v40];
  do
  {
    char v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (unsigned char *)v40);
  unint64_t v28 = (unsigned char *)*a2;
  *a2 = v45;
  a2[1] = (unint64_t)v39;
  a2[2] = (unint64_t)v46;
  if (v28) {
    goto LABEL_74;
  }
LABEL_75:
  a2[1] = (unint64_t)v39;
  unint64_t v49 = a2[2];
  if ((unint64_t)v39 < v49)
  {
    *unint64_t v39 = BYTE3(a1);
    unint64_t v50 = v39 + 1;
    goto LABEL_93;
  }
  unint64_t v51 = *a2;
  __int16 v52 = &v39[-*a2];
  unint64_t v53 = (unint64_t)(v52 + 1);
  if ((uint64_t)(v52 + 1) < 0) {
    goto LABEL_149;
  }
  unint64_t v54 = v49 - v51;
  if (2 * v54 > v53) {
    unint64_t v53 = 2 * v54;
  }
  if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v55 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v55 = v53;
  }
  if (v55) {
    unint64_t v56 = (unint64_t)operator new(v55);
  }
  else {
    unint64_t v56 = 0;
  }
  id v57 = (char *)(v56 + v55);
  v52[v56] = BYTE3(a1);
  unint64_t v50 = &v52[v56 + 1];
  if (v39 == (unsigned char *)v51)
  {
    *a2 = (unint64_t)&v52[v56];
    a2[1] = (unint64_t)v50;
    a2[2] = (unint64_t)v57;
LABEL_92:
    operator delete(v39);
    goto LABEL_93;
  }
  uint64_t v58 = &v39[~v51];
  do
  {
    char v59 = *--v39;
    (v58--)[v56] = v59;
  }
  while (v39 != (unsigned char *)v51);
  unint64_t v39 = (unsigned char *)*a2;
  *a2 = v56;
  a2[1] = (unint64_t)v50;
  a2[2] = (unint64_t)v57;
  if (v39) {
    goto LABEL_92;
  }
LABEL_93:
  a2[1] = (unint64_t)v50;
  unint64_t v60 = a2[2];
  if ((unint64_t)v50 < v60)
  {
    *unint64_t v50 = BYTE2(a1);
    uint64_t v61 = v50 + 1;
    goto LABEL_111;
  }
  unint64_t v62 = *a2;
  v63 = &v50[-*a2];
  unint64_t v64 = (unint64_t)(v63 + 1);
  if ((uint64_t)(v63 + 1) < 0) {
    goto LABEL_149;
  }
  unint64_t v65 = v60 - v62;
  if (2 * v65 > v64) {
    unint64_t v64 = 2 * v65;
  }
  if (v65 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v66 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v66 = v64;
  }
  if (v66) {
    unint64_t v67 = (unint64_t)operator new(v66);
  }
  else {
    unint64_t v67 = 0;
  }
  uint64_t v68 = (char *)(v67 + v66);
  v63[v67] = BYTE2(a1);
  uint64_t v61 = &v63[v67 + 1];
  if (v50 == (unsigned char *)v62)
  {
    *a2 = (unint64_t)&v63[v67];
    a2[1] = (unint64_t)v61;
    a2[2] = (unint64_t)v68;
LABEL_110:
    operator delete(v50);
    goto LABEL_111;
  }
  uint64_t v69 = &v50[~v62];
  do
  {
    char v70 = *--v50;
    (v69--)[v67] = v70;
  }
  while (v50 != (unsigned char *)v62);
  unint64_t v50 = (unsigned char *)*a2;
  *a2 = v67;
  a2[1] = (unint64_t)v61;
  a2[2] = (unint64_t)v68;
  if (v50) {
    goto LABEL_110;
  }
LABEL_111:
  a2[1] = (unint64_t)v61;
  unint64_t v71 = a2[2];
  if ((unint64_t)v61 < v71)
  {
    unsigned char *v61 = BYTE1(a1);
    v72 = v61 + 1;
    goto LABEL_129;
  }
  unint64_t v73 = *a2;
  v74 = &v61[-*a2];
  unint64_t v75 = (unint64_t)(v74 + 1);
  if ((uint64_t)(v74 + 1) < 0) {
    goto LABEL_149;
  }
  unint64_t v76 = v71 - v73;
  if (2 * v76 > v75) {
    unint64_t v75 = 2 * v76;
  }
  if (v76 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v77 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v77 = v75;
  }
  if (v77) {
    unint64_t v78 = (unint64_t)operator new(v77);
  }
  else {
    unint64_t v78 = 0;
  }
  v79 = (char *)(v78 + v77);
  v74[v78] = BYTE1(a1);
  v72 = &v74[v78 + 1];
  if (v61 == (unsigned char *)v73)
  {
    *a2 = (unint64_t)&v74[v78];
    a2[1] = (unint64_t)v72;
    a2[2] = (unint64_t)v79;
LABEL_128:
    operator delete(v61);
    goto LABEL_129;
  }
  v80 = &v61[~v73];
  do
  {
    char v81 = *--v61;
    (v80--)[v78] = v81;
  }
  while (v61 != (unsigned char *)v73);
  uint64_t v61 = (unsigned char *)*a2;
  *a2 = v78;
  a2[1] = (unint64_t)v72;
  a2[2] = (unint64_t)v79;
  if (v61) {
    goto LABEL_128;
  }
LABEL_129:
  a2[1] = (unint64_t)v72;
  unint64_t v82 = a2[2];
  if ((unint64_t)v72 < v82)
  {
    unsigned char *v72 = a1;
    uint64_t v83 = (uint64_t)(v72 + 1);
    goto LABEL_147;
  }
  unint64_t v84 = *a2;
  v85 = &v72[-*a2];
  unint64_t v86 = (unint64_t)(v85 + 1);
  if ((uint64_t)(v85 + 1) < 0) {
LABEL_149:
  }
    sub_1000267C4();
  unint64_t v87 = v82 - v84;
  if (2 * v87 > v86) {
    unint64_t v86 = 2 * v87;
  }
  if (v87 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v88 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v88 = v86;
  }
  if (v88) {
    unint64_t v89 = (unint64_t)operator new(v88);
  }
  else {
    unint64_t v89 = 0;
  }
  uint64_t v90 = (char *)(v89 + v88);
  v85[v89] = a1;
  uint64_t v83 = (uint64_t)&v85[v89 + 1];
  if (v72 == (unsigned char *)v84)
  {
    *a2 = (unint64_t)&v85[v89];
    a2[1] = v83;
    a2[2] = (unint64_t)v90;
LABEL_146:
    operator delete(v72);
    goto LABEL_147;
  }
  uint64_t v91 = &v72[~v84];
  do
  {
    char v92 = *--v72;
    (v91--)[v89] = v92;
  }
  while (v72 != (unsigned char *)v84);
  v72 = (unsigned char *)*a2;
  *a2 = v89;
  a2[1] = v83;
  a2[2] = (unint64_t)v90;
  if (v72) {
    goto LABEL_146;
  }
LABEL_147:
  a2[1] = v83;
}

void sub_10032CDE8(int *a1@<X1>, _DWORD *a2@<X8>)
{
  LOBYTE(__p) = 0;
  sub_1001B0664(&v11, 4uLL, &__p);
  sub_10032BD34(*a1, (unint64_t *)&v11);
  uint64_t v4 = v11;
  unint64_t v5 = v12 - (unsigned char *)v11;
  if ((unint64_t)(v12 - (unsigned char *)v11) >= 0x10000) {
    __assert_rtn("populateHeader", "AlishaDCKCoder.cpp", 166, "msg.size() <= kMaxMessageSize");
  }
  if (v5 <= 3)
  {
    sub_10003F834((unint64_t *)&v11, 4 - v5);
    uint64_t v4 = v11;
    LOWORD(v5) = (_WORD)v12 - (_WORD)v11;
  }
  __int16 v6 = v5 - 4;
  *uint64_t v4 = 2;
  *((unsigned char *)v11 + 1) = 7;
  *((unsigned char *)v11 + 2) = HIBYTE(v6);
  *((unsigned char *)v11 + 3) = v6;
  std::string __p = 0;
  long long v8 = 0;
  uint64_t v9 = 0;
  sub_10016D488(&__p, v11, (uint64_t)v12, v12 - (unsigned char *)v11);
  char v10 = 1;
  *a2 = 0;
  sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&__p);
  if (v10 && __p)
  {
    long long v8 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    unint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_10032CF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032CF50(char *a1@<X1>, _DWORD *a2@<X8>)
{
  LOBYTE(v22) = 0;
  sub_1001B0664(&__p, 4uLL, &v22);
  unint64_t v5 = (unint64_t)__p;
  uint64_t v4 = v27;
  uint64_t v6 = v27 - (unsigned char *)__p;
  if ((unint64_t)(v27 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
    std::string v19 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    int v20 = 225;
    unint64_t v21 = "append";
    goto LABEL_31;
  }
  char v7 = *a1;
  if ((unint64_t)v27 >= v28)
  {
    unint64_t v9 = v28 - (void)__p;
    if (2 * (v28 - (unint64_t)__p) <= v6 + 1) {
      uint64_t v10 = v6 + 1;
    }
    else {
      uint64_t v10 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)v12 + v11;
    *((unsigned char *)v12 + v6) = v7;
    long long v8 = (char *)v12 + v6 + 1;
    if (v4 == (unsigned char *)v5)
    {
      unint64_t v12 = (char *)v12 + v6;
    }
    else
    {
      long long v14 = &v4[~v5];
      do
      {
        char v15 = *--v4;
        (v14--)[(void)v12] = v15;
      }
      while (v4 != (unsigned char *)v5);
      uint64_t v4 = __p;
    }
    std::string __p = v12;
    unint64_t v27 = v8;
    unint64_t v28 = (unint64_t)v13;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    unsigned char *v27 = v7;
    long long v8 = v4 + 1;
  }
  unint64_t v27 = v8;
  unint64_t v16 = __p;
  unint64_t v17 = v8 - (unsigned char *)__p;
  if ((unint64_t)(v8 - (unsigned char *)__p) >= 0x10000)
  {
    std::string v19 = "msg.size() <= kMaxMessageSize";
    int v20 = 166;
    unint64_t v21 = "populateHeader";
LABEL_31:
    __assert_rtn(v21, "AlishaDCKCoder.cpp", v20, v19);
  }
  if (v17 <= 3)
  {
    sub_10003F834((unint64_t *)&__p, 4 - v17);
    unint64_t v16 = __p;
    LOWORD(v17) = (_WORD)v27 - (_WORD)__p;
  }
  __int16 v18 = v17 - 4;
  unsigned char *v16 = 2;
  *((unsigned char *)__p + 1) = 8;
  *((unsigned char *)__p + 2) = HIBYTE(v18);
  *((unsigned char *)__p + 3) = v18;
  size_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_10016D488(&v22, __p, (uint64_t)v27, v27 - (unsigned char *)__p);
  char v25 = 1;
  *a2 = 0;
  sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&v22);
  if (v25 && v22)
  {
    unint64_t v23 = v22;
    operator delete(v22);
  }
  if (__p)
  {
    unint64_t v27 = __p;
    operator delete(__p);
  }
}

void sub_10032D158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032D198(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  LOBYTE(__p) = 0;
  sub_1001B0664(&v11, 4uLL, &__p);
  sub_10032BD34(*(_DWORD *)a1, (unint64_t *)&v11);
  sub_10032C79C(*(void *)(a1 + 8), (unint64_t *)&v11);
  uint64_t v4 = v11;
  unint64_t v5 = v12 - (unsigned char *)v11;
  if ((unint64_t)(v12 - (unsigned char *)v11) >= 0x10000) {
    __assert_rtn("populateHeader", "AlishaDCKCoder.cpp", 166, "msg.size() <= kMaxMessageSize");
  }
  if (v5 <= 3)
  {
    sub_10003F834((unint64_t *)&v11, 4 - v5);
    uint64_t v4 = v11;
    LOWORD(v5) = (_WORD)v12 - (_WORD)v11;
  }
  __int16 v6 = v5 - 4;
  *uint64_t v4 = 2;
  *((unsigned char *)v11 + 1) = 10;
  *((unsigned char *)v11 + 2) = HIBYTE(v6);
  *((unsigned char *)v11 + 3) = v6;
  std::string __p = 0;
  long long v8 = 0;
  uint64_t v9 = 0;
  sub_10016D488(&__p, v11, (uint64_t)v12, v12 - (unsigned char *)v11);
  char v10 = 1;
  *a2 = 0;
  sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&__p);
  if (v10 && __p)
  {
    long long v8 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    unint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_10032D2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032D30C(char *a1@<X1>, _DWORD *a2@<X8>)
{
  LOBYTE(v22) = 0;
  sub_1001B0664(&__p, 4uLL, &v22);
  unint64_t v5 = (unint64_t)__p;
  uint64_t v4 = v27;
  uint64_t v6 = v27 - (unsigned char *)__p;
  if ((unint64_t)(v27 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
    std::string v19 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    int v20 = 225;
    unint64_t v21 = "append";
    goto LABEL_31;
  }
  char v7 = *a1;
  if ((unint64_t)v27 >= v28)
  {
    unint64_t v9 = v28 - (void)__p;
    if (2 * (v28 - (unint64_t)__p) <= v6 + 1) {
      uint64_t v10 = v6 + 1;
    }
    else {
      uint64_t v10 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v13 = (char *)v12 + v11;
    *((unsigned char *)v12 + v6) = v7;
    long long v8 = (char *)v12 + v6 + 1;
    if (v4 == (unsigned char *)v5)
    {
      unint64_t v12 = (char *)v12 + v6;
    }
    else
    {
      long long v14 = &v4[~v5];
      do
      {
        char v15 = *--v4;
        (v14--)[(void)v12] = v15;
      }
      while (v4 != (unsigned char *)v5);
      uint64_t v4 = __p;
    }
    std::string __p = v12;
    unint64_t v27 = v8;
    unint64_t v28 = (unint64_t)v13;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    unsigned char *v27 = v7;
    long long v8 = v4 + 1;
  }
  unint64_t v27 = v8;
  sub_10032BD34(*((_DWORD *)a1 + 1), (unint64_t *)&__p);
  sub_10032C79C(*((void *)a1 + 1), (unint64_t *)&__p);
  unint64_t v16 = __p;
  unint64_t v17 = v27 - (unsigned char *)__p;
  if ((unint64_t)(v27 - (unsigned char *)__p) >= 0x10000)
  {
    std::string v19 = "msg.size() <= kMaxMessageSize";
    int v20 = 166;
    unint64_t v21 = "populateHeader";
LABEL_31:
    __assert_rtn(v21, "AlishaDCKCoder.cpp", v20, v19);
  }
  if (v17 <= 3)
  {
    sub_10003F834((unint64_t *)&__p, 4 - v17);
    unint64_t v16 = __p;
    LOWORD(v17) = (_WORD)v27 - (_WORD)__p;
  }
  __int16 v18 = v17 - 4;
  unsigned char *v16 = 2;
  *((unsigned char *)__p + 1) = 19;
  *((unsigned char *)__p + 2) = HIBYTE(v18);
  *((unsigned char *)__p + 3) = v18;
  size_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_10016D488(&v22, __p, (uint64_t)v27, v27 - (unsigned char *)__p);
  char v25 = 1;
  *a2 = 0;
  sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&v22);
  if (v25 && v22)
  {
    unint64_t v23 = v22;
    operator delete(v22);
  }
  if (__p)
  {
    unint64_t v27 = __p;
    operator delete(__p);
  }
}

void sub_10032D534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032D574(uint64_t *a1@<X1>, int *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1] - *a1;
  if (v4 < 4)
  {
    int v5 = -4000;
LABEL_17:
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = v5;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    sub_10032E9B4((uint64_t)&v49);
    return;
  }
  if (v4 >> 16)
  {
    int v5 = -4001;
    goto LABEL_17;
  }
  if (v4 != __rev16(*(unsigned __int16 *)(v3 + 2)) + 4)
  {
    int v5 = -4002;
    goto LABEL_17;
  }
  unint64_t v45 = 0;
  NSString v46 = 0;
  uint64_t v47 = 0;
  unint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v44 = 0;
  std::string __p = 0;
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  if (v4 <= 4)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4007;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
LABEL_52:
    sub_10032E9B4((uint64_t)&v49);
    goto LABEL_53;
  }
  unint64_t v6 = *(unsigned __int8 *)(v3 + 4);
  if (v6 + 4 >= v4)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4011;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  if (!v6)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4008;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  if (v6)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4009;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  unsigned __int8 v38 = v6;
  sub_10032DB84((uint64_t)&v45, v6 >> 1);
  long long v8 = v45;
  unint64_t v9 = v46;
  if (v45 != v46)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = a1[1] - *a1;
    unsigned __int16 v12 = 5;
    uint64_t v13 = "msg.size() <= kMaxMessageSize";
    while (!(v11 >> 16))
    {
      if ((unint64_t)v12 + 2 > v11)
      {
        int v29 = 191;
        uint64_t v13 = "offset + sizeof(val) <= msg.size()";
LABEL_49:
        __assert_rtn("readAndAdvance", "AlishaDCKCoder.cpp", v29, v13);
      }
      unsigned __int16 v14 = v12 + 1;
      __int16 v15 = *(unsigned __int8 *)(v10 + v12);
      _WORD *v8 = v15 << 8;
      v12 += 2;
      *v8++ = *(unsigned __int8 *)(v10 + v14) | (unsigned __int16)(v15 << 8);
      if (v8 == v9) {
        goto LABEL_24;
      }
    }
    int v29 = 190;
    goto LABEL_49;
  }
  unsigned __int16 v12 = 5;
LABEL_24:
  unsigned __int16 v48 = v12;
  if (v4 <= v12)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4012;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  uint64_t v16 = *(unsigned __int8 *)(*a1 + v12);
  if (v16 + (unint64_t)v12 >= v4)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4016;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  if (!*(unsigned char *)(*a1 + v12))
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4013;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  if (v16)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4014;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  sub_10032DB3C(&v38, a1, &v48);
  sub_10032DB84((uint64_t)&v42, (unint64_t)v38 >> 1);
  unint64_t v17 = v42;
  __int16 v18 = v43;
  unsigned __int16 v19 = v48;
  if (v42 != v43)
  {
    uint64_t v20 = *a1;
    unint64_t v21 = a1[1] - *a1;
    size_t v22 = "msg.size() <= kMaxMessageSize";
    while (!(v21 >> 16))
    {
      if ((unint64_t)v19 + 2 > v21)
      {
        int v30 = 191;
        size_t v22 = "offset + sizeof(val) <= msg.size()";
LABEL_61:
        __assert_rtn("readAndAdvance", "AlishaDCKCoder.cpp", v30, v22);
      }
      unsigned __int16 v23 = v19 + 1;
      __int16 v24 = *(unsigned __int8 *)(v20 + v19);
      _WORD *v17 = v24 << 8;
      v19 += 2;
      *v17++ = *(unsigned __int8 *)(v20 + v23) | (unsigned __int16)(v24 << 8);
      if (v17 == v18) {
        goto LABEL_33;
      }
    }
    int v30 = 190;
    goto LABEL_61;
  }
LABEL_33:
  unsigned __int16 v48 = v19;
  if (v4 <= v19)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4017;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  uint64_t v25 = v19;
  uint64_t v26 = *(unsigned __int8 *)(*a1 + v19);
  if (v26 + v25 >= v4)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4020;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  if (!v26)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4018;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  sub_10032DB3C(&v38, a1, &v48);
  sub_10021D2C0((unint64_t *)&__p, v38);
  unint64_t v31 = v4;
  unint64_t v27 = __p;
  unint64_t v28 = v40;
  while (v27 != v28)
    sub_10032DB3C(v27++, a1, &v48);
  if (v31 != v48)
  {
    LOBYTE(v49) = 0;
    char v55 = 0;
    *a2 = -4006;
    sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
    goto LABEL_52;
  }
  sub_10032EA10(&v32, (uint64_t)&v45, (uint64_t)&v42, (uint64_t)&__p);
  long long v49 = v32;
  uint64_t v50 = v33;
  long long v32 = 0uLL;
  long long v51 = v34;
  uint64_t v52 = v35;
  uint64_t v33 = 0;
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  long long v53 = v36;
  uint64_t v54 = v37;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  char v55 = 1;
  *a2 = 0;
  sub_10032ECEC((uint64_t)(a2 + 2), (uint64_t)&v49);
  sub_10032E9B4((uint64_t)&v49);
  sub_10032DBB4((uint64_t)&v32);
LABEL_53:
  if (__p)
  {
    unint64_t v40 = __p;
    operator delete(__p);
  }
  if (v42)
  {
    unint64_t v43 = v42;
    operator delete(v42);
  }
  if (v45)
  {
    NSString v46 = v45;
    operator delete(v45);
  }
}

void sub_10032DA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  sub_10032E9B4(v28 - 128);
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_10032DB3C(unsigned char *result, uint64_t *a2, _WORD *a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1] - *a2;
  if (v4 >= 0x10000) {
    sub_100430780();
  }
  unint64_t v5 = (unsigned __int16)*a3;
  if (v4 <= v5) {
    sub_1004307AC();
  }
  *a3 = v5 + 1;
  const char *result = *(unsigned char *)(v3 + v5);
  return result;
}

void sub_10032DB84(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_10032EDFC((char **)a1, a2 - v2);
  }
}

uint64_t sub_10032DBB4(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_10032DC08(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1] - *a1;
  if (v3 < 4)
  {
    int v4 = -4000;
LABEL_16:
    char v12 = 0;
    *(_DWORD *)a2 = v4;
    *(unsigned char *)(a2 + 4) = 0;
    goto LABEL_17;
  }
  if (v3 >> 16)
  {
    int v4 = -4001;
    goto LABEL_16;
  }
  uint64_t v5 = *(unsigned __int8 *)(v2 + 3);
  uint64_t v6 = *(unsigned __int8 *)(v2 + 2);
  if (v3 != (v5 | (v6 << 8)) + 4)
  {
    int v4 = -4002;
    goto LABEL_16;
  }
  if ((v5 | (v6 << 8)) != 0xA)
  {
    int v4 = -4006;
    goto LABEL_16;
  }
  if (v3 <= 5) {
    sub_1004307D8();
  }
  if (v3 <= 7) {
    sub_1004307D8();
  }
  if (v3 <= 0xB) {
    sub_100430804();
  }
  if (v3 == 12) {
    sub_1004307AC();
  }
  if (v3 <= 0xD) {
    sub_1004307AC();
  }
  if (v3 != 14) {
    sub_100430830();
  }
  unsigned int v7 = bswap32(*(unsigned __int16 *)(v2 + 4));
  unsigned int v8 = bswap32(*(unsigned __int16 *)(v2 + 6)) >> 16;
  unsigned int v9 = bswap32(*(_DWORD *)(v2 + 8));
  char v10 = *(unsigned char *)(v2 + 12);
  char v11 = *(unsigned char *)(v2 + 13);
  *(_DWORD *)a2 = 0;
  *(_WORD *)(a2 + 4) = HIWORD(v7);
  *(_WORD *)(a2 + 6) = v8;
  *(_DWORD *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 12) = v10;
  *(unsigned char *)(a2 + 13) = v11;
  char v12 = 1;
LABEL_17:
  *(unsigned char *)(a2 + 16) = v12;
}

void sub_10032DD14(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1] - *a1;
  if (v3 < 4)
  {
    int v4 = -4000;
LABEL_16:
    char v13 = 0;
    *(_DWORD *)a2 = v4;
    *(unsigned char *)(a2 + 4) = 0;
    goto LABEL_17;
  }
  if (v3 >> 16)
  {
    int v4 = -4001;
    goto LABEL_16;
  }
  uint64_t v5 = *(unsigned __int8 *)(v2 + 3);
  uint64_t v6 = *(unsigned __int8 *)(v2 + 2);
  if (v3 != (v5 | (v6 << 8)) + 4)
  {
    int v4 = -4002;
    goto LABEL_16;
  }
  if ((v5 | (v6 << 8)) != 9)
  {
    int v4 = -4006;
    goto LABEL_16;
  }
  if (v3 <= 4) {
    sub_1004307AC();
  }
  if (v3 == 5) {
    sub_1004307AC();
  }
  if (v3 <= 6) {
    sub_1004307AC();
  }
  if (v3 == 7) {
    sub_1004307AC();
  }
  if (v3 <= 0xB) {
    sub_100430804();
  }
  if (v3 != 13)
  {
    if (v3 == 12) {
      sub_1004307AC();
    }
    sub_10043085C();
  }
  char v7 = *(unsigned char *)(v2 + 4);
  char v8 = *(unsigned char *)(v2 + 5);
  char v9 = *(unsigned char *)(v2 + 6);
  char v10 = *(unsigned char *)(v2 + 7);
  unsigned int v11 = bswap32(*(_DWORD *)(v2 + 8));
  char v12 = *(unsigned char *)(v2 + 12);
  *(_DWORD *)a2 = 0;
  *(unsigned char *)(a2 + 4) = v7;
  *(unsigned char *)(a2 + 5) = v8;
  *(unsigned char *)(a2 + 6) = v9;
  *(unsigned char *)(a2 + 7) = v10;
  *(_DWORD *)(a2 + 8) = v11;
  char v13 = 1;
  *(unsigned char *)(a2 + 12) = v12;
LABEL_17:
  *(unsigned char *)(a2 + 16) = v13;
}

uint64_t sub_10032DE24(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1] - *a2;
  if (v3 < 4)
  {
    int v4 = -4000;
LABEL_12:
    LODWORD(v7) = 0;
    LODWORD(v9) = v4;
    goto LABEL_13;
  }
  if (v3 >> 16)
  {
    int v4 = -4001;
    goto LABEL_12;
  }
  uint64_t v5 = *(unsigned __int8 *)(v2 + 3);
  uint64_t v6 = *(unsigned __int8 *)(v2 + 2);
  if (v3 != (v5 | (v6 << 8)) + 4)
  {
    int v4 = -4002;
    goto LABEL_12;
  }
  if ((v5 | (v6 << 8)) != 4)
  {
    int v4 = -4006;
    goto LABEL_12;
  }
  if (v3 <= 7) {
    sub_100430804();
  }
  if (v3 != 8) {
    sub_100430888();
  }
  LODWORD(v9) = 0;
  unint64_t v7 = bswap32(*(_DWORD *)(v2 + 4)) | (unint64_t)&_mh_execute_header;
LABEL_13:
  HIDWORD(v9) = v7;
  return v9;
}

unint64_t sub_10032DEDC(uint64_t a1, unsigned __int8 **a2)
{
  unint64_t result = 4294963290;
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1] - *a2;
  if (v4 < 4) {
    return 4294963296;
  }
  if (v4 >> 16) {
    return 4294963295;
  }
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[2];
  if (v4 != (v5 | (v6 << 8)) + 4) {
    return 4294963294;
  }
  if ((v5 | (v6 << 8)) == 1)
  {
    if (v4 <= 4) {
      sub_1004307AC();
    }
    if (v4 != 5) {
      sub_1004308B4();
    }
    return ((unint64_t)v3[4] << 32) | 0x10000000000;
  }
  return result;
}

uint64_t sub_10032DF6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1] - *a2;
  if (v3 < 4)
  {
    int v4 = -4000;
LABEL_12:
    LODWORD(v7) = 0;
    LODWORD(v9) = v4;
    goto LABEL_13;
  }
  if (v3 >> 16)
  {
    int v4 = -4001;
    goto LABEL_12;
  }
  uint64_t v5 = *(unsigned __int8 *)(v2 + 3);
  uint64_t v6 = *(unsigned __int8 *)(v2 + 2);
  if (v3 != (v5 | (v6 << 8)) + 4)
  {
    int v4 = -4002;
    goto LABEL_12;
  }
  if ((v5 | (v6 << 8)) != 4)
  {
    int v4 = -4006;
    goto LABEL_12;
  }
  if (v3 <= 7) {
    sub_100430804();
  }
  if (v3 != 8) {
    sub_1004308E0();
  }
  LODWORD(v9) = 0;
  unint64_t v7 = bswap32(*(_DWORD *)(v2 + 4)) | (unint64_t)&_mh_execute_header;
LABEL_13:
  HIDWORD(v9) = v7;
  return v9;
}

uint64_t sub_10032E024(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1] - *a2;
  if (v3 < 4)
  {
    int v4 = -4000;
LABEL_12:
    LODWORD(v8) = v4;
    BYTE4(v8) = 0;
    return v8;
  }
  if (v3 >> 16)
  {
    int v4 = -4001;
    goto LABEL_12;
  }
  uint64_t v5 = *(unsigned __int8 *)(v2 + 3);
  uint64_t v6 = *(unsigned __int8 *)(v2 + 2);
  if (v3 != (v5 | (v6 << 8)) + 4)
  {
    int v4 = -4002;
    goto LABEL_12;
  }
  if ((v5 | (v6 << 8)) != 5)
  {
    int v4 = -4006;
    goto LABEL_12;
  }
  if (v3 <= 7) {
    sub_100430804();
  }
  if (v3 != 9)
  {
    if (v3 == 8) {
      sub_1004307AC();
    }
    sub_10043090C();
  }
  LODWORD(v8) = 0;
  HIDWORD(v8) = bswap32(*(_DWORD *)(v2 + 4));
  return v8;
}

void sub_10032E0F0(char *a1@<X1>, _DWORD *a2@<X8>)
{
  LOBYTE(v49) = 0;
  sub_1001B0664(&__p, 4uLL, &v49);
  unint64_t v5 = (unint64_t)__p;
  int v4 = v54;
  uint64_t v6 = v54 - (unsigned char *)__p;
  if ((unint64_t)(v54 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000) {
    goto LABEL_85;
  }
  char v7 = *a1;
  if ((unint64_t)v54 >= v55)
  {
    unint64_t v9 = v55 - (void)__p;
    if (2 * (v55 - (unint64_t)__p) <= v6 + 1) {
      uint64_t v10 = v6 + 1;
    }
    else {
      uint64_t v10 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      char v12 = operator new(v11);
    }
    else {
      char v12 = 0;
    }
    char v13 = (char *)v12 + v11;
    *((unsigned char *)v12 + v6) = v7;
    uint64_t v8 = (char *)v12 + v6 + 1;
    if (v4 == (unsigned char *)v5)
    {
      char v12 = (char *)v12 + v6;
    }
    else
    {
      unsigned __int16 v14 = &v4[~v5];
      do
      {
        char v15 = *--v4;
        (v14--)[(void)v12] = v15;
      }
      while (v4 != (unsigned char *)v5);
      int v4 = __p;
    }
    std::string __p = v12;
    uint64_t v54 = v8;
    unint64_t v55 = (unint64_t)v13;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v54 = v7;
    uint64_t v8 = v4 + 1;
  }
  uint64_t v54 = v8;
  int v16 = *a1;
  if (v16 == 1)
  {
    if (!a1[2])
    {
      NSString v46 = "evt.commandCompleteSubEventCode.has_value()";
      int v47 = 984;
      goto LABEL_90;
    }
    unint64_t v29 = (unint64_t)__p;
    uint64_t v30 = v8 - (unsigned char *)__p;
    if ((unint64_t)(v8 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000) {
      goto LABEL_85;
    }
    unsigned __int8 v19 = a1[1];
    if ((unint64_t)v8 < v55) {
      goto LABEL_48;
    }
    unint64_t v32 = v55 - (void)__p;
    if (2 * (v55 - (unint64_t)__p) <= v30 + 1) {
      uint64_t v33 = v30 + 1;
    }
    else {
      uint64_t v33 = 2 * v32;
    }
    if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v34 = v33;
    }
    if (v34) {
      unsigned __int16 v23 = operator new(v34);
    }
    else {
      unsigned __int16 v23 = 0;
    }
    uint64_t v35 = (char *)v23 + v30;
    long long v36 = (char *)v23 + v34;
    *((unsigned char *)v23 + v30) = v19;
    unint64_t v31 = (char *)v23 + v30 + 1;
    if (v8 == (unsigned char *)v29) {
      goto LABEL_73;
    }
    unint64_t v39 = &v8[~v29];
    do
    {
      char v40 = *--v8;
      (v39--)[(void)v23] = v40;
    }
    while (v8 != (unsigned char *)v29);
    goto LABEL_71;
  }
  if (v16 == 2)
  {
    if (!a1[4])
    {
      NSString v46 = "evt.rangingSessionStatusChangedSubEventCode.has_value()";
      int v47 = 989;
LABEL_90:
      unsigned __int16 v48 = "encodeEventNotification";
LABEL_91:
      __assert_rtn(v48, "AlishaDCKCoder.cpp", v47, v46);
    }
    unint64_t v24 = (unint64_t)__p;
    uint64_t v25 = v8 - (unsigned char *)__p;
    if ((unint64_t)(v8 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000) {
      goto LABEL_85;
    }
    unsigned __int8 v19 = a1[3];
    if ((unint64_t)v8 < v55) {
      goto LABEL_48;
    }
    unint64_t v26 = v55 - (void)__p;
    if (2 * (v55 - (unint64_t)__p) <= v25 + 1) {
      uint64_t v27 = v25 + 1;
    }
    else {
      uint64_t v27 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v28 = v27;
    }
    if (v28) {
      unsigned __int16 v23 = operator new(v28);
    }
    else {
      unsigned __int16 v23 = 0;
    }
    uint64_t v35 = (char *)v23 + v25;
    long long v36 = (char *)v23 + v28;
    *((unsigned char *)v23 + v25) = v19;
    unint64_t v31 = (char *)v23 + v25 + 1;
    if (v8 == (unsigned char *)v24) {
      goto LABEL_73;
    }
    uint64_t v37 = &v8[~v24];
    do
    {
      char v38 = *--v8;
      (v37--)[(void)v23] = v38;
    }
    while (v8 != (unsigned char *)v24);
LABEL_71:
    uint64_t v8 = __p;
    std::string __p = v23;
    uint64_t v54 = v31;
    unint64_t v55 = (unint64_t)v36;
    if (!v8) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v16 != 3) {
    goto LABEL_76;
  }
  if (!a1[6])
  {
    NSString v46 = "evt.deviceRangingIntentSubEventCode.has_value()";
    int v47 = 994;
    goto LABEL_90;
  }
  unint64_t v17 = (unint64_t)__p;
  uint64_t v18 = v8 - (unsigned char *)__p;
  if ((unint64_t)(v8 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
LABEL_85:
    NSString v46 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    int v47 = 225;
    unsigned __int16 v48 = "append";
    goto LABEL_91;
  }
  unsigned __int8 v19 = a1[5];
  if ((unint64_t)v8 >= v55)
  {
    unint64_t v20 = v55 - (void)__p;
    if (2 * (v55 - (unint64_t)__p) <= v18 + 1) {
      uint64_t v21 = v18 + 1;
    }
    else {
      uint64_t v21 = 2 * v20;
    }
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v22 = v21;
    }
    if (v22) {
      unsigned __int16 v23 = operator new(v22);
    }
    else {
      unsigned __int16 v23 = 0;
    }
    uint64_t v35 = (char *)v23 + v18;
    long long v36 = (char *)v23 + v22;
    *((unsigned char *)v23 + v18) = v19;
    unint64_t v31 = (char *)v23 + v18 + 1;
    if (v8 != (unsigned char *)v17)
    {
      uint64_t v41 = &v8[~v17];
      do
      {
        char v42 = *--v8;
        (v41--)[(void)v23] = v42;
      }
      while (v8 != (unsigned char *)v17);
      goto LABEL_71;
    }
LABEL_73:
    std::string __p = v35;
    uint64_t v54 = v31;
    unint64_t v55 = (unint64_t)v36;
LABEL_74:
    operator delete(v8);
    goto LABEL_75;
  }
LABEL_48:
  unsigned char *v8 = v19;
  unint64_t v31 = v8 + 1;
LABEL_75:
  uint64_t v54 = v31;
  uint64_t v8 = v31;
LABEL_76:
  unint64_t v43 = __p;
  unint64_t v44 = v8 - (unsigned char *)__p;
  if ((unint64_t)(v8 - (unsigned char *)__p) >= 0x10000)
  {
    NSString v46 = "msg.size() <= kMaxMessageSize";
    int v47 = 166;
    unsigned __int16 v48 = "populateHeader";
    goto LABEL_91;
  }
  if (v44 <= 3)
  {
    sub_10003F834((unint64_t *)&__p, 4 - v44);
    unint64_t v43 = __p;
    LOWORD(v44) = (_WORD)v54 - (_WORD)__p;
  }
  __int16 v45 = v44 - 4;
  *unint64_t v43 = 3;
  *((unsigned char *)__p + 1) = 17;
  *((unsigned char *)__p + 2) = HIBYTE(v45);
  *((unsigned char *)__p + 3) = v45;
  long long v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_10016D488(&v49, __p, (uint64_t)v54, v54 - (unsigned char *)__p);
  char v52 = 1;
  *a2 = 0;
  sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&v49);
  if (v52 && v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  if (__p)
  {
    uint64_t v54 = __p;
    operator delete(__p);
  }
}

void sub_10032E568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032E5A8(uint64_t a1@<X1>, _DWORD *a2@<X8>)
{
  LOBYTE(v45) = 0;
  sub_1001B0664(&__p, 4uLL, &v45);
  sub_10032C79C(*(void *)a1, (unint64_t *)&__p);
  sub_10032C79C(*(void *)(a1 + 8), (unint64_t *)&__p);
  unint64_t v5 = (unint64_t)__p;
  int v4 = v50;
  uint64_t v6 = v50 - (unsigned char *)__p;
  if ((unint64_t)(v50 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000) {
    goto LABEL_67;
  }
  char v7 = *(unsigned char *)(a1 + 16);
  if ((unint64_t)v50 >= v51)
  {
    unint64_t v9 = v51 - (void)__p;
    if (2 * (v51 - (unint64_t)__p) <= v6 + 1) {
      uint64_t v10 = v6 + 1;
    }
    else {
      uint64_t v10 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if (v11) {
      char v12 = operator new(v11);
    }
    else {
      char v12 = 0;
    }
    char v13 = (char *)v12 + v11;
    *((unsigned char *)v12 + v6) = v7;
    uint64_t v8 = (char *)v12 + v6 + 1;
    if (v4 == (unsigned char *)v5)
    {
      char v12 = (char *)v12 + v6;
    }
    else
    {
      unsigned __int16 v14 = &v4[~v5];
      do
      {
        char v15 = *--v4;
        (v14--)[(void)v12] = v15;
      }
      while (v4 != (unsigned char *)v5);
      int v4 = __p;
    }
    std::string __p = v12;
    uint64_t v50 = v8;
    unint64_t v51 = (unint64_t)v13;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *uint64_t v50 = v7;
    uint64_t v8 = v4 + 1;
  }
  uint64_t v50 = v8;
  unint64_t v16 = (unint64_t)__p;
  uint64_t v17 = v8 - (unsigned char *)__p;
  if ((unint64_t)(v8 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000) {
    goto LABEL_67;
  }
  char v18 = *(unsigned char *)(a1 + 17);
  if ((unint64_t)v8 < v51)
  {
    unsigned char *v8 = v18;
    unsigned __int8 v19 = v8 + 1;
    goto LABEL_39;
  }
  unint64_t v20 = v51 - (void)__p;
  if (2 * (v51 - (unint64_t)__p) <= v17 + 1) {
    uint64_t v21 = v17 + 1;
  }
  else {
    uint64_t v21 = 2 * v20;
  }
  if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v21;
  }
  if (v22) {
    unsigned __int16 v23 = operator new(v22);
  }
  else {
    unsigned __int16 v23 = 0;
  }
  unint64_t v24 = (char *)v23 + v22;
  *((unsigned char *)v23 + v17) = v18;
  unsigned __int8 v19 = (char *)v23 + v17 + 1;
  if (v8 == (unsigned char *)v16)
  {
    std::string __p = (char *)v23 + v17;
    uint64_t v50 = (char *)v23 + v17 + 1;
    unint64_t v51 = (unint64_t)v24;
LABEL_38:
    operator delete(v8);
    goto LABEL_39;
  }
  uint64_t v25 = &v8[~v16];
  do
  {
    char v26 = *--v8;
    (v25--)[(void)v23] = v26;
  }
  while (v8 != (unsigned char *)v16);
  uint64_t v8 = __p;
  std::string __p = v23;
  uint64_t v50 = (char *)v23 + v17 + 1;
  unint64_t v51 = (unint64_t)v24;
  if (v8) {
    goto LABEL_38;
  }
LABEL_39:
  uint64_t v50 = v19;
  sub_10032B90C(*(_WORD *)(a1 + 18), (unint64_t *)&__p);
  unint64_t v28 = (unint64_t)__p;
  uint64_t v27 = v50;
  uint64_t v29 = v50 - (unsigned char *)__p;
  if ((unint64_t)(v50 - (unsigned char *)__p - 0xFFFF) < 0xFFFFFFFFFFFF0000)
  {
LABEL_67:
    char v42 = "msg.size() + sizeof(data) <= kMaxMessageSize";
    int v43 = 225;
    unint64_t v44 = "append";
    goto LABEL_69;
  }
  char v30 = *(unsigned char *)(a1 + 20);
  if ((unint64_t)v50 >= v51)
  {
    unint64_t v32 = v51 - (void)__p;
    if (2 * (v51 - (unint64_t)__p) <= v29 + 1) {
      uint64_t v33 = v29 + 1;
    }
    else {
      uint64_t v33 = 2 * v32;
    }
    if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v34 = v33;
    }
    if (v34) {
      uint64_t v35 = operator new(v34);
    }
    else {
      uint64_t v35 = 0;
    }
    long long v36 = (char *)v35 + v34;
    *((unsigned char *)v35 + v29) = v30;
    unint64_t v31 = (char *)v35 + v29 + 1;
    if (v27 == (unsigned char *)v28)
    {
      uint64_t v35 = (char *)v35 + v29;
    }
    else
    {
      uint64_t v37 = &v27[~v28];
      do
      {
        char v38 = *--v27;
        (v37--)[(void)v35] = v38;
      }
      while (v27 != (unsigned char *)v28);
      uint64_t v27 = __p;
    }
    std::string __p = v35;
    uint64_t v50 = v31;
    unint64_t v51 = (unint64_t)v36;
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    *uint64_t v50 = v30;
    unint64_t v31 = v27 + 1;
  }
  uint64_t v50 = v31;
  sub_10032B90C(*(_WORD *)(a1 + 22), (unint64_t *)&__p);
  unint64_t v39 = __p;
  unint64_t v40 = v50 - (unsigned char *)__p;
  if ((unint64_t)(v50 - (unsigned char *)__p) >= 0x10000)
  {
    char v42 = "msg.size() <= kMaxMessageSize";
    int v43 = 166;
    unint64_t v44 = "populateHeader";
LABEL_69:
    __assert_rtn(v44, "AlishaDCKCoder.cpp", v43, v42);
  }
  if (v40 <= 3)
  {
    sub_10003F834((unint64_t *)&__p, 4 - v40);
    unint64_t v39 = __p;
    LOWORD(v40) = (_WORD)v50 - (_WORD)__p;
  }
  __int16 v41 = v40 - 4;
  *unint64_t v39 = 5;
  *((unsigned char *)__p + 1) = 13;
  *((unsigned char *)__p + 2) = HIBYTE(v41);
  *((unsigned char *)__p + 3) = v41;
  __int16 v45 = 0;
  NSString v46 = 0;
  uint64_t v47 = 0;
  sub_10016D488(&v45, __p, (uint64_t)v50, v50 - (unsigned char *)__p);
  char v48 = 1;
  *a2 = 0;
  sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&v45);
  if (v48 && v45)
  {
    NSString v46 = v45;
    operator delete(v45);
  }
  if (__p)
  {
    uint64_t v50 = __p;
    operator delete(__p);
  }
}

void sub_10032E974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15)
{
  if (a13 && __p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032E9B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(void *)(a1 + 56) = v2;
      operator delete(v2);
    }
    unint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
    int v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

void *sub_10032EA10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1001D0B70(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_1001D0B70(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_10016D488(a1 + 6, *(const void **)a4, *(void *)(a4 + 8), *(void *)(a4 + 8) - *(void *)a4);
  return a1;
}

void sub_10032EA98(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032EACC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10014A204(a1);
  }
  return a1;
}

uint64_t sub_10032EB04(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10032EB7C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10032EB7C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_10032EC20((uint64_t)v11);
  return v9;
}

uint64_t sub_10032EC20(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100153370(a1);
  }
  return a1;
}

uint64_t sub_10032EC58(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_10032ECA4((void *)a1, a2);
  return a1;
}

void sub_10032EC88(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_100430938(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10032ECA4(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    const char *result = 0;
    result[1] = 0;
    result[2] = 0;
    uint64_t result = sub_10016D488(result, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

uint64_t sub_10032ECEC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    sub_10032ED44((void *)a1, a2);
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_10032ED30(_Unwind_Exception *a1)
{
  sub_10032E9B4(v1);
  _Unwind_Resume(a1);
}

void *sub_10032ED44(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1001D0B70(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_1001D0B70(a1 + 3, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 1);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_10016D488(a1 + 6, *(const void **)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 56) - *(void *)(a2 + 48));
  return a1;
}

void sub_10032EDC8(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032EDFC(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    long long v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      sub_1000267C4();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      long long v14 = (char *)sub_10014A47C(v4, v13);
      long long v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      long long v14 = 0;
    }
    char v15 = &v14[2 * v11];
    unint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    uint64_t v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_10032EF10(unsigned char *a1)
{
  sub_100054E28((uint64_t)v52);
  uint64_t v2 = sub_100056628(v53, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  unint64_t v3 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v55.__locale_) = 9;
  uint64_t v4 = sub_100056628(v53, (uint64_t)&v55, 1);
  sub_100056628(v4, (uint64_t)"Channel: ", 9);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v55.__locale_) = 9;
  uint64_t v7 = sub_100056628(v53, (uint64_t)&v55, 1);
  sub_100056628(v7, (uint64_t)"Preamble: ", 10);
  long long v8 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  uint64_t v9 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v55.__locale_) = 9;
  uint64_t v10 = sub_100056628(v53, (uint64_t)&v55, 1);
  sub_100056628(v10, (uint64_t)"Selected protocol version: ", 27);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v55.__locale_) = 9;
  uint64_t v13 = sub_100056628(v53, (uint64_t)&v55, 1);
  sub_100056628(v13, (uint64_t)"Selected UWB config id: ", 24);
  long long v14 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  char v15 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v55.__locale_) = 9;
  unint64_t v16 = sub_100056628(v53, (uint64_t)&v55, 1);
  sub_100056628(v16, (uint64_t)"RAN multiplier: ", 16);
  uint64_t v17 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __int16 v18 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v55.__locale_) = 9;
  unsigned __int8 v19 = sub_100056628(v53, (uint64_t)&v55, 1);
  sub_100056628(v19, (uint64_t)"Num. chaps per slot: ", 21);
  unint64_t v20 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  uint64_t v21 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v55.__locale_) = 9;
  size_t v22 = sub_100056628(v53, (uint64_t)&v55, 1);
  sub_100056628(v22, (uint64_t)"Num. slots per round: ", 22);
  unsigned __int16 v23 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  unint64_t v24 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v55.__locale_) = 9;
  uint64_t v25 = sub_100056628(v53, (uint64_t)&v55, 1);
  sub_100056628(v25, (uint64_t)"Num. responders: ", 17);
  char v26 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
  uint64_t v27 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v55.__locale_) = 9;
  unint64_t v28 = sub_100056628(v53, (uint64_t)&v55, 1);
  sub_100056628(v28, (uint64_t)"Selected hop config bitmask: ", 29);
  uint64_t v29 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
  char v30 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v55.__locale_) = 9;
  unint64_t v31 = sub_100056628(v53, (uint64_t)&v55, 1);
  sub_100056628(v31, (uint64_t)"Selected pulse shape combo: ", 28);
  unint64_t v32 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
  uint64_t v33 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  if (a1[15])
  {
    LOBYTE(v55.__locale_) = 9;
    size_t v34 = sub_100056628(v53, (uint64_t)&v55, 1);
    uint64_t v35 = sub_100056628(v34, (uint64_t)"ACWG enable two ranging rounds per block: ", 42);
    if (!a1[15]) {
      goto LABEL_17;
    }
    long long v36 = a1[12] ? "yes" : "no";
    uint64_t v37 = a1[12] ? 3 : 2;
    char v38 = sub_100056628(v35, (uint64_t)v36, v37);
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(*v38 - 24)));
    unint64_t v39 = std::locale::use_facet(&v55, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
    if (!a1[15]) {
      goto LABEL_17;
    }
    if (a1[12])
    {
      LOBYTE(v55.__locale_) = 9;
      unint64_t v40 = sub_100056628(v53, (uint64_t)&v55, 1);
      __int16 v41 = sub_100056628(v40, (uint64_t)"ACWG offset between ranging rounds: ", 36);
      if (!a1[15]) {
        goto LABEL_17;
      }
      LOBYTE(v55.__locale_) = a1[13];
      char v42 = sub_100056628(v41, (uint64_t)&v55, 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
      int v43 = std::locale::use_facet(&v55, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
      std::locale::~locale(&v55);
      std::ostream::put();
      std::ostream::flush();
      if (!a1[15]) {
LABEL_17:
      }
        sub_10000AE44();
    }
    snprintf(__str, 0x80uLL, "ACWG Final Data2 Bitmask: 0x%02x", a1[14]);
    LOBYTE(v55.__locale_) = 9;
    unint64_t v44 = sub_100056628(v53, (uint64_t)&v55, 1);
    size_t v45 = strlen(__str);
    NSString v46 = sub_100056628(v44, (uint64_t)__str, v45);
    std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
    uint64_t v47 = std::locale::use_facet(&v55, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
    std::locale::~locale(&v55);
    std::ostream::put();
    std::ostream::flush();
  }
  char v48 = sub_100056628(v53, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(void *)(*v48 - 24)));
  long long v49 = std::locale::use_facet(&v55, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
  std::locale::~locale(&v55);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  *(void *)((char *)v52
  v53[0] = v50;
  if (v54 < 0) {
    operator delete((void *)v53[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10032FB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 192));
  sub_100055100((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032FB68(uint64_t a1)
{
  sub_100054E28((uint64_t)v20);
  uint64_t v2 = sub_100056628(v21, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  unint64_t v3 = std::locale::use_facet(&v17, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v17.__locale_) = 9;
  uint64_t v4 = sub_100056628(v21, (uint64_t)&v17, 1);
  sub_100056628(v4, (uint64_t)"UWB session id: ", 16);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet(&v17, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v17.__locale_) = 9;
  uint64_t v7 = sub_100056628(v21, (uint64_t)&v17, 1);
  long long v8 = sub_100056628(v7, (uint64_t)"Negotiated params: ", 19);
  sub_10032EF10((unsigned char *)(a1 + 4));
  if ((v19 & 0x80u) == 0) {
    locale = &v17;
  }
  else {
    locale = v17.__locale_;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v10 = v19;
  }
  else {
    uint64_t v10 = v18;
  }
  uint64_t v11 = sub_100056628(v8, (uint64_t)locale, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v23, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v19 < 0) {
    operator delete(v17.__locale_);
  }
  uint64_t v13 = sub_100056628(v21, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  long long v14 = std::locale::use_facet(&v17, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  *(void *)((char *)v20
  v21[0] = v15;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10032FF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_10032FFDC(uint64_t *a1)
{
  sub_100054E28((uint64_t)v13);
  sub_100056628(v14, (uint64_t)"[", 1);
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v3 = 0;
    do
    {
      int v4 = *(unsigned __int8 *)(v2 + v3);
      if (v4 == 1)
      {
        uint64_t v5 = "SchedulingConflict";
      }
      else if (v4 == 4)
      {
        uint64_t v5 = "SessionMuted";
      }
      else
      {
        uint64_t v5 = "CoexConflict";
      }
      sub_100004950(__p, v5);
      if ((v12 & 0x80u) == 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      if ((v12 & 0x80u) == 0) {
        uint64_t v7 = v12;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      sub_100056628(v14, (uint64_t)v6, v7);
      if ((char)v12 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v2 = *a1;
      uint64_t v8 = a1[1];
      if (~*a1 + v8 > v3)
      {
        sub_100056628(v14, (uint64_t)", ", 2);
        uint64_t v2 = *a1;
        uint64_t v8 = a1[1];
      }
      ++v3;
    }
    while (v8 - v2 > v3);
  }
  sub_100056628(v14, (uint64_t)"]", 1);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v9;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100330248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_10033027C(char a1@<W0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1)
  {
    unint64_t v4 = (unint64_t)operator new(1uLL);
    *(unsigned char *)unint64_t v4 = 1;
    uint64_t v5 = (unsigned char *)(v4 + 1);
    a2[1] = v4 + 1;
    a2[2] = v4 + 1;
    *a2 = v4;
  }
  if ((a1 & 2) == 0)
  {
    uint64_t v6 = v5;
    if ((a1 & 4) == 0) {
      return;
    }
    goto LABEL_23;
  }
  unint64_t v7 = (unint64_t)&v5[-v4];
  uint64_t v8 = (uint64_t)&v5[-v4 + 1];
  if (v8 < 0) {
    sub_1000267C4();
  }
  if (2 * v7 > v8) {
    uint64_t v8 = 2 * v7;
  }
  if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v9 = v8;
  }
  if (v9) {
    unint64_t v10 = (unint64_t)operator new(v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = (char *)(v10 + v9);
  *(unsigned char *)(v10 + v7) = 2;
  uint64_t v6 = (unsigned char *)(v10 + v7 + 1);
  if (v5 == (unsigned char *)v4)
  {
    v10 += v7;
  }
  else
  {
    unsigned __int8 v12 = &v5[~v4];
    do
    {
      char v13 = *--v5;
      (v12--)[v10] = v13;
    }
    while (v5 != (unsigned char *)v4);
  }
  *a2 = v10;
  a2[1] = (unint64_t)v6;
  a2[2] = (unint64_t)v11;
  if (v4) {
    operator delete((void *)v4);
  }
  a2[1] = (unint64_t)v6;
  if ((a1 & 4) != 0)
  {
LABEL_23:
    unint64_t v14 = a2[2];
    if ((unint64_t)v6 >= v14)
    {
      unint64_t v16 = *a2;
      std::locale v17 = &v6[-*a2];
      unint64_t v18 = (unint64_t)(v17 + 1);
      if ((uint64_t)(v17 + 1) < 0) {
        sub_1000267C4();
      }
      unint64_t v19 = v14 - v16;
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v20 = v18;
      }
      if (v20) {
        unint64_t v21 = (unint64_t)operator new(v20);
      }
      else {
        unint64_t v21 = 0;
      }
      char v22 = (char *)(v21 + v20);
      v17[v21] = 4;
      uint64_t v15 = (uint64_t)&v17[v21 + 1];
      if (v6 == (unsigned char *)v16)
      {
        v21 += (unint64_t)v17;
      }
      else
      {
        std::locale v23 = &v6[~v16];
        do
        {
          char v24 = *--v6;
          (v23--)[v21] = v24;
        }
        while (v6 != (unsigned char *)v16);
      }
      *a2 = v21;
      a2[1] = v15;
      a2[2] = (unint64_t)v22;
      if (v16) {
        operator delete((void *)v16);
      }
    }
    else
    {
      unsigned char *v6 = 4;
      uint64_t v15 = (uint64_t)(v6 + 1);
    }
    a2[1] = v15;
  }
}

void sub_10033045C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100330480(void *a1)
{
  sub_100054E28((uint64_t)v34);
  LOBYTE(v37.__locale_) = 48;
  uint64_t v2 = sub_1001771C8(v35, (char *)&v37);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 8;
  unint64_t v3 = sub_100056628(v35, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  unint64_t v4 = std::locale::use_facet(&v37, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v37);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v37.__locale_) = 9;
  uint64_t v5 = sub_100056628(v35, (uint64_t)&v37, 1);
  sub_100056628(v5, (uint64_t)"UWB config ids: [", 17);
  if (a1[1] != *a1)
  {
    unint64_t v6 = 0;
    do
    {
      *(void *)((char *)&v35[3] + *(void *)(v35[0] - 24)) = 4;
      std::ostream::operator<<();
      unint64_t v7 = (uint64_t)(a1[1] - *a1) >> 1;
      if (v7 - 1 > v6)
      {
        sub_100056628(v35, (uint64_t)", ", 2);
        unint64_t v7 = (uint64_t)(a1[1] - *a1) >> 1;
      }
      ++v6;
    }
    while (v7 > v6);
  }
  uint64_t v8 = sub_100056628(v35, (uint64_t)"], ", 3);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  size_t v9 = std::locale::use_facet(&v37, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v37);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v37.__locale_) = 9;
  unint64_t v10 = sub_100056628(v35, (uint64_t)&v37, 1);
  uint64_t v11 = sub_100056628(v10, (uint64_t)"Slot bitmask: ", 14);
  *(void *)((char *)v11 + *(void *)(*v11 - 24) + 24) = 2;
  unsigned __int8 v12 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  char v13 = std::locale::use_facet(&v37, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v37);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v37.__locale_) = 9;
  unint64_t v14 = sub_100056628(v35, (uint64_t)&v37, 1);
  uint64_t v15 = sub_100056628(v14, (uint64_t)"Sync code index bitmask: ", 25);
  *(void *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 8;
  unint64_t v16 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  std::locale v17 = std::locale::use_facet(&v37, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v37);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v37.__locale_) = 9;
  unint64_t v18 = sub_100056628(v35, (uint64_t)&v37, 1);
  unint64_t v19 = sub_100056628(v18, (uint64_t)"RF channel bitmask: ", 20);
  *(void *)((char *)v19 + *(void *)(*v19 - 24) + 24) = 2;
  size_t v20 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  unint64_t v21 = std::locale::use_facet(&v37, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v37);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v37.__locale_) = 9;
  char v22 = sub_100056628(v35, (uint64_t)&v37, 1);
  std::locale v23 = sub_100056628(v22, (uint64_t)"Hop config bitmask: ", 20);
  *(void *)((char *)v23 + *(void *)(*v23 - 24) + 24) = 2;
  char v24 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
  uint64_t v25 = std::locale::use_facet(&v37, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v37);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v37.__locale_) = 9;
  char v26 = sub_100056628(v35, (uint64_t)&v37, 1);
  sub_100056628(v26, (uint64_t)"Pulse shape combos: [", 21);
  if (a1[6] != a1[5])
  {
    unint64_t v27 = 0;
    do
    {
      *(void *)((char *)&v35[3] + *(void *)(v35[0] - 24)) = 2;
      std::ostream::operator<<();
      uint64_t v28 = a1[5];
      uint64_t v29 = a1[6];
      if (~v28 + v29 > v27)
      {
        sub_100056628(v35, (uint64_t)", ", 2);
        uint64_t v28 = a1[5];
        uint64_t v29 = a1[6];
      }
      ++v27;
    }
    while (v29 - v28 > v27);
  }
  char v30 = sub_100056628(v35, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
  unint64_t v31 = std::locale::use_facet(&v37, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale(&v37);
  std::ostream::put();
  std::ostream::flush();
  sub_100056628(v35, (uint64_t)"}", 1);
  std::stringbuf::str();
  *(void *)((char *)v34
  v35[0] = v32;
  if (v36 < 0) {
    operator delete((void *)v35[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100330C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100330CD4(unsigned __int16 *a1)
{
  sub_100054E28((uint64_t)v125);
  std::ios_base::getloc((const std::ios_base *)((char *)&v127[-1] + *(void *)(v126 - 24)));
  uint64_t v2 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v3 = sub_100056628(&v126, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  unint64_t v4 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  uint64_t v5 = sub_100056628(&v126, (uint64_t)&v122, 1);
  unint64_t v6 = sub_100056628(v5, (uint64_t)"Status: ", 8);
  int v7 = sub_100334B0C(*a1);
  sub_100333FC8(v7, &v122);
  if ((v124 & 0x80u) == 0) {
    locale = &v122;
  }
  else {
    locale = v122.__locale_;
  }
  if ((v124 & 0x80u) == 0) {
    uint64_t v9 = v124;
  }
  else {
    uint64_t v9 = v123;
  }
  unint64_t v10 = sub_100056628(v6, (uint64_t)locale, v9);
  uint64_t v11 = sub_100056628(v10, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unsigned __int8 v12 = std::locale::use_facet(&v129, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v129);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v124 < 0) {
    operator delete(v122.__locale_);
  }
  LOBYTE(v122.__locale_) = 48;
  char v13 = sub_1001771C8(&v126, (char *)&v122);
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v122.__locale_) = 9;
  unint64_t v14 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v14, (uint64_t)"Session type: 0x", 16);
  uint64_t v15 = (void *)std::ostream::operator<<();
  unint64_t v16 = sub_100056628(v15, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  std::locale v17 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  *(_DWORD *)((char *)v127 + *(void *)(v126 - 24)) = *(_DWORD *)((unsigned char *)v127 + *(void *)(v126 - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v122.__locale_) = 9;
  unint64_t v18 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v18, (uint64_t)"UWB session id: ", 16);
  unint64_t v19 = (void *)std::ostream::operator<<();
  size_t v20 = sub_100056628(v19, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  unint64_t v21 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v22 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v22, (uint64_t)"Block start time (R1 ticks): ", 29);
  std::locale v23 = (void *)std::ostream::operator<<();
  char v24 = sub_100056628(v23, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
  uint64_t v25 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v26 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v26, (uint64_t)"Block index: ", 13);
  unint64_t v27 = (void *)std::ostream::operator<<();
  uint64_t v28 = sub_100056628(v27, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
  uint64_t v29 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v30 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v30, (uint64_t)"Round index: ", 13);
  unint64_t v31 = (void *)std::ostream::operator<<();
  uint64_t v32 = sub_100056628(v31, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
  uint64_t v33 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  size_t v34 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v34, (uint64_t)"Round STS index: ", 17);
  uint64_t v35 = (void *)std::ostream::operator<<();
  char v36 = sub_100056628(v35, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
  std::locale v37 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v38 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v38, (uint64_t)"Ranging event: ", 15);
  unint64_t v39 = (void *)std::ostream::operator<<();
  sub_100056628(v39, (uint64_t)" of ", 4);
  unint64_t v40 = (void *)std::ostream::operator<<();
  __int16 v41 = sub_100056628(v40, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
  char v42 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  if (*((unsigned char *)a1 + 80))
  {
    LOBYTE(v122.__locale_) = 9;
    int v43 = sub_100056628(&v126, (uint64_t)&v122, 1);
    unint64_t v44 = sub_100056628(v43, (uint64_t)"Range (m): ", 11);
    *(void *)((char *)v44 + *(void *)(*v44 - 24) + 16) = 5;
    if (!*((unsigned char *)a1 + 80)) {
      sub_10000AE44();
    }
    size_t v45 = (void *)std::ostream::operator<<();
    NSString v46 = sub_100056628(v45, (uint64_t)",", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
    uint64_t v47 = std::locale::use_facet(&v122, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
    std::locale::~locale(&v122);
    std::ostream::put();
    std::ostream::flush();
  }
  LOBYTE(v122.__locale_) = 9;
  char v48 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v48, (uint64_t)"Block size: ", 12);
  long long v49 = (void *)std::ostream::operator<<();
  uint64_t v50 = sub_100056628(v49, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
  unint64_t v51 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v52 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v52, (uint64_t)"Round size: ", 12);
  long long v53 = (void *)std::ostream::operator<<();
  char v54 = sub_100056628(v53, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
  std::locale v55 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  unint64_t v56 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v56, (uint64_t)"Slot size: ", 11);
  id v57 = (void *)std::ostream::operator<<();
  uint64_t v58 = sub_100056628(v57, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
  char v59 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  unint64_t v60 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v60, (uint64_t)"Num. RX skips: ", 15);
  uint64_t v61 = (void *)std::ostream::operator<<();
  unint64_t v62 = sub_100056628(v61, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
  v63 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  unint64_t v64 = sub_100056628(&v126, (uint64_t)&v122, 1);
  unint64_t v65 = sub_100056628(v64, (uint64_t)"RX skip reasons: ", 17);
  sub_10032FFDC((uint64_t *)a1 + 6);
  if ((v124 & 0x80u) == 0) {
    size_t v66 = &v122;
  }
  else {
    size_t v66 = v122.__locale_;
  }
  if ((v124 & 0x80u) == 0) {
    uint64_t v67 = v124;
  }
  else {
    uint64_t v67 = v123;
  }
  uint64_t v68 = sub_100056628(v65, (uint64_t)v66, v67);
  uint64_t v69 = sub_100056628(v68, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24)));
  char v70 = std::locale::use_facet(&v129, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale(&v129);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v124 < 0) {
    operator delete(v122.__locale_);
  }
  LOBYTE(v122.__locale_) = 9;
  unint64_t v71 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v71, (uint64_t)"Next hop flag: ", 15);
  v72 = (void *)std::ostream::operator<<();
  unint64_t v73 = sub_100056628(v72, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v73 + *(void *)(*v73 - 24)));
  v74 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  unint64_t v75 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v75, (uint64_t)"Next round index: ", 18);
  unint64_t v76 = (void *)std::ostream::operator<<();
  size_t v77 = sub_100056628(v76, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v77 + *(void *)(*v77 - 24)));
  unint64_t v78 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  v79 = sub_100056628(&v126, (uint64_t)&v122, 1);
  sub_100056628(v79, (uint64_t)"Num. successes: ", 16);
  v80 = (void *)std::ostream::operator<<();
  char v81 = sub_100056628(v80, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(void *)(*v81 - 24)));
  unint64_t v82 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  uint64_t v83 = sub_100056628(&v126, (uint64_t)&v122, 1);
  unint64_t v84 = sub_100056628(v83, (uint64_t)"Responder info: [", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(void *)(*v84 - 24)));
  v85 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v86 = *((void *)a1 + 11);
  for (uint64_t i = *((void *)a1 + 12); v86 != i; v86 += 16)
  {
    LOBYTE(v122.__locale_) = 9;
    size_t v88 = sub_100056628(&v126, (uint64_t)&v122, 1);
    LOBYTE(v122.__locale_) = 9;
    unint64_t v89 = sub_100056628(v88, (uint64_t)&v122, 1);
    uint64_t v90 = sub_100056628(v89, (uint64_t)"{", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v90 + *(void *)(*v90 - 24)));
    uint64_t v91 = std::locale::use_facet(&v122, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 10);
    std::locale::~locale(&v122);
    std::ostream::put();
    std::ostream::flush();
    LOBYTE(v122.__locale_) = 48;
    char v92 = sub_1001771C8(&v126, (char *)&v122);
    *(_DWORD *)((char *)v92 + *(void *)(*v92 - 24) + 8) = *(_DWORD *)((unsigned char *)v92 + *(void *)(*v92 - 24) + 8) & 0xFFFFFFB5 | 8;
    LOBYTE(v122.__locale_) = 9;
    v93 = sub_100056628(&v126, (uint64_t)&v122, 1);
    LOBYTE(v122.__locale_) = 9;
    v94 = sub_100056628(v93, (uint64_t)&v122, 1);
    LOBYTE(v122.__locale_) = 9;
    v95 = sub_100056628(v94, (uint64_t)&v122, 1);
    v96 = sub_100056628(v95, (uint64_t)"RX status: 0x", 13);
    *(void *)((char *)v96 + *(void *)(*v96 - 24) + 24) = 1;
    v97 = (void *)std::ostream::operator<<();
    v98 = sub_100056628(v97, (uint64_t)",", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v98 + *(void *)(*v98 - 24)));
    v99 = std::locale::use_facet(&v122, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v99->__vftable[2].~facet_0)(v99, 10);
    std::locale::~locale(&v122);
    std::ostream::put();
    std::ostream::flush();
    *(_DWORD *)((char *)v127 + *(void *)(v126 - 24)) = *(_DWORD *)((unsigned char *)v127 + *(void *)(v126 - 24)) & 0xFFFFFFB5 | 2;
    LOBYTE(v122.__locale_) = 9;
    v100 = sub_100056628(&v126, (uint64_t)&v122, 1);
    LOBYTE(v122.__locale_) = 9;
    v101 = sub_100056628(v100, (uint64_t)&v122, 1);
    LOBYTE(v122.__locale_) = 9;
    v102 = sub_100056628(v101, (uint64_t)&v122, 1);
    sub_100056628(v102, (uint64_t)"CFO (ppm): ", 11);
    v103 = (void *)std::ostream::operator<<();
    v104 = sub_100056628(v103, (uint64_t)",", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(void *)(*v104 - 24)));
    v105 = std::locale::use_facet(&v122, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 10);
    std::locale::~locale(&v122);
    std::ostream::put();
    std::ostream::flush();
    LOBYTE(v122.__locale_) = 9;
    v106 = sub_100056628(&v126, (uint64_t)&v122, 1);
    LOBYTE(v122.__locale_) = 9;
    v107 = sub_100056628(v106, (uint64_t)&v122, 1);
    LOBYTE(v122.__locale_) = 9;
    v108 = sub_100056628(v107, (uint64_t)&v122, 1);
    v109 = sub_100056628(v108, (uint64_t)"soiRssi (dBm): ", 15);
    *(void *)((char *)v109 + *(void *)(*v109 - 24) + 16) = 5;
    v110 = (void *)std::ostream::operator<<();
    v111 = sub_100056628(v110, (uint64_t)",", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v111 + *(void *)(*v111 - 24)));
    v112 = std::locale::use_facet(&v122, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
    std::locale::~locale(&v122);
    std::ostream::put();
    std::ostream::flush();
    LOBYTE(v122.__locale_) = 9;
    v113 = sub_100056628(&v126, (uint64_t)&v122, 1);
    LOBYTE(v122.__locale_) = 9;
    v114 = sub_100056628(v113, (uint64_t)&v122, 1);
    v115 = sub_100056628(v114, (uint64_t)"}, ", 3);
    std::ios_base::getloc((const std::ios_base *)((char *)v115 + *(void *)(*v115 - 24)));
    v116 = std::locale::use_facet(&v122, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10);
    std::locale::~locale(&v122);
    std::ostream::put();
    std::ostream::flush();
  }
  LOBYTE(v122.__locale_) = 9;
  v117 = sub_100056628(&v126, (uint64_t)&v122, 1);
  v118 = sub_100056628(v117, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(void *)(*v118 - 24)));
  v119 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  sub_100056628(&v126, (uint64_t)"}", 1);
  std::stringbuf::str();
  *(void *)((char *)v125
  uint64_t v126 = v120;
  if (v128 < 0) {
    operator delete((void *)v127[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10033230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t sub_1003323DC(unsigned __int16 *a1)
{
  sub_100054E28((uint64_t)v16);
  sub_100056628(&v17, (uint64_t)"BI: ", 4);
  std::ostream::operator<<();
  uint64_t v2 = sub_100056628(&v17, (uint64_t)", ", 2);
  int v3 = sub_100334B0C(*a1);
  sub_100333FC8(v3, __p);
  if ((v15 & 0x80u) == 0) {
    unint64_t v4 = __p;
  }
  else {
    unint64_t v4 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_100056628(v2, (uint64_t)v4, v5);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *((void *)a1 + 11);
  for (uint64_t i = *((void *)a1 + 12); v6 != i; v6 += 16)
  {
    LOBYTE(__p[0]) = 48;
    uint64_t v8 = sub_1001771C8(&v17, (char *)__p);
    *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    uint64_t v9 = sub_100056628(&v17, (uint64_t)", <RX: 0x", 9);
    *(void *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 1;
    std::ostream::operator<<();
    *(_DWORD *)((char *)v18 + *(void *)(v17 - 24)) = *(_DWORD *)((unsigned char *)v18 + *(void *)(v17 - 24)) & 0xFFFFFFB5 | 2;
    unint64_t v10 = sub_100056628(&v17, (uint64_t)", SR: ", 6);
    *(void *)((char *)v10 + *(void *)(*v10 - 24) + 16) = 5;
    uint64_t v11 = (void *)std::ostream::operator<<();
    sub_100056628(v11, (uint64_t)">", 1);
  }
  std::stringbuf::str();
  *(void *)((char *)v16
  uint64_t v17 = v12;
  if (v19 < 0) {
    operator delete((void *)v18[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1003326E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100055100((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100332728(unsigned __int16 *a1)
{
  sub_100054E28((uint64_t)v125);
  std::ios_base::getloc((const std::ios_base *)((char *)v126 + *(void *)(v126[0] - 24)));
  uint64_t v2 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  int v3 = sub_100056628(v126, (uint64_t)"{", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  unint64_t v4 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  uint64_t v5 = sub_100056628(v126, (uint64_t)&v122, 1);
  uint64_t v6 = sub_100056628(v5, (uint64_t)"Status: ", 8);
  int v7 = sub_100334B0C(*a1);
  sub_100333FC8(v7, &v122);
  if ((v124 & 0x80u) == 0) {
    locale = &v122;
  }
  else {
    locale = v122.__locale_;
  }
  if ((v124 & 0x80u) == 0) {
    uint64_t v9 = v124;
  }
  else {
    uint64_t v9 = v123;
  }
  unint64_t v10 = sub_100056628(v6, (uint64_t)locale, v9);
  uint64_t v11 = sub_100056628(v10, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v128, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v128);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v124 < 0) {
    operator delete(v122.__locale_);
  }
  LOBYTE(v122.__locale_) = 48;
  char v13 = sub_1001771C8(v126, (char *)&v122);
  *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v122.__locale_) = 9;
  unint64_t v14 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v14, (uint64_t)"Session type: 0x", 16);
  unsigned __int8 v15 = (void *)std::ostream::operator<<();
  unint64_t v16 = sub_100056628(v15, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  uint64_t v17 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  *(_DWORD *)((char *)&v126[1] + *(void *)(v126[0] - 24)) = *(_DWORD *)((unsigned char *)&v126[1]
                                                                          + *(void *)(v126[0] - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v122.__locale_) = 9;
  unint64_t v18 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v18, (uint64_t)"UWB session id: ", 16);
  char v19 = (void *)std::ostream::operator<<();
  size_t v20 = sub_100056628(v19, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  unint64_t v21 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v22 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v22, (uint64_t)"Responder index: ", 17);
  std::locale v23 = (void *)std::ostream::operator<<();
  char v24 = sub_100056628(v23, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
  uint64_t v25 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v26 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v26, (uint64_t)"Block start time (R1 ticks): ", 29);
  unint64_t v27 = (void *)std::ostream::operator<<();
  uint64_t v28 = sub_100056628(v27, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
  uint64_t v29 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v30 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v30, (uint64_t)"Block index: ", 13);
  unint64_t v31 = (void *)std::ostream::operator<<();
  uint64_t v32 = sub_100056628(v31, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
  uint64_t v33 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  size_t v34 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v34, (uint64_t)"Round index: ", 13);
  uint64_t v35 = (void *)std::ostream::operator<<();
  char v36 = sub_100056628(v35, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
  std::locale v37 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v38 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v38, (uint64_t)"Round STS index: ", 17);
  unint64_t v39 = (void *)std::ostream::operator<<();
  unint64_t v40 = sub_100056628(v39, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(*v40 - 24)));
  __int16 v41 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v42 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v42, (uint64_t)"Ranging event: ", 15);
  int v43 = (void *)std::ostream::operator<<();
  sub_100056628(v43, (uint64_t)" of ", 4);
  unint64_t v44 = (void *)std::ostream::operator<<();
  size_t v45 = sub_100056628(v44, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
  NSString v46 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  uint64_t v47 = sub_100056628(v126, (uint64_t)&v122, 1);
  char v48 = sub_100056628(v47, (uint64_t)"Range (m): ", 11);
  *(void *)((char *)v48 + *(void *)(*v48 - 24) + 16) = 5;
  long long v49 = (void *)std::ostream::operator<<();
  uint64_t v50 = sub_100056628(v49, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
  unint64_t v51 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  char v52 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v52, (uint64_t)"CFO (ppt): ", 11);
  long long v53 = (void *)std::ostream::operator<<();
  char v54 = sub_100056628(v53, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
  std::locale v55 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 48;
  unint64_t v56 = sub_1001771C8(v126, (char *)&v122);
  *(_DWORD *)((char *)v56 + *(void *)(*v56 - 24) + 8) = *(_DWORD *)((unsigned char *)v56 + *(void *)(*v56 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v122.__locale_) = 9;
  id v57 = sub_100056628(v126, (uint64_t)&v122, 1);
  uint64_t v58 = sub_100056628(v57, (uint64_t)"Pre-poll RX status: 0x", 22);
  *(void *)((char *)v58 + *(void *)(*v58 - 24) + 24) = 1;
  char v59 = (void *)std::ostream::operator<<();
  unint64_t v60 = sub_100056628(v59, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
  uint64_t v61 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  *(_DWORD *)((char *)&v126[1] + *(void *)(v126[0] - 24)) = *(_DWORD *)((unsigned char *)&v126[1]
                                                                          + *(void *)(v126[0] - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v122.__locale_) = 9;
  unint64_t v62 = sub_100056628(v126, (uint64_t)&v122, 1);
  v63 = sub_100056628(v62, (uint64_t)"Pre-poll soiRssi (dBm): ", 24);
  *(void *)((char *)v63 + *(void *)(*v63 - 24) + 16) = 5;
  unint64_t v64 = (void *)std::ostream::operator<<();
  unint64_t v65 = sub_100056628(v64, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(*v65 - 24)));
  size_t v66 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 48;
  uint64_t v67 = sub_1001771C8(v126, (char *)&v122);
  *(_DWORD *)((char *)v67 + *(void *)(*v67 - 24) + 8) = *(_DWORD *)((unsigned char *)v67 + *(void *)(*v67 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v122.__locale_) = 9;
  uint64_t v68 = sub_100056628(v126, (uint64_t)&v122, 1);
  uint64_t v69 = sub_100056628(v68, (uint64_t)"Poll RX status: 0x", 18);
  *(void *)((char *)v69 + *(void *)(*v69 - 24) + 24) = 1;
  char v70 = (void *)std::ostream::operator<<();
  unint64_t v71 = sub_100056628(v70, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(void *)(*v71 - 24)));
  v72 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  *(_DWORD *)((char *)&v126[1] + *(void *)(v126[0] - 24)) = *(_DWORD *)((unsigned char *)&v126[1]
                                                                          + *(void *)(v126[0] - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v122.__locale_) = 9;
  unint64_t v73 = sub_100056628(v126, (uint64_t)&v122, 1);
  v74 = sub_100056628(v73, (uint64_t)"Poll soiRssi (dBm): ", 20);
  *(void *)((char *)v74 + *(void *)(*v74 - 24) + 16) = 5;
  unint64_t v75 = (void *)std::ostream::operator<<();
  unint64_t v76 = sub_100056628(v75, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(void *)(*v76 - 24)));
  size_t v77 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 48;
  unint64_t v78 = sub_1001771C8(v126, (char *)&v122);
  *(_DWORD *)((char *)v78 + *(void *)(*v78 - 24) + 8) = *(_DWORD *)((unsigned char *)v78 + *(void *)(*v78 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v122.__locale_) = 9;
  v79 = sub_100056628(v126, (uint64_t)&v122, 1);
  v80 = sub_100056628(v79, (uint64_t)"Final RX status: 0x", 19);
  *(void *)((char *)v80 + *(void *)(*v80 - 24) + 24) = 1;
  char v81 = (void *)std::ostream::operator<<();
  unint64_t v82 = sub_100056628(v81, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24)));
  uint64_t v83 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  *(_DWORD *)((char *)&v126[1] + *(void *)(v126[0] - 24)) = *(_DWORD *)((unsigned char *)&v126[1]
                                                                          + *(void *)(v126[0] - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v122.__locale_) = 9;
  unint64_t v84 = sub_100056628(v126, (uint64_t)&v122, 1);
  v85 = sub_100056628(v84, (uint64_t)"Final soiRssi (dBm): ", 21);
  *(void *)((char *)v85 + *(void *)(*v85 - 24) + 16) = 5;
  uint64_t v86 = (void *)std::ostream::operator<<();
  unint64_t v87 = sub_100056628(v86, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(*v87 - 24)));
  size_t v88 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 48;
  unint64_t v89 = sub_1001771C8(v126, (char *)&v122);
  *(_DWORD *)((char *)v89 + *(void *)(*v89 - 24) + 8) = *(_DWORD *)((unsigned char *)v89 + *(void *)(*v89 - 24) + 8) & 0xFFFFFFB5 | 8;
  LOBYTE(v122.__locale_) = 9;
  uint64_t v90 = sub_100056628(v126, (uint64_t)&v122, 1);
  uint64_t v91 = sub_100056628(v90, (uint64_t)"Final-data RX status: 0x", 24);
  *(void *)((char *)v91 + *(void *)(*v91 - 24) + 24) = 1;
  char v92 = (void *)std::ostream::operator<<();
  v93 = sub_100056628(v92, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24)));
  v94 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  *(_DWORD *)((char *)&v126[1] + *(void *)(v126[0] - 24)) = *(_DWORD *)((unsigned char *)&v126[1]
                                                                          + *(void *)(v126[0] - 24)) & 0xFFFFFFB5 | 2;
  LOBYTE(v122.__locale_) = 9;
  v95 = sub_100056628(v126, (uint64_t)&v122, 1);
  v96 = sub_100056628(v95, (uint64_t)"Final-data soiRssi (dBm): ", 26);
  *(void *)((char *)v96 + *(void *)(*v96 - 24) + 16) = 5;
  v97 = (void *)std::ostream::operator<<();
  v98 = sub_100056628(v97, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v98 + *(void *)(*v98 - 24)));
  v99 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v99->__vftable[2].~facet_0)(v99, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  v100 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v100, (uint64_t)"Block size: ", 12);
  v101 = (void *)std::ostream::operator<<();
  v102 = sub_100056628(v101, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
  v103 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  v104 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v104, (uint64_t)"Round size: ", 12);
  v105 = (void *)std::ostream::operator<<();
  v106 = sub_100056628(v105, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v106 + *(void *)(*v106 - 24)));
  v107 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v107->__vftable[2].~facet_0)(v107, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  v108 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v108, (uint64_t)"Slot size: ", 11);
  v109 = (void *)std::ostream::operator<<();
  v110 = sub_100056628(v109, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(void *)(*v110 - 24)));
  v111 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  v112 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v112, (uint64_t)"Next hop flag: ", 15);
  v113 = (void *)std::ostream::operator<<();
  v114 = sub_100056628(v113, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v114 + *(void *)(*v114 - 24)));
  v115 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v115->__vftable[2].~facet_0)(v115, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  LOBYTE(v122.__locale_) = 9;
  v116 = sub_100056628(v126, (uint64_t)&v122, 1);
  sub_100056628(v116, (uint64_t)"Next round index: ", 18);
  v117 = (void *)std::ostream::operator<<();
  v118 = sub_100056628(v117, (uint64_t)",", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(void *)(*v118 - 24)));
  v119 = std::locale::use_facet(&v122, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  sub_100056628(v126, (uint64_t)"}", 1);
  std::stringbuf::str();
  *(void *)((char *)v125
  v126[0] = v120;
  if (v127 < 0) {
    operator delete((void *)v126[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100333EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void *sub_100333FC8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1 <= -1034)
  {
    switch(a1)
    {
      case -4026:
        uint64_t v2 = "SPLIT_DCK_MESSAGES_TOO_MANY_BYTES";
        break;
      case -4025:
        uint64_t v2 = "SPLIT_DCK_MESSAGES_NOT_ENOUGH_BYTES";
        break;
      case -4024:
        uint64_t v2 = "INVALID_DCK_SUB_EVENT_CODE";
        break;
      case -4023:
        uint64_t v2 = "INVALID_DCK_SUB_EVENT_CATEGORY";
        break;
      case -4022:
        uint64_t v2 = "DCK_NO_SUB_EVENT_CODE";
        break;
      case -4021:
        uint64_t v2 = "DCK_NO_SUB_EVENT_CATEGORY";
        break;
      case -4020:
        uint64_t v2 = "DCK_PULSE_SHAPE_COMBO_LENGTH_EXCEEDS_MSG_SIZE";
        break;
      case -4019:
        uint64_t v2 = "DCK_PULSE_SHAPE_COMBO_LENGTH_EXCEEDS_UINT8_MAX";
        break;
      case -4018:
        uint64_t v2 = "DCK_PULSE_SHAPE_COMBO_LENGTH_ZERO";
        break;
      case -4017:
        uint64_t v2 = "DCK_NO_PULSE_SHAPE_COMBO_LENGTH";
        break;
      case -4016:
        uint64_t v2 = "DCK_UWB_CONFIG_ID_LENGTH_EXCEEDS_MSG_SIZE";
        break;
      case -4015:
        uint64_t v2 = "DCK_UWB_CONFIG_ID_LENGTH_EXCEEDS_UINT8_MAX";
        break;
      case -4014:
        uint64_t v2 = "DCK_UWB_CONFIG_ID_LENGTH_ODD";
        break;
      case -4013:
        uint64_t v2 = "DCK_UWB_CONFIG_ID_LENGTH_ZERO";
        break;
      case -4012:
        uint64_t v2 = "DCK_NO_UWB_CONFIG_ID_LENGTH";
        break;
      case -4011:
        uint64_t v2 = "DCK_PROTOCOL_VERSION_LENGTH_EXCEEDS_MSG_SIZE";
        break;
      case -4010:
        uint64_t v2 = "DCK_PROTOCOL_VERSION_LENGTH_EXCEEDS_UINT8_MAX";
        break;
      case -4009:
        uint64_t v2 = "DCK_PROTOCOL_VERSION_LENGTH_ODD";
        break;
      case -4008:
        uint64_t v2 = "DCK_PROTOCOL_VERSION_LENGTH_ZERO";
        break;
      case -4007:
        uint64_t v2 = "DCK_NO_PROTOCOL_VERSION_LENGTH";
        break;
      case -4006:
        uint64_t v2 = "DCK_MSG_UNEXPECTED_DATA_LENGTH";
        break;
      case -4005:
        uint64_t v2 = "DCK_HEADER_ID_MISMATCHES";
        break;
      case -4004:
        uint64_t v2 = "INVALID_DCK_MESSAGE_ID";
        break;
      case -4003:
        uint64_t v2 = "INVALID_DCK_PROTOCOL_TYPE";
        break;
      case -4002:
        uint64_t v2 = "DCK_MISMATCHED_DATA_LENGTH";
        break;
      case -4001:
        uint64_t v2 = "DCK_MESSAGE_EXCEEDS_MAX_SIZE";
        break;
      case -4000:
        uint64_t v2 = "DCK_HEADER_TOO_SHORT";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t v2 = "SUCCESS";
    switch(a1)
    {
      case 0:
        return sub_100004950(a2, v2);
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 9:
      case 10:
      case 11:
      case 15:
      case 16:
      case 17:
      case 24:
      case 25:
      case 26:
      case 27:
      case 30:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 58:
      case 59:
      case 60:
      case 61:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
LABEL_115:
        uint64_t v2 = "UNKNOWN";
        break;
      case 6:
        uint64_t v2 = "HSI_ERR_BUSY";
        break;
      case 8:
        uint64_t v2 = "HSI_ERR_SES_MAX_LIMIT_REACHED";
        break;
      case 12:
        uint64_t v2 = "HSI_ERR_SES_TIMEOUT";
        break;
      case 13:
        uint64_t v2 = "HSI_ERR_SES_SYNC_TIMEOUT";
        break;
      case 14:
        uint64_t v2 = "HSI_ERR_MISSED_RANGING_CYCLE";
        break;
      case 18:
        uint64_t v2 = "HSI_ERR_SES_ALREADY_ACTIVE";
        break;
      case 19:
        uint64_t v2 = "HSI_ERR_SES_ALREADY_DISABLED";
        break;
      case 20:
        uint64_t v2 = "HSI_ERR_SES_SCHEDULING_CONFLICT";
        break;
      case 21:
        uint64_t v2 = "HSI_ERR_SES_COEX_CONFLICT";
        break;
      case 22:
        uint64_t v2 = "HSI_ERR_SES_WRONG_SYNC";
        break;
      case 23:
        uint64_t v2 = "HSI_ERR_START_TIME_ELAPSED";
        break;
      case 28:
        uint64_t v2 = "HSI_ERR_INVALID_SES_ROLE";
        break;
      case 29:
        uint64_t v2 = "HSI_ERR_INVALID_ANTENNA_CFG";
        break;
      case 31:
        uint64_t v2 = "HSI_ERR_INVALID_PREAMBLE";
        break;
      case 32:
        uint64_t v2 = "HSI_ERR_INVALID_FEM_CFG";
        break;
      case 39:
        uint64_t v2 = "HSI_ERR_INVALID_CHANNEL";
        break;
      case 48:
        uint64_t v2 = "HSI_ERR_INVALID_ALISHA_UWB_CFG_ID";
        break;
      case 49:
        uint64_t v2 = "HSI_ERR_INVALID_ALISHA_RAN_MULTIPLIER";
        break;
      case 50:
        uint64_t v2 = "HSI_ERR_INVALID_ALISHA_NRESPONDERS";
        break;
      case 51:
        uint64_t v2 = "HSI_ERR_INVALID_SLOT_SIZE";
        break;
      case 52:
        uint64_t v2 = "HSI_ERR_INVALID_NSLOTS_PER_ROUND";
        break;
      case 53:
        uint64_t v2 = "HSI_ERR_INVALID_RBLOCK_CFG";
        break;
      case 54:
        uint64_t v2 = "HSI_ERR_ALISHA_UWB_SES_ID_NOT_FOUND";
        break;
      case 55:
        uint64_t v2 = "HSI_ERR_ALISHA_UWB_SES_ID_ALREADY_IN_USE";
        break;
      case 56:
        uint64_t v2 = "HSI_ERR_ALISHA_KEY_STORE_FULL";
        break;
      case 57:
        uint64_t v2 = "HSI_ERR_INVALID_ALISHA_RESPONDER_IDX";
        break;
      case 62:
        uint64_t v2 = "HSI_ERR_SLOT_TIME_ELAPSED";
        break;
      case 63:
        uint64_t v2 = "HSI_ERR_INVALID_PULSE_SHAPE_COMBO";
        break;
      case 64:
        uint64_t v2 = "HSI_ERR_INVALID_ALISHA_HOP_MODE";
        break;
      case 65:
        uint64_t v2 = "HSI_ERR_INVALID_ALISHA_HOP_SEQUENCE";
        break;
      case 71:
        uint64_t v2 = "HSI_ERR_ALISHA_URSK_RETRIEVAL_FAILED";
        break;
      case 72:
        uint64_t v2 = "HSI_ERR_ALISHA_GET_KEY_ALREADY_PENDING";
        break;
      case 73:
        uint64_t v2 = "HSI_ERR_STS_INDEX_EXHAUSTED";
        break;
      case 74:
        uint64_t v2 = "HSI_ERR_BLOCK_IDX_EXHAUSTED";
        break;
      case 75:
        uint64_t v2 = "HSI_ERR_ALISHA_URSK_TTL_EXPIRED";
        break;
      case 76:
        uint64_t v2 = "HSI_ERR_INVALID_ALISHA_STS_INDEX_0";
        break;
      case 77:
        uint64_t v2 = "HSI_ERR_ALISHA_RESPONSE_TIMEOUT";
        break;
      case 78:
        uint64_t v2 = "HSI_ERR_ALISHA_TOTAL_TIMEOUT";
        break;
      case 79:
        uint64_t v2 = "HSI_ERR_UNAUTHENTICATED_CAL_BLOB";
        break;
      case 98:
        uint64_t v2 = "HSI_ERR_ALISHA_TIMER_CREATION_FAILED";
        break;
      case 99:
        uint64_t v2 = "HSI_ERR_ALISHA_TIMER_QUERY_FAILED";
        break;
      case 100:
        uint64_t v2 = "HSI_ERR_ALISHA_TIMER_RESP_INVALID";
        break;
      case 101:
        uint64_t v2 = "HSI_ERR_ALISHA_TIMER_DELETION_FAILED";
        break;
      case 112:
        uint64_t v2 = "HSI_ERR_INVALID_ACWG_ROUNDS_OFFSET";
        break;
      case 113:
        uint64_t v2 = "HSI_ERR_INVALID_ACWG_CONFIG";
        break;
      case 114:
        uint64_t v2 = "HSI_ERR_SC_GET_KEY_INVALID_KEY_TYPE";
        break;
      case 115:
        uint64_t v2 = "HSI_ERR_ACWG_FDATA2_RX_FAILED";
        break;
      default:
        switch(a1)
        {
          case -1033:
            uint64_t v2 = "PREWARM_SECURE_ELEMENT_CHANNEL_UNEXPECTED_RSP";
            break;
          case -1032:
            uint64_t v2 = "PREWARM_SECURE_ELEMENT_CHANNEL_EMPTY_RSP";
            break;
          case -1031:
            uint64_t v2 = "PREWARM_SECURE_ELEMENT_CHANNEL_TIMED_OUT";
            break;
          case -1030:
            uint64_t v2 = "PREWARM_SECURE_ELEMENT_CHANNEL_CMD_FAILED";
            break;
          case -1029:
            uint64_t v2 = "GET_TEST_MODE_FAILED";
            break;
          case -1028:
            uint64_t v2 = "SET_TEST_MODE_FAILED";
            break;
          case -1027:
            uint64_t v2 = "CONFIG_MISSING_MANDATORY_ANTENNA_MASK_KEY";
            break;
          case -1026:
            uint64_t v2 = "SUBSYSTEM_TIME_CONVERSION_FAILED";
            break;
          case -1025:
            uint64_t v2 = "TIME_CONVERSION_NOT_READY";
            break;
          case -1024:
            uint64_t v2 = "GET_SESSION_STATS_AOP_COMMAND_FAILED";
            break;
          case -1023:
            uint64_t v2 = "RANGE_ENABLE_UNDEFINED_ERROR";
            break;
          case -1022:
            uint64_t v2 = "RANGE_ENABLE_TIME_CONVERSION_FAILED";
            break;
          case -1021:
            uint64_t v2 = "PASSTHROUGH_SESSION_NOT_SUPPORTED";
            break;
          case -1020:
            uint64_t v2 = "SET_URSK_TTL_NOT_SUPPORTED";
            break;
          case -1019:
            uint64_t v2 = "DELETE_KEYS_TIMED_OUT";
            break;
          case -1018:
            uint64_t v2 = "DELETE_KEYS_ROSE_COMMAND_FAILED";
            break;
          case -1017:
            uint64_t v2 = "SET_URSK_TTL_ROSE_COMMAND_FAILED";
            break;
          case -1016:
            uint64_t v2 = "CONFIG_CONTAINS_INVALID_SYNC_CODE_INDEX";
            break;
          case -1015:
            uint64_t v2 = "CONFIG_MISSING_MANDATORY_ANCHOR_KEY";
            break;
          case -1014:
            uint64_t v2 = "CONFIG_MISSING_MANDATORY_PASSTHROUGH_KEY";
            break;
          case -1013:
            uint64_t v2 = "BUILD_ALISHA_SESSION_FAILED";
            break;
          case -1012:
            uint64_t v2 = "SET_DEBUG_KEY_NOT_SUPPORTED";
            break;
          case -1011:
            uint64_t v2 = "ALISHA_KEY_ROSE_COMMAND_ALREADY_IN_FLIGHT";
            break;
          case -1010:
            uint64_t v2 = "SET_DEBUG_KEY_TIMED_OUT";
            break;
          case -1009:
            uint64_t v2 = "SET_DEBUG_KEY_ROSE_COMMAND_FAILED";
            break;
          case -1008:
            uint64_t v2 = "GET_KEY_RETURNED_WRONG_UWB_SESSION_ID";
            break;
          case -1007:
            uint64_t v2 = "GET_KEY_ROSE_COMMAND_FAILED";
            break;
          case -1006:
            uint64_t v2 = "GET_CAPABILITIES_TIMED_OUT";
            break;
          case -1005:
            uint64_t v2 = "GET_CAPABILITIES_ROSE_COMMAND_FAILED";
            break;
          case -1004:
            uint64_t v2 = "INTERNAL_ERROR_NO_RESULT_PAYLOAD";
            break;
          case -1003:
            uint64_t v2 = "UNKNOWN_HSI_STATUS_CODE";
            break;
          case -1002:
            uint64_t v2 = "GET_KEY_TIMED_OUT";
            break;
          case -1001:
            uint64_t v2 = "RANGE_ENABLE_TIMED_OUT";
            break;
          case -1000:
            uint64_t v2 = "FAILURE";
            break;
          default:
            goto LABEL_115;
        }
        break;
    }
  }
  return sub_100004950(a2, v2);
}

uint64_t sub_100334B0C(unsigned int a1)
{
  if (a1 > 0x73) {
    return 4294966293;
  }
  else {
    return dword_1004C104C[(__int16)a1];
  }
}

void *sub_100334B30@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100861718[a1]);
}

uint64_t sub_100334B48(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a4[1];
  *(void *)(a1 + 32) = *a4;
  *(void *)(a1 + 40) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = a5[1];
  *(void *)(a1 + 48) = *a5;
  *(void *)(a1 + 56) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100337268(a1 + 64, a6);
  sub_100337300(a1 + 96, a7);
  sub_100337398(a1 + 128, a8);
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 164) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 172) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 3;
  if (!*(void *)a1)
  {
    unint64_t v16 = "_parameterNegotiator";
    int v17 = 56;
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 16))
  {
    unint64_t v16 = "_rangingLimitManager";
    int v17 = 57;
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 32))
  {
    unint64_t v16 = "_uwbSystem";
    int v17 = 58;
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 88))
  {
    unint64_t v16 = "_rangeEnableCallback";
    int v17 = 59;
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 120))
  {
    unint64_t v16 = "_rangeDisableCallback";
    int v17 = 60;
LABEL_20:
    __assert_rtn("StateMachine", "AlishaStateMachine.cpp", v17, v16);
  }
  return a1;
}

void sub_100334CBC(_Unwind_Exception *a1)
{
  sub_1003374B4(v3);
  sub_100337430(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[7];
  if (v5) {
    sub_10001A970(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[5];
  if (v6) {
    sub_10001A970(v6);
  }
  int v7 = (std::__shared_weak_count *)v1[3];
  if (v7) {
    sub_10001A970(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v1[1];
  if (v8) {
    sub_10001A970(v8);
  }
  _Unwind_Resume(a1);
}

void *sub_100334D2C(void *a1)
{
  sub_100334DC0((uint64_t)a1);
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v2) {
    sub_10001A970(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[3];
  a1[2] = 0;
  a1[3] = 0;
  if (v3) {
    sub_10001A970(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[5];
  a1[4] = 0;
  a1[5] = 0;
  if (v4) {
    sub_10001A970(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[7];
  a1[6] = 0;
  a1[7] = 0;
  if (v5) {
    sub_10001A970(v5);
  }
  sub_100337538(a1 + 8);
  sub_1003375C0(a1 + 12);

  return sub_100337648(a1 + 16);
}

uint64_t sub_100334DC0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 160);
  if ((v2 - 1) < 2) {
    goto LABEL_4;
  }
  if (!*(unsigned char *)(a1 + 160))
  {
    int v3 = 0;
    goto LABEL_10;
  }
  if (v2 == 5) {
LABEL_4:
  }
    int v3 = 0;
  else {
    int v3 = 1;
  }
  if (*(void *)(a1 + 152)) {
    sub_1003370B8(a1 + 128, v2, 0);
  }
  *(unsigned char *)(a1 + 160) = 0;
LABEL_10:
  sub_10032A354(*(void *)a1);
  if (*(unsigned char *)(a1 + 168)) {
    *(unsigned char *)(a1 + 168) = 0;
  }
  if (*(unsigned char *)(a1 + 184)) {
    *(unsigned char *)(a1 + 184) = 0;
  }
  *(_DWORD *)(a1 + 188) = 3;
  if (!v3) {
    return 0;
  }
  uint64_t v4 = sub_100335B38(a1, 3);
  uint64_t v5 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100333FC8(v4, __p);
    if (v9 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#alisha-sm,_resetToInitialState called while ranging. rangeDisable returns status code %s", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  return v4;
}

uint64_t sub_100334F30(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100334B30(*(unsigned char *)(a1 + 160), &__p);
    uint64_t v5 = v27 >= 0 ? &__p : (long long *)__p;
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK cap RQ in state %s", (uint8_t *)&buf, 0xCu);
    if (v27 < 0) {
      operator delete((void *)__p);
    }
  }
  unsigned int v6 = sub_100334DC0(a1);
  if (v6)
  {
    sub_100334DC0(a1);
    LODWORD(__p) = v6;
    *(void *)((char *)&__p + 4) = 0;
    return v6;
  }
  else
  {
    long long buf = 0uLL;
    uint64_t v35 = 0;
    uint64_t v8 = *a2;
    char v9 = a2[1];
    if (*a2 != v9)
    {
      do
      {
        uint64_t v10 = sub_10032B8F4(*v8);
        __int16 v11 = v10;
        if ((v10 & 0xFF0000) != 0)
        {
          uint64_t v12 = (char *)*((void *)&buf + 1);
          if (*((void *)&buf + 1) >= (unint64_t)v35)
          {
            uint64_t v14 = (char *)buf;
            uint64_t v15 = *((void *)&buf + 1) - buf;
            if ((uint64_t)(*((void *)&buf + 1) - buf) <= -3) {
              sub_1000267C4();
            }
            uint64_t v16 = v15 >> 1;
            if ((unint64_t)&v35[-buf] <= (v15 >> 1) + 1) {
              uint64_t v17 = v16 + 1;
            }
            else {
              uint64_t v17 = (uint64_t)&v35[-buf];
            }
            if ((unint64_t)&v35[-buf] >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v18 = v17;
            }
            if (v18)
            {
              char v19 = (char *)sub_10014A47C((uint64_t)&v35, v18);
              uint64_t v12 = (char *)*((void *)&buf + 1);
              uint64_t v14 = (char *)buf;
            }
            else
            {
              char v19 = 0;
            }
            size_t v20 = &v19[2 * v16];
            *(_WORD *)size_t v20 = v11;
            uint64_t v13 = v20 + 2;
            while (v12 != v14)
            {
              __int16 v21 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *((_WORD *)v20 - 1) = v21;
              v20 -= 2;
            }
            *(void *)&long long buf = v20;
            *((void *)&buf + 1) = v13;
            uint64_t v35 = &v19[2 * v18];
            if (v14) {
              operator delete(v14);
            }
          }
          else
          {
            **((_WORD **)&buf + 1) = v10;
            uint64_t v13 = v12 + 2;
          }
          *((void *)&buf + 1) = v13;
        }
        ++v8;
      }
      while (v8 != v9);
    }
    sub_100337130(&__p, (uint64_t)&buf, (uint64_t)(a2 + 3), (uint64_t)(a2 + 6));
    unint64_t v22 = sub_10032A95C(*(void *)a1, (unsigned __int16 **)&__p);
    if ((*(void *)&v23 & 0xFF0000) != 0) {
      int v24 = 0;
    }
    else {
      int v24 = -1004;
    }
    if (v22) {
      unsigned int v25 = v22;
    }
    else {
      unsigned int v25 = v24;
    }
    if (v25)
    {
      sub_100334DC0(a1);
      v33[0] = v25;
      *(void *)&v33[1] = 0;
      v32[0] = v25;
    }
    else
    {
      if ((*(void *)&v23 & 0xFF0000) == 0) {
        sub_10000AE44();
      }
      LODWORD(v32[0]) = 0;
      *(void *)((char *)v32 + 4) = HIDWORD(v22) & 0xFFFF0000 | WORD2(v22) | ((unint64_t)v23 << 32) | 0x1000000000000;
    }
    if (v30)
    {
      unint64_t v31 = v30;
      operator delete(v30);
    }
    if (v28)
    {
      uint64_t v29 = v28;
      operator delete(v28);
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if ((void)buf)
    {
      *((void *)&buf + 1) = buf;
      operator delete((void *)buf);
    }
    return v32[0];
  }
}

void sub_100335208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10033524C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100334B30(*(unsigned char *)(a1 + 160), __p);
    char v9 = v35 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136315138;
    std::locale v37 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK session RQ in state %s", buf, 0xCu);
    if (v35 < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (*(unsigned char *)(a1 + 160)) {
    sub_100334DC0(a1);
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    (*(void (**)(uint64_t, void))(*(void *)v10 + 16))(v10, 0);
  }
  uint64_t v11 = sub_10032B8F4(*a2);
  unsigned __int16 v12 = v11;
  if ((v11 & 0xFF0000) == 0)
  {
    sub_100334DC0(a1);
    int v17 = -2002;
LABEL_27:
    *(_DWORD *)a4 = v17;
    *(unsigned char *)(a4 + 4) = 0;
    *(unsigned char *)(a4 + 16) = 0;
    return;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 104))(v13);
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 32) + 24))(__p);
  if (v34) {
    int v14 = 0;
  }
  else {
    int v14 = -1004;
  }
  if (*(_DWORD *)__p) {
    int v15 = *(_DWORD *)__p;
  }
  else {
    int v15 = v14;
  }
  uint64_t v16 = *(void *)(a1 + 48);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 112))(v16);
  }
  if (v15)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100430950(v15);
    }
    sub_100334DC0(a1);
    int v17 = -3012;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 164) = *((_DWORD *)a2 + 1);
  *(unsigned char *)(a1 + 168) = 1;
  if (!v34) {
    sub_10000AE44();
  }
  int v18 = *(unsigned __int8 *)(a1 + 184);
  *(void *)(a1 + 172) = *(void *)&__p[4];
  *(_DWORD *)(a1 + 180) = v33;
  if (!v18) {
    *(unsigned char *)(a1 + 184) = 1;
  }
  unsigned __int16 v19 = a2[1];
  unsigned __int16 v20 = a2[4];
  v30[0] = v12;
  v30[1] = v19;
  v30[2] = v20;
  char v31 = a3;
  sub_10032AB40(*(void *)a1, v30, (uint64_t)buf);
  int v21 = v40;
  if (v40) {
    int v22 = 0;
  }
  else {
    int v22 = -1004;
  }
  if (*(_DWORD *)buf) {
    int v23 = *(_DWORD *)buf;
  }
  else {
    int v23 = v22;
  }
  if (v23)
  {
    sub_100334DC0(a1);
    char v24 = 0;
    *(_DWORD *)a4 = v23;
    *(unsigned char *)(a4 + 4) = 0;
  }
  else
  {
    int v25 = *(unsigned __int8 *)(a1 + 160);
    if (v25 != 1)
    {
      if (*(void *)(a1 + 152))
      {
        sub_1003370B8(a1 + 128, v25, 1);
        int v21 = v40;
      }
      *(unsigned char *)(a1 + 160) = 1;
    }
    if (!v21) {
      sub_10000AE44();
    }
    char v24 = 1;
    int v26 = 1 << v38;
    __int16 v27 = (__int16)v37;
    int v28 = HIDWORD(v37);
    __int16 v29 = v39;
    *(_DWORD *)a4 = 0;
    *(_WORD *)(a4 + 4) = v27;
    *(_DWORD *)(a4 + 8) = v28;
    *(unsigned char *)(a4 + 12) = v26;
    *(_WORD *)(a4 + 13) = v29;
  }
  *(unsigned char *)(a4 + 16) = v24;
}

uint64_t sub_100335598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100334B30(*(unsigned char *)(a1 + 160), &__p);
    char v9 = (SBYTE7(v29) & 0x80u) == 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136315138;
    *(void *)char v36 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK session setup RQ in state %s", buf, 0xCu);
    if (SBYTE7(v29) < 0) {
      operator delete(__p);
    }
  }
  if (*(unsigned char *)(a1 + 160) != 1)
  {
    uint64_t result = sub_100334DC0(a1);
    int v15 = -3008;
LABEL_22:
    *(_DWORD *)a4 = v15;
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a1 + 168))
  {
    uint64_t result = sub_100334DC0(a1);
    int v15 = -3002;
    goto LABEL_22;
  }
  if (!*(unsigned char *)(a1 + 184))
  {
    uint64_t result = sub_100334DC0(a1);
    int v15 = -3003;
    goto LABEL_22;
  }
  char v10 = *(unsigned char *)(a2 + 8);
  int v11 = *(_DWORD *)(a2 + 4);
  v32[0] = *(_DWORD *)a2;
  v32[1] = v11;
  char v33 = v10;
  __int16 v34 = a3;
  sub_10032AEA0(*(void *)a1, (unsigned __int8 *)v32, (uint64_t)&__p);
  if (v31) {
    int v12 = 0;
  }
  else {
    int v12 = -1004;
  }
  if (__p) {
    int v13 = (int)__p;
  }
  else {
    int v13 = v12;
  }
  if (v13)
  {
    uint64_t result = sub_100334DC0(a1);
LABEL_18:
    *(_DWORD *)a4 = v13;
LABEL_23:
    *(unsigned char *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 32) = 0;
    return result;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)))
  {
    int v16 = *(unsigned __int8 *)(a1 + 160);
    if (v16 != 2)
    {
      if (*(void *)(a1 + 152)) {
        sub_1003370B8(a1 + 128, v16, 2);
      }
      *(unsigned char *)(a1 + 160) = 2;
    }
    uint64_t result = *(void *)(a1 + 48);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
    int v17 = 0;
  }
  else
  {
    if (!v31) {
      sub_10000AE44();
    }
    if (!*(unsigned char *)(a1 + 168)) {
      sub_10000AE44();
    }
    int v25 = *(_DWORD *)(a1 + 164);
    long long v26 = v29;
    sub_100335924(a1 + 64, (uint64_t)&v25, v30);
    if (v37) {
      int v21 = 0;
    }
    else {
      int v21 = -1004;
    }
    if (*(_DWORD *)buf) {
      int v13 = *(_DWORD *)buf;
    }
    else {
      int v13 = v21;
    }
    if (v13)
    {
      uint64_t result = sub_100334DC0(a1);
      goto LABEL_18;
    }
    if (!v37) {
      sub_10000AE44();
    }
    uint64_t v22 = *(void *)a1;
    char v24 = *(const char **)&v36[4];
    int v17 = sub_10032A794(v22, &v24);
    int v23 = *(unsigned __int8 *)(a1 + 160);
    if (v23 != 3)
    {
      if (*(void *)(a1 + 152)) {
        sub_1003370B8(a1 + 128, v23, 3);
      }
      *(unsigned char *)(a1 + 160) = 3;
    }
    (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
    uint64_t result = *(void *)(a1 + 48);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)result + 24))(result, BYTE9(v26), v26, BYTE6(v26));
    }
  }
  if (!v31) {
    sub_10000AE44();
  }
  if (!*(unsigned char *)(a1 + 184)) {
    sub_10000AE44();
  }
  char v18 = v28;
  int v19 = *(_DWORD *)(a1 + 176);
  int v20 = *(_DWORD *)(a1 + 180);
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)a4 = 0;
  *(_DWORD *)(a4 + 8) = v19;
  *(void *)(a4 + 16) = v17;
  *(_DWORD *)(a4 + 24) = v20;
  *(unsigned char *)(a4 + 28) = v18;
  *(unsigned char *)(a4 + 32) = 1;
  return result;
}

uint64_t sub_100335924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t sub_100335978(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100334B30(*(unsigned char *)(a1 + 160), __p);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315138;
    int v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK suspend RQ in state %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  int v6 = *(unsigned __int8 *)(a1 + 160);
  if ((v6 - 3) < 2)
  {
    if (*(unsigned char *)(a1 + 168))
    {
      if (*(_DWORD *)(a1 + 164) == *a2)
      {
        unsigned int v8 = sub_100335B38(a1, 2);
        if (!v8)
        {
          int v9 = *(unsigned __int8 *)(a1 + 160);
          if (v9 == 5) {
            return 0x10000000000;
          }
          if (*(void *)(a1 + 152)) {
            sub_1003370B8(a1 + 128, v9, 5);
          }
          goto LABEL_12;
        }
        sub_100334DC0(a1);
        return v8;
      }
      else
      {
        sub_100334DC0(a1);
        return 4294964295;
      }
    }
    else
    {
      sub_100334DC0(a1);
      return 4294964294;
    }
  }
  else
  {
    if (v6 != 1)
    {
      if (v6 != 2) {
        return 0x10000000000;
      }
      if (*(void *)(a1 + 152)) {
        sub_1003370B8(a1 + 128, 2, 5);
      }
LABEL_12:
      *(unsigned char *)(a1 + 160) = 5;
      return 0x10000000000;
    }
    sub_100334DC0(a1);
    return 4294964296;
  }
}

uint64_t sub_100335B38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 120);
  if (!v3) {
    sub_100027894();
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 48))(&v8);
  uint64_t v5 = v8;
  (*(void (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    if (v12)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 120))(v6, &v9);
      uint64_t v6 = *(void *)(a1 + 48);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
  }
  if (v12 && __p)
  {
    char v11 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_100335C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18) {
    sub_1004309E8((uint64_t)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100335C6C@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100334B30(*(unsigned char *)(a1 + 160), &__p);
    int v7 = v16 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136315138;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK recovery RQ in state %s", buf, 0xCu);
    if (v16 < 0) {
      operator delete(__p);
    }
  }
  *(_WORD *)long long buf = 0;
  uint64_t result = sub_100335DD8(a1, 1, *a2, buf, (uint64_t)&__p);
  if (v18) {
    int v9 = 0;
  }
  else {
    int v9 = -1004;
  }
  if (__p) {
    int v10 = (int)__p;
  }
  else {
    int v10 = v9;
  }
  if (v10)
  {
    uint64_t result = sub_100334DC0(a1);
    char v11 = 0;
    *(_DWORD *)a3 = v10;
    *(unsigned char *)(a3 + 8) = 0;
  }
  else
  {
    if (!v18) {
      sub_10000AE44();
    }
    int v12 = v15;
    uint64_t v13 = v17;
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = v12;
    *(void *)(a3 + 16) = v13;
    char v11 = 1;
  }
  *(unsigned char *)(a3 + 24) = v11;
  return result;
}

uint64_t sub_100335DD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  if ((a2 - 3) <= 0xFDu)
  {
    uint64_t v30 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
    {
      sub_100430A10((uint64_t)v30, buf);
      uint64_t v30 = *(NSObject **)buf;
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/AlishaSupport/AlishaStateMachine.cpp";
      __int16 v42 = 1024;
      *(_DWORD *)int v43 = 611;
      *(_WORD *)&v43[4] = 2080;
      *(void *)&v43[6] = "_processRecoveryRequest";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#alisha-sm,%s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
  switch(*(unsigned char *)(a1 + 160))
  {
    case 0:
    case 1:
    case 4:
      uint64_t result = sub_100334DC0(a1);
      int v11 = -3005;
      goto LABEL_30;
    case 2:
      if (!*(void *)(a1 + 152)) {
        goto LABEL_9;
      }
      LOBYTE(v14) = 2;
      goto LABEL_8;
    case 3:
      int v12 = sub_100335B38(a1, 3);
      if (v12)
      {
        int v13 = v12;
        uint64_t result = sub_100334DC0(a1);
        *(_DWORD *)a5 = v13;
LABEL_31:
        *(unsigned char *)(a5 + 8) = 0;
        *(unsigned char *)(a5 + 40) = 0;
        return result;
      }
      int v14 = *(unsigned __int8 *)(a1 + 160);
      if (v14 != 5)
      {
        if (*(void *)(a1 + 152)) {
LABEL_8:
        }
          sub_1003370B8(a1 + 128, v14, 5);
LABEL_9:
        *(unsigned char *)(a1 + 160) = 5;
      }
LABEL_10:
      uint64_t v15 = *(void *)(a1 + 48);
      if (v15) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, a2);
      }
      if (!*(unsigned char *)(a1 + 168))
      {
        uint64_t result = sub_100334DC0(a1);
        int v11 = -3002;
LABEL_30:
        *(_DWORD *)a5 = v11;
        goto LABEL_31;
      }
      if (*(_DWORD *)(a1 + 164) != a3)
      {
        uint64_t result = sub_100334DC0(a1);
        int v11 = -3006;
        goto LABEL_30;
      }
      uint64_t v16 = *(void *)(a1 + 48);
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 104))(v16);
      }
      (*(void (**)(int *__return_ptr))(**(void **)(a1 + 32) + 24))(&v37);
      if (v40) {
        int v17 = 0;
      }
      else {
        int v17 = -1004;
      }
      if (v37) {
        int v18 = v37;
      }
      else {
        int v18 = v17;
      }
      uint64_t v19 = *(void *)(a1 + 48);
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 112))(v19);
      }
      if (v18)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100430ACC(v18);
        }
        uint64_t result = sub_100334DC0(a1);
        int v11 = -3013;
        goto LABEL_30;
      }
      v20.n128_f64[0] = sub_10032B328(*(void **)a1, a4, (uint64_t)buf);
      if (v45) {
        int v21 = 0;
      }
      else {
        int v21 = -1004;
      }
      if (*(_DWORD *)buf) {
        int v22 = *(_DWORD *)buf;
      }
      else {
        int v22 = v21;
      }
      if (v22)
      {
        uint64_t result = sub_100334DC0(a1);
        *(_DWORD *)a5 = v22;
        goto LABEL_31;
      }
      if (!v45) {
        sub_10000AE44();
      }
      if (a4[1] && !buf[9])
      {
        uint64_t result = sub_100334DC0(a1);
        int v11 = -3004;
        goto LABEL_30;
      }
      if ((*(unsigned int (**)(void, __n128))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v20))
      {
        int v23 = *(unsigned __int8 *)(a1 + 160);
        if (v23 != 2)
        {
          if (*(void *)(a1 + 152)) {
            sub_1003370B8(a1 + 128, v23, 2);
          }
          *(unsigned char *)(a1 + 160) = 2;
        }
        uint64_t result = *(void *)(a1 + 48);
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
        }
        char v24 = 0;
      }
      else
      {
        if (!v45) {
          sub_10000AE44();
        }
        if (!*(unsigned char *)(a1 + 168)) {
          sub_10000AE44();
        }
        int v35 = *(_DWORD *)(a1 + 164);
        long long v36 = *(_OWORD *)&v43[2];
        sub_100335924(a1 + 64, (uint64_t)&v35, v44);
        if (v34) {
          int v26 = 0;
        }
        else {
          int v26 = -1004;
        }
        if (v32) {
          int v27 = v32;
        }
        else {
          int v27 = v26;
        }
        if (v27)
        {
          uint64_t result = sub_100334DC0(a1);
          *(_DWORD *)a5 = v27;
          goto LABEL_31;
        }
        if (!v34) {
          sub_10000AE44();
        }
        uint64_t v28 = *(void *)a1;
        char v31 = v33;
        char v24 = sub_10032A794(v28, &v31);
        int v29 = *(unsigned __int8 *)(a1 + 160);
        if (v29 != 3)
        {
          if (*(void *)(a1 + 152)) {
            sub_1003370B8(a1 + 128, v29, 3);
          }
          *(unsigned char *)(a1 + 160) = 3;
        }
        (*(void (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
        uint64_t result = *(void *)(a1 + 48);
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)result + 24))(result, BYTE9(v36), v36, BYTE6(v36));
        }
      }
      if (!v45) {
        sub_10000AE44();
      }
      if (!v40) {
        sub_10000AE44();
      }
      __int16 v25 = *(_WORD *)&buf[8];
      *(void *)(a5 + 8) = v38;
      *(_DWORD *)(a5 + 16) = v39;
      *(_DWORD *)a5 = 0;
      *(void *)(a5 + 24) = v24;
      *(_WORD *)(a5 + 32) = v25;
      *(unsigned char *)(a5 + 40) = 1;
      return result;
    default:
      goto LABEL_10;
  }
}

uint64_t sub_10033635C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100334B30(*(unsigned char *)(a1 + 160), &__p);
    int v7 = v17 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136315138;
    int v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK configurable recovery RQ in state %s", buf, 0xCu);
    if (v17 < 0) {
      operator delete(__p);
    }
  }
  *(_WORD *)long long buf = *(unsigned __int8 *)(a2 + 4) | 0x100;
  uint64_t result = sub_100335DD8(a1, 2, *(_DWORD *)a2, buf, (uint64_t)&__p);
  if (v21) {
    int v9 = 0;
  }
  else {
    int v9 = -1004;
  }
  if (__p) {
    int v10 = (int)__p;
  }
  else {
    int v10 = v9;
  }
  if (v10)
  {
    uint64_t result = sub_100334DC0(a1);
    char v11 = 0;
    *(_DWORD *)a3 = v10;
    *(unsigned char *)(a3 + 8) = 0;
  }
  else
  {
    if (!v21) {
      sub_10000AE44();
    }
    if (!v20) {
      sub_100430B64();
    }
    char v12 = v19;
    int v13 = v16;
    uint64_t v14 = v18;
    *(_DWORD *)a3 = 0;
    *(unsigned char *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 12) = v13;
    *(void *)(a3 + 16) = v14;
    char v11 = 1;
  }
  *(unsigned char *)(a3 + 24) = v11;
  return result;
}

uint64_t sub_1003364E8(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100334B30(*(unsigned char *)(a1 + 160), __p);
    uint64_t v5 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315138;
    int v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Processing DCK suspend RS in state %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  char v6 = *(unsigned char *)(a1 + 160);
  switch(v6)
  {
    case 0:
    case 5:
      uint64_t v8 = qword_1008ABDE0;
      a2 = 0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100334B30(v6, __p);
        if (v14 >= 0) {
          int v9 = __p;
        }
        else {
          int v9 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136315138;
        int v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#alisha-sm,processDCKSuspendRS: ignoring suspend response in state %s", buf, 0xCu);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        return 0;
      }
      return (uint64_t)a2;
    case 1:
    case 2:
    case 3:
      int v7 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_100430C28(v6, v7);
      }
      return 4294964287;
    case 4:
      if (*a2)
      {
        if (*(void *)(a1 + 152)) {
          sub_1003370B8(a1 + 128, 4, 3);
        }
        a2 = 0;
        char v10 = 3;
LABEL_22:
        *(unsigned char *)(a1 + 160) = v10;
        return (uint64_t)a2;
      }
      a2 = (unsigned char *)sub_100335B38(a1, *(unsigned int *)(a1 + 188));
      if (!a2)
      {
        int v12 = *(unsigned __int8 *)(a1 + 160);
        if (v12 == 5) {
          return 0;
        }
        if (*(void *)(a1 + 152)) {
          sub_1003370B8(a1 + 128, v12, 5);
        }
        a2 = 0;
        char v10 = 5;
        goto LABEL_22;
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100430B90((int)a2);
      }
      return (uint64_t)a2;
    default:
      return (uint64_t)a2;
  }
}

void sub_100336760(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100004950(v34, off_100861748[a2]);
    int v7 = SBYTE3(v38);
    uint64_t v8 = *(unsigned char **)v34;
    sub_100334B30(*(unsigned char *)(a1 + 160), __p);
    int v9 = v34;
    if (v7 < 0) {
      int v9 = v8;
    }
    if (v40 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136315394;
    __int16 v42 = v9;
    __int16 v43 = 2080;
    uint64_t v44 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Suspend on timeout event %s in state %s", buf, 0x16u);
    if (v40 < 0) {
      operator delete(*(void **)__p);
    }
    if (SBYTE3(v38) < 0) {
      operator delete(*(void **)v34);
    }
  }
  switch(a2)
  {
    case 0:
      char v33 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
      {
        sub_100430CD4((uint64_t)v33, v34);
        char v33 = *(NSObject **)v34;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)char v34 = 136315650;
        *(void *)&v34[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/AlishaSupport/AlishaStateMachine.cpp";
        __int16 v35 = 1024;
        int v36 = 543;
        __int16 v37 = 2080;
        uint64_t v38 = "suspendOnTimeout";
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#alisha-sm,%s:%d: assertion failure in %s", v34, 0x1Cu);
      }
      abort();
    case 1:
      if (*(unsigned char *)(a1 + 160) != 2) {
        goto LABEL_50;
      }
      if (*(void *)(a1 + 152)) {
        sub_1003370B8(a1 + 128, 2, 5);
      }
LABEL_23:
      *(unsigned char *)(a1 + 160) = 5;
LABEL_24:
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 4) = 117440514;
      char v15 = 1;
      *(_WORD *)(a3 + 8) = 1;
      *(unsigned char *)(a3 + 10) = 0;
      *(_DWORD *)(a3 + 12) = 1;
      goto LABEL_52;
    case 2:
    case 3:
      unsigned int v11 = *(unsigned __int8 *)(a1 + 160);
      if (v11 > 5) {
        goto LABEL_26;
      }
      int v12 = 1 << v11;
      if ((v12 & 0x31) != 0) {
        goto LABEL_50;
      }
      if ((v12 & 6) != 0)
      {
        int v13 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
        {
          sub_100336E68(a2, v34);
          int v23 = SBYTE3(v38);
          char v24 = *(unsigned char **)v34;
          sub_100334B30(*(unsigned char *)(a1 + 160), __p);
          __int16 v25 = v34;
          if (v23 < 0) {
            __int16 v25 = v24;
          }
          if (v40 >= 0) {
            int v26 = __p;
          }
          else {
            int v26 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 136315394;
          __int16 v42 = v25;
          __int16 v43 = 2080;
          uint64_t v44 = v26;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#alisha-sm,suspendOnTimeout error: %s event is received but state is %s", buf, 0x16u);
          if (v40 < 0) {
            operator delete(*(void **)__p);
          }
          if (SBYTE3(v38) < 0) {
LABEL_75:
          }
            operator delete(*(void **)v34);
        }
LABEL_28:
        sub_100334DC0(a1);
        char v15 = 0;
        int v17 = -3010;
      }
      else
      {
        if (*(unsigned char *)(a1 + 168))
        {
          if (a2 == 2)
          {
            int v18 = 0;
          }
          else
          {
            if (a2 != 3)
            {
              char v31 = qword_1008ABDE0;
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
              {
                sub_100336E68(a2, v34);
                if (SBYTE3(v38) >= 0) {
                  int v32 = v34;
                }
                else {
                  int v32 = *(unsigned char **)v34;
                }
                *(_DWORD *)long long __p = 136315138;
                *(void *)&__p[4] = v32;
                _os_log_fault_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "#alisha-sm,Cannot translate ranging timeout %s to a reason for session end", __p, 0xCu);
                if (SBYTE3(v38) < 0) {
                  operator delete(*(void **)v34);
                }
                char v31 = qword_1008ABDE0;
              }
              if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)char v34 = 136315650;
                *(void *)&v34[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/AlishaSupport/AlishaStateMachine.cpp";
                __int16 v35 = 1024;
                int v36 = 450;
                __int16 v37 = 2080;
                uint64_t v38 = "suspendOnTimeout";
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#alisha-sm,%s:%d: assertion failure in %s", v34, 0x1Cu);
              }
              abort();
            }
            int v18 = 1;
          }
          *(_DWORD *)(a1 + 188) = v18;
          if (*(void *)(a1 + 152))
          {
            sub_1003370B8(a1 + 128, 3, 4);
            int v20 = *(unsigned __int8 *)(a1 + 168);
            *(unsigned char *)(a1 + 160) = 4;
            if (!v20) {
              sub_10000AE44();
            }
          }
          else
          {
            *(unsigned char *)(a1 + 160) = 4;
          }
          int v22 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)a3 = 0;
          *(_DWORD *)(a3 + 4) = v22;
          *(_DWORD *)(a3 + 12) = 0;
          char v15 = 1;
          goto LABEL_52;
        }
        sub_100334DC0(a1);
        char v15 = 0;
        int v17 = -3002;
      }
      *(_DWORD *)a3 = v17;
LABEL_51:
      *(unsigned char *)(a3 + 4) = 0;
LABEL_52:
      *(unsigned char *)(a3 + 16) = v15;
      return;
    case 4:
      unsigned int v11 = *(unsigned __int8 *)(a1 + 160);
LABEL_26:
      switch(v11)
      {
        case 1u:
        case 2u:
          int v16 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
          {
            sub_100336E68(a2, v34);
            int v27 = SBYTE3(v38);
            uint64_t v28 = *(unsigned char **)v34;
            sub_100334B30(*(unsigned char *)(a1 + 160), __p);
            int v29 = v34;
            if (v27 < 0) {
              int v29 = v28;
            }
            if (v40 >= 0) {
              uint64_t v30 = __p;
            }
            else {
              uint64_t v30 = *(unsigned char **)__p;
            }
            *(_DWORD *)long long buf = 136315394;
            __int16 v42 = v29;
            __int16 v43 = 2080;
            uint64_t v44 = v30;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#alisha-sm,suspendOnTimeout error: %s event is received but state is %s", buf, 0x16u);
            if (v40 < 0) {
              operator delete(*(void **)__p);
            }
            if (SBYTE3(v38) < 0) {
              goto LABEL_75;
            }
          }
          goto LABEL_28;
        case 3u:
          int v14 = sub_100335B38(a1, *(unsigned int *)(a1 + 188));
          if (v14) {
            goto LABEL_40;
          }
          int v21 = *(unsigned __int8 *)(a1 + 160);
          if (v21 == 5) {
            goto LABEL_24;
          }
          if (*(void *)(a1 + 152)) {
            sub_1003370B8(a1 + 128, v21, 5);
          }
          goto LABEL_23;
        case 4u:
          int v14 = sub_100335B38(a1, *(unsigned int *)(a1 + 188));
          if (v14) {
            goto LABEL_40;
          }
          int v19 = *(unsigned __int8 *)(a1 + 160);
          if (v19 == 5) {
            goto LABEL_50;
          }
          if (*(void *)(a1 + 152)) {
            goto LABEL_48;
          }
          goto LABEL_49;
        default:
          goto LABEL_50;
      }
    case 5:
      if (*(unsigned char *)(a1 + 160) != 4) {
        goto LABEL_50;
      }
      int v14 = sub_100335B38(a1, *(unsigned int *)(a1 + 188));
      if (v14)
      {
LABEL_40:
        sub_100334DC0(a1);
        char v15 = 0;
        *(_DWORD *)a3 = v14;
      }
      else
      {
        int v19 = *(unsigned __int8 *)(a1 + 160);
        if (v19 != 5)
        {
          if (*(void *)(a1 + 152)) {
LABEL_48:
          }
            sub_1003370B8(a1 + 128, v19, 5);
LABEL_49:
          *(unsigned char *)(a1 + 160) = 5;
        }
LABEL_50:
        char v15 = 0;
        *(_DWORD *)a3 = 0;
      }
      goto LABEL_51;
    default:
      return;
  }
}

void sub_100336E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100336E68@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100004950(a2, off_100861748[a1]);
}

uint64_t sub_100336E7C(uint64_t a1)
{
  int v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100334B30(*(unsigned char *)(a1 + 160), __p);
    uint64_t v3 = v9 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136315138;
    int v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-sm,Stop ranging in state %s", buf, 0xCu);
    if (v9 < 0) {
      operator delete(*(void **)__p);
    }
  }
  switch(*(unsigned char *)(a1 + 160))
  {
    case 0:
    case 5:
      goto LABEL_9;
    case 1:
      sub_100334DC0(a1);
      goto LABEL_9;
    case 2:
      if (*(void *)(a1 + 152)) {
        sub_1003370B8(a1 + 128, 2, 5);
      }
      *(unsigned char *)(a1 + 160) = 5;
      goto LABEL_21;
    case 3:
      unsigned int v4 = sub_100335B38(a1, 3);
      if (v4) {
        goto LABEL_16;
      }
      int v5 = *(unsigned __int8 *)(a1 + 160);
      if (v5 != 5)
      {
        if (*(void *)(a1 + 152)) {
          sub_1003370B8(a1 + 128, v5, 5);
        }
        *(unsigned char *)(a1 + 160) = 5;
      }
LABEL_21:
      LODWORD(v10[0]) = 0;
      *(void *)((char *)v10 + 4) = 0x100000107000002;
      break;
    case 4:
      unsigned int v4 = sub_100335B38(a1, *(unsigned int *)(a1 + 188));
      if (v4)
      {
LABEL_16:
        sub_100334DC0(a1);
        *(_DWORD *)long long __p = v4;
        *(void *)&__p[4] = 0;
        v10[0] = v4;
      }
      else
      {
        int v7 = *(unsigned __int8 *)(a1 + 160);
        if (v7 != 5)
        {
          if (*(void *)(a1 + 152)) {
            sub_1003370B8(a1 + 128, v7, 5);
          }
          *(unsigned char *)(a1 + 160) = 5;
        }
LABEL_9:
        LODWORD(v10[0]) = 0;
        *(void *)((char *)v10 + 4) = 0;
      }
      break;
    default:
      return v10[0];
  }
  return v10[0];
}

uint64_t sub_1003370B8(uint64_t a1, char a2, char a3)
{
  char v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_100337114(unsigned int a1)
{
  return (a1 > 5) | (0x18u >> a1) & 1;
}

void *sub_100337130(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1003371EC(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_1001D0B70(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_10016D488(a1 + 6, *(const void **)a4, *(void *)(a4 + 8), *(void *)(a4 + 8) - *(void *)a4);
  return a1;
}

void sub_1003371B8(_Unwind_Exception *exception_object)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  char v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003371EC(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    uint64_t result = sub_1001C92A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10033724C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100337268(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100337300(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100337398(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100337430(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003374B4(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100337538(void *a1)
{
  int v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1003375C0(void *a1)
{
  int v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100337648(void *a1)
{
  int v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1003376F0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_fault_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0xCu);
}

uint64_t sub_100337710(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  uint64_t v11 = sub_100338AD0(a1, a2);
  sub_100337398(v11 + 32, a3);
  uint64_t v12 = a4[1];
  *(void *)(a1 + 64) = *a4;
  *(void *)(a1 + 72) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v13 = a5[1];
  *(void *)(a1 + 96) = *a5;
  *(void *)(a1 + 104) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = a6[1];
  *(void *)(a1 + 112) = *a6;
  *(void *)(a1 + 120) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  char v15 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100430D90(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  if (!*(void *)(a1 + 24))
  {
    char v24 = "_constructSessionCallback";
    int v25 = 31;
    goto LABEL_18;
  }
  if (!*(void *)(a1 + 64))
  {
    char v24 = "_uwbSystem";
    int v25 = 32;
    goto LABEL_18;
  }
  if (!*(void *)(a1 + 96))
  {
    char v24 = "_paramNegotiator";
    int v25 = 33;
    goto LABEL_18;
  }
  if (!*(void *)(a1 + 112))
  {
    char v24 = "_rangingLimitManager";
    int v25 = 34;
LABEL_18:
    __assert_rtn("AcwgManager", "AcwgManager.cpp", v25, v24);
  }
  return a1;
}

void sub_100337870(_Unwind_Exception *a1)
{
  sub_1001D4444(v1);
  _Unwind_Resume(a1);
}

void *sub_100337900(void *a1)
{
  int v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100430E08(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  sub_1003379CC(a1);
  sub_10002AC70((uint64_t)(a1 + 18));
  uint64_t v10 = a1[17];
  a1[17] = 0;
  if (v10) {
    operator delete();
  }
  uint64_t v11 = (void *)a1[16];
  a1[16] = 0;
  if (v11) {
    sub_100338B68((uint64_t)(a1 + 16), v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)a1[15];
  if (v12) {
    sub_10001A970(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)a1[13];
  if (v13) {
    sub_10001A970(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)a1[11];
  if (v14) {
    sub_10001A970(v14);
  }
  char v15 = (std::__shared_weak_count *)a1[9];
  if (v15) {
    sub_10001A970(v15);
  }
  sub_1001D43C0(a1 + 4);
  return sub_1001D4444(a1);
}

void *sub_1003379CC(void *a1)
{
  int v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100430E80(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  uint64_t v11 = (void **)(a1 + 16);
  uint64_t v10 = (void *)a1[16];
  if (v10)
  {
    sub_100334D2C(v10);
    uint64_t v12 = *v11;
    *uint64_t v11 = 0;
    if (v12) {
      sub_100338B68((uint64_t)(a1 + 16), v12);
    }
  }
  if (a1[10])
  {
    sub_100337ADC((uint64_t)a1, (uint64_t)v18);
    if (v21)
    {
      if (__p)
      {
        uint64_t v20 = __p;
        operator delete(__p);
      }
    }
  }
  uint64_t v13 = a1[17];
  a1[17] = 0;
  if (v13) {
    operator delete();
  }
  sub_100056AD4(a1 + 18);
  uint64_t v14 = (std::__shared_weak_count *)a1[9];
  a1[8] = 0;
  a1[9] = 0;
  if (v14) {
    sub_10001A970(v14);
  }
  char v15 = (std::__shared_weak_count *)a1[13];
  a1[12] = 0;
  a1[13] = 0;
  if (v15) {
    sub_10001A970(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)a1[15];
  a1[14] = 0;
  a1[15] = 0;
  if (v16) {
    sub_10001A970(v16);
  }
  sub_100338BFC(a1);
  return sub_100337648(a1 + 4);
}

void sub_100337ADC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100430EF8(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  uint64_t v12 = *(void *)(a1 + 80);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    if (v13) {
      sub_10001A970(v13);
    }
  }
  else
  {
    v14[0] = 0;
    char v17 = 0;
    *(_DWORD *)a2 = 0;
    sub_1002DE458((__n128 *)(a2 + 8), (uint64_t)v14);
    if (v17 && __p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
  }
}

void sub_100337BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_10042D160((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100337BC8(uint64_t a1)
{
  int v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100430F70(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (!*(void *)(a1 + 128)) {
    operator new();
  }
  if (!*(void *)(a1 + 136)) {
    operator new();
  }
  return 0;
}

void sub_100337E30(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_1001D43C0((uint64_t *)va);
  sub_1003374B4((uint64_t *)va1);
  sub_100337430((void *)(v9 - 72));
  if (a3) {
    sub_10001A970(a3);
  }
  if (a5) {
    sub_10001A970(a5);
  }
  if (a7) {
    sub_10001A970(a7);
  }
  if (a9) {
    sub_10001A970(a9);
  }
  operator delete();
}

uint64_t sub_100337EB4(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t v14 = 136315138;
    *(void *)&void v14[4] = "_stateChangedHandler";
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#acwg-mgr,In method: '%s'", v14, 0xCu);
    uint64_t v6 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_100334B30(a2, v14);
    int v7 = v15;
    uint64_t v8 = *(unsigned char **)v14;
    sub_100334B30(a3, __p);
    uint64_t v9 = v14;
    if (v7 < 0) {
      uint64_t v9 = v8;
    }
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315394;
    char v17 = v9;
    __int16 v18 = 2080;
    uint64_t v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#acwg-mgr,State machine state changed handler. Old state: %s. New state: %s", buf, 0x16u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(*(void **)v14);
    }
  }
  return sub_1003370B8(a1 + 32, a2, a3);
}

void sub_100338048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033806C(uint64_t a1)
{
  int v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100431014(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  uint64_t v10 = *(void *)(a1 + 128);
  if (!v10) {
    sub_100430FE8();
  }
  int v11 = sub_100336E7C(v10);
  return sub_1003380D0(a1, v11);
}

uint64_t sub_1003380D0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = sub_10033B330(*(void *)(a1 + 136), a2);
  if ((v3 & 0xFF000000) == 0) {
    goto LABEL_18;
  }
  if (BYTE4(v2) == 3)
  {
    if ((*(void *)&v3 & 0xFF0000) != 0)
    {
      if (BYTE1(v3) < 3u) {
        return 4294967196;
      }
      goto LABEL_18;
    }
LABEL_30:
    sub_10000AE44();
  }
  if (BYTE4(v2) == 2)
  {
    if ((_BYTE)v3)
    {
      char v5 = HIBYTE(v2) - 1;
      if (HIBYTE(v2) - 1) < 7u && ((0x69u >> v5)) {
        return dword_1004C16BC[v5];
      }
      goto LABEL_18;
    }
    goto LABEL_30;
  }
  if (BYTE4(v2) != 1) {
    goto LABEL_18;
  }
  if ((v2 & 0xFF000000000000) == 0) {
    goto LABEL_30;
  }
  if (BYTE5(v2) == 2) {
    return 4294967196;
  }
  if (BYTE5(v2) == 255 || BYTE5(v2) == 133) {
    return 4294967194;
  }
LABEL_18:
  uint64_t v4 = 0;
  if ((int)v2 <= -1034)
  {
    if ((v2 + 4026) >= 0x1B)
    {
      if ((v2 + 2024) > 0x18)
      {
        if ((v2 + 3013) >= 0xE) {
          return v4;
        }
      }
      else if (((1 << (v2 - 24)) & 0x73FFEF) != 0)
      {
        return 4294967194;
      }
    }
    return 4294967196;
  }
  switch((int)v2)
  {
    case 6:
    case 8:
    case 12:
    case 13:
    case 14:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 28:
    case 29:
    case 31:
    case 32:
    case 39:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 62:
    case 63:
    case 64:
    case 65:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 98:
    case 99:
    case 100:
    case 101:
    case 112:
    case 113:
    case 114:
    case 115:
      return 4294967196;
    case 7:
    case 9:
    case 10:
    case 11:
    case 15:
    case 16:
    case 17:
    case 24:
    case 25:
    case 26:
    case 27:
    case 30:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 58:
    case 59:
    case 60:
    case 61:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
      return v4;
    default:
      if ((v2 + 1033) < 0x22) {
        return 4294967196;
      }
      break;
  }
  return v4;
}

void sub_1003383EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10043108C(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  uint64_t v14 = operator new(2uLL);
  uint64_t v44 = v14;
  *uint64_t v14 = 256;
  char v45 = v14 + 1;
  NSString v46 = v14 + 1;
  sub_10032EA10(v39, (uint64_t)&v44, a2, a2 + 24);
  unint64_t v15 = sub_100334F30(*(void *)(a1 + 128), (unsigned __int16 **)v39);
  int v17 = v16;
  int v18 = sub_1003380D0(a1, v15);
  if (v18)
  {
    *(_DWORD *)a3 = v18;
    *(unsigned char *)(a3 + 4) = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  else
  {
    if ((*(void *)&v17 & 0xFF0000) == 0) {
      sub_10000AE44();
    }
    unint64_t v19 = HIDWORD(v15);
    unint64_t v20 = HIWORD(v15);
    int v21 = *(_DWORD *)(a2 + 52);
    char v22 = *(unsigned char *)(a2 + 48);
    v35[0] = v19;
    v35[1] = v20;
    int v36 = v21;
    char v37 = v17;
    char v38 = v22;
    sub_10033524C(*(void *)(a1 + 128), v35, *(unsigned char *)(a2 + 56), (uint64_t)&v29);
    int v23 = sub_1003380D0(a1, v29);
    if (v23)
    {
      char v24 = 0;
      *(_DWORD *)a3 = v23;
      *(unsigned char *)(a3 + 4) = 0;
    }
    else
    {
      if (!v34) {
        sub_10000AE44();
      }
      __int16 v25 = v30;
      int v26 = v31;
      char v27 = v32;
      __int16 v28 = v33;
      *(_DWORD *)a3 = 0;
      *(_WORD *)(a3 + 4) = v20;
      *(unsigned char *)(a3 + 6) = v17;
      *(unsigned char *)(a3 + 7) = v27;
      *(_DWORD *)(a3 + 8) = v26;
      *(_WORD *)(a3 + 12) = v25;
      char v24 = 1;
      *(_WORD *)(a3 + 14) = v28;
    }
    *(unsigned char *)(a3 + 16) = v24;
  }
  if (__p)
  {
    __int16 v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    __int16 v41 = v40;
    operator delete(v40);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (v44)
  {
    char v45 = v44;
    operator delete(v44);
  }
}

void sub_1003385A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10032DBB4((uint64_t)va);
  uint64_t v7 = *(void **)(v5 - 72);
  if (v7)
  {
    *(void *)(v5 - 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003385D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100431104(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  char v14 = *(unsigned char *)(a2 + 8);
  int v15 = *(_DWORD *)(a2 + 4);
  v27[0] = *(_DWORD *)a2;
  v27[1] = v15;
  char v28 = v14;
  sub_100335598(*(void *)(a1 + 128), (uint64_t)v27, *(unsigned __int8 *)(a2 + 9) | 0x100, (uint64_t)v22);
  uint64_t result = sub_1003380D0(a1, v22[0]);
  if (result)
  {
    char v17 = 0;
    *(_DWORD *)a3 = result;
    *(unsigned char *)(a3 + 8) = 0;
  }
  else
  {
    if (!v26) {
      sub_10000AE44();
    }
    int v18 = v22[2];
    uint64_t v19 = v23;
    int v20 = v24;
    char v21 = v25;
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = v18;
    *(void *)(a3 + 16) = v19;
    *(_DWORD *)(a3 + 24) = v20;
    *(unsigned char *)(a3 + 28) = v21;
    char v17 = 1;
  }
  *(unsigned char *)(a3 + 32) = v17;
  return result;
}

uint64_t sub_1003386B8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10043117C(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  int v21 = a2;
  sub_100335C6C(*(void *)(a1 + 128), &v21, (uint64_t)v18);
  uint64_t result = sub_1003380D0(a1, v18[0]);
  if (result)
  {
    char v15 = 0;
    *(_DWORD *)a3 = result;
    *(unsigned char *)(a3 + 8) = 0;
  }
  else
  {
    if (!v20) {
      sub_10000AE44();
    }
    int v16 = v18[2];
    uint64_t v17 = v19;
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = v16;
    *(void *)(a3 + 16) = v17;
    char v15 = 1;
  }
  *(unsigned char *)(a3 + 24) = v15;
  return result;
}

void sub_100338774(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004311F4(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  sub_10032A38C(*(void *)(a1 + 96), a2, a3);
}

uint64_t sub_1003387DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_10033880C(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100431298(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  uint64_t v10 = *(void *)(a1 + 64);
  if (!v10) {
    sub_10043126C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a1 + 144);
}

uint64_t sub_100338888(uint64_t a1, unsigned int a2, int *a3)
{
  unsigned int v16 = a2;
  uint64_t v5 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100431310(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 24))(&v15);
  int v13 = v15;
  if (!v15)
  {
    sub_1003393AC(a1 + 144, &v16, &v16);
    int v13 = v15;
  }
  *a3 = v13;
  return sub_1003380D0(a1, v13);
}

uint64_t sub_100338944(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    uint64_t v6 = "handleUWBSystemError";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#acwg-mgr,In method: '%s'", (uint8_t *)&v5, 0xCu);
    uint64_t v2 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#acwg-mgr,handleUWBSystemError", (uint8_t *)&v5, 2u);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3) {
    sub_10032A344(v3);
  }
  sub_100056AD4((void *)(a1 + 144));
  return 0;
}

void *sub_100338A50@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case -103:
      uint64_t v2 = "URSK_UNAVAILABLE";
      break;
    case -102:
      uint64_t v2 = "WRONG_PARAMETERS";
      break;
    case -101:
      uint64_t v2 = "RESOURCE_UNAVAILABLE";
      break;
    case -100:
      uint64_t v2 = "UNKNOWN_ERROR";
      break;
    default:
      uint64_t v2 = "SUCCESS";
      break;
  }
  return sub_100004950(a2, v2);
}

uint64_t sub_100338AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100338B68(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1001D43C0(a2 + 16);
    sub_1003374B4(a2 + 12);
    sub_100337430(a2 + 8);
    uint64_t v3 = (std::__shared_weak_count *)a2[7];
    if (v3) {
      sub_10001A970(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      sub_10001A970(v4);
    }
    int v5 = (std::__shared_weak_count *)a2[3];
    if (v5) {
      sub_10001A970(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    if (v6) {
      sub_10001A970(v6);
    }
    operator delete();
  }
}

void *sub_100338BFC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100338C88()
{
}

void *sub_100338C9C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_100861788;
  result[1] = v3;
  return result;
}

uint64_t sub_100338CE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100861788;
  a2[1] = v2;
  return result;
}

void sub_100338D10(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 8);
  if (!v4[3]) {
    sub_100431388();
  }
  uint64_t v5 = *a2;
  if (v4[10])
  {
    sub_100337ADC(*(void *)(a1 + 8), (uint64_t)v19);
    if (v22)
    {
      if (__p)
      {
        int v21 = __p;
        operator delete(__p);
      }
    }
  }
  uint64_t v6 = v4[3];
  if (!v6) {
    sub_100027894();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v6 + 48))(v16);
  int v7 = v16[0];
  if (v18) {
    int v8 = 0;
  }
  else {
    int v8 = -1004;
  }
  if (!LODWORD(v16[0])) {
    int v7 = v8;
  }
  if (v7)
  {
    *(_DWORD *)a3 = v7;
LABEL_14:
    *(unsigned char *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    goto LABEL_15;
  }
  if (!v18) {
    sub_10000AE44();
  }
  uint64_t v9 = v16[1];
  uint64_t v10 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)v4[11];
  v4[10] = v9;
  void v4[11] = v10;
  if (v11)
  {
    sub_10001A970(v11);
    uint64_t v9 = v4[10];
  }
  if (!v9)
  {
    *(_DWORD *)a3 = -1013;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9, v5);
  if (*(_DWORD *)a3)
  {
    sub_100337ADC((uint64_t)v4, (uint64_t)v12);
    if (v15 && v13)
    {
      char v14 = v13;
      operator delete(v13);
    }
  }
  else
  {
    v12[0] = (*(uint64_t (**)(void))(*(void *)v4[10] + 16))(v4[10]);
    sub_100338F54((uint64_t)(v4 + 18), v12, v12);
  }
LABEL_15:
  if (v18)
  {
    if (v17) {
      sub_10001A970(v17);
    }
  }
}

void sub_100338EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21)
{
  if (a21)
  {
    if (a20) {
      sub_10001A970(a20);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100338F08(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100338F48()
{
}

void *sub_100338F54(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_10002AA24(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_100339160(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100339178()
{
}

__n128 sub_10033918C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100861818;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003391E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100861818;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100339218(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  unint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_100339240(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100339280()
{
}

void sub_100339290()
{
}

__n128 sub_1003392A4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1008618D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1003392F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1008618D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100339330(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = (uint64_t (*)(void *, void, void))a1[1];
  uint64_t v5 = (void *)(a1[3] + (v3 >> 1));
  if (v3) {
    uint64_t v4 = *(uint64_t (**)(void *, void, void))(*v5 + v4);
  }
  return v4(v5, *a2, *a3);
}

uint64_t sub_100339360(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003393A0()
{
}

void *sub_1003393AC(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_10002AA24(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1003395B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003395CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_100339608(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t v16 = sub_100338AD0(a1, a2);
  sub_100337398(v16 + 32, a3);
  uint64_t v17 = a4[1];
  *(void *)(a1 + 64) = *a4;
  *(void *)(a1 + 72) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v18 = a5[1];
  *(void *)(a1 + 96) = *a5;
  *(void *)(a1 + 104) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = a6[1];
  *(void *)(a1 + 112) = *a6;
  *(void *)(a1 + 120) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = a7[1];
  *(void *)(a1 + 128) = *a7;
  *(void *)(a1 + 136) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = a8[1];
  *(void *)(a1 + 144) = *a8;
  *(void *)(a1 + 152) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  uint64_t v22 = a9[1];
  *(void *)(a1 + 216) = *a9;
  *(void *)(a1 + 224) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  if (!*(void *)(a1 + 24))
  {
    int v24 = "_constructSessionCallback";
    int v25 = 34;
    goto LABEL_24;
  }
  if (!*(void *)(a1 + 64))
  {
    int v24 = "_system";
    int v25 = 35;
    goto LABEL_24;
  }
  if (!*(void *)(a1 + 96))
  {
    int v24 = "_dckCoder";
    int v25 = 36;
    goto LABEL_24;
  }
  if (!*(void *)(a1 + 112))
  {
    int v24 = "_paramNegotiator";
    int v25 = 37;
    goto LABEL_24;
  }
  if (!*(void *)(a1 + 128))
  {
    int v24 = "_rangingLimitManager";
    int v25 = 38;
LABEL_24:
    __assert_rtn("AlishaManager", "AlishaManager.cpp", v25, v24);
  }
  return a1;
}

void sub_1003397B4(_Unwind_Exception *a1)
{
  sub_1001D4444(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100339864(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  return sub_100339608(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void *sub_100339870(void *a1)
{
  sub_100339940(a1);
  uint64_t v2 = (std::__shared_weak_count *)a1[28];
  if (v2) {
    sub_10001A970(v2);
  }
  sub_10002AC70((uint64_t)(a1 + 22));
  uint64_t v3 = a1[21];
  a1[21] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = (void *)a1[20];
  a1[20] = 0;
  if (v4) {
    sub_100338B68((uint64_t)(a1 + 20), v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[19];
  if (v5) {
    sub_10001A970(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)a1[17];
  if (v6) {
    sub_10001A970(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)a1[15];
  if (v7) {
    sub_10001A970(v7);
  }
  uint8x8_t v8 = (std::__shared_weak_count *)a1[13];
  if (v8) {
    sub_10001A970(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[11];
  if (v9) {
    sub_10001A970(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[9];
  if (v10) {
    sub_10001A970(v10);
  }
  sub_1001D43C0(a1 + 4);

  return sub_1001D4444(a1);
}

void *sub_100339940(void *a1)
{
  uint64_t v3 = a1 + 20;
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    sub_100334D2C(v2);
    uint64_t v4 = (void *)*v3;
    *uint64_t v3 = 0;
    if (v4) {
      sub_100338B68((uint64_t)v3, v4);
    }
  }
  if (a1[10])
  {
    sub_100339A58((uint64_t)a1, (uint64_t)v13);
    if (v16)
    {
      if (__p)
      {
        unint64_t v15 = __p;
        operator delete(__p);
      }
    }
  }
  uint64_t v5 = a1[21];
  a1[21] = 0;
  if (v5) {
    operator delete();
  }
  sub_100056AD4(a1 + 22);
  unint64_t v6 = (std::__shared_weak_count *)a1[9];
  a1[8] = 0;
  a1[9] = 0;
  if (v6) {
    sub_10001A970(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)a1[13];
  a1[12] = 0;
  a1[13] = 0;
  if (v7) {
    sub_10001A970(v7);
  }
  uint8x8_t v8 = (std::__shared_weak_count *)a1[15];
  a1[14] = 0;
  a1[15] = 0;
  if (v8) {
    sub_10001A970(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[17];
  a1[16] = 0;
  a1[17] = 0;
  if (v9) {
    sub_10001A970(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[19];
  a1[18] = 0;
  a1[19] = 0;
  if (v10) {
    sub_10001A970(v10);
  }
  unint64_t v11 = (std::__shared_weak_count *)a1[28];
  a1[27] = 0;
  a1[28] = 0;
  if (v11) {
    sub_10001A970(v11);
  }
  sub_100338BFC(a1);
  return sub_100337648(a1 + 4);
}

void sub_100339A58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 88);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    if (v4)
    {
      sub_10001A970(v4);
    }
  }
  else
  {
    v5[0] = 0;
    char v8 = 0;
    *(_DWORD *)a2 = 0;
    sub_1002DE458((__n128 *)(a2 + 8), (uint64_t)v5);
    if (v8 && __p)
    {
      unint64_t v7 = __p;
      operator delete(__p);
    }
  }
}

void sub_100339B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_10042D160((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100339B24(uint64_t a1)
{
  if (!*(void *)(a1 + 160)) {
    operator new();
  }
  if (!*(void *)(a1 + 168)) {
    operator new();
  }
  return 0;
}

void sub_100339D74(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_1001D43C0((uint64_t *)va);
  sub_1003374B4((uint64_t *)va1);
  sub_100337430((void *)(v9 - 72));
  if (a3) {
    sub_10001A970(a3);
  }
  if (a5) {
    sub_10001A970(a5);
  }
  if (a7) {
    sub_10001A970(a7);
  }
  if (a9) {
    sub_10001A970(a9);
  }
  operator delete();
}

uint64_t sub_100339DF8(uint64_t a1, char a2, char a3)
{
  unint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100334B30(a2, v14);
    int v7 = v15;
    char v8 = (void **)v14[0];
    sub_100334B30(a3, __p);
    uint64_t v9 = v14;
    if (v7 < 0) {
      uint64_t v9 = v8;
    }
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v17 = v9;
    __int16 v18 = 2080;
    uint64_t v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#alisha-mgr,State machine state changed handler. Old state: %s. New state: %s", buf, 0x16u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
  return sub_1003370B8(a1 + 32, a2, a3);
}

void sub_100339F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100339F5C(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if (!v2) {
    sub_1004313B4();
  }
  uint64_t v4 = sub_100336E7C(v2);
  uint64_t v17 = v4;
  int v18 = v5;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = (v5 & 0xFF000000) == 0;
  }
  if (!v6)
  {
    sub_10032E0F0((char *)&v17 + 4, &v13);
    if (v13)
    {
      int v7 = "dckEncodedResult.statusCode == StatusCode::SUCCESS";
      int v8 = 143;
    }
    else
    {
      if (v16)
      {
        long long __p = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        sub_10016D488(&__p, v14, (uint64_t)v15, v15 - (unsigned char *)v14);
        char v12 = 1;
        *a2 = 0;
        sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&__p);
        if (v12 && __p)
        {
          uint64_t v10 = __p;
          operator delete(__p);
        }
        if (v16)
        {
          if (v14)
          {
            char v15 = v14;
            operator delete(v14);
          }
        }
        return;
      }
      int v7 = "dckEncodedResult.payload.has_value()";
      int v8 = 144;
    }
    __assert_rtn("stopRanging", "AlishaManager.cpp", v8, v7);
  }
  *a2 = v4;

  sub_10032EC58((uint64_t)(a2 + 2), (uint64_t)&unk_1008AA2A0);
}

void sub_10033A098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a13 && __p) {
    operator delete(__p);
  }
  if (a18)
  {
    if (a15) {
      operator delete(a15);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10033A0E0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[18];
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, a2);
  }
  unint64_t v7 = sub_10032B844(a1[12], a2);
  if ((v7 & 0xFF000000000000) != 0)
  {
    if ((v7 & 0xFF00000000) == 0x200000000)
    {
      int v34 = -1000;
      sub_10032EC58((uint64_t)&v35, (uint64_t)&unk_1008AA2A0);
      switch(BYTE5(v7))
      {
        case 1:
          sub_10032D574(a2, (int *)&v30);
          int v34 = v30;
          if (v33)
          {
            uint64_t v22 = sub_100334F30(a1[20], (unsigned __int16 **)&v31);
            LODWORD(v23) = v14;
            int v34 = v22;
            if ((*(void *)&v14 & 0xFF0000) != 0)
            {
              sub_10032BAD8((uint64_t)&v22 + 4, &v25);
              sub_10033A7F0(&v34, (uint64_t)&v25);
              if (v29)
              {
                if (__p)
                {
                  char v27 = __p;
                  operator delete(__p);
                }
              }
            }
          }
          sub_10032E9B4((uint64_t)&v31);
          goto LABEL_49;
        case 2:
        case 4:
        case 6:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x13:
        case 0x14:
        case 0x15:
          uint64_t v8 = a1[27];
          if (v8) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 56))(v8, 4294963292);
          }
          *(_DWORD *)a3 = -4004;
          sub_10032EC58(a3 + 8, (uint64_t)&unk_1008AA2A0);
          if (v37 && (void)v35)
          {
            *((void *)&v35 + 1) = v35;
            operator delete((void *)v35);
          }
          return;
        case 3:
          sub_10032DC08(a2, (uint64_t)&v25);
          int v34 = v25;
          if (!(_BYTE)v27) {
            goto LABEL_49;
          }
          sub_10033524C(a1[20], (unsigned __int16 *)&v25 + 2, 0, (uint64_t)&v22);
          int v34 = v22;
          if (!v24) {
            goto LABEL_49;
          }
          sub_10032C080((char *)&v22 + 4, &v30);
          goto LABEL_40;
        case 5:
          sub_10032DD14(a2, (uint64_t)&v22);
          int v34 = v22;
          if (!v24) {
            goto LABEL_49;
          }
          sub_100335598(a1[20], (uint64_t)&v22 + 4, 0, (uint64_t)&v30);
          int v34 = v30;
          if (!v32) {
            goto LABEL_49;
          }
          sub_10032C530((uint64_t)&v31, &v25);
          sub_10033A7F0(&v34, (uint64_t)&v25);
          if (!v29) {
            goto LABEL_49;
          }
          char v16 = __p;
          if (!__p) {
            goto LABEL_49;
          }
          char v27 = __p;
          goto LABEL_43;
        case 7:
          uint64_t v25 = sub_10032DE24(a1[12], a2);
          LODWORD(__p) = v12;
          int v34 = v25;
          if (!(_BYTE)v12) {
            goto LABEL_49;
          }
          uint64_t v22 = sub_100335978(a1[20], (_DWORD *)&v25 + 1);
          int v34 = v22;
          if ((v22 & 0xFF0000000000) == 0) {
            goto LABEL_49;
          }
          sub_10032CF50((char *)&v22 + 4, &v30);
          goto LABEL_40;
        case 8:
          unint64_t v30 = sub_10032DEDC(a1[12], (unsigned __int8 **)a2);
          int v34 = v30;
          if ((v30 & 0xFF0000000000) != 0) {
            int v34 = sub_1003364E8(a1[20], (unsigned char *)&v30 + 4);
          }
          goto LABEL_49;
        case 9:
          uint64_t v22 = sub_10032DF6C(a1[12], a2);
          LODWORD(v23) = v15;
          int v34 = v22;
          if (!(_BYTE)v15) {
            goto LABEL_49;
          }
          sub_100335C6C(a1[20], (int *)&v22 + 1, (uint64_t)&v25);
          int v34 = v25;
          if (!v28) {
            goto LABEL_49;
          }
          sub_10032D198((uint64_t)&__p, &v30);
          goto LABEL_40;
        case 0x12:
          uint64_t v22 = sub_10032E024(a1[12], a2);
          uint64_t v23 = v13;
          int v34 = v22;
          if ((v13 & 0xFF00000000) == 0) {
            goto LABEL_49;
          }
          sub_10033635C(a1[20], (uint64_t)&v22 + 4, (uint64_t)&v25);
          int v34 = v25;
          if (!v28) {
            goto LABEL_49;
          }
          sub_10032D30C((char *)&__p, &v30);
LABEL_40:
          sub_10033A7F0(&v34, (uint64_t)&v30);
          if (v32)
          {
            char v16 = (void *)v31.n128_u64[0];
            if (v31.n128_u64[0])
            {
              v31.n128_u64[1] = v31.n128_u64[0];
LABEL_43:
              operator delete(v16);
            }
          }
LABEL_49:
          if (v34)
          {
            uint64_t v25 = sub_10033B330(a1[21], v34);
            LODWORD(__p) = v18;
            int v34 = v25;
            if ((v18 & 0xFF000000) != 0)
            {
              sub_10032E0F0((char *)&v25 + 4, &v30);
              int v34 = v30;
              __n128 v17 = sub_10033AD6C((uint64_t)&v35, &v31);
              if (v32)
              {
                if (v31.n128_u64[0])
                {
                  v31.n128_u64[1] = v31.n128_u64[0];
                  operator delete((void *)v31.n128_u64[0]);
                }
              }
            }
            uint64_t v19 = a1[27];
            if (v19)
            {
              if (v34)
              {
                (*(void (**)(uint64_t, __n128))(*(void *)v19 + 56))(v19, v17);
              }
              else
              {
                if (!BYTE3(__p)) {
                  __assert_rtn("processDCKMessage", "AlishaManager.cpp", 308, "evtGenResult.payload.has_value()");
                }
                (*(void (**)(uint64_t, char *, __n128))(*(void *)v19 + 48))(v19, (char *)&v25 + 4, v17);
              }
            }
          }
          uint64_t v20 = a1[18];
          int v21 = v37;
          if (v20 && v37)
          {
            (*(void (**)(uint64_t, long long *))(*(void *)v20 + 24))(v20, &v35);
            int v21 = v37;
          }
          *(_DWORD *)a3 = v34;
          *(unsigned char *)(a3 + 8) = 0;
          *(unsigned char *)(a3 + 32) = 0;
          if (v21)
          {
            *(_OWORD *)(a3 + 8) = v35;
            *(void *)(a3 + 24) = v36;
            uint64_t v36 = 0;
            long long v35 = 0uLL;
            *(unsigned char *)(a3 + 32) = 1;
          }
          break;
        default:
          goto LABEL_49;
      }
      return;
    }
    uint64_t v11 = a1[27];
    if (v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 56))(v11, 4294963293);
    }
    *(_DWORD *)a3 = -4003;
    uint64_t v10 = a3 + 8;
  }
  else
  {
    uint64_t v9 = a1[27];
    if (v9) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v9 + 56))(v9, v7);
    }
    *(_DWORD *)a3 = v7;
    uint64_t v10 = a3 + 8;
  }

  sub_10032EC58(v10, (uint64_t)&unk_1008AA2A0);
}

void sub_10033A710(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 56))
  {
    uint64_t v3 = *(void **)(v1 - 80);
    if (v3)
    {
      *(void *)(v1 - 72) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_10033A7F0(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  sub_10033AD6C((uint64_t)(a1 + 2), (__n128 *)(a2 + 8));
  return a1;
}

void sub_10033A824(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 144);
  if (v8) {
    (*(void (**)(uint64_t, unsigned int *))(*(void *)v8 + 32))(v8, a2);
  }
  sub_10032A38C(*(void *)(a1 + 112), a2, (uint64_t)&v13);
  *a4 = v13;
  sub_10032EC58((uint64_t)(a4 + 2), (uint64_t)&unk_1008AA2A0);
  if (v16)
  {
    sub_10032E5A8((uint64_t)&v14, &v10);
    *a4 = v10;
    sub_10033AD6C((uint64_t)(a4 + 2), &__p);
    if (v12 && __p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    int v9 = *(unsigned __int8 *)(a3 + 24);
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
    if (!v9) {
      *(unsigned char *)(a3 + 24) = 1;
    }
  }
}

void sub_10033A938(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32))
  {
    uint64_t v4 = *v2;
    if (*v2)
    {
      *(void *)(v1 + 16) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10033A95C(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = -1000;
  sub_10032EC58((uint64_t)(a3 + 2), (uint64_t)&unk_1008AA2A0);
  if ((a2 - 1) >= 5)
  {
    if (!a2)
    {
      int v10 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#alisha-mgr,SessionRequested timeout received", buf, 2u);
      }
      *a3 = 0;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 160);
    if (!v6) {
      return;
    }
    sub_100336760(v6, a2, (uint64_t)&v21);
    int v7 = v21;
    if (!v21)
    {
      *a3 = 0;
      if (!v24) {
        return;
      }
      if (v23 == 1)
      {
        sub_10032E0F0((char *)&v22, buf);
        *a3 = *(_DWORD *)buf;
        sub_10033AD6C((uint64_t)(a3 + 2), &__p);
      }
      else
      {
        if (v23) {
          __assert_rtn("processTimeoutEvent", "AlishaManager.cpp", 369, "false");
        }
        sub_10032CDE8(&v22, buf);
        *a3 = *(_DWORD *)buf;
        sub_10033AD6C((uint64_t)(a3 + 2), &__p);
      }
      goto LABEL_16;
    }
    uint64_t v8 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      sub_100336E68(a2, buf);
      int v11 = __p.n128_i8[15];
      char v12 = *(uint8_t **)buf;
      sub_100333FC8(v21, &v15);
      int v13 = buf;
      if (v11 < 0) {
        int v13 = v12;
      }
      if (v17 >= 0) {
        long long v14 = &v15;
      }
      else {
        long long v14 = v15;
      }
      *(_DWORD *)uint64_t v25 = 136315394;
      char v26 = v13;
      __int16 v27 = 2080;
      char v28 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#alisha-mgr,Processing timeout event %s returned non-successful status code %s", v25, 0x16u);
      if (v17 < 0) {
        operator delete(v15);
      }
      if (__p.n128_i8[15] < 0) {
        operator delete(*(void **)buf);
      }
      int v7 = v21;
    }
    uint64_t v15 = (void *)sub_10033B330(*(void *)(a1 + 168), v7);
    int v16 = v9;
    *a3 = v15;
    if ((v9 & 0xFF000000) != 0)
    {
      sub_10032E0F0((char *)&v15 + 4, buf);
      *a3 = *(_DWORD *)buf;
      sub_10033AD6C((uint64_t)(a3 + 2), &__p);
LABEL_16:
      if (v20)
      {
        if (__p.n128_u64[0])
        {
          __p.n128_u64[1] = __p.n128_u64[0];
          operator delete((void *)__p.n128_u64[0]);
        }
      }
    }
  }
}

void sub_10033AC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_100012C10(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033AC90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    sub_1004313E0();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 32);

  return v2();
}

uint64_t sub_10033ACE8(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#alisha-mgr,handleUWBSystemError", v5, 2u);
  }
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3) {
    sub_10032A344(v3);
  }
  sub_100056AD4((void *)(a1 + 176));
  return 0;
}

__n128 sub_10033AD6C(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      result.n128_u64[0] = sub_100150500(a1, a2).n128_u64[0];
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void sub_10033AE08()
{
}

void *sub_10033AE1C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_100861970;
  result[1] = v3;
  return result;
}

uint64_t sub_10033AE64(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_100861970;
  a2[1] = v2;
  return result;
}

void sub_10033AE90(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 8);
  if (!v4[3]) {
    sub_10043140C();
  }
  uint64_t v5 = *a2;
  if (v4[10])
  {
    sub_100339A58(*(void *)(a1 + 8), (uint64_t)v19);
    if (v22)
    {
      if (__p)
      {
        int v21 = __p;
        operator delete(__p);
      }
    }
  }
  uint64_t v6 = v4[3];
  if (!v6) {
    sub_100027894();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v6 + 48))(v16);
  int v7 = v16[0];
  if (v18) {
    int v8 = 0;
  }
  else {
    int v8 = -1004;
  }
  if (!LODWORD(v16[0])) {
    int v7 = v8;
  }
  if (v7)
  {
    *(_DWORD *)a3 = v7;
LABEL_14:
    *(unsigned char *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    goto LABEL_15;
  }
  if (!v18) {
    sub_10000AE44();
  }
  uint64_t v9 = v16[1];
  int v10 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = (std::__shared_weak_count *)v4[11];
  v4[10] = v9;
  void v4[11] = v10;
  if (v11)
  {
    sub_10001A970(v11);
    uint64_t v9 = v4[10];
  }
  if (!v9)
  {
    *(_DWORD *)a3 = -1013;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9, v5);
  if (*(_DWORD *)a3)
  {
    sub_100339A58((uint64_t)v4, (uint64_t)v12);
    if (v15 && v13)
    {
      long long v14 = v13;
      operator delete(v13);
    }
  }
  else
  {
    v12[0] = (*(uint64_t (**)(void))(*(void *)v4[10] + 16))(v4[10]);
    sub_100338F54((uint64_t)(v4 + 22), v12, v12);
  }
LABEL_15:
  if (v18)
  {
    if (v17) {
      sub_10001A970(v17);
    }
  }
}

void sub_10033B064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21)
{
  if (a21)
  {
    if (a20) {
      sub_10001A970(a20);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033B088(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10033B0C8()
{
}

void sub_10033B0D8()
{
}

__n128 sub_10033B0EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1008619F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10033B140(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1008619F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10033B178(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_10033B1A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033B1E0()
{
}

void sub_10033B1F0()
{
}

__n128 sub_10033B204(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100861AA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10033B258(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100861AA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10033B290(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = (uint64_t (*)(void *, void, void))a1[1];
  uint64_t v5 = (void *)(a1[3] + (v3 >> 1));
  if (v3) {
    uint64_t v4 = *(uint64_t (**)(void *, void, void))(*v5 + v4);
  }
  return v4(v5, *a2, *a3);
}

uint64_t sub_10033B2C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033B300()
{
}

uint64_t sub_10033B30C()
{
  return __cxa_atexit((void (*)(void *))sub_1003395CC, &unk_1008AA2A0, (void *)&_mh_execute_header);
}

uint64_t sub_10033B330(uint64_t a1, int a2)
{
  if (a2 <= -3014)
  {
    if ((a2 + 4020) < 0x15)
    {
      uint64_t v3 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100333FC8(a2, v41);
        int v4 = v42;
        uint64_t v5 = (void **)v41[0];
        sub_10032B530(255, __p);
        uint64_t v6 = v41;
        if (v4 < 0) {
          uint64_t v6 = v5;
        }
        if (v45 >= 0) {
          int v7 = __p;
        }
        else {
          int v7 = *(unsigned char **)__p;
        }
        *(_DWORD *)long long buf = 136315394;
        uint64_t v47 = v6;
        __int16 v48 = 2080;
        long long v49 = v7;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
        if (v45 < 0) {
          operator delete(*(void **)__p);
        }
        if (v42 < 0) {
          operator delete(v41[0]);
        }
      }
      LODWORD(v43) = 0;
      unsigned __int16 v8 = -255;
LABEL_14:
      LODWORD(v9) = v8 | 0x10000;
      goto LABEL_90;
    }
    goto LABEL_83;
  }
  if (a2 <= -2021)
  {
    char v16 = a2 - 59;
    if ((a2 + 3013) <= 0xD)
    {
      if (((1 << v16) & 0x3070) != 0)
      {
        int v23 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          sub_100333FC8(a2, v41);
          int v24 = v42;
          uint64_t v25 = (void **)v41[0];
          sub_10032B56C(4, __p);
          char v26 = v41;
          if (v24 < 0) {
            char v26 = v25;
          }
          if (v45 >= 0) {
            __int16 v27 = __p;
          }
          else {
            __int16 v27 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 136315394;
          uint64_t v47 = v26;
          __int16 v48 = 2080;
          long long v49 = v27;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
          if (v45 < 0) {
            operator delete(*(void **)__p);
          }
          if (v42 < 0) {
            operator delete(v41[0]);
          }
        }
        LODWORD(v43) = 0;
        unsigned int v22 = 67108866;
        goto LABEL_54;
      }
      if (((1 << v16) & 0x381) != 0)
      {
        char v17 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          sub_100333FC8(a2, v41);
          int v18 = v42;
          uint64_t v19 = (void **)v41[0];
          sub_10032B56C(6, __p);
          char v20 = v41;
          if (v18 < 0) {
            char v20 = v19;
          }
          if (v45 >= 0) {
            int v21 = __p;
          }
          else {
            int v21 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 136315394;
          uint64_t v47 = v20;
          __int16 v48 = 2080;
          long long v49 = v21;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
          if (v45 < 0) {
            operator delete(*(void **)__p);
          }
          if (v42 < 0) {
            operator delete(v41[0]);
          }
        }
        LODWORD(v43) = 0;
        unsigned int v22 = 100663298;
LABEL_54:
        unint64_t v9 = (unint64_t)&_mh_execute_header & 0xFFFFFFFFFFFFLL | v22 | 0x100000000000000;
        goto LABEL_90;
      }
      if (a2 == -3012) {
        goto LABEL_72;
      }
    }
LABEL_83:
    char v38 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      sub_100333FC8(a2, v41);
      int v39 = v42 >= 0 ? v41 : (void **)v41[0];
      *(_DWORD *)__n128 __p = 136315138;
      *(void *)&__p[4] = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Passthrough of status code %s", __p, 0xCu);
      if (v42 < 0) {
        operator delete(v41[0]);
      }
    }
    LODWORD(v9) = 0;
    LODWORD(v43) = a2;
    goto LABEL_90;
  }
  if ((a2 + 2020) <= 0x12)
  {
    int v10 = 1 << (a2 - 28);
    if ((v10 & 0x78001) != 0)
    {
      int v11 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100333FC8(a2, v41);
        int v12 = v42;
        int v13 = (void **)v41[0];
        sub_10032B530(2, __p);
        long long v14 = v41;
        if (v12 < 0) {
          long long v14 = v13;
        }
        if (v45 >= 0) {
          char v15 = __p;
        }
        else {
          char v15 = *(unsigned char **)__p;
        }
        *(_DWORD *)long long buf = 136315394;
        uint64_t v47 = v14;
        __int16 v48 = 2080;
        long long v49 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
        if (v45 < 0) {
          operator delete(*(void **)__p);
        }
        if (v42 < 0) {
          operator delete(v41[0]);
        }
      }
      LODWORD(v43) = 0;
      unsigned __int16 v8 = 513;
      goto LABEL_14;
    }
    if ((v10 & 0x1010) != 0)
    {
      char v28 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100333FC8(a2, v41);
        int v29 = v42;
        unint64_t v30 = (void **)v41[0];
        sub_10032B530(133, __p);
        __n128 v31 = v41;
        if (v29 < 0) {
          __n128 v31 = v30;
        }
        if (v45 >= 0) {
          char v32 = __p;
        }
        else {
          char v32 = *(unsigned char **)__p;
        }
        *(_DWORD *)long long buf = 136315394;
        uint64_t v47 = v31;
        __int16 v48 = 2080;
        long long v49 = v32;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
        if (v45 < 0) {
          operator delete(*(void **)__p);
        }
        if (v42 < 0) {
          operator delete(v41[0]);
        }
      }
      LODWORD(v43) = 0;
      unsigned __int16 v8 = -31487;
      goto LABEL_14;
    }
  }
  if ((a2 - 54) > 0x15 || ((1 << (a2 - 54)) & 0x220001) == 0)
  {
    if (!a2) {
      sub_100431438();
    }
    goto LABEL_83;
  }
LABEL_72:
  char v33 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100333FC8(a2, v41);
    int v34 = v42;
    long long v35 = (void **)v41[0];
    sub_10032B56C(1, __p);
    uint64_t v36 = v41;
    if (v34 < 0) {
      uint64_t v36 = v35;
    }
    if (v45 >= 0) {
      unsigned __int8 v37 = __p;
    }
    else {
      unsigned __int8 v37 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v47 = v36;
    __int16 v48 = 2080;
    long long v49 = v37;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#alisha-dck-evt,Got internal status code %s. Returning DCK sub-event code %s.", buf, 0x16u);
    if (v45 < 0) {
      operator delete(*(void **)__p);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
  }
  LODWORD(v43) = 0;
  LODWORD(v9) = 16777218;
LABEL_90:
  HIDWORD(v43) = v9;
  return v43;
}

void sub_10033B9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10033B9F4(uint64_t a1)
{
  *(_DWORD *)a1 = 65793;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 448) = 0;
  *(unsigned char *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 0;
  operator new();
}

void sub_10033BC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 + 528);
  sub_100320DD0(&a9);
  sub_10003AC1C(v12);
  sub_100320E74(v11, 0);
  if (*(unsigned char *)(v9 + 128))
  {
    long long v14 = *(void **)(v9 + 96);
    if (v14)
    {
      *(void *)(v9 + 104) = v14;
      operator delete(v14);
    }
  }
  sub_100320EFC(v10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10033BCCC(uint64_t result, double a2)
{
  *(double *)(result + 552) = a2;
  return result;
}

void sub_10033BCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 496);
  if (!v4
    || *(double *)a2 > *(double *)(*(void *)(*(void *)(a1 + 464)
                                             + (((unint64_t)(v4 + *(void *)(a1 + 488) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                                 + (((v4 + *(void *)(a1 + 488) - 1) & 0x1F) << 7)))
  {
    int v5 = *(_DWORD *)(a1 + 504);
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 80);
    uint64_t v6 = *(void *)(a2 + 88);
    *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 96);
    *(void *)(a1 + 512) = v6;
    double v7 = *(double *)a2;
    if (!*(unsigned char *)(a1 + 32) || *(double *)(a1 + 24) < v7)
    {
      *(double *)(a1 + 24) = v7;
      *(unsigned char *)(a1 + 32) = 1;
    }
    int v8 = *(_DWORD *)(a2 + 80);
    if (v5 == v8) {
      goto LABEL_19;
    }
    if (v8 == 2)
    {
      uint64_t v9 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      double v13 = *(double *)a2;
      *(_DWORD *)long long buf = 134217984;
      *(double *)&uint8_t buf[4] = v13;
      int v11 = "#sa_algo,VIO Tracking State changed to Normal at %f s";
    }
    else if (v8 == 1)
    {
      uint64_t v9 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      double v12 = *(double *)a2;
      *(_DWORD *)long long buf = 134217984;
      *(double *)&uint8_t buf[4] = v12;
      int v11 = "#sa_algo,VIO Tracking State changed to Limited at %f s";
    }
    else
    {
      if (v8) {
        goto LABEL_19;
      }
      uint64_t v9 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      double v10 = *(double *)a2;
      *(_DWORD *)long long buf = 134217984;
      *(double *)&uint8_t buf[4] = v10;
      int v11 = "#sa_algo,VIO Tracking State changed to Not Available at %f s";
    }
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
LABEL_19:
    sub_10033C1DC(a1, a2);
    int v14 = *(_DWORD *)(a2 + 80);
    if (v5 == 2 && v14 != 2)
    {
      char v15 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo,VIO Tracking not normal anymore - resetting", buf, 2u);
      }
      if (*(unsigned char *)(a1 + 368))
      {
        char v16 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo,VIO Tracking not normal before the cached measurement can be interpolated - passing the cached measurement to the range filter without VIO", buf, 2u);
          if (!*(unsigned char *)(a1 + 368)) {
            sub_10000AE44();
          }
        }
        sub_10033C5DC(a1, a1 + 184);
      }
      sub_10033C77C(a1);
      int v14 = *(_DWORD *)(a2 + 80);
    }
    if (v14 == 2)
    {
      if (*(unsigned char *)(a2 + 84))
      {
        char v17 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          double v18 = *(double *)a2;
          if (*(unsigned char *)(a2 + 85)) {
            uint64_t v19 = "YES";
          }
          else {
            uint64_t v19 = "NO";
          }
          *(_DWORD *)long long buf = 134218498;
          *(double *)&uint8_t buf[4] = v18;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "YES";
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#sa_algo,VIO reported relocalization event at %f s, MAJOR: %s, MINOR: %s - resetting", buf, 0x20u);
        }
        sub_10033C77C(a1);
      }
      else
      {
        if (*(unsigned char *)(a2 + 85))
        {
          char v20 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            double v21 = *(double *)a2;
            *(_DWORD *)long long buf = 134217984;
            *(double *)&uint8_t buf[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#sa_algo,VIO reported MINOR relocalization event at %f s", buf, 0xCu);
          }
        }
        uint64_t v22 = 0;
        float32x4_t v23 = *(float32x4_t *)(a2 + 16);
        float32x4_t v24 = *(float32x4_t *)(a2 + 32);
        float32x4_t v25 = *(float32x4_t *)(a2 + 48);
        float32x4_t v26 = *(float32x4_t *)(a2 + 64);
        long long v33 = xmmword_1004C1B10;
        *(_OWORD *)__n128 __p = xmmword_1004C1B20;
        long long v35 = xmmword_1004C1B30;
        long long v36 = xmmword_1004C1B40;
        do
        {
          *(float32x4_t *)&buf[v22 * 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)&__p[v22 - 2])), v24, (float32x2_t)__p[v22 - 2], 1), v25, *(float32x4_t *)&__p[v22 - 2], 2), v26, *(float32x4_t *)&__p[v22 - 2], 3);
          v22 += 2;
        }
        while (v22 != 8);
        long long v27 = *(_OWORD *)buf;
        long long v28 = *(_OWORD *)&buf[16];
        long long v29 = v38;
        long long v30 = v39;
        int v31 = *(_DWORD *)(a2 + 80);
        __int16 v32 = *(_WORD *)(a2 + 84);
        *(void *)long long buf = *(void *)a2;
        *(_OWORD *)&uint8_t buf[16] = v27;
        long long v38 = v28;
        long long v39 = v29;
        long long v40 = v30;
        int v41 = v31;
        __int16 v42 = v32;
        char v43 = 0;
        char v44 = 0;
        char v45 = 0;
        char v46 = 0;
        char v47 = 0;
        char v48 = 0;
        sub_10033C83C((void *)(a1 + 456), (long long *)buf);
        if (!*(unsigned char *)(a1 + 3))
        {
          sub_10035E9C0(*(void *)(a1 + 72), &v33, *(double *)buf, *((float *)&v40 + 1));
          sub_10033C8E4(a1 + 80, (uint64_t *)&v33);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
      }
    }
    sub_10033C968(a1);
    sub_10033D028(a1);
    sub_10033D6F0((void *)a1);
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100431464();
  }
}

void sub_10033C1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033C1DC(uint64_t result, uint64_t a2)
{
  double v3 = *(double *)a2;
  if (!*(unsigned char *)(result + 48) || v3 - *(double *)(result + 40) >= 0.2)
  {
    *(double *)(result + 40) = v3;
    *(unsigned char *)(result + 48) = 1;
    sub_1002363E4((uint64_t)v27);
    sub_100056628(v27, (uint64_t)"tracking state: ", 16);
    uint64_t v4 = *(int *)(a2 + 80);
    if (v4 < 3) {
      sub_100056628(v27, (uint64_t)off_100861C48[v4], qword_1004C1C08[v4]);
    }
    sub_100056628(v27, (uint64_t)", light intensity ", 18);
    if (*(unsigned char *)(a2 + 96))
    {
      uint64_t v5 = v27[0];
      *(_DWORD *)((char *)&v27[1] + *(void *)(v27[0] - 24)) = *(_DWORD *)((unsigned char *)&v27[1]
                                                                            + *(void *)(v27[0] - 24)) & 0xFFFFFEFB | 4;
      *(void *)((char *)&v27[2] + *(void *)(v5 - 24)) = 2;
      std::ostream::operator<<();
    }
    else
    {
      sub_100056628(v27, (uint64_t)"-", 1);
    }
    uint64_t v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = *(double *)a2;
      std::stringbuf::str();
      int v8 = v26 >= 0 ? &__p : (void **)__p;
      double v9 = *(float *)(a2 + 16);
      double v10 = *(float *)(a2 + 20);
      double v11 = *(float *)(a2 + 24);
      double v12 = *(float *)(a2 + 28);
      double v13 = *(float *)(a2 + 32);
      double v14 = *(float *)(a2 + 36);
      double v15 = *(float *)(a2 + 40);
      double v16 = *(float *)(a2 + 44);
      double v17 = *(float *)(a2 + 48);
      double v18 = *(float *)(a2 + 52);
      double v19 = *(float *)(a2 + 56);
      double v20 = *(float *)(a2 + 60);
      double v21 = *(float *)(a2 + 64);
      double v22 = *(float *)(a2 + 68);
      double v23 = *(float *)(a2 + 72);
      double v24 = *(float *)(a2 + 76);
      *(_DWORD *)long long buf = 134222338;
      double v30 = v7;
      __int16 v31 = 2080;
      __int16 v32 = v8;
      __int16 v33 = 2048;
      double v34 = v9;
      __int16 v35 = 2048;
      double v36 = v10;
      __int16 v37 = 2048;
      double v38 = v11;
      __int16 v39 = 2048;
      double v40 = v12;
      __int16 v41 = 2048;
      double v42 = v13;
      __int16 v43 = 2048;
      double v44 = v14;
      __int16 v45 = 2048;
      double v46 = v15;
      __int16 v47 = 2048;
      double v48 = v16;
      __int16 v49 = 2048;
      double v50 = v17;
      __int16 v51 = 2048;
      double v52 = v18;
      __int16 v53 = 2048;
      double v54 = v19;
      __int16 v55 = 2048;
      double v56 = v20;
      __int16 v57 = 2048;
      double v58 = v21;
      __int16 v59 = 2048;
      double v60 = v22;
      __int16 v61 = 2048;
      double v62 = v23;
      __int16 v63 = 2048;
      double v64 = v24;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#sa_algo,Pose timestamp: %f, %s, pose [%3.2f, %3.2f, %3.2f, %3.2f, ...\n\t%3.2f, %3.2f, %3.2f, %3.2f, ...\n\t%3.2f, %3.2f, %3.2f, %3.2f, ... \n\t%3.2f, %3.2f, %3.2f, %3.2f]", buf, 0xB6u);
      if (v26 < 0) {
        operator delete(__p);
      }
    }
    if (v28 < 0) {
      operator delete((void *)v27[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_10033C5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10023657C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10033C5DC(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a2 + 8);
  if (*(unsigned char *)(a1 + 176) && (double v5 = *(double *)(a1 + 168), v4 <= v5))
  {
    double v11 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      double v12 = *(float *)(a2 + 16);
      *(_DWORD *)long long buf = 134218496;
      *(double *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v4;
      *(_WORD *)&buf[22] = 2048;
      double v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#sa_algo,Not passing range measurement without VIO to range filter, range: %0.2f m, timestamp: %f s, range filter time: %f s", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v6 = (_OWORD *)(a1 + 144);
    double v7 = *(float *)(a2 + 16);
    *(void *)long long buf = *(void *)(a2 + 8);
    *(double *)&uint8_t buf[8] = v7;
    *(void *)&uint8_t buf[16] = 0x3FB999999999999ALL;
    LODWORD(v15) = 0;
    int v8 = *(unsigned __int8 *)(a1 + 3);
    double v9 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)double v13 = 134218240;
      *(double *)&v13[4] = v7;
      *(_WORD *)&_OWORD v13[12] = 2048;
      *(double *)&v13[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#sa_algo,Passing range measurement without VIO to range filter, range: %0.2f m, timestamp: %f s", v13, 0x16u);
    }
    sub_10035B1E0(*(void *)(a1 + 136), (double *)buf, v8 != 0, 1, (uint64_t)v13);
    long long v10 = *(_OWORD *)&v13[16];
    _OWORD *v6 = *(_OWORD *)v13;
    *(_OWORD *)(a1 + 160) = v10;
    *(unsigned char *)(a1 + 176) = 1;
  }
}

void sub_10033C77C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 368)) {
    *(unsigned char *)(a1 + 368) = 0;
  }
  uint64_t v2 = *(void ***)(a1 + 464);
  uint64_t v3 = *(void *)(a1 + 472);
  *(void *)(a1 + 496) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 472);
      uint64_t v2 = (void **)(*(void *)(a1 + 464) + 8);
      *(void *)(a1 + 464) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 16;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_10;
    }
    uint64_t v6 = 32;
  }
  *(void *)(a1 + 488) = v6;
LABEL_10:
  if (*(unsigned char *)(a1 + 128))
  {
    double v7 = *(void **)(a1 + 96);
    if (v7)
    {
      *(void *)(a1 + 104) = v7;
      operator delete(v7);
    }
    *(unsigned char *)(a1 + 128) = 0;
  }
  sub_10035EB84(*(void *)(a1 + 72));
  if (*(unsigned char *)(a1 + 448))
  {
    *(_DWORD *)(a1 + 408) = 0;
    if (*(unsigned char *)(a1 + 440)) {
      *(unsigned char *)(a1 + 440) = 0;
    }
  }
}

__n128 sub_10033C83C(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 4 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100341334(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + ((v7 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v7 & 0x1F) << 7);
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)unint64_t v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  __n128 result = (__n128)a2[4];
  long long v13 = a2[5];
  long long v14 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v14;
  *(__n128 *)(v8 + 64) = result;
  *(_OWORD *)(v8 + 80) = v13;
  ++a1[5];
  return result;
}

uint64_t sub_10033C8E4(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
  uint64_t v5 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 32) = a2[4];
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  *(void *)(a1 + 40) = a2[5];
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void sub_10033C968(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 448)) {
    return;
  }
  if (*(_DWORD *)(a1 + 408) != 1) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 496);
  if (!v2) {
    return;
  }
  unint64_t v3 = *(void *)(a1 + 488);
  unint64_t v4 = v3 >> 5;
  uint64_t v6 = *(void *)(a1 + 464);
  uint64_t v5 = *(void *)(a1 + 472);
  unint64_t v7 = (char *)(v6 + 8 * (v3 >> 5));
  if (v5 == v6)
  {
    uint64_t v8 = 0;
    unint64_t v11 = 0;
    long long v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
  }
  else
  {
    uint64_t v8 = *(void *)v7 + ((*(void *)(a1 + 488) & 0x1FLL) << 7);
    char v9 = v3 + v2;
    long long v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
    unint64_t v11 = *(void *)v10 + ((unint64_t)(v9 & 0x1F) << 7);
  }
  double v13 = *(double *)(a1 + 376);
  double v12 = *(double *)(a1 + 384);
  long double v14 = *(double *)(a1 + 392);
  long double v15 = *(double *)(a1 + 400);
  *(void *)long long buf = v6 + 8 * (v3 >> 5);
  *(void *)&uint8_t buf[8] = v8;
  if (v11 != v8)
  {
    uint64_t v16 = ((uint64_t)(v11 - *(void *)v10) >> 7) + 4 * (v10 - v7);
    uint64_t v17 = v8 - *(void *)v7;
    unint64_t v18 = v16 - (v17 >> 7);
    if (v16 != v17 >> 7)
    {
      do
      {
        unint64_t v19 = v18 >> 1;
        double v20 = sub_100342320((uint64_t)buf, v18 >> 1);
        if (v13 >= *v21)
        {
          double v22 = v21 + 16;
          if ((double *)((char *)v21 - *v20 + 128) == (double *)4096)
          {
            double v23 = (double *)v20[1];
            ++v20;
            double v22 = v23;
          }
          *(void *)long long buf = v20;
          *(void *)&uint8_t buf[8] = v22;
          unint64_t v19 = v18 + ~v19;
        }
        unint64_t v18 = v19;
      }
      while (v19);
      unint64_t v7 = *(char **)buf;
      uint64_t v8 = *(void *)&buf[8];
      unint64_t v3 = *(void *)(a1 + 488);
      uint64_t v6 = *(void *)(a1 + 464);
      uint64_t v5 = *(void *)(a1 + 472);
      unint64_t v4 = v3 >> 5;
    }
  }
  if (v5 == v6)
  {
    if (v8)
    {
      uint64_t v25 = 0;
      uint64_t v24 = *(void *)(a1 + 496);
      goto LABEL_20;
    }
LABEL_23:
    __int16 v31 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v49 = *(void *)(*(void *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7));
      *(_DWORD *)long long buf = 134218240;
      *(double *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v49;
      _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#sa_algo,AoA Measurement at %f s earlier than the first pose in history at %f s - skipping interpolation and marking impossible to interpolate", buf, 0x16u);
    }
    if (!*(unsigned char *)(a1 + 448)) {
      sub_10000AE44();
    }
    *(_DWORD *)(a1 + 408) = 0;
    goto LABEL_38;
  }
  if (*(void *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7) == v8) {
    goto LABEL_23;
  }
  uint64_t v24 = *(void *)(a1 + 496);
  uint64_t v25 = *(void *)(v6 + (((v24 + v3) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v24 + v3) & 0x1F) << 7);
LABEL_20:
  if (v25 != v8)
  {
    uint64_t v26 = v8 - *(void *)v7;
    uint64_t v27 = v26 >> 7;
    if (v26 < 129)
    {
      unint64_t v34 = 32 - v27;
      uint64_t v29 = *(void *)&v7[-8 * (v34 >> 5)];
      uint64_t v30 = ~v34 & 0x1FLL;
    }
    else
    {
      unint64_t v28 = v27 - 1;
      uint64_t v29 = *(void *)&v7[(v28 >> 2) & 0x3FFFFFFFFFFFFFF8];
      uint64_t v30 = v28 & 0x1F;
    }
    uint64_t v35 = v29 + (v30 << 7);
    float v36 = (v13 - *(double *)v35) / (*(double *)v8 - *(double *)v35);
    float v51 = v36;
    float32x4_t v54 = *(float32x4_t *)(v35 + 64);
    *(double *)v37.i64 = sub_10033F314(*(int8x16_t *)(v35 + 16), *(int8x16_t *)(v35 + 32), *(__n128 *)(v35 + 48));
    float32x4_t v52 = v37;
    float32x4_t v50 = *(float32x4_t *)(v8 + 64);
    *(double *)v38.i64 = sub_10033F314(*(int8x16_t *)(v8 + 16), *(int8x16_t *)(v8 + 32), *(__n128 *)(v8 + 48));
    float32x4_t v39 = vmulq_f32(v52, v38);
    float32x4_t v40 = (float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL);
    *(float32x2_t *)v39.f32 = vadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.f32);
    v39.f32[0] = vaddv_f32(*(float32x2_t *)v39.f32);
    v40.i64[0] = 0;
    sub_100340E88(v52, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v39, v40)), 0), (int8x16_t)vnegq_f32(v38), (int8x16_t)v38), v51);
    long long v53 = v41;
    uint64_t v71 = 0x100000003;
    long long v70 = xmmword_1004C1B50;
    uint64_t v69 = off_100861B38;
    v72 = &v73;
    sub_1003411F0(&v69, 3, 1);
    sub_100341240((uint64_t)&v69, 0.0);
    uint64_t v66 = 0x100000004;
    long long v65 = xmmword_1004C1B60;
    double v64 = off_100861BC8;
    uint64_t v67 = &v68;
    sub_1003411F0(&v64, 4, 1);
    sub_100341240((uint64_t)&v64, 0.0);
    unsigned int v42 = 0;
    float32x4_t v55 = vmlaq_n_f32(v54, vsubq_f32(v50, v54), v51);
    do
    {
      __int16 v43 = (double *)sub_1003416AC((uint64_t)&v69, v42);
      float32x4_t v57 = v55;
      *__int16 v43 = *(float *)((unint64_t)&v57 & 0xFFFFFFFFFFFFFFF3 | (4 * (v42 & 3)));
      double v44 = (double *)sub_1003416AC((uint64_t)&v64, v42);
      long long v56 = v53;
      *double v44 = *(float *)((unint64_t)&v56 & 0xFFFFFFFFFFFFFFF3 | (4 * (v42++ & 3)));
    }
    while (v42 != 3);
    *(double *)sub_1003416AC((uint64_t)&v64, 3u) = *((float *)&v53 + 3);
    sub_1003956B4((uint64_t)&v64, (uint64_t)buf);
    sub_1003955B0((uint64_t)v63, v12, v14, v15);
    *(void *)&double v75 = 0x100000003;
    *(_OWORD *)&v74[8] = xmmword_1004C1B50;
    *(void *)v74 = off_100861B38;
    *(void *)unint64_t v76 = &v76[8];
    sub_1003419A0((uint64_t)buf, (uint64_t)v63, (uint64_t)v74);
    uint64_t v60 = 0x100000003;
    double v58 = off_100861B38;
    long long v59 = xmmword_1004C1B50;
    __int16 v61 = &v62;
    sub_100342718((uint64_t)v74, (uint64_t)&v69, (uint64_t)&v58);
    __int16 v45 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v74 = 134219520;
      *(double *)&void v74[4] = v55.f32[0];
      *(_WORD *)&v74[12] = 2048;
      *(double *)&v74[14] = v55.f32[1];
      *(_WORD *)&v74[22] = 2048;
      double v75 = v55.f32[2];
      *(_WORD *)unint64_t v76 = 2048;
      *(double *)&v76[2] = *(float *)&v53;
      __int16 v77 = 2048;
      double v78 = *((float *)&v53 + 1);
      __int16 v79 = 2048;
      double v80 = *((float *)&v53 + 2);
      __int16 v81 = 2048;
      double v82 = *((float *)&v53 + 3);
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#sa_algo,AoA Measurement pos: [%3.2f, %3.2f, %3.2f] quat: [%3.2f, %3.2f, %3.2f, %3.2f]", v74, 0x48u);
    }
    double v46 = sub_1002A43C0((uint64_t)&v58, 0);
    double v47 = sub_1002A43C0((uint64_t)&v58, 1u);
    double v48 = sub_1002A43C0((uint64_t)&v58, 2u);
    if (!*(unsigned char *)(a1 + 448)) {
      sub_10000AE44();
    }
    if (*(unsigned char *)(a1 + 440)) {
      *(unsigned char *)(a1 + 440) = 0;
    }
    *(double *)(a1 + 416) = v46;
    *(double *)(a1 + 424) = v47;
    *(double *)(a1 + 432) = v48;
    *(unsigned char *)(a1 + 440) = 1;
    *(_DWORD *)(a1 + 408) = 2;
LABEL_38:
    sub_10033F154(a1);
    return;
  }
  __int16 v32 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v33 = *(void *)(*(void *)(v6 + (((v3 + v24 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v3 + v24 - 1) & 0x1F) << 7));
    *(_DWORD *)long long buf = 134218240;
    *(double *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v33;
    _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#sa_algo,AoA Measurement at %f s later than the last pose in history at %f s - skipping interpolation", buf, 0x16u);
  }
}

void sub_10033D028(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 368)) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 496);
  if (!v2) {
    return;
  }
  unint64_t v3 = *(void *)(a1 + 488);
  unint64_t v4 = v3 >> 5;
  uint64_t v6 = *(void *)(a1 + 464);
  uint64_t v5 = *(void *)(a1 + 472);
  unint64_t v7 = (char *)(v6 + 8 * (v3 >> 5));
  if (v5 == v6)
  {
    uint64_t v8 = 0;
    unint64_t v11 = 0;
    long long v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
  }
  else
  {
    uint64_t v8 = *(void *)v7 + ((*(void *)(a1 + 488) & 0x1FLL) << 7);
    char v9 = v3 + v2;
    long long v10 = (char *)(v6 + 8 * ((v3 + v2) >> 5));
    unint64_t v11 = *(void *)v10 + ((unint64_t)(v9 & 0x1F) << 7);
  }
  double v12 = *(double *)(a1 + 192);
  float v13 = *(float *)(a1 + 200);
  *(void *)long long buf = v6 + 8 * (v3 >> 5);
  *(void *)&uint8_t buf[8] = v8;
  if (v11 != v8)
  {
    uint64_t v14 = ((uint64_t)(v11 - *(void *)v10) >> 7) + 4 * (v10 - v7);
    uint64_t v15 = v8 - *(void *)v7;
    unint64_t v16 = v14 - (v15 >> 7);
    if (v14 != v15 >> 7)
    {
      do
      {
        unint64_t v17 = v16 >> 1;
        unint64_t v18 = sub_100342320((uint64_t)buf, v16 >> 1);
        if (v12 >= *v19)
        {
          double v20 = v19 + 16;
          if ((double *)((char *)v19 - *v18 + 128) == (double *)4096)
          {
            double v21 = (double *)v18[1];
            ++v18;
            double v20 = v21;
          }
          *(void *)long long buf = v18;
          *(void *)&uint8_t buf[8] = v20;
          unint64_t v17 = v16 + ~v17;
        }
        unint64_t v16 = v17;
      }
      while (v17);
      unint64_t v7 = *(char **)buf;
      uint64_t v8 = *(void *)&buf[8];
      unint64_t v3 = *(void *)(a1 + 488);
      uint64_t v6 = *(void *)(a1 + 464);
      uint64_t v5 = *(void *)(a1 + 472);
      unint64_t v4 = v3 >> 5;
    }
  }
  if (v5 == v6)
  {
    if (v8)
    {
      uint64_t v23 = 0;
      uint64_t v22 = *(void *)(a1 + 496);
LABEL_19:
      if (v23 == v8)
      {
        __int16 v31 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v32 = *(void *)(*(void *)(v6 + (((v3 + v22 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                          + (((v3 + v22 - 1) & 0x1F) << 7));
          *(_DWORD *)long long buf = 134218240;
          *(double *)&uint8_t buf[4] = v12;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v32;
          _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#sa_algo,Measurement at %f s later than the last pose in history at %f s - skipping interpolation", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v24 = v8 - *(void *)v7;
        uint64_t v25 = v24 >> 7;
        if (v24 < 129)
        {
          unint64_t v33 = 32 - v25;
          uint64_t v27 = &v7[-8 * (v33 >> 5)];
          uint64_t v28 = *(void *)v27;
          uint64_t v29 = ~v33 & 0x1FLL;
        }
        else
        {
          unint64_t v26 = v25 - 1;
          uint64_t v27 = &v7[8 * (v26 >> 5)];
          uint64_t v28 = *(void *)v27;
          uint64_t v29 = v26 & 0x1F;
        }
        uint64_t v34 = v28 + (v29 << 7);
        float v35 = (v12 - *(double *)v34) / (*(double *)v8 - *(double *)v34);
        float32x4_t v60 = *(float32x4_t *)(v34 + 64);
        float v62 = v35;
        *(double *)v36.i64 = sub_10033F314(*(int8x16_t *)(v34 + 16), *(int8x16_t *)(v34 + 32), *(__n128 *)(v34 + 48));
        float32x4_t v58 = v36;
        float32x4_t v59 = *(float32x4_t *)(v8 + 64);
        *(double *)v37.i64 = sub_10033F314(*(int8x16_t *)(v8 + 16), *(int8x16_t *)(v8 + 32), *(__n128 *)(v8 + 48));
        float32x4_t v38 = vmulq_f32(v58, v37);
        float32x4_t v39 = (float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL);
        *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32);
        v38.f32[0] = vaddv_f32(*(float32x2_t *)v38.f32);
        v39.i64[0] = 0;
        sub_100340E88(v58, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v38, v39)), 0), (int8x16_t)vnegq_f32(v37), (int8x16_t)v37), v62);
        int8x16_t v40 = (int8x16_t)vmlaq_n_f32(v60, vsubq_f32(v59, v60), v62);
        double v41 = *(float *)v40.i32;
        double v43 = *(float *)v42.i32;
        float64x2_t v61 = vcvtq_f64_f32((float32x2_t)vext_s8(*(int8x8_t *)v42.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), 4uLL));
        float64x2_t v63 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 4uLL));
        double v44 = *(float *)&v42.i32[3];
        __int16 v45 = qword_1008ABDE0;
        double v46 = v13;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134220032;
          *(double *)&uint8_t buf[4] = v46;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v12;
          *(_WORD *)&buf[22] = 2048;
          double v70 = v41;
          __int16 v71 = 2048;
          float64_t v72 = v63.f64[0];
          __int16 v73 = 2048;
          float64_t v74 = v63.f64[1];
          __int16 v75 = 2048;
          double v76 = v43;
          __int16 v77 = 2048;
          float64_t v78 = v61.f64[0];
          __int16 v79 = 2048;
          float64_t v80 = v61.f64[1];
          __int16 v81 = 2048;
          double v82 = v44;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#sa_algo,Passing range measurement to batch filter and range filter, range: %0.2f m, timestamp: %f s, device position:[%0.2f,%0.2f,%0.2f], device quat:[%0.2f,%0.2f,%0.2f,%0.2f]", buf, 0x5Cu);
        }
        *(double *)long long buf = v12;
        *(double *)&uint8_t buf[8] = v46;
        *(void *)&uint8_t buf[16] = 0x3FB999999999999ALL;
        LODWORD(v70) = 0;
        LOBYTE(v71) = 0;
        BYTE4(v82) = 0;
        float64x2_t v84 = v63;
        double v83 = v41;
        double v85 = v43;
        float64x2_t v86 = v61;
        double v87 = v44;
        if (*(unsigned char *)(a1 + 176))
        {
          char v47 = v12 - *(double *)(a1 + 168) <= 2.0;
          double v48 = *(double *)(a1 + 152);
        }
        else
        {
          char v47 = 0;
          double v48 = 0.0;
        }
        sub_1003608F0(*(void *)(a1 + 72), v47, v48);
        sub_100340FF4(v64, (uint64_t *)(a1 + 80));
        sub_1003608FC(*(void *)(a1 + 72), (uint64_t)buf, v68);
        sub_10033C8E4(a1 + 80, (uint64_t *)v68);
        if (*(void *)&v68[16])
        {
          *(void *)&v68[24] = *(void *)&v68[16];
          operator delete(*(void **)&v68[16]);
        }
        sub_10035A74C(*(void *)(a1 + 136), (uint64_t)buf, (uint64_t)v68);
        if (*(unsigned char *)(a1 + 176)) {
          *(unsigned char *)(a1 + 176) = 0;
        }
        long long v49 = *(_OWORD *)&v68[16];
        *(_OWORD *)(a1 + 144) = *(_OWORD *)v68;
        *(_OWORD *)(a1 + 160) = v49;
        *(unsigned char *)(a1 + 176) = 1;
        if (!v67) {
          goto LABEL_41;
        }
        if (!*(unsigned char *)(a1 + 128)) {
          sub_10000AE44();
        }
        if (v64[0] != *(_DWORD *)(a1 + 80)) {
LABEL_41:
        }
          sub_100340630(a1);
        uint64_t v50 = *(void *)(a1 + 464);
        float v51 = (char *)(v50 + 8 * (*(void *)(a1 + 488) >> 5));
        if (*(void *)(a1 + 472) == v50) {
          uint64_t v52 = 0;
        }
        else {
          uint64_t v52 = *(void *)v51 + ((*(void *)(a1 + 488) & 0x1FLL) << 7);
        }
        sub_100340838((void *)(a1 + 456), v51, v52, v27, v34);
        long long v53 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v54 = *(void *)(a1 + 464);
          uint64_t v55 = *(void *)(*(void *)(v54 + ((*(void *)(a1 + 488) >> 2) & 0x3FFFFFFFFFFFFFF8))
                          + ((*(void *)(a1 + 488) & 0x1FLL) << 7));
          uint64_t v56 = *(void *)(*(void *)(v54
                                      + (((unint64_t)(*(void *)(a1 + 488) + *(void *)(a1 + 496) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                          + (((*(void *)(a1 + 488) + *(void *)(a1 + 496) - 1) & 0x1F) << 7));
          *(_DWORD *)uint64_t v68 = 134218240;
          *(void *)&v68[4] = v55;
          *(_WORD *)&v68[12] = 2048;
          *(void *)&v68[14] = v56;
          _os_log_debug_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "#sa_algo,Pose history now between %f s and %f s", v68, 0x16u);
        }
        if (*(unsigned char *)(a1 + 368)) {
          *(unsigned char *)(a1 + 368) = 0;
        }
        if (v67)
        {
          if (v65)
          {
            uint64_t v66 = v65;
            operator delete(v65);
          }
        }
      }
      return;
    }
  }
  else if (*(void *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7) != v8)
  {
    uint64_t v22 = *(void *)(a1 + 496);
    uint64_t v23 = *(void *)(v6 + (((v22 + v3) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v22 + v3) & 0x1F) << 7);
    goto LABEL_19;
  }
  uint64_t v30 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    uint64_t v57 = *(void *)(*(void *)(v6 + 8 * v4) + ((v3 & 0x1F) << 7));
    *(_DWORD *)long long buf = 134218240;
    *(double *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v57;
    _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#sa_algo,Measurement at %f s earlier than the first pose in history at %f s - skipping interpolation and removing range measurement", buf, 0x16u);
  }
  if (*(unsigned char *)(a1 + 368)) {
    *(unsigned char *)(a1 + 368) = 0;
  }
}

void sub_10033D6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (a24)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10033D6F0(void *a1)
{
  uint64_t v1 = a1[62];
  if (v1)
  {
    unint64_t v3 = a1[61];
    uint64_t v4 = a1[58];
    unint64_t v5 = v3 >> 5;
    double v6 = *(double *)(*(void *)(v4 + (((v1 + v3 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v1 + v3 - 1) & 0x1F) << 7))
       - *(double *)(*(void *)(v4 + 8 * (v3 >> 5)) + ((v3 & 0x1F) << 7));
    if (v6 > 5.0)
    {
      unint64_t v7 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unint64_t v33 = 134217984;
        *(double *)&_DWORD v33[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo,Pose history spans %f s - pruning down past poses from history", v33, 0xCu);
        unint64_t v3 = a1[61];
        uint64_t v1 = a1[62];
        uint64_t v4 = a1[58];
        unint64_t v5 = v3 >> 5;
      }
      unint64_t v8 = v3 + v1;
      unint64_t v9 = v3 + v1 - 1;
      uint64_t v10 = *(void *)(v4 + ((v9 >> 2) & 0x3FFFFFFFFFFFFFF8));
      unint64_t v11 = (v9 & 0x1F) << 7;
      double v12 = (char *)(v4 + 8 * v5);
      uint64_t v13 = a1[59];
      if (v13 == v4)
      {
        uint64_t v14 = 0;
        unint64_t v16 = 0;
        uint64_t v15 = (char *)(v4 + 8 * (v8 >> 5));
      }
      else
      {
        uint64_t v14 = *(void *)v12 + ((v3 & 0x1F) << 7);
        uint64_t v15 = (char *)(v4 + 8 * (v8 >> 5));
        unint64_t v16 = *(void *)v15 + ((v8 & 0x1F) << 7);
      }
      double v17 = *(double *)(v10 + v11);
      *(void *)unint64_t v33 = v4 + 8 * v5;
      *(void *)&v33[8] = v14;
      if (v16 != v14)
      {
        uint64_t v18 = ((uint64_t)(v16 - *(void *)v15) >> 7) + 4 * (v15 - v12);
        uint64_t v19 = v14 - *(void *)v12;
        unint64_t v20 = v18 - (v19 >> 7);
        if (v18 != v19 >> 7)
        {
          double v21 = v17 + -2.0;
          do
          {
            unint64_t v22 = v20 >> 1;
            uint64_t v23 = sub_100342320((uint64_t)v33, v20 >> 1);
            if (v21 >= *v24)
            {
              uint64_t v25 = v24 + 16;
              if ((double *)((char *)v24 - *v23 + 128) == (double *)4096)
              {
                unint64_t v26 = (double *)v23[1];
                ++v23;
                uint64_t v25 = v26;
              }
              *(void *)unint64_t v33 = v23;
              *(void *)&v33[8] = v25;
              unint64_t v22 = v20 + ~v22;
            }
            unint64_t v20 = v22;
          }
          while (v22);
          double v12 = *(char **)v33;
          uint64_t v14 = *(void *)&v33[8];
          unint64_t v3 = a1[61];
          uint64_t v4 = a1[58];
          uint64_t v13 = a1[59];
          unint64_t v5 = v3 >> 5;
        }
      }
      uint64_t v27 = (char *)(v4 + 8 * v5);
      if (v13 == v4) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = *(void *)v27 + ((v3 & 0x1F) << 7);
      }
      sub_100340838(a1 + 57, v27, v28, v12, v14);
      uint64_t v29 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = a1[58];
        uint64_t v31 = *(void *)(*(void *)(v30 + ((a1[61] >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((a1[61] & 0x1FLL) << 7));
        uint64_t v32 = *(void *)(*(void *)(v30 + (((unint64_t)(a1[61] + a1[62] - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                        + (((a1[61] + a1[62] - 1) & 0x1F) << 7));
        *(_DWORD *)unint64_t v33 = 134218240;
        *(void *)&_DWORD v33[4] = v31;
        *(_WORD *)&v33[12] = 2048;
        *(void *)&v33[14] = v32;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#sa_algo,Pose history now between %f s and %f s", v33, 0x16u);
      }
    }
  }
}

void sub_10033D9C8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 181))
  {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 180);
    if (v4 <= 2)
    {
      uint64_t v15 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v38 = 67109120;
      LODWORD(v39) = v4;
      unint64_t v16 = "#sa_algo,mmsValStatus %d does not pass check, rejecting range result event";
      double v17 = v15;
      uint32_t v18 = 8;
      goto LABEL_8;
    }
  }
  int v5 = *(unsigned __int8 *)(a2 + 36);
  uint64_t v6 = qword_1008ABDE0;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (!v7) {
      goto LABEL_12;
    }
    uint64_t v8 = *(void *)(a2 + 8);
    double v9 = *(float *)(a2 + 16);
    double v10 = *(float *)(a2 + 24);
    double v11 = *(float *)(a2 + 28);
    int v38 = 134218752;
    uint64_t v39 = v8;
    __int16 v40 = 2048;
    double v41 = v9;
    __int16 v42 = 2048;
    double v43 = v10;
    __int16 v44 = 2048;
    double v45 = v11;
    double v12 = "#sa_algo,Received range result at %f s, distance: %0.2f m, az: %3.2f rad, el: %3.2f rad";
    uint64_t v13 = v6;
    uint32_t v14 = 42;
  }
  else
  {
    if (!v7) {
      goto LABEL_12;
    }
    uint64_t v19 = *(void *)(a2 + 8);
    double v20 = *(float *)(a2 + 16);
    int v38 = 134218240;
    uint64_t v39 = v19;
    __int16 v40 = 2048;
    double v41 = v20;
    double v12 = "#sa_algo,Received range result at %f s, distance: %0.2f m";
    uint64_t v13 = v6;
    uint32_t v14 = 22;
  }
  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v38, v14);
LABEL_12:
  if (!*(unsigned char *)(a1 + 16))
  {
    *(void *)(a1 + 8) = *(void *)a2;
    *(unsigned char *)(a1 + 16) = 1;
  }
  if (*(unsigned char *)(a1 + 3))
  {
    double v21 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v38) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#sa_algo,Target is moving - passing range measurement to range filter without VIO", (uint8_t *)&v38, 2u);
    }
    sub_10033C5DC(a1, a2);
    goto LABEL_29;
  }
  if (*(_DWORD *)(a1 + 504) == 2)
  {
    if (!*(void *)(a1 + 496))
    {
      uint64_t v23 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v38) = 0;
        uint64_t v24 = "#sa_algo,Pose history is empty - passing range measurement to range filter without VIO";
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    double v22 = *(double *)(a2 + 8);
    if (v22 < *(double *)(*(void *)(*(void *)(a1 + 464) + ((*(void *)(a1 + 488) >> 2) & 0x3FFFFFFFFFFFFFF8))
                         + ((*(void *)(a1 + 488) & 0x1FLL) << 7)))
    {
      uint64_t v23 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v38) = 0;
        uint64_t v24 = "#sa_algo,Measurement earlier than the first pose in history - passing range measurement to range filter without VIO";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v38, 2u);
        goto LABEL_28;
      }
      goto LABEL_28;
    }
    if (!*(unsigned char *)(a1 + 368))
    {
LABEL_39:
      long long v29 = *(_OWORD *)a2;
      long long v30 = *(_OWORD *)(a2 + 16);
      long long v31 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 232) = v31;
      *(_OWORD *)(a1 + 184) = v29;
      *(_OWORD *)(a1 + 200) = v30;
      long long v32 = *(_OWORD *)(a2 + 64);
      long long v33 = *(_OWORD *)(a2 + 80);
      long long v34 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 296) = v34;
      *(_OWORD *)(a1 + 248) = v32;
      *(_OWORD *)(a1 + 264) = v33;
      long long v35 = *(_OWORD *)(a2 + 128);
      long long v36 = *(_OWORD *)(a2 + 144);
      long long v37 = *(_OWORD *)(a2 + 160);
      *(void *)(a1 + 360) = *(void *)(a2 + 176);
      *(_OWORD *)(a1 + 328) = v36;
      *(_OWORD *)(a1 + 344) = v37;
      *(_OWORD *)(a1 + 312) = v35;
      *(unsigned char *)(a1 + 368) = 1;
      sub_10033DDFC(a1, (float32x2_t *)a2, 1);
      sub_10033C968(a1);
      sub_10033D028(a1);
      goto LABEL_29;
    }
    double v26 = *(double *)(a1 + 192);
    uint64_t v27 = qword_1008ABDE0;
    BOOL v28 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
    if (v22 > v26)
    {
      if (v28)
      {
        LOWORD(v38) = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#sa_algo,Received a new measurement before the cached one can be interpolated - passing the cached measurement to the range filter without VIO", (uint8_t *)&v38, 2u);
        if (!*(unsigned char *)(a1 + 368)) {
          sub_10000AE44();
        }
      }
      sub_10033C5DC(a1, a1 + 184);
      if (*(unsigned char *)(a1 + 368)) {
        *(unsigned char *)(a1 + 368) = 0;
      }
      goto LABEL_39;
    }
    if (!v28) {
      return;
    }
    LOWORD(v38) = 0;
    unint64_t v16 = "#sa_algo,Measurement earlier than the cached measurement - rejecting range measurement";
    double v17 = v27;
    uint32_t v18 = 2;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v38, v18);
    return;
  }
  uint64_t v23 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v38) = 0;
    uint64_t v24 = "#sa_algo,VIO Tracking is not normal - passing range measurement to range filter without VIO";
    goto LABEL_27;
  }
LABEL_28:
  sub_10033C5DC(a1, a2);
  sub_10033DDFC(a1, (float32x2_t *)a2, 0);
LABEL_29:
  double v25 = *(double *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 32) || *(double *)(a1 + 24) < v25)
  {
    *(double *)(a1 + 24) = v25;
    *(unsigned char *)(a1 + 32) = 1;
  }
}

void sub_10033DDFC(uint64_t a1, float32x2_t *a2, int a3)
{
  if (a2[4].i8[4])
  {
    double v3 = a2[2].f32[0];
    *(float32x2_t *)(a1 + 376) = a2[1];
    *(double *)(a1 + 384) = v3;
    *(float64x2_t *)(a1 + 392) = vcvtq_f64_f32(a2[3]);
    *(_DWORD *)(a1 + 408) = a3;
    *(unsigned char *)(a1 + 416) = 0;
    *(unsigned char *)(a1 + 440) = 0;
    *(unsigned char *)(a1 + 448) = 1;
    sub_10033F154(a1);
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    sub_1004314DC();
  }
}

uint64_t sub_10033DE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)(a1 + 128))
    {
      uint64_t v4 = *(void *)(a1 + 85);
      *(void *)long long buf = *(void *)(a1 + 80);
      *(void *)&buf[5] = v4;
      *(void *)&uint8_t buf[16] = 0;
      *(void *)&long long v133 = 0;
      double v132 = 0.0;
      uint64_t v5 = (uint64_t)sub_100340E0C(&buf[16], *(const void **)(a1 + 96), *(void *)(a1 + 104), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3));
      *((void *)&v133 + 1) = *(void *)(a1 + 120);
      switch(*(_DWORD *)buf)
      {
        case 0:
        case 1:
        case 6:
          *(_DWORD *)a2 = 0;
          int v6 = 1;
          goto LABEL_7;
        case 2:
        case 3:
          *(_DWORD *)a2 = 0;
          int v6 = 256;
LABEL_7:
          *(_DWORD *)(a2 + 4) = v6;
          goto LABEL_8;
        case 4:
          *(void *)a2 = 0;
          goto LABEL_8;
        case 5:
          *(_OWORD *)v100 = **(_OWORD **)&buf[16];
          *(void *)&v100[16] = *(void *)(*(void *)&buf[16] + 16);
          v114 = 0;
          *(void *)&long long v115 = 0;
          DWORD2(v115) = 0;
          unint64_t v45 = *(void *)(a1 + 496) + *(void *)(a1 + 488) - 1;
          sub_10033EF20((float64x2_t *)v100, (float32x4_t *)(*(void *)(*(void *)(a1 + 464) + ((v45 >> 2) & 0x3FFFFFFFFFFFFFF8))+ ((v45 & 0x1F) << 7)), (uint64_t)&v114);
          double v46 = qword_1008ABDE0;
          uint64_t v5 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
          if (v5)
          {
            if (!*(unsigned char *)(a1 + 32)) {
              sub_10000AE44();
            }
            sub_100431798(a1, (float *)&v114, v130, v46);
          }
          if (!*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 32)) {
            sub_10000AE44();
          }
          uint64_t v47 = *(void *)(a1 + 8);
          uint64_t v48 = *(void *)(a1 + 24);
          int v49 = (int)v114;
          if (*(unsigned char *)(a2 + 192)) {
            *(unsigned char *)(a2 + 192) = 0;
          }
          *(void *)(a2 + 8) = v47;
          *(void *)(a2 + 16) = v48;
          *(_DWORD *)(a2 + 24) = v49;
          *(_DWORD *)(a2 + 28) = 1;
          *(unsigned char *)(a2 + 56) = 0;
          *(void *)(a2 + 32) = 0;
          *(void *)(a2 + 40) = 0;
          *(unsigned char *)(a2 + 60) = 0;
          *(unsigned char *)(a2 + 64) = 0;
          *(unsigned char *)(a2 + 68) = 0;
          *(void *)(a2 + 72) = 0;
          *(void *)(a2 + 80) = 0;
          *(_WORD *)(a2 + 88) = 0;
          *(_OWORD *)(a2 + 96) = 0u;
          *(_OWORD *)(a2 + 112) = 0u;
          *(_OWORD *)(a2 + 121) = 0u;
          *(unsigned char *)(a2 + 160) = 0;
          *(void *)(a2 + 176) = 0;
          *(void *)(a2 + 184) = 0;
          *(void *)(a2 + 168) = 0;
          *(unsigned char *)(a2 + 192) = 1;
          float v50 = *(float *)&v115;
          if (!*(unsigned char *)(a2 + 224)) {
            *(unsigned char *)(a2 + 224) = 1;
          }
          *(double *)(a2 + 216) = v50;
          if (BYTE8(v115))
          {
            *(double *)(a2 + 200) = *((float *)&v114 + 1) * 180.0 / 3.14159265;
            *(unsigned char *)(a2 + 208) = 1;
            *(_DWORD *)(a2 + 364) = 2;
            *(unsigned char *)(a2 + 368) = 1;
            uint64_t v5 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
            if (v5) {
              sub_10043172C();
            }
          }
          if (!*(unsigned char *)(a1 + 128)) {
            sub_10000AE44();
          }
          int v51 = *(_DWORD *)(a1 + 88);
          if (v51 == 2)
          {
            *(_DWORD *)a2 = 1;
            float v69 = *((float *)&v115 + 1);
            if (!*(unsigned char *)(a2 + 248)) {
              *(unsigned char *)(a2 + 248) = 1;
            }
            *(double *)(a2 + 240) = v69;
            double v70 = qword_1008ABDE0;
            uint64_t v5 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
            if (v5)
            {
              double v77 = *(double *)&v100[16];
              *(_DWORD *)v119 = 134218496;
              float64x2_t v87 = *(float64x2_t *)v100;
              long double v120 = *(double *)v100;
              *(_WORD *)v121 = 2048;
              *(void *)((unint64_t)v119 | 0xE) = *(void *)&v100[8];
              __int16 v122 = 2048;
              double v123 = v77;
              _os_log_debug_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "#sa_algo,Populating world position output with SA, object position is [%4.2f, %4.2f, %4.2f] m", v119, 0x20u);
              float64x2_t v71 = v87;
              double v72 = v77;
            }
            else
            {
              float64x2_t v71 = *(float64x2_t *)v100;
              double v72 = *(double *)&v100[16];
            }
            *(float32x2_t *)&v71.f64[0] = vcvt_f32_f64(v71);
            float v73 = v72;
            *(float *)&v71.f64[1] = v73;
            if (!*(unsigned char *)(a2 + 304)) {
              *(unsigned char *)(a2 + 304) = 1;
            }
            *(float64x2_t *)(a2 + 288) = v71;
            if (v69 >= 2.5)
            {
              int v74 = 2;
            }
            else if (v69 <= -2.5)
            {
              int v74 = 3;
            }
            else
            {
              int v74 = 1;
            }
            *(_DWORD *)(a2 + 232) = v74;
          }
          else
          {
            if (v51 == 1)
            {
              if (*((float *)&v115 + 1) > -2.5 && *((float *)&v115 + 1) < 2.5) {
                int v68 = 1;
              }
              else {
                int v68 = 4;
              }
              *(_DWORD *)(a2 + 232) = v68;
              *(_DWORD *)a2 = 0;
            }
            else
            {
              if (v51) {
                goto LABEL_8;
              }
              *(_DWORD *)a2 = 0;
              *(_DWORD *)(a2 + 232) = 0;
            }
            *(unsigned char *)(a2 + 6) = 1;
          }
LABEL_8:
          if (!*(unsigned char *)(a1 + 32)) {
            sub_10000AE44();
          }
          sub_10033EFF0(v5, (_DWORD *)(a2 + 232));
          if (*(void *)&buf[16])
          {
            double v132 = *(double *)&buf[16];
            operator delete(*(void **)&buf[16]);
          }
          break;
        default:
          goto LABEL_8;
      }
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  if (!*(unsigned char *)(a1 + 448)) {
    goto LABEL_85;
  }
  double v7 = *(double *)(a1 + 376);
  unsigned int v8 = *(_DWORD *)(a1 + 408);
  if (v8 < 2)
  {
    if (!*(unsigned char *)(a1 + 32)) {
      sub_10000AE44();
    }
    if (*(double *)(a1 + 24) - v7 < *(double *)(a1 + 552))
    {
      double v9 = *(double *)(a1 + 384);
      long double v10 = *(double *)(a1 + 392);
      long double v11 = *(double *)(a1 + 400);
      sub_1003955B0((uint64_t)buf, 1.0, v10, v11);
      double v12 = sub_1002A43C0((uint64_t)buf, 0);
      double v13 = sub_1002A43C0((uint64_t)buf, 1u);
      double v14 = sub_1002A43C0((uint64_t)buf, 2u);
      *(float *)&long long v15 = v12;
      float v16 = v13;
      float v17 = v14;
      float v79 = v16;
      float v81 = *(float *)&v15;
      long long v18 = v15;
      *((float *)&v18 + 1) = v16;
      float v84 = v17;
      *((float *)&v18 + 2) = v17;
      if (!*(unsigned char *)(a2 + 272)) {
        *(unsigned char *)(a2 + 272) = 1;
      }
      *(_OWORD *)(a2 + 256) = v18;
      uint64_t v19 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v119 = 134219264;
        long double v120 = v10 * 180.0 / 3.14159265;
        *(_WORD *)v121 = 2048;
        *(double *)&v121[2] = v11 * 180.0 / 3.14159265;
        __int16 v122 = 2048;
        double v123 = v7;
        __int16 v124 = 2048;
        double v125 = v81;
        __int16 v126 = 2048;
        double v127 = v79;
        __int16 v128 = 2048;
        double v129 = v84;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#sa_algo,Populating direction output from AoA meas without VIO, az %f deg, el %f deg, timestamp: %f s, direction [%4.3f, %4.3f, %4.3f]", v119, 0x3Eu);
      }
      if (!*(unsigned char *)(a2 + 192))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_10043157C();
        }
        if (!*(unsigned char *)(a1 + 16)) {
          sub_10000AE44();
        }
        uint64_t v20 = *(void *)(a1 + 8);
        if (*(unsigned char *)(a2 + 192)) {
          *(unsigned char *)(a2 + 192) = 0;
        }
        *(void *)(a2 + 8) = v20;
        *(double *)(a2 + 16) = v7;
        float v21 = v9;
        *(float *)(a2 + 24) = v21;
        *(_DWORD *)(a2 + 28) = 1;
        *(unsigned char *)(a2 + 56) = 0;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(unsigned char *)(a2 + 60) = 0;
        *(unsigned char *)(a2 + 64) = 0;
        *(unsigned char *)(a2 + 68) = 0;
        *(void *)(a2 + 72) = 0;
        *(void *)(a2 + 80) = 0;
        *(_WORD *)(a2 + 88) = 0;
        *(_OWORD *)(a2 + 96) = 0u;
        *(_OWORD *)(a2 + 112) = 0u;
        *(_OWORD *)(a2 + 121) = 0u;
        *(unsigned char *)(a2 + 160) = 0;
        *(void *)(a2 + 176) = 0;
        *(void *)(a2 + 184) = 0;
        *(void *)(a2 + 168) = 0;
        *(unsigned char *)(a2 + 192) = 1;
      }
      goto LABEL_85;
    }
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_1004315E8();
    }
    if (!v8)
    {
      double v41 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_49:
        if (*(unsigned char *)(a1 + 448)) {
          *(unsigned char *)(a1 + 448) = 0;
        }
        sub_10033F154(a1);
        goto LABEL_85;
      }
      if (!*(unsigned char *)(a1 + 32)) {
        sub_10000AE44();
      }
      uint64_t v42 = *(void *)(a1 + 24);
      *(_DWORD *)long long buf = 134218240;
      *(double *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v42;
      double v43 = "#sa_algo,Removing AoA measurement from cache, measurement time %f s is too stale compared to current time %f"
            " s and measurement can't be interpolated anymore.";
LABEL_48:
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, v43, buf, 0x16u);
      goto LABEL_49;
    }
    goto LABEL_85;
  }
  if (v8 != 2) {
    goto LABEL_85;
  }
  if (!*(unsigned char *)(a1 + 32)) {
    sub_10000AE44();
  }
  double v22 = *(double *)(a1 + 24);
  if (v22 - v7 >= 10.0)
  {
    double v41 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      *(double *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#sa_algo,Not populating direction or range output from AoA meas with VIO, measurement time %f s is too stale compared to current time %f s", buf, 0x16u);
      double v41 = qword_1008ABDE0;
    }
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    if (!*(unsigned char *)(a1 + 32)) {
      sub_10000AE44();
    }
    uint64_t v44 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 134218240;
    *(double *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v44;
    double v43 = "#sa_algo,Removing AoA measurement from cache, measurement time %f s is too stale compared to current time %f s"
          " and measurement is not usable anymore";
    goto LABEL_48;
  }
  float64x2_t v78 = *(float64x2_t *)(a1 + 416);
  double v23 = *(double *)(a1 + 432);
  int v24 = *(unsigned __int8 *)(a1 + 440);
  unint64_t v25 = *(void *)(a1 + 496) + *(void *)(a1 + 488) - 1;
  unint64_t v26 = *(void *)(*(void *)(a1 + 464) + ((v25 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v25 & 0x1F) << 7);
  long long v82 = *(_OWORD *)(v26 + 64);
  *(double *)&long long v27 = sub_10033F314(*(int8x16_t *)(v26 + 16), *(int8x16_t *)(v26 + 32), *(__n128 *)(v26 + 48));
  long long v85 = v27;
  uint64_t v106 = 0x100000003;
  long long v105 = xmmword_1004C1B50;
  v104 = off_100861B38;
  v107 = &v108;
  sub_1003411F0(&v104, 3, 1);
  sub_100341240((uint64_t)&v104, 0.0);
  uint64_t v101 = 0x100000004;
  *(_OWORD *)&v100[8] = xmmword_1004C1B60;
  *(void *)v100 = off_100861BC8;
  v102 = &v103;
  sub_1003411F0(v100, 4, 1);
  sub_100341240((uint64_t)v100, 0.0);
  for (unsigned int i = 0; i != 3; ++i)
  {
    long long v29 = (double *)sub_1003416AC((uint64_t)&v104, i);
    long long v89 = v82;
    *long long v29 = *(float *)((unint64_t)&v89 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
    long long v30 = (double *)sub_1003416AC((uint64_t)v100, i);
    long long v88 = v85;
    *long long v30 = *(float *)((unint64_t)&v88 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
  }
  *(double *)sub_1003416AC((uint64_t)v100, 3u) = *((float *)&v85 + 3);
  sub_1003956B4((uint64_t)v100, (uint64_t)v119);
  if (!v24) {
    sub_10000AE44();
  }
  uint64_t v97 = 0x100000003;
  v95 = off_100861B38;
  long long v96 = xmmword_1004C1B50;
  v98 = &v99;
  sub_1003411F0(&v95, 3, 1);
  sub_100341240((uint64_t)&v95, 0.0);
  *(float64_t *)sub_1003416AC((uint64_t)&v95, 0) = v78.f64[0];
  *(float64_t *)sub_1003416AC((uint64_t)&v95, 1u) = v78.f64[1];
  *(double *)sub_1003416AC((uint64_t)&v95, 2u) = v23;
  sub_100341794((uint64_t)buf, *(unsigned int *)v121, HIDWORD(v120));
  sub_1003416E8((uint64_t)v119, buf);
  uint64_t v116 = 0x100000003;
  long long v115 = xmmword_1004C1B50;
  v114 = off_100861B38;
  v117 = v118;
  sub_1003418A0((uint64_t)&v95, (uint64_t)&v104, (uint64_t)&v114);
  uint64_t v92 = 0x100000003;
  uint64_t v90 = off_100861B38;
  long long v91 = xmmword_1004C1B50;
  v93 = &v94;
  sub_1003419A0((uint64_t)buf, (uint64_t)&v114, (uint64_t)&v90);
  uint64_t v116 = 0x100000003;
  long long v115 = xmmword_1004C1B50;
  v114 = off_100861B38;
  v117 = v118;
  *(void *)&double v132 = 0x100000134;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B70;
  *(void *)long long buf = off_100861C10;
  *(void *)&long long v133 = (char *)&v133 + 8;
  uint64_t v111 = 0x100000003;
  long long v110 = xmmword_1004C1B50;
  v109 = off_100861B38;
  v112 = &v113;
  sub_100341B04((uint64_t)&v90, (uint64_t)&v114, (uint64_t)buf, (uint64_t)&v109, "2");
  double v32 = v31;
  if (v31 <= 0.001)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_1004316C0();
    }
  }
  else
  {
    double v33 = sub_1002A43C0((uint64_t)&v90, 0);
    double v34 = sub_1002A43C0((uint64_t)&v90, 1u);
    double v35 = sub_1002A43C0((uint64_t)&v90, 2u);
    *(float *)&long long v36 = v33 / v32;
    float v37 = v34 / v32;
    float v38 = v35 / v32;
    float v83 = v38;
    float v86 = *(float *)&v36;
    long long v39 = v36;
    float v80 = v37;
    *((float *)&v39 + 1) = v37;
    *((float *)&v39 + 2) = v38;
    if (!*(unsigned char *)(a2 + 272)) {
      *(unsigned char *)(a2 + 272) = 1;
    }
    *(_OWORD *)(a2 + 256) = v39;
    __int16 v40 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134218752;
      *(double *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v86;
      *(_WORD *)&buf[22] = 2048;
      double v132 = v80;
      LOWORD(v133) = 2048;
      *(double *)((char *)&v133 + 2) = v83;
      _os_log_debug_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#sa_algo,Populating direction output from AoA meas with VIO, timestamp: %f s, direction [%4.3f, %4.3f, %4.3f]", buf, 0x2Au);
    }
  }
  if (!*(unsigned char *)(a2 + 192))
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100431654();
    }
    if (!*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 32)) {
      sub_10000AE44();
    }
    uint64_t v52 = *(void *)(a1 + 8);
    uint64_t v53 = *(void *)(a1 + 24);
    if (*(unsigned char *)(a2 + 192)) {
      *(unsigned char *)(a2 + 192) = 0;
    }
    *(void *)(a2 + 8) = v52;
    *(void *)(a2 + 16) = v53;
    float v54 = v32;
    *(float *)(a2 + 24) = v54;
    *(_DWORD *)(a2 + 28) = 1;
    *(unsigned char *)(a2 + 56) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(unsigned char *)(a2 + 60) = 0;
    *(unsigned char *)(a2 + 64) = 0;
    *(unsigned char *)(a2 + 68) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(_WORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 121) = 0u;
    *(unsigned char *)(a2 + 160) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 168) = 0;
    *(unsigned char *)(a2 + 192) = 1;
  }
  if (!*(unsigned char *)(a2 + 304))
  {
    uint64_t v55 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134218496;
      *(float64_t *)&uint8_t buf[4] = v78.f64[0];
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(float64_t *)&buf[14] = v78.f64[1];
      *(_WORD *)&buf[22] = 2048;
      double v132 = v23;
      _os_log_debug_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "#sa_algo,Populating world position output from AoA meas with VIO, object position is [%4.2f, %4.2f, %4.2f] m", buf, 0x20u);
      *(float *)&long long v57 = v78.f64[0];
      float v75 = v78.f64[1];
      *(float *)&unsigned int v76 = v23;
      *((float *)&v57 + 1) = v75;
      *((void *)&v57 + 1) = __PAIR64__(HIDWORD(v78.f64[1]), v76);
      if (*(unsigned char *)(a2 + 304)) {
        goto LABEL_84;
      }
    }
    else
    {
      *(float32x2_t *)&long long v57 = vcvt_f32_f64(v78);
      *(float *)&unsigned int v56 = v23;
      *((void *)&v57 + 1) = __PAIR64__(HIDWORD(v78.f64[1]), v56);
    }
    *(unsigned char *)(a2 + 304) = 1;
LABEL_84:
    *(_OWORD *)(a2 + 288) = v57;
  }
LABEL_85:
  int v58 = *(unsigned __int8 *)(a2 + 192);
  if (*(unsigned char *)(a1 + 1))
  {
    if (*(unsigned char *)(a2 + 192))
    {
      int v58 = 1;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 176)) {
        return sub_10033F538(a1, a2);
      }
      if (!*(unsigned char *)(a1 + 32)) {
        sub_10000AE44();
      }
      double v59 = *(double *)(a1 + 168);
      double v60 = *(double *)(a1 + 24);
      if (v60 - v59 >= *(double *)(a1 + 552))
      {
        long long v65 = qword_1008ABDE0;
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          return sub_10033F538(a1, a2);
        }
        *(_DWORD *)long long buf = 134218240;
        *(double *)&uint8_t buf[4] = v59;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&buf[14] = v60;
        _os_log_debug_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "#sa_algo,Not populating range output with range filter, filter time %f s is too stale compared to current time %f s", buf, 0x16u);
        int v58 = *(unsigned __int8 *)(a2 + 192);
      }
      else
      {
        double v61 = *(double *)(a1 + 152);
        *(_DWORD *)(a2 + 364) = 3;
        *(unsigned char *)(a2 + 368) = 1;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100431510();
        }
        if (!*(unsigned char *)(a1 + 16)) {
          sub_10000AE44();
        }
        if (!*(unsigned char *)(a1 + 32)) {
          sub_10000AE44();
        }
        uint64_t v62 = *(void *)(a1 + 8);
        uint64_t v63 = *(void *)(a1 + 24);
        if (*(unsigned char *)(a2 + 192)) {
          *(unsigned char *)(a2 + 192) = 0;
        }
        *(void *)(a2 + 8) = v62;
        *(void *)(a2 + 16) = v63;
        float v64 = v61;
        *(float *)(a2 + 24) = v64;
        int v58 = 1;
        *(_DWORD *)(a2 + 28) = 1;
        *(unsigned char *)(a2 + 56) = 0;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(unsigned char *)(a2 + 60) = 0;
        *(unsigned char *)(a2 + 64) = 0;
        *(unsigned char *)(a2 + 68) = 0;
        *(void *)(a2 + 72) = 0;
        *(void *)(a2 + 80) = 0;
        *(_WORD *)(a2 + 88) = 0;
        *(_OWORD *)(a2 + 96) = 0u;
        *(_OWORD *)(a2 + 112) = 0u;
        *(_OWORD *)(a2 + 121) = 0u;
        *(unsigned char *)(a2 + 160) = 0;
        *(void *)(a2 + 176) = 0;
        *(void *)(a2 + 184) = 0;
        *(void *)(a2 + 168) = 0;
        *(unsigned char *)(a2 + 192) = 1;
      }
    }
  }
  if (v58 && !*(_DWORD *)a2 && *(_DWORD *)(a1 + 504) != 2 && *(unsigned char *)(a1 + 520) && *(double *)(a1 + 512) < 500.0) {
    *(unsigned char *)(a2 + 7) = 1;
  }
  return sub_10033F538(a1, a2);
}

void sub_10033EE94(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_10033EF20(float64x2_t *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v7 = *(float32x4_t *)a1;
  *(float32x2_t *)v7.f32 = vcvt_f32_f64(*a1);
  float32_t v4 = a1[1].f64[0];
  v7.f32[2] = v4;
  float32x4_t v5 = vsubq_f32(v7, a2[4]);
  float32x4_t v6 = vmulq_f32(v5, v5);
  v7.f32[0] = sqrtf(v6.f32[2] + v6.f32[0]);
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)a3 = sqrtf(v6.f32[2] + vaddv_f32(*(float32x2_t *)v6.f32));
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 12) = v5.i32[1];
  *(_DWORD *)(a3 + 8) = v7.i32[0];
  *(unsigned char *)(a3 + 16) = 1;
  if (v7.f32[0] <= 0.01)
  {
    *(unsigned char *)(a3 + 16) = 0;
  }
  else
  {
    v8.i32[0] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u32[0];
    v8.i32[1] = v5.i32[0];
    float32x2_t v12 = vdiv_f32(v8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0));
    float32x2_t v9 = (float32x2_t)sub_100340A70(a2);
    float32x2_t v11 = vmla_lane_f32(vmul_n_f32(v9, v12.f32[0]), v10, v12, 1);
    *(float *)(a3 + 4) = atan2f(v11.f32[1], v11.f32[0]);
  }
}

void sub_10033EFF0(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004317FC();
      }
      break;
    case 1:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100431868();
      }
      break;
    case 2:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004318D4();
      }
      break;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100431940();
      }
      break;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004319AC();
      }
      break;
    default:
      return;
  }
}

void *sub_10033F134(void *result)
{
  void *result = off_100853598;
  return result;
}

void sub_10033F154(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 448))
  {
    int v2 = *(_DWORD *)(a1 + 408);
    uint64_t v4 = *(void *)(a1 + 416);
    uint64_t v3 = *(void *)(a1 + 424);
    uint64_t v5 = *(void *)(a1 + 432);
    int v6 = *(unsigned __int8 *)(a1 + 440);
    float32x4_t v7 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100431B1C((void *)a1, v7);
    }
    if (v2 == 2)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100431AE8();
      }
    }
    else if (v2 == 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100431AB4();
      }
    }
    else if (!v2 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      sub_100431A80();
    }
    float32x2_t v8 = qword_1008ABDE0;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      if (v9)
      {
        int v10 = 134218496;
        uint64_t v11 = v4;
        __int16 v12 = 2048;
        uint64_t v13 = v3;
        __int16 v14 = 2048;
        uint64_t v15 = v5;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#sa_algo,AoA cache: world position [%3.2f, %3.2f, %3.2f] m", (uint8_t *)&v10, 0x20u);
      }
    }
    else if (v9)
    {
      sub_100431A4C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    sub_100431A18();
  }
}

double sub_10033F314(int8x16_t a1, int8x16_t a2, __n128 a3)
{
  float v3 = a3.n128_f32[2] + (float)(*(float *)a1.i32 + *(float *)&a2.i32[1]);
  if (v3 >= 0.0)
  {
    float v12 = sqrtf(v3 + 1.0);
    float32x2_t v13 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12));
    float32x2_t v14 = vmul_f32(v13, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12), v13));
    float32x2_t v24 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), (int32x2_t)a3.n128_u64[0]), (float32x2_t)vext_s8((int8x8_t)a3.n128_u64[0], (int8x8_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), 4uLL)), vmul_f32(v14, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v12 + v12), v14)).f32[0]);
  }
  else if (*(float *)a1.i32 < *(float *)&a2.i32[1] || *(float *)a1.i32 < a3.n128_f32[2])
  {
    float v5 = 1.0 - *(float *)a1.i32;
    if (*(float *)&a2.i32[1] >= a3.n128_f32[2])
    {
      float v25 = sqrtf(*(float *)&a2.i32[1] + (float)(v5 - a3.n128_f32[2]));
      *(float *)&unsigned int v26 = v25 + v25;
      float32x2_t v27 = vrecpe_f32((float32x2_t)v26);
      float32x2_t v28 = vmul_f32(v27, vrecps_f32((float32x2_t)v26, v27));
      v29.i32[0] = vmul_f32(v28, vrecps_f32((float32x2_t)v26, v28)).u32[0];
      v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.i8, 1), *(float32x2_t *)a2.i8).u32[0];
      v28.i32[1] = v26;
      v29.i32[1] = 0.25;
      float32x2_t v24 = vmul_f32(v28, v29);
    }
    else
    {
      float32x2_t v6 = (float32x2_t)__PAIR64__(a1.u32[1], COERCE_UNSIGNED_INT(sqrtf(a3.n128_f32[2] + (float)(v5 - *(float *)&a2.i32[1]))));
      float32x2_t v7 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL)), (float32x2_t)a3.n128_u64[0]);
      float32x2_t v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.i8, 0);
      v8.i32[0] = 2.0;
      v8.i32[0] = vmul_f32(v6, v8).u32[0];
      float32x2_t v9 = vrecpe_f32((float32x2_t)v8.u32[0]);
      float32x2_t v10 = vmul_f32(v9, vrecps_f32((float32x2_t)v8.u32[0], v9));
      float32x2_t v24 = vmul_n_f32(v7, vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    float32x2_t v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2.i8, 0);
    float32x2_t v16 = vadd_f32(*(float32x2_t *)a1.i8, v15);
    v15.i32[0] = 2.0;
    v15.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)a1.i32 + (float)((float)(1.0 - *(float *)&a2.i32[1])- a3.n128_f32[2])))), v15).u32[0];
    v15.i32[1] = v16.i32[1];
    float32x2_t v17 = vrecpe_f32((float32x2_t)v15.u32[0]);
    float32x2_t v18 = vmul_f32(v17, vrecps_f32((float32x2_t)v15.u32[0], v17));
    unsigned __int32 v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v15.u32[0], v18)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v19;
    float32x2_t v24 = vmul_f32(v15, _D5);
  }
  return *(double *)&v24;
}

void *sub_10033F4F8(void *result)
{
  void *result = off_100853598;
  return result;
}

void *sub_10033F518(void *result)
{
  void *result = off_100853598;
  return result;
}

uint64_t sub_10033F538(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 32)) {
    return result;
  }
  uint64_t v3 = result;
  double v4 = *(double *)(result + 24);
  if (*(unsigned char *)(result + 64))
  {
    if (v4 - *(double *)(result + 56) < 0.2) {
      return result;
    }
  }
  *(double *)(result + 56) = v4;
  *(unsigned char *)(result + 64) = 1;
  sub_1002363E4((uint64_t)v84);
  sub_1002363E4((uint64_t)v82);
  sub_1002363E4((uint64_t)v80);
  sub_1002363E4((uint64_t)v78);
  sub_1002363E4((uint64_t)v76);
  sub_1002363E4((uint64_t)v74);
  sub_1002363E4((uint64_t)v72);
  sub_1002363E4((uint64_t)v70);
  uint64_t v5 = v82[0];
  *(_DWORD *)((char *)&v82[1] + *(void *)(v82[0] - 24)) = *(_DWORD *)((unsigned char *)&v82[1] + *(void *)(v82[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v82[2] + *(void *)(v5 - 24)) = 2;
  uint64_t v6 = v80[0];
  *(_DWORD *)((char *)&v80[1] + *(void *)(v80[0] - 24)) = *(_DWORD *)((unsigned char *)&v80[1] + *(void *)(v80[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v80[2] + *(void *)(v6 - 24)) = 1;
  uint64_t v7 = v78[0];
  *(_DWORD *)((char *)&v78[1] + *(void *)(v78[0] - 24)) = *(_DWORD *)((unsigned char *)&v78[1] + *(void *)(v78[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v78[2] + *(void *)(v7 - 24)) = 2;
  uint64_t v8 = v74[0];
  *(_DWORD *)((char *)&v74[1] + *(void *)(v74[0] - 24)) = *(_DWORD *)((unsigned char *)&v74[1] + *(void *)(v74[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v74[2] + *(void *)(v8 - 24)) = 2;
  uint64_t v9 = v72[0];
  *(_DWORD *)((char *)&v72[1] + *(void *)(v72[0] - 24)) = *(_DWORD *)((unsigned char *)&v72[1] + *(void *)(v72[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v72[2] + *(void *)(v9 - 24)) = 2;
  uint64_t v10 = v70[0];
  *(_DWORD *)((char *)&v70[1] + *(void *)(v70[0] - 24)) = *(_DWORD *)((unsigned char *)&v70[1] + *(void *)(v70[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v70[2] + *(void *)(v10 - 24)) = 2;
  if (*(unsigned char *)(a2 + 192))
  {
    std::ostream::operator<<();
    if (!*(unsigned char *)(a2 + 192)) {
      goto LABEL_104;
    }
    uint64_t v11 = (void *)std::ostream::operator<<();
    float v12 = " m";
    uint64_t v13 = 2;
  }
  else
  {
    float v12 = "-";
    uint64_t v13 = 1;
    sub_100056628(v84, (uint64_t)"-", 1);
    uint64_t v11 = v82;
  }
  sub_100056628(v11, (uint64_t)v12, v13);
  if (*(unsigned char *)(a2 + 208))
  {
    float32x2_t v14 = (void *)std::ostream::operator<<();
    float32x2_t v15 = " deg";
    uint64_t v16 = 4;
  }
  else
  {
    float32x2_t v15 = "-";
    float32x2_t v14 = v80;
    uint64_t v16 = 1;
  }
  sub_100056628(v14, (uint64_t)v15, v16);
  if (*(unsigned char *)(a2 + 224))
  {
    float32x2_t v17 = (void *)std::ostream::operator<<();
    float32x2_t v18 = " m";
    uint64_t v19 = 2;
  }
  else
  {
    float32x2_t v18 = "-";
    float32x2_t v17 = v78;
    uint64_t v19 = 1;
  }
  sub_100056628(v17, (uint64_t)v18, v19);
  if (*(unsigned char *)(a2 + 248))
  {
    uint64_t v20 = (void *)std::ostream::operator<<();
    float v21 = " m";
    uint64_t v22 = 2;
  }
  else
  {
    float v21 = "-";
    uint64_t v20 = v74;
    uint64_t v22 = 1;
  }
  sub_100056628(v20, (uint64_t)v21, v22);
  uint64_t v23 = *(int *)(a2 + 232);
  if (v23 <= 4) {
    sub_100056628(v76, (uint64_t)off_100861C60[v23], qword_1004C1C20[v23]);
  }
  if (*(unsigned char *)(a2 + 272))
  {
    sub_100056628(v72, (uint64_t)"[", 1);
    if (!*(unsigned char *)(a2 + 272)) {
      goto LABEL_104;
    }
    float32x2_t v24 = (void *)std::ostream::operator<<();
    sub_100056628(v24, (uint64_t)", ", 2);
    if (!*(unsigned char *)(a2 + 272)) {
      goto LABEL_104;
    }
    float v25 = (void *)std::ostream::operator<<();
    sub_100056628(v25, (uint64_t)", ", 2);
    if (!*(unsigned char *)(a2 + 272)) {
      goto LABEL_104;
    }
    unsigned int v26 = (void *)std::ostream::operator<<();
    float32x2_t v27 = "]";
  }
  else
  {
    float32x2_t v27 = "-";
    unsigned int v26 = v72;
  }
  sub_100056628(v26, (uint64_t)v27, 1);
  if (!*(unsigned char *)(a2 + 304))
  {
    double v31 = "-";
    long long v30 = v70;
    uint64_t v32 = 1;
    goto LABEL_31;
  }
  sub_100056628(v70, (uint64_t)"[", 1);
  if (!*(unsigned char *)(a2 + 304)
    || (float32x2_t v28 = (void *)std::ostream::operator<<(), sub_100056628(v28, (uint64_t)", ", 2), !*(unsigned char *)(a2 + 304))
    || (float32x2_t v29 = (void *)std::ostream::operator<<(), sub_100056628(v29, (uint64_t)", ", 2), !*(unsigned char *)(a2 + 304)))
  {
LABEL_104:
    sub_10000AE44();
  }
  long long v30 = (void *)std::ostream::operator<<();
  double v31 = "] m";
  uint64_t v32 = 3;
LABEL_31:
  sub_100056628(v30, (uint64_t)v31, v32);
  uint64_t v33 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    if (v69 >= 0) {
      double v34 = &v68;
    }
    else {
      double v34 = v68;
    }
    if (!*(unsigned char *)(v3 + 32)) {
      sub_10000AE44();
    }
    uint64_t v35 = *(void *)(v3 + 24);
    if (*(_DWORD *)a2 == 1) {
      long long v36 = "YES";
    }
    else {
      long long v36 = "NO";
    }
    if (*(unsigned char *)(a2 + 4)) {
      float v37 = "YES";
    }
    else {
      float v37 = "NO";
    }
    if (*(unsigned char *)(a2 + 5)) {
      float v38 = "YES";
    }
    else {
      float v38 = "NO";
    }
    if (*(unsigned char *)(a2 + 6)) {
      long long v39 = "YES";
    }
    else {
      long long v39 = "NO";
    }
    if (*(unsigned char *)(a2 + 7)) {
      __int16 v40 = "YES";
    }
    else {
      __int16 v40 = "NO";
    }
    std::stringbuf::str();
    if (v67 >= 0) {
      double v41 = &v66;
    }
    else {
      double v41 = v66;
    }
    std::stringbuf::str();
    if (v65 >= 0) {
      uint64_t v42 = &v64;
    }
    else {
      uint64_t v42 = v64;
    }
    uint64_t v53 = v42;
    std::stringbuf::str();
    if (v63 >= 0) {
      double v43 = &v62;
    }
    else {
      double v43 = v62;
    }
    int v51 = v33;
    uint64_t v52 = v43;
    std::stringbuf::str();
    float v50 = v39;
    if (v61 >= 0) {
      uint64_t v44 = &v60;
    }
    else {
      uint64_t v44 = v60;
    }
    unint64_t v45 = &v58;
    std::stringbuf::str();
    if (v59 < 0) {
      unint64_t v45 = v58;
    }
    std::stringbuf::str();
    std::stringbuf::str();
    double v46 = &v56;
    if (v57 < 0) {
      double v46 = v56;
    }
    if (v55 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)long long buf = 136318466;
    float64x2_t v87 = v34;
    __int16 v88 = 2048;
    uint64_t v89 = v35;
    __int16 v90 = 2080;
    long long v91 = v36;
    __int16 v92 = 2080;
    v93 = v37;
    __int16 v94 = 2080;
    v95 = v38;
    __int16 v96 = 2080;
    uint64_t v97 = v50;
    __int16 v98 = 2080;
    uint64_t v99 = v40;
    __int16 v100 = 2080;
    uint64_t v101 = v41;
    __int16 v102 = 2080;
    uint64_t v103 = v53;
    __int16 v104 = 2080;
    long long v105 = v52;
    __int16 v106 = 2080;
    v107 = v44;
    __int16 v108 = 2080;
    v109 = v45;
    __int16 v110 = 2080;
    uint64_t v111 = v46;
    __int16 v112 = 2080;
    uint64_t v113 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#sa_algo,DeviceID: %s\n\tTimestamp: %f\n\tSolution convergence: %s, insufficientDisplacement: %s, insufficientHorizontalPositionDiversity: %s, insufficientVerticalPositionDiversity: %s, insufficientLighting: %s\n\tRange: %s, Horizontal angle: %s, Horizontal distance: %s, Vertical distance: %s, Vertical state: %s, Direction: %s, World Position: %s", buf, 0x8Eu);
    if (v55 < 0) {
      operator delete(__p);
    }
    if (v57 < 0) {
      operator delete(v56);
    }
    if (v59 < 0) {
      operator delete(v58);
    }
    if (v61 < 0) {
      operator delete(v60);
    }
    if (v63 < 0) {
      operator delete(v62);
    }
    if (v65 < 0) {
      operator delete(v64);
    }
    if (v67 < 0) {
      operator delete(v66);
    }
    if (v69 < 0) {
      operator delete(v68);
    }
  }
  if (v71 < 0) {
    operator delete((void *)v70[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v72[0] = v48;
  *(void *)((char *)v72 + *(void *)(v48 - 24)) = v49;
  if (v73 < 0) {
    operator delete((void *)v72[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v74[0] = v48;
  *(void *)((char *)v74 + *(void *)(v48 - 24)) = v49;
  if (v75 < 0) {
    operator delete((void *)v74[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v76[0] = v48;
  *(void *)((char *)v76 + *(void *)(v48 - 24)) = v49;
  if (v77 < 0) {
    operator delete((void *)v76[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v78[0] = v48;
  *(void *)((char *)v78 + *(void *)(v48 - 24)) = v49;
  if (v79 < 0) {
    operator delete((void *)v78[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v80[0] = v48;
  *(void *)((char *)v80 + *(void *)(v48 - 24)) = v49;
  if (v81 < 0) {
    operator delete((void *)v80[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v82[0] = v48;
  *(void *)((char *)v82 + *(void *)(v48 - 24)) = v49;
  if (v83 < 0) {
    operator delete((void *)v82[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  v84[0] = v48;
  *(void *)((char *)v84 + *(void *)(v48 - 24)) = v49;
  if (v85 < 0) {
    operator delete((void *)v84[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1003402D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  sub_10023657C((uint64_t)&a60);
  sub_10023657C((uint64_t)&a72);
  sub_10023657C((uint64_t)&STACK[0x300]);
  sub_10023657C((uint64_t)&STACK[0x408]);
  sub_10023657C((uint64_t)&STACK[0x510]);
  sub_10023657C((uint64_t)&STACK[0x618]);
  sub_10023657C((uint64_t)&STACK[0x720]);
  sub_10023657C((uint64_t)&STACK[0x828]);
  _Unwind_Resume(a1);
}

void sub_10034040C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (*(unsigned char *)(a1 + 1) && *(unsigned char *)(a1 + 176))
  {
    double v5 = *(double *)(a1 + 152);
    double v6 = *(double *)(a1 + 168);
    if (a2)
    {
      *(_DWORD *)(a3 + 364) = 3;
      *(unsigned char *)(a3 + 368) = 1;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100431BB8();
      }
      if (*(unsigned char *)(a1 + 16))
      {
        float v7 = v5;
        *(void *)(a3 + 8) = *(void *)(a1 + 8);
        *(double *)(a3 + 16) = v6;
        *(float *)(a3 + 24) = v7;
        *(_DWORD *)(a3 + 28) = 1;
        *(unsigned char *)(a3 + 56) = 0;
        *(void *)(a3 + 32) = 0;
        *(void *)(a3 + 40) = 0;
        *(unsigned char *)(a3 + 60) = 0;
        *(unsigned char *)(a3 + 64) = 0;
        *(unsigned char *)(a3 + 68) = 0;
        *(void *)(a3 + 72) = 0;
        *(void *)(a3 + 80) = 0;
        *(_WORD *)(a3 + 88) = 0;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        *(_OWORD *)(a3 + 121) = 0u;
        *(unsigned char *)(a3 + 160) = 0;
        *(void *)(a3 + 168) = 0;
        *(void *)(a3 + 176) = 0;
        *(void *)(a3 + 184) = 0;
LABEL_15:
        *(unsigned char *)(a3 + 192) = 1;
        return;
      }
      goto LABEL_19;
    }
    if (!*(unsigned char *)(a1 + 32)) {
      goto LABEL_19;
    }
    if (*(double *)(a1 + 24) - v6 < *(double *)(a1 + 552))
    {
      *(_DWORD *)(a3 + 364) = 3;
      *(unsigned char *)(a3 + 368) = 1;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100431C24();
      }
      if (*(unsigned char *)(a1 + 16) && *(unsigned char *)(a1 + 32))
      {
        uint64_t v8 = *(void *)(a1 + 24);
        float v9 = v5;
        *(void *)(a3 + 8) = *(void *)(a1 + 8);
        *(void *)(a3 + 16) = v8;
        *(float *)(a3 + 24) = v9;
        *(_DWORD *)(a3 + 28) = 1;
        *(unsigned char *)(a3 + 56) = 0;
        *(void *)(a3 + 32) = 0;
        *(void *)(a3 + 40) = 0;
        *(unsigned char *)(a3 + 60) = 0;
        *(unsigned char *)(a3 + 64) = 0;
        *(unsigned char *)(a3 + 68) = 0;
        *(void *)(a3 + 72) = 0;
        *(void *)(a3 + 80) = 0;
        *(_WORD *)(a3 + 88) = 0;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        *(_OWORD *)(a3 + 121) = 0u;
        *(unsigned char *)(a3 + 160) = 0;
        *(void *)(a3 + 176) = 0;
        *(void *)(a3 + 184) = 0;
        *(void *)(a3 + 168) = 0;
        goto LABEL_15;
      }
LABEL_19:
      sub_10000AE44();
    }
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100431C90();
    }
  }
}

void sub_100340630(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    switch(*(_DWORD *)(a1 + 80))
    {
      case 0:
        uint64_t v1 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v10 = 0;
          int v2 = "#sa_algo,Batch solution status: STATIC_AND_UNOBSERVABLE";
          uint64_t v3 = (uint8_t *)&v10;
          goto LABEL_17;
        }
        break;
      case 1:
        uint64_t v1 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v9 = 0;
          int v2 = "#sa_algo,Batch solution status: STATIC";
          uint64_t v3 = (uint8_t *)&v9;
          goto LABEL_17;
        }
        break;
      case 2:
        uint64_t v1 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v8 = 0;
          int v2 = "#sa_algo,Batch solution status: UNOBSERVABLE";
          uint64_t v3 = (uint8_t *)&v8;
          goto LABEL_17;
        }
        break;
      case 3:
        uint64_t v1 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v7 = 0;
          int v2 = "#sa_algo,Batch solution status: DEGENERATE_PATH";
          uint64_t v3 = (uint8_t *)&v7;
          goto LABEL_17;
        }
        break;
      case 4:
        uint64_t v1 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v6 = 0;
          int v2 = "#sa_algo,Batch solution status: NOT_CONVERGED";
          uint64_t v3 = (uint8_t *)&v6;
          goto LABEL_17;
        }
        break;
      case 5:
        uint64_t v1 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v5 = 0;
          int v2 = "#sa_algo,Batch solution status: INITIALIZED";
          uint64_t v3 = (uint8_t *)&v5;
          goto LABEL_17;
        }
        break;
      case 6:
        uint64_t v1 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v4 = 0;
          int v2 = "#sa_algo,Batch solution status: RESET_FROM_HIGH_RESIDUALS";
          uint64_t v3 = (uint8_t *)&v4;
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, v2, v3, 2u);
        }
        break;
      default:
        return;
    }
  }
}

void *sub_100340838(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 7) + 4 * (a4 - a2) - ((a3 - *(void *)a2) >> 7);
  }
  uint64_t v7 = a1[1];
  __int16 v8 = (char *)(v7 + 8 * (a1[4] >> 5));
  if (a1[2] == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + ((a1[4] & 0x1FLL) << 7);
  }
  uint64_t v33 = (char **)(v7 + 8 * (a1[4] >> 5));
  double v34 = (char *)v9;
  if (v9 == a3) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((a3 - *(void *)a2) >> 7) + 4 * (a2 - v8) - ((v9 - *(void *)v8) >> 7);
  }
  uint64_t v11 = (char **)sub_100342320((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      uint64_t v19 = v11;
      uint64_t v20 = v12;
      float v21 = v33;
      uint64_t v22 = v34;
      uint64_t v23 = sub_100342320((uint64_t)&v32, v6);
      sub_1003423F4(v21, v22, v19, v20, v23, v24, &v35);
      float v25 = v34;
      if (v34 != v36)
      {
        unsigned int v26 = v33;
        do
        {
          v25 += 128;
          double v34 = v25;
          if (v25 - *v26 == 4096)
          {
            float32x2_t v27 = v26[1];
            ++v26;
            float v25 = v27;
            uint64_t v33 = v26;
            double v34 = v27;
          }
        }
        while (v25 != v36);
      }
      uint64_t v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((sub_10015ED2C((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      uint64_t v13 = (char **)sub_100342320((uint64_t)&v32, v6);
      unint64_t v15 = a1[4] + a1[5];
      uint64_t v16 = a1[1];
      float32x2_t v17 = (char **)(v16 + 8 * (v15 >> 5));
      if (a1[2] == v16) {
        float32x2_t v18 = 0;
      }
      else {
        float32x2_t v18 = &(*v17)[128 * (v15 & 0x1F)];
      }
      __n128 v35 = v32;
      sub_100342584(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_100342384(a1, 1) & 1) != 0)
        ;
    }
  }
  uint64_t v29 = a1[1];
  if (a1[2] == v29) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 8 * (a1[4] >> 5)) + ((a1[4] & 0x1FLL) << 7);
  }
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 5);
  v35.n128_u64[1] = v30;
  return sub_100342320((uint64_t)&v35, v10);
}

int32x2_t sub_100340A70(float32x4_t *a1)
{
  float32x4_t v28 = a1[3];
  float32x4_t v30 = a1[2];
  float v4 = acosf(-v28.f32[1]);
  float32x4_t v7 = v30;
  v1.i32[0] = v30.i32[1];
  v5.i32[0] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u32[0];
  v5.i32[1] = v30.i32[0];
  float32x4_t v6 = vmulq_f32(v7, v7);
  v7.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), v6).f32[0]);
  if (fabsf(v30.f32[1]) >= fabsf(a1[1].f32[1]))
  {
    float32x2_t v31 = v5;
    int32x2_t v27 = *(int32x2_t *)v7.f32;
    float v10 = asinf(v7.f32[0]);
    if (v10 >= 0.43633)
    {
      double v8 = COERCE_DOUBLE(vdiv_f32(v31, (float32x2_t)vdup_lane_s32(v27, 0)));
      double v22 = v4;
      if (v4 <= 1.57079633)
      {
        *(float *)&double v22 = -*((float *)&v8 + 1);
        double v23 = COERCE_DOUBLE(vzip1_s32(*(int32x2_t *)&v22, *(int32x2_t *)&v8));
        double v24 = COERCE_DOUBLE(vneg_f32(*(float32x2_t *)&v8));
        LODWORD(v25) = vdup_lane_s32(*(int32x2_t *)&v24, 1).u32[0];
        if (v4 <= 0.7854)
        {
          double v9 = v23;
        }
        else
        {
          double v8 = v24;
          *((float *)&v25 + 1) = -*(float *)&v24;
          double v9 = v25;
        }
        return vzip1_s32(*(int32x2_t *)&v8, *(int32x2_t *)&v9);
      }
    }
    else
    {
      float32x4_t v11 = v28;
      v12.i32[0] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
      v12.i32[1] = v28.i32[0];
      float32x4_t v13 = vmulq_f32(v11, v11);
      v13.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), v13).u64[0];
      v13.f32[0] = sqrtf(v13.f32[0]);
      double v8 = COERCE_DOUBLE(vdiv_f32((float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v1, 0), 0), (int8x8_t)vneg_f32(v12), (int8x8_t)v12), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.f32, 0)));
      if (v10 > 0.2618)
      {
        float32x2_t v14 = (float32x2_t)vbsl_s8((int8x8_t)vcgtd_f64(1.57079633, v4), (int8x8_t)vneg_f32(v31), (int8x8_t)v31);
        float32x2_t v15 = vmul_f32(v14, v14);
        v15.f32[0] = sqrtf(vaddv_f32(v15));
        float32x2_t v16 = vdiv_f32(v14, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 0));
        v14.f32[0] = -v16.f32[1];
        int32x2_t v17 = vzip1_s32((int32x2_t)v14, (int32x2_t)v16);
        float32x2_t v29 = (float32x2_t)v17;
        float32x2_t v32 = v16;
        float32x2_t v18 = (float32x2_t)__PAIR64__(v17.u32[1], v16.u32[1]);
        v16.i32[1] = v17.i32[0];
        float32x2_t v19 = vmla_lane_f32(vmul_n_f32(v16, *(float *)&v8), v18, *(float32x2_t *)&v8, 1);
        float v20 = atan2f(v19.f32[1], v19.f32[0]);
        __float2 v21 = __sincosf_stret((float)((float)(v10 + -0.43633) / -0.17453) * v20);
        double v8 = COERCE_DOUBLE(vmla_n_f32(vmul_n_f32(v29, v21.__sinval), v32, v21.__cosval));
      }
    }
    LODWORD(v9) = vdup_lane_s32(*(int32x2_t *)&v8, 1).u32[0];
    *((float *)&v9 + 1) = -*(float *)&v8;
    return vzip1_s32(*(int32x2_t *)&v8, *(int32x2_t *)&v9);
  }
  double v8 = COERCE_DOUBLE(vdiv_f32(v5, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0)));
  v7.i32[0] = HIDWORD(v8);
  *(float *)v3.i32 = -*((float *)&v8 + 1);
  double v9 = COERCE_DOUBLE(vzip1_s32(v3, *(int32x2_t *)&v8));
  if (v4 > 0.7854)
  {
    v7.f32[1] = -*(float *)&v8;
    double v9 = *(double *)v7.i64;
  }
  return vzip1_s32(*(int32x2_t *)&v8, *(int32x2_t *)&v9);
}

void sub_100340C8C(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 3) != a2)
  {
    int v2 = a2;
    *(unsigned char *)(a1 + 3) = a2;
    float v4 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      float32x2_t v5 = "NO";
      if (v2) {
        float32x2_t v5 = "YES";
      }
      int v8 = 136315138;
      double v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#sa_algo,Target motion state changed to %s", (uint8_t *)&v8, 0xCu);
      int v2 = *(unsigned __int8 *)(a1 + 3);
    }
    if (v2)
    {
      float32x4_t v6 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v8) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#sa_algo,Target started moving - resetting", (uint8_t *)&v8, 2u);
      }
      if (*(unsigned char *)(a1 + 368))
      {
        float32x4_t v7 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v8) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo,Target started moving - passing the cached measurement to the range filter without VIO", (uint8_t *)&v8, 2u);
          if (!*(unsigned char *)(a1 + 368)) {
            sub_10000AE44();
          }
        }
        sub_10033C5DC(a1, a1 + 184);
      }
      sub_10033C77C(a1);
    }
  }
}

void *sub_100340E0C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float32x4_t v6 = result;
    __n128 result = sub_1000279A4(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100340E6C(_Unwind_Exception *exception_object)
{
  int32x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100340E88(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5 = 1.0 - a3;
  float32x4_t v6 = vsubq_f32(a1, a2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  float32x4_t v8 = vaddq_f32(a1, a2);
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  float v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  float v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0) {
    sinf(v11);
  }
  if ((float)(v5 * v11) != 0.0) {
    sinf(v5 * v11);
  }
  float v12 = v11 * a3;
  if (v12 != 0.0) {
    sinf(v12);
  }
}

unsigned char *sub_100340FF4(unsigned char *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[48] = 0;
  sub_100341040((uint64_t)a1, a2);
  return a1;
}

void sub_100341024(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48)) {
    sub_100431CFC(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_100341040(uint64_t a1, uint64_t *a2)
{
  if (*((unsigned char *)a2 + 48))
  {
    double v4 = *(double *)a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(double *)a1 = v4;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = 0;
    sub_100340E0C((void *)(a1 + 16), (const void *)a2[2], a2[3], 0xCF3CF3CF3CF3CF3DLL * ((a2[3] - a2[2]) >> 3));
    double result = *((double *)a2 + 5);
    *(double *)(a1 + 40) = result;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return result;
}

void sub_1003410BC(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1003410EC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003410F8(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_10034111C(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      if (!a2) {
        sub_100431D14();
      }
      int v6 = v4 + v2 - *(_DWORD *)(a1 + 20);
      if (v6 <= 0) {
        sub_100431D40();
      }
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        uint64_t v8 = (v7 - 1);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = 1;
        do
        {
          float v11 = &a2[v10];
          if (!a2[v10])
          {
            uint64_t v12 = *(void *)(v9 + 8 * v10);
            int v13 = v10;
            do
            {
              int v13 = v13 * v6 % (int)v8;
              uint64_t v14 = *(void *)(v9 + 8 * v13);
              *(void *)(v9 + 8 * v13) = v12;
              *float v11 = 1;
              float v11 = &a2[v13];
              uint64_t v12 = v14;
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v8);
      }
    }
  }
}

_DWORD *sub_1003411F0(_DWORD *result, int a2, int a3)
{
  if (a2 < 0) {
    sub_100431D6C();
  }
  if (result[6] < a2) {
    sub_100431D98();
  }
  if (a3 < 0) {
    sub_100431DC4();
  }
  if (result[7] < a3) {
    sub_100431DF0();
  }
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

uint64_t sub_100341240(uint64_t result, double a2)
{
  unsigned int v2 = *(int64x2_t **)(result + 32);
  if (!v2) {
    sub_100431E1C();
  }
  uint64_t v3 = *(unsigned int *)(result + 16);
  if ((int)v3 > 3)
  {
    unsigned int v4 = (int64x2_t *)((char *)v2 + 8 * (v3 - 2));
    uint64_t v5 = (v3 - 1) >> 1;
    int64x2_t v6 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
    do
    {
      *v2++ = v6;
      --v5;
    }
    while (v5);
    *unsigned int v4 = v6;
  }
  else if ((int)v3 >= 1)
  {
    do
    {
      *(double *)v2->i64 = a2;
      unsigned int v2 = (int64x2_t *)((char *)v2 + 8);
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_1003412A8(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1003412D8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003412E4(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_100341334(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x20;
  unint64_t v4 = v2 - 32;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int64x2_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_100056BF0(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    float32x2_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100151930((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      __n128 v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100151A50(&v54, &v53);
  int32x2_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  float32x2_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100341600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10034164C(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_10034167C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100341688(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_1003416AC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_100431E48();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_100431E74();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_100431EA0();
  }
  return v2 + 8 * a2;
}

double *sub_1003416E8(uint64_t a1, _DWORD *a2)
{
  if ((_DWORD *)a1 == a2) {
    sub_100431ECC();
  }
  double result = (double *)sub_1003411F0(a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  int v5 = a2[2];
  if (v5)
  {
    int v6 = 0;
    int v7 = a2[3];
    do
    {
      if (v7)
      {
        for (int i = 0; i != v7; ++i)
        {
          double v9 = sub_1002A43FC(a1, i, v6);
          double result = (double *)sub_10034185C((uint64_t)a2, v6, i);
          double *result = v9;
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_100341794(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x300000003;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_100861B80;
  if (a2 > 3)
  {
    BOOL v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 4)
  {
    BOOL v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10034183C(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10034185C(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_100431EF8();
  }
  unsigned int v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0) {
    sub_100431F24();
  }
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16)) {
    sub_100431F50();
  }
  return v3 + 8 * v4;
}

float64x2_t sub_1003418A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != *(_DWORD *)(a2 + 8)) {
    sub_100432000();
  }
  int v7 = *(_DWORD *)(a1 + 12);
  if (v7 != *(_DWORD *)(a2 + 12)) {
    sub_100431FD4();
  }
  if (a1 == a3) {
    sub_100431F7C();
  }
  if (a2 == a3) {
    sub_100431FA8();
  }
  sub_1003411F0((_DWORD *)a3, v4, v7);
  uint64_t v9 = *(unsigned int *)(a3 + 16);
  if ((int)v9 > 3)
  {
    uint64_t v16 = *(float64x2_t **)(a1 + 32);
    uint64_t v17 = *(float64x2_t **)(a2 + 32);
    uint64_t v18 = (float64x2_t *)((char *)v16 + 8 * (v9 - 2));
    float32x2_t v19 = *(float64x2_t **)(a3 + 32);
    int64_t v20 = (float64x2_t *)((char *)v17 + 8 * (v9 - 2));
    uint64_t v21 = (float64x2_t *)((char *)v19 + 8 * (v9 - 2));
    uint64_t v22 = (v9 - 1) >> 1;
    do
    {
      float64x2_t v23 = *v16++;
      float64x2_t v24 = v23;
      float64x2_t v25 = *v17++;
      *v19++ = vsubq_f64(v24, v25);
      --v22;
    }
    while (v22);
    float64x2_t result = vsubq_f64(*v18, *v20);
    *uint64_t v21 = result;
  }
  else if ((int)v9 >= 1)
  {
    uint64_t v10 = *(double **)(a1 + 32);
    uint64_t v11 = *(double **)(a2 + 32);
    uint64_t v12 = *(float64_t **)(a3 + 32);
    do
    {
      double v13 = *v10++;
      double v14 = v13;
      double v15 = *v11++;
      result.f64[0] = v14 - v15;
      *v12++ = result.f64[0];
      --v9;
    }
    while (v9);
  }
  return result;
}

void sub_1003419A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t __ldb = *(unsigned int *)(a1 + 12);
  if (__ldb != *(_DWORD *)(a2 + 8)) {
    sub_100432084();
  }
  if (a1 == a3) {
    sub_10043202C();
  }
  if (a2 == a3) {
    sub_100432058();
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  sub_1003411F0((_DWORD *)a3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a2 + 12));
  if (__ldb <= v8) {
    int v9 = v8;
  }
  else {
    int v9 = __ldb;
  }
  if (v9 <= v7) {
    int v9 = v7;
  }
  uint64_t v10 = *(const double **)(a1 + 32);
  if (v9 > 5)
  {
    cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, v7, v8, __ldb, 1.0, v10, v7, *(const double **)(a2 + 32), __ldb, 0.0, *(double **)(a3 + 32), *(_DWORD *)(a3 + 8));
  }
  else if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(double **)(a2 + 32);
    uint64_t v13 = *(void *)(a3 + 32);
    do
    {
      if (v7)
      {
        uint64_t v14 = 0;
        double v15 = (double *)v10;
        do
        {
          double v16 = 0.0;
          if (__ldb)
          {
            uint64_t v17 = __ldb;
            uint64_t v18 = v12;
            float32x2_t v19 = v15;
            do
            {
              double v20 = *v18++;
              double v16 = v16 + *v19 * v20;
              v19 += v7;
              --v17;
            }
            while (v17);
          }
          *(double *)(v13 + 8 * (v11 * v7 + v14++)) = v16;
          ++v15;
        }
        while (v14 != v7);
      }
      ++v11;
      v12 += __ldb;
    }
    while (v11 != v8);
  }
}

void sub_100341B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s1)
{
  if (a1 == a2) {
    sub_1004320B0();
  }
  if (a1 == a3) {
    sub_1004320DC();
  }
  if (a1 == a4) {
    sub_100432108();
  }
  if (a2 == a3) {
    sub_100432134();
  }
  if (a2 == a4) {
    sub_100432160();
  }
  if (a3 == a4) {
    sub_10043218C();
  }
  uint64_t v9 = *(unsigned int *)(a1 + 16);
  if (*(_DWORD *)(a2 + 16) < (int)v9) {
    sub_1004321B8();
  }
  if (v9)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 12);
    int v13 = strcmp(__s1, "2");
    if (v11 == 1 || v12 == 1)
    {
      if (v13)
      {
        if (!strcmp(__s1, "1"))
        {
          float v37 = *(double **)(a1 + 32);
          double v38 = fabs(*v37);
          if (v9 >= 2)
          {
            uint64_t v39 = v37 + 1;
            uint64_t v40 = v9 - 1;
            do
            {
              double v41 = *v39++;
              double v38 = v38 + fabs(v41);
              --v40;
            }
            while (v40);
          }
        }
        else if (!strcmp(__s1, "inf"))
        {
          uint64_t v53 = *(double **)(a1 + 32);
          double v54 = fabs(*v53);
          if (v9 >= 2)
          {
            long long v55 = v53 + 1;
            uint64_t v56 = v9 - 1;
            do
            {
              double v57 = *v55++;
              double v58 = fabs(v57);
              if (v58 > v54) {
                double v54 = v58;
              }
              --v56;
            }
            while (v56);
          }
        }
        else if (!strcmp(__s1, "-inf"))
        {
          char v59 = *(double **)(a1 + 32);
          double v60 = fabs(*v59);
          if (v9 >= 2)
          {
            char v61 = v59 + 1;
            uint64_t v62 = v9 - 1;
            do
            {
              double v63 = *v61++;
              double v64 = fabs(v63);
              if (v64 < v60) {
                double v60 = v64;
              }
              --v62;
            }
            while (v62);
          }
        }
        else
        {
          long double v75 = 0.0;
          if (sscanf(__s1, "%lg", &v75) != 1) {
            sub_10043223C();
          }
          long double v19 = v75;
          if (fabs(v75) >= 2.22044605e-16)
          {
            char v65 = *(double **)(a1 + 32);
            long double v66 = pow(fabs(*v65), v75);
            if (v9 >= 2)
            {
              char v67 = v65 + 1;
              uint64_t v68 = v9 - 1;
              do
              {
                double v69 = *v67++;
                long double v66 = v66 + pow(fabs(v69), v19);
                --v68;
              }
              while (v68);
            }
            pow(v66, 1.0 / v19);
          }
        }
      }
      else
      {
        double v20 = *(double **)(a1 + 32);
        double v21 = *v20 * *v20;
        if (v9 >= 2)
        {
          uint64_t v22 = v20 + 1;
          uint64_t v23 = v9 - 1;
          do
          {
            double v24 = *v22++;
            double v21 = v21 + v24 * v24;
            --v23;
          }
          while (v23);
        }
      }
    }
    else if (v13)
    {
      if (!strcmp(__s1, "1"))
      {
        if (v12)
        {
          uint64_t v25 = 0;
          uint64_t v26 = *(void *)(a1 + 32);
          int32x2_t v27 = *(double **)(a2 + 32);
          int v28 = 1;
          do
          {
            double v29 = fabs(*(double *)(v26 + 8 * (v11 * v25)));
            v27[v25] = v29;
            uint64_t v30 = v11 - 1;
            unsigned int v31 = v28;
            if (v11 >= 2)
            {
              do
              {
                double v29 = v29 + fabs(*(double *)(v26 + 8 * v31));
                v27[v25] = v29;
                ++v31;
                --v30;
              }
              while (v30);
            }
            ++v25;
            v28 += v11;
          }
          while (v25 != v12);
          double v32 = *v27;
          unint64_t v33 = v27 + 1;
          uint64_t v34 = v12 - 1;
          do
          {
            double v35 = *v33++;
            double v36 = v35;
            if (v35 > v32) {
              double v32 = v36;
            }
            --v34;
          }
          while (v34);
        }
      }
      else if (!strcmp(__s1, "inf"))
      {
        if (v11)
        {
          uint64_t v42 = *(double **)(a1 + 32);
          double v43 = *(double **)(a2 + 32);
          uint64_t v44 = v11;
          do
          {
            double v45 = *v42++;
            *v43++ = fabs(v45);
            --v44;
          }
          while (v44);
        }
        if (v12 <= 1)
        {
          uint64_t v47 = *(double **)(a2 + 32);
        }
        else
        {
          uint64_t v46 = *(void *)(a1 + 32);
          uint64_t v47 = *(double **)(a2 + 32);
          int v48 = 1;
          unsigned int v49 = v11;
          do
          {
            uint64_t v50 = v11;
            unsigned int v51 = v49;
            uint64_t v52 = v47;
            if (v11)
            {
              do
              {
                *uint64_t v52 = fabs(*(double *)(v46 + 8 * v51)) + *v52;
                ++v52;
                ++v51;
                --v50;
              }
              while (v50);
            }
            ++v48;
            v49 += v11;
          }
          while (v48 != v12);
        }
        double v70 = *v47;
        if (v11 >= 2)
        {
          char v71 = v47 + 1;
          uint64_t v72 = v11 - 1;
          do
          {
            double v73 = *v71++;
            double v74 = v73;
            if (v73 > v70) {
              double v70 = v74;
            }
            --v72;
          }
          while (v72);
        }
      }
      else
      {
        if (strcmp(__s1, "fro")) {
          sub_1004321E4();
        }
        uint64_t v14 = *(double **)(a1 + 32);
        double v15 = *v14 * *v14;
        if (v9 >= 2)
        {
          double v16 = v14 + 1;
          uint64_t v17 = v9 - 1;
          do
          {
            double v18 = *v16++;
            double v15 = v15 + v18 * v18;
            --v17;
          }
          while (v17);
        }
      }
    }
    else
    {
      sub_100342034(a1, a2, a3, a4);
    }
  }
}

void *sub_100341F80(void *result)
{
  double *result = off_100853598;
  return result;
}

void sub_100341FA0(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100341FD0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100341FDC(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

_DWORD *sub_100342034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  if (v5 <= v6) {
    int v7 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v7 = *(_DWORD *)(a1 + 12);
  }
  if (v5 >= v6) {
    unsigned int v8 = *(_DWORD *)(a1 + 8);
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 12);
  }
  if (a1 == a2) {
    sub_100432294();
  }
  if (a1 == a3) {
    sub_1004322C0();
  }
  if (a1 == a4) {
    sub_1004322EC();
  }
  if (a2 == a3) {
    sub_100432318();
  }
  if (a2 == a4) {
    sub_100432344();
  }
  if (a3 == a4) {
    sub_100432370();
  }
  unsigned int v11 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  if (!v11) {
    sub_10043239C();
  }
  if (v11 < 3 * v8 + v7) {
    sub_1004323C8();
  }
  if (v11 < 5 * v8) {
    sub_1004323F4();
  }
  if (*(_DWORD *)(a2 + 24) < v6) {
    sub_100432420();
  }
  if (*(_DWORD *)(a2 + 28) < v5) {
    sub_10043244C();
  }
  if (*(_DWORD *)(a4 + 24) < v8) {
    sub_100432478();
  }
  if (!*(_DWORD *)(a4 + 28)) {
    sub_1004324A4();
  }
  sub_10034226C(a2, a1);
  __CLPK_integer v12 = *(_DWORD *)(a2 + 8);
  __CLPK_integer v13 = *(_DWORD *)(a2 + 12);
  uint64_t v14 = *(__CLPK_doublereal **)(a2 + 32);
  double v15 = *(__CLPK_doublereal **)(a4 + 32);
  double v16 = *(__CLPK_doublereal **)(a3 + 32);
  char __jobu = 78;
  char __jobvt = 78;
  __CLPK_integer __n = v13;
  __CLPK_integer __m = v12;
  __CLPK_integer __lda = v12;
  __CLPK_integer __ldvt = 1;
  __CLPK_integer __ldu = 1;
  __CLPK_integer v20 = 0;
  __CLPK_integer __lwork = v11;
  uint64_t v17 = dgesvd_(&__jobu, &__jobvt, &__m, &__n, v14, &__lda, v15, 0, &__ldu, 0, &__ldvt, v16, &__lwork, &v20);
  __CLPK_integer v18 = v20;
  if (v20)
  {
    LOWORD(__m) = 4;
    if (v20 < 0) {
      LOBYTE(__n) = 5;
    }
    else {
      LOBYTE(__n) = 4;
    }
    uint64_t v17 = cnprint::CNPrinter::Print();
  }
  if (v11 < **(double **)(a3 + 32)
    && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v17) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print();
  }
  if (v18) {
    sub_1004324D0();
  }
  sub_1003411F0((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  return sub_1003411F0((_DWORD *)a4, v8, 1);
}

__n128 sub_10034226C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v2 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a1 + 24) < v2) {
      sub_1004324FC();
    }
    unsigned int v3 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(a1 + 28) < v3) {
      sub_100432528();
    }
    *(_DWORD *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 12) = v3;
    uint64_t v4 = v3 * v2;
    *(_DWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 20) = v2;
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      uint64_t v10 = *(_OWORD **)(a1 + 32);
      unsigned int v11 = *(long long **)(a2 + 32);
      __CLPK_integer v12 = (__n128 *)((char *)v10 + 8 * (v5 - 2));
      __CLPK_integer v13 = (__n128 *)((char *)v11 + 8 * (v5 - 2));
      uint64_t v14 = (v5 - 1) >> 1;
      do
      {
        long long v15 = *v11++;
        *v10++ = v15;
        --v14;
      }
      while (v14);
      __n128 result = *v13;
      __n128 *v12 = *v13;
    }
    else if ((int)v4 >= 1)
    {
      unsigned int v6 = *(unint64_t **)(a2 + 32);
      int v7 = *(unint64_t **)(a1 + 32);
      do
      {
        unint64_t v8 = *v6++;
        result.n128_u64[0] = v8;
        *v7++ = v8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

void *sub_100342320(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 7);
    if (v4 < 1) {
      result -= (unint64_t)(31 - v4) >> 5;
    }
    else {
      result += (unint64_t)v4 >> 5;
    }
  }
  return result;
}

uint64_t sub_100342384(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 4 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x20) {
    a2 = 1;
  }
  if (v5 < 0x40) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_1003423F4@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    long double v19 = a2;
    __CLPK_integer v18 = a4;
    long long v15 = a5;
    double v16 = a6;
  }
  else
  {
    __CLPK_integer v13 = a3 - 1;
    __CLPK_integer v12 = *a3;
    uint64_t v14 = a4;
    long long v15 = a5;
    double v16 = a6;
    while (1)
    {
      sub_1003424C4(v12, v14, v15, v16, &v21);
      double v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      __CLPK_integer v12 = v17;
      uint64_t v14 = v17 + 4096;
    }
    __CLPK_integer v18 = *a1 + 4096;
    long double v19 = a2;
  }
  sub_1003424C4(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1003424C4@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unsigned int v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    unsigned int v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 7 >= v12 >> 7) {
        uint64_t v13 = v12 >> 7;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 7;
      }
      v11 -= 128 * v13;
      a4 -= 128 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, (v13 << 7) - 8);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      double v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100342584(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    unsigned int v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }
  else
  {
    unint64_t v8 = a1 + 1;
    sub_100342654(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_100342654(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    uint64_t v10 = *a3;
    unsigned int v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }
  sub_100342654(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_100342654@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  unsigned int v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    unsigned int v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 7 >= v11 >> 7 ? v11 >> 7 : (a3 - v9) >> 7;
      if (v12) {
        __src = (char *)memmove(__dst, v9, (v12 << 7) - 8);
      }
      v9 += 128 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 128 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

float64x2_t sub_100342718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != *(_DWORD *)(a2 + 8)) {
    sub_1004325D8();
  }
  int v7 = *(_DWORD *)(a1 + 12);
  if (v7 != *(_DWORD *)(a2 + 12)) {
    sub_1004325AC();
  }
  if (a1 == a3) {
    sub_100432554();
  }
  if (a2 == a3) {
    sub_100432580();
  }
  sub_1003411F0((_DWORD *)a3, v4, v7);
  uint64_t v9 = *(unsigned int *)(a3 + 16);
  if ((int)v9 > 3)
  {
    double v16 = *(float64x2_t **)(a1 + 32);
    uint64_t v17 = *(float64x2_t **)(a2 + 32);
    __CLPK_integer v18 = (float64x2_t *)((char *)v16 + 8 * (v9 - 2));
    long double v19 = *(float64x2_t **)(a3 + 32);
    __CLPK_integer v20 = (float64x2_t *)((char *)v17 + 8 * (v9 - 2));
    uint64_t v21 = (float64x2_t *)((char *)v19 + 8 * (v9 - 2));
    uint64_t v22 = (v9 - 1) >> 1;
    do
    {
      float64x2_t v23 = *v16++;
      float64x2_t v24 = v23;
      float64x2_t v25 = *v17++;
      *v19++ = vaddq_f64(v24, v25);
      --v22;
    }
    while (v22);
    float64x2_t result = vaddq_f64(*v18, *v20);
    *uint64_t v21 = result;
  }
  else if ((int)v9 >= 1)
  {
    uint64_t v10 = *(double **)(a1 + 32);
    uint64_t v11 = *(double **)(a2 + 32);
    uint64_t v12 = *(float64_t **)(a3 + 32);
    do
    {
      double v13 = *v10++;
      double v14 = v13;
      double v15 = *v11++;
      result.f64[0] = v14 + v15;
      *v12++ = result.f64[0];
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100342818()
{
  qword_1008AA2C0 = 0;
  qword_1008AA2C8 = 0;
  qword_1008AA2D0 = 0;
  uint64_t v0 = operator new(0x40uLL);
  qword_1008AA2C8 = (uint64_t)(v0 + 4);
  qword_1008AA2D0 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_1004C1B98;
  v0[1] = unk_1004C1BA8;
  v0[2] = xmmword_1004C1BB8;
  v0[3] = unk_1004C1BC8;
  qword_1008AA2C0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA2C0, (void *)&_mh_execute_header);
  qword_1008AA2E0 = 0;
  unk_1008AA2E8 = 0;
  qword_1008AA2D8 = 0;
  uint64_t v1 = operator new(0x10uLL);
  qword_1008AA2E0 = (uint64_t)(v1 + 1);
  unk_1008AA2E8 = v1 + 1;
  _OWORD *v1 = xmmword_1004C1BD8;
  qword_1008AA2D8 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA2D8, (void *)&_mh_execute_header);
}

uint64_t sub_1003428F0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)a1 = off_100861C98;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a2;
  sub_10025A138((uint64_t *)(a1 + 96), a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 132) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 120) = v4;
  sub_10025A21C(a1 + 152, (long long *)(a2 + 72));
  long long v5 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 184) = v5;
  long long v6 = *(_OWORD *)(a2 + 136);
  long long v7 = *(_OWORD *)(a2 + 152);
  long long v8 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 232) = v7;
  *(_OWORD *)(a1 + 216) = v6;
  long long v9 = *(_OWORD *)(a2 + 200);
  long long v10 = *(_OWORD *)(a2 + 216);
  long long v11 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 312) = v11;
  *(_OWORD *)(a1 + 296) = v10;
  *(_OWORD *)(a1 + 280) = v9;
  long long v12 = *(_OWORD *)(a2 + 264);
  long long v13 = *(_OWORD *)(a2 + 280);
  long long v14 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 392) = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 360) = v13;
  *(_OWORD *)(a1 + 376) = v14;
  *(_OWORD *)(a1 + 344) = v12;
  *(unsigned char *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0x3FB999999999999ALL;
  *(_OWORD *)(a1 + 416) = xmmword_1004C1C50;
  *(_OWORD *)(a1 + 432) = xmmword_1004C1C60;
  *(_OWORD *)(a1 + 448) = xmmword_1004C1C70;
  *(_OWORD *)(a1 + 464) = xmmword_1004B76F0;
  *(int32x2_t *)(a1 + 480) = vdup_n_s32(0x3DCCCCCDu);
  *(void *)(a1 + 488) = 0x3FE8000000000000;
  *(int64x2_t *)(a1 + 496) = vdupq_n_s64(0x3FD999999999999AuLL);
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = xmmword_1004B7680;
  *(_DWORD *)(a1 + 544) = 5;
  *(void *)(a1 + 552) = 0x4000000000000000;
  *(_DWORD *)(a1 + 560) = 0;
  *(unsigned char *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 624) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(unsigned char *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = 0;
  *(unsigned char *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 656) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(unsigned char *)(a1 + 672) = 0;
  *(unsigned char *)(a1 + 676) = 0;
  *(unsigned char *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  sub_100343D30(a1 + 680, a2);
  int v15 = *(_DWORD *)(a1 + 196);
  if (v15 == 1) {
    operator new();
  }
  if (v15 == 2) {
    operator new();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return a1;
}

void sub_100342C18()
{
}

uint64_t sub_100342D0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120) && *(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_10003E96C(a1 + 40, *(void **)(a1 + 48));
  return a1;
}

double sub_100342D58(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 608)) {
    *(unsigned char *)(a1 + 608) = 0;
  }
  if (*(unsigned char *)(a1 + 648)) {
    *(unsigned char *)(a1 + 648) = 0;
  }
  if (*(unsigned char *)(a1 + 664)) {
    *(unsigned char *)(a1 + 664) = 0;
  }
  if (*(unsigned char *)(a1 + 624)) {
    *(unsigned char *)(a1 + 624) = 0;
  }
  *(void *)(a1 + 576) = *(void *)(a1 + 568);
  (*(void (**)(void))(**(void **)(a1 + 592) + 32))(*(void *)(a1 + 592));

  return sub_100342DEC(a1);
}

double sub_100342DEC(uint64_t a1)
{
  sub_100343B2C(a1 + 680, (uint64_t *)&v9);
  uint64_t v2 = (uint64_t *)(a1 + 104);
  sub_10003E96C(a1 + 96, *(void **)(a1 + 104));
  uint64_t v3 = v10;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v3;
  uint64_t v4 = v11;
  *(void *)(a1 + 112) = v11;
  if (v4)
  {
    _DWORD v3[2] = v2;
    long long v9 = &v10;
    long long v10 = 0;
    uint64_t v11 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    *(void *)(a1 + 96) = v2;
  }
  sub_10003E96C((uint64_t)&v9, v3);
  uint64_t v5 = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5);
  }
  else
  {
    do
    {
      uint64_t v6 = v2[2];
      BOOL v7 = *(void *)v6 == (void)v2;
      uint64_t v2 = (uint64_t *)v6;
    }
    while (v7);
  }
  double result = *(double *)(v6 + 32);
  *(double *)(a1 + 88) = result;
  return result;
}

void sub_100342EAC(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  double v7 = *(double *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  int v8 = *((_DWORD *)a2 + 4);
  long long v9 = (void **)(a1 + 568);
  unint64_t v10 = *(void *)(a1 + 576);
  uint64_t v11 = *(void *)(a1 + 568);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v11) >> 3);
  unint64_t v13 = *(int *)(a1 + 80);
  uint64_t v14 = a1 + 584;
  unint64_t v15 = *(void *)(a1 + 584);
  if (v12 < v13)
  {
    if (v10 < v15)
    {
      *(double *)unint64_t v10 = v7;
      *(void *)(v10 + 8) = v6;
      uint64_t v16 = v10 + 24;
      *(_DWORD *)(v10 + 16) = v8;
      *(_DWORD *)(v10 + 20) = 0;
      goto LABEL_37;
    }
    if (v12 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v11) >> 3);
      uint64_t v19 = 2 * v18;
      if (2 * v18 <= v12 + 1) {
        uint64_t v19 = v12 + 1;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        uint64_t v21 = (char *)sub_1000267DC(v14, v20);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v26 = &v21[24 * v12];
      int32x2_t v27 = &v21[24 * v20];
      *(double *)uint64_t v26 = v7;
      *((void *)v26 + 1) = v6;
      *((_DWORD *)v26 + 4) = v8;
      *((_DWORD *)v26 + 5) = 0;
      uint64_t v16 = (uint64_t)(v26 + 24);
      int v28 = *(char **)(a1 + 576);
      double v29 = *(char **)(a1 + 568);
      if (v28 != v29)
      {
        do
        {
          long long v30 = *(_OWORD *)(v28 - 24);
          *((void *)v26 - 1) = *((void *)v28 - 1);
          *(_OWORD *)(v26 - 24) = v30;
          v26 -= 24;
          v28 -= 24;
        }
        while (v28 != v29);
        int v28 = (char *)*v9;
      }
      *(void *)(a1 + 568) = v26;
      *(void *)(a1 + 576) = v16;
      *(void *)(a1 + 584) = v27;
      if (v28) {
        operator delete(v28);
      }
      goto LABEL_37;
    }
LABEL_86:
    sub_1000267C4();
  }
  if (v10 >= v15)
  {
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_86;
    }
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v11) >> 3);
    uint64_t v23 = 2 * v22;
    if (2 * v22 <= v12 + 1) {
      uint64_t v23 = v12 + 1;
    }
    if (v22 >= 0x555555555555555) {
      unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      float64x2_t v25 = (char *)sub_1000267DC(v14, v24);
    }
    else {
      float64x2_t v25 = 0;
    }
    unsigned int v31 = &v25[24 * v12];
    double v32 = &v25[24 * v24];
    *(double *)unsigned int v31 = v7;
    *((void *)v31 + 1) = v6;
    *((_DWORD *)v31 + 4) = v8;
    *((_DWORD *)v31 + 5) = 0;
    uint64_t v17 = v31 + 24;
    unint64_t v33 = *(char **)(a1 + 576);
    uint64_t v34 = *(char **)(a1 + 568);
    if (v33 != v34)
    {
      do
      {
        long long v35 = *(_OWORD *)(v33 - 24);
        *((void *)v31 - 1) = *((void *)v33 - 1);
        *(_OWORD *)(v31 - 24) = v35;
        v31 -= 24;
        v33 -= 24;
      }
      while (v33 != v34);
      unint64_t v33 = (char *)*v9;
    }
    *(void *)(a1 + 568) = v31;
    *(void *)(a1 + 576) = v17;
    *(void *)(a1 + 584) = v32;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    *(double *)unint64_t v10 = v7;
    *(void *)(v10 + 8) = v6;
    uint64_t v17 = (char *)(v10 + 24);
    *(_DWORD *)(v10 + 16) = v8;
    *(_DWORD *)(v10 + 20) = 0;
  }
  *(void *)(a1 + 576) = v17;
  uint64_t v36 = *(void *)(a1 + 568);
  size_t v37 = (size_t)&v17[-v36 - 24];
  if (v37) {
    memmove(*(void **)(a1 + 568), (const void *)(v36 + 24), v37);
  }
  uint64_t v16 = v36 + v37;
LABEL_37:
  *(void *)(a1 + 576) = v16;
  double v38 = off_10089E210[*(int *)(a1 + 84)];
  long double v66 = 0;
  uint64_t v67 = 0;
  __n128 __p = 0;
  sub_10018C2F0(&__p, *(const void **)(a1 + 568), v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - *(void *)(a1 + 568)) >> 3));
  *(double *)(a1 + 600) = (*(double (**)(uint64_t (*)[4], void **))((*v38)[0] + 16))(v38, &__p);
  *(unsigned char *)(a1 + 608) = 1;
  if (__p)
  {
    long double v66 = __p;
    operator delete(__p);
  }
  int v39 = *(unsigned __int8 *)(a1 + 192);
  if (*(unsigned char *)(a1 + 192))
  {
    uint64_t v40 = *(void *)(a1 + 592);
    long long v57 = *a2;
    int v58 = *((_DWORD *)a2 + 4);
    if (*((char *)a2 + 47) < 0)
    {
      sub_100002DE4(&v59, *((void **)a2 + 3), *((void *)a2 + 4));
    }
    else
    {
      long long v59 = *(long long *)((char *)a2 + 24);
      uint64_t v60 = *((void *)a2 + 5);
    }
    char v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    sub_10016D488(&v61, *((const void **)a2 + 6), *((void *)a2 + 7), *((void *)a2 + 7) - *((void *)a2 + 6));
    long long v64 = *(long long *)((char *)a2 + 72);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, long long *, void))(*(void *)v40 + 24))(buf, v40, &v57, 0);
    if (v61)
    {
      uint64_t v62 = v61;
      operator delete(v61);
    }
    if (SHIBYTE(v60) < 0) {
      operator delete((void *)v59);
    }
    if (!v75 || !buf[8]) {
      goto LABEL_83;
    }
    *(void *)(a1 + 600) = *(void *)buf;
    *(unsigned char *)(a1 + 608) = 1;
  }
  unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 576) - *(void *)(a1 + 568)) >> 3);
  unint64_t v42 = *(int *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 636))
  {
    if (v41 < v42) {
      goto LABEL_55;
    }
LABEL_66:
    if (!*(unsigned char *)(a1 + 608)) {
      sub_10000AE44();
    }
    *(_DWORD *)(a1 + 632) = sub_10034352C((unsigned int *)(a1 + 680), *(double *)(a1 + 600), *(double *)a2);
    goto LABEL_73;
  }
  if (v41 >= v42) {
    goto LABEL_66;
  }
  if (*(_DWORD *)(a1 + 632)) {
    goto LABEL_74;
  }
LABEL_55:
  double v43 = *(double **)(a1 + 96);
  if (v43 == (double *)(a1 + 104))
  {
    int v44 = 0;
  }
  else
  {
    int v44 = 0;
    double v45 = *(double *)(a1 + 600);
    while (1)
    {
      if (*(unsigned char *)(a1 + 608))
      {
        double v46 = v43[4];
        if (v45 > v46 + 3.0) {
          break;
        }
      }
      uint64_t v47 = (double *)*((void *)v43 + 1);
      if (v47)
      {
        do
        {
          int v48 = v47;
          uint64_t v47 = *(double **)v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          int v48 = (double *)*((void *)v43 + 2);
          BOOL v49 = *(void *)v48 == (void)v43;
          double v43 = v48;
        }
        while (!v49);
      }
      ++v44;
      double v43 = v48;
      if (v48 == (double *)(a1 + 104)) {
        goto LABEL_71;
      }
    }
    uint64_t v50 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v51 = *(void *)(a1 + 112);
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = v51;
      __int16 v69 = 2048;
      double v70 = v45;
      __int16 v71 = 2048;
      double v72 = v46;
      __int16 v73 = 2048;
      uint64_t v74 = 0x4008000000000000;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#threshold-detector, threshsize:%zu [in early] rssi: %f, rssiBorder: %f, rssiEarlyOffset: %f", buf, 0x2Au);
    }
  }
LABEL_71:
  unint64_t v52 = (v44 + 1);
  if (*(void *)(a1 + 112) < v52)
  {
    *(_DWORD *)(a1 + 632) = 0;
LABEL_73:
    *(unsigned char *)(a1 + 636) = 1;
    goto LABEL_74;
  }
  *(_DWORD *)(a1 + 632) = v52;
  *(unsigned char *)(a1 + 636) = 1;
  *(_DWORD *)(a1 + 680) = v52;
LABEL_74:
  *(void *)(a1 + 656) = *(void *)a2;
  *(unsigned char *)(a1 + 664) = 1;
  unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 576) - *(void *)(a1 + 568)) >> 3);
  if (!*(unsigned char *)(a1 + 676)) {
    *(unsigned char *)(a1 + 676) = 1;
  }
  *(_DWORD *)(a1 + 672) = v53;
  if (v39 && *(unsigned char *)(a1 + 192) && *(unsigned char *)(a1 + 608))
  {
    sub_1003438E0(a1, *(double *)(a1 + 600));
    *(void *)(a1 + 616) = v54;
    *(unsigned char *)(a1 + 624) = 1;
  }
  if (v41 < v42 && *(unsigned char *)(a1 + 636) && !*(_DWORD *)(a1 + 632))
  {
LABEL_83:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 80) = 0;
    return;
  }
  long long v55 = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a3 + 48) = v55;
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 664);
  long long v56 = *(_OWORD *)(a1 + 616);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 600);
  *(_OWORD *)(a3 + 16) = v56;
  *(unsigned char *)(a3 + 80) = 1;
}

void sub_1003434E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
}

unint64_t sub_10034352C(unsigned int *a1, double a2, double a3)
{
  uint64_t v5 = (unsigned int *)*((void *)a1 + 5);
  uint64_t v6 = (double *)(a1 + 12);
  if (v5 == a1 + 12)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    int v8 = (double *)*((void *)a1 + 5);
    do
    {
      double v9 = v8[4];
      if (v9 < a2) {
        int v10 = v7;
      }
      else {
        int v10 = v7 + 1;
      }
      if (v9 < a2) {
        break;
      }
      uint64_t v11 = (double *)*((void *)v8 + 1);
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          uint64_t v11 = *(double **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (double *)*((void *)v8 + 2);
          BOOL v13 = *(void *)v12 == (void)v8;
          int v8 = v12;
        }
        while (!v13);
      }
      int v7 = v10;
      int v8 = v12;
    }
    while (v12 != v6);
  }
  unint64_t v14 = (v7 + 1);
  unint64_t v15 = *((void *)a1 + 7);
  if (v15 >= v14) {
    uint64_t v16 = (v7 + 1);
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t result = *a1;
  if (result == -1)
  {
    *a1 = v16;
    return v16;
  }
  if (result == v16)
  {
    if (*((unsigned char *)a1 + 16)) {
      *((unsigned char *)a1 + 16) = 0;
    }
    a1[86] = 0;
    return v16;
  }
  int v18 = a1[86] + 1;
  a1[86] = v18;
  if (*((unsigned char *)a1 + 16))
  {
    double v19 = *((double *)a1 + 1);
  }
  else
  {
    *((double *)a1 + 1) = a3;
    *((unsigned char *)a1 + 16) = 1;
    double v19 = a3;
  }
  double v20 = a3 - v19;
  double v21 = *((double *)a1 + 8);
  double v22 = v21 - v20;
  if (v21 - v20 < 0.0) {
    double v22 = 0.0;
  }
  double v23 = v22 / v21;
  int v24 = a1[22];
  int v25 = (v24 - v18) & ~((v24 - v18) >> 31);
  if ((double)v25 / (double)v24 >= v23) {
    double v26 = v23;
  }
  else {
    double v26 = (double)v25 / (double)v24;
  }
  if (v15 >= v14)
  {
    if (result && v7 >= (int)result)
    {
      *(void *)unint64_t v41 = v5;
      sub_100343E50((void **)v41, (int)result - 1);
    }
    else
    {
      *(void *)unint64_t v41 = v5;
      sub_100343E50((void **)v41, v7);
    }
    double v29 = *(double *)(*(void *)v41 + 32);
    double v30 = vabdd_f64(a2, v29);
    unint64_t result = *a1;
    if ((int)v14 < (int)result || !result)
    {
      if (v30 >= v26 * *((double *)a1 + 9))
      {
        uint64_t v36 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v37 = a1[86];
          unsigned int v38 = a1[22];
          uint64_t v39 = *((void *)a1 + 7);
          uint64_t v40 = *((void *)a1 + 8);
          *(_DWORD *)unint64_t v41 = 134220032;
          *(void *)&v41[4] = v39;
          __int16 v42 = 2048;
          double v43 = a2;
          __int16 v44 = 2048;
          double v45 = v29;
          __int16 v46 = 2048;
          double v47 = v30;
          __int16 v48 = 2048;
          double v49 = v26;
          __int16 v50 = 1024;
          unsigned int v51 = v37;
          __int16 v52 = 1024;
          unsigned int v53 = v38;
          __int16 v54 = 2048;
          double v55 = v20;
          __int16 v56 = 2048;
          uint64_t v57 = v40;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#threshold-detector, threshsize:%zu [in] rssi: %f, rssiBorder: %f, rssiDelta: %f, mindecayfactor: %f, samples: %d/%d, time: %f/%f", v41, 0x54u);
        }
        *a1 = v14;
        if (*((unsigned char *)a1 + 16)) {
          *((unsigned char *)a1 + 16) = 0;
        }
        return v14;
      }
      return result;
    }
  }
  else
  {
    int32x2_t v27 = *(double **)v6;
    if (*(void *)v6)
    {
      do
      {
        int v28 = v27;
        int32x2_t v27 = (double *)*((void *)v27 + 1);
      }
      while (v27);
    }
    else
    {
      do
      {
        int v28 = (double *)*((void *)v6 + 2);
        BOOL v13 = *(void *)v28 == (void)v6;
        uint64_t v6 = v28;
      }
      while (v13);
    }
    double v29 = v28[4];
    double v30 = vabdd_f64(a2, v29);
  }
  if (v30 >= v26 * *((double *)a1 + 10))
  {
    unsigned int v31 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v32 = a1[86];
      unsigned int v33 = a1[22];
      uint64_t v34 = *((void *)a1 + 7);
      uint64_t v35 = *((void *)a1 + 8);
      *(_DWORD *)unint64_t v41 = 134220032;
      *(void *)&v41[4] = v34;
      __int16 v42 = 2048;
      double v43 = a2;
      __int16 v44 = 2048;
      double v45 = v29;
      __int16 v46 = 2048;
      double v47 = v30;
      __int16 v48 = 2048;
      double v49 = v26;
      __int16 v50 = 1024;
      unsigned int v51 = v32;
      __int16 v52 = 1024;
      unsigned int v53 = v33;
      __int16 v54 = 2048;
      double v55 = v20;
      __int16 v56 = 2048;
      uint64_t v57 = v35;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#threshold-detector, threshsize:%zu [out] rssi: %f, rssiBorder: %f, rssiDelta: %f, mindecayfactor: %f, samples: %d/%d, time: %f/%f", v41, 0x54u);
    }
    *a1 = v16;
    if (*((unsigned char *)a1 + 16)) {
      *((unsigned char *)a1 + 16) = 0;
    }
    return v16;
  }
  return result;
}

void sub_1003438E0(uint64_t a1, double a2)
{
  if (!*(unsigned char *)(a1 + 636)) {
    sub_10000AE44();
  }
  float v4 = (float)*(unint64_t *)(a1 + 112);
  int v5 = *(_DWORD *)(a1 + 632);
  if (v5 < 2)
  {
    if (v5 == 1)
    {
      double v7 = *(double *)(*(void *)(a1 + 96) + 32);
      float v10 = 1.0;
      double v11 = 1.0;
      double v8 = v7;
    }
    else
    {
      uint64_t v12 = a1 + 104;
      uint64_t v13 = *(void *)(a1 + 104);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(void *)(v13 + 8);
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = *(void *)(v12 + 16);
          BOOL v15 = *(void *)v14 == v12;
          uint64_t v12 = v14;
        }
        while (v15);
      }
      double v8 = *(double *)(v14 + 32);
      double v7 = v8 - *(double *)(a1 + 368);
      double v11 = 0.0;
      float v10 = 1.0 / v4;
    }
  }
  else
  {
    uint64_t v6 = (void *)(a1 + 96);
    *(void *)double v21 = *(void *)(a1 + 96);
    sub_100343E50((void **)v21, (v5 - 1));
    double v7 = *(double *)(*(void *)v21 + 32);
    *(void *)double v21 = *v6;
    sub_100343E50((void **)v21, (v5 - 2));
    double v8 = *(double *)(*(void *)v21 + 32);
    float v9 = (float)(v4 - (float)((float)v5 + -1.0)) / v4;
    float v10 = (float)(1.0 / v4) + v9;
    double v11 = v9;
  }
  double v16 = v10;
  double v17 = v10;
  if (v8 > a2)
  {
    double v17 = v11;
    if (v7 < a2) {
      double v17 = v11 + (a2 - v7) / (v8 - v7) * (v16 - v11);
    }
  }
  int v18 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    if (!*(unsigned char *)(a1 + 636)) {
      sub_10000AE44();
    }
    uint64_t v19 = *(void *)(a1 + 112);
    int v20 = *(_DWORD *)(a1 + 632);
    *(_DWORD *)double v21 = 134219776;
    *(void *)&v21[4] = v19;
    __int16 v22 = 1024;
    int v23 = v20;
    __int16 v24 = 2048;
    double v25 = a2;
    __int16 v26 = 2048;
    double v27 = v17;
    __int16 v28 = 2048;
    double v29 = v7;
    __int16 v30 = 2048;
    double v31 = v8;
    __int16 v32 = 2048;
    double v33 = v11;
    __int16 v34 = 2048;
    double v35 = v16;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#threshold-detector, threshsize:%zu, inbubblestate: %d, estimaterssi: %f, scaledoutput: %f, lowerbThresh: %f, upperbThresh: %f, tmin: %f, tmax: %f", v21, 0x4Eu);
  }
}

void sub_100343B2C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  float v4 = (uint64_t **)(a1 + 40);
  int v5 = *(double **)(a1 + 40);
  double v6 = *(double *)(a1 + 128);
  double v7 = v5[4];
  v18[0] = 0;
  v18[1] = 0;
  double v17 = (uint64_t *)v18;
  double v8 = (double *)(a1 + 48);
  if (v5 != (double *)(a1 + 48))
  {
    char v9 = 1;
    do
    {
      double v10 = v5[4];
      if (v9) {
        double v10 = v7 - v6;
      }
      *(double *)long long buf = v10;
      sub_100343FC8(&v17, (double *)buf, (uint64_t *)buf);
      double v11 = (double *)*((void *)v5 + 1);
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          double v11 = *(double **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (double *)*((void *)v5 + 2);
          BOOL v13 = *(void *)v12 == (void)v5;
          int v5 = v12;
        }
        while (!v13);
      }
      char v9 = 0;
      int v5 = v12;
    }
    while (v12 != v8);
  }
  if (v4 != &v17) {
    sub_100259BFC(v4, v17, v18);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v14 = *(double **)(a1 + 48);
  if (v14)
  {
    do
    {
      BOOL v15 = v14;
      uint64_t v14 = (double *)*((void *)v14 + 1);
    }
    while (v14);
  }
  else
  {
    do
    {
      BOOL v15 = (double *)*((void *)v8 + 2);
      BOOL v13 = *(void *)v15 == (void)v8;
      double v8 = v15;
    }
    while (v13);
  }
  *(double *)(a1 + 32) = v15[4];
  double v16 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218496;
    *(double *)&uint8_t buf[4] = v6;
    __int16 v20 = 2048;
    double v21 = v7;
    __int16 v22 = 2048;
    double v23 = v7 - v6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#threshold-detector, resetRssiOffset originalOffset: %f, originalRssiThresh: %f, newRssiThresh: %f", buf, 0x20u);
  }
  sub_10025A138(a2, (uint64_t)v4);
  sub_10003E96C((uint64_t)&v17, v18[0]);
}

void sub_100343D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100343D24()
{
  return 0;
}

uint64_t sub_100343D30(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = -1;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  sub_10025A138((uint64_t *)(a1 + 40), a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 64) = v4;
  sub_10025A21C(a1 + 96, (long long *)(a2 + 72));
  long long v5 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 144) = v5;
  long long v6 = *(_OWORD *)(a2 + 136);
  long long v7 = *(_OWORD *)(a2 + 152);
  long long v8 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 208) = v8;
  *(_OWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 176) = v7;
  long long v9 = *(_OWORD *)(a2 + 200);
  long long v10 = *(_OWORD *)(a2 + 216);
  long long v11 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 272) = v11;
  *(_OWORD *)(a1 + 224) = v9;
  *(_OWORD *)(a1 + 240) = v10;
  long long v12 = *(_OWORD *)(a2 + 264);
  long long v13 = *(_OWORD *)(a2 + 280);
  long long v14 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 336) = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 304) = v13;
  *(_OWORD *)(a1 + 320) = v14;
  *(_OWORD *)(a1 + 288) = v12;
  *(_DWORD *)(a1 + 344) = 0;
  return a1;
}

void sub_100343DFC(_Unwind_Exception *a1)
{
  sub_10003E96C(v2, *(void **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_100343E18(uint64_t a1)
{
  sub_100343EDC(a1);

  operator delete();
}

void **sub_100343E50(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    long long v7 = *result;
    do
    {
      long long v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          long long v4 = v8;
          long long v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          long long v7 = v4;
        }
        while (v5);
      }
      long long v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = *result;
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          long long v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          long long v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (a2-- > 1);
  }
  void *result = v4;
  return result;
}

uint64_t sub_100343EDC(uint64_t a1)
{
  *(void *)a1 = off_100861C98;
  if (*(unsigned char *)(a1 + 800) && *(char *)(a1 + 799) < 0) {
    operator delete(*(void **)(a1 + 776));
  }
  sub_10003E96C(a1 + 720, *(void **)(a1 + 728));
  uint64_t v2 = *(void *)(a1 + 592);
  *(void *)(a1 + 592) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void **)(a1 + 568);
  if (v3)
  {
    *(void *)(a1 + 576) = v3;
    operator delete(v3);
  }
  if (*(unsigned char *)(a1 + 176) && *(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  sub_10003E96C(a1 + 96, *(void **)(a1 + 104));
  *(void *)a1 = off_1008629E0;
  sub_10016CC78((void *)(a1 + 16));
  return a1;
}

uint64_t *sub_100343FC8(uint64_t **a1, double *a2, uint64_t *a3)
{
  long long v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    double v7 = *a2;
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v5;
        double v9 = *((double *)v5 + 4);
        if (v7 <= v9) {
          break;
        }
        BOOL v5 = (uint64_t *)*v5;
        long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 <= v7) {
        break;
      }
      BOOL v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v8 = a1 + 1;
LABEL_10:
    long long v10 = (uint64_t *)operator new(0x28uLL);
    void v10[4] = *a3;
    sub_100026D98(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_100344084()
{
  v8[0] = xmmword_1004C1C80;
  v8[1] = unk_1004C1C90;
  sub_1001A003C((uint64_t)&unk_1008AA2F0, (int *)v8, 4);
  xmmword_1008AA308 = xmmword_1004B7660;
  unk_1008AA318 = xmmword_1004B7670;
  qword_1008AA330 = 0;
  unk_1008AA338 = 0;
  qword_1008AA328 = 0x3FD999999999999ALL;
  unk_1008AA340 = xmmword_1004B7680;
  dword_1008AA350 = 5;
  qword_1008AA358 = 0x4000000000000000;
  dword_1008AA360 = 5;
  byte_1008AA368 = 0;
  unk_1008AA36C = 0x30000000ALL;
  xmmword_1008AA378 = xmmword_1004B7690;
  unk_1008AA388 = xmmword_1004B76A0;
  xmmword_1008AA398 = xmmword_1004B76B0;
  qword_1008AA3A8 = 0x3FE3333333333333;
  dword_1008AA3B0 = 3;
  xmmword_1008AA3B8 = xmmword_1004B76C0;
  unk_1008AA3C8 = xmmword_1004B76A0;
  xmmword_1008AA3D8 = xmmword_1004B7690;
  qword_1008AA3E8 = 0x3FE3333333333333;
  byte_1008AA3F0 = 0;
  xmmword_1008AA3F8 = xmmword_1004B76D0;
  unk_1008AA408 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v6 = _Q0;
  xmmword_1008AA418 = _Q0;
  qword_1008AA428 = 0xBFD3333333333333;
  xmmword_1008AA430 = xmmword_1004B76F0;
  qword_1008AA440 = 0x3E99999A40000000;
  xmmword_1008AA448 = xmmword_1004B7670;
  qword_1008AA460 = 0;
  unk_1008AA468 = 0;
  qword_1008AA458 = 0x3FD999999999999ALL;
  xmmword_1008AA470 = xmmword_1004B7680;
  dword_1008AA480 = 5;
  qword_1008AA488 = 0x4000000000000000;
  dword_1008AA490 = 4;
  qword_1008AA498 = 0x300000008;
  qword_1008AA4A0 = 0xC04E800000000000;
  unint64_t v7 = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)algn_1008AA4A8, (double *)&v7, 1);
  xmmword_1008AA4C0 = xmmword_1004B7700;
  qword_1008AA4D0 = 0x4024000000000000;
  dword_1008AA4D8 = 45;
  byte_1008AA4E0 = 0;
  byte_1008AA4F8 = 0;
  qword_1008AA500 = 0;
  byte_1008AA508 = 0;
  dword_1008AA50C = 1;
  byte_1008AA510 = 1;
  xmmword_1008AA518 = xmmword_1004B7710;
  unk_1008AA528 = xmmword_1004B7720;
  xmmword_1008AA538 = v6;
  qword_1008AA548 = 0xC059000000000000;
  xmmword_1008AA550 = xmmword_1004B7730;
  qword_1008AA560 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008AA568 = xmmword_1004B7670;
  qword_1008AA578 = 0x3FD999999999999ALL;
  qword_1008AA588 = 0;
  qword_1008AA580 = 0;
  xmmword_1008AA590 = xmmword_1004B7680;
  dword_1008AA5A0 = 5;
  qword_1008AA5A8 = 0x4000000000000000;
  dword_1008AA5B0 = 10;
  qword_1008AA5B8 = 0x4034000000000000;
  dword_1008AA5C0 = 3;
  xmmword_1008AA5C8 = xmmword_1004B7740;
  return __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008AA2F0, (void *)&_mh_execute_header);
}

void sub_100344338(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100344358(uint64_t a1, double *a2)
{
  sub_1003443FC((void *)a1, (uint64_t)a2);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    unint64_t v5 = *(void *)(a1 + 32);
    if (*a2 - *(double *)(*(void *)(*(void *)(a1 + 8) + 8 * (v5 / 0x1E)) + 136 * (v5 % 0x1E)) > *(double *)(a1 + 368))
    {
      *(void *)(a1 + 32) = v5 + 1;
      *(void *)(a1 + 40) = v4 - 1;
      sub_1003451F4(a1, 1);
    }
  }
}

__n128 sub_1003443FC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 30 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100344EDC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x1E)) + 136 * (v7 % 0x1E);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = v10;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 112);
  *(void *)(v8 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 112) = v14;
  *(__n128 *)(v8 + 80) = result;
  ++a1[5];
  return result;
}

float32x4_t sub_1003444CC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  if (*(unsigned char *)(a2 + 16))
  {
    double v7 = *(double *)(a1 + 376);
    *(float *)&double v7 = v7;
    float32x4_t v8 = vdivq_f32(*(float32x4_t *)a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v7, 0));
    if (!*(unsigned char *)(a1 + 352)) {
      *(unsigned char *)(a1 + 352) = 1;
    }
    *(float32x4_t *)(a1 + 336) = v8;
  }
  sub_1003445CC(a1, *(double *)(a2 + 64), a4);
  __n128 v21 = v9;
  long long v10 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10043268C(v10, v21);
  }
  int32x4_t v11 = (int32x4_t)vnegq_f32((float32x4_t)v21);
  int8x16_t v12 = (int8x16_t)vtrn2q_s32((int32x4_t)v21, vtrn1q_s32((int32x4_t)v21, v11));
  long long v14 = *(_OWORD *)(a2 + 32);
  float32x4_t v13 = *(float32x4_t *)(a2 + 48);
  float32x4_t v15 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v11, 8uLL), *(float32x2_t *)v13.f32, 1), (float32x4_t)vextq_s8(v12, v12, 8uLL), v13.f32[0]);
  float32x4_t v16 = (float32x4_t)vrev64q_s32((int32x4_t)v21);
  v16.i32[0] = v11.i32[1];
  v16.i32[3] = v11.i32[2];
  float32x4_t v17 = vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v21, v13, 3), v16, v13, 2);
  long long v18 = *(_OWORD *)(a2 + 64);
  long long v19 = *(_OWORD *)(a2 + 16);
  float32x4_t result = vaddq_f32(v15, v17);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v19;
  *(_OWORD *)(a3 + 32) = v14;
  *(float32x4_t *)(a3 + 48) = result;
  *(_OWORD *)(a3 + 64) = v18;
  *(double *)(a3 + 64) = a4;
  return result;
}

uint64_t sub_1003445CC(uint64_t a1, double a2, double a3)
{
  sub_100344DCC(a1, &v7, a2);
  return sub_100344DCC(a1, &v6, a3);
}

float32x4_t sub_1003446DC@<Q0>(uint64_t a1@<X0>, long long *a2@<X1>, double *a3@<X8>, double a4@<D0>)
{
  double v8 = *(double *)a2;
  sub_1003445CC(a1, *(double *)a2, a4);
  if (*(unsigned char *)(a1 + 352)) {
    float32x4_t v10 = *(float32x4_t *)(a1 + 336);
  }
  else {
    float32x4_t v10 = 0uLL;
  }
  float32x4_t v132 = v10;
  float32x4_t v128 = (float32x4_t)a2[2];
  float32x4_t v129 = (float32x4_t)a2[1];
  float32x4_t v126 = (float32x4_t)a2[4];
  float32x4_t v127 = (float32x4_t)a2[3];
  *(double *)&long long v11 = sub_100344D00(v9);
  uint64_t v12 = 0;
  long long v134 = v11;
  long long v135 = v13;
  long long v136 = v14;
  long long v137 = v15;
  do
  {
    *(float32x4_t *)((char *)&v138 + v12) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, COERCE_FLOAT(*(long long *)((char *)&v134 + v12))), v128, *(float32x2_t *)((char *)&v134 + v12), 1), v127, *(float32x4_t *)((char *)&v134 + v12), 2), v126, *(float32x4_t *)((char *)&v134 + v12), 3);
    v12 += 16;
  }
  while (v12 != 64);
  uint64_t v16 = *(void *)(a1 + 8);
  unint64_t v18 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  unint64_t v19 = v18 / 0x1E;
  if (v17) {
    double v20 = *(double *)(*(void *)(v16 + 8 * v19) + 136 * (v18 % 0x1E));
  }
  else {
    double v20 = 0.0;
  }
  float32x4_t v21 = v132;
  int32x4_t v122 = v139;
  int32x4_t v123 = v138;
  float32x4_t v120 = v141;
  float32x4_t v121 = v140;
  float32x4_t v22 = 0uLL;
  if (*(void *)(a1 + 16) != v16)
  {
    uint64_t v23 = *(void *)(v16 + 8 * v19);
    uint64_t v24 = v23 + 136 * (v18 % 0x1E);
    unint64_t v25 = *(void *)(v16 + 8 * ((v18 + v17) / 0x1E)) + 136 * ((v18 + v17) % 0x1E);
    if (v24 != v25)
    {
      int v26 = 0;
      double v27 = (uint64_t *)(v16 + 8 * v19);
      float32x4_t v28 = (float32x4_t)vdupq_n_s32(0xBF3504F3);
      v29.i64[0] = 0x8000000080000000;
      v29.i64[1] = 0x8000000080000000;
      float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x3F3504F3u);
      float32x4_t v31 = (float32x4_t)xmmword_1004C1CE0;
      float32x4_t v32 = 0uLL;
      float32x4_t v124 = v30;
      float32x4_t v125 = v28;
      do
      {
        double v33 = *(double *)v24;
        if (v8 < *(double *)v24)
        {
          double v35 = *(double *)(v24 + 16);
          double v34 = *(double *)(v24 + 24);
          int8x16_t v36 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v24 + 56)), *(float64x2_t *)(v24 + 72));
          int32x4_t v37 = (int32x4_t)vextq_s8(v36, v36, 4uLL);
          int32x4_t v38 = (int32x4_t)vnegq_f32((float32x4_t)v37);
          int8x16_t v39 = (int8x16_t)vtrn2q_s32(v37, vtrn1q_s32(v37, v38));
          float32x4_t v40 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL), v29), v28, (float32x4_t)vextq_s8(v39, v39, 8uLL));
          float32x4_t v41 = (float32x4_t)vrev64q_s32(v37);
          v41.i32[0] = v38.i32[1];
          double v42 = *(double *)(v24 + 8);
          v41.i32[3] = v38.i32[2];
          float32x4_t v43 = vaddq_f32(vmlaq_f32(vmulq_f32((float32x4_t)v37, v30), v29, v41), v40);
          if (!v26)
          {
            int32x4_t v130 = (int32x4_t)v43;
            float32x4_t v131 = v22;
            float32x4_t v133 = v21;
            *(double *)&long long v44 = sub_100344D00((float32x4_t)xmmword_1004C1D00);
            uint64_t v45 = 0;
            long long v134 = v44;
            long long v135 = v46;
            long long v136 = v47;
            long long v137 = v48;
            do
            {
              *(float32x4_t *)((char *)&v138 + v45) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v129, COERCE_FLOAT(*(long long *)((char *)&v134 + v45))), v128, *(float32x2_t *)((char *)&v134 + v45), 1), v127, *(float32x4_t *)((char *)&v134 + v45), 2), v126, *(float32x4_t *)((char *)&v134 + v45), 3);
              v45 += 16;
            }
            while (v45 != 64);
            float v49 = v140.f32[2] + (float)(*(float *)v138.i32 + *(float *)&v139.i32[1]);
            float32x4_t v22 = v131;
            float32x4_t v21 = v133;
            float32x4_t v30 = v124;
            float32x4_t v28 = v125;
            v29.i64[0] = 0x8000000080000000;
            v29.i64[1] = 0x8000000080000000;
            float32x4_t v31 = (float32x4_t)xmmword_1004C1CE0;
            float32x4_t v43 = (float32x4_t)v130;
            if (v49 >= 0.0)
            {
              float v58 = sqrtf(v49 + 1.0);
              float v59 = v58 + v58;
              float32x2_t v60 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v58 + v58));
              float32x2_t v61 = vmul_f32(v60, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v58 + v58), v60));
              LODWORD(v62) = vmul_f32(v61, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v58 + v58), v61)).u32[0];
              float v68 = vmuls_lane_f32(v62, (float32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_laneq_s32(v139, 2), v140), 1);
              float v69 = vmuls_n_f32(vsubq_f32(v140, (float32x4_t)vdupq_laneq_s32(v138, 2)).f32[0], v62);
              float v70 = vmuls_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.i8, 1), (float32x4_t)v139).f32[0], v62);
              float v71 = v59 * 0.25;
            }
            else if (*(float *)v138.i32 < *(float *)&v139.i32[1] || *(float *)v138.i32 < v140.f32[2])
            {
              float v51 = 1.0 - *(float *)v138.i32;
              if (*(float *)&v139.i32[1] >= v140.f32[2])
              {
                float v72 = sqrtf(*(float *)&v139.i32[1] + (float)(v51 - v140.f32[2]));
                float v73 = v72 + v72;
                float32x2_t v74 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v72 + v72));
                float32x2_t v75 = vmul_f32(v74, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v72 + v72), v74));
                unsigned __int32 v56 = vmul_f32(v75, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v72 + v72), v75)).u32[0];
                float v68 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.i8, 1), (float32x4_t)v139).f32[0], *(float *)&v56);
                float v69 = v73 * 0.25;
                float v70 = vmuls_lane_f32(*(float *)&v56, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32(v139, 2), v140), 1);
                unsigned __int32 v57 = vsubq_f32(v140, (float32x4_t)vdupq_laneq_s32(v138, 2)).u32[0];
              }
              else
              {
                float v52 = sqrtf(v140.f32[2] + (float)(v51 - *(float *)&v139.i32[1]));
                float v53 = v52 + v52;
                float32x2_t v54 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v52 + v52));
                float32x2_t v55 = vmul_f32(v54, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v52 + v52), v54));
                unsigned __int32 v56 = vmul_f32(v55, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v52 + v52), v55)).u32[0];
                float v68 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v138, 2), v140).f32[0], *(float *)&v56);
                float v69 = vmuls_lane_f32(*(float *)&v56, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32(v139, 2), v140), 1);
                float v70 = v53 * 0.25;
                unsigned __int32 v57 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.i8, 1), (float32x4_t)v139).u32[0];
              }
              float v71 = vmuls_n_f32(*(float *)&v57, *(float *)&v56);
            }
            else
            {
              float v63 = sqrtf(*(float *)v138.i32 + (float)((float)(1.0 - *(float *)&v139.i32[1]) - v140.f32[2]));
              *(float *)&unsigned int v64 = v63 + v63;
              float32x2_t v65 = vrecpe_f32((float32x2_t)v64);
              float32x2_t v66 = vmul_f32(v65, vrecps_f32((float32x2_t)v64, v65));
              LODWORD(v67) = vmul_f32(v66, vrecps_f32((float32x2_t)v64, v66)).u32[0];
              float v68 = *(float *)&v64 * 0.25;
              float v69 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.i8, 1), (float32x4_t)v139).f32[0], v67);
              float v70 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v138, 2), v140).f32[0], v67);
              float v71 = vmuls_lane_f32(v67, (float32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_laneq_s32(v139, 2), v140), 1);
            }
            int32x4_t v76 = (int32x4_t)vnegq_f32((float32x4_t)v130);
            int8x16_t v77 = (int8x16_t)vtrn2q_s32(v130, vtrn1q_s32(v130, v76));
            float32x4_t v78 = (float32x4_t)vrev64q_s32(v130);
            v78.i32[0] = v76.i32[1];
            v78.i32[3] = v76.i32[2];
            float32x4_t v32 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v130, (int8x16_t)v76, 8uLL), v69), (float32x4_t)vextq_s8(v77, v77, 8uLL), v68), vmlaq_n_f32(vmulq_n_f32((float32x4_t)v130, v71), v78, v70));
            uint64_t v23 = *v27;
            int v26 = 1;
          }
          float v79 = v42;
          float v80 = v35;
          float v81 = v34;
          int32x4_t v82 = (int32x4_t)vmulq_f32(v43, v31);
          int32x4_t v83 = (int32x4_t)vnegq_f32((float32x4_t)v82);
          int8x16_t v84 = (int8x16_t)vtrn2q_s32(v82, vtrn1q_s32(v82, v83));
          float32x4_t v85 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v83, 8uLL), v80), (float32x4_t)vextq_s8(v84, v84, 8uLL), v79);
          float32x4_t v86 = (float32x4_t)vrev64q_s32(v82);
          v86.i32[0] = v83.i32[1];
          v86.i32[3] = v83.i32[2];
          int32x4_t v87 = (int32x4_t)vmlaq_n_f32(v85, v86, v81);
          int32x4_t v88 = (int32x4_t)vnegq_f32((float32x4_t)v87);
          int8x16_t v89 = (int8x16_t)vtrn2q_s32(v87, vtrn1q_s32(v87, v88));
          float32x4_t v90 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v88, 8uLL), *(float32x2_t *)v43.f32, 1), (float32x4_t)vextq_s8(v89, v89, 8uLL), v43.f32[0]);
          float32x4_t v91 = (float32x4_t)vrev64q_s32(v87);
          v91.i32[0] = v88.i32[1];
          v91.i32[3] = v88.i32[2];
          float32x4_t v92 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v87, v43, 3), v91, v43, 2), v90);
          int32x4_t v93 = (int32x4_t)vmulq_f32(v32, v31);
          int32x4_t v94 = (int32x4_t)vnegq_f32((float32x4_t)v93);
          int8x16_t v95 = (int8x16_t)vtrn2q_s32(v93, vtrn1q_s32(v93, v94));
          float32x4_t v96 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v93, (int8x16_t)v94, 8uLL), *(float32x2_t *)v92.f32, 1), (float32x4_t)vextq_s8(v95, v95, 8uLL), v92.f32[0]);
          float32x4_t v97 = (float32x4_t)vrev64q_s32(v93);
          v97.i32[0] = v94.i32[1];
          v97.i32[3] = v94.i32[2];
          int32x4_t v98 = (int32x4_t)vmlaq_laneq_f32(v96, v97, v92, 2);
          int32x4_t v99 = (int32x4_t)vnegq_f32((float32x4_t)v98);
          int8x16_t v100 = (int8x16_t)vtrn2q_s32(v98, vtrn1q_s32(v98, v99));
          float32x4_t v101 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v98, (int8x16_t)v99, 8uLL), *(float32x2_t *)v32.f32, 1), (float32x4_t)vextq_s8(v100, v100, 8uLL), v32.f32[0]);
          float32x4_t v102 = (float32x4_t)vrev64q_s32(v98);
          v102.i32[0] = v99.i32[1];
          v102.i32[3] = v99.i32[2];
          float32x4_t v103 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)v98, v32, 3), v102, v32, 2), v101);
          v102.f32[0] = v33 - v20;
          float32x4_t v22 = vmlaq_n_f32(v22, v21, v102.f32[0]);
          float32x4_t v21 = vmlaq_n_f32(v21, v103, v102.f32[0]);
        }
        v24 += 136;
        if (v24 - v23 == 4080)
        {
          uint64_t v104 = v27[1];
          ++v27;
          uint64_t v23 = v104;
          uint64_t v24 = v104;
        }
        double v20 = v33;
      }
      while (v24 != v25);
    }
  }
  long long v105 = a2[5];
  *((_OWORD *)a3 + 4) = a2[4];
  *((_OWORD *)a3 + 5) = v105;
  long long v106 = a2[7];
  *((_OWORD *)a3 + 6) = a2[6];
  *((_OWORD *)a3 + 7) = v106;
  long long v107 = a2[1];
  *(_OWORD *)a3 = *a2;
  *((_OWORD *)a3 + 1) = v107;
  long long v108 = a2[3];
  *((_OWORD *)a3 + 2) = a2[2];
  *((_OWORD *)a3 + 3) = v108;
  v109 = (_OWORD *)(a1 + 192);
  long long v110 = *a2;
  long long v111 = a2[1];
  long long v112 = a2[3];
  if (*(unsigned char *)(a1 + 320))
  {
    *(_OWORD *)(a1 + 224) = a2[2];
    *(_OWORD *)(a1 + 240) = v112;
    _OWORD *v109 = v110;
    *(_OWORD *)(a1 + 208) = v111;
    long long v113 = a2[4];
    long long v114 = a2[5];
    long long v115 = a2[6];
    *(void *)(a1 + 304) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 272) = v114;
    *(_OWORD *)(a1 + 288) = v115;
    *(_OWORD *)(a1 + 256) = v113;
  }
  else
  {
    *(_OWORD *)(a1 + 224) = a2[2];
    *(_OWORD *)(a1 + 240) = v112;
    _OWORD *v109 = v110;
    *(_OWORD *)(a1 + 208) = v111;
    long long v116 = a2[4];
    long long v117 = a2[5];
    long long v118 = a2[7];
    *(_OWORD *)(a1 + 288) = a2[6];
    *(_OWORD *)(a1 + 304) = v118;
    *(_OWORD *)(a1 + 256) = v116;
    *(_OWORD *)(a1 + 272) = v117;
    *(unsigned char *)(a1 + 320) = 1;
  }
  v22.i32[3] = 0;
  float32x4_t result = vaddq_f32(v120, v22);
  *((int32x4_t *)a3 + 1) = v123;
  *((int32x4_t *)a3 + 2) = v122;
  *((float32x4_t *)a3 + 3) = v121;
  *((float32x4_t *)a3 + 4) = result;
  *a3 = a4;
  return result;
}

double sub_100344D00(float32x4_t _Q0)
{
  _S3 = _Q0.u32[1];
  _S5 = _Q0.u32[2];
  __asm { FMLS            S1, S5, V0.S[2] }
  _S7 = _Q0.u32[3];
  __asm { FMLA            S1, S7, V0.S[3] }
  float v10 = vmlas_n_f32(vmuls_lane_f32(_Q0.f32[2], _Q0, 3), _Q0.f32[1], _Q0.f32[0]);
  LODWORD(v11) = _S1;
  *((float *)&v11 + 1) = v10 + v10;
  __asm
  {
    FMLA            S6, S3, V0.S[1]
    FMLA            S6, S7, V0.S[3]
    FMLS            S6, S0, V0.S[0]
    FMLA            S18, S5, V0.S[1]
    FMLA            S17, S0, V0.S[2]
    FMLA            S16, S5, V0.S[1]
    FMLA            S7, S5, V0.S[2]
    FMLS            S7, S0, V0.S[0]
    FMLS            S7, S3, V0.S[1]
  }
  return v11;
}

uint64_t sub_100344DCC@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v3 = *(void *)(result + 40);
  if (v3
    && (uint64_t v4 = *(void *)(result + 8),
        unint64_t v5 = *(void *)(result + 32),
        int8x16_t v6 = (unint64_t *)(v4 + 8 * (v5 / 0x1E)),
        unint64_t v7 = *v6,
        unint64_t v8 = *v6 + 136 * (v5 % 0x1E),
        *(double *)v8 <= a3))
  {
    if (*(void *)(result + 16) != v4)
    {
      float32x4_t result = 30;
      while (v8 != *(void *)(v4 + 8 * ((v5 + v3) / 0x1E)) + 136 * ((v5 + v3) % 0x1E))
      {
        if (*(double *)v8 > a3)
        {
          float64x2_t v12 = *(float64x2_t *)(v8 + 72);
          float64x2_t v13 = *(float64x2_t *)(v8 + 56);
          goto LABEL_12;
        }
        v8 += 136;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
    }
    unint64_t v11 = *(void *)(v4 + 8 * ((v3 + v5 - 1) / 0x1E)) + 136 * ((v3 + v5 - 1) % 0x1E);
    float64x2_t v12 = *(float64x2_t *)(v11 + 72);
    float64x2_t v13 = *(float64x2_t *)(v11 + 56);
LABEL_12:
    int8x16_t v14 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v13), v12);
    *a2 = vextq_s8(v14, v14, 4uLL);
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
    a2->i8[0] = 0;
  }
  a2[1].i8[0] = v9;
  return result;
}

void sub_100344EDC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1E;
  unint64_t v4 = v2 - 30;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int8x16_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_100056BF0(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      int32x4_t v37 = &v34[8 * v36];
      int32x4_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float32x4_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float32x4_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_100151930((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      int32x4_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float32x4_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned __int32 v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0xFF0uLL);
  sub_100151A50(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  float32x4_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1003451A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003451F4(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1E) {
    a2 = 1;
  }
  if (v2 < 0x3C) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 30;
  }
  return v4 ^ 1u;
}

uint64_t sub_100345254(uint64_t a1, __n128 *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)a1 = off_100861CF0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 448) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 504) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 576) = 0;
  sub_10038D36C(a1 + 584, a2);
  return a1;
}

void sub_100345330(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_10034534C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004329E8();
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  *(_WORD *)(a2 + 168) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    sub_100345B60(a1, (uint64_t)buf);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)buf;
    *(_OWORD *)(a2 + 145) = *(_OWORD *)&buf[9];
    if (!*(unsigned char *)(a1 + 56)) {
      sub_10000AE44();
    }
    double v4 = *(double *)(a1 + 48) + dbl_1004C1D10[*(unsigned char *)(a1 + 40) == 0];
    if (*(unsigned char *)(a1 + 448) && *(unsigned char *)(a1 + 312))
    {
      double v5 = v4 - *(double *)(a1 + 320);
      if (v5 <= 6.3)
      {
        double v24 = v4 - *(double *)(a1 + 304);
        double v25 = v24 / 0.1;
        BOOL v26 = v24 <= 409.5;
        double v27 = 4095.0;
        if (v26) {
          double v27 = v25;
        }
        double v28 = fmod(round(v27) * 0.1, 409.6);
        if (v28 < 0.0) {
          double v29 = 409.6;
        }
        else {
          double v29 = -0.0;
        }
        double v30 = v28 + v29 + 0.0;
        double v31 = fmod(round(v5 / 0.1) * 0.1, 6.4);
        if (v31 < 0.0) {
          double v32 = 6.4;
        }
        else {
          double v32 = -0.0;
        }
        double v33 = v31 + v32 + 0.0;
        int8x16_t __x = *(int8x16_t *)(a1 + 384);
        double v34 = fmod(round(*(float *)&__x.i32[1] / 0.1) * 0.1 + 25.6, 51.2);
        if (v34 < 0.0) {
          double v35 = 51.2;
        }
        else {
          double v35 = -0.0;
        }
        double v36 = v34 + v35 + -25.6;
        *(double *)(a2 + 24) = v30;
        *(double *)(a2 + 32) = v33;
        *(_DWORD *)(a2 + 40) = 0;
        v37.i32[0] = vextq_s8(__x, __x, 8uLL).u32[0];
        v37.i32[1] = __x.i32[0];
        float64x2_t v38 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
        int8x16_t __xb = (int8x16_t)vaddq_f64(vmulq_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_f32(v37), v38)), v38), (float64x2_t)vdupq_n_s64(0x407999999999999AuLL));
        long double v61 = fmod(*(long double *)&__xb.i64[1], 819.2);
        v39.f64[0] = fmod(*(long double *)__xb.i64, 819.2);
        v39.f64[1] = v61;
        *(float64x2_t *)(a2 + 48) = vaddq_f64(vaddq_f64(v39, (float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(v39), (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vdupq_n_s64(0x408999999999999AuLL))), (float64x2_t)vdupq_n_s64(0xC07999999999999ALL));
        *(double *)(a2 + 64) = v36;
        *(unsigned char *)(a2 + 72) = 1;
        goto LABEL_57;
      }
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_10043297C();
      }
    }
    if (!*(unsigned char *)(a1 + 576))
    {
LABEL_14:
      if (*(unsigned char *)(a1 + 568))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_10043287C();
        }
        double v11 = v4 - *(double *)(a1 + 544);
        if (v11 <= 6.3)
        {
          double v40 = v4 - *(double *)(a1 + 536);
          double v41 = v40 / 0.1;
          BOOL v26 = v40 <= 409.5;
          double v42 = 4095.0;
          if (v26) {
            double v42 = v41;
          }
          double v43 = fmod(round(v42) * 0.1, 409.6);
          if (v43 < 0.0) {
            double v44 = 409.6;
          }
          else {
            double v44 = -0.0;
          }
          double v45 = v43 + v44 + 0.0;
          double v46 = fmod(round(v11 / 0.1) * 0.1, 6.4);
          if (v46 < 0.0) {
            double v47 = 6.4;
          }
          else {
            double v47 = -0.0;
          }
          *(double *)(a2 + 80) = v45;
          *(double *)(a2 + 88) = v46 + v47 + 0.0;
          float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x3FA999999999999AuLL);
          float64x2_t __xc = vaddq_f64(vmulq_f64(vrndaq_f64(vdivq_f64(*(float64x2_t *)(a1 + 552), v48)), v48), (float64x2_t)vdupq_n_s64(0x401999999999999AuLL));
          long double v62 = fmod(__xc.f64[1], 12.8);
          v49.f64[0] = fmod(__xc.f64[0], 12.8);
          v49.f64[1] = v62;
          *(float64x2_t *)(a2 + 96) = vaddq_f64(vaddq_f64(v49, (float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(v49), (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vdupq_n_s64(0x402999999999999AuLL))), (float64x2_t)vdupq_n_s64(0xC01999999999999ALL));
          *(unsigned char *)(a2 + 112) = 1;
        }
        else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
        {
          sub_100432810();
        }
      }
      goto LABEL_57;
    }
    double v6 = *(double *)(a1 + 464);
    double v7 = *(double *)(a1 + 472);
    double v8 = v4 - v6;
    char v9 = qword_1008ABDE0;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
    if (v4 - v6 > 6.3)
    {
      if (v10) {
        sub_100432910();
      }
      goto LABEL_14;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 134218496;
      *(double *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&unsigned char buf[24] = v4;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#findalgs-findee, Providing PDR displacement, enter time: %f, applicable time: %f, transmission time: %f", buf, 0x20u);
    }
    double v12 = 4095.0;
    if (v4 - v7 <= 409.5) {
      double v12 = (v4 - v7) / 0.1;
    }
    double v13 = fmod(round(v12) * 0.1, 409.6);
    if (v13 < 0.0) {
      double v14 = 409.6;
    }
    else {
      double v14 = -0.0;
    }
    double v15 = v13 + v14 + 0.0;
    double v16 = fmod(round(v8 / 0.1) * 0.1, 6.4);
    if (v16 < 0.0) {
      double v17 = 6.4;
    }
    else {
      double v17 = -0.0;
    }
    double v18 = v16 + v17 + 0.0;
    double v19 = fmod(round(*(double *)(a1 + 520) / 0.1) * 0.1 + 25.6, 51.2);
    if (v19 < 0.0) {
      double v20 = 51.2;
    }
    else {
      double v20 = -0.0;
    }
    double v21 = v19 + v20 + -25.6;
    *(double *)(a2 + 24) = v15;
    *(double *)(a2 + 32) = v18;
    *(_DWORD *)(a2 + 40) = 1;
    float64x2_t v22 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
    float64x2_t __xa = vaddq_f64(vmulq_f64(vrndaq_f64(vdivq_f64(*(float64x2_t *)(a1 + 504), v22)), v22), (float64x2_t)vdupq_n_s64(0x407999999999999AuLL));
    long double v60 = fmod(__xa.f64[1], 819.2);
    v23.f64[0] = fmod(__xa.f64[0], 819.2);
    v23.f64[1] = v60;
    *(float64x2_t *)(a2 + 48) = vaddq_f64(vaddq_f64(v23, (float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(v23), (int8x16_t)vdupq_n_s64(0x8000000000000000), (int8x16_t)vdupq_n_s64(0x408999999999999AuLL))), (float64x2_t)vdupq_n_s64(0xC07999999999999ALL));
    *(double *)(a2 + 64) = v21;
    *(unsigned char *)(a2 + 72) = 1;
LABEL_57:
    if (*(unsigned char *)(a1 + 248))
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004327DC();
      }
      int v50 = 0;
      float v51 = (double *)(a1 + 232);
    }
    else
    {
      int v52 = *(unsigned __int8 *)(a1 + 296);
      if (*(unsigned char *)(a1 + 272))
      {
        if (!*(unsigned char *)(a1 + 296))
        {
LABEL_78:
          if (*(unsigned char *)(a1 + 32))
          {
            double v59 = *(double *)(a1 + 8);
            sub_100004950(__p, "Findee");
            *(_WORD *)(a2 + 168) = sub_10038D474(a1 + 584, (uint64_t *)__p, v59) | 0x100;
            if (v68 < 0) {
              operator delete(__p[0]);
            }
          }
          return;
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004327A8();
        }
      }
      else
      {
        BOOL v53 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
        if (v52)
        {
          if (v53) {
            sub_100432774();
          }
          float v51 = (double *)(a1 + 288);
          int v50 = 1;
          goto LABEL_72;
        }
        if (v53) {
          sub_100432740();
        }
      }
      float v51 = (double *)(a1 + 288);
      int v50 = 2;
    }
LABEL_72:
    double v54 = v4 - *v51;
    double v55 = v54 / 0.1;
    BOOL v26 = v54 <= 409.5;
    double v56 = 4095.0;
    if (v26) {
      double v56 = v55;
    }
    double v57 = fmod(round(v56) * 0.1, 409.6);
    double v58 = -0.0;
    if (v57 < 0.0) {
      double v58 = 409.6;
    }
    *(double *)a2 = v57 + v58 + 0.0;
    *(_DWORD *)(a2 + 8) = v50;
    *(unsigned char *)(a2 + 16) = 1;
    goto LABEL_78;
  }
}

void sub_100345B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100345B60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 168) || !*(unsigned char *)(a1 + 32)) {
    goto LABEL_16;
  }
  double v15 = 0.0;
  if (!sub_1003892E4(a1, &v15, *(double *)(a1 + 80)))
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_100432C38();
    }
    goto LABEL_16;
  }
  double v4 = vabdd_f64(*(double *)(a1 + 8), v15);
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100432BCC();
  }
  double v5 = 0.0;
  if (v4 > 1.0)
  {
    if (!*(unsigned char *)(a1 + 168)) {
      sub_10000AE44();
    }
    double v6 = *(double *)(a1 + 104);
    if (v6 <= 3.0)
    {
      double v5 = (v4 + -1.0) * fmax(v6, 2.0);
      double v8 = *(double *)(a1 + 120);
    }
    else
    {
      double v7 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 134217984;
        *(double *)((char *)&buf + 4) = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#findalgs-findee, #clcc,findee location speed exceeds a brisk walking pace,inflating uncertainty before transmitting,%.1lf", (uint8_t *)&buf, 0xCu);
      }
      double v8 = *(double *)(a1 + 120);
      double v5 = 200.0 - v8;
    }
    if (v5 + v8 > 200.0)
    {
LABEL_16:
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return;
    }
  }
  *(void *)&long long buf = sub_100030414(*(double *)(a1 + 64));
  *((void *)&buf + 1) = sub_100030414(*(double *)(a1 + 72));
  double v9 = sub_100393198((double *)&buf);
  double v11 = v10;
  int v12 = sub_100393378(v5 + *(double *)(a1 + 120));
  unint64_t v13 = 0x407FF00000000000;
  if (v9 <= 511.0)
  {
    if (v9 >= -512.0)
    {
      unint64_t v14 = *(void *)&v9;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100432B60();
      }
      unint64_t v14 = 0xC080000000000000;
    }
  }
  else
  {
    unint64_t v14 = 0x407FF00000000000;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100432AF4();
    }
  }
  if (v11 <= 511.0)
  {
    if (v11 >= -512.0)
    {
      unint64_t v13 = *(void *)&v11;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100432A88();
      }
      unint64_t v13 = 0xC080000000000000;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100432A1C();
  }
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 16) = v12;
  *(unsigned char *)(a2 + 24) = 1;
}

void sub_100345E54(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100432CB8();
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 56) = 1;
  if (*(unsigned char *)(a2 + 183))
  {
    if (*(unsigned char *)(a2 + 182) == 1)
    {
      if (!*(unsigned char *)(a1 + 40))
      {
        double v4 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, process Range: Setting reduced range rate to true", buf, 2u);
        }
      }
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      if (*(unsigned char *)(a1 + 40))
      {
        double v5 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)double v6 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, process Range: Setting reduced range rate to false", v6, 2u);
        }
      }
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100432C78();
    }
  }
}

void sub_100345F90(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100432D44();
  }
  *(void *)(a1 + 48) = *(void *)a2;
  *(unsigned char *)(a1 + 56) = 1;
  char v4 = *(unsigned char *)(a1 + 40);
  if (*(unsigned char *)(a2 + 10) == 1)
  {
    if (!*(unsigned char *)(a1 + 40))
    {
      double v5 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, process missedRange: Setting reduced range rate to true", buf, 2u);
      }
    }
    char v4 = 1;
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    double v6 = qword_1008ABDE0;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
    char v4 = 0;
    if (v7)
    {
      *(_WORD *)double v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, process missedRange: Setting reduced range rate to false", v8, 2u);
      char v4 = 0;
    }
  }
  *(unsigned char *)(a1 + 40) = v4;
}

void sub_1003460A4(uint64_t a1, long long *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100432E2C();
  }
  char v4 = (double *)(a1 + 320);
  if (!*(unsigned char *)(a1 + 448))
  {
    if (!*((unsigned char *)a2 + 84) && *((_DWORD *)a2 + 20) == 2)
    {
      long long v11 = *a2;
      long long v12 = a2[1];
      long long v13 = a2[3];
      *(_OWORD *)(a1 + 352) = a2[2];
      *(_OWORD *)(a1 + 368) = v13;
      *(_OWORD *)char v4 = v11;
      *(_OWORD *)(a1 + 336) = v12;
      long long v14 = a2[4];
      long long v15 = a2[5];
      long long v16 = a2[7];
      *(_OWORD *)(a1 + 416) = a2[6];
      *(_OWORD *)(a1 + 432) = v16;
      *(_OWORD *)(a1 + 384) = v14;
      *(_OWORD *)(a1 + 400) = v15;
      *(unsigned char *)(a1 + 448) = 1;
LABEL_11:
      if (!*(unsigned char *)(a1 + 312))
      {
        *(void *)(a1 + 304) = *(void *)a2;
        *(unsigned char *)(a1 + 312) = 1;
      }
      return;
    }
    goto LABEL_13;
  }
  if (*(double *)a2 > *v4)
  {
    if (!*((unsigned char *)a2 + 84) && *((_DWORD *)a2 + 20) == 2)
    {
      long long v5 = *a2;
      long long v6 = a2[1];
      long long v7 = a2[3];
      *(_OWORD *)(a1 + 352) = a2[2];
      *(_OWORD *)(a1 + 368) = v7;
      *(_OWORD *)char v4 = v5;
      *(_OWORD *)(a1 + 336) = v6;
      long long v8 = a2[4];
      long long v9 = a2[5];
      long long v10 = a2[6];
      *(void *)(a1 + 432) = *((void *)a2 + 14);
      *(_OWORD *)(a1 + 400) = v9;
      *(_OWORD *)(a1 + 416) = v10;
      *(_OWORD *)(a1 + 384) = v8;
      goto LABEL_11;
    }
LABEL_13:
    double v17 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)double v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, Encountered a disruption in VIO tracking.  Resetting.  ", v18, 2u);
    }
    if (*(unsigned char *)(a1 + 312)) {
      *(unsigned char *)(a1 + 312) = 0;
    }
    if (*(unsigned char *)(a1 + 448)) {
      *(unsigned char *)(a1 + 448) = 0;
    }
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100432DC0();
  }
}

void sub_100346238(uint64_t a1, double *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100432E60();
  }
  double v4 = *a2;
  if (*(unsigned char *)(a1 + 240)) {
    *(double *)(a1 + 224) = v4;
  }
  sub_100346320(a1, v4);
  if (*(unsigned char *)(a1 + 448) && *a2 - *(double *)(a1 + 320) > 0.5)
  {
    long long v5 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, Too much time since last pose was seen.  Resetting.  ", v6, 2u);
    }
    if (*(unsigned char *)(a1 + 312)) {
      *(unsigned char *)(a1 + 312) = 0;
    }
    if (*(unsigned char *)(a1 + 448)) {
      *(unsigned char *)(a1 + 448) = 0;
    }
  }
}

void sub_100346320(uint64_t a1, double a2)
{
  sub_1003467DC(a1, a2, 30.0);
  uint64_t v4 = *(void *)(a1 + 192);
  if (v4)
  {
    long long v5 = (uint64_t *)(a1 + 184);
    if (*(unsigned char *)(a1 + 216))
    {
      uint64_t v6 = *(void *)(a1 + 184);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = v5[2];
          BOOL v8 = *(void *)v7 == (void)v5;
          long long v5 = (uint64_t *)v7;
        }
        while (v8);
      }
      int v9 = *(_DWORD *)(v7 + 40) - *(_DWORD *)(a1 + 208);
      if (v9 >= 16)
      {
        long long v10 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100432E94(v9, v10);
        }
LABEL_18:
        LODWORD(v4) = 1;
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v11 = *v5;
      if (*v5)
      {
        uint64_t v12 = *v5;
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = *(void *)(v12 + 8);
        }
        while (v12);
      }
      else
      {
        uint64_t v14 = a1 + 184;
        do
        {
          uint64_t v13 = *(void *)(v14 + 16);
          BOOL v8 = *(void *)v13 == v14;
          uint64_t v14 = v13;
        }
        while (v8);
      }
      if (*(int *)(v13 + 40) >= 16)
      {
        long long v15 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
        {
          if (v11)
          {
            do
            {
              uint64_t v17 = v11;
              uint64_t v11 = *(void *)(v11 + 8);
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v17 = v5[2];
              BOOL v8 = *(void *)v17 == (void)v5;
              long long v5 = (uint64_t *)v17;
            }
            while (v8);
          }
          int v18 = *(_DWORD *)(v17 + 40);
          v19[0] = 67109120;
          v19[1] = v18;
          _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#findalgs-findee, Walking set to true, step count seen: %d", (uint8_t *)v19, 8u);
        }
        goto LABEL_18;
      }
    }
    LODWORD(v4) = 0;
  }
LABEL_20:
  if (*(unsigned char *)(a1 + 249)) {
    LODWORD(v4) = 1;
  }
  if (*(unsigned char *)(a1 + 296))
  {
    int v16 = *(unsigned __int8 *)(a1 + 272);
    *(double *)(a1 + 280) = a2;
    if (v16 != v4) {
      *(double *)(a1 + 288) = a2;
    }
  }
  else
  {
    *(double *)(a1 + 280) = a2;
    *(double *)(a1 + 288) = a2;
    *(unsigned char *)(a1 + 296) = 1;
  }
  *(unsigned char *)(a1 + 272) = v4;
}

void sub_100346518()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100432F0C();
  }
}

__n128 sub_10034655C(uint64_t a1, long long *a2, int a3)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    sub_100432F80();
    if (a3)
    {
LABEL_3:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_100432F40();
      }
      return result;
    }
  }
  else if (a3)
  {
    goto LABEL_3;
  }
  if (*((_DWORD *)a2 + 23) == 1)
  {
    uint64_t v7 = (_OWORD *)(a1 + 64);
    long long v8 = *a2;
    long long v9 = a2[2];
    if (*(unsigned char *)(a1 + 168))
    {
      *(_OWORD *)(a1 + 80) = a2[1];
      *(_OWORD *)(a1 + 96) = v9;
      _OWORD *v7 = v8;
      __n128 result = (__n128)a2[3];
      long long v10 = a2[4];
      long long v11 = a2[5];
      *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 24);
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 144) = v11;
      *(__n128 *)(a1 + 112) = result;
    }
    else
    {
      *(_OWORD *)(a1 + 80) = a2[1];
      *(_OWORD *)(a1 + 96) = v9;
      _OWORD *v7 = v8;
      __n128 result = (__n128)a2[3];
      long long v12 = a2[4];
      long long v13 = a2[5];
      *(void *)(a1 + 160) = *((void *)a2 + 12);
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 144) = v13;
      *(__n128 *)(a1 + 112) = result;
      *(unsigned char *)(a1 + 168) = 1;
    }
  }
  return result;
}

void sub_100346654(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100432FB4();
  }
  if (*(unsigned char *)(a1 + 32)) {
    sub_10038D3DC(a1 + 584, a2, *(double *)(a1 + 8));
  }
}

void sub_1003466C0(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100432FE8();
  }
  int v4 = *(unsigned __int8 *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 248);
  double v11 = 0.0;
  sub_1003892C0(a1, &v11, *(double *)a2);
  double v6 = v11;
  if (v4 != v5)
  {
    int v7 = *(unsigned __int8 *)(a1 + 240);
    *(double *)(a1 + 224) = v11;
    *(double *)(a1 + 232) = v6;
    if (!v7) {
      *(unsigned char *)(a1 + 240) = 1;
    }
    int v8 = *(unsigned __int8 *)(a2 + 16);
    *(unsigned char *)(a1 + 248) = v8;
    if (v8)
    {
      long long v9 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, Clearing step history because motion activity changed to stationary", v10, 2u);
        double v6 = v11;
      }
      sub_1003467DC(a1, v6, 0.0);
      double v6 = v11;
    }
  }
  *(unsigned char *)(a1 + 249) = *(unsigned char *)(a2 + 18);
  sub_100346320(a1, v6);
}

void sub_1003467DC(uint64_t a1, double a2, double a3)
{
  int v4 = (uint64_t **)(a1 + 176);
  BOOL v3 = *(uint64_t **)(a1 + 176);
  int v5 = (uint64_t *)(a1 + 184);
  if (v3 != (uint64_t *)(a1 + 184))
  {
    do
    {
      double v9 = *((double *)v3 + 4);
      if (a2 - v9 <= a3) {
        break;
      }
      int v10 = *((_DWORD *)v3 + 10);
      double v11 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134218240;
        double v15 = v9;
        __int16 v16 = 1024;
        int v17 = v10;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#findalgs-findee, removing step time: %f, step count: %d", buf, 0x12u);
      }
      int v12 = *(unsigned __int8 *)(a1 + 216);
      *(double *)(a1 + 200) = v9;
      *(_DWORD *)(a1 + 208) = v10;
      if (!v12) {
        *(unsigned char *)(a1 + 216) = 1;
      }
      long long v13 = *v4;
      sub_100027218(v4, *v4);
      operator delete(v13);
      BOOL v3 = *v4;
    }
    while (*v4 != v5);
  }
}

void sub_100346940(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100433100();
  }
  if (*(unsigned char *)(a2 + 32) && *(unsigned char *)(a2 + 48))
  {
    *(unsigned char *)(a1 + 576) = 1;
    int v4 = (double *)(a1 + 504);
    if (!*(unsigned char *)(a1 + 528))
    {
      *int v4 = 0.0;
      *(void *)(a1 + 512) = 0;
      *(void *)(a1 + 520) = 0;
      *(unsigned char *)(a1 + 528) = 1;
      *(void *)uint64_t v14 = 0;
      sub_1003892C0(a1, (double *)v14, *(double *)a2);
      uint64_t v5 = *(void *)v14;
      int v6 = *(unsigned __int8 *)(a1 + 480);
      *(void *)(a1 + 464) = *(void *)v14;
      *(void *)(a1 + 472) = v5;
      if (!v6) {
        *(unsigned char *)(a1 + 480) = 1;
      }
    }
    if (*(unsigned char *)(a1 + 496)) {
      *(unsigned char *)(a1 + 496) = 0;
    }
    if (*(unsigned char *)(a2 + 32))
    {
      if (*(unsigned char *)(a1 + 528))
      {
        double v7 = *(double *)(a2 + 24) + *v4;
        *int v4 = v7;
        if (*(unsigned char *)(a2 + 48))
        {
          double v8 = *(double *)(a2 + 40) + *(double *)(a1 + 512);
          *(double *)(a1 + 512) = v8;
          if (*(unsigned char *)(a2 + 64)) {
            *(double *)(a1 + 520) = *(double *)(a2 + 56) + *(double *)(a1 + 520);
          }
          double v9 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v14 = 134218240;
            *(double *)&void v14[4] = v7;
            __int16 v15 = 2048;
            double v16 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#findalgs-findee, integrated PDR, H1 pos: %f, H2 pos: %f", v14, 0x16u);
          }
          *(void *)uint64_t v14 = 0;
          sub_1003892C0(a1, (double *)v14, *(double *)a2);
          int v10 = *(unsigned __int8 *)(a1 + 480);
          *(void *)(a1 + 464) = *(void *)v14;
          if (!v10) {
            *(unsigned char *)(a1 + 480) = 1;
          }
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
            sub_100433084();
          }
          return;
        }
      }
    }
LABEL_39:
    sub_10000AE44();
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100433050();
  }
  if (*(unsigned char *)(a2 + 80) && *(unsigned char *)(a2 + 96) && *(unsigned char *)(a2 + 112))
  {
    *(unsigned char *)(a1 + 576) = 0;
    if (!*(unsigned char *)(a1 + 496))
    {
      *(void *)uint64_t v14 = 0;
      sub_1003892C0(a1, (double *)v14, *(double *)a2);
      *(void *)(a1 + 488) = *(void *)v14;
      *(unsigned char *)(a1 + 496) = 1;
    }
    *(void *)uint64_t v14 = 0;
    sub_1003892C0(a1, (double *)v14, *(double *)a2);
    if (*(unsigned char *)(a1 + 568))
    {
      if (*(unsigned char *)(a2 + 80))
      {
        *(double *)(a1 + 552) = *(double *)(a2 + 72) + *(double *)(a1 + 552);
        if (*(unsigned char *)(a2 + 96))
        {
          *(double *)(a1 + 560) = *(double *)(a2 + 88) + *(double *)(a1 + 560);
          *(void *)(a1 + 544) = *(void *)v14;
          return;
        }
      }
    }
    else if (*(unsigned char *)(a1 + 496) && *(unsigned char *)(a2 + 80) && *(unsigned char *)(a2 + 96))
    {
      uint64_t v11 = *(void *)v14;
      uint64_t v12 = *(void *)(a2 + 72);
      uint64_t v13 = *(void *)(a2 + 88);
      *(void *)(a1 + 536) = *(void *)(a1 + 488);
      *(void *)(a1 + 544) = v11;
      *(void *)(a1 + 552) = v12;
      *(void *)(a1 + 560) = v13;
      *(unsigned char *)(a1 + 568) = 1;
      return;
    }
    goto LABEL_39;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10043301C();
  }
}

void sub_100346C58()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100433134();
  }
}

void sub_100346C9C(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100433168();
  }
  double v11 = 0.0;
  sub_1003892E4(a1, &v11, *(double *)(a2 + 8));
  if (*(void *)(a1 + 192))
  {
    uint64_t v5 = *(void **)(a1 + 184);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 184);
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      uint64_t v8 = a1 + 184;
      do
      {
        uint64_t v7 = *(void *)(v8 + 16);
        BOOL v9 = *(void *)v7 == v8;
        uint64_t v8 = v7;
      }
      while (v9);
    }
    if (*(_DWORD *)(a2 + 16) < *(_DWORD *)(v7 + 40))
    {
      sub_10003E96C(a1 + 176, v5);
      *(void *)(a1 + 184) = 0;
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 176) = a1 + 184;
      if (*(unsigned char *)(a1 + 216)) {
        *(unsigned char *)(a1 + 216) = 0;
      }
    }
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v10[0] = v11;
  v10[1] = (double)v4;
  sub_100346F6C((uint64_t **)(a1 + 176), v10, (uint64_t)v10);
  *(void *)(a1 + 256) = *(void *)(a1 + 8);
  *(unsigned char *)(a1 + 264) = 1;
  sub_100346320(a1, v11);
}

void sub_100346DB8()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10043319C();
  }
}

uint64_t sub_100346DFC()
{
  return 0;
}

uint64_t sub_100346E04()
{
  return 1;
}

uint64_t sub_100346E0C()
{
  return 1;
}

uint64_t sub_100346E14()
{
  return 0;
}

uint64_t sub_100346E1C()
{
  return 1;
}

uint64_t sub_100346E24()
{
  return 0;
}

uint64_t sub_100346E2C()
{
  return 1;
}

uint64_t sub_100346E34()
{
  return 0;
}

uint64_t sub_100346E3C()
{
  return 0;
}

uint64_t sub_100346E44()
{
  return 1;
}

uint64_t sub_100346E4C()
{
  return 0;
}

uint64_t sub_100346E54()
{
  return 0;
}

uint64_t sub_100346E5C()
{
  return 0;
}

uint64_t sub_100346E64()
{
  return 1;
}

uint64_t sub_100346E6C()
{
  return 0;
}

uint64_t sub_100346E74()
{
  return 1;
}

uint64_t sub_100346E7C()
{
  return 1;
}

uint64_t sub_100346E84()
{
  return 1;
}

uint64_t sub_100346E8C()
{
  return 1;
}

uint64_t sub_100346E94()
{
  return 0;
}

uint64_t sub_100346E9C()
{
  return 0;
}

uint64_t sub_100346EA4()
{
  return 1;
}

uint64_t sub_100346EAC()
{
  return 1;
}

uint64_t sub_100346EB4()
{
  return 0;
}

uint64_t sub_100346EBC()
{
  return 0;
}

uint64_t sub_100346EC4()
{
  return 0;
}

void sub_100346ED0(uint64_t a1)
{
  sub_100346F08(a1);

  operator delete();
}

uint64_t sub_100346F08(uint64_t a1)
{
  *(void *)a1 = off_100861CF0;
  if (*(unsigned char *)(a1 + 616))
  {
    unint64_t v2 = *(void **)(a1 + 584);
    if (v2)
    {
      *(void *)(a1 + 592) = v2;
      operator delete(v2);
    }
  }
  sub_10003E96C(a1 + 176, *(void **)(a1 + 184));
  return a1;
}

uint64_t **sub_100346F6C(uint64_t **a1, double *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    double v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        double v9 = *((double *)v5 + 4);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v5;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    int v10 = operator new(0x30uLL);
    double v11 = *(double *)(a3 + 8);
    void v10[4] = *(void *)a3;
    *((_DWORD *)v10 + 10) = (int)v11;
    sub_100026D98(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t sub_100347044(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_10034D4F8((void *)a1, (const void *)qword_1008AA5D8, qword_1008AA5E0, (qword_1008AA5E0 - qword_1008AA5D8) >> 4);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 120) = 0x100000003;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = off_100861B38;
  *(_OWORD *)(a1 + 104) = xmmword_1004C1B50;
  *(void *)(a1 + 128) = a1 + 136;
  sub_1003411F0((_DWORD *)(a1 + 96), 3, 1);
  sub_100341240(a1 + 96, 0.0);
  *(void *)(a1 + 184) = 0x100000003;
  *(void *)(a1 + 160) = off_100861B38;
  *(_OWORD *)(a1 + 168) = xmmword_1004C1B50;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 264) = 0x100000003;
  *(void *)(a1 + 240) = off_100861B38;
  *(_OWORD *)(a1 + 248) = xmmword_1004C1B50;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 336) = xmmword_1004C1E00;
  *(unsigned char *)(a1 + 352) = 1;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 360) = 0;
  uint64_t v18 = 0x100000003;
  *(void *)long long buf = off_100861B38;
  long long v17 = xmmword_1004C1B50;
  double v19 = &v20;
  sub_1003411F0(buf, 3, 1);
  sub_100341240((uint64_t)buf, 0.0);
  uint64_t v13 = 0x100000003;
  double v11 = off_100861B38;
  long long v12 = xmmword_1004C1B50;
  uint64_t v14 = &v15;
  sub_1003411F0(&v11, 3, 1);
  sub_100341240((uint64_t)&v11, 0.0);
  sub_10034CAFC(a1 + 384, (uint64_t)buf, (uint64_t)&v11, 0, 0.0, 0.0, 0.0, 0.0);
  unsigned int v6 = 0;
  *(_WORD *)(a1 + 560) = 257;
  *(_DWORD *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 565) = 0;
  *(void *)(a1 + 576) = 0x1000000032;
  *(void *)(a1 + 584) = 0x3F847AE147AE147BLL;
  *(unsigned char *)(a1 + 624) = 1;
  *(_OWORD *)(a1 + 592) = xmmword_1004C1E10;
  *(_OWORD *)(a1 + 608) = xmmword_1004C1E20;
  do
    *(void *)sub_1003416AC(a1 + 240, v6++) = 0;
  while (v6 != 3);
  sub_1003474D8((uint64_t *)(a1 + 360), 4uLL);
  double v7 = &qword_1008AA5F0;
  if (a2) {
    uint64_t v8 = &qword_1008AA5D8;
  }
  else {
    uint64_t v8 = &qword_1008AA5F0;
  }
  if (v8 != (uint64_t *)a1)
  {
    if (a2) {
      double v7 = &qword_1008AA5D8;
    }
    sub_10034D998((char *)a1, (char *)*v8, v7[1], (v7[1] - *v8) >> 4);
  }
  *(unsigned char *)(a1 + 624) = a3;
  double v9 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(v17) = 1024;
    *(_DWORD *)((char *)&v17 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,SyntheticApertureBatchFilterWithFindeeVIO constructed. Strict box span requirement %d, third party behavior %d", buf, 0xEu);
  }
  return a1;
}

void sub_1003473E0(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_10034D6B4((void ***)va);
  void *v15 = off_100853598;
  *a3 = off_100853598;
  *uint64_t v14 = off_100853598;
  sub_10034D574((void ***)va);
  uint64_t v18 = *v16;
  if (*v16)
  {
    *(void *)(v13 + 48) = v18;
    operator delete(v18);
  }
  double v19 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003474D8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x1745D1745D1745ELL) {
      sub_1000267C4();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_10034D7A4(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 176 * v6;
    sub_10034D72C(a1, v7);
    return sub_10034D904((uint64_t)v7);
  }
  return result;
}

void sub_100347584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10034D904((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10034759C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  if (*(double *)(a1 + 224) < a3)
  {
    *(double *)(a1 + 224) = a3;
    *(double *)sub_1003416AC(a1 + 96, 0) = a4;
    *(double *)sub_1003416AC(a1 + 96, 1u) = a5;
    *(double *)sub_1003416AC(a1 + 96, 2u) = a6;
    if (*(unsigned char *)(a1 + 562))
    {
      sub_100347680(a1);
      sub_100347C38(a1);
    }
  }
  *(void *)a2 = *(void *)(a1 + 24);
  *(void *)(a2 + 5) = *(void *)(a1 + 29);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  sub_10034CB80((void *)(a2 + 16), *(const void **)(a1 + 40), *(void *)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 6));
  double result = *(double *)(a1 + 64);
  *(double *)(a2 + 40) = result;
  return result;
}

void sub_100347680(uint64_t a1)
{
  *(_DWORD *)(a1 + 564) = 0;
  *(unsigned char *)(a1 + 568) = 0;
  if (*(unsigned char *)(a1 + 562))
  {
    uint64_t v69 = 0x100000003;
    float v67 = off_100861B38;
    long long v68 = xmmword_1004C1B50;
    float v70 = &v71;
    uint64_t v40 = a1 + 160;
    sub_10039595C(*(void *)(a1 + 72), a1 + 160, (uint64_t)&v67);
    uint64_t v64 = 0x100000003;
    long long v63 = xmmword_1004C1B50;
    long double v62 = off_100861B38;
    float32x2_t v65 = &v66;
    sub_1003418A0((uint64_t)&v67, a1 + 96, (uint64_t)&v62);
    double v2 = sub_1002A43C0((uint64_t)&v62, 0);
    double v3 = sub_1002A43C0((uint64_t)&v62, 0);
    double v4 = sub_1002A43C0((uint64_t)&v62, 2u);
    if (sqrt(v4 * sub_1002A43C0((uint64_t)&v62, 2u) + v2 * v3) <= 2.0)
    {
      uint64_t v5 = *(void *)(a1 + 72);
      uint64_t v6 = *(void *)(a1 + 80);
      if (v5 == v6) {
        goto LABEL_20;
      }
      long long v7 = xmmword_1004C1E30;
      char v39 = 1;
      do
      {
        uint64_t v59 = 0x100000003;
        double v57 = off_100861B38;
        long long v58 = xmmword_1004C1B50;
        long double v60 = &v61;
        uint64_t v54 = 0x400000003;
        int v52 = off_100861F20;
        long long v53 = v7;
        double v55 = v56;
        sub_100395BF0(v5, v40, (uint64_t)&v57, (uint64_t)&v52);
        uint64_t v44 = 0x400000003;
        long long v43 = xmmword_1004C1E30;
        __n128 __p = off_100861F20;
        double v45 = &v46;
        uint64_t v8 = v5 + 136;
        sub_1003419A0((uint64_t)&v52, v8, (uint64_t)&__p);
        sub_10034DD60((uint64_t)v41, DWORD1(v53), v53);
        sub_1003416E8((uint64_t)&v52, v41);
        uint64_t v49 = 0x300000003;
        long long v48 = xmmword_1004C1E40;
        double v47 = off_100861B80;
        int v50 = &v51;
        sub_1003419A0((uint64_t)&__p, (uint64_t)v41, (uint64_t)&v47);
        double v9 = sub_1002A43FC((uint64_t)&v47, 1, 1);
        double v10 = *(double *)sub_1003416AC((uint64_t)&v57, 1u);
        double v11 = (double *)sub_1003416AC(a1 + 96, 1u);
        double v12 = sqrt(v9);
        double v13 = v10 - *v11;
        double v14 = v12 + v13;
        double v15 = v13 - v12;
        BOOL v16 = v15 > -2.5 || v14 < -2.5;
        if (v16 && (v15 <= 2.5 ? (BOOL v17 = v14 < 2.5) : (BOOL v17 = 1), v17))
        {
          char v18 = 0;
        }
        else
        {
          char v39 = 0;
          char v18 = 1;
        }
        long long v7 = xmmword_1004C1E30;
        if (v18) {
          break;
        }
        uint64_t v5 = v8 + 424;
      }
      while (v5 != v6);
      if (v39) {
LABEL_20:
      }
        *(_DWORD *)(a1 + 564) = 1;
    }
    unint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 368) - *(void *)(a1 + 360)) >> 4);
    __n128 __p = 0;
    long long v43 = 0uLL;
    sub_10034CA54(&__p, v19);
    uint64_t v20 = *(void *)(a1 + 360);
    for (uint64_t i = *(void *)(a1 + 368); v20 != i; v20 += 176)
    {
      uint64_t v54 = 0x100000003;
      int v52 = off_100861B38;
      long long v53 = xmmword_1004C1B50;
      double v55 = v56;
      sub_1003418A0((uint64_t)&v67, v20 + 40, (uint64_t)&v52);
      double v22 = sub_1002A43C0((uint64_t)&v52, 0);
      double v23 = sub_1002A43C0((uint64_t)&v52, 2u);
      if (*(unsigned char *)(a1 + 624) || sqrt(v23 * v23 + v22 * v22) <= 4.0)
      {
        double v24 = sub_1002A43C0((uint64_t)&v52, 1u);
        double v25 = v24;
        BOOL v26 = (char *)v43;
        if ((unint64_t)v43 >= *((void *)&v43 + 1))
        {
          double v28 = (char *)__p;
          uint64_t v29 = (uint64_t)(v43 - (void)__p) >> 3;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61) {
            sub_1000267C4();
          }
          uint64_t v31 = *((void *)&v43 + 1) - (void)__p;
          if ((uint64_t)(*((void *)&v43 + 1) - (void)__p) >> 2 > v30) {
            unint64_t v30 = v31 >> 2;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            double v33 = (char *)sub_100056BF0((uint64_t)&v43 + 8, v32);
            double v28 = (char *)__p;
            BOOL v26 = (char *)v43;
          }
          else
          {
            double v33 = 0;
          }
          double v34 = &v33[8 * v29];
          *(double *)double v34 = v25;
          double v27 = v34 + 8;
          while (v26 != v28)
          {
            uint64_t v35 = *((void *)v26 - 1);
            v26 -= 8;
            *((void *)v34 - 1) = v35;
            v34 -= 8;
          }
          __n128 __p = v34;
          *(void *)&long long v43 = v27;
          *((void *)&v43 + 1) = &v33[8 * v32];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *(double *)long long v43 = v24;
          double v27 = v26 + 8;
        }
        *(void *)&long long v43 = v27;
      }
    }
    double v36 = __p;
    if (__p != (void *)v43)
    {
      LOBYTE(v41[0]) = 0;
      float32x2_t v37 = sub_100150298((double *)__p, (double *)v43);
      if (*v38 - *v37 >= 0.5)
      {
        *(_DWORD *)(a1 + 564) = 2;
        *(unsigned char *)(a1 + 568) = 1;
      }
      double v36 = __p;
    }
    if (v36)
    {
      *(void *)&long long v43 = v36;
      operator delete(v36);
    }
  }
}

void sub_100347BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100347C38(uint64_t a1)
{
  *(_DWORD *)float32x2_t v75 = 0;
  v75[4] = 0;
  *(_DWORD *)&v75[8] = 0;
  *(_OWORD *)__n128 __p = 0u;
  long long v77 = 0u;
  v75[12] = 0;
  if (*(unsigned char *)(a1 + 563))
  {
    int v2 = 6;
LABEL_3:
    *(_DWORD *)float32x2_t v75 = v2;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a1 + 560))
  {
    if (!*(unsigned char *)(a1 + 561))
    {
      int v2 = 1;
      goto LABEL_3;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 561))
    {
      double v4 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 336);
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Linear user path length is %4.2f m", buf, 0xCu);
      }
      if (*(double *)(a1 + 336) >= 1.5) {
        int v2 = 3;
      }
      else {
        int v2 = 2;
      }
      goto LABEL_3;
    }
    if (!*(unsigned char *)(a1 + 562))
    {
      int v2 = 4;
      goto LABEL_3;
    }
    *(_DWORD *)float32x2_t v75 = 5;
    *(_DWORD *)&v75[8] = *(_DWORD *)(a1 + 564);
    v75[4] = *(_DWORD *)&v75[8] == 2;
    uint64_t v6 = *(void *)(a1 + 72);
    for (uint64_t i = *(void *)(a1 + 80); v6 != i; v6 += 560)
    {
      long long v87 = 0u;
      long long v86 = 0u;
      long long v85 = 0u;
      long long v84 = 0u;
      long long v83 = 0u;
      long long v82 = 0u;
      long long v81 = 0u;
      long long v80 = 0u;
      long long v79 = 0u;
      *(_OWORD *)long long buf = 0u;
      LODWORD(v88) = 1;
      long long v89 = 0uLL;
      *((void *)&v88 + 1) = 0;
      uint64_t v72 = 0x100000003;
      float v70 = off_100861B38;
      long long v71 = xmmword_1004C1B50;
      float v73 = &v74;
      uint64_t v67 = 0x400000003;
      float32x2_t v65 = off_100861F20;
      long long v66 = xmmword_1004C1E30;
      long long v68 = &v69;
      sub_100395BF0(v6, a1 + 160, (uint64_t)&v70, (uint64_t)&v65);
      uint64_t v62 = 0x100000003;
      long long v61 = xmmword_1004C1B50;
      long double v60 = off_100861B38;
      long long v63 = &v64;
      uint64_t v57 = 0x300000003;
      long long v56 = xmmword_1004C1E40;
      double v55 = off_100861B80;
      long long v58 = &v59;
      uint64_t v52 = 0x100000003;
      long long v51 = xmmword_1004C1B50;
      int v50 = off_100861B38;
      long long v53 = v54;
      sub_1003418A0((uint64_t)&v70, a1 + 96, (uint64_t)&v50);
      sub_100396310((uint64_t)&v50, (uint64_t)&v60, (uint64_t)&v55);
      uint64_t v52 = 0x400000003;
      long long v51 = xmmword_1004C1E30;
      int v50 = off_100861F20;
      long long v53 = v54;
      sub_1003419A0((uint64_t)&v55, (uint64_t)&v65, (uint64_t)&v50);
      uint64_t v42 = 0x400000003;
      long long v41 = xmmword_1004C1E30;
      uint64_t v40 = off_100861F20;
      long long v43 = v44;
      sub_1003419A0((uint64_t)&v65, v6 + 136, (uint64_t)&v40);
      sub_10034DD60((uint64_t)v39, DWORD1(v66), v66);
      sub_1003416E8((uint64_t)&v65, v39);
      uint64_t v47 = 0x300000003;
      long long v46 = xmmword_1004C1E40;
      double v45 = off_100861B80;
      long long v48 = &v49;
      sub_1003419A0((uint64_t)&v40, (uint64_t)v39, (uint64_t)&v45);
      uint64_t v42 = 0x400000003;
      long long v41 = xmmword_1004C1E30;
      uint64_t v40 = off_100861F20;
      long long v43 = v44;
      sub_1003419A0((uint64_t)&v50, v6 + 136, (uint64_t)&v40);
      sub_10034DD60((uint64_t)v39, DWORD1(v51), v51);
      sub_1003416E8((uint64_t)&v50, v39);
      uint64_t v36 = 0x300000003;
      double v34 = off_100861B80;
      long long v35 = xmmword_1004C1E40;
      float32x2_t v37 = &v38;
      sub_1003419A0((uint64_t)&v40, (uint64_t)v39, (uint64_t)&v34);
      for (uint64_t j = 0; j != 3; ++j)
        *(void *)&buf[8 * j] = *(void *)sub_1003416AC((uint64_t)&v70, j);
      *((void *)&v79 + 1) = sub_1002A43FC((uint64_t)&v45, 0, 0);
      *(void *)&long long v80 = sub_1002A43FC((uint64_t)&v45, 0, 1);
      *((void *)&v80 + 1) = sub_1002A43FC((uint64_t)&v45, 0, 2);
      *(void *)&long long v81 = sub_1002A43FC((uint64_t)&v45, 1, 1);
      *((void *)&v81 + 1) = sub_1002A43FC((uint64_t)&v45, 1, 2);
      *(void *)&long long v82 = sub_1002A43FC((uint64_t)&v45, 2, 2);
      int v8 = v46;
      if (v46 != DWORD1(v46)) {
        __assert_rtn("Trace", "cnmatrixbase.h", 4977, "A.NumRows() == A.NumCols()");
      }
      if ((int)v46 < 1)
      {
        double v10 = 0.0;
      }
      else
      {
        int v9 = 0;
        double v10 = 0.0;
        do
        {
          double v10 = v10 + sub_10034DEB8((uint64_t)&v45, v9, v9);
          ++v9;
        }
        while (v8 != v9);
      }
      uint64_t v11 = *(void *)(v6 + 416);
      *((void *)&v82 + 1) = sqrt(v10);
      *(void *)&long long v83 = v11;
      LODWORD(v88) = *(_DWORD *)(v6 + 424);
      *((void *)&v83 + 1) = *(void *)sub_1003416AC((uint64_t)&v60, 0);
      *(void *)&long long v84 = *(void *)sub_1003416AC((uint64_t)&v60, 1u);
      *((void *)&v84 + 1) = *(void *)sub_1003416AC((uint64_t)&v60, 2u);
      *(void *)&long long v85 = sqrt(sub_1002A43FC((uint64_t)&v34, 0, 0));
      *((void *)&v85 + 1) = sqrt(sub_1002A43FC((uint64_t)&v34, 1, 1));
      uint64_t v12 = 0;
      *(void *)&long long v86 = sqrt(sub_1002A43FC((uint64_t)&v34, 2, 2));
      do
      {
        double v13 = &buf[8 * v12];
        *((void *)v13 + 17) = *(void *)sub_1003416AC(a1 + 96, v12);
        *((void *)v13 + 21) = *(void *)sub_1003416AC(a1 + 160, v12++);
      }
      while (v12 != 3);
      double v14 = __p[1];
      if (__p[1] >= (void *)v77)
      {
        BOOL v16 = __p[0];
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 6);
        unint64_t v18 = v17 + 1;
        if (v17 + 1 > 0x155555555555555) {
          sub_1000267C4();
        }
        if (0x5555555555555556 * ((uint64_t)(v77 - (unint64_t)__p[0]) >> 6) > v18) {
          unint64_t v18 = 0x5555555555555556 * ((uint64_t)(v77 - (unint64_t)__p[0]) >> 6);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (unint64_t)__p[0]) >> 6) >= 0xAAAAAAAAAAAAAALL) {
          unint64_t v19 = 0x155555555555555;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19)
        {
          uint64_t v20 = (char *)sub_10034CC50((uint64_t)&v77, v19);
          double v14 = __p[1];
          BOOL v16 = __p[0];
        }
        else
        {
          uint64_t v20 = 0;
        }
        double v21 = &v20[192 * v17];
        *((_OWORD *)v21 + 8) = v86;
        *((_OWORD *)v21 + 9) = v87;
        *((_OWORD *)v21 + 10) = v88;
        *((_OWORD *)v21 + 11) = v89;
        *((_OWORD *)v21 + 4) = v82;
        *((_OWORD *)v21 + 5) = v83;
        *((_OWORD *)v21 + 6) = v84;
        *((_OWORD *)v21 + 7) = v85;
        *(_OWORD *)double v21 = *(_OWORD *)buf;
        *((_OWORD *)v21 + 1) = v79;
        *((_OWORD *)v21 + 2) = v80;
        *((_OWORD *)v21 + 3) = v81;
        if (v14 == v16)
        {
          unint64_t v32 = &v20[192 * v17];
        }
        else
        {
          double v22 = &v20[192 * v17];
          do
          {
            long long v23 = *(v14 - 12);
            long long v24 = *(v14 - 11);
            long long v25 = *(v14 - 9);
            *((_OWORD *)v22 - 10) = *(v14 - 10);
            *((_OWORD *)v22 - 9) = v25;
            *((_OWORD *)v22 - 12) = v23;
            *((_OWORD *)v22 - 11) = v24;
            long long v26 = *(v14 - 8);
            long long v27 = *(v14 - 7);
            long long v28 = *(v14 - 5);
            *((_OWORD *)v22 - 6) = *(v14 - 6);
            *((_OWORD *)v22 - 5) = v28;
            *((_OWORD *)v22 - 8) = v26;
            *((_OWORD *)v22 - 7) = v27;
            long long v29 = *(v14 - 4);
            long long v30 = *(v14 - 3);
            long long v31 = *(v14 - 1);
            unint64_t v32 = v22 - 192;
            *((_OWORD *)v22 - 2) = *(v14 - 2);
            *((_OWORD *)v22 - 1) = v31;
            *((_OWORD *)v22 - 4) = v29;
            *((_OWORD *)v22 - 3) = v30;
            v14 -= 12;
            v22 -= 192;
          }
          while (v14 != v16);
        }
        double v15 = v21 + 192;
        __p[0] = v32;
        __p[1] = v21 + 192;
        *(void *)&long long v77 = &v20[192 * v19];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *((_OWORD *)__p[1] + 8) = v86;
        v14[9] = v87;
        v14[10] = v88;
        void v14[11] = v89;
        void v14[4] = v82;
        void v14[5] = v83;
        v14[6] = v84;
        v14[7] = v85;
        *double v14 = *(_OWORD *)buf;
        v14[1] = v79;
        v14[2] = v80;
        void v14[3] = v81;
        double v15 = v14 + 12;
      }
      __p[1] = v15;
      if (!*(unsigned char *)(a1 + 352)) {
        sub_10000AE44();
      }
      *((void *)&v77 + 1) = *(void *)(a1 + 344);
    }
  }
LABEL_4:
  double v3 = (char *)__p[0];
  *(void *)(a1 + 24) = *(void *)v75;
  *(void *)(a1 + 29) = *(void *)&v75[5];
  if ((unsigned char *)(a1 + 24) != v75)
  {
    sub_10034CC98((char *)(a1 + 40), v3, (uint64_t)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)v3) >> 6));
    double v3 = (char *)__p[0];
  }
  *(void *)(a1 + 64) = *((void *)&v77 + 1);
  if (v3)
  {
    __p[1] = v3;
    operator delete(v3);
  }
}

void sub_1003485DC(_Unwind_Exception *a1)
{
  int v2 = (void *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    STACK[0x4A8] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

double sub_10034863C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  if (*(double *)(a1 + 232) < a3)
  {
    *(double *)(a1 + 232) = a3;
    *(double *)sub_1003416AC(a1 + 160, 0) = a4;
    *(double *)sub_1003416AC(a1 + 160, 1u) = a5;
    *(double *)sub_1003416AC(a1 + 160, 2u) = a6;
    sub_100347680(a1);
    sub_100347C38(a1);
  }
  *(void *)a2 = *(void *)(a1 + 24);
  *(void *)(a2 + 5) = *(void *)(a1 + 29);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  sub_10034CB80((void *)(a2 + 16), *(const void **)(a1 + 40), *(void *)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 6));
  double result = *(double *)(a1 + 64);
  *(double *)(a2 + 40) = result;
  return result;
}

void *sub_100348718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 563))
  {
    *(unsigned char *)(a1 + 563) = 0;
    if (*(void *)(a1 + 360) != *(void *)(a1 + 368)) {
      sub_100349464(a1);
    }
  }
  uint64_t v84 = 0x100000003;
  long long v83 = xmmword_1004C1B50;
  long long v82 = off_100861B38;
  long long v85 = &v86;
  sub_1003411F0(&v82, 3, 1);
  sub_100341240((uint64_t)&v82, 0.0);
  uint64_t v79 = 0x100000004;
  long long v78 = xmmword_1004C1B60;
  long long v77 = off_100861BC8;
  long long v80 = &v81;
  sub_1003411F0(&v77, 4, 1);
  sub_100341240((uint64_t)&v77, 0.0);
  uint64_t v74 = 0x100000003;
  long long v73 = xmmword_1004C1B50;
  uint64_t v72 = off_100861B38;
  float32x2_t v75 = &v76;
  sub_1003411F0(&v72, 3, 1);
  sub_100341240((uint64_t)&v72, 0.0);
  uint64_t v6 = 0;
  long long v7 = (uint64_t *)(a2 + 152);
  do
  {
    uint64_t v8 = *(v7 - 7);
    *(void *)sub_1003416AC((uint64_t)&v82, v6) = v8;
    uint64_t v9 = *(v7 - 4);
    *(void *)sub_1003416AC((uint64_t)&v77, v6) = v9;
    uint64_t v10 = *v7;
    *(void *)sub_1003416AC((uint64_t)&v72, v6++) = v10;
    ++v7;
  }
  while (v6 != 3);
  uint64_t v11 = *(void *)(a2 + 144);
  *(void *)sub_1003416AC((uint64_t)&v77, 3u) = v11;
  sub_1003956B4((uint64_t)&v77, (uint64_t)v71);
  uint64_t v98 = 0x100000003;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B50;
  *(void *)long long buf = off_100861B38;
  int32x4_t v99 = v100;
  sub_1003419A0((uint64_t)v71, a1 + 240, (uint64_t)buf);
  uint64_t v68 = 0x100000003;
  long long v66 = off_100861B38;
  long long v67 = xmmword_1004C1B50;
  uint64_t v69 = &v70;
  sub_100342718((uint64_t)&v82, (uint64_t)buf, (uint64_t)&v66);
  double v12 = *(double *)a2;
  *(void *)(a1 + 312) = *(void *)a2;
  if (v12 > *(double *)(a1 + 224))
  {
    sub_10034226C(a1 + 96, (uint64_t)&v82);
    double v12 = *(double *)a2;
    *(void *)(a1 + 224) = *(void *)a2;
  }
  if (v12 > *(double *)(a1 + 232))
  {
    sub_10034226C(a1 + 160, (uint64_t)&v72);
    *(void *)(a1 + 232) = *(void *)a2;
  }
  double v13 = *(double *)(a2 + 16);
  if (v13 <= 0.0 || *(double *)(a2 + 8) < -1.0)
  {
    double v14 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004331D8(a2, v14, v13);
    }
    goto LABEL_69;
  }
  uint64_t v15 = *(void *)(a1 + 368);
  if (v15 == *(void *)(a1 + 360)) {
    goto LABEL_43;
  }
  uint64_t v63 = 0x100000003;
  long long v61 = off_100861B38;
  long long v62 = xmmword_1004C1B50;
  uint64_t v64 = v65;
  sub_1003418A0((uint64_t)&v66, v15 - 136, (uint64_t)&v61);
  uint64_t v94 = 0x100000003;
  long long v93 = xmmword_1004C1B50;
  float32x4_t v92 = off_100861B38;
  int8x16_t v95 = v96;
  uint64_t v98 = 0x100000134;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B70;
  *(void *)long long buf = off_100861C10;
  int32x4_t v99 = v100;
  uint64_t v89 = 0x100000003;
  long long v88 = xmmword_1004C1B50;
  long long v87 = off_100861B38;
  float32x4_t v90 = v91;
  sub_100341B04((uint64_t)&v61, (uint64_t)&v92, (uint64_t)buf, (uint64_t)&v87, "2");
  double v17 = v16;
  uint64_t v63 = 0x100000003;
  long long v61 = off_100861B38;
  long long v62 = xmmword_1004C1B50;
  uint64_t v64 = v65;
  sub_1003418A0(a1 + 160, v15 - 64, (uint64_t)&v61);
  uint64_t v94 = 0x100000003;
  long long v93 = xmmword_1004C1B50;
  float32x4_t v92 = off_100861B38;
  int8x16_t v95 = v96;
  uint64_t v98 = 0x100000134;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B70;
  *(void *)long long buf = off_100861C10;
  int32x4_t v99 = v100;
  uint64_t v89 = 0x100000003;
  long long v88 = xmmword_1004C1B50;
  long long v87 = off_100861B38;
  float32x4_t v90 = v91;
  sub_100341B04((uint64_t)&v61, (uint64_t)&v92, (uint64_t)buf, (uint64_t)&v87, "2");
  double v19 = v17 + v18;
  double v20 = *(double *)(a2 + 8);
  double v21 = *(double *)(v15 - 168);
  double v22 = v20 - v21;
  if (v20 - v21 <= 0.0)
  {
    if ((fabs(v22) - v19) / *(double *)(a2 + 16) > 6.0)
    {
      long long v24 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218496;
        *(double *)&uint8_t buf[4] = v21;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v98 = *(void *)&v19;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter_with,nLoS->LoS event detected by the batch filter: Previous range %f m, Current range %f m, Distance travelled %f m", buf, 0x20u);
      }
      uint64_t v25 = *(void *)(a1 + 360);
      long long v26 = xmmword_1004C1B50;
      if (v25 != *(void *)(a1 + 368))
      {
        do
        {
          uint64_t v63 = 0x100000003;
          long long v61 = off_100861B38;
          long long v62 = v26;
          uint64_t v64 = v65;
          sub_1003418A0((uint64_t)&v66, v25 + 40, (uint64_t)&v61);
          uint64_t v94 = 0x100000003;
          long long v93 = xmmword_1004C1B50;
          float32x4_t v92 = off_100861B38;
          int8x16_t v95 = v96;
          uint64_t v98 = 0x100000134;
          *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B70;
          *(void *)long long buf = off_100861C10;
          int32x4_t v99 = v100;
          uint64_t v89 = 0x100000003;
          long long v88 = xmmword_1004C1B50;
          long long v87 = off_100861B38;
          float32x4_t v90 = v91;
          sub_100341B04((uint64_t)&v61, (uint64_t)&v92, (uint64_t)buf, (uint64_t)&v87, "2");
          double v28 = v27;
          uint64_t v63 = 0x100000003;
          long long v61 = off_100861B38;
          long long v62 = xmmword_1004C1B50;
          uint64_t v64 = v65;
          sub_1003418A0((uint64_t)&v72, v25 + 112, (uint64_t)&v61);
          uint64_t v94 = 0x100000003;
          long long v93 = xmmword_1004C1B50;
          float32x4_t v92 = off_100861B38;
          int8x16_t v95 = v96;
          uint64_t v98 = 0x100000134;
          *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B70;
          *(void *)long long buf = off_100861C10;
          int32x4_t v99 = v100;
          uint64_t v89 = 0x100000003;
          long long v88 = xmmword_1004C1B50;
          long long v87 = off_100861B38;
          float32x4_t v90 = v91;
          sub_100341B04((uint64_t)&v61, (uint64_t)&v92, (uint64_t)buf, (uint64_t)&v87, "2");
          double v30 = v28 + v29;
          double v31 = *(double *)(v25 + 8);
          if ((v31 - *(double *)(a2 + 8) - v30) / *(double *)(a2 + 16) <= 6.0)
          {
            v25 += 176;
            uint64_t v33 = *(void *)(a1 + 368);
            long long v26 = xmmword_1004C1B50;
          }
          else
          {
            unint64_t v32 = qword_1008ABDE0;
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
            {
              uint64_t v36 = *(void *)v25;
              *(_DWORD *)long long buf = 134218240;
              *(void *)&uint8_t buf[4] = v36;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(double *)&buf[14] = v31;
              _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter_with,Removing measurement at time %f s with range %f m", buf, 0x16u);
            }
            sub_10034DAA4((uint64_t)buf, (long long *)(v25 + 176), *(long long **)(a1 + 368), v25);
            uint64_t v34 = *(void *)(a1 + 368);
            long long v26 = xmmword_1004C1B50;
            if (v34 != v33)
            {
              uint64_t v35 = v34 - 136;
              do
              {
                *(void *)(v34 - 64) = off_100853598;
                *(void *)(v34 - 136) = off_100853598;
                v35 -= 176;
                v34 -= 176;
              }
              while (v34 != v33);
            }
            *(void *)(a1 + 368) = v33;
          }
        }
        while (v25 != v33);
      }
      sub_100349590(a1);
      float32x2_t v37 = *(double **)(a1 + 360);
      uint64_t v38 = *(double **)(a1 + 368);
      if (v37 == v38)
      {
        *(void *)(a1 + 328) = 0x3FF0000000000000;
      }
      else
      {
        char v39 = v37 + 22;
        uint64_t v40 = *(double **)(a1 + 360);
        if (v37 + 22 != v38)
        {
          uint64_t v40 = *(double **)(a1 + 360);
          do
          {
            if (v39[1] < v40[1]) {
              uint64_t v40 = v39;
            }
            v39 += 22;
          }
          while (v39 != v38);
        }
        double v41 = fmax(v40[1], 1.0);
        if (v41 != *(double *)(a1 + 328))
        {
          *(double *)(a1 + 328) = v41;
          do
          {
            double v42 = sub_10039591C(v37[1] / *(double *)(a1 + 328));
            v37[4] = v42;
            v37[2] = v37[1] / (v42 * v37[3]);
            v37 += 22;
          }
          while (v37 != v38);
        }
      }
    }
    goto LABEL_43;
  }
  if ((v22 - v19) / *(double *)(a2 + 16) <= 6.0)
  {
LABEL_43:
    long long v43 = *(double **)(a1 + 360);
    uint64_t v44 = *(double **)(a1 + 368);
    double v45 = *(double *)(a2 + 8);
    if (v43 == v44)
    {
      double v50 = fmax(v45, 1.0);
      *(double *)(a1 + 328) = v50;
      long long v51 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        *(double *)&uint8_t buf[4] = v50;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Minimum observed range initialized to %f m", buf, 0xCu);
      }
    }
    else
    {
      double v46 = *(double *)(a1 + 328);
      if (v45 < v46 && v46 > 1.0)
      {
        double v47 = fmax(v45, 1.0);
        *(double *)(a1 + 328) = v47;
        long long v48 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          *(double *)&uint8_t buf[4] = v47;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Minimum observed range changed to %f m", buf, 0xCu);
          long long v43 = *(double **)(a1 + 360);
          uint64_t v44 = *(double **)(a1 + 368);
        }
        while (v43 != v44)
        {
          double v49 = sub_10039591C(v43[1] / *(double *)(a1 + 328));
          v43[4] = v49;
          v43[2] = v43[1] / (v49 * v43[3]);
          v43 += 22;
        }
      }
    }
    double v52 = sub_10039591C(*(double *)(a2 + 8) / *(double *)(a1 + 328));
    double v53 = *(double *)(a2 + 8);
    double v54 = v53 / 10.0 * 0.1;
    if (v53 <= 10.0) {
      double v54 = 0.1;
    }
    sub_10034CAFC((uint64_t)buf, (uint64_t)&v66, (uint64_t)&v72, *(_DWORD *)(a2 + 24), *(double *)a2, v53, v54, v52);
    unint64_t v55 = *(void *)(a1 + 368);
    if (v55 >= *(void *)(a1 + 376))
    {
      uint64_t v56 = sub_10034DB2C((uint64_t *)(a1 + 360), (long long *)buf);
    }
    else
    {
      sub_10034DC54(a1 + 376, *(void *)(a1 + 368), (long long *)buf);
      uint64_t v56 = v55 + 176;
      *(void *)(a1 + 368) = v55 + 176;
    }
    *(void *)(a1 + 368) = v56;
    goto LABEL_59;
  }
  long long v23 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134218496;
    *(double *)&uint8_t buf[4] = v21;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v20;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v98 = *(void *)&v19;
    _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter_with,LoS->nLoS event detected by the batch filter: Previous range %f m, Current range %f m, Distance travelled %f m", buf, 0x20u);
  }
LABEL_59:
  if ((*(unsigned char *)(a1 + 560) || *(unsigned char *)(a1 + 561))
    && (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 368) - *(void *)(a1 + 360)) >> 4)) >= 4)
  {
    sub_100349618(a1);
  }
  uint64_t v57 = *(void *)(a1 + 368) - *(void *)(a1 + 360);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v57 >> 4)) < 4
    || *(unsigned char *)(a1 + 560)
    || *(unsigned char *)(a1 + 561)
    || *(double *)(a1 + 312) - *(double *)(a1 + 320) < 0.5)
  {
    if (v57 == 176)
    {
      double v58 = *(double *)(a1 + 312);
      *(double *)(a1 + 304) = v58;
      *(double *)(a1 + 320) = v58 + -0.5;
    }
  }
  else
  {
    BOOL v60 = sub_100349838(a1);
    *(unsigned char *)(a1 + 562) = v60;
    if (v60)
    {
      *(void *)(a1 + 320) = *(void *)(a1 + 312);
      sub_100347680(a1);
    }
  }
LABEL_69:
  sub_100347C38(a1);
  *a3 = *(void *)(a1 + 24);
  *(void *)((char *)a3 + 5) = *(void *)(a1 + 29);
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
  double result = sub_10034CB80(a3 + 2, *(const void **)(a1 + 40), *(void *)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 6));
  a3[5] = *(void *)(a1 + 64);
  return result;
}

void sub_10034942C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 368) = v2;
  _Unwind_Resume(a1);
}

void sub_100349464(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 360);
  uint64_t v3 = *(void *)(a1 + 368);
  if (v3 != v2)
  {
    uint64_t v4 = v3 - 136;
    do
    {
      *(void *)(v3 - 64) = off_100853598;
      *(void *)(v3 - 136) = off_100853598;
      v4 -= 176;
      v3 -= 176;
    }
    while (v3 != v2);
  }
  *(void *)(a1 + 368) = v2;
  sub_100349590(a1);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 29) = 0;
  *(void *)(a1 + 24) = 0;
  if (v5)
  {
    *(void *)(a1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0x3FF0000000000000;
  sub_10034D5C8(a1 + 72, v6);
  if (*(unsigned char *)(a1 + 352)) {
    *(unsigned char *)(a1 + 352) = 0;
  }
  long long v7 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Batch filter is reinitialized", v8, 2u);
  }
}

void sub_100349590(uint64_t a1)
{
  *(void *)(a1 + 320) = *(void *)(a1 + 304);
  *(_WORD *)(a1 + 560) = 257;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 562) = 0;
  *(unsigned char *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 564) = 0;
  uint64_t v1 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Batch filter is reset", v2, 2u);
  }
}

void sub_100349618(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 360);
  uint64_t v2 = *(void *)(a1 + 368);
  if (v1 != v2)
  {
    if (v1 + 176 != v2)
    {
      uint64_t v4 = v1 + 288;
      do
      {
        long long v5 = *(_OWORD *)v1;
        long long v6 = *(_OWORD *)(v1 + 16);
        uint64_t v25 = *(void *)(v1 + 32);
        v24[0] = v5;
        v24[1] = v6;
        sub_10034CDD4((uint64_t)&v26, v1 + 40);
        int v27 = *(_DWORD *)(v1 + 104);
        sub_10034CDD4((uint64_t)&v28, v1 + 112);
        long long v7 = *(_OWORD *)(v4 - 112);
        long long v8 = *(_OWORD *)(v4 - 96);
        uint64_t v20 = *(void *)(v4 - 80);
        v19[0] = v7;
        v19[1] = v8;
        sub_10034CDD4((uint64_t)&v21, v4 - 72);
        int v22 = *(_DWORD *)(v4 - 8);
        sub_10034CDD4((uint64_t)&v23, v4);
        long long v23 = off_100853598;
        double v21 = off_100853598;
        double v28 = off_100853598;
        long long v26 = off_100853598;
        if (*((double *)v24 + 1) < *((double *)v19 + 1)) {
          uint64_t v1 = v4 - 112;
        }
        uint64_t v9 = v4 + 64;
        v4 += 176;
      }
      while (v9 != v2);
    }
    uint64_t v10 = *(double **)a1;
    uint64_t v11 = *(double **)(a1 + 8);
    if (*(double **)a1 != v11)
    {
      BOOL v12 = 0;
      double v13 = *(double *)(v1 + 8);
      do
      {
        if (v12)
        {
          BOOL v12 = 1;
        }
        else
        {
          LOBYTE(v19[0]) = 1;
          char v18 = 0;
          *(void *)&v24[0] = 0;
          sub_10034BE80(*v10, v10[1], a1, (uint64_t *)(a1 + 360), (BOOL *)v19, &v18, (double *)v24);
          int v14 = LOBYTE(v19[0]);
          if (*(unsigned char *)(a1 + 560)) {
            BOOL v15 = LOBYTE(v19[0]) == 0;
          }
          else {
            BOOL v15 = 1;
          }
          char v16 = !v15;
          *(unsigned char *)(a1 + 560) = v16;
          if (!v14)
          {
            if (!v18)
            {
              *(unsigned char *)(a1 + 561) = 0;
              return;
            }
            double v17 = *(double *)(a1 + 336);
            if (v17 < *(double *)v24) {
              double v17 = *(double *)v24;
            }
            *(double *)(a1 + 336) = v17;
          }
          BOOL v12 = v13 <= v10[1];
        }
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
}

BOOL sub_100349838(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 360);
  uint64_t v1 = *(void *)(a1 + 368);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v1 - v2) >> 4)) >= 4)
  {
    uint64_t v102 = 0;
    unint64_t v103 = 0;
    unint64_t v104 = 0;
    uint64_t v4 = (uint64_t *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 72);
    uint64_t v6 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 562)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v5 == v6;
    }
    long long v83 = (uint64_t *)(a1 + 72);
    if (v7)
    {
      if (v2 != v1)
      {
        for (uint64_t i = v2 + 176; i != v1; i += 176)
        {
          if (*(double *)(i + 8) < *(double *)(v2 + 8)) {
            uint64_t v2 = i;
          }
        }
      }
      if (*(double *)(v2 + 8) >= 0.5) {
        double v19 = *(double *)(v2 + 8);
      }
      else {
        double v19 = 0.5;
      }
      sub_10034CDD4((uint64_t)v92, v2 + 40);
      sub_10034CDD4((uint64_t)v101, v2 + 112);
      unsigned int v20 = 0;
      uint64_t v98 = 0;
      unint64_t v99 = 0;
      unint64_t v100 = 0;
      do
      {
        sub_10034CDD4((uint64_t)buf, (uint64_t)v92);
        sub_10034CDD4((uint64_t)&v87, (uint64_t)v92);
        double v21 = *(double *)sub_1003416AC((uint64_t)buf, v20);
        *(double *)sub_1003416AC((uint64_t)buf, v20) = v19 + v21;
        double v22 = *(double *)sub_1003416AC((uint64_t)&v87, v20);
        *(double *)sub_1003416AC((uint64_t)&v87, v20) = v22 - v19;
        sub_10034A7C4(&v98, (uint64_t)buf);
        sub_10034A7C4(&v98, (uint64_t)&v87);
        ++v20;
      }
      while (v20 != 3);
      uint64_t v23 = v98;
      for (uint64_t j = v99; v23 != j; v23 += 64)
      {
        for (uint64_t k = 0; k != 6; ++k)
        {
          double v25 = *(double *)&qword_1004C1F50[k];
          __double2 v26 = __sincos_stret(v25);
          uint64_t v106 = 0x300000003;
          *(void *)long long buf = off_100861B80;
          *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1E40;
          long long v107 = &v108;
          *(double *)sub_10034185C((uint64_t)buf, 0, 0) = v26.__cosval;
          *(void *)sub_10034185C((uint64_t)buf, 1, 0) = 0;
          *(double *)sub_10034185C((uint64_t)buf, 2, 0) = -v26.__sinval;
          *(void *)sub_10034185C((uint64_t)buf, 0, 1) = 0;
          *(void *)sub_10034185C((uint64_t)buf, 1, 1) = 0x3FF0000000000000;
          *(void *)sub_10034185C((uint64_t)buf, 2, 1) = 0;
          *(double *)sub_10034185C((uint64_t)buf, 0, 2) = v26.__sinval;
          *(void *)sub_10034185C((uint64_t)buf, 1, 2) = 0;
          *(double *)sub_10034185C((uint64_t)buf, 2, 2) = v26.__cosval;
          uint64_t v89 = 0x100000003;
          long long v87 = off_100861B38;
          long long v88 = xmmword_1004C1B50;
          float32x4_t v90 = v91;
          sub_1003419A0((uint64_t)buf, (uint64_t)v101, (uint64_t)&v87);
          uint64_t v95 = 0x100000003;
          long long v93 = off_100861B38;
          long long v94 = xmmword_1004C1B50;
          float32x4_t v96 = &v97;
          sub_1003418A0(v23, (uint64_t)&v87, (uint64_t)&v93);
          uint64_t v89 = 0x100000004;
          long long v87 = off_100861BC8;
          long long v88 = xmmword_1004C1B60;
          float32x4_t v90 = v91;
          double v27 = sub_1002A43C0((uint64_t)&v93, 0);
          *(double *)sub_1003416AC((uint64_t)&v87, 0) = v27;
          double v28 = sub_1002A43C0((uint64_t)&v93, 1u);
          *(double *)sub_1003416AC((uint64_t)&v87, 1u) = v28;
          double v29 = sub_1002A43C0((uint64_t)&v93, 2u);
          *(double *)sub_1003416AC((uint64_t)&v87, 2u) = v29;
          *(double *)sub_1003416AC((uint64_t)&v87, 3u) = v25;
          unint64_t v30 = v103;
          if (v103 >= v104)
          {
            uint64_t v31 = sub_10034DFBC(&v102, (uint64_t)&v87);
          }
          else
          {
            sub_10034D0F0(v103, (uint64_t)&v87);
            uint64_t v31 = v30 + 72;
          }
          unint64_t v103 = v31;
        }
      }
      *(void *)long long buf = &v98;
      sub_10034E24C((void ***)buf);
    }
    else
    {
      if (v5 != v6)
      {
        unint64_t v8 = 0;
        do
        {
          if (v8 >= v104)
          {
            unint64_t v8 = sub_10034DFBC(&v102, v5);
          }
          else
          {
            sub_10034D0F0(v8, v5);
            v8 += 72;
          }
          unint64_t v103 = v8;
          v5 += 560;
        }
        while (v5 != v6);
        uint64_t v6 = *v4;
      }
      sub_10034D0F0((uint64_t)buf, v6);
      uint64_t v9 = &qword_1004C1F20;
      do
      {
        uint64_t v10 = 0;
        double v11 = *(double *)v9;
        do
        {
          if (v11 != 0.0 || *(double *)&qword_1004C1F38[v10] != 0.0)
          {
            sub_10034D0F0((uint64_t)&v87, (uint64_t)buf);
            double v12 = *(double *)sub_1003416AC((uint64_t)&v87, 1u);
            *(double *)sub_1003416AC((uint64_t)&v87, 1u) = v11 + v12;
            double v13 = *(double *)sub_1003416AC((uint64_t)&v87, 3u);
            double v14 = *(double *)&qword_1004C1F38[v10];
            *(double *)sub_1003416AC((uint64_t)&v87, 3u) = v13 + v14;
            unint64_t v15 = v103;
            if (v103 >= v104)
            {
              uint64_t v16 = sub_10034DFBC(&v102, (uint64_t)&v87);
            }
            else
            {
              sub_10034D0F0(v103, (uint64_t)&v87);
              uint64_t v16 = v15 + 72;
            }
            unint64_t v103 = v16;
          }
          ++v10;
        }
        while (v10 != 3);
        ++v9;
      }
      while (v9 != qword_1004C1F38);
    }
    long long v93 = 0;
    long long v94 = 0uLL;
    if (v102 != v103) {
      sub_10034A8D8(a1, v102, a1 + 360);
    }
    sub_10034B430((uint64_t)&v93, 0, 0);
    unint64_t v32 = 126 - 2 * __clz(0x4FCACE213F2B3885 * ((uint64_t)(v94 - (void)v93) >> 3));
    if ((uint64_t (**)())v94 == v93) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v32;
    }
    sub_10034EED8((uint64_t)v93, v94, v33, 1);
    if (v93 != (uint64_t (**)())v94)
    {
      double v35 = sub_10034B488(v34, (uint64_t)v93, (uint64_t *)(a1 + 360));
      *(double *)(a1 + 344) = v35;
      *(unsigned char *)(a1 + 352) = 1;
      double v36 = *(double *)(a1 + 616);
      if (v35 > v36)
      {
        float32x2_t v37 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134218240;
          *(double *)&uint8_t buf[4] = v35;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v36;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Batch filter has detected an issue with the measurements - rms normalized error (%f) is above the threshold (%f)", buf, 0x16u);
        }
        sub_100349464(a1);
        BOOL v17 = 0;
        *(unsigned char *)(a1 + 563) = 1;
        goto LABEL_112;
      }
      uint64_t v98 = 0;
      unint64_t v99 = 0;
      unint64_t v100 = 0;
      unint64_t v38 = sub_1003509A4(&v98, (uint64_t)v93);
      char v39 = v93;
      unint64_t v99 = v38;
      if ((unint64_t)(0x4FCACE213F2B3885 * ((uint64_t)(v94 - (void)v93) >> 3)) >= 2)
      {
        unint64_t v40 = 1;
        do
        {
          uint64_t v41 = v38;
          if (v38 == v98) {
            goto LABEL_67;
          }
          unint64_t v42 = 0;
          BOOL v43 = 1;
          do
          {
            unsigned int v44 = 0;
            double v45 = 0.0;
            do
            {
              double v46 = *(double *)sub_1003416AC((uint64_t)&v93[77 * v40 + 1], v44);
              double v47 = (double *)sub_1003416AC(v98 + 616 * v42 + 8, v44);
              double v45 = v45 + (v46 - *v47) * (v46 - *v47);
              ++v44;
            }
            while (v44 != 3);
            double v48 = *(double *)sub_1003416AC((uint64_t)&v93[77 * v40 + 1], 3u);
            double v49 = (double *)sub_1003416AC(v98 + 616 * v42 + 8, 3u);
            if ((v43 & (sqrt(v45) > 0.5)) != 0)
            {
              double v50 = fmod(v48 - *v49 + 3.14159265, 6.28318531);
              if (v50 < 0.0) {
                double v50 = v50 + 6.28318531;
              }
              BOOL v43 = fabs(v50 + -3.14159265) > 0.0872664626;
            }
            else
            {
              BOOL v43 = 0;
            }
            ++v42;
            uint64_t v41 = v98;
            unint64_t v38 = v99;
          }
          while (0x4FCACE213F2B3885 * ((uint64_t)(v99 - v98) >> 3) > v42);
          char v39 = v93;
          if (v43)
          {
LABEL_67:
            if (exp(*(double *)(v41 + 600) - *(double *)&v39[77 * v40 + 75]) > 0.01)
            {
              if (v38 >= v100)
              {
                unint64_t v38 = sub_1003509A4(&v98, (uint64_t)&v39[77 * v40]);
              }
              else
              {
                sub_10034EA00((uint64_t)&v100, v38, (uint64_t)&v39[77 * v40]);
                v38 += 616;
              }
              unint64_t v99 = v38;
              char v39 = v93;
            }
          }
          ++v40;
        }
        while (0x4FCACE213F2B3885 * ((uint64_t)(v94 - (void)v39) >> 3) > v40);
      }
      uint64_t v51 = v98;
      if ((unint64_t)(0x4FCACE213F2B3885 * ((uint64_t)(v38 - v98) >> 3)) <= 1)
      {
        double v53 = v83;
      }
      else
      {
        double v52 = exp(-*(double *)(v98 + 600));
        double v53 = v83;
        double v54 = 0.0;
        if (v51 != v38)
        {
          uint64_t v55 = v51;
          do
          {
            double v54 = v54 + exp(-*(double *)(v55 + 600));
            v55 += 616;
          }
          while (v55 != v38);
        }
        double v56 = v52 / v54;
        if (v56 < 0.9)
        {
          uint64_t v57 = (double *)sub_1003416AC(v51 + 144, 1u);
          uint64_t v51 = v98;
          unint64_t v38 = v99;
          if ((unint64_t)(0x4FCACE213F2B3885 * ((uint64_t)(v99 - v98) >> 3)) >= 2)
          {
            double v58 = *v57;
            unint64_t v59 = 1;
            uint64_t v60 = 760;
            while (1)
            {
              long long v61 = (double *)sub_1003416AC(v51 + v60, 1u);
              double v62 = fmod(*v61 - v58 + 3.14159265, 6.28318531);
              if (v62 < 0.0) {
                double v62 = v62 + 6.28318531;
              }
              double v63 = fabs(v62 + -3.14159265);
              if (v63 > 0.392699082) {
                break;
              }
              ++v59;
              uint64_t v51 = v98;
              unint64_t v38 = v99;
              v60 += 616;
              if (0x4FCACE213F2B3885 * ((uint64_t)(v99 - v98) >> 3) <= v59)
              {
                double v53 = v83;
                goto LABEL_86;
              }
            }
            long long v82 = qword_1008ABDE0;
            double v53 = v83;
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 134218240;
              *(double *)&uint8_t buf[4] = v56;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(double *)&buf[14] = v63;
              _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Batch filter clearing solutions since the best one has a low weight (%f) and the horizontal angle difference to a secondary solution is too high (%f)", buf, 0x16u);
            }
            sub_10034E508((uint64_t)&v98, v98);
            uint64_t v51 = v98;
            unint64_t v38 = v99;
          }
        }
      }
LABEL_86:
      if (v51 != v38)
      {
        do
        {
          uint64_t v64 = (double *)sub_10034185C(v51 + 488, 1, 1);
          int v65 = *(_DWORD *)(v51 + 384);
          if (v65 != *(_DWORD *)(v51 + 388)) {
            __assert_rtn("Trace", "cnmatrixbase.h", 4977, "A.NumRows() == A.NumCols()");
          }
          double v66 = *v64;
          if (v65 < 1)
          {
            double v68 = 0.0;
          }
          else
          {
            int v67 = 0;
            double v68 = 0.0;
            do
            {
              double v68 = v68 + sub_10034DEB8(v51 + 376, v67, v67);
              ++v67;
            }
            while (v65 != v67);
          }
          if (sqrt(v66) * 180.0 / 3.14159265 <= *(double *)(a1 + 608) || v68 <= *(double *)(a1 + 600))
          {
            v51 += 616;
          }
          else
          {
            sub_10034EE20((uint64_t)&v87, v51 + 616, v99, v51);
            sub_10034E508((uint64_t)&v98, v69);
          }
        }
        while (v51 != v99);
        if (v98 != v51)
        {
          sub_10034D5C8((uint64_t)v53, *v53);
          uint64_t v70 = v99;
          if (v98 == v99)
          {
            uint64_t v78 = *(void *)(a1 + 80);
            double v73 = 0.0;
          }
          else
          {
            double v71 = *(double *)(v98 + 600);
            uint64_t v72 = v98 + 488;
            double v73 = 0.0;
            do
            {
              sub_10034D0F0((uint64_t)v92, v72 - 480);
              sub_10034CDD4((uint64_t)v101, v72 - 344);
              sub_10034D36C((uint64_t)buf, v72 - 280);
              sub_10034CF64((uint64_t)&v87, v72);
              double v74 = exp(v71 - *(double *)(v72 + 112));
              double v75 = v74;
              double v86 = v74;
              int v76 = *(_DWORD *)(v72 + 120);
              int v85 = v76;
              unint64_t v77 = *(void *)(a1 + 80);
              if (v77 >= *(void *)(a1 + 88))
              {
                uint64_t v78 = sub_100350ACC(v53, (uint64_t)v92, (uint64_t)v101, (uint64_t)buf, (uint64_t)&v87, &v86, &v85, a1 + 96, a1 + 160);
              }
              else
              {
                sub_100350C3C(*(void *)(a1 + 80), (uint64_t)v92, (uint64_t)v101, (uint64_t)buf, (uint64_t)&v87, v76, a1 + 96, a1 + 160, v74);
                uint64_t v78 = v77 + 560;
                *(void *)(a1 + 80) = v77 + 560;
              }
              *(void *)(a1 + 80) = v78;
              double v73 = v73 + v75;
              uint64_t v79 = v72 + 128;
              v72 += 616;
            }
            while (v79 != v70);
          }
          for (uint64_t m = *v53; m != v78; m += 560)
            *(double *)(m + 416) = *(double *)(m + 416) / v73;
        }
      }
      *(void *)long long buf = &v98;
      sub_10034E4B4((void ***)buf);
    }
    BOOL v17 = *(void *)(a1 + 80) != *(void *)(a1 + 72);
LABEL_112:
    *(void *)long long buf = &v93;
    sub_10034E4B4((void ***)buf);
    *(void *)long long buf = &v102;
    sub_10034DEFC((void ***)buf);
    return v17;
  }
  return 0;
}

void sub_10034A658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v67 + 176) = &a53;
  sub_10034E4B4(&a67);
  *(void *)(v67 + 176) = v67;
  sub_10034E4B4(&a67);
  *(void *)(v67 + 176) = &a64;
  sub_10034DEFC(&a67);
  _Unwind_Resume(a1);
}

void *sub_10034A784(void *result)
{
  void *result = off_100853598;
  return result;
}

void *sub_10034A7A4(void *result)
{
  void *result = off_100853598;
  return result;
}

void sub_10034A7C4(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v9 + 1) >> 58) {
      sub_1000267C4();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = v4;
    if (v12) {
      double v13 = (char *)sub_10034E384(v4, v12);
    }
    else {
      double v13 = 0;
    }
    double v14 = v13;
    unint64_t v15 = &v13[64 * v9];
    BOOL v17 = &v13[64 * v12];
    sub_10034CDD4((uint64_t)v15, a2);
    uint64_t v16 = v15 + 64;
    sub_10034E30C(a1, &v14);
    uint64_t v8 = a1[1];
    sub_10034E448((uint64_t)&v14);
  }
  else
  {
    sub_10034CDD4(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v8;
}

void sub_10034A8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_10034A8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __chkstk_darwin(a1, a2, a3);
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  sub_10034D0F0((uint64_t)v8, v7);
  sub_10034B644(v6, (uint64_t)v8, v5);
}

void sub_10034B23C(_Unwind_Exception *a1)
{
}

void *sub_10034B36C(void *result)
{
  result[61] = off_100853598;
  result[47] = off_100853598;
  result[26] = off_100853598;
  result[18] = off_100853598;
  result[10] = off_100853598;
  result[1] = off_100853598;
  return result;
}

uint64_t sub_10034B430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_10034EE20((uint64_t)&v7, a3, *(void *)(a1 + 8), a2);
    sub_10034E508(a1, v5);
  }
  return a2;
}

double sub_10034B488(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 == v4)
  {
    double v7 = 0.0;
    uint64_t v12 = *a3;
  }
  else
  {
    uint64_t v6 = a2 + 8;
    double v7 = 0.0;
    do
    {
      uint64_t v21 = 0x100000001;
      double v19 = off_1008620C8;
      *(void *)&long long v8 = 0x100000001;
      *((void *)&v8 + 1) = 0x100000001;
      long long v20 = v8;
      double v22 = &v23;
      uint64_t v16 = 0x400000001;
      double v14 = off_100861E90;
      long long v15 = xmmword_1004C1E80;
      BOOL v17 = &v18;
      sub_100395FBC(v6, v3 + 40, v3 + 112, (uint64_t)&v19, (uint64_t)&v14);
      double v9 = *(double *)(v3 + 32);
      double v10 = *(double *)(v3 + 8);
      uint64_t v11 = (double *)sub_1003416AC((uint64_t)&v19, 0);
      double v7 = v7 + 1.0 / (v9 * 0.1) * (v10 - *v11) * (1.0 / (v9 * 0.1) * (v10 - *v11));
      v3 += 176;
    }
    while (v3 != v4);
    uint64_t v3 = *a3;
    uint64_t v12 = a3[1];
  }
  return sqrt(v7 / (double)(unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v12 - v3) >> 4) - 3));
}

void *sub_10034B624(void *result)
{
  void *result = off_100853598;
  return result;
}

void sub_10034B644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
  unint64_t v30 = 0;
  double v29 = 0;
  uint64_t v31 = 0;
  uint64_t v6 = sub_10034BA8C((uint64_t *)&v29, v5);
  sub_10034BB4C(v6, a2, (double **)a3, (uint64_t *)&v29);
  uint64_t v26 = 0x400000004;
  long long v25 = xmmword_1004C1E60;
  long long v24 = off_100861ED8;
  double v27 = &v28;
  sub_1003411F0(&v24, 4, 4);
  sub_100341240((uint64_t)&v24, 0.0);
  uint64_t v21 = 0x100000004;
  long long v20 = xmmword_1004C1B60;
  double v19 = off_100861BC8;
  double v22 = &v23;
  sub_1003411F0(&v19, 4, 1);
  double v7 = 0.0;
  sub_100341240((uint64_t)&v19, 0.0);
  long long v8 = v29;
  for (i = v30; v8 != i; long long v8 = (double *)(v11 + 72))
  {
    uint64_t v10 = (uint64_t)(v8 + 10);
    double v12 = *v8;
    uint64_t v11 = (uint64_t)(v8 + 1);
    uint64_t v16 = 0x400000004;
    double v14 = off_100861ED8;
    long long v15 = xmmword_1004C1E60;
    BOOL v17 = v18;
    sub_1003419A0(v10, v11, (uint64_t)&v14);
    uint64_t v34 = 0x400000004;
    long long v33 = xmmword_1004C1E60;
    unint64_t v32 = off_100861ED8;
    double v35 = v36;
    sub_100342718((uint64_t)&v24, (uint64_t)&v14, (uint64_t)&v32);
    sub_10034226C((uint64_t)&v24, (uint64_t)&v32);
    uint64_t v16 = 0x100000004;
    double v14 = off_100861BC8;
    long long v15 = xmmword_1004C1B60;
    BOOL v17 = v18;
    v11 += 72;
    sub_100351D20(v11, (uint64_t)&v14, v12);
    uint64_t v34 = 0x100000004;
    long long v33 = xmmword_1004C1B60;
    unint64_t v32 = off_100861BC8;
    double v35 = v36;
    sub_100342718((uint64_t)&v19, (uint64_t)&v14, (uint64_t)&v32);
    sub_10034226C((uint64_t)&v19, (uint64_t)&v32);
    double v7 = v7 + v12 * v12;
  }
  double v13 = (double *)sub_10034185C((uint64_t)&v24, 3, 3);
  *double v13 = *v13 + 0.101321184;
  uint64_t v16 = 0x400000004;
  double v14 = off_100861ED8;
  long long v15 = xmmword_1004C1E60;
  BOOL v17 = v18;
  uint64_t v39 = 0x100000004;
  long long v38 = xmmword_1004C1B60;
  float32x2_t v37 = off_100861FF8;
  unint64_t v40 = &v41;
  uint64_t v34 = 0x100000010;
  long long v33 = xmmword_1004C1E70;
  unint64_t v32 = off_100862080;
  double v35 = v36;
  sub_1003517F4((uint64_t)&v24, (uint64_t)&v37, (uint64_t)&v32, (uint64_t)&v14);
}

void sub_10034BA40(_Unwind_Exception *a1)
{
  STACK[0x220] = (unint64_t)&STACK[0x208];
  sub_1003513DC((void ***)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_10034BA8C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x86BCA1AF286BCA1BLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1AF286BCA1AF287) {
      sub_1000267C4();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_10016D27C(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 152 * v6;
    sub_100351454(a1, v7);
    return sub_100351760((uint64_t)v7);
  }
  return result;
}

void sub_10034BB38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100351760((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10034BB4C(uint64_t a1, uint64_t a2, double **a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  if (*a4 != v7)
  {
    uint64_t v8 = v7 - 144;
    do
    {
      *(void *)(v7 - 72) = off_100853598;
      *(void *)(v7 - 144) = off_100853598;
      v8 -= 152;
      v7 -= 152;
    }
    while (v7 != v6);
    a4[1] = v6;
    sub_10034BA8C(a4, 0x2E8BA2E8BA2E8BA3 * (((char *)a3[1] - (char *)*a3) >> 4));
  }
  double v9 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 != v10)
  {
    do
    {
      uint64_t v40 = 0x100000001;
      long long v38 = off_1008620C8;
      *(void *)&long long v11 = 0x100000001;
      *((void *)&v11 + 1) = 0x100000001;
      long long v39 = v11;
      uint64_t v41 = &v42;
      uint64_t v35 = 0x400000001;
      long long v33 = off_100861E90;
      long long v34 = xmmword_1004C1E80;
      double v36 = &v37;
      sub_100395FBC(a2, (uint64_t)(v9 + 5), (uint64_t)(v9 + 14), (uint64_t)&v38, (uint64_t)&v33);
      double v13 = v9[3];
      double v12 = v9[4];
      double v32 = 0.0;
      double v14 = v9[2];
      long long v15 = (double *)sub_1003416AC((uint64_t)&v38, 0);
      double v16 = 1.0 / (v13 * v12);
      double v32 = v14 - v16 * *v15;
      uint64_t v29 = 0x400000001;
      double v27 = off_100861E90;
      long long v28 = xmmword_1004C1E80;
      unint64_t v30 = &v31;
      sub_100351D20((uint64_t)&v33, (uint64_t)&v27, v16);
      unsigned int v17 = 0;
      uint64_t v24 = 0x100000004;
      double v22 = off_100861BC8;
      long long v23 = xmmword_1004C1B60;
      long long v25 = &v26;
      do
      {
        double v18 = sub_1002A43C0((uint64_t)&v27, v17);
        *(double *)sub_1003416AC((uint64_t)&v22, v17++) = v18;
      }
      while (v17 != 4);
      unint64_t v19 = a4[1];
      if (v19 >= a4[2])
      {
        uint64_t v20 = sub_100351DE0(a4, &v32, (uint64_t)&v27, (uint64_t)&v22);
      }
      else
      {
        sub_100351F18((double *)a4[1], (uint64_t)&v27, (uint64_t)&v22, v32);
        uint64_t v20 = v19 + 152;
        a4[1] = v19 + 152;
      }
      a4[1] = v20;
      v9 += 22;
    }
    while (v9 != v10);
  }
}

void sub_10034BE38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_10034BE40(void *result)
{
  void *result = off_100853598;
  return result;
}

void *sub_10034BE60(void *result)
{
  void *result = off_100853598;
  return result;
}

void sub_10034BE80(double a1, double a2, uint64_t a3, uint64_t *a4, BOOL *a5, char *a6, double *a7)
{
  *a5 = 1;
  *a6 = 0;
  *a7 = 0.0;
  uint64_t v7 = a4[1];
  if (*a4 != v7)
  {
    unint64_t v14 = 0x2E8BA2E8BA2E8BA3 * ((v7 - *a4) >> 4);
    uint64_t v71 = 0;
    unint64_t v72 = 0;
    unint64_t v73 = 0;
    sub_10034C6DC(&v71, v14);
    uint64_t v68 = 0x100000002;
    long long v67 = xmmword_1004C1E90;
    double v66 = off_100862110;
    uint64_t v69 = &v70;
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    while (v15 != v16)
    {
      if (*(double *)(v15 + 8) <= a2)
      {
        double v17 = sub_1002A43C0(v15 + 40, 2u);
        *(double *)sub_1003416AC((uint64_t)&v66, 0) = v17;
        double v18 = sub_1002A43C0(v15 + 40, 0);
        *(double *)sub_1003416AC((uint64_t)&v66, 1u) = v18;
        unint64_t v19 = v72;
        if (v72 >= v73)
        {
          uint64_t v20 = sub_1003523A8(&v71, (uint64_t)&v66);
        }
        else
        {
          sub_10035214C(v72, (uint64_t)&v66);
          uint64_t v20 = v19 + 56;
        }
        unint64_t v72 = v20;
      }
      v15 += 176;
    }
    if (v71 != v72)
    {
      uint64_t v63 = 0x100000002;
      long long v62 = xmmword_1004C1E90;
      long long v61 = off_100862110;
      uint64_t v64 = &v65;
      sub_1003411F0(&v61, 2, 1);
      sub_100341240((uint64_t)&v61, 0.0);
      uint64_t v22 = v71;
      for (unint64_t i = v72; v22 != i; v22 += 56)
      {
        uint64_t v76 = 0x100000002;
        double v74 = off_100862110;
        long long v75 = xmmword_1004C1E90;
        unint64_t v77 = v78;
        sub_100342718((uint64_t)&v61, v22, (uint64_t)&v74);
        sub_10034226C((uint64_t)&v61, (uint64_t)&v74);
      }
      uint64_t v76 = 0x100000002;
      long long v75 = xmmword_1004C1E90;
      double v74 = off_100862110;
      unint64_t v77 = v78;
      sub_100351D20((uint64_t)&v61, (uint64_t)&v74, 1.0 / (double)v14);
      double v48 = a5;
      sub_10034226C((uint64_t)&v61, (uint64_t)&v74);
      uint64_t v23 = v71;
      unint64_t v24 = v72;
      if (v71 == v72)
      {
        *double v48 = 1;
      }
      else
      {
        double v47 = a6;
        double v25 = 0.0;
        do
        {
          uint64_t v76 = 0x100000002;
          double v74 = off_100862110;
          long long v75 = xmmword_1004C1E90;
          unint64_t v77 = v78;
          sub_1003418A0(v23, (uint64_t)&v61, (uint64_t)&v74);
          sub_10034226C(v23, (uint64_t)&v74);
          uint64_t v58 = 0x100000002;
          long long v57 = xmmword_1004C1E90;
          double v56 = off_100862110;
          unint64_t v59 = v60;
          uint64_t v76 = 0x1000000E1;
          long long v75 = xmmword_1004C1EA0;
          double v74 = off_100862158;
          unint64_t v77 = v78;
          uint64_t v53 = 0x100000002;
          uint64_t v51 = off_100862110;
          long long v52 = xmmword_1004C1E90;
          double v54 = v55;
          sub_100341B04(v23, (uint64_t)&v56, (uint64_t)&v74, (uint64_t)&v51, "2");
          if (v26 > v25) {
            double v25 = v26;
          }
          v23 += 56;
        }
        while (v23 != v24);
        *double v48 = v25 < 0.3;
        if (v25 >= 0.3)
        {
          uint64_t v76 = 0x200000002;
          long long v75 = xmmword_1004C1EB0;
          double v74 = off_1008621A0;
          unint64_t v77 = v78;
          sub_1003411F0(&v74, 2, 2);
          sub_100341240((uint64_t)&v74, 0.0);
          uint64_t v27 = v71;
          for (unint64_t j = v72; v27 != j; v27 += 56)
          {
            sub_1003526A4((uint64_t)v50, *(_DWORD *)(v27 + 12), *(_DWORD *)(v27 + 8));
            sub_1003416E8(v27, v50);
            uint64_t v53 = 0x200000002;
            uint64_t v51 = off_1008621A0;
            long long v52 = xmmword_1004C1EB0;
            double v54 = v55;
            sub_1003419A0(v27, (uint64_t)v50, (uint64_t)&v51);
            uint64_t v58 = 0x200000002;
            long long v57 = xmmword_1004C1EB0;
            double v56 = off_1008621A0;
            unint64_t v59 = v60;
            sub_100342718((uint64_t)&v74, (uint64_t)&v51, (uint64_t)&v56);
            sub_10034226C((uint64_t)&v74, (uint64_t)&v56);
          }
          uint64_t v58 = 0x200000002;
          long long v57 = xmmword_1004C1EB0;
          double v56 = off_1008621A0;
          unint64_t v59 = v60;
          uint64_t v53 = 0x200000002;
          uint64_t v51 = off_1008621A0;
          long long v52 = xmmword_1004C1EB0;
          double v54 = v55;
          sub_10034C7FC((uint64_t)&v74, (uint64_t)&v56, (uint64_t)&v51);
          double v29 = *(double *)sub_10034185C((uint64_t)&v51, 0, 0);
          unint64_t v30 = (double *)sub_10034185C((uint64_t)&v51, 1, 1);
          if (*v30 >= v29) {
            double v31 = v29;
          }
          else {
            double v31 = *v30;
          }
          sub_10035257C((uint64_t)v50, DWORD1(v57), v57);
          sub_1003416E8((uint64_t)&v56, v50);
          uint64_t v32 = v71;
          unint64_t v33 = v72;
          if (v71 == v72)
          {
            double v41 = 0.0;
            double v42 = 0.0;
          }
          else
          {
            double v49 = v31;
            double v34 = 0.0;
            double v35 = 0.0;
            double v36 = 0.0;
            double v37 = 0.0;
            do
            {
              uint64_t v80 = 0x100000002;
              *(void *)long long buf = off_100862110;
              *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1E90;
              uint64_t v81 = &v82;
              sub_1003419A0((uint64_t)v50, v32, (uint64_t)buf);
              double v38 = sub_1002A43C0((uint64_t)buf, 0);
              double v39 = sub_1002A43C0((uint64_t)buf, 1u);
              if (v38 < v37) {
                double v40 = v38;
              }
              else {
                double v40 = v37;
              }
              if (v38 > v36) {
                double v36 = v38;
              }
              else {
                double v37 = v40;
              }
              if (v39 <= v34)
              {
                if (v39 < v35) {
                  double v35 = v39;
                }
              }
              else
              {
                double v34 = v39;
              }
              v32 += 56;
            }
            while (v32 != v33);
            double v41 = v36 - v37;
            double v42 = v34 - v35;
            double v31 = v49;
          }
          if (v42 >= v41) {
            double v43 = v41;
          }
          else {
            double v43 = v42;
          }
          if (v41 < v42) {
            double v41 = v42;
          }
          *a7 = v41;
          if (v43 >= a1)
          {
            double v45 = qword_1008ABDE0;
            BOOL v46 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
            char v44 = 0;
            if (v46)
            {
              *(_DWORD *)long long buf = 134218496;
              *(double *)&uint8_t buf[4] = a2;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(double *)&buf[14] = v31;
              *(_WORD *)&buf[22] = 2048;
              uint64_t v80 = *(void *)&v43;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter_with,Batch filter problem is observable now from the bin with max range %3.1f m: smallest eigenvalue is %f, smallest rectangular box dimension is %f m", buf, 0x20u);
              char v44 = 0;
            }
          }
          else
          {
            char v44 = 1;
          }
          *double v47 = v44;
        }
      }
    }
    double v74 = (uint64_t (**)())&v71;
    sub_100351F88((void ***)&v74);
  }
}

void sub_10034C658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  a17 = (void **)&a58;
  sub_100351F88(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10034C6DC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      sub_1000267C4();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_100028A48(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    sub_100352048(a1, v7);
    return sub_10035233C((uint64_t)v7);
  }
  return result;
}

void sub_10034C788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10035233C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10034C79C(void *result)
{
  void *result = off_100853598;
  return result;
}

void *sub_10034C7BC(void *result)
{
  void *result = off_100853598;
  return result;
}

void *sub_10034C7DC(void *result)
{
  void *result = off_100853598;
  return result;
}

void sub_10034C7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = 0x200000002;
  unint64_t v30 = off_1008621A0;
  long long v31 = xmmword_1004C1EB0;
  unint64_t v33 = &v34;
  uint64_t v27 = 0x200000002;
  double v25 = off_1008621A0;
  long long v26 = xmmword_1004C1EB0;
  long long v28 = &v29;
  uint64_t v22 = 0x200000002;
  uint64_t v20 = off_1008621A0;
  long long v21 = xmmword_1004C1EB0;
  uint64_t v23 = &v24;
  uint64_t v17 = 0x100000002;
  uint64_t v15 = off_100862110;
  long long v16 = xmmword_1004C1E90;
  double v18 = &v19;
  uint64_t v12 = 0x200000002;
  uint64_t v10 = off_1008621A0;
  long long v11 = xmmword_1004C1EB0;
  double v13 = &v14;
  uint64_t v7 = 0x1000000A8;
  uint64_t v5 = off_100862230;
  long long v6 = xmmword_1004C1EC0;
  uint64_t v8 = &v9;
  sub_1003527D0(a1, (uint64_t)&v30, a3, (uint64_t)&v25, a2, (uint64_t)&v20, (uint64_t)&v15, (uint64_t)&v10, (uint64_t)&v5);
  if (DWORD2(v26))
  {
    unsigned int v3 = 0;
    while (*(double *)sub_1003416AC((uint64_t)&v25, v3) == 0.0)
    {
      if (++v3 >= DWORD2(v26)) {
        goto LABEL_6;
      }
    }
    cnprint::CNPrinter::Print();
  }
LABEL_6:
  if (DWORD2(v21))
  {
    unsigned int v4 = 0;
    while (*(double *)sub_1003416AC((uint64_t)&v20, v4) == 0.0)
    {
      if (++v4 >= DWORD2(v21)) {
        return;
      }
    }
    cnprint::CNPrinter::Print();
  }
}

void sub_10034CA54(void **a1, unint64_t a2)
{
  unsigned int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_1000267C4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    long long v6 = (char *)sub_100056BF0(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    long long v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_10034CAFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8)
{
  *(double *)a1 = a5;
  *(double *)(a1 + 8) = a6;
  *(double *)(a1 + 16) = a6 / (a7 * a8);
  *(double *)(a1 + 24) = a7;
  *(double *)(a1 + 32) = a8;
  sub_10034CDD4(a1 + 40, a2);
  *(_DWORD *)(a1 + 104) = a4;
  sub_10034CDD4(a1 + 112, a3);
  return a1;
}

void sub_10034CB60(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void *sub_10034CB80(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_10034CBFC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10034CBE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10034CBFC(void *a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    sub_1000267C4();
  }
  uint64_t result = (char *)sub_10034CC50((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[192 * v4];
  return result;
}

void *sub_10034CC50(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    sub_1000257D8();
  }
  return operator new(192 * a2);
}

char *sub_10034CC98(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 6) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 > 0x155555555555555) {
      sub_1000267C4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 6);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x155555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_10034CBFC(v7, v12);
    uint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 6) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[64 * ((v15 - v9) >> 6)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

__n128 sub_10034CDD4(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000003;
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100861B38;
  if (a1 == a2)
  {
    long long v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    double v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 3)
  {
    long long v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    double v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    long long v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  long long v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    long long v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    long long v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    unint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    __n128 *v12 = result;
  }
  else if (v5)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)long long v6 = v9;
      long long v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_10034CF44(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

__n128 sub_10034CF64(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x300000003;
  *(void *)(a1 + 24) = 0x300000003;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100861B80;
  if (a1 == a2)
  {
    long long v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    double v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 3)
  {
    long long v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    double v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 4)
  {
    long long v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  long long v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    long long v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 3u)
  {
    long long v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    unint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    __n128 *v12 = result;
  }
  else if (v5)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)long long v6 = v9;
      long long v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_10034D0D0(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

__n128 sub_10034D0F0(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000004;
  *(void *)(a1 + 24) = 0x100000004;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100861BC8;
  if (a1 == a2)
  {
    long long v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    double v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 4)
  {
    long long v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    double v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    long long v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  long long v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 4u)
  {
    long long v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    long long v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    unint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    __n128 *v12 = result;
  }
  else if (v5)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)long long v6 = v9;
      long long v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_10034D260(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_10034D280(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_10034D2B0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10034D2BC(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_10034D2E0(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_10034D310(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10034D31C(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

__n128 sub_10034D36C(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x400000004;
  *(void *)(a1 + 24) = 0x400000004;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100861ED8;
  if (a1 == a2)
  {
    long long v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    double v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 4)
  {
    long long v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    double v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 5)
  {
    long long v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  long long v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 4u)
  {
    long long v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 4u)
  {
    long long v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    unint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    __n128 *v12 = result;
  }
  else if (v5)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)long long v6 = v9;
      long long v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_10034D4D8(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void *sub_10034D4F8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = sub_100155838(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10034D558(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10034D574(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_10034D5C8((uint64_t)v2, *v2);
    unsigned int v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_10034D5C8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 != a2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = v2 + v3;
      *(void *)(v4 - 64) = off_100853598;
      *(void *)(v4 - 128) = off_100853598;
      *(void *)(v4 - 256) = off_100853598;
      *(void *)(v2 + v3 - 424) = off_100853598;
      *(void *)(v2 + v3 - 488) = off_100853598;
      *(void *)(v2 + v3 - 560) = off_100853598;
      v3 -= 560;
    }
    while (v2 + v3 != a2);
  }
  *(void *)(result + 8) = a2;
  return result;
}

void sub_10034D6B4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    if (v3 != v2)
    {
      uint64_t v4 = v3 - 136;
      do
      {
        *((void *)v3 - 8) = off_100853598;
        *((void *)v3 - 17) = off_100853598;
        v4 -= 176;
        v3 -= 176;
      }
      while (v3 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_10034D72C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10034D7F0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10034D7A4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    sub_1000257D8();
  }
  return operator new(176 * a2);
}

uint64_t sub_10034D7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_10034D884(a1, i + a7, (long long *)(i + a3)))
    i -= 176;
  return a6;
}

double sub_10034D884(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  long long v6 = a3[1];
  *(void *)(a2 + 32) = *((void *)a3 + 4);
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  sub_10034CDD4(a2 + 40, (uint64_t)a3 + 40);
  *(_DWORD *)(a2 + 104) = *((_DWORD *)a3 + 26);
  *(void *)&double result = sub_10034CDD4(a2 + 112, (uint64_t)(a3 + 7)).n128_u64[0];
  return result;
}

void sub_10034D8E4(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10034D904(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = v3 - 136;
    do
    {
      *(void *)(v3 - 64) = off_100853598;
      *(void *)(v3 - 136) = off_100853598;
      v4 -= 176;
      v3 -= 176;
    }
    while (v3 != v2);
    *(void *)(a1 + 16) = v2;
  }
  long long v5 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v5);
  }
  return a1;
}

char *sub_10034D998(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 >> 60) {
      sub_1000267C4();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = sub_100155838(v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  __n128 *v12 = &v9[v17];
  return result;
}

long long *sub_10034DAA4(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  long long v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  long long v6 = a3;
  do
  {
    long long v7 = *v5;
    long long v8 = v5[1];
    *(void *)(a4 + 32) = *((void *)v5 + 4);
    *(_OWORD *)a4 = v7;
    *(_OWORD *)(a4 + 16) = v8;
    sub_10034226C(a4 + 40, (uint64_t)v5 + 40);
    *(_DWORD *)(a4 + 104) = *((_DWORD *)v5 + 26);
    sub_10034226C(a4 + 112, (uint64_t)(v5 + 7));
    a4 += 176;
    v5 += 11;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_10034DB2C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_1000267C4();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)sub_10034D7A4((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  uint64_t v10 = v7;
  unint64_t v11 = &v7[176 * v3];
  uint64_t v13 = &v7[176 * v6];
  sub_10034DC54((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 176;
  sub_10034D72C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10034D904((uint64_t)&v10);
  return v8;
}

void sub_10034DC40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10034D904((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10034DC54(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  long long v6 = a3[1];
  *(void *)(a2 + 32) = *((void *)a3 + 4);
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  sub_10034CDD4(a2 + 40, (uint64_t)a3 + 40);
  *(_DWORD *)(a2 + 104) = *((_DWORD *)a3 + 26);
  *(void *)&double result = sub_10034CDD4(a2 + 112, (uint64_t)(a3 + 7)).n128_u64[0];
  return result;
}

void sub_10034DCB4(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_10034DCD4(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_10034DD04(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10034DD10(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_10034DD60(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x300000004;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_100861F68;
  if (a2 > 4)
  {
    uint64_t v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 4)
  {
    uint64_t v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10034DE0C(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_10034DE2C(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_10034DE5C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10034DE68(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

double sub_10034DEB8(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_1004332B4();
  }
  unsigned int v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0) {
    sub_1004332E0();
  }
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16)) {
    sub_10043330C();
  }
  return *(double *)(v3 + 8 * v4);
}

void sub_10034DEFC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      long long v6 = v4 - 72;
      long long v7 = v4 - 72;
      uint64_t v8 = v4 - 72;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 72;
        (*v9)(v7);
        v6 -= 72;
        BOOL v10 = v7 == v2;
        long long v7 = v8;
      }
      while (!v10);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10034DFBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_1000267C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)sub_10028BA54(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[72 * v4];
  long long v16 = &v10[72 * v9];
  sub_10034D0F0((uint64_t)v14, a2);
  unint64_t v15 = v14 + 72;
  sub_10034E0DC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10034E1E0((uint64_t)&v13);
  return v11;
}

void sub_10034E0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10034E1E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10034E0DC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10034E154((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10034E154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_10034D0F0(i + a7, i + a3))
    i -= 72;
  return a6;
}

uint64_t sub_10034E1E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 72);
    *(void *)(a1 + 16) = i - 72;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10034E24C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 64;
      uint64_t v7 = v4 - 64;
      uint64_t v8 = v4 - 64;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 64;
        (*v9)(v7);
        v6 -= 64;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10034E30C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10034E3BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10034E384(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_1000257D8();
  }
  return operator new(a2 << 6);
}

uint64_t sub_10034E3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_10034CDD4(i + a7, i + a3))
    i -= 64;
  return a6;
}

uint64_t sub_10034E448(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 64);
    *(void *)(a1 + 16) = i - 64;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10034E4B4(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_10034E508((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_10034E508(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 != a2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = v2 + v3;
      *(void *)(v4 - 128) = off_100853598;
      *(void *)(v4 - 240) = off_100853598;
      *(void *)(v2 + v3 - 408) = off_100853598;
      *(void *)(v2 + v3 - 472) = off_100853598;
      *(void *)(v2 + v3 - 536) = off_100853598;
      *(void *)(v2 + v3 - 608) = off_100853598;
      v3 -= 616;
    }
    while (v2 + v3 != a2);
  }
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t sub_10034E5F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4FCACE213F2B3885 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x6A63BD81A98EF6) {
    sub_1000267C4();
  }
  if (0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4FCACE213F2B3885 * ((a1[2] - *a1) >> 3)) >= 0x3531DEC0D4C77BLL) {
    unint64_t v6 = 0x6A63BD81A98EF6;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_10034E8E8((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  BOOL v10 = v7;
  uint64_t v11 = &v7[616 * v3];
  uint64_t v13 = &v7[616 * v6];
  sub_10034E71C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 616;
  sub_10034E870(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10034ECFC((uint64_t)&v10);
  return v8;
}

void sub_10034E708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10034ECFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10034E71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 80;
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v6 = a2 + 80;
  sub_10034D0F0(a2 + 8, a3 + 8);
  sub_10034CDD4(v6, v5);
  sub_10034CDD4(a2 + 144, a3 + 144);
  sub_10034D36C(a2 + 208, a3 + 208);
  sub_10034CF64(a2 + 376, a3 + 376);
  sub_10034CF64(a2 + 488, a3 + 488);
  uint64_t v7 = *(void *)(a3 + 600);
  *(_DWORD *)(a2 + 608) = *(_DWORD *)(a3 + 608);
  *(void *)(a2 + 600) = v7;
}

void sub_10034E7D0(_Unwind_Exception *a1)
{
  *uint64_t v5 = off_100853598;
  *unint64_t v4 = off_100853598;
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10034E870(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10034E934((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10034E8E8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x6A63BD81A98EF7) {
    sub_1000257D8();
  }
  return operator new(616 * a2);
}

uint64_t sub_10034E934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 616;
      sub_10034EA00(a1, v7 - 616, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 616;
      *((void *)&v16 + 1) -= 616;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10034EB54((uint64_t)v13);
  return v11;
}

void sub_10034E9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10034EA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 80;
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v6 = a2 + 80;
  sub_10034D0F0(a2 + 8, a3 + 8);
  sub_10034CDD4(v6, v5);
  sub_10034CDD4(a2 + 144, a3 + 144);
  sub_10034D36C(a2 + 208, a3 + 208);
  sub_10034CF64(a2 + 376, a3 + 376);
  sub_10034CF64(a2 + 488, a3 + 488);
  uint64_t v7 = *(void *)(a3 + 600);
  *(_DWORD *)(a2 + 608) = *(_DWORD *)(a3 + 608);
  *(void *)(a2 + 600) = v7;
}

void sub_10034EAB4(_Unwind_Exception *a1)
{
  *uint64_t v5 = off_100853598;
  *unint64_t v4 = off_100853598;
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10034EB54(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10034EB8C((uint64_t *)a1);
  }
  return a1;
}

void sub_10034EB8C(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_10034EC04(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_10034EC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 32);
  if (v3 != *(void *)(a3 + 32))
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = (void *)(v3 + v4);
      v5[61] = off_100853598;
      v5[47] = off_100853598;
      v5[26] = off_100853598;
      v5[18] = off_100853598;
      v5[10] = off_100853598;
      v5[1] = off_100853598;
      *(void *)(a2 + 32) = v3 + v4 + 616;
      v4 += 616;
    }
    while (v3 + v4 != *(void *)(a3 + 32));
  }
}

uint64_t sub_10034ECFC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10034ED34(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = v2 + v3;
      *(void *)(v4 - 128) = off_100853598;
      *(void *)(v4 - 240) = off_100853598;
      *(void *)(v2 + v3 - 408) = off_100853598;
      *(void *)(v2 + v3 - 472) = off_100853598;
      *(void *)(v2 + v3 - 536) = off_100853598;
      *(void *)(v2 + v3 - 608) = off_100853598;
      v3 -= 616;
    }
    while (v2 + v3 != a2);
    *(void *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_10034EE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(unsigned char *)a4 = *(unsigned char *)v5;
    sub_10034226C(a4 + 8, v5 + 8);
    sub_10034226C(a4 + 80, v5 + 80);
    sub_10034226C(a4 + 144, v5 + 144);
    sub_10034226C(a4 + 208, v5 + 208);
    sub_10034226C(a4 + 376, v5 + 376);
    sub_10034226C(a4 + 488, v5 + 488);
    int v7 = *(_DWORD *)(v5 + 608);
    *(void *)(a4 + 600) = *(void *)(v5 + 600);
    *(_DWORD *)(a4 + 608) = v7;
    a4 += 616;
    v5 += 616;
  }
  while (v5 != v6);
  return v6;
}

void sub_10034EED8(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v8 = a2;
    uint64_t v60 = (char *)(a2 - 616);
    unint64_t v9 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = v8 - v9;
          unint64_t v11 = 0x4FCACE213F2B3885 * ((uint64_t)(v8 - v9) >> 3);
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 16) >= *(double *)(v9 + 600)) {
                  return;
                }
                char v44 = (char *)v9;
                double v45 = (char *)(a2 - 616);
                break;
              case 3uLL:
                sub_10034FFF4(v9, v9 + 616, (uint64_t)v60);
                return;
              case 4uLL:
                sub_100350638(v9, v9 + 616, v9 + 1232, (uint64_t)v60);
                return;
              case 5uLL:
                sub_100350638(v9, v9 + 616, v9 + 1232, v9 + 1848);
                if (*(double *)(a2 - 16) >= *(double *)(v9 + 2448)) {
                  return;
                }
                sub_10035045C((char *)(v9 + 1848), v60);
                if (*(double *)(v9 + 2448) >= *(double *)(v9 + 1832)) {
                  return;
                }
                sub_10035045C((char *)(v9 + 1232), (char *)(v9 + 1848));
                if (*(double *)(v9 + 1832) >= *(double *)(v9 + 1216)) {
                  return;
                }
                sub_10035045C((char *)(v9 + 616), (char *)(v9 + 1232));
                if (*(double *)(v9 + 1216) >= *(double *)(v9 + 600)) {
                  return;
                }
                char v44 = (char *)v9;
                double v45 = (char *)(v9 + 616);
                break;
              default:
                JUMPOUT(0);
            }
            sub_10035045C(v44, v45);
            return;
          }
          if (v10 <= 14783)
          {
            if (a4)
            {
              if (v9 != v8)
              {
                BOOL v46 = (unsigned char *)(v9 + 616);
                if (v9 + 616 != a2)
                {
                  uint64_t v47 = 0;
                  unint64_t v48 = v9;
                  do
                  {
                    double v49 = v46;
                    if (*(double *)(v48 + 1216) < *(double *)(v48 + 600))
                    {
                      char v67 = *v46;
                      sub_10034D0F0((uint64_t)v69, v48 + 624);
                      sub_10034CDD4((uint64_t)v70, v48 + 696);
                      sub_10034CDD4((uint64_t)v71, v48 + 760);
                      sub_10034D36C((uint64_t)v72, v48 + 824);
                      sub_10034CF64((uint64_t)v73, v48 + 992);
                      sub_10034CF64((uint64_t)v74, v48 + 1104);
                      double v75 = *(double *)(v48 + 1216);
                      int v76 = *(_DWORD *)(v48 + 1224);
                      uint64_t v50 = v47;
                      while (1)
                      {
                        *(unsigned char *)(a1 + v50 + 616) = *(unsigned char *)(a1 + v50);
                        sub_10034226C(a1 + v50 + 624, a1 + v50 + 8);
                        sub_10034226C(a1 + v50 + 696, a1 + v50 + 80);
                        sub_10034226C(a1 + v50 + 760, a1 + v50 + 144);
                        sub_10034226C(a1 + v50 + 824, a1 + v50 + 208);
                        sub_10034226C(a1 + v50 + 992, a1 + v50 + 376);
                        sub_10034226C(a1 + v50 + 1104, a1 + v50 + 488);
                        uint64_t v51 = a1 + v50;
                        *(void *)(v51 + 1216) = *(void *)(a1 + v50 + 600);
                        *(_DWORD *)(v51 + 1224) = *(_DWORD *)(a1 + v50 + 608);
                        if (!v50) {
                          break;
                        }
                        v50 -= 616;
                        if (v75 >= *(double *)(v51 - 16))
                        {
                          long long v52 = (unsigned char *)(a1 + v50 + 616);
                          goto LABEL_75;
                        }
                      }
                      long long v52 = (unsigned char *)a1;
LABEL_75:
                      *long long v52 = v67;
                      sub_10034226C(v51 + 8, (uint64_t)v69);
                      sub_10034226C(v51 + 80, (uint64_t)v70);
                      sub_10034226C(v51 + 144, (uint64_t)v71);
                      sub_10034226C(v51 + 208, (uint64_t)v72);
                      sub_10034226C(v51 + 376, (uint64_t)v73);
                      sub_10034226C(v51 + 488, (uint64_t)v74);
                      double v53 = v75;
                      *(_DWORD *)(v51 + 608) = v76;
                      *(double *)(v51 + 600) = v53;
                    }
                    BOOL v46 = v49 + 616;
                    v47 += 616;
                    unint64_t v48 = (unint64_t)v49;
                  }
                  while (v49 + 616 != (unsigned char *)a2);
                }
              }
            }
            else if (v9 != v8)
            {
              double v54 = (unsigned char *)(v9 + 616);
              if (v9 + 616 != a2)
              {
                unint64_t v55 = v9 - 16;
                do
                {
                  double v56 = v54;
                  if (*(double *)(a1 + 1216) < *(double *)(a1 + 600))
                  {
                    char v68 = *v54;
                    sub_10034D0F0((uint64_t)v69, a1 + 624);
                    sub_10034CDD4((uint64_t)v70, a1 + 696);
                    sub_10034CDD4((uint64_t)v71, a1 + 760);
                    sub_10034D36C((uint64_t)v72, a1 + 824);
                    sub_10034CF64((uint64_t)v73, a1 + 992);
                    sub_10034CF64((uint64_t)v74, a1 + 1104);
                    double v75 = *(double *)(a1 + 1216);
                    int v76 = *(_DWORD *)(a1 + 1224);
                    unint64_t v57 = v55;
                    do
                    {
                      *(unsigned char *)(v57 + 632) = *(unsigned char *)(v57 + 16);
                      sub_10034226C(v57 + 640, v57 + 24);
                      sub_10034226C(v57 + 712, v57 + 96);
                      sub_10034226C(v57 + 776, v57 + 160);
                      sub_10034226C(v57 + 840, v57 + 224);
                      sub_10034226C(v57 + 1008, v57 + 392);
                      sub_10034226C(v57 + 1120, v57 + 504);
                      *(void *)(v57 + 1232) = *(void *)(v57 + 616);
                      *(_DWORD *)(v57 + 1240) = *(_DWORD *)(v57 + 624);
                      double v58 = *(double *)v57;
                      v57 -= 616;
                    }
                    while (v75 < v58);
                    *(unsigned char *)(v57 + 632) = v68;
                    sub_10034226C(v57 + 640, (uint64_t)v69);
                    sub_10034226C(v57 + 712, (uint64_t)v70);
                    sub_10034226C(v57 + 776, (uint64_t)v71);
                    sub_10034226C(v57 + 840, (uint64_t)v72);
                    sub_10034226C(v57 + 1008, (uint64_t)v73);
                    sub_10034226C(v57 + 1120, (uint64_t)v74);
                    double v59 = v75;
                    *(_DWORD *)(v57 + 1240) = v76;
                    *(double *)(v57 + 1232) = v59;
                  }
                  double v54 = v56 + 616;
                  v55 += 616;
                  a1 = (uint64_t)v56;
                }
                while (v56 + 616 != (unsigned char *)a2);
              }
            }
            return;
          }
          if (!a3)
          {
            sub_10034F9C0(v9, v8, v8);
            return;
          }
          unint64_t v12 = v11 >> 1;
          uint64_t v13 = (char *)(v9 + 616 * (v11 >> 1));
          if ((unint64_t)v10 >= 0x13401)
          {
            sub_10034FFF4(v9, v9 + 616 * (v11 >> 1), (uint64_t)v60);
            uint64_t v14 = 616 * v12;
            sub_10034FFF4(v9 + 616, v14 + v9 - 616, a2 - 1232);
            sub_10034FFF4(v9 + 1232, v9 + 616 + v14, a2 - 1848);
            sub_10034FFF4(v14 + v9 - 616, (uint64_t)v13, v9 + 616 + v14);
            sub_10035045C((char *)v9, v13);
          }
          else
          {
            sub_10034FFF4(v9 + 616 * (v11 >> 1), v9, (uint64_t)v60);
          }
          --a3;
          if ((a4 & 1) != 0 || *(double *)(v9 - 16) < *(double *)(v9 + 600)) {
            break;
          }
          char v66 = *(unsigned char *)v9;
          sub_10034D0F0((uint64_t)v69, v9 + 8);
          sub_10034CDD4((uint64_t)v70, v9 + 80);
          sub_10034CDD4((uint64_t)v71, v9 + 144);
          sub_10034D36C((uint64_t)v72, v9 + 208);
          sub_10034CF64((uint64_t)v73, v9 + 376);
          sub_10034CF64((uint64_t)v74, v9 + 488);
          double v32 = *(double *)(v9 + 600);
          int v76 = *(_DWORD *)(v9 + 608);
          double v75 = v32;
          if (v32 >= *(double *)(v8 - 16))
          {
            unint64_t v35 = v9 + 616;
            do
            {
              unint64_t v9 = v35;
              if (v35 >= a2) {
                break;
              }
              v35 += 616;
            }
            while (v75 >= *(double *)(v9 + 600));
          }
          else
          {
            unint64_t v33 = v9;
            do
            {
              unint64_t v9 = v33 + 616;
              double v34 = *(double *)(v33 + 1216);
              v33 += 616;
            }
            while (v75 >= v34);
          }
          double v36 = (char *)a2;
          if (v9 < a2)
          {
            unint64_t v37 = a2;
            do
            {
              double v36 = (char *)(v37 - 616);
              double v38 = *(double *)(v37 - 16);
              v37 -= 616;
            }
            while (v75 < v38);
          }
          while (v9 < (unint64_t)v36)
          {
            sub_10035045C((char *)v9, v36);
            do
            {
              double v39 = *(double *)(v9 + 1216);
              v9 += 616;
            }
            while (v75 >= v39);
            do
            {
              double v40 = *((double *)v36 - 2);
              v36 -= 616;
            }
            while (v75 < v40);
          }
          double v41 = (char *)(v9 - 616);
          if (v9 - 616 != a1)
          {
            *(unsigned char *)a1 = *v41;
            sub_10034226C(a1 + 8, v9 - 608);
            sub_10034226C(a1 + 80, v9 - 536);
            sub_10034226C(a1 + 144, v9 - 472);
            sub_10034226C(a1 + 208, v9 - 408);
            sub_10034226C(a1 + 376, v9 - 240);
            sub_10034226C(a1 + 488, v9 - 128);
            uint64_t v42 = *(void *)(v9 - 16);
            *(_DWORD *)(a1 + 608) = *(_DWORD *)(v9 - 8);
            *(void *)(a1 + 600) = v42;
          }
          *double v41 = v66;
          sub_10034226C(v9 - 608, (uint64_t)v69);
          sub_10034226C(v9 - 536, (uint64_t)v70);
          sub_10034226C(v9 - 472, (uint64_t)v71);
          sub_10034226C(v9 - 408, (uint64_t)v72);
          sub_10034226C(v9 - 240, (uint64_t)v73);
          sub_10034226C(v9 - 128, (uint64_t)v74);
          a4 = 0;
          double v43 = v75;
          *(_DWORD *)(v9 - 8) = v76;
          *(double *)(v9 - 16) = v43;
          uint64_t v8 = a2;
        }
        char v65 = *(unsigned char *)v9;
        sub_10034D0F0((uint64_t)v69, v9 + 8);
        sub_10034CDD4((uint64_t)v70, v9 + 80);
        sub_10034CDD4((uint64_t)v71, v9 + 144);
        sub_10034D36C((uint64_t)v72, v9 + 208);
        sub_10034CF64((uint64_t)v73, v9 + 376);
        uint64_t v63 = v9 + 488;
        sub_10034CF64((uint64_t)v74, v9 + 488);
        uint64_t v15 = 0;
        unint64_t v62 = v9 + 600;
        double v16 = *(double *)(v9 + 600);
        int v76 = *(_DWORD *)(v9 + 608);
        double v75 = v16;
        do
        {
          double v17 = *(double *)(v9 + v15 + 1216);
          v15 += 616;
        }
        while (v17 < v75);
        unint64_t v18 = v9 + v15;
        uint64_t v19 = v8;
        if (v15 == 616)
        {
          unint64_t v22 = a2;
          while (v18 < v22)
          {
            uint64_t v20 = (char *)(v22 - 616);
            double v23 = *(double *)(v22 - 16);
            v22 -= 616;
            if (v23 < v75) {
              goto LABEL_21;
            }
          }
          uint64_t v20 = (char *)v22;
        }
        else
        {
          do
          {
            uint64_t v20 = (char *)(v19 - 616);
            double v21 = *(double *)(v19 - 16);
            v19 -= 616;
          }
          while (v21 >= v75);
        }
LABEL_21:
        unint64_t v9 = v18;
        if (v18 < (unint64_t)v20)
        {
          uint64_t v24 = v20;
          do
          {
            sub_10035045C((char *)v9, v24);
            do
            {
              double v25 = *(double *)(v9 + 1216);
              v9 += 616;
            }
            while (v25 < v75);
            do
            {
              double v26 = *((double *)v24 - 2);
              v24 -= 616;
            }
            while (v26 >= v75);
          }
          while (v9 < (unint64_t)v24);
        }
        uint64_t v27 = (char *)(v9 - 616);
        if (v9 - 616 != a1)
        {
          *(unsigned char *)a1 = *v27;
          sub_10034226C(a1 + 8, v9 - 608);
          sub_10034226C(a1 + 80, v9 - 536);
          sub_10034226C(a1 + 144, v9 - 472);
          sub_10034226C(a1 + 208, v9 - 408);
          sub_10034226C(a1 + 376, v9 - 240);
          sub_10034226C(v63, v9 - 128);
          uint64_t v28 = *(void *)(v9 - 16);
          *(_DWORD *)(v62 + 8) = *(_DWORD *)(v9 - 8);
          *(void *)unint64_t v62 = v28;
        }
        char *v27 = v65;
        sub_10034226C(v9 - 608, (uint64_t)v69);
        sub_10034226C(v9 - 536, (uint64_t)v70);
        sub_10034226C(v9 - 472, (uint64_t)v71);
        sub_10034226C(v9 - 408, (uint64_t)v72);
        sub_10034226C(v9 - 240, (uint64_t)v73);
        __n128 v29 = sub_10034226C(v9 - 128, (uint64_t)v74);
        double v30 = v75;
        *(_DWORD *)(v9 - 8) = v76;
        *(double *)(v9 - 16) = v30;
        BOOL v4 = v18 >= (unint64_t)v20;
        uint64_t v8 = a2;
        if (v4) {
          break;
        }
LABEL_33:
        sub_10034EED8(a1, v9 - 616, a3, a4 & 1, v29);
        a4 = 0;
      }
      BOOL v31 = sub_1003500B4(a1, v9 - 616);
      if (sub_1003500B4(v9, a2)) {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = v9 - 616;
    if (!v31) {
      continue;
    }
    break;
  }
}

void sub_10034F9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v61 = v3;
    uint64_t v62 = v4;
    uint64_t v6 = a1;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 616;
    if (a2 - a1 >= 617)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = (double *)(a1 + 616 * v10);
      do
      {
        sub_1003506E0(v6, v9, v12);
        v12 -= 77;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (*(double *)(v14 + 600) < *(double *)(v6 + 600))
        {
          sub_10035045C((char *)v14, (char *)v6);
          sub_1003506E0(v6, v9, (double *)v6);
        }
        v14 += 616;
      }
      while (v14 != a3);
    }
    if (v8 >= 617)
    {
      int64_t v15 = v8 / 0x268uLL;
      uint64_t v38 = v6 + 80;
      uint64_t v39 = v6 + 8;
      uint64_t v36 = v6 + 208;
      uint64_t v37 = v6 + 144;
      uint64_t v34 = v6 + 488;
      uint64_t v35 = v6 + 376;
      uint64_t v32 = v6;
      uint64_t v33 = v6 + 600;
      do
      {
        uint64_t v41 = v13;
        char v43 = *(unsigned char *)v6;
        sub_10034D0F0((uint64_t)v44, v39);
        sub_10034CDD4((uint64_t)v45, v38);
        sub_10034CDD4((uint64_t)v46, v37);
        sub_10034D36C((uint64_t)v47, v36);
        sub_10034CF64((uint64_t)v48, v35);
        sub_10034CF64((uint64_t)v49, v34);
        uint64_t v16 = 0;
        uint64_t v50 = *(void *)v33;
        int v51 = *(_DWORD *)(v33 + 8);
        uint64_t v42 = v15;
        uint64_t v17 = v6;
        do
        {
          uint64_t v18 = v17;
          uint64_t v19 = v16 + 1;
          v17 += 616 * (v16 + 1);
          uint64_t v20 = 2 * v16;
          uint64_t v16 = (2 * v16) | 1;
          int64_t v21 = v20 + 2;
          if (v21 < v15 && *(double *)(v18 + 616 * v19 + 600) < *(double *)(v17 + 1216))
          {
            v17 += 616;
            uint64_t v16 = v21;
          }
          *(unsigned char *)uint64_t v18 = *(unsigned char *)v17;
          sub_10034226C(v18 + 8, v17 + 8);
          sub_10034226C(v18 + 80, v17 + 80);
          sub_10034226C(v18 + 144, v17 + 144);
          sub_10034226C(v18 + 208, v17 + 208);
          sub_10034226C(v18 + 376, v17 + 376);
          sub_10034226C(v18 + 488, v17 + 488);
          int v22 = *(_DWORD *)(v17 + 608);
          *(void *)(v18 + 600) = *(void *)(v17 + 600);
          *(_DWORD *)(v18 + 608) = v22;
        }
        while (v16 <= (uint64_t)((unint64_t)(v15 - 2) >> 1));
        double v23 = (void *)(v17 + 600);
        uint64_t v24 = (char *)(v13 - 616);
        if (v17 == v13 - 616)
        {
          *(unsigned char *)uint64_t v17 = v43;
          sub_10034226C(v17 + 8, (uint64_t)v44);
          sub_10034226C(v17 + 80, (uint64_t)v45);
          sub_10034226C(v17 + 144, (uint64_t)v46);
          sub_10034226C(v17 + 208, (uint64_t)v47);
          sub_10034226C(v17 + 376, (uint64_t)v48);
          sub_10034226C(v17 + 488, (uint64_t)v49);
          int v31 = v51;
          void *v23 = v50;
          *(_DWORD *)(v17 + 608) = v31;
          uint64_t v6 = v32;
        }
        else
        {
          *(unsigned char *)uint64_t v17 = *v24;
          sub_10034226C(v17 + 8, v13 - 608);
          sub_10034226C(v17 + 80, v13 - 536);
          sub_10034226C(v17 + 144, v13 - 472);
          sub_10034226C(v17 + 208, v13 - 408);
          sub_10034226C(v17 + 376, v13 - 240);
          sub_10034226C(v17 + 488, v13 - 128);
          uint64_t v25 = *(void *)(v13 - 16);
          *(_DWORD *)(v17 + 608) = *(_DWORD *)(v13 - 8);
          double v40 = (double *)(v17 + 600);
          void *v23 = v25;
          *uint64_t v24 = v43;
          sub_10034226C(v13 - 608, (uint64_t)v44);
          sub_10034226C(v13 - 536, (uint64_t)v45);
          sub_10034226C(v13 - 472, (uint64_t)v46);
          sub_10034226C(v13 - 408, (uint64_t)v47);
          sub_10034226C(v13 - 240, (uint64_t)v48);
          sub_10034226C(v13 - 128, (uint64_t)v49);
          *(void *)(v13 - 16) = v50;
          *(_DWORD *)(v13 - 8) = v51;
          uint64_t v6 = v32;
          uint64_t v26 = v17 - v32 + 616;
          if (v26 >= 617)
          {
            unint64_t v27 = (v26 / 0x268uLL - 2) >> 1;
            if (*(double *)(v32 + 616 * v27 + 600) < *v40)
            {
              char v52 = *(unsigned char *)v17;
              sub_10034D0F0((uint64_t)v53, v17 + 8);
              sub_10034CDD4((uint64_t)v54, v17 + 80);
              sub_10034CDD4((uint64_t)v55, v17 + 144);
              sub_10034D36C((uint64_t)v56, v17 + 208);
              sub_10034CF64((uint64_t)v57, v17 + 376);
              sub_10034CF64((uint64_t)v58, v17 + 488);
              double v28 = *v40;
              int v60 = *(_DWORD *)(v17 + 608);
              double v59 = v28;
              do
              {
                uint64_t v29 = v17;
                uint64_t v17 = v32 + 616 * v27;
                *(unsigned char *)uint64_t v29 = *(unsigned char *)v17;
                sub_10034226C(v29 + 8, v17 + 8);
                sub_10034226C(v29 + 80, v17 + 80);
                sub_10034226C(v29 + 144, v17 + 144);
                sub_10034226C(v29 + 208, v17 + 208);
                sub_10034226C(v29 + 376, v17 + 376);
                sub_10034226C(v29 + 488, v17 + 488);
                int v30 = *(_DWORD *)(v17 + 608);
                *(void *)(v29 + 600) = *(void *)(v17 + 600);
                *(_DWORD *)(v29 + 608) = v30;
                if (!v27) {
                  break;
                }
                unint64_t v27 = (v27 - 1) >> 1;
              }
              while (*(double *)(v32 + 616 * v27 + 600) < v59);
              *(unsigned char *)uint64_t v17 = v52;
              sub_10034226C(v17 + 8, (uint64_t)v53);
              sub_10034226C(v17 + 80, (uint64_t)v54);
              sub_10034226C(v17 + 144, (uint64_t)v55);
              sub_10034226C(v17 + 208, (uint64_t)v56);
              sub_10034226C(v17 + 376, (uint64_t)v57);
              sub_10034226C(v17 + 488, (uint64_t)v58);
              *(double *)(v17 + 600) = v59;
              *(_DWORD *)(v17 + 608) = v60;
            }
          }
        }
        --v15;
        uint64_t v13 = v41 - 616;
      }
      while (v42 > 2);
    }
  }
}

void sub_10034FFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  double v6 = *(double *)(a2 + 600);
  double v7 = *(double *)(a3 + 600);
  if (v6 >= *(double *)(a1 + 600))
  {
    if (v7 >= v6) {
      return;
    }
    sub_10035045C((char *)a2, (char *)a3);
    if (*(double *)(a2 + 600) >= *(double *)(v5 + 600)) {
      return;
    }
    a1 = v5;
    uint64_t v8 = (char *)a2;
  }
  else
  {
    if (v7 >= v6)
    {
      sub_10035045C((char *)a1, (char *)a2);
      if (*(double *)(a3 + 600) >= *(double *)(a2 + 600)) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = (char *)a3;
  }

  sub_10035045C((char *)a1, v8);
}

BOOL sub_1003500B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x4FCACE213F2B3885 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 600))
      {
        double v6 = (char *)(a2 - 616);
        double v7 = (char *)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      sub_10034FFF4(a1, a1 + 616, a2 - 616);
      return 1;
    case 4:
      sub_100350638(a1, a1 + 616, a1 + 1232, a2 - 616);
      return 1;
    case 5:
      sub_100350638(a1, a1 + 616, a1 + 1232, a1 + 1848);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 2448))
      {
        sub_10035045C((char *)(a1 + 1848), (char *)(a2 - 616));
        if (*(double *)(a1 + 2448) < *(double *)(a1 + 1832))
        {
          sub_10035045C((char *)(a1 + 1232), (char *)(a1 + 1848));
          if (*(double *)(a1 + 1832) < *(double *)(a1 + 1216))
          {
            sub_10035045C((char *)(a1 + 616), (char *)(a1 + 1232));
            if (*(double *)(a1 + 1216) < *(double *)(a1 + 600))
            {
              double v7 = (char *)a1;
              double v6 = (char *)(a1 + 616);
LABEL_4:
              sub_10035045C(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 1232;
      sub_10034FFF4(a1, a1 + 616, a1 + 1232);
      uint64_t v9 = a1 + 1848;
      if (a1 + 1848 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(double *)(v9 + 600) < *(double *)(v8 + 600))
    {
      char v15 = *(unsigned char *)v9;
      sub_10034D0F0((uint64_t)v16, v9 + 8);
      sub_10034CDD4((uint64_t)v17, v9 + 80);
      sub_10034CDD4((uint64_t)v18, v9 + 144);
      sub_10034D36C((uint64_t)v19, v9 + 208);
      sub_10034CF64((uint64_t)v20, v9 + 376);
      sub_10034CF64((uint64_t)v21, v9 + 488);
      double v22 = *(double *)(v9 + 600);
      int v23 = *(_DWORD *)(v9 + 608);
      uint64_t v12 = v10;
      while (1)
      {
        *(unsigned char *)(a1 + v12 + 1848) = *(unsigned char *)(a1 + v12 + 1232);
        sub_10034226C(a1 + v12 + 1856, a1 + v12 + 1240);
        sub_10034226C(a1 + v12 + 1928, a1 + v12 + 1312);
        sub_10034226C(a1 + v12 + 1992, a1 + v12 + 1376);
        sub_10034226C(a1 + v12 + 2056, a1 + v12 + 1440);
        sub_10034226C(a1 + v12 + 2224, a1 + v12 + 1608);
        sub_10034226C(a1 + v12 + 2336, a1 + v12 + 1720);
        uint64_t v13 = a1 + v12;
        *(void *)(v13 + 2448) = *(void *)(a1 + v12 + 1832);
        *(_DWORD *)(v13 + 2456) = *(_DWORD *)(a1 + v12 + 1840);
        if (v12 == -1232) {
          break;
        }
        v12 -= 616;
        if (v22 >= *(double *)(v13 + 1216))
        {
          uint64_t v14 = (unsigned char *)(a1 + v12 + 1848);
          goto LABEL_13;
        }
      }
      uint64_t v14 = (unsigned char *)a1;
LABEL_13:
      *uint64_t v14 = v15;
      sub_10034226C(v13 + 1240, (uint64_t)v16);
      sub_10034226C(v13 + 1312, (uint64_t)v17);
      sub_10034226C(v13 + 1376, (uint64_t)v18);
      sub_10034226C(v13 + 1440, (uint64_t)v19);
      sub_10034226C(v13 + 1608, (uint64_t)v20);
      sub_10034226C(v13 + 1720, (uint64_t)v21);
      *(double *)(v13 + 1832) = v22;
      *(_DWORD *)(v13 + 1840) = v23;
      if (++v11 == 8) {
        return v9 + 616 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 616;
    v9 += 616;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_10035042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10034B36C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10035045C(char *a1, char *a2)
{
  char v6 = *a1;
  uint64_t v4 = (uint64_t)(a1 + 8);
  sub_10034D0F0((uint64_t)v7, (uint64_t)(a1 + 8));
  sub_10034CDD4((uint64_t)v8, (uint64_t)(a1 + 80));
  sub_10034CDD4((uint64_t)v9, (uint64_t)(a1 + 144));
  sub_10034D36C((uint64_t)v10, (uint64_t)(a1 + 208));
  sub_10034CF64((uint64_t)v11, (uint64_t)(a1 + 376));
  sub_10034CF64((uint64_t)v12, (uint64_t)(a1 + 488));
  uint64_t v13 = *((void *)a1 + 75);
  int v14 = *((_DWORD *)a1 + 152);
  *a1 = *a2;
  sub_10034226C(v4, (uint64_t)(a2 + 8));
  sub_10034226C((uint64_t)(a1 + 80), (uint64_t)(a2 + 80));
  sub_10034226C((uint64_t)(a1 + 144), (uint64_t)(a2 + 144));
  sub_10034226C((uint64_t)(a1 + 208), (uint64_t)(a2 + 208));
  sub_10034226C((uint64_t)(a1 + 376), (uint64_t)(a2 + 376));
  sub_10034226C((uint64_t)(a1 + 488), (uint64_t)(a2 + 488));
  uint64_t v5 = *((void *)a2 + 75);
  *((_DWORD *)a1 + 152) = *((_DWORD *)a2 + 152);
  *((void *)a1 + 75) = v5;
  *a2 = v6;
  sub_10034226C((uint64_t)(a2 + 8), (uint64_t)v7);
  sub_10034226C((uint64_t)(a2 + 80), (uint64_t)v8);
  sub_10034226C((uint64_t)(a2 + 144), (uint64_t)v9);
  sub_10034226C((uint64_t)(a2 + 208), (uint64_t)v10);
  sub_10034226C((uint64_t)(a2 + 376), (uint64_t)v11);
  sub_10034226C((uint64_t)(a2 + 488), (uint64_t)v12);
  *((void *)a2 + 75) = v13;
  *((_DWORD *)a2 + 152) = v14;
}

void sub_100350624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10034B36C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100350638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10034FFF4(a1, a2, a3);
  if (*(double *)(a4 + 600) < *(double *)(a3 + 600))
  {
    sub_10035045C((char *)a3, (char *)a4);
    if (*(double *)(a3 + 600) < *(double *)(a2 + 600))
    {
      sub_10035045C((char *)a2, (char *)a3);
      if (*(double *)(a2 + 600) < *(double *)(a1 + 600))
      {
        sub_10035045C((char *)a1, (char *)a2);
      }
    }
  }
}

void sub_1003506E0(uint64_t a1, uint64_t a2, double *a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v4 = a3;
    int64_t v13 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= 0x4FCACE213F2B3885 * (((uint64_t)a3 - a1) >> 3))
    {
      int64_t v5 = (0x9F959C427E56710ALL * (((uint64_t)a3 - a1) >> 3)) | 1;
      char v6 = (double *)(a1 + 616 * v5);
      if ((uint64_t)(0x9F959C427E56710ALL * (((uint64_t)a3 - a1) >> 3) + 2) < a2
        && *(double *)(a1 + 616 * v5 + 600) < v6[152])
      {
        v6 += 77;
        int64_t v5 = 0x9F959C427E56710ALL * (((uint64_t)a3 - a1) >> 3) + 2;
      }
      if (v6[75] >= a3[75])
      {
        char v15 = *(unsigned char *)a3;
        sub_10034D0F0((uint64_t)v16, (uint64_t)(a3 + 1));
        sub_10034CDD4((uint64_t)v17, (uint64_t)(v4 + 10));
        sub_10034CDD4((uint64_t)v18, (uint64_t)(v4 + 18));
        sub_10034D36C((uint64_t)v19, (uint64_t)(v4 + 26));
        sub_10034CF64((uint64_t)v20, (uint64_t)(v4 + 47));
        sub_10034CF64((uint64_t)v21, (uint64_t)(v4 + 61));
        double v22 = v4[75];
        int v23 = *((_DWORD *)v4 + 152);
        do
        {
          double v7 = v6;
          uint64_t v8 = (uint64_t)(v6 + 1);
          *(unsigned char *)uint64_t v4 = *(unsigned char *)v6;
          sub_10034226C((uint64_t)(v4 + 1), (uint64_t)(v6 + 1));
          sub_10034226C((uint64_t)(v4 + 10), (uint64_t)(v6 + 10));
          sub_10034226C((uint64_t)(v4 + 18), (uint64_t)(v6 + 18));
          sub_10034226C((uint64_t)(v4 + 26), (uint64_t)(v6 + 26));
          sub_10034226C((uint64_t)(v4 + 47), (uint64_t)(v6 + 47));
          sub_10034226C((uint64_t)(v4 + 61), (uint64_t)(v6 + 61));
          uint64_t v9 = *((void *)v6 + 75);
          *((_DWORD *)v4 + 152) = *((_DWORD *)v6 + 152);
          *((void *)v4 + 75) = v9;
          if (v13 < v5) {
            break;
          }
          uint64_t v10 = (2 * v5) | 1;
          char v6 = (double *)(a1 + 616 * v10);
          if (2 * v5 + 2 < a2 && *(double *)(a1 + 616 * v10 + 600) < v6[152])
          {
            v6 += 77;
            uint64_t v10 = 2 * v5 + 2;
          }
          uint64_t v4 = v7;
          int64_t v5 = v10;
        }
        while (v6[75] >= v22);
        *(unsigned char *)double v7 = v15;
        sub_10034226C(v8, (uint64_t)v16);
        sub_10034226C((uint64_t)(v7 + 10), (uint64_t)v17);
        sub_10034226C((uint64_t)(v7 + 18), (uint64_t)v18);
        sub_10034226C((uint64_t)(v7 + 26), (uint64_t)v19);
        sub_10034226C((uint64_t)(v7 + 47), (uint64_t)v20);
        sub_10034226C((uint64_t)(v7 + 61), (uint64_t)v21);
        double v11 = v22;
        *((_DWORD *)v7 + 152) = v23;
        v7[75] = v11;
      }
    }
  }
}

void sub_10035098C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10034B36C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003509A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4FCACE213F2B3885 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x6A63BD81A98EF6) {
    sub_1000267C4();
  }
  if (0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4FCACE213F2B3885 * ((a1[2] - *a1) >> 3)) >= 0x3531DEC0D4C77BLL) {
    unint64_t v6 = 0x6A63BD81A98EF6;
  }
  else {
    unint64_t v6 = v4;
  }
  int v14 = a1 + 2;
  if (v6) {
    double v7 = (char *)sub_10034E8E8((uint64_t)(a1 + 2), v6);
  }
  else {
    double v7 = 0;
  }
  uint64_t v10 = v7;
  double v11 = &v7[616 * v3];
  int64_t v13 = &v7[616 * v6];
  sub_10034EA00((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 616;
  sub_10034E870(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10034ECFC((uint64_t)&v10);
  return v8;
}

void sub_100350AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10034ECFC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100350ACC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, int *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *a1;
  unint64_t v11 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 4);
  unint64_t v12 = v11 + 1;
  if (v11 + 1 > 0x75075075075075) {
    sub_1000267C4();
  }
  uint64_t v20 = (uint64_t)(a1 + 2);
  unint64_t v21 = 0xAF8AF8AF8AF8AF8BLL * ((a1[2] - v10) >> 4);
  if (2 * v21 > v12) {
    unint64_t v12 = 2 * v21;
  }
  if (v21 >= 0x3A83A83A83A83ALL) {
    unint64_t v22 = 0x75075075075075;
  }
  else {
    unint64_t v22 = v12;
  }
  int v30 = a1 + 2;
  if (v22) {
    int v23 = (char *)sub_100350E0C(v20, v22);
  }
  else {
    int v23 = 0;
  }
  uint64_t v26 = v23;
  unint64_t v27 = &v23[560 * v11];
  uint64_t v28 = (uint64_t)v27;
  uint64_t v29 = &v23[560 * v22];
  sub_100350C3C((uint64_t)v27, a2, a3, a4, a5, *a7, a8, a9, *a6);
  uint64_t v28 = (uint64_t)(v27 + 560);
  sub_100350D94(a1, &v26);
  uint64_t v24 = a1[1];
  sub_100351204((uint64_t)&v26);
  return v24;
}

void sub_100350C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100351204((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100350C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, double a9)
{
  sub_10034D0F0(a1, a2);
  sub_10034CDD4(v17 + 72, a3);
  sub_10034D36C(a1 + 136, a4);
  sub_10034CF64(a1 + 304, a5);
  *(double *)(a1 + 416) = a9;
  *(_DWORD *)(a1 + 424) = a6;
  sub_10034CDD4(a1 + 432, a7);
  sub_10034CDD4(a1 + 496, a8);
  return a1;
}

void sub_100350CF4(_Unwind_Exception *a1)
{
  *int64_t v5 = off_100853598;
  *unint64_t v4 = off_100853598;
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_100350D94(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100350E58((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100350E0C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x75075075075076) {
    sub_1000257D8();
  }
  return operator new(560 * a2);
}

uint64_t sub_100350E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 560;
      sub_100350F24(a1, v7 - 560, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 560;
      *((void *)&v16 + 1) -= 560;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100351060((uint64_t)v13);
  return v11;
}

void sub_100350F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_100350F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10034D0F0(a2, a3);
  sub_10034CDD4(a2 + 72, a3 + 72);
  sub_10034D36C(a2 + 136, a3 + 136);
  sub_10034CF64(a2 + 304, a3 + 304);
  uint64_t v5 = *(void *)(a3 + 416);
  *(_DWORD *)(a2 + 424) = *(_DWORD *)(a3 + 424);
  *(void *)(a2 + 416) = v5;
  sub_10034CDD4(a2 + 432, a3 + 432);
  *(void *)&double result = sub_10034CDD4(a2 + 496, a3 + 496).n128_u64[0];
  return result;
}

void sub_100350FC0(_Unwind_Exception *a1)
{
  *uint64_t v5 = off_100853598;
  *unint64_t v4 = off_100853598;
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_100351060(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100351098((uint64_t *)a1);
  }
  return a1;
}

void sub_100351098(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_100351110(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_100351110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 32);
  if (v3 != *(void *)(a3 + 32))
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = (void *)(v3 + v4);
      v5[62] = off_100853598;
      v5[54] = off_100853598;
      v5[38] = off_100853598;
      v5[17] = off_100853598;
      v5[9] = off_100853598;
      *uint64_t v5 = off_100853598;
      *(void *)(a2 + 32) = v3 + v4 + 560;
      v4 += 560;
    }
    while (v3 + v4 != *(void *)(a3 + 32));
  }
}

uint64_t sub_100351204(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10035123C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = v2 + v3;
      *(void *)(v4 - 64) = off_100853598;
      *(void *)(v4 - 128) = off_100853598;
      *(void *)(v4 - 256) = off_100853598;
      *(void *)(v2 + v3 - 424) = off_100853598;
      *(void *)(v2 + v3 - 488) = off_100853598;
      *(void *)(v2 + v3 - 560) = off_100853598;
      v3 -= 560;
    }
    while (v2 + v3 != a2);
    *(void *)(result + 16) = a2;
  }
  return result;
}

void *sub_100351328(void *result)
{
  char *result = off_100853598;
  return result;
}

void sub_100351348(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100351378(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100351384(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_1003513DC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    if (v3 != v2)
    {
      uint64_t v4 = v3 - 144;
      do
      {
        *((void *)v3 - 9) = off_100853598;
        *((void *)v3 - 18) = off_100853598;
        v4 -= 152;
        v3 -= 152;
      }
      while (v3 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_100351454(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003514CC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003514CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_100351560(a1, (void *)(i + a7), (void *)(i + a3)))
    i -= 152;
  return a6;
}

double sub_100351560(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t)(a3 + 10);
  *a2 = *a3;
  sub_1003515D0((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
  *(void *)&double result = sub_10034D0F0((uint64_t)(a2 + 10), v4).n128_u64[0];
  return result;
}

void sub_1003515B0(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

__n128 sub_1003515D0(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x400000001;
  *(void *)(a1 + 24) = 0x400000001;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100861E90;
  if (a1 == a2)
  {
    uint64_t v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    uint64_t v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 1)
  {
    uint64_t v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    uint64_t v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 5)
  {
    uint64_t v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    uint64_t v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 4u)
  {
    uint64_t v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    __n128 *v12 = result;
  }
  else if (v5)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)uint64_t v6 = v9;
      uint64_t v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_100351740(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_100351760(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = v3 - 144;
    do
    {
      *(void *)(v3 - 72) = off_100853598;
      *(void *)(v3 - 144) = off_100853598;
      v4 -= 152;
      v3 -= 152;
    }
    while (v3 != v2);
    *(void *)(a1 + 16) = v2;
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v5);
  }
  return a1;
}

void sub_1003517F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a3)
  {
    if (a1 != a4)
    {
      if (a3 != a4)
      {
        unsigned int v6 = *(_DWORD *)(a1 + 8);
        if (v6 == *(_DWORD *)(a1 + 12))
        {
          if (*(_DWORD *)(a2 + 28) * *(_DWORD *)(a2 + 24) >= v6)
          {
            if (*(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24) >= 4 * v6)
            {
              if (*(_DWORD *)(a4 + 24) >= v6)
              {
                if (*(_DWORD *)(a4 + 28) >= v6)
                {
                  sub_10034226C(a4, a1);
                  uint64_t v7 = *(unsigned int *)(a4 + 8);
                  uint64_t v8 = *(__CLPK_doublereal **)(a4 + 32);
                  __CLPK_integer v9 = *(_DWORD *)(a4 + 20);
                  uint64_t v10 = *(void **)(a2 + 32);
                  __CLPK_integer __n = *(_DWORD *)(a4 + 12);
                  __CLPK_integer __m = v7;
                  __CLPK_integer __lda = v9;
                  if ((int)v7 >= 1)
                  {
                    size_t v11 = 4 * v7;
                    uint64_t v12 = (__CLPK_integer *)operator new[](4 * v7, &std::nothrow);
                    if (v12)
                    {
                      uint64_t v13 = v12;
                      __CLPK_integer __info = 0;
                      dgetrf_(&__m, &__n, v8, &__lda, v12, &__info);
                      memcpy(v10, v13, v11);
                      operator delete[]();
                    }
                    sub_100433578();
                  }
                  sub_100433578();
                }
                sub_10043354C();
              }
              sub_100433520();
            }
            sub_1004334F4();
          }
          sub_1004334C8();
        }
        sub_100433600();
      }
      sub_10043349C();
    }
    sub_100433470();
  }
  sub_100433444();
}

void *sub_100351AC0(void *result)
{
  char *result = off_100853598;
  return result;
}

void *sub_100351AE0(void *result)
{
  char *result = off_100862050;
  return result;
}

void sub_100351B00(void *a1)
{
  *a1 = off_100862050;
  operator delete();
}

uint64_t sub_100351B30(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100351B3C(uint64_t a1)
{
  sub_100351B60(a1, v1);
}

void sub_100351B60(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      if (!a2) {
        sub_100431D14();
      }
      int v6 = v4 + v2 - *(_DWORD *)(a1 + 20);
      if (v6 <= 0) {
        sub_100431D40();
      }
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        uint64_t v8 = (v7 - 1);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = 1;
        do
        {
          size_t v11 = &a2[v10];
          if (!a2[v10])
          {
            int v12 = *(_DWORD *)(v9 + 4 * v10);
            int v13 = v10;
            do
            {
              int v13 = v13 * v6 % (int)v8;
              int v14 = *(_DWORD *)(v9 + 4 * v13);
              *(_DWORD *)(v9 + 4 * v13) = v12;
              *size_t v11 = 1;
              size_t v11 = &a2[v13];
              int v12 = v14;
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v8);
      }
    }
  }
}

void sub_100351C34(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100351C64(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100351C70(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_100351CC0(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100351CF0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100351CFC(uint64_t a1)
{
  sub_10034111C(a1, &v1);
}

float64x2_t sub_100351D20(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 == a2) {
    sub_10043362C();
  }
  sub_1003411F0((_DWORD *)a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  if ((int)v6 > 3)
  {
    uint64_t v10 = *(float64x2_t **)(a1 + 32);
    size_t v11 = *(float64x2_t **)(a2 + 32);
    int v12 = (float64x2_t *)((char *)v10 + 8 * (v6 - 2));
    int v13 = (float64x2_t *)((char *)v11 + 8 * (v6 - 2));
    uint64_t v14 = (v6 - 1) >> 1;
    do
    {
      float64x2_t v15 = *v10++;
      *v11++ = vmulq_n_f64(v15, a3);
      --v14;
    }
    while (v14);
    float64x2_t result = vmulq_n_f64(*v12, a3);
    *int v13 = result;
  }
  else if ((int)v6 >= 1)
  {
    int v7 = *(double **)(a1 + 32);
    uint64_t v8 = *(double **)(a2 + 32);
    do
    {
      double v9 = *v7++;
      result.f64[0] = v9 * a3;
      *v8++ = v9 * a3;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_100351DE0(uint64_t *a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x1AF286BCA1AF286) {
    sub_1000267C4();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0xD79435E50D7943) {
    unint64_t v13 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v21 = a1 + 2;
  if (v13) {
    uint64_t v14 = (char *)sub_10016D27C(v11, v13);
  }
  else {
    uint64_t v14 = 0;
  }
  int v17 = v14;
  uint64_t v18 = (double *)&v14[152 * v6];
  uint64_t v19 = v18;
  uint64_t v20 = &v14[152 * v13];
  sub_100351F18(v18, a3, a4, *a2);
  uint64_t v19 = v18 + 19;
  sub_100351454(a1, &v17);
  uint64_t v15 = a1[1];
  sub_100351760((uint64_t)&v17);
  return v15;
}

void sub_100351F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100351760((uint64_t)va);
  _Unwind_Resume(a1);
}

double *sub_100351F18(double *a1, uint64_t a2, uint64_t a3, double a4)
{
  *a1 = a4;
  uint64_t v6 = (uint64_t)(a1 + 10);
  sub_1003515D0((uint64_t)(a1 + 1), a2);
  sub_10034D0F0(v6, a3);
  return a1;
}

void sub_100351F68(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100351F88(void ***a1)
{
  char v1 = *a1;
  unsigned int v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 56;
      unint64_t v7 = v4 - 56;
      uint64_t v8 = v4 - 56;
      do
      {
        double v9 = *(void (***)(char *))v8;
        v8 -= 56;
        (*v9)(v7);
        v6 -= 56;
        BOOL v10 = v7 == v2;
        unint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100352048(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003520C0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003520C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_10035214C(i + a7, i + a3))
    i -= 56;
  return a6;
}

__n128 sub_10035214C(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000002;
  *(void *)(a1 + 24) = 0x100000002;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100862110;
  if (a1 == a2)
  {
    uint64_t v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    uint64_t v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    uint64_t v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    uint64_t v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    uint64_t v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    uint64_t v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    uint64_t v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    unint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    __n128 *v12 = result;
  }
  else if (v5)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)uint64_t v6 = v9;
      uint64_t v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1003522BC(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1003522DC(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_10035230C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100352318(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_10035233C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unsigned int v4 = *(void (***)(void))(i - 56);
    *(void *)(a1 + 16) = i - 56;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1003523A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_1000267C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100028A48(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[56 * v4];
  uint64_t v16 = &v10[56 * v9];
  sub_10035214C((uint64_t)v14, a2);
  long long v15 = v14 + 56;
  sub_100352048(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10035233C((uint64_t)&v13);
  return v11;
}

void sub_1003524B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10035233C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1003524C8(void *result)
{
  char *result = off_100853598;
  return result;
}

void sub_1003524E8(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100352518(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100352524(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_10035257C(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x200000002;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = off_1008621A0;
  if (a2 > 2)
  {
    uint64_t v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 3)
  {
    uint64_t v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100352624(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100352644(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100352674(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100352680(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_1003526A4(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x200000001;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = off_1008621E8;
  if (a2 > 1)
  {
    uint64_t v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 3)
  {
    uint64_t v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100352750(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_100352770(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1003527A0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003527AC(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

double sub_1003527D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1 == a2) {
    sub_1004336B4();
  }
  if (a1 == a3) {
    sub_1004336E0();
  }
  if (a1 == a4) {
    sub_10043370C();
  }
  if (a1 == a5) {
    sub_100433738();
  }
  if (a1 == a6) {
    sub_100433764();
  }
  if (a1 == a7) {
    sub_100433790();
  }
  if (a1 == a8) {
    sub_1004337BC();
  }
  if (a1 == a9) {
    sub_1004337E8();
  }
  if (a2 == a3) {
    sub_100433814();
  }
  if (a2 == a4) {
    sub_100433840();
  }
  if (a2 == a5) {
    sub_10043386C();
  }
  if (a2 == a6) {
    sub_100433898();
  }
  if (a2 == a7) {
    sub_1004338C4();
  }
  if (a2 == a8) {
    sub_1004338F0();
  }
  if (a2 == a9) {
    sub_10043391C();
  }
  if (a3 == a4) {
    sub_100433948();
  }
  if (a3 == a5) {
    sub_100433974();
  }
  if (a3 == a6) {
    sub_1004339A0();
  }
  if (a3 == a7) {
    sub_1004339CC();
  }
  if (a3 == a8) {
    sub_1004339F8();
  }
  if (a3 == a9) {
    sub_100433A24();
  }
  if (a4 == a5) {
    sub_100433A50();
  }
  if (a4 == a6) {
    sub_100433A7C();
  }
  if (a4 == a7) {
    sub_100433AA8();
  }
  if (a4 == a8) {
    sub_100433AD4();
  }
  if (a4 == a9) {
    sub_100433B00();
  }
  if (a5 == a6) {
    sub_100433B2C();
  }
  if (a5 == a7) {
    sub_100433B58();
  }
  if (a5 == a8) {
    sub_100433B84();
  }
  if (a5 == a9) {
    sub_100433BB0();
  }
  if (a6 == a7) {
    sub_100433BDC();
  }
  if (a6 == a8) {
    sub_100433C08();
  }
  if (a6 == a9) {
    sub_100433C34();
  }
  if (a7 == a8) {
    sub_100433C60();
  }
  if (a7 == a9) {
    sub_100433C8C();
  }
  if (a8 == a9) {
    sub_100433CB8();
  }
  uint64_t v16 = *(unsigned int *)(a1 + 8);
  if (v16 != *(_DWORD *)(a1 + 12)) {
    sub_100433FA4();
  }
  unsigned int v17 = *(_DWORD *)(a7 + 24);
  if (*(_DWORD *)(a7 + 28) * v17 < v16) {
    sub_100433CE4();
  }
  unsigned int v18 = *(_DWORD *)(a8 + 24);
  if (*(_DWORD *)(a8 + 28) * v18 < v16) {
    sub_100433D10();
  }
  unsigned int v44 = *(_DWORD *)(a9 + 28) * *(_DWORD *)(a9 + 24);
  if (v44 < 3 * (int)v16) {
    sub_100433D3C();
  }
  if (*(_DWORD *)(a2 + 24) < v16) {
    sub_100433D68();
  }
  if (*(_DWORD *)(a2 + 28) < v16) {
    sub_100433D94();
  }
  if (*(_DWORD *)(a3 + 24) < v16) {
    sub_100433DC0();
  }
  if (*(_DWORD *)(a3 + 28) < v16) {
    sub_100433DEC();
  }
  if (*(_DWORD *)(a4 + 24) < v16) {
    sub_100433E18();
  }
  if (*(_DWORD *)(a4 + 28) < v16) {
    sub_100433E44();
  }
  if (*(_DWORD *)(a5 + 24) < v16) {
    sub_100433E70();
  }
  if (*(_DWORD *)(a5 + 28) < v16) {
    sub_100433E9C();
  }
  if (*(_DWORD *)(a6 + 24) < v16) {
    sub_100433EC8();
  }
  if (*(_DWORD *)(a6 + 28) < v16) {
    sub_100433EF4();
  }
  if (v17 < v16) {
    sub_100433F20();
  }
  if (v18 < v16) {
    sub_100433F4C();
  }
  sub_10034226C(a2, a1);
  sub_1003411F0((_DWORD *)a3, v16, v16);
  sub_100341240(a3, 0.0);
  sub_1003411F0((_DWORD *)a4, v16, v16);
  sub_100341240(a4, 0.0);
  sub_1003411F0((_DWORD *)a5, v16, v16);
  sub_100341240(a5, 0.0);
  sub_1003411F0((_DWORD *)a6, v16, v16);
  sub_100341240(a6, 0.0);
  uint64_t v19 = *(__CLPK_doublereal **)(a3 + 32);
  __wuint64_t i = *(__CLPK_doublereal **)(a4 + 32);
  __scale = *(__CLPK_doublereal **)(a7 + 32);
  __CLPK_doublereal v45 = 0.0;
  __rconde = *(__CLPK_doublereal **)(a8 + 32);
  __woruint64_t k = *(__CLPK_doublereal **)(a9 + 32);
  uint64_t v24 = *(__CLPK_doublereal **)(a2 + 32);
  __CLPK_integer v25 = *(_DWORD *)(a2 + 8);
  uint64_t v26 = *(__CLPK_doublereal **)(a5 + 32);
  __CLPK_integer v27 = *(_DWORD *)(a5 + 8);
  qmemcpy(__sense, "NVNB", 4);
  __CLPK_integer __lda = v25;
  __CLPK_integer __n = v16;
  __CLPK_integer __ldvr = v27;
  __CLPK_integer __ldvl = 1;
  *(void *)__ihuint64_t i = 0;
  __CLPK_integer v46 = 0;
  unsigned int v47 = v44;
  uint64_t v28 = dgeevx_(&__sense[3], &__sense[2], &__sense[1], __sense, &__n, v24, &__lda, v19, __wi, 0, &__ldvl, v26, &__ldvr, &__ihi[1], __ihi, __scale, &v45, __rconde, &__rconde[(int)v16],
          __work,
          (__CLPK_integer *)&v47,
          0,
          &v46);
  __CLPK_integer v29 = v46;
  if (v46)
  {
    LOWORD(__n) = 4;
    if (v46 < 0) {
      LOBYTE(__lda) = 5;
    }
    else {
      LOBYTE(__lda) = 4;
    }
    uint64_t v28 = cnprint::CNPrinter::Print();
  }
  if (v44 < **(double **)(a9 + 32)
    && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v28) <= 1)
  {
    LOWORD(__n) = 4;
    LOBYTE(__lda) = 1;
    cnprint::CNPrinter::Print();
  }
  if (v29) {
    sub_100433F78();
  }
  sub_1003411F0((_DWORD *)a9, *(_DWORD *)(a9 + 24), *(_DWORD *)(a9 + 28));
  sub_1003411F0((_DWORD *)a8, v16, 2);
  sub_1003411F0((_DWORD *)a7, v16, 1);
  if (v16)
  {
    unsigned int v31 = 0;
    uint64_t v32 = *(void *)(a4 + 32);
    uint64_t v33 = *(void *)(a5 + 32);
    uint64_t v34 = *(void *)(a6 + 32);
    do
    {
      double result = *(double *)(v32 + 8 * v31);
      if (result != 0.0)
      {
        unsigned int v35 = v31 * v16;
        unsigned int v36 = v16 + v31;
        uint64_t v37 = v16;
        do
        {
          *(void *)(v34 + 8 * v35) = *(void *)(v33 + 8 * v36);
          *(double *)(v34 + 8 * v36) = -*(double *)(v33 + 8 * v36);
          double result = *(double *)(v33 + 8 * v35++);
          *(double *)(v33 + 8 * v36++) = result;
          --v37;
        }
        while (v37);
        ++v31;
      }
      ++v31;
    }
    while (v31 < v16);
    if (v16 >= 2)
    {
      uint64_t v38 = *(void *)(a3 + 32);
      uint64_t v39 = *(void *)(a4 + 32);
      int v40 = v16 - 1;
      uint64_t v41 = (double *)(v39 + 8);
      uint64_t v42 = (void *)(v38 + 8);
      int v43 = v16 + 1;
      do
      {
        *(void *)(v38 + 8 * v43) = *v42;
        double result = *v41;
        *(double *)(v39 + 8 * v43) = *v41;
        *v42++ = 0;
        *v41++ = 0.0;
        v43 += v16 + 1;
        --v40;
      }
      while (v40);
    }
  }
  return result;
}

void *sub_100352DAC(void *result)
{
  char *result = off_100853598;
  return result;
}

void sub_100352DCC(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100352DFC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100352E08(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100352E68()
{
  qword_1008AA5D8 = 0;
  qword_1008AA5E0 = 0;
  qword_1008AA5E8 = 0;
  uint64_t v0 = operator new(0x40uLL);
  qword_1008AA5E0 = (uint64_t)(v0 + 4);
  qword_1008AA5E8 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_1004C1ED0;
  v0[1] = unk_1004C1EE0;
  v0[2] = xmmword_1004C1EF0;
  v0[3] = unk_1004C1F00;
  qword_1008AA5D8 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA5D8, (void *)&_mh_execute_header);
  qword_1008AA5F8 = 0;
  unk_1008AA600 = 0;
  qword_1008AA5F0 = 0;
  char v1 = operator new(0x10uLL);
  qword_1008AA5F8 = (uint64_t)(v1 + 1);
  unk_1008AA600 = v1 + 1;
  _OWORD *v1 = xmmword_1004C1F10;
  qword_1008AA5F0 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA5F0, (void *)&_mh_execute_header);
}

void sub_100352F40(uint64_t a1, double a2, double a3)
{
  *(unsigned char *)a1 = 0;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a2;
  if (a3 <= 0.0) {
    sub_100433FD0();
  }
  if (a2 <= 0.0) {
    sub_100433FFC();
  }
  *(double *)(a1 + 24) = 1.0 / a2 / (1.0 / a2 + 1.0 / (a3 * 6.28318531));
  sub_100353050(a1);
  *(unsigned char *)a1 = 1;
  uint64_t v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134218240;
    double v8 = a2;
    __int16 v9 = 2048;
    double v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #LPF configured with fs = %f and fc = %f", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100353050(uint64_t a1)
{
  *(unsigned char *)(a1 + 1) = 0;
  *(void *)(a1 + 32) = 0;
  char v1 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #LPF reset", v2, 2u);
  }
}

uint64_t sub_1003530C0(uint64_t a1, long long *a2, _DWORD *a3)
{
  *(void *)a1 = off_100862278;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4((unsigned char *)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v6;
  }
  long long v7 = *(long long *)((char *)a2 + 24);
  uint64_t v8 = *((void *)a2 + 5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 64) = 0;
  __int16 v9 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    double v10 = *a3 ? "PredictorSecondary_GestureClassifier" : "PredictorPrimary_GestureClassifier";
    sub_100004950(&__p, v10);
    uint64_t v11 = (__p.st_gid & 0x80000000) == 0 ? &__p : *(stat **)&__p.st_dev;
    *(_DWORD *)long long buf = 136315138;
    unsigned int v18 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Configuring GestureClassifier for Predictor %s", buf, 0xCu);
    if (SHIBYTE(__p.st_gid) < 0) {
      operator delete(*(void **)&__p.st_dev);
    }
  }

  if (*a3 == 1) {
    operator new();
  }
  if (!*a3) {
    operator new();
  }
  *(void *)(a1 + 104) = espresso_create_context();
  *(void *)(a1 + 96) = espresso_create_plan();
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v12 = (const char *)a2;
  }
  else {
    unint64_t v12 = *(const char **)a2;
  }
  if (stat(v12, &__p))
  {
    *(unsigned char *)(a1 + 72) = 0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100434090();
    }
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 1;
    uint64_t v13 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Successfully located model weights filepath.", buf, 2u);
    }
    if (espresso_plan_add_network())
    {
      *(unsigned char *)(a1 + 72) = 0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_10043405C();
      }
    }
    else if (espresso_plan_build())
    {
      *(unsigned char *)(a1 + 72) = 0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100434028();
      }
    }
    else
    {
      uint64_t v14 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Espresso Model initialized", buf, 2u);
      }
    }
  }
  return a1;
}

void sub_1003536B0(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *v4;
  *int v4 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_100353784(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  __int16 v9 = (id)qword_1008ABDE0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (*(_DWORD *)(a3 + 32)) {
      double v10 = "PredictorSecondary_GestureClassifier";
    }
    else {
      double v10 = "PredictorPrimary_GestureClassifier";
    }
    sub_100004950(v72, v10);
    sub_100434168((char *)v72, buf, v9);
  }

  sub_100354034(a1, (uint64_t)a2, a3);
  uint64_t v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v68 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  int v11 = *(_DWORD *)(a3 + 32);
  uint64_t v54 = (uint64_t)a2;
  if (v11 == 1)
  {
    uint64_t v73 = 1;
    uint64_t v74 = (*(int (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
    uint64_t v75 = (*(int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
    if (espresso_buffer_pack_tensor_shape()) {
      __assert_rtn("makePrediction", "NRBYSpatialGesturePredictor.mm", 177, "status == ESPRESSO_STATUS_SUCCESS");
    }
    int v30 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
    int v31 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
    sub_10035824C(&__p, v31 * v30);
    uint64_t v32 = a2 + 15056;
    unint64_t v12 = (float *)__p;
    if (!a2[15056]) {
      __assert_rtn("makePrediction", "NRBYSpatialGesturePredictor.mm", 182, "inputObject.deviceMotionBufferSecondary.has_value()");
    }
    uint64_t v33 = 0;
    uint64_t v34 = a2 + 10656;
    while (1)
    {
      int v35 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
      if (v33 >= (int)((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)) * v35)) {
        break;
      }
      if (!*v32) {
        sub_10000AE44();
      }
      float v36 = *(double *)&v34[8 * v33];
      v12[v33++] = v36;
    }
  }
  else
  {
    unint64_t v12 = 0;
    if (!v11)
    {
      uint64_t v73 = 1;
      uint64_t v74 = (*(int (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
      uint64_t v75 = 9;
      uint64_t v76 = (int)((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)) + 2);
      if (espresso_buffer_pack_tensor_shape()) {
        __assert_rtn("makePrediction", "NRBYSpatialGesturePredictor.mm", 147, "status == ESPRESSO_STATUS_SUCCESS");
      }
      int v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
      uint64_t v53 = a3;
      unint64_t v14 = (int)(9
                * v13
                * ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)) + 2));
      sub_10035824C(&__p, v14);
      long long v15 = a2 + 9368;
      unint64_t v12 = (float *)__p;
      if (!a2[9368] || !a2[9544]) {
        __assert_rtn("makePrediction", "NRBYSpatialGesturePredictor.mm", 153, "inputObject.deviceMotionBufferAfterProcessingPrimary.has_value() and inputObject.deltaUwbBufferAfterProcessingPrimary.has_value()");
      }
      unint64_t v52 = v14;
      int v51 = a4;
      int v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = a2 + 4688;
      uint64_t v20 = a2 + 9464;
      while (v17 < (*(int (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56)))
      {
        int v21 = 0;
        uint64_t v56 = v17;
        uint64_t v22 = 2 * v17;
        int v57 = v16;
        do
        {
          for (int i = 0; i < (*(int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)); ++i)
          {
            int v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
            if (!*v15) {
              sub_10000AE44();
            }
            float v25 = *(double *)&v19[8 * i + 8 * v16 * v24];
            v12[v18++] = v25;
          }
          if (!v15[176]) {
            sub_10000AE44();
          }
          uint64_t v26 = 0;
          char v27 = 1;
          do
          {
            char v28 = v27;
            float v29 = *(double *)&v20[8 * (v26 | v22)];
            v12[v18++] = v29;
            uint64_t v26 = 1;
            char v27 = 0;
          }
          while ((v28 & 1) != 0);
          ++v21;
          ++v16;
        }
        while (v21 != 9);
        uint64_t v17 = v56 + 1;
        int v16 = v57 + 9;
      }
      if (v18 != v52) {
        __assert_rtn("makePrediction", "NRBYSpatialGesturePredictor.mm", 169, "m == flattenedVectorsize");
      }
      a4 = v51;
      a3 = v53;
    }
  }
  *(void *)&long long v61 = v12;
  LODWORD(v71) = 65568;
  if (espresso_network_bind_buffer()) {
    __assert_rtn("makePrediction", "NRBYSpatialGesturePredictor.mm", 197, "status == ESPRESSO_STATUS_SUCCESS");
  }
  if (espresso_network_bind_buffer())
  {
    int v50 = 202;
    goto LABEL_66;
  }
  if (espresso_plan_execute_sync())
  {
    int v50 = 206;
LABEL_66:
    __assert_rtn("makePrediction", "NRBYSpatialGesturePredictor.mm", v50, "status == ESPRESSO_STATUS_SUCCESS");
  }
  uint64_t v37 = 0;
  stat __p = 0;
  double v59 = 0;
  int v60 = 0;
  if (!*(_DWORD *)(a3 + 32))
  {
    uint64_t v38 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_1004340C4((uint64_t)&v73, v38);
    }
    uint64_t v37 = v59;
  }
  for (uint64_t j = 0; j != 3; ++j)
  {
    uint64_t v40 = v73;
    if (v37 >= v60)
    {
      uint64_t v42 = (char *)__p;
      uint64_t v43 = (v37 - (unsigned char *)__p) >> 2;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 62) {
        sub_1000267C4();
      }
      uint64_t v45 = v60 - (unsigned char *)__p;
      if ((v60 - (unsigned char *)__p) >> 1 > v44) {
        unint64_t v44 = v45 >> 1;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        unsigned int v47 = (char *)sub_10003B54C((uint64_t)&v60, v46);
        uint64_t v42 = (char *)__p;
        uint64_t v37 = v59;
      }
      else
      {
        unsigned int v47 = 0;
      }
      unint64_t v48 = &v47[4 * v43];
      *(_DWORD *)unint64_t v48 = *(_DWORD *)(v40 + 4 * j);
      uint64_t v41 = v48 + 4;
      while (v37 != v42)
      {
        int v49 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v48 - 1) = v49;
        v48 -= 4;
      }
      stat __p = v48;
      double v59 = v41;
      int v60 = &v47[4 * v46];
      if (v42) {
        operator delete(v42);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v37 = *(_DWORD *)(v73 + 4 * j);
      uint64_t v41 = v37 + 4;
    }
    double v59 = v41;
    uint64_t v37 = v41;
  }
  ++*(_DWORD *)(a3 + 8);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_100354908(a1, v54, (float **)&__p, a3, a4, (uint64_t)a5);
  if (__p)
  {
    double v59 = (char *)__p;
    operator delete(__p);
  }
  if (v12) {
    operator delete(v12);
  }
}

void sub_100353FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

void sub_100354034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __chkstk_darwin(a1, a2, a3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v3;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100434310();
  }
  if (!*(_DWORD *)(v5 + 32))
  {
    __int16 v9 = (unsigned char *)(v7 + 4680);
    if (!*(unsigned char *)(v7 + 4680)) {
      sub_1004341DC();
    }
    double v10 = (unsigned char *)(v7 + 9368);
    if (!*(unsigned char *)(v7 + 9456)) {
      sub_100434208();
    }
    if (!*(unsigned char *)(v7 + 10632)) {
      sub_100434234();
    }
    if (*(unsigned char *)(v5 + 4))
    {
      bzero(__dst, 0x1248uLL);
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v49 = 0u;
      int v11 = 9 * (*(uint64_t (**)(void))(**(void **)(v8 + 56) + 16))(*(void *)(v8 + 56));
      LODWORD(v12) = (*(uint64_t (**)(void))(**(void **)(v8 + 56) + 32))(*(void *)(v8 + 56)) - v11;
      if ((int)v12 < (*(int (**)(void))(**(void **)(v8 + 56) + 32))(*(void *)(v8 + 56)))
      {
        uint64_t v12 = (int)v12;
        do
        {
          (*(void (**)(double *__return_ptr))(**(void **)(v8 + 64) + 24))(v47);
          double v13 = v47[2
                  * ((int)v12 % (*(int (**)(void))(**(void **)(v8 + 56) + 16))(*(void *)(v8 + 56)))];
          (*(void (**)(void *__return_ptr))(**(void **)(v8 + 64) + 24))(v46);
          int v14 = (*(uint64_t (**)(void))(**(void **)(v8 + 56) + 16))(*(void *)(v8 + 56));
          if (!*v9) {
            goto LABEL_55;
          }
          __dst[v12] = (*(double *)(v7 + 8 * v12) - v13) / *(double *)&v46[2 * ((int)v12 % v14) + 1];
        }
        while (++v12 < (*(int (**)(void))(**(void **)(v8 + 56) + 32))(*(void *)(v8 + 56)));
      }
      LODWORD(v15) = (*(uint64_t (**)(void))(**(void **)(v8 + 56) + 40))(*(void *)(v8 + 56)) - 2;
      if ((int)v15 < (*(int (**)(void))(**(void **)(v8 + 56) + 40))(*(void *)(v8 + 56)))
      {
        uint64_t v15 = (int)v15;
        do
        {
          v47[0] = (*(double (**)(void))(**(void **)(v8 + 64) + 32))(*(void *)(v8 + 64));
          uint64_t v48 = v16;
          int v17 = v15 & 1;
          if ((int)v15 < 0) {
            int v17 = -v17;
          }
          double v18 = v47[2 * v17];
          (*(void (**)(void))(**(void **)(v8 + 64) + 32))(*(void *)(v8 + 64));
          if (!*(unsigned char *)(v7 + 9456)) {
            goto LABEL_55;
          }
          double v19 = *(double *)(v7 + 9376 + 8 * v15) - v18;
          *((double *)&v49 + v15++) = v19
                                    / (*(double (**)(void))(**(void **)(v8 + 64) + 16))(*(void *)(v8 + 64));
        }
        while (v15 < (*(int (**)(void))(**(void **)(v8 + 56) + 40))(*(void *)(v8 + 56)));
      }
      *(unsigned char *)(v5 + 4) = 0;
      goto LABEL_41;
    }
    if (!*v10) {
      sub_100434260();
    }
    if (!*(unsigned char *)(v7 + 9544)) {
      sub_10043428C();
    }
    memcpy(__dst, (const void *)(v7 + 4688), 0x1248uLL);
    long long v20 = *(_OWORD *)(v7 + 9512);
    long long v51 = *(_OWORD *)(v7 + 9496);
    long long v52 = v20;
    long long v53 = *(_OWORD *)(v7 + 9528);
    long long v21 = *(_OWORD *)(v7 + 9480);
    long long v49 = *(_OWORD *)(v7 + 9464);
    long long v50 = v21;
    int v22 = 9 * (*(uint64_t (**)(void))(**(void **)(v8 + 56) + 16))(*(void *)(v8 + 56));
    if (v22 >= (*(int (**)(void))(**(void **)(v8 + 56) + 32))(*(void *)(v8 + 56)))
    {
LABEL_25:
      LODWORD(v25) = (*(uint64_t (**)(void))(**(void **)(v8 + 56) + 32))(*(void *)(v8 + 56)) - v22;
      if ((int)v25 >= (*(int (**)(void))(**(void **)(v8 + 56) + 32))(*(void *)(v8 + 56)))
      {
LABEL_29:
        if (!*(unsigned char *)(v7 + 10648)) {
          sub_1004342B8();
        }
        double v28 = *(double *)(v7 + 10640);
        double v29 = *(double *)(v5 + 24);
        if ((*(int (**)(void))(**(void **)(v8 + 56) + 40))(*(void *)(v8 + 56)) < 3)
        {
LABEL_34:
          int v33 = (*(uint64_t (**)(void))(**(void **)(v8 + 56) + 40))(*(void *)(v8 + 56)) - 2;
          if (v33 >= (*(int (**)(void))(**(void **)(v8 + 56) + 40))(*(void *)(v8 + 56)))
          {
LABEL_41:
            int v42 = *v10;
            memcpy((void *)(v7 + 4688), __dst, 0x1248uLL);
            if (!v42) {
              *double v10 = 1;
            }
            int v43 = *(unsigned __int8 *)(v7 + 9544);
            long long v44 = v52;
            *(_OWORD *)(v7 + 9496) = v51;
            *(_OWORD *)(v7 + 9512) = v44;
            *(_OWORD *)(v7 + 9528) = v53;
            long long v45 = v50;
            *(_OWORD *)(v7 + 9464) = v49;
            *(_OWORD *)(v7 + 9480) = v45;
            if (!v43) {
              *(unsigned char *)(v7 + 9544) = 1;
            }
            if (!*(unsigned char *)(v7 + 10648)) {
              sub_1004342E4();
            }
            *(void *)(v5 + 24) = *(void *)(v7 + 10640);
            return;
          }
          uint64_t v34 = v33;
          double v35 = v28 - v29;
          float v36 = (double *)(v7 + 8 * v33 + 9376);
          while (1)
          {
            v47[0] = (*(double (**)(void))(**(void **)(v8 + 64) + 40))(*(void *)(v8 + 64));
            uint64_t v48 = v37;
            int v38 = (int)v34 >= 0 ? v34 & 1 : -(v34 & 1);
            double v39 = v47[2 * v38];
            (*(void (**)(void))(**(void **)(v8 + 64) + 40))(*(void *)(v8 + 64));
            v46[1] = v40;
            v46[3] = v41;
            if (!*(unsigned char *)(v7 + 9456)) {
              break;
            }
            *((double *)&v49 + v34++) = ((*v36 - *(v36 - 2)) / v35 - v39) / *(double *)&v46[2 * v38 + 1];
            ++v36;
            if (v34 >= (*(int (**)(void))(**(void **)(v8 + 56) + 40))(*(void *)(v8 + 56))) {
              goto LABEL_41;
            }
          }
        }
        else
        {
          uint64_t v30 = 0;
          while (*(unsigned char *)(v7 + 9544))
          {
            *((void *)&v49 + v30) = *(void *)(v7 + 9480 + 8 * v30);
            int v31 = (*(uint64_t (**)(void))(**(void **)(v8 + 56) + 40))(*(void *)(v8 + 56));
            uint64_t v32 = v30 + 3;
            ++v30;
            if (v32 >= v31) {
              goto LABEL_34;
            }
          }
        }
      }
      else
      {
        uint64_t v25 = (int)v25;
        while (1)
        {
          (*(void (**)(double *__return_ptr))(**(void **)(v8 + 64) + 24))(v47);
          double v26 = v47[2
                  * ((int)v25 % (*(int (**)(void))(**(void **)(v8 + 56) + 16))(*(void *)(v8 + 56)))];
          (*(void (**)(void *__return_ptr))(**(void **)(v8 + 64) + 24))(v46);
          int v27 = (*(uint64_t (**)(void))(**(void **)(v8 + 56) + 16))(*(void *)(v8 + 56));
          if (!*v9) {
            break;
          }
          __dst[v25] = (*(double *)(v7 + 8 * v25) - v26) / *(double *)&v46[2 * ((int)v25 % v27) + 1];
          if (++v25 >= (*(int (**)(void))(**(void **)(v8 + 56) + 32))(*(void *)(v8 + 56))) {
            goto LABEL_29;
          }
        }
      }
    }
    else
    {
      uint64_t v23 = v22;
      int v24 = __dst;
      while (*v10)
      {
        *v24++ = *(double *)(v7 + 4688 + 8 * v23);
        if (++v23 >= (*(int (**)(void))(**(void **)(v8 + 56) + 32))(*(void *)(v8 + 56))) {
          goto LABEL_25;
        }
      }
    }
LABEL_55:
    sub_10000AE44();
  }
}

void sub_100354908(uint64_t a1@<X0>, uint64_t a2@<X1>, float **a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v7 = *(_DWORD *)(a4 + 32);
  if (v7 == 1)
  {
    float v16 = (*a3)[1];
    *(_DWORD *)a6 = **a3 <= v16;
    *(double *)(a6 + 8) = v16;
    *(unsigned char *)(a6 + 16) = 0;
    return;
  }
  if (!v7)
  {
    uint64_t v12 = *a3;
    float v13 = **a3;
    float v14 = (*a3)[1];
    if (v13 > v14 && v13 > v12[2])
    {
      switch(a5)
      {
        case 0:
        case 2:
        case 4:
          sub_1004343D8();
        case 1:
          int v15 = 0;
          *(void *)(a4 + 16) = 0;
          break;
        case 3:
          int v15 = 0;
          double v61 = *(double *)(a4 + 16) + -0.0799999982;
          if (v61 < 0.0) {
            double v61 = 0.0;
          }
          *(double *)(a4 + 16) = v61;
          break;
        default:
          int v15 = 0;
          break;
      }
      goto LABEL_23;
    }
    float v17 = v12[2];
    if (v14 <= v13 || ((float)(v14 - v13) > 0.03 ? (BOOL v18 = v14 <= v17) : (BOOL v18 = 1), v18))
    {
      int v15 = 0;
      BOOL v19 = v17 <= v13 || v17 <= v14;
      if (v19 || (float)(v17 - v13) <= 0.03)
      {
LABEL_23:
        int v24 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = *(void *)(a4 + 16);
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #probabilities hysteresisProb = %f", buf, 0xCu);
        }
        if (!*(unsigned char *)(a2 + 9456)) {
          sub_100434344();
        }
        double v74 = 0.0;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1008AA610, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1008AA610))
        {
          dword_1008AA608 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
          __cxa_guard_release(&qword_1008AA610);
        }
        sub_1003582C4(&v72, dword_1008AA608);
        sub_1003582C4(&v70, dword_1008AA608);
        int v26 = dword_1008AA608;
        if (dword_1008AA608 < 1) {
          goto LABEL_80;
        }
        if (!*(unsigned char *)(a2 + 9456)) {
          sub_10000AE44();
        }
        uint64_t v27 = 0;
        double v28 = v72;
        double v29 = v70;
        uint64_t v30 = 16 * dword_1008AA608;
        do
        {
          *v28++ = *(void *)(a2 + v27 + 9376);
          *v29++ = *(void *)(a2 + v27 + 9384);
          v27 += 16;
        }
        while (v30 != v27);
        if (v26 < 1) {
LABEL_80:
        }
          __assert_rtn("_refineModelPrediction", "NRBYSpatialGesturePredictor.mm", 392, "_dimInputsModel > 0");
        sub_1003582C4(&v68, (v26 - 1));
        sub_1003582C4(__p, dword_1008AA608 - 1);
        int v31 = (double *)v68;
        if (dword_1008AA608 >= 2)
        {
          uint64_t v32 = (double *)__p[0];
          uint64_t v33 = dword_1008AA608 - 1;
          uint64_t v34 = (double *)((char *)v70 + 8);
          double v35 = (double *)((char *)v72 + 8);
          float v36 = (double *)v68;
          do
          {
            *v36++ = *(v35 - 1) - *v35;
            *v32++ = *v34 - *(v34 - 1);
            ++v34;
            ++v35;
            --v33;
          }
          while (v33);
        }
        if (v69 == v31)
        {
          int v38 = 0;
          int v37 = 0;
        }
        else
        {
          int v37 = 0;
          int v38 = 0;
          unint64_t v39 = v69 - v31;
          uint64_t v40 = (double *)__p[0];
          if (v39 <= 1) {
            unint64_t v39 = 1;
          }
          do
          {
            double v41 = *v31++;
            if (v41 > 0.0) {
              ++v37;
            }
            double v42 = *v40++;
            if (v42 > 0.0) {
              ++v38;
            }
            --v39;
          }
          while (v39);
        }
        switch(a5)
        {
          case 0:
          case 2:
          case 4:
            __assert_rtn("_refineModelPrediction", "NRBYSpatialGesturePredictor.mm", 444, "0");
          case 1:
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
              sub_1004343A4();
            }
            double v43 = *(double *)(a4 + 16);
            if ((v15 & 1) != 0 || v43 > *(double *)(a1 + 32) * 0.5)
            {
              double v44 = (*(double (**)(void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56));
              double v45 = v44 * (double)v37
                  + v43 * 0.55
                  + (*(double (**)(void))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56))
                  * (double)v38;
              double v74 = v45;
              unint64_t v46 = qword_1008ABDE0;
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 134217984;
                *(double *)&uint8_t buf[4] = v45;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #probabilities with range and rssi derivatives SinglePredictor handoffConfidence = %f", buf, 0xCu);
              }
              sub_1003551DC(a1, a2, v15, (unint64_t *)&v74, a4, 1, (uint64_t)buf, v47, v48);
LABEL_58:
              *(_OWORD *)a6 = *(_OWORD *)buf;
              *(void *)(a6 + 16) = *(void *)&buf[16];
LABEL_59:
              if (v15)
              {
                unint64_t v55 = qword_1008ABDE0;
                if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_70;
                }
                uint64_t v56 = *(v73 - 1);
                uint64_t v57 = *(v71 - 1);
                uint64_t v58 = *(void *)(a4 + 16);
                uint64_t v59 = *(void *)(a6 + 8);
                *(_DWORD *)long long buf = 134218752;
                *(void *)&uint8_t buf[4] = v56;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v57;
                *(_WORD *)&buf[22] = 2048;
                uint64_t v76 = v58;
                __int16 v77 = 2048;
                uint64_t v78 = v59;
                v60 = "#spatialGesturesPredictor #evaluation distance = %f, rssint i = %f, prediction = Handoff, hysteresis p"
                      "rob = %f, handoff confidence = %f";
                goto LABEL_69;
              }
            }
            else
            {
              unint64_t v62 = *(void *)&v74;
              *(_DWORD *)a6 = 0;
              *(void *)(a6 + 8) = v62;
              *(unsigned char *)(a6 + 16) = 0;
            }
            unint64_t v55 = qword_1008ABDE0;
            if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_70;
            }
            uint64_t v63 = *(v73 - 1);
            uint64_t v64 = *(v71 - 1);
            uint64_t v65 = *(void *)(a4 + 16);
            uint64_t v66 = *(void *)(a6 + 8);
            *(_DWORD *)long long buf = 134218752;
            *(void *)&uint8_t buf[4] = v63;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v64;
            *(_WORD *)&buf[22] = 2048;
            uint64_t v76 = v65;
            __int16 v77 = 2048;
            uint64_t v78 = v66;
            v60 = "#spatialGesturesPredictor #evaluation distance = %f, rssint i = %f, prediction = Other, hysteresis prob = "
                  "%f, handoff confidence = %f";
LABEL_69:
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, v60, buf, 0x2Au);
LABEL_70:
            *(_DWORD *)a4 = *(_DWORD *)a6;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (v68)
            {
              long long v69 = (double *)v68;
              operator delete(v68);
            }
            if (v70)
            {
              uint64_t v71 = v70;
              operator delete(v70);
            }
            if (v72)
            {
              uint64_t v73 = v72;
              operator delete(v72);
            }
            break;
          case 3:
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
              sub_100434370();
            }
            double v49 = *(double *)(a4 + 16);
            double v50 = (*(double (**)(void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56));
            double v51 = v50 * (double)v37
                + v49 * 0.55
                + (*(double (**)(void))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56)) * (double)v38;
            double v74 = v51;
            long long v52 = qword_1008ABDE0;
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 134217984;
              *(double *)&uint8_t buf[4] = v51;
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #probabilities with range and rssi derivatives DualAnchorAntennaPredictor handoffConfidence = %f", buf, 0xCu);
            }
            sub_1003551DC(a1, a2, v15, (unint64_t *)&v74, a4, 3, (uint64_t)buf, v53, v54);
            goto LABEL_58;
          default:
            goto LABEL_59;
        }
        return;
      }
      double v20 = v17;
      double v21 = *(double *)(a4 + 16);
      double v22 = 0.0799999982;
    }
    else
    {
      double v20 = v14;
      double v21 = *(double *)(a4 + 16);
      double v22 = 0.100000001;
    }
    double v23 = v21 + v20 * v22;
    if (v23 > 1.0) {
      double v23 = 1.0;
    }
    *(double *)(a4 + 16) = v23;
    int v15 = 1;
    goto LABEL_23;
  }
}

void sub_1003550B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
}

double sub_100355168(double *a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 2:
      sub_100434404();
    case 1:
      unsigned int v2 = a1 + 4;
      goto LABEL_5;
    case 3:
      unsigned int v2 = a1 + 5;
      goto LABEL_5;
    case 4:
      unsigned int v2 = a1 + 6;
LABEL_5:
      double result = *v2;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1003551DC(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>, __n128 a8@<Q0>, __n128 a9@<Q1>)
{
  int v11 = a3;
  switch(a6)
  {
    case 0:
    case 2:
    case 4:
      sub_100434430();
    case 1:
      int v15 = (unint64_t *)(a1 + 32);
      goto LABEL_4;
    case 3:
      int v15 = (unint64_t *)(a1 + 40);
LABEL_4:
      a9.n128_u64[0] = *v15;
      break;
    default:
      a9.n128_u64[0] = 0;
      break;
  }
  if (a3 == 1 || (a8.n128_u64[0] = *a4, *(double *)a4 > a9.n128_f64[0]))
  {
    int v16 = (*(uint64_t (**)(void, __n128, __n128))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56), a8, a9);
    sub_1003582C4(&v39, 9 * v16);
    int v17 = *(_DWORD *)(a5 + 32);
    if (v17)
    {
      if (v17 != 1) {
        goto LABEL_10;
      }
      float v36 = "0";
      int v37 = 500;
    }
    else
    {
      if (*(unsigned char *)(a2 + 4680))
      {
        for (uint64_t i = 0;
              i < (int)(9 * (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56)));
              ++i)
        {
          if (!*(unsigned char *)(a2 + 4680)) {
            sub_10000AE44();
          }
          int v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
          v39[i] = *(double *)(a2 + 8 * v24 * (int)i);
        }
LABEL_10:
        BOOL v18 = v39;
        BOOL v19 = v39 + 1;
        double v20 = *v39;
        if (v39 == v40 || v19 == v40)
        {
          double v22 = v39;
        }
        else
        {
          double v25 = *v39;
          int v26 = v39 + 1;
          uint64_t v27 = v39;
          double v28 = v39 + 1;
          do
          {
            double v29 = *v28++;
            double v30 = v29;
            if (v29 < v25)
            {
              double v25 = v30;
              uint64_t v27 = v26;
            }
            int v26 = v28;
          }
          while (v28 != v40);
          double v31 = *v27;
          double v22 = v39;
          uint64_t v32 = v39 + 1;
          do
          {
            double v33 = *v32++;
            double v34 = v33;
            if (v20 < v33)
            {
              double v20 = v34;
              double v22 = v19;
            }
            BOOL v19 = v32;
          }
          while (v32 != v40);
          double v20 = v31;
        }
        if (vabdd_f64(v20, *v22) <= 0.85)
        {
          int v11 = 1;
          if (!v39)
          {
LABEL_36:
            a8.n128_u64[0] = *a4;
            goto LABEL_37;
          }
        }
        else
        {
          *a4 = 0;
          double v35 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v38 = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #evaluation Speculating sideways motion", v38, 2u);
          }
          int v11 = 0;
          BOOL v18 = v39;
          if (!v39) {
            goto LABEL_36;
          }
        }
        uint64_t v40 = v18;
        operator delete(v18);
        goto LABEL_36;
      }
      float v36 = "inputObject.deviceMotionBufferPrimary.has_value()";
      int v37 = 492;
    }
    __assert_rtn("_evaluateHeuristics", "NRBYSpatialGesturePredictor.mm", v37, v36);
  }
LABEL_37:
  *(_DWORD *)a7 = v11;
  *(void *)(a7 + 8) = a8.n128_u64[0];
  *(unsigned char *)(a7 + 16) = 0;
}

void sub_1003554A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003554D8(uint64_t a1)
{
  *(void *)a1 = off_100862278;
  if (espresso_plan_destroy())
  {
    int v6 = 534;
    goto LABEL_14;
  }
  if (espresso_context_destroy())
  {
    int v6 = 537;
LABEL_14:
    __assert_rtn("~GestureClassifier", "NRBYSpatialGesturePredictor.mm", v6, "status == ESPRESSO_STATUS_SUCCESS");
  }
  unsigned int v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Deleted model network parameters", v7, 2u);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100355620(uint64_t a1)
{
  sub_1003554D8(a1);

  operator delete();
}

uint64_t sub_100355658(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1008622A0;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = a1 + 64;
  do
  {
    uint64_t v7 = a1 + v5;
    *(_WORD *)(v7 + 64) = 0;
    *(void *)(v7 + 88) = 0;
    *(void *)(v7 + 96) = 0;
    v5 += 40;
  }
  while (v5 != 360);
  for (uint64_t i = 0; i != 80; i += 40)
  {
    uint64_t v9 = a1 + i;
    *(_WORD *)(v9 + 424) = 0;
    *(void *)(v9 + 448) = 0;
    *(void *)(v9 + 456) = 0;
  }
  *(_OWORD *)(a1 + 9880) = 0u;
  *(_OWORD *)(a1 + 9896) = 0u;
  *(_OWORD *)(a1 + 9864) = 0u;
  *(_OWORD *)(a1 + 11160) = 0u;
  *(_OWORD *)(a1 + 11176) = 0u;
  *(_OWORD *)(a1 + 11192) = 0u;
  *(unsigned char *)(a1 + 11208) = 0;
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v11;
    if (v12) {
      sub_10001A970(v12);
    }
  }
  else
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = v10;
  }
  bzero((void *)(a1 + 10080), 0x438uLL);
  *(_DWORD *)(a1 + 56) = 0;
  bzero((void *)(a1 + 504), 0x2490uLL);
  uint64_t v13 = 0;
  *(_OWORD *)(a1 + 10040) = 0u;
  *(_OWORD *)(a1 + 10056) = 0u;
  *(_OWORD *)(a1 + 10008) = 0u;
  *(_OWORD *)(a1 + 10024) = 0u;
  *(_OWORD *)(a1 + 9976) = 0u;
  *(_OWORD *)(a1 + 9992) = 0u;
  *(_OWORD *)(a1 + 9944) = 0u;
  *(_OWORD *)(a1 + 9960) = 0u;
  *(_OWORD *)(a1 + 9912) = 0u;
  *(_OWORD *)(a1 + 9928) = 0u;
  *(_DWORD *)(a1 + 11212) = a3;
  do
  {
    sub_100352F40(v6, 100.0, 50.0);
    float v14 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #LPF configured LPF for signal %d in device motion data", buf, 8u);
    }
    ++v13;
    v6 += 40;
  }
  while (v13 != 9);
  uint64_t v15 = 0;
  char v16 = 1;
  do
  {
    char v17 = v16;
    sub_100352F40(a1 + 424 + 40 * v15, 50.0, 20.0);
    BOOL v18 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #LPF configured LPF for signal %d in UWB data", buf, 8u);
    }
    char v16 = 0;
    uint64_t v15 = 1;
  }
  while ((v17 & 1) != 0);
  BOOL v19 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor GesturePredictor is created", buf, 2u);
  }
  return a1;
}

void sub_100355944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, std::__shared_weak_count **a11, void **a12)
{
  if (*(char *)(v12 + 11207) < 0) {
    operator delete(*(void **)(v12 + 11184));
  }
  float v14 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 11168) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v12 + 9888);
  if (v15)
  {
    *(void *)(v12 + 9896) = v15;
    operator delete(v15);
  }
  char v16 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 9872) = v16;
    operator delete(v16);
  }
  if (*a11) {
    sub_10001A970(*a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003559B0(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a1[1] + 72))
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    v70[0] = *(_OWORD *)(a2 + 8);
    v70[1] = v4;
    long long v5 = *(_OWORD *)(a2 + 88);
    v70[2] = *(_OWORD *)(a2 + 40);
    v70[3] = v5;
    uint64_t v71 = *(void *)(a2 + 104);
    long long v72 = *(_OWORD *)(a2 + 64);
    *(void *)&long long v5 = *(void *)(a2 + 56);
    uint64_t v73 = *(void *)(a2 + 80);
    uint64_t v74 = v5;
    uint64_t v69 = 0;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    sub_100355E28((uint64_t)a1, (uint64_t)v70, (uint64_t)&v63);
    uint64_t v6 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
    if (v6) {
      sub_1004344C4();
    }
    unint64_t v7 = a1[1234];
    unint64_t v8 = a1[1235];
    if (v7 >= v8)
    {
      uint64_t v13 = a1[1233];
      uint64_t v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7 - v13) >> 3);
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) > 0x276276276276276) {
        sub_1000267C4();
      }
      unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v8 - v13) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x13B13B13B13B13BLL) {
        unint64_t v17 = 0x276276276276276;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        BOOL v18 = (char *)sub_10035833C((uint64_t)(a1 + 1235), v17);
      }
      else {
        BOOL v18 = 0;
      }
      BOOL v19 = &v18[104 * v14];
      double v20 = &v18[104 * v17];
      long long v21 = v64;
      *(_OWORD *)BOOL v19 = v63;
      *((_OWORD *)v19 + 1) = v21;
      *((void *)v19 + 12) = v69;
      long long v22 = v68;
      *((_OWORD *)v19 + 4) = v67;
      *((_OWORD *)v19 + 5) = v22;
      long long v23 = v66;
      *((_OWORD *)v19 + 2) = v65;
      *((_OWORD *)v19 + 3) = v23;
      uint64_t v12 = v19 + 104;
      uint64_t v6 = a1[1234];
      uint64_t v24 = a1[1233];
      if (v6 != v24)
      {
        do
        {
          long long v25 = *(_OWORD *)(v6 - 104);
          long long v26 = *(_OWORD *)(v6 - 88);
          *(_OWORD *)(v19 - 72) = *(_OWORD *)(v6 - 72);
          *(_OWORD *)(v19 - 88) = v26;
          *(_OWORD *)(v19 - 104) = v25;
          long long v27 = *(_OWORD *)(v6 - 56);
          long long v28 = *(_OWORD *)(v6 - 40);
          long long v29 = *(_OWORD *)(v6 - 24);
          *((void *)v19 - 1) = *(void *)(v6 - 8);
          *(_OWORD *)(v19 - 24) = v29;
          *(_OWORD *)(v19 - 40) = v28;
          *(_OWORD *)(v19 - 56) = v27;
          v19 -= 104;
          v6 -= 104;
        }
        while (v6 != v24);
        uint64_t v6 = a1[1233];
      }
      a1[1233] = v19;
      a1[1234] = v12;
      a1[1235] = v20;
      if (v6) {
        operator delete((void *)v6);
      }
    }
    else
    {
      long long v9 = v68;
      *(_OWORD *)(v7 + 64) = v67;
      *(_OWORD *)(v7 + 80) = v9;
      *(void *)(v7 + 96) = v69;
      long long v10 = v64;
      *(_OWORD *)unint64_t v7 = v63;
      *(_OWORD *)(v7 + 16) = v10;
      long long v11 = v66;
      uint64_t v12 = (char *)(v7 + 104);
      *(_OWORD *)(v7 + 32) = v65;
      *(_OWORD *)(v7 + 48) = v11;
    }
    a1[1234] = v12;
    double v30 = (void *)a1[1237];
    unint64_t v31 = a1[1238];
    if ((unint64_t)v30 >= v31)
    {
      uint64_t v6 = a1[1236];
      uint64_t v33 = ((uint64_t)v30 - v6) >> 3;
      if ((unint64_t)(v33 + 1) >> 61) {
        sub_1000267C4();
      }
      unint64_t v34 = v31 - v6;
      unint64_t v35 = (uint64_t)(v31 - v6) >> 2;
      if (v35 <= v33 + 1) {
        unint64_t v35 = v33 + 1;
      }
      if (v34 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v36)
      {
        int v37 = (char *)sub_100056BF0((uint64_t)(a1 + 1238), v36);
        double v30 = (void *)a1[1237];
        uint64_t v6 = a1[1236];
      }
      else
      {
        int v37 = 0;
      }
      int v38 = &v37[8 * v33];
      unint64_t v39 = &v37[8 * v36];
      *(void *)int v38 = *(void *)a2;
      uint64_t v32 = v38 + 8;
      while (v30 != (void *)v6)
      {
        uint64_t v40 = *--v30;
        *((void *)v38 - 1) = v40;
        v38 -= 8;
      }
      a1[1236] = v38;
      a1[1237] = v32;
      a1[1238] = v39;
      if (v6) {
        operator delete((void *)v6);
      }
    }
    else
    {
      *double v30 = *(void *)a2;
      uint64_t v32 = v30 + 1;
    }
    a1[1237] = v32;
    long long v41 = *(_OWORD *)(a2 + 72);
    v62[0] = *(_OWORD *)(a2 + 56);
    v62[1] = v41;
    sub_100355F1C(v6, (double *)v62);
    uint64_t v45 = v42;
    uint64_t v46 = v43;
    uint64_t v47 = v44;
    __n128 v48 = (void *)a1[1396];
    unint64_t v49 = a1[1397];
    if ((unint64_t)v48 >= v49)
    {
      uint64_t v51 = a1[1395];
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - v51) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000267C4();
      }
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v51) >> 3);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0x555555555555555) {
        unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55) {
        uint64_t v56 = (char *)sub_1000267DC((uint64_t)(a1 + 1397), v55);
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v57 = &v56[24 * v52];
      uint64_t v58 = &v56[24 * v55];
      *(void *)uint64_t v57 = v45;
      *((void *)v57 + 1) = v46;
      *((void *)v57 + 2) = v47;
      double v50 = v57 + 24;
      uint64_t v59 = (char *)a1[1396];
      int v60 = (char *)a1[1395];
      if (v59 != v60)
      {
        do
        {
          long long v61 = *(_OWORD *)(v59 - 24);
          *((void *)v57 - 1) = *((void *)v59 - 1);
          *(_OWORD *)(v57 - 24) = v61;
          v57 -= 24;
          v59 -= 24;
        }
        while (v59 != v60);
        uint64_t v59 = (char *)a1[1395];
      }
      a1[1395] = v57;
      a1[1396] = v50;
      a1[1397] = v58;
      if (v59) {
        operator delete(v59);
      }
    }
    else
    {
      *__n128 v48 = v42;
      v48[1] = v43;
      double v50 = v48 + 3;
      v48[2] = v44;
    }
    a1[1396] = v50;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100434490();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10043445C();
  }
}

__n128 sub_100355E28@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v6 = (double *)(a1 + 96);
  do
  {
    if (*((unsigned char *)v6 - 32))
    {
      double v7 = *(double *)(a2 + v5);
      if (*((unsigned char *)v6 - 31)) {
        double v7 = (1.0 - *(v6 - 1)) * *v6 + *(v6 - 1) * v7;
      }
      else {
        *((unsigned char *)v6 - 31) = 1;
      }
      double *v6 = v7;
    }
    else
    {
      unint64_t v8 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_1004344F8(&v10, v11, v8);
      }
      double v7 = *(double *)(a2 + v5);
    }
    v6 += 5;
    *(double *)(a3 + v5) = v7;
    v5 += 8;
  }
  while (v5 != 72);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a2 + 72);
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a3 + 88) = result;
  return result;
}

void sub_100355F1C(uint64_t a1, double *a2)
{
  double v2 = *a2;
  double v3 = a2[1];
  double v4 = a2[2];
  double v5 = a2[3];
  double v6 = *a2 * v4 - v5 * v3 + *a2 * v4 - v5 * v3;
  if (fabs(v6) < 1.0) {
    asin(v6);
  }
  atan2(v5 * v4 + v2 * v3 + v5 * v4 + v2 * v3, (v4 * v4 + v3 * v3) * -2.0 + 1.0);
  atan2(v3 * v4 + v2 * v5 + v3 * v4 + v2 * v5, (v5 * v5 + v4 * v4) * -2.0 + 1.0);
}

void sub_100355FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __chkstk_darwin(a1, a2, a3);
  if (*(unsigned char *)(*(void *)(v5 + 8) + 72))
  {
    uint64_t v7 = v6;
    uint64_t v8 = v5;
    long long v9 = *(_OWORD *)(v5 + 9944);
    long long v187 = *(_OWORD *)(v5 + 9928);
    long long v188 = v9;
    long long v10 = *(_OWORD *)(v5 + 9976);
    long long v189 = *(_OWORD *)(v5 + 9960);
    long long v190 = v10;
    if (!*(unsigned char *)(v6 + 72)) {
      sub_100434538();
    }
    switch(*(_DWORD *)(v5 + 11212))
    {
      case 0:
      case 2:
      case 4:
        sub_100434598();
      case 1:
        double v4 = *(float *)(v6 + 16);
        uint64_t v3 = *(void *)(v6 + 64);
        break;
      case 3:
        uint64_t v11 = *(void *)(v6 + 64);
        *(double *)__dst = *(float *)(v6 + 16);
        *(void *)&__dst[8] = v11;
        double v4 = sub_100356E38(v5, (uint64_t)__dst);
        uint64_t v3 = v12;
        uint64_t v13 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #LPF UWB signals filtered for DualAnchorAntennaPredictor", buf, 2u);
        }
        break;
      default:
        break;
    }
    long long v14 = v188;
    *(_OWORD *)(v8 + 9912) = v187;
    *(_OWORD *)(v8 + 9928) = v14;
    long long v15 = v190;
    *(_OWORD *)(v8 + 9944) = v189;
    *(_OWORD *)(v8 + 9960) = v15;
    *(double *)(v8 + 9976) = v4;
    *(void *)(v8 + 9984) = v3;
    unint64_t v16 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__dst = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor GesturePredictor consumed UWB input", __dst, 2u);
    }
    bzero(__src, 0x3A8uLL);
    uint64_t v183 = 0;
    long long v181 = 0u;
    long long v182 = 0u;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v174 = 0u;
    long long v172 = 0u;
    long long v173 = 0u;
    long long v170 = 0u;
    long long v171 = 0u;
    uint64_t v17 = *(void *)(v8 + 9888);
    uint64_t v18 = *(void *)(v8 + 9896) - v17;
    unint64_t v19 = v18 >> 3;
    if (v18)
    {
      uint64_t v20 = 0;
      if (v19 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v19;
      }
      while (*(double *)(v17 + 8 * v20) <= *(double *)(v7 + 8))
      {
        if (v21 == ++v20) {
          goto LABEL_19;
        }
      }
      LODWORD(v19) = v20;
    }
LABEL_19:
    unint64_t v22 = (int)v19;
    if (v19 == 9)
    {
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(v8 + 9864);
      uint64_t v25 = *(void *)(v8 + 11160);
      long long v26 = __src;
      do
      {
        long long v27 = (char *)&v170 + v23;
        uint64_t v28 = v25 + v23;
        long long v29 = *(_OWORD *)(v24 + 80);
        *((_OWORD *)v26 + 4) = *(_OWORD *)(v24 + 64);
        *((_OWORD *)v26 + 5) = v29;
        *((void *)v26 + 12) = *(void *)(v24 + 96);
        long long v30 = *(_OWORD *)(v24 + 16);
        *(_OWORD *)long long v26 = *(_OWORD *)v24;
        *((_OWORD *)v26 + 1) = v30;
        long long v31 = *(_OWORD *)(v24 + 48);
        *((_OWORD *)v26 + 2) = *(_OWORD *)(v24 + 32);
        *((_OWORD *)v26 + 3) = v31;
        *(_OWORD *)long long v27 = *(_OWORD *)(v25 + v23);
        v23 += 24;
        v24 += 104;
        v26 += 104;
        *((void *)v27 + 2) = *(void *)(v28 + 16);
      }
      while (v23 != 216);
    }
    else
    {
      if ((v19 - 1) > 7)
      {
        if ((int)v19 < 10) {
          goto LABEL_106;
        }
        uint64_t v160 = v7;
        double v50 = 0;
        int v51 = 0;
        memset(__dst, 0, 24);
        do
        {
          if ((unint64_t)v50 >= *(void *)&__dst[16])
          {
            unint64_t v52 = *(_DWORD **)__dst;
            uint64_t v53 = ((uint64_t)v50 - *(void *)__dst) >> 2;
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62) {
              sub_1000267C4();
            }
            uint64_t v55 = *(void *)&__dst[16] - *(void *)__dst;
            if ((uint64_t)(*(void *)&__dst[16] - *(void *)__dst) >> 1 > v54) {
              unint64_t v54 = v55 >> 1;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56)
            {
              unint64_t v56 = (unint64_t)sub_10003B54C((uint64_t)&__dst[16], v56);
              uint64_t v58 = v57;
              double v50 = *(_DWORD **)&__dst[8];
              unint64_t v52 = *(_DWORD **)__dst;
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v59 = (_DWORD *)(v56 + 4 * v53);
            _DWORD *v59 = v51;
            int v60 = v59 + 1;
            while (v50 != v52)
            {
              int v61 = *--v50;
              *--uint64_t v59 = v61;
            }
            *(void *)__dst = v59;
            *(void *)&__dst[8] = v60;
            *(void *)&__dst[16] = v56 + 4 * v58;
            if (v52) {
              operator delete(v52);
            }
            double v50 = v60;
          }
          else
          {
            *v50++ = v51;
          }
          *(void *)&__dst[8] = v50;
          ++v51;
        }
        while (v51 != v19);
        LODWORD(__p) = 5;
        sub_100358388(*(unint64_t *)__dst, (uint64_t)v50, (uint64_t)&__p);
        unint64_t v62 = 0;
        uint64_t v63 = 0;
        memset(buf, 0, 24);
        do
        {
          uint64_t v64 = *(void *)__dst;
          if ((unint64_t)v62 >= *(void *)&buf[16])
          {
            long long v65 = *(_DWORD **)buf;
            uint64_t v66 = ((uint64_t)v62 - *(void *)buf) >> 2;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 62) {
              sub_1000267C4();
            }
            uint64_t v68 = *(void *)&buf[16] - *(void *)buf;
            if ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 1 > v67) {
              unint64_t v67 = v68 >> 1;
            }
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v69 = v67;
            }
            if (v69)
            {
              unint64_t v69 = (unint64_t)sub_10003B54C((uint64_t)&buf[16], v69);
              uint64_t v71 = v70;
              unint64_t v62 = *(_DWORD **)&buf[8];
              long long v65 = *(_DWORD **)buf;
            }
            else
            {
              uint64_t v71 = 0;
            }
            long long v72 = (_DWORD *)(v69 + 4 * v66);
            _DWORD *v72 = *(_DWORD *)(v64 + 4 * v63);
            uint64_t v73 = v72 + 1;
            while (v62 != v65)
            {
              int v74 = *--v62;
              *--long long v72 = v74;
            }
            *(void *)long long buf = v72;
            *(void *)&uint8_t buf[8] = v73;
            *(void *)&uint8_t buf[16] = v69 + 4 * v71;
            if (v65) {
              operator delete(v65);
            }
            unint64_t v62 = v73;
          }
          else
          {
            *v62++ = *(_DWORD *)(*(void *)__dst + 4 * v63);
          }
          *(void *)&uint8_t buf[8] = v62;
          ++v63;
        }
        while (v63 != 9);
        std::__sort<std::__less<int,int> &,int *>();
        uint64_t v75 = 0;
        uint64_t v76 = *(char **)buf;
        uint64_t v77 = *(void *)(v8 + 9864);
        uint64_t v78 = &v170;
        uint64_t v79 = __src;
        uint64_t v80 = *(void *)(v8 + 11160);
        uint64_t v7 = v160;
        do
        {
          int v81 = *(_DWORD *)&v76[v75];
          uint64_t v82 = v77 + 104 * v81;
          long long v83 = *(_OWORD *)(v82 + 80);
          *((_OWORD *)v79 + 4) = *(_OWORD *)(v82 + 64);
          *((_OWORD *)v79 + 5) = v83;
          *((void *)v79 + 12) = *(void *)(v82 + 96);
          long long v84 = *(_OWORD *)(v82 + 16);
          *(_OWORD *)uint64_t v79 = *(_OWORD *)v82;
          *((_OWORD *)v79 + 1) = v84;
          long long v85 = *(_OWORD *)(v82 + 48);
          *((_OWORD *)v79 + 2) = *(_OWORD *)(v82 + 32);
          *((_OWORD *)v79 + 3) = v85;
          uint64_t v86 = v80 + 24 * v81;
          long long *v78 = *(_OWORD *)v86;
          *((void *)v78 + 2) = *(void *)(v86 + 16);
          v75 += 4;
          uint64_t v78 = (long long *)((char *)v78 + 24);
          v79 += 104;
        }
        while (v75 != 36);
        *(void *)&uint8_t buf[8] = v76;
        operator delete(v76);
        long long v87 = *(void **)__dst;
        if (!*(void *)__dst) {
          goto LABEL_106;
        }
        *(void *)&__dst[8] = *(void *)__dst;
      }
      else
      {
        uint64_t v32 = 0;
        int v33 = 0;
        int v34 = 9 - v19;
        memset(buf, 0, 24);
        do
        {
          if ((unint64_t)v32 >= *(void *)&buf[16])
          {
            unint64_t v35 = *(_DWORD **)buf;
            uint64_t v36 = ((uint64_t)v32 - *(void *)buf) >> 2;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 62) {
              sub_1000267C4();
            }
            uint64_t v38 = *(void *)&buf[16] - *(void *)buf;
            if ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 1 > v37) {
              unint64_t v37 = v38 >> 1;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39)
            {
              unint64_t v39 = (unint64_t)sub_10003B54C((uint64_t)&buf[16], v39);
              uint64_t v41 = v40;
              uint64_t v32 = *(_DWORD **)&buf[8];
              unint64_t v35 = *(_DWORD **)buf;
            }
            else
            {
              uint64_t v41 = 0;
            }
            uint64_t v42 = (_DWORD *)(v39 + 4 * v36);
            *uint64_t v42 = v33;
            uint64_t v43 = v42 + 1;
            while (v32 != v35)
            {
              int v44 = *--v32;
              *--uint64_t v42 = v44;
            }
            *(void *)long long buf = v42;
            *(void *)&uint8_t buf[8] = v43;
            *(void *)&uint8_t buf[16] = v39 + 4 * v41;
            if (v35) {
              operator delete(v35);
            }
            uint64_t v32 = v43;
          }
          else
          {
            *v32++ = v33;
          }
          *(void *)&uint8_t buf[8] = v32;
          ++v33;
        }
        while (v33 != v19);
        LODWORD(__p) = 5;
        sub_100358388(*(unint64_t *)buf, (uint64_t)v32, (uint64_t)&__p);
        if (v34 <= (int)v19)
        {
          if ((int)v19 <= 8)
          {
            long long v88 = *(int **)buf;
            if (v34 <= 1) {
              uint64_t v89 = 1;
            }
            else {
              uint64_t v89 = v34;
            }
            float32x4_t v90 = __dst;
            do
            {
              int v91 = *v88++;
              *(_DWORD *)float32x4_t v90 = v91;
              v90 += 4;
              --v89;
            }
            while (v89);
          }
          float32x4_t v92 = *(int **)buf;
          uint64_t v93 = v19;
          uint64_t v94 = 36 - 4 * (int)v19;
          do
          {
            int v95 = *v92++;
            *(_DWORD *)&__dst[v94] = v95;
            v94 += 4;
            --v93;
          }
          while (v93);
        }
        else
        {
          LODWORD(v45) = 0;
          uint64_t v46 = *(void *)buf;
          do
          {
            uint64_t v47 = 0;
            int v48 = v45;
            uint64_t v45 = (int)v45;
            do
            {
              uint64_t v49 = v45;
              *(_DWORD *)&__dst[4 * v45++] = *(_DWORD *)(v46 + 4 * v47++);
            }
            while (v49 <= 7 && v47 < (int)v19);
          }
          while (v48 + (int)v47 <= 8);
        }
        std::__sort<std::__less<int,int> &,int *>();
        uint64_t v96 = 0;
        uint64_t v97 = *(void *)(v8 + 9864);
        uint64_t v98 = &v170;
        uint64_t v99 = *(void *)(v8 + 11160);
        unint64_t v100 = __src;
        do
        {
          int v101 = *(_DWORD *)&__dst[v96];
          uint64_t v102 = v97 + 104 * v101;
          long long v103 = *(_OWORD *)(v102 + 80);
          *((_OWORD *)v100 + 4) = *(_OWORD *)(v102 + 64);
          *((_OWORD *)v100 + 5) = v103;
          *((void *)v100 + 12) = *(void *)(v102 + 96);
          long long v104 = *(_OWORD *)(v102 + 16);
          *(_OWORD *)unint64_t v100 = *(_OWORD *)v102;
          *((_OWORD *)v100 + 1) = v104;
          long long v105 = *(_OWORD *)(v102 + 48);
          *((_OWORD *)v100 + 2) = *(_OWORD *)(v102 + 32);
          *((_OWORD *)v100 + 3) = v105;
          uint64_t v106 = v99 + 24 * v101;
          long long *v98 = *(_OWORD *)v106;
          *((void *)v98 + 2) = *(void *)(v106 + 16);
          v96 += 4;
          uint64_t v98 = (long long *)((char *)v98 + 24);
          v100 += 104;
        }
        while (v96 != 36);
        long long v87 = *(void **)buf;
        if (!*(void *)buf) {
          goto LABEL_106;
        }
        *(void *)&uint8_t buf[8] = *(void *)buf;
      }
      operator delete(v87);
    }
LABEL_106:
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100434564();
    }
    long long v107 = (void **)(v8 + 9888);
    memcpy(__dst, (const void *)(v8 + 1440), 0xEA0uLL);
    memcpy(buf, (const void *)(v8 + 10296), 0x360uLL);
    memcpy(&__dst[3744], __src, 0x3A8uLL);
    *(_OWORD *)&buf[1024] = v180;
    *(_OWORD *)&buf[1040] = v181;
    *(_OWORD *)&buf[1056] = v182;
    *(_OWORD *)&buf[960] = v176;
    *(_OWORD *)&buf[976] = v177;
    *(_OWORD *)&buf[992] = v178;
    *(_OWORD *)&buf[1008] = v179;
    *(_OWORD *)&buf[896] = v172;
    *(_OWORD *)&buf[912] = v173;
    *(_OWORD *)&buf[928] = v174;
    *(_OWORD *)&buf[944] = v175;
    *(_OWORD *)&buf[864] = v170;
    *(void *)&buf[1072] = v183;
    *(_OWORD *)&buf[880] = v171;
    memcpy((void *)(v8 + 504), __dst, 0x1248uLL);
    memcpy((void *)(v8 + 10080), buf, 0x438uLL);
    stat __p = 0;
    v168 = 0;
    unint64_t v169 = 0;
    v164 = 0;
    v165 = 0;
    unint64_t v166 = 0;
    v161 = 0;
    v162 = 0;
    unint64_t v163 = 0;
    *(void *)(v8 + 10072) = *(void *)(v7 + 8);
    uint64_t v108 = *(void *)(v8 + 9864);
    if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v8 + 9872) - v108) >> 3) > (unint64_t)(int)v19)
    {
      do
      {
        v109 = (long long *)(v108 + 104 * v22);
        long long v110 = v168;
        if ((unint64_t)v168 >= v169)
        {
          long long v117 = (char *)__p;
          uint64_t v118 = 0x4EC4EC4EC4EC4EC5 * ((v168 - (unsigned char *)__p) >> 3);
          unint64_t v119 = v118 + 1;
          if ((unint64_t)(v118 + 1) > 0x276276276276276) {
            sub_1000267C4();
          }
          if (0x9D89D89D89D89D8ALL * ((uint64_t)(v169 - (void)__p) >> 3) > v119) {
            unint64_t v119 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v169 - (void)__p) >> 3);
          }
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v169 - (void)__p) >> 3)) >= 0x13B13B13B13B13BLL) {
            unint64_t v120 = 0x276276276276276;
          }
          else {
            unint64_t v120 = v119;
          }
          if (v120)
          {
            float32x4_t v121 = (char *)sub_10035833C((uint64_t)&v169, v120);
            long long v117 = (char *)__p;
            long long v110 = v168;
          }
          else
          {
            float32x4_t v121 = 0;
          }
          int32x4_t v122 = &v121[104 * v118];
          long long v123 = *v109;
          long long v124 = v109[2];
          *((_OWORD *)v122 + 1) = v109[1];
          *((_OWORD *)v122 + 2) = v124;
          *(_OWORD *)int32x4_t v122 = v123;
          long long v125 = v109[3];
          long long v126 = v109[4];
          long long v127 = v109[5];
          *((void *)v122 + 12) = *((void *)v109 + 12);
          *((_OWORD *)v122 + 4) = v126;
          *((_OWORD *)v122 + 5) = v127;
          *((_OWORD *)v122 + 3) = v125;
          if (v110 == v117)
          {
            long long v134 = &v121[104 * v118];
          }
          else
          {
            float32x4_t v128 = &v121[104 * v118];
            do
            {
              long long v129 = *(_OWORD *)(v110 - 104);
              long long v130 = *(_OWORD *)(v110 - 88);
              *(_OWORD *)(v128 - 72) = *(_OWORD *)(v110 - 72);
              *(_OWORD *)(v128 - 88) = v130;
              *(_OWORD *)(v128 - 104) = v129;
              long long v131 = *(_OWORD *)(v110 - 56);
              long long v132 = *(_OWORD *)(v110 - 40);
              long long v133 = *(_OWORD *)(v110 - 24);
              long long v134 = v128 - 104;
              *((void *)v128 - 1) = *((void *)v110 - 1);
              *(_OWORD *)(v128 - 24) = v133;
              *(_OWORD *)(v128 - 40) = v132;
              *(_OWORD *)(v128 - 56) = v131;
              v110 -= 104;
              v128 -= 104;
            }
            while (v110 != v117);
          }
          long long v116 = v122 + 104;
          stat __p = v134;
          v168 = v122 + 104;
          unint64_t v169 = (unint64_t)&v121[104 * v120];
          if (v117) {
            operator delete(v117);
          }
        }
        else
        {
          long long v111 = *v109;
          long long v112 = v109[2];
          *((_OWORD *)v168 + 1) = v109[1];
          *((_OWORD *)v110 + 2) = v112;
          *(_OWORD *)long long v110 = v111;
          long long v113 = v109[3];
          long long v114 = v109[4];
          long long v115 = v109[5];
          *((void *)v110 + 12) = *((void *)v109 + 12);
          *((_OWORD *)v110 + 4) = v114;
          *((_OWORD *)v110 + 5) = v115;
          *((_OWORD *)v110 + 3) = v113;
          long long v116 = v110 + 104;
        }
        v168 = v116;
        long long v135 = *v107;
        long long v136 = v162;
        if ((unint64_t)v162 >= v163)
        {
          int32x4_t v138 = v161;
          uint64_t v139 = ((char *)v162 - (unsigned char *)v161) >> 3;
          unint64_t v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 61) {
            sub_1000267C4();
          }
          uint64_t v141 = v163 - (void)v161;
          if ((uint64_t)(v163 - (void)v161) >> 2 > v140) {
            unint64_t v140 = v141 >> 2;
          }
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v142 = v140;
          }
          if (v142)
          {
            v143 = (char *)sub_100056BF0((uint64_t)&v163, v142);
            int32x4_t v138 = v161;
            long long v136 = v162;
          }
          else
          {
            v143 = 0;
          }
          v144 = &v143[8 * v139];
          *(void *)v144 = v135[v22];
          long long v137 = v144 + 8;
          while (v136 != v138)
          {
            uint64_t v145 = *--v136;
            *((void *)v144 - 1) = v145;
            v144 -= 8;
          }
          v161 = v144;
          v162 = v137;
          unint64_t v163 = (unint64_t)&v143[8 * v142];
          if (v138) {
            operator delete(v138);
          }
        }
        else
        {
          void *v162 = v135[v22];
          long long v137 = v136 + 1;
        }
        v162 = v137;
        uint64_t v146 = *(void *)(v8 + 11160) + 24 * v22;
        v147 = v165;
        if ((unint64_t)v165 >= v166)
        {
          unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * (((char *)v165 - (unsigned char *)v164) >> 3);
          unint64_t v151 = v150 + 1;
          if (v150 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1000267C4();
          }
          if (0x5555555555555556 * ((uint64_t)(v166 - (void)v164) >> 3) > v151) {
            unint64_t v151 = 0x5555555555555556 * ((uint64_t)(v166 - (void)v164) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v166 - (void)v164) >> 3) >= 0x555555555555555) {
            unint64_t v152 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v152 = v151;
          }
          if (v152) {
            v153 = (char *)sub_1000267DC((uint64_t)&v166, v152);
          }
          else {
            v153 = 0;
          }
          v154 = &v153[24 * v150];
          long long v155 = *(_OWORD *)v146;
          *((void *)v154 + 2) = *(void *)(v146 + 16);
          *(_OWORD *)v154 = v155;
          v157 = v164;
          v156 = v165;
          v158 = v154;
          if (v165 != v164)
          {
            do
            {
              long long v159 = *(_OWORD *)(v156 - 3);
              *((void *)v158 - 1) = *(v156 - 1);
              *(_OWORD *)(v158 - 24) = v159;
              v158 -= 24;
              v156 -= 3;
            }
            while (v156 != v157);
            v156 = v164;
          }
          v149 = v154 + 24;
          v164 = v158;
          v165 = v154 + 24;
          unint64_t v166 = (unint64_t)&v153[24 * v152];
          if (v156) {
            operator delete(v156);
          }
        }
        else
        {
          long long v148 = *(_OWORD *)v146;
          v165[2] = *(void *)(v146 + 16);
          _OWORD *v147 = v148;
          v149 = (void *)v147 + 3;
        }
        v165 = v149;
        ++v22;
        uint64_t v108 = *(void *)(v8 + 9864);
      }
      while (0x4EC4EC4EC4EC4EC5 * ((*(void *)(v8 + 9872) - v108) >> 3) > v22);
    }
    if ((void **)(v8 + 9864) != &__p) {
      sub_1003586D8((char *)(v8 + 9864), (char *)__p, (uint64_t)v168, 0x4EC4EC4EC4EC4EC5 * ((v168 - (unsigned char *)__p) >> 3));
    }
    if (v107 != &v161) {
      sub_10015E510((char *)(v8 + 9888), (char *)v161, (uint64_t)v162, ((char *)v162 - (unsigned char *)v161) >> 3);
    }
    if ((void **)(v8 + 11160) != &v164) {
      sub_10035888C((char *)(v8 + 11160), (char *)v164, (uint64_t)v165, 0xAAAAAAAAAAAAAAABLL * (((char *)v165 - (unsigned char *)v164) >> 3));
    }
    if (v161)
    {
      v162 = v161;
      operator delete(v161);
    }
    if (v164)
    {
      v165 = v164;
      operator delete(v164);
    }
    if (__p)
    {
      v168 = (char *)__p;
      operator delete(__p);
    }
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10043445C();
  }
}

void sub_100356D78(_Unwind_Exception *a1)
{
  double v2 = (void *)STACK[0x4E0];
  if (STACK[0x4E0])
  {
    STACK[0x4E8] = (unint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)STACK[0x920];
  if (STACK[0x920])
  {
    STACK[0x928] = (unint64_t)v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

double sub_100356E38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 424;
  char v5 = 1;
  do
  {
    char v6 = v5;
    if (*(unsigned char *)(v4 + 40 * v3))
    {
      double v7 = *(double *)(a2 + 8 * v3);
      uint64_t v8 = v4 + 40 * v3;
      int v10 = *(unsigned __int8 *)(v8 + 1);
      long long v9 = (unsigned char *)(v8 + 1);
      if (v10)
      {
        uint64_t v11 = v4 + 40 * v3;
        double v7 = (1.0 - *(double *)(v11 + 24)) * *(double *)(v11 + 32) + *(double *)(v11 + 24) * v7;
      }
      else
      {
        *long long v9 = 1;
        uint64_t v11 = v4 + 40 * v3;
      }
      *(double *)(v11 + 32) = v7;
    }
    else
    {
      uint64_t v12 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_1004344F8(&v14, v15, v12);
      }
      double v7 = *(double *)(a2 + 8 * v3);
    }
    char v5 = 0;
    *(&v16 + v3) = v7;
    uint64_t v3 = 1;
  }
  while ((v6 & 1) != 0);
  return v16;
}

void sub_100356F40()
{
  uint64_t v0 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Gesture changed", v1, 2u);
  }
}

double sub_100356FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __chkstk_darwin(a1, a2, a3);
  *(unsigned char *)(v3 + 11208) = 0;
  uint64_t v4 = *(unsigned char **)(v3 + 8);
  if (v4[72])
  {
    uint64_t v5 = v3;
    uint64_t v20 = (unsigned char *)(v3 + 11208);
    memcpy(__dst, (const void *)(v3 + 504), 0x1248uLL);
    __dst[4680] = 1;
    memcpy(v25, (const void *)(v5 + 5184), sizeof(v25));
    long long v6 = *(_OWORD *)(v5 + 9912);
    long long v28 = *(_OWORD *)(v5 + 9928);
    long long v7 = *(_OWORD *)(v5 + 9960);
    long long v29 = *(_OWORD *)(v5 + 9944);
    char v26 = 1;
    long long v30 = v7;
    long long v31 = *(_OWORD *)(v5 + 9976);
    long long v27 = v6;
    char v32 = 1;
    long long v8 = *(_OWORD *)(v5 + 10040);
    long long v35 = *(_OWORD *)(v5 + 10024);
    long long v36 = v8;
    long long v37 = *(_OWORD *)(v5 + 10056);
    long long v9 = *(_OWORD *)(v5 + 10008);
    long long v33 = *(_OWORD *)(v5 + 9992);
    long long v34 = v9;
    char v38 = 1;
    memcpy(v39, (const void *)(v5 + 10080), 0x438uLL);
    v39[1080] = 1;
    uint64_t v40 = *(void *)(v5 + 10072);
    char v41 = 1;
    char v42 = 0;
    char v43 = 0;
    uint64_t v21 = 0;
    double v22 = 0.0;
    uint64_t v23 = 0;
    (*(void (**)(uint64_t *__return_ptr, unsigned char *, unsigned char *, uint64_t, void))(*(void *)v4 + 16))(&v21, v4, __dst, v5 + 24, *(unsigned int *)(v5 + 11212));
    if (!v26) {
      sub_100434644();
    }
    memcpy((void *)(v5 + 5184), v25, 0x1248uLL);
    if (!v38) {
      sub_100434670();
    }
    long long v10 = v36;
    *(_OWORD *)(v5 + 10024) = v35;
    *(_OWORD *)(v5 + 10040) = v10;
    *(_OWORD *)(v5 + 10056) = v37;
    long long v11 = v34;
    *(_OWORD *)(v5 + 9992) = v33;
    *(_OWORD *)(v5 + 10008) = v11;
    if (!(_BYTE)v23)
    {
      double v13 = v22;
      double v15 = sub_100355168(*(double **)(v5 + 8), *(_DWORD *)(v5 + 11212));
      double v16 = qword_1008ABDE0;
      BOOL v17 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
      if (v13 <= v15)
      {
        if (!v17) {
          return v13;
        }
        *(_DWORD *)long long buf = 134217984;
        double v45 = v13;
        uint64_t v18 = "#spatialGesturesPredictor Gesture = Other, HandoffConfidence = %f";
      }
      else
      {
        if (!v17) {
          return v13;
        }
        *(_DWORD *)long long buf = 134217984;
        double v45 = v13;
        uint64_t v18 = "#spatialGesturesPredictor Gesture = Handoff, HandoffConfidence = %f";
      }
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v18, buf, 0xCu);
      return v13;
    }
    uint64_t v12 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor #evaluation false positive alert", buf, 2u);
    }
    *uint64_t v20 = 1;
    return 0.0;
  }
  else
  {
    uint8_t v14 = qword_1008ABDE0;
    double v13 = 1.0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004345C4(v14);
    }
  }
  return v13;
}

uint64_t sub_1003572F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 11208);
}

uint64_t sub_1003572FC(uint64_t a1, uint64_t *a2, int a3)
{
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1008622E8;
  *(unsigned char *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    long long v7 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v5;
    if (v7) {
      sub_10001A970(v7);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 136) = a3;
  return a1;
}

uint64_t sub_1003573A0(uint64_t a1)
{
  *(void *)a1 = off_1008622E8;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  sub_1003589C8((void *)(a1 + 64));
  double v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

void sub_100357408(uint64_t a1)
{
  sub_1003573A0(a1);

  operator delete();
}

void sub_100357440(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a1[1] + 72))
  {
    long long v3 = *(_OWORD *)(a2 + 24);
    v7[0] = *(_OWORD *)(a2 + 8);
    v7[1] = v3;
    int8x16_t v4 = vextq_s8(*(int8x16_t *)(a2 + 120), *(int8x16_t *)(a2 + 120), 8uLL);
    _DWORD v7[2] = *(_OWORD *)(a2 + 40);
    v7[3] = v4;
    void v7[4] = *(_OWORD *)(a2 + 88);
    uint64_t v8 = *(void *)(a2 + 104);
    uint64_t v5 = (uint64_t)(a1 + 8);
    sub_100357510(a1 + 8, (uint64_t)v7);
    unint64_t v6 = a1[13];
    if (v6 >= 0x33)
    {
      do
      {
        ++a1[12];
        a1[13] = v6 - 1;
        sub_100358D88(v5, 1);
        unint64_t v6 = a1[13];
      }
      while (v6 > 0x32);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_10043445C();
  }
}

__n128 sub_100357510(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 46 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100358A70(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2E)) + 88 * (v7 % 0x2E);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v12 = *(_OWORD *)(a2 + 64);
  *(void *)(v8 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  *(__n128 *)(v8 + 32) = result;
  ++a1[5];
  return result;
}

void sub_1003575DC()
{
  uint64_t v0 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#spatialGesturesPredictor Gesture changed", v1, 2u);
  }
}

double sub_100357644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = (void *)__chkstk_darwin(a1, a2, a3);
  uint64_t v4 = (unsigned char *)v3[1];
  if (v4[72])
  {
    uint64_t v5 = v3;
    if (v3[13] == 50)
    {
      unint64_t v6 = v3[12];
      uint64_t v7 = v3[9];
      uint64_t v8 = -4400;
      do
      {
        unint64_t v9 = *(void *)(v7 + 8 * (v6 / 0x2E)) + 88 * (v6 % 0x2E);
        long long v10 = *(_OWORD *)(v9 + 48);
        long long v11 = &v20[v8];
        *((_OWORD *)v11 + 277) = *(_OWORD *)(v9 + 32);
        *((_OWORD *)v11 + 278) = v10;
        *((_OWORD *)v11 + 279) = *(_OWORD *)(v9 + 64);
        long long v12 = *(_OWORD *)(v9 + 16);
        *((_OWORD *)v11 + 275) = *(_OWORD *)v9;
        *((void *)v11 + 560) = *(void *)(v9 + 80);
        *((_OWORD *)v11 + 276) = v12;
        ++v6;
        v8 += 88;
      }
      while (v8);
      v18[0] = 0;
      v18[4680] = 0;
      v18[4688] = 0;
      v18[9368] = 0;
      v18[9376] = 0;
      v18[9456] = 0;
      v18[9464] = 0;
      v18[9544] = 0;
      v18[9552] = 0;
      v18[10632] = 0;
      v18[10640] = 0;
      v18[10648] = 0;
      memcpy(v19, v20, 0x1130uLL);
      v19[4400] = 1;
      uint64_t v15 = 0;
      double v16 = 0.0;
      uint64_t v17 = 0;
      (*(void (**)(uint64_t *__return_ptr, unsigned char *, unsigned char *, void *, void))(*(void *)v4 + 16))(&v15, v4, v18, v5 + 3, *((unsigned int *)v5 + 34));
      return v16;
    }
    else
    {
      double v13 = 0.0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004346D0();
      }
    }
  }
  else
  {
    double v13 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_10043469C();
    }
  }
  return v13;
}

uint64_t sub_100357848(uint64_t result, void *a2, int a3)
{
  *(void *)__n128 result = off_100862330;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  switch(a3)
  {
    case 0:
    case 2:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100434704();
      }
      long long v3 = "false";
      int v4 = 1050;
      break;
    case 1:
    case 3:
      if (*a2) {
        operator new();
      }
      long long v3 = "gestureClassifiers[kIdxUwbSpatialGesturePredictor] != NULL";
      int v4 = 1036;
      break;
    case 4:
      if (a2[2]) {
        operator new();
      }
      long long v3 = "gestureClassifiers[kIdxMotionBasedSpatialGesturePredictor] != NULL";
      int v4 = 1042;
      break;
    default:
      return result;
  }
  __assert_rtn("GesturePredictorWrapper", "NRBYSpatialGesturePredictor.mm", v4, v3);
}

void sub_100357AE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = 16;
  while (1)
  {
    uint64_t v4 = *(void *)(v1 + v3);
    *(void *)(v1 + v3) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    v3 -= 8;
    if (!v3) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_100357B80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, a2);
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v5();
  }
  return result;
}

uint64_t sub_100357C1C(uint64_t a1, uint64_t a2)
{
  *(double *)(a1 + 24) = *(float *)(a2 + 16);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void sub_100357C58(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    sub_100358068(v25, a2);
    sub_100358068(v20, a3);
    (*(void (**)(uint64_t, unsigned char *, unsigned char *, double))(*(void *)v8 + 32))(v8, v25, v20, a4);
    if (v24 && v23 && v22 < 0) {
      operator delete(__p);
    }
    if (v29 && v28 && v27 < 0) {
      operator delete(v26);
    }
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    sub_100358068(v15, a2);
    sub_100358068(v10, a3);
    (*(void (**)(uint64_t, unsigned char *, unsigned char *, double))(*(void *)v9 + 32))(v9, v15, v10, a4);
    if (v14 && v13 && v12 < 0) {
      operator delete(v11);
    }
    if (v19 && v18 && v17 < 0) {
      operator delete(v16);
    }
  }
}

void sub_100357DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,int a53,__int16 a54,char a55,char a56)
{
  if ((_BYTE)a21 && a19 && a15 < 0) {
    operator delete(__p);
  }
  if ((_BYTE)a39 && a37 && a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

double sub_100357E70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 || (uint64_t v2 = *(void *)(a1 + 16)) != 0)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)v2 + 40);
    v3();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_100434738();
    }
    return -1.0;
  }
  return result;
}

void sub_100357F0C(uint64_t a1)
{
  sub_10035810C(a1);

  operator delete();
}

uint64_t sub_100357F48()
{
  return 0;
}

void *sub_100357F50(void *a1)
{
  *a1 = off_100862330;
  uint64_t v2 = 2;
  do
  {
    uint64_t v3 = a1[v2];
    a1[v2] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    --v2;
  }
  while (v2 * 8);
  return a1;
}

void sub_100357FCC(void *a1)
{
  *a1 = off_100862330;
  uint64_t v2 = 2;
  while (1)
  {
    uint64_t v3 = a1[v2];
    a1[v2] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    if (!(--v2 * 8))
    {
      operator delete();
    }
  }
}

unsigned char *sub_100358068(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[64] = 0;
  if (*(unsigned char *)(a2 + 64))
  {
    *(void *)a1 = *(void *)a2;
    sub_10031FE98(a1 + 8, (long long *)(a2 + 8));
    a1[64] = 1;
  }
  return a1;
}

void sub_1003580B4(_Unwind_Exception *a1)
{
  sub_1003580C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003580C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64) && *(unsigned char *)(a1 + 56) && *(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10035810C(uint64_t a1)
{
  *(void *)a1 = off_1008622A0;
  if (*(char *)(a1 + 11207) < 0) {
    operator delete(*(void **)(a1 + 11184));
  }
  uint64_t v2 = *(void **)(a1 + 11160);
  if (v2)
  {
    *(void *)(a1 + 11168) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 9888);
  if (v3)
  {
    *(void *)(a1 + 9896) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 9864);
  if (v4)
  {
    *(void *)(a1 + 9872) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    sub_10001A970(v5);
  }
  return a1;
}

void sub_1003581A0()
{
}

double sub_1003581B4()
{
  return 0.40968198;
}

double sub_1003581C0@<D0>(_OWORD *a1@<X8>)
{
  a1[10] = xmmword_1004C2400;
  a1[11] = unk_1004C2410;
  a1[12] = xmmword_1004C2420;
  a1[6] = xmmword_1004C23C0;
  a1[7] = unk_1004C23D0;
  a1[8] = xmmword_1004C23E0;
  a1[9] = unk_1004C23F0;
  a1[2] = xmmword_1004C2380;
  a1[3] = unk_1004C2390;
  a1[4] = xmmword_1004C23A0;
  a1[5] = unk_1004C23B0;
  double result = dbl_1004C2370[0];
  *a1 = xmmword_1004C2360;
  a1[1] = *(_OWORD *)dbl_1004C2370;
  return result;
}

double sub_100358204()
{
  return 0.335718321;
}

double sub_100358228()
{
  return -0.116659178;
}

void *sub_10035824C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10003B600(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1003582A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003582C4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1001503E8(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_100358320(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10035833C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    sub_1000257D8();
  }
  return operator new(104 * a2);
}

uint64_t sub_100358388(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((uint64_t)(a2 - a1) >= 5)
  {
    uint64_t v4 = (int *)a1;
    long long v12 = xmmword_1004C2110;
    unint64_t v5 = a2 - 4;
    if (a2 - 4 > a1)
    {
      uint64_t v7 = ((a2 - a1) >> 2) - 1;
      do
      {
        v11[0] = 0;
        v11[1] = v7;
        uint64_t v8 = sub_100358430((uint64_t)&v12, a3, v11);
        if (v8)
        {
          int v9 = *v4;
          *uint64_t v4 = v4[v8];
          v4[v8] = v9;
        }
        ++v4;
        --v7;
      }
      while ((unint64_t)v4 < v5);
    }
  }
  return a2;
}

uint64_t sub_100358430(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a3[1];
  uint64_t v4 = result - *a3;
  if (result != *a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      sub_1003584BC((uint64_t)v10, a2, 0x40uLL);
      return sub_1003585B0((uint64_t)v10);
    }
    else
    {
      unint64_t v7 = __clz(v5);
      uint64_t v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64;
      }
      sub_1003584BC((uint64_t)v10, a2, v8 - v7);
      do
        unint64_t v9 = sub_1003585B0((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t sub_1003584BC(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if (a3 % 0x1E) {
    unint64_t v3 = a3 / 0x1E + 1;
  }
  else {
    unint64_t v3 = a3 / 0x1E;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      unint64_t v6 = 0;
      *(void *)(result + 32) = v3 + v4 * v3 - a3;
      *(void *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(void *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
  }
LABEL_13:
  *(void *)(result + 48) = v6;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 >= 0x1F) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t sub_1003585B0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t result = 0;
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        unsigned int v7 = v6 / 0xADC8;
        unsigned int v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        BOOL v9 = v8 >= v7;
        unsigned int v10 = v8 - v7;
        if (v9) {
          int v11 = 0;
        }
        else {
          int v11 = 0x7FFFFFFF;
        }
        unsigned int v6 = v11 + v10;
        unint64_t v12 = v6 - 1;
      }
      while (*(void *)(a1 + 40) <= v12);
      uint64_t v13 = result << v5;
      if (v5 >= 0x40) {
        uint64_t v13 = 0;
      }
      uint64_t result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v14 = *(void *)(a1 + 24);
  if (v2 < v14)
  {
    uint64_t v15 = *(unsigned int **)a1;
    unint64_t v16 = *(void *)(a1 + 48);
    unint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(a1 + 60);
    unsigned int v19 = *v15;
    while (1)
    {
      unsigned int v20 = v19 / 0xADC8;
      unsigned int v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      BOOL v9 = v21 >= v20;
      unsigned int v22 = v21 - v20;
      if (v9) {
        int v23 = 0;
      }
      else {
        int v23 = 0x7FFFFFFF;
      }
      unsigned int v19 = v23 + v22;
      unint64_t v24 = v19 - 1;
      if (v16 > v24)
      {
        uint64_t v25 = result << (v17 + 1);
        if (v17 >= 0x3F) {
          uint64_t v25 = 0;
        }
        uint64_t result = v25 + (v18 & v24);
        if (++v2 == v14) {
          break;
        }
      }
    }
    unsigned int *v15 = v19;
  }
  return result;
}

char *sub_1003586D8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  BOOL v9 = *(char **)result;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 > 0x276276276276276) {
      sub_1000267C4();
    }
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x13B13B13B13B13BLL) {
      unint64_t v12 = 0x276276276276276;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_100358834(v7, v12);
    unint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    BOOL v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      unsigned int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0x4EC4EC4EC4EC4EC5 * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    BOOL v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    unsigned int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

char *sub_100358834(void *a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    sub_1000267C4();
  }
  uint64_t result = (char *)sub_10035833C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

char *sub_10035888C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  BOOL v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000267C4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_100026770(v7, v12);
    unint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    BOOL v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      unsigned int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    BOOL v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    unsigned int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

uint64_t sub_1003589C8(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 23;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 46;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unsigned int v7 = *v2++;
    operator delete(v7);
  }

  return sub_10003ACC4((uint64_t)a1);
}

void sub_100358A70(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2E;
  unint64_t v4 = v2 - 46;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unsigned int v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    BOOL v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_100056BF0(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unsigned int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      BOOL v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFD0uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFD0uLL);
    sub_100151930((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    BOOL v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      char v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFD0uLL);
  sub_100151A50(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100358D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100358D88(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x2E) {
    a2 = 1;
  }
  if (v2 < 0x5C) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 46;
  }
  return v4 ^ 1u;
}

void sub_100358DE8()
{
  __cxa_atexit((void (*)(void *))nullsub_72, &off_10089F578, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_73, &off_10089F580, (void *)&_mh_execute_header);
}

void sub_100358E68(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 192))
  {
    uint64_t v4 = a2 + 8;
    uint64_t v5 = (long long *)(a1 + 56);
    if (*(unsigned char *)(a1 + 240))
    {
      if (*(double *)(a1 + 64) == *(double *)(a2 + 16)) {
        return;
      }
      long long v6 = *(_OWORD *)v4;
      long long v7 = *(_OWORD *)(v4 + 16);
      long long v8 = *(_OWORD *)(v4 + 48);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(v4 + 32);
      *(_OWORD *)(a1 + 104) = v8;
      *uint64_t v5 = v6;
      *(_OWORD *)(a1 + 72) = v7;
      long long v9 = *(_OWORD *)(v4 + 64);
      long long v10 = *(_OWORD *)(v4 + 80);
      long long v11 = *(_OWORD *)(v4 + 112);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(v4 + 96);
      *(_OWORD *)(a1 + 168) = v11;
      *(_OWORD *)(a1 + 120) = v9;
      *(_OWORD *)(a1 + 136) = v10;
      long long v12 = *(_OWORD *)(v4 + 128);
      long long v13 = *(_OWORD *)(v4 + 144);
      long long v14 = *(_OWORD *)(v4 + 160);
      *(void *)(a1 + 232) = *(void *)(v4 + 176);
      *(_OWORD *)(a1 + 200) = v13;
      *(_OWORD *)(a1 + 216) = v14;
      *(_OWORD *)(a1 + 184) = v12;
    }
    else
    {
      long long v15 = *(_OWORD *)v4;
      long long v16 = *(_OWORD *)(v4 + 16);
      long long v17 = *(_OWORD *)(v4 + 48);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(v4 + 32);
      *(_OWORD *)(a1 + 104) = v17;
      *uint64_t v5 = v15;
      *(_OWORD *)(a1 + 72) = v16;
      long long v18 = *(_OWORD *)(v4 + 64);
      long long v19 = *(_OWORD *)(v4 + 80);
      long long v20 = *(_OWORD *)(v4 + 112);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(v4 + 96);
      *(_OWORD *)(a1 + 168) = v20;
      *(_OWORD *)(a1 + 120) = v18;
      *(_OWORD *)(a1 + 136) = v19;
      long long v21 = *(_OWORD *)(v4 + 128);
      long long v22 = *(_OWORD *)(v4 + 144);
      long long v23 = *(_OWORD *)(v4 + 160);
      *(void *)(a1 + 232) = *(void *)(v4 + 176);
      *(_OWORD *)(a1 + 200) = v22;
      *(_OWORD *)(a1 + 216) = v23;
      *(_OWORD *)(a1 + 184) = v21;
      *(unsigned char *)(a1 + 240) = 1;
    }
    if (!*(unsigned char *)(a2 + 192)) {
      sub_10000AE44();
    }
    sub_10035D4A4(a1 + 248, (long long *)v4, v25);
    if (v26)
    {
      uint64_t v24 = *(void *)(a1 + 48);
      if (!v24
        || v25[0]
         - *(double *)(*(void *)(*(void *)(a1 + 16) + 8 * ((v24 + *(void *)(a1 + 40) - 1) / 0x38uLL))
                     + 72 * ((v24 + *(void *)(a1 + 40) - 1) % 0x38uLL)) >= 0.25)
      {
        sub_100358FC0((void *)(a1 + 8), (uint64_t)v25);
      }
    }
  }
}

uint64_t sub_100358FC0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 56 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1003597C0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x38)) + 72 * (v7 % 0x38);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 48);
  *(void *)(v8 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5] + 1;
  a1[5] = v13;
  unint64_t v14 = v12 + v13;
  uint64_t v15 = a1[1];
  long long v16 = (void *)(v15 + 8 * (v14 / 0x38));
  uint64_t v17 = *v16 + 72 * (v14 % 0x38);
  if (a1[2] == v15) {
    uint64_t v17 = 0;
  }
  if (v17 == *v16) {
    uint64_t v17 = *(v16 - 1) + 4032;
  }
  return v17 - 72;
}

void sub_1003590C4(void *a1, uint64_t a2)
{
  char v6 = 0;
  sub_10035C5B4((uint64_t)(a1 + 31), a2, &v6, (uint64_t)v4);
  if (v6)
  {
    sub_100359184((uint64_t)a1);
  }
  else if (v5)
  {
    uint64_t v3 = a1[6];
    if (!v3
      || v4[0] - *(double *)(*(void *)(a1[2] + 8 * ((v3 + a1[5] - 1) / 0x38uLL)) + 72 * ((v3 + a1[5] - 1) % 0x38uLL)) >= 0.25)
    {
      sub_100358FC0(a1 + 1, (uint64_t)v4);
    }
  }
}

void sub_100359184(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 48) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 24);
      unint64_t v2 = (void **)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 28;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 56;
  }
  *(void *)(a1 + 40) = v6;
LABEL_8:
  if (*(unsigned char *)(a1 + 240)) {
    *(unsigned char *)(a1 + 240) = 0;
  }
}

uint64_t sub_100359208(uint64_t a1, double *a2, uint64_t a3, int a4)
{
  if (!*(unsigned char *)(a3 + 208)) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  if (v5 < 5
    || *a2
     - *(double *)(*(void *)(*(void *)(a1 + 16) + 8 * ((v5 + *(void *)(a1 + 40) - 1) / 0x38))
                 + 72 * ((v5 + *(void *)(a1 + 40) - 1) % 0x38)) > 5.0)
  {
    return 2 * (*(unsigned char *)a1 == 0);
  }
  stat __p = 0;
  int v60 = 0;
  int v61 = 0;
  if (sub_1003596BC(a1, a3, (uint64_t)a2, &v58))
  {
    unint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    long long v11 = (void *)(v9 + 8 * (v8 / 0x38));
    int v56 = a4;
    if (v10 == v9) {
      unint64_t v12 = 0;
    }
    else {
      unint64_t v12 = *v11 + 72 * (v8 % 0x38);
    }
LABEL_11:
    uint64_t v57 = v11;
    while (1)
    {
      if (v10 == v9)
      {
        unint64_t v14 = 0;
      }
      else
      {
        unint64_t v13 = *(void *)(a1 + 48) + *(void *)(a1 + 40);
        unint64_t v14 = *(void *)(v9 + 8 * (v13 / 0x38)) + 72 * (v13 % 0x38);
      }
      if (v12 == v14) {
        break;
      }
      uint64_t v15 = v12 - *v11;
      unint64_t v16 = 0x8E38E38E38E38E39 * (v15 >> 3);
      if (v15 < -71)
      {
        unint64_t v22 = 54 - v16;
        unint64_t v23 = (54 - v16) / 0x38;
        long long v19 = &v11[-v23];
        uint64_t v20 = *v19;
        uint64_t v21 = *v19 + 72 * (56 * v23 - v22) + 3960;
      }
      else
      {
        unint64_t v17 = v16 + 1;
        unint64_t v18 = (v16 + 1) / 0x38;
        long long v19 = &v11[v18];
        uint64_t v20 = *v19;
        uint64_t v21 = *v19 + 72 * (v17 - 56 * v18);
      }
      while (1)
      {
        if (v10 == v9)
        {
          unint64_t v47 = 0;
        }
        else
        {
          unint64_t v46 = *(void *)(a1 + 48) + *(void *)(a1 + 40);
          unint64_t v47 = *(void *)(v9 + 8 * (v46 / 0x38)) + 72 * (v46 % 0x38);
        }
        if (v21 == v47) {
          break;
        }
        double v24 = 0.0;
        for (uint64_t i = 16; i != 40; i += 8)
        {
          double v26 = *(double *)(v12 + i) - *(double *)(v21 + i);
          double v24 = v24 + v26 * v26;
        }
        double v27 = sqrt(v24);
        if (v27 > 2.0 && v27 < 15.0)
        {
          uint64_t v29 = 0;
          double v30 = 0.0;
          do
          {
            float64_t v31 = v58.f64[v29] - *(double *)(v21 + 16 + v29 * 8);
            double v30 = v30 + v31 * v31;
            ++v29;
          }
          while (v29 != 3);
          uint64_t v32 = 0;
          double v33 = 0.0;
          do
          {
            double v33 = v33
                + (v58.f64[v32] - *(double *)(v12 + v32 * 8 + 16)) * (v58.f64[v32] - *(double *)(v12 + v32 * 8 + 16));
            ++v32;
          }
          while (v32 != 3);
          double v34 = fabs(sqrt(v30) - sqrt(v33) + *(double *)(v12 + 8) - *(double *)(v21 + 8));
          long long v35 = v60;
          if (v60 >= v61)
          {
            long long v37 = (double *)__p;
            uint64_t v38 = ((char *)v60 - (unsigned char *)__p) >> 3;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61) {
              sub_1000267C4();
            }
            uint64_t v40 = (char *)v61 - (unsigned char *)__p;
            if (((char *)v61 - (unsigned char *)__p) >> 2 > v39) {
              unint64_t v39 = v40 >> 2;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41)
            {
              uint64_t v42 = (char *)sub_100056BF0((uint64_t)&v61, v41);
              long long v37 = (double *)__p;
              long long v35 = v60;
            }
            else
            {
              uint64_t v42 = 0;
            }
            char v43 = (double *)&v42[8 * v38];
            *char v43 = v34;
            uint64_t v36 = v43 + 1;
            while (v35 != v37)
            {
              uint64_t v44 = *((void *)v35-- - 1);
              *((void *)v43-- - 1) = v44;
            }
            stat __p = v43;
            int v60 = v36;
            int v61 = (double *)&v42[8 * v41];
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            double *v60 = v34;
            uint64_t v36 = v35 + 1;
          }
          int v60 = v36;
          uint64_t v20 = *v19;
        }
        v21 += 72;
        if (v21 - v20 == 4032)
        {
          uint64_t v45 = v19[1];
          ++v19;
          uint64_t v20 = v45;
          uint64_t v21 = v45;
        }
        uint64_t v9 = *(void *)(a1 + 16);
        uint64_t v10 = *(void *)(a1 + 24);
      }
      v12 += 72;
      long long v11 = v57;
      if (v12 - *v57 == 4032)
      {
        long long v11 = v57 + 1;
        unint64_t v12 = v57[1];
        goto LABEL_11;
      }
    }
    int v48 = (double *)__p;
    if ((unint64_t)((char *)v60 - (unsigned char *)__p) >= 0x28)
    {
      unint64_t v49 = ((char *)v60 - (unsigned char *)__p) >> 3;
      *(unsigned char *)(a1 + 1) = 1;
      if (v49 <= 1) {
        uint64_t v50 = 1;
      }
      else {
        uint64_t v50 = v49;
      }
      double v51 = 0.0;
      do
      {
        double v52 = *v48++;
        double v51 = v51 + v52 * v52;
        --v50;
      }
      while (v50);
      double v53 = v51 / (double)v49;
      if (v53 < 3.0) {
        char v54 = v56;
      }
      else {
        char v54 = 0;
      }
      if (v53 < 0.5 || (v54 & 1) != 0)
      {
        *(unsigned char *)a1 = 0;
        uint64_t v6 = 1;
      }
      else
      {
        if (v56) {
          sub_100359184(a1);
        }
        uint64_t v6 = 0;
        *(unsigned char *)a1 = 1;
      }
    }
    else
    {
      uint64_t v6 = 2 * (*(unsigned char *)a1 == 0);
    }
  }
  else
  {
    uint64_t v6 = 2;
  }
  if (__p)
  {
    int v60 = (double *)__p;
    operator delete(__p);
  }
  return v6;
}

void sub_100359698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003596BC(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4)
{
  if (*(_DWORD *)(a3 + 80) != 2) {
    return 0;
  }
  float v4 = *(float *)(a2 + 24);
  BOOL v5 = !*(unsigned char *)(a2 + 208) || *(unsigned char *)(a2 + 192) == 0;
  if (v5 || v4 == 1.1755e-38) {
    return 0;
  }
  double v9 = v4;
  __double2 v10 = __sincos_stret(*(double *)(a2 + 200) * 3.14159265 / 180.0);
  float v11 = v10.__cosval * v9;
  float v12 = v10.__sinval * v9;
  float v18 = v11;
  float v19 = v12;
  v20.columns[0] = (simd_float2)sub_100340A70((float32x4_t *)a3);
  simd_float2x2 v13 = __invert_f2(v20);
  float32x2_t v14 = vmla_n_f32(vmul_n_f32((float32x2_t)v13.columns[0], v18), (float32x2_t)v13.columns[1], v19);
  long long v15 = *(_OWORD *)(a3 + 64);
  float v16 = COERCE_FLOAT(*(void *)(a3 + 72));
  *(float *)&long long v15 = *(float *)&v15 + v14.f32[1];
  *a4 = vcvtq_f64_f32(*(float32x2_t *)&v15);
  a4[1].f64[0] = (float)(v16 + v14.f32[0]);
  return 1;
}

uint64_t sub_1003597A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t sub_1003597B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_1003597B8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 2) = a2;
  return result;
}

void sub_1003597C0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x38;
  unint64_t v4 = v2 - 56;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_100056BF0(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    float v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_100151930((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      char v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_100151A50(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100359A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100359AD8()
{
  qword_1008AA618 = 0;
  qword_1008AA620 = 0;
  qword_1008AA628 = 0;
  uint64_t v0 = operator new(0x40uLL);
  qword_1008AA620 = (uint64_t)(v0 + 4);
  qword_1008AA628 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_1004C2430;
  v0[1] = unk_1004C2440;
  v0[2] = xmmword_1004C2450;
  v0[3] = unk_1004C2460;
  qword_1008AA618 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA618, (void *)&_mh_execute_header);
  qword_1008AA638 = 0;
  unk_1008AA640 = 0;
  qword_1008AA630 = 0;
  uint64_t v1 = operator new(0x10uLL);
  qword_1008AA638 = (uint64_t)(v1 + 1);
  unk_1008AA640 = v1 + 1;
  _OWORD *v1 = xmmword_1004C2470;
  qword_1008AA630 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA630, (void *)&_mh_execute_header);
}

uint64_t sub_100359BB0(uint64_t a1)
{
  sub_100054E28((uint64_t)v10);
  *(void *)((char *)&v10[2] + *(void *)(v10[0] - 24)) = 2;
  unint64_t v2 = sub_100056628(v11, (uint64_t)"<", 1);
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  uint64_t v6 = sub_100056628(v2, v4, v5);
  sub_100056628(v6, (uint64_t)" | ", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  sub_100056628(v7, (uint64_t)">", 1);
  std::stringbuf::str();
  *(void *)((char *)v10
  v11[0] = v8;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100359D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100055100((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100359DA4(uint64_t a1)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)a1 = off_100862460;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  operator new();
}

void sub_100359ECC()
{
}

uint64_t sub_100359F84(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 48))(*(void *)(a1 + 48));
}

uint64_t sub_100359FAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 8))();
}

uint64_t sub_100359FD4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  unint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 56) + 16);

  return v2();
}

uint64_t sub_10035A058(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
  unint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 48) + 24);

  return v2();
}

uint64_t sub_10035A0DC(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56));
  unint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 48) + 48);

  return v2();
}

uint64_t sub_10035A160(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 272))();
}

uint64_t sub_10035A190(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 72))();
}

uint64_t sub_10035A1B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))();
}

uint64_t sub_10035A1E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 224))();
}

uint64_t sub_10035A208(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 240))();
}

uint64_t sub_10035A230(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 256))();
}

uint64_t sub_10035A260(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))();
}

uint64_t sub_10035A288(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 296))();
}

uint64_t sub_10035A2B8()
{
  return 1;
}

uint64_t sub_10035A2C0()
{
  return 1;
}

uint64_t sub_10035A2C8()
{
  return 1;
}

uint64_t sub_10035A2D0()
{
  return 1;
}

uint64_t sub_10035A2D8()
{
  return 1;
}

uint64_t sub_10035A2E0()
{
  return 1;
}

uint64_t sub_10035A2E8()
{
  return 0;
}

uint64_t sub_10035A2F0()
{
  return 0;
}

uint64_t sub_10035A2F8()
{
  return 1;
}

uint64_t sub_10035A300()
{
  return 1;
}

uint64_t sub_10035A308()
{
  return 1;
}

uint64_t sub_10035A310()
{
  return 1;
}

uint64_t sub_10035A318()
{
  return 1;
}

uint64_t sub_10035A320()
{
  return 1;
}

uint64_t sub_10035A328()
{
  return 1;
}

uint64_t sub_10035A330()
{
  return 1;
}

void sub_10035A33C(void *a1)
{
  sub_10035A374(a1);

  operator delete();
}

void *sub_10035A374(void *a1)
{
  *a1 = off_100862460;
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 368))(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 368))(v3);
  }
  return a1;
}

uint64_t sub_10035A424()
{
  qword_1008AA648 = 0;
  qword_1008AA650 = 0;
  qword_1008AA658 = 0;
  uint64_t v0 = operator new(0x40uLL);
  qword_1008AA650 = (uint64_t)(v0 + 4);
  qword_1008AA658 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_1004C2480;
  v0[1] = unk_1004C2490;
  v0[2] = xmmword_1004C24A0;
  v0[3] = unk_1004C24B0;
  qword_1008AA648 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA648, (void *)&_mh_execute_header);
  qword_1008AA668 = 0;
  unk_1008AA670 = 0;
  qword_1008AA660 = 0;
  uint64_t v1 = operator new(0x10uLL);
  qword_1008AA668 = (uint64_t)(v1 + 1);
  unk_1008AA670 = v1 + 1;
  _OWORD *v1 = xmmword_1004C24C0;
  qword_1008AA660 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA660, (void *)&_mh_execute_header);
}

uint64_t sub_10035A4FC(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1004C2510;
  uint64_t v2 = a1 + 40;
  *(void *)(a1 + 64) = 0x100000003;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = off_100861B38;
  *(_OWORD *)(a1 + 48) = xmmword_1004C1B50;
  *(void *)(a1 + 72) = a1 + 80;
  uint64_t v3 = a1 + 104;
  *(void *)(a1 + 128) = 0x100000003;
  *(void *)(a1 + 104) = off_100861B38;
  *(_OWORD *)(a1 + 112) = xmmword_1004C1B50;
  *(void *)(a1 + 136) = a1 + 144;
  uint64_t v4 = a1 + 168;
  *(void *)(a1 + 192) = 0x100000003;
  *(void *)(a1 + 168) = off_100861B38;
  *(_OWORD *)(a1 + 176) = xmmword_1004C1B50;
  *(void *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 232) = xmmword_1004C2520;
  *(void *)(a1 + 248) = 0xBFFBB67AE8584CAALL;
  long double v5 = erf(1.73205081);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  *(long double *)(a1 + 296) = v5;
  long double v6 = erf(-1.73205081);
  unsigned int v7 = 0;
  *(_OWORD *)(a1 + 312) = xmmword_1004C2590;
  *(_OWORD *)(a1 + 328) = unk_1004C25A0;
  *(long double *)(a1 + 304) = v6;
  *(void *)(a1 + 344) = 0x3FC5555555555555;
  *(_OWORD *)(a1 + 352) = xmmword_1004C25B8;
  *(_OWORD *)(a1 + 368) = unk_1004C25C8;
  *(void *)(a1 + 384) = 0x3FC5555555555555;
  do
  {
    *(void *)sub_1003416AC(v3, v7) = 0;
    *(void *)sub_1003416AC(v4, v7) = 0;
    *(void *)sub_1003416AC(v2, v7++) = 0;
  }
  while (v7 != 3);
  uint64_t v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,SyntheticApertureRangeFilter constructed", v10, 2u);
  }
  return a1;
}

void sub_10035A6F0(_Unwind_Exception *a1)
{
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void sub_10035A74C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double v6 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    double v7 = *(double *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 96);
    uint64_t v11 = *(void *)(a2 + 104);
    uint64_t v12 = *(void *)(a2 + 112);
    *(_DWORD *)long long buf = 134219264;
    double v47 = v7;
    __int16 v48 = 2048;
    uint64_t v49 = v8;
    __int16 v50 = 2048;
    uint64_t v51 = v9;
    __int16 v52 = 2048;
    uint64_t v53 = v10;
    __int16 v54 = 2048;
    uint64_t v55 = v11;
    __int16 v56 = 2048;
    uint64_t v57 = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Measurement added with VIO: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, position [%3.2f, %3.2f, %3.2f] m", buf, 0x3Eu);
  }
  uint64_t v40 = 0x100000003;
  long long v39 = xmmword_1004C1B50;
  uint64_t v38 = off_100861B38;
  unint64_t v41 = &v42;
  sub_1003411F0(&v38, 3, 1);
  sub_100341240((uint64_t)&v38, 0.0);
  uint64_t v35 = 0x100000004;
  unint64_t v33 = off_100861BC8;
  long long v34 = xmmword_1004C1B60;
  uint64_t v36 = &v37;
  sub_1003411F0(&v33, 4, 1);
  sub_100341240((uint64_t)&v33, 0.0);
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v14 = a2 + 8 * i;
    uint64_t v15 = *(void *)(v14 + 96);
    *(void *)sub_1003416AC((uint64_t)&v38, i) = v15;
    uint64_t v16 = *(void *)(v14 + 120);
    *(void *)sub_1003416AC((uint64_t)&v33, i) = v16;
  }
  uint64_t v17 = *(void *)(a2 + 144);
  *(void *)sub_1003416AC((uint64_t)&v33, 3u) = v17;
  sub_1003956B4((uint64_t)&v33, (uint64_t)buf);
  uint64_t v44 = 0x100000003;
  *(_OWORD *)&v43[8] = xmmword_1004C1B50;
  *(void *)char v43 = off_100861B38;
  v45[0] = &v45[1];
  sub_1003419A0((uint64_t)buf, a1 + 104, (uint64_t)v43);
  uint64_t v30 = 0x100000003;
  uint64_t v28 = off_100861B38;
  long long v29 = xmmword_1004C1B50;
  long long v31 = &v32;
  sub_100342718((uint64_t)&v38, (uint64_t)v43, (uint64_t)&v28);
  if (*(unsigned char *)a1)
  {
    int v18 = *(_DWORD *)(a1 + 8);
    if (v18 == 1)
    {
      sub_10035ACA0(a1, (uint64_t)&v28);
    }
    else if (!v18)
    {
      float v19 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Range filter transitioning from non-VIO to VIO mode", v43, 2u);
      }
      sub_10035ABA0(a1, *(double *)a2);
      sub_10034226C(a1 + 40, (uint64_t)&v28);
    }
    sub_10035AF8C(a1, 0, *(double *)(a2 + 8), *(double *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
    sub_10034226C(a1 + 40, (uint64_t)&v28);
    *(unsigned char *)a1 = 1;
    int64_t v20 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = *(void *)(a1 + 24);
      *(_DWORD *)char v43 = 134218240;
      *(void *)&v43[4] = v21;
      *(_WORD *)&v43[12] = 2048;
      *(void *)&v43[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Initializing range filter with VIO: range %f m, uncertainty %f m", v43, 0x16u);
    }
  }
  double v23 = *(double *)a2;
  *(_DWORD *)(a1 + 8) = 1;
  *(double *)(a1 + 32) = v23;
  uint64_t v24 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *(void *)(a1 + 16);
    uint64_t v26 = *(void *)(a1 + 24);
    *(_DWORD *)char v43 = 134218754;
    *(double *)&v43[4] = v23;
    *(_WORD *)&v43[12] = 2048;
    *(void *)&v43[14] = v25;
    *(_WORD *)&v43[22] = 2048;
    uint64_t v44 = v26;
    LOWORD(v45[0]) = 2080;
    *(void *)((char *)v45 + 2) = "YES";
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Filter state after meas with VIO: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, with VIO: %s", v43, 0x2Au);
  }
  long long v27 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 16) = v27;
  *(double *)(a3 + 8) = fmax(*(double *)(a3 + 8), 0.0);
}

void sub_10035ABA0(uint64_t a1, double a2)
{
  double v3 = *(double *)(a1 + 32);
  double v4 = *(double *)(a1 + 24) + (a2 - v3) * 0.25;
  *(double *)(a1 + 24) = v4;
  long double v5 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (*(_DWORD *)(a1 + 8) == 1) {
      double v7 = "YES";
    }
    else {
      double v7 = "NO";
    }
    int v8 = 134218754;
    double v9 = v3;
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    __int16 v12 = 2048;
    double v13 = v4;
    __int16 v14 = 2080;
    uint64_t v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Filter state after propagation with time: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, with VIO: %s", (uint8_t *)&v8, 0x2Au);
  }
}

void sub_10035ACA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 40;
  uint64_t v21 = 0x100000003;
  float v19 = off_100861B38;
  long long v20 = xmmword_1004C1B50;
  uint64_t v22 = &v23;
  sub_1003418A0(a2, a1 + 40, (uint64_t)&v19);
  uint64_t v31 = 0x100000003;
  long long v30 = xmmword_1004C1B50;
  long long v29 = off_100861B38;
  uint64_t v32 = &v33;
  uint64_t v35 = 0x100000134;
  *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B70;
  *(void *)long long buf = off_100861C10;
  v36[0] = &v36[1];
  uint64_t v26 = 0x100000003;
  uint64_t v24 = off_100861B38;
  long long v25 = xmmword_1004C1B50;
  long long v27 = &v28;
  sub_100341B04((uint64_t)&v19, (uint64_t)&v29, (uint64_t)buf, (uint64_t)&v24, "2");
  double v6 = v5;
  sub_10034226C(v4, a2);
  double v8 = *(double *)(a1 + 16);
  double v7 = *(double *)(a1 + 24);
  if (v8 + v7 * -1.73205081 <= 0.0)
  {
    double v15 = sqrt(v6 * 0.5 * (v6 * 0.5) + v7 * v7);
    *(double *)(a1 + 24) = v15;
  }
  else
  {
    uint64_t v9 = 0;
    double v10 = 0.0;
    do
    {
      double v11 = v8 + v7 * *(double *)(a1 + v9 + 232);
      double v12 = sqrt(v6 * v6 + v11 * v11 + v6 * -2.0 * v11 * *(double *)(a1 + v9 + 272));
      *(double *)&buf[v9] = v12;
      double v10 = v10 + *(double *)(a1 + v9 + 312) * v12;
      v9 += 8;
    }
    while (v9 != 40);
    uint64_t v13 = 0;
    double v14 = 0.0;
    do
    {
      double v14 = v14 + *(double *)(a1 + 352 + v13) * (*(double *)&buf[v13] - v10) * (*(double *)&buf[v13] - v10);
      v13 += 8;
    }
    while (v13 != 40);
    double v15 = sqrt(v14);
    *(double *)(a1 + 16) = v10;
    *(double *)(a1 + 24) = v15;
    double v8 = v10;
  }
  uint64_t v16 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    if (*(_DWORD *)(a1 + 8) == 1) {
      int v18 = "YES";
    }
    else {
      int v18 = "NO";
    }
    *(_DWORD *)long long buf = 134218754;
    *(void *)&uint8_t buf[4] = v17;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v35 = *(void *)&v15;
    LOWORD(v36[0]) = 2080;
    *(void *)((char *)v36 + 2) = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Filter state after propagation with pose: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, with VIO: %s", buf, 0x2Au);
  }
}

void sub_10035AF8C(uint64_t a1, int a2, double a3, double a4)
{
  double v7 = a4 * a4;
  double v9 = *(double *)(a1 + 16);
  double v8 = *(double *)(a1 + 24);
  double v10 = a4 * a4 + v8 * v8;
  double v11 = sqrt(v10);
  double v12 = (a3 - v9) / v11;
  if (a2 && v12 > 8.0)
  {
    uint64_t v13 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v16 = 134218496;
    double v17 = v9;
    __int16 v18 = 2048;
    double v19 = a3;
    __int16 v20 = 2048;
    double v21 = v12;
    double v14 = "#sa_algo_rangefilter,LoS->nLoS event detected by the range filter for a moving target: Previous range %f m, Cu"
          "rrent range %f m, Normalized change %f";
LABEL_9:
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v16, 0x20u);
    return;
  }
  if ((a2 & 1) == 0 && v12 > 6.0)
  {
    uint64_t v13 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v16 = 134218496;
    double v17 = v9;
    __int16 v18 = 2048;
    double v19 = a3;
    __int16 v20 = 2048;
    double v21 = v12;
    double v14 = "#sa_algo_rangefilter,LoS->nLoS event detected by the range filter for a static target: Previous range %f m, Cu"
          "rrent range %f m, Normalized change %f";
    goto LABEL_9;
  }
  if (v12 >= -6.0)
  {
    *(double *)(a1 + 16) = (v7 * v9 + a3 * (v8 * v8)) / v10;
    *(double *)(a1 + 24) = v8 * a4 / v11;
  }
  else
  {
    double v15 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      int v16 = 134218496;
      double v17 = v9;
      __int16 v18 = 2048;
      double v19 = a3;
      __int16 v20 = 2048;
      double v21 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#sa_algo_rangefilter,nLos->LoS event detected by the range filter: Previous range %f m, Current range %f m, Normalized change %f", (uint8_t *)&v16, 0x20u);
      double v15 = qword_1008ABDE0;
    }
    *(double *)(a1 + 16) = a3;
    *(double *)(a1 + 24) = a4;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 134218240;
      double v17 = a3;
      __int16 v18 = 2048;
      double v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Re-initializing range filter: range %f m, uncertainty %f m", (uint8_t *)&v16, 0x16u);
    }
  }
}

void sub_10035B1E0(uint64_t a1@<X0>, double *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  double v10 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    double v11 = *a2;
    uint64_t v12 = *((void *)a2 + 1);
    uint64_t v13 = *((void *)a2 + 2);
    double v14 = "YES";
    if (a3) {
      double v15 = "YES";
    }
    else {
      double v15 = "NO";
    }
    if (!a4) {
      double v14 = "NO";
    }
    int v33 = 134219010;
    double v34 = v11;
    __int16 v35 = 2048;
    uint64_t v36 = v12;
    __int16 v37 = 2048;
    uint64_t v38 = v13;
    __int16 v39 = 2080;
    uint64_t v40 = v15;
    __int16 v41 = 2080;
    uint64_t v42 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Measurement added without VIO: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, isCompanionMoving %s, isDeviceMoving %s", (uint8_t *)&v33, 0x34u);
  }
  if (*(unsigned char *)a1)
  {
    if (a3 & 1) != 0 || (a4)
    {
      sub_10035ABA0(a1, *a2);
      double v19 = a2[1];
      double v20 = a2[2];
      uint64_t v21 = a1;
      int v22 = a3;
    }
    else
    {
      int v16 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        double v17 = a2[1];
        uint64_t v18 = *((void *)a2 + 2);
        int v33 = 134218240;
        double v34 = v17;
        __int16 v35 = 2048;
        uint64_t v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Range filter update with stationary companion and device: range %f m, uncertainty %f m", (uint8_t *)&v33, 0x16u);
      }
      double v19 = a2[1];
      double v20 = a2[2];
      uint64_t v21 = a1;
      int v22 = 0;
    }
    sub_10035AF8C(v21, v22, v19, v20);
  }
  else
  {
    double v23 = a2[1];
    *(double *)(a1 + 16) = v23;
    uint64_t v24 = *((void *)a2 + 2);
    *(void *)(a1 + 24) = v24;
    *(unsigned char *)a1 = 1;
    long long v25 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v33 = 134218240;
      double v34 = v23;
      __int16 v35 = 2048;
      uint64_t v36 = v24;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Initializing range filter without VIO: range %f m, uncertainty %f m", (uint8_t *)&v33, 0x16u);
    }
  }
  long long v27 = (_DWORD *)(a1 + 8);
  int v26 = *(_DWORD *)(a1 + 8);
  *(double *)(a1 + 32) = *a2;
  uint64_t v28 = qword_1008ABDE0;
  if (v26 == 1 && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v33) = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Range filter transitioning from VIO to non-VIO mode", (uint8_t *)&v33, 2u);
    uint64_t v28 = qword_1008ABDE0;
  }
  _DWORD *v27 = 0;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = *(void *)(a1 + 24);
    double v29 = *(double *)(a1 + 32);
    uint64_t v31 = *(void *)(a1 + 16);
    int v33 = 134218754;
    double v34 = v29;
    __int16 v35 = 2048;
    uint64_t v36 = v31;
    __int16 v37 = 2048;
    uint64_t v38 = v30;
    __int16 v39 = 2080;
    uint64_t v40 = "NO";
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#sa_algo_rangefilter,Filter state after meas without VIO: timestamp %3.2f s, range %3.2f m, uncertainty %3.2f m, with VIO: %s", (uint8_t *)&v33, 0x2Au);
  }
  long long v32 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a5 = *(_OWORD *)v27;
  *(_OWORD *)(a5 + 16) = v32;
  *(double *)(a5 + 8) = fmax(*(double *)(a5 + 8), 0.0);
}

uint64_t sub_10035B4EC()
{
  qword_1008AA678 = 0;
  qword_1008AA680 = 0;
  qword_1008AA688 = 0;
  uint64_t v0 = operator new(0x40uLL);
  qword_1008AA680 = (uint64_t)(v0 + 4);
  qword_1008AA688 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_1004C2540;
  v0[1] = unk_1004C2550;
  v0[2] = xmmword_1004C2560;
  v0[3] = unk_1004C2570;
  qword_1008AA678 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA678, (void *)&_mh_execute_header);
  qword_1008AA698 = 0;
  unk_1008AA6A0 = 0;
  qword_1008AA690 = 0;
  uint64_t v1 = operator new(0x10uLL);
  qword_1008AA698 = (uint64_t)(v1 + 1);
  unk_1008AA6A0 = v1 + 1;
  _OWORD *v1 = xmmword_1004C2580;
  qword_1008AA690 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA690, (void *)&_mh_execute_header);
}

unsigned char *sub_10035B5C4(unsigned char *a1)
{
  *a1 = 0;
  a1[8] = 0;
  a1[16] = 0;
  a1[64] = 0;
  a1[72] = 0;
  a1[96] = 0;
  a1[104] = 0;
  a1[152] = 0;
  a1[160] = 0;
  a1[344] = 0;
  a1[352] = 0;
  a1[368] = 0;
  a1[376] = 0;
  a1[384] = 0;
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#cl_algo,CLLocationBasedArrowFilter initialized", v4, 2u);
  }
  return a1;
}

void sub_10035B670(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 364) = 4;
  *(unsigned char *)(a2 + 368) = 1;
  if (*(unsigned char *)(a1 + 96) && *(unsigned char *)(a1 + 152) && *(unsigned char *)(a1 + 64) && *(unsigned char *)(a1 + 384))
  {
    double v4 = *(double *)(a1 + 48);
    if (v4 > 3.0)
    {
      double v5 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
      {
        int v47 = 134217984;
        *(double *)__int16 v48 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#cl_algo,#clcc,self location speed exceeds a brisk walking pace,inflating uncertainty,%.1lf", (uint8_t *)&v47, 0xCu);
      }
      *(double *)(a1 + 40) = fmin(*(double *)(a1 + 40), 200.0);
    }
    double v6 = *(double *)(a1 + 136);
    if (v6 > 3.0)
    {
      double v7 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
      {
        int v47 = 134217984;
        *(double *)__int16 v48 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#cl_algo,#clcc,peer location speed exceeds a brisk walking pace,inflating uncertainty,%.1lf", (uint8_t *)&v47, 0xCu);
      }
      *(double *)(a1 + 128) = fmin(*(double *)(a1 + 128), 200.0);
    }
    if (!*(unsigned char *)(a1 + 384) || !*(unsigned char *)(a1 + 96)) {
      goto LABEL_68;
    }
    double v8 = *(double *)(a1 + 376);
    int v9 = *(unsigned __int8 *)(a1 + 344);
    double v10 = *(unsigned char *)(a1 + 344) ? v8 - *(double *)(a1 + 168) : INFINITY;
    if (!*(unsigned char *)(a1 + 64) || !*(unsigned char *)(a1 + 152)) {
      goto LABEL_68;
    }
    double v11 = *(double *)(a1 + 72);
    double v12 = vabdd_f64(v8, v11);
    double v13 = *(double *)(a1 + 16);
    double v14 = vabdd_f64(v8, v13);
    double v15 = *(double *)(a1 + 104);
    double v16 = vabdd_f64(v8, v15);
    double v17 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      if (v9) {
        uint64_t v46 = *(void *)(a1 + 168);
      }
      else {
        uint64_t v46 = 0x7FF0000000000000;
      }
      int v47 = 134219520;
      *(double *)__int16 v48 = v8;
      *(_WORD *)&v48[8] = 2048;
      double v49 = v11;
      __int16 v50 = 2048;
      double v51 = v13;
      __int16 v52 = 2048;
      double v53 = v15;
      __int16 v54 = 2048;
      uint64_t v55 = v46;
      __int16 v56 = 2048;
      double v57 = v16;
      __int16 v58 = 2048;
      double v59 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#cl_algo,event timestamp: %f, heading timestamp: %f, self loc timestamp: %f, peer loc timestamp: %f, range timestamp: %f, peer loc age, %.1lf, self loc age, %.1lf", (uint8_t *)&v47, 0x48u);
    }
    if (v12 > 1.0 || v14 > 12.0 || v16 > 12.0)
    {
      uint64_t v21 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v47 = 134218496;
      *(double *)__int16 v48 = v12;
      *(_WORD *)&v48[8] = 2048;
      double v49 = v14;
      __int16 v50 = 2048;
      double v51 = v16;
      int v22 = "#cl_algo,CLLocationBasedArrowFilter,data stale,not populating a solution,heading_age,%.1lf,abs_self_location"
            "_age_s,%.1lf,abs_peer_location_age_s,%.1lf";
      double v23 = v21;
      os_log_type_t v24 = OS_LOG_TYPE_DEFAULT;
      uint32_t v25 = 32;
      goto LABEL_62;
    }
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_68;
    }
    CLClientGetDistanceCoordinates();
    double v19 = v18;
    if (*(unsigned char *)(a1 + 344)) {
      double v20 = *(float *)(a1 + 176);
    }
    else {
      double v20 = INFINITY;
    }
    double v26 = 2.0;
    if (*(unsigned char *)(a1 + 368) && *(unsigned char *)(a1 + 384) && vabdd_f64(*(double *)(a1 + 376), *(double *)(a1 + 352)) < 12.0)
    {
      int v27 = *(_DWORD *)(a1 + 360);
      double v28 = 2.0;
      if (v27 == 1) {
        double v28 = 1.0;
      }
      if (v27) {
        double v26 = v28;
      }
      else {
        double v26 = 0.5;
      }
    }
    if (v20 + v10 * 2.0 >= v18 || *(unsigned char *)(a1 + 344) == 0 || v10 > 60.0) {
      double v31 = v18;
    }
    else {
      double v31 = v20 + v10 * 2.0;
    }
    long long v32 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
    {
      int v47 = 134218752;
      *(double *)__int16 v48 = v19;
      *(_WORD *)&v48[8] = 2048;
      double v49 = v20;
      __int16 v50 = 2048;
      double v51 = fabs(v10);
      __int16 v52 = 2048;
      double v53 = v31;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#cl_algo,CLLocationBasedArrowFilter,location_range_m,%.1lf,uwb_range_m,%.1lf,abs_uwb_range_age,%.1lf,fused_range_m,%.1lf", (uint8_t *)&v47, 0x2Au);
    }
    uint64_t v33 = *(unsigned char *)(a1 + 8) ? *(void *)a1 : 0;
    if (!*(unsigned char *)(a1 + 384)) {
      goto LABEL_68;
    }
    double v34 = sqrt((*(double *)(a1 + 128) + v26 * v16) * (*(double *)(a1 + 128) + v26 * v16)+ (*(double *)(a1 + 40) + v14 * 2.0) * (*(double *)(a1 + 40) + v14 * 2.0));
    uint64_t v35 = *(void *)(a1 + 376);
    float v36 = v19;
    *(void *)(a2 + 8) = v33;
    *(void *)(a2 + 16) = v35;
    *(float *)(a2 + 24) = v36;
    *(_DWORD *)(a2 + 28) = 4;
    *(unsigned char *)(a2 + 56) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(unsigned char *)(a2 + 60) = 0;
    *(unsigned char *)(a2 + 64) = 0;
    *(unsigned char *)(a2 + 68) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(_WORD *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    double v37 = v34 / 1.41421356;
    *(double *)(a2 + 112) = v34 / 1.41421356;
    *(unsigned char *)(a2 + 136) = 0;
    *(void *)(a2 + 120) = 1;
    *(void *)(a2 + 128) = 0;
    *(unsigned char *)(a2 + 160) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 168) = 0;
    *(unsigned char *)(a2 + 192) = 1;
    if (!*(unsigned char *)(a1 + 152) || (double v38 = sub_10035BC74(a1 + 16, a1 + 104), !*(unsigned char *)(a1 + 96))) {
LABEL_68:
    }
      sub_10000AE44();
    long double v39 = fmod(v38 + 360.0, 360.0);
    double v40 = fmod(v39 - *(double *)(a1 + 80) + 180.0, 360.0);
    *(unsigned char *)(a2 + 208) = 1;
    if (v40 < 0.0) {
      double v40 = v40 + 360.0;
    }
    *(double *)(a2 + 200) = v40 + -180.0;
    double v41 = v37 / v31 * 57.2957795;
    *(double *)(a2 + 336) = v41;
    *(unsigned char *)(a2 + 344) = 1;
    *(double *)(a2 + 320) = sqrt(*(double *)(a1 + 88) * *(double *)(a1 + 88) + v41 * v41);
    *(unsigned char *)(a2 + 328) = 1;
    int v42 = *(unsigned __int8 *)(a1 + 56);
    if (*(unsigned char *)(a1 + 56)) {
      BOOL v43 = *(unsigned char *)(a1 + 144) != 0;
    }
    else {
      BOOL v43 = 0;
    }
    *(_WORD *)(a2 + 352) = v43 | 0x100;
    uint64_t v44 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
    {
      int v45 = *(unsigned __int8 *)(a1 + 144);
      int v47 = 67109632;
      *(_DWORD *)__int16 v48 = v43;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = v42;
      LOWORD(v49) = 1024;
      *(_DWORD *)((char *)&v49 + 2) = v45;
      int v22 = "#cl_algo,#gri,findee,CLLocationBasedArrowFilter,producedInGoodEnvironmentalConditions,%d,self,%d,peer,%d";
      double v23 = v44;
      os_log_type_t v24 = OS_LOG_TYPE_INFO;
      uint32_t v25 = 20;
LABEL_62:
      _os_log_impl((void *)&_mh_execute_header, v23, v24, v22, (uint8_t *)&v47, v25);
    }
  }
}

long double sub_10035BC74(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 8) * 3.14159265 / 180.0;
  double v3 = *(double *)(a2 + 8) * 3.14159265 / 180.0;
  __double2 v4 = __sincos_stret(*(double *)(a2 + 16) * 3.14159265 / 180.0 - *(double *)(a1 + 16) * 3.14159265 / 180.0);
  __double2 v5 = __sincos_stret(v3);
  __double2 v6 = __sincos_stret(v2);
  return atan2(v5.__cosval * v4.__sinval, -(v6.__sinval * v5.__cosval) * v4.__cosval + v6.__cosval * v5.__sinval)
       * 180.0
       / 3.14159265;
}

__n128 sub_10035BD28(uint64_t a1, uint64_t a2)
{
  double v2 = (__n128 *)(a1 + 104);
  if (*(unsigned char *)(a1 + 152))
  {
    __n128 result = *(__n128 *)a2;
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 25);
    *double v2 = result;
    *(_OWORD *)(a1 + 120) = v4;
  }
  else
  {
    __n128 result = *(__n128 *)a2;
    long long v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 136) = v5;
    *double v2 = result;
    *(unsigned char *)(a1 + 152) = 1;
  }
  return result;
}

uint64_t sub_10035BD64(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 96);
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)(result + 72) = *(_OWORD *)a2;
  *(void *)(result + 88) = v3;
  if (!v2) {
    *(unsigned char *)(result + 96) = 1;
  }
  double v4 = *(double *)a2;
  if (!*(unsigned char *)(result + 384) || *(double *)(result + 376) < v4)
  {
    *(double *)(result + 376) = v4;
    *(unsigned char *)(result + 384) = 1;
  }
  return result;
}

uint64_t sub_10035BDAC(uint64_t result, long long *a2)
{
  int v2 = (_OWORD *)(result + 16);
  if (*(unsigned char *)(result + 64))
  {
    long long v3 = *a2;
    long long v4 = a2[1];
    *(_OWORD *)(result + 41) = *(long long *)((char *)a2 + 25);
    *int v2 = v3;
    *(_OWORD *)(result + 32) = v4;
  }
  else
  {
    long long v5 = *a2;
    long long v6 = a2[2];
    *(_OWORD *)(result + 32) = a2[1];
    *(_OWORD *)(result + 48) = v6;
    *int v2 = v5;
    *(unsigned char *)(result + 64) = 1;
  }
  double v7 = *(double *)a2;
  if (!*(unsigned char *)(result + 384) || *(double *)(result + 376) < v7)
  {
    *(double *)(result + 376) = v7;
    *(unsigned char *)(result + 384) = 1;
  }
  return result;
}

uint64_t sub_10035BE0C(uint64_t result, long long *a2)
{
  int v2 = *(unsigned __int8 *)(result + 344);
  long long v3 = a2[3];
  long long v5 = *a2;
  long long v4 = a2[1];
  *(_OWORD *)(result + 192) = a2[2];
  *(_OWORD *)(result + 208) = v3;
  *(_OWORD *)(result + 160) = v5;
  *(_OWORD *)(result + 176) = v4;
  long long v6 = a2[7];
  long long v8 = a2[4];
  long long v7 = a2[5];
  *(_OWORD *)(result + 256) = a2[6];
  *(_OWORD *)(result + 272) = v6;
  *(_OWORD *)(result + 224) = v8;
  *(_OWORD *)(result + 240) = v7;
  long long v10 = a2[9];
  long long v9 = a2[10];
  long long v11 = a2[8];
  *(void *)(result + 336) = *((void *)a2 + 22);
  *(_OWORD *)(result + 304) = v10;
  *(_OWORD *)(result + 320) = v9;
  *(_OWORD *)(result + 288) = v11;
  if (!v2) {
    *(unsigned char *)(result + 344) = 1;
  }
  double v12 = *((double *)a2 + 1);
  if (!*(unsigned char *)(result + 384) || *(double *)(result + 376) < v12)
  {
    *(double *)(result + 376) = v12;
    *(unsigned char *)(result + 384) = 1;
  }
  return result;
}

uint64_t sub_10035BE7C(uint64_t result, int *a2, double a3)
{
  if (!*(unsigned char *)(result + 384) || *(double *)(result + 376) < a3)
  {
    *(double *)(result + 376) = a3;
    *(unsigned char *)(result + 384) = 1;
  }
  int v3 = *a2;
  *(double *)(result + 352) = a3;
  *(_DWORD *)(result + 360) = v3;
  *(unsigned char *)(result + 368) = 1;
  return result;
}

uint64_t sub_10035BEB4(uint64_t result, double a2, double a3, double a4, double a5)
{
  *(void *)__n128 result = off_100862600;
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  *(double *)(result + 32) = a5;
  return result;
}

BOOL sub_10035BEDC(double *a1, long long **a2)
{
  double v4 = (*(double (**)(double *))(*(void *)a1 + 16))(a1);
  long long v5 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long v9 = 134217984;
    *(double *)&void v9[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#dec-proc, WRTT: Estimating shouldUnlock with unlockThreshold: %f", v9, 0xCu);
  }
  (*(void (**)(unsigned char *__return_ptr, double *))(*(void *)a1 + 32))(v9, a1);
  BOOL v6 = sub_10035C058(a1, (uint64_t *)v9, a2, v4);
  uint64_t v7 = *(void *)v9;
  *(void *)long long v9 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return v6;
}

void sub_10035C034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_100434780(a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10035C058(double *a1, uint64_t *a2, long long **a3, double a4)
{
  double v4 = *a3;
  long long v5 = a3[1];
  if (*a3 == v5) {
    return 0;
  }
  if (!*a2)
  {
    double v49 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "#dec-proc, Assertion failed", (uint8_t *)__p, 2u);
      double v49 = qword_1008ABDE0;
    }
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/NearbyAlgorithms/AutoUnloc"
                                    "k/NRBYPeerRangingDecisionProcessor.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 40;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = "filterRangesAndEstimateUnlock";
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "#dec-proc, %s:%d: assertion failure in %s", (uint8_t *)__p, 0x1Cu);
    }
    abort();
  }
  long long v9 = 0;
  memset(__p, 0, 24);
  do
  {
    double v10 = *((float *)v4 + 4);
    if (a1[1] < v10 && a1[2] > v10)
    {
      if (v9 >= __p[2])
      {
        double v20 = (char *)__p[0];
        unint64_t v21 = 0xD37A6F4DE9BD37A7 * ((v9 - (char *)__p[0]) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0x1642C8590B21642) {
          sub_1000267C4();
        }
        if (0xA6F4DE9BD37A6F4ELL * (((char *)__p[2] - (char *)__p[0]) >> 3) > v22) {
          unint64_t v22 = 0xA6F4DE9BD37A6F4ELL * (((char *)__p[2] - (char *)__p[0]) >> 3);
        }
        if (0xD37A6F4DE9BD37A7 * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0xB21642C8590B21) {
          unint64_t v23 = 0x1642C8590B21642;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23)
        {
          os_log_type_t v24 = (char *)sub_1001A0D08((uint64_t)&__p[2], v23);
          double v20 = (char *)__p[0];
          long long v9 = (char *)__p[1];
        }
        else
        {
          os_log_type_t v24 = 0;
        }
        uint32_t v25 = &v24[184 * v21];
        long long v26 = *v4;
        long long v27 = v4[1];
        long long v28 = v4[3];
        *((_OWORD *)v25 + 2) = v4[2];
        *((_OWORD *)v25 + 3) = v28;
        *(_OWORD *)uint32_t v25 = v26;
        *((_OWORD *)v25 + 1) = v27;
        long long v29 = v4[4];
        long long v30 = v4[5];
        long long v31 = v4[7];
        *((_OWORD *)v25 + 6) = v4[6];
        *((_OWORD *)v25 + 7) = v31;
        *((_OWORD *)v25 + 4) = v29;
        *((_OWORD *)v25 + 5) = v30;
        long long v32 = v4[8];
        long long v33 = v4[9];
        long long v34 = v4[10];
        *((void *)v25 + 22) = *((void *)v4 + 22);
        *((_OWORD *)v25 + 9) = v33;
        *((_OWORD *)v25 + 10) = v34;
        *((_OWORD *)v25 + 8) = v32;
        if (v9 == v20)
        {
          int v45 = &v24[184 * v21];
        }
        else
        {
          uint64_t v35 = &v24[184 * v21];
          do
          {
            long long v36 = *(_OWORD *)(v9 - 184);
            long long v37 = *(_OWORD *)(v9 - 168);
            long long v38 = *(_OWORD *)(v9 - 152);
            *(_OWORD *)(v35 - 136) = *(_OWORD *)(v9 - 136);
            *(_OWORD *)(v35 - 152) = v38;
            *(_OWORD *)(v35 - 168) = v37;
            *(_OWORD *)(v35 - 184) = v36;
            long long v39 = *(_OWORD *)(v9 - 120);
            long long v40 = *(_OWORD *)(v9 - 104);
            long long v41 = *(_OWORD *)(v9 - 88);
            *(_OWORD *)(v35 - 72) = *(_OWORD *)(v9 - 72);
            *(_OWORD *)(v35 - 88) = v41;
            *(_OWORD *)(v35 - 104) = v40;
            *(_OWORD *)(v35 - 120) = v39;
            long long v42 = *(_OWORD *)(v9 - 56);
            long long v43 = *(_OWORD *)(v9 - 40);
            long long v44 = *(_OWORD *)(v9 - 24);
            int v45 = v35 - 184;
            *((void *)v35 - 1) = *((void *)v9 - 1);
            *(_OWORD *)(v35 - 24) = v44;
            *(_OWORD *)(v35 - 40) = v43;
            *(_OWORD *)(v35 - 56) = v42;
            v9 -= 184;
            v35 -= 184;
          }
          while (v9 != v20);
        }
        long long v9 = v25 + 184;
        __p[0] = v45;
        __p[1] = v25 + 184;
        __p[2] = &v24[184 * v23];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        long long v11 = *v4;
        long long v12 = v4[1];
        long long v13 = v4[3];
        *((_OWORD *)v9 + 2) = v4[2];
        *((_OWORD *)v9 + 3) = v13;
        *(_OWORD *)long long v9 = v11;
        *((_OWORD *)v9 + 1) = v12;
        long long v14 = v4[4];
        long long v15 = v4[5];
        long long v16 = v4[7];
        *((_OWORD *)v9 + 6) = v4[6];
        *((_OWORD *)v9 + 7) = v16;
        *((_OWORD *)v9 + 4) = v14;
        *((_OWORD *)v9 + 5) = v15;
        long long v17 = v4[8];
        long long v18 = v4[9];
        long long v19 = v4[10];
        *((void *)v9 + 22) = *((void *)v4 + 22);
        *((_OWORD *)v9 + 9) = v18;
        *((_OWORD *)v9 + 10) = v19;
        *((_OWORD *)v9 + 8) = v17;
        v9 += 184;
      }
      __p[1] = v9;
    }
    double v4 = (long long *)((char *)v4 + 184);
  }
  while (v4 != v5);
  uint64_t v46 = *a2;
  (*(void (**)(void **__return_ptr, double *, void **))(*(void *)a1 + 48))(v50, a1, __p);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, double))(*(void *)v46 + 16))(v51, v46, v50, a4);
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  BOOL v47 = LOBYTE(v51[0]) != 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v47;
}

void sub_10035C458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

double sub_10035C49C(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

double sub_10035C4A4(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

void *sub_10035C4AC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_10035C4E0(a2, *(const void **)a1, *(void *)(a1 + 8), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
}

void *sub_10035C4E0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    __n128 result = sub_10035C55C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10035C540(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10035C55C(void *a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    sub_1000267C4();
  }
  __n128 result = (char *)sub_1001A0D08((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

__n128 sub_10035C5B4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  *a3 = 0;
  uint64_t v8 = *(void *)(a1 + 232);
  if (!v8
    || *(double *)a2 > *(double *)(*(void *)(*(void *)(a1 + 200)
                                             + (((unint64_t)(v8 + *(void *)(a1 + 224) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                                 + (((v8 + *(void *)(a1 + 224) - 1) & 0x1F) << 7)))
  {
    int v9 = *(_DWORD *)(a1 + 240);
    int v10 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 240) = v10;
    if (v9 != v10)
    {
      switch(v10)
      {
        case 2:
          long long v11 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            double v16 = *(double *)a2;
            *(_DWORD *)long long buf = 134217984;
            *(double *)&uint8_t buf[4] = v16;
            long long v13 = "#findalgs-rangeposeinterpolator,VIO Tracking State changed to Normal at %f s";
            goto LABEL_16;
          }
          break;
        case 1:
          long long v11 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            double v17 = *(double *)a2;
            *(_DWORD *)long long buf = 134217984;
            *(double *)&uint8_t buf[4] = v17;
            long long v13 = "#findalgs-rangeposeinterpolator,VIO Tracking State changed to Limited at %f s";
            goto LABEL_16;
          }
          break;
        case 0:
          long long v11 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            double v12 = *(double *)a2;
            *(_DWORD *)long long buf = 134217984;
            *(double *)&uint8_t buf[4] = v12;
            long long v13 = "#findalgs-rangeposeinterpolator,VIO Tracking State changed to Not Available at %f s";
LABEL_16:
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v13, buf, 0xCu);
          }
          break;
      }
    }
    int v18 = *(_DWORD *)(a2 + 80);
    if (v9 == 2 && v18 != 2)
    {
      double v20 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,VIO Tracking not normal anymore - resetting", buf, 2u);
      }
      if (*(unsigned char *)(a1 + 184))
      {
        unint64_t v21 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,VIO Tracking not normal before the cached measurement can be interpolated - passing the cached measurement to the range filter without VIO", buf, 2u);
        }
      }
      *a3 = 1;
      sub_10035CA90(a1);
      int v18 = *(_DWORD *)(a2 + 80);
    }
    if (v18 == 2)
    {
      if (*(unsigned char *)(a2 + 84))
      {
        unint64_t v22 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          double v23 = *(double *)a2;
          os_log_type_t v24 = "YES";
          if (*(unsigned char *)(a2 + 84)) {
            uint32_t v25 = "YES";
          }
          else {
            uint32_t v25 = "NO";
          }
          if (!*(unsigned char *)(a2 + 85)) {
            os_log_type_t v24 = "NO";
          }
          *(_DWORD *)long long buf = 134218498;
          *(double *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v25;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&unsigned char buf[24] = v24;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,VIO reported relocalization event at %f s, MAJOR: %s, MINOR: %s - resetting", buf, 0x20u);
        }
        *a3 = 1;
        sub_10035CA90(a1);
      }
      else
      {
        if (*(unsigned char *)(a2 + 85))
        {
          long long v26 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            double v27 = *(double *)a2;
            *(_DWORD *)long long buf = 134217984;
            *(double *)&uint8_t buf[4] = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,VIO reported MINOR relocalization event at %f s", buf, 0xCu);
          }
        }
        uint64_t v28 = 0;
        float32x4_t v29 = *(float32x4_t *)(a2 + 16);
        float32x4_t v30 = *(float32x4_t *)(a2 + 32);
        float32x4_t v31 = *(float32x4_t *)(a2 + 48);
        float32x4_t v32 = *(float32x4_t *)(a2 + 64);
        v42[0] = xmmword_1004C1B10;
        v42[1] = xmmword_1004C1B20;
        v42[2] = xmmword_1004C1B30;
        v42[3] = xmmword_1004C1B40;
        do
        {
          *(float32x4_t *)&buf[v28 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(v42[v28])), v30, *(float32x2_t *)&v42[v28], 1), v31, (float32x4_t)v42[v28], 2), v32, (float32x4_t)v42[v28], 3);
          ++v28;
        }
        while (v28 != 4);
        long long v33 = *(_OWORD *)buf;
        long long v34 = *(_OWORD *)&buf[16];
        long long v35 = v44;
        long long v36 = v45;
        int v37 = *(_DWORD *)(a2 + 80);
        __int16 v38 = *(_WORD *)(a2 + 84);
        *(void *)long long buf = *(void *)a2;
        *(_OWORD *)&uint8_t buf[16] = v33;
        long long v44 = v34;
        long long v45 = v35;
        long long v46 = v36;
        int v47 = v37;
        __int16 v48 = v38;
        char v49 = 0;
        char v50 = 0;
        char v51 = 0;
        char v52 = 0;
        char v53 = 0;
        char v54 = 0;
        sub_10033C83C((void *)(a1 + 192), (long long *)buf);
      }
    }
    sub_10035CB18(a1, (uint64_t)buf);
    sub_10035D1DC((void *)a1);
    long long v39 = v45;
    *(_OWORD *)(a4 + 32) = v44;
    *(_OWORD *)(a4 + 48) = v39;
    *(_OWORD *)(a4 + 64) = v46;
    __n128 result = *(__n128 *)&buf[16];
    *(_OWORD *)a4 = *(_OWORD *)buf;
    *(__n128 *)(a4 + 16) = result;
    return result;
  }
  long long v14 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    unint64_t v40 = *(void *)(a1 + 232) + *(void *)(a1 + 224) - 1;
    uint64_t v41 = *(void *)(*(void *)(*(void *)(a1 + 200) + ((v40 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v40 & 0x1F) << 7));
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v41;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#findalgs-rangeposeinterpolator,Received pose earlier than the last pose in history with timestamp: %f - pose rejected", buf, 0xCu);
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 72) = 0;
  return result;
}

void sub_10035CA90(uint64_t a1)
{
  *(_DWORD *)(a1 + 240) = 0;
  if (*(unsigned char *)(a1 + 184)) {
    *(unsigned char *)(a1 + 184) = 0;
  }
  int v2 = *(void ***)(a1 + 200);
  uint64_t v3 = *(void *)(a1 + 208);
  *(void *)(a1 + 232) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 208);
      int v2 = (void **)(*(void *)(a1 + 200) + 8);
      *(void *)(a1 + 200) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 16;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 32;
  }
  *(void *)(a1 + 224) = v6;
}

void sub_10035CB18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 72) = 0;
  if (!*(unsigned char *)(a1 + 184)) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 232);
  if (!v4) {
    return;
  }
  unint64_t v5 = *(void *)(a1 + 224);
  uint64_t v6 = *(void *)(a1 + 200);
  uint64_t v7 = *(void *)(a1 + 208);
  uint64_t v8 = (char *)(v6 + 8 * (v5 >> 5));
  if (v7 == v6)
  {
    uint64_t v9 = 0;
    unint64_t v12 = 0;
    long long v11 = (char *)(v6 + 8 * ((v5 + v4) >> 5));
  }
  else
  {
    uint64_t v9 = *(void *)v8 + ((*(void *)(a1 + 224) & 0x1FLL) << 7);
    char v10 = v5 + v4;
    long long v11 = (char *)(v6 + 8 * ((v5 + v4) >> 5));
    unint64_t v12 = *(void *)v11 + ((unint64_t)(v10 & 0x1F) << 7);
  }
  double v13 = *(double *)(a1 + 8);
  float v14 = *(float *)(a1 + 16);
  *(void *)long long buf = v6 + 8 * (v5 >> 5);
  *(void *)&uint8_t buf[8] = v9;
  if (v12 != v9)
  {
    uint64_t v15 = ((uint64_t)(v12 - *(void *)v11) >> 7) + 4 * (v11 - v8);
    uint64_t v16 = v9 - *(void *)v8;
    unint64_t v17 = v15 - (v16 >> 7);
    if (v15 != v16 >> 7)
    {
      do
      {
        unint64_t v18 = v17 >> 1;
        long long v19 = sub_100342320((uint64_t)buf, v17 >> 1);
        if (v13 >= *v20)
        {
          unint64_t v21 = v20 + 16;
          if ((double *)((char *)v20 - *v19 + 128) == (double *)4096)
          {
            unint64_t v22 = (double *)v19[1];
            ++v19;
            unint64_t v21 = v22;
          }
          *(void *)long long buf = v19;
          *(void *)&uint8_t buf[8] = v21;
          unint64_t v18 = v17 + ~v18;
        }
        unint64_t v17 = v18;
      }
      while (v18);
      uint64_t v8 = *(char **)buf;
      uint64_t v9 = *(void *)&buf[8];
      unint64_t v5 = *(void *)(a1 + 224);
      uint64_t v6 = *(void *)(a1 + 200);
      uint64_t v7 = *(void *)(a1 + 208);
    }
  }
  if (v7 == v6)
  {
    if (v9)
    {
      uint64_t v23 = 0;
      goto LABEL_19;
    }
LABEL_22:
    float32x4_t v30 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 200) + ((*(void *)(a1 + 224) >> 2) & 0x3FFFFFFFFFFFFFF8))
                      + ((*(void *)(a1 + 224) & 0x1FLL) << 7));
      *(_DWORD *)long long buf = 134218240;
      *(double *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v31;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#findalgs-rangeposeinterpolator,Measurement at %f s earlier than the first pose in history at %f s - skipping interpolation and removing range measurement", buf, 0x16u);
    }
    goto LABEL_43;
  }
  if (*(void *)(v6 + ((v5 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v5 & 0x1F) << 7) == v9) {
    goto LABEL_22;
  }
  uint64_t v23 = *(void *)(v6 + (((*(void *)(a1 + 232) + v5) >> 2) & 0x3FFFFFFFFFFFFFF8))
      + (((*(void *)(a1 + 232) + v5) & 0x1F) << 7);
LABEL_19:
  if (v23 != v9)
  {
    uint64_t v24 = v9 - *(void *)v8;
    uint64_t v25 = v24 >> 7;
    if (v24 < 129)
    {
      unint64_t v35 = 32 - v25;
      double v27 = &v8[-8 * (v35 >> 5)];
      uint64_t v28 = *(void *)v27;
      uint64_t v29 = ~v35 & 0x1FLL;
    }
    else
    {
      unint64_t v26 = v25 - 1;
      double v27 = &v8[8 * (v26 >> 5)];
      uint64_t v28 = *(void *)v27;
      uint64_t v29 = v26 & 0x1F;
    }
    uint64_t v36 = v28 + (v29 << 7);
    float v37 = (v13 - *(double *)v36) / (*(double *)v9 - *(double *)v36);
    float v90 = v37;
    float32x4_t v87 = *(float32x4_t *)(v36 + 64);
    *(double *)v38.i64 = sub_10033F314(*(int8x16_t *)(v36 + 16), *(int8x16_t *)(v36 + 32), *(__n128 *)(v36 + 48));
    float32x4_t v88 = v38;
    float32x4_t v86 = *(float32x4_t *)(v9 + 64);
    *(double *)v39.i64 = sub_10033F314(*(int8x16_t *)(v9 + 16), *(int8x16_t *)(v9 + 32), *(__n128 *)(v9 + 48));
    int8x16_t v40 = (int8x16_t)vmulq_f32(v88, v39);
    float32x4_t v41 = (float32x4_t)vextq_s8(v40, v40, 8uLL);
    *(float32x2_t *)v40.i8 = vadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v41.f32);
    *(float *)v40.i32 = vaddv_f32(*(float32x2_t *)v40.i8);
    v41.i64[0] = 0;
    float32x4_t v42 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)v40, v41)), 0), (int8x16_t)vnegq_f32(v39), (int8x16_t)v39);
    float v43 = 1.0;
    float v44 = 1.0 - v90;
    float32x4_t v45 = vsubq_f32(v88, v42);
    int8x16_t v46 = (int8x16_t)vmulq_f32(v45, v45);
    float32x4_t v85 = v42;
    float32x4_t v47 = vaddq_f32(v88, v42);
    int8x16_t v48 = (int8x16_t)vmulq_f32(v47, v47);
    float v49 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL)))));
    float v50 = v49 + v49;
    BOOL v51 = (float)(v49 + v49) == 0.0;
    float v52 = 1.0;
    if (!v51) {
      float v52 = sinf(v50) / v50;
    }
    float v53 = v52;
    float32x2_t v54 = vrecpe_f32((float32x2_t)LODWORD(v52));
    float32x2_t v55 = vmul_f32(v54, vrecps_f32((float32x2_t)LODWORD(v53), v54));
    LODWORD(v56) = vmul_f32(v55, vrecps_f32((float32x2_t)LODWORD(v53), v55)).u32[0];
    if ((float)(v44 * v50) != 0.0)
    {
      float v83 = v56;
      v55.f32[0] = sinf(v44 * v50);
      float v56 = v83;
      float v43 = v55.f32[0] / (float)(v44 * v50);
    }
    v55.f32[0] = v44 * (float)(v56 * v43);
    float32x4_t v57 = (float32x4_t)vdupq_lane_s32((int32x2_t)v55, 0);
    float v58 = v90;
    float v59 = v50 * v90;
    float v60 = 1.0;
    if (v59 != 0.0)
    {
      float32x4_t v82 = v57;
      float v84 = v56;
      float v61 = sinf(v59);
      float32x4_t v57 = v82;
      float v56 = v84;
      float v58 = v90;
      float v60 = v61 / v59;
    }
    float32x4_t v62 = vmlaq_f32(vmulq_n_f32(v85, (float)(v56 * v60) * v58), v88, v57);
    int8x16_t v63 = (int8x16_t)vmulq_f32(v62, v62);
    float32x2_t v64 = vadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
    if (vaddv_f32(v64) == 0.0)
    {
      int8x16_t v65 = (int8x16_t)xmmword_1004C1B40;
    }
    else
    {
      unsigned __int32 v66 = vadd_f32(v64, (float32x2_t)vdup_lane_s32((int32x2_t)v64, 1)).u32[0];
      float32x2_t v67 = vrsqrte_f32((float32x2_t)v66);
      float32x2_t v68 = vmul_f32(v67, vrsqrts_f32((float32x2_t)v66, vmul_f32(v67, v67)));
      int8x16_t v65 = (int8x16_t)vmulq_n_f32(v62, vmul_f32(v68, vrsqrts_f32((float32x2_t)v66, vmul_f32(v68, v68))).f32[0]);
    }
    int8x16_t v69 = (int8x16_t)vmlaq_n_f32(v87, vsubq_f32(v86, v87), v58);
    double v70 = *(float *)v69.i32;
    double v71 = *(float *)v65.i32;
    float64x2_t v89 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 4uLL));
    float64x2_t v91 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 4uLL));
    double v72 = *(float *)&v65.i32[3];
    uint64_t v73 = qword_1008ABDE0;
    double v74 = v14;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134220032;
      *(double *)&uint8_t buf[4] = v74;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v13;
      __int16 v93 = 2048;
      double v94 = v70;
      __int16 v95 = 2048;
      float64_t v96 = v91.f64[0];
      __int16 v97 = 2048;
      float64_t v98 = v91.f64[1];
      __int16 v99 = 2048;
      double v100 = v71;
      __int16 v101 = 2048;
      float64_t v102 = v89.f64[0];
      __int16 v103 = 2048;
      float64_t v104 = v89.f64[1];
      __int16 v105 = 2048;
      double v106 = v72;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,Passing range measurement to batch filter and range filter, range: %0.2f m, timestamp: %f s, device position:[%0.2f,%0.2f,%0.2f], device quat:[%0.2f,%0.2f,%0.2f,%0.2f]", buf, 0x5Cu);
    }
    *(double *)a2 = v13;
    *(double *)(a2 + 8) = v74;
    *(double *)(a2 + 16) = v70;
    *(float64x2_t *)(a2 + 24) = v91;
    *(double *)(a2 + 40) = v71;
    *(float64x2_t *)(a2 + 48) = v89;
    *(double *)(a2 + 64) = v72;
    *(unsigned char *)(a2 + 72) = 1;
    uint64_t v75 = *(void *)(a1 + 200);
    uint64_t v76 = (char *)(v75 + 8 * (*(void *)(a1 + 224) >> 5));
    if (*(void *)(a1 + 208) == v75) {
      uint64_t v77 = 0;
    }
    else {
      uint64_t v77 = *(void *)v76 + ((*(void *)(a1 + 224) & 0x1FLL) << 7);
    }
    sub_100340838((void *)(a1 + 192), v76, v77, v27, v36);
    uint64_t v78 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v79 = *(void *)(a1 + 200);
      uint64_t v80 = *(void *)(*(void *)(v79 + ((*(void *)(a1 + 224) >> 2) & 0x3FFFFFFFFFFFFFF8))
                      + ((*(void *)(a1 + 224) & 0x1FLL) << 7));
      uint64_t v81 = *(void *)(*(void *)(v79
                                  + (((unint64_t)(*(void *)(a1 + 224) + *(void *)(a1 + 232) - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                      + (((*(void *)(a1 + 224) + *(void *)(a1 + 232) - 1) & 0x1F) << 7));
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v80;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v81;
      _os_log_debug_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "#findalgs-rangeposeinterpolator,Pose history now between %f s and %f s", buf, 0x16u);
    }
LABEL_43:
    if (*(unsigned char *)(a1 + 184)) {
      *(unsigned char *)(a1 + 184) = 0;
    }
    return;
  }
  float32x4_t v32 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v33 = *(void *)(a1 + 232) + *(void *)(a1 + 224) - 1;
    uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 200) + ((v33 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v33 & 0x1F) << 7));
    *(_DWORD *)long long buf = 134218240;
    *(double *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v34;
    _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#findalgs-rangeposeinterpolator,Measurement at %f s later than the last pose in history at %f s - skipping interpolation", buf, 0x16u);
  }
}

void sub_10035D1DC(void *a1)
{
  uint64_t v1 = a1[29];
  if (v1)
  {
    unint64_t v3 = a1[28];
    double v4 = *(double *)(*(void *)(a1[25] + (((v1 + v3 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v1 + v3 - 1) & 0x1F) << 7))
       - *(double *)(*(void *)(a1[25] + ((v3 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v3 & 0x1F) << 7));
    if (v4 > 5.0)
    {
      unint64_t v5 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v31 = 134217984;
        *(double *)&v31[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,Pose history spans %f s - pruning down past poses from history", v31, 0xCu);
      }
      unint64_t v6 = a1[28];
      unint64_t v7 = v6 + a1[29];
      uint64_t v8 = a1[25];
      uint64_t v9 = a1[26];
      unint64_t v10 = v6 >> 5;
      long long v11 = (char *)(v8 + 8 * (v6 >> 5));
      if (v9 == v8)
      {
        uint64_t v12 = 0;
        unint64_t v14 = 0;
        double v13 = (char *)(v8 + 8 * (v7 >> 5));
      }
      else
      {
        uint64_t v12 = *(void *)v11 + ((a1[28] & 0x1FLL) << 7);
        double v13 = (char *)(v8 + 8 * (v7 >> 5));
        unint64_t v14 = *(void *)v13 + ((v7 & 0x1F) << 7);
      }
      double v15 = *(double *)(*(void *)(v8 + (((v7 - 1) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((v7 - 1) & 0x1F) << 7));
      *(void *)uint64_t v31 = v8 + 8 * (v6 >> 5);
      *(void *)&v31[8] = v12;
      if (v14 != v12)
      {
        uint64_t v16 = ((uint64_t)(v14 - *(void *)v13) >> 7) + 4 * (v13 - v11);
        uint64_t v17 = v12 - *(void *)v11;
        unint64_t v18 = v16 - (v17 >> 7);
        if (v16 != v17 >> 7)
        {
          double v19 = v15 + -2.0;
          do
          {
            unint64_t v20 = v18 >> 1;
            unint64_t v21 = sub_100342320((uint64_t)v31, v18 >> 1);
            if (v19 >= *v22)
            {
              uint64_t v23 = v22 + 16;
              if ((double *)((char *)v22 - *v21 + 128) == (double *)4096)
              {
                uint64_t v24 = (double *)v21[1];
                ++v21;
                uint64_t v23 = v24;
              }
              *(void *)uint64_t v31 = v21;
              *(void *)&v31[8] = v23;
              unint64_t v20 = v18 + ~v20;
            }
            unint64_t v18 = v20;
          }
          while (v20);
          long long v11 = *(char **)v31;
          uint64_t v12 = *(void *)&v31[8];
          unint64_t v6 = a1[28];
          uint64_t v8 = a1[25];
          uint64_t v9 = a1[26];
          unint64_t v10 = v6 >> 5;
        }
      }
      uint64_t v25 = (char *)(v8 + 8 * v10);
      if (v9 == v8) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = *(void *)v25 + ((v6 & 0x1F) << 7);
      }
      sub_100340838(a1 + 24, v25, v26, v11, v12);
      double v27 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = a1[25];
        uint64_t v29 = *(void *)(*(void *)(v28 + ((a1[28] >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((a1[28] & 0x1FLL) << 7));
        uint64_t v30 = *(void *)(*(void *)(v28 + (((unint64_t)(a1[28] + a1[29] - 1) >> 2) & 0x3FFFFFFFFFFFFFF8))
                        + (((a1[28] + a1[29] - 1) & 0x1F) << 7));
        *(_DWORD *)uint64_t v31 = 134218240;
        *(void *)&v31[4] = v29;
        *(_WORD *)&v31[12] = 2048;
        *(void *)&v31[14] = v30;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,Pose history now between %f s and %f s", v31, 0x16u);
      }
    }
  }
}

void sub_10035D4A4(uint64_t a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X8>)
{
  if (*((unsigned char *)a2 + 181)) {
    BOOL v5 = *((unsigned __int8 *)a2 + 180) > 2u;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    int v6 = *(unsigned __int8 *)(a1 + 184);
    long long v7 = a2[3];
    long long v9 = *a2;
    long long v8 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v8;
    long long v10 = a2[7];
    long long v12 = a2[4];
    long long v11 = a2[5];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v10;
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 80) = v11;
    long long v14 = a2[9];
    long long v13 = a2[10];
    long long v15 = a2[8];
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    *(_OWORD *)(a1 + 144) = v14;
    *(_OWORD *)(a1 + 160) = v13;
    *(_OWORD *)(a1 + 128) = v15;
    if (!v6) {
      *(unsigned char *)(a1 + 184) = 1;
    }
    sub_10035CB18(a1, (uint64_t)a3);
  }
  else
  {
    uint64_t v16 = (id)qword_1008ABDE0;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (!*((unsigned char *)a2 + 181)) {
        sub_10000AE44();
      }
      int v18 = *((unsigned __int8 *)a2 + 180);
      v19[0] = 67109120;
      v19[1] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#findalgs-rangeposeinterpolator,mmsValStatus %d does not pass check, rejecting range result event", (uint8_t *)v19, 8u);
    }

    *a3 = 0;
    a3[72] = 0;
  }
}

void sub_10035D614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10035D62C(uint64_t a1, uint64_t a2)
{
  __n128 result = (void *)sub_10037C7A8(a1, a2);
  void *result = off_100862658;
  return result;
}

uint64_t sub_10035D660@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = *a2;
  double v5 = a2[1];
  v10[0] = 0;
  v10[88] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, double, double))(*(void *)a1 + 16))(a1, a3, v10, v5, v6);
  if (v8)
  {
    *(void *)a4 = result;
    char v9 = 1;
    *(unsigned char *)(a4 + 8) = 1;
    *(unsigned char *)(a4 + 16) = 0;
    *(unsigned char *)(a4 + 24) = 0;
    *(unsigned char *)(a4 + 32) = 0;
    *(unsigned char *)(a4 + 36) = 0;
    *(unsigned char *)(a4 + 40) = 0;
    *(unsigned char *)(a4 + 48) = 0;
    *(unsigned char *)(a4 + 56) = 0;
    *(unsigned char *)(a4 + 64) = 0;
    *(unsigned char *)(a4 + 72) = 0;
    *(unsigned char *)(a4 + 76) = 0;
  }
  else
  {
    char v9 = 0;
    *(unsigned char *)a4 = 0;
  }
  *(unsigned char *)(a4 + 80) = v9;
  return result;
}

__n128 sub_10035D710(uint64_t a1, __n128 *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)a1 = off_100862698;
  __n128 result = *a2;
  *(void *)(a1 + 96) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 80) = result;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  return result;
}

uint64_t sub_10035D768(uint64_t result)
{
  *(void *)(result + 120) = *(void *)(result + 112);
  *(unsigned char *)(result + 104) = 0;
  return result;
}

void sub_10035D778(void *a1@<X0>, uint64_t *a2@<X1>, double *a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  int v7 = *((_DWORD *)a2 + 4);
  char v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    int v23 = 134218496;
    uint64_t v24 = v6;
    __int16 v25 = 2048;
    uint64_t v26 = v5;
    __int16 v27 = 1024;
    int v28 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#boundedregiongrange-estimator, Input time: %4.3f s, rssi: %3.1f, channel: %d", (uint8_t *)&v23, 0x1Cu);
  }
  unint64_t v9 = a1[16];
  unint64_t v10 = a1[15];
  if (v10 >= v9)
  {
    uint64_t v12 = a1[14];
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v12) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000267C4();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      uint64_t v17 = (char *)sub_1000267DC((uint64_t)(a1 + 16), v16);
    }
    else {
      uint64_t v17 = 0;
    }
    int v18 = &v17[24 * v13];
    double v19 = &v17[24 * v16];
    *(void *)int v18 = v6;
    *((void *)v18 + 1) = v5;
    *((_DWORD *)v18 + 4) = v7;
    *((_DWORD *)v18 + 5) = 0;
    long long v11 = v18 + 24;
    unint64_t v21 = (char *)a1[14];
    unint64_t v20 = (char *)a1[15];
    if (v20 != v21)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v18 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v18 - 24) = v22;
        v18 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      unint64_t v20 = (char *)a1[14];
    }
    a1[14] = v18;
    a1[15] = v11;
    a1[16] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *(void *)unint64_t v10 = v6;
    *(void *)(v10 + 8) = v5;
    long long v11 = (char *)(v10 + 24);
    *(_DWORD *)(v10 + 16) = v7;
    *(_DWORD *)(v10 + 20) = 0;
  }
  a1[15] = v11;
  sub_10035D974((uint64_t)a1);
  sub_10035D9EC((uint64_t)a1);
  sub_10035DB00((uint64_t)a1, a3);
}

void sub_10035D974(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 104))
  {
    uint64_t v1 = *(double **)(a1 + 112);
    int v2 = *(double **)(a1 + 120);
    if (v1 != v2)
    {
      double v3 = *(v2 - 3) - *v1;
      double v4 = *(double *)(a1 + 88);
      *(unsigned char *)(a1 + 104) = v3 >= v4;
      if (v3 >= v4)
      {
        uint64_t v5 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004347B8(v5);
        }
      }
    }
  }
}

void sub_10035D9EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v1 = (uint64_t **)(a1 + 112);
  if (v3 != v2)
  {
    double v4 = *(double *)(v2 - 24);
    double v5 = *(double *)(a1 + 96);
    if (v4 - *(double *)v3 >= v5)
    {
      while (v4 - *(double *)v3 <= v5)
      {
        v3 += 24;
        if (v3 == v2) {
          goto LABEL_14;
        }
      }
      if (v3 != v2)
      {
        uint64_t v6 = v3 + 24;
        if (v3 + 24 != v2)
        {
          do
          {
            if (v4 - *(double *)v6 <= *(double *)(a1 + 96))
            {
              long long v7 = *(_OWORD *)v6;
              *(void *)(v3 + 16) = *(void *)(v6 + 16);
              *(_OWORD *)uint64_t v3 = v7;
              v3 += 24;
            }
            v6 += 24;
          }
          while (v6 != v2);
          uint64_t v2 = *(void *)(a1 + 120);
        }
        if (v3 != v2)
        {
          uint64_t v2 = v3;
          *(void *)(a1 + 120) = v3;
        }
      }
LABEL_14:
      char v8 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004347FC(v2, v1, v8);
      }
    }
  }
}

void sub_10035DB00(uint64_t a1@<X0>, double *a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *((unsigned char *)a2 + 80) = 0;
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v3 = off_10089E210[*(int *)(a1 + 80)];
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    stat __p = 0;
    sub_10018C2F0(&__p, *(const void **)(a1 + 112), *(void *)(a1 + 120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3));
    double v4 = (*(double (**)(uint64_t (*)[4], void **))((*v3)[0] + 16))(v3, &__p);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
    *a2 = v4;
    *((unsigned char *)a2 + 8) = 1;
    *((unsigned char *)a2 + 16) = 0;
    *((unsigned char *)a2 + 24) = 0;
    *((unsigned char *)a2 + 32) = 0;
    *((unsigned char *)a2 + 36) = 0;
    *((unsigned char *)a2 + 40) = 0;
    *((unsigned char *)a2 + 48) = 0;
    *((unsigned char *)a2 + 56) = 0;
    *((unsigned char *)a2 + 64) = 0;
    *((unsigned char *)a2 + 72) = 0;
    *((unsigned char *)a2 + 76) = 0;
    *((unsigned char *)a2 + 80) = 1;
  }
}

void sub_10035DBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035DC0C()
{
  return 0;
}

void sub_10035DC1C(void *a1)
{
  sub_10035DD5C(a1);

  operator delete();
}

void *sub_10035DC54(void *a1)
{
  *a1 = off_100862698;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  *a1 = off_1008629E0;
  sub_10016CC78(a1 + 2);
  return a1;
}

void sub_10035DCC8(void *a1)
{
  *a1 = off_100862698;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  *a1 = off_1008629E0;
  sub_10016CC78(a1 + 2);

  operator delete();
}

void *sub_10035DD5C(void *a1)
{
  *a1 = off_100862920;
  uint64_t v2 = (void *)a1[37];
  if (v2)
  {
    a1[38] = v2;
    operator delete(v2);
  }
  *a1 = off_1008629E0;
  sub_10016CC78(a1 + 2);
  return a1;
}

uint64_t sub_10035DDD0()
{
  v8[0] = xmmword_1004C25E8;
  v8[1] = unk_1004C25F8;
  sub_1001A003C((uint64_t)&unk_1008AA6A8, (int *)v8, 4);
  xmmword_1008AA6C0 = xmmword_1004B7660;
  *(_OWORD *)algn_1008AA6D0 = xmmword_1004B7670;
  qword_1008AA6E8 = 0;
  unk_1008AA6F0 = 0;
  qword_1008AA6E0 = 0x3FD999999999999ALL;
  unk_1008AA6F8 = xmmword_1004B7680;
  dword_1008AA708 = 5;
  qword_1008AA710 = 0x4000000000000000;
  dword_1008AA718 = 5;
  byte_1008AA720 = 0;
  *(void *)&algn_1008AA721[3] = 0x30000000ALL;
  xmmword_1008AA730 = xmmword_1004B7690;
  unk_1008AA740 = xmmword_1004B76A0;
  xmmword_1008AA750 = xmmword_1004B76B0;
  qword_1008AA760 = 0x3FE3333333333333;
  dword_1008AA768 = 3;
  xmmword_1008AA770 = xmmword_1004B76C0;
  unk_1008AA780 = xmmword_1004B76A0;
  xmmword_1008AA790 = xmmword_1004B7690;
  qword_1008AA7A0 = 0x3FE3333333333333;
  byte_1008AA7A8 = 0;
  xmmword_1008AA7B0 = xmmword_1004B76D0;
  unk_1008AA7C0 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v6 = _Q0;
  xmmword_1008AA7D0 = _Q0;
  qword_1008AA7E0 = 0xBFD3333333333333;
  xmmword_1008AA7E8 = xmmword_1004B76F0;
  qword_1008AA7F8 = 0x3E99999A40000000;
  xmmword_1008AA800 = xmmword_1004B7670;
  qword_1008AA818 = 0;
  unk_1008AA820 = 0;
  qword_1008AA810 = 0x3FD999999999999ALL;
  xmmword_1008AA828 = xmmword_1004B7680;
  dword_1008AA838 = 5;
  qword_1008AA840 = 0x4000000000000000;
  dword_1008AA848 = 4;
  qword_1008AA850 = 0x300000008;
  qword_1008AA858 = 0xC04E800000000000;
  unint64_t v7 = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)&unk_1008AA860, (double *)&v7, 1);
  xmmword_1008AA878 = xmmword_1004B7700;
  qword_1008AA888 = 0x4024000000000000;
  dword_1008AA890 = 45;
  byte_1008AA898 = 0;
  byte_1008AA8B0 = 0;
  qword_1008AA8B8 = 0;
  byte_1008AA8C0 = 0;
  dword_1008AA8C4 = 1;
  byte_1008AA8C8 = 1;
  xmmword_1008AA8D0 = xmmword_1004B7710;
  unk_1008AA8E0 = xmmword_1004B7720;
  xmmword_1008AA8F0 = v6;
  qword_1008AA900 = 0xC059000000000000;
  xmmword_1008AA908 = xmmword_1004B7730;
  qword_1008AA918 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008AA920 = xmmword_1004B7670;
  qword_1008AA930 = 0x3FD999999999999ALL;
  qword_1008AA940 = 0;
  qword_1008AA938 = 0;
  xmmword_1008AA948 = xmmword_1004B7680;
  dword_1008AA958 = 5;
  qword_1008AA960 = 0x4000000000000000;
  dword_1008AA968 = 10;
  qword_1008AA970 = 0x4034000000000000;
  dword_1008AA978 = 3;
  xmmword_1008AA980 = xmmword_1004B7740;
  return __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008AA6A8, (void *)&_mh_execute_header);
}

void sub_10035E084(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_10035E0A4(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_10034D4F8((void *)a1, (const void *)qword_1008AA990, qword_1008AA998, (qword_1008AA998 - qword_1008AA990) >> 4);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 132) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 69) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 117) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 216) = 0x100000003;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = off_100861B38;
  *(_OWORD *)(a1 + 200) = xmmword_1004C1B50;
  *(void *)(a1 + 224) = a1 + 232;
  sub_1003411F0((_DWORD *)(a1 + 192), 3, 1);
  sub_100341240(a1 + 192, 0.0);
  *(void *)(a1 + 288) = 0x100000004;
  *(void *)(a1 + 264) = off_100861BC8;
  *(_OWORD *)(a1 + 272) = xmmword_1004C1B60;
  *(void *)(a1 + 296) = a1 + 304;
  sub_1003411F0((_DWORD *)(a1 + 264), 4, 1);
  sub_100341240(a1 + 264, 0.0);
  *(void *)(a1 + 360) = 0x300000003;
  *(void *)(a1 + 336) = off_100861B80;
  *(_OWORD *)(a1 + 344) = xmmword_1004C1E40;
  *(void *)(a1 + 368) = a1 + 376;
  *(void *)(a1 + 448) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(void *)(a1 + 496) = 0x100000003;
  *(void *)(a1 + 472) = off_100861B38;
  *(_OWORD *)(a1 + 480) = xmmword_1004C1B50;
  *(void *)(a1 + 504) = a1 + 512;
  *(void *)(a1 + 560) = 0x100000003;
  *(void *)(a1 + 536) = off_100861B38;
  *(_OWORD *)(a1 + 544) = xmmword_1004C1B50;
  *(void *)(a1 + 568) = a1 + 576;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 632) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 640) = xmmword_1004C1E00;
  *(unsigned char *)(a1 + 656) = 1;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  uint64_t v13 = 0x100000003;
  *(void *)long long buf = off_100861B38;
  long long v12 = xmmword_1004C1B50;
  unint64_t v14 = &v15;
  sub_1003411F0(buf, 3, 1);
  sub_100341240((uint64_t)buf, 0.0);
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 752) = 0x7FF8000000000000;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  sub_10034CDD4(a1 + 776, (uint64_t)buf);
  unsigned int v4 = 0;
  *(_DWORD *)(a1 + 840) = 0;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 880) = 0x100000003;
  *(void *)(a1 + 856) = off_100861B38;
  *(_OWORD *)(a1 + 864) = xmmword_1004C1B50;
  *(void *)(a1 + 888) = a1 + 896;
  *(_DWORD *)(a1 + 920) = 0x10000;
  *(_WORD *)(a1 + 924) = 257;
  *(_DWORD *)(a1 + 926) = 0;
  *(_DWORD *)(a1 + 929) = 0;
  *(void *)(a1 + 936) = 0x1000000032;
  *(_OWORD *)(a1 + 944) = xmmword_1004C26C0;
  *(_OWORD *)(a1 + 960) = xmmword_1004C26D0;
  *(void *)(a1 + 976) = 0x4018000000000000;
  *(unsigned char *)(a1 + 984) = 1;
  do
  {
    *(void *)sub_1003416AC(a1 + 472, v4) = 0;
    *(void *)sub_1003416AC(a1 + 536, v4++) = 0;
  }
  while (v4 != 3);
  sub_10035E6B0((uint64_t *)(a1 + 664), 4uLL);
  double v5 = &qword_1008AA9A8;
  if (a2) {
    long long v6 = &qword_1008AA990;
  }
  else {
    long long v6 = &qword_1008AA9A8;
  }
  if (v6 != (uint64_t *)a1)
  {
    if (a2) {
      double v5 = &qword_1008AA990;
    }
    sub_10034D998((char *)a1, (char *)*v6, v5[1], (v5[1] - *v6) >> 4);
  }
  *(unsigned char *)(a1 + 984) = a3;
  unint64_t v7 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(v12) = 1024;
    *(_DWORD *)((char *)&v12 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,SyntheticApertureBatchFilter constructed. Strict box span requirement %d, third party behavior %d", buf, 0xEu);
  }
  return a1;
}

void sub_10035E538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void **a11, void **a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)(v19 + 712);
  sub_1003210D8(&a19);
  a19 = (void **)(v19 + 688);
  sub_100321130(&a19);
  sub_1003210D8(&a19);
  void *v23 = off_100853598;
  *long long v22 = off_100853598;
  *unint64_t v20 = off_100853598;
  *unint64_t v21 = off_100853598;
  *a10 = off_100853598;
  sub_1003211A8(&a19);
  __int16 v25 = *a11;
  if (*a11)
  {
    *(void *)(v19 + 144) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *a12;
  if (*a12)
  {
    *(void *)(v19 + 96) = v26;
    operator delete(v26);
  }
  __int16 v27 = *a13;
  if (*a13)
  {
    *(void *)(v19 + 48) = v27;
    operator delete(v27);
  }
  int v28 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void sub_10035E6B0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      sub_1000267C4();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v14 = v3;
    stat __p = sub_10036747C(v3, a2);
    long long v11 = (char *)__p + v5;
    long long v12 = (char *)__p + v5;
    uint64_t v13 = (char *)__p + 112 * v6;
    sub_100367404(a1, &__p);
    unint64_t v7 = v11;
    char v8 = v12;
    if (v12 != v11)
    {
      unint64_t v9 = v12 - 72;
      do
      {
        *((void *)v8 - 9) = off_100853598;
        v9 -= 112;
        v8 -= 112;
      }
      while (v8 != v7);
      long long v12 = v7;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_10035E7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100367594((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10035E7BC@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 927) || *(unsigned char *)(a1 + 926)) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(a1 + 920))
  {
    uint64_t v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 624);
      int v10 = 134217984;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Returning solution from AoA at %f s", (uint8_t *)&v10, 0xCu);
    }
    *a2 = *(void *)(a1 + 72);
    *(void *)((char *)a2 + 5) = *(void *)(a1 + 77);
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    sub_100340E0C(a2 + 2, *(const void **)(a1 + 88), *(void *)(a1 + 96), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3));
    uint64_t v4 = (double *)(a1 + 112);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 921))
    {
LABEL_3:
      *a2 = *(void *)(a1 + 24);
      *(void *)((char *)a2 + 5) = *(void *)(a1 + 29);
      a2[3] = 0;
      a2[4] = 0;
      a2[2] = 0;
      sub_100340E0C(a2 + 2, *(const void **)(a1 + 40), *(void *)(a1 + 48), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
      uint64_t v4 = (double *)(a1 + 64);
      goto LABEL_4;
    }
    char v8 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 848);
      int v10 = 134217984;
      uint64_t v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Returning solution from straight path estimator at %f s", (uint8_t *)&v10, 0xCu);
    }
    *a2 = *(void *)(a1 + 120);
    *(void *)((char *)a2 + 5) = *(void *)(a1 + 125);
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    sub_100340E0C(a2 + 2, *(const void **)(a1 + 136), *(void *)(a1 + 144), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3));
    uint64_t v4 = (double *)(a1 + 160);
  }
LABEL_4:
  double result = *v4;
  a2[5] = *(void *)v4;
  return result;
}

void sub_10035E9C0(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(double *)(a1 + 256) = a4;
  if (a3 - *(double *)(a1 + 608) <= 10.0 || *(void *)(a1 + 672) == *(void *)(a1 + 664))
  {
    if (*(unsigned char *)(a1 + 926))
    {
      *(unsigned char *)(a1 + 36) = 0;
      int v7 = *(_DWORD *)(a1 + 32);
      sub_10035ED54(a1);
      if (v7 != *(_DWORD *)(a1 + 32))
      {
        char v8 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v11) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Vertical state changed with the pose update", (uint8_t *)&v11, 2u);
        }
        *(unsigned char *)(a1 + 36) = 1;
      }
    }
  }
  else
  {
    sub_10035EB84(a1);
    *(_DWORD *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 36) = 0;
    sub_100366F58((char *)(a1 + 40), 0, 0, 0);
    *(void *)(a1 + 64) = 0;
  }
  if (*(unsigned char *)(a1 + 920))
  {
    double v9 = *(double *)(a1 + 624);
    if (a3 - v9 > 10.0)
    {
      *(unsigned char *)(a1 + 920) = 0;
      int v10 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 134218240;
        double v12 = v9;
        __int16 v13 = 2048;
        double v14 = a3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,AoA Solution from AoA at %f s is no longer valid - current time is %f s", (uint8_t *)&v11, 0x16u);
      }
    }
  }
  sub_10035E7BC(a1, a2);
}

void sub_10035EB84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 672);
  uint64_t v3 = *(void *)(a1 + 664);
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 72;
    do
    {
      *(void *)(v2 - 72) = off_100853598;
      v4 -= 112;
      v2 -= 112;
    }
    while (v2 != v3);
  }
  *(void *)(a1 + 672) = v3;
  uint64_t v5 = *(void *)(a1 + 696);
  uint64_t v6 = *(void *)(a1 + 688);
  if (v5 != v6)
  {
    uint64_t v7 = v5 - 176;
    do
    {
      *(void *)(v5 - 112) = off_100853598;
      *(void *)(v5 - 176) = off_100853598;
      v7 -= 208;
      v5 -= 208;
    }
    while (v5 != v6);
  }
  *(void *)(a1 + 696) = v6;
  sub_100362968(a1);
  char v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 29) = 0;
  *(void *)(a1 + 24) = 0;
  if (v8)
  {
    *(void *)(a1 + 48) = v8;
    operator delete(v8);
  }
  long long v9 = 0uLL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  int v10 = *(void **)(a1 + 88);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 77) = 0;
  if (v10)
  {
    *(void *)(a1 + 96) = v10;
    operator delete(v10);
    long long v9 = 0uLL;
  }
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 104) = v9;
  int v11 = *(void **)(a1 + 136);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 125) = 0;
  if (v11)
  {
    *(void *)(a1 + 144) = v11;
    operator delete(v11);
  }
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v12 = *(void *)(a1 + 168);
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 632) = 0x3FF0000000000000;
  sub_1003211FC(a1 + 168, v12);
  if (*(unsigned char *)(a1 + 656)) {
    *(unsigned char *)(a1 + 656) = 0;
  }
  *(_WORD *)(a1 + 920) = 0;
  *(void *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  __int16 v13 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Batch filter is reinitialized", v14, 2u);
  }
}

void sub_10035ED54(uint64_t a1)
{
  *(_DWORD *)(a1 + 928) = 0;
  *(unsigned char *)(a1 + 932) = 0;
  if (*(unsigned char *)(a1 + 926))
  {
    uint64_t v2 = *(void *)(a1 + 168);
    uint64_t v47 = 0x100000003;
    float32x4_t v45 = off_100861B38;
    long long v46 = xmmword_1004C1B50;
    int8x16_t v48 = v49;
    sub_1003418A0(v2, a1 + 192, (uint64_t)&v45);
    double v3 = sub_1002A43C0((uint64_t)&v45, 0);
    double v4 = sub_1002A43C0((uint64_t)&v45, 0);
    double v5 = sub_1002A43C0((uint64_t)&v45, 2u);
    if (sqrt(v5 * sub_1002A43C0((uint64_t)&v45, 2u) + v3 * v4) <= 2.0)
    {
      uint64_t v6 = *(void *)(a1 + 168);
      uint64_t v7 = *(void *)(a1 + 176);
      if (v6 == v7)
      {
LABEL_15:
        *(_DWORD *)(a1 + 928) = 1;
      }
      else
      {
        while (1)
        {
          double v8 = sub_1002A43FC(v6 + 128, 1, 1);
          double v9 = sub_1002A43C0(v6, 1u);
          double v10 = sqrt(v8);
          double v11 = v9 - *(double *)(a1 + 256);
          double v12 = v10 + v11;
          double v13 = v11 - v10;
          if (v13 <= -2.5 && v12 >= -2.5) {
            break;
          }
          if (v13 <= 2.5 && v12 >= 2.5) {
            break;
          }
          v6 += 432;
          if (v6 == v7) {
            goto LABEL_15;
          }
        }
      }
    }
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 672) - *(void *)(a1 + 664)) >> 4);
    stat __p = 0;
    float v43 = 0;
    unint64_t v44 = 0;
    sub_10034CA54(&__p, v16);
    uint64_t v17 = *(void *)(a1 + 664);
    uint64_t v18 = *(void *)(a1 + 672);
    if (v17 != v18)
    {
      uint64_t v19 = *(void *)(a1 + 168);
      do
      {
        uint64_t v39 = 0x100000003;
        float v37 = off_100861B38;
        long long v38 = xmmword_1004C1B50;
        int8x16_t v40 = &v41;
        sub_1003418A0(v19, v17 + 40, (uint64_t)&v37);
        double v20 = sub_1002A43C0((uint64_t)&v37, 0);
        double v21 = sub_1002A43C0((uint64_t)&v37, 2u);
        if (*(unsigned char *)(a1 + 984) || sqrt(v21 * v21 + v20 * v20) <= 4.0)
        {
          double v22 = sub_1002A43C0((uint64_t)&v37, 1u);
          double v23 = v22;
          uint64_t v24 = v43;
          if ((unint64_t)v43 >= v44)
          {
            uint64_t v26 = (double *)__p;
            int64_t v27 = ((char *)v43 - (unsigned char *)__p) >> 3;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61) {
              sub_1000267C4();
            }
            uint64_t v29 = v44 - (void)__p;
            if ((uint64_t)(v44 - (void)__p) >> 2 > v28) {
              unint64_t v28 = v29 >> 2;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              uint64_t v31 = (char *)sub_100056BF0((uint64_t)&v44, v30);
              uint64_t v26 = (double *)__p;
              uint64_t v24 = v43;
            }
            else
            {
              uint64_t v31 = 0;
            }
            float32x4_t v32 = (double *)&v31[8 * v27];
            *float32x4_t v32 = v23;
            __int16 v25 = v32 + 1;
            while (v24 != v26)
            {
              uint64_t v33 = *((void *)v24-- - 1);
              *((void *)v32-- - 1) = v33;
            }
            stat __p = v32;
            float v43 = v25;
            unint64_t v44 = (unint64_t)&v31[8 * v30];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *float v43 = v22;
            __int16 v25 = v24 + 1;
          }
          float v43 = v25;
        }
        v17 += 112;
      }
      while (v17 != v18);
    }
    uint64_t v34 = (double *)__p;
    if (__p != v43)
    {
      v49[31] = 0;
      unint64_t v35 = sub_100150298((double *)__p, v43);
      if (*v36 - *v35 >= 0.5)
      {
        *(_DWORD *)(a1 + 928) = 2;
        *(unsigned char *)(a1 + 932) = 1;
      }
      uint64_t v34 = (double *)__p;
    }
    if (v34)
    {
      float v43 = v34;
      operator delete(v34);
    }
  }
}

void sub_10035F0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10035F100(uint64_t **a1@<X1>, uint64_t *a2@<X8>)
{
  double v5 = *a1;
  double v4 = (long long *)a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  int8x16_t v63 = v5;
  v64[0] = v5;
  uint64_t v6 = (char *)v4 - (char *)v5;
  if (v4 == (long long *)v5)
  {
    double v5 = (uint64_t *)v4;
    uint64_t v7 = (uint64_t *)v4;
    goto LABEL_27;
  }
  uint64_t v7 = v5 + 14;
  unsigned __int32 v66 = (long long *)(v5 + 14);
  if (v5 + 14 == (uint64_t *)v4)
  {
    uint64_t v7 = v5;
    goto LABEL_27;
  }
  if (sub_1003670BC(&v66, (uint64_t *)&v63))
  {
    int8x16_t v63 = v5 + 14;
    double v8 = v5;
  }
  else
  {
    v64[0] = v5 + 14;
    double v8 = v5 + 14;
    uint64_t v7 = v5;
  }
  double v9 = (long long *)(v5 + 28);
  if (v5 + 28 == (uint64_t *)v4) {
    goto LABEL_26;
  }
  double v10 = v5 + 42;
  while (1)
  {
    int8x16_t v65 = (long long *)(v10 - 14);
    unsigned __int32 v66 = v9 + 7;
    if (v9 + 7 == v4) {
      break;
    }
    if (sub_1003670BC(&v66, (uint64_t *)&v65))
    {
      if (sub_1003670BC(&v66, (uint64_t *)&v63))
      {
        int8x16_t v63 = v10;
        uint64_t v7 = v10;
      }
      BOOL v11 = sub_1003670BC(&v65, (uint64_t *)v64);
      double v12 = v9;
      if (v11) {
        goto LABEL_20;
      }
    }
    else
    {
      if (sub_1003670BC(&v65, (uint64_t *)&v63))
      {
        int8x16_t v63 = v10 - 14;
        uint64_t v7 = v10 - 14;
      }
      BOOL v13 = sub_1003670BC(&v66, (uint64_t *)v64);
      double v12 = v10;
      if (v13) {
        goto LABEL_20;
      }
    }
    v64[0] = v12;
    double v8 = v12;
LABEL_20:
    v9 += 14;
    unsigned __int32 v66 = v9;
    v10 += 28;
    if (v9 == v4) {
      goto LABEL_26;
    }
  }
  if (sub_1003670BC(&v65, (uint64_t *)&v63))
  {
    uint64_t v7 = v10 - 14;
  }
  else if (!sub_1003670BC(&v65, (uint64_t *)v64))
  {
    double v8 = v10 - 14;
  }
LABEL_26:
  double v5 = v8;
LABEL_27:
  double v14 = sub_1002A43C0((uint64_t)(v7 + 5), 0);
  double v15 = sub_1002A43C0((uint64_t)(v5 + 5), 0);
  uint64_t v17 = *a1;
  unint64_t v16 = (long long *)a1[1];
  int8x16_t v63 = v17;
  v64[0] = v17;
  if (v17 == (uint64_t *)v16) {
    goto LABEL_46;
  }
  uint64_t v18 = v17 + 14;
  unsigned __int32 v66 = (long long *)(v17 + 14);
  if (v17 + 14 == (uint64_t *)v16) {
    goto LABEL_46;
  }
  if (sub_100367174(&v66, (uint64_t *)&v63))
  {
    int8x16_t v63 = v17 + 14;
  }
  else
  {
    v64[0] = v17 + 14;
    uint64_t v18 = v17;
  }
  uint64_t v19 = (long long *)(v17 + 28);
  if (v17 + 28 == (uint64_t *)v16)
  {
LABEL_45:
    uint64_t v17 = v18;
    goto LABEL_46;
  }
  double v20 = v17 + 42;
  while (2)
  {
    uint64_t v17 = v20 - 14;
    int8x16_t v65 = (long long *)(v20 - 14);
    unsigned __int32 v66 = v19 + 7;
    if (v19 + 7 != v16)
    {
      if (sub_100367174(&v66, (uint64_t *)&v65))
      {
        if (sub_100367174(&v66, (uint64_t *)&v63))
        {
          int8x16_t v63 = v20;
          uint64_t v18 = v20;
        }
        BOOL v21 = sub_100367174(&v65, (uint64_t *)v64);
        double v22 = v19;
        if (v21) {
          goto LABEL_44;
        }
      }
      else
      {
        if (sub_100367174(&v65, (uint64_t *)&v63))
        {
          int8x16_t v63 = v20 - 14;
          uint64_t v18 = v20 - 14;
        }
        BOOL v23 = sub_100367174(&v66, (uint64_t *)v64);
        double v22 = v20;
        if (v23)
        {
LABEL_44:
          v19 += 14;
          unsigned __int32 v66 = v19;
          v20 += 28;
          if (v19 == v16) {
            goto LABEL_45;
          }
          continue;
        }
      }
      v64[0] = v22;
      goto LABEL_44;
    }
    break;
  }
  if (!sub_100367174(&v65, (uint64_t *)&v63))
  {
    sub_100367174(&v65, (uint64_t *)v64);
    uint64_t v17 = v18;
  }
LABEL_46:
  double v24 = sub_1002A43C0((uint64_t)(v17 + 5), 1u);
  uint64_t v26 = *a1;
  __int16 v25 = (long long *)a1[1];
  int8x16_t v63 = v26;
  v64[0] = v26;
  if (v26 == (uint64_t *)v25 || (int64_t v27 = v26 + 14, v66 = (long long *)(v26 + 14), v26 + 14 == (uint64_t *)v25))
  {
    int64_t v27 = v26;
    goto LABEL_73;
  }
  if (sub_10036722C(&v66, (uint64_t *)&v63))
  {
    int8x16_t v63 = v26 + 14;
    unint64_t v28 = v26;
  }
  else
  {
    v64[0] = v26 + 14;
    unint64_t v28 = v26 + 14;
    int64_t v27 = v26;
  }
  uint64_t v29 = (long long *)(v26 + 28);
  if (v26 + 28 == (uint64_t *)v25) {
    goto LABEL_72;
  }
  unint64_t v30 = v26 + 42;
  while (2)
  {
    int8x16_t v65 = (long long *)(v30 - 14);
    unsigned __int32 v66 = v29 + 7;
    if (v29 + 7 != v25)
    {
      if (sub_10036722C(&v66, (uint64_t *)&v65))
      {
        if (sub_10036722C(&v66, (uint64_t *)&v63))
        {
          int8x16_t v63 = v30;
          int64_t v27 = v30;
        }
        BOOL v31 = sub_10036722C(&v65, (uint64_t *)v64);
        float32x4_t v32 = v29;
        if (v31) {
          goto LABEL_64;
        }
      }
      else
      {
        if (sub_10036722C(&v65, (uint64_t *)&v63))
        {
          int8x16_t v63 = v30 - 14;
          int64_t v27 = v30 - 14;
        }
        BOOL v33 = sub_10036722C(&v66, (uint64_t *)v64);
        float32x4_t v32 = v30;
        if (v33)
        {
LABEL_64:
          v29 += 14;
          unsigned __int32 v66 = v29;
          v30 += 28;
          if (v29 == v25) {
            goto LABEL_72;
          }
          continue;
        }
      }
      v64[0] = v32;
      unint64_t v28 = v32;
      goto LABEL_64;
    }
    break;
  }
  if (sub_10036722C(&v65, (uint64_t *)&v63))
  {
    int64_t v27 = v30 - 14;
  }
  else if (!sub_10036722C(&v65, (uint64_t *)v64))
  {
    unint64_t v28 = v30 - 14;
  }
LABEL_72:
  uint64_t v26 = v28;
LABEL_73:
  double v34 = sub_1002A43C0((uint64_t)(v27 + 5), 2u);
  double v35 = sub_1002A43C0((uint64_t)(v26 + 5), 2u);
  v64[0] = 0;
  v64[1] = 0;
  int8x16_t v63 = (uint64_t *)v64;
  if (-1227133513 * (v6 >> 4))
  {
    uint64_t v36 = 0;
    float v37 = ceil((v15 - v14) * 4.0);
    unsigned int v38 = fmaxf(v37, 1.0);
    float v39 = ceil((v35 - v34) * 4.0);
    unsigned int v40 = fmaxf(v39, 1.0);
    do
    {
      double v41 = sub_1002A43C0((uint64_t)&(*a1)[14 * v36 + 5], 0);
      double v42 = sub_1002A43C0((uint64_t)&(*a1)[14 * v36 + 5], 1u);
      double v43 = sub_1002A43C0((uint64_t)&(*a1)[14 * v36 + 5], 2u);
      float v44 = ceil((v41 - v14) * 4.0) + -1.0;
      unsigned int v45 = fmaxf(v44, 0.0);
      float v46 = ceil((v42 - v24) * 4.0) + -1.0;
      *(float *)&double v43 = ceil((v43 - v34) * 4.0) + -1.0;
      unsigned int v47 = v45 + (fmaxf(*(float *)&v43, 0.0) + fmaxf(v46, 0.0) * v40) * v38;
      int8x16_t v48 = v64[0];
      if (!v64[0]) {
        goto LABEL_85;
      }
      float v49 = v64;
      do
      {
        float v50 = v48;
        BOOL v51 = v49;
        unsigned int v52 = *((_DWORD *)v48 + 7);
        if (v52 >= v47) {
          float v49 = (void **)v48;
        }
        else {
          ++v48;
        }
        int8x16_t v48 = (void *)*v48;
      }
      while (v48);
      if (v49 == v64) {
        goto LABEL_85;
      }
      if (v52 < v47) {
        float v50 = v51;
      }
      if (v47 >= *((_DWORD *)v50 + 7))
      {
        if (*(double *)&(*a1)[14 * v36 + 1] < *(double *)&(*a1)[14 * *((unsigned int *)v49 + 8) + 1]) {
          *((_DWORD *)v49 + 8) = v36;
        }
      }
      else
      {
LABEL_85:
        unint64_t v67 = __PAIR64__(v36, v47);
        sub_100367608(&v63, (unsigned int *)&v67, (uint64_t *)&v67);
      }
      ++v36;
    }
    while (v36 != -1227133513 * (v6 >> 4));
    float v53 = v63;
    if (v63 != (uint64_t *)v64)
    {
      unint64_t v54 = a2[1];
      do
      {
        unsigned int v55 = *((_DWORD *)v53 + 8);
        float v56 = *a1;
        uint64_t v57 = (uint64_t)&(*a1)[14 * v55];
        if (v54 >= a2[2])
        {
          unint64_t v54 = sub_1003676C4(a2, (long long *)v57);
        }
        else
        {
          long long v58 = *(_OWORD *)v57;
          long long v59 = *(_OWORD *)(v57 + 16);
          *(void *)(v54 + 32) = *(void *)(v57 + 32);
          *(_OWORD *)unint64_t v54 = v58;
          *(_OWORD *)(v54 + 16) = v59;
          sub_10034CDD4(v54 + 40, (uint64_t)&v56[14 * v55 + 5]);
          *(_DWORD *)(v54 + 104) = v56[14 * v55 + 13];
          v54 += 112;
          a2[1] = v54;
        }
        a2[1] = v54;
        float v60 = (uint64_t *)v53[1];
        if (v60)
        {
          do
          {
            float v61 = v60;
            float v60 = (uint64_t *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            float v61 = (uint64_t *)v53[2];
            BOOL v62 = *v61 == (void)v53;
            float v53 = v61;
          }
          while (!v62);
        }
        float v53 = v61;
      }
      while (v61 != (uint64_t *)v64);
    }
  }
  sub_10003E96C((uint64_t)&v63, v64[0]);
}

void sub_10035F7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1003210D8((void ***)va);
  _Unwind_Resume(a1);
}

double sub_10035F81C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  memset(v40, 0, sizeof(v40));
  uint64_t v3 = *a2;
  if (a2[1] == *a2)
  {
    double v7 = 0.0;
  }
  else
  {
    unint64_t v6 = 0;
    double v7 = 0.0;
    do
    {
      uint64_t v37 = 0x100000003;
      double v35 = off_100861B38;
      long long v36 = xmmword_1004C1B50;
      unsigned int v38 = &v39;
      uint64_t v32 = 0x100000003;
      unint64_t v30 = off_100861B38;
      long long v31 = xmmword_1004C1B50;
      BOOL v33 = &v34;
      uint64_t v8 = *a3;
      uint64_t v9 = 112 * v6;
      double v10 = *(double *)(*a3 + 112 * v6 + 8);
      double v11 = *(double *)(v3 + 112 * v6 + 8);
      double v12 = 3.14159265
          - acos(((v11 + 0.1) * (v11 + 0.1) + (v10 - v11) * (v10 - v11) - (v10 + -0.1) * (v10 + -0.1))/ ((v11 + 0.1)* (v10 - v11 + v10 - v11)));
      if (v12 <= 1.0) {
        double v13 = 1.0;
      }
      else {
        double v13 = 1.0 / v12;
      }
      if (v10 <= v11) {
        uint64_t v14 = v8;
      }
      else {
        uint64_t v14 = v3;
      }
      sub_10034226C((uint64_t)&v35, v14 + v9 + 40);
      uint64_t v15 = *a3;
      if (*(double *)(*a3 + v9 + 8) <= *(double *)(*a2 + v9 + 8)) {
        uint64_t v15 = *a2;
      }
      sub_10034226C((uint64_t)&v30, v15 + v9 + 40);
      uint64_t v16 = *a2 + v9;
      uint64_t v17 = *a3 + v9;
      if (*(double *)(v16 + 8) >= *(double *)(v17 + 8)) {
        double v18 = *(double *)(v16 + 8);
      }
      else {
        double v18 = *(double *)(v17 + 8);
      }
      uint64_t v27 = 0x100000003;
      __int16 v25 = off_100861B38;
      long long v26 = xmmword_1004C1B50;
      unint64_t v28 = &v29;
      sub_1003418A0((uint64_t)&v35, (uint64_t)&v30, (uint64_t)&v25);
      uint64_t v53 = 0x100000003;
      BOOL v51 = off_100861B38;
      long long v52 = xmmword_1004C1B50;
      unint64_t v54 = &v55;
      uint64_t v48 = 0x100000134;
      long long v47 = xmmword_1004C1B70;
      float v46 = off_100861C10;
      float v49 = v50;
      uint64_t v43 = 0x100000003;
      long long v42 = xmmword_1004C1B50;
      double v41 = off_100861B38;
      float v44 = &v45;
      sub_100341B04((uint64_t)&v25, (uint64_t)&v51, (uint64_t)&v46, (uint64_t)&v41, "2");
      double v20 = v19;
      uint64_t v48 = 0x100000003;
      long long v47 = xmmword_1004C1B50;
      float v46 = off_100861B38;
      float v49 = v50;
      sub_1003418A0((uint64_t)&v35, (uint64_t)&v30, (uint64_t)&v46);
      uint64_t v21 = 0;
      double v7 = v7 + v13;
      do
      {
        double v22 = *(double *)sub_1003416AC((uint64_t)&v30, v21);
        *(double *)&v40[v21] = *(double *)&v40[v21]
                             + v13 * (v22 + v18 * *(double *)sub_1003416AC((uint64_t)&v46, v21) / v20);
        ++v21;
      }
      while (v21 != 3);
      ++v6;
      uint64_t v3 = *a2;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) > v6);
  }
  for (uint64_t i = 0; i != 3; ++i)
    *(double *)&v40[i] = *(double *)&v40[i] / v7;
  return *(double *)v40;
}

void sub_10035FC48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 672);
  uint64_t v2 = *(void *)(a1 + 664);
  unint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((v1 - v2) >> 4);
  if (v3 >= 4)
  {
    uint64_t v4 = a1;
    if (*(unsigned char *)(a1 + 922))
    {
      uint64_t v5 = *(void *)(a1 + 720);
      uint64_t v6 = *(void *)(a1 + 712);
      if (v5 != v6)
      {
        uint64_t v7 = v5 - 72;
        do
        {
          *(void *)(v5 - 72) = off_100853598;
          v7 -= 112;
          v5 -= 112;
        }
        while (v5 != v6);
      }
      *(void *)(a1 + 720) = v6;
      memset(v106, 0, sizeof(v106));
      sub_100367850(v106, v2, v1, v3);
      sub_10035F100(v106, (uint64_t *)buf);
      uint64_t v8 = (long long **)(v4 + 712);
      sub_1003679EC((char **)(v4 + 712));
      *(_OWORD *)(v4 + 712) = *(_OWORD *)buf;
      *(void *)(v4 + 728) = *(void *)&buf[16];
      memset(buf, 0, sizeof(buf));
      long long v112 = buf;
      sub_1003210D8((void ***)&v112);
      long long v112 = (uint8_t *)v106;
      sub_1003210D8((void ***)&v112);
      __int16 v103 = 0;
      float64_t v104 = 0;
      unint64_t v105 = 0;
      uint64_t v9 = *(void *)(v4 + 720);
      if (v9 == *(void *)(v4 + 712))
      {
        uint64_t v27 = *(void *)(v4 + 720);
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        double v12 = off_100861B38;
        double v13 = v102;
        uint64_t v14 = v116;
        uint64_t v9 = *(void *)(v4 + 712);
        do
        {
          uint64_t v15 = *(void *)(v4 + 672) - 72;
          uint64_t v100 = 0x100000003;
          float64_t v98 = v12;
          long long v99 = xmmword_1004C1B50;
          __int16 v101 = v13;
          sub_1003418A0(v9 + v10 * 16 + 40, v15, (uint64_t)&v98);
          uint64_t v114 = 0x100000003;
          long long v113 = xmmword_1004C1B50;
          long long v112 = (uint8_t *)off_100861B38;
          long long v115 = v14;
          uint64_t v118 = 0x100000134;
          *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B70;
          *(void *)long long buf = off_100861C10;
          unint64_t v119 = v120;
          uint64_t v109 = 0x100000003;
          long long v108 = xmmword_1004C1B50;
          long long v107 = off_100861B38;
          long long v110 = v111;
          sub_100341B04((uint64_t)&v98, (uint64_t)&v112, (uint64_t)buf, (uint64_t)&v107, "2");
          if (v16 < 2.0)
          {
            uint64_t v17 = v14;
            double v18 = v13;
            double v19 = v12;
            uint64_t v20 = v4;
            uint64_t v21 = *v8;
            double v22 = &(*v8)[v10];
            BOOL v23 = v104;
            if ((unint64_t)v104 >= v105)
            {
              long long v26 = (long long *)sub_100367A64((uint64_t *)&v103, v22);
            }
            else
            {
              long long v24 = *v22;
              long long v25 = v22[1];
              *((void *)v104 + 4) = *((void *)v22 + 4);
              long long *v23 = v24;
              v23[1] = v25;
              sub_10034CDD4((uint64_t)v23 + 40, (uint64_t)v22 + 40);
              *((_DWORD *)v23 + 26) = DWORD2(v21[v10 + 6]);
              long long v26 = v23 + 7;
            }
            uint64_t v4 = v20;
            float64_t v104 = v26;
            double v12 = v19;
            double v13 = v18;
            uint64_t v14 = v17;
          }
          ++v11;
          uint64_t v27 = *(void *)(v4 + 720);
          uint64_t v9 = *(void *)(v4 + 712);
          v10 += 7;
        }
        while (0x6DB6DB6DB6DB6DB7 * ((v27 - v9) >> 4) > v11);
      }
      if (v8 != &v103)
      {
        sub_100367BF0((uint64_t)v8, v103, v104, 0x6DB6DB6DB6DB6DB7 * (v104 - v103));
        uint64_t v27 = *(void *)(v4 + 720);
        uint64_t v9 = *(void *)(v4 + 712);
      }
      uint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((v27 - v9) >> 4);
      int v29 = v28 - 2;
      if ((int)v28 >= 2)
      {
        if (v28 >= 4) {
          int v29 = 2;
        }
        if (v29)
        {
          if (v29 == 1) {
            int v30 = v28;
          }
          else {
            int v30 = ((int)v28 - 1) * (int)v28 / 2;
          }
        }
        else
        {
          int v30 = 1;
        }
        if (v28 >= 5)
        {
          int v84 = v30;
          uint64_t v83 = v4;
          uint64_t v31 = 0;
          uint64_t v95 = 0;
          unint64_t v96 = 0;
          unint64_t v97 = 0;
          uint64_t v86 = (v28 - 1);
          uint64_t v92 = 0;
          unint64_t v93 = 0;
          uint64_t v87 = (int)v28;
          uint64_t v85 = v28;
          uint64_t v32 = 1;
          uint64_t v89 = 112;
          unint64_t v94 = 0;
          do
          {
            uint64_t v88 = v31 + 1;
            if (v31 + 1 < v87)
            {
              uint64_t v33 = v85;
              uint64_t v34 = v89;
              do
              {
                double v35 = *v8;
                long long v36 = (double *)((char *)*v8 + v34);
                double v37 = v36[1];
                double v38 = *((double *)&(*v8)[7 * v31] + 1);
                if (vabdd_f64(3.14159265, acos(((v38 + 0.1) * (v38 + 0.1) + (v37 - v38) * (v37 - v38) - (v37 + -0.1) * (v37 + -0.1))/ ((v38 + 0.1)* (v37 - v38 + v37 - v38)))) < 1.22173048)
                {
                  uint64_t v100 = 0x100000003;
                  float64_t v98 = off_100861B38;
                  long long v99 = xmmword_1004C1B50;
                  __int16 v101 = v102;
                  sub_1003418A0((uint64_t)&v35[7 * v31 + 2] + 8, (uint64_t)(v36 + 5), (uint64_t)&v98);
                  uint64_t v114 = 0x100000003;
                  long long v113 = xmmword_1004C1B50;
                  long long v112 = (uint8_t *)off_100861B38;
                  long long v115 = v116;
                  uint64_t v118 = 0x100000134;
                  *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B70;
                  *(void *)long long buf = off_100861C10;
                  unint64_t v119 = v120;
                  uint64_t v109 = 0x100000003;
                  long long v108 = xmmword_1004C1B50;
                  long long v107 = off_100861B38;
                  long long v110 = v111;
                  sub_100341B04((uint64_t)&v98, (uint64_t)&v112, (uint64_t)buf, (uint64_t)&v107, "2");
                  if (vabdd_f64(v39, fmax(v38, v37) - fmin(v38, v37)) < 0.1414)
                  {
                    uint64_t v40 = (uint64_t)&(*v8)[7 * v31 + 2] + 8;
                    double v41 = (char *)*v8 + v34;
                    uint64_t v100 = 0x100000003;
                    float64_t v98 = off_100861B38;
                    long long v99 = xmmword_1004C1B50;
                    __int16 v101 = v102;
                    sub_1003418A0(v40, (uint64_t)(v41 + 40), (uint64_t)&v98);
                    uint64_t v114 = 0x100000003;
                    long long v113 = xmmword_1004C1B50;
                    long long v112 = (uint8_t *)off_100861B38;
                    long long v115 = v116;
                    uint64_t v118 = 0x100000134;
                    *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B70;
                    *(void *)long long buf = off_100861C10;
                    unint64_t v119 = v120;
                    uint64_t v109 = 0x100000003;
                    long long v108 = xmmword_1004C1B50;
                    long long v107 = off_100861B38;
                    long long v110 = v111;
                    sub_100341B04((uint64_t)&v98, (uint64_t)&v112, (uint64_t)buf, (uint64_t)&v107, "2");
                    if (v42 > 0.25)
                    {
                      uint64_t v43 = *v8;
                      uint64_t v44 = (uint64_t)&(*v8)[7 * v31];
                      unint64_t v45 = v96;
                      if (v96 >= v97)
                      {
                        uint64_t v48 = sub_100367A64(&v95, (long long *)v44);
                      }
                      else
                      {
                        long long v46 = *(_OWORD *)v44;
                        long long v47 = *(_OWORD *)(v44 + 16);
                        *(void *)(v96 + 32) = *(void *)(v44 + 32);
                        *(_OWORD *)unint64_t v45 = v46;
                        *(_OWORD *)(v45 + 16) = v47;
                        sub_10034CDD4(v45 + 40, (uint64_t)&v43[7 * v31 + 2] + 8);
                        *(_DWORD *)(v45 + 104) = DWORD2(v43[7 * v31 + 6]);
                        uint64_t v48 = v45 + 112;
                      }
                      unint64_t v96 = v48;
                      float v49 = *v8;
                      float v50 = (long long *)((char *)*v8 + v34);
                      unint64_t v51 = v93;
                      if (v93 >= v94)
                      {
                        uint64_t v54 = sub_100367A64(&v92, v50);
                      }
                      else
                      {
                        long long v52 = *v50;
                        long long v53 = v50[1];
                        *(void *)(v93 + 32) = *((void *)v50 + 4);
                        *(_OWORD *)unint64_t v51 = v52;
                        *(_OWORD *)(v51 + 16) = v53;
                        sub_10034CDD4(v51 + 40, (uint64_t)v50 + 40);
                        *(_DWORD *)(v51 + 104) = *(_DWORD *)((char *)v49 + v34 + 104);
                        uint64_t v54 = v51 + 112;
                      }
                      unint64_t v93 = v54;
                    }
                  }
                }
                v34 += 112;
                --v33;
              }
              while (v32 != v33);
            }
            ++v32;
            v89 += 112;
            ++v31;
          }
          while (v88 != v86);
          unint64_t v55 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v96 - v95) >> 4);
          if (v55 > 5 && (float)((float)((float)v55 / (float)v84) * 100.0) >= 70.0)
          {
            *(unsigned char *)(v83 + 921) = 1;
            *(void *)(v83 + 848) = *(void *)(v83 + 608);
            sub_10034226C(v83 + 856, v83 + 192);
            float v56 = qword_1008ABDE0;
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v57 = *(void *)(v83 + 608);
              *(_DWORD *)long long buf = 134217984;
              *(void *)&uint8_t buf[4] = v57;
              _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Straight path solution generated at %f s", buf, 0xCu);
            }
            *(_DWORD *)(v83 + 120) = 5;
            *(unsigned char *)(v83 + 124) = 1;
            *(_DWORD *)(v83 + 128) = 2;
            *(unsigned char *)(v83 + 132) = 0;
            *(void *)(v83 + 160) = 0;
            memset(v91, 0, sizeof(v91));
            sub_100367850(v91, v95, v96, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v96 - v95) >> 4));
            memset(v90, 0, sizeof(v90));
            long long v58 = sub_100367850(v90, v92, v93, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v93 - v92) >> 4));
            double v59 = sub_10035F81C((uint64_t)v58, v91, v90);
            uint64_t v61 = v60;
            uint64_t v63 = v62;
            *(void *)long long buf = v90;
            sub_1003210D8((void ***)buf);
            *(void *)long long buf = v91;
            sub_1003210D8((void ***)buf);
            unint64_t v64 = *(void *)(v83 + 152);
            unint64_t v65 = *(void *)(v83 + 136);
            *(void *)(v83 + 144) = v65;
            if (v65 >= v64)
            {
              unint64_t v67 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v64 - v65) >> 3);
              uint64_t v68 = 2 * v67;
              if (2 * v67 <= 1) {
                uint64_t v68 = 1;
              }
              if (v67 >= 0xC30C30C30C30C3) {
                unint64_t v69 = 0x186186186186186;
              }
              else {
                unint64_t v69 = v68;
              }
              double v70 = (char *)sub_1000279FC(v83 + 152, v69);
              double v72 = &v70[168 * v71];
              *(double *)double v70 = v59;
              *((void *)v70 + 1) = v61;
              *((void *)v70 + 2) = v63;
              *((void *)v70 + 4) = 0;
              *((void *)v70 + 5) = 0;
              *((void *)v70 + 3) = 0x3F847AE147AE147CLL;
              *((_OWORD *)v70 + 3) = xmmword_1004C26E0;
              *((_OWORD *)v70 + 4) = xmmword_1004C26F0;
              *((void *)v70 + 10) = 0x3FF0000000000000;
              *(_OWORD *)(v70 + 88) = 0u;
              *(_OWORD *)(v70 + 104) = 0u;
              *(_OWORD *)(v70 + 120) = 0u;
              *(_OWORD *)(v70 + 136) = 0u;
              *((void *)v70 + 19) = 0;
              *((_DWORD *)v70 + 40) = 2;
              unsigned __int32 v66 = v70 + 168;
              double v74 = *(char **)(v83 + 136);
              uint64_t v73 = *(char **)(v83 + 144);
              if (v73 != v74)
              {
                do
                {
                  long long v75 = *(_OWORD *)(v73 - 168);
                  long long v76 = *(_OWORD *)(v73 - 152);
                  *(_OWORD *)(v70 - 136) = *(_OWORD *)(v73 - 136);
                  *(_OWORD *)(v70 - 152) = v76;
                  *(_OWORD *)(v70 - 168) = v75;
                  long long v77 = *(_OWORD *)(v73 - 120);
                  long long v78 = *(_OWORD *)(v73 - 104);
                  long long v79 = *(_OWORD *)(v73 - 88);
                  *(_OWORD *)(v70 - 72) = *(_OWORD *)(v73 - 72);
                  *(_OWORD *)(v70 - 88) = v79;
                  *(_OWORD *)(v70 - 104) = v78;
                  *(_OWORD *)(v70 - 120) = v77;
                  long long v80 = *(_OWORD *)(v73 - 56);
                  long long v81 = *(_OWORD *)(v73 - 40);
                  long long v82 = *(_OWORD *)(v73 - 24);
                  *((_DWORD *)v70 - 2) = *((_DWORD *)v73 - 2);
                  *(_OWORD *)(v70 - 24) = v82;
                  *(_OWORD *)(v70 - 40) = v81;
                  *(_OWORD *)(v70 - 56) = v80;
                  v70 -= 168;
                  v73 -= 168;
                }
                while (v73 != v74);
                uint64_t v73 = *(char **)(v83 + 136);
              }
              *(void *)(v83 + 136) = v70;
              *(void *)(v83 + 144) = v66;
              *(void *)(v83 + 152) = v72;
              if (v73) {
                operator delete(v73);
              }
            }
            else
            {
              *(double *)unint64_t v65 = v59;
              *(void *)(v65 + 8) = v61;
              *(void *)(v65 + 16) = v63;
              *(void *)(v65 + 32) = 0;
              *(void *)(v65 + 40) = 0;
              *(void *)(v65 + 24) = 0x3F847AE147AE147CLL;
              *(_OWORD *)(v65 + 48) = xmmword_1004C26E0;
              *(_OWORD *)(v65 + 64) = xmmword_1004C26F0;
              *(void *)(v65 + 80) = 0x3FF0000000000000;
              *(_OWORD *)(v65 + 88) = 0u;
              *(_OWORD *)(v65 + 104) = 0u;
              *(_OWORD *)(v65 + 120) = 0u;
              *(_OWORD *)(v65 + 136) = 0u;
              *(_DWORD *)(v65 + 160) = 2;
              unsigned __int32 v66 = (char *)(v65 + 168);
              *(void *)(v65 + 152) = 0;
            }
            *(void *)(v83 + 144) = v66;
          }
          *(void *)long long buf = &v92;
          sub_1003210D8((void ***)buf);
          *(void *)long long buf = &v95;
          sub_1003210D8((void ***)buf);
        }
      }
      *(void *)long long buf = &v103;
      sub_1003210D8((void ***)buf);
    }
  }
}

void sub_100360814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  a37 = (void **)&a31;
  sub_1003210D8(&a37);
  a37 = (void **)&a34;
  sub_1003210D8(&a37);
  a37 = (void **)&a45;
  sub_1003210D8(&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_1003608E8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 922) = a2;
  return result;
}

uint64_t sub_1003608F0(uint64_t result, char a2, double a3)
{
  *(double *)(result + 456) = a3;
  *(unsigned char *)(result + 464) = a2;
  return result;
}

void sub_1003608FC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 927))
  {
    *(unsigned char *)(a1 + 927) = 0;
    if (*(void *)(a1 + 664) != *(void *)(a1 + 672)) {
      sub_10035EB84(a1);
    }
  }
  *(void *)(a1 + 256) = *(void *)(a2 + 104);
  uint64_t v205 = 0x100000003;
  long long v204 = xmmword_1004C1B50;
  v203 = off_100861B38;
  v206 = &v207;
  sub_1003411F0(&v203, 3, 1);
  sub_100341240((uint64_t)&v203, 0.0);
  uint64_t v200 = 0x100000004;
  long long v199 = xmmword_1004C1B60;
  v198 = off_100861BC8;
  v201 = &v202;
  sub_1003411F0(&v198, 4, 1);
  sub_100341240((uint64_t)&v198, 0.0);
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v7 = a2 + 8 * i;
    uint64_t v8 = *(void *)(v7 + 96);
    *(void *)sub_1003416AC((uint64_t)&v203, i) = v8;
    uint64_t v9 = *(void *)(v7 + 120);
    *(void *)sub_1003416AC((uint64_t)&v198, i) = v9;
  }
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)sub_1003416AC((uint64_t)&v198, 3u) = v10;
  sub_1003956B4((uint64_t)&v198, (uint64_t)v197);
  double buf[3] = 0x100000003;
  *(_OWORD *)&buf[1] = xmmword_1004C1B50;
  buf[0] = off_100861B38;
  *(void *)&long long v214 = (char *)&v214 + 8;
  sub_1003419A0((uint64_t)v197, a1 + 472, (uint64_t)buf);
  uint64_t v194 = 0x100000003;
  long long v193 = xmmword_1004C1B50;
  v192 = off_100861B38;
  v195 = &v196;
  sub_100342718((uint64_t)&v203, (uint64_t)buf, (uint64_t)&v192);
  uint64_t v11 = a1 + 192;
  sub_10034226C(a1 + 192, (uint64_t)&v203);
  sub_10034226C(a1 + 264, (uint64_t)&v198);
  sub_10034226C(a1 + 336, (uint64_t)v197);
  double v12 = *(double *)a2;
  *(void *)(a1 + 608) = *(void *)a2;
  double v13 = (os_log_t *)&qword_1008ABDE0;
  if (*(unsigned char *)(a1 + 920))
  {
    double v14 = *(double *)(a1 + 624);
    if (v12 - v14 > 10.0)
    {
      *(unsigned char *)(a1 + 920) = 0;
      uint64_t v15 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134218240;
        *(double *)((char *)buf + 4) = v14;
        WORD2(buf[1]) = 2048;
        *(double *)((char *)&buf[1] + 6) = v12;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,AoA Solution from AoA at %f s is no longer valid - current time is %f s", (uint8_t *)buf, 0x16u);
      }
    }
  }
  if (*(unsigned char *)(a1 + 921))
  {
    double v16 = *(double *)(a1 + 608) - *(double *)(a1 + 848);
    if (v16 >= 2.0 && (*(double *)(a1 + 456) < 2.0 || !*(unsigned char *)(a1 + 464))) {
      goto LABEL_16;
    }
    if (v16 >= 5.0)
    {
      uint64_t v165 = 0x100000003;
      unint64_t v163 = off_100861B38;
      long long v164 = xmmword_1004C1B50;
      unint64_t v166 = v167;
      sub_1003418A0((uint64_t)&v192, a1 + 856, (uint64_t)&v163);
      *((void *)&v179[1] + 1) = 0x100000003;
      *(_OWORD *)((char *)v179 + 8) = xmmword_1004C1B50;
      *(void *)&v179[0] = off_100861B38;
      *(void *)&long long v180 = (char *)&v180 + 8;
      double buf[3] = 0x100000134;
      *(_OWORD *)&buf[1] = xmmword_1004C1B70;
      buf[0] = off_100861C10;
      *(void *)&long long v214 = (char *)&v214 + 8;
      uint64_t v170 = 0x100000003;
      long long v169 = xmmword_1004C1B50;
      v168 = off_100861B38;
      long long v171 = v172;
      sub_100341B04((uint64_t)&v163, (uint64_t)v179, (uint64_t)buf, (uint64_t)&v168, "2");
      if (v17 > 1.0)
      {
LABEL_16:
        *(unsigned char *)(a1 + 921) = 0;
        double v18 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = *(void *)(a1 + 848);
          uint64_t v20 = *(void *)(a1 + 608);
          LODWORD(buf[0]) = 134218240;
          *(void *)((char *)buf + 4) = v19;
          WORD2(buf[1]) = 2048;
          *(void *)((char *)&buf[1] + 6) = v20;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Straight path solution at %f s is no longer valid - current time is %f s", (uint8_t *)buf, 0x16u);
        }
      }
    }
  }
  double v21 = *(double *)(a2 + 16);
  if (v21 <= 0.0 || *(double *)(a2 + 8) < -1.0)
  {
    double v22 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004348A4(a2, v22, v21);
    }
    goto LABEL_145;
  }
  uint64_t v23 = *(void *)(a1 + 672);
  if (v23 != *(void *)(a1 + 664))
  {
    uint64_t v165 = 0x100000003;
    unint64_t v163 = off_100861B38;
    long long v164 = xmmword_1004C1B50;
    unint64_t v166 = v167;
    sub_1003418A0((uint64_t)&v192, v23 - 72, (uint64_t)&v163);
    *((void *)&v179[1] + 1) = 0x100000003;
    *(_OWORD *)((char *)v179 + 8) = xmmword_1004C1B50;
    *(void *)&v179[0] = off_100861B38;
    *(void *)&long long v180 = (char *)&v180 + 8;
    double buf[3] = 0x100000134;
    *(_OWORD *)&buf[1] = xmmword_1004C1B70;
    buf[0] = off_100861C10;
    *(void *)&long long v214 = (char *)&v214 + 8;
    uint64_t v170 = 0x100000003;
    long long v169 = xmmword_1004C1B50;
    v168 = off_100861B38;
    long long v171 = v172;
    sub_100341B04((uint64_t)&v163, (uint64_t)v179, (uint64_t)buf, (uint64_t)&v168, "2");
    double v25 = v24;
    double v26 = *(double *)(a2 + 8);
    double v27 = *(double *)(v23 - 104);
    double v28 = v26 - v27;
    if (v26 - v27 <= 0.0)
    {
      if ((fabs(v28) - v25) / *(double *)(a2 + 16) > 6.0)
      {
        int v30 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0]) = 134218496;
          *(double *)((char *)buf + 4) = v27;
          WORD2(buf[1]) = 2048;
          *(double *)((char *)&buf[1] + 6) = v26;
          HIWORD(buf[2]) = 2048;
          *(double *)&double buf[3] = v25;
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter,nLoS->LoS event detected by the batch filter: Previous range %f m, Current range %f m, Distance travelled %f m", (uint8_t *)buf, 0x20u);
        }
        stat __p = 0;
        long long v159 = 0uLL;
        uint64_t v31 = *(void *)(a1 + 664);
        if (v31 != *(void *)(a1 + 672))
        {
          long long v155 = a3;
          do
          {
            uint64_t v165 = 0x100000003;
            unint64_t v163 = off_100861B38;
            long long v164 = xmmword_1004C1B50;
            unint64_t v166 = v167;
            sub_1003418A0((uint64_t)&v192, v31 + 40, (uint64_t)&v163);
            *((void *)&v179[1] + 1) = 0x100000003;
            *(_OWORD *)((char *)v179 + 8) = xmmword_1004C1B50;
            *(void *)&v179[0] = off_100861B38;
            *(void *)&long long v180 = (char *)&v180 + 8;
            double buf[3] = 0x100000134;
            *(_OWORD *)&buf[1] = xmmword_1004C1B70;
            buf[0] = off_100861C10;
            *(void *)&long long v214 = (char *)&v214 + 8;
            uint64_t v170 = 0x100000003;
            long long v169 = xmmword_1004C1B50;
            v168 = off_100861B38;
            long long v171 = v172;
            sub_100341B04((uint64_t)&v163, (uint64_t)v179, (uint64_t)buf, (uint64_t)&v168, "2");
            if ((*(double *)(v31 + 8) - *(double *)(a2 + 8) - v32) / *(double *)(a2 + 16) <= 6.0)
            {
              v31 += 112;
              uint64_t v51 = *(void *)(a1 + 672);
            }
            else
            {
              uint64_t v33 = v13;
              int v34 = 0;
              do
              {
                uint64_t v35 = *(void *)(a1 + 688);
                if (0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 696) - v35) >> 4) <= (unint64_t)v34) {
                  break;
                }
                double v36 = *(double *)(v35 + 208 * v34);
                double v37 = *(double *)v31;
                if (v36 == *(double *)v31)
                {
                  double v38 = (char *)v159;
                  if ((unint64_t)v159 >= *((void *)&v159 + 1))
                  {
                    uint64_t v40 = (char *)__p;
                    uint64_t v41 = (uint64_t)(v159 - (void)__p) >> 3;
                    unint64_t v42 = v41 + 1;
                    if ((unint64_t)(v41 + 1) >> 61) {
                      sub_1000267C4();
                    }
                    uint64_t v43 = *((void *)&v159 + 1) - (void)__p;
                    if ((uint64_t)(*((void *)&v159 + 1) - (void)__p) >> 2 > v42) {
                      unint64_t v42 = v43 >> 2;
                    }
                    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v44 = v42;
                    }
                    if (v44)
                    {
                      unint64_t v45 = (char *)sub_100056BF0((uint64_t)&v159 + 8, v44);
                      uint64_t v40 = (char *)__p;
                      double v38 = (char *)v159;
                    }
                    else
                    {
                      unint64_t v45 = 0;
                    }
                    long long v46 = &v45[8 * v41];
                    *(void *)long long v46 = v34;
                    double v39 = v46 + 8;
                    while (v38 != v40)
                    {
                      uint64_t v47 = *((void *)v38 - 1);
                      v38 -= 8;
                      *((void *)v46 - 1) = v47;
                      v46 -= 8;
                    }
                    stat __p = v46;
                    *(void *)&long long v159 = v39;
                    *((void *)&v159 + 1) = &v45[8 * v44];
                    if (v40) {
                      operator delete(v40);
                    }
                  }
                  else
                  {
                    *(void *)long long v159 = v34;
                    double v39 = v38 + 8;
                  }
                  *(void *)&long long v159 = v39;
                }
                else
                {
                  ++v34;
                }
              }
              while (v36 != v37);
              if (*(unsigned char *)(a1 + 920))
              {
                double v48 = *(double *)(a1 + 624);
                if (*(double *)v31 == v48)
                {
                  *(unsigned char *)(a1 + 920) = 0;
                  float v49 = *v33;
                  if (os_log_type_enabled(*v33, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0]) = 134217984;
                    *(double *)((char *)buf + 4) = v48;
                    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,AoA Solution from AoA at %f s is no longer valid due to multipath", (uint8_t *)buf, 0xCu);
                  }
                }
              }
              float v50 = *v33;
              if (os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
              {
                double v54 = *(double *)v31;
                uint64_t v55 = *(void *)(v31 + 8);
                LODWORD(buf[0]) = 134218240;
                *(double *)((char *)buf + 4) = v54;
                WORD2(buf[1]) = 2048;
                *(void *)((char *)&buf[1] + 6) = v55;
                _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter,Removing measurement at time %f s with range %f m", (uint8_t *)buf, 0x16u);
              }
              sub_100367D9C((long long *)(v31 + 112), *(long long **)(a1 + 672), v31);
              uint64_t v52 = *(void *)(a1 + 672);
              double v13 = v33;
              if (v52 != v51)
              {
                uint64_t v53 = v52 - 72;
                do
                {
                  *(void *)(v52 - 72) = off_100853598;
                  v53 -= 112;
                  v52 -= 112;
                }
                while (v52 != v51);
              }
              *(void *)(a1 + 672) = v51;
            }
          }
          while (v31 != v51);
          float v56 = (char *)v159;
          a3 = v155;
          uint64_t v11 = a1 + 192;
          if ((void *)v159 != __p)
          {
            uint64_t v57 = *(_OWORD **)(a1 + 696);
            do
            {
              uint64_t v58 = *((void *)v56 - 1);
              v56 -= 8;
              sub_100367E18((uint64_t)buf, (_OWORD *)(*(void *)(a1 + 688) + 208 * v58 + 208), v57, (_OWORD *)(*(void *)(a1 + 688) + 208 * v58));
              uint64_t v57 = v59;
              uint64_t v60 = *(_OWORD **)(a1 + 696);
              if (v60 != v59)
              {
                uint64_t v61 = v60 - 11;
                do
                {
                  *((void *)v60 - 14) = off_100853598;
                  *((void *)v60 - 22) = off_100853598;
                  v61 -= 13;
                  v60 -= 13;
                }
                while (v60 != v59);
              }
              *(void *)(a1 + 696) = v59;
            }
            while (v56 != __p);
          }
        }
        sub_100362968(a1);
        uint64_t v62 = *(double **)(a1 + 664);
        uint64_t v63 = *(double **)(a1 + 672);
        if (v62 == v63)
        {
          *(void *)(a1 + 632) = 0x3FF0000000000000;
        }
        else
        {
          unint64_t v64 = v62 + 14;
          unint64_t v65 = *(double **)(a1 + 664);
          if (v62 + 14 != v63)
          {
            unint64_t v65 = *(double **)(a1 + 664);
            do
            {
              if (v64[1] < v65[1]) {
                unint64_t v65 = v64;
              }
              v64 += 14;
            }
            while (v64 != v63);
          }
          double v66 = fmax(v65[1], 1.0);
          if (v66 != *(double *)(a1 + 632))
          {
            *(double *)(a1 + 632) = v66;
            do
            {
              double v67 = sub_10039591C(v62[1] / *(double *)(a1 + 632));
              v62[4] = v67;
              _OWORD v62[2] = v62[1] / (v67 * v62[3]);
              v62 += 14;
            }
            while (v62 != v63);
          }
        }
        if (__p)
        {
          *(void *)&long long v159 = __p;
          operator delete(__p);
        }
      }
    }
    else if ((v28 - v25) / *(double *)(a2 + 16) > 6.0)
    {
      int v29 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0]) = 134218496;
        *(double *)((char *)buf + 4) = v27;
        WORD2(buf[1]) = 2048;
        *(double *)((char *)&buf[1] + 6) = v26;
        HIWORD(buf[2]) = 2048;
        *(double *)&double buf[3] = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#sa_algo_batchfilter,LoS->nLoS event detected by the batch filter: Previous range %f m, Current range %f m, Distance travelled %f m", (uint8_t *)buf, 0x20u);
      }
      goto LABEL_132;
    }
  }
  uint64_t v68 = *(double **)(a1 + 664);
  unint64_t v69 = *(double **)(a1 + 672);
  double v70 = *(double *)(a2 + 8);
  if (v68 == v69)
  {
    double v75 = fmax(v70, 1.0);
    *(double *)(a1 + 632) = v75;
    long long v76 = *v13;
    if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134217984;
      *(double *)((char *)buf + 4) = v75;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Minimum observed range initialized to %f m", (uint8_t *)buf, 0xCu);
    }
  }
  else
  {
    double v71 = *(double *)(a1 + 632);
    if (v70 < v71 && v71 > 1.0)
    {
      double v72 = fmax(v70, 1.0);
      *(double *)(a1 + 632) = v72;
      uint64_t v73 = *v13;
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134217984;
        *(double *)((char *)buf + 4) = v72;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Minimum observed range changed to %f m", (uint8_t *)buf, 0xCu);
        uint64_t v68 = *(double **)(a1 + 664);
        unint64_t v69 = *(double **)(a1 + 672);
      }
      while (v68 != v69)
      {
        double v74 = sub_10039591C(v68[1] / *(double *)(a1 + 632));
        v68[4] = v74;
        v68[2] = v68[1] / (v74 * v68[3]);
        v68 += 14;
      }
    }
  }
  double v77 = sub_10039591C(*(double *)(a2 + 8) / *(double *)(a1 + 632));
  double v78 = *(double *)(a2 + 8);
  if (v78 <= 10.0) {
    double v79 = 0.1;
  }
  else {
    double v79 = *(double *)(a2 + 8) / 10.0 * 0.1;
  }
  int v80 = *(_DWORD *)(a2 + 24);
  buf[0] = *(void *)a2;
  *(double *)&buf[1] = v78;
  *(double *)&buf[2] = v78 / (v77 * v79);
  *(double *)&double buf[3] = v79;
  *(double *)&long long v214 = v77;
  sub_10034CDD4((uint64_t)&v214 + 8, (uint64_t)&v192);
  DWORD2(v218) = v80;
  unint64_t v81 = *(void *)(a1 + 672);
  if (v81 >= *(void *)(a1 + 680))
  {
    uint64_t v84 = sub_100367E90((uint64_t *)(a1 + 664), (long long *)buf);
  }
  else
  {
    long long v82 = *(_OWORD *)buf;
    long long v83 = *(_OWORD *)&buf[2];
    *(void *)(v81 + 32) = v214;
    *(_OWORD *)unint64_t v81 = v82;
    *(_OWORD *)(v81 + 16) = v83;
    sub_10034CDD4(v81 + 40, (uint64_t)&v214 + 8);
    *(_DWORD *)(v81 + 104) = DWORD2(v218);
    uint64_t v84 = v81 + 112;
    *(void *)(a1 + 672) = v81 + 112;
  }
  *(void *)(a1 + 672) = v84;
  if (*(unsigned char *)(a2 + 88))
  {
    if (*(unsigned char *)(a2 + 80))
    {
      double v85 = *(double *)(a2 + 72);
      if (v85 > 1.1)
      {
        os_log_t v86 = *v13;
        if (!os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_132;
        }
        LODWORD(buf[0]) = 134217984;
        *(double *)((char *)buf + 4) = v85;
        uint64_t v87 = "#sa_algo_batchfilter,AoA measurement rejected due to high multipath probability (%4.2f)";
        uint64_t v88 = v86;
        uint32_t v89 = 12;
        goto LABEL_107;
      }
    }
    double v90 = *(double *)(a2 + 56);
    double v91 = *(double *)(a2 + 64);
    if ((v91 < 450.0 || v90 < 0.0) && (v91 < 200.0 || v90 < 40.0))
    {
      os_log_t v153 = *v13;
      if (!os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_132;
      }
      LODWORD(buf[0]) = 134218240;
      *(double *)((char *)buf + 4) = v91;
      WORD2(buf[1]) = 2048;
      *(double *)((char *)&buf[1] + 6) = v90;
      uint64_t v87 = "#sa_algo_batchfilter,AoA measurement rejected due to low track score (%4.1f) or low sweep angle (%4.1f deg)";
      uint64_t v88 = v153;
      uint32_t v89 = 22;
LABEL_107:
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, v87, (uint8_t *)buf, v89);
      goto LABEL_132;
    }
    uint64_t v92 = *v13;
    if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134218240;
      *(double *)((char *)buf + 4) = v91;
      WORD2(buf[1]) = 2048;
      *(double *)((char *)&buf[1] + 6) = v90;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,AoA measurement accepted: track score (%4.1f) and sweep angle (%4.1f deg)", (uint8_t *)buf, 0x16u);
    }
    *(_WORD *)(a1 + 920) = 1;
    *(void *)(a1 + 624) = *(void *)a2;
    double buf[3] = 0x100000003;
    *(_OWORD *)&buf[1] = xmmword_1004C1B50;
    buf[0] = off_100861B38;
    *(void *)&long long v214 = (char *)&v214 + 8;
    sub_1003419A0((uint64_t)v197, a1 + 536, (uint64_t)buf);
    *((void *)&v179[1] + 1) = 0x100000003;
    *(_OWORD *)((char *)v179 + 8) = xmmword_1004C1B50;
    *(void *)&v179[0] = off_100861B38;
    *(void *)&long long v180 = (char *)&v180 + 8;
    sub_100342718((uint64_t)&v203, (uint64_t)buf, (uint64_t)v179);
    if (!*(unsigned char *)(a2 + 88)) {
      sub_10000AE44();
    }
    sub_1003955B0((uint64_t)&v168, *(double *)(a2 + 8), *(double *)(a2 + 40) / 180.0 * 3.14159265, *(double *)(a2 + 32) / 180.0 * 3.14159265);
    double buf[3] = 0x100000003;
    *(_OWORD *)&buf[1] = xmmword_1004C1B50;
    buf[0] = off_100861B38;
    *(void *)&long long v214 = (char *)&v214 + 8;
    sub_1003419A0((uint64_t)v197, (uint64_t)&v168, (uint64_t)buf);
    uint64_t v165 = 0x100000003;
    unint64_t v163 = off_100861B38;
    long long v164 = xmmword_1004C1B50;
    unint64_t v166 = v167;
    sub_100342718((uint64_t)buf, (uint64_t)v179, (uint64_t)&v163);
    unint64_t v93 = *v13;
    if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v94 = *(void *)(a1 + 624);
      double v95 = sub_1002A43C0((uint64_t)&v163, 0);
      double v96 = sub_1002A43C0((uint64_t)&v163, 1u);
      double v97 = sub_1002A43C0((uint64_t)&v163, 2u);
      LODWORD(buf[0]) = 134218752;
      *(void *)((char *)buf + 4) = v94;
      WORD2(buf[1]) = 2048;
      *(double *)((char *)&buf[1] + 6) = v95;
      HIWORD(buf[2]) = 2048;
      *(double *)&double buf[3] = v96;
      LOWORD(v214) = 2048;
      *(double *)((char *)&v214 + 2) = v97;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Solution from AoA is generated at %f s - device pos is [%f, %f, %f] m", (uint8_t *)buf, 0x2Au);
    }
    uint64_t v98 = 0;
    *(_DWORD *)(a1 + 72) = 5;
    *(unsigned char *)(a1 + 76) = 1;
    *(_DWORD *)(a1 + 80) = 2;
    *(unsigned char *)(a1 + 84) = 0;
    *(void *)(a1 + 112) = 0;
    long long v220 = 0u;
    long long v221 = 0u;
    long long v218 = 0u;
    long long v219 = 0u;
    long long v216 = 0u;
    long long v217 = 0u;
    long long v214 = 0u;
    long long v215 = 0u;
    memset(buf, 0, sizeof(buf));
    do
    {
      *(double *)&buf[v98] = sub_1002A43C0((uint64_t)&v163, v98);
      ++v98;
    }
    while (v98 != 3);
    double buf[3] = 0x3F847AE147AE147CLL;
    long long v214 = 0uLL;
    long long v215 = xmmword_1004C26E0;
    long long v216 = xmmword_1004C26F0;
    *(void *)&long long v217 = 0x3FF0000000000000;
    LODWORD(v222) = 0;
    unint64_t v99 = *(void *)(a1 + 104);
    unint64_t v100 = *(void *)(a1 + 88);
    *(void *)(a1 + 96) = v100;
    if (v100 >= v99)
    {
      unint64_t v102 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v99 - v100) >> 3);
      uint64_t v103 = 2 * v102;
      if (2 * v102 <= 1) {
        uint64_t v103 = 1;
      }
      if (v102 >= 0xC30C30C30C30C3) {
        unint64_t v104 = 0x186186186186186;
      }
      else {
        unint64_t v104 = v103;
      }
      unint64_t v105 = (char *)sub_1000279FC(a1 + 104, v104);
      long long v107 = &v105[168 * v106];
      *((_OWORD *)v105 + 6) = v218;
      *((_OWORD *)v105 + 5) = v217;
      *((_OWORD *)v105 + 4) = v216;
      *((_OWORD *)v105 + 3) = v215;
      *((void *)v105 + 20) = v222;
      *((_OWORD *)v105 + 9) = v221;
      *((_OWORD *)v105 + 8) = v220;
      *((_OWORD *)v105 + 7) = v219;
      *(_OWORD *)unint64_t v105 = *(_OWORD *)buf;
      *((_OWORD *)v105 + 1) = *(_OWORD *)&buf[2];
      *((_OWORD *)v105 + 2) = v214;
      __int16 v101 = v105 + 168;
      uint64_t v109 = *(char **)(a1 + 88);
      long long v108 = *(char **)(a1 + 96);
      if (v108 != v109)
      {
        do
        {
          long long v110 = *(_OWORD *)(v108 - 168);
          long long v111 = *(_OWORD *)(v108 - 152);
          *(_OWORD *)(v105 - 136) = *(_OWORD *)(v108 - 136);
          *(_OWORD *)(v105 - 152) = v111;
          *(_OWORD *)(v105 - 168) = v110;
          long long v112 = *(_OWORD *)(v108 - 120);
          long long v113 = *(_OWORD *)(v108 - 104);
          long long v114 = *(_OWORD *)(v108 - 88);
          *(_OWORD *)(v105 - 72) = *(_OWORD *)(v108 - 72);
          *(_OWORD *)(v105 - 88) = v114;
          *(_OWORD *)(v105 - 104) = v113;
          *(_OWORD *)(v105 - 120) = v112;
          long long v115 = *(_OWORD *)(v108 - 56);
          long long v116 = *(_OWORD *)(v108 - 40);
          long long v117 = *(_OWORD *)(v108 - 24);
          *((_DWORD *)v105 - 2) = *((_DWORD *)v108 - 2);
          *(_OWORD *)(v105 - 24) = v117;
          *(_OWORD *)(v105 - 40) = v116;
          *(_OWORD *)(v105 - 56) = v115;
          v105 -= 168;
          v108 -= 168;
        }
        while (v108 != v109);
        long long v108 = *(char **)(a1 + 88);
      }
      *(void *)(a1 + 88) = v105;
      *(void *)(a1 + 96) = v101;
      *(void *)(a1 + 104) = v107;
      if (v108) {
        operator delete(v108);
      }
    }
    else
    {
      *(_OWORD *)(v100 + 112) = v219;
      *(_OWORD *)(v100 + 128) = v220;
      *(_OWORD *)(v100 + 144) = v221;
      *(void *)(v100 + 160) = v222;
      *(_OWORD *)(v100 + 48) = v215;
      *(_OWORD *)(v100 + 64) = v216;
      *(_OWORD *)(v100 + 80) = v217;
      *(_OWORD *)(v100 + 96) = v218;
      *(_OWORD *)unint64_t v100 = *(_OWORD *)buf;
      *(_OWORD *)(v100 + 16) = *(_OWORD *)&buf[2];
      *(_OWORD *)(v100 + 32) = v214;
      __int16 v101 = (char *)(v100 + 168);
    }
    *(void *)(a1 + 96) = v101;
  }
LABEL_132:
  if ((*(unsigned char *)(a1 + 924) || *(unsigned char *)(a1 + 925))
    && (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 672) - *(void *)(a1 + 664)) >> 4)) >= 4)
  {
    sub_1003629F4(a1);
  }
  uint64_t v118 = *(void *)(a1 + 672) - *(void *)(a1 + 664);
  unint64_t v119 = 0x6DB6DB6DB6DB6DB7 * (v118 >> 4);
  if (v119 >= 4
    && !*(unsigned char *)(a1 + 924)
    && !*(unsigned char *)(a1 + 925)
    && *(double *)(a1 + 608) - *(double *)(a1 + 616) >= 0.5)
  {
    BOOL v154 = sub_100362BC8(a1);
    *(unsigned char *)(a1 + 926) = v154;
    if (v154)
    {
      *(void *)(a1 + 616) = *(void *)(a1 + 608);
      sub_10035ED54(a1);
      *(unsigned char *)(a1 + 921) = 0;
      goto LABEL_145;
    }
LABEL_144:
    sub_10035FC48(a1);
    goto LABEL_145;
  }
  if (v118 == 112)
  {
    double v120 = *(double *)(a1 + 608);
    *(double *)(a1 + 600) = v120;
    *(double *)(a1 + 616) = v120 + -0.5;
    goto LABEL_145;
  }
  if (v119 >= 5 && !*(unsigned char *)(a1 + 926)) {
    goto LABEL_144;
  }
LABEL_145:
  *(_DWORD *)long long v189 = 0;
  v189[4] = 0;
  *(_DWORD *)&v189[8] = 0;
  long long __src = 0u;
  long long v191 = 0u;
  v189[12] = 0;
  if (*(unsigned char *)(a1 + 927))
  {
    int v121 = 6;
LABEL_147:
    *(_DWORD *)long long v189 = v121;
    goto LABEL_148;
  }
  if (*(unsigned char *)(a1 + 924))
  {
    if (!*(unsigned char *)(a1 + 925))
    {
      int v121 = 1;
      goto LABEL_147;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 925))
    {
      int32x4_t v122 = *v13;
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v123 = *(void *)(a1 + 640);
        LODWORD(buf[0]) = 134217984;
        *(void *)((char *)buf + 4) = v123;
        _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Linear user path length is %4.2f m", (uint8_t *)buf, 0xCu);
      }
      if (*(double *)(a1 + 640) >= 1.5) {
        int v121 = 3;
      }
      else {
        int v121 = 2;
      }
      goto LABEL_147;
    }
    if (!*(unsigned char *)(a1 + 926))
    {
      int v121 = 4;
      goto LABEL_147;
    }
    uint64_t v157 = v11;
    *(_DWORD *)long long v189 = 5;
    *(_DWORD *)&v189[8] = *(_DWORD *)(a1 + 928);
    v189[4] = *(_DWORD *)&v189[8] == 2;
    uint64_t v124 = *(void *)(a1 + 168);
    for (uint64_t j = *(void *)(a1 + 176); v124 != j; v124 += 432)
    {
      uint64_t v125 = 0;
      long long v186 = 0u;
      long long v187 = 0u;
      long long v184 = 0u;
      long long v185 = 0u;
      long long v182 = 0u;
      long long v183 = 0u;
      long long v180 = 0u;
      long long v181 = 0u;
      memset(v179, 0, sizeof(v179));
      LODWORD(v188) = 1;
      do
      {
        *((void *)v179 + v125) = *(void *)sub_1003416AC(v124, v125);
        ++v125;
      }
      while (v125 != 3);
      *((void *)&v179[1] + 1) = *(void *)sub_10034185C(v124 + 128, 0, 0);
      *(void *)&long long v180 = *(void *)sub_10034185C(v124 + 128, 0, 1);
      *((void *)&v180 + 1) = *(void *)sub_10034185C(v124 + 128, 0, 2);
      *(void *)&long long v181 = *(void *)sub_10034185C(v124 + 128, 1, 1);
      *((void *)&v181 + 1) = *(void *)sub_10034185C(v124 + 128, 1, 2);
      *(void *)&long long v182 = *(void *)sub_10034185C(v124 + 128, 2, 2);
      int v126 = *(_DWORD *)(v124 + 136);
      if (v126 != *(_DWORD *)(v124 + 140)) {
        __assert_rtn("Trace", "cnmatrixbase.h", 4977, "A.NumRows() == A.NumCols()");
      }
      if (v126 < 1)
      {
        double v128 = 0.0;
      }
      else
      {
        int v127 = 0;
        double v128 = 0.0;
        do
        {
          double v128 = v128 + sub_10034DEB8(v124 + 128, v127, v127);
          ++v127;
        }
        while (v126 != v127);
      }
      uint64_t v129 = *(void *)(v124 + 352);
      *((void *)&v182 + 1) = sqrt(v128);
      *(void *)&long long v183 = v129;
      LODWORD(v188) = *(_DWORD *)(v124 + 360);
      uint64_t v160 = 0x100000003;
      stat __p = off_100861B38;
      long long v159 = xmmword_1004C1B50;
      v161 = v162;
      sub_1003418A0(v124 + 368, v157, (uint64_t)&__p);
      uint64_t v170 = 0x100000003;
      long long v169 = xmmword_1004C1B50;
      v168 = off_100861B38;
      long long v171 = v172;
      double buf[3] = 0x100000134;
      *(_OWORD *)&buf[1] = xmmword_1004C1B70;
      buf[0] = off_100861C10;
      *(void *)&long long v214 = (char *)&v214 + 8;
      uint64_t v165 = 0x100000003;
      unint64_t v163 = off_100861B38;
      long long v164 = xmmword_1004C1B50;
      unint64_t v166 = v167;
      sub_100341B04((uint64_t)&__p, (uint64_t)&v168, (uint64_t)buf, (uint64_t)&v163, "2");
      if (v130 != 0.0)
      {
        uint64_t v177 = 0;
        uint64_t v176 = 0;
        uint64_t v178 = 0;
        memset(v175, 0, sizeof(v175));
        memset(v174, 0, sizeof(v174));
        sub_100364244(&v176, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 672) - *(void *)(a1 + 664)) >> 4));
        sub_10034226C(v124 + 368, v157);
        double buf[3] = 0x100000003;
        *(_OWORD *)&buf[1] = xmmword_1004C1B50;
        buf[0] = off_100861B38;
        *(void *)&long long v214 = (char *)&v214 + 8;
        sub_1003418A0(v124, v157, (uint64_t)buf);
        sub_10039544C((uint64_t)buf, (uint64_t)v173);
        sub_10034226C(v124 + 64, (uint64_t)v173);
        sub_1003642F8(v131, (uint64_t)v173, v157, (double **)(a1 + 664), v174, &v176, v175);
        uint64_t v170 = 0x300000003;
        long long v169 = xmmword_1004C1E40;
        v168 = off_100861B80;
        long long v171 = v172;
        sub_1003411F0(&v168, 3, 3);
        sub_100341240((uint64_t)&v168, 0.0);
        uint64_t v132 = v176;
        for (uint64_t k = v177; v132 != k; v132 += 136)
        {
          uint64_t v165 = 0x300000003;
          unint64_t v163 = off_100861B80;
          long long v164 = xmmword_1004C1E40;
          unint64_t v166 = v167;
          sub_1003419A0(v132 + 72, v132 + 8, (uint64_t)&v163);
          double buf[3] = 0x300000003;
          *(_OWORD *)&buf[1] = xmmword_1004C1E40;
          buf[0] = off_100861B80;
          *(void *)&long long v214 = (char *)&v214 + 8;
          sub_100342718((uint64_t)&v168, (uint64_t)&v163, (uint64_t)buf);
          sub_10034226C((uint64_t)&v168, (uint64_t)buf);
        }
        sub_10034CF64((uint64_t)&v163, (uint64_t)&v168);
        uint64_t v160 = 0x300000003;
        stat __p = off_100861B80;
        long long v159 = xmmword_1004C1E40;
        v161 = v162;
        uint64_t v210 = 0x100000003;
        long long v209 = xmmword_1004C1B50;
        v208 = off_1008627E0;
        v211 = &v212;
        double buf[3] = 0x10000000CLL;
        *(_OWORD *)&buf[1] = xmmword_1004C2700;
        buf[0] = off_100862828;
        *(void *)&long long v214 = (char *)&v214 + 8;
        sub_1003517F4((uint64_t)&v163, (uint64_t)&v208, (uint64_t)buf, (uint64_t)&__p);
      }
      *((void *)&v183 + 1) = *(void *)sub_1003416AC(v124 + 64, 0);
      *(void *)&long long v184 = *(void *)sub_1003416AC(v124 + 64, 1u);
      *((void *)&v184 + 1) = *(void *)sub_1003416AC(v124 + 64, 2u);
      *(void *)&long long v185 = sqrt(*(double *)sub_10034185C(v124 + 240, 0, 0));
      *((void *)&v185 + 1) = sqrt(*(double *)sub_10034185C(v124 + 240, 1, 1));
      uint64_t v134 = 0;
      *(void *)&long long v186 = sqrt(*(double *)sub_10034185C(v124 + 240, 2, 2));
      do
      {
        *((void *)&v186 + v134 + 1) = *(void *)sub_1003416AC(v124 + 368, v134);
        ++v134;
      }
      while (v134 != 3);
      long long v135 = (_OWORD *)*((void *)&__src + 1);
      if (*((void *)&__src + 1) >= (unint64_t)v191)
      {
        long long v137 = (_OWORD *)__src;
        unint64_t v138 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)&__src + 1) - __src) >> 3);
        unint64_t v139 = v138 + 1;
        if (v138 + 1 > 0x186186186186186) {
          sub_1000267C4();
        }
        if (0x9E79E79E79E79E7ALL * ((uint64_t)(v191 - __src) >> 3) > v139) {
          unint64_t v139 = 0x9E79E79E79E79E7ALL * ((uint64_t)(v191 - __src) >> 3);
        }
        if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v191 - __src) >> 3) >= 0xC30C30C30C30C3) {
          unint64_t v140 = 0x186186186186186;
        }
        else {
          unint64_t v140 = v139;
        }
        if (v140)
        {
          uint64_t v141 = (char *)sub_1000279FC((uint64_t)&v191, v140);
          long long v135 = (_OWORD *)*((void *)&__src + 1);
          long long v137 = (_OWORD *)__src;
        }
        else
        {
          uint64_t v141 = 0;
        }
        unint64_t v142 = &v141[168 * v138];
        *((_OWORD *)v142 + 7) = v185;
        *((_OWORD *)v142 + 8) = v186;
        *((_OWORD *)v142 + 9) = v187;
        *((void *)v142 + 20) = v188;
        *((_OWORD *)v142 + 3) = v181;
        *((_OWORD *)v142 + 4) = v182;
        *((_OWORD *)v142 + 5) = v183;
        *((_OWORD *)v142 + 6) = v184;
        *(_OWORD *)unint64_t v142 = v179[0];
        *((_OWORD *)v142 + 1) = v179[1];
        *((_OWORD *)v142 + 2) = v180;
        if (v135 == v137)
        {
          unint64_t v152 = &v141[168 * v138];
        }
        else
        {
          v143 = &v141[168 * v138];
          do
          {
            long long v144 = *(_OWORD *)((char *)v135 - 168);
            long long v145 = *(_OWORD *)((char *)v135 - 152);
            *(_OWORD *)(v143 - 136) = *(_OWORD *)((char *)v135 - 136);
            *(_OWORD *)(v143 - 152) = v145;
            *(_OWORD *)(v143 - 168) = v144;
            long long v146 = *(_OWORD *)((char *)v135 - 120);
            long long v147 = *(_OWORD *)((char *)v135 - 104);
            long long v148 = *(_OWORD *)((char *)v135 - 88);
            *(_OWORD *)(v143 - 72) = *(_OWORD *)((char *)v135 - 72);
            *(_OWORD *)(v143 - 88) = v148;
            *(_OWORD *)(v143 - 104) = v147;
            *(_OWORD *)(v143 - 120) = v146;
            long long v149 = *(_OWORD *)((char *)v135 - 56);
            long long v150 = *(_OWORD *)((char *)v135 - 40);
            long long v151 = *(_OWORD *)((char *)v135 - 24);
            unint64_t v152 = v143 - 168;
            *((_DWORD *)v143 - 2) = *((_DWORD *)v135 - 2);
            *(_OWORD *)(v143 - 24) = v151;
            *(_OWORD *)(v143 - 40) = v150;
            *(_OWORD *)(v143 - 56) = v149;
            long long v135 = (_OWORD *)((char *)v135 - 168);
            v143 -= 168;
          }
          while (v135 != v137);
        }
        long long v136 = v142 + 168;
        *(void *)&long long __src = v152;
        *((void *)&__src + 1) = v142 + 168;
        *(void *)&long long v191 = &v141[168 * v140];
        if (v137) {
          operator delete(v137);
        }
      }
      else
      {
        *(_OWORD *)(*((void *)&__src + 1) + 112) = v185;
        v135[8] = v186;
        v135[9] = v187;
        *((void *)v135 + 20) = v188;
        v135[3] = v181;
        v135[4] = v182;
        v135[5] = v183;
        v135[6] = v184;
        *long long v135 = v179[0];
        v135[1] = v179[1];
        v135[2] = v180;
        long long v136 = (char *)v135 + 168;
      }
      *((void *)&__src + 1) = v136;
      if (!*(unsigned char *)(a1 + 656)) {
        sub_10000AE44();
      }
      *((void *)&v191 + 1) = *(void *)(a1 + 648);
    }
  }
LABEL_148:
  *(void *)(a1 + 24) = *(void *)v189;
  *(void *)(a1 + 29) = *(void *)&v189[5];
  if ((unsigned char *)(a1 + 24) != v189) {
    sub_100366F58((char *)(a1 + 40), (char *)__src, *((uint64_t *)&__src + 1), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((void *)&__src + 1) - __src) >> 3));
  }
  *(void *)(a1 + 64) = *((void *)&v191 + 1);
  sub_10035E7BC(a1, a3);
  if ((void)__src)
  {
    *((void *)&__src + 1) = __src;
    operator delete((void *)__src);
  }
}

void sub_10036284C(_Unwind_Exception *a1)
{
}

void sub_100362968(uint64_t a1)
{
  *(void *)(a1 + 616) = *(void *)(a1 + 600);
  *(void *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 923) = 65792;
  *(unsigned char *)(a1 + 932) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  uint64_t v1 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Batch filter is reset", v2, 2u);
  }
}

void sub_1003629F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 664);
  uint64_t v2 = *(void *)(a1 + 672);
  if (v1 != v2)
  {
    if (v1 + 112 != v2)
    {
      uint64_t v4 = v1 + 152;
      do
      {
        long long v5 = *(_OWORD *)v1;
        long long v6 = *(_OWORD *)(v1 + 16);
        uint64_t v24 = *(void *)(v1 + 32);
        v23[1] = v6;
        v23[0] = v5;
        sub_10034CDD4((uint64_t)&v25, v1 + 40);
        int v26 = *(_DWORD *)(v1 + 104);
        long long v7 = *(_OWORD *)(v4 - 40);
        long long v8 = *(_OWORD *)(v4 - 24);
        uint64_t v20 = *(void *)(v4 - 8);
        v19[0] = v7;
        v19[1] = v8;
        sub_10034CDD4((uint64_t)&v21, v4);
        int v22 = *(_DWORD *)(v4 + 64);
        double v21 = off_100853598;
        double v25 = off_100853598;
        if (*((double *)v23 + 1) < *((double *)v19 + 1)) {
          uint64_t v1 = v4 - 40;
        }
        uint64_t v9 = v4 + 72;
        v4 += 112;
      }
      while (v9 != v2);
    }
    uint64_t v10 = *(double **)a1;
    uint64_t v11 = *(double **)(a1 + 8);
    if (*(double **)a1 != v11)
    {
      BOOL v12 = 0;
      double v13 = *(double *)(v1 + 8);
      do
      {
        if (v12)
        {
          BOOL v12 = 1;
        }
        else
        {
          LOBYTE(v19[0]) = 1;
          char v18 = 0;
          *(void *)&v23[0] = 0;
          sub_1003666FC(*v10, v10[1], a1, (uint64_t *)(a1 + 664), (BOOL *)v19, &v18, (double *)v23);
          int v14 = LOBYTE(v19[0]);
          if (*(unsigned char *)(a1 + 924)) {
            BOOL v15 = LOBYTE(v19[0]) == 0;
          }
          else {
            BOOL v15 = 1;
          }
          char v16 = !v15;
          *(unsigned char *)(a1 + 924) = v16;
          if (!v14)
          {
            if (!v18)
            {
              *(unsigned char *)(a1 + 925) = 0;
              return;
            }
            double v17 = *(double *)(a1 + 640);
            if (v17 < *(double *)v23) {
              double v17 = *(double *)v23;
            }
            *(double *)(a1 + 640) = v17;
          }
          BOOL v12 = v13 <= v10[1];
        }
        v10 += 2;
      }
      while (v10 != v11);
    }
  }
}

BOOL sub_100362BC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 672);
  uint64_t v2 = *(void *)(a1 + 664);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v1 - v2) >> 4)) >= 4)
  {
    uint64_t v84 = 0;
    uint64_t v83 = 0;
    uint64_t v85 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    uint64_t v57 = (uint64_t *)(a1 + 168);
    uint64_t v5 = *(void *)(a1 + 176);
    if (*(unsigned char *)(a1 + 926)) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v4 == v5;
    }
    if (v6)
    {
      if (v2 != v1)
      {
        for (uint64_t i = v2 + 112; i != v1; i += 112)
        {
          if (*(double *)(i + 8) < *(double *)(v2 + 8)) {
            uint64_t v2 = i;
          }
        }
      }
      if (*(double *)(v2 + 8) >= 0.5) {
        double v11 = *(double *)(v2 + 8);
      }
      else {
        double v11 = 0.5;
      }
      sub_10034CDD4((uint64_t)buf, v2 + 40);
      for (unsigned int j = 0; j != 3; ++j)
      {
        sub_10034CDD4((uint64_t)&v64, (uint64_t)buf);
        sub_10034CDD4((uint64_t)&v59, (uint64_t)buf);
        double v13 = *(double *)sub_1003416AC((uint64_t)&v64, j);
        *(double *)sub_1003416AC((uint64_t)&v64, j) = v11 + v13;
        double v14 = *(double *)sub_1003416AC((uint64_t)&v59, j);
        *(double *)sub_1003416AC((uint64_t)&v59, j) = v14 - v11;
        sub_10034A7C4(&v83, (uint64_t)&v64);
        sub_10034A7C4(&v83, (uint64_t)&v59);
      }
    }
    else
    {
      if (v4 != v5)
      {
        do
        {
          sub_10034A7C4(&v83, v4);
          v4 += 432;
        }
        while (v4 != v5);
        uint64_t v5 = *v57;
      }
      sub_10034CDD4((uint64_t)buf, v5);
      sub_10034CDD4((uint64_t)&v64, (uint64_t)buf);
      sub_10034CDD4((uint64_t)&v59, (uint64_t)buf);
      double v7 = *(double *)sub_1003416AC((uint64_t)&v64, 1u);
      *(double *)sub_1003416AC((uint64_t)&v64, 1u) = v7 + 3.0;
      double v8 = *(double *)sub_1003416AC((uint64_t)&v59, 1u);
      *(double *)sub_1003416AC((uint64_t)&v59, 1u) = v8 + -3.0;
      sub_10034A7C4(&v83, (uint64_t)&v64);
      sub_10034A7C4(&v83, (uint64_t)&v59);
    }
    uint64_t v58 = a1;
    BOOL v15 = (uint64_t *)(a1 + 664);
    unint64_t v81 = 0;
    uint64_t v80 = 0;
    uint64_t v82 = 0;
    if (v83 != v84)
    {
      unint64_t v64 = 0;
      long long v65 = 0uLL;
      sub_100364A7C(a1, v83, (uint64_t)v15, (double **)&v64);
    }
    uint64_t v16 = a1;
    sub_1003654D0((uint64_t)&v80, 0, 0);
    unint64_t v17 = 126 - 2 * __clz(0x51B3BEA3677D46CFLL * ((uint64_t)&v81[-v80] >> 3));
    if (v81 == (char *)v80) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v17;
    }
    sub_100368E18(v80, v81, v18, 1);
    if ((char *)v80 != v81)
    {
      double v20 = sub_100365528(v19, v80, v15);
      *(double *)(a1 + 648) = v20;
      *(unsigned char *)(a1 + 656) = 1;
      double v21 = *(double *)(a1 + 976);
      if (v20 > v21)
      {
        int v22 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134218240;
          *(double *)&void buf[4] = v20;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Batch filter has detected an issue with the measurements - rms normalized error (%f) is above the threshold (%f)", buf, 0x16u);
        }
        sub_10035EB84(a1);
        BOOL v9 = 0;
        *(unsigned char *)(a1 + 927) = 1;
        goto LABEL_77;
      }
      uint64_t v78 = 0;
      uint64_t v77 = 0;
      unint64_t v79 = 0;
      uint64_t v23 = sub_10036A41C(&v77, v80);
      uint64_t v24 = v23;
      uint64_t v25 = v80;
      uint64_t v78 = v23;
      if ((unint64_t)(0x51B3BEA3677D46CFLL * ((uint64_t)&v81[-v80] >> 3)) >= 2)
      {
        unint64_t v26 = 1;
        uint64_t v27 = v23;
        do
        {
          if (v27 == v77)
          {
            unint64_t v30 = v27;
          }
          else
          {
            unint64_t v28 = 0;
            BOOL v29 = 1;
            uint64_t v27 = v77;
            unint64_t v30 = v24;
            do
            {
              uint64_t v31 = v27 + 376 * v28 + 8;
              while (!v29)
              {
                BOOL v29 = 0;
                ++v28;
                v31 += 376;
                if (0x51B3BEA3677D46CFLL * ((uint64_t)(v30 - v27) >> 3) <= v28)
                {
                  uint64_t v25 = v80;
                  uint64_t v24 = v30;
                  goto LABEL_49;
                }
              }
              uint64_t v74 = 0x100000003;
              long long v73 = xmmword_1004C1B50;
              double v72 = off_100861B38;
              double v75 = &v76;
              sub_1003418A0(v80 + 376 * v26 + 8, v31, (uint64_t)&v72);
              uint64_t v66 = 0x100000003;
              long long v65 = xmmword_1004C1B50;
              unint64_t v64 = off_100861B38;
              double v67 = v68;
              uint64_t v87 = 0x100000134;
              *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1B70;
              *(void *)long long buf = off_100861C10;
              uint64_t v88 = v89;
              uint64_t v61 = 0x100000003;
              double v59 = off_100861B38;
              long long v60 = xmmword_1004C1B50;
              uint64_t v62 = v63;
              sub_100341B04((uint64_t)&v72, (uint64_t)&v64, (uint64_t)buf, (uint64_t)&v59, "2");
              BOOL v29 = v32 > 0.1;
              unint64_t v30 = v78;
              uint64_t v27 = v77;
              ++v28;
            }
            while (0x51B3BEA3677D46CFLL * ((v78 - v77) >> 3) > v28);
            uint64_t v25 = v80;
            uint64_t v24 = v78;
            if (v32 <= 0.1) {
              goto LABEL_49;
            }
          }
          if (exp(*(double *)(v27 + 360) - *(double *)(v25 + 376 * v26 + 360)) > 0.01)
          {
            if (v30 >= v79)
            {
              uint64_t v24 = sub_10036A41C(&v77, v25 + 376 * v26);
            }
            else
            {
              sub_100368AC8((uint64_t)&v79, v30, v25 + 376 * v26);
              uint64_t v24 = v30 + 376;
            }
            uint64_t v78 = v24;
            uint64_t v25 = v80;
            unint64_t v30 = v24;
          }
LABEL_49:
          ++v26;
          uint64_t v27 = v30;
        }
        while (0x51B3BEA3677D46CFLL * ((uint64_t)&v81[-v25] >> 3) > v26);
      }
      uint64_t v33 = v77;
      uint64_t v16 = a1;
      if ((unint64_t)(0x51B3BEA3677D46CFLL * ((v24 - v77) >> 3)) <= 1) {
        goto LABEL_61;
      }
      double v34 = exp(-*(double *)(v77 + 360));
      double v35 = 0.0;
      if (v33 != v24)
      {
        uint64_t v36 = v33;
        do
        {
          double v35 = v35 + exp(-*(double *)(v36 + 360));
          v36 += 376;
        }
        while (v36 != v24);
      }
      double v37 = v34 / v35;
      if (v37 >= 0.9
        || (double v38 = (double *)sub_1003416AC(v33 + 72, 1u),
            uint64_t v24 = v78,
            uint64_t v33 = v77,
            (unint64_t)(0x51B3BEA3677D46CFLL * ((v78 - v77) >> 3)) < 2))
      {
LABEL_61:
        unint64_t v69 = 0;
        unint64_t v70 = 0;
        unint64_t v71 = 0;
        if (v33 == v24)
        {
          double v48 = 0;
          uint64_t v47 = 0;
        }
        else
        {
          do
          {
            sub_1003656C8(v33 + 8, v58 + 688, (uint64_t *)&v64);
            if (v64 != (uint64_t (**)())v65) {
              sub_100364A7C(v58, v33 + 8, (uint64_t)v15, (double **)&v64);
            }
            unint64_t v45 = v70;
            if (v70 >= v71)
            {
              uint64_t v46 = sub_10036A41C((uint64_t *)&v69, v33);
            }
            else
            {
              sub_100368AC8((uint64_t)&v71, v70, v33);
              uint64_t v46 = v45 + 376;
            }
            unint64_t v70 = v46;
            *(void *)long long buf = &v64;
            sub_100321130((void ***)buf);
            v33 += 376;
          }
          while (v33 != v24);
          uint64_t v47 = v69;
          double v48 = (char *)v70;
        }
      }
      else
      {
        double v39 = *v38;
        unint64_t v40 = 1;
        uint64_t v41 = 448;
        while (1)
        {
          unint64_t v42 = (double *)sub_1003416AC(v33 + v41, 1u);
          double v43 = fmod(*v42 - v39 + 3.14159265, 6.28318531);
          if (v43 < 0.0) {
            double v43 = v43 + 6.28318531;
          }
          double v44 = fabs(v43 + -3.14159265);
          if (v44 > 0.392699082) {
            break;
          }
          ++v40;
          uint64_t v24 = v78;
          uint64_t v33 = v77;
          v41 += 376;
          if (0x51B3BEA3677D46CFLL * ((v78 - v77) >> 3) <= v40) {
            goto LABEL_61;
          }
        }
        uint64_t v52 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134218240;
          *(double *)&void buf[4] = v37;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v44;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Batch filter clearing solutions since the best one has a low weight (%f) and the horizontal angle difference to a secondary solution is too high (%f)", buf, 0x16u);
        }
        uint64_t v53 = v77;
        if (v78 != v77)
        {
          uint64_t v54 = v78 - 368;
          uint64_t v55 = (void *)(v78 - 368);
          do
          {
            v55[30] = off_100853598;
            v55[16] = off_100853598;
            v55[8] = off_100853598;
            *uint64_t v55 = off_100853598;
            float v56 = v55 - 1;
            v55 -= 47;
            v54 -= 376;
          }
          while (v56 != (void *)v53);
        }
        double v48 = 0;
        uint64_t v47 = 0;
        uint64_t v78 = v53;
        unint64_t v69 = 0;
        unint64_t v70 = 0;
        unint64_t v71 = 0;
      }
      unint64_t v49 = 126 - 2 * __clz(0x51B3BEA3677D46CFLL * ((v48 - v47) >> 3));
      if (v48 == v47) {
        uint64_t v50 = 0;
      }
      else {
        uint64_t v50 = v49;
      }
      sub_10036A544(v47, v48, v50, 1);
      if (v69 != (char *)v70)
      {
        uint64_t v66 = 0x300000003;
        unint64_t v64 = off_100861B80;
        long long v65 = xmmword_1004C1E40;
        double v67 = v68;
        uint64_t v61 = 0x100000003;
        double v59 = off_1008627E0;
        long long v60 = xmmword_1004C1B50;
        uint64_t v62 = v63;
        uint64_t v87 = 0x10000000CLL;
        *(void *)long long buf = off_100862828;
        *(_OWORD *)&uint8_t buf[8] = xmmword_1004C2700;
        uint64_t v88 = v89;
        sub_1003517F4((uint64_t)(v69 + 248), (uint64_t)&v59, (uint64_t)buf, (uint64_t)&v64);
      }
      *(void *)long long buf = &v69;
      sub_100368620((void ***)buf);
      *(void *)long long buf = &v77;
      sub_100368620((void ***)buf);
    }
    BOOL v9 = *(void *)(v16 + 176) != *(void *)(v16 + 168);
LABEL_77:
    *(void *)long long buf = &v80;
    sub_100368620((void ***)buf);
    *(void *)long long buf = &v83;
    sub_10034E24C((void ***)buf);
    return v9;
  }
  return 0;
}

void sub_100364060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a67 = (void **)&STACK[0x210];
  sub_100368620(&a67);
  a67 = (void **)&STACK[0x228];
  sub_100368620(&a67);
  a67 = (void **)&STACK[0x240];
  sub_10034E24C(&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_100364244(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1E1E1E1E1E1E1E2) {
      sub_1000267C4();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_100368184(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 136 * v6;
    sub_10036810C(a1, v7);
    return sub_100368460((uint64_t)v7);
  }
  return result;
}

void sub_1003642E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100368460((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003642F8(uint64_t a1, uint64_t a2, uint64_t a3, double **a4, double **a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v11 = *a6;
  uint64_t v12 = a6[1];
  if (*a6 != v12)
  {
    uint64_t v13 = v12 - 128;
    do
    {
      *(void *)(v12 - 64) = off_100853598;
      *(void *)(v12 - 128) = off_100853598;
      v13 -= 136;
      v12 -= 136;
    }
    while (v12 != v11);
    a6[1] = v11;
    sub_100364244(a6, 0x6DB6DB6DB6DB6DB7 * (((char *)a4[1] - (char *)*a4) >> 4));
  }
  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  if (*a7 != v15)
  {
    uint64_t v16 = v15 - 176;
    do
    {
      *(void *)(v15 - 88) = off_100853598;
      *(void *)(v15 - 176) = off_100853598;
      v16 -= 192;
      v15 -= 192;
    }
    while (v15 != v14);
    a7[1] = v14;
    sub_100365F8C(a7, 0x4EC4EC4EC4EC4EC5 * (((char *)a5[1] - (char *)*a5) >> 4));
  }
  uint64_t v41 = a5;
  uint64_t v73 = 0x100000003;
  unint64_t v71 = off_100861B38;
  long long v72 = xmmword_1004C1B50;
  uint64_t v74 = &v75;
  uint64_t v68 = 0x300000003;
  long long v67 = xmmword_1004C1E40;
  uint64_t v66 = off_100861B80;
  unint64_t v69 = &v70;
  uint64_t result = (uint64_t)sub_1003952A8(a2, (uint64_t)&v71, (uint64_t)&v66);
  uint64_t v18 = *a4;
  uint64_t v19 = a4[1];
  if (*a4 != v19)
  {
    do
    {
      uint64_t v62 = 0x100000001;
      long long v60 = off_1008620C8;
      *(void *)&long long v20 = 0x100000001;
      *((void *)&v20 + 1) = 0x100000001;
      long long v61 = v20;
      uint64_t v63 = v64;
      uint64_t v57 = 0x300000001;
      uint64_t v55 = off_100862708;
      long long v56 = xmmword_1004C2710;
      uint64_t v58 = v59;
      uint64_t v51 = 0x100000003;
      unint64_t v49 = off_100861B38;
      long long v50 = xmmword_1004C1B50;
      uint64_t v52 = v53;
      sub_1003418A0((uint64_t)(v18 + 5), a3, (uint64_t)&v49);
      sub_1003950E4(a2, (uint64_t)&v66, (uint64_t)&v71, (uint64_t)&v49, (uint64_t)&v60, (uint64_t)&v55);
      double v22 = v18[3];
      double v21 = v18[4];
      double v65 = 0.0;
      double v23 = v18[2];
      uint64_t v24 = (double *)sub_1003416AC((uint64_t)&v60, 0);
      double v25 = 1.0 / (v22 * v21);
      double v65 = v23 - v25 * *v24;
      uint64_t v51 = 0x300000001;
      unint64_t v49 = off_100862708;
      long long v50 = xmmword_1004C2710;
      uint64_t v52 = v53;
      sub_100351D20((uint64_t)&v55, (uint64_t)&v49, v25);
      unsigned int v26 = 0;
      uint64_t v46 = 0x100000003;
      double v44 = off_100861B38;
      long long v45 = xmmword_1004C1B50;
      uint64_t v47 = v48;
      do
      {
        double v27 = sub_1002A43C0((uint64_t)&v49, v26);
        *(double *)sub_1003416AC((uint64_t)&v44, v26++) = v27;
      }
      while (v26 != 3);
      unint64_t v28 = a6[1];
      if (v28 >= a6[2])
      {
        uint64_t result = sub_10036CB9C(a6, &v65, (uint64_t)&v49, (uint64_t)&v44);
      }
      else
      {
        sub_10036CCBC((double *)a6[1], (uint64_t)&v49, (uint64_t)&v44, v65);
        uint64_t result = v28 + 136;
        a6[1] = v28 + 136;
      }
      a6[1] = result;
      v18 += 14;
    }
    while (v18 != v19);
  }
  BOOL v29 = *v41;
  unint64_t v30 = v41[1];
  if (*v41 != v30)
  {
    do
    {
      uint64_t v62 = 0x100000002;
      long long v60 = off_100862110;
      long long v61 = xmmword_1004C1E90;
      uint64_t v63 = v64;
      uint64_t v57 = 0x300000002;
      uint64_t v55 = off_100862750;
      long long v56 = xmmword_1004C2720;
      uint64_t v58 = v59;
      uint64_t v51 = 0x100000003;
      unint64_t v49 = off_100861B38;
      long long v50 = xmmword_1004C1B50;
      uint64_t v52 = v53;
      sub_1003418A0((uint64_t)(v29 + 4), a3, (uint64_t)&v49);
      sub_1003951C4(a2, (uint64_t)&v66, (uint64_t)&v71, (uint64_t)&v49, (uint64_t)(v29 + 12), (uint64_t)&v60, (uint64_t)&v55);
      double v31 = v29[3];
      double v32 = v29[1];
      uint64_t v33 = (double *)sub_1003416AC((uint64_t)&v60, 0);
      double v34 = 1.0 / v31;
      double v35 = fmod(v31 * v32 - *v33 + 3.14159265, 6.28318531);
      if (v35 < 0.0) {
        double v35 = v35 + 6.28318531;
      }
      double v65 = v34 * (v35 + -3.14159265);
      double v54 = 0.0;
      double v36 = v29[2];
      double v54 = v36 - v34 * *(double *)sub_1003416AC((uint64_t)&v60, 1u);
      uint64_t v51 = 0x300000002;
      unint64_t v49 = off_100862750;
      long long v50 = xmmword_1004C2720;
      uint64_t v52 = v53;
      sub_100351D20((uint64_t)&v55, (uint64_t)&v49, v34);
      int v37 = 0;
      uint64_t v46 = 0x200000003;
      double v44 = off_100862798;
      long long v45 = xmmword_1004C2730;
      uint64_t v47 = v48;
      do
      {
        double v38 = sub_1002A43FC((uint64_t)&v49, 0, v37);
        *(double *)sub_10034185C((uint64_t)&v44, v37, 0) = v38;
        double v39 = sub_1002A43FC((uint64_t)&v49, 1, v37);
        *(double *)sub_10034185C((uint64_t)&v44, v37++, 1) = v39;
      }
      while (v37 != 3);
      unint64_t v40 = a7[1];
      if (v40 >= a7[2])
      {
        uint64_t result = sub_10036CD2C(a7, &v65, &v54, (uint64_t)&v49, (uint64_t)&v44);
      }
      else
      {
        sub_10036CE54((double *)a7[1], (uint64_t)&v49, (uint64_t)&v44, v65, v54);
        uint64_t result = v40 + 192;
        a7[1] = v40 + 192;
      }
      a7[1] = result;
      v29 += 26;
    }
    while (v29 != v30);
  }
  return result;
}

void sub_100364A3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100364A48(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100364A7C(uint64_t a1, uint64_t a2, uint64_t a3, double **a4)
{
  sub_10034CDD4((uint64_t)v7, a2);
  sub_100365964(a1, (uint64_t)v7, a3, a4);
}

void sub_1003653AC(_Unwind_Exception *a1)
{
}

uint64_t sub_1003654D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_100368D78((uint64_t)&v7, a3, *(void *)(a1 + 8), a2);
    sub_100368674(a1, v5);
  }
  return a2;
}

double sub_100365528(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 == v4)
  {
    double v8 = 0.0;
    uint64_t v14 = *a3;
  }
  else
  {
    uint64_t v6 = a2 + 8;
    uint64_t v7 = v3 + 40;
    double v8 = 0.0;
    do
    {
      uint64_t v23 = 0x100000001;
      double v21 = off_1008620C8;
      *(void *)&long long v9 = 0x100000001;
      *((void *)&v9 + 1) = 0x100000001;
      long long v22 = v9;
      uint64_t v24 = &v25;
      uint64_t v18 = 0x300000001;
      uint64_t v16 = off_100862708;
      long long v17 = xmmword_1004C2710;
      uint64_t v19 = &v20;
      sub_100394B38(v6, v7, (uint64_t)&v21, (uint64_t)&v16);
      double v10 = *(double *)(v7 - 8);
      double v11 = *(double *)(v7 - 32);
      uint64_t v12 = (double *)sub_1003416AC((uint64_t)&v21, 0);
      double v8 = v8 + 1.0 / (v10 * 0.1) * (v11 - *v12) * (1.0 / (v10 * 0.1) * (v11 - *v12));
      uint64_t v13 = v7 + 72;
      v7 += 112;
    }
    while (v13 != v4);
    uint64_t v3 = *a3;
    uint64_t v14 = a3[1];
  }
  return sqrt(v8 / (double)(unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v14 - v3) >> 4) - 3));
}

void sub_1003656C8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(_OWORD **)a2;
  uint64_t v4 = *(_OWORD **)(a2 + 8);
  if (*(_OWORD **)a2 != v4)
  {
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      if (sub_100365794(a1, (uint64_t)v3))
      {
        unint64_t v8 = a3[1];
        if (v8 >= a3[2])
        {
          uint64_t v9 = sub_10036CEC0(a3, v3);
        }
        else
        {
          sub_10036CFE8(v7, (_OWORD *)a3[1], v3);
          uint64_t v9 = v8 + 208;
          a3[1] = v8 + 208;
        }
        a3[1] = v9;
      }
      v3 += 13;
    }
    while (v3 != v4);
  }
}

void sub_100365770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  sub_100321130(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_100365794(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0x100000003;
  uint64_t v11 = off_100861B38;
  long long v12 = xmmword_1004C1B50;
  uint64_t v14 = &v15;
  sub_1003418A0(a1, a2 + 32, (uint64_t)&v11);
  uint64_t v8 = 0x100000003;
  uint64_t v6 = off_100861B38;
  long long v7 = xmmword_1004C1B50;
  uint64_t v9 = &v10;
  sub_1003419A0(a2 + 96, (uint64_t)&v11, (uint64_t)&v6);
  double v3 = sub_1002A43C0((uint64_t)&v6, 2u);
  uint64_t v28 = 0x100000003;
  unsigned int v26 = off_100861B38;
  long long v27 = xmmword_1004C1B50;
  BOOL v29 = &v30;
  uint64_t v23 = 0x100000134;
  long long v22 = xmmword_1004C1B70;
  double v21 = off_100861C10;
  uint64_t v24 = &v25;
  uint64_t v18 = 0x100000003;
  long long v17 = xmmword_1004C1B50;
  uint64_t v16 = off_100861B38;
  uint64_t v19 = &v20;
  sub_100341B04((uint64_t)&v6, (uint64_t)&v26, (uint64_t)&v21, (uint64_t)&v16, "2");
  return acos(-v3 / v4) * 180.0 / 3.14159265 <= 60.0;
}

void sub_100365964(uint64_t a1, uint64_t a2, uint64_t a3, double **a4)
{
  uint64_t v7 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4;
  double v43 = 0;
  double v44 = 0;
  uint64_t v45 = 0;
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v8 = sub_100364244((uint64_t *)&v43, 0x6DB6DB6DB6DB6DB7 * v7);
  sub_100366040(v8, a2, (double **)a3, a4, (uint64_t *)&v43, (uint64_t *)&v40);
  uint64_t v37 = 0x300000003;
  long long v36 = xmmword_1004C1E40;
  double v35 = off_100861B80;
  double v38 = &v39;
  sub_1003411F0(&v35, 3, 3);
  sub_100341240((uint64_t)&v35, 0.0);
  uint64_t v32 = 0x100000003;
  long long v31 = xmmword_1004C1B50;
  uint64_t v30 = off_100861B38;
  uint64_t v33 = &v34;
  sub_1003411F0(&v30, 3, 1);
  double v9 = 0.0;
  sub_100341240((uint64_t)&v30, 0.0);
  uint64_t v11 = v43;
  for (i = v44; v11 != i; uint64_t v11 = (double *)(v13 + 64))
  {
    uint64_t v12 = (uint64_t)(v11 + 9);
    double v14 = *v11;
    uint64_t v13 = (uint64_t)(v11 + 1);
    uint64_t v27 = 0x300000003;
    uint64_t v25 = off_100861B80;
    long long v26 = xmmword_1004C1E40;
    uint64_t v28 = v29;
    sub_1003419A0(v12, v13, (uint64_t)&v25);
    uint64_t v48 = 0x300000003;
    long long v47 = xmmword_1004C1E40;
    uint64_t v46 = off_100861B80;
    unint64_t v49 = v50;
    sub_100342718((uint64_t)&v35, (uint64_t)&v25, (uint64_t)&v46);
    sub_10034226C((uint64_t)&v35, (uint64_t)&v46);
    uint64_t v27 = 0x100000003;
    uint64_t v25 = off_100861B38;
    long long v26 = xmmword_1004C1B50;
    uint64_t v28 = v29;
    v13 += 64;
    sub_100351D20(v13, (uint64_t)&v25, v14);
    uint64_t v48 = 0x100000003;
    long long v47 = xmmword_1004C1B50;
    uint64_t v46 = off_100861B38;
    unint64_t v49 = v50;
    sub_100342718((uint64_t)&v30, (uint64_t)&v25, (uint64_t)&v46);
    sub_10034226C((uint64_t)&v30, (uint64_t)&v46);
    double v9 = v9 + v14 * v14;
  }
  uint64_t v15 = v40;
  uint64_t v16 = v41;
  if (v40 != v41)
  {
    do
    {
      double v17 = *v15;
      double v18 = v15[1];
      uint64_t v27 = 0x300000003;
      uint64_t v25 = off_100861B80;
      long long v26 = xmmword_1004C1E40;
      uint64_t v19 = (uint64_t)(v15 + 2);
      uint64_t v28 = v29;
      sub_1003419A0((uint64_t)(v15 + 13), (uint64_t)(v15 + 2), (uint64_t)&v25);
      uint64_t v48 = 0x300000003;
      long long v47 = xmmword_1004C1E40;
      uint64_t v46 = off_100861B80;
      unint64_t v49 = v50;
      sub_100342718((uint64_t)&v35, (uint64_t)&v25, (uint64_t)&v46);
      sub_10034226C((uint64_t)&v35, (uint64_t)&v46);
      uint64_t v22 = 0x100000002;
      uint64_t v20 = off_100862110;
      long long v21 = xmmword_1004C1E90;
      uint64_t v23 = &v24;
      *(double *)sub_1003416AC((uint64_t)&v20, 0) = v17;
      *(double *)sub_1003416AC((uint64_t)&v20, 1u) = v18;
      uint64_t v27 = 0x100000003;
      uint64_t v25 = off_100861B38;
      long long v26 = xmmword_1004C1B50;
      uint64_t v28 = v29;
      v19 += 88;
      sub_1003419A0(v19, (uint64_t)&v20, (uint64_t)&v25);
      uint64_t v48 = 0x100000003;
      long long v47 = xmmword_1004C1B50;
      uint64_t v46 = off_100861B38;
      unint64_t v49 = v50;
      sub_100342718((uint64_t)&v30, (uint64_t)&v25, (uint64_t)&v46);
      sub_10034226C((uint64_t)&v30, (uint64_t)&v46);
      double v9 = v9 + v18 * v18 + v17 * v17;
      uint64_t v15 = (double *)(v19 + 88);
    }
    while ((double *)(v19 + 88) != v16);
  }
  uint64_t v27 = 0x300000003;
  uint64_t v25 = off_100861B80;
  long long v26 = xmmword_1004C1E40;
  uint64_t v28 = v29;
  uint64_t v53 = 0x100000003;
  uint64_t v51 = off_1008627E0;
  long long v52 = xmmword_1004C1B50;
  double v54 = &v55;
  uint64_t v48 = 0x10000000CLL;
  long long v47 = xmmword_1004C2700;
  uint64_t v46 = off_100862828;
  unint64_t v49 = v50;
  sub_1003517F4((uint64_t)&v35, (uint64_t)&v51, (uint64_t)&v46, (uint64_t)&v25);
}

void sub_100365F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  a68 = (void **)&a62;
  sub_100368094(&a68);
  a68 = (void **)&a65;
  sub_10036801C(&a68);
  _Unwind_Resume(a1);
}

uint64_t sub_100365F8C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 6) < a2)
  {
    if (a2 >= 0x155555555555556) {
      sub_1000267C4();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_10034CC50(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 192 * v6;
    sub_10036C66C(a1, v7);
    return sub_10036CB08((uint64_t)v7);
  }
  return result;
}

void sub_10036602C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10036CB08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100366040(uint64_t a1, uint64_t a2, double **a3, double **a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v10 = *a5;
  uint64_t v11 = a5[1];
  if (*a5 != v11)
  {
    uint64_t v12 = v11 - 128;
    do
    {
      *(void *)(v11 - 64) = off_100853598;
      *(void *)(v11 - 128) = off_100853598;
      v12 -= 136;
      v11 -= 136;
    }
    while (v11 != v10);
    a5[1] = v10;
    sub_100364244(a5, 0x6DB6DB6DB6DB6DB7 * (((char *)a3[1] - (char *)*a3) >> 4));
  }
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  if (*a6 != v14)
  {
    uint64_t v15 = v14 - 176;
    do
    {
      *(void *)(v14 - 88) = off_100853598;
      *(void *)(v14 - 176) = off_100853598;
      v15 -= 192;
      v14 -= 192;
    }
    while (v14 != v13);
    a6[1] = v13;
    sub_100365F8C(a6, 0x4EC4EC4EC4EC4EC5 * (((char *)a4[1] - (char *)*a4) >> 4));
  }
  uint64_t v41 = a4;
  uint64_t v16 = *a3;
  double v17 = a3[1];
  if (*a3 != v17)
  {
    do
    {
      uint64_t v61 = 0x100000001;
      double v59 = off_1008620C8;
      *(void *)&long long v18 = 0x100000001;
      *((void *)&v18 + 1) = 0x100000001;
      long long v60 = v18;
      uint64_t v62 = v63;
      uint64_t v56 = 0x300000001;
      double v54 = off_100862708;
      long long v55 = xmmword_1004C2710;
      uint64_t v57 = v58;
      sub_100394B38(a2, (uint64_t)(v16 + 5), (uint64_t)&v59, (uint64_t)&v54);
      double v20 = v16[3];
      double v19 = v16[4];
      v64[0] = 0.0;
      double v21 = v16[2];
      uint64_t v22 = (double *)sub_1003416AC((uint64_t)&v59, 0);
      double v23 = 1.0 / (v20 * v19);
      v64[0] = v21 - v23 * *v22;
      uint64_t v50 = 0x300000001;
      uint64_t v48 = off_100862708;
      long long v49 = xmmword_1004C2710;
      uint64_t v51 = v52;
      sub_100351D20((uint64_t)&v54, (uint64_t)&v48, v23);
      unsigned int v24 = 0;
      uint64_t v45 = 0x100000003;
      double v43 = off_100861B38;
      long long v44 = xmmword_1004C1B50;
      uint64_t v46 = v47;
      do
      {
        double v25 = sub_1002A43C0((uint64_t)&v48, v24);
        *(double *)sub_1003416AC((uint64_t)&v43, v24++) = v25;
      }
      while (v24 != 3);
      unint64_t v26 = a5[1];
      if (v26 >= a5[2])
      {
        uint64_t v27 = sub_10036CB9C(a5, v64, (uint64_t)&v48, (uint64_t)&v43);
      }
      else
      {
        sub_10036CCBC((double *)a5[1], (uint64_t)&v48, (uint64_t)&v43, v64[0]);
        uint64_t v27 = v26 + 136;
        a5[1] = v26 + 136;
      }
      a5[1] = v27;
      v16 += 14;
    }
    while (v16 != v17);
  }
  uint64_t v28 = *v41;
  BOOL v29 = v41[1];
  if (*v41 != v29)
  {
    do
    {
      uint64_t v61 = 0x100000002;
      double v59 = off_100862110;
      long long v60 = xmmword_1004C1E90;
      uint64_t v62 = v63;
      uint64_t v56 = 0x300000002;
      double v54 = off_100862750;
      long long v55 = xmmword_1004C2720;
      uint64_t v57 = v58;
      sub_100394D64(a2, (uint64_t)(v28 + 4), (uint64_t)(v28 + 12), (uint64_t)&v59, (uint64_t)&v54);
      double v30 = v28[3];
      double v31 = v28[1];
      uint64_t v32 = (double *)sub_1003416AC((uint64_t)&v59, 0);
      double v33 = 1.0 / v30;
      double v34 = fmod(v30 * v31 - *v32 + 3.14159265, 6.28318531);
      if (v34 < 0.0) {
        double v34 = v34 + 6.28318531;
      }
      v64[0] = v33 * (v34 + -3.14159265);
      double v53 = 0.0;
      double v35 = v28[2];
      double v53 = v35 - v33 * *(double *)sub_1003416AC((uint64_t)&v59, 1u);
      uint64_t v50 = 0x300000002;
      uint64_t v48 = off_100862750;
      long long v49 = xmmword_1004C2720;
      uint64_t v51 = v52;
      sub_100351D20((uint64_t)&v54, (uint64_t)&v48, 1.0 / v30);
      int v36 = 0;
      uint64_t v45 = 0x200000003;
      double v43 = off_100862798;
      long long v44 = xmmword_1004C2730;
      uint64_t v46 = v47;
      do
      {
        double v37 = sub_1002A43FC((uint64_t)&v48, 0, v36);
        *(double *)sub_10034185C((uint64_t)&v43, v36, 0) = v37;
        double v38 = sub_1002A43FC((uint64_t)&v48, 1, v36);
        *(double *)sub_10034185C((uint64_t)&v43, v36++, 1) = v38;
      }
      while (v36 != 3);
      unint64_t v39 = a6[1];
      if (v39 >= a6[2])
      {
        uint64_t v40 = sub_10036CD2C(a6, v64, &v53, (uint64_t)&v48, (uint64_t)&v43);
      }
      else
      {
        sub_10036CE54((double *)a6[1], (uint64_t)&v48, (uint64_t)&v43, v64[0], v53);
        uint64_t v40 = v39 + 192;
        a6[1] = v39 + 192;
      }
      a6[1] = v40;
      v28 += 26;
    }
    while (v28 != v29);
  }
}

void sub_100366664(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100366670(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_10036669C(void *result)
{
  void *result = off_100853598;
  return result;
}

void *sub_1003666BC(void *result)
{
  void *result = off_100853598;
  return result;
}

void *sub_1003666DC(void *result)
{
  void *result = off_100853598;
  return result;
}

void sub_1003666FC(double a1, double a2, uint64_t a3, uint64_t *a4, BOOL *a5, char *a6, double *a7)
{
  *a5 = 1;
  *a6 = 0;
  *a7 = 0.0;
  uint64_t v7 = a4[1];
  if (*a4 != v7)
  {
    unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a4) >> 4);
    uint64_t v71 = 0;
    unint64_t v72 = 0;
    unint64_t v73 = 0;
    sub_10034C6DC(&v71, v14);
    uint64_t v68 = 0x100000002;
    long long v67 = xmmword_1004C1E90;
    uint64_t v66 = off_100862110;
    unint64_t v69 = &v70;
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    while (v15 != v16)
    {
      if (*(double *)(v15 + 8) <= a2)
      {
        double v17 = sub_1002A43C0(v15 + 40, 2u);
        *(double *)sub_1003416AC((uint64_t)&v66, 0) = v17;
        double v18 = sub_1002A43C0(v15 + 40, 0);
        *(double *)sub_1003416AC((uint64_t)&v66, 1u) = v18;
        unint64_t v19 = v72;
        if (v72 >= v73)
        {
          uint64_t v20 = sub_1003523A8(&v71, (uint64_t)&v66);
        }
        else
        {
          sub_10035214C(v72, (uint64_t)&v66);
          uint64_t v20 = v19 + 56;
        }
        unint64_t v72 = v20;
      }
      v15 += 112;
    }
    if (v71 != v72)
    {
      uint64_t v63 = 0x100000002;
      long long v62 = xmmword_1004C1E90;
      uint64_t v61 = off_100862110;
      unint64_t v64 = &v65;
      sub_1003411F0(&v61, 2, 1);
      sub_100341240((uint64_t)&v61, 0.0);
      uint64_t v22 = v71;
      for (unint64_t i = v72; v22 != i; v22 += 56)
      {
        uint64_t v76 = 0x100000002;
        uint64_t v74 = off_100862110;
        long long v75 = xmmword_1004C1E90;
        uint64_t v77 = v78;
        sub_100342718((uint64_t)&v61, v22, (uint64_t)&v74);
        sub_10034226C((uint64_t)&v61, (uint64_t)&v74);
      }
      uint64_t v76 = 0x100000002;
      long long v75 = xmmword_1004C1E90;
      uint64_t v74 = off_100862110;
      uint64_t v77 = v78;
      sub_100351D20((uint64_t)&v61, (uint64_t)&v74, 1.0 / (double)v14);
      uint64_t v48 = a5;
      sub_10034226C((uint64_t)&v61, (uint64_t)&v74);
      uint64_t v23 = v71;
      unint64_t v24 = v72;
      if (v71 == v72)
      {
        *uint64_t v48 = 1;
      }
      else
      {
        long long v47 = a6;
        double v25 = 0.0;
        do
        {
          uint64_t v76 = 0x100000002;
          uint64_t v74 = off_100862110;
          long long v75 = xmmword_1004C1E90;
          uint64_t v77 = v78;
          sub_1003418A0(v23, (uint64_t)&v61, (uint64_t)&v74);
          sub_10034226C(v23, (uint64_t)&v74);
          uint64_t v58 = 0x100000002;
          long long v57 = xmmword_1004C1E90;
          uint64_t v56 = off_100862110;
          double v59 = v60;
          uint64_t v76 = 0x1000000E1;
          long long v75 = xmmword_1004C1EA0;
          uint64_t v74 = off_100862158;
          uint64_t v77 = v78;
          uint64_t v53 = 0x100000002;
          uint64_t v51 = off_100862110;
          long long v52 = xmmword_1004C1E90;
          double v54 = v55;
          sub_100341B04(v23, (uint64_t)&v56, (uint64_t)&v74, (uint64_t)&v51, "2");
          if (v26 > v25) {
            double v25 = v26;
          }
          v23 += 56;
        }
        while (v23 != v24);
        *uint64_t v48 = v25 < 0.3;
        if (v25 >= 0.3)
        {
          uint64_t v76 = 0x200000002;
          long long v75 = xmmword_1004C1EB0;
          uint64_t v74 = off_1008621A0;
          uint64_t v77 = v78;
          sub_1003411F0(&v74, 2, 2);
          sub_100341240((uint64_t)&v74, 0.0);
          uint64_t v27 = v71;
          for (unint64_t j = v72; v27 != j; v27 += 56)
          {
            sub_1003526A4((uint64_t)v50, *(_DWORD *)(v27 + 12), *(_DWORD *)(v27 + 8));
            sub_1003416E8(v27, v50);
            uint64_t v53 = 0x200000002;
            uint64_t v51 = off_1008621A0;
            long long v52 = xmmword_1004C1EB0;
            double v54 = v55;
            sub_1003419A0(v27, (uint64_t)v50, (uint64_t)&v51);
            uint64_t v58 = 0x200000002;
            long long v57 = xmmword_1004C1EB0;
            uint64_t v56 = off_1008621A0;
            double v59 = v60;
            sub_100342718((uint64_t)&v74, (uint64_t)&v51, (uint64_t)&v56);
            sub_10034226C((uint64_t)&v74, (uint64_t)&v56);
          }
          uint64_t v58 = 0x200000002;
          long long v57 = xmmword_1004C1EB0;
          uint64_t v56 = off_1008621A0;
          double v59 = v60;
          uint64_t v53 = 0x200000002;
          uint64_t v51 = off_1008621A0;
          long long v52 = xmmword_1004C1EB0;
          double v54 = v55;
          sub_10034C7FC((uint64_t)&v74, (uint64_t)&v56, (uint64_t)&v51);
          double v29 = *(double *)sub_10034185C((uint64_t)&v51, 0, 0);
          double v30 = (double *)sub_10034185C((uint64_t)&v51, 1, 1);
          if (*v30 >= v29) {
            double v31 = v29;
          }
          else {
            double v31 = *v30;
          }
          sub_10035257C((uint64_t)v50, DWORD1(v57), v57);
          sub_1003416E8((uint64_t)&v56, v50);
          uint64_t v32 = v71;
          unint64_t v33 = v72;
          if (v71 == v72)
          {
            double v41 = 0.0;
            double v42 = 0.0;
          }
          else
          {
            double v49 = v31;
            double v34 = 0.0;
            double v35 = 0.0;
            double v36 = 0.0;
            double v37 = 0.0;
            do
            {
              uint64_t v80 = 0x100000002;
              *(void *)long long buf = off_100862110;
              *(_OWORD *)&uint8_t buf[8] = xmmword_1004C1E90;
              unint64_t v81 = &v82;
              sub_1003419A0((uint64_t)v50, v32, (uint64_t)buf);
              double v38 = sub_1002A43C0((uint64_t)buf, 0);
              double v39 = sub_1002A43C0((uint64_t)buf, 1u);
              if (v38 < v37) {
                double v40 = v38;
              }
              else {
                double v40 = v37;
              }
              if (v38 > v36) {
                double v36 = v38;
              }
              else {
                double v37 = v40;
              }
              if (v39 <= v34)
              {
                if (v39 < v35) {
                  double v35 = v39;
                }
              }
              else
              {
                double v34 = v39;
              }
              v32 += 56;
            }
            while (v32 != v33);
            double v41 = v36 - v37;
            double v42 = v34 - v35;
            double v31 = v49;
          }
          if (v42 >= v41) {
            double v43 = v41;
          }
          else {
            double v43 = v42;
          }
          if (v41 < v42) {
            double v41 = v42;
          }
          *a7 = v41;
          if (v43 >= a1)
          {
            uint64_t v45 = qword_1008ABDE0;
            BOOL v46 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
            char v44 = 0;
            if (v46)
            {
              *(_DWORD *)long long buf = 134218496;
              *(double *)&void buf[4] = a2;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(double *)&buf[14] = v31;
              *(_WORD *)&unsigned char buf[22] = 2048;
              uint64_t v80 = *(void *)&v43;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#sa_algo_batchfilter,Batch filter problem is observable now from the bin with max range %3.1f m: smallest eigenvalue is %f, smallest rectangular box dimension is %f m", buf, 0x20u);
              char v44 = 0;
            }
          }
          else
          {
            char v44 = 1;
          }
          *long long v47 = v44;
        }
      }
    }
    uint64_t v74 = (uint64_t (**)())&v71;
    sub_100351F88((void ***)&v74);
  }
}

void sub_100366ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  a17 = (void **)&a58;
  sub_100351F88(&a17);
  _Unwind_Resume(a1);
}

char *sub_100366F58(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  double v9 = *(char **)result;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 > 0x186186186186186) {
      sub_1000267C4();
    }
    unint64_t v10 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xC30C30C30C30C3) {
      unint64_t v12 = 0x186186186186186;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_1000279A4(v7, v12);
    unint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    double v9 = v14;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 4;
      unint64_t v19 = v9;
      uint64_t v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xCF3CF3CF3CF3CF3DLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9 - 4);
    double v9 = (char *)*v13;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 4;
    unint64_t v19 = v9;
    uint64_t v20 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

BOOL sub_1003670BC(long long **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  long long v4 = **a1;
  long long v5 = (*a1)[1];
  uint64_t v11 = *((void *)*a1 + 4);
  long long v9 = v4;
  long long v10 = v5;
  sub_10034CDD4((uint64_t)v12, (uint64_t)v2 + 40);
  v12[16] = *((_DWORD *)v2 + 26);
  sub_10034CDD4((uint64_t)v8, v3 + 40);
  uint8_t v8[16] = *(_DWORD *)(v3 + 104);
  double v6 = sub_1002A43C0((uint64_t)v12, 0);
  return v6 < sub_1002A43C0((uint64_t)v8, 0);
}

BOOL sub_100367174(long long **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  long long v4 = **a1;
  long long v5 = (*a1)[1];
  uint64_t v11 = *((void *)*a1 + 4);
  long long v9 = v4;
  long long v10 = v5;
  sub_10034CDD4((uint64_t)v12, (uint64_t)v2 + 40);
  v12[16] = *((_DWORD *)v2 + 26);
  sub_10034CDD4((uint64_t)v8, v3 + 40);
  uint8_t v8[16] = *(_DWORD *)(v3 + 104);
  double v6 = sub_1002A43C0((uint64_t)v12, 1u);
  return v6 < sub_1002A43C0((uint64_t)v8, 1u);
}

BOOL sub_10036722C(long long **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  long long v4 = **a1;
  long long v5 = (*a1)[1];
  uint64_t v11 = *((void *)*a1 + 4);
  long long v9 = v4;
  long long v10 = v5;
  sub_10034CDD4((uint64_t)v12, (uint64_t)v2 + 40);
  v12[16] = *((_DWORD *)v2 + 26);
  sub_10034CDD4((uint64_t)v8, v3 + 40);
  uint8_t v8[16] = *(_DWORD *)(v3 + 104);
  double v6 = sub_1002A43C0((uint64_t)v12, 2u);
  return v6 < sub_1002A43C0((uint64_t)v8, 2u);
}

void sub_1003672E4(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100367314(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100367320(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_100367344(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_100367374(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100367380(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_1003673A4(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1003673D4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003673E0(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

uint64_t sub_100367404(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003674C8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10036747C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_1000257D8();
  }
  return operator new(112 * a2);
}

uint64_t sub_1003674C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      long long v13 = *(_OWORD *)(a3 + v11 - 112);
      long long v14 = *(_OWORD *)(a3 + v11 - 96);
      *(void *)(v12 - 80) = *(void *)(a3 + v11 - 80);
      *(_OWORD *)(v12 - 112) = v13;
      *(_OWORD *)(v12 - 96) = v14;
      sub_10034CDD4(a7 + v11 - 72, a3 + v11 - 72);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 112;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_100367560(_Unwind_Exception *a1)
{
  for (; v2; v2 += 112)
    *(void *)(v1 + 40 + v2) = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_100367594(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = v3 - 72;
    do
    {
      *(void *)(v3 - 72) = off_100853598;
      v4 -= 112;
      v3 -= 112;
    }
    while (v3 != v2);
    *(void *)(a1 + 16) = v2;
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v5);
  }
  return a1;
}

uint64_t *sub_100367608(uint64_t **a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    long long v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    sub_100026D98(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_1003676C4(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    sub_1000267C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x124924924924924) {
    unint64_t v9 = 0x249249249249249;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v23 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_10036747C(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v11 = &v10[112 * v4];
  stat __p = v10;
  uint64_t v20 = v11;
  double v21 = v11;
  uint64_t v22 = &v10[112 * v9];
  long long v12 = *a2;
  long long v13 = a2[1];
  *((void *)v11 + 4) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  sub_10034CDD4((uint64_t)(v11 + 40), (uint64_t)a2 + 40);
  *(_DWORD *)&v10[112 * v4 + 104] = *((_DWORD *)a2 + 26);
  v21 += 112;
  sub_100367404(a1, &__p);
  uint64_t v14 = a1[1];
  uint64_t v15 = v20;
  uint64_t v16 = v21;
  if (v21 != v20)
  {
    uint64_t v17 = v21 - 72;
    do
    {
      *((void *)v16 - 9) = off_100853598;
      v17 -= 112;
      v16 -= 112;
    }
    while (v16 != v15);
    double v21 = v15;
  }
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

void sub_10036783C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100367594((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100367850(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1003678D8(result, a4);
    uint64_t result = (void *)sub_100367930((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1003678B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1003210D8(&a9);
  _Unwind_Resume(a1);
}

char *sub_1003678D8(void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_1000267C4();
  }
  uint64_t result = (char *)sub_10036747C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t sub_100367930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      long long v10 = *(_OWORD *)(a2 + v7);
      long long v11 = *(_OWORD *)(a2 + v7 + 16);
      *(void *)(v8 + 32) = *(void *)(a2 + v7 + 32);
      *(_OWORD *)uint64_t v8 = v10;
      *(_OWORD *)(v8 + 16) = v11;
      sub_10034CDD4(a4 + v7 + 40, a2 + v7 + 40);
      *(_DWORD *)(v8 + 104) = *(_DWORD *)(a2 + v7 + 104);
      v7 += 112;
    }
    while (v9 + 112 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1003679B8(_Unwind_Exception *a1)
{
  for (; v2; v2 -= 112)
    *(void *)(v1 - 72 + v2) = off_100853598;
  _Unwind_Resume(a1);
}

void sub_1003679EC(char **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = a1[1];
    if (v3 != v2)
    {
      uint64_t v4 = v3 - 72;
      do
      {
        *((void *)v3 - 9) = off_100853598;
        v4 -= 112;
        v3 -= 112;
      }
      while (v3 != v2);
    }
    a1[1] = v2;
    operator delete(v2);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_100367A64(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    sub_1000267C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x124924924924924) {
    unint64_t v9 = 0x249249249249249;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v23 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_10036747C(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[112 * v4];
  stat __p = v10;
  uint64_t v20 = v11;
  double v21 = v11;
  uint64_t v22 = &v10[112 * v9];
  long long v12 = *a2;
  long long v13 = a2[1];
  *((void *)v11 + 4) = *((void *)a2 + 4);
  *(_OWORD *)long long v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  sub_10034CDD4((uint64_t)(v11 + 40), (uint64_t)a2 + 40);
  *(_DWORD *)&v10[112 * v4 + 104] = *((_DWORD *)a2 + 26);
  v21 += 112;
  sub_100367404(a1, &__p);
  uint64_t v14 = a1[1];
  uint64_t v15 = v20;
  uint64_t v16 = v21;
  if (v21 != v20)
  {
    uint64_t v17 = v21 - 72;
    do
    {
      *((void *)v16 - 9) = off_100853598;
      v17 -= 112;
      v16 -= 112;
    }
    while (v16 != v15);
    double v21 = v15;
  }
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

void sub_100367BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100367594((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100367BF0(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(char **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_1003679EC((char **)a1);
    if (a4 > 0x249249249249249) {
      sub_1000267C4();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)) >= 0x124924924924924) {
      unint64_t v11 = 0x249249249249249;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1003678D8((void *)a1, v11);
    uint64_t result = sub_100367930(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    long long v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4];
    sub_100367D9C(a2, v13, (uint64_t)v9);
    uint64_t result = sub_100367930(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = (uint64_t)sub_100367D9C(a2, a3, (uint64_t)v9);
  uint64_t v15 = *(void *)(a1 + 8);
  if (v15 != v14)
  {
    uint64_t v16 = v15 - 72;
    do
    {
      *(void *)(v15 - 72) = off_100853598;
      v16 -= 112;
      v15 -= 112;
    }
    while (v15 != v14);
  }
  *(void *)(a1 + 8) = v14;
  return result;
}

void sub_100367D8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100367D94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

long long *sub_100367D9C(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v5 = a2;
  do
  {
    long long v6 = *v4;
    long long v7 = v4[1];
    *(void *)(a3 + 32) = *((void *)v4 + 4);
    *(_OWORD *)a3 = v6;
    *(_OWORD *)(a3 + 16) = v7;
    sub_10034226C(a3 + 40, (uint64_t)v4 + 40);
    *(_DWORD *)(a3 + 104) = *((_DWORD *)v4 + 26);
    a3 += 112;
    v4 += 7;
  }
  while (v4 != v5);
  return v5;
}

_OWORD *sub_100367E18(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  unint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  long long v6 = a3;
  do
  {
    long long v7 = v5[1];
    *a4 = *v5;
    a4[1] = v7;
    sub_10034226C((uint64_t)(a4 + 2), (uint64_t)(v5 + 2));
    sub_10034226C((uint64_t)(a4 + 6), (uint64_t)(v5 + 6));
    a4 += 13;
    v5 += 13;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_100367E90(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    sub_1000267C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x124924924924924) {
    unint64_t v9 = 0x249249249249249;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v23 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10036747C(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[112 * v4];
  stat __p = v10;
  uint64_t v20 = v11;
  double v21 = v11;
  uint64_t v22 = &v10[112 * v9];
  long long v12 = *a2;
  long long v13 = a2[1];
  *((void *)v11 + 4) = *((void *)a2 + 4);
  *(_OWORD *)unint64_t v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  sub_10034CDD4((uint64_t)(v11 + 40), (uint64_t)a2 + 40);
  *(_DWORD *)&v10[112 * v4 + 104] = *((_DWORD *)a2 + 26);
  v21 += 112;
  sub_100367404(a1, &__p);
  uint64_t v14 = a1[1];
  uint64_t v15 = v20;
  uint64_t v16 = v21;
  if (v21 != v20)
  {
    uint64_t v17 = v21 - 72;
    do
    {
      *((void *)v16 - 9) = off_100853598;
      v17 -= 112;
      v16 -= 112;
    }
    while (v16 != v15);
    double v21 = v15;
  }
  if (__p) {
    operator delete(__p);
  }
  return v14;
}

void sub_100368008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100367594((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10036801C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    if (v3 != v2)
    {
      uint64_t v4 = v3 - 128;
      do
      {
        *((void *)v3 - 8) = off_100853598;
        *((void *)v3 - 16) = off_100853598;
        v4 -= 136;
        v3 -= 136;
      }
      while (v3 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

void sub_100368094(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    if (v3 != v2)
    {
      uint64_t v4 = v3 - 176;
      do
      {
        *((void *)v3 - 11) = off_100853598;
        *((void *)v3 - 22) = off_100853598;
        v4 -= 192;
        v3 -= 192;
      }
      while (v3 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_10036810C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003681CC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100368184(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    sub_1000257D8();
  }
  return operator new(136 * a2);
}

uint64_t sub_1003681CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_100368260(a1, (void *)(i + a7), (void *)(i + a3)))
    i -= 136;
  return a6;
}

double sub_100368260(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t)(a3 + 9);
  *a2 = *a3;
  sub_1003682D0((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
  *(void *)&double result = sub_10034CDD4((uint64_t)(a2 + 9), v4).n128_u64[0];
  return result;
}

void sub_1003682B0(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

__n128 sub_1003682D0(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x300000001;
  *(void *)(a1 + 24) = 0x300000001;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100862708;
  if (a1 == a2)
  {
    uint64_t v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    size_t v18 = "cnmatrix.h";
    unint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 1)
  {
    uint64_t v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    size_t v18 = "cnmatrixbase.h";
    unint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 4)
  {
    uint64_t v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    uint64_t v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 3u)
  {
    uint64_t v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    unint64_t v11 = *(long long **)(a2 + 32);
    long long v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    __n128 *v12 = result;
  }
  else if (v5)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)uint64_t v6 = v9;
      uint64_t v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_100368440(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_100368460(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = v3 - 128;
    do
    {
      *(void *)(v3 - 64) = off_100853598;
      *(void *)(v3 - 128) = off_100853598;
      v4 -= 136;
      v3 -= 136;
    }
    while (v3 != v2);
    *(void *)(a1 + 16) = v2;
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v5);
  }
  return a1;
}

void *sub_1003684F4(void *result)
{
  char *result = off_100853598;
  return result;
}

void *sub_100368514(void *result)
{
  char *result = off_100862050;
  return result;
}

void sub_100368534(void *a1)
{
  *a1 = off_100862050;
  operator delete();
}

uint64_t sub_100368564(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100368570(uint64_t a1)
{
  sub_100351B60(a1, v1);
}

void sub_100368594(void *a1)
{
  *a1 = off_100853598;
  operator delete();
}

uint64_t sub_1003685C4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003685D0(uint64_t a1)
{
  sub_10034111C(a1, v1);
}

void sub_100368620(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_100368674((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_100368674(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 != a2)
  {
    uint64_t v3 = v2 - 128;
    do
    {
      *(void *)(v2 - 128) = off_100853598;
      *(void *)(v2 - 240) = off_100853598;
      *(void *)(v2 - 304) = off_100853598;
      *(void *)(v2 - 368) = off_100853598;
      v3 -= 376;
      v2 -= 376;
    }
    while (v2 != a2);
  }
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t sub_100368724(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9) {
    sub_1000267C4();
  }
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL) {
    unint64_t v6 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    int v7 = (char *)sub_1003689B0((uint64_t)(a1 + 2), v6);
  }
  else {
    int v7 = 0;
  }
  uint64_t v10 = v7;
  unint64_t v11 = &v7[376 * v3];
  uint64_t v13 = &v7[376 * v6];
  sub_10036884C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  long long v12 = v11 + 376;
  sub_100368938(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100368C94((uint64_t)&v10);
  return v8;
}

void sub_100368838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100368C94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10036884C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 72;
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v6 = a2 + 72;
  sub_10034CDD4(a2 + 8, a3 + 8);
  sub_10034CDD4(v6, v5);
  sub_10034CF64(a2 + 136, a3 + 136);
  sub_10034CF64(a2 + 248, a3 + 248);
  uint64_t v7 = *(void *)(a3 + 360);
  *(_DWORD *)(a2 + 368) = *(_DWORD *)(a3 + 368);
  *(void *)(a2 + 360) = v7;
}

void sub_1003688D8(_Unwind_Exception *a1)
{
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_100368938(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003689FC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003689B0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAE4C415C9882BALL) {
    sub_1000257D8();
  }
  return operator new(376 * a2);
}

uint64_t sub_1003689FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 376;
      sub_100368AC8(a1, v7 - 376, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 376;
      *((void *)&v16 + 1) -= 376;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100368BB4((uint64_t)v13);
  return v11;
}

void sub_100368AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100368AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 72;
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v6 = a2 + 72;
  sub_10034CDD4(a2 + 8, a3 + 8);
  sub_10034CDD4(v6, v5);
  sub_10034CF64(a2 + 136, a3 + 136);
  sub_10034CF64(a2 + 248, a3 + 248);
  uint64_t v7 = *(void *)(a3 + 360);
  *(_DWORD *)(a2 + 368) = *(_DWORD *)(a3 + 368);
  *(void *)(a2 + 360) = v7;
}

void sub_100368B54(_Unwind_Exception *a1)
{
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_100368BB4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100368BEC(a1);
  }
  return a1;
}

uint64_t sub_100368BEC(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void **)(*(void *)(result + 8) + 8);
  if (v1 != v2)
  {
    uint64_t v3 = v1 + 31;
    do
    {
      v1[31] = off_100853598;
      v1[17] = off_100853598;
      char v1[9] = off_100853598;
      v1[1] = off_100853598;
      v1 += 47;
      v3 += 47;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_100368C94(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100368CCC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void **)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = v2 - 46;
    unint64_t v4 = v3;
    do
    {
      v4[30] = off_100853598;
      uint8_t v4[16] = off_100853598;
      v4[8] = off_100853598;
      *unint64_t v4 = off_100853598;
      uint64_t v5 = v4 - 1;
      v4 -= 47;
      v3 -= 47;
    }
    while (v5 != a2);
    *(void *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_100368D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(unsigned char *)a4 = *(unsigned char *)v5;
    sub_10034226C(a4 + 8, v5 + 8);
    sub_10034226C(a4 + 72, v5 + 72);
    sub_10034226C(a4 + 136, v5 + 136);
    sub_10034226C(a4 + 248, v5 + 248);
    int v7 = *(_DWORD *)(v5 + 368);
    *(void *)(a4 + 360) = *(void *)(v5 + 360);
    *(_DWORD *)(a4 + 368) = v7;
    a4 += 376;
    v5 += 376;
  }
  while (v5 != v6);
  return v6;
}

void sub_100368E18(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  while (2)
  {
    long long v115 = a2 - 376;
    uint64_t v112 = (uint64_t)(a2 - 1128);
    uint64_t v113 = (uint64_t)(a2 - 752);
    unint64_t v8 = a1;
    uint64_t v122 = (uint64_t)a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v8;
          uint64_t v10 = (uint64_t)&a2[-v8];
          unint64_t v11 = 0x51B3BEA3677D46CFLL * ((uint64_t)&a2[-v8] >> 3);
          a1 = v9;
          if (!(!v5 & v4))
          {
            switch(v11)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((double *)a2 - 2) >= *(double *)(v9 + 360)) {
                  return;
                }
                uint64_t v51 = (char *)v9;
                long long v52 = v115;
                break;
              case 3uLL:
                sub_100369DFC(v9, v9 + 376, (uint64_t)v115);
                return;
              case 4uLL:
                sub_10036A374(v9, v9 + 376, v9 + 752, (uint64_t)v115);
                return;
              case 5uLL:
                uint64_t v53 = (char *)(v9 + 752);
                double v54 = (char *)(v9 + 1128);
                sub_10036A374(v9, v9 + 376, v9 + 752, v9 + 1128);
                if (*((double *)a2 - 2) >= *(double *)(v9 + 1488)) {
                  return;
                }
                sub_10036A21C(v54, v115);
                if (*(double *)(v9 + 1488) >= *(double *)(v9 + 1112)) {
                  return;
                }
                sub_10036A21C(v53, v54);
                if (*(double *)(v9 + 1112) >= *(double *)(v9 + 736)) {
                  return;
                }
                sub_10036A21C((char *)(v9 + 376), v53);
                if (*(double *)(v9 + 736) >= *(double *)(v9 + 360)) {
                  return;
                }
                uint64_t v51 = (char *)v9;
                long long v52 = (char *)(v9 + 376);
                break;
              default:
                JUMPOUT(0);
            }
            sub_10036A21C(v51, v52);
            return;
          }
          if (v10 <= 9023)
          {
            if (a4)
            {
              if ((char *)v9 != a2)
              {
                long long v55 = (char *)(v9 + 376);
                if ((char *)(v9 + 376) != a2)
                {
                  uint64_t v56 = 0;
                  uint64_t v57 = v9;
                  do
                  {
                    uint64_t v58 = v55;
                    if (*(double *)(v57 + 736) < *(double *)(v57 + 360))
                    {
                      char v131 = *v55;
                      sub_10034CDD4((uint64_t)v132, v57 + 384);
                      sub_10034CDD4((uint64_t)v133, v57 + 448);
                      sub_10034CF64((uint64_t)v134, v57 + 512);
                      sub_10034CF64((uint64_t)v135, v57 + 624);
                      double v136 = *(double *)(v57 + 736);
                      int v137 = *(_DWORD *)(v57 + 744);
                      uint64_t v59 = v56;
                      while (1)
                      {
                        uint64_t v60 = v9 + v59;
                        *(unsigned char *)(v9 + v59 + 376) = *(unsigned char *)(v9 + v59);
                        sub_10034226C(v9 + v59 + 384, v9 + v59 + 8);
                        sub_10034226C(v60 + 448, v60 + 72);
                        sub_10034226C(v60 + 512, v60 + 136);
                        sub_10034226C(v60 + 624, v60 + 248);
                        *(void *)(v60 + 736) = *(void *)(v60 + 360);
                        *(_DWORD *)(v60 + 744) = *(_DWORD *)(v60 + 368);
                        if (!v59) {
                          break;
                        }
                        v59 -= 376;
                        if (v136 >= *(double *)(v60 - 16))
                        {
                          uint64_t v61 = (unsigned char *)(v9 + v59 + 376);
                          goto LABEL_74;
                        }
                      }
                      uint64_t v61 = (unsigned char *)v9;
LABEL_74:
                      a2 = (char *)v122;
                      unsigned char *v61 = v131;
                      sub_10034226C(v60 + 8, (uint64_t)v132);
                      sub_10034226C(v60 + 72, (uint64_t)v133);
                      sub_10034226C(v60 + 136, (uint64_t)v134);
                      sub_10034226C(v60 + 248, (uint64_t)v135);
                      int v62 = v137;
                      *(double *)(v60 + 360) = v136;
                      *(_DWORD *)(v60 + 368) = v62;
                    }
                    long long v55 = v58 + 376;
                    v56 += 376;
                    uint64_t v57 = (uint64_t)v58;
                  }
                  while (v58 + 376 != a2);
                }
              }
            }
            else if ((char *)v9 != a2)
            {
              unint64_t v100 = (char *)(v9 + 376);
              if ((char *)(v9 + 376) != a2)
              {
                uint64_t v101 = v9 - 16;
                do
                {
                  unint64_t v102 = v100;
                  if (*(double *)(a1 + 736) < *(double *)(a1 + 360))
                  {
                    uint64_t v103 = a2;
                    char v131 = *v100;
                    sub_10034CDD4((uint64_t)v132, a1 + 384);
                    sub_10034CDD4((uint64_t)v133, a1 + 448);
                    sub_10034CF64((uint64_t)v134, a1 + 512);
                    sub_10034CF64((uint64_t)v135, a1 + 624);
                    double v136 = *(double *)(a1 + 736);
                    int v137 = *(_DWORD *)(a1 + 744);
                    uint64_t v104 = v101;
                    do
                    {
                      *(unsigned char *)(v104 + 392) = *(unsigned char *)(v104 + 16);
                      sub_10034226C(v104 + 400, v104 + 24);
                      sub_10034226C(v104 + 464, v104 + 88);
                      sub_10034226C(v104 + 528, v104 + 152);
                      sub_10034226C(v104 + 640, v104 + 264);
                      *(_DWORD *)(v104 + 760) = *(_DWORD *)(v104 + 384);
                      *(void *)(v104 + 752) = *(void *)(v104 + 376);
                      double v105 = *(double *)v104;
                      v104 -= 376;
                    }
                    while (v136 < v105);
                    *(unsigned char *)(v104 + 392) = v131;
                    sub_10034226C(v104 + 400, (uint64_t)v132);
                    sub_10034226C(v104 + 464, (uint64_t)v133);
                    sub_10034226C(v104 + 528, (uint64_t)v134);
                    sub_10034226C(v104 + 640, (uint64_t)v135);
                    int v106 = v137;
                    *(double *)(v104 + 752) = v136;
                    *(_DWORD *)(v104 + 760) = v106;
                    a2 = v103;
                  }
                  unint64_t v100 = v102 + 376;
                  v101 += 376;
                  a1 = (uint64_t)v102;
                }
                while (v102 + 376 != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if ((char *)v9 != a2)
            {
              unint64_t v114 = v10;
              int64_t v120 = (v11 - 2) >> 1;
              int64_t v63 = v120;
              uint64_t v64 = v9;
              do
              {
                int64_t v65 = v63;
                if (v120 >= v63)
                {
                  uint64_t v66 = (2 * v63) | 1;
                  uint64_t v67 = v64 + 376 * v66;
                  if (2 * v63 + 2 < (uint64_t)v11 && *(double *)(v64 + 376 * v66 + 360) < *(double *)(v67 + 736))
                  {
                    v67 += 376;
                    uint64_t v66 = 2 * v63 + 2;
                  }
                  uint64_t v68 = v64 + 376 * v63;
                  if (*(double *)(v67 + 360) >= *(double *)(v68 + 360))
                  {
                    uint64_t v69 = v64 + 376 * v65;
                    uint64_t v70 = v68 + 360;
                    char v131 = *(unsigned char *)v69;
                    int64_t v119 = v65;
                    sub_10034CDD4((uint64_t)v132, v69 + 8);
                    sub_10034CDD4((uint64_t)v133, v69 + 72);
                    sub_10034CF64((uint64_t)v134, v69 + 136);
                    sub_10034CF64((uint64_t)v135, v69 + 248);
                    double v71 = *(double *)v70;
                    int v137 = *(_DWORD *)(v70 + 8);
                    double v136 = v71;
                    do
                    {
                      uint64_t v72 = v67;
                      *(unsigned char *)uint64_t v69 = *(unsigned char *)v67;
                      uint64_t v73 = v67 + 8;
                      sub_10034226C(v69 + 8, v67 + 8);
                      uint64_t v74 = v67 + 72;
                      sub_10034226C(v69 + 72, v67 + 72);
                      uint64_t v75 = v67 + 136;
                      sub_10034226C(v69 + 136, v67 + 136);
                      uint64_t v76 = v67 + 248;
                      sub_10034226C(v69 + 248, v67 + 248);
                      int v77 = *(_DWORD *)(v67 + 368);
                      *(void *)(v69 + 360) = *(void *)(v67 + 360);
                      *(_DWORD *)(v69 + 368) = v77;
                      if (v120 < v66) {
                        break;
                      }
                      uint64_t v78 = (2 * v66) | 1;
                      uint64_t v67 = a1 + 376 * v78;
                      if (2 * v66 + 2 < (uint64_t)v11 && *(double *)(a1 + 376 * v78 + 360) < *(double *)(v67 + 736))
                      {
                        v67 += 376;
                        uint64_t v78 = 2 * v66 + 2;
                      }
                      uint64_t v69 = v72;
                      uint64_t v66 = v78;
                    }
                    while (*(double *)(v67 + 360) >= v136);
                    *(unsigned char *)uint64_t v72 = v131;
                    sub_10034226C(v73, (uint64_t)v132);
                    sub_10034226C(v74, (uint64_t)v133);
                    sub_10034226C(v75, (uint64_t)v134);
                    sub_10034226C(v76, (uint64_t)v135);
                    int64_t v65 = v119;
                    int v79 = v137;
                    *(double *)(v72 + 360) = v136;
                    *(_DWORD *)(v72 + 368) = v79;
                    a2 = (char *)v122;
                    uint64_t v64 = a1;
                  }
                }
                int64_t v63 = v65 - 1;
              }
              while (v65);
              int64_t v80 = v114 / 0x178;
              uint64_t v111 = v64 + 8;
              uint64_t v109 = v64 + 136;
              uint64_t v110 = v64 + 72;
              uint64_t v107 = v64 + 360;
              uint64_t v108 = v64 + 248;
              do
              {
                long long v116 = a2;
                uint64_t v81 = a1;
                char v124 = *(unsigned char *)a1;
                sub_10034CDD4((uint64_t)v125, v111);
                sub_10034CDD4((uint64_t)v126, v110);
                sub_10034CF64((uint64_t)v127, v109);
                sub_10034CF64((uint64_t)v128, v108);
                uint64_t v82 = 0;
                uint64_t v83 = *(void *)v107;
                int v130 = *(_DWORD *)(v107 + 8);
                uint64_t v129 = v83;
                do
                {
                  uint64_t v84 = v81;
                  uint64_t v85 = v82 + 1;
                  v81 += 376 * (v82 + 1);
                  uint64_t v86 = 2 * v82;
                  uint64_t v82 = (2 * v82) | 1;
                  int64_t v87 = v86 + 2;
                  if (v87 < v80 && *(double *)(v84 + 376 * v85 + 360) < *(double *)(v81 + 736))
                  {
                    v81 += 376;
                    uint64_t v82 = v87;
                  }
                  *(unsigned char *)uint64_t v84 = *(unsigned char *)v81;
                  sub_10034226C(v84 + 8, v81 + 8);
                  sub_10034226C(v84 + 72, v81 + 72);
                  sub_10034226C(v84 + 136, v81 + 136);
                  sub_10034226C(v84 + 248, v81 + 248);
                  int v88 = *(_DWORD *)(v81 + 368);
                  *(void *)(v84 + 360) = *(void *)(v81 + 360);
                  *(_DWORD *)(v84 + 368) = v88;
                }
                while (v82 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                uint32_t v89 = v116 - 376;
                int v121 = (double *)(v81 + 360);
                if ((char *)v81 == v116 - 376)
                {
                  *(unsigned char *)uint64_t v81 = v124;
                  sub_10034226C(v81 + 8, (uint64_t)v125);
                  sub_10034226C(v81 + 72, (uint64_t)v126);
                  sub_10034226C(v81 + 136, (uint64_t)v127);
                  sub_10034226C(v81 + 248, (uint64_t)v128);
                  int v98 = v130;
                  *(void *)int v121 = v129;
                  *(_DWORD *)(v81 + 368) = v98;
                }
                else
                {
                  *(unsigned char *)uint64_t v81 = *v89;
                  sub_10034226C(v81 + 8, (uint64_t)(v116 - 368));
                  sub_10034226C(v81 + 72, (uint64_t)(v116 - 304));
                  sub_10034226C(v81 + 136, (uint64_t)(v116 - 240));
                  sub_10034226C(v81 + 248, (uint64_t)(v116 - 128));
                  uint64_t v90 = *((void *)v116 - 2);
                  *(_DWORD *)(v81 + 368) = *((_DWORD *)v116 - 2);
                  *(void *)int v121 = v90;
                  *uint32_t v89 = v124;
                  sub_10034226C((uint64_t)(v116 - 368), (uint64_t)v125);
                  sub_10034226C((uint64_t)(v116 - 304), (uint64_t)v126);
                  sub_10034226C((uint64_t)(v116 - 240), (uint64_t)v127);
                  sub_10034226C((uint64_t)(v116 - 128), (uint64_t)v128);
                  int v91 = v130;
                  *((void *)v116 - 2) = v129;
                  *((_DWORD *)v116 - 2) = v91;
                  uint64_t v92 = v81 - a1 + 376;
                  if (v92 >= 377)
                  {
                    unint64_t v93 = (v92 / 0x178uLL - 2) >> 1;
                    if (*(double *)(a1 + 376 * v93 + 360) < *v121)
                    {
                      char v131 = *(unsigned char *)v81;
                      sub_10034CDD4((uint64_t)v132, v81 + 8);
                      sub_10034CDD4((uint64_t)v133, v81 + 72);
                      sub_10034CF64((uint64_t)v134, v81 + 136);
                      sub_10034CF64((uint64_t)v135, v81 + 248);
                      double v94 = *v121;
                      int v137 = *(_DWORD *)(v81 + 368);
                      double v136 = v94;
                      do
                      {
                        uint64_t v95 = v81;
                        uint64_t v81 = a1 + 376 * v93;
                        *(unsigned char *)uint64_t v95 = *(unsigned char *)v81;
                        sub_10034226C(v95 + 8, v81 + 8);
                        sub_10034226C(v95 + 72, v81 + 72);
                        sub_10034226C(v95 + 136, v81 + 136);
                        sub_10034226C(v95 + 248, v81 + 248);
                        int v96 = *(_DWORD *)(v81 + 368);
                        *(void *)(v95 + 360) = *(void *)(v81 + 360);
                        *(_DWORD *)(v95 + 368) = v96;
                        if (!v93) {
                          break;
                        }
                        unint64_t v93 = (v93 - 1) >> 1;
                      }
                      while (*(double *)(a1 + 376 * v93 + 360) < v136);
                      *(unsigned char *)uint64_t v81 = v131;
                      sub_10034226C(v81 + 8, (uint64_t)v132);
                      sub_10034226C(v81 + 72, (uint64_t)v133);
                      sub_10034226C(v81 + 136, (uint64_t)v134);
                      sub_10034226C(v81 + 248, (uint64_t)v135);
                      int v97 = v137;
                      *(double *)(v81 + 360) = v136;
                      *(_DWORD *)(v81 + 368) = v97;
                    }
                  }
                }
                BOOL v99 = v80-- <= 2;
                a2 = v116 - 376;
              }
              while (!v99);
            }
            return;
          }
          unint64_t v12 = v11 >> 1;
          uint64_t v13 = (char *)(v9 + 376 * (v11 >> 1));
          if ((unint64_t)v10 >= 0xBC01)
          {
            sub_100369DFC(v9, v9 + 376 * (v11 >> 1), (uint64_t)v115);
            uint64_t v14 = 376 * v12;
            uint64_t v15 = 376 * v12 + v9 - 376;
            sub_100369DFC(v9 + 376, v15, v113);
            sub_100369DFC(v9 + 752, v9 + 376 + v14, v112);
            sub_100369DFC(v15, (uint64_t)v13, v9 + 376 + v14);
            sub_10036A21C((char *)v9, v13);
          }
          else
          {
            sub_100369DFC(v9 + 376 * (v11 >> 1), v9, (uint64_t)v115);
          }
          --a3;
          if ((a4 & 1) != 0 || *(double *)(v9 - 16) < *(double *)(v9 + 360)) {
            break;
          }
          char v131 = *(unsigned char *)v9;
          sub_10034CDD4((uint64_t)v132, v9 + 8);
          sub_10034CDD4((uint64_t)v133, v9 + 72);
          sub_10034CF64((uint64_t)v134, v9 + 136);
          sub_10034CF64((uint64_t)v135, v9 + 248);
          double v38 = *(double *)(v9 + 360);
          int v137 = *(_DWORD *)(v9 + 368);
          double v136 = v38;
          if (v38 < *((double *)a2 - 2))
          {
            uint64_t v39 = v9;
            do
            {
              unint64_t v8 = v39 + 376;
              double v40 = *(double *)(v39 + 736);
              v39 += 376;
            }
            while (v136 >= v40);
          }
          else
          {
            unint64_t v41 = v9 + 376;
            do
            {
              unint64_t v8 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              double v42 = *(double *)(v41 + 360);
              v41 += 376;
            }
            while (v136 >= v42);
          }
          double v43 = a2;
          if (v8 < (unint64_t)a2)
          {
            char v44 = a2;
            do
            {
              double v43 = v44 - 376;
              double v45 = *((double *)v44 - 2);
              v44 -= 376;
            }
            while (v136 < v45);
          }
          while (v8 < (unint64_t)v43)
          {
            sub_10036A21C((char *)v8, v43);
            do
            {
              double v46 = *(double *)(v8 + 736);
              v8 += 376;
            }
            while (v136 >= v46);
            do
            {
              double v47 = *((double *)v43 - 2);
              v43 -= 376;
            }
            while (v136 < v47);
          }
          uint64_t v48 = (char *)(v8 - 376);
          if (v8 - 376 != v9)
          {
            *(unsigned char *)uint64_t v9 = *v48;
            sub_10034226C(v9 + 8, v8 - 368);
            sub_10034226C(v9 + 72, v8 - 304);
            sub_10034226C(v9 + 136, v8 - 240);
            sub_10034226C(v9 + 248, v8 - 128);
            int v49 = *(_DWORD *)(v8 - 8);
            *(void *)(v9 + 360) = *(void *)(v8 - 16);
            *(_DWORD *)(v9 + 368) = v49;
          }
          *uint64_t v48 = v131;
          sub_10034226C(v8 - 368, (uint64_t)v132);
          sub_10034226C(v8 - 304, (uint64_t)v133);
          sub_10034226C(v8 - 240, (uint64_t)v134);
          sub_10034226C(v8 - 128, (uint64_t)v135);
          a4 = 0;
          int v50 = v137;
          *(double *)(v8 - 16) = v136;
          *(_DWORD *)(v8 - 8) = v50;
        }
        uint64_t v118 = a3;
        char v131 = *(unsigned char *)v9;
        uint64_t v16 = v9 + 8;
        sub_10034CDD4((uint64_t)v132, v9 + 8);
        uint64_t v17 = v9 + 72;
        sub_10034CDD4((uint64_t)v133, v9 + 72);
        uint64_t v18 = v9 + 136;
        sub_10034CF64((uint64_t)v134, v9 + 136);
        uint64_t v19 = v9 + 248;
        sub_10034CF64((uint64_t)v135, v9 + 248);
        uint64_t v20 = 0;
        uint64_t v21 = v9 + 360;
        double v22 = *(double *)(v9 + 360);
        int v137 = *(_DWORD *)(v9 + 368);
        double v136 = v22;
        do
        {
          double v23 = *(double *)(v9 + v20 + 736);
          v20 += 376;
        }
        while (v23 < v136);
        unint64_t v24 = v9 + v20;
        uint64_t v25 = v122;
        if (v20 == 376)
        {
          unint64_t v28 = v122;
          while (v24 < v28)
          {
            double v26 = (char *)(v28 - 376);
            double v29 = *(double *)(v28 - 16);
            v28 -= 376;
            if (v29 < v136) {
              goto LABEL_21;
            }
          }
          double v26 = (char *)v28;
        }
        else
        {
          do
          {
            double v26 = (char *)(v25 - 376);
            double v27 = *(double *)(v25 - 16);
            v25 -= 376;
          }
          while (v27 >= v136);
        }
LABEL_21:
        unint64_t v8 = v24;
        if (v24 < (unint64_t)v26)
        {
          double v30 = v26;
          do
          {
            sub_10036A21C((char *)v8, v30);
            do
            {
              double v31 = *(double *)(v8 + 736);
              v8 += 376;
            }
            while (v31 < v136);
            do
            {
              double v32 = *((double *)v30 - 2);
              v30 -= 376;
            }
            while (v32 >= v136);
          }
          while (v8 < (unint64_t)v30);
        }
        unint64_t v33 = (char *)(v8 - 376);
        if (v8 - 376 != a1)
        {
          *(unsigned char *)a1 = *v33;
          sub_10034226C(v16, v8 - 368);
          sub_10034226C(v17, v8 - 304);
          sub_10034226C(v18, v8 - 240);
          sub_10034226C(v19, v8 - 128);
          int v34 = *(_DWORD *)(v8 - 8);
          *(void *)uint64_t v21 = *(void *)(v8 - 16);
          *(_DWORD *)(v21 + 8) = v34;
        }
        *unint64_t v33 = v131;
        sub_10034226C(v8 - 368, (uint64_t)v132);
        sub_10034226C(v8 - 304, (uint64_t)v133);
        sub_10034226C(v8 - 240, (uint64_t)v134);
        __n128 v35 = sub_10034226C(v8 - 128, (uint64_t)v135);
        a3 = v118;
        int v36 = v137;
        *(double *)(v8 - 16) = v136;
        *(_DWORD *)(v8 - 8) = v36;
        a2 = (char *)v122;
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_32:
        sub_100368E18(a1, v8 - 376, v118, a4 & 1, v35);
        a4 = 0;
      }
      BOOL v37 = sub_100369EBC(a1, v8 - 376);
      if (sub_100369EBC(v8, v122)) {
        break;
      }
      if (!v37) {
        goto LABEL_32;
      }
    }
    a2 = (char *)(v8 - 376);
    if (!v37) {
      continue;
    }
    break;
  }
}

void sub_100369DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  double v6 = *(double *)(a2 + 360);
  double v7 = *(double *)(a3 + 360);
  if (v6 >= *(double *)(a1 + 360))
  {
    if (v7 >= v6) {
      return;
    }
    sub_10036A21C((char *)a2, (char *)a3);
    if (*(double *)(a2 + 360) >= *(double *)(v5 + 360)) {
      return;
    }
    a1 = v5;
    unint64_t v8 = (char *)a2;
  }
  else
  {
    if (v7 >= v6)
    {
      sub_10036A21C((char *)a1, (char *)a2);
      if (*(double *)(a3 + 360) >= *(double *)(a2 + 360)) {
        return;
      }
      a1 = a2;
    }
    unint64_t v8 = (char *)a3;
  }

  sub_10036A21C((char *)a1, v8);
}

BOOL sub_100369EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x51B3BEA3677D46CFLL * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 360))
      {
        double v6 = (char *)(a2 - 376);
        double v7 = (char *)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      sub_100369DFC(a1, a1 + 376, a2 - 376);
      return 1;
    case 4:
      sub_10036A374(a1, a1 + 376, a1 + 752, a2 - 376);
      return 1;
    case 5:
      sub_10036A374(a1, a1 + 376, a1 + 752, a1 + 1128);
      if (*(double *)(v2 - 16) < *(double *)(a1 + 1488))
      {
        sub_10036A21C((char *)(a1 + 1128), (char *)(v2 - 376));
        if (*(double *)(a1 + 1488) < *(double *)(a1 + 1112))
        {
          sub_10036A21C((char *)(a1 + 752), (char *)(a1 + 1128));
          if (*(double *)(a1 + 1112) < *(double *)(a1 + 736))
          {
            sub_10036A21C((char *)(a1 + 376), (char *)(a1 + 752));
            if (*(double *)(a1 + 736) < *(double *)(a1 + 360))
            {
              double v7 = (char *)a1;
              double v6 = (char *)(a1 + 376);
LABEL_4:
              sub_10036A21C(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 752;
      sub_100369DFC(a1, a1 + 376, a1 + 752);
      uint64_t v9 = a1 + 1128;
      if (a1 + 1128 == v2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      uint64_t v16 = v2;
      break;
  }
  while (1)
  {
    if (*(double *)(v9 + 360) < *(double *)(v8 + 360))
    {
      char v17 = *(unsigned char *)v9;
      sub_10034CDD4((uint64_t)v18, v9 + 8);
      sub_10034CDD4((uint64_t)v19, v9 + 72);
      sub_10034CF64((uint64_t)v20, v9 + 136);
      sub_10034CF64((uint64_t)v21, v9 + 248);
      double v22 = *(double *)(v9 + 360);
      int v23 = *(_DWORD *)(v9 + 368);
      uint64_t v12 = v10;
      while (1)
      {
        uint64_t v13 = a1 + v12;
        *(unsigned char *)(a1 + v12 + 1128) = *(unsigned char *)(a1 + v12 + 752);
        uint64_t v14 = a1 + v12 + 760;
        sub_10034226C(a1 + v12 + 1136, v14);
        sub_10034226C(v13 + 1200, v13 + 824);
        sub_10034226C(v13 + 1264, v13 + 888);
        sub_10034226C(v13 + 1376, v13 + 1000);
        *(void *)(v13 + 1488) = *(void *)(v13 + 1112);
        *(_DWORD *)(v13 + 1496) = *(_DWORD *)(v13 + 1120);
        if (v12 == -752) {
          break;
        }
        v12 -= 376;
        if (v22 >= *(double *)(v13 + 736))
        {
          uint64_t v15 = (unsigned char *)(a1 + v12 + 1128);
          goto LABEL_14;
        }
      }
      uint64_t v15 = (unsigned char *)a1;
LABEL_14:
      unsigned char *v15 = v17;
      sub_10034226C(v14, (uint64_t)v18);
      sub_10034226C(v13 + 824, (uint64_t)v19);
      sub_10034226C(v13 + 888, (uint64_t)v20);
      sub_10034226C(v13 + 1000, (uint64_t)v21);
      *(double *)(v13 + 1112) = v22;
      *(_DWORD *)(v13 + 1120) = v23;
      ++v11;
      uint64_t v2 = v16;
      if (v11 == 8) {
        return v9 + 376 == v16;
      }
    }
    uint64_t v8 = v9;
    v10 += 376;
    v9 += 376;
    if (v9 == v2) {
      return 1;
    }
  }
}

void sub_10036A21C(char *a1, char *a2)
{
  char v5 = *a1;
  sub_10034CDD4((uint64_t)v6, (uint64_t)(a1 + 8));
  sub_10034CDD4((uint64_t)v7, (uint64_t)(a1 + 72));
  sub_10034CF64((uint64_t)v8, (uint64_t)(a1 + 136));
  sub_10034CF64((uint64_t)v9, (uint64_t)(a1 + 248));
  uint64_t v10 = *((void *)a1 + 45);
  int v11 = *((_DWORD *)a1 + 92);
  *a1 = *a2;
  sub_10034226C((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  sub_10034226C((uint64_t)(a1 + 72), (uint64_t)(a2 + 72));
  sub_10034226C((uint64_t)(a1 + 136), (uint64_t)(a2 + 136));
  sub_10034226C((uint64_t)(a1 + 248), (uint64_t)(a2 + 248));
  uint64_t v4 = *((void *)a2 + 45);
  *((_DWORD *)a1 + 92) = *((_DWORD *)a2 + 92);
  *((void *)a1 + 45) = v4;
  *a2 = v5;
  sub_10034226C((uint64_t)(a2 + 8), (uint64_t)v6);
  sub_10034226C((uint64_t)(a2 + 72), (uint64_t)v7);
  sub_10034226C((uint64_t)(a2 + 136), (uint64_t)v8);
  sub_10034226C((uint64_t)(a2 + 248), (uint64_t)v9);
  *((void *)a2 + 45) = v10;
  *((_DWORD *)a2 + 92) = v11;
}

void sub_10036A374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100369DFC(a1, a2, a3);
  if (*(double *)(a4 + 360) < *(double *)(a3 + 360))
  {
    sub_10036A21C((char *)a3, (char *)a4);
    if (*(double *)(a3 + 360) < *(double *)(a2 + 360))
    {
      sub_10036A21C((char *)a2, (char *)a3);
      if (*(double *)(a2 + 360) < *(double *)(a1 + 360))
      {
        sub_10036A21C((char *)a1, (char *)a2);
      }
    }
  }
}

uint64_t sub_10036A41C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9) {
    sub_1000267C4();
  }
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL) {
    unint64_t v6 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    double v7 = (char *)sub_1003689B0((uint64_t)(a1 + 2), v6);
  }
  else {
    double v7 = 0;
  }
  uint64_t v10 = v7;
  int v11 = &v7[376 * v3];
  uint64_t v13 = &v7[376 * v6];
  sub_100368AC8((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 376;
  sub_100368938(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100368C94((uint64_t)&v10);
  return v8;
}

void sub_10036A530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100368C94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10036A544(char *a1, char *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v140 = a2 - 376;
    unint64_t v142 = (unint64_t)a2;
    uint64_t v131 = (uint64_t)(a2 - 1128);
    uint64_t v133 = (uint64_t)(a2 - 752);
    long long v135 = a2 - 384;
    unint64_t k = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v10 = k;
          uint64_t v11 = (uint64_t)&a2[-k];
          uint64_t v12 = 0x51B3BEA3677D46CFLL * ((uint64_t)&a2[-k] >> 3);
          if (!(!v5 & v4))
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                int v56 = *((_DWORD *)a2 - 2);
                int v57 = *(_DWORD *)(v10 + 368);
                if (v56 < v57 || v56 <= v57 && *((double *)a2 - 2) < *(double *)(v10 + 360)) {
                  sub_10036A21C((char *)v10, v140);
                }
                break;
              case 3:
                sub_10036B8B0(v10, v10 + 376, (uint64_t)v140);
                break;
              case 4:
                sub_10036BD14(v10, v10 + 376, v10 + 752, (uint64_t)v140);
                break;
              case 5:
                sub_10036B780(v10, v10 + 376, v10 + 752, v10 + 1128, (uint64_t)v140);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          v143 = (char *)v10;
          if (v11 <= 9023)
          {
            if (a4)
            {
              if ((char *)v10 != a2)
              {
                uint64_t v58 = (char *)(v10 + 376);
                if ((char *)(v10 + 376) != a2)
                {
                  uint64_t v59 = 0;
                  uint64_t v60 = v152;
                  uint64_t v61 = (char *)v10;
                  do
                  {
                    int v62 = v61;
                    uint64_t v61 = v58;
                    int v63 = *((_DWORD *)v62 + 186);
                    int v64 = *((_DWORD *)v62 + 92);
                    if (v63 < v64 || v63 <= v64 && *((double *)v62 + 92) < *((double *)v62 + 45))
                    {
                      char v151 = *v61;
                      uint64_t v65 = (uint64_t)v60;
                      sub_10034CDD4((uint64_t)v60, (uint64_t)(v62 + 384));
                      sub_10034CDD4((uint64_t)v153, (uint64_t)(v62 + 448));
                      sub_10034CF64((uint64_t)v154, (uint64_t)(v62 + 512));
                      sub_10034CF64((uint64_t)v155, (uint64_t)(v62 + 624));
                      double v156 = *((double *)v62 + 92);
                      int v157 = *((_DWORD *)v62 + 186);
                      for (uint64_t i = v59; ; i -= 376)
                      {
                        uint64_t v67 = v10 + i;
                        *(unsigned char *)(v10 + i + 376) = *(unsigned char *)(v10 + i);
                        uint64_t v68 = v10 + i + 8;
                        sub_10034226C(v10 + i + 384, v68);
                        sub_10034226C(v67 + 448, v67 + 72);
                        sub_10034226C(v67 + 512, v67 + 136);
                        sub_10034226C(v67 + 624, v67 + 248);
                        *(void *)(v67 + 736) = *(void *)(v67 + 360);
                        *(_DWORD *)(v67 + 744) = *(_DWORD *)(v67 + 368);
                        if (!i)
                        {
                          uint64_t v70 = v143;
                          goto LABEL_116;
                        }
                        int v69 = *(_DWORD *)(v67 - 8);
                        if (v157 >= v69 && (v157 > v69 || v156 >= *(double *)&v143[i - 16])) {
                          break;
                        }
                        uint64_t v10 = (uint64_t)v143;
                      }
                      uint64_t v70 = &v143[i];
LABEL_116:
                      uint64_t v60 = (unsigned char *)v65;
                      *uint64_t v70 = v151;
                      sub_10034226C(v68, v65);
                      sub_10034226C(v67 + 72, (uint64_t)v153);
                      sub_10034226C(v67 + 136, (uint64_t)v154);
                      sub_10034226C(v67 + 248, (uint64_t)v155);
                      int v71 = v157;
                      *(double *)(v67 + 360) = v156;
                      *(_DWORD *)(v67 + 368) = v71;
                      a2 = (char *)v142;
                      uint64_t v10 = (uint64_t)v143;
                    }
                    uint64_t v58 = v61 + 376;
                    v59 += 376;
                  }
                  while (v61 + 376 != a2);
                }
              }
            }
            else if ((char *)v10 != a2)
            {
              uint64_t v119 = v10 + 376;
              if ((char *)(v10 + 376) != a2)
              {
                uint64_t v120 = v10 + 736;
                do
                {
                  uint64_t v121 = v10;
                  uint64_t v10 = v119;
                  int v122 = *(_DWORD *)(v121 + 744);
                  int v123 = *(_DWORD *)(v121 + 368);
                  if (v122 < v123 || v122 <= v123 && *(double *)(v121 + 736) < *(double *)(v121 + 360))
                  {
                    char v151 = *(unsigned char *)v10;
                    sub_10034CDD4((uint64_t)v152, v121 + 384);
                    sub_10034CDD4((uint64_t)v153, v121 + 448);
                    sub_10034CF64((uint64_t)v154, v121 + 512);
                    sub_10034CF64((uint64_t)v155, v121 + 624);
                    double v156 = *(double *)(v121 + 736);
                    int v157 = *(_DWORD *)(v121 + 744);
                    for (uint64_t j = v120; ; j -= 376)
                    {
                      *(unsigned char *)(j - 360) = *(unsigned char *)(j - 736);
                      sub_10034226C(j - 352, j - 728);
                      sub_10034226C(j - 288, j - 664);
                      sub_10034226C(j - 224, j - 600);
                      sub_10034226C(j - 112, j - 488);
                      *(_DWORD *)(j + 8) = *(_DWORD *)(j - 368);
                      *(void *)uint64_t j = *(void *)(j - 376);
                      int v125 = *(_DWORD *)(j - 744);
                      if (v157 >= v125 && (v157 > v125 || v156 >= *(double *)(j - 752))) {
                        break;
                      }
                    }
                    *(unsigned char *)(j - 736) = v151;
                    sub_10034226C(j - 728, (uint64_t)v152);
                    sub_10034226C(j - 664, (uint64_t)v153);
                    sub_10034226C(j - 600, (uint64_t)v154);
                    sub_10034226C(j - 488, (uint64_t)v155);
                    int v126 = v157;
                    *(double *)(j - 376) = v156;
                    *(_DWORD *)(j - 368) = v126;
                    a2 = (char *)v142;
                  }
                  uint64_t v119 = v10 + 376;
                  v120 += 376;
                }
                while ((char *)(v10 + 376) != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if ((char *)v10 != a2)
            {
              int64_t v141 = (unint64_t)(v12 - 2) >> 1;
              int64_t v72 = v141;
              do
              {
                int64_t v73 = v72;
                if (v141 >= v72)
                {
                  uint64_t v74 = (2 * v72) | 1;
                  uint64_t v75 = (char *)(v10 + 376 * v74);
                  if (2 * v72 + 2 < v12)
                  {
                    int v76 = *(_DWORD *)(v10 + 376 * v74 + 368);
                    int v77 = *((_DWORD *)v75 + 186);
                    if (v76 < v77 || v76 <= v77 && *(double *)(v10 + 376 * v74 + 360) < *((double *)v75 + 92))
                    {
                      v75 += 376;
                      uint64_t v74 = 2 * v72 + 2;
                    }
                  }
                  int v78 = *((_DWORD *)v75 + 92);
                  int v79 = *(_DWORD *)(v10 + 376 * v73 + 368);
                  if (v78 >= v79 && (v78 > v79 || *((double *)v75 + 45) >= *(double *)(v10 + 376 * v73 + 360)))
                  {
                    uint64_t v80 = v10 + 376 * v73;
                    char v151 = *(unsigned char *)v80;
                    int64_t v139 = v73;
                    sub_10034CDD4((uint64_t)v152, v80 + 8);
                    sub_10034CDD4((uint64_t)v153, v80 + 72);
                    sub_10034CF64((uint64_t)v154, v80 + 136);
                    sub_10034CF64((uint64_t)v155, v80 + 248);
                    double v81 = *(double *)(v80 + 360);
                    int v157 = *(_DWORD *)(v80 + 368);
                    double v156 = v81;
                    while (1)
                    {
                      uint64_t v82 = (double *)v75;
                      *(unsigned char *)uint64_t v80 = *v75;
                      uint64_t v83 = (uint64_t)(v75 + 8);
                      sub_10034226C(v80 + 8, (uint64_t)(v75 + 8));
                      uint64_t v84 = (uint64_t)(v75 + 72);
                      sub_10034226C(v80 + 72, (uint64_t)(v75 + 72));
                      uint64_t v85 = (uint64_t)(v75 + 136);
                      sub_10034226C(v80 + 136, (uint64_t)(v75 + 136));
                      uint64_t v86 = (uint64_t)(v75 + 248);
                      sub_10034226C(v80 + 248, (uint64_t)(v75 + 248));
                      int v87 = *((_DWORD *)v75 + 92);
                      *(void *)(v80 + 360) = *((void *)v75 + 45);
                      *(_DWORD *)(v80 + 368) = v87;
                      if (v141 < v74) {
                        break;
                      }
                      uint64_t v88 = (2 * v74) | 1;
                      uint64_t v75 = &v143[376 * v88];
                      if (2 * v74 + 2 < v12)
                      {
                        int v89 = *(_DWORD *)&v143[376 * v88 + 368];
                        int v90 = *((_DWORD *)v75 + 186);
                        if (v89 < v90 || v89 <= v90 && *(double *)&v143[376 * v88 + 360] < *((double *)v75 + 92))
                        {
                          v75 += 376;
                          uint64_t v88 = 2 * v74 + 2;
                        }
                      }
                      int v91 = *((_DWORD *)v75 + 92);
                      if (v91 < v157) {
                        break;
                      }
                      uint64_t v80 = (uint64_t)v82;
                      uint64_t v74 = v88;
                      if (v91 <= v157)
                      {
                        uint64_t v80 = (uint64_t)v82;
                        uint64_t v74 = v88;
                        if (*((double *)v75 + 45) < v156) {
                          break;
                        }
                      }
                    }
                    *(unsigned char *)uint64_t v82 = v151;
                    sub_10034226C(v83, (uint64_t)v152);
                    sub_10034226C(v84, (uint64_t)v153);
                    sub_10034226C(v85, (uint64_t)v154);
                    sub_10034226C(v86, (uint64_t)v155);
                    int64_t v73 = v139;
                    int v92 = v157;
                    v82[45] = v156;
                    *((_DWORD *)v82 + 92) = v92;
                    uint64_t v10 = (uint64_t)v143;
                  }
                }
                int64_t v72 = v73 - 1;
              }
              while (v73);
              int64_t v93 = v11 / 0x178uLL;
              uint64_t v132 = v10 + 72;
              uint64_t v134 = v10 + 8;
              uint64_t v129 = v10 + 248;
              uint64_t v130 = v10 + 136;
              uint64_t v128 = v10 + 360;
              double v94 = (unsigned char *)v142;
              do
              {
                int v137 = v94;
                char v144 = *(unsigned char *)v10;
                sub_10034CDD4((uint64_t)v145, v134);
                sub_10034CDD4((uint64_t)v146, v132);
                sub_10034CF64((uint64_t)v147, v130);
                sub_10034CF64((uint64_t)v148, v129);
                uint64_t v95 = 0;
                uint64_t v96 = *(void *)v128;
                int v150 = *(_DWORD *)(v128 + 8);
                uint64_t v149 = v96;
                int v97 = (char *)v10;
                do
                {
                  int v98 = v97;
                  uint64_t v99 = v95 + 1;
                  v97 += 376 * v95 + 376;
                  uint64_t v100 = 2 * v95;
                  uint64_t v95 = (2 * v95) | 1;
                  int64_t v101 = v100 + 2;
                  if (v101 < v93)
                  {
                    int v102 = *(_DWORD *)&v98[376 * v99 + 368];
                    int v103 = *((_DWORD *)v97 + 186);
                    if (v102 < v103 || v102 <= v103 && *(double *)&v98[376 * v99 + 360] < *((double *)v97 + 92))
                    {
                      v97 += 376;
                      uint64_t v95 = v101;
                    }
                  }
                  char *v98 = *v97;
                  sub_10034226C((uint64_t)(v98 + 8), (uint64_t)(v97 + 8));
                  sub_10034226C((uint64_t)(v98 + 72), (uint64_t)(v97 + 72));
                  sub_10034226C((uint64_t)(v98 + 136), (uint64_t)(v97 + 136));
                  sub_10034226C((uint64_t)(v98 + 248), (uint64_t)(v97 + 248));
                  int v104 = *((_DWORD *)v97 + 92);
                  *((void *)v98 + 45) = *((void *)v97 + 45);
                  *((_DWORD *)v98 + 92) = v104;
                }
                while (v95 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
                double v105 = v97 + 360;
                double v94 = v137 - 376;
                if (v97 == v137 - 376)
                {
                  char *v97 = v144;
                  sub_10034226C((uint64_t)(v97 + 8), (uint64_t)v145);
                  sub_10034226C((uint64_t)(v97 + 72), (uint64_t)v146);
                  sub_10034226C((uint64_t)(v97 + 136), (uint64_t)v147);
                  sub_10034226C((uint64_t)(v97 + 248), (uint64_t)v148);
                  int v117 = v150;
                  void *v105 = v149;
                  *((_DWORD *)v97 + 92) = v117;
                  uint64_t v10 = (uint64_t)v143;
                }
                else
                {
                  char *v97 = *v94;
                  sub_10034226C((uint64_t)(v97 + 8), (uint64_t)(v137 - 368));
                  sub_10034226C((uint64_t)(v97 + 72), (uint64_t)(v137 - 304));
                  sub_10034226C((uint64_t)(v97 + 136), (uint64_t)(v137 - 240));
                  sub_10034226C((uint64_t)(v97 + 248), (uint64_t)(v137 - 128));
                  uint64_t v106 = *((void *)v137 - 2);
                  *((_DWORD *)v97 + 92) = *((_DWORD *)v137 - 2);
                  int v127 = (double *)(v97 + 360);
                  void *v105 = v106;
                  unsigned char *v94 = v144;
                  sub_10034226C((uint64_t)(v137 - 368), (uint64_t)v145);
                  sub_10034226C((uint64_t)(v137 - 304), (uint64_t)v146);
                  sub_10034226C((uint64_t)(v137 - 240), (uint64_t)v147);
                  sub_10034226C((uint64_t)(v137 - 128), (uint64_t)v148);
                  int v107 = v150;
                  *((void *)v137 - 2) = v149;
                  *((_DWORD *)v137 - 2) = v107;
                  uint64_t v10 = (uint64_t)v143;
                  uint64_t v108 = v97 - v143 + 376;
                  if (v108 >= 377)
                  {
                    unint64_t v109 = (v108 / 0x178uLL - 2) >> 1;
                    int v110 = *(_DWORD *)&v143[376 * v109 + 368];
                    int v111 = *((_DWORD *)v97 + 92);
                    if (v110 < v111 || v110 <= v111 && *(double *)&v143[376 * v109 + 360] < *v127)
                    {
                      char v151 = *v97;
                      sub_10034CDD4((uint64_t)v152, (uint64_t)(v97 + 8));
                      sub_10034CDD4((uint64_t)v153, (uint64_t)(v97 + 72));
                      sub_10034CF64((uint64_t)v154, (uint64_t)(v97 + 136));
                      sub_10034CF64((uint64_t)v155, (uint64_t)(v97 + 248));
                      double v112 = *v127;
                      int v157 = *((_DWORD *)v97 + 92);
                      double v156 = v112;
                      do
                      {
                        uint64_t v113 = v97;
                        int v97 = &v143[376 * v109];
                        char *v113 = *v97;
                        sub_10034226C((uint64_t)(v113 + 8), (uint64_t)(v97 + 8));
                        sub_10034226C((uint64_t)(v113 + 72), (uint64_t)(v97 + 72));
                        sub_10034226C((uint64_t)(v113 + 136), (uint64_t)(v97 + 136));
                        sub_10034226C((uint64_t)(v113 + 248), (uint64_t)(v97 + 248));
                        int v114 = *((_DWORD *)v97 + 92);
                        *((void *)v113 + 45) = *((void *)v97 + 45);
                        *((_DWORD *)v113 + 92) = v114;
                        if (!v109) {
                          break;
                        }
                        unint64_t v109 = (v109 - 1) >> 1;
                        int v115 = *(_DWORD *)&v143[376 * v109 + 368];
                      }
                      while (v115 < v157 || v115 <= v157 && *(double *)&v143[376 * v109 + 360] < v156);
                      char *v97 = v151;
                      sub_10034226C((uint64_t)(v97 + 8), (uint64_t)v152);
                      sub_10034226C((uint64_t)(v97 + 72), (uint64_t)v153);
                      sub_10034226C((uint64_t)(v97 + 136), (uint64_t)v154);
                      sub_10034226C((uint64_t)(v97 + 248), (uint64_t)v155);
                      int v116 = v157;
                      *((double *)v97 + 45) = v156;
                      *((_DWORD *)v97 + 92) = v116;
                      double v94 = v137 - 376;
                    }
                  }
                }
              }
              while (v93-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = (char *)(v10 + 376 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 < 0xBC01)
          {
            sub_10036B8B0((uint64_t)v14, v10, (uint64_t)v140);
          }
          else
          {
            sub_10036B8B0(v10, (uint64_t)v14, (uint64_t)v140);
            uint64_t v15 = 376 * v13;
            uint64_t v16 = 376 * v13 + v10 - 376;
            sub_10036B8B0(v10 + 376, v16, v133);
            sub_10036B8B0(v10 + 752, v10 + 376 + v15, v131);
            sub_10036B8B0(v16, (uint64_t)v14, v10 + 376 + v15);
            sub_10036A21C((char *)v10, v14);
          }
          --a3;
          if (a4) {
            break;
          }
          int v17 = *(_DWORD *)(v10 - 8);
          int v18 = *(_DWORD *)(v10 + 368);
          if (v17 < v18 || v17 <= v18 && *(double *)(v10 - 16) < *(double *)(v10 + 360)) {
            break;
          }
          char v151 = *(unsigned char *)v10;
          sub_10034CDD4((uint64_t)v152, v10 + 8);
          sub_10034CDD4((uint64_t)v153, v10 + 72);
          sub_10034CF64((uint64_t)v154, v10 + 136);
          sub_10034CF64((uint64_t)v155, v10 + 248);
          double v43 = *(double *)(v10 + 360);
          int v157 = *(_DWORD *)(v10 + 368);
          double v156 = v43;
          int v44 = *((_DWORD *)a2 - 2);
          if (v157 < v44 || v157 <= v44 && v156 < *((double *)a2 - 2))
          {
            int v45 = *(_DWORD *)(v10 + 744);
            if (v157 >= v45)
            {
              uint64_t v47 = v10 + 736;
              do
              {
                if (v157 <= v45 && v156 < *(double *)v47) {
                  break;
                }
                int v45 = *(_DWORD *)(v47 + 384);
                v47 += 376;
              }
              while (v157 >= v45);
              unint64_t k = v47 - 360;
            }
            else
            {
              unint64_t k = v10 + 376;
            }
          }
          else
          {
            for (unint64_t k = v10 + 376; k < (unint64_t)a2; k += 376)
            {
              int v46 = *(_DWORD *)(k + 368);
              if (v157 < v46 || v157 <= v46 && v156 < *(double *)(k + 360)) {
                break;
              }
            }
          }
          unint64_t v48 = (unint64_t)a2;
          if (k < (unint64_t)a2)
          {
            for (uint64_t m = (double *)v135; v157 < v44 || v157 <= v44 && v156 < m[46]; m -= 47)
              int v44 = *(_DWORD *)m;
            unint64_t v48 = (unint64_t)(m + 1);
          }
          while (k < v48)
          {
            sub_10036A21C((char *)k, (char *)v48);
            int v50 = *(_DWORD *)(k + 744);
            if (v157 >= v50)
            {
              unint64_t v51 = k + 736;
              do
              {
                if (v157 <= v50 && v156 < *(double *)v51) {
                  break;
                }
                int v50 = *(_DWORD *)(v51 + 384);
                v51 += 376;
              }
              while (v157 >= v50);
              unint64_t k = v51 - 360;
            }
            else
            {
              k += 376;
            }
            do
            {
              do
              {
                v48 -= 376;
                int v52 = *(_DWORD *)(v48 + 368);
              }
              while (v157 < v52);
            }
            while (v157 <= v52 && v156 < *(double *)(v48 + 360));
          }
          uint64_t v53 = (char *)(k - 376);
          if (k - 376 != v10)
          {
            *(unsigned char *)uint64_t v10 = *v53;
            sub_10034226C(v10 + 8, k - 368);
            sub_10034226C(v10 + 72, k - 304);
            sub_10034226C(v10 + 136, k - 240);
            sub_10034226C(v10 + 248, k - 128);
            int v54 = *(_DWORD *)(k - 8);
            *(void *)(v10 + 360) = *(void *)(k - 16);
            *(_DWORD *)(v10 + 368) = v54;
          }
          *uint64_t v53 = v151;
          sub_10034226C(k - 368, (uint64_t)v152);
          sub_10034226C(k - 304, (uint64_t)v153);
          sub_10034226C(k - 240, (uint64_t)v154);
          sub_10034226C(k - 128, (uint64_t)v155);
          a4 = 0;
          int v55 = v157;
          *(double *)(k - 16) = v156;
          *(_DWORD *)(k - 8) = v55;
        }
        uint64_t v138 = a3;
        char v151 = *(unsigned char *)v10;
        uint64_t v19 = v10 + 8;
        sub_10034CDD4((uint64_t)v152, v10 + 8);
        uint64_t v20 = v10 + 72;
        sub_10034CDD4((uint64_t)v153, v10 + 72);
        uint64_t v21 = v10 + 136;
        sub_10034CF64((uint64_t)v154, v10 + 136);
        uint64_t v22 = v10 + 248;
        sub_10034CF64((uint64_t)v155, v10 + 248);
        uint64_t v23 = 0;
        uint64_t v24 = v10 + 360;
        double v25 = *(double *)(v10 + 360);
        int v157 = *(_DWORD *)(v10 + 368);
        double v156 = v25;
        while (1)
        {
          int v26 = *(_DWORD *)(v10 + v23 + 744);
          if (v26 >= v157 && (v26 > v157 || *(double *)(v10 + v23 + 736) >= v156)) {
            break;
          }
          v23 += 376;
        }
        unint64_t v27 = v10 + v23 + 376;
        if (v23)
        {
          unint64_t v28 = v140;
          int v29 = *(_DWORD *)(v142 - 8);
          double v30 = v135;
          if (v29 >= v157)
          {
            do
            {
              if (v29 <= v157 && *((double *)v30 + 46) < v156) {
                break;
              }
              int v29 = *(_DWORD *)v30;
              v30 -= 376;
            }
            while (v29 >= v157);
LABEL_23:
            unint64_t v28 = v30 + 8;
          }
        }
        else
        {
          unint64_t v28 = (char *)v142;
          if (v27 < v142)
          {
            unint64_t v28 = v140;
            int v31 = *(_DWORD *)(v142 - 8);
            if (v31 >= v157)
            {
              double v30 = v135;
              unint64_t v28 = v140;
              while (1)
              {
                unint64_t v41 = (unint64_t)(v30 + 8);
                if (v31 <= v157)
                {
                  if (*((double *)v30 + 46) < v156 || v27 >= v41) {
                    break;
                  }
                }
                else if (v27 >= v41)
                {
                  goto LABEL_23;
                }
                v28 -= 376;
                int v31 = *(_DWORD *)v30;
                v30 -= 376;
                if (v31 < v157) {
                  goto LABEL_23;
                }
              }
            }
          }
        }
        unint64_t k = v27;
        if (v27 < (unint64_t)v28)
        {
          double v32 = v28;
          do
          {
            sub_10036A21C((char *)k, v32);
            do
            {
              do
              {
                k += 376;
                int v33 = *(_DWORD *)(k + 368);
              }
              while (v33 < v157);
            }
            while (v33 <= v157 && *(double *)(k + 360) < v156);
            int v34 = *((_DWORD *)v32 - 2);
            if (v34 >= v157)
            {
              __n128 v35 = v32 - 384;
              do
              {
                if (v34 <= v157 && *((double *)v35 + 46) < v156) {
                  break;
                }
                int v34 = *(_DWORD *)v35;
                v35 -= 376;
              }
              while (v34 >= v157);
              double v32 = v35 + 8;
            }
            else
            {
              v32 -= 376;
            }
          }
          while (k < (unint64_t)v32);
        }
        int v36 = (char *)(k - 376);
        a1 = v143;
        if ((char *)(k - 376) != v143)
        {
          char *v143 = *v36;
          sub_10034226C(v19, k - 368);
          sub_10034226C(v20, k - 304);
          sub_10034226C(v21, k - 240);
          sub_10034226C(v22, k - 128);
          int v37 = *(_DWORD *)(k - 8);
          *(void *)uint64_t v24 = *(void *)(k - 16);
          *(_DWORD *)(v24 + 8) = v37;
        }
        *int v36 = v151;
        sub_10034226C(k - 368, (uint64_t)v152);
        sub_10034226C(k - 304, (uint64_t)v153);
        sub_10034226C(k - 240, (uint64_t)v154);
        __n128 v38 = sub_10034226C(k - 128, (uint64_t)v155);
        a3 = v138;
        int v39 = v157;
        *(double *)(k - 16) = v156;
        *(_DWORD *)(k - 8) = v39;
        a2 = (char *)v142;
        if (v27 >= (unint64_t)v28) {
          break;
        }
LABEL_45:
        sub_10036A544(v143, k - 376, v138, a4 & 1, v38);
        a4 = 0;
      }
      BOOL v40 = sub_10036B9E0((uint64_t)v143, k - 376);
      if (sub_10036B9E0(k, v142)) {
        break;
      }
      if (!v40) {
        goto LABEL_45;
      }
    }
    a2 = (char *)(k - 376);
    if (!v40) {
      continue;
    }
    break;
  }
}

double sub_10036B780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result = sub_10036BD14(a1, a2, a3, a4);
  int v11 = *(_DWORD *)(a5 + 368);
  int v12 = *(_DWORD *)(a4 + 368);
  if (v11 < v12 || v11 <= v12 && (double result = *(double *)(a5 + 360), result < *(double *)(a4 + 360)))
  {
    sub_10036A21C((char *)a4, (char *)a5);
    int v13 = *(_DWORD *)(a4 + 368);
    int v14 = *(_DWORD *)(a3 + 368);
    if (v13 < v14 || v13 <= v14 && (double result = *(double *)(a4 + 360), result < *(double *)(a3 + 360)))
    {
      sub_10036A21C((char *)a3, (char *)a4);
      int v15 = *(_DWORD *)(a3 + 368);
      int v16 = *(_DWORD *)(a2 + 368);
      if (v15 < v16 || v15 <= v16 && (double result = *(double *)(a3 + 360), result < *(double *)(a2 + 360)))
      {
        sub_10036A21C((char *)a2, (char *)a3);
        int v17 = *(_DWORD *)(a2 + 368);
        int v18 = *(_DWORD *)(a1 + 368);
        if (v17 < v18 || v17 <= v18 && (double result = *(double *)(a2 + 360), result < *(double *)(a1 + 360)))
        {
          sub_10036A21C((char *)a1, (char *)a2);
        }
      }
    }
  }
  return result;
}

double sub_10036B8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  int v6 = *(_DWORD *)(a2 + 368);
  int v7 = *(_DWORD *)(a1 + 368);
  if (v6 < v7 || v6 <= v7 && (double result = *(double *)(a2 + 360), result < *(double *)(a1 + 360)))
  {
    int v9 = *(_DWORD *)(a3 + 368);
    if (v9 >= v6 && (v9 > v6 || *(double *)(a3 + 360) >= *(double *)(a2 + 360)))
    {
      sub_10036A21C((char *)a1, (char *)a2);
      int v14 = *(_DWORD *)(a3 + 368);
      int v15 = *(_DWORD *)(a2 + 368);
      if (v14 >= v15)
      {
        if (v14 > v15) {
          return result;
        }
        double result = *(double *)(a3 + 360);
        if (result >= *(double *)(a2 + 360)) {
          return result;
        }
      }
      a1 = a2;
    }
    int v13 = (char *)a3;
    goto LABEL_18;
  }
  int v10 = *(_DWORD *)(a3 + 368);
  if (v10 < v6 || v10 <= v6 && (double result = *(double *)(a3 + 360), result < *(double *)(a2 + 360)))
  {
    sub_10036A21C((char *)a2, (char *)a3);
    int v11 = *(_DWORD *)(a2 + 368);
    int v12 = *(_DWORD *)(v5 + 368);
    if (v11 < v12 || v11 <= v12 && (double result = *(double *)(a2 + 360), result < *(double *)(v5 + 360)))
    {
      a1 = v5;
      int v13 = (char *)a2;
LABEL_18:
      sub_10036A21C((char *)a1, v13);
    }
  }
  return result;
}

BOOL sub_10036B9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x51B3BEA3677D46CFLL * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(_DWORD *)(a2 - 8);
      int v7 = *(_DWORD *)(a1 + 368);
      if (v6 < v7 || v6 <= v7 && *(double *)(a2 - 16) < *(double *)(a1 + 360))
      {
        sub_10036A21C((char *)a1, (char *)(a2 - 376));
        return 1;
      }
      return result;
    case 3:
      sub_10036B8B0(a1, a1 + 376, a2 - 376);
      return 1;
    case 4:
      sub_10036BD14(a1, a1 + 376, a1 + 752, a2 - 376);
      return 1;
    case 5:
      sub_10036B780(a1, a1 + 376, a1 + 752, a1 + 1128, a2 - 376);
      return 1;
    default:
      uint64_t v8 = a1 + 752;
      sub_10036B8B0(a1, a1 + 376, a1 + 752);
      uint64_t v9 = a1 + 1128;
      if (a1 + 1128 == v2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      uint64_t v18 = v2;
      break;
  }
  while (1)
  {
    int v12 = *(_DWORD *)(v9 + 368);
    int v13 = *(_DWORD *)(v8 + 368);
    if (v12 < v13 || v12 <= v13 && *(double *)(v9 + 360) < *(double *)(v8 + 360))
    {
      int v19 = v11;
      char v20 = *(unsigned char *)v9;
      sub_10034CDD4((uint64_t)v21, v9 + 8);
      sub_10034CDD4((uint64_t)v22, v9 + 72);
      sub_10034CF64((uint64_t)v23, v9 + 136);
      sub_10034CF64((uint64_t)v24, v9 + 248);
      double v25 = *(double *)(v9 + 360);
      int v26 = *(_DWORD *)(v9 + 368);
      for (uint64_t i = v10; ; i -= 376)
      {
        uint64_t v15 = a1 + i;
        *(unsigned char *)(a1 + i + 1128) = *(unsigned char *)(a1 + i + 752);
        uint64_t v16 = a1 + i + 760;
        sub_10034226C(a1 + i + 1136, v16);
        sub_10034226C(v15 + 1200, v15 + 824);
        sub_10034226C(v15 + 1264, v15 + 888);
        sub_10034226C(v15 + 1376, v15 + 1000);
        *(void *)(v15 + 1488) = *(void *)(v15 + 1112);
        *(_DWORD *)(v15 + 1496) = *(_DWORD *)(v15 + 1120);
        if (i == -752) {
          break;
        }
        int v17 = *(_DWORD *)(v15 + 744);
        if (v26 >= v17)
        {
          if (v26 > v17)
          {
            uint64_t v8 = a1 + i + 752;
            goto LABEL_19;
          }
          if (v25 >= *(double *)(a1 + i + 736)) {
            goto LABEL_19;
          }
        }
        v8 -= 376;
      }
      uint64_t v8 = a1;
LABEL_19:
      uint64_t v2 = v18;
      *(unsigned char *)uint64_t v8 = v20;
      sub_10034226C(v16, (uint64_t)v21);
      sub_10034226C(v15 + 824, (uint64_t)v22);
      sub_10034226C(v15 + 888, (uint64_t)v23);
      sub_10034226C(v15 + 1000, (uint64_t)v24);
      *(double *)(v15 + 1112) = v25;
      *(_DWORD *)(v15 + 1120) = v26;
      int v11 = v19 + 1;
      if (v19 == 7) {
        return v9 + 376 == v18;
      }
    }
    uint64_t v8 = v9;
    v10 += 376;
    v9 += 376;
    if (v9 == v2) {
      return 1;
    }
  }
}

double sub_10036BD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result = sub_10036B8B0(a1, a2, a3);
  int v9 = *(_DWORD *)(a4 + 368);
  int v10 = *(_DWORD *)(a3 + 368);
  if (v9 < v10 || v9 <= v10 && (double result = *(double *)(a4 + 360), result < *(double *)(a3 + 360)))
  {
    sub_10036A21C((char *)a3, (char *)a4);
    int v11 = *(_DWORD *)(a3 + 368);
    int v12 = *(_DWORD *)(a2 + 368);
    if (v11 < v12 || v11 <= v12 && (double result = *(double *)(a3 + 360), result < *(double *)(a2 + 360)))
    {
      sub_10036A21C((char *)a2, (char *)a3);
      int v13 = *(_DWORD *)(a2 + 368);
      int v14 = *(_DWORD *)(a1 + 368);
      if (v13 < v14 || v13 <= v14 && (double result = *(double *)(a2 + 360), result < *(double *)(a1 + 360)))
      {
        sub_10036A21C((char *)a1, (char *)a2);
      }
    }
  }
  return result;
}

uint64_t sub_10036BDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, int *a7, uint64_t a8)
{
  uint64_t v13 = *(void *)(a1 + 8);
  double v14 = *a6;
  int v15 = *a7;
  sub_10034CDD4((uint64_t)v17, a8);
  uint64_t result = sub_10036C024(v13, a2, a3, a4, a5, v15, (uint64_t)v17, v14);
  *(void *)(a1 + 8) = v13 + 432;
  return result;
}

void sub_10036BE98(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10036BEA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, int *a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  unint64_t v10 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 4);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x97B425ED097B42) {
    sub_1000267C4();
  }
  uint64_t v19 = (uint64_t)(a1 + 2);
  unint64_t v20 = 0x84BDA12F684BDA13 * ((a1[2] - v9) >> 4);
  if (2 * v20 > v11) {
    unint64_t v11 = 2 * v20;
  }
  if (v20 >= 0x4BDA12F684BDA1) {
    unint64_t v21 = 0x97B425ED097B42;
  }
  else {
    unint64_t v21 = v11;
  }
  int v31 = a1 + 2;
  if (v21) {
    uint64_t v22 = (char *)sub_10036C1C0(v19, v21);
  }
  else {
    uint64_t v22 = 0;
  }
  unint64_t v27 = v22;
  unint64_t v28 = &v22[432 * v10];
  uint64_t v29 = (uint64_t)v28;
  double v30 = &v22[432 * v21];
  double v23 = *a6;
  int v24 = *a7;
  sub_10034CDD4((uint64_t)v32, a8);
  sub_10036C024((uint64_t)v28, a2, a3, a4, a5, v24, (uint64_t)v32, v23);
  uint64_t v29 = (uint64_t)(v28 + 432);
  sub_10036C148(a1, &v27);
  uint64_t v25 = a1[1];
  sub_10036C568((uint64_t)&v27);
  return v25;
}

void sub_10036C010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10036C568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10036C024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, double a8)
{
  sub_10034CDD4(a1, a2);
  sub_10034CDD4(v15 + 64, a3);
  sub_10034CF64(a1 + 128, a4);
  sub_10034CF64(a1 + 240, a5);
  *(double *)(a1 + 352) = a8;
  *(_DWORD *)(a1 + 360) = a6;
  sub_10034CDD4(a1 + 368, a7);
  return a1;
}

void sub_10036C0C8(_Unwind_Exception *a1)
{
  *uint64_t v4 = off_100853598;
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10036C148(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10036C20C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10036C1C0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x97B425ED097B43) {
    sub_1000257D8();
  }
  return operator new(432 * a2);
}

uint64_t sub_10036C20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 432;
      sub_10036C2D8(a1, v7 - 432, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 432;
      *((void *)&v16 + 1) -= 432;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10036C3E4((uint64_t)v13);
  return v11;
}

void sub_10036C2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_10036C2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10034CDD4(a2, a3);
  sub_10034CDD4(a2 + 64, a3 + 64);
  sub_10034CF64(a2 + 128, a3 + 128);
  sub_10034CF64(a2 + 240, a3 + 240);
  uint64_t v5 = *(void *)(a3 + 352);
  *(_DWORD *)(a2 + 360) = *(_DWORD *)(a3 + 360);
  *(void *)(a2 + 352) = v5;
  *(void *)&double result = sub_10034CDD4(a2 + 368, a3 + 368).n128_u64[0];
  return result;
}

void sub_10036C364(_Unwind_Exception *a1)
{
  *uint64_t v4 = off_100853598;
  *uint64_t v3 = off_100853598;
  *uint64_t v2 = off_100853598;
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10036C3E4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10036C41C((uint64_t *)a1);
  }
  return a1;
}

void sub_10036C41C(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_10036C494(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_10036C494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 32);
  if (v3 != *(void *)(a3 + 32))
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = (void *)(v3 + v4);
      v5[46] = off_100853598;
      v5[30] = off_100853598;
      uint8_t v5[16] = off_100853598;
      unsigned char v5[8] = off_100853598;
      *uint64_t v5 = off_100853598;
      *(void *)(a2 + 32) = v3 + v4 + 432;
      v4 += 432;
    }
    while (v3 + v4 != *(void *)(a3 + 32));
  }
}

uint64_t sub_10036C568(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10036C5A0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = v2 + v3;
      *(void *)(v4 - 64) = off_100853598;
      *(void *)(v4 - 192) = off_100853598;
      *(void *)(v2 + v3 - 304) = off_100853598;
      *(void *)(v2 + v3 - 368) = off_100853598;
      *(void *)(v2 + v3 - 432) = off_100853598;
      v3 -= 432;
    }
    while (v2 + v3 != a2);
    *(void *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_10036C66C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10036C6E4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10036C6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_10036C778(a1, (_OWORD *)(i + a7), (_OWORD *)(i + a3)))
    i -= 192;
  return a6;
}

double sub_10036C778(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *a2 = *a3;
  sub_10036C7E8((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
  *(void *)&double result = sub_10036C978((uint64_t)a2 + 104, (uint64_t)a3 + 104).n128_u64[0];
  return result;
}

void sub_10036C7C8(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

__n128 sub_10036C7E8(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x300000002;
  *(void *)(a1 + 24) = 0x300000002;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100862750;
  if (a1 == a2)
  {
    uint64_t v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    uint64_t v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    uint64_t v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    uint64_t v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 4)
  {
    uint64_t v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    uint64_t v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 3u)
  {
    uint64_t v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    __n128 *v12 = result;
  }
  else if (v5)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)uint64_t v6 = v9;
      uint64_t v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_10036C958(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

__n128 sub_10036C978(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x200000003;
  *(void *)(a1 + 24) = 0x200000003;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100862798;
  if (a1 == a2)
  {
    uint64_t v16 = "this != &(A)";
    int v17 = 603;
LABEL_21:
    uint64_t v18 = "cnmatrix.h";
    uint64_t v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 3)
  {
    uint64_t v16 = "this->max_num_rows_ >= num_rows";
    int v17 = 422;
LABEL_18:
    uint64_t v18 = "cnmatrixbase.h";
    uint64_t v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 3)
  {
    uint64_t v16 = "this->max_num_cols_ >= num_cols";
    int v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (_OWORD *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    uint64_t v16 = "this->max_num_rows_ >= A.num_rows_";
    int v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 2u)
  {
    uint64_t v16 = "this->max_num_cols_ >= A.num_cols_";
    int v17 = 617;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (__n128 *)((char *)v6 + 8 * v10);
    uint64_t v13 = (v7 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      long long v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    __n128 result = *(__n128 *)((char *)v11 + 8 * v10);
    __n128 *v12 = result;
  }
  else if (v5)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *(void *)uint64_t v6 = v9;
      uint64_t v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_10036CAE8(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10036CB08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = v3 - 176;
    do
    {
      *(void *)(v3 - 88) = off_100853598;
      *(void *)(v3 - 176) = off_100853598;
      v4 -= 192;
      v3 -= 192;
    }
    while (v3 != v2);
    *(void *)(a1 + 16) = v2;
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_10036CB9C(uint64_t *a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_1000267C4();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v13 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v21 = a1 + 2;
  if (v13) {
    uint64_t v14 = (char *)sub_100368184(v11, v13);
  }
  else {
    uint64_t v14 = 0;
  }
  int v17 = v14;
  uint64_t v18 = (double *)&v14[136 * v6];
  uint64_t v19 = v18;
  unint64_t v20 = &v14[136 * v13];
  sub_10036CCBC(v18, a3, a4, *a2);
  uint64_t v19 = v18 + 17;
  sub_10036810C(a1, &v17);
  uint64_t v15 = a1[1];
  sub_100368460((uint64_t)&v17);
  return v15;
}

void sub_10036CCA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100368460((uint64_t)va);
  _Unwind_Resume(a1);
}

double *sub_10036CCBC(double *a1, uint64_t a2, uint64_t a3, double a4)
{
  *a1 = a4;
  uint64_t v6 = (uint64_t)(a1 + 9);
  sub_1003682D0((uint64_t)(a1 + 1), a2);
  sub_10034CDD4(v6, a3);
  return a1;
}

void sub_10036CD0C(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10036CD2C(uint64_t *a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *a1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x155555555555555) {
    sub_1000267C4();
  }
  uint64_t v13 = (uint64_t)(a1 + 2);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 6);
  if (2 * v14 > v8) {
    unint64_t v8 = 2 * v14;
  }
  if (v14 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v15 = 0x155555555555555;
  }
  else {
    unint64_t v15 = v8;
  }
  double v23 = a1 + 2;
  if (v15) {
    uint64_t v16 = (char *)sub_10034CC50(v13, v15);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v19 = v16;
  unint64_t v20 = (double *)&v16[192 * v7];
  unint64_t v21 = v20;
  uint64_t v22 = &v16[192 * v15];
  sub_10036CE54(v20, a4, a5, *a2, *a3);
  unint64_t v21 = v20 + 24;
  sub_10036C66C(a1, &v19);
  uint64_t v17 = a1[1];
  sub_10036CB08((uint64_t)&v19);
  return v17;
}

void sub_10036CE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10036CB08((uint64_t)va);
  _Unwind_Resume(a1);
}

double *sub_10036CE54(double *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  *a1 = a4;
  a1[1] = a5;
  sub_10036C7E8((uint64_t)(a1 + 2), a2);
  sub_10036C978((uint64_t)(a1 + 13), a3);
  return a1;
}

void sub_10036CEA0(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10036CEC0(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x13B13B13B13B13BLL) {
    sub_1000267C4();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 4)) >= 0x9D89D89D89D89DLL) {
    unint64_t v6 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)sub_10036D0D0((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[208 * v3];
  uint64_t v13 = &v7[208 * v6];
  sub_10036CFE8((uint64_t)(a1 + 2), v11, a2);
  unint64_t v12 = v11 + 208;
  sub_10036D058(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10036D1B0((uint64_t)&v10);
  return v8;
}

void sub_10036CFD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10036D1B0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10036CFE8(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  long long v5 = a3[1];
  *a2 = *a3;
  a2[1] = v5;
  sub_10034CDD4((uint64_t)(a2 + 2), (uint64_t)(a3 + 2));
  *(void *)&double result = sub_10034CF64((uint64_t)(a2 + 6), (uint64_t)(a3 + 6)).n128_u64[0];
  return result;
}

void sub_10036D038(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

uint64_t sub_10036D058(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10036D11C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10036D0D0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13B13B13B13B13CLL) {
    sub_1000257D8();
  }
  return operator new(208 * a2);
}

uint64_t sub_10036D11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_10036CFE8(a1, (_OWORD *)(i + a7), (_OWORD *)(i + a3)))
    i -= 208;
  return a6;
}

uint64_t sub_10036D1B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = v3 - 176;
    do
    {
      *(void *)(v3 - 112) = off_100853598;
      *(void *)(v3 - 176) = off_100853598;
      v4 -= 208;
      v3 -= 208;
    }
    while (v3 != v2);
    *(void *)(a1 + 16) = v2;
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_10036D244()
{
  qword_1008AA990 = 0;
  qword_1008AA998 = 0;
  qword_1008AA9A0 = 0;
  uint64_t v0 = operator new(0x40uLL);
  qword_1008AA998 = (uint64_t)(v0 + 4);
  qword_1008AA9A0 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_1004C2740;
  v0[1] = unk_1004C2750;
  v0[2] = xmmword_1004C2760;
  v0[3] = unk_1004C2770;
  qword_1008AA990 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA990, (void *)&_mh_execute_header);
  qword_1008AA9B0 = 0;
  unk_1008AA9B8 = 0;
  qword_1008AA9A8 = 0;
  uint64_t v1 = operator new(0x10uLL);
  qword_1008AA9B0 = (uint64_t)(v1 + 1);
  unk_1008AA9B8 = v1 + 1;
  _OWORD *v1 = xmmword_1004C2780;
  qword_1008AA9A8 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AA9A8, (void *)&_mh_execute_header);
}

uint64_t sub_10036D31C(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  sub_100387EA4(a1 + 304);
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 864) = 0;
  *(unsigned char *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 1008) = 0;
  *(unsigned char *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(unsigned char *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 1040) = xmmword_1004C2800;
  *(void *)(a1 + 1056) = 0x3FF47AE147AE147BLL;
  *(_OWORD *)(a1 + 288) = 0u;
  return a1;
}

uint64_t sub_10036D3A0@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  unint64_t v9 = (float64x2_t *)(a3 + 408);
  uint64_t v10 = (uint64_t)&a1[19];
  sub_1003882C0((uint64_t)&a1[19], a2, (uint64_t)&v126, a4);
  sub_1003444CC((uint64_t)&a1[42], (uint64_t)&v126, (uint64_t)v124, a5);
  long long v76 = *(_OWORD *)&v124[32];
  int8x16_t v77 = *(int8x16_t *)&v124[48];
  uint64_t v11 = *(void *)&v124[64];
  if (!v127) {
    goto LABEL_17;
  }
  long long v74 = *(_OWORD *)v124;
  int v12 = v124[16];
  uint64_t result = sub_100387E9C(v10);
  if (result == 4)
  {
    if (v127)
    {
      int v71 = v12;
      float32x4_t v14 = vaddq_f32(v126, a1[18]);
      a1[18] = v14;
      HIDWORD(v15) = 0;
      *(float *)&long long v15 = (float)((float)((float)(*(float *)v131.i32 * *(float *)v131.i32)
                                     - (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[1]))
                             - (float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[2]))
                     + (float)(*(float *)&v131.i32[3] * *(float *)&v131.i32[3]);
      HIDWORD(v16) = 0;
      *((float *)&v15 + 1) = (float)((float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[3])
                                   + (float)(*(float *)v131.i32 * *(float *)&v131.i32[1]))
                           + (float)((float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[3])
                                   + (float)(*(float *)v131.i32 * *(float *)&v131.i32[1]));
      *((float *)&v15 + 2) = (float)-(float)((float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[3])
                                           - (float)(*(float *)v131.i32 * *(float *)&v131.i32[2]))
                           - (float)((float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[3])
                                   - (float)(*(float *)v131.i32 * *(float *)&v131.i32[2]));
      HIDWORD(v17) = 0;
      *(float *)&long long v17 = (float)-(float)((float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[3])
                                     - (float)(*(float *)v131.i32 * *(float *)&v131.i32[1]))
                     - (float)((float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[3])
                             - (float)(*(float *)v131.i32 * *(float *)&v131.i32[1]));
      *((float *)&v17 + 1) = (float)((float)((float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[1])
                                           - (float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[2]))
                                   + (float)(*(float *)&v131.i32[3] * *(float *)&v131.i32[3]))
                           - (float)(*(float *)v131.i32 * *(float *)v131.i32);
      *((float *)&v17 + 2) = (float)((float)(*(float *)v131.i32 * *(float *)&v131.i32[3])
                                   + (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[2]))
                           + (float)((float)(*(float *)v131.i32 * *(float *)&v131.i32[3])
                                   + (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[2]));
      *(float *)&long long v16 = (float)((float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[3])
                             + (float)(*(float *)&v131.i32[2] * *(float *)v131.i32))
                     + (float)((float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[3])
                             + (float)(*(float *)&v131.i32[2] * *(float *)v131.i32));
      *((float *)&v16 + 1) = (float)-(float)((float)(*(float *)v131.i32 * *(float *)&v131.i32[3])
                                           - (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[2]))
                           - (float)((float)(*(float *)v131.i32 * *(float *)&v131.i32[3])
                                   - (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[2]));
      *((float *)&v16 + 2) = (float)((float)((float)(*(float *)&v131.i32[3] * *(float *)&v131.i32[3])
                                           + (float)(*(float *)&v131.i32[2] * *(float *)&v131.i32[2]))
                                   - (float)(*(float *)v131.i32 * *(float *)v131.i32))
                           - (float)(*(float *)&v131.i32[1] * *(float *)&v131.i32[1]);
      v14.i32[3] = 1.0;
      *(void *)char v124 = v132;
      *(_OWORD *)&v124[16] = v15;
      *(_OWORD *)&v124[32] = v17;
      *(_OWORD *)&v124[48] = v16;
      *(float32x4_t *)&v124[64] = v14;
      *(_DWORD *)&v124[80] = 2;
      *(_WORD *)&v124[84] = 0;
      v124[88] = 0;
      v124[96] = 0;
      v125[15] = 0;
      v125[19] = 0;
      *(_DWORD *)&v125[7] = 1;
      v125[11] = 1;
      sub_1003446DC((uint64_t)&a1[42], (long long *)v124, (double *)v122, a5);
      long long v118 = *(_OWORD *)&v122[49];
      long long v117 = *(_OWORD *)&v122[33];
      long long v116 = *(_OWORD *)&v122[17];
      long long v114 = *(_OWORD *)&v122[1];
      *(_OWORD *)&v121[15] = *(_OWORD *)&v123[15];
      long long v120 = *(_OWORD *)&v122[81];
      *(_OWORD *)uint64_t v121 = *(_OWORD *)v123;
      long long v119 = *(_OWORD *)&v122[65];
      long long v110 = *(_OWORD *)&v124[49];
      long long v109 = *(_OWORD *)&v124[33];
      long long v108 = *(_OWORD *)&v124[17];
      long long v106 = *(_OWORD *)&v124[1];
      *(_OWORD *)&v113[15] = *(_OWORD *)&v125[15];
      *(_OWORD *)uint64_t v113 = *(_OWORD *)v125;
      long long v112 = *(_OWORD *)&v124[81];
      long long v111 = *(_OWORD *)&v124[65];
      if (v127)
      {
        char v18 = *(unsigned char *)(a2 + 32);
        if (v18)
        {
          char v19 = *(unsigned char *)(a2 + 48);
          if (v19)
          {
            char v20 = *(unsigned char *)(a2 + 64);
            if (v20)
            {
              if (*(unsigned char *)(a2 + 80))
              {
                if (*(unsigned char *)(a2 + 96))
                {
                  if (*(unsigned char *)(a2 + 112))
                  {
                    char v57 = v124[0];
                    char v58 = v122[0];
                    char v65 = *(unsigned char *)(a2 + 80);
                    char v67 = *(unsigned char *)(a2 + 96);
                    char v69 = *(unsigned char *)(a2 + 112);
                    uint64_t v21 = *(void *)a2;
                    char v59 = *(unsigned char *)(a2 + 8);
                    char v61 = *(unsigned char *)(a2 + 16);
                    uint64_t v22 = (_DWORD *)(a2 + 17);
                    double v23 = (_DWORD *)(a2 + 33);
                    int v24 = (_DWORD *)(a2 + 49);
                    uint64_t v25 = (_DWORD *)(a2 + 65);
                    int v26 = (_DWORD *)(a2 + 81);
                    unint64_t v27 = (_DWORD *)(a2 + 97);
                    unint64_t v28 = (_DWORD *)(a2 + 113);
                    uint64_t v29 = (_DWORD *)(a2 + 153);
                    int8x16_t v63 = v131;
                    *(_DWORD *)int v87 = *(_DWORD *)(a2 + 9);
                    *(_DWORD *)&v87[3] = *(_DWORD *)(a2 + 12);
                    *(_DWORD *)uint64_t v86 = *(_DWORD *)(a2 + 17);
                    *(_DWORD *)&v86[3] = *(_DWORD *)(a2 + 20);
                    *(_DWORD *)uint64_t v85 = *(_DWORD *)(a2 + 33);
                    *(_DWORD *)&v85[3] = *(_DWORD *)(a2 + 36);
                    *(_DWORD *)&v84[3] = *(_DWORD *)(a2 + 52);
                    *(_DWORD *)uint64_t v84 = *(_DWORD *)(a2 + 49);
                    *(_DWORD *)&v83[3] = *(_DWORD *)(a2 + 68);
                    *(_DWORD *)uint64_t v83 = *(_DWORD *)(a2 + 65);
                    *(_DWORD *)uint64_t v82 = *(_DWORD *)(a2 + 81);
                    *(_DWORD *)&v82[3] = *(_DWORD *)(a2 + 84);
                    *(_DWORD *)double v81 = *(_DWORD *)(a2 + 97);
                    *(_DWORD *)&v81[3] = *(_DWORD *)(a2 + 100);
                    *(_DWORD *)uint64_t v80 = *(_DWORD *)(a2 + 113);
                    *(_DWORD *)&v80[3] = *(_DWORD *)(a2 + 116);
                    *(_DWORD *)&v79[3] = *(_DWORD *)(a2 + 156);
                    *(_DWORD *)int v79 = *(_DWORD *)(a2 + 153);
                    if (v71)
                    {
                      double v30 = v126.f32[1];
                      *(_DWORD *)int64_t v101 = *(_DWORD *)(a2 + 9);
                      double v52 = v126.f32[2];
                      double v54 = v128;
                      *(_DWORD *)&v101[3] = *(_DWORD *)(a2 + 12);
                      double v55 = v129;
                      double v56 = v126.f32[0];
                      *(_DWORD *)uint64_t v99 = *v22;
                      double v72 = v130;
                      if (*(unsigned __int8 *)(a2 + 152) <= 1u) {
                        char v31 = 1;
                      }
                      else {
                        char v31 = *(unsigned char *)(a2 + 152);
                      }
                      *(_DWORD *)&v99[3] = *(_DWORD *)((char *)v22 + 3);
                      LODWORD(v97) = *v23;
                      *(_DWORD *)((char *)&v97 + 3) = *(_DWORD *)((char *)v23 + 3);
                      *(_DWORD *)((char *)&v95 + 3) = *(_DWORD *)((char *)v24 + 3);
                      LODWORD(v95) = *v24;
                      *(_DWORD *)((char *)&v93 + 3) = *(_DWORD *)((char *)v25 + 3);
                      LODWORD(v93) = *v25;
                      LODWORD(v91) = *v26;
                      *(_DWORD *)((char *)&v91 + 3) = *(_DWORD *)((char *)v26 + 3);
                      LODWORD(v90) = *v27;
                      *(_DWORD *)((char *)&v90 + 3) = *(_DWORD *)((char *)v27 + 3);
                      LODWORD(v89) = *v28;
                      *(_DWORD *)((char *)&v89 + 3) = *(_DWORD *)((char *)v28 + 3);
                      *(_DWORD *)((char *)&v88 + 3) = *(_DWORD *)((char *)v29 + 3);
                      LODWORD(v88) = *v29;
                      uint64_t result = sub_100387E9C(v10);
                      *(_OWORD *)(a3 + 65) = v119;
                      *(_OWORD *)(a3 + 81) = v120;
                      *(_OWORD *)(a3 + 97) = *(_OWORD *)v121;
                      *(_OWORD *)(a3 + 112) = *(_OWORD *)&v121[15];
                      *(_OWORD *)(a3 + 1) = v114;
                      *(_OWORD *)(a3 + 17) = v116;
                      *(_OWORD *)(a3 + 33) = v117;
                      *(unsigned char *)a3 = v58;
                      *(_OWORD *)(a3 + 49) = v118;
                      *(unsigned char *)(a3 + 128) = 1;
                      *(unsigned char *)(a3 + 144) = v57;
                      *(_OWORD *)(a3 + 209) = v111;
                      *(_OWORD *)(a3 + 225) = v112;
                      *(_OWORD *)(a3 + 241) = *(_OWORD *)v113;
                      *(_OWORD *)(a3 + 256) = *(_OWORD *)&v113[15];
                      *(_OWORD *)(a3 + 145) = v106;
                      *(_OWORD *)(a3 + 161) = v108;
                      *(_OWORD *)(a3 + 177) = v109;
                      *(_OWORD *)(a3 + 193) = v110;
                      *(unsigned char *)(a3 + 272) = 1;
                      *(void *)(a3 + 288) = v21;
                      *(unsigned char *)(a3 + 296) = v59;
                      *(_DWORD *)(a3 + 300) = *(_DWORD *)&v101[3];
                      *(_DWORD *)(a3 + 297) = *(_DWORD *)v101;
                      *(unsigned char *)(a3 + 304) = v61;
                      *(_DWORD *)(a3 + 308) = *(_DWORD *)&v99[3];
                      *(_DWORD *)(a3 + 305) = *(_DWORD *)v99;
                      *(double *)(a3 + 312) = *(float *)&v74;
                      *(unsigned char *)(a3 + 320) = v18;
                      *(_DWORD *)(a3 + 324) = *(_DWORD *)((char *)&v97 + 3);
                      *(_DWORD *)(a3 + 321) = v97;
                      *(double *)(a3 + 328) = *((float *)&v74 + 1);
                      *(unsigned char *)(a3 + 336) = v19;
                      *(_DWORD *)(a3 + 340) = *(_DWORD *)((char *)&v95 + 3);
                      *(_DWORD *)(a3 + 337) = v95;
                      *(double *)(a3 + 344) = *((float *)&v74 + 2);
                      *(unsigned char *)(a3 + 352) = v20;
                      *(_DWORD *)(a3 + 356) = *(_DWORD *)((char *)&v93 + 3);
                      *(_DWORD *)(a3 + 353) = v93;
                      *(double *)(a3 + 360) = *(float *)&v76;
                      *(unsigned char *)(a3 + 368) = v65;
                      *(_DWORD *)(a3 + 372) = *(_DWORD *)((char *)&v91 + 3);
                      *(_DWORD *)(a3 + 369) = v91;
                      *(double *)(a3 + 376) = *((float *)&v76 + 1);
                      *(unsigned char *)(a3 + 384) = v67;
                      *(_DWORD *)(a3 + 388) = *(_DWORD *)((char *)&v90 + 3);
                      *(_DWORD *)(a3 + 385) = v90;
                      *(double *)(a3 + 392) = *((float *)&v76 + 2);
                      *(unsigned char *)(a3 + 400) = v69;
                      *(_DWORD *)(a3 + 404) = *(_DWORD *)((char *)&v89 + 3);
                      *(_DWORD *)(a3 + 401) = v89;
                      *unint64_t v9 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 0xCuLL));
                      v9[1] = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 4uLL));
                      *(unsigned char *)(a3 + 440) = v31;
                      *(_DWORD *)(a3 + 444) = *(_DWORD *)((char *)&v88 + 3);
                      *(_DWORD *)(a3 + 441) = v88;
                      *(void *)(a3 + 448) = v21;
                      *(unsigned char *)(a3 + 456) = v59;
                      *(_DWORD *)(a3 + 460) = *(_DWORD *)&v87[3];
                      *(_DWORD *)(a3 + 457) = *(_DWORD *)v87;
                      *(unsigned char *)(a3 + 464) = v61;
                      *(_DWORD *)(a3 + 468) = *(_DWORD *)&v86[3];
                      *(_DWORD *)(a3 + 465) = *(_DWORD *)v86;
                      *(double *)(a3 + 472) = v56;
                      *(unsigned char *)(a3 + 480) = v18;
                      *(_DWORD *)(a3 + 484) = *(_DWORD *)&v85[3];
                      *(_DWORD *)(a3 + 481) = *(_DWORD *)v85;
                      *(double *)(a3 + 488) = v30;
                      *(unsigned char *)(a3 + 496) = v19;
                      *(_DWORD *)(a3 + 500) = *(_DWORD *)&v84[3];
                      *(_DWORD *)(a3 + 497) = *(_DWORD *)v84;
                      *(double *)(a3 + 504) = v52;
                      *(unsigned char *)(a3 + 512) = v20;
                      *(_DWORD *)(a3 + 516) = *(_DWORD *)&v83[3];
                      *(_DWORD *)(a3 + 513) = *(_DWORD *)v83;
                      *(double *)(a3 + 520) = v54;
                      *(unsigned char *)(a3 + 528) = v65;
                      *(_DWORD *)(a3 + 532) = *(_DWORD *)&v82[3];
                      *(_DWORD *)(a3 + 529) = *(_DWORD *)v82;
                      *(double *)(a3 + 536) = v55;
                      *(unsigned char *)(a3 + 544) = v67;
                      *(_DWORD *)(a3 + 548) = *(_DWORD *)&v81[3];
                      *(_DWORD *)(a3 + 545) = *(_DWORD *)v81;
                      *(double *)(a3 + 552) = v72;
                      *(unsigned char *)(a3 + 560) = v69;
                      *(_DWORD *)(a3 + 564) = *(_DWORD *)&v80[3];
                      *(_DWORD *)(a3 + 561) = *(_DWORD *)v80;
                      v9[10] = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 0xCuLL));
                      v9[11] = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 4uLL));
                      *(unsigned char *)(a3 + 600) = v31;
                      *(_DWORD *)(a3 + 604) = *(_DWORD *)&v79[3];
                      *(_DWORD *)(a3 + 601) = *(_DWORD *)v79;
                      *(_DWORD *)(a3 + 608) = result;
                      *(_DWORD *)(a3 + 620) = v105;
                      *(void *)(a3 + 612) = v103;
LABEL_24:
                      *(unsigned char *)(a3 + 624) = 1;
                      return result;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_26;
  }
  if (!v127)
  {
LABEL_17:
    uint64_t result = sub_100387E9C(v10);
    if (result == 1)
    {
      if (*(unsigned char *)(a2 + 80))
      {
        if (*(unsigned char *)(a2 + 96))
        {
          char v68 = *(unsigned char *)(a2 + 80);
          char v70 = *(unsigned char *)(a2 + 96);
          uint64_t v75 = v9;
          char v73 = *(unsigned char *)(a2 + 112);
          if (v73)
          {
            uint64_t v32 = *(void *)a2;
            char v64 = *(unsigned char *)(a2 + 8);
            int v33 = (_OWORD *)(a2 + 17);
            int v34 = (_DWORD *)(a2 + 81);
            __n128 v35 = (_DWORD *)(a2 + 97);
            int v36 = (_DWORD *)(a2 + 113);
            unsigned int v37 = *(unsigned __int8 *)(a2 + 152);
            __n128 v38 = (_DWORD *)(a2 + 153);
            double v39 = v128;
            double v40 = v129;
            double v41 = v130;
            double v66 = *(float *)&v131.i32[2];
            if (v37 <= 1) {
              LOBYTE(v37) = 1;
            }
            char v60 = v37;
            LODWORD(v100) = *(_DWORD *)(a2 + 9);
            *(_DWORD *)((char *)&v100 + 3) = *(_DWORD *)(a2 + 12);
            long long v42 = *(_OWORD *)(a2 + 33);
            *(_OWORD *)int v122 = *v33;
            *(_OWORD *)&v122[16] = v42;
            long long v44 = *v33;
            long long v43 = *(_OWORD *)(a2 + 33);
            *(_OWORD *)&v122[32] = *(_OWORD *)(a2 + 49);
            *(void *)&v122[47] = *(void *)(a2 + 64);
            *(_DWORD *)((char *)&v98 + 3) = *(_DWORD *)(a2 + 84);
            LODWORD(v98) = *v34;
            *(_DWORD *)((char *)&v96 + 3) = *(_DWORD *)(a2 + 100);
            LODWORD(v96) = *v35;
            *(_DWORD *)((char *)&v94 + 3) = *(_DWORD *)(a2 + 116);
            LODWORD(v94) = *v36;
            double v45 = *(float *)&v131.i32[3];
            unint64_t v62 = COERCE_UNSIGNED_INT64(*(float *)&v131.i32[3]) >> 8;
            *(_DWORD *)((char *)&v92 + 3) = *(_DWORD *)(a2 + 156);
            LODWORD(v92) = *v38;
            long long v46 = *(_OWORD *)(a2 + 49);
            *(void *)&v124[47] = *(void *)(a2 + 64);
            *(_OWORD *)&v124[16] = v43;
            *(_OWORD *)&v124[32] = v46;
            *(_OWORD *)char v124 = v44;
            *(_DWORD *)((char *)&v115 + 3) = *(_DWORD *)(a2 + 84);
            LODWORD(v115) = *v34;
            *(_DWORD *)((char *)&v107 + 3) = *(_DWORD *)(a2 + 100);
            LODWORD(v107) = *v35;
            *(_DWORD *)((char *)&v104 + 3) = *(_DWORD *)(a2 + 116);
            LODWORD(v104) = *v36;
            *(_DWORD *)((char *)&v102 + 3) = *(_DWORD *)(a2 + 156);
            int8x16_t v47 = v77;
            float64x2_t v53 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 0xCuLL));
            float64x2_t v51 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 4uLL));
            LODWORD(v102) = *v38;
            float64x2_t v78 = vcvtq_f64_f32(*(float32x2_t *)v131.i8);
            char v48 = *(unsigned char *)(a2 + 16);
            uint64_t result = sub_100387E9C(v10);
            *(unsigned char *)a3 = 0;
            *(unsigned char *)(a3 + 128) = 0;
            *(unsigned char *)(a3 + 144) = 0;
            *(unsigned char *)(a3 + 272) = 0;
            *(void *)(a3 + 288) = v32;
            *(void *)(a3 + 296) = v11;
            *(unsigned char *)(a3 + 304) = 1;
            long long v49 = *(_OWORD *)&v124[16];
            *(_OWORD *)(a3 + 305) = *(_OWORD *)v124;
            *(_OWORD *)(a3 + 321) = v49;
            *(_OWORD *)(a3 + 337) = *(_OWORD *)&v124[32];
            *(void *)(a3 + 352) = *(void *)&v124[47];
            *(double *)(a3 + 360) = *(float *)&v76;
            *(unsigned char *)(a3 + 368) = v68;
            *(_DWORD *)(a3 + 372) = *(_DWORD *)((char *)&v115 + 3);
            *(_DWORD *)(a3 + 369) = v115;
            *(double *)(a3 + 376) = *((float *)&v76 + 1);
            *(unsigned char *)(a3 + 384) = v70;
            *(_DWORD *)(a3 + 388) = *(_DWORD *)((char *)&v107 + 3);
            *(_DWORD *)(a3 + 385) = v107;
            *(double *)(a3 + 392) = *((float *)&v76 + 2);
            *(unsigned char *)(a3 + 400) = v73;
            *(_DWORD *)(a3 + 404) = *(_DWORD *)((char *)&v104 + 3);
            *(_DWORD *)(a3 + 401) = v104;
            *uint64_t v75 = v53;
            v75[1] = v51;
            *(unsigned char *)(a3 + 440) = v60;
            *(_DWORD *)(a3 + 444) = *(_DWORD *)((char *)&v102 + 3);
            *(_DWORD *)(a3 + 441) = v102;
            *(void *)(a3 + 448) = v32;
            *(unsigned char *)(a3 + 456) = v64;
            *(_DWORD *)(a3 + 460) = *(_DWORD *)((char *)&v100 + 3);
            *(_DWORD *)(a3 + 457) = v100;
            *(unsigned char *)(a3 + 464) = v48;
            *(void *)(a3 + 512) = *(void *)&v122[47];
            long long v50 = *(_OWORD *)&v122[16];
            *(_OWORD *)(a3 + 465) = *(_OWORD *)v122;
            *(_OWORD *)(a3 + 481) = v50;
            *(_OWORD *)(a3 + 497) = *(_OWORD *)&v122[32];
            *(double *)(a3 + 520) = v39;
            *(unsigned char *)(a3 + 528) = v68;
            *(_DWORD *)(a3 + 529) = v98;
            *(_DWORD *)(a3 + 532) = *(_DWORD *)((char *)&v98 + 3);
            *(double *)(a3 + 536) = v40;
            *(unsigned char *)(a3 + 544) = v70;
            *(_DWORD *)(a3 + 545) = v96;
            *(_DWORD *)(a3 + 548) = *(_DWORD *)((char *)&v96 + 3);
            *(double *)(a3 + 552) = v41;
            *(unsigned char *)(a3 + 560) = v73;
            *(_DWORD *)(a3 + 561) = v94;
            *(_DWORD *)(a3 + 564) = *(_DWORD *)((char *)&v94 + 3);
            *(unsigned char *)(a3 + 568) = LOBYTE(v45);
            HIBYTE(v75[10].f64[0]) = HIBYTE(v45);
            *(_WORD *)((char *)v75[10].f64 + 5) = HIDWORD(v45) >> 8;
            *(_DWORD *)((char *)v75[10].f64 + 1) = v62;
            *(float64x2_t *)(a3 + 576) = v78;
            *(double *)(a3 + 592) = v66;
            *(unsigned char *)(a3 + 600) = v60;
            *(_DWORD *)(a3 + 604) = *(_DWORD *)((char *)&v92 + 3);
            *(_DWORD *)(a3 + 601) = v92;
            *(_DWORD *)(a3 + 608) = result;
            goto LABEL_24;
          }
        }
      }
LABEL_26:
      sub_10000AE44();
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 624) = 0;
  return result;
}

uint64_t sub_10036DFD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void *)(a1 + 304);
  sub_100388BF4(a1 + 304, a2, (uint64_t)&v56);
  if (v61 == 2)
  {
    v6.n128_f64[0] = *(double *)&v56 - *(double *)(a1 + 1056);
    sub_100388250(v5, (uint64_t)&v48, v6);
    int v7 = v55;
    if (v55)
    {
      if (*(unsigned char *)(a1 + 128)) {
        *(float32x4_t *)(a1 + 288) = vaddq_f32(*(float32x4_t *)(a1 + 288), vsubq_f32(v52, *(float32x4_t *)(a1 + 64)));
      }
      long long v8 = *(_OWORD *)&v54[16];
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v54;
      *(_OWORD *)(a1 + 112) = v8;
      *(unsigned char *)(a1 + 128) = v55;
      long long v9 = v51;
      *(_OWORD *)(a1 + 32) = v50;
      *(_OWORD *)(a1 + 48) = v9;
      long long v10 = v53;
      *(float32x4_t *)(a1 + 64) = v52;
      *(_OWORD *)(a1 + 80) = v10;
      long long v11 = v49;
      *(_OWORD *)a1 = v48;
      *(_OWORD *)(a1 + 16) = v11;
    }
    long long v44 = v48;
    long long v45 = v49;
    long long v46 = v50;
    long long v47 = v51;
    long long v33 = v53;
    uint64_t v34 = *(void *)v54;
    int v12 = *(_DWORD *)&v54[8];
    char v13 = v54[12];
    *(_DWORD *)((char *)v43 + 15) = *(_DWORD *)&v54[28];
    float32x4_t v14 = *(float32x4_t *)(a1 + 288);
    v14.i32[3] = 1.0;
    long long v39 = v56;
    long long v40 = v57;
    long long v41 = v58;
    long long v42 = v59;
    v43[0] = *(_OWORD *)&v54[13];
    long long v31 = v61;
    uint64_t v32 = v62;
    v38[0] = *(_OWORD *)v63;
    *(_DWORD *)((char *)v38 + 15) = *(_DWORD *)&v63[15];
    if (v7)
    {
      int v12 = 0;
      float32x4_t v15 = v14;
      float32x4_t v16 = vaddq_f32(v14, vsubq_f32(v60, v52));
      char v13 = 1;
    }
    else
    {
      float32x4_t v29 = v14;
      float32x4_t v30 = v52;
      sub_100387FC8(v5, (uint64_t)v35);
      float32x4_t v16 = v29;
      if (v37)
      {
        float32x4_t v22 = *(float32x4_t *)(a1 + 288);
        v22.i32[3] = 1.0;
        float32x4_t v16 = vaddq_f32(vsubq_f32(v60, v36), v22);
      }
      float32x4_t v15 = v30;
    }
    *(void *)(a3 + 288) = 0;
    *(unsigned char *)(a3 + 296) = 0;
    *(unsigned char *)(a3 + 304) = 0;
    *(unsigned char *)(a3 + 440) = 0;
    *(void *)(a3 + 448) = 0;
    *(unsigned char *)(a3 + 456) = 0;
    *(unsigned char *)(a3 + 464) = 0;
    *(unsigned char *)(a3 + 600) = 0;
    *(unsigned char *)(a3 + 408) = 0;
    *(_OWORD *)(a3 + 312) = 0u;
    *(_OWORD *)(a3 + 328) = 0u;
    *(_OWORD *)(a3 + 344) = 0u;
    *(_OWORD *)(a3 + 360) = 0u;
    *(_OWORD *)(a3 + 376) = 0u;
    *(_OWORD *)(a3 + 392) = 0u;
    *(unsigned char *)(a3 + 568) = 0;
    *(_OWORD *)(a3 + 472) = 0u;
    *(_OWORD *)(a3 + 488) = 0u;
    *(_OWORD *)(a3 + 504) = 0u;
    *(_OWORD *)(a3 + 520) = 0u;
    *(_OWORD *)(a3 + 536) = 0u;
    *(_OWORD *)(a3 + 552) = 0u;
    long long v23 = v40;
    *(_OWORD *)a3 = v39;
    *(_OWORD *)(a3 + 16) = v23;
    long long v24 = v42;
    *(_OWORD *)(a3 + 32) = v41;
    *(_OWORD *)(a3 + 48) = v24;
    *(float32x4_t *)(a3 + 64) = v16;
    *(_OWORD *)(a3 + 80) = v31;
    *(void *)(a3 + 96) = v32;
    *(_DWORD *)(a3 + 104) = 0;
    *(unsigned char *)(a3 + 108) = 1;
    *(_OWORD *)(a3 + 109) = v38[0];
    *(_DWORD *)(a3 + 124) = *(_DWORD *)((char *)v38 + 15);
    *(unsigned char *)(a3 + 128) = 1;
    long long v25 = v47;
    *(_OWORD *)(a3 + 176) = v46;
    *(_OWORD *)(a3 + 192) = v25;
    long long v26 = v45;
    *(_OWORD *)(a3 + 144) = v44;
    *(_OWORD *)(a3 + 160) = v26;
    *(void *)(a3 + 240) = v34;
    *(float32x4_t *)(a3 + 208) = v15;
    *(_OWORD *)(a3 + 224) = v33;
    *(_DWORD *)(a3 + 248) = v12;
    *(unsigned char *)(a3 + 252) = v13;
    long long v27 = v43[0];
    *(_DWORD *)(a3 + 268) = *(_DWORD *)((char *)v43 + 15);
    *(_OWORD *)(a3 + 253) = v27;
    *(unsigned char *)(a3 + 272) = v7;
  }
  else
  {
    if (*(unsigned char *)(a1 + 128)) {
      *(unsigned char *)(a1 + 128) = 0;
    }
    float32x4_t v52 = v60;
    long long v53 = v61;
    *(void *)double v54 = v62;
    long long v48 = v56;
    long long v49 = v57;
    long long v50 = v58;
    long long v51 = v59;
    BYTE2(v44) = v63[2];
    LOWORD(v44) = *(_WORD *)v63;
    v35[0] = *(void *)&v63[8];
    *(_DWORD *)((char *)v35 + 7) = *(_DWORD *)&v63[15];
    int v17 = sub_100387E9C((uint64_t)v5);
    *(unsigned char *)(a3 + 144) = 0;
    *(unsigned char *)(a3 + 272) = 0;
    *(void *)(a3 + 288) = 0;
    *(unsigned char *)(a3 + 296) = 0;
    *(unsigned char *)(a3 + 304) = 0;
    *(unsigned char *)(a3 + 440) = 0;
    *(void *)(a3 + 448) = 0;
    *(unsigned char *)(a3 + 456) = 0;
    *(unsigned char *)(a3 + 464) = 0;
    *(unsigned char *)(a3 + 600) = 0;
    *(_OWORD *)(a3 + 312) = 0u;
    *(_OWORD *)(a3 + 328) = 0u;
    *(_OWORD *)(a3 + 344) = 0u;
    *(_OWORD *)(a3 + 360) = 0u;
    *(_OWORD *)(a3 + 376) = 0u;
    *(_OWORD *)(a3 + 392) = 0u;
    *(unsigned char *)(a3 + 408) = 0;
    *(_OWORD *)(a3 + 472) = 0u;
    *(_OWORD *)(a3 + 488) = 0u;
    *(_OWORD *)(a3 + 504) = 0u;
    *(_OWORD *)(a3 + 520) = 0u;
    *(_OWORD *)(a3 + 536) = 0u;
    *(_OWORD *)(a3 + 552) = 0u;
    *(unsigned char *)(a3 + 568) = 0;
    long long v18 = v53;
    *(float32x4_t *)(a3 + 64) = v52;
    *(_OWORD *)(a3 + 80) = v18;
    *(void *)(a3 + 96) = *(void *)v54;
    long long v19 = v49;
    *(_OWORD *)a3 = v48;
    *(_OWORD *)(a3 + 16) = v19;
    long long v20 = v51;
    *(_OWORD *)(a3 + 32) = v50;
    *(_OWORD *)(a3 + 48) = v20;
    *(_DWORD *)(a3 + 104) = 0;
    *(unsigned char *)(a3 + 108) = 1;
    __int16 v21 = v44;
    *(unsigned char *)(a3 + 111) = BYTE2(v44);
    *(_WORD *)(a3 + 109) = v21;
    *(_DWORD *)(a3 + 112) = v17;
    *(unsigned char *)(a3 + 116) = 1;
    *(_DWORD *)(a3 + 124) = *(_DWORD *)((char *)v35 + 7);
    *(void *)(a3 + 117) = v35[0];
    *(unsigned char *)(a3 + 128) = 1;
  }
  uint64_t result = sub_100387E9C((uint64_t)v5);
  *(_DWORD *)(a3 + 608) = result;
  return result;
}

__n128 sub_10036E3B4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v2;
  uint64_t v8 = *(void *)(a2 + 128);
  long long v3 = *(_OWORD *)(a2 + 48);
  _DWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v3;
  long long v4 = *(_OWORD *)(a2 + 80);
  void v7[4] = *(_OWORD *)(a2 + 64);
  void v7[5] = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  sub_100344358(a1 + 672, (double *)v7);
  return result;
}

uint64_t sub_10036E404(uint64_t result, uint64_t *a2, void *a3, double a4, double a5)
{
  uint64_t v5 = *a2;
  *(void *)__n128 result = off_100862870;
  *(void *)(result + 8) = v5;
  __n128 v6 = a2 + 1;
  uint64_t v7 = a2[1];
  *(void *)(result + 16) = v7;
  uint64_t v8 = result + 16;
  uint64_t v9 = a2[2];
  *(void *)(result + 24) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *a2 = (uint64_t)v6;
    void *v6 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)(result + 8) = v8;
  }
  *(void *)(result + 32) = *a3;
  long long v10 = a3 + 1;
  uint64_t v11 = a3[1];
  *(void *)(result + 40) = v11;
  uint64_t v12 = result + 40;
  uint64_t v13 = a3[2];
  *(void *)(result + 48) = v13;
  if (v13)
  {
    *(void *)(v11 + 16) = v12;
    *a3 = v10;
    *long long v10 = 0;
    a3[2] = 0;
  }
  else
  {
    *(void *)(result + 32) = v12;
  }
  *(double *)(result + 56) = a4;
  *(double *)(result + 64) = a5;
  return result;
}

void sub_10036E498(uint64_t a1@<X0>, uint64_t *a2@<X1>, BOOL *a3@<X8>, double a4@<D0>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    *a3 = 0;
    a3[8] = 0;
    a3[16] = 0;
    return;
  }
  uint64_t v9 = 0;
  stat __p = 0;
  char v37 = 0;
  __n128 v38 = 0;
  do
  {
    double v10 = *(float *)(v5 + 16);
    if (*(double *)(a1 + 56) <= v10 && *(double *)(a1 + 64) >= v10)
    {
      if (v9 >= v38)
      {
        uint64_t v12 = __p;
        uint64_t v13 = v9 - __p;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v15 = (char *)v38 - (char *)__p;
        if (((char *)v38 - (char *)__p) >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          int v17 = (char *)sub_100056BF0((uint64_t)&v38, v16);
          uint64_t v12 = __p;
          uint64_t v9 = v37;
          double v10 = *(float *)(v5 + 16);
        }
        else
        {
          int v17 = 0;
        }
        long long v18 = (double *)&v17[8 * v13];
        double *v18 = v10;
        uint64_t v11 = v18 + 1;
        while (v9 != v12)
        {
          uint64_t v19 = *((void *)v9-- - 1);
          *((void *)v18-- - 1) = v19;
        }
        stat __p = v18;
        __n128 v38 = (double *)&v17[8 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *uint64_t v9 = v10;
        uint64_t v11 = v9 + 1;
      }
      char v37 = v11;
      uint64_t v9 = v11;
    }
    v5 += 184;
  }
  while (v5 != v6);
  if (__p != v9)
  {
    long long v20 = (void *)(a1 + 32);
    double v21 = sub_10036E824((void *)(a1 + 32), a4);
    float32x4_t v22 = (void *)(a1 + 8);
    double v23 = sub_10036E824(v22, a4);
    if (v23 > 0.0)
    {
      double v24 = log(v21 / v23);
      long long v25 = __p;
      if (__p == v37)
      {
        double v28 = 0.0;
        double v27 = 0.0;
      }
      else
      {
        double v26 = v24;
        double v27 = 0.0;
        double v28 = 0.0;
        do
        {
          double v29 = sub_10036E824(v20, *v25);
          double v30 = sub_10036E824(v22, *v25);
          if (v30 <= 0.0)
          {
            long long v31 = qword_1008ABDE0;
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
            {
              double v32 = *v25;
              *(_DWORD *)long long buf = 134283521;
              double v40 = v32;
              _os_log_fault_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "#hist-unlock, WRTT: Range %{private}f resulted in 0 unlock probability, skipping range", buf, 0xCu);
            }
          }
          else
          {
            double v28 = v28 + log(v29 / v30);
            double v27 = v26 + v27;
          }
          ++v25;
        }
        while (v25 != v37);
      }
      __n128 v35 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218240;
        double v40 = v28;
        __int16 v41 = 2048;
        double v42 = v27;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#hist-unlock, WRTT: CLHistogramHypothesisTestUnlockEstimator result: logRatio: %f, scaledLogRatio: %f", buf, 0x16u);
      }
      BOOL v34 = v28 < v27;
      goto LABEL_41;
    }
    long long v33 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_100434A28(v33, a4);
    }
  }
  BOOL v34 = 0;
LABEL_41:
  *a3 = v34;
  a3[8] = 0;
  a3[16] = 0;
  if (__p) {
    operator delete(__p);
  }
}

void sub_10036E7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

double sub_10036E824(void *a1, double a2)
{
  long long v4 = (double *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    do
    {
      uint64_t v5 = (uint64_t *)(v3 + 8);
      if (*(double *)(v3 + 32) > a2)
      {
        uint64_t v5 = (uint64_t *)v3;
        long long v4 = (double *)v3;
      }
      uint64_t v3 = *v5;
    }
    while (*v5);
  }
  if (v4 == (double *)*a1)
  {
    uint64_t v7 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_100434AA4(v7, a2);
    }
  }
  else
  {
    uint64_t v6 = *(double **)v4;
    if (*(void *)v4)
    {
      do
      {
        long long v4 = v6;
        uint64_t v6 = (double *)*((void *)v6 + 1);
      }
      while (v6);
    }
    else
    {
      uint64_t v8 = v4;
      do
      {
        long long v4 = (double *)*((void *)v8 + 2);
        BOOL v9 = *(void *)v4 == (void)v8;
        uint64_t v8 = v4;
      }
      while (v9);
    }
  }
  return v4[5];
}

uint64_t sub_10036E8E0(uint64_t a1)
{
  *(void *)a1 = off_100862870;
  sub_10003E96C(a1 + 32, *(void **)(a1 + 40));
  sub_10003E96C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_10036E934(uint64_t a1)
{
  *(void *)a1 = off_100862870;
  sub_10003E96C(a1 + 32, *(void **)(a1 + 40));
  sub_10003E96C(a1 + 8, *(void **)(a1 + 16));

  operator delete();
}

uint64_t sub_10036E9A8(uint64_t a1)
{
  return a1;
}

void *sub_10036E9D4(uint64_t a1, double a2, double a3)
{
  __n128 result = (void *)sub_10035BEB4(a1, -5.0, 10.0, a2, a3);
  void *result = off_1008628C0;
  return result;
}

void sub_10036EA18()
{
  uint64_t v0 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#decision-proc,WRTT, Using CLHistogramHypothesisTestUnlockEstimator with phone unlock histograms", buf, 2u);
  }
  sub_10036EAB4();
}

void sub_10036EAB4()
{
}

void sub_10036EB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13)
{
}

void sub_10036EBB0()
{
}

void sub_10036EC0C()
{
}

uint64_t sub_10036EC20(uint64_t a1, double *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (double *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_10036ECA0((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_10036EC88(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10036ECA0(uint64_t **a1, double *a2, double *a3, _OWORD *a4)
{
  uint64_t v6 = sub_10036ED28(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_100026D98(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

double *sub_10036ED28(void *a1, double *a2, double **a3, double *a4, double *a5)
{
  uint64_t v5 = (double *)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (double v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      double v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = *(uint64_t **)a2;
      do
      {
        double v10 = (double *)v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        double v10 = (double *)*((void *)v13 + 2);
        BOOL v14 = *(void *)v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    double v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    unint64_t v16 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          int v17 = v16;
          double v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          unint64_t v16 = *(double **)v16;
          uint64_t v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v16 + 1;
        unint64_t v16 = (double *)*((void *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    int v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *(void *)a4 = a2;
    return a4;
  }
  uint64_t v11 = *((void *)a2 + 1);
  if (v11)
  {
    uint64_t v12 = (double *)*((void *)a2 + 1);
    do
    {
      a4 = v12;
      uint64_t v12 = *(double **)v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (double *)*((void *)v19 + 2);
      BOOL v14 = *(void *)a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    long long v20 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          int v17 = v20;
          double v21 = v20[4];
          if (v6 >= v21) {
            break;
          }
          long long v20 = *(double **)v20;
          uint64_t v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v21 >= v6) {
          break;
        }
        uint64_t v5 = v20 + 1;
        long long v20 = (double *)*((void *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_10036EEC4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10036EF1C(a1, *(double **)a2, (double *)(a2 + 8));
  return a1;
}

void sub_10036EF04(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10036EF1C(uint64_t *result, double *a2, double *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    double v6 = (double *)(result + 1);
    do
    {
      __n128 result = sub_10036ECA0(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      double v7 = (double *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          double v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (double *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_10036EFA8()
{
  memcpy(__dst, &unk_1004C2890, sizeof(__dst));
  sub_10036EC20((uint64_t)&unk_1008AA9C0, __dst, 150);
  __cxa_atexit((void (*)(void *))sub_10036E9A8, &unk_1008AA9C0, (void *)&_mh_execute_header);
  memcpy(__dst, &unk_1004C31F0, sizeof(__dst));
  sub_10036EC20((uint64_t)&unk_1008AA9D8, __dst, 150);
  return __cxa_atexit((void (*)(void *))sub_10036E9A8, &unk_1008AA9D8, (void *)&_mh_execute_header);
}

void sub_10036F130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10036F1B0(unsigned int *a1, uint64_t a2)
{
  long long v2 = (double *)(a1 + 10);
  int v3 = *((unsigned __int8 *)a1 + 56);
  if (*((unsigned char *)a1 + 56))
  {
    int v4 = *(_DWORD *)(a2 + 8);
    if ((v4 - 1) < 2)
    {
LABEL_5:
      int v3 = 0;
      double v5 = *(double *)a2;
      a1[12] = *(_DWORD *)(a2 + 8);
      *long long v2 = v5;
      goto LABEL_10;
    }
    if (v4) {
      goto LABEL_9;
    }
    if (a1[12]) {
      goto LABEL_5;
    }
    if (*(double *)a2 - *v2 <= 0.2)
    {
LABEL_9:
      int v3 = 0;
    }
    else
    {
      double v6 = *(double *)a2;
      a1[12] = *(_DWORD *)(a2 + 8);
      *long long v2 = v6;
      int v3 = 1;
    }
  }
  else
  {
    *(_OWORD *)long long v2 = *(_OWORD *)a2;
    *((unsigned char *)a1 + 56) = 1;
  }
LABEL_10:
  if (*(unsigned char *)(a2 + 64)) {
    BOOL v7 = *(_DWORD *)(a2 + 32) == 1;
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = !v7;
  if (v7)
  {
    BOOL v9 = a1 + 16;
    if (*((unsigned char *)a1 + 144))
    {
      double v10 = a1 + 22;
      if (*(double *)(a2 + 16) - *((double *)a1 + 16) <= 0.2)
      {
        double v19 = *(double *)(a2 + 40);
        double v20 = *(double *)(a2 + 48);
        *((double *)a1 + 8) = v19;
        *((double *)a1 + 9) = v20;
        double v21 = *(double *)(a2 + 56);
        *((double *)a1 + 10) = v21;
        double v22 = *((double *)a1 + 12);
        double v23 = v19 - *((double *)a1 + 11);
        double v24 = *(double *)(a2 + 24);
        *((double *)a1 + 17) = v24;
        if (sqrt((v20 - v22) * (v20 - v22) + v23 * v23 + (v21 - *((double *)a1 + 13)) * (v21 - *((double *)a1 + 13))) >= 0.5)
        {
          *double v10 = *v9;
          *((void *)a1 + 13) = *((void *)a1 + 10);
          *((double *)a1 + 15) = v24;
          *((unsigned char *)a1 + 112) = 0;
        }
        else
        {
          *((unsigned char *)a1 + 112) = v24 - *((double *)a1 + 15) >= 1.0;
        }
        goto LABEL_24;
      }
      *((void *)a1 + 14) = 0;
      *((_OWORD *)a1 + 5) = 0u;
      *((_OWORD *)a1 + 6) = 0u;
      *BOOL v9 = 0u;
      *((unsigned char *)a1 + 144) = 1;
      *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 40);
      *((void *)a1 + 10) = *(void *)(a2 + 56);
      *double v10 = *v9;
      *((void *)a1 + 13) = *((void *)a1 + 10);
    }
    else
    {
      *((void *)a1 + 14) = 0;
      *((_OWORD *)a1 + 5) = 0u;
      *((_OWORD *)a1 + 6) = 0u;
      *BOOL v9 = 0u;
      *((unsigned char *)a1 + 144) = 1;
      *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 40);
      *((void *)a1 + 10) = *(void *)(a2 + 56);
      *(_OWORD *)(a1 + 22) = *v9;
      *((void *)a1 + 13) = *((void *)a1 + 10);
    }
    uint64_t v11 = *(void *)(a2 + 24);
    *((void *)a1 + 16) = *(void *)(a2 + 16);
    *((void *)a1 + 17) = v11;
    *((void *)a1 + 15) = v11;
    goto LABEL_24;
  }
  if (*((unsigned char *)a1 + 144)) {
    *((unsigned char *)a1 + 144) = 0;
  }
LABEL_24:
  if (!*((unsigned char *)a1 + 32))
  {
    double v16 = *((double *)a1 + 5);
    int v17 = a1[12];
    if (v8)
    {
      if (!v17)
      {
LABEL_60:
        uint64_t v12 = 1;
        goto LABEL_61;
      }
    }
    else
    {
      if (!v17)
      {
        int v17 = *((unsigned char *)a1 + 112) != 0 && v16 > *((double *)a1 + 15);
        if (*((unsigned char *)a1 + 112) != 0 && v16 > *((double *)a1 + 15)) {
          double v16 = *((double *)a1 + 15);
        }
        goto LABEL_60;
      }
      if (*((unsigned char *)a1 + 112))
      {
        uint64_t v12 = 1;
        double v16 = *((double *)a1 + 15);
        int v17 = 1;
LABEL_61:
        *a1 = v12;
        a1[2] = v17;
        *((double *)a1 + 2) = v16;
        *((unsigned char *)a1 + 24) = v12;
        *((unsigned char *)a1 + 32) = 1;
        return v12;
      }
    }
    uint64_t v12 = 0;
    int v17 = 0;
    goto LABEL_61;
  }
  uint64_t v12 = *a1;
  if (v12 == 2)
  {
    uint64_t v12 = 1;
    *a1 = 1;
  }
  double v13 = *((double *)a1 + 5);
  unsigned int v14 = a1[12];
  if (v8)
  {
    if (!v14)
    {
      BOOL v15 = 0;
      goto LABEL_46;
    }
LABEL_36:
    if (v12 != 1) {
      return v12;
    }
    char v18 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[2] = 0;
LABEL_56:
    *((unsigned char *)a1 + 24) = v18;
    return v12;
  }
  if (v14)
  {
    if (!*((unsigned char *)a1 + 112)) {
      goto LABEL_36;
    }
    BOOL v15 = 1;
    double v13 = *((double *)a1 + 15);
  }
  else
  {
    BOOL v15 = *((unsigned char *)a1 + 112) != 0 && v13 > *((double *)a1 + 15);
    if (*((unsigned char *)a1 + 112) != 0 && v13 > *((double *)a1 + 15)) {
      double v13 = *((double *)a1 + 15);
    }
  }
LABEL_46:
  if (v12 != 1)
  {
    char v18 = 1;
    *a1 = 1;
    a1[2] = v15;
    *((double *)a1 + 2) = v13;
    uint64_t v12 = 1;
    goto LABEL_56;
  }
  if (v3)
  {
    char v18 = 1;
    if (v15) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = 2;
    }
    *a1 = v12;
    a1[2] = v15;
    goto LABEL_55;
  }
  uint64_t v12 = 1;
  if (v13 > *((double *)a1 + 2))
  {
    *a1 = 1;
    a1[2] = v15;
    char v18 = 1;
LABEL_55:
    *((double *)a1 + 2) = v13;
    goto LABEL_56;
  }
  return v12;
}

void sub_10036F5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036F738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036F8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036FF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_100370078((uint64_t)&a34);
  sub_100370078((uint64_t)&a50);
  sub_100370078((uint64_t)&a66);

  _Unwind_Resume(a1);
}

uint64_t sub_100370078(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100370360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

void sub_100370B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  __cxa_guard_abort(&qword_1008AAAE8);

  _Unwind_Resume(a1);
}

void *sub_100370CC0(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_1001503E8(a1, a3);
    double v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_100370D28(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100371264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100371658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003719C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_1003721E0(_Unwind_Exception *a1)
{
  *(void *)(v1 - 192) = v1 - 168;
  sub_100374320((void ***)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_100372504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100372758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100372D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1003730E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1003737FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

double sub_1003738DC(double *a1, long double *a2)
{
  double v8 = *a1;
  double v9 = a1[1];
  long double v10 = a2[1];
  long double __x = *a2;
  double v2 = logb(fmax(fabs(*a2), fabs(v10)));
  if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    int v3 = 0;
    double v4 = v10;
  }
  else
  {
    int v3 = (int)v2;
    long double __x = scalbn(__x, -(int)v2);
    double v4 = scalbn(v10, -v3);
  }
  double v11 = v4;
  long double v5 = v4 * v4 + __x * __x;
  double v6 = scalbn((v9 * v4 + v8 * __x) / v5, -v3);
  scalbn((v9 * __x - v8 * v11) / v5, -v3);
  return v6;
}

void sub_100373E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100374004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003740AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NeuralNetworkModelWithDataTransformer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

char *sub_100374128(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100002DE4(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  *((_DWORD *)__dst + 12) = *((_DWORD *)a2 + 12);
  sub_10025A21C((uint64_t)(__dst + 56), (long long *)((char *)a2 + 56));
  sub_10025A21C((uint64_t)(__dst + 88), (long long *)((char *)a2 + 88));
  return __dst;
}

void sub_1003741D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100374228(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 120;
        sub_100374298((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_100374298(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 112) && *(char *)(a2 + 111) < 0) {
    operator delete(*(void **)(a2 + 88));
  }
  if (*(unsigned char *)(a2 + 80) && *(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void sub_100374320(void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        sub_100374298((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1003743B8(void *a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    sub_1000267C4();
  }
  __n128 result = (char *)sub_10037440C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

void *sub_10037440C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    sub_1000257D8();
  }
  return operator new(120 * a2);
}

char *sub_100374454(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  long double v10 = __dst;
  double v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    double v6 = a2;
    do
    {
      sub_100374128(v4, v6);
      double v6 = (long long *)((char *)v6 + 120);
      uint64_t v4 = v11 + 120;
      v11 += 120;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1003744F8((uint64_t)v8);
  return v4;
}

void sub_1003744E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003744F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100374530((uint64_t *)a1);
  }
  return a1;
}

void sub_100374530(uint64_t *a1)
{
  double v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 120;
      sub_100374298(v5, v3);
    }
    while (v3 != v4);
  }
}

char *sub_100374584(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    sub_1003743B8(result, a4);
    __n128 result = sub_10037460C((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_1003745EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100374320(&a9);
  _Unwind_Resume(a1);
}

char *sub_10037460C(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  double v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    double v6 = a2;
    do
    {
      sub_100374128(v4, v6);
      double v6 = (long long *)((char *)v6 + 120);
      uint64_t v4 = v11 + 120;
      v11 += 120;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1003744F8((uint64_t)v8);
  return v4;
}

void sub_10037469C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1003746B0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    __n128 result = sub_100155838(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100374710(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10037472C(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    double v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 >> 60) {
      sub_1000267C4();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 4;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      char v18 = (char *)sub_10015344C(v9, v17);
    }
    else {
      char v18 = 0;
    }
    double v28 = &v18[16 * v15];
    stat __p = v18;
    BOOL v34 = v28;
    float32x4_t v36 = &v18[16 * v17];
    uint64_t v29 = 16 * a5;
    double v30 = &v28[16 * a5];
    do
    {
      long long v31 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)double v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    __n128 v35 = v30;
    uint64_t v5 = (char *)sub_10037493C((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 4;
  if (v20 >= a5)
  {
    double v21 = &__src[16 * a5];
    double v23 = *(char **)(v9 - 8);
LABEL_17:
    double v24 = &v5[16 * a5];
    long long v25 = &v23[-16 * a5];
    double v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      double v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)double v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-16 * ((v23 - v24) >> 4)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  double v21 = &__src[16 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * v20], a4 - v21);
  }
  double v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_100374904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10037493C(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  double v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      uint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  double v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_100374A14()
{
  uint64_t v3 = "AntennaMask_1_NN_V5_Model_DeviceType_201.mlmodelc/fp16_model.espresso";
  uint64_t v4 = "net";
  sub_1002A4368(&xmmword_1008AA9F0, &v3);
  uint64_t v1 = "AntennaMask_2_NN_V5_Model_DeviceType_201.mlmodelc/fp16_model.espresso";
  double v2 = "net";
  sub_1002A4368(&xmmword_1008AAA20, &v1);
  __cxa_atexit((void (*)(void *))sub_1002933D4, &xmmword_1008AA9F0, (void *)&_mh_execute_header);
  uint64_t v3 = "AntennaMask_1_NN_V5_ScalingModel_DeviceType_201";
  uint64_t v4 = "mlmodelc";
  sub_1002A4368(&xmmword_1008AAA50, &v3);
  uint64_t v1 = "AntennaMask_2_NN_V5_ScalingModel_DeviceType_201";
  double v2 = "mlmodelc";
  sub_1002A4368(&xmmword_1008AAA80, &v1);
  __cxa_atexit((void (*)(void *))sub_1002933D4, &xmmword_1008AAA50, (void *)&_mh_execute_header);
  sub_100004950(&qword_1008AAAB0, "input_1");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008AAAB0, (void *)&_mh_execute_header);
  sub_100004950(&qword_1008AAAC8, "Identity");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1008AAAC8, (void *)&_mh_execute_header);
}

void sub_100374B7C(_Unwind_Exception *exception_object)
{
  if (byte_1008AAA7F < 0) {
    sub_100435120();
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100374BC0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v3 = (unsigned char *)(a1 + 4112);
  *(void *)(a1 + 32) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_1004C3CB0;
  *(_OWORD *)(a1 + 112) = xmmword_1004C3CC0;
  *(_OWORD *)(a1 + 128) = xmmword_1004C3CD0;
  *(void *)(a1 + 144) = 0x3FD3333333333333;
  *(_WORD *)(a1 + 152) = 257;
  *(_OWORD *)(a1 + 160) = xmmword_1004C3CE0;
  *(_OWORD *)(a1 + 176) = xmmword_1004C3CF0;
  *(void *)(a1 + 192) = 0;
  uint64_t v4 = 1;
  *(unsigned char *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_1004C3D00;
  *(_OWORD *)(a1 + 224) = xmmword_1004C3D10;
  *(_OWORD *)(a1 + 240) = xmmword_1004C3D20;
  *(_OWORD *)(a1 + 256) = xmmword_1004C3D30;
  *(_OWORD *)(a1 + 272) = xmmword_1004C3D40;
  *(_OWORD *)(a1 + 288) = xmmword_1004C3D50;
  *(_OWORD *)(a1 + 304) = xmmword_1004C3D60;
  *(_OWORD *)(a1 + 320) = xmmword_1004C3D70;
  *(_WORD *)(a1 + 336) = 1;
  *(unsigned char *)(a1 + 338) = 1;
  *(void *)(a1 + 344) = 0x4024000000000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 368) = xmmword_1004C3D80;
  *(void *)(a1 + 384) = 0x403E000000000000;
  *(unsigned char *)(a1 + 392) = 1;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 416) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 480) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 448) = v7;
  *(_OWORD *)(a1 + 464) = v8;
  *(_OWORD *)(a1 + 432) = v6;
  *(unsigned char *)(a1 + 488) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  *(unsigned char *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 704) = 0;
  *(unsigned char *)(a1 + 832) = 0;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 976) = 0;
  uint64_t v9 = (void *)(a1 + 992);
  unsigned int v10 = 5489;
  uint64_t v11 = 249;
  *(_DWORD *)(a1 + 992) = 5489;
  do
  {
    int v12 = 1812433253 * (v10 ^ (v10 >> 30));
    unsigned int v10 = v12 + v4;
    *(_DWORD *)(a1 + 4 * v11) = v11 + v12 - 248;
    ++v4;
    ++v11;
  }
  while (v11 != 872);
  *(unsigned char *)(a1 + 3512) = 0;
  *(unsigned char *)(a1 + 3520) = 0;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(unsigned char *)(a1 + 3504) = 0;
  *(void *)(a1 + 3528) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 3536) = 0;
  *(unsigned char *)(a1 + 3544) = 0;
  *(unsigned char *)(a1 + 3552) = 0;
  *(unsigned char *)(a1 + 3560) = 0;
  *(unsigned char *)(a1 + 3568) = 0;
  *(unsigned char *)(a1 + 3576) = 0;
  *(unsigned char *)(a1 + 3584) = 0;
  *(void *)(a1 + 3592) = 0;
  *(_OWORD *)(a1 + 3600) = xmmword_1004C3D90;
  *(_DWORD *)(a1 + 3616) = 2;
  *(unsigned char *)(a1 + 3624) = 0;
  *(unsigned char *)(a1 + 3632) = 0;
  *(_WORD *)(a1 + 3688) = 0;
  *(_OWORD *)(a1 + 3640) = 0u;
  *(_OWORD *)(a1 + 3656) = 0u;
  *(_OWORD *)(a1 + 3672) = 0u;
  *(void *)(a1 + 3696) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 3704) = 0;
  *(unsigned char *)(a1 + 3712) = 0;
  *(unsigned char *)(a1 + 3720) = 0;
  *(unsigned char *)(a1 + 3728) = 0;
  *(unsigned char *)(a1 + 3736) = 0;
  *(unsigned char *)(a1 + 3744) = 0;
  *(unsigned char *)(a1 + 3752) = 0;
  *(unsigned char *)(a1 + 3912) = 0;
  *(unsigned char *)(a1 + 3920) = 0;
  *(unsigned char *)(a1 + 3928) = 0;
  *(unsigned char *)(a1 + 3936) = 0;
  *(unsigned char *)(a1 + 3944) = 0;
  *(_OWORD *)(a1 + 3952) = xmmword_1004C3DA0;
  *(unsigned char *)(a1 + 4080) = 0;
  *(unsigned char *)(a1 + 4088) = 0;
  *(_OWORD *)(a1 + 3968) = 0u;
  *(_OWORD *)(a1 + 3984) = 0u;
  *(_OWORD *)(a1 + 4000) = 0u;
  *(_OWORD *)(a1 + 4016) = 0u;
  *(_OWORD *)(a1 + 4032) = 0u;
  *(_OWORD *)(a1 + 4048) = 0u;
  *(_OWORD *)(a1 + 4057) = 0u;
  *(void *)(a1 + 4096) = 0x4014000000000000;
  *(_DWORD *)(a1 + 4104) = 0;
  *uint64_t v3 = 0;
  v3[8] = 0;
  v3[16] = 0;
  v3[96] = 0;
  v3[104] = 0;
  v3[184] = 0;
  v3[248] = 0;
  v3[280] = 0;
  *(unsigned char *)(a1 + 4352) = 0;
  *(_OWORD *)(a1 + 4304) = 0u;
  *(_OWORD *)(a1 + 4320) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_OWORD *)(a1 + 4400) = xmmword_1004C2510;
  v3[312] = 0;
  v3[320] = 0;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(_OWORD *)(a1 + 4456) = 0u;
  *(_OWORD *)(a1 + 4472) = 0u;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 376) = *(void *)(a2 + 48);
  unsigned int v13 = 1;
  uint64_t v14 = 1;
  LODWORD(__src[0]) = 1;
  do
  {
    unsigned int v13 = v14 + 1812433253 * (v13 ^ (v13 >> 30));
    *((_DWORD *)__src + v14++) = v13;
  }
  while (v14 != 624);
  __src[312] = 0;
  memcpy(v9, __src, 0x9C8uLL);
  sub_100374F00(a1);
  return a1;
}

uint64_t sub_100374F00(uint64_t a1)
{
  double v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v20[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,particle filter reinitialized", (uint8_t *)v20, 2u);
  }
  if (*(unsigned char *)(a1 + 664)) {
    *(unsigned char *)(a1 + 664) = 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  if (*(unsigned char *)(a1 + 688)) {
    *(unsigned char *)(a1 + 688) = 0;
  }
  if (*(unsigned char *)(a1 + 832)) {
    *(unsigned char *)(a1 + 832) = 0;
  }
  *(void *)(a1 + 3496) = 0;
  *(unsigned char *)(a1 + 3504) = 0;
  if (*(unsigned char *)(a1 + 3520)) {
    *(unsigned char *)(a1 + 3520) = 0;
  }
  *(void *)(a1 + 3528) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 392) = 1;
  *(_DWORD *)(a1 + 3616) = 2;
  if (*(unsigned char *)(a1 + 3632)) {
    *(unsigned char *)(a1 + 3632) = 0;
  }
  uint64_t v4 = *(void ***)(a1 + 3648);
  long long v5 = *(void ***)(a1 + 3656);
  if (v5 == v4)
  {
    long long v8 = (void *)(a1 + 3680);
    long long v5 = *(void ***)(a1 + 3648);
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 3672);
    long long v7 = &v4[v6 / 0x49];
    long long v8 = (void *)(a1 + 3680);
    unint64_t v9 = (unint64_t)v4[(*(void *)(a1 + 3680) + v6) / 0x49] + 56 * ((*(void *)(a1 + 3680) + v6) % 0x49);
    if ((char *)*v7 + 56 * (v6 % 0x49) != (void *)v9)
    {
      unsigned int v10 = (void (***)(void))((char *)*v7 + 56 * (v6 % 0x49));
      do
      {
        uint64_t v11 = *v10;
        v10 += 7;
        (*v11)();
        if ((char *)v10 - (unsigned char *)*v7 == 4088)
        {
          int v12 = (void (***)(void))v7[1];
          ++v7;
          unsigned int v10 = v12;
        }
      }
      while (v10 != (void (***)(void))v9);
      long long v5 = *(void ***)(a1 + 3656);
      uint64_t v4 = *(void ***)(a1 + 3648);
    }
  }
  void *v8 = 0;
  unint64_t v13 = (char *)v5 - (char *)v4;
  if (v13 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v4 = (void **)(*(void *)(a1 + 3648) + 8);
      *(void *)(a1 + 3648) = v4;
      unint64_t v13 = *(void *)(a1 + 3656) - (void)v4;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    uint64_t v14 = 36;
  }
  else
  {
    if (v13 >> 3 != 2) {
      goto LABEL_32;
    }
    uint64_t v14 = 73;
  }
  *(void *)(a1 + 3672) = v14;
LABEL_32:
  *(_WORD *)(a1 + 3688) = 0;
  if (*(unsigned char *)(a1 + 3728)) {
    *(unsigned char *)(a1 + 3728) = 0;
  }
  if (*(unsigned char *)(a1 + 3744)) {
    *(unsigned char *)(a1 + 3744) = 0;
  }
  if (*(unsigned char *)(a1 + 3928)) {
    *(unsigned char *)(a1 + 3928) = 0;
  }
  if (*(unsigned char *)(a1 + 3944)) {
    *(unsigned char *)(a1 + 3944) = 0;
  }
  if (*(unsigned char *)(a1 + 4392)) {
    *(unsigned char *)(a1 + 4392) = 0;
  }
  uint64_t v15 = *(void ***)(a1 + 3984);
  uint64_t v16 = *(void *)(a1 + 3992);
  *(void *)(a1 + 4016) = 0;
  unint64_t v17 = v16 - (void)v15;
  if (v17 >= 0x11)
  {
    do
    {
      operator delete(*v15);
      uint64_t v15 = (void **)(*(void *)(a1 + 3984) + 8);
      *(void *)(a1 + 3984) = v15;
      unint64_t v17 = *(void *)(a1 + 3992) - (void)v15;
    }
    while (v17 > 0x10);
  }
  if (v17 >> 3 == 1)
  {
    uint64_t v18 = 25;
  }
  else
  {
    if (v17 >> 3 != 2) {
      goto LABEL_49;
    }
    uint64_t v18 = 51;
  }
  *(void *)(a1 + 4008) = v18;
LABEL_49:
  *(unsigned char *)(a1 + 4352) = 0;
  *(_OWORD *)(a1 + 3600) = xmmword_1004C3D90;
  *(unsigned char *)(a1 + 3584) = 0;
  memset(v20, 0, sizeof(v20));
  sub_10037B334(a1 + 4440, (uint64_t)v20);
  uint64_t result = sub_10003AC1C(v20);
  if (*(unsigned char *)(a1 + 48)) {
    *(unsigned char *)(a1 + 48) = 0;
  }
  return result;
}

void sub_100375204(uint64_t a1, double a2, double a3, double a4)
{
  if (!*(unsigned char *)(a1 + 3688) && (!*(unsigned char *)(a1 + 3712) || a4 - *(double *)(a1 + 3704) > 0.5))
  {
    uint64_t v81 = 0x100000002;
    long long v80 = xmmword_1004C1E90;
    int v79 = off_100862110;
    uint64_t v82 = &v83;
    sub_1003411F0(&v79, 2, 1);
    sub_100341240((uint64_t)&v79, 0.0);
    *(double *)sub_1003416AC((uint64_t)&v79, 1u) = a2;
    *(double *)sub_1003416AC((uint64_t)&v79, 0) = a3;
    sub_100375A08((void *)(a1 + 3640), (uint64_t)&v79);
    *(double *)(a1 + 3704) = a4;
    *(unsigned char *)(a1 + 3712) = 1;
    unint64_t v8 = *(void *)(a1 + 3680);
    if ((double)v8 + (double)v8 > 100.0)
    {
      sub_100375AC0((int64x2_t *)(a1 + 3640));
      unint64_t v8 = *(void *)(a1 + 3680);
    }
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    unint64_t v78 = 0;
    sub_10034C6DC(&v76, v8);
    uint64_t v73 = 0x100000002;
    long long v72 = xmmword_1004C1E90;
    int v71 = off_100862110;
    long long v74 = &v75;
    uint64_t v9 = *(void *)(a1 + 3648);
    if (*(void *)(a1 + 3656) != v9)
    {
      unint64_t v10 = *(void *)(a1 + 3672);
      uint64_t v11 = *(void *)(v9 + 8 * (v10 / 0x49)) + 56 * (v10 % 0x49);
      unint64_t v12 = *(void *)(v9 + 8 * ((*(void *)(a1 + 3680) + v10) / 0x49)) + 56 * ((*(void *)(a1 + 3680) + v10) % 0x49);
      if (v11 != v12)
      {
        unint64_t v13 = (void *)(v9 + 8 * (v10 / 0x49));
        do
        {
          double v14 = sub_1002A43C0(v11, 0);
          *(double *)sub_1003416AC((uint64_t)&v71, 0) = v14;
          double v15 = sub_1002A43C0(v11, 1u);
          *(double *)sub_1003416AC((uint64_t)&v71, 1u) = v15;
          unint64_t v16 = v77;
          if (v77 >= v78)
          {
            uint64_t v17 = sub_1003523A8(&v76, (uint64_t)&v71);
          }
          else
          {
            sub_10035214C(v77, (uint64_t)&v71);
            uint64_t v17 = v16 + 56;
          }
          unint64_t v77 = v17;
          v11 += 56;
          if (v11 - *v13 == 4088)
          {
            uint64_t v18 = v13[1];
            ++v13;
            uint64_t v11 = v18;
          }
        }
        while (v11 != v12);
      }
    }
    uint64_t v68 = 0x100000002;
    long long v67 = xmmword_1004C1E90;
    double v66 = off_100862110;
    char v69 = &v70;
    sub_1003411F0(&v66, 2, 1);
    sub_100341240((uint64_t)&v66, 0.0);
    uint64_t v19 = *(void *)(a1 + 3648);
    if (*(void *)(a1 + 3656) != v19)
    {
      unint64_t v20 = *(void *)(a1 + 3672);
      uint64_t v21 = *(void *)(v19 + 8 * (v20 / 0x49)) + 56 * (v20 % 0x49);
      unint64_t v22 = *(void *)(v19 + 8 * ((*(void *)(a1 + 3680) + v20) / 0x49))
          + 56 * ((*(void *)(a1 + 3680) + v20) % 0x49);
      if (v21 != v22)
      {
        double v23 = (void *)(v19 + 8 * (v20 / 0x49));
        do
        {
          uint64_t v63 = 0x100000002;
          long long v61 = off_100862110;
          long long v62 = xmmword_1004C1E90;
          char v64 = v65;
          sub_100342718((uint64_t)&v66, v21, (uint64_t)&v61);
          sub_10034226C((uint64_t)&v66, (uint64_t)&v61);
          v21 += 56;
          if (v21 - *v23 == 4088)
          {
            uint64_t v24 = v23[1];
            ++v23;
            uint64_t v21 = v24;
          }
        }
        while (v21 != v22);
      }
    }
    double v25 = (double)*(unint64_t *)(a1 + 3680);
    uint64_t v63 = 0x100000002;
    long long v62 = xmmword_1004C1E90;
    long long v61 = off_100862110;
    char v64 = v65;
    sub_100351D20((uint64_t)&v66, (uint64_t)&v61, 1.0 / v25);
    sub_10034226C((uint64_t)&v66, (uint64_t)&v61);
    uint64_t v26 = v76;
    if (v77 != v76)
    {
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      do
      {
        uint64_t v63 = 0x100000002;
        long long v61 = off_100862110;
        long long v62 = xmmword_1004C1E90;
        char v64 = v65;
        sub_1003418A0(v26 + v27, (uint64_t)&v66, (uint64_t)&v61);
        sub_10034226C(v76 + v27, (uint64_t)&v61);
        ++v28;
        uint64_t v26 = v76;
        v27 += 56;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v77 - v76) >> 3) > v28);
    }
    uint64_t v63 = 0x200000002;
    long long v62 = xmmword_1004C1EB0;
    long long v61 = off_1008621A0;
    char v64 = v65;
    sub_1003411F0(&v61, 2, 2);
    sub_100341240((uint64_t)&v61, 0.0);
    uint64_t v29 = v76;
    for (unint64_t i = v77; v29 != i; v29 += 56)
    {
      sub_1003526A4((uint64_t)v50, *(_DWORD *)(v29 + 12), *(_DWORD *)(v29 + 8));
      sub_1003416E8(v29, v50);
      uint64_t v53 = 0x200000002;
      long long v52 = xmmword_1004C1EB0;
      long long v51 = off_1008621A0;
      double v54 = v55;
      sub_1003419A0(v29, (uint64_t)v50, (uint64_t)&v51);
      uint64_t v58 = 0x200000002;
      long long v57 = xmmword_1004C1EB0;
      long long v56 = off_1008621A0;
      long long v59 = v60;
      sub_100342718((uint64_t)&v61, (uint64_t)&v51, (uint64_t)&v56);
      sub_10034226C((uint64_t)&v61, (uint64_t)&v56);
    }
    uint64_t v58 = 0x200000002;
    long long v57 = xmmword_1004C1EB0;
    long long v56 = off_1008621A0;
    long long v59 = v60;
    uint64_t v53 = 0x200000002;
    long long v52 = xmmword_1004C1EB0;
    long long v51 = off_1008621A0;
    double v54 = v55;
    sub_10034C7FC((uint64_t)&v61, (uint64_t)&v56, (uint64_t)&v51);
    sub_10035257C((uint64_t)v50, DWORD1(v57), v57);
    sub_1003416E8((uint64_t)&v56, v50);
    uint64_t v31 = v76;
    unint64_t v32 = v77;
    if (v76 == v77)
    {
      double v40 = 0.0;
      double v41 = 0.0;
    }
    else
    {
      double v33 = 0.0;
      double v34 = 0.0;
      double v35 = 0.0;
      double v36 = 0.0;
      do
      {
        uint64_t v47 = 0x100000002;
        long long v45 = off_100862110;
        long long v46 = xmmword_1004C1E90;
        long long v48 = &v49;
        sub_1003419A0((uint64_t)v50, v31, (uint64_t)&v45);
        double v37 = sub_1002A43C0((uint64_t)&v45, 0);
        double v38 = sub_1002A43C0((uint64_t)&v45, 1u);
        if (v37 < v36) {
          double v39 = v37;
        }
        else {
          double v39 = v36;
        }
        if (v37 > v35) {
          double v35 = v37;
        }
        else {
          double v36 = v39;
        }
        if (v38 <= v33)
        {
          if (v38 < v34) {
            double v34 = v38;
          }
        }
        else
        {
          double v33 = v38;
        }
        v31 += 56;
      }
      while (v31 != v32);
      double v40 = v35 - v36;
      double v41 = v33 - v34;
    }
    if (v41 >= v40) {
      double v42 = v40;
    }
    else {
      double v42 = v41;
    }
    double v43 = *(double *)(a1 + 3696);
    if (v42 >= v43)
    {
      char v44 = 0;
      *(unsigned char *)(a1 + 3688) = 1;
    }
    else
    {
      if (v40 < v41) {
        double v40 = v41;
      }
      if (v40 < v43) {
        goto LABEL_51;
      }
      char v44 = 1;
    }
    *(unsigned char *)(a1 + 3689) = v44;
LABEL_51:
    long long v61 = (uint64_t (**)())&v76;
    sub_100351F88((void ***)&v61);
  }
}

void sub_100375990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  a48 = (void **)(v48 - 208);
  sub_100351F88(&a48);
  _Unwind_Resume(a1);
}

void sub_100375A08(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 73 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    sub_10037B5A0(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  }
  sub_10035214C(v8, a2);
  ++a1[5];
}

uint64_t sub_100375AC0(int64x2_t *a1)
{
  (**(void (***)(void))(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x49uLL)) + 56 * (a1[2].i64[0] % 0x49uLL)))();
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1004B59B0);

  return sub_10037B8B8((uint64_t)a1, 1);
}

void sub_100375B78(uint64_t a1, const void *a2)
{
  memcpy(__dst, a2, 0x180uLL);
  if (!*(unsigned char *)(a1 + 832)) {
    sub_10000AE44();
  }
  float32x4_t v3 = *(float32x4_t *)(a1 + 784);
  void v10[4] = *(float32x4_t *)(a1 + 768);
  void v10[5] = v3;
  float32x4_t v4 = *(float32x4_t *)(a1 + 816);
  v10[6] = *(float32x4_t *)(a1 + 800);
  v10[7] = v4;
  float32x4_t v5 = *(float32x4_t *)(a1 + 720);
  v10[0] = *(float32x4_t *)(a1 + 704);
  v10[1] = v5;
  float32x4_t v6 = *(float32x4_t *)(a1 + 752);
  void v10[2] = *(float32x4_t *)(a1 + 736);
  v10[3] = v6;
  sub_100375C48((uint64_t)__dst, v10, (uint64_t)v8);
  BYTE8(v9) = 1;
  *(void *)&long long v9 = 0x4034000000000000;
  _DWORD v7[2] = v8[2];
  v7[3] = v8[3];
  v7[0] = v8[0];
  v7[1] = v8[1];
  void v7[4] = v9;
  sub_100375E60(a1, (double *)v7);
}

void sub_100375C48(uint64_t a1@<X1>, float32x4_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2->i64[0];
  float32x4_t v29 = a2[1];
  float32x4_t v30 = a2[2];
  float32x4_t v27 = a2[4];
  float32x4_t v28 = a2[3];
  __int32 v7 = a2[5].i32[0];
  __int8 v8 = a2[5].i8[4];
  __int8 v9 = a2[5].i8[5];
  *(double *)&long long v10 = sub_100344D00((float32x4_t)xmmword_1004C3FF0);
  uint64_t v11 = 0;
  v31[0] = v10;
  v31[1] = v12;
  v31[2] = v13;
  v31[3] = v14;
  do
  {
    *(float32x4_t *)((char *)&v32 + v11 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(v31[v11])), v30, *(float32x2_t *)&v31[v11], 1), v28, (float32x4_t)v31[v11], 2), v27, (float32x4_t)v31[v11], 3);
    ++v11;
  }
  while (v11 != 4);
  float32x4_t v15 = v32;
  float32x4_t v16 = v33;
  float32x4_t v17 = v34;
  float32x4_t v18 = v35;
  v32.i64[0] = v6;
  float32x4_t v33 = v15;
  float32x4_t v34 = v16;
  float32x4_t v35 = v17;
  float32x4_t v36 = v18;
  __int32 v37 = v7;
  __int8 v38 = v8;
  __int8 v39 = v9;
  char v40 = 0;
  char v41 = 0;
  char v42 = 0;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  if (!*(unsigned char *)(a1 + 208)) {
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a1 + 192)) {
    goto LABEL_7;
  }
  double v19 = *(double *)(a1 + 200);
  double v20 = *(float *)(a1 + 24);
  v46.columns[0] = (simd_float2)sub_100340A70(&v32);
  simd_float2x2 v21 = __invert_f2(v46);
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(double *)a3 = v20;
  if (!*(unsigned char *)(a1 + 192)) {
LABEL_7:
  }
    sub_10000AE44();
  __double2 v22 = __sincos_stret(v19 * 3.14159265 / 180.0);
  float v23 = v22.__sinval * v20;
  float v24 = v22.__cosval * v20;
  float32x2_t v25 = vmla_n_f32(vmul_n_f32((float32x2_t)v21.columns[0], v24), (float32x2_t)v21.columns[1], v23);
  *(void *)(a3 + 8) = *(void *)(a1 + 16);
  float32x4_t v26 = a2[4];
  *(double *)(a3 + 32) = COERCE_FLOAT(a2[4].i64[1]);
  *(float64x2_t *)(a3 + 16) = vcvtq_f64_f32(*(float32x2_t *)v26.f32);
  *(double *)(a3 + 48) = (float)(atan2f(v25.f32[0], v25.f32[1]) * 180.0) / 3.14159265;
  *(unsigned char *)(a3 + 56) = 1;
  *(void *)(a3 + 64) = *(void *)(a1 + 320);
  *(unsigned char *)(a3 + 72) = *(unsigned char *)(a1 + 328);
}

void sub_100375E60(uint64_t a1, double *a2)
{
  sub_10037C2B8(__p, *(void *)(a1 + 32));
  sub_1003797C8(a1, (__n128 *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4352) = 0;
  double v4 = *(double *)(a1 + 176);
  v79[0] = 0.0;
  v79[1] = v4;
  char v80 = 0;
  *(_OWORD *)unint64_t v77 = *(_OWORD *)(a1 + 136);
  char v78 = 0;
  long long v75 = xmmword_1004C2510;
  char v76 = 0;
  if (*((unsigned char *)a2 + 72))
  {
    *((double *)&v75 + 1) = a2[8] * 3.14159265 / 180.0;
    *(unsigned char *)(a1 + 4352) = 1;
  }
  double v5 = *a2;
  if (*a2 >= 10.0)
  {
    if (v5 >= 20.0)
    {
      double v7 = 0.65;
      if (v5 >= 30.0)
      {
        if (v5 >= 40.0)
        {
          if (v5 >= 50.0)
          {
            double v57 = 7.64;
            double v6 = 9.58;
            double v7 = 1.08;
          }
          else
          {
            double v57 = 2.36;
            double v6 = 2.91;
            double v7 = 0.85;
          }
        }
        else
        {
          double v57 = 2.32;
          double v6 = 2.64;
        }
      }
      else
      {
        double v57 = 1.13;
        double v6 = 1.41;
      }
    }
    else
    {
      double v57 = 0.646;
      double v6 = 0.76;
      double v7 = 0.43;
    }
  }
  else
  {
    double v57 = 0.48;
    double v6 = 0.57;
    double v7 = 0.3;
  }
  long double v8 = pow(v7 * (v5 - v57) / v6 + 1.0, -1.0 / v7);
  double v56 = exp(-v8);
  if (*(uint64_t *)(a1 + 32) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    double __y = -v7;
    double v54 = a2;
    double v52 = v6;
    double v53 = v7;
    do
    {
      double v11 = (double)sub_100166A18(a1 + 992);
      unsigned int v12 = sub_100166A18(a1 + 992);
      long double v13 = log(v56 * (((v11 + (double)v12 * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0) / 6.28318531));
      double v14 = pow(-v13, __y);
      if (*((unsigned char *)a2 + 56))
      {
        double v15 = a2[6] * 3.14159265 / 180.0;
        double v16 = sub_10037B918((uint64_t)&v75, a1 + 992, (double *)&v75) + v15;
      }
      else
      {
        double v17 = (double)sub_100166A18(a1 + 992);
        double v16 = (v17 + (double)sub_100166A18(a1 + 992) * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0;
      }
      double v18 = v57 + v6 * (v14 + -1.0) / v7;
      if (v18 >= *a2) {
        double v18 = *a2;
      }
      double v19 = *a2 - v18;
      double v20 = sub_10037B918((uint64_t)v79, a1 + 992, v79);
      if (fabs(v20) > v19)
      {
        if (v19 <= 10.0) {
          double v21 = v19;
        }
        else {
          double v21 = 10.0;
        }
        double v22 = (double)sub_100166A18(a1 + 992);
        double v20 = -(v21
              - (v21 + v21) * ((v22 + (double)sub_100166A18(a1 + 992) * 4294967300.0) * 5.42101086e-20));
      }
      double v23 = 0.0;
      long double v24 = 0.0;
      if (v19 != 0.0) {
        long double v24 = asin(v20 / v19);
      }
      double v63 = a2[2];
      __double2 v25 = __sincos_stret(v16);
      double v26 = cos(v24);
      double v59 = a2[3];
      double v60 = a2[4];
      uint64_t v58 = *(void *)(a1 + 32);
      int v27 = *(_DWORD *)(a1 + 3616);
      double v28 = 0.5;
      if (v27 != 1) {
        double v28 = 0.0;
      }
      if (v27) {
        double v29 = v28;
      }
      else {
        double v29 = 0.9;
      }
      double v30 = (double)sub_100166A18(a1 + 992);
      if ((v30 + (double)sub_100166A18(a1 + 992) * 4294967300.0) * 5.42101086e-20 + 0.0 <= v29)
      {
        int v33 = 0;
      }
      else
      {
        double v31 = *(double *)(a1 + 208);
        double v32 = (double)sub_100166A18(a1 + 992);
        double v23 = v31
            + ((v32 + (double)sub_100166A18(a1 + 992) * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0)
            / 6.28318
            * *(double *)(a1 + 216);
        int v33 = 1;
      }
      double v34 = sub_10037B918((uint64_t)v77, a1 + 992, v77);
      unsigned int v35 = sub_100166A18(a1 + 992);
      unsigned int v36 = sub_100166A18(a1 + 992);
      unsigned int v37 = sub_100166A18(a1 + 992);
      unsigned int v38 = sub_100166A18(a1 + 992);
      double v39 = sub_10037B918((uint64_t)v77, a1 + 992, v77);
      unsigned int v40 = sub_100166A18(a1 + 992);
      unsigned int v41 = sub_100166A18(a1 + 992);
      if (!*(unsigned char *)(a1 + 24)) {
        sub_10000AE44();
      }
      double v62 = v60 + v25.__sinval * v19 * v26;
      double v61 = v20 + v59;
      __double2 v42 = __sincos_stret(((double)v40 + (double)v41 * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0);
      long double v43 = exp(v39);
      long double v44 = exp(v34);
      uint64_t v45 = *(void *)a1 + v9;
      *(double *)uint64_t v45 = v63 + v25.__cosval * v19 * v26;
      *(double *)(v45 + 8) = v61;
      *(double *)(v45 + 16) = v62;
      *(double *)(v45 + 24) = v23 * v42.__cosval;
      *(double *)(v45 + 32) = v23 * v42.__sinval;
      *(double *)(v45 + 40) = v23;
      *(double *)(v45 + 48) = ((double)v35 + (double)v36 * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0;
      *(double *)(v45 + 56) = ((double)v37 + (double)v38 * 4294967300.0) * 5.42101086e-20 * 6.28318 + 0.0;
      *(long double *)(v45 + 64) = v44;
      *(long double *)(v45 + 72) = v43;
      *(_DWORD *)(v45 + 80) = v33;
      *(double *)(v45 + 88) = 1.0 / (double)v58;
      ++v10;
      v9 += 96;
      a2 = v54;
      double v6 = v52;
      double v7 = v53;
    }
    while (*(void *)(a1 + 32) > v10);
    double v5 = *v54;
  }
  sub_100378128(a1, (uint64_t)__p, v5, a2[2], a2[3], a2[4]);
  int v46 = *(unsigned __int8 *)(a1 + 664);
  long long v47 = v73;
  *(_OWORD *)(a1 + 616) = v72;
  *(_OWORD *)(a1 + 632) = v47;
  *(_OWORD *)(a1 + 648) = v74;
  long long v48 = v69;
  *(_OWORD *)(a1 + 552) = v68;
  *(_OWORD *)(a1 + 568) = v48;
  long long v49 = v71;
  *(_OWORD *)(a1 + 584) = v70;
  *(_OWORD *)(a1 + 600) = v49;
  long long v50 = v65;
  *(_OWORD *)(a1 + 488) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 504) = v50;
  long long v51 = v67;
  *(_OWORD *)(a1 + 520) = v66;
  *(_OWORD *)(a1 + 536) = v51;
  if (!v46) {
    *(unsigned char *)(a1 + 664) = 1;
  }
}

void sub_100376510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10037652C(uint64_t a1, void *__src)
{
  double v4 = (unsigned __int8 *)(a1 + 4208);
  if (*(unsigned char *)(a1 + 4296)
    && *(unsigned char *)(a1 + 4272)
    && *(unsigned char *)(a1 + 664)
    && (!*(unsigned char *)(a1 + 4088) || *(double *)(a1 + 560) <= *(double *)(a1 + 296)))
  {
    long long v5 = *(_OWORD *)(a1 + 4264);
    v15[2] = *(_OWORD *)(a1 + 4248);
    v15[3] = v5;
    v15[4] = *(_OWORD *)(a1 + 4280);
    long long v6 = *(_OWORD *)(a1 + 4232);
    v15[0] = *(_OWORD *)(a1 + 4216);
    v15[1] = v6;
    sub_100375E60(a1, (double *)v15);
    v4[144] = 1;
  }
  if (*((unsigned char *)__src + 208) && *((unsigned char *)__src + 328))
  {
    if (*(unsigned char *)(a1 + 832))
    {
      memcpy(__dst, __src, 0x180uLL);
      float32x4_t v7 = *(float32x4_t *)(a1 + 784);
      v16[4] = *(float32x4_t *)(a1 + 768);
      void v16[5] = v7;
      float32x4_t v8 = *(float32x4_t *)(a1 + 816);
      v16[6] = *(float32x4_t *)(a1 + 800);
      v16[7] = v8;
      float32x4_t v9 = *(float32x4_t *)(a1 + 720);
      v16[0] = *(float32x4_t *)(a1 + 704);
      v16[1] = v9;
      float32x4_t v10 = *(float32x4_t *)(a1 + 752);
      void v16[2] = *(float32x4_t *)(a1 + 736);
      v16[3] = v10;
      sub_100375C48((uint64_t)__dst, v16, (uint64_t)v14);
      int v11 = *v4;
      long long v12 = v14[0];
      *(_OWORD *)(a1 + 4144) = v14[1];
      long long v13 = v14[3];
      *(_OWORD *)(a1 + 4160) = v14[2];
      *(_OWORD *)(a1 + 4176) = v13;
      *(_OWORD *)(a1 + 4192) = v14[4];
      *(_OWORD *)(a1 + 4128) = v12;
      if (!v11) {
        *double v4 = 1;
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
  {
    sub_100435160();
  }
}

void sub_1003766AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 192) = 0;
  *(unsigned char *)(a2 + 200) = 0;
  *(unsigned char *)(a2 + 208) = 0;
  *(unsigned char *)(a2 + 216) = 0;
  *(unsigned char *)(a2 + 224) = 0;
  *(_DWORD *)(a2 + 232) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(unsigned char *)(a2 + 248) = 0;
  *(unsigned char *)(a2 + 256) = 0;
  *(unsigned char *)(a2 + 272) = 0;
  *(unsigned char *)(a2 + 288) = 0;
  *(unsigned char *)(a2 + 304) = 0;
  *(unsigned char *)(a2 + 320) = 0;
  *(unsigned char *)(a2 + 328) = 0;
  *(unsigned char *)(a2 + 336) = 0;
  *(unsigned char *)(a2 + 344) = 0;
  *(_WORD *)(a2 + 352) = 0;
  *(unsigned char *)(a2 + 356) = 0;
  *(unsigned char *)(a2 + 360) = 0;
  *(unsigned char *)(a2 + 364) = 0;
  *(unsigned char *)(a2 + 368) = 0;
  *(unsigned char *)(a2 + 372) = 0;
  *(unsigned char *)(a2 + 376) = 0;
  *(_WORD *)(a2 + 380) = 0;
  if (!*(unsigned char *)(a1 + 664) || !*(unsigned char *)(a1 + 832)) {
    return;
  }
  *(_DWORD *)(a2 + 364) = 5;
  *(unsigned char *)(a2 + 368) = 1;
  if (*(unsigned char *)(a1 + 3728))
  {
    double v4 = *(double *)(a1 + 3720);
    if (*(unsigned char *)(a1 + 688) && v4 - *(double *)(a1 + 680) > *(double *)(a1 + 344) + 1.38)
    {
      long long v5 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,PF reset due to timeout calculated from current time during getFilterSolution", buf, 2u);
      }
      sub_100374F00(a1);
      return;
    }
    double v6 = *(double *)(a1 + 584);
    if (*(unsigned char *)(a1 + 3944))
    {
      double v7 = atan2((v4 - *(double *)(a1 + 3936)) * 0.65, *(long double *)(a1 + 560)) * 180.0 / 3.14159265;
      double v8 = sqrt(v7 * v7 + v6 * v6);
      float32x4_t v9 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134218496;
        *(double *)&uint8_t buf[4] = v8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&buf[14] = v6;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = fabs(v7);
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#sa_algo_particlefilter,total arrow unc: %f, estimator arrow unc: %f, arrow unc from gap between current time and last motion update: %f", buf, 0x20u);
      }
    }
    else
    {
      double v8 = *(double *)(a1 + 584);
    }
    *(double *)(a2 + 320) = v8;
    *(unsigned char *)(a2 + 328) = 1;
    double v10 = *(double *)(a1 + 288);
    if (*(unsigned char *)(a1 + 4088)) {
      double v10 = v10 + *(double *)(a1 + 4096);
    }
    *(unsigned char *)(a1 + 4088) = v8 <= v10;
    if (v8 <= v10)
    {
      if (!*(unsigned char *)(a1 + 664)) {
        goto LABEL_54;
      }
      if (*(double *)(a1 + 560) > *(double *)(a1 + 296))
      {
        if (!*(unsigned char *)(a1 + 832)) {
          goto LABEL_54;
        }
        float32x4_t v42 = *(float32x4_t *)(a1 + 768);
        double v12 = *(double *)(a1 + 488);
        double v11 = *(double *)(a1 + 496);
        *(long double *)(a2 + 200) = atan2(v11 - v42.f32[2], v12 - v42.f32[0]) * 180.0 / 3.14159265;
        *(unsigned char *)(a2 + 208) = 1;
        float64x2_t v43 = (float64x2_t)*(unint64_t *)&v12;
        double v44 = v11;
        uint64_t v13 = *(void *)(a1 + 704);
        float32x4_t v40 = *(float32x4_t *)(a1 + 736);
        float32x4_t v41 = *(float32x4_t *)(a1 + 720);
        float32x4_t v39 = *(float32x4_t *)(a1 + 752);
        int v14 = *(_DWORD *)(a1 + 784);
        char v15 = *(unsigned char *)(a1 + 788);
        char v16 = *(unsigned char *)(a1 + 789);
        *(double *)&long long v17 = sub_100344D00((float32x4_t)xmmword_1004C3FF0);
        uint64_t v18 = 0;
        long long v45 = v17;
        long long v46 = v19;
        long long v47 = v20;
        long long v48 = v21;
        do
        {
          *(float32x4_t *)&buf[v18] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v41, COERCE_FLOAT(*(long long *)((char *)&v45 + v18))), v40, *(float32x2_t *)((char *)&v45 + v18), 1), v39, *(float32x4_t *)((char *)&v45 + v18), 2), v42, *(float32x4_t *)((char *)&v45 + v18), 3);
          v18 += 16;
        }
        while (v18 != 64);
        long long v22 = *(_OWORD *)buf;
        long long v23 = *(_OWORD *)&buf[16];
        long long v24 = v50;
        long long v25 = v51;
        *(void *)long long buf = v13;
        *(_OWORD *)&uint8_t buf[16] = v22;
        long long v50 = v23;
        long long v51 = v24;
        long long v52 = v25;
        int v53 = v14;
        char v54 = v15;
        char v55 = v16;
        char v56 = 0;
        char v57 = 0;
        char v58 = 0;
        char v59 = 0;
        char v60 = 0;
        char v61 = 0;
        long long v45 = 0uLL;
        LODWORD(v46) = 0;
        sub_10033EF20(&v43, (float32x4_t *)buf, (uint64_t)&v45);
        *(double *)(a2 + 200) = (float)(*((float *)&v45 + 1) * 180.0) / 3.14159265;
        *(unsigned char *)(a2 + 208) = 1;
      }
    }
    if (*(unsigned char *)(a1 + 832))
    {
      *(double *)&uint64_t v26 = COERCE_DOUBLE(sub_100376C48(a1, (uint64_t *)(a1 + 704)));
      if (v27)
      {
        double v28 = *(double *)&v26;
      }
      else
      {
        if (!*(unsigned char *)(a1 + 664)) {
          goto LABEL_54;
        }
        double v28 = *(double *)(a1 + 560);
      }
      if (*(unsigned char *)(a1 + 832) && *(unsigned char *)(a1 + 664))
      {
        double v29 = *(double *)(a1 + 616);
        if (*(unsigned char *)(a2 + 208))
        {
          *(_DWORD *)a2 = 1;
        }
        else if (*(unsigned char *)(a1 + 3689))
        {
          *(unsigned char *)(a2 + 5) = 1;
        }
        else if (!*(unsigned char *)(a1 + 3688))
        {
          *(unsigned char *)(a2 + 4) = 1;
        }
        uint64_t v30 = *(void *)(a1 + 704);
        float v31 = v28;
        double v32 = sqrt(v29);
        double v33 = *(float *)(a1 + 772);
        double v34 = *(double *)(a1 + 656) - v33;
        if (v34 > 10.0) {
          double v34 = 10.0;
        }
        if (*(double *)(a1 + 592) >= v34 || *(_DWORD *)(a1 + 3616) == 2) {
          goto LABEL_50;
        }
        double v35 = *(double *)(a1 + 648);
        if (v35 <= 0.95)
        {
          if (v35 >= 0.05) {
            goto LABEL_50;
          }
          *(_DWORD *)(a2 + 232) = 1;
          *(double *)(a2 + 240) = *(double *)(a1 + 504) - v33;
        }
        else
        {
          double v36 = *(double *)(a1 + 504) - v33;
          if (v36 <= 2.5)
          {
            if (v36 >= -2.5)
            {
              *(_DWORD *)(a2 + 232) = 4;
LABEL_50:
              int v38 = *(unsigned __int8 *)(a2 + 192);
              *(void *)(a2 + 8) = 0;
              *(void *)(a2 + 16) = v30;
              *(float *)(a2 + 24) = v31;
              *(_DWORD *)(a2 + 28) = 1;
              *(unsigned char *)(a2 + 56) = 0;
              *(void *)(a2 + 32) = 0;
              *(void *)(a2 + 40) = 0;
              *(unsigned char *)(a2 + 60) = 0;
              *(unsigned char *)(a2 + 64) = 0;
              *(unsigned char *)(a2 + 68) = 0;
              *(void *)(a2 + 72) = 0;
              *(void *)(a2 + 80) = 0;
              *(_WORD *)(a2 + 88) = 0;
              *(void *)(a2 + 96) = 0;
              *(void *)(a2 + 104) = 0;
              *(double *)(a2 + 112) = v32;
              *(unsigned char *)(a2 + 136) = 0;
              *(void *)(a2 + 120) = 1;
              *(void *)(a2 + 128) = 0;
              *(unsigned char *)(a2 + 160) = 0;
              *(void *)(a2 + 176) = 0;
              *(void *)(a2 + 184) = 0;
              *(void *)(a2 + 168) = 0;
              if (!v38) {
                *(unsigned char *)(a2 + 192) = 1;
              }
              return;
            }
            int v37 = 3;
          }
          else
          {
            int v37 = 2;
          }
          *(_DWORD *)(a2 + 232) = v37;
          *(double *)(a2 + 240) = v36;
        }
        *(unsigned char *)(a2 + 248) = 1;
        goto LABEL_50;
      }
    }
LABEL_54:
    sub_10000AE44();
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_1004351A0();
  }
}

uint64_t sub_100376C48(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    BOOL v2 = !byte_1008AAB38 || byte_1008AAB28 == 0;
    if (v2 || *(double *)a2 - *(double *)&qword_1008AAB20 > dbl_1004C1D10[*(unsigned char *)(a1 + 4432) == 0])
    {
      if (!*(unsigned char *)(a1 + 832)) {
        sub_10000AE44();
      }
      float32x4_t v3 = *(double **)a1;
      double v4 = *(double **)(a1 + 8);
      if (*(double **)a1 == v4)
      {
        double v5 = 0.0;
      }
      else
      {
        double v5 = 0.0;
        do
        {
          double v5 = v5
             + sqrt((v3[1] - *(float *)(a1 + 772)) * (v3[1] - *(float *)(a1 + 772))+ (*v3 - *(float *)(a1 + 768)) * (*v3 - *(float *)(a1 + 768))+ (v3[2] - *(float *)(a1 + 776)) * (v3[2] - *(float *)(a1 + 776)))* v3[11];
          v3 += 12;
        }
        while (v3 != v4);
      }
      qword_1008AAB30 = *(void *)&v5;
      byte_1008AAB38 = 1;
      qword_1008AAB20 = *a2;
      byte_1008AAB28 = 1;
    }
  }
  return qword_1008AAB30;
}

uint64_t sub_100376D4C(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 4104);
  *(_DWORD *)(a1 + 4104) = *((_DWORD *)a2 + 20);
  uint64_t v4 = a2[11];
  *(unsigned char *)(a1 + 4120) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 4112) = v4;
  int v5 = *((_DWORD *)a2 + 20);
  if (v3 != v5)
  {
    if (v5 == 2)
    {
      double v6 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *a2;
        int v18 = 134217984;
        uint64_t v19 = v9;
        double v8 = "#sa_algo_particlefilter,VIO Tracking State changed to Normal at %f s";
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v18, 0xCu);
      }
    }
    else
    {
      if (v5 != 1)
      {
        if (v5) {
          return 0;
        }
        double v6 = qword_1008ABDE0;
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_12;
        }
        uint64_t v7 = *a2;
        int v18 = 134217984;
        uint64_t v19 = v7;
        double v8 = "#sa_algo_particlefilter,VIO Tracking State changed to Not Available at %f s";
        goto LABEL_11;
      }
      double v6 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *a2;
        int v18 = 134217984;
        uint64_t v19 = v10;
        double v8 = "#sa_algo_particlefilter,VIO Tracking State changed to Limited at %f s";
        goto LABEL_11;
      }
    }
LABEL_12:
    int v3 = *((_DWORD *)a2 + 20);
  }
  if (v3 != 2) {
    return 0;
  }
  if (*((unsigned char *)a2 + 84))
  {
    double v11 = qword_1008ABDE0;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v12) {
      return result;
    }
    uint64_t v14 = *a2;
    if (*((unsigned char *)a2 + 85)) {
      char v15 = "YES";
    }
    else {
      char v15 = "NO";
    }
    int v18 = 134218498;
    uint64_t v19 = v14;
    __int16 v20 = 2080;
    long long v21 = "YES";
    __int16 v22 = 2080;
    long long v23 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,VIO reported relocalization event at %f s, MAJOR: %s, MINOR: %s - resetting", (uint8_t *)&v18, 0x20u);
    return 0;
  }
  if (*((unsigned char *)a2 + 85))
  {
    char v16 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *a2;
      int v18 = 134217984;
      uint64_t v19 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,VIO reported MINOR relocalization event at %f s", (uint8_t *)&v18, 0xCu);
    }
  }
  return 1;
}

void sub_100376FC8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (!*(unsigned char *)(a1 + 24) || !*(unsigned char *)(a1 + 153))
  {
    *(double *)(a1 + 3736) = a4;
    *(unsigned char *)(a1 + 3744) = 1;
    return;
  }
  uint64_t v10 = (unsigned char *)(a1 + 4392);
  if (*(unsigned char *)(a1 + 4392)) {
    *uint64_t v10 = 0;
  }
  double v11 = *(void ***)(a1 + 4032);
  uint64_t v12 = *(void *)(a1 + 4040);
  *(void *)(a1 + 4064) = 0;
  unint64_t v13 = v12 - (void)v11;
  if (v13 >= 0x11)
  {
    do
    {
      operator delete(*v11);
      double v11 = (void **)(*(void *)(a1 + 4032) + 8);
      *(void *)(a1 + 4032) = v11;
      unint64_t v13 = *(void *)(a1 + 4040) - (void)v11;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    uint64_t v14 = 64;
    goto LABEL_12;
  }
  if (v13 >> 3 == 2)
  {
    uint64_t v14 = 128;
LABEL_12:
    *(void *)(a1 + 4056) = v14;
  }
  if (*(_DWORD *)(a1 + 3616) == 2)
  {
    int v15 = 1;
    *(_DWORD *)(a1 + 3972) = 1;
  }
  else
  {
    int v15 = 0;
  }
  *(_DWORD *)(a1 + 3968) = v15;
  char v16 = qword_1008ABDE0;
  double v17 = a3 / a5;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134219008;
    *(double *)&uint8_t buf[4] = a5;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = a2;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(double *)&unsigned char buf[24] = a3;
    *(_WORD *)char v27 = 2048;
    *(double *)&_DWORD v27[2] = a2 / a5;
    *(_WORD *)&v27[10] = 2048;
    *(double *)&v27[12] = a3 / a5;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,ingesting peer kinematic data: deltaT: %f, delta Vh1: %f, delta Vh2: %f, accel H1: %f, accel H2: %f ", buf, 0x34u);
  }
  double v18 = *(double *)(a1 + 232);
  v24[0] = 0.0;
  v24[1] = v18;
  char v25 = 0;
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10000AE44();
  }
  double v19 = *(double *)a1;
  uint64_t v20 = *(void *)(a1 + 8);
  if (*(void *)a1 != v20)
  {
    while (*(_DWORD *)(a1 + 3616) != 2)
    {
      if (!*(_DWORD *)(*(void *)&v19 + 80))
      {
        double v21 = **(double **)&v19;
        **(double **)&double v19 = v21 + sub_10037B918((uint64_t)v24, a1 + 992, v24);
        double v22 = *(double *)(*(void *)&v19 + 16);
        *(double *)(*(void *)&v19 + 16) = v22 + sub_10037B918((uint64_t)v24, a1 + 992, v24);
        goto LABEL_27;
      }
      if (*(unsigned char *)(a1 + 3928))
      {
        sub_100377474((double *)a1, *(uint64_t *)&v19, (uint64_t)buf, a4 - *(double *)(a1 + 3920));
        goto LABEL_25;
      }
LABEL_27:
      *(void *)&v19 += 96;
      if (*(void *)&v19 == v20) {
        goto LABEL_28;
      }
    }
    sub_1003772F4((double *)a1, *(uint64_t *)&v19, (uint64_t)buf, a5, a2 / a5, v17);
LABEL_25:
    *(_OWORD *)(*(void *)&v19 + 32) = *(_OWORD *)v27;
    *(_OWORD *)(*(void *)&v19 + 48) = *(_OWORD *)&v27[16];
    *(_OWORD *)(*(void *)&v19 + 64) = v28;
    *(_OWORD *)(*(void *)&v19 + 80) = v29;
    **(_OWORD **)&double v19 = *(_OWORD *)buf;
    *(_OWORD *)(*(void *)&v19 + 16) = *(_OWORD *)&buf[16];
    goto LABEL_27;
  }
LABEL_28:
  long long v23 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,peer kinematic data ingested", buf, 2u);
  }
  *(double *)(a1 + 3920) = a4;
  *(unsigned char *)(a1 + 3928) = 1;
  *(double *)(a1 + 3936) = a4;
  *(unsigned char *)(a1 + 3944) = 1;
  *(double *)(a1 + 3736) = a4;
  *(unsigned char *)(a1 + 3744) = 1;
  if (*v10) {
    *uint64_t v10 = 0;
  }
}

double sub_1003772F4@<D0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  double v12 = sqrt(a4 / 0.1);
  v29[1] = a1[31];
  v27[1] = v12 * a1[33];
  long long v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v13;
  long long v14 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v14;
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v15;
  *(void *)&long long v13 = *(void *)(a2 + 16);
  double v16 = *(double *)a2 + a4 * *(double *)(a2 + 24);
  v29[0] = 0.0;
  char v30 = 0;
  v27[0] = 0.0;
  char v28 = 0;
  *(double *)a3 = v16;
  *(double *)(a3 + 16) = *(double *)&v13 + a4 * *(double *)(a2 + 32);
  uint64_t v17 = (uint64_t)(a1 + 124);
  double v18 = sub_10037B918((uint64_t)v29, (uint64_t)(a1 + 124), v29) + a5;
  double v19 = sub_10037B918((uint64_t)v29, v17, v29) + a6;
  __double2 v20 = __sincos_stret(*(double *)(a2 + 56));
  double v21 = *(double *)(a2 + 24) + a4 * (v20.__cosval * v19 - v20.__sinval * v18);
  double v22 = *(double *)(a2 + 32) + a4 * (v18 * v20.__cosval + v20.__sinval * v19);
  *(double *)(a3 + 24) = v21;
  *(double *)(a3 + 32) = v22;
  double v23 = sqrt(v22 * v22 + v21 * v21);
  if (v23 >= a1[32])
  {
    *(double *)(a3 + 24) = v21 / v23;
    *(double *)(a3 + 32) = v22 / v23;
  }
  *(double *)(a3 + 56) = sub_10037B918((uint64_t)v27, v17, v27) + *(double *)(a3 + 56);
  double v24 = v12 * a1[13];
  v31[0] = 0.0;
  v31[1] = v24;
  char v32 = 0;
  double v25 = *(double *)(a3 + 8);
  double result = v25 + sub_10037B918((uint64_t)v31, v17, v31);
  *(double *)(a3 + 8) = result;
  return result;
}

uint64_t sub_100377474@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v8 = a1[30];
  v27[0] = 0.0;
  v27[1] = v8;
  char v28 = 0;
  double v9 = a1[33];
  v25[0] = 0.0;
  v25[1] = v9;
  char v26 = 0;
  uint64_t v24 = 0x200000000;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v11;
  long long v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v12;
  double v13 = *(double *)a2;
  double v14 = *(double *)(a2 + 40) * a4;
  __double2 v15 = __sincos_stret(*(double *)(a2 + 48));
  *(double *)a3 = v13 + v14 * v15.__cosval;
  *(double *)(a3 + 16) = *(double *)(a2 + 16) + v14 * v15.__sinval;
  double v16 = sqrt(a4 / 0.1) * a1[13];
  v29[0] = 0.0;
  v29[1] = v16;
  char v30 = 0;
  double v17 = *(double *)(a3 + 8);
  *(double *)(a3 + 8) = v17 + sub_10037B918((uint64_t)v29, (uint64_t)(a1 + 124), v29);
  double v18 = sub_10037B918((uint64_t)v27, (uint64_t)(a1 + 124), v27);
  double v19 = sub_10037B918((uint64_t)v25, (uint64_t)(a1 + 124), v25) + *(double *)(a2 + 48);
  *(double *)(a3 + 40) = v18 + *(double *)(a2 + 40);
  *(double *)(a3 + 48) = v19;
  double v20 = (double)sub_100166A18((uint64_t)(a1 + 124));
  uint64_t result = sub_100166A18((uint64_t)(a1 + 124));
  double v22 = (v20 + (double)result * 4294967300.0) * 5.42101086e-20;
  double v23 = 0.0;
  if (v22 + 0.0 < a1[34])
  {
    uint64_t result = sub_1001816DC((uint64_t)&v24, (uint64_t)(a1 + 124), &v24);
    if (result <= 2) {
      double v23 = dbl_1004C3FD0[(int)result];
    }
    *(double *)(a3 + 48) = v23 + *(double *)(a2 + 48);
  }
  return result;
}

void sub_100377618(uint64_t a1, long long *a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004351E0();
  }
  sub_100388020((int64x2_t *)(a1 + 4440), a2);
}

double sub_10037767C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v4 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100435214((void *)a2, v4);
    }
    if (!*(unsigned char *)(a2 + 152)) {
      goto LABEL_8;
    }
    int8x16_t v5 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 120)), *(float64x2_t *)(a2 + 136));
    *(double *)&long long v6 = sub_100344D00((float32x4_t)vextq_s8(v5, v5, 4uLL));
    *(_OWORD *)(a1 + 720) = v6;
    *(_OWORD *)(a1 + 736) = v7;
    *(_OWORD *)(a1 + 752) = v8;
    *(_DWORD *)(a1 + 816) = 1;
    *(unsigned char *)(a1 + 820) = 1;
    *(_DWORD *)(a1 + 808) = 1;
    *(unsigned char *)(a1 + 812) = 1;
    if (!*(unsigned char *)(a2 + 16)) {
LABEL_8:
    }
      sub_10000AE44();
    double result = *(double *)(a2 + 8);
    *(double *)(a1 + 704) = result;
  }
  return result;
}

void sub_10037772C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24) && *(unsigned char *)(a2 + 80) && *(unsigned char *)(a2 + 96) && *(unsigned char *)(a2 + 112))
  {
    uint64_t v4 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a2 + 120);
      uint64_t v19 = *(void *)(a2 + 128);
      uint64_t v20 = *(void *)(a2 + 136);
      uint64_t v21 = *(void *)(a2 + 144);
      *(_DWORD *)double v22 = 134218752;
      *(void *)&int v22[4] = v18;
      *(_WORD *)&v22[12] = 2048;
      *(void *)&v22[14] = v19;
      __int16 v23 = 2048;
      uint64_t v24 = v20;
      __int16 v25 = 2048;
      uint64_t v26 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#sa_algo_particlefilter,ingesting delayed spliced finder deltav IO data: quatw: %f, quatx: %f, quaty: %f, quatz: %f", v22, 0x2Au);
      if (!*(unsigned char *)(a2 + 80) || !*(unsigned char *)(a2 + 112)) {
        goto LABEL_21;
      }
    }
    double v5 = *(double *)(a2 + 72);
    double v6 = *(double *)(a2 + 104);
    long long v7 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_1004352B0(v7, v5, v6);
    }
    uint64_t v8 = *(void *)(a1 + 248);
    *(void *)double v22 = 0;
    *(void *)&v22[8] = v8;
    LOBYTE(v24) = 0;
    if (!*(unsigned char *)(a1 + 24)) {
LABEL_21:
    }
      sub_10000AE44();
    double v9 = *(double **)(a1 + 8);
    if (*(double **)a1 != v9)
    {
      double v10 = v5 / 0.1;
      long long v11 = (double *)(*(void *)a1 + 32);
      double v12 = v6 / 0.1;
      do
      {
        if (*(unsigned char *)(a1 + 80) && !*(unsigned char *)(a1 + 88))
        {
          double v13 = *(double **)(a1 + 56);
          *(v11 - 1) = *(v11 - 1) - *v13;
          *long long v11 = *v11 - v13[2];
        }
        double v14 = v11 - 4;
        double v15 = *(v11 - 2);
        *(v11 - 4) = *(v11 - 4) + *(v11 - 1) * 0.1;
        *(v11 - 2) = v15 + *v11 * 0.1;
        double v16 = v10 + sub_10037B918((uint64_t)v22, a1 + 992, (double *)v22);
        double v17 = *v11 + (v12 + sub_10037B918((uint64_t)v22, a1 + 992, (double *)v22)) * -0.1;
        *(v11 - 1) = *(v11 - 1) + v16 * -0.1;
        *long long v11 = v17;
        v11 += 12;
      }
      while (v14 + 12 != v9);
    }
    if (*(unsigned char *)(a1 + 80))
    {
      if (!*(unsigned char *)(a1 + 88)) {
        *(unsigned char *)(a1 + 88) = 1;
      }
    }
  }
}

void sub_100377980(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 128))
  {
    sub_100377C08(a1, *(double *)a2);
    if (!*(unsigned char *)(a2 + 128)) {
      goto LABEL_32;
    }
    sub_100377F28(a1, (float *)a2);
    if (*(unsigned char *)(a2 + 116) && !*(_DWORD *)(a2 + 112) && (v4 & 1) == 0)
    {
      sub_100374F00(a1);
      return;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100435480();
      }
      *(void *)(a1 + 40) = *(void *)a2;
      *(unsigned char *)(a1 + 48) = 1;
      if (*(unsigned char *)(a1 + 832) && os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_10043540C(a1);
      }
    }
  }
  char v5 = *(unsigned char *)(a2 + 272);
  if (v5)
  {
    uint64_t v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_1004353C0(v6, (unsigned char *)(a2 + 272));
    }
    sub_100377618(a1, (long long *)(a2 + 144));
    char v5 = *(unsigned char *)(a2 + 272) != 0;
  }
  if (!*(unsigned char *)(a2 + 128) && (v5 & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 48))
    {
LABEL_27:
      if (*(unsigned char *)(a1 + 832))
      {
        long long v8 = *(_OWORD *)(a2 + 400);
        v19[6] = *(_OWORD *)(a2 + 384);
        v19[7] = v8;
        long long v9 = *(_OWORD *)(a2 + 432);
        v19[8] = *(_OWORD *)(a2 + 416);
        v19[9] = v9;
        long long v10 = *(_OWORD *)(a2 + 336);
        _OWORD v19[2] = *(_OWORD *)(a2 + 320);
        v19[3] = v10;
        long long v11 = *(_OWORD *)(a2 + 368);
        v19[4] = *(_OWORD *)(a2 + 352);
        v19[5] = v11;
        long long v12 = *(_OWORD *)(a2 + 304);
        v19[0] = *(_OWORD *)(a2 + 288);
        v19[1] = v12;
        sub_10037767C(a1, (uint64_t)v19);
        long long v13 = *(_OWORD *)(a2 + 560);
        v18[6] = *(_OWORD *)(a2 + 544);
        v18[7] = v13;
        long long v14 = *(_OWORD *)(a2 + 592);
        v18[8] = *(_OWORD *)(a2 + 576);
        v18[9] = v14;
        long long v15 = *(_OWORD *)(a2 + 496);
        v18[2] = *(_OWORD *)(a2 + 480);
        v18[3] = v15;
        long long v16 = *(_OWORD *)(a2 + 528);
        int v18[4] = *(_OWORD *)(a2 + 512);
        v18[5] = v16;
        long long v17 = *(_OWORD *)(a2 + 464);
        v18[0] = *(_OWORD *)(a2 + 448);
        v18[1] = v17;
        sub_10037772C(a1, (uint64_t)v18);
        if (*(unsigned char *)(a1 + 832))
        {
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
            sub_10043534C(a1);
          }
        }
      }
      return;
    }
    if (*(unsigned char *)(a1 + 3728))
    {
      if (*(double *)(a1 + 3720) - *(double *)(a1 + 40) > 7.0)
      {
        long long v7 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,reinitializing PF due to finder delta V timeout", buf, 2u);
        }
        sub_100374F00(a1);
      }
      goto LABEL_27;
    }
LABEL_32:
    sub_10000AE44();
  }
}

void sub_100377C08(uint64_t a1, double a2)
{
  if (!*(unsigned char *)(a1 + 3728) || *(double *)(a1 + 3720) < a2)
  {
    *(double *)(a1 + 3720) = a2;
    *(unsigned char *)(a1 + 3728) = 1;
    uint64_t v4 = *(void *)(a1 + 4016);
    if (v4)
    {
      unint64_t v5 = *(void *)(a1 + 4008);
      uint64_t v6 = *(void *)(*(void *)(a1 + 3984) + 8 * (v5 / 0x33));
      double v7 = *(double *)(v6 + 80 * (v5 % 0x33) + 8);
      if (a2 - v7 > 1.38)
      {
        long long v8 = (uint64_t *)(v6 + 80 * (v5 % 0x33));
        double v9 = *(double *)v8;
        double v10 = *((double *)v8 + 2);
        double v11 = *((double *)v8 + 3);
        double v12 = *((double *)v8 + 4);
        int v13 = *((_DWORD *)v8 + 10);
        long long v14 = *(_OWORD *)((char *)v8 + 60);
        long long v27 = *(_OWORD *)((char *)v8 + 44);
        long long v28 = v14;
        int v29 = *((_DWORD *)v8 + 19);
        *(void *)(a1 + 4016) = v4 - 1;
        *(void *)(a1 + 4008) = v5 + 1;
        sub_10015F274(a1 + 3976, 1);
        long long v15 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134218496;
          double v31 = v9;
          __int16 v32 = 2048;
          double v33 = v7;
          __int16 v34 = 2048;
          double v35 = a2;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,ingesting measurement,  range: %f, range time: %f, current time: %f", buf, 0x20u);
        }
        v16.n128_f64[0] = v7;
        sub_10038810C((void *)(a1 + 4440), (uint64_t)buf, v16);
        if (v45 && v44 && v43 == 1)
        {
          int v13 = 0;
          double v10 = v40;
          double v11 = v41;
          double v12 = v42;
        }
        else if (*(unsigned char *)(a1 + 3544) && *(unsigned char *)(a1 + 3576) && *(unsigned char *)(a1 + 3560))
        {
          int v13 = 1;
        }
        *(double *)double v22 = v9;
        *(double *)&v22[1] = v7;
        *(double *)&v22[2] = v10;
        *(double *)&v22[3] = v11;
        *(double *)&int v22[4] = v12;
        int v23 = v13;
        long long v24 = v27;
        long long v25 = v28;
        int v26 = v29;
        sub_100378A88(a1, (uint64_t)v22);
      }
    }
    uint64_t v17 = *(void *)(a1 + 4064);
    if (v17)
    {
      unint64_t v18 = *(void *)(a1 + 4056);
      uint64_t v19 = (double *)(*(void *)(*(void *)(a1 + 4032) + ((v18 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v18 & 0x7F));
      if (a2 - *v19 > 1.38)
      {
        long long v20 = *((_OWORD *)v19 + 1);
        long long v27 = *(_OWORD *)v19;
        long long v28 = v20;
        *(void *)(a1 + 4064) = v17 - 1;
        *(void *)(a1 + 4056) = v18 + 1;
        sub_10037C354(a1 + 4024, 1);
        uint64_t v21 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134219008;
          double v31 = *((double *)&v27 + 1);
          __int16 v32 = 2048;
          double v33 = *(double *)&v28;
          __int16 v34 = 2048;
          double v35 = *((double *)&v28 + 1);
          __int16 v36 = 2048;
          uint64_t v37 = v27;
          __int16 v38 = 2048;
          double v39 = a2;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,ingesting peer vio,  x: %f, y: %f, z: %f, range time: %f, current time: %f", buf, 0x34u);
        }
        sub_10037AC88(a1, (uint64_t)&v27);
      }
    }
  }
}

__n128 sub_100377F28(uint64_t a1, float *a2)
{
  sub_100377C08(a1, *(double *)a2);
  if (!*(unsigned char *)(a1 + 360))
  {
    *(void *)(a1 + 352) = *(void *)a2;
    *(unsigned char *)(a1 + 360) = 1;
  }
  if (*(unsigned char *)(a1 + 3520))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(unsigned char *)(a1 + 688))
      {
        double v4 = *(double *)a2;
        if (*(double *)a2 - *(double *)(a1 + 680) > 1.58 && v4 - *(double *)(a1 + 352) > 0.1)
        {
          *(double *)(a1 + 352) = v4;
          *(unsigned char *)(a1 + 360) = 1;
          sub_100378128(a1, (uint64_t)v21, *(double *)(a1 + 3512), a2[16], a2[17], a2[18]);
          int v5 = *(unsigned __int8 *)(a1 + 664);
          long long v6 = v21[9];
          *(_OWORD *)(a1 + 616) = v21[8];
          *(_OWORD *)(a1 + 632) = v6;
          *(_OWORD *)(a1 + 648) = v21[10];
          long long v7 = v21[5];
          *(_OWORD *)(a1 + 552) = v21[4];
          *(_OWORD *)(a1 + 568) = v7;
          long long v8 = v21[7];
          *(_OWORD *)(a1 + 584) = v21[6];
          *(_OWORD *)(a1 + 600) = v8;
          long long v9 = v21[1];
          *(_OWORD *)(a1 + 488) = v21[0];
          *(_OWORD *)(a1 + 504) = v9;
          long long v10 = v21[3];
          *(_OWORD *)(a1 + 520) = v21[2];
          *(_OWORD *)(a1 + 536) = v10;
          if (!v5) {
            *(unsigned char *)(a1 + 664) = 1;
          }
          *(void *)(a1 + 576) = *(void *)(a1 + 160);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 688) && *(double *)a2 - *(double *)(a1 + 680) > *(double *)(a1 + 344) + 1.38)
  {
    double v11 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,PF reset due to timeout calculated from current pose", (uint8_t *)v21, 2u);
    }
    sub_100374F00(a1);
  }
  if (sub_100376D4C(a1, (uint64_t *)a2))
  {
    int v13 = (_OWORD *)(a1 + 704);
    long long v14 = *(_OWORD *)a2;
    long long v15 = *((_OWORD *)a2 + 1);
    long long v16 = *((_OWORD *)a2 + 3);
    if (*(unsigned char *)(a1 + 832))
    {
      *(_OWORD *)(a1 + 736) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 752) = v16;
      *int v13 = v14;
      *(_OWORD *)(a1 + 720) = v15;
      __n128 result = *(__n128 *)(a2 + 16);
      long long v17 = *((_OWORD *)a2 + 5);
      long long v18 = *((_OWORD *)a2 + 6);
      *(void *)(a1 + 816) = *((void *)a2 + 14);
      *(_OWORD *)(a1 + 784) = v17;
      *(_OWORD *)(a1 + 800) = v18;
      *(__n128 *)(a1 + 768) = result;
    }
    else
    {
      *(_OWORD *)(a1 + 736) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 752) = v16;
      *int v13 = v14;
      *(_OWORD *)(a1 + 720) = v15;
      __n128 result = *(__n128 *)(a2 + 16);
      long long v19 = *((_OWORD *)a2 + 5);
      long long v20 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 800) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 816) = v20;
      *(__n128 *)(a1 + 768) = result;
      *(_OWORD *)(a1 + 784) = v19;
      *(unsigned char *)(a1 + 832) = 1;
    }
  }
  return result;
}

double sub_100378128@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10000AE44();
  }
  long long v8 = *(double **)a1;
  long long v9 = *(double **)(a1 + 8);
  if (*(double **)a1 == v9)
  {
    double v51 = 0.0;
    double v52 = 0.0;
    double v55 = 0.0;
    double v56 = 0.0;
    double v20 = 0.0;
    double v16 = 0.0;
    double v12 = 0.0;
    double v10 = 0.0;
LABEL_47:
    double v14 = 0.0;
LABEL_48:
    double v53 = 0.0;
    double v54 = 0.0;
LABEL_49:
    double v25 = 0.0;
    double v48 = 0.0;
    double v49 = 0.0;
LABEL_50:
    double v50 = 0.0;
    goto LABEL_51;
  }
  double v10 = 0.0;
  double v11 = *(double **)a1;
  do
  {
    double v10 = v10 + *v11 * v11[11];
    v11 += 12;
  }
  while (v11 != v9);
  if (v8 == v9)
  {
    double v51 = 0.0;
    double v52 = 0.0;
    double v55 = 0.0;
    double v56 = 0.0;
    double v20 = 0.0;
    double v16 = 0.0;
    double v12 = 0.0;
    goto LABEL_47;
  }
  double v12 = 0.0;
  int v13 = *(double **)a1;
  do
  {
    double v12 = v12 + v13[2] * v13[11];
    v13 += 12;
  }
  while (v13 != v9);
  if (v8 == v9)
  {
    double v51 = 0.0;
    double v52 = 0.0;
    double v55 = 0.0;
    double v56 = 0.0;
    double v20 = 0.0;
    double v16 = 0.0;
    goto LABEL_47;
  }
  double v14 = 0.0;
  long long v15 = *(double **)a1;
  do
  {
    double v14 = v14 + v15[1] * v15[11];
    v15 += 12;
  }
  while (v15 != v9);
  if (v8 == v9)
  {
    double v51 = 0.0;
    double v52 = 0.0;
    double v55 = 0.0;
    double v56 = 0.0;
    double v20 = 0.0;
    double v16 = 0.0;
    goto LABEL_48;
  }
  double v16 = 0.0;
  long long v17 = *(double **)a1;
  do
  {
    double v16 = v16 + v17[5] * v17[11];
    v17 += 12;
  }
  while (v17 != v9);
  if (v8 == v9)
  {
    double v51 = 0.0;
    double v52 = 0.0;
    double v55 = 0.0;
    double v56 = 0.0;
    double v20 = 0.0;
    goto LABEL_48;
  }
  double v18 = 0.0;
  long long v19 = *(double **)a1;
  do
  {
    double v18 = v18 + v19[6] * v19[11];
    v19 += 12;
  }
  while (v19 != v9);
  if (v8 == v9)
  {
    double v51 = 0.0;
    double v52 = 0.0;
    double v55 = 0.0;
    double v56 = 0.0;
    double v20 = 0.0;
    double v53 = 0.0;
    double v54 = v18;
    goto LABEL_49;
  }
  double v20 = 0.0;
  double v21 = 0.0;
  double v22 = *(double **)a1;
  do
  {
    double v23 = sqrt((v22[2] - a6) * (v22[2] - a6) + (*v22 - a4) * (*v22 - a4));
    double v24 = v22[11];
    double v20 = v20 + v23 * v24;
    double v21 = v21 + v23 * v23 * v24;
    v22 += 12;
  }
  while (v22 != v9);
  double v54 = v18;
  if (v8 == v9)
  {
    double v51 = 0.0;
    double v52 = 0.0;
    double v55 = v21;
    double v56 = 0.0;
    double v53 = 0.0;
    goto LABEL_49;
  }
  double v25 = 0.0;
  double v26 = 0.0;
  long long v27 = *(double **)a1;
  do
  {
    double v28 = sqrt((v27[1] - a5) * (v27[1] - a5) + (*v27 - a4) * (*v27 - a4) + (v27[2] - a6) * (v27[2] - a6));
    double v29 = v27[11];
    double v25 = v25 + v28 * v29;
    double v26 = v26 + v28 * v28 * v29;
    v27 += 12;
  }
  while (v27 != v9);
  double v55 = v21;
  if (v8 == v9)
  {
    double v51 = 0.0;
    double v52 = 0.0;
    double v56 = 0.0;
    double v48 = 0.0;
    double v49 = 0.0;
    double v50 = 0.0;
    double v53 = v26;
    goto LABEL_51;
  }
  double v30 = 0.0;
  double v31 = *(double **)a1;
  do
  {
    double v30 = v30 + (*v31 - v10) * (*v31 - v10) * v31[11];
    v31 += 12;
  }
  while (v31 != v9);
  double v53 = v26;
  if (v8 == v9)
  {
    double v51 = 0.0;
    double v52 = 0.0;
    double v48 = 0.0;
    double v49 = 0.0;
    double v50 = 0.0;
    double v56 = v30;
    goto LABEL_51;
  }
  double v32 = 0.0;
  double v33 = *(double **)a1;
  do
  {
    double v32 = v32 + (v33[2] - v12) * (v33[2] - v12) * v33[11];
    v33 += 12;
  }
  while (v33 != v9);
  double v56 = v30;
  if (v8 == v9)
  {
    double v51 = 0.0;
    double v52 = 0.0;
    double v48 = 0.0;
    double v49 = v32;
    goto LABEL_50;
  }
  double v34 = 0.0;
  double v35 = *(double **)a1;
  do
  {
    double v34 = v34 + (v35[1] - v14) * (v35[1] - v14) * v35[11];
    v35 += 12;
  }
  while (v35 != v9);
  double v49 = v32;
  if (v8 == v9)
  {
    double v51 = v34;
    double v52 = 0.0;
    double v48 = 0.0;
    goto LABEL_50;
  }
  double v36 = 0.0;
  uint64_t v37 = *(double **)a1;
  do
  {
    double v36 = v36 + (*v37 - v10) * (v37[2] - v12) * v37[11];
    v37 += 12;
  }
  while (v37 != v9);
  double v51 = v34;
  if (v8 == v9)
  {
    double v52 = 0.0;
    double v50 = 0.0;
    double v48 = v36;
  }
  else
  {
    double v38 = 0.0;
    double v39 = *(double **)a1;
    do
    {
      double v40 = -0.0;
      if (vabdd_f64(v39[1], a5) > 2.5) {
        double v40 = v39[11];
      }
      double v38 = v38 + v40;
      v39 += 12;
    }
    while (v39 != v9);
    double v48 = v36;
    if (v8 == v9)
    {
      double v50 = 0.0;
      double v52 = v38;
    }
    else
    {
      double v41 = 0.0;
      do
      {
        double v41 = v41 + fabs(v8[1]) * v8[11];
        v8 += 12;
      }
      while (v8 != v9);
      double v52 = v38;
      double v50 = v41;
    }
  }
LABEL_51:
  long double v43 = atan2(v14 - a5, v20);
  long double v57 = a5 + v25 * sin(v43);
  double v44 = atan2(v12 - a6, v10 - a4);
  __double2 v45 = __sincos_stret(v44);
  long double v46 = atan2(sqrt(v56 + v49), v20);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0x408F400000000000;
  *(double *)a2 = v10;
  *(double *)(a2 + 8) = v12;
  *(double *)(a2 + 16) = v14;
  *(double *)(a2 + 24) = v16;
  *(double *)(a2 + 32) = v54;
  *(double *)(a2 + 40) = v56;
  *(double *)(a2 + 48) = v49;
  *(double *)(a2 + 56) = v51;
  *(double *)(a2 + 64) = v48;
  *(double *)(a2 + 72) = a3;
  *(long double *)(a2 + 96) = v46 * 180.0 / 3.14159265;
  *(double *)(a2 + 104) = v20;
  *(double *)(a2 + 112) = v55 - v20 * v20;
  *(double *)(a2 + 120) = v25;
  *(double *)(a2 + 128) = v53 - v25 * v25;
  *(double *)(a2 + 136) = a4 + v20 * v45.__cosval;
  *(long double *)(a2 + 144) = v57;
  *(double *)(a2 + 152) = a6 + v20 * v45.__sinval;
  double result = v50;
  *(double *)(a2 + 160) = v52;
  *(double *)(a2 + 168) = v50;
  return result;
}

uint64_t sub_100378654(uint64_t result, double a2)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)(result + 8);
    if (*(void *)result != v3)
    {
      uint64_t v5 = result + 992;
      do
      {
        double v6 = (double)sub_100166A18(v5);
        double result = sub_100166A18(v5);
        *(_DWORD *)(v2 + 80) = (v6 + (double)result * 4294967300.0) * 5.42101086e-20 + 0.0 >= a2;
        v2 += 96;
      }
      while (v2 != v3);
    }
  }
  return result;
}

void sub_1003786FC(uint64_t a1, int a2, double a3)
{
  sub_100377C08(a1, a3);
  int v6 = *(_DWORD *)(a1 + 3616);
  switch(v6)
  {
    case 0:
      if (a2 == 1)
      {
LABEL_8:
        double v7 = 0.5;
LABEL_13:
        sub_100378654(a1, v7);
        break;
      }
LABEL_10:
      if (a2 == 2)
      {
        double v7 = 0.0;
        goto LABEL_13;
      }
      break;
    case 1:
      if (!a2) {
        goto LABEL_12;
      }
      goto LABEL_10;
    case 2:
      if (a2)
      {
        if (a2 != 1) {
          break;
        }
        goto LABEL_8;
      }
LABEL_12:
      double v7 = 0.9;
      goto LABEL_13;
  }
  *(_DWORD *)(a1 + 3616) = a2;
  *(double *)(a1 + 3624) = a3;
  *(unsigned char *)(a1 + 3632) = 1;
}

void sub_10037879C(uint64_t a1, int a2, double a3, double a4)
{
  long long v8 = (unsigned char *)(a1 + 4208);
  sub_100377C08(a1, a4);
  v8[224] = a2;
  if (!*(unsigned char *)(a1 + 832)) {
    return;
  }
  LOBYTE(v23) = 0;
  char v24 = 0;
  LOBYTE(v25) = 0;
  char v26 = 0;
  *(double *)long long v19 = a3;
  *(double *)&v19[1] = a4;
  long long v9 = *(_OWORD *)(a1 + 768);
  double v21 = COERCE_FLOAT(*(void *)(a1 + 776));
  float64x2_t v20 = vcvtq_f64_f32(*(float32x2_t *)&v9);
  if (*(unsigned char *)(a1 + 812))
  {
    int v10 = *(_DWORD *)(a1 + 808);
    if (v10)
    {
      if (v10 != 1) {
        goto LABEL_8;
      }
      int v11 = 0;
    }
    else
    {
      int v11 = 2;
    }
    int v22 = v11;
  }
LABEL_8:
  if (*(unsigned char *)(a1 + 820) && *(_DWORD *)(a1 + 816) == 1) {
    int v22 = 1;
  }
  if (*v8 && a4 - *(double *)(a1 + 4136) < 1.0)
  {
    uint64_t v23 = *(void *)(a1 + 4176);
    char v24 = *(unsigned char *)(a1 + 4184);
    uint64_t v25 = *(void *)(a1 + 4192);
    char v26 = *(unsigned char *)(a1 + 4200);
  }
  if (!*(unsigned char *)(a1 + 3632)) {
    goto LABEL_20;
  }
  double v12 = 0.1;
  if (a2) {
    double v12 = 0.2;
  }
  if (a4 - *(double *)(a1 + 3624) < v12)
  {
    sub_1003789C8((void *)(a1 + 3976), (uint64_t)v19);
    uint64_t v13 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v14 = *(void *)(a1 + 4016);
    *(_DWORD *)long long buf = 134218496;
    double v28 = a4;
    __int16 v29 = 2048;
    double v30 = a3;
    __int16 v31 = 2048;
    uint64_t v32 = v14;
    long long v15 = "#sa_algo_particlefilter,measurement queued, time: %f, range: %f, queue size: %lu";
    double v16 = v13;
    uint32_t v17 = 32;
  }
  else
  {
LABEL_20:
    uint64_t v18 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    long long v15 = "#sa_algo_particlefilter,measurement not queued due to lack of recent motion data";
    double v16 = v18;
    uint32_t v17 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
}

__n128 sub_1003789C8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 51 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10037BA34(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(__n128 *)(v8 + 16) = result;
  *(_OWORD *)(v8 + 32) = v10;
  ++a1[5];
  return result;
}

void sub_100378A88(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  double v3 = *(double *)(a2 + 8);
  double v4 = *(double *)(a2 + 24);
  double v96 = *(double *)(a2 + 32);
  double v5 = *(double *)(a2 + 16);
  *(double *)(a1 + 3568) = v4;
  *(unsigned char *)(a1 + 3576) = 1;
  if (!*(unsigned char *)(a1 + 832)) {
    return;
  }
  double v95 = v5;
  unint64_t v8 = (unsigned char *)(a1 + 832);
  long long v9 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004354E8(v9, v8, v2);
  }
  if (*(unsigned char *)(a1 + 688) && v3 - *(double *)(a1 + 680) > *(double *)(a1 + 344))
  {
    long long v10 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,PF reset due to timeout calculated from current range", buf, 2u);
    }
    sub_100374F00(a1);
  }
  if (!*(unsigned char *)(a1 + 24))
  {
    long long v25 = *(_OWORD *)(a2 + 48);
    v107[2] = *(_OWORD *)(a2 + 32);
    v107[3] = v25;
    v107[4] = *(_OWORD *)(a2 + 64);
    long long v26 = *(_OWORD *)(a2 + 16);
    v107[0] = *(_OWORD *)a2;
    v107[1] = v26;
    sub_100375E60(a1, (double *)v107);
    *(double *)(a1 + 680) = v3;
    *(unsigned char *)(a1 + 688) = 1;
    *(void *)(a1 + 3512) = *(void *)a2;
    *(unsigned char *)(a1 + 3520) = 1;
    int v27 = *(unsigned __int8 *)(a1 + 4296);
    *(_OWORD *)(a1 + 4216) = *(_OWORD *)a2;
    long long v28 = *(_OWORD *)(a2 + 64);
    long long v30 = *(_OWORD *)(a2 + 16);
    long long v29 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 4264) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 4280) = v28;
    *(_OWORD *)(a1 + 4232) = v30;
    *(_OWORD *)(a1 + 4248) = v29;
    if (!v27) {
      *(unsigned char *)(a1 + 4296) = 1;
    }
    return;
  }
  double v11 = *(double *)(a1 + 232);
  v105[0] = 0.0;
  v105[1] = v11;
  char v106 = 0;
  uint64_t v12 = 3960;
  if (!*(unsigned char *)(a1 + 4432)) {
    uint64_t v12 = 3952;
  }
  double v13 = *(double *)(a1 + v12);
  if (*(unsigned char *)(a1 + 3928))
  {
    double v14 = *(double *)(a1 + 3920);
    if (v3 - v14 <= v13) {
      goto LABEL_34;
    }
    long long v15 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      *(double *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,time of last pdr update: %f, current time: %f", buf, 0x16u);
    }
  }
  if (*(unsigned char *)(a1 + 3944))
  {
    double v16 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      double v17 = v3 - *(double *)(a1 + 3936);
      *(_DWORD *)long long buf = 134217984;
      *(double *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,time since process model update: %f", buf, 0xCu);
      double v16 = qword_1008ABDE0;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,using random motion model", buf, 2u);
    }
    if (*(unsigned char *)(a1 + 3928) && v3 - *(double *)(a1 + 3920) > v13 + v13) {
      return;
    }
    if (!*(unsigned char *)(a1 + 24)) {
      sub_10000AE44();
    }
    uint64_t v18 = *(double **)a1;
    long long v19 = *(double **)(a1 + 8);
    if (*(double **)a1 != v19)
    {
      do
      {
        if (*((_DWORD *)v18 + 20))
        {
          if (*(unsigned char *)(a1 + 3928))
          {
            sub_100377474((double *)a1, (uint64_t)v18, (uint64_t)buf, v3 - *(double *)(a1 + 3920));
LABEL_31:
            *((_OWORD *)v18 + 2) = *(_OWORD *)v109;
            *((_OWORD *)v18 + 3) = *(_OWORD *)&v109[16];
            *((_OWORD *)v18 + 4) = *(_OWORD *)&v109[32];
            *((_OWORD *)v18 + 5) = v110;
            *(_OWORD *)uint64_t v18 = *(_OWORD *)buf;
            *((_OWORD *)v18 + 1) = *(_OWORD *)&buf[16];
            *(_DWORD *)(a1 + 3968) = 0;
            goto LABEL_32;
          }
          if (*(unsigned char *)(a1 + 688))
          {
            sub_100377474((double *)a1, (uint64_t)v18, (uint64_t)buf, v3 - *(double *)(a1 + 680));
            goto LABEL_31;
          }
        }
        else
        {
          double v20 = *v18;
          double *v18 = v20 + sub_10037B918((uint64_t)v105, a1 + 992, v105);
          double v21 = v18[2];
          v18[2] = v21 + sub_10037B918((uint64_t)v105, a1 + 992, v105);
        }
LABEL_32:
        v18 += 12;
      }
      while (v18 != v19);
    }
  }
  *(double *)(a1 + 3936) = v3;
  *(unsigned char *)(a1 + 3944) = 1;
LABEL_34:
  sub_100378128(a1, (uint64_t)v102, v2, v95, v4, v96);
  double v22 = v104;
  double v23 = v2 - v103;
  double v101 = v2 - v103;
  if (v2 >= 10.0)
  {
    if (v2 >= 20.0)
    {
      if (v2 >= 30.0)
      {
        if (v2 >= 40.0)
        {
          if (v2 >= 50.0)
          {
            if (v2 >= 60.0) {
              double v24 = 3.02;
            }
            else {
              double v24 = 2.37;
            }
          }
          else
          {
            double v24 = 1.8;
          }
        }
        else
        {
          double v24 = 1.56;
        }
      }
      else
      {
        double v24 = 0.89;
      }
    }
    else
    {
      double v24 = 0.69;
    }
  }
  else
  {
    double v24 = 0.433;
  }
  double v31 = *(double *)(a1 + 424);
  double v32 = *(double *)(a1 + 432);
  sub_1001F2440((void *)(a1 + 4304), &v101);
  unint64_t v33 = *(void *)(a1 + 4344);
  if (v33 >= 0xB)
  {
    uint64_t v34 = *(void *)(a1 + 4336);
    *(void *)(a1 + 4344) = v33 - 1;
    *(void *)(a1 + 4336) = v34 + 1;
    sub_1001F286C(a1 + 4304, 1);
  }
  double v35 = (v23 - v24) / sqrt(v22 * v31 + v32 * v32);
  if (*(unsigned char *)(a1 + 3504))
  {
    double v36 = *(double *)(a1 + 368);
    if (v35 < v36) {
      *(unsigned char *)(a1 + 3504) = 0;
    }
    if (*(unsigned char *)(a1 + 4352) || *(_DWORD *)(a1 + 3616) == 2) {
      uint64_t v37 = (double *)(a1 + 456);
    }
    else {
      uint64_t v37 = (double *)(a1 + 376);
    }
    if (v3 - *(double *)(a1 + 3528) <= *v37)
    {
      if (v35 >= v36) {
        goto LABEL_75;
      }
      goto LABEL_74;
    }
    double v39 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
LABEL_66:
      sub_100374F00(a1);
      return;
    }
    *(_WORD *)long long buf = 0;
    double v40 = "#sa_algo_particlefilter,PF reset due to nlos timeout";
LABEL_65:
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v40, buf, 2u);
    goto LABEL_66;
  }
  if (!*(unsigned char *)(a1 + 3520))
  {
LABEL_74:
    sub_100375204(a1, *(double *)(a2 + 16), *(double *)(a2 + 32), *(double *)(a2 + 8));
    goto LABEL_75;
  }
  double v38 = *(double *)(a1 + 368);
  if (v35 <= v38)
  {
    if (v35 >= -v38)
    {
      if (*(unsigned char *)(a1 + 392)) {
        *(unsigned char *)(a1 + 392) = 0;
      }
    }
    else if (*(unsigned char *)(a1 + 392))
    {
      *(unsigned char *)(a1 + 392) = 0;
      double v39 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_66;
      }
      *(_WORD *)long long buf = 0;
      double v40 = "#sa_algo_particlefilter,PF reset due to transition from los to nlos detected";
      goto LABEL_65;
    }
    goto LABEL_74;
  }
  *(unsigned char *)(a1 + 3504) = 1;
  *(double *)(a1 + 3528) = v3;
  *(unsigned char *)(a1 + 392) = 0;
LABEL_75:
  *(double *)(a1 + 3512) = v2;
  *(unsigned char *)(a1 + 3520) = 1;
  int v41 = *(unsigned __int8 *)(a1 + 4296);
  *(_OWORD *)(a1 + 4216) = *(_OWORD *)a2;
  long long v42 = *(_OWORD *)(a2 + 64);
  long long v44 = *(_OWORD *)(a2 + 16);
  long long v43 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4264) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 4280) = v42;
  *(_OWORD *)(a1 + 4232) = v44;
  *(_OWORD *)(a1 + 4248) = v43;
  if (!v41) {
    *(unsigned char *)(a1 + 4296) = 1;
  }
  if (*(unsigned char *)(a1 + 3544) && *(unsigned char *)(a1 + 3576) && *(unsigned char *)(a1 + 3560) && !*(_DWORD *)(a2 + 40))
  {
    uint64_t v45 = *(void *)(a1 + 112);
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = v45;
    unsigned char buf[24] = 0;
    if (!*(unsigned char *)(a1 + 688)) {
      sub_10000AE44();
    }
    if (!*(unsigned char *)(a1 + 24)) {
      sub_10000AE44();
    }
    double v46 = v95 - *(double *)(a1 + 3536);
    double v93 = *(double *)(a2 + 8);
    double v94 = v96 - *(double *)(a1 + 3552);
    double v92 = *(double *)(a1 + 680);
    long long v47 = *(double **)a1;
    double v48 = *(double **)(a1 + 8);
    if (*(double **)a1 != v48)
    {
      do
      {
        double v49 = sub_10037B918((uint64_t)buf, a1 + 992, (double *)buf);
        double v50 = v3;
        double v51 = v2;
        double v52 = v4;
        double v53 = v47[9];
        double v54 = v46 * v53 - v46;
        double v55 = v94 * v53 - v94;
        __double2 v56 = __sincos_stret(v49);
        *long long v47 = *v47 + v56.__sinval * v55 - v56.__cosval * v54;
        double v47[2] = v47[2] + -(v55 * v56.__cosval) - v56.__sinval * v54;
        if (*(unsigned char *)(a1 + 88) && *(unsigned char *)(a1 + 80))
        {
          long double v57 = *(double **)(a1 + 56);
          double v58 = v47[4];
          v47[3] = *v57 + v47[3];
          v47[4] = v57[2] + v58;
        }
        v47 += 12;
        double v4 = v52;
        double v2 = v51;
        double v3 = v50;
      }
      while (v47 != v48);
    }
    *(double *)&long long v118 = v46 / (v93 - v92);
    *((void *)&v118 + 1) = 0;
    *(double *)&long long v119 = v94 / (v93 - v92);
    sub_100370CC0(__p, &v118, 3uLL);
    sub_1003797C8(a1 + 56, (__n128 *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
  *(_OWORD *)stat __p = 0u;
  long long v99 = 0u;
  uint64_t v100 = 0;
  long long v118 = 0u;
  long long v119 = 0u;
  uint64_t v120 = 0;
  if (!*v8)
  {
    long long v59 = xmmword_1004C3DB0;
    int64x2_t v60 = vdupq_n_s64(0x408F400000000000uLL);
    uint64_t v61 = 0x408F400000000000;
    int64x2_t v62 = v60;
    long long v63 = xmmword_1004C3DB0;
LABEL_105:
    *(double *)(a1 + 680) = v3;
    *(unsigned char *)(a1 + 688) = 1;
    uint64_t v77 = 384;
    if (!*(unsigned char *)(a1 + 3504)) {
      uint64_t v77 = 160;
    }
    uint64_t v78 = *(void *)(a1 + v77);
    int v79 = *(unsigned __int8 *)(a1 + 664);
    *(void *)(a1 + 520) = v100;
    long long v80 = v99;
    *(_OWORD *)(a1 + 488) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 504) = v80;
    *(int64x2_t *)(a1 + 528) = v60;
    *(int64x2_t *)(a1 + 544) = v62;
    *(double *)(a1 + 560) = v2;
    *(double *)(a1 + 568) = v3;
    *(void *)(a1 + 576) = v78;
    *(_OWORD *)(a1 + 584) = v59;
    *(_OWORD *)(a1 + 600) = v63;
    *(void *)(a1 + 616) = v61;
    long long v81 = v119;
    *(_OWORD *)(a1 + 624) = v118;
    *(_OWORD *)(a1 + 640) = v81;
    *(void *)(a1 + 656) = v120;
    if (!v79) {
      *(unsigned char *)(a1 + 664) = 1;
    }
    long long v82 = *(_OWORD *)(a1 + 816);
    *(_OWORD *)(a1 + 944) = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 960) = v82;
    *(unsigned char *)(a1 + 976) = *(unsigned char *)(a1 + 832);
    long long v83 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a1 + 880) = *(_OWORD *)(a1 + 736);
    *(_OWORD *)(a1 + 896) = v83;
    long long v84 = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 912) = *(_OWORD *)(a1 + 768);
    *(_OWORD *)(a1 + 928) = v84;
    long long v85 = *(_OWORD *)(a1 + 720);
    *(_OWORD *)(a1 + 848) = *(_OWORD *)(a1 + 704);
    *(_OWORD *)(a1 + 864) = v85;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_1004354B4();
    }
    *(void *)(a1 + 3536) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 3544) = 1;
    *(void *)(a1 + 3552) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 3560) = 1;
    return;
  }
  if (*(unsigned char *)(a1 + 3504))
  {
    if (!*(unsigned char *)(a1 + 664)) {
      sub_10000AE44();
    }
    if (!*(unsigned char *)(a1 + 3520)) {
      sub_10000AE44();
    }
    sub_100378128(a1, (uint64_t)buf, *(double *)(a1 + 3512), v95, v4, v96);
LABEL_104:
    *(_OWORD *)stat __p = *(_OWORD *)buf;
    long long v99 = *(_OWORD *)&buf[16];
    uint64_t v100 = *(void *)v109;
    int64x2_t v60 = *(int64x2_t *)&v109[8];
    int64x2_t v62 = *(int64x2_t *)&v109[24];
    long long v59 = v111;
    long long v63 = v112;
    uint64_t v61 = v113;
    long long v118 = v114;
    long long v119 = v115;
    uint64_t v120 = v116;
    goto LABEL_105;
  }
  uint64_t v64 = *(void *)(a1 + 4312);
  if (*(void *)(a1 + 4320) != v64)
  {
    unint64_t v65 = *(void *)(a1 + 4336);
    long long v66 = (double **)(v64 + 8 * (v65 >> 9));
    long long v67 = *v66;
    long long v68 = &(*v66)[v65 & 0x1FF];
    unint64_t v69 = *(void *)(a1 + 4344);
    uint64_t v70 = *(void *)(v64 + (((v69 + v65) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v69 + v65) & 0x1FF);
    if (v68 != (double *)v70)
    {
      double v71 = (double)v69;
      double v72 = 0.0;
      double v73 = 0.0;
      do
      {
        double v74 = *v68++;
        double v75 = v74;
        if ((char *)v68 - (char *)v67 == 4096)
        {
          char v76 = v66[1];
          ++v66;
          long long v67 = v76;
          long long v68 = v76;
        }
        double v73 = v73 + v75 / v71;
        double v72 = v72 + v75 * v75 / v71;
      }
      while (v68 != (double *)v70);
    }
  }
  sub_100379828(a1, (uint64_t)buf, v2, v95, v96, v4);
  if (v117) {
    goto LABEL_104;
  }
  long long v86 = *(_OWORD *)(a2 + 48);
  v97[2] = *(_OWORD *)(a2 + 32);
  v97[3] = v86;
  v97[4] = *(_OWORD *)(a2 + 64);
  long long v87 = *(_OWORD *)(a2 + 16);
  v97[0] = *(_OWORD *)a2;
  v97[1] = v87;
  sub_100375E60(a1, (double *)v97);
  *(double *)(a1 + 680) = v3;
  *(unsigned char *)(a1 + 688) = 1;
  uint64_t v88 = 384;
  if (!*(unsigned char *)(a1 + 3504)) {
    uint64_t v88 = 160;
  }
  uint64_t v89 = *(void *)(a1 + v88);
  int v90 = *(unsigned __int8 *)(a1 + 664);
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  int64x2_t v91 = vdupq_n_s64(0x408F400000000000uLL);
  *(int64x2_t *)(a1 + 528) = v91;
  *(int64x2_t *)(a1 + 544) = v91;
  *(void *)(a1 + 560) = 0;
  *(double *)(a1 + 568) = v3;
  *(void *)(a1 + 576) = v89;
  *(void *)(a1 + 584) = 0x408F400000000000;
  *(_OWORD *)(a1 + 592) = xmmword_1004C3DC0;
  *(_OWORD *)(a1 + 608) = xmmword_1004C3DC0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 656) = 0;
  if (!v90) {
    *(unsigned char *)(a1 + 664) = 1;
  }
}

void sub_100379598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003797C8(uint64_t a1, __n128 *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    sub_100150500(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_100379828(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1004355A0();
  }
  *(double *)(a1 + 3496) = *(double *)(a1 + 3496) + 1.0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  int v90 = 0;
  uint64_t v12 = *(double **)a1;
  double v13 = *(double **)(a1 + 8);
  if (*(double **)a1 == v13)
  {
    long long v29 = 0;
    stat __p = 0;
    long long v86 = 0;
    long long v87 = 0;
  }
  else
  {
    double v14 = 0;
    do
    {
      double v15 = a3 - sqrt((v12[2] - a5) * (v12[2] - a5) + (*v12 - a4) * (*v12 - a4) + (v12[1] - a6) * (v12[1] - a6));
      if (v14 >= v90)
      {
        double v16 = (double *)v88;
        uint64_t v17 = ((char *)v14 - (unsigned char *)v88) >> 3;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v19 = (char *)v90 - (unsigned char *)v88;
        if (((char *)v90 - (unsigned char *)v88) >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          double v21 = (char *)sub_100056BF0((uint64_t)&v90, v20);
          double v16 = (double *)v88;
          double v14 = v89;
        }
        else
        {
          double v21 = 0;
        }
        double v22 = (double *)&v21[8 * v17];
        *double v22 = v15;
        double v23 = v22 + 1;
        while (v14 != v16)
        {
          uint64_t v24 = *((void *)v14-- - 1);
          *((void *)v22-- - 1) = v24;
        }
        uint64_t v88 = v22;
        uint64_t v89 = v23;
        int v90 = (double *)&v21[8 * v20];
        if (v16) {
          operator delete(v16);
        }
        double v14 = v23;
      }
      else
      {
        *v14++ = v15;
      }
      uint64_t v89 = v14;
      v12 += 12;
    }
    while (v12 != v13);
    long long v25 = (double *)v88;
    stat __p = 0;
    long long v86 = 0;
    long long v87 = 0;
    if (v88 == v14)
    {
      long long v29 = 0;
    }
    else
    {
      long long v26 = 0;
      do
      {
        sub_10037A13C(a3, *v25);
        uint64_t v28 = v27;
        if (v26 >= v87)
        {
          long long v30 = (char *)__p;
          uint64_t v31 = (v26 - (unsigned char *)__p) >> 3;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61) {
            sub_1000267C4();
          }
          uint64_t v33 = v87 - (unsigned char *)__p;
          if ((v87 - (unsigned char *)__p) >> 2 > v32) {
            unint64_t v32 = v33 >> 2;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            double v35 = (char *)sub_100056BF0((uint64_t)&v87, v34);
            long long v30 = (char *)__p;
            long long v26 = v86;
          }
          else
          {
            double v35 = 0;
          }
          double v36 = &v35[8 * v31];
          *(void *)double v36 = v28;
          long long v29 = v36 + 8;
          while (v26 != v30)
          {
            uint64_t v37 = *((void *)v26 - 1);
            v26 -= 8;
            *((void *)v36 - 1) = v37;
            v36 -= 8;
          }
          stat __p = v36;
          long long v86 = v29;
          long long v87 = &v35[8 * v34];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          *(void *)long long v26 = v27;
          long long v29 = v26 + 8;
        }
        long long v86 = v29;
        ++v25;
        long long v26 = v29;
      }
      while (v25 != v14);
    }
  }
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10000AE44();
  }
  double v38 = *(double **)a1;
  double v39 = *(double **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39 - *(void *)a1) >> 5) != (v29 - (unsigned char *)__p) >> 3) {
    __assert_rtn("measurementUpdate", "ParticleFilter.cpp", 1165, "likelihoods.size() == _particles.value().size()");
  }
  long long v82 = 0;
  long long v83 = 0;
  double v40 = 0.0;
  long long v84 = 0;
  if (v39 != v38)
  {
    int v41 = 0;
    unint64_t v42 = 0;
    do
    {
      double v43 = v38[12 * v42 + 11] * *((double *)__p + v42) + 1.0e-50;
      if (v41 >= v84)
      {
        long long v44 = (double *)v82;
        uint64_t v45 = ((char *)v41 - (unsigned char *)v82) >> 3;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v47 = (char *)v84 - (unsigned char *)v82;
        if (((char *)v84 - (unsigned char *)v82) >> 2 > v46) {
          unint64_t v46 = v47 >> 2;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48)
        {
          double v49 = (char *)sub_100056BF0((uint64_t)&v84, v48);
          long long v44 = (double *)v82;
          int v41 = v83;
        }
        else
        {
          double v49 = 0;
        }
        double v50 = (double *)&v49[8 * v45];
        *double v50 = v43;
        double v51 = v50 + 1;
        while (v41 != v44)
        {
          uint64_t v52 = *((void *)v41-- - 1);
          *((void *)v50-- - 1) = v52;
        }
        long long v82 = v50;
        long long v83 = v51;
        long long v84 = (double *)&v49[8 * v48];
        if (v44) {
          operator delete(v44);
        }
        int v41 = v51;
      }
      else
      {
        *v41++ = v43;
      }
      long long v83 = v41;
      if (!*(unsigned char *)(a1 + 24)) {
        sub_10000AE44();
      }
      ++v42;
      double v38 = *(double **)a1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5) > v42);
    double v53 = (double *)v82;
    if (v82 != v41)
    {
      double v40 = 0.0;
      do
      {
        double v54 = *v53++;
        double v40 = v40 + v54;
      }
      while (v53 != v41);
    }
  }
  double v55 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v78 = (double *)v88;
    double v79 = 0.0;
    while (v78 != v89)
    {
      double v80 = *v78++;
      double v79 = v79 + v80;
    }
    double v81 = (double)*(uint64_t *)(a1 + 32);
    *(_DWORD *)long long buf = 134218496;
    *(double *)&uint8_t buf[4] = v79 / v81;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = a3;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(double *)&unsigned char buf[24] = v40;
    _os_log_debug_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "#sa_algo_particlefilter,average error: %f, measurement: %f m, total likelihood: %f", buf, 0x20u);
  }
  if (v40 >= 0.009)
  {
    long long v59 = (uint64_t *)v82;
    int64x2_t v60 = v83;
    if (v82 != v83)
    {
      uint64_t v61 = (double *)v82;
      do
      {
        double *v61 = *v61 / v40;
        ++v61;
      }
      while (v61 != v60);
    }
    if (!*(unsigned char *)(a1 + 24)) {
      sub_10000AE44();
    }
    uint64_t v62 = *(void *)(a1 + 8) - *(void *)a1;
    if (v62)
    {
      uint64_t v63 = v62 / 96;
      uint64_t v64 = (void *)(*(void *)a1 + 88);
      do
      {
        uint64_t v65 = *v59++;
        void *v64 = v65;
        v64 += 12;
        --v63;
      }
      while (v63);
    }
    sub_100378128(a1, (uint64_t)buf, a3, a4, a6, a5);
    if (!*(unsigned char *)(a1 + 24)) {
      sub_10000AE44();
    }
    long long v66 = *(double **)a1;
    double v67 = 0.0;
    while (v66 != *(double **)(a1 + 8))
    {
      double v67 = v67 + v66[11] * v66[11];
      v66 += 12;
    }
    double v71 = 0.05;
    if (*(_DWORD *)(a1 + 3968) == 1) {
      double v71 = 0.25;
    }
    *(double *)(a1 + 280) = v71;
    if (1.0 / v67 / (double)*(uint64_t *)(a1 + 32) < v71 && *(double *)(a1 + 3496) > *(double *)(a1 + 312))
    {
      sub_10037A1F0(a1, (double **)&v82, a3, a4, a5);
      *(void *)(a1 + 3496) = 0;
    }
    double v72 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int64x2_t v91 = 134218240;
      double v92 = a3;
      __int16 v93 = 2048;
      uint64_t v94 = v100;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,measurement: %f, uncertainty: %f", v91, 0x16u);
    }
    long long v73 = v103;
    *(_OWORD *)(a2 + 128) = v102;
    *(_OWORD *)(a2 + 144) = v73;
    *(_OWORD *)(a2 + 160) = v104;
    long long v74 = v99;
    *(_OWORD *)(a2 + 64) = v98;
    *(_OWORD *)(a2 + 80) = v74;
    long long v75 = v101;
    *(_OWORD *)(a2 + 96) = v100;
    *(_OWORD *)(a2 + 112) = v75;
    long long v76 = *(_OWORD *)&buf[16];
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_OWORD *)(a2 + 16) = v76;
    long long v77 = v97;
    *(_OWORD *)(a2 + 32) = v96;
    *(_OWORD *)(a2 + 48) = v77;
    *(unsigned char *)(a2 + 176) = 1;
  }
  else
  {
    __double2 v56 = (double *)v88;
    double v57 = 0.0;
    while (v56 != v89)
    {
      double v58 = *v56++;
      double v57 = v57 + v58;
    }
    long long v68 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(void *)(*v68 - 24)));
    unint64_t v69 = std::locale::use_facet((const std::locale *)buf, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
    std::locale::~locale((std::locale *)buf);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v70 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,PF reset due to minimum likelihood threshold fail", buf, 2u);
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 176) = 0;
  }
  if (v82)
  {
    long long v83 = (double *)v82;
    operator delete(v82);
  }
  if (__p)
  {
    long long v86 = (char *)__p;
    operator delete(__p);
  }
  if (v88)
  {
    uint64_t v89 = (double *)v88;
    operator delete(v88);
  }
}

void sub_10037A0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10037A13C(double a1, double a2)
{
  sub_1003795BC();
  double v6 = v3 * (a2 - v4) / v5;
  double v7 = v6 + 1.0;
  if (v6 + 1.0 > 0.0)
  {
    double v8 = -1.0 / v3;
    long double v9 = pow(v6 + 1.0, -1.0 / v3);
    exp(-v9);
    pow(v7, v8 + -1.0);
  }
}

void sub_10037A1F0(uint64_t a1, double **a2, double a3, double a4, double a5)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1004355CC();
  }
  double v7 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#sa_algo_particlefilter,resampling with systematic resample method", buf, 2u);
  }
  sub_1003582C4(buf, *(void *)(a1 + 32));
  double v8 = *a2;
  long double v9 = a2[1];
  if (*a2 != v9)
  {
    long long v10 = *(char **)buf;
    double v12 = *v8;
    double v11 = v8 + 1;
    double v13 = v12;
    **(double **)long long buf = v12;
    if (v11 != v9)
    {
      double v14 = (double *)(v10 + 8);
      do
      {
        double v15 = *v11++;
        double v13 = v13 + v15;
        *v14++ = v13;
      }
      while (v11 != v9);
    }
  }
  uint64_t v16 = a1 + 992;
  unsigned int v17 = sub_100166A18(a1 + 992);
  unsigned int v18 = sub_100166A18(a1 + 992);
  uint64_t v19 = *(void *)(a1 + 32);
  stat __p = 0;
  int v90 = 0;
  int64x2_t v91 = 0;
  if (v19 <= 0)
  {
    long long v86 = 0;
    long long v87 = 0;
    uint64_t v88 = 0;
  }
  else
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    double v22 = (((double)v17 + (double)v18 * 4294967300.0) * 5.42101086e-20 + 0.0) / (double)v19;
    do
    {
      double v23 = v22 + (double)(int)v21 / (double)v19;
      if (v20 >= v91)
      {
        long long v25 = (double *)__p;
        uint64_t v26 = ((char *)v20 - (unsigned char *)__p) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          sub_1000267C4();
        }
        uint64_t v28 = (char *)v91 - (unsigned char *)__p;
        if (((char *)v91 - (unsigned char *)__p) >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)sub_100056BF0((uint64_t)&v91, v29);
          long long v25 = (double *)__p;
          unint64_t v20 = v90;
        }
        else
        {
          long long v30 = 0;
        }
        uint64_t v31 = (double *)&v30[8 * v26];
        double *v31 = v23;
        uint64_t v24 = v31 + 1;
        while (v20 != v25)
        {
          uint64_t v32 = *((void *)v20-- - 1);
          *((void *)v31-- - 1) = v32;
        }
        stat __p = v31;
        int v90 = v24;
        int64x2_t v91 = (double *)&v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *unint64_t v20 = v23;
        uint64_t v24 = v20 + 1;
      }
      int v90 = v24;
      ++v21;
      uint64_t v19 = *(void *)(a1 + 32);
      unint64_t v20 = v24;
    }
    while (v19 > v21);
    long long v86 = 0;
    long long v87 = 0;
    uint64_t v88 = 0;
    if (v19 >= 1)
    {
      uint64_t v33 = 0;
      int v82 = 0;
      do
      {
        double v34 = *((double *)__p + v33);
        unint64_t v35 = v82;
        if (v34 > *(double *)(*(void *)buf + 8 * v82))
        {
          unint64_t v36 = (uint64_t)&v93[-*(void *)buf] >> 3;
          if (v36 <= v82) {
            unint64_t v36 = v82;
          }
          while (v36 != v35)
          {
            unint64_t v37 = v35 + 1;
            double v38 = *(double *)(*(void *)buf + 8 + 8 * v35++);
            if (v34 <= v38) {
              goto LABEL_36;
            }
          }
          unint64_t v37 = v36;
LABEL_36:
          int v82 = v37;
          unint64_t v35 = v37;
        }
        if (!*(unsigned char *)(a1 + 24)) {
          sub_10000AE44();
        }
        uint64_t v39 = *(void *)a1 + 96 * v35;
        double v40 = *(double *)(v39 + 8);
        double v83 = *(double *)v39;
        double v41 = *(double *)(v39 + 16);
        long long v85 = *(_OWORD *)(v39 + 24);
        unint64_t v42 = (uint64_t *)(v39 + 56);
        double v43 = (int *)(v39 + 80);
        uint64_t v44 = *(void *)a1 + 96 * v33;
        if (!*(unsigned char *)(a1 + 337)) {
          double v43 = (int *)(v44 + 80);
        }
        if (!*(unsigned char *)(a1 + 336)) {
          unint64_t v42 = (uint64_t *)(v44 + 56);
        }
        if (!*(unsigned char *)(a1 + 200)) {
          double v40 = *(double *)(*(void *)a1 + 96 * v33 + 8);
        }
        int v45 = *(_DWORD *)(v39 + 84);
        int v46 = *v43;
        uint64_t v48 = *(void *)(v44 + 64);
        uint64_t v47 = *(void *)(v44 + 72);
        uint64_t v50 = *(void *)(v44 + 40);
        double v49 = *(double *)(v44 + 48);
        uint64_t v51 = *v42;
        unsigned int v52 = sub_100166A18(v16);
        if (((double)v52 + (double)sub_100166A18(v16) * 4294967300.0) * 5.42101086e-20 + 0.0 < 0.5
          && *(unsigned char *)(a1 + 3576)
          && !*(unsigned char *)(a1 + 3584))
        {
          double v40 = *(double *)(a1 + 3568) - (v40 - *(double *)(a1 + 3568));
        }
        unsigned int v53 = sub_100166A18(v16);
        if (((double)v53 + (double)sub_100166A18(v16) * 4294967300.0) * 5.42101086e-20 + 0.0 < *(double *)(a1 + 304)
          && !*(unsigned char *)(a1 + 3504))
        {
          unsigned int v84 = sub_100166A18(v16);
          unsigned int v54 = sub_100166A18(v16);
          unsigned int v55 = sub_100166A18(v16);
          unsigned int v56 = sub_100166A18(v16);
          uint64_t v57 = v16;
          unsigned int v58 = sub_100166A18(v16);
          unsigned int v59 = sub_100166A18(v57);
          double v60 = ((double)v84 + (double)v54 * 4294967300.0) * 5.42101086e-20 + 0.0;
          double v61 = ((double)v55 + (double)v56 * 4294967300.0) * 5.42101086e-20 + 0.0;
          double v49 = (v61 + v61) * 3.14159265;
          double v62 = (((double)v58 + (double)v59 * 4294967300.0) * 5.42101086e-20 + 0.0) * 2.0 + -1.0 + a3;
          __double2 v63 = __sincos_stret((v60 + v60) * 3.14159265);
          double v83 = a4 + v62 * v63.__cosval;
          double v41 = a5 + v62 * v63.__sinval;
          uint64_t v16 = v57;
        }
        double v64 = 1.0 / (double)v19;
        uint64_t v65 = v87;
        if (v87 >= v88)
        {
          unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87 - (unsigned char *)v86) >> 5);
          unint64_t v68 = v67 + 1;
          if (v67 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1000267C4();
          }
          if (0x5555555555555556 * (((char *)v88 - (unsigned char *)v86) >> 5) > v68) {
            unint64_t v68 = 0x5555555555555556 * (((char *)v88 - (unsigned char *)v86) >> 5);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (unsigned char *)v86) >> 5) >= 0x155555555555555) {
            unint64_t v69 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v69 = v68;
          }
          if (v69) {
            uint64_t v70 = (char *)sub_10037BD4C((uint64_t)&v88, v69);
          }
          else {
            uint64_t v70 = 0;
          }
          double v71 = &v70[32 * (((char *)v87 - (unsigned char *)v86) >> 5)];
          *(double *)double v71 = v83;
          *((double *)v71 + 1) = v40;
          *((double *)v71 + 2) = v41;
          *(_OWORD *)(v71 + 24) = v85;
          *((void *)v71 + 5) = v50;
          *((double *)v71 + 6) = v49;
          *((void *)v71 + 7) = v51;
          *((void *)v71 + 8) = v48;
          *((void *)v71 + 9) = v47;
          *((_DWORD *)v71 + 20) = v46;
          *((_DWORD *)v71 + 21) = v45;
          *((double *)v71 + 11) = v64;
          long long v73 = (double *)v86;
          double v72 = v87;
          long long v74 = &v70[96 * v67];
          if (v87 != v86)
          {
            do
            {
              long long v75 = *((_OWORD *)v72 - 5);
              *((_OWORD *)v74 - 6) = *((_OWORD *)v72 - 6);
              *((_OWORD *)v74 - 5) = v75;
              long long v76 = *((_OWORD *)v72 - 4);
              long long v77 = *((_OWORD *)v72 - 3);
              long long v78 = *((_OWORD *)v72 - 1);
              *((_OWORD *)v74 - 2) = *((_OWORD *)v72 - 2);
              *((_OWORD *)v74 - 1) = v78;
              *((_OWORD *)v74 - 4) = v76;
              *((_OWORD *)v74 - 3) = v77;
              v74 -= 96;
              v72 -= 12;
            }
            while (v72 != v73);
            double v72 = v73;
          }
          long long v66 = (double *)(v71 + 96);
          long long v86 = v74;
          long long v87 = (double *)(v71 + 96);
          uint64_t v88 = (double *)&v70[96 * v69];
          if (v72) {
            operator delete(v72);
          }
        }
        else
        {
          *long long v87 = v83;
          v65[1] = v40;
          v65[2] = v41;
          *(_OWORD *)(v65 + 3) = v85;
          *((void *)v65 + 5) = v50;
          v65[6] = v49;
          *((void *)v65 + 7) = v51;
          *((void *)v65 + 8) = v48;
          *((void *)v65 + 9) = v47;
          *((_DWORD *)v65 + 20) = v46;
          *((_DWORD *)v65 + 21) = v45;
          long long v66 = v65 + 12;
          v65[11] = v64;
        }
        long long v87 = v66;
        ++v33;
        uint64_t v19 = *(void *)(a1 + 32);
      }
      while (v19 > v33);
    }
  }
  sub_10037A8F8(a1, (uint64_t)&v86);
  if (v86)
  {
    long long v87 = (double *)v86;
    operator delete(v86);
  }
  if (__p)
  {
    int v90 = (double *)__p;
    operator delete(__p);
  }
  if (*(void *)buf)
  {
    __int16 v93 = *(char **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_10037A88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10037A8F8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (a1 != a2) {
      sub_10037BD94((char *)a1, *(char **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_10037BF24((void *)a1, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t sub_10037A988(void *a1)
{
  double v2 = (void **)a1[504];
  uint64_t v3 = a1[505];
  a1[508] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      double v2 = (void **)(a1[504] + 8);
      a1[504] = v2;
      unint64_t v4 = a1[505] - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v5 = 64;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v5 = 128;
  }
  a1[507] = v5;
LABEL_8:

  return sub_10037AA1C((uint64_t)a1);
}

uint64_t sub_10037AA1C(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v1 = *(void *)result;
    uint64_t v2 = *(void *)(result + 8);
    if (*(void *)result != v2)
    {
      uint64_t v3 = result + 992;
      do
      {
        double v4 = (double)sub_100166A18(v3);
        __n128 result = sub_100166A18(v3);
        *(double *)(v1 + 56) = (v4 + (double)result * 4294967300.0) * 5.42101086e-20 * 6.28318531 + 0.0;
        v1 += 96;
      }
      while (v1 != v2);
    }
  }
  return result;
}

void sub_10037ABB8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 3972) != 3)
  {
    if (*(unsigned char *)(a1 + 3928)) {
      *(unsigned char *)(a1 + 3928) = 0;
    }
  }
}

__n128 sub_10037ABF8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10037BFA0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  double v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  _OWORD *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_10037AC88(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 3972) != 3)
  {
    if (*(unsigned char *)(a1 + 4392)) {
      sub_10037AA1C(a1);
    }
  }
  uint64_t v4 = (_OWORD *)(a1 + 4360);
  uint64_t v5 = (unsigned char *)(a1 + 4392);
  if (*(unsigned char *)(a1 + 4392))
  {
    double v6 = *(double *)(a2 + 24) - *(double *)(a1 + 4384);
    double v7 = *(double *)a2;
    double v8 = *(double *)a2 - *(double *)(a1 + 4360);
    BOOL v9 = *(_DWORD *)(a1 + 3972) != 3;
    float64x2_t v13 = vsubq_f64(*(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 4368));
    double v14 = v6;
    int v15 = 1;
    double v16 = v7;
    double v17 = v8;
    BOOL v18 = v9;
    sub_10037AD70(a1, (uint64_t)&v13);
    *(_DWORD *)(a1 + 3972) = 3;
    int v10 = *v5;
    long long v11 = *(_OWORD *)(a2 + 16);
    *uint64_t v4 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 4376) = v11;
    if (v10) {
      return;
    }
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 16);
    *uint64_t v4 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 4376) = v12;
  }
  *uint64_t v5 = 1;
}

void sub_10037AD70(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 40);
  if (v2 > 0.0 && *(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = *(void *)(a2 + 32);
    double v6 = sqrt(v2 / 0.1);
    double v7 = v6 * *(double *)(a1 + 96);
    uint64_t v35 = 0;
    double v36 = v7;
    char v37 = 0;
    if (*(unsigned char *)(a2 + 48) && !*(_DWORD *)(a2 + 24)) {
      double v36 = 1.0;
    }
    double v8 = v6 * *(double *)(a1 + 112);
    uint64_t v32 = 0;
    double v33 = v8;
    char v34 = 0;
    *(void *)(a1 + 3920) = v5;
    *(unsigned char *)(a1 + 3928) = 1;
    *(void *)(a1 + 3936) = v5;
    *(unsigned char *)(a1 + 3944) = 1;
    BOOL v9 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void *)(a2 + 40);
      double v18 = *(double *)(a2 + 16);
      double v19 = *(double *)(*(void *)a1 + 64);
      double v20 = sub_10037B918((uint64_t)&v35, a1 + 992, (double *)&v35);
      if (!*(unsigned char *)(a1 + 24)) {
        goto LABEL_28;
      }
      double v21 = v20;
      double v22 = *(double *)a2;
      double v23 = *(double *)(*(void *)a1 + 64);
      double v24 = sub_10037B918((uint64_t)&v35, a1 + 992, (double *)&v35);
      if (!*(unsigned char *)(a1 + 24)) {
        goto LABEL_28;
      }
      uint64_t v25 = **(void **)a1;
      uint64_t v26 = *(void *)(*(void *)a1 + 56);
      uint64_t v27 = *(void *)(*(void *)a1 + 64);
      uint64_t v28 = *(void *)(*(void *)a1 + 16);
      uint64_t v29 = *(void *)(*(void *)a1 + 24);
      uint64_t v30 = *(void *)(*(void *)a1 + 32);
      uint64_t v31 = *(void *)(*(void *)a1 + 40);
      *(_DWORD *)long long buf = 134220544;
      uint64_t v39 = v17;
      __int16 v40 = 2048;
      double v41 = v8;
      __int16 v42 = 2048;
      double v43 = v21 + v18 * v19;
      __int16 v44 = 2048;
      double v45 = v24 + v22 * v23;
      __int16 v46 = 2048;
      uint64_t v47 = v25;
      __int16 v48 = 2048;
      uint64_t v49 = v28;
      __int16 v50 = 2048;
      uint64_t v51 = v26;
      __int16 v52 = 2048;
      uint64_t v53 = v27;
      __int16 v54 = 2048;
      uint64_t v55 = v31;
      __int16 v56 = 2048;
      uint64_t v57 = v29;
      __int16 v58 = 2048;
      uint64_t v59 = v30;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#sa_algo_particlefilter,example deltaT: %f, frameRotNoise: %f, deltaZ: %f, deltaX: %f, px: %f, pz: %f, framerot: %f, stepscale: %f, vel: %f, vx: %f, vz: %f", buf, 0x70u);
    }
    double v10 = *(double *)(a2 + 8) + *(double *)(a1 + 3592);
    *(double *)(a1 + 3592) = v10;
    double v11 = *(double *)(a1 + 3600);
    if (v10 < v11)
    {
      *(double *)(a1 + 3600) = v10;
      double v11 = v10;
    }
    double v12 = *(double *)(a1 + 3608);
    if (v10 > v12)
    {
      *(double *)(a1 + 3608) = v10;
      double v12 = v10;
    }
    if (v12 - v11 > 1.0) {
      *(unsigned char *)(a1 + 3584) = 1;
    }
    if (*(_DWORD *)(a2 + 24))
    {
      uint64_t v32 = 0;
      double v33 = v6 * 0.01;
      char v34 = 0;
      if (*(unsigned char *)(a1 + 24))
      {
        float64x2_t v13 = *(double **)a1;
        double v14 = *(double **)(a1 + 8);
        while (v13 != v14)
        {
          sub_10037B1C4(a1, (double *)a2, v13, (double *)&v35, (double *)&v32, 0);
          v13 += 12;
        }
LABEL_22:
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004354B4();
        }
        return;
      }
    }
    else if (*(unsigned char *)(a1 + 24))
    {
      int v15 = *(double **)a1;
      double v16 = *(double **)(a1 + 8);
      while (v15 != v16)
      {
        sub_10037B1C4(a1, (double *)a2, v15, (double *)&v35, (double *)&v32, 1);
        v15 += 12;
      }
      goto LABEL_22;
    }
LABEL_28:
    sub_10000AE44();
  }
}

void sub_10037B09C(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  double v12 = (unsigned char *)(a1 + 4392);
  if (*(unsigned char *)(a1 + 4392)) {
    unsigned char *v12 = 0;
  }
  float64x2_t v13 = *(void ***)(a1 + 4032);
  uint64_t v14 = *(void *)(a1 + 4040);
  *(void *)(a1 + 4064) = 0;
  unint64_t v15 = v14 - (void)v13;
  if (v15 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      float64x2_t v13 = (void **)(*(void *)(a1 + 4032) + 8);
      *(void *)(a1 + 4032) = v13;
      unint64_t v15 = *(void *)(a1 + 4040) - (void)v13;
    }
    while (v15 > 0x10);
  }
  if (v15 >> 3 == 1)
  {
    uint64_t v16 = 64;
  }
  else
  {
    if (v15 >> 3 != 2) {
      goto LABEL_10;
    }
    uint64_t v16 = 128;
  }
  *(void *)(a1 + 4056) = v16;
LABEL_10:
  if (*(_DWORD *)(a1 + 3972) == 3)
  {
    sub_10037AA1C(a1);
    a3 = 0.0;
    a2 = 0.3;
    if (*v12) {
      unsigned char *v12 = 0;
    }
    char v17 = 1;
  }
  else
  {
    char v17 = 0;
  }
  *(void *)(a1 + 3968) = 0x200000002;
  *(double *)double v18 = a3;
  *(double *)&v18[1] = a4;
  *(double *)&v18[2] = a2;
  int v19 = 0;
  double v20 = a5;
  double v21 = a6;
  char v22 = v17;
  sub_10037AD70(a1, (uint64_t)v18);
}

void sub_10037B1C4(uint64_t a1, double *a2, double *a3, double *a4, double *a5, int a6)
{
  if (a6) {
    double v11 = a3[8];
  }
  else {
    double v11 = 1.0;
  }
  double v12 = a2[2];
  uint64_t v13 = a1 + 992;
  double v14 = sub_10037B918((uint64_t)a4, a1 + 992, a4) + v12 * v11;
  double v15 = *a2;
  double v16 = sub_10037B918((uint64_t)a4, v13, a4) + v15 * v11;
  __double2 v17 = __sincos_stret(a3[7]);
  *a3 = *a3 + v17.__cosval * v16 - v17.__sinval * v14;
  a3[2] = a3[2] + v14 * v17.__cosval + v17.__sinval * v16;
  a3[7] = sub_10037B918((uint64_t)a5, v13, a5) + a3[7];
  double v18 = a2[1] + a3[1];
  a3[1] = v18;
  double v19 = sqrt(a2[5] / 0.1);
  double v20 = *(double *)(a1 + 104);
  v23[0] = 0.0;
  v23[1] = v19 * v20;
  char v24 = 0;
  a3[1] = v18 + sub_10037B918((uint64_t)v23, v13, v23);
  double v21 = a2[5];
  if (v21 > 0.01)
  {
    __double2 v22 = __sincos_stret(a3[7]);
    a3[3] = (v22.__cosval * v16 - v22.__sinval * v14) / v21;
    a3[4] = (v14 * v22.__cosval + v22.__sinval * v16) / v21;
  }
}

uint64_t sub_10037B334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 16;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 32;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_10037B3D8((void **)a1);
  uint64_t result = sub_10037B530(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10037B3D8(void **a1)
{
  if (a1[5])
  {
    sub_10015ED2C((uint64_t)a1, 0);
    sub_100342384(a1, 0);
  }
  else
  {
    uint64_t v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_10037B45C(a1);
}

void sub_10037B45C(void **a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    double v10 = 0;
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)sub_100056BF0(v2, v6);
  uint64_t v8 = a1[1];
  uint64_t v5 = a1[2];
  double v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    double v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  double v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  double v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_10037B530(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_10037B45C((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_10037B5A0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_100056BF0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF8uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF8uLL);
    sub_100151930((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      char v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF8uLL);
  sub_100151A50(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10037B86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10037B8B8(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x49) {
    a2 = 1;
  }
  if (v2 < 0x92) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 73;
  }
  return v4 ^ 1u;
}

double sub_10037B918(uint64_t a1, uint64_t a2, double *a3)
{
  if (*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)(a1 + 24) = 0;
    double v5 = *(double *)(a1 + 16);
  }
  else
  {
    do
    {
      do
      {
        double v7 = (double)sub_100166A18(a2);
        double v8 = (v7 + (double)sub_100166A18(a2) * 4294967300.0) * 5.42101086e-20 * 2.0 + -1.0;
        double v9 = (double)sub_100166A18(a2);
        double v10 = (v9 + (double)sub_100166A18(a2) * 4294967300.0) * 5.42101086e-20 * 2.0 + -1.0;
        double v11 = v10 * v10 + v8 * v8;
      }
      while (v11 > 1.0);
    }
    while (v11 == 0.0);
    double v12 = sqrt(log(v10 * v10 + v8 * v8) * -2.0 / v11);
    *(double *)(a1 + 16) = v10 * v12;
    *(unsigned char *)(a1 + 24) = 1;
    double v5 = v8 * v12;
  }
  return *a3 + v5 * a3[1];
}

void sub_10037BA34(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x33;
  unint64_t v4 = v2 - 51;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    double v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_100056BF0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    double v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_100151930((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      char v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        double v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_100151A50(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10037BD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10037BD4C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_1000257D8();
  }
  return operator new(96 * a2);
}

char *sub_10037BD94(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  double v7 = result;
  uint64_t v8 = *((void *)result + 2);
  double v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 5) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      sub_1000267C4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v12 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_10037BED0(v7, v12);
    BOOL v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    double v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      double v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 5) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[32 * ((v15 - v9) >> 5)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    double v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    double v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

char *sub_10037BED0(void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_1000267C4();
  }
  uint64_t result = (char *)sub_10037BD4C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *sub_10037BF24(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_10037BED0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10037BF84(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10037BFA0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_100056BF0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    size_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_100151930((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      char v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        size_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        size_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_100151A50(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10037C26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10037C2B8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10037BED0(a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_10037C338(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10037C354(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x80) {
    a2 = 1;
  }
  if (v2 < 0x100) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 128;
  }
  return v4 ^ 1u;
}

double sub_10037C3B4(__n128 a1)
{
  return a1.n128_f32[2];
}

double sub_10037C3E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 24) = a2;
  return sub_10033F314(*(int8x16_t *)(a1 + 720), *(int8x16_t *)(a1 + 736), *(__n128 *)(a1 + 752));
}

void sub_10037C418(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x2Au);
}

uint64_t sub_10037C438()
{
  qword_1008AAAF0 = 0;
  qword_1008AAAF8 = 0;
  qword_1008AAB00 = 0;
  uint64_t v0 = operator new(0x40uLL);
  qword_1008AAAF8 = (uint64_t)(v0 + 4);
  qword_1008AAB00 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_1004C3F40;
  v0[1] = unk_1004C3F50;
  v0[2] = xmmword_1004C3F60;
  v0[3] = unk_1004C3F70;
  qword_1008AAAF0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AAAF0, (void *)&_mh_execute_header);
  qword_1008AAB10 = 0;
  unk_1008AAB18 = 0;
  qword_1008AAB08 = 0;
  uint64_t v1 = operator new(0x10uLL);
  qword_1008AAB10 = (uint64_t)(v1 + 1);
  unk_1008AAB18 = v1 + 1;
  _OWORD *v1 = xmmword_1004C3F80;
  qword_1008AAB08 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AAB08, (void *)&_mh_execute_header);
}

uint64_t sub_10037C510(uint64_t a1, uint64_t a2, _OWORD *a3, double a4, double a5)
{
  double v17 = a4;
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t v9 = 0;
    double v8 = 0.0;
    goto LABEL_5;
  }
  double v8 = a5 - *(double *)(a1 + 64);
  uint64_t v9 = 1;
  if (v8 > 0.0)
  {
LABEL_5:
    *(double *)(a1 + 64) = a5;
    *(unsigned char *)(a1 + 72) = 1;
  }
  unint64_t v10 = *(void *)(a1 + 56);
  unint64_t v11 = *(int *)(a1 + 8);
  sub_10037C624(a1 + 16, &v17);
  if (v10 >= v11)
  {
    --*(void *)(a1 + 56);
    sub_1001D14E8((void *)(a1 + 16), 1);
  }
  long long v12 = a3[3];
  void v16[2] = a3[2];
  v16[3] = v12;
  long long v13 = a3[5];
  v16[4] = a3[4];
  void v16[5] = v13;
  long long v14 = a3[1];
  v16[0] = *a3;
  v16[1] = v14;
  return (*(uint64_t (**)(uint64_t, double, uint64_t, uint64_t, _OWORD *, double))(*(void *)a1 + 40))(a1, COERCE_DOUBLE(*(void *)&v8), v9, a2, v16, v17);
}

double sub_10037C624(uint64_t a1, double *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_10037FB90((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (void *)(v5 + 8 * (v4 >> 9));
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 8 * (v4 & 0x1FF);
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  double result = *a2;
  *(double *)(v7 - 8) = *a2;
  uint64_t v9 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 - 1;
  *(void *)(a1 + 40) = v9;
  return result;
}

void sub_10037C6A4(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[80] = 0;
}

double sub_10037C6B0(void *a1, double result)
{
  unint64_t v2 = a1[7];
  if (v2 >= 2)
  {
    uint64_t v3 = a1[3];
    if (a1[4] == v3)
    {
      double v13 = 0.0;
    }
    else
    {
      unint64_t v4 = a1[6];
      uint64_t v5 = (double **)(v3 + 8 * (v4 >> 9));
      unint64_t v6 = *v5;
      uint64_t v7 = v4 & 0x1FF;
      __int16 v8 = v4 + v2;
      unint64_t v9 = (v4 + v2) >> 9;
      unint64_t v10 = &(*v5)[v7];
      uint64_t v11 = v8 & 0x1FF;
      uint64_t v12 = *(void *)(v3 + 8 * v9) + 8 * v11;
      double v13 = 0.0;
      double v14 = 0.0;
      if (v10 != (double *)v12)
      {
        uint64_t v15 = v5;
        do
        {
          double v16 = *v10++;
          double v17 = v16;
          if ((char *)v10 - (char *)v6 == 4096)
          {
            uint64_t v18 = v15[1];
            ++v15;
            unint64_t v6 = v18;
            unint64_t v10 = v18;
          }
          double v14 = v14 + v17;
        }
        while (v10 != (double *)v12);
      }
      double v19 = *v5;
      int64_t v20 = &(*v5)[v7];
      uint64_t v21 = *(void *)(v3 + 8 * v9) + 8 * v11;
      if (v20 != (double *)v21)
      {
        double v22 = v14 / (double)v2;
        double v13 = 0.0;
        do
        {
          double v23 = *v20++;
          double v24 = v23;
          if ((char *)v20 - (char *)v19 == 4096)
          {
            unint64_t v25 = v5[1];
            ++v5;
            double v19 = v25;
            int64_t v20 = v25;
          }
          double v13 = v13 + (v24 - v22) * (v24 - v22);
        }
        while (v20 != (double *)v21);
      }
    }
    return sqrt(v13 / (double)(v2 - 1));
  }
  return result;
}

uint64_t sub_10037C7A8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)a1 = off_100862920;
  long long v3 = *(_OWORD *)(a2 + 144);
  float32x4_t v10[8] = *(_OWORD *)(a2 + 128);
  v10[9] = v3;
  uint64_t v11 = *(void *)(a2 + 160);
  long long v4 = *(_OWORD *)(a2 + 80);
  void v10[4] = *(_OWORD *)(a2 + 64);
  void v10[5] = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  void v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v7;
  __n128 v8 = sub_10037C8F8((uint64_t)v10, a1 + 80);
  *(unsigned char *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0x4059000000000000;
  (*(void (**)(uint64_t, __n128))(*(void *)a1 + 32))(a1, v8);
  return a1;
}

void sub_10037C8AC(_Unwind_Exception *a1)
{
  long long v4 = v3;
  long long v6 = *v4;
  if (*v4)
  {
    v1[38] = v6;
    operator delete(v6);
  }
  void *v1 = off_1008629E0;
  sub_10016CC78(v2);
  _Unwind_Resume(a1);
}

__n128 sub_10037C8F8@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(double *)(a1 + 32) >= 0.0
    || *(double *)(a1 + 24) <= 0.0
    || *(double *)(a1 + 16) < 0.0
    || *(double *)(a1 + 8) < 0.0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid OneStateKalmanFilterParams parameter: innovNegThresholdStd must be negative, innovPosThresholdStd must be positive, measStd cannot be negative, processStd cannot be negative.");
    goto LABEL_8;
  }
  if (!*(void *)(a1 + 64))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid nStartupMeasurements paramter: must be greater than 0");
LABEL_8:
  }
  long long v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 144) = v2;
  *(void *)(a2 + 160) = *(void *)(a1 + 160);
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  long long v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  __n128 result = *(__n128 *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

void sub_10037C9D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_10037C9EC(uint64_t a1, uint64_t a2, char a3, int a4, double a5)
{
  if (a3)
  {
    if (*(double *)&a2 < 0.0)
    {
      LOBYTE(v8) = 0;
      unint64_t v9 = 0;
      return v9 | LOBYTE(v8);
    }
    if (*(double *)&a2 > (double)*(unint64_t *)(a1 + 152))
    {
      unint64_t v14 = *(void *)(a1 + 144);
      uint64_t v15 = qword_1008ABDE0;
      BOOL v16 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
      if (v14 >= 2)
      {
        if (v16)
        {
          LOWORD(v82) = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Filter reset after timeout, gathering startup measurements", (uint8_t *)&v82, 2u);
        }
        *(void *)(a1 + 304) = *(void *)(a1 + 296);
        double v17 = *(void ***)(a1 + 24);
        uint64_t v18 = *(void *)(a1 + 32);
        *(void *)(a1 + 56) = 0;
        unint64_t v19 = v18 - (void)v17;
        if (v19 >= 0x11)
        {
          do
          {
            operator delete(*v17);
            uint64_t v20 = *(void *)(a1 + 32);
            double v17 = (void **)(*(void *)(a1 + 24) + 8);
            *(void *)(a1 + 24) = v17;
            unint64_t v19 = v20 - (void)v17;
          }
          while (v19 > 0x10);
        }
        if (v19 >> 3 == 1)
        {
          uint64_t v21 = 256;
        }
        else
        {
          if (v19 >> 3 != 2)
          {
LABEL_51:
            *(unsigned char *)(a1 + 320) = 1;
            unint64_t v46 = *(double **)(a1 + 304);
            unint64_t v47 = *(void *)(a1 + 312);
            if ((unint64_t)v46 >= v47)
            {
              uint64_t v49 = *(double **)(a1 + 296);
              uint64_t v50 = v46 - v49;
              if ((unint64_t)(v50 + 1) >> 61) {
                sub_1000267C4();
              }
              unint64_t v51 = v47 - (void)v49;
              unint64_t v52 = (uint64_t)(v47 - (void)v49) >> 2;
              if (v52 <= v50 + 1) {
                unint64_t v52 = v50 + 1;
              }
              if (v51 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v53 = v52;
              }
              if (v53)
              {
                long long v54 = (char *)sub_100056BF0(a1 + 312, v53);
                uint64_t v49 = *(double **)(a1 + 296);
                unint64_t v46 = *(double **)(a1 + 304);
              }
              else
              {
                long long v54 = 0;
              }
              long long v78 = (double *)&v54[8 * v50];
              double v79 = &v54[8 * v53];
              double *v78 = a5;
              __int16 v48 = v78 + 1;
              while (v46 != v49)
              {
                uint64_t v80 = *((void *)v46-- - 1);
                *((void *)v78-- - 1) = v80;
              }
              *(void *)(a1 + 296) = v78;
              *(void *)(a1 + 304) = v48;
              *(void *)(a1 + 312) = v79;
              if (v49) {
                operator delete(v49);
              }
            }
            else
            {
              *unint64_t v46 = a5;
              __int16 v48 = v46 + 1;
            }
            *(void *)(a1 + 304) = v48;
            if (*(unsigned char *)(a1 + 256)) {
              *(unsigned char *)(a1 + 256) = 0;
            }
            goto LABEL_98;
          }
          uint64_t v21 = 512;
        }
        *(void *)(a1 + 48) = v21;
        goto LABEL_51;
      }
      if (!v16)
      {
LABEL_39:
        *(void *)(a1 + 264) = *(void *)(a1 + 328);
        *(unsigned char *)(a1 + 272) = 1;
        *(double *)(a1 + 248) = a5;
        *(unsigned char *)(a1 + 256) = 1;
        double v8 = a5;
LABEL_99:
        unint64_t v9 = *(void *)&v8 & 0xFFFFFFFFFFFFFF00;
        return v9 | LOBYTE(v8);
      }
      LOWORD(v82) = 0;
      double v23 = "Filter reset after timeout, startup filtering not enabled";
      double v24 = v15;
      uint32_t v25 = 2;
LABEL_38:
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v82, v25);
      goto LABEL_39;
    }
    if (!*(unsigned char *)(a1 + 320))
    {
      sub_10037D004(a1, *(double *)&a2);
      sub_10037D094(a1, a5);
LABEL_98:
      double v8 = *(double *)(a1 + 248);
      goto LABEL_99;
    }
    uint64_t v26 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v82) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "acquiring startup measurements", (uint8_t *)&v82, 2u);
    }
    uint64_t v27 = *(double **)(a1 + 304);
    unint64_t v28 = *(void *)(a1 + 312);
    if ((unint64_t)v27 >= v28)
    {
      uint64_t v40 = *(double **)(a1 + 296);
      uint64_t v41 = v27 - v40;
      if ((unint64_t)(v41 + 1) >> 61) {
        sub_1000267C4();
      }
      unint64_t v42 = v28 - (void)v40;
      unint64_t v43 = (uint64_t)(v28 - (void)v40) >> 2;
      if (v43 <= v41 + 1) {
        unint64_t v43 = v41 + 1;
      }
      if (v42 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v43;
      }
      if (v44)
      {
        uint64_t v45 = (char *)sub_100056BF0(a1 + 312, v44);
        uint64_t v40 = *(double **)(a1 + 296);
        uint64_t v27 = *(double **)(a1 + 304);
      }
      else
      {
        uint64_t v45 = 0;
      }
      long long v55 = (double *)&v45[8 * v41];
      __int16 v56 = &v45[8 * v44];
      *long long v55 = a5;
      uint64_t v29 = v55 + 1;
      while (v27 != v40)
      {
        uint64_t v57 = *((void *)v27-- - 1);
        *((void *)v55-- - 1) = v57;
      }
      *(void *)(a1 + 296) = v55;
      *(void *)(a1 + 304) = v29;
      *(void *)(a1 + 312) = v56;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      double *v27 = a5;
      uint64_t v29 = v27 + 1;
    }
    *(void *)(a1 + 304) = v29;
    __int16 v58 = *(double **)(a1 + 296);
    unint64_t v59 = v29 - v58;
    if (v59 < *(void *)(a1 + 144) && a4 == 0) {
      goto LABEL_98;
    }
    double v61 = 0.0;
    if (v58 != v29)
    {
      double v62 = *(double **)(a1 + 296);
      do
      {
        double v63 = *v62++;
        double v61 = v61 + v63;
      }
      while (v62 != v29);
    }
    std::__sort<std::__less<double,double> &,double *>();
    uint64_t v65 = *(double **)(a1 + 296);
    double v64 = *(double **)(a1 + 304);
    unint64_t v66 = v64 - v65;
    unint64_t v67 = v66 >> 1;
    if (((v64 - v65) & 8) != 0) {
      double v68 = v65[v67];
    }
    else {
      double v68 = (v65[v67 - 1] + v65[v67]) * 0.5;
    }
    if (v65 == v64)
    {
      double v69 = 0.0;
    }
    else
    {
      double v69 = 0.0;
      do
      {
        double v70 = *v65++;
        double v69 = v69 + (v70 - v61 / (double)v59) * (v70 - v61 / (double)v59);
      }
      while (v65 != v64);
    }
    double v71 = v69 / (double)(v66 - 1);
    if ((a4 & 1) != 0 && (unint64_t v72 = *(void *)(a1 + 144), v66 < v72))
    {
      uint64_t v73 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v82 = 134217984;
        unint64_t v83 = v72;
        long long v74 = "filter initialized by override before all %llu startup measurements were received";
        long long v75 = v73;
        uint32_t v76 = 12;
LABEL_88:
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, v74, (uint8_t *)&v82, v76);
      }
    }
    else
    {
      uint64_t v77 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82) = 0;
        long long v74 = "filter initialized with startup measurements";
        long long v75 = v77;
        uint32_t v76 = 2;
        goto LABEL_88;
      }
    }
    *(void *)(a1 + 304) = *(void *)(a1 + 296);
    *(unsigned char *)(a1 + 320) = 0;
    *(double *)(a1 + 248) = v68;
    *(unsigned char *)(a1 + 256) = 1;
    *(double *)(a1 + 264) = v71;
    *(unsigned char *)(a1 + 272) = 1;
    goto LABEL_98;
  }
  unint64_t v10 = *(void *)(a1 + 144);
  if (v10 < 2 || (a4 & 1) != 0)
  {
    if (!a4) {
      goto LABEL_39;
    }
    uint64_t v22 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    int v82 = 134217984;
    unint64_t v83 = v10;
    double v23 = "filter initialized by override before all %llu startup measurements were received";
    double v24 = v22;
    uint32_t v25 = 12;
    goto LABEL_38;
  }
  uint64_t v11 = *(double **)(a1 + 296);
  *(void *)(a1 + 304) = v11;
  *(unsigned char *)(a1 + 320) = 1;
  unint64_t v12 = *(void *)(a1 + 312);
  if ((unint64_t)v11 >= v12)
  {
    uint64_t v30 = a1 + 312;
    uint64_t v31 = v12 - (void)v11;
    uint64_t v32 = v31 >> 2;
    if ((unint64_t)(v31 >> 2) <= 1) {
      uint64_t v32 = 1;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v32;
    }
    char v34 = (double *)sub_100056BF0(v30, v33);
    uint64_t v35 = *(char **)(a1 + 296);
    uint64_t v36 = *(char **)(a1 + 304);
    double v38 = &v34[v37];
    *char v34 = a5;
    double v13 = v34 + 1;
    while (v36 != v35)
    {
      uint64_t v39 = *((void *)v36 - 1);
      v36 -= 8;
      *((void *)v34-- - 1) = v39;
    }
    *(void *)(a1 + 296) = v34;
    *(void *)(a1 + 304) = v13;
    *(void *)(a1 + 312) = v38;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *uint64_t v11 = a5;
    double v13 = v11 + 1;
  }
  LOBYTE(v8) = 0;
  unint64_t v9 = 0;
  *(void *)(a1 + 304) = v13;
  return v9 | LOBYTE(v8);
}

void sub_10037D004(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 272) && *(unsigned char *)(a1 + 256))
  {
    double v2 = *(double *)(a1 + 120);
    *(double *)(a1 + 248) = v2 * *(double *)(a1 + 248);
    *(unsigned char *)(a1 + 256) = 1;
    *(double *)(a1 + 264) = *(double *)(a1 + 88) * (*(double *)(a1 + 88) * a2) + v2 * *(double *)(a1 + 264) * v2;
    *(unsigned char *)(a1 + 272) = 1;
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100435600();
  }
}

void sub_10037D094(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 272) && *(unsigned char *)(a1 + 256))
  {
    double v2 = *(double *)(a1 + 128);
    double v3 = *(double *)(a1 + 264);
    double v4 = v2 * v3;
    double v5 = *(double *)(a1 + 96) * *(double *)(a1 + 96) + v2 * v3 * v2;
    if (v5 <= 0.0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100435634();
      }
    }
    else
    {
      double v6 = *(double *)(a1 + 248);
      double v7 = a2 - v2 * v6;
      double v8 = v7 * v7 / v5;
      if (v7 < 0.0) {
        double v8 = -v8;
      }
      if (v8 <= -(*(double *)(a1 + 112) * *(double *)(a1 + 112))
        || v8 >= *(double *)(a1 + 104) * *(double *)(a1 + 104)
        || *(double *)(a1 + 136) >= a2)
      {
        unint64_t v9 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)unint64_t v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Estimator: Measurement failed innovation check and will be rejected", v10, 2u);
        }
      }
      else
      {
        *(double *)(a1 + 248) = v6 + v4 / v5 * v7;
        *(unsigned char *)(a1 + 256) = 1;
        *(double *)(a1 + 264) = v3 * (1.0 - v4 / v5 * v2);
        *(unsigned char *)(a1 + 272) = 1;
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
  {
    sub_100435600();
  }
}

unsigned char *sub_10037D1F0(unsigned char *result)
{
  if (result[256]) {
    result[256] = 0;
  }
  if (result[272]) {
    result[272] = 0;
  }
  if (result[288]) {
    result[288] = 0;
  }
  if (result[72]) {
    result[72] = 0;
  }
  return result;
}

uint64_t sub_10037D224(uint64_t a1, uint64_t a2, char a3, double a4, uint64_t a5, uint64_t a6)
{
  double v6 = a4;
  if (*(unsigned char *)(a6 + 88) && *(unsigned char *)(a6 + 16)) {
    double v6 = *(double *)(a6 + 8) + a4;
  }
  if (!*(unsigned char *)(a1 + 184)) {
    goto LABEL_8;
  }
  if (a3 && *(double *)&a2 > 0.0)
  {
    float v8 = *(double *)&a2 / *(float *)(a1 + 84);
    float v9 = powf(*(float *)(a1 + 80), v8);
    double v6 = *(double *)(a1 + 176) * v9 + (float)(1.0 - v9) * v6;
LABEL_8:
    *(double *)(a1 + 176) = v6;
    *(unsigned char *)(a1 + 184) = 1;
  }
  return *(void *)(a1 + 176);
}

void sub_10037D2C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184)) {
    *(unsigned char *)(a1 + 184) = 0;
  }
  double v2 = *(void ***)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 56) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 32);
      double v2 = (void **)(*(void *)(a1 + 24) + 8);
      *(void *)(a1 + 24) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 512;
  }
  *(void *)(a1 + 48) = v6;
}

uint64_t sub_10037D34C(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)a1 = off_100862960;
  *(_DWORD *)(a1 + 80) = 0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  long long v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 219) = 0;
  *(void *)(a1 + 304) = 0x100000003;
  *(void *)(a1 + 280) = off_100861B38;
  *(_OWORD *)(a1 + 288) = xmmword_1004C1B50;
  *(void *)(a1 + 312) = a1 + 320;
  *(void *)(a1 + 368) = 0x300000003;
  *(void *)(a1 + 344) = off_100861B80;
  *(_OWORD *)(a1 + 352) = xmmword_1004C1E40;
  *(void *)(a1 + 376) = a1 + 384;
  *(void *)(a1 + 480) = 0x300000003;
  *(void *)(a1 + 456) = off_100861B80;
  *(_OWORD *)(a1 + 464) = xmmword_1004C1E40;
  *(void *)(a1 + 488) = a1 + 496;
  *(void *)(a1 + 592) = 0x300000003;
  *(void *)(a1 + 568) = off_100861B80;
  *(_OWORD *)(a1 + 576) = xmmword_1004C1E40;
  *(void *)(a1 + 600) = a1 + 608;
  *(void *)(a1 + 704) = 0x300000001;
  *(void *)(a1 + 680) = off_100862708;
  *(_OWORD *)(a1 + 688) = xmmword_1004C2710;
  *(void *)(a1 + 712) = a1 + 720;
  *(void *)(a1 + 768) = 0x300000001;
  *(void *)(a1 + 744) = off_100862708;
  *(_OWORD *)(a1 + 752) = xmmword_1004C2710;
  *(void *)(a1 + 776) = a1 + 784;
  *(void *)(a1 + 832) = 0x100000001;
  *(void *)(a1 + 808) = off_1008620C8;
  *(void *)&long long v10 = 0x100000001;
  *((void *)&v10 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 816) = v10;
  *(void *)(a1 + 840) = a1 + 848;
  sub_10037D6BC(a1);
  return a1;
}

void sub_10037D5B4(_Unwind_Exception *a1)
{
  v1[101] = off_100853598;
  v1[93] = off_100853598;
  v1[85] = off_100853598;
  v1[71] = off_100853598;
  v1[57] = off_100853598;
  v1[43] = off_100853598;
  v1[35] = off_100853598;
  sub_10037FEA4(v3);
  void *v1 = off_1008629E0;
  sub_10016CC78(v2);
  _Unwind_Resume(a1);
}

void sub_10037D6BC(uint64_t a1)
{
  uint64_t v6 = 0x300000003;
  *(void *)long long buf = off_100861B80;
  long long v5 = xmmword_1004C1E40;
  long long v7 = v8;
  sub_1003411F0(buf, 3, 3);
  sub_100341240((uint64_t)buf, 0.0);
  for (int i = 0; i != 3; ++i)
    *(void *)sub_1003802D0((uint64_t)buf, i, i) = 0x3FF0000000000000;
  sub_10034226C(a1 + 456, (uint64_t)buf);
  uint64_t v6 = 0x300000001;
  *(void *)long long buf = off_100862708;
  long long v5 = xmmword_1004C2710;
  long long v7 = v8;
  sub_1003411F0(buf, 1, 3);
  sub_100341240((uint64_t)buf, 0.0);
  sub_10034226C(a1 + 680, (uint64_t)buf);
  *(void *)sub_10034185C(a1 + 680, 0, 0) = 0x3FF0000000000000;
  uint64_t v6 = 0x300000001;
  *(void *)long long buf = off_100862708;
  long long v5 = xmmword_1004C2710;
  long long v7 = v8;
  sub_1003411F0(buf, 1, 3);
  sub_100341240((uint64_t)buf, 0.0);
  sub_10034226C(a1 + 744, (uint64_t)buf);
  *(void *)sub_10034185C(a1 + 744, 0, 1) = 0x3FF0000000000000;
  uint64_t v6 = 0x300000003;
  *(void *)long long buf = off_100861B80;
  long long v5 = xmmword_1004C1E40;
  long long v7 = v8;
  sub_1003411F0(buf, 3, 3);
  sub_100341240((uint64_t)buf, 0.0);
  sub_10034226C(a1 + 568, (uint64_t)buf);
  *(void *)sub_10034185C(a1 + 808, 0, 0) = 0;
  int v3 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "kalman filter matrices initiated", buf, 2u);
  }
}

void sub_10037D930(uint64_t a1)
{
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 219) = 0;
  double v2 = *(void ***)(a1 + 240);
  uint64_t v3 = *(void *)(a1 + 248);
  *(void *)(a1 + 272) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 248);
      double v2 = (void **)(*(void *)(a1 + 240) + 8);
      *(void *)(a1 + 240) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 64;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 128;
  }
  *(void *)(a1 + 264) = v6;
LABEL_8:
  long long v7 = *(void ***)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 56) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 32);
      long long v7 = (void **)(*(void *)(a1 + 24) + 8);
      *(void *)(a1 + 24) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 256;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v11 = 512;
  }
  *(void *)(a1 + 48) = v11;
LABEL_15:
  if (*(unsigned char *)(a1 + 72)) {
    *(unsigned char *)(a1 + 72) = 0;
  }

  sub_10037D6BC(a1);
}

unint64_t sub_10037DA2C(uint64_t a1, uint64_t a2, double *a3, double a4, double a5)
{
  if (!*((unsigned char *)a3 + 88)) {
    sub_100435668();
  }
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t v9 = 0;
    double v8 = 0.0;
    goto LABEL_6;
  }
  double v8 = a5 - *(double *)(a1 + 64);
  uint64_t v9 = 1;
  if (v8 > 0.0)
  {
LABEL_6:
    *(double *)(a1 + 64) = a5;
    *(unsigned char *)(a1 + 72) = 1;
  }
  double v10 = a4;
  if (*((unsigned char *)a3 + 16)) {
    double v10 = a3[1] + a4;
  }
  if (!*((unsigned char *)a3 + 1)) {
    sub_100435694();
  }
  *(double *)&long long v22 = a5;
  *((double *)&v22 + 1) = v10;
  double v23 = a4;
  char v24 = *(unsigned char *)a3;
  sub_10037DC10(a1 + 232, &v22);
  unint64_t v11 = *(void *)(a1 + 272);
  if (v11 > *(int *)(a1 + 8))
  {
    *(void *)(a1 + 272) = v11 - 1;
    sub_100380260((void *)(a1 + 232), 1);
  }
  if (!*((unsigned char *)a3 + 1)) {
    sub_10000AE44();
  }
  int v12 = *(unsigned __int8 *)a3;
  if (v12 == 2)
  {
    int v13 = 1;
    *(unsigned char *)(a1 + 222) = 1;
    if (!*(unsigned char *)(a1 + 221)) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  if (v12 == 1)
  {
    *(unsigned char *)(a1 + 221) = 1;
LABEL_17:
    if (!*(unsigned char *)(a1 + 222))
    {
      *(_DWORD *)(a1 + 80) = 0;
      goto LABEL_24;
    }
    int v13 = 2;
LABEL_19:
    *(_DWORD *)(a1 + 80) = v13;
LABEL_24:
    long long v16 = *((_OWORD *)a3 + 3);
    v21[2] = *((_OWORD *)a3 + 2);
    v21[3] = v16;
    long long v17 = *((_OWORD *)a3 + 5);
    v21[4] = *((_OWORD *)a3 + 4);
    v21[5] = v17;
    long long v18 = *((_OWORD *)a3 + 1);
    v21[0] = *(_OWORD *)a3;
    v21[1] = v18;
    uint64_t v19 = (*(uint64_t (**)(uint64_t, double, uint64_t, uint64_t, _OWORD *, double))(*(void *)a1 + 40))(a1, COERCE_DOUBLE(*(void *)&v8), v9, a2, v21, v10);
    unint64_t v14 = v19 & 0xFFFFFFFFFFFFFF00;
    uint64_t v15 = v19;
    return v15 | v14;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_1004356C0();
  }
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  return v15 | v14;
}

int64x2_t sub_10037DC10(uint64_t a1, _OWORD *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_10037FF4C((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 7));
  uint64_t v7 = *v6 + 32 * (v4 & 0x7F);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  long long v8 = a2[1];
  *(_OWORD *)(v7 - 32) = *a2;
  *(_OWORD *)(v7 - 16) = v8;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1004C4010);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

double sub_10037DC94(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 216)) {
    return 0.0;
  }
  int v1 = *(_DWORD *)(a1 + 80);
  switch(v1)
  {
    case 2:
      uint64_t v3 = a1 + 280;
      double v4 = sub_1002A43C0(a1 + 280, 0);
      return (v4 + sub_1002A43C0(v3, 1u)) * 0.5;
    case 1:
      return sub_1002A43C0(a1 + 280, 1u);
    case 0:
      return sub_1002A43C0(a1 + 280, 0);
  }
  return result;
}

uint64_t sub_10037DD4C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 *a5)
{
  if (!a5[88]) {
    sub_1004356F4();
  }
  if (*(_DWORD *)(a1 + 80) == 2) {
    uint64_t v6 = 152;
  }
  else {
    uint64_t v6 = 88;
  }
  if (*(_DWORD *)(a1 + 80) == 2) {
    uint64_t v7 = a1 + 152;
  }
  else {
    uint64_t v7 = a1 + 88;
  }
  if (!a3)
  {
    *(_DWORD *)(a1 + 216) = 0;
    double v11 = 0.0;
    return *(void *)&v11;
  }
  if (!a5[1]) {
    sub_100435720();
  }
  int v9 = *a5;
  int v10 = *(_DWORD *)(a1 + 216);
  double v11 = 0.0;
  if (v10 == 2)
  {
    if (!sub_10037E2E4((_DWORD *)a1, *(long double *)&a2)) {
      goto LABEL_25;
    }
    long long v12 = *((_OWORD *)a5 + 3);
    v29[2] = *((_OWORD *)a5 + 2);
    double v29[3] = v12;
    long long v13 = *((_OWORD *)a5 + 5);
    v29[4] = *((_OWORD *)a5 + 4);
    v29[5] = v13;
    long long v14 = *((_OWORD *)a5 + 1);
    v29[0] = *(_OWORD *)a5;
    v29[1] = v14;
    if (!sub_10037E6AC(a1, v9, (uint64_t)v29)) {
      goto LABEL_25;
    }
    long long v15 = *((_OWORD *)a5 + 3);
    void v28[2] = *((_OWORD *)a5 + 2);
    v28[3] = v15;
    long long v16 = *((_OWORD *)a5 + 5);
    v28[4] = *((_OWORD *)a5 + 4);
    v28[5] = v16;
    long long v17 = *((_OWORD *)a5 + 1);
    v28[0] = *(_OWORD *)a5;
    v28[1] = v17;
    if ((sub_10037F028(a1, (uint64_t)v28) & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_28;
  }
  if (v10 != 1)
  {
    if (v10) {
      return *(void *)&v11;
    }
    if (sub_10037DFD8(a1))
    {
      *(_DWORD *)(a1 + 216) = 1;
      *(_DWORD *)(a1 + 224) = 0;
      *(unsigned char *)(a1 + 220) = 0;
      return *(void *)&v11;
    }
    goto LABEL_28;
  }
  if (!sub_10037E2E4((_DWORD *)a1, *(long double *)&a2)) {
    goto LABEL_25;
  }
  long long v18 = *((_OWORD *)a5 + 3);
  v30[2] = *((_OWORD *)a5 + 2);
  unsigned __int16 v30[3] = v18;
  long long v19 = *((_OWORD *)a5 + 5);
  v30[4] = *((_OWORD *)a5 + 4);
  v30[5] = v19;
  long long v20 = *((_OWORD *)a5 + 1);
  v30[0] = *(_OWORD *)a5;
  v30[1] = v20;
  if ((sub_10037E6AC(a1, v9, (uint64_t)v30) & 1) == 0) {
    goto LABEL_25;
  }
  sub_10037DC94(a1);
  if (!v22) {
    sub_10043574C();
  }
  if (!a5[32]) {
    sub_100435778();
  }
  if (vabdd_f64(v21, *((double *)a5 + 3)) > *(double *)(v7 + 8))
  {
LABEL_25:
    *(_DWORD *)(a1 + 216) = 0;
    return *(void *)&v11;
  }
  int v23 = *(_DWORD *)(a1 + 224) + 1;
  *(_DWORD *)(a1 + 224) = v23;
  if (v23 != *(_DWORD *)(a1 + v6))
  {
LABEL_28:
    if (*(_DWORD *)(a1 + 216) != 2) {
      return *(void *)&v11;
    }
    goto LABEL_29;
  }
  *(_DWORD *)(a1 + 216) = 2;
LABEL_29:
  int v24 = *(_DWORD *)(a1 + 80);
  switch(v24)
  {
    case 2:
      uint64_t v26 = a1 + 280;
      double v27 = *(double *)sub_1003416AC(v26, 0);
      double v11 = (v27 + *(double *)sub_1003416AC(v26, 1u)) * 0.5;
      break;
    case 1:
      double v11 = *(double *)sub_1003416AC(a1 + 280, 1u);
      break;
    case 0:
      double v11 = *(double *)sub_1003416AC(a1 + 280, 0);
      break;
  }
  return *(void *)&v11;
}

uint64_t sub_10037DFD8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 2) {
    int v1 = (double *)(a1 + 152);
  }
  else {
    int v1 = (double *)(a1 + 88);
  }
  unint64_t v2 = *(void *)(a1 + 272);
  if (v2 < 2) {
    return 0;
  }
  uint64_t v4 = a1;
  unint64_t v5 = *(void *)(a1 + 264);
  uint64_t v6 = *(void *)(a1 + 240);
  uint64_t v7 = *(void *)(v6 + ((v5 >> 4) & 0xFFFFFFFFFFFFFF8));
  uint64_t v8 = v5 & 0x7F;
  int v9 = *(unsigned __int8 *)(v7 + 32 * v8 + 24);
  uint64_t v10 = *(void *)(v6 + (((v5 + 1) >> 4) & 0xFFFFFFFFFFFFFF8));
  uint64_t v11 = (v5 + 1) & 0x7F;
  if (*(unsigned __int8 *)(v10 + 32 * v11 + 24) == v9)
  {
    uint64_t v12 = 1;
    BOOL v13 = 1;
LABEL_12:
    double v15 = *(double *)(v7 + 32 * v8) - *(double *)(v10 + 32 * v11);
    if (v15 > 0.0 && v15 <= v1[7])
    {
      uint64_t v16 = *(void *)(v7 + 32 * v8 + 8);
      *(void *)sub_1003416AC(a1 + 280, 0) = v16;
      uint64_t v17 = *(void *)(*(void *)(*(void *)(v4 + 240) + ((*(void *)(v4 + 264) >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * (*(void *)(v4 + 264) & 0x7FLL)
                      + 8);
      *(void *)sub_1003416AC(v4 + 280, 1u) = v17;
      unint64_t v18 = *(void *)(v4 + 264);
      double v19 = (*(double *)(*(void *)(*(void *)(v4 + 240) + ((v18 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v18 & 0x7F) + 8)
           - *(double *)(*(void *)(*(void *)(v4 + 240) + (((v18 + v12) >> 4) & 0xFFFFFFFFFFFFFF8))
                       + 32 * ((v18 + v12) & 0x7F)
                       + 8))
          / v15;
      *(double *)sub_1003416AC(v4 + 280, 2u) = v19;
      uint64_t v27 = 0x300000003;
      uint32_t v25 = off_100861B80;
      long long v26 = xmmword_1004C1E40;
      unint64_t v28 = &v29;
      sub_1003411F0(&v25, 3, 3);
      sub_100341240((uint64_t)&v25, 0.0);
      for (int i = 0; i != 3; ++i)
        *(void *)sub_1003802D0((uint64_t)&v25, i, i) = 0x3FF0000000000000;
      uint64_t v21 = v4 + 344;
      sub_10034226C(v4 + 344, (uint64_t)&v25);
      double v22 = v1[3] * v1[3];
      *(double *)sub_10034185C(v4 + 344, 2, 2) = v22;
      double v23 = v1[2];
      if (*(unsigned char *)(*(void *)(*(void *)(v4 + 240) + ((*(void *)(v4 + 264) >> 4) & 0xFFFFFFFFFFFFFF8))
                    + 32 * (*(void *)(v4 + 264) & 0x7FLL)
                    + 24) == 1)
      {
        *(double *)sub_10034185C(v4 + 344, 0, 0) = v23 * v23;
        double v24 = v1[2] + v1[2];
      }
      else
      {
        *(double *)sub_10034185C(v4 + 344, 0, 0) = (v23 + v23) * (v23 + v23);
        double v24 = v1[2];
      }
      LODWORD(v4) = 1;
      *(double *)sub_10034185C(v21, 1, 1) = v24 * v24;
    }
    else
    {
      LODWORD(v4) = 0;
    }
  }
  else
  {
    uint64_t v14 = 2;
    while (v2 != v14)
    {
      uint64_t v10 = *(void *)(v6 + (((v5 + v14) >> 4) & 0xFFFFFFFFFFFFFF8));
      uint64_t v11 = (v5 + v14++) & 0x7F;
      if (*(unsigned __int8 *)(v10 + 32 * v11 + 24) == v9)
      {
        uint64_t v12 = v14 - 1;
        BOOL v13 = v2 > v14 - 1;
        goto LABEL_12;
      }
    }
    BOOL v13 = 0;
  }
  return v13 & v4;
}

uint64_t sub_10037E2E4(_DWORD *a1, long double a2)
{
  if (a1[20] == 2) {
    unint64_t v2 = (double *)(a1 + 38);
  }
  else {
    unint64_t v2 = (double *)(a1 + 22);
  }
  if (a2 <= 0.0 || v2[7] < a2) {
    return 0;
  }
  uint64_t v25 = 0x300000003;
  long long v24 = xmmword_1004C1E40;
  double v23 = off_100861B80;
  long long v26 = v27;
  sub_1003411F0(&v23, 3, 3);
  sub_100341240((uint64_t)&v23, 0.0);
  for (int i = 0; i != 3; ++i)
    *(void *)sub_1003802D0((uint64_t)&v23, i, i) = 0x3FF0000000000000;
  sub_10034226C((uint64_t)(a1 + 114), (uint64_t)&v23);
  *(long double *)sub_10034185C((uint64_t)(a1 + 114), 0, 2) = a2;
  uint64_t v4 = 1;
  *(long double *)sub_10034185C((uint64_t)(a1 + 114), 1, 2) = a2;
  uint64_t v25 = 0x100000003;
  long long v24 = xmmword_1004C1B50;
  double v23 = off_100861B38;
  long long v26 = v27;
  sub_1003419A0((uint64_t)(a1 + 114), (uint64_t)(a1 + 70), (uint64_t)&v23);
  sub_10034226C((uint64_t)(a1 + 70), (uint64_t)&v23);
  double v7 = v2[4];
  double v8 = pow(a2, 3.0);
  uint64_t v25 = 0x300000003;
  long long v24 = xmmword_1004C1E40;
  double v23 = off_100861B80;
  long long v26 = v27;
  sub_1003411F0(&v23, 3, 3);
  sub_100341240((uint64_t)&v23, 0.0);
  sub_10034226C((uint64_t)(a1 + 142), (uint64_t)&v23);
  long double v9 = a2 * a2 * v7 * 0.5;
  double v10 = v8 * v7 / 3.0;
  *(double *)sub_10034185C((uint64_t)(a1 + 142), 1, 1) = v10;
  *(double *)sub_10034185C((uint64_t)(a1 + 142), 0, 0) = v10;
  *(long double *)sub_10034185C((uint64_t)(a1 + 142), 2, 2) = v7 * a2;
  *(long double *)sub_10034185C((uint64_t)(a1 + 142), 2, 1) = v9;
  *(long double *)sub_10034185C((uint64_t)(a1 + 142), 2, 0) = v9;
  *(long double *)sub_10034185C((uint64_t)(a1 + 142), 1, 2) = v9;
  *(long double *)sub_10034185C((uint64_t)(a1 + 142), 0, 2) = v9;
  uint64_t v15 = 0x300000003;
  BOOL v13 = off_100861B80;
  long long v14 = xmmword_1004C1E40;
  uint64_t v16 = &v17;
  sub_1003419A0((uint64_t)(a1 + 114), (uint64_t)(a1 + 86), (uint64_t)&v13);
  sub_100341794((uint64_t)v12, a1[117], a1[116]);
  sub_1003416E8((uint64_t)(a1 + 114), v12);
  uint64_t v20 = 0x300000003;
  long long v19 = xmmword_1004C1E40;
  unint64_t v18 = off_100861B80;
  uint64_t v21 = &v22;
  sub_1003419A0((uint64_t)&v13, (uint64_t)v12, (uint64_t)&v18);
  uint64_t v25 = 0x300000003;
  long long v24 = xmmword_1004C1E40;
  double v23 = off_100861B80;
  long long v26 = v27;
  sub_100342718((uint64_t)&v18, (uint64_t)(a1 + 142), (uint64_t)&v23);
  sub_10034226C((uint64_t)(a1 + 86), (uint64_t)&v23);
  return v4;
}

uint64_t sub_10037E6AC(uint64_t a1, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 80) == 2) {
    uint64_t v3 = a1 + 152;
  }
  else {
    uint64_t v3 = a1 + 88;
  }
  if ((a2 - 3) <= 0xFFFFFFFD) {
    sub_1004357A4();
  }
  if (a2 == 1) {
    uint64_t v6 = a1 + 680;
  }
  else {
    uint64_t v6 = a1 + 744;
  }
  sub_1003682D0((uint64_t)v44, v6);
  if (*(unsigned char *)(a3 + 88) && *(unsigned char *)(a3 + 48))
  {
    double v7 = *(double *)(a3 + 40);
    double v8 = (double *)sub_1003416AC(a1 + 808, 0);
  }
  else
  {
    double v7 = *(double *)(v3 + 40);
    double v8 = (double *)sub_10034185C(a1 + 808, 0, 0);
  }
  double *v8 = v7 * v7;
  uint64_t v31 = 0x300000001;
  long long v30 = xmmword_1004C2710;
  *(void *)long long buf = off_100862708;
  uint64_t v32 = v33;
  sub_1003419A0((uint64_t)v44, a1 + 344, (uint64_t)buf);
  sub_100380314((uint64_t)&v24, v46, v45);
  sub_1003416E8((uint64_t)v44, &v24);
  uint64_t v21 = 0x100000001;
  long long v19 = off_1008620C8;
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  long long v20 = v9;
  uint64_t v22 = &v23;
  sub_1003419A0((uint64_t)buf, (uint64_t)&v24, (uint64_t)&v19);
  uint64_t v41 = 0x100000001;
  *(void *)&long long v10 = 0x100000001;
  *((void *)&v10 + 1) = 0x100000001;
  long long v40 = v10;
  uint64_t v39 = off_1008620C8;
  unint64_t v42 = &v43;
  sub_100342718((uint64_t)&v19, a1 + 808, (uint64_t)&v39);
  double v11 = sub_1002A43FC((uint64_t)&v39, 0, 0);
  uint64_t result = 0;
  if (v11 > 0.0)
  {
    sub_100380314((uint64_t)&v19, v46, v45);
    sub_1003416E8((uint64_t)v44, &v19);
    uint64_t v26 = 0x100000003;
    long long v25 = xmmword_1004C1B50;
    long long v24 = off_100861B38;
    uint64_t v27 = &v28;
    sub_1003419A0(a1 + 344, (uint64_t)&v19, (uint64_t)&v24);
    uint64_t v36 = 0x100000001;
    *(void *)&long long v13 = 0x100000001;
    *((void *)&v13 + 1) = 0x100000001;
    long long v35 = v13;
    char v34 = off_1008620C8;
    uint64_t v37 = &v38;
    uint64_t v16 = 0x100000001;
    long long v14 = off_100862AD0;
    long long v15 = v13;
    uint64_t v17 = &v18;
    uint64_t v31 = 0x100000004;
    long long v30 = xmmword_1004C1B60;
    *(void *)long long buf = off_100861BC8;
    uint64_t v32 = v33;
    sub_1003517F4((uint64_t)&v39, (uint64_t)&v14, (uint64_t)buf, (uint64_t)&v34);
  }
  return result;
}

uint64_t sub_10037F028(uint64_t a1, uint64_t a2)
{
  sub_10037DC94(a1);
  if (!v4) {
    return 1;
  }
  if (!*(unsigned char *)(a2 + 88)) {
    return 1;
  }
  if (!*(unsigned char *)(a2 + 32)) {
    return 1;
  }
  double v5 = v3;
  if (v3 >= 0.15) {
    return 1;
  }
  double v6 = *(double *)(a2 + 24);
  if (vabdd_f64(v3, v6) <= 0.35) {
    return 1;
  }
  double v7 = qword_1008ABDE0;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v8)
  {
    int v10 = 134218240;
    double v11 = v5;
    __int16 v12 = 2048;
    double v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "boundary check fails, filtered range: %.2f, expected range: %.2f", (uint8_t *)&v10, 0x16u);
    return 0;
  }
  return result;
}

void sub_10037F140(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)a1 = off_1008629A0;
  *(unsigned char *)(a1 + 80) = *a3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  operator new();
}

void sub_10037F250()
{
}

uint64_t sub_10037F324(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v6 = *(void *)(a1 + 112);
  if (v6 && *(void *)(a1 + 120))
  {
    if (*(unsigned char *)(a3 + 88))
    {
      if (!*(unsigned char *)(a3 + 1)) {
        sub_100435854();
      }
      sub_1003805DC((uint64_t **)(a1 + 88), (unsigned __int8 *)a3, (unsigned char *)a3);
      uint64_t v6 = *(void *)(a1 + 112);
    }
    long long v11 = *(_OWORD *)(a3 + 16);
    v35[0] = *(_OWORD *)a3;
    v35[1] = v11;
    long long v12 = *(_OWORD *)(a3 + 80);
    v35[4] = *(_OWORD *)(a3 + 64);
    v35[5] = v12;
    long long v13 = *(_OWORD *)(a3 + 48);
    unsigned __int16 v35[2] = *(_OWORD *)(a3 + 32);
    v35[3] = v13;
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, double, double))(*(void *)v6 + 16))(v6, a2, v35, a4, a5);
    if (!v15) {
      sub_100435828();
    }
    std::string::size_type v16 = v14;
    double v17 = *(double *)&v14;
    if (!*(unsigned char *)(a1 + 80))
    {
      if (!*(unsigned char *)(a3 + 88))
      {
        *(void *)(a3 + 80) = 0;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        *(unsigned char *)(a3 + 88) = 1;
      }
      *(void *)(a3 + 24) = v14;
      *(unsigned char *)(a3 + 32) = 1;
      uint64_t v19 = *(void *)(a1 + 120);
      long long v20 = *(_OWORD *)(a3 + 80);
      v34[4] = *(_OWORD *)(a3 + 64);
      v34[5] = v20;
      long long v21 = *(_OWORD *)(a3 + 16);
      v34[0] = *(_OWORD *)a3;
      v34[1] = v21;
      long long v22 = *(_OWORD *)(a3 + 48);
      void v34[2] = *(_OWORD *)(a3 + 32);
      v34[3] = v22;
      double v23 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, double, double))(*(void *)v19 + 16))(v19, a2, v34, a4, a5));
      char v25 = v24;
      uint64_t v26 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        if (v25)
        {
          std::to_string(&v36, v23);
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = &v36;
          }
          else {
            uint64_t v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)long long buf = 134218242;
          std::string::size_type v39 = v16;
          __int16 v40 = 2080;
          uint64_t v41 = (const char *)v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "exp filter output: %f, kalman filter output: %s", buf, 0x16u);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          *(_DWORD *)long long buf = 134218242;
          std::string::size_type v39 = v16;
          __int16 v40 = 2080;
          uint64_t v41 = "N/A";
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "exp filter output: %f, kalman filter output: %s", buf, 0x16u);
        }
      }
      if (!*(unsigned char *)(a3 + 88)) {
        sub_10000AE44();
      }
      if (*(unsigned char *)(a3 + 80))
      {
        int v28 = *(_DWORD *)(a3 + 56);
        std::string::size_type v29 = *(void *)(a3 + 72);
        if (v25)
        {
          int v30 = sub_1003896D4(v28, v23, *(double *)(a3 + 72));
          uint64_t v31 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v36.__r_.__value_.__l.__data_) = 134218496;
            *(double *)((char *)v36.__r_.__value_.__r.__words + 4) = v23;
            WORD2(v36.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 6) = v29;
            HIWORD(v36.__r_.__value_.__r.__words[2]) = 1024;
            int v37 = v30;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "kf range_m %.2f, mfs %.1f, check result %d", (uint8_t *)&v36, 0x1Cu);
          }
          if (v30) {
            double v17 = v23;
          }
          else {
            double v17 = 0.0;
          }
        }
        else
        {
          int v32 = sub_1003896D4(v28, v17, *(double *)(a3 + 72));
          unint64_t v33 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v36.__r_.__value_.__l.__data_) = 134218496;
            *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 4) = v16;
            WORD2(v36.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 6) = v29;
            HIWORD(v36.__r_.__value_.__r.__words[2]) = 1024;
            int v37 = v32;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "ef range_m %.2f, mfs %.1f, check result %d", (uint8_t *)&v36, 0x1Cu);
          }
          if (!v32) {
            double v17 = 0.0;
          }
        }
      }
      else if (v25)
      {
        double v17 = v23;
      }
    }
  }
  else
  {
    double v17 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_1004357F4();
    }
  }
  return *(void *)&v17;
}

void sub_10037F760(void *a1)
{
  uint64_t v2 = a1[14];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  uint64_t v3 = a1[15];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  double v5 = (void *)a1[12];
  char v4 = a1 + 12;
  sub_10003E96C((uint64_t)(v4 - 1), v5);
  *(v4 - 1) = v4;
  *char v4 = 0;
  v4[1] = 0;
}

void sub_10037F7EC()
{
}

void *sub_10037F818(void *a1)
{
  *a1 = off_1008629E0;
  sub_10016CC78(a1 + 2);
  return a1;
}

void sub_10037F85C(void *a1)
{
  *a1 = off_1008629E0;
  sub_10016CC78(a1 + 2);

  operator delete();
}

void sub_10037F8C4(void *a1)
{
  sub_10035DD5C(a1);

  operator delete();
}

void sub_10037F900(void *a1)
{
  sub_10037F974(a1);

  operator delete();
}

void sub_10037F93C(uint64_t a1)
{
  sub_10037FAC0(a1);

  operator delete();
}

void *sub_10037F974(void *a1)
{
  *a1 = off_100862960;
  a1[101] = off_100853598;
  a1[93] = off_100853598;
  a1[85] = off_100853598;
  a1[71] = off_100853598;
  a1[57] = off_100853598;
  a1[43] = off_100853598;
  a1[35] = off_100853598;
  sub_10037FEA4(a1 + 29);
  *a1 = off_1008629E0;
  sub_10016CC78(a1 + 2);
  return a1;
}

uint64_t sub_10037FAC0(uint64_t a1)
{
  *(void *)a1 = off_1008629A0;
  uint64_t v2 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_10003E96C(a1 + 88, *(void **)(a1 + 96));
  *(void *)a1 = off_1008629E0;
  sub_10016CC78((void *)(a1 + 16));
  return a1;
}

void sub_10037FB90(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = ((v3 - v2) << 6) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x200)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    BOOL v8 = a1[3];
    long long v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unsigned int v46 = a1 + 3;
      stat __p = sub_100056BF0(v7, v11);
      uint64_t v43 = (char *)__p;
      unint64_t v44 = (char *)__p;
      unsigned int v45 = (char *)__p + 8 * v12;
      uint64_t v41 = operator new(0x1000uLL);
      sub_100151A50(&__p, &v41);
      long long v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              char v24 = (char *)sub_100056BF0((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                std::string::size_type v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)std::string::size_type v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              uint64_t v31 = __p;
              stat __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              unint64_t v44 = v14;
              unsigned int v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              long long v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              long long v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              unint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      std::string v36 = *a1;
      int v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      stat __p = v36;
      uint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      std::string::size_type v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      unint64_t v44 = v13;
      unsigned int v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 256;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        unint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        stat __p = operator new(0x1000uLL);
        sub_100151818(a1, &__p);
        char v34 = a1[2];
        stat __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        stat __p = operator new(0x1000uLL);
      }
      sub_100151930((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 256;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 512;
    stat __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100151930((uint64_t)a1, &__p);
  }
}

void sub_10037FE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10037FEA4(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 64;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 128;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_10003ACC4((uint64_t)a1);
}

void sub_10037FF4C(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 16 * (v3 - v2) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x80)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    BOOL v8 = a1[3];
    long long v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unsigned int v46 = a1 + 3;
      stat __p = sub_100056BF0(v7, v11);
      uint64_t v43 = (char *)__p;
      unint64_t v44 = (char *)__p;
      unsigned int v45 = (char *)__p + 8 * v12;
      uint64_t v41 = operator new(0x1000uLL);
      sub_100151A50(&__p, &v41);
      long long v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              char v24 = (char *)sub_100056BF0((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                std::string::size_type v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)std::string::size_type v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              uint64_t v31 = __p;
              stat __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              unint64_t v44 = v14;
              unsigned int v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              long long v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              long long v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              unint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      std::string v36 = *a1;
      int v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      stat __p = v36;
      uint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      std::string::size_type v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      unint64_t v44 = v13;
      unsigned int v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 64;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 128;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        unint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        stat __p = operator new(0x1000uLL);
        sub_100151818(a1, &__p);
        char v34 = a1[2];
        stat __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        stat __p = operator new(0x1000uLL);
      }
      sub_100151930((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 64;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 128;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 128;
    stat __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100151930((uint64_t)a1, &__p);
  }
}

void sub_100380214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100380260(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 16 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x80) {
    a2 = 1;
  }
  if (v5 < 0x100) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t sub_1003802D0(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_100435880();
  }
  unsigned int v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0) {
    sub_1004358AC();
  }
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16)) {
    sub_1004358D8();
  }
  return v3 + 8 * v4;
}

uint64_t sub_100380314(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000003;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_100861B38;
  if (a2 > 3)
  {
    uint64_t v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 2)
  {
    uint64_t v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1003803C0(_Unwind_Exception *a1)
{
  void *v1 = off_100853598;
  _Unwind_Resume(a1);
}

void *sub_1003803E0(void *result)
{
  char *result = off_100862050;
  return result;
}

void sub_100380400(void *a1)
{
  *a1 = off_100862050;
  operator delete();
}

uint64_t sub_100380430(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_10038043C(uint64_t a1)
{
  sub_100351B60(a1, &v1);
}

_DWORD *sub_100380460(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 == a2) {
    sub_100435904();
  }
  uint64_t result = sub_1003411F0((_DWORD *)a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  uint64_t v7 = *(unsigned int *)(a2 + 16);
  if ((int)v7 >= 1)
  {
    BOOL v8 = *(double **)(a1 + 32);
    long long v9 = *(double **)(a2 + 32);
    do
    {
      double v10 = *v8++;
      *v9++ = a3 - v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

float sub_1003804D0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)a1 = off_100862A30;
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 96) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 128) = v4;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  float v6 = *(float *)(a1 + 80);
  uint64_t v7 = "_config.alpha >= 0.0 && _config.alpha <= 1.0";
  int v8 = 188;
  if (v6 < 0.0 || v6 > 1.0) {
LABEL_5:
  }
    __assert_rtn("TimeDependentExpFilter", "NRBYEstimator.h", v8, v7);
  float result = *(float *)(a1 + 84);
  if (result <= 0.0)
  {
    uint64_t v7 = "_config.nominalUpdateIntervalSeconds > 0.0";
    int v8 = 189;
    goto LABEL_5;
  }
  return result;
}

void sub_1003805AC(_Unwind_Exception *a1)
{
  void *v1 = off_1008629E0;
  sub_10016CC78(v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_1003805DC(uint64_t **a1, unsigned __int8 *a2, unsigned char *a3)
{
  float v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        float v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        float v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    double v10 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v10 + 25) = *a3;
    sub_100026D98(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t sub_100380698()
{
  v8[0] = xmmword_1004C4020;
  v8[1] = unk_1004C4030;
  sub_1001A003C((uint64_t)&unk_1008AAB40, (int *)v8, 4);
  xmmword_1008AAB58 = xmmword_1004B7660;
  unk_1008AAB68 = xmmword_1004B7670;
  qword_1008AAB80 = 0;
  unk_1008AAB88 = 0;
  qword_1008AAB78 = 0x3FD999999999999ALL;
  unk_1008AAB90 = xmmword_1004B7680;
  dword_1008AABA0 = 5;
  qword_1008AABA8 = 0x4000000000000000;
  dword_1008AABB0 = 5;
  byte_1008AABB8 = 0;
  unk_1008AABBC = 0x30000000ALL;
  xmmword_1008AABC8 = xmmword_1004B7690;
  unk_1008AABD8 = xmmword_1004B76A0;
  xmmword_1008AABE8 = xmmword_1004B76B0;
  qword_1008AABF8 = 0x3FE3333333333333;
  dword_1008AAC00 = 3;
  xmmword_1008AAC08 = xmmword_1004B76C0;
  unk_1008AAC18 = xmmword_1004B76A0;
  xmmword_1008AAC28 = xmmword_1004B7690;
  qword_1008AAC38 = 0x3FE3333333333333;
  byte_1008AAC40 = 0;
  xmmword_1008AAC48 = xmmword_1004B76D0;
  unk_1008AAC58 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v6 = _Q0;
  xmmword_1008AAC68 = _Q0;
  qword_1008AAC78 = 0xBFD3333333333333;
  xmmword_1008AAC80 = xmmword_1004B76F0;
  qword_1008AAC90 = 0x3E99999A40000000;
  xmmword_1008AAC98 = xmmword_1004B7670;
  qword_1008AACB0 = 0;
  unk_1008AACB8 = 0;
  qword_1008AACA8 = 0x3FD999999999999ALL;
  xmmword_1008AACC0 = xmmword_1004B7680;
  dword_1008AACD0 = 5;
  qword_1008AACD8 = 0x4000000000000000;
  dword_1008AACE0 = 4;
  qword_1008AACE8 = 0x300000008;
  qword_1008AACF0 = 0xC04E800000000000;
  unint64_t v7 = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)&unk_1008AACF8, (double *)&v7, 1);
  xmmword_1008AAD10 = xmmword_1004B7700;
  qword_1008AAD20 = 0x4024000000000000;
  dword_1008AAD28 = 45;
  byte_1008AAD30 = 0;
  byte_1008AAD48 = 0;
  qword_1008AAD50 = 0;
  byte_1008AAD58 = 0;
  dword_1008AAD5C = 1;
  byte_1008AAD60 = 1;
  xmmword_1008AAD68 = xmmword_1004B7710;
  unk_1008AAD78 = xmmword_1004B7720;
  xmmword_1008AAD88 = v6;
  qword_1008AAD98 = 0xC059000000000000;
  xmmword_1008AADA0 = xmmword_1004B7730;
  qword_1008AADB0 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008AADB8 = xmmword_1004B7670;
  qword_1008AADC8 = 0x3FD999999999999ALL;
  qword_1008AADD8 = 0;
  qword_1008AADD0 = 0;
  xmmword_1008AADE0 = xmmword_1004B7680;
  dword_1008AADF0 = 5;
  qword_1008AADF8 = 0x4000000000000000;
  dword_1008AAE00 = 10;
  qword_1008AAE08 = 0x4034000000000000;
  dword_1008AAE10 = 3;
  xmmword_1008AAE18 = xmmword_1004B7740;
  return __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008AAB40, (void *)&_mh_execute_header);
}

void sub_10038094C(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_10038096C(int *a1, unsigned char *a2)
{
  if (*a2 && !a2[4] && a2[3])
  {
    sub_1003809BC(a1, a2);
    return *a1;
  }
  else
  {
    uint64_t result = 0;
    *a1 = 0;
  }
  return result;
}

int *sub_1003809BC(int *result, unsigned char *a2)
{
  switch(*result)
  {
    case 0:
      if (a2[2]) {
        goto LABEL_20;
      }
      if (a2[1])
      {
        int v2 = 1;
        goto LABEL_21;
      }
      break;
    case 1:
      if (a2[2]) {
        goto LABEL_20;
      }
      break;
    case 2:
      if (a2[1]) {
        BOOL v3 = 0;
      }
      else {
        BOOL v3 = a2[2] == 0;
      }
      if (v3 && a2[5] != 0 && a2[6] == 0)
      {
        int v2 = 3;
        goto LABEL_21;
      }
      break;
    case 3:
      if (!a2[5])
      {
LABEL_20:
        int v2 = 2;
LABEL_21:
        _DWORD *result = v2;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100380A5C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)a1 = off_100862B18;
  sub_10035B66C((unsigned char *)(a1 + 48));
  sub_100375200(a1 + 448, a2 + 64);
  sub_10033BCC8(a1 + 4944, *(unsigned __int8 *)(a2 + 2), *(unsigned __int8 *)(a2 + 3), *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 176), *(unsigned __int8 *)(a2 + 192));
  sub_100396878(a1 + 5504, *(unsigned __int8 *)(a2 + 176), *(unsigned __int8 *)(a2 + 192));
  *(unsigned char *)(a1 + 6000) = 0;
  *(unsigned char *)(a1 + 6032) = 0;
  *(unsigned char *)(a1 + 6040) = 0;
  *(unsigned char *)(a1 + 6056) = 0;
  *(unsigned char *)(a1 + 6064) = 0;
  *(unsigned char *)(a1 + 6144) = 0;
  *(unsigned char *)(a1 + 6152) = 0;
  *(unsigned char *)(a1 + 6156) = 0;
  sub_100387EA4(a1 + 6160);
  sub_10036D31C(a1 + 6528);
  *(unsigned char *)(a1 + 7688) = 0;
  *(unsigned char *)(a1 + 7696) = 0;
  *(unsigned char *)(a1 + 7704) = 0;
  *(unsigned char *)(a1 + 7712) = 0;
  *(unsigned char *)(a1 + 7720) = 0;
  *(unsigned char *)(a1 + 7728) = 0;
  *(unsigned char *)(a1 + 7736) = 0;
  *(unsigned char *)(a1 + 7744) = 0;
  *(unsigned char *)(a1 + 7752) = 0;
  *(unsigned char *)(a1 + 7760) = 0;
  *(unsigned char *)(a1 + 7768) = 0;
  *(_OWORD *)(a1 + 7632) = 0u;
  *(_OWORD *)(a1 + 7648) = 0u;
  *(_OWORD *)(a1 + 7664) = 0u;
  *(unsigned char *)(a1 + 7680) = 0;
  sub_10038D36C(a1 + 7776, (__n128 *)(a2 + 160));
  *(unsigned char *)(a1 + 7832) = 0;
  *(unsigned char *)(a1 + 7848) = 0;
  *(unsigned char *)(a1 + 7856) = 0;
  *(unsigned char *)(a1 + 8040) = 0;
  *(unsigned char *)(a1 + 8160) = 0;
  *(unsigned char *)(a1 + 8208) = 0;
  *(unsigned char *)(a1 + 8216) = 0;
  *(unsigned char *)(a1 + 8264) = 0;
  *(_DWORD *)(a1 + 8272) = 0;
  *(unsigned char *)(a1 + 8276) = 0;
  *(_WORD *)(a1 + 8304) = 0;
  *(unsigned char *)(a1 + 8312) = 0;
  *(unsigned char *)(a1 + 8360) = 0;
  *(unsigned char *)(a1 + 8368) = 0;
  *(unsigned char *)(a1 + 8376) = 0;
  *(unsigned char *)(a1 + 8384) = 0;
  *(unsigned char *)(a1 + 8392) = 0;
  *(unsigned char *)(a1 + 8400) = 0;
  *(unsigned char *)(a1 + 8432) = 0;
  *(unsigned char *)(a1 + 8464) = 0;
  *(unsigned char *)(a1 + 8472) = 0;
  *(unsigned char *)(a1 + 8480) = 0;
  *(unsigned char *)(a1 + 8488) = 0;
  *(unsigned char *)(a1 + 8496) = 0;
  *(_OWORD *)(a1 + 8048) = 0u;
  *(_OWORD *)(a1 + 8064) = 0u;
  *(_OWORD *)(a1 + 8080) = 0u;
  *(_OWORD *)(a1 + 8096) = 0u;
  *(_OWORD *)(a1 + 8112) = 0u;
  *(_OWORD *)(a1 + 8128) = 0u;
  *(_WORD *)(a1 + 8144) = 0;
  *(_OWORD *)(a1 + 8440) = 0u;
  *(unsigned char *)(a1 + 8456) = 0;
  *(_DWORD *)(a1 + 8512) = 16843009;
  *(unsigned char *)(a1 + 8516) = 1;
  *(_WORD *)(a1 + 8517) = 256;
  *(void *)(a1 + 8520) = 0x3FF0000000000000;
  *(int64x2_t *)(a1 + 8528) = vdupq_n_s64(0x404A000000000000uLL);
  *(_OWORD *)(a1 + 8544) = xmmword_1004C4130;
  __asm { FMOV            V0.2D, #2.0 }
  *(_OWORD *)(a1 + 8560) = _Q0;
  *(_WORD *)(a1 + 8576) = 0;
  *(void *)(a1 + 8584) = 0x3FA999999999999ALL;
  *(void *)(a1 + 8592) = 20000;
  *(void *)(a1 + 8600) = 0x3FA47AE147AE147BLL;
  *(_OWORD *)(a1 + 8608) = xmmword_1004C4140;
  *(_OWORD *)(a1 + 8624) = xmmword_1004C4150;
  *(_OWORD *)(a1 + 8640) = xmmword_1004C4160;
  *(void *)(a1 + 8656) = 0x3FD0000000000000;
  *(unsigned char *)(a1 + 8664) = 1;
  *(_OWORD *)(a1 + 8672) = xmmword_1004C09B0;
  *(unsigned char *)(a1 + 8688) = 1;
  *(void *)(a1 + 8696) = 0x4024000000000000;
  *(_WORD *)(a1 + 8704) = 256;
  *(unsigned char *)(a1 + 8712) = 0;
  *(unsigned char *)(a1 + 8720) = 0;
  *(unsigned char *)(a1 + 8848) = 0;
  *(unsigned char *)(a1 + 8864) = 0;
  *(_WORD *)(a1 + 8872) = 0;
  *(unsigned char *)(a1 + 8874) = 0;
  *(unsigned char *)(a1 + 9112) = 0;
  *(unsigned char *)(a1 + 9120) = 0;
  *(unsigned char *)(a1 + 9304) = 0;
  *(_DWORD *)(a1 + 9360) = 0;
  *(_OWORD *)(a1 + 9344) = 0u;
  *(_OWORD *)(a1 + 9328) = 0u;
  *(_OWORD *)(a1 + 9312) = 0u;
  *(unsigned char *)(a1 + 8928) = 0;
  *(_OWORD *)(a1 + 8912) = 0u;
  *(_OWORD *)(a1 + 8896) = 0u;
  *(_OWORD *)(a1 + 8880) = 0u;
  *(unsigned char *)(a1 + 9376) = 0;
  *(unsigned char *)(a1 + 9504) = 0;
  *(unsigned char *)(a1 + 9520) = 0;
  *(unsigned char *)(a1 + 9648) = 0;
  *(unsigned char *)(a1 + 9664) = 0;
  *(unsigned char *)(a1 + 9792) = 0;
  *(_DWORD *)(a1 + 9808) = 0;
  *(unsigned char *)(a1 + 9824) = 0;
  *(unsigned char *)(a1 + 9856) = 0;
  *(unsigned char *)(a1 + 9872) = 0;
  *(unsigned char *)(a1 + 9880) = 0;
  *(void *)(a1 + 9888) = 0;
  sub_10033BCCC(a1 + 4944, 2.0);
  *(_OWORD *)(a1 + 8512) = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8560) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 8576) = v11;
  *(_OWORD *)(a1 + 8528) = v9;
  *(_OWORD *)(a1 + 8544) = v10;
  long long v12 = *(_OWORD *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 8624) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 8640) = v14;
  *(_OWORD *)(a1 + 8592) = v12;
  *(_OWORD *)(a1 + 8608) = v13;
  long long v15 = *(_OWORD *)(a2 + 144);
  long long v16 = *(_OWORD *)(a2 + 160);
  long long v17 = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 8704) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(a1 + 8672) = v16;
  *(_OWORD *)(a1 + 8688) = v17;
  *(_OWORD *)(a1 + 8656) = v15;
  *(_DWORD *)(a1 + 8504) = 0;
  *(_OWORD *)(a1 + 7600) = 0u;
  return a1;
}

void sub_100380E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  sub_10003AC1C(v13);
  sub_1003863B0(v19);
  sub_100386A54(v12 + 1012);
  sub_100386A54(a10);
  if (*(unsigned char *)(v15 + 1808))
  {
    int64_t v21 = *v18;
    if (*v18)
    {
      v12[973] = v21;
      operator delete(v21);
    }
  }
  sub_10003AC1C(v17);
  sub_100380EF0(v16);
  sub_10003AC1C(v12 + 782);
  sub_10003AC1C(v12 + 776);
  sub_100380F2C(a11);
  sub_100380F94(v14);
  sub_1003866D0(a12);
  _Unwind_Resume(a1);
}

void sub_100380EE8()
{
}

void *sub_100380EF0(void *a1)
{
  return a1;
}

uint64_t sub_100380F2C(uint64_t a1)
{
  sub_10037FEA4((void *)(a1 + 440));
  sub_10003AC1C((void *)(a1 + 368));
  sub_100386500((void *)(a1 + 320));
  if (*(unsigned char *)(a1 + 120))
  {
    int v2 = *(void **)(a1 + 88);
    if (v2)
    {
      *(void *)(a1 + 96) = v2;
      operator delete(v2);
    }
  }
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    sub_1003865A8(a1 + 64, v3);
  }
  return a1;
}

uint64_t sub_100380F94(uint64_t a1)
{
  long long v4 = (void **)(a1 + 528);
  sub_100320DD0(&v4);
  sub_10003AC1C((void *)(a1 + 456));
  sub_100320E74((void *)(a1 + 136), 0);
  if (*(unsigned char *)(a1 + 128))
  {
    int v2 = *(void **)(a1 + 96);
    if (v2)
    {
      *(void *)(a1 + 104) = v2;
      operator delete(v2);
    }
  }
  sub_100320EFC((uint64_t *)(a1 + 72), 0);
  return a1;
}

uint64_t sub_10038100C(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v10 = a3 * a7;
  if (a3 > 0.0 && v10 <= a5 - a4)
  {
    double v13 = a1 - a2;
    if (((*(void *)&a2 ^ *(void *)&a1) & 0x8000000000000000) != 0 && fabs(v13 / a3) > a7)
    {
      uint64_t v19 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = 134218496;
        double v26 = a1;
        __int16 v27 = 2048;
        double v28 = a2;
        __int16 v29 = 2048;
        double v30 = a3;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,overflow detected in peer integrated value, currInteVal: %f, prevInteVal: %f, deltaT: %f", (uint8_t *)&v25, 0x20u);
      }
      double v20 = a4 - (a5 - a1) - a6;
      if (v13 < 0.0) {
        double v20 = a1 - a4 + a5 + a6;
      }
      double v13 = v20 - a2;
    }
    int64_t v21 = qword_1008ABDE0;
    BOOL v22 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
    double v23 = fabs(v13);
    if (v22)
    {
      int v25 = 134218496;
      double v24 = v23 / a3;
      double v26 = v23 / a3;
      __int16 v27 = 2048;
      double v28 = v13;
      __int16 v29 = 2048;
      double v30 = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,Delta derivative calculated for overflow detection: %f, corrected delta: %f, deltaT: %f", (uint8_t *)&v25, 0x20u);
    }
    else
    {
      double v24 = v23 / a3;
    }
    if (v24 > a7) {
      double v13 = 0.0;
    }
  }
  else
  {
    long long v12 = qword_1008ABDE0;
    double v13 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
    {
      int v25 = 134218496;
      double v26 = a3;
      __int16 v27 = 2048;
      double v28 = v10;
      __int16 v29 = 2048;
      double v30 = a5;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#findalgs-peoplefinder,invalid time delta, deltaT: %f, max potential value change: %f, max integrated value: %f", (uint8_t *)&v25, 0x20u);
    }
  }
  return *(void *)&v13;
}

BOOL sub_100381254(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 8360);
  if (*(unsigned char *)(a1 + 8360))
  {
    if (!*(unsigned char *)(a1 + 8376)) {
      goto LABEL_14;
    }
    int v1 = *(double *)(a1 + 8) - *(double *)(a1 + 8368) < 2.38;
  }
  if (!*(unsigned char *)(a1 + 8432))
  {
    BOOL v2 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(a1 + 8376)) {
LABEL_14:
  }
    sub_10000AE44();
  BOOL v2 = *(double *)(a1 + 16) - *(double *)(a1 + 8368) < 2.38;
LABEL_8:
  if (*(unsigned char *)(a1 + 7688)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 7704)) {
    int v1 = 1;
  }
  return ((v1 | v2) & 1) != 0 || *(unsigned char *)(a1 + 7720) != 0;
}

void sub_100381300(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8304;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100435A00();
  }
  sub_10038196C(a1, &v79);
  int v5 = v91;
  if (*(unsigned char *)(v4 + 360)) {
    BOOL v6 = v91 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = 0;
  }
  else
  {
    if (v93) {
      BOOL v8 = v92 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    int v7 = !v8;
  }
  if (*(unsigned char *)(v4 + 212))
  {
    sub_100398808(a1 + 5504, (uint64_t)&v55);
    if ((_BYTE)v68 && *(unsigned char *)(v4 + 1200))
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_1004359CC();
      }
      *(_WORD *)uint64_t v4 = 0;
      sub_100381B94(a1, (uint64_t)&v55, v9);
      sub_100381CEC(a1, (uint64_t)&v55);
      sub_100381E3C(a1, (uint64_t)&v55);
      sub_100381EE8(a1, (uint64_t)&v55);
      DWORD1(v77) = *(_DWORD *)(a1 + 9808);
      BYTE8(v77) = 1;
      if (!(_BYTE)v67) {
        goto LABEL_82;
      }
      if (sub_100381F7C(a1, 0, *((float *)&v56 + 2)))
      {
        *(void *)(a1 + 8384) = *(void *)(a1 + 8);
        *(unsigned char *)(v4 + 88) = 1;
        double v10 = &v55;
LABEL_79:
        memcpy((void *)a2, v10, 0x180uLL);
        return;
      }
      if ((v7 & 1) == 0) {
        goto LABEL_80;
      }
    }
  }
  else
  {
    long long v78 = 0u;
    long long v77 = 0u;
    long long v76 = 0u;
    long long v75 = 0u;
    long long v74 = 0u;
    long long v73 = 0u;
    long long v72 = 0u;
    long long v71 = 0u;
    long long v70 = 0u;
    long long v69 = 0u;
    long long v68 = 0u;
    long long v67 = 0u;
    long long v66 = 0u;
    long long v65 = 0u;
    long long v64 = 0u;
    long long v63 = 0u;
    long long v62 = 0u;
    long long v61 = 0u;
    long long v60 = 0u;
    long long v59 = 0u;
    long long v58 = 0u;
    long long v57 = 0u;
    long long v56 = 0u;
    long long v55 = 0u;
  }
  if (*(unsigned char *)(v4 + 210) || *(unsigned char *)(v4 + 211))
  {
    sub_10033DE98(a1 + 4944, (uint64_t)__src);
    if ((_BYTE)v44 && *(unsigned char *)(v4 + 1200))
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100435998();
      }
      *(_WORD *)uint64_t v4 = 0;
      sub_100381B94(a1, (uint64_t)__src, v11);
      sub_100381CEC(a1, (uint64_t)__src);
      sub_100381E3C(a1, (uint64_t)__src);
      sub_100381EE8(a1, (uint64_t)__src);
      DWORD1(v53) = *(_DWORD *)(a1 + 9808);
      BYTE8(v53) = 1;
      if (!LOBYTE(__src[12])) {
        goto LABEL_82;
      }
      if (sub_100381F7C(a1, 0, *((float *)&__src[1] + 2)))
      {
        *(void *)(a1 + 8384) = *(void *)(a1 + 8);
        *(unsigned char *)(v4 + 88) = 1;
        double v10 = __src;
        goto LABEL_79;
      }
      if ((v7 & 1) == 0) {
        goto LABEL_80;
      }
    }
  }
  else
  {
    long long v54 = 0u;
    long long v53 = 0u;
    long long v52 = 0u;
    long long v51 = 0u;
    long long v50 = 0u;
    long long v49 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    memset(__src, 0, sizeof(__src));
  }
  if (*(unsigned char *)(v4 + 209))
  {
    sub_1003766AC(a1 + 448, (uint64_t)&v19);
  }
  else
  {
    double v12 = 0.0;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
  }
  if (*(unsigned char *)(v4 + 1200))
  {
    int v13 = *(unsigned __int8 *)(v4 + 1180);
    if (*(unsigned char *)(v4 + 1180)) {
      int v13 = *(_DWORD *)(a1 + 9480) == 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v5) {
    int v14 = v7;
  }
  else {
    int v14 = 1;
  }
  if (v14) {
    BOOL v15 = v5 != 0;
  }
  else {
    BOOL v15 = *(unsigned __int8 *)(v4 + 1200) != 0;
  }
  if ((v15 & v13 & 1) == 0 && (_BYTE)v32 && BYTE8(v39) && *(unsigned char *)(v4 + 1200) && (_BYTE)v31)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100435964();
    }
    sub_100381B94(a1, (uint64_t)&v19, v16);
    sub_100381CEC(a1, (uint64_t)&v19);
    sub_100381E3C(a1, (uint64_t)&v19);
    sub_100381EE8(a1, (uint64_t)&v19);
    DWORD1(v41) = *(_DWORD *)(a1 + 9808);
    BYTE8(v41) = 1;
    if (!(_BYTE)v31) {
      goto LABEL_82;
    }
    if (sub_100381F7C(a1, 0, *((float *)&v20 + 2)))
    {
      *(void *)(a1 + 8384) = *(void *)(a1 + 8);
      *(unsigned char *)(v4 + 88) = 1;
      double v10 = &v19;
      goto LABEL_79;
    }
    if ((v7 & 1) == 0) {
      goto LABEL_80;
    }
  }
  if (v15)
  {
    if (LOBYTE(__src[12]) && (!v90[24] || DWORD1(v81) == 4))
    {
      long long v88 = *(_OWORD *)((char *)&__src[8] + 8);
      long long v89 = *(_OWORD *)((char *)&__src[9] + 8);
      *(_OWORD *)int v90 = *(_OWORD *)((char *)&__src[10] + 8);
      *(_OWORD *)&v90[9] = *(_OWORD *)((char *)&__src[11] + 1);
      long long v84 = *(_OWORD *)((char *)&__src[4] + 8);
      long long v85 = *(_OWORD *)((char *)&__src[5] + 8);
      long long v86 = *(_OWORD *)((char *)&__src[6] + 8);
      long long v87 = *(_OWORD *)((char *)&__src[7] + 8);
      long long v80 = *(_OWORD *)((char *)__src + 8);
      long long v81 = *(_OWORD *)((char *)&__src[1] + 8);
      double v12 = *((double *)&__src[2] + 1);
      long long v82 = *(_OWORD *)((char *)&__src[2] + 8);
      long long v83 = *(_OWORD *)((char *)&__src[3] + 8);
      DWORD1(v81) = 1;
    }
    sub_100381B94(a1, (uint64_t)&v79, v12);
    sub_100381CEC(a1, (uint64_t)&v79);
    sub_100381E3C(a1, (uint64_t)&v79);
    sub_100381EE8(a1, (uint64_t)&v79);
    int v94 = *(_DWORD *)(a1 + 9808);
    char v95 = 1;
    if (v90[24])
    {
      if (sub_100381F7C(a1, v7, *(float *)&v81))
      {
        *(void *)(a1 + 8384) = *(void *)(a1 + 8);
        *(unsigned char *)(v4 + 88) = 1;
        double v10 = (long long *)&v79;
        goto LABEL_79;
      }
      goto LABEL_80;
    }
    goto LABEL_82;
  }
  if (*(unsigned char *)(v4 + 1552)) {
    *(unsigned char *)(v4 + 1552) = 0;
  }
  *(_WORD *)uint64_t v4 = 0;
  if (LOBYTE(__src[12]) && *(double *)(a1 + 8) - *(double *)&__src[1] < 2.0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100435930();
    }
    sub_100382240((unsigned __int8 *)__src, a1, (uint64_t)&v19, (uint64_t)&v55, (uint64_t)v17);
    sub_100381EE8(a1, (uint64_t)v17);
    v17[89] = *(_DWORD *)(a1 + 9808);
    char v18 = 1;
    if (LOBYTE(__src[12]))
    {
      if (sub_100381F7C(a1, 0, *((float *)&__src[1] + 2)))
      {
        *(void *)(a1 + 8384) = *(void *)(a1 + 8);
        *(unsigned char *)(v4 + 88) = 1;
        double v10 = (long long *)v17;
        goto LABEL_79;
      }
LABEL_80:
      sub_100382094(a1, a2);
      return;
    }
LABEL_82:
    sub_10000AE44();
  }
  sub_100382094(a1, a2);
  sub_100381EE8(a1, a2);
  *(_DWORD *)(a2 + 356) = *(_DWORD *)(a1 + 9808);
  *(unsigned char *)(a2 + 360) = 1;
}

void sub_10038196C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = a1 + 8304;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100435A68();
  }
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if (*(unsigned char *)(v4 + 211))
  {
    sub_10034040C(a1 + 4944, 1, (uint64_t)v7);
    if ((_BYTE)v8) {
      sub_10035BE0C(a1 + 48, (long long *)((char *)v7 + 8));
    }
  }
  else
  {
    long long v18 = 0uLL;
    long long v19 = 0uLL;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
    long long v12 = 0uLL;
    long long v13 = 0uLL;
    long long v10 = 0uLL;
    long long v11 = 0uLL;
    long long v8 = 0uLL;
    long long v9 = 0uLL;
    memset(v7, 0, sizeof(v7));
  }
  if (*(unsigned char *)(v4 + 208)) {
    sub_10035B670(a1 + 48, (uint64_t)v6);
  }
  else {
    memset(v6, 0, sizeof(v6));
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if ((sub_100384100(a1, (uint64_t)v6) & 1) == 0) {
      memset(v6, 0, 382);
    }
    if (LOBYTE(v6[13]))
    {
      memcpy(a2, v6, 0x17EuLL);
      *(void *)(a1 + 8288) = v5;
      *(_WORD *)uint64_t v4 = 256;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100435A34();
      }
    }
  }
}

double sub_100381B94(uint64_t a1, uint64_t a2, double result)
{
  uint64_t v3 = a1 + 9504;
  if (*(unsigned char *)(a1 + 9504) && *(_DWORD *)(a1 + 9456) == 2)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    BOOL v6 = !*(unsigned char *)(a2 + 208) || *(unsigned char *)(a2 + 192) == 0;
    if (!v6 && *(float *)&result != 1.1755e-38)
    {
      if (*(unsigned char *)(a1 + 32))
      {
        v17.i32[2] = 0;
        v17.i64[0] = 0;
        if (sub_1003861DC(a1, a2, (float32x4_t *)(a1 + 9376), (uint64_t)&v17))
        {
          if (*(unsigned char *)(v3 + 352))
          {
            if (*(unsigned char *)(a1 + 32))
            {
              double v8 = *(double *)(a1 + 8);
              double v9 = (v8 - *(double *)(a1 + 9824)) / (v8 - *(double *)(a1 + 9824) + *(double *)(a1 + 8520));
              double v10 = 1.0 - v9;
              *(float *)&double v9 = v9;
              *(float *)&double v10 = v10;
              float32x4_t v11 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 9840), *(float *)&v10), v17, *(float *)&v9);
              *(float32x4_t *)(a1 + 9840) = v11;
              *(double *)(a1 + 9824) = v8;
              v15[0] = 0;
              v15[1] = 0;
              int v16 = 0;
              float64x2_t v13 = vcvtq_f64_f32(*(float32x2_t *)v11.f32);
              double v14 = v11.f32[2];
              sub_10033EF20(&v13, (float32x4_t *)(a1 + 9376), (uint64_t)v15);
              uint64_t result = sub_100030430(*((float *)v15 + 1));
              if (*(unsigned char *)(a2 + 208))
              {
                *(double *)(a2 + 200) = result;
                return result;
              }
            }
LABEL_19:
            sub_10000AE44();
          }
          if (!*(unsigned char *)(a1 + 32)) {
            goto LABEL_19;
          }
          uint64_t result = *(double *)(a1 + 8);
          float32x4_t v12 = v17;
          *(double *)(a1 + 9824) = result;
          *(float32x4_t *)(a1 + 9840) = v12;
          *(unsigned char *)(v3 + 352) = 1;
        }
      }
    }
  }
  return result;
}

void sub_100381CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8515;
  if (*(unsigned char *)(a1 + 8515))
  {
    sub_10034040C(a1 + 4944, 0, (uint64_t)v7);
    float v4 = v7[6];
    if (LOBYTE(v7[48]) && v7[6] != 1.1755e-38)
    {
      if (*(unsigned char *)(a2 + 192))
      {
        if (*(unsigned char *)(v2 + 197)) {
          BOOL v6 = v7[6] > 1.0;
        }
        else {
          BOOL v6 = v7[6] > 0.9;
        }
        if (v6)
        {
          if (v7[6] > 1.5)
          {
            if (v7[6] > 3.0)
            {
LABEL_15:
              *(unsigned char *)(v2 + 197) = 0;
              return;
            }
            float v4 = (1.0 - (3.0 - v7[6]) / 1.5) * *(float *)(a2 + 24) + (3.0 - v7[6]) / 1.5 * v7[6];
          }
          *(float *)(a2 + 24) = v4;
          goto LABEL_15;
        }
        memcpy((void *)a2, v7, 0x17EuLL);
        *(unsigned char *)(v2 + 197) = 1;
      }
      else
      {
        memcpy((void *)a2, v7, 0x17EuLL);
      }
    }
  }
}

uint64_t sub_100381E3C(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 32)
    || !*(unsigned char *)(result + 8496)
    || *(double *)(result + 8) - *(double *)(result + 8488) > 10.0)
  {
    *(_DWORD *)(result + 8504) = 0;
  }
  if (!*(unsigned char *)(result + 8704))
  {
    BOOL v3 = *(float *)(a2 + 24) != 1.1755e-38 && *(unsigned char *)(a2 + 192) != 0;
    char v4 = *(unsigned char *)(a2 + 208);
    BOOL v5 = *(_DWORD *)(result + 8504) == 2;
    char v6 = *(unsigned char *)(result + 7720);
    char v7 = *(unsigned char *)(result + 9504);
    __int16 v8 = 0;
    BOOL v9 = v3;
    char v10 = v4;
    BOOL v11 = v5;
    char v12 = v6;
    return sub_100386174(result, a2, &v7);
  }
  return result;
}

void sub_100381EE8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 9888) == 1)
  {
    char v4 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,Reporting VIO drift in solution", v5, 2u);
    }
    *(unsigned char *)(a2 + 380) = 1;
    *(_DWORD *)(a1 + 9888) = 2;
  }
}

BOOL sub_100381F7C(uint64_t a1, unsigned __int8 a2, double a3)
{
  BOOL v3 = (unsigned char *)(a1 + 8145);
  if (*(unsigned char *)(a1 + 8145)) {
    return 1;
  }
  uint64_t v5 = 8560;
  if (!*(unsigned char *)(a1 + 40)) {
    uint64_t v5 = 8544;
  }
  uint64_t v6 = 8568;
  if (!*(unsigned char *)(a1 + 40)) {
    uint64_t v6 = 8552;
  }
  uint64_t v7 = 8528;
  if (((*(unsigned char *)(a1 + 8664) != 0) & a2) != 0) {
    uint64_t v7 = 8536;
  }
  if (*(double *)(a1 + v7) <= a3
    || ((*(unsigned char *)(a1 + 8664) != 0) & a2) == 0
    && *(void *)(a1 + 8136) < (unint64_t)(int)(*(double *)(a1 + v5) * *(double *)(a1 + v6)))
  {
    return 0;
  }
  uint64_t v4 = 1;
  *BOOL v3 = 1;
  *(void *)(a1 + 8152) = *(void *)(a1 + 8);
  __int16 v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,Condition to show find button met", v10, 2u);
    return *v3 != 0;
  }
  return v4;
}

uint64_t sub_100382094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 192) = 0;
  *(unsigned char *)(a2 + 200) = 0;
  *(unsigned char *)(a2 + 208) = 0;
  *(unsigned char *)(a2 + 216) = 0;
  *(unsigned char *)(a2 + 224) = 0;
  *(_DWORD *)(a2 + 232) = 0;
  *(unsigned char *)(a2 + 240) = 0;
  *(unsigned char *)(a2 + 248) = 0;
  *(unsigned char *)(a2 + 256) = 0;
  *(unsigned char *)(a2 + 272) = 0;
  *(unsigned char *)(a2 + 288) = 0;
  *(unsigned char *)(a2 + 304) = 0;
  *(unsigned char *)(a2 + 320) = 0;
  *(unsigned char *)(a2 + 328) = 0;
  *(unsigned char *)(a2 + 336) = 0;
  *(unsigned char *)(a2 + 344) = 0;
  *(_WORD *)(a2 + 352) = 0;
  *(unsigned char *)(a2 + 356) = 0;
  *(unsigned char *)(a2 + 360) = 0;
  *(unsigned char *)(a2 + 372) = 0;
  *(unsigned char *)(a2 + 376) = 0;
  *(_WORD *)(a2 + 380) = 0;
  *(_DWORD *)(a2 + 364) = 0;
  *(unsigned char *)(a2 + 368) = 1;
  if (*(unsigned char *)(a1 + 8040)) {
    uint64_t v4 = *(void *)(a1 + 7856);
  }
  else {
    uint64_t v4 = 0;
  }
  double v5 = *(double *)(a1 + 8);
  *(void *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 60) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 68) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0x100800000;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_WORD *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 168) = 0;
  *(_OWORD *)(a2 + 121) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(unsigned char *)(a2 + 192) = 1;
  if (*(unsigned char *)(a1 + 8392))
  {
    if (v5 - *(double *)(a1 + 8384) > *(double *)(a1 + 8696))
    {
      if (*(unsigned char *)(a1 + 8145))
      {
        *(unsigned char *)(a2 + 381) = 1;
        *(unsigned char *)(a1 + 8145) = 0;
        uint64_t v6 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int16 v8 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,disableFindButton set to true", v8, 2u);
        }
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100435A9C();
  }
  return sub_100381E3C(a1, a2);
}

void sub_100382240(unsigned __int8 *__src@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v10 = (char *)(a2 + 7720);
  if (!*(unsigned char *)(a2 + 32) || !*(unsigned char *)(a2 + 8496) || *(double *)(a2 + 8) - *(double *)(a2 + 8488) > 10.0) {
    *(_DWORD *)(a2 + 8504) = 0;
  }
  memcpy((void *)a5, __src, 0x180uLL);
  if (__src[5] | *(unsigned __int8 *)(a3 + 5)) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = *(unsigned char *)(a4 + 5) != 0;
  }
  if (__src[4] | *(unsigned __int8 *)(a3 + 4)) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = *(unsigned char *)(a4 + 4) != 0;
  }
  if (!v10[984])
  {
    BOOL v14 = *(_DWORD *)(a2 + 8504) == 2;
    char v15 = *v10;
    LOBYTE(v21) = v10[1784];
    BYTE1(v21) = v12;
    BYTE2(v21) = v11;
    *(_WORD *)((char *)&v21 + 3) = 1;
    BYTE5(v21) = v14;
    BYTE6(v21) = v15;
    sub_100386174(a2, a5, &v21);
    goto LABEL_18;
  }
  if (v11)
  {
    __int16 v13 = 256;
  }
  else
  {
    if (!v12) {
      goto LABEL_18;
    }
    __int16 v13 = 1;
  }
  *(_WORD *)(a5 + 4) = v13;
LABEL_18:
  int v16 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    int v17 = *(unsigned __int8 *)(a3 + 4);
    int v18 = *(unsigned __int8 *)(a4 + 4);
    unint64_t v21 = __PAIR64__(__src[4], 67109888);
    __int16 v22 = 1024;
    int v23 = v17;
    __int16 v24 = 1024;
    int v25 = v18;
    __int16 v26 = 1024;
    BOOL v27 = v12;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,#convergence_blending, Insufficient Displacement: SA: %d, PF: %d, SAVIO: %d, Blended: %d", (uint8_t *)&v21, 0x1Au);
    int v16 = qword_1008ABDE0;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    int v19 = *(unsigned __int8 *)(a3 + 5);
    int v20 = *(unsigned __int8 *)(a4 + 5);
    unint64_t v21 = __PAIR64__(__src[5], 67109888);
    __int16 v22 = 1024;
    int v23 = v19;
    __int16 v24 = 1024;
    int v25 = v20;
    __int16 v26 = 1024;
    BOOL v27 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,#convergence_blending, Insufficient Horizontal Displacement: SA: %d, PF: %d, SAVIO: %d, Blended: %d", (uint8_t *)&v21, 0x1Au);
  }
  *(_DWORD *)(a5 + 232) = *(_DWORD *)(a3 + 232);
}

double sub_10038249C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
  if (v4) {
    sub_100435BA0();
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(unsigned char *)(a2 + 183))
    {
      if (*(unsigned char *)(a2 + 182) == 1)
      {
        if (!*(unsigned char *)(a1 + 40))
        {
          uint64_t v6 = qword_1008ABDE0;
          BOOL v4 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
          if (v4)
          {
            LOWORD(v40) = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,process Range: Setting reduced range rate to true", (uint8_t *)&v40, 2u);
          }
        }
        *(unsigned char *)(a1 + 40) = 1;
      }
      else
      {
        if (*(unsigned char *)(a1 + 40))
        {
          uint64_t v7 = qword_1008ABDE0;
          BOOL v4 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
          if (v4)
          {
            LOWORD(v40) = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,process Range: Setting reduced range rate to false", (uint8_t *)&v40, 2u);
          }
        }
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 40) = 0;
      BOOL v4 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR);
      if (v4) {
        sub_100435B6C();
      }
    }
    if (!*(unsigned char *)(a2 + 181)) {
      goto LABEL_22;
    }
    unsigned int v8 = *(unsigned __int8 *)(a2 + 180);
    if (v8 > 2)
    {
      if (*(unsigned char *)(a1 + 8518) && v8 == 7)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100435B38();
        }
        goto LABEL_35;
      }
LABEL_22:
      if (!*(unsigned char *)(a1 + 8040))
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100435AD0();
        }
        goto LABEL_45;
      }
      unint64_t v9 = sub_1003829D8(*(double *)(a2 + 8), 2.0, v4, (void *)(a1 + 8048));
      uint64_t v10 = 8568;
      if (!*(unsigned char *)(a1 + 40)) {
        uint64_t v10 = 8552;
      }
      sub_1003829D8(*(double *)(a2 + 8), *(double *)(a1 + v10), v9, (void *)(a1 + 8096));
      if (!*(unsigned char *)(a1 + 8040)) {
        sub_10000AE44();
      }
      double v11 = *(float *)(a2 + 16);
      if (*(float *)(a1 + 7872) - v11 > 1.0)
      {
        uint64_t v12 = *(void *)(a1 + 8088);
        if (v12)
        {
          uint64_t v13 = *(void *)(a1 + 8056);
          if (*(void *)(a1 + 8064) == v13
            || (unint64_t v14 = *(void *)(a1 + 8080),
                char v15 = (void *)(v13 + 8 * (v14 / 0x16)),
                unint64_t v16 = *v15 + 184 * (v14 % 0x16),
                unint64_t v17 = *(void *)(v13 + 8 * ((v14 + v12) / 0x16)) + 184 * ((v14 + v12) % 0x16),
                v16 == v17))
          {
            BOOL v19 = 0;
          }
          else
          {
            do
            {
              double v18 = *(float *)(v16 + 16) - v11;
              BOOL v19 = v18 <= 1.0;
              if (v18 <= 1.0) {
                break;
              }
              v16 += 184;
              if (v16 - *v15 == 4048)
              {
                unint64_t v20 = v15[1];
                ++v15;
                unint64_t v16 = v20;
              }
            }
            while (v16 != v17);
          }
          *(unsigned char *)(a1 + 8144) = v19;
        }
        else
        {
          *(unsigned char *)(a1 + 8144) = 0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
            sub_100435B04();
          }
        }
        goto LABEL_45;
      }
LABEL_35:
      *(unsigned char *)(a1 + 8144) = 1;
LABEL_45:
      sub_100382B7C((void *)(a1 + 8048), (long long *)a2);
      int v22 = *(unsigned __int8 *)(a1 + 8040);
      long long v23 = *(_OWORD *)(a2 + 32);
      long long v24 = *(_OWORD *)(a2 + 48);
      long long v25 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 7856) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 7904) = v24;
      *(_OWORD *)(a1 + 7888) = v23;
      *(_OWORD *)(a1 + 7872) = v25;
      long long v26 = *(_OWORD *)(a2 + 96);
      long long v27 = *(_OWORD *)(a2 + 112);
      long long v28 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 7920) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 7968) = v27;
      *(_OWORD *)(a1 + 7952) = v26;
      *(_OWORD *)(a1 + 7936) = v28;
      long long v30 = *(_OWORD *)(a2 + 144);
      long long v29 = *(_OWORD *)(a2 + 160);
      uint64_t v31 = *(void *)(a2 + 176);
      *(_OWORD *)(a1 + 7984) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 8032) = v31;
      *(_OWORD *)(a1 + 8016) = v29;
      *(_OWORD *)(a1 + 8000) = v30;
      if (!v22) {
        *(unsigned char *)(a1 + 8040) = 1;
      }
      *(void *)(a1 + 8280) = *(void *)(a1 + 24);
      if (*(unsigned char *)(a1 + 8144))
      {
        sub_100382B7C((void *)(a1 + 8096), (long long *)a2);
        sub_10033D9C8(a1 + 4944, a2);
        long long v32 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v33 = sub_100381254(a1);
          int v34 = *(unsigned __int8 *)(a1 + 7688);
          int v35 = *(unsigned __int8 *)(a1 + 7704);
          int v36 = *(unsigned __int8 *)(a1 + 8360);
          int v40 = 67109888;
          *(_DWORD *)long long v41 = v33;
          *(_WORD *)&v41[4] = 1024;
          *(_DWORD *)&v41[6] = v34;
          LOWORD(v42) = 1024;
          *(_DWORD *)((char *)&v42 + 2) = v35;
          HIWORD(v42) = 1024;
          int v43 = v36;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,shouldFeedPF: %d, peerStatic: %d, peerMovingSlowly: %d, hasLastPDR: %d", (uint8_t *)&v40, 0x1Au);
        }
        if (*(unsigned char *)(a1 + 7720) && *(double *)(a2 + 8) >= *(double *)(a1 + 7712)) {
          sub_10039850C(a1 + 5504, (long long *)a2);
        }
        if (sub_100381254(a1)) {
          sub_10037879C(a1 + 448, *(unsigned __int8 *)(a1 + 40), *(float *)(a2 + 16), *(double *)(a2 + 8));
        }
      }
      else
      {
        long long v37 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          double v38 = *(float *)(a2 + 16);
          uint64_t v39 = *(void *)(a2 + 8);
          int v40 = 134218240;
          *(double *)long long v41 = v38;
          *(_WORD *)&v41[8] = 2048;
          uint64_t v42 = v39;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#negativeBiasRangeRejection, Rejected range measurement of %3.2f m at %3.2f seconds", (uint8_t *)&v40, 0x16u);
        }
      }
      return result;
    }
    unint64_t v21 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v40 = 67109120;
      *(_DWORD *)long long v41 = v8;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,mmsValStatus %d does not pass check, rejecting range result event", (uint8_t *)&v40, 8u);
    }
    *(unsigned char *)(a1 + 8144) = 0;
  }
  return result;
}

unint64_t sub_1003829D8(double a1, double a2, uint64_t a3, void *a4)
{
  unint64_t v5 = a4[4];
  uint64_t v6 = a4[1];
  uint64_t v7 = a4[2];
  unsigned int v8 = (void *)(v6 + 8 * (v5 / 0x16));
  if (v7 == v6)
  {
    unint64_t v14 = 0;
    uint64_t v10 = a4 + 5;
  }
  else
  {
    unint64_t v9 = *(void *)(v6 + 8 * (v5 / 0x16)) + 184 * (v5 % 0x16);
    uint64_t v10 = a4 + 5;
    unint64_t v11 = *(void *)(v6 + 8 * ((a4[5] + v5) / 0x16)) + 184 * ((a4[5] + v5) % 0x16);
    if (v9 != v11)
    {
      while (a1 - *(double *)(v9 + 8) <= a2)
      {
        v9 += 184;
        if (v9 - *v8 == 4048)
        {
          unint64_t v12 = v8[1];
          ++v8;
          unint64_t v9 = v12;
        }
        if (v9 == v11) {
          goto LABEL_18;
        }
      }
    }
    uint64_t v13 = v8;
    if (v9 == v11)
    {
LABEL_18:
      unint64_t v14 = *(void *)(v6 + 8 * ((a4[5] + v5) / 0x16)) + 184 * ((a4[5] + v5) % 0x16);
    }
    else
    {
      unint64_t v14 = v9;
      while (1)
      {
        v9 += 184;
        if (v9 - *v13 == 4048)
        {
          unint64_t v15 = v13[1];
          ++v13;
          unint64_t v9 = v15;
        }
        if (v9 == v11) {
          break;
        }
        if (a1 - *(double *)(v9 + 8) <= a2)
        {
          long long v16 = *(_OWORD *)v9;
          long long v17 = *(_OWORD *)(v9 + 16);
          long long v18 = *(_OWORD *)(v9 + 48);
          *(_OWORD *)(v14 + 32) = *(_OWORD *)(v9 + 32);
          *(_OWORD *)(v14 + 48) = v18;
          *(_OWORD *)unint64_t v14 = v16;
          *(_OWORD *)(v14 + 16) = v17;
          long long v19 = *(_OWORD *)(v9 + 64);
          long long v20 = *(_OWORD *)(v9 + 80);
          long long v21 = *(_OWORD *)(v9 + 112);
          *(_OWORD *)(v14 + 96) = *(_OWORD *)(v9 + 96);
          *(_OWORD *)(v14 + 112) = v21;
          *(_OWORD *)(v14 + 64) = v19;
          *(_OWORD *)(v14 + 80) = v20;
          long long v22 = *(_OWORD *)(v9 + 128);
          long long v23 = *(_OWORD *)(v9 + 144);
          long long v24 = *(_OWORD *)(v9 + 160);
          *(void *)(v14 + 176) = *(void *)(v9 + 176);
          *(_OWORD *)(v14 + 144) = v23;
          *(_OWORD *)(v14 + 160) = v24;
          *(_OWORD *)(v14 + 128) = v22;
          v14 += 184;
          if (v14 - *v8 == 4048)
          {
            unint64_t v25 = v8[1];
            ++v8;
            unint64_t v14 = v25;
          }
        }
      }
      unint64_t v5 = a4[4];
      uint64_t v6 = a4[1];
      uint64_t v7 = a4[2];
    }
  }
  unint64_t v26 = v5 + *v10;
  long long v27 = (void *)(v6 + 8 * (v26 / 0x16));
  if (v7 == v6) {
    long long v28 = 0;
  }
  else {
    long long v28 = (char *)(*v27 + 184 * (v26 % 0x16));
  }
  return sub_100382C98(a4, v8, (char *)v14, v27, v28);
}

uint64_t sub_100382B7C(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 22 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100386AFC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x16)) + 184 * (v7 % 0x16);
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)unint64_t v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  long long v12 = a2[4];
  long long v13 = a2[5];
  long long v14 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = v13;
  long long v15 = a2[8];
  long long v16 = a2[9];
  long long v17 = a2[10];
  *(void *)(v8 + 176) = *((void *)a2 + 22);
  *(_OWORD *)(v8 + 144) = v16;
  *(_OWORD *)(v8 + 160) = v17;
  *(_OWORD *)(v8 + 128) = v15;
  uint64_t v18 = a1[4];
  uint64_t v19 = a1[5] + 1;
  a1[5] = v19;
  unint64_t v20 = v18 + v19;
  uint64_t v21 = a1[1];
  long long v22 = (void *)(v21 + 8 * (v20 / 0x16));
  uint64_t v23 = *v22 + 184 * (v20 % 0x16);
  if (a1[2] == v21) {
    uint64_t v23 = 0;
  }
  if (v23 == *v22) {
    uint64_t v23 = *(v22 - 1) + 4048;
  }
  return v23 - 184;
}

unint64_t sub_100382C98(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 22 * (a4 - a2)
  }
       - 0x2C8590B21642C859 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x2C8590B21642C859 * ((uint64_t)&a3[-*a2] >> 3);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  long long v9 = (char **)(v8 + 8 * (v7 / 0x16));
  if (a1[2] == v8) {
    long long v10 = 0;
  }
  else {
    long long v10 = &(*v9)[184 * (v7 % 0x16)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 22 * ((char **)a2 - v9)
  }
        - 0x2C8590B21642C859 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x2C8590B21642C859 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x16);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_100386EEC(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100386EEC(v24, v6);
      sub_100386FA0(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100386E14((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100386EEC(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      long long v16 = (unsigned char **)(v15 + 8 * (v14 / 0x16));
      if (a1[2] == v15) {
        long long v17 = 0;
      }
      else {
        long long v17 = &(*v16)[184 * (v14 % 0x16)];
      }
      v24[0] = v12;
      sub_100387154(v13.n128_u64[0], (unsigned char *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_100386E74(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x16));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 184 * (v19 % 0x16);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_100386EEC(v24, v11);
  return v24[0].n128_u64[0];
}

void sub_100382F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 8705);
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100435C3C();
  }
  if (*v4)
  {
    if (*(unsigned char *)(a2 + 152))
    {
      double v40 = 0.0;
      sub_1003892C0(a1, &v40, *(double *)a2);
      sub_1003882C0(a1 + 6160, a2, (uint64_t)&v68, v40);
      uint64_t v5 = (double *)(a1 + 8);
      if (!*(unsigned char *)(a1 + 32)) {
        uint64_t v5 = &v40;
      }
      double v6 = *v5;
      sub_10036D3A0((float32x4_t *)(a1 + 6528), a2, (uint64_t)&v43, v40, *v5);
      if (v69) {
        *(float32x4_t *)(a1 + 7600) = vaddq_f32(v68, *(float32x4_t *)(a1 + 7600));
      }
      if (v67)
      {
        *(_DWORD *)(a1 + 9808) = v66;
        sub_100377980(a1 + 448, (uint64_t)&v43);
        if (v51)
        {
          float32x4_t v38 = v44;
          float32x4_t v39 = v45;
          float32x4_t v36 = v47;
          float32x4_t v37 = v46;
          *(double *)&long long v7 = sub_100344D00((float32x4_t)xmmword_1004C43D0);
          uint64_t v8 = 0;
          v41[0] = v7;
          v41[1] = v9;
          v41[2] = v10;
          v41[3] = v11;
          do
          {
            v42[v8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, COERCE_FLOAT(v41[v8])), v39, *(float32x2_t *)&v41[v8], 1), v37, (float32x4_t)v41[v8], 2), v36, (float32x4_t)v41[v8], 3);
            ++v8;
          }
          while (v8 != 4);
          long long v12 = v42[0];
          long long v13 = v42[1];
          long long v14 = v42[2];
          long long v15 = v42[3];
          int v16 = v4[799];
          *(_OWORD *)(a1 + 9376) = v43;
          long long v17 = v49;
          *(_OWORD *)(a1 + 9456) = v48;
          *(_OWORD *)(a1 + 9472) = v17;
          if (v16)
          {
            *(void *)(a1 + 9488) = v50;
          }
          else
          {
            *(_OWORD *)(a1 + 9488) = v50;
            v4[799] = 1;
          }
          *(_OWORD *)(a1 + 9392) = v12;
          *(_OWORD *)(a1 + 9408) = v13;
          *(_OWORD *)(a1 + 9424) = v14;
          *(_OWORD *)(a1 + 9440) = v15;
          uint64_t v18 = (_OWORD *)(a1 + 9520);
          long long v19 = v48;
          if (v4[943])
          {
            *(float32x4_t *)(a1 + 9584) = v47;
            *(_OWORD *)(a1 + 9600) = v19;
            *(_OWORD *)(a1 + 9616) = v49;
            *(void *)(a1 + 9632) = v50;
            float32x4_t v20 = v44;
            _OWORD *v18 = v43;
            *(float32x4_t *)(a1 + 9536) = v20;
            float32x4_t v21 = v46;
            *(float32x4_t *)(a1 + 9552) = v45;
            *(float32x4_t *)(a1 + 9568) = v21;
          }
          else
          {
            *(float32x4_t *)(a1 + 9584) = v47;
            *(_OWORD *)(a1 + 9600) = v19;
            long long v22 = v50;
            *(_OWORD *)(a1 + 9616) = v49;
            *(_OWORD *)(a1 + 9632) = v22;
            float32x4_t v23 = v44;
            _OWORD *v18 = v43;
            *(float32x4_t *)(a1 + 9536) = v23;
            float32x4_t v24 = v46;
            *(float32x4_t *)(a1 + 9552) = v45;
            *(float32x4_t *)(a1 + 9568) = v24;
            v4[943] = 1;
          }
          long long v25 = v56;
          *(_OWORD *)(a1 + 9744) = v57;
          long long v26 = v59;
          *(_OWORD *)(a1 + 9760) = v58;
          *(_OWORD *)(a1 + 9776) = v26;
          long long v27 = v52;
          *(_OWORD *)(a1 + 9680) = v53;
          long long v28 = v55;
          *(_OWORD *)(a1 + 9696) = v54;
          *(_OWORD *)(a1 + 9712) = v28;
          *(_OWORD *)(a1 + 9728) = v25;
          *(_DWORD *)(a1 + 9632) = v66;
          v4[931] = 1;
          *(_OWORD *)(a1 + 9664) = v27;
          *(unsigned char *)(a1 + 9792) = v60;
          *(double *)(a1 + 9872) = v6;
          v4[1175] = 1;
        }
        else if (v66 == 1)
        {
          if (v4[1175] && v6 - *(double *)(a1 + 9872) <= 3.0)
          {
            if (v4[799])
            {
              if (!v65) {
                sub_10000AE44();
              }
              float v29 = v62;
              float v30 = v63;
              float v31 = v64;
              float v32 = v61;
              *(double *)&long long v33 = sub_100344D00(vaddq_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_1004C4170, v30), (float32x4_t)xmmword_1004C4180, v29), vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_1004C4190, v32), (float32x4_t)xmmword_1004C41A0, v31)));
              *(_OWORD *)(a1 + 9392) = v33;
              *(_OWORD *)(a1 + 9408) = v34;
              *(_OWORD *)(a1 + 9424) = v35;
            }
          }
          else if (v4[799])
          {
            v4[799] = 0;
          }
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      sub_100435C08();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    sub_100435BD4();
  }
}

double sub_10038330C(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_10036E3B4(a1 + 6528, a2).n128_u64[0];
  return result;
}

void sub_100383318(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 7720);
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100435C70();
  }
  if (*(_DWORD *)(a2 + 80) == 2)
  {
    uint64_t v5 = (double *)(a1 + 8720);
    if (v4[1128])
    {
      double v6 = *(double *)a2;
      double v7 = *v5;
      double v8 = *(double *)a2 - *v5;
      if (v8 > 1.0)
      {
        double v9 = *(float *)(a1 + 8788);
        double v10 = *(float *)(a1 + 8792);
        double v11 = *(float *)(a2 + 64);
        double v12 = *(float *)(a2 + 68);
        double v13 = *(float *)(a2 + 72);
        double v14 = sqrt((v12 - v9) * (v12 - v9)+ (v11 - *(float *)(a1 + 8784)) * (v11 - *(float *)(a1 + 8784))+ (v13 - v10) * (v13 - v10))/ v8;
        if (v14 > 4.0)
        {
          double v99 = *(float *)(a1 + 8784);
          long long v27 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134220032;
            *(double *)&uint8_t buf[4] = v14;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(double *)&buf[14] = v11;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(double *)&unsigned char buf[24] = v12;
            *(_WORD *)uint64_t v107 = 2048;
            *(double *)&v107[2] = v13;
            *(_WORD *)&v107[10] = 2048;
            *(double *)&v107[12] = v99;
            *(_WORD *)&v107[20] = 2048;
            *(double *)&v107[22] = v9;
            *(_WORD *)&v107[30] = 2048;
            *(double *)long long v108 = v10;
            *(_WORD *)&v108[8] = 2048;
            *(double *)&v108[10] = v6;
            *(_WORD *)&v108[18] = 2048;
            *(double *)&v108[20] = v7;
            _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#findalgs-peoplefinder,Maximum VIO speed exceeded, resetting filters: %f m/s, x: %f, y: %f, z: %f, previous x: %f, previous y: %f, previous z: %f, current time: %f, previous time: %f  ", buf, 0x5Cu);
          }
          if (v4[1784]) {
            v4[1784] = 0;
          }
          if (v4[2136]) {
            v4[2136] = 0;
          }
          long long v28 = *(_OWORD *)(a2 + 64);
          long long v127 = *(_OWORD *)(a2 + 80);
          long long v126 = v28;
          long long v29 = *(_OWORD *)(a2 + 112);
          long long v128 = *(_OWORD *)(a2 + 96);
          long long v129 = v29;
          long long v30 = *(_OWORD *)(a2 + 16);
          long long v122 = *(_OWORD *)a2;
          long long v123 = v30;
          long long v31 = *(_OWORD *)(a2 + 48);
          long long v124 = *(_OWORD *)(a2 + 32);
          long long v125 = v31;
          LODWORD(v127) = 1;
          v105[2] = v124;
          double v105[3] = v31;
          v105[0] = v122;
          v105[1] = v30;
          v105[6] = v128;
          v105[7] = v29;
          v105[4] = v28;
          v105[5] = v127;
          sub_10036DFD0(a1 + 6528, (uint64_t)v105, (uint64_t)buf);
          sub_100377980(a1 + 448, (uint64_t)buf);
          *(_DWORD *)(a1 + 9808) = v121;
          sub_10033BCD4(a1 + 4944, (uint64_t)&v122);
          sub_1003590C4((void *)(a1 + 8872), (uint64_t)&v122);
          sub_100387EF8((void *)(a1 + 6160));
          if (*v4 && *(double *)&v122 >= *(double *)(a1 + 7712)) {
            sub_10039687C(a1 + 5504, (uint64_t)&v122);
          }
          long long v32 = *(_OWORD *)a2;
          long long v33 = *(_OWORD *)(a2 + 16);
          long long v34 = *(_OWORD *)(a2 + 48);
          if (v4[1128])
          {
            *(_OWORD *)(a1 + 8752) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 8768) = v34;
            *(_OWORD *)uint64_t v5 = v32;
            *(_OWORD *)(a1 + 8736) = v33;
            long long v35 = *(_OWORD *)(a2 + 64);
            long long v36 = *(_OWORD *)(a2 + 80);
            long long v37 = *(_OWORD *)(a2 + 96);
            *(void *)(a1 + 8832) = *(void *)(a2 + 112);
            *(_OWORD *)(a1 + 8800) = v36;
            *(_OWORD *)(a1 + 8816) = v37;
            *(_OWORD *)(a1 + 8784) = v35;
          }
          else
          {
            *(_OWORD *)(a1 + 8752) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 8768) = v34;
            *(_OWORD *)uint64_t v5 = v32;
            *(_OWORD *)(a1 + 8736) = v33;
            long long v38 = *(_OWORD *)(a2 + 64);
            long long v39 = *(_OWORD *)(a2 + 80);
            long long v40 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 8816) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(a1 + 8832) = v40;
            *(_OWORD *)(a1 + 8784) = v38;
            *(_OWORD *)(a1 + 8800) = v39;
            v4[1128] = 1;
          }
          v4[1144] = 1;
          if (!*(_DWORD *)(a1 + 9888)) {
            *(_DWORD *)(a1 + 9888) = 1;
          }
        }
        else
        {
          long long v15 = *(_OWORD *)a2;
          long long v16 = *(_OWORD *)(a2 + 16);
          long long v17 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 8752) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 8768) = v17;
          *(_OWORD *)uint64_t v5 = v15;
          *(_OWORD *)(a1 + 8736) = v16;
          long long v18 = *(_OWORD *)(a2 + 64);
          long long v19 = *(_OWORD *)(a2 + 80);
          long long v20 = *(_OWORD *)(a2 + 96);
          *(void *)(a1 + 8832) = *(void *)(a2 + 112);
          *(_OWORD *)(a1 + 8800) = v19;
          *(_OWORD *)(a1 + 8816) = v20;
          *(_OWORD *)(a1 + 8784) = v18;
          *(_DWORD *)(a1 + 9888) = 0;
          v4[1144] = 0;
        }
      }
    }
    else
    {
      long long v21 = *(_OWORD *)a2;
      long long v22 = *(_OWORD *)(a2 + 16);
      long long v23 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 8752) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 8768) = v23;
      *(_OWORD *)uint64_t v5 = v21;
      *(_OWORD *)(a1 + 8736) = v22;
      long long v24 = *(_OWORD *)(a2 + 64);
      long long v25 = *(_OWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 8816) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 8832) = v26;
      *(_OWORD *)(a1 + 8784) = v24;
      *(_OWORD *)(a1 + 8800) = v25;
      v4[1128] = 1;
    }
  }
  else
  {
    if (v4[1128]) {
      v4[1128] = 0;
    }
    v4[1144] = 0;
    *(_DWORD *)(a1 + 9888) = 0;
  }
  if (!v4[1144])
  {
    sub_100388BF4(a1 + 6160, a2, (uint64_t)buf);
    long long v41 = *(_OWORD *)(a2 + 80);
    v104[4] = *(_OWORD *)(a2 + 64);
    v104[5] = v41;
    long long v42 = *(_OWORD *)(a2 + 112);
    v104[6] = *(_OWORD *)(a2 + 96);
    v104[7] = v42;
    long long v43 = *(_OWORD *)(a2 + 16);
    v104[0] = *(_OWORD *)a2;
    v104[1] = v43;
    long long v44 = *(_OWORD *)(a2 + 48);
    v104[2] = *(_OWORD *)(a2 + 32);
    v104[3] = v44;
    sub_10036DFD0(a1 + 6528, (uint64_t)v104, (uint64_t)buf);
    *(_DWORD *)(a1 + 9808) = v121;
    float32x4_t v45 = (float32x4_t)xmmword_1004C43D0;
    if (!v4[985])
    {
      if (*(_DWORD *)(a2 + 80) != 2 || *(unsigned char *)(a2 + 84))
      {
        if (v4[1784]) {
          v4[1784] = 0;
        }
        if (v4[2136]) {
          v4[2136] = 0;
        }
      }
      else
      {
        float32x4_t v95 = *(float32x4_t *)(a2 + 16);
        float32x4_t v97 = *(float32x4_t *)(a2 + 32);
        float32x4_t v91 = *(float32x4_t *)(a2 + 64);
        float32x4_t v93 = *(float32x4_t *)(a2 + 48);
        *(double *)&long long v46 = sub_100344D00((float32x4_t)xmmword_1004C43D0);
        uint64_t v47 = 0;
        long long v100 = v46;
        long long v101 = v48;
        long long v102 = v49;
        long long v103 = v50;
        do
        {
          *(long long *)((char *)&v122 + v47) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, COERCE_FLOAT(*(long long *)((char *)&v100 + v47))), v97, *(float32x2_t *)((char *)&v100 + v47), 1), v93, *(float32x4_t *)((char *)&v100 + v47), 2), v91, *(float32x4_t *)((char *)&v100 + v47), 3);
          v47 += 16;
        }
        while (v47 != 64);
        long long v51 = v122;
        long long v52 = v123;
        long long v53 = v124;
        long long v54 = v125;
        char v55 = *(unsigned char *)(a2 + 85);
        int v56 = v4[1784];
        *(void *)(a1 + 9376) = *(void *)a2;
        *(_OWORD *)(a1 + 9392) = v51;
        *(_OWORD *)(a1 + 9408) = v52;
        *(_OWORD *)(a1 + 9424) = v53;
        *(_OWORD *)(a1 + 9440) = v54;
        *(_DWORD *)(a1 + 9456) = 2;
        v4[1740] = 0;
        v4[1741] = v55;
        v4[1744] = 0;
        v4[1752] = 0;
        v4[1760] = 0;
        v4[1764] = 0;
        if (!v56) {
          v4[1784] = 1;
        }
        v4[1768] = 0;
        v4[1772] = 0;
      }
      sub_10033BCD4(a1 + 4944, a2);
      if (v111)
      {
        sub_100377980(a1 + 448, (uint64_t)buf);
        if (*(_DWORD *)&v108[16] == 2)
        {
          if (!v111) {
            goto LABEL_70;
          }
          long long v57 = (_OWORD *)(a1 + 9520);
          long long v58 = *(_OWORD *)&v108[16];
          if (v4[1928])
          {
            *(_OWORD *)(a1 + 9584) = *(_OWORD *)v108;
            *(_OWORD *)(a1 + 9600) = v58;
            *(_OWORD *)(a1 + 9616) = v109;
            *(void *)(a1 + 9632) = v110;
            long long v59 = *(_OWORD *)&buf[16];
            *long long v57 = *(_OWORD *)buf;
            *(_OWORD *)(a1 + 9536) = v59;
            long long v60 = *(_OWORD *)&v107[16];
            *(_OWORD *)(a1 + 9552) = *(_OWORD *)v107;
            *(_OWORD *)(a1 + 9568) = v60;
          }
          else
          {
            *(_OWORD *)(a1 + 9584) = *(_OWORD *)v108;
            *(_OWORD *)(a1 + 9600) = v58;
            long long v61 = v110;
            *(_OWORD *)(a1 + 9616) = v109;
            *(_OWORD *)(a1 + 9632) = v61;
            long long v62 = *(_OWORD *)&buf[16];
            *long long v57 = *(_OWORD *)buf;
            *(_OWORD *)(a1 + 9536) = v62;
            long long v63 = *(_OWORD *)&v107[16];
            *(_OWORD *)(a1 + 9552) = *(_OWORD *)v107;
            *(_OWORD *)(a1 + 9568) = v63;
            v4[1928] = 1;
          }
          long long v64 = v116;
          *(_OWORD *)(a1 + 9744) = v117;
          long long v65 = v119;
          *(_OWORD *)(a1 + 9760) = v118;
          *(_OWORD *)(a1 + 9776) = v65;
          long long v66 = v112;
          *(_OWORD *)(a1 + 9680) = v113;
          long long v67 = v115;
          *(_OWORD *)(a1 + 9696) = v114;
          *(_OWORD *)(a1 + 9712) = v67;
          *(_OWORD *)(a1 + 9728) = v64;
          *(_OWORD *)(a1 + 9664) = v66;
          *(unsigned char *)(a1 + 9792) = v120;
        }
      }
      sub_1003590C4((void *)(a1 + 8872), a2);
      float32x4_t v45 = (float32x4_t)xmmword_1004C43D0;
      if (!v4[985]) {
        goto LABEL_63;
      }
    }
    if (!v111) {
      goto LABEL_63;
    }
    if (BYTE4(v110))
    {
      if ((v110 - 2) < 2) {
        goto LABEL_53;
      }
      if (!v110)
      {
        if (v4[1784]) {
          v4[1784] = 0;
        }
        if (v4[2136]) {
          v4[2136] = 0;
        }
        goto LABEL_56;
      }
      if (v110 == 5)
      {
LABEL_53:
        float32x4_t v96 = *(float32x4_t *)&buf[16];
        float32x4_t v98 = *(float32x4_t *)v107;
        float32x4_t v92 = *(float32x4_t *)v108;
        float32x4_t v94 = *(float32x4_t *)&v107[16];
        *(double *)&long long v68 = sub_100344D00(v45);
        uint64_t v69 = 0;
        long long v100 = v68;
        long long v101 = v70;
        long long v102 = v71;
        long long v103 = v72;
        do
        {
          *(long long *)((char *)&v122 + v69) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, COERCE_FLOAT(*(long long *)((char *)&v100 + v69))), v98, *(float32x2_t *)((char *)&v100 + v69), 1), v94, *(float32x4_t *)((char *)&v100 + v69), 2), v92, *(float32x4_t *)((char *)&v100 + v69), 3);
          v69 += 16;
        }
        while (v69 != 64);
        long long v73 = v122;
        long long v74 = v123;
        long long v75 = *(_OWORD *)v107;
        *(_OWORD *)(a1 + 9392) = *(_OWORD *)&buf[16];
        *(_OWORD *)(a1 + 9408) = v75;
        long long v76 = *(_OWORD *)v108;
        *(_OWORD *)(a1 + 9424) = *(_OWORD *)&v107[16];
        *(_OWORD *)(a1 + 9440) = v76;
        long long v77 = v109;
        *(_OWORD *)(a1 + 9456) = *(_OWORD *)&v108[16];
        long long v78 = v124;
        long long v79 = v125;
        *(_OWORD *)(a1 + 9472) = v77;
        *(_OWORD *)(a1 + 9488) = v110;
        *(unsigned char *)(a1 + 9504) = v111;
        *(_OWORD *)(a1 + 9376) = *(_OWORD *)buf;
        *(_OWORD *)(a1 + 9392) = v73;
        *(_OWORD *)(a1 + 9408) = v74;
        *(_OWORD *)(a1 + 9424) = v78;
        *(_OWORD *)(a1 + 9440) = v79;
        *(void *)(a1 + 9872) = *(void *)buf;
        v4[2160] = 1;
      }
    }
LABEL_56:
    sub_10033BCD4(a1 + 4944, (uint64_t)buf);
    if (!v111) {
      goto LABEL_70;
    }
    sub_1003590C4((void *)(a1 + 8872), (uint64_t)buf);
    sub_100377980(a1 + 448, (uint64_t)buf);
    if (*(_DWORD *)&v108[16] == 2)
    {
      if (v111)
      {
        long long v80 = (_OWORD *)(a1 + 9520);
        long long v81 = *(_OWORD *)&v108[16];
        if (v4[1928])
        {
          *(_OWORD *)(a1 + 9584) = *(_OWORD *)v108;
          *(_OWORD *)(a1 + 9600) = v81;
          *(_OWORD *)(a1 + 9616) = v109;
          *(void *)(a1 + 9632) = v110;
          long long v82 = *(_OWORD *)&buf[16];
          _OWORD *v80 = *(_OWORD *)buf;
          *(_OWORD *)(a1 + 9536) = v82;
          long long v83 = *(_OWORD *)&v107[16];
          *(_OWORD *)(a1 + 9552) = *(_OWORD *)v107;
          *(_OWORD *)(a1 + 9568) = v83;
        }
        else
        {
          *(_OWORD *)(a1 + 9584) = *(_OWORD *)v108;
          *(_OWORD *)(a1 + 9600) = v81;
          long long v84 = v110;
          *(_OWORD *)(a1 + 9616) = v109;
          *(_OWORD *)(a1 + 9632) = v84;
          long long v85 = *(_OWORD *)&buf[16];
          _OWORD *v80 = *(_OWORD *)buf;
          *(_OWORD *)(a1 + 9536) = v85;
          long long v86 = *(_OWORD *)&v107[16];
          *(_OWORD *)(a1 + 9552) = *(_OWORD *)v107;
          *(_OWORD *)(a1 + 9568) = v86;
          v4[1928] = 1;
        }
        long long v87 = v116;
        *(_OWORD *)(a1 + 9744) = v117;
        long long v88 = v119;
        *(_OWORD *)(a1 + 9760) = v118;
        *(_OWORD *)(a1 + 9776) = v88;
        long long v89 = v112;
        *(_OWORD *)(a1 + 9680) = v113;
        long long v90 = v115;
        *(_OWORD *)(a1 + 9696) = v114;
        *(_OWORD *)(a1 + 9712) = v90;
        *(_OWORD *)(a1 + 9728) = v87;
        *(_OWORD *)(a1 + 9664) = v89;
        *(unsigned char *)(a1 + 9792) = v120;
        goto LABEL_63;
      }
LABEL_70:
      sub_10000AE44();
    }
LABEL_63:
    if (*v4)
    {
      if (*(double *)a2 >= *(double *)(a1 + 7712)) {
        sub_10039687C(a1 + 5504, a2);
      }
    }
  }
}

void sub_100383B50(uint64_t a1, double *a2, int a3)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100435E3C();
  }
  double v40 = 0.0;
  BOOL v6 = sub_1003892E4(a1, &v40, a2[2]);
  double v7 = qword_1008ABDE0;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *((_DWORD *)a2 + 23);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)long long v42 = v8;
      *(_WORD *)&_OWORD v42[4] = 1024;
      *(_DWORD *)&v42[6] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,CL location type: %d,isPeer,%d", buf, 0xEu);
    }
    if (a3)
    {
      uint64_t v9 = *(int *)(a1 + 8272);
      if v9 < 7 && ((0x5Fu >> v9))
      {
        double v11 = dbl_1004C4348[v9];
      }
      else
      {
        double v10 = qword_1008ABDE0;
        double v11 = 20.0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
          sub_100435D34(v9, v10);
        }
      }
      long long v20 = (double *)(a1 + 8216);
      int v21 = *(unsigned __int8 *)(a1 + 8264);
      if (*(unsigned char *)(a1 + 8264) && (double v22 = *v20, v40 <= *v20))
      {
        long long v26 = qword_1008ABDE0;
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        double v28 = v22;
        double v27 = a2[7];
      }
      else
      {
        double v23 = a2[7];
        if (v23 > 0.0 && v23 < v11)
        {
          char v24 = *(unsigned char *)(a1 + 7848);
          double v25 = v40;
          if (v24) {
            char v24 = vabdd_f64(*(double *)(a1 + 7832), v40) < 3.0 && *(unsigned char *)(a1 + 7840) != 0;
          }
          long long v29 = *(_OWORD *)a2;
          uint64_t v30 = *((void *)a2 + 5);
          if (!*(unsigned char *)(a1 + 8264)) {
            *(unsigned char *)(a1 + 8264) = 1;
          }
          *(double *)(a1 + 8216) = v25;
          *(_OWORD *)(a1 + 8224) = v29;
          *(double *)(a1 + 8240) = v23;
          *(void *)(a1 + 8248) = v30;
          *(unsigned char *)(a1 + 8256) = v24;
          long long v31 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
            sub_100435CA4(v31, (unsigned char *)(a1 + 8264), v32, v33, v34, v35, v36, v37);
          }
          sub_10035BD28(a1 + 48, a1 + 8216);
          return;
        }
        long long v26 = qword_1008ABDE0;
        if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        double v27 = v23;
        if (v21) {
          double v28 = *v20;
        }
        else {
          double v28 = -1.0;
        }
      }
      *(_DWORD *)long long buf = 134218752;
      *(double *)long long v42 = v28;
      *(_WORD *)&v42[8] = 2048;
      double v43 = v40;
      __int16 v44 = 2048;
      double v45 = v27;
      __int16 v46 = 2048;
      double v47 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,Not injecting peer location received via NI SPI; duplicate, staleness, or uncertainty che"
        "ck failed, last_timestamp,%.2lf,current_timestamp,%.2lf,hUnc,%.1lf,hUncThreshold,%.1lf",
        buf,
        0x2Au);
      return;
    }
    *(_DWORD *)(a1 + 8272) = *((_DWORD *)a2 + 24);
    if (*((_DWORD *)a2 + 23) == 1)
    {
      double v12 = v40;
      if (!*(unsigned char *)(a1 + 8208) || v40 > *(double *)(a1 + 8160))
      {
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *((void *)a2 + 1);
        uint64_t v15 = *((void *)a2 + 7);
        uint64_t v16 = *((void *)a2 + 5);
        sub_100004950(__p, "Finder");
        BOOL v17 = sub_10038D474(a1 + 7776, (uint64_t *)__p, v12);
        if (!*(unsigned char *)(a1 + 8208)) {
          *(unsigned char *)(a1 + 8208) = 1;
        }
        *(double *)(a1 + 8160) = v12;
        *(void *)(a1 + 8168) = v13;
        *(void *)(a1 + 8176) = v14;
        *(void *)(a1 + 8184) = v15;
        *(void *)(a1 + 0x2000) = v16;
        *(unsigned char *)(a1 + 8200) = v17;
        if (v39 < 0) {
          operator delete(__p[0]);
        }
        long long v18 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = *(_DWORD *)(a1 + 8272);
          *(_DWORD *)long long buf = 134218240;
          *(double *)long long v42 = v40;
          *(_WORD *)&v42[8] = 1024;
          LODWORD(v43) = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,Pass self location to CL arrow filter, timestamp: %f,signalEnv,%d", buf, 0x12u);
        }
        if (!*(unsigned char *)(a1 + 8208)) {
          sub_10000AE44();
        }
        sub_10035BDAC(a1 + 48, (long long *)(a1 + 8160));
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
  {
    sub_100435DAC(a3, v7);
  }
}

void sub_100383F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100383F88(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100435EB0();
  }
  uint64_t v4 = 0;
  if (sub_1003892E4(a1, (double *)&v4, *(double *)(a2 + 24)))
  {
    __src[0] = v4;
    *(_OWORD *)&__src[1] = *(_OWORD *)(a2 + 8);
    sub_10035BD64(a1 + 48, (uint64_t)__src);
    if (*(unsigned char *)(a1 + 8576))
    {
      if (*(unsigned char *)(a1 + 8512)) {
        sub_10035B670(a1 + 48, (uint64_t)__src);
      }
      else {
        memset(__src, 0, 384);
      }
      if (sub_100384100(a1, (uint64_t)__src))
      {
        memcpy(__dst, __src, sizeof(__dst));
        sub_10037652C(a1 + 448, __dst);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
  {
    sub_100435E70();
  }
}

uint64_t sub_100384100(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 208) || !*(unsigned char *)(a2 + 328) || !*(unsigned char *)(a2 + 192) || !*(unsigned char *)(a2 + 344))
  {
LABEL_142:
    uint64_t v64 = a1 + 8872;
    goto LABEL_143;
  }
  uint64_t v4 = (unsigned char *)(a1 + 7752);
  uint64_t v5 = (double *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 32)) {
    uint64_t v5 = (double *)(a2 + 16);
  }
  double v6 = *v5;
  int v7 = *(unsigned __int8 *)(a1 + 8515);
  if (*(unsigned char *)(a1 + 8515))
  {
    sub_10034040C(a1 + 4944, 1, (uint64_t)&v105);
    int v7 = v117;
    double v8 = 0.0;
    if ((_BYTE)v117)
    {
      sub_100358E68(a1 + 8872, (uint64_t)&v105);
      int v7 = v117;
      if ((_BYTE)v117)
      {
        int v7 = 1;
        double v8 = *(double *)&v106;
      }
    }
  }
  else
  {
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    double v8 = 0.0;
  }
  if (*(unsigned char *)(a2 + 192)) {
    float v9 = *(float *)(a2 + 24);
  }
  else {
    float v9 = INFINITY;
  }
  double v10 = v6 - v8;
  if (v7 && v10 < 5.0 && *((float *)&v106 + 2) < v9) {
    float v9 = *((float *)&v106 + 2);
  }
  if (v10 >= 20.0) {
    int v7 = 0;
  }
  if (*(unsigned char *)(a2 + 192) && v7)
  {
    double v11 = fmax(v10, 0.0);
    double v12 = fmax(*((float *)&v106 + 2) - (v11 + v11), 0.0);
    double v13 = *(float *)(a2 + 24);
    double v14 = v13 - (v11 * 0.5 + *((float *)&v106 + 2));
    double v15 = v12 - v13;
    if (v14 >= v15) {
      double v15 = v14;
    }
    *(double *)(a1 + 7744) = v15;
    *uint64_t v4 = 1;
  }
  else if (*v4)
  {
    *uint64_t v4 = 0;
  }
  char v16 = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 7760) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 7768) = v16;
  if (!*(unsigned char *)(a1 + 8514) && !*(unsigned char *)(a1 + 8515))
  {
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    goto LABEL_33;
  }
  sub_10033DE98(a1 + 4944, (uint64_t)&v81);
  if (!(_BYTE)v93)
  {
LABEL_33:
    float v17 = *(float *)(a2 + 24);
    goto LABEL_34;
  }
  float v17 = *((float *)&v82 + 2);
LABEL_34:
  int v18 = *(_DWORD *)(a1 + 8272) - 1;
  if v18 < 6 && ((0x2Fu >> v18))
  {
    uint64_t v19 = qword_1004C4380[v18];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
      sub_100436074();
    }
    uint64_t v19 = 2;
  }
  long long v20 = (char *)&unk_1004C4250 + 64 * v19;
  if (v17 >= 12.5)
  {
    if (v17 >= 15.0)
    {
      if (v17 >= 17.5)
      {
        if (v17 >= 20.0)
        {
          if (v17 >= 25.0)
          {
            if (v17 >= 30.0)
            {
              uint64_t v21 = 7;
              if (v17 < 35.0) {
                uint64_t v21 = 6;
              }
            }
            else
            {
              uint64_t v21 = 5;
            }
          }
          else
          {
            uint64_t v21 = 4;
          }
        }
        else
        {
          uint64_t v21 = 3;
        }
      }
      else
      {
        uint64_t v21 = 2;
      }
    }
    else
    {
      uint64_t v21 = 1;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  double v22 = *(double *)(a2 + 336);
  if (!*(unsigned char *)(a2 + 344)) {
    double v22 = INFINITY;
  }
  int v23 = *v4;
  double v24 = -1.0;
  if (*v4) {
    double v24 = *(double *)(a1 + 7744);
  }
  double v25 = *(double *)&v20[8 * v21];
  double v26 = v9;
  if (*(unsigned char *)(a2 + 120)) {
    double v27 = *(double *)(a2 + 112);
  }
  else {
    double v27 = -1.0;
  }
  int v28 = *(unsigned __int8 *)(a1 + 8305);
  if (*(unsigned char *)(a1 + 8305)) {
    double v29 = 10.0;
  }
  else {
    double v29 = 12.0;
  }
  int v30 = *(unsigned __int8 *)(a2 + 328);
  unint64_t v31 = *(void *)(a2 + 320);
  if (*(unsigned char *)(a2 + 328)) {
    double v32 = *(double *)(a2 + 320);
  }
  else {
    double v32 = INFINITY;
  }
  if (*v4) {
    BOOL v33 = *(double *)(a1 + 7744) > dbl_1004C41C0[v28 == 0];
  }
  else {
    BOOL v33 = 0;
  }
  uint64_t v34 = (unsigned __int8 *)(a1 + 8305);
  double v35 = dbl_1004C41B0[*(unsigned char *)(a1 + 8305) == 0];
  if (v29 > v26 || v32 > v35 || v25 * v22 > 30.0 || v33)
  {
    double v66 = v25 * v22;
    char v39 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
    {
      unint64_t v40 = v31;
      unint64_t v41 = 0xBFF0000000000000;
      if (!v30) {
        unint64_t v40 = 0xBFF0000000000000;
      }
      if (*(unsigned char *)(a2 + 192)) {
        double v42 = *(float *)(a2 + 24);
      }
      else {
        double v42 = -1.0;
      }
      if ((_BYTE)v117) {
        double v43 = *((float *)&v106 + 2);
      }
      else {
        double v43 = -1.0;
      }
      if (v23) {
        unint64_t v41 = *(void *)(a1 + 7744);
      }
      *(_DWORD *)long long buf = 134219776;
      *(void *)long long v68 = v40;
      *(_WORD *)&v68[8] = 2048;
      *(double *)&v68[10] = v42;
      __int16 v69 = 2048;
      double v70 = v43;
      __int16 v71 = 2048;
      double v72 = v26;
      __int16 v73 = 2048;
      double v74 = v25;
      __int16 v75 = 2048;
      double v76 = v66;
      __int16 v77 = 2048;
      double v78 = v24 / v27;
      __int16 v79 = 2048;
      unint64_t v80 = v41;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,rejecting CL solution,unc = %.1lf,CL range,%.1lf,rangeFilterRange,%.1lf,fusedRange,%.1lf,bearing_scale_factor,%.1lf,scaled_bearing_unc,%.1lf,abs_range_diff_range_unc,%.1lf,absClRangeMinusUWBRangeM,%.1lf", buf, 0x52u);
    }
    if (v29 > v26)
    {
      __int16 v44 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
      {
        int v45 = *v34;
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)long long v68 = v45;
        *(_WORD *)&v68[4] = 2048;
        *(double *)&v68[6] = v26;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,#clcc,isLastSolFromCL,%d,RANGE_TO_CLOSE_TO_YIELD_CL_FAILURE,%.1lf", buf, 0x12u);
      }
    }
    if (v32 > v35)
    {
      __int16 v46 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
      {
        int v47 = *v34;
        uint64_t v48 = 0x7FF0000000000000;
        if (*(unsigned char *)(a2 + 328)) {
          uint64_t v48 = *(void *)(a2 + 320);
        }
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)long long v68 = v47;
        *(_WORD *)&v68[4] = 2048;
        *(void *)&v68[6] = v48;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,#clcc,isLastSolFromCL,%d,CL_ANGLE_UNCERTAINTY_FAILURE,%.1lf", buf, 0x12u);
      }
    }
    if (v66 > 30.0)
    {
      long long v49 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
      {
        int v50 = *v34;
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)long long v68 = v50;
        *(_WORD *)&v68[4] = 2048;
        *(double *)&v68[6] = v66;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,#clcc,isLastSolFromCL,%d,CL_BEARING_UNCERTAINTY_FAILURE,%.1lf", buf, 0x12u);
      }
    }
    if (v33)
    {
      long long v51 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
      {
        int v52 = *(unsigned __int8 *)(a1 + 8305);
        if (*v4) {
          uint64_t v53 = *(void *)(a1 + 7744);
        }
        else {
          uint64_t v53 = 0;
        }
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)long long v68 = v52;
        *(_WORD *)&v68[4] = 2048;
        *(void *)&v68[6] = v53;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,#clcc,isLastSolFromCL,%d,CL_UWB_RANGE_DIFFERENCE_FAILURE,%.1lf", buf, 0x12u);
      }
    }
    goto LABEL_142;
  }
  if (!*(unsigned char *)(a1 + 9504))
  {
    long long v54 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
    {
      if (*(unsigned char *)(a2 + 353)) {
        BOOL v55 = *(unsigned char *)(a2 + 352) == 0;
      }
      else {
        BOOL v55 = 1;
      }
      int v56 = !v55;
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)long long v68 = v28;
      *(_WORD *)&v68[4] = 1024;
      *(_DWORD *)&v68[6] = v56;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "#findalgs-peoplefinder,#clcc,isLastSolFromCL,%d,No valid poses to perform arrow range cross check,producedInGoodEnvironmentalConditions,%d", buf, 0xEu);
    }
    if (*(unsigned char *)(a1 + 8664) && *(unsigned char *)(a2 + 353) && *(unsigned char *)(a2 + 352))
    {
      uint64_t v57 = a1 + 8872;
      uint64_t v58 = 1;
      goto LABEL_146;
    }
    goto LABEL_142;
  }
  uint64_t v36 = (double *)(a1 + 9376);
  if (*(unsigned char *)(a1 + 8664))
  {
    if (*(unsigned char *)(a2 + 353)) {
      BOOL v37 = *(unsigned char *)(a2 + 352) == 0;
    }
    else {
      BOOL v37 = 1;
    }
    int v38 = !v37;
  }
  else
  {
    int v38 = 0;
  }
  uint64_t v59 = a1 + 8872;
  int v60 = sub_100359208(v59, v36, a2, v28 != 0);
  if (v60)
  {
    if (v60 != 2) {
      return 1;
    }
    long long v61 = qword_1008ABDE0;
    BOOL v62 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
    if (v38)
    {
      if (v62) {
        sub_100435F60(v34, v61);
      }
      if (sub_1003597A8(v59)) {
        return 1;
      }
      uint64_t v58 = 1;
      uint64_t v57 = v59;
LABEL_146:
      sub_1003597B8(v57, 1);
      return v58;
    }
    if (v62) {
      sub_100435FEC(v34, v61);
    }
    if (*v34) {
      sub_100359184(v59);
    }
    goto LABEL_139;
  }
  long long v63 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100435EE4(v34, v63);
  }
  if (*v34) {
    sub_100359184(v59);
  }
  uint64_t v58 = sub_1003597B0(v59);
  if (((v58 ^ 1 | v38) & 1) == 0)
  {
LABEL_139:
    uint64_t v64 = v59;
LABEL_143:
    sub_1003597B8(v64, 0);
    return 0;
  }
  return v58;
}

void sub_1003849C0(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004360A8();
  }
  if (*(unsigned char *)(a1 + 32)) {
    sub_10038D3DC(a1 + 7776, a2, *(double *)(a1 + 8));
  }
}

void sub_100384A30(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_1004360DC(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(unsigned char *)(a1 + 8276) = 1;
}

void sub_100384A94(uint64_t a1, uint64_t a2)
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_100436500();
  }
  double v119 = 0.0;
  if (*(unsigned char *)(a2 + 128))
  {
    uint64_t v6 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100436470(a2 + 120, v6, (unsigned char *)(a2 + 128), v7, v8, v9, v10, v11);
    }
    sub_1003892C0(a1, &v119, *(double *)(a2 + 120));
    goto LABEL_7;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    double v2 = *(double *)(a1 + 8);
    double v119 = v2;
    uint64_t v19 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
      sub_100436400(v19, v20, v21, v22, v23, v24, v25, v26);
    }
LABEL_7:
    double v13 = v119;
    *(double *)(a1 + 8488) = v119;
    *(unsigned char *)(a1 + 8496) = 1;
    int v114 = *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned char *)(a2 + 16))
    {
      double v14 = *(double *)a2;
      int v111 = *(_DWORD *)(a2 + 8);
      sub_1003786FC(a1 + 448, v111, v13);
      sub_10035BE7C(a1 + 48, (int *)(a2 + 8), v119);
      int v15 = *(_DWORD *)(a2 + 8);
      double v16 = 0.0;
      if (v15 == 2)
      {
        *(_DWORD *)(a1 + 8504) = 2;
        if (*(double *)a2 != 409.5 || !*(unsigned char *)(a1 + 8464) || *(double *)(a1 + 8456) != 409.5)
        {
          int v116 = 0;
          int v17 = 0;
          *(void *)(a1 + 8456) = *(void *)a2;
          *(unsigned char *)(a1 + 8464) = 1;
          double v14 = v119 - *(double *)a2;
          goto LABEL_44;
        }
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004363CC();
        }
LABEL_36:
        int v116 = 0;
        int v17 = 0;
LABEL_44:
        double v112 = 0.0;
        goto LABEL_47;
      }
      if (v15 != 1)
      {
        if (!v15)
        {
          int v17 = 1;
          *(_DWORD *)(a1 + 8504) = 1;
          if (*(double *)a2 == 409.5
            && *(unsigned char *)(a1 + 8464)
            && *(double *)(a1 + 8456) == 409.5
            && *(unsigned char *)(a1 + 7688))
          {
            int v18 = qword_1008ABDE0;
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,Received bounded displacement with max enter timestamp again.", buf, 2u);
              int v17 = *(unsigned __int8 *)(a1 + 7688);
              if (!*(unsigned char *)(a1 + 7688)) {
                sub_10000AE44();
              }
            }
            int v116 = 0;
            double v14 = *(double *)(a1 + 7680);
          }
          else
          {
            *(void *)(a1 + 8456) = *(void *)a2;
            *(unsigned char *)(a1 + 8464) = 1;
            double v14 = v119 - *(double *)a2;
            if (*(unsigned char *)(a1 + 7688)
              && (int v12 = *(unsigned char *)(a1 + 40) == 0,
                  double v2 = *(double *)(a1 + 7680),
                  v14 - v2 > dbl_1004C41D0[*(unsigned char *)(a1 + 40) == 0]))
            {
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
                sub_100436354();
              }
              int v116 = 0;
              *(double *)(a1 + 7680) = v14;
              *(unsigned char *)(a1 + 7688) = 1;
            }
            else
            {
              int v116 = 0;
            }
          }
          double v112 = 0.0;
          double v16 = v14;
          goto LABEL_47;
        }
        goto LABEL_36;
      }
      int v12 = 1;
      int v116 = 1;
      *(_DWORD *)(a1 + 8504) = 1;
      if (*(double *)a2 == 409.5 && *(unsigned char *)(a1 + 8464) && *(double *)(a1 + 8456) == 409.5)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_1004363CC();
        }
        int v17 = 0;
        double v112 = *(double *)(a1 + 7696);
        int v116 = *(unsigned __int8 *)(a1 + 7704);
      }
      else
      {
        int v17 = 0;
        *(void *)(a1 + 8456) = *(void *)a2;
        *(unsigned char *)(a1 + 8464) = 1;
        double v14 = v119 - *(double *)a2;
        double v112 = v14;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 8464)) {
        *(unsigned char *)(a1 + 8464) = 0;
      }
      int v116 = 0;
      int v17 = 0;
      *(_DWORD *)(a1 + 8504) = 0;
      double v14 = 0.0;
      double v112 = 0.0;
      double v16 = 0.0;
    }
LABEL_47:
    if (!*(unsigned char *)(a2 + 72))
    {
      double v30 = 0.0;
      char v31 = 0;
      int v115 = 0;
      int v32 = 0;
      if (*(unsigned char *)(a1 + 8480)) {
        *(unsigned char *)(a1 + 8480) = 0;
      }
      double v37 = 0.0;
      double v113 = 0.0;
LABEL_104:
      if (v114)
      {
        *(double *)long long buf = v14;
        *(_DWORD *)&uint8_t buf[8] = v111;
        *(double *)&uint8_t buf[16] = v30;
        double v121 = v110;
        *(_DWORD *)long long v122 = v12;
        *(double *)&v122[8] = v2;
        *(void *)&v122[16] = v3;
        uint64_t v123 = 0;
        char v124 = v31;
        int v60 = sub_10036F1B0((unsigned int *)(a1 + 6000), (uint64_t)buf);
        *(_DWORD *)(a1 + 6152) = v60;
        *(unsigned char *)(a1 + 6156) = 1;
        switch(v60)
        {
          case 2:
            sub_100385DDC(a1);
            sub_100340C8C(a1 + 4944, 0);
            break;
          case 1:
            sub_100340C8C(a1 + 4944, 0);
            break;
          case 0:
            sub_100385DDC(a1);
            break;
        }
      }
      if (!*(unsigned char *)(a2 + 112)) {
        goto LABEL_124;
      }
      int v61 = v17;
      BOOL v62 = (_OWORD *)(a2 + 80);
      long long v63 = (_OWORD *)(a1 + 8400);
      if (*(unsigned char *)(a1 + 8432))
      {
        if (*(unsigned char *)(a1 + 8376))
        {
          double v64 = v119 - *(double *)(a2 + 88) - *(double *)(a1 + 8368);
          *(double *)&uint64_t v65 = COERCE_DOUBLE(sub_10038100C(*(double *)(a2 + 96), *(double *)(a1 + 8416), v64, -6.4, 6.35, 0.05, 10.0));
          if (!*(unsigned char *)(a2 + 112)) {
            sub_10000AE44();
          }
          double v67 = *(double *)&v65;
          char v68 = v66;
          *(double *)&uint64_t v69 = COERCE_DOUBLE(sub_10038100C(*(double *)(a2 + 104), *(double *)(a1 + 8424), v64, -6.4, 6.35, 0.05, 10.0));
          if (v64 >= 0.0)
          {
            if (v68 && v70)
            {
              if (!*(unsigned char *)(a2 + 112)) {
                sub_10000AE44();
              }
              double v82 = *(double *)&v69;
              int v83 = *(unsigned __int8 *)(a1 + 8432);
              long long v84 = *(_OWORD *)(a2 + 96);
              _OWORD *v63 = *v62;
              *(_OWORD *)(a1 + 8416) = v84;
              if (!v83) {
                *(unsigned char *)(a1 + 8432) = 1;
              }
              if (!*(unsigned char *)(a2 + 112)) {
                sub_10000AE44();
              }
              int v17 = v61;
              double v85 = v119;
              *(double *)(a1 + 8368) = v119 - *(double *)(a2 + 88);
              *(unsigned char *)(a1 + 8376) = 1;
              long long v86 = qword_1008ABDE0;
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
              {
                if (!*(unsigned char *)(a2 + 112)) {
                  sub_10000AE44();
                }
                double v87 = v85 - *(double *)(a2 + 88);
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v67;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(double *)&buf[14] = v82;
                *(_WORD *)&unsigned char buf[22] = 2048;
                double v121 = v64;
                *(_WORD *)long long v122 = 2048;
                *(double *)&v122[2] = v87;
                _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeePDR Received delta velocity, delta x: %f, delta z: %f, delta t: %f, app time: %f", buf, 0x2Au);
              }
              double v88 = v67;
              *(double *)(a1 + 8440) = *(double *)(a1 + 8440) + v67;
              *(double *)(a1 + 8448) = *(double *)(a1 + 8448) + v82;
              long long v89 = (void *)std::ostream::operator<<();
              sub_100056628(v89, (uint64_t)", ", 2);
              long long v90 = (void *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v90 + *(void *)(*v90 - 24)));
              long long v91 = std::locale::use_facet((const std::locale *)buf, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 10);
              std::locale::~locale((std::locale *)buf);
              std::ostream::put();
              std::ostream::flush();
              long long v92 = qword_1008ABDE0;
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v93 = *(void *)(a1 + 8440);
                uint64_t v94 = *(void *)(a1 + 8448);
                double v95 = *(double *)(a1 + 8416);
                uint64_t v96 = *(void *)(a1 + 8424);
                *(_DWORD *)long long buf = 134218752;
                *(void *)&uint8_t buf[4] = v93;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v94;
                *(_WORD *)&unsigned char buf[22] = 2048;
                double v121 = v95;
                *(_WORD *)long long v122 = 2048;
                *(void *)&v122[2] = v96;
                _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeePDRtest Integrated velocity, H1: %f, H2: %f, true velocity H1: %f, H2: %f", buf, 0x2Au);
              }
              if (!*(unsigned char *)(a2 + 112)) {
                sub_10000AE44();
              }
              sub_100376FC8(a1 + 448, v88, v82, v119 - *(double *)(a2 + 88), v64);
            }
            else
            {
              long long v97 = qword_1008ABDE0;
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeePDR Invalid overflow detected in received delta velocity", buf, 2u);
              }
              if (!*(unsigned char *)(a2 + 112)) {
                sub_10000AE44();
              }
              int v98 = *(unsigned __int8 *)(a1 + 8432);
              long long v99 = *(_OWORD *)(a2 + 96);
              _OWORD *v63 = *v62;
              *(_OWORD *)(a1 + 8416) = v99;
              if (!v98) {
                *(unsigned char *)(a1 + 8432) = 1;
              }
              if (!*(unsigned char *)(a2 + 112)) {
                sub_10000AE44();
              }
              int v17 = v61;
              *(double *)(a1 + 8368) = v119 - *(double *)(a2 + 88);
              *(unsigned char *)(a1 + 8376) = 1;
            }
          }
          else
          {
            __int16 v71 = qword_1008ABDE0;
            int v17 = v61;
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
            {
              if (!*(unsigned char *)(a2 + 112)) {
                sub_10000AE44();
              }
              if (!*(unsigned char *)(a1 + 8376)) {
                sub_10000AE44();
              }
              *(double *)&uint8_t buf[4] = v119;
              double v72 = *(double *)(a2 + 88);
              uint64_t v73 = *(void *)(a1 + 8368);
              *(_DWORD *)long long buf = 134218752;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(double *)&buf[14] = v72;
              *(_WORD *)&unsigned char buf[22] = 2048;
              double v121 = v119 - v72;
              *(_WORD *)long long v122 = 2048;
              *(void *)&v122[2] = v73;
              _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "#findalgs-peoplefinder,negative delta T, last range time: %f, app time: %f, curr timestamp: %f, last timestamp: %f ", buf, 0x2Au);
            }
          }
LABEL_124:
          if ((v17 != 0) != (*(unsigned char *)(a1 + 7688) != 0))
          {
            *(double *)(a1 + 7680) = v16;
            *(unsigned char *)(a1 + 7688) = v17;
          }
          if ((v116 != 0) != (*(unsigned char *)(a1 + 7704) != 0))
          {
            *(double *)(a1 + 7696) = v112;
            *(unsigned char *)(a1 + 7704) = v116;
            if (!sub_100381254(a1))
            {
              double v76 = qword_1008ABDE0;
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v116 != 0;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v17 != 0;
                _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,reinitializing particle filter. FindeeSlowlyMoving: %d, findeeStatic: %d", buf, 0xEu);
              }
              sub_100374F00(a1 + 448);
            }
          }
          if ((v32 != 0) != (*(unsigned char *)(a1 + 7720) != 0))
          {
            *(double *)(a1 + 7712) = v113;
            *(unsigned char *)(a1 + 7720) = v32;
            if (!v32)
            {
              __int16 v77 = qword_1008ABDE0;
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeeVIO Lost findee VIO stream - resetting filter", buf, 2u);
              }
              sub_100385CD0(a1);
            }
          }
          if ((v115 != 0) != (*(unsigned char *)(a1 + 7736) != 0))
          {
            *(double *)(a1 + 7728) = v37;
            *(unsigned char *)(a1 + 7736) = v115;
          }
          double v78 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
            sub_10043618C(a2, v78);
          }
          long long v79 = *(_OWORD *)(a2 + 152);
          v117[0] = *(_OWORD *)(a2 + 136);
          v117[1] = v79;
          if (*(unsigned char *)(a2 + 169)) {
            BOOL v80 = *(unsigned char *)(a2 + 168) == 0;
          }
          else {
            BOOL v80 = 1;
          }
          int v81 = !v80;
          sub_100385EFC(a1, (uint64_t)v117, v81, v119);
          return;
        }
        long long v75 = *(_OWORD *)(a2 + 96);
        _OWORD *v63 = *v62;
        *(_OWORD *)(a1 + 8416) = v75;
      }
      else
      {
        long long v74 = *(_OWORD *)(a2 + 96);
        _OWORD *v63 = *v62;
        *(_OWORD *)(a1 + 8416) = v74;
        *(unsigned char *)(a1 + 8432) = 1;
      }
      if (!*(unsigned char *)(a2 + 112)) {
        sub_10000AE44();
      }
      int v17 = v61;
      *(double *)(a1 + 8368) = v119 - *(double *)(a2 + 88);
      *(unsigned char *)(a1 + 8376) = 1;
      *(_OWORD *)(a1 + 8440) = *(_OWORD *)(a1 + 8416);
      goto LABEL_124;
    }
    double v27 = (double *)(a2 + 24);
    double v2 = *(double *)(a2 + 24);
    if (v2 == 409.5)
    {
      int v12 = *(unsigned __int8 *)(a1 + 8480);
      if (!*(unsigned char *)(a1 + 8480))
      {
        char v29 = 0;
        double v2 = 409.5;
        goto LABEL_58;
      }
      double v2 = 409.5;
      if (*(double *)(a1 + 8472) == 409.5)
      {
        int v28 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,Received measured displacement with maximum enter timestamp.", buf, 2u);
          double v2 = *v27;
        }
        char v29 = 1;
LABEL_58:
        *(double *)(a1 + 8472) = v2;
        *(unsigned char *)(a1 + 8480) = 1;
        int v33 = *(_DWORD *)(a2 + 40);
        double v113 = 0.0;
        if (v33 != 1)
        {
          if (v33)
          {
            char v31 = 0;
            int v115 = 0;
            int v32 = 0;
LABEL_103:
            double v30 = 0.0;
            double v37 = 0.0;
            goto LABEL_104;
          }
          double v34 = v119;
          double v35 = *(double *)(a2 + 32);
          if (v29)
          {
            double v113 = *(double *)(a1 + 7712);
            int v32 = *(unsigned __int8 *)(a1 + 7720);
          }
          else
          {
            double v39 = v119 - *v27;
            double v113 = v39;
            if (*(unsigned char *)(a1 + 7720))
            {
              if (v39 - *(double *)(a1 + 7712) <= dbl_1004C41D0[*(unsigned char *)(a1 + 40) == 0])
              {
                int v32 = 1;
                goto LABEL_97;
              }
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
                sub_100436218();
              }
              sub_100385CD0(a1);
              sub_10037A988((void *)(a1 + 448));
              *(double *)(a1 + 7712) = v113;
            }
            else
            {
              *(double *)(a1 + 7712) = v39;
            }
            int v32 = 1;
            *(unsigned char *)(a1 + 7720) = 1;
          }
LABEL_97:
          double v56 = v34 - v35;
          uint64_t v57 = *(void *)(a2 + 56);
          double v2 = *(double *)(a2 + 64);
          double v58 = *(double *)(a2 + 48);
          uint64_t v59 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            if (!v32) {
              sub_10000AE44();
            }
            *(_DWORD *)long long buf = 134219008;
            *(double *)&uint8_t buf[4] = v56;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v57;
            *(_WORD *)&unsigned char buf[22] = 2048;
            double v121 = v2;
            *(_WORD *)long long v122 = 2048;
            *(double *)&v122[2] = v58;
            *(_WORD *)&v122[10] = 2048;
            *(double *)&v122[12] = v113;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeeVIO Got findee VIO at %lf s, x=%lf y=%lf z=%lf, startTime %lf s", buf, 0x34u);
            uint64_t v59 = qword_1008ABDE0;
          }
          *(double *)long long v118 = v56;
          v118[1] = v57;
          *(double *)&v118[2] = v2;
          *(double *)&v118[3] = v58;
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134218752;
            *(double *)&uint8_t buf[4] = v56;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v57;
            *(_WORD *)&unsigned char buf[22] = 2048;
            double v121 = v2;
            *(_WORD *)long long v122 = 2048;
            *(double *)&v122[2] = v58;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeeVIO Passing peer pose to filter, timestamp: %f s, peer position:[%0.2f,%0.2f,%0.2f]", buf, 0x2Au);
          }
          sub_1003982A4(a1 + 5504, (uint64_t)v118);
          *(double *)long long buf = v56;
          *(void *)&uint8_t buf[8] = v57;
          *(double *)&uint8_t buf[16] = v2;
          double v121 = v58;
          sub_10037ABB8(a1 + 448, (uint64_t)buf);
          char v31 = 0;
          int v115 = 0;
          goto LABEL_103;
        }
        uint64_t v36 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,Got PDR data", buf, 2u);
        }
        if (v29)
        {
          double v37 = *(double *)(a1 + 7728);
          int v115 = *(unsigned __int8 *)(a1 + 7736);
          if (!*(unsigned char *)(a1 + 7736))
          {
            int v115 = 0;
            char v31 = 0;
            double v30 = 0.0;
LABEL_76:
            unint64_t v40 = (_OWORD *)(a1 + 8312);
            if (!*(unsigned char *)(a1 + 8360))
            {
              long long v51 = *(_OWORD *)v27;
              long long v52 = *(_OWORD *)(a2 + 56);
              *(_OWORD *)(a1 + 8328) = *(_OWORD *)(a2 + 40);
              *(_OWORD *)(a1 + 8344) = v52;
              *unint64_t v40 = v51;
              goto LABEL_91;
            }
            if (!*(unsigned char *)(a1 + 8376))
            {
LABEL_90:
              int v53 = *(unsigned __int8 *)(a1 + 8360);
              long long v55 = *(_OWORD *)(a2 + 40);
              long long v54 = *(_OWORD *)(a2 + 56);
              *unint64_t v40 = *(_OWORD *)v27;
              *(_OWORD *)(a1 + 8328) = v55;
              *(_OWORD *)(a1 + 8344) = v54;
              if (v53)
              {
LABEL_92:
                int v32 = 0;
                *(double *)(a1 + 8368) = v119 - *(double *)(a2 + 32);
                *(unsigned char *)(a1 + 8376) = 1;
                int v12 = v109;
                goto LABEL_104;
              }
LABEL_91:
              *(unsigned char *)(a1 + 8360) = 1;
              goto LABEL_92;
            }
            unint64_t v41 = qword_1008ABDE0;
            if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
            {
LABEL_79:
              double v42 = v119 - *(double *)(a2 + 32) - *(double *)(a1 + 8368);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
                sub_1004362C4(a2, v41, v42);
              }
              int v108 = v17;
              uint64_t v106 = sub_10038100C(*(double *)(a2 + 48), *(double *)(a1 + 8336), v42, -409.6, 409.5, 0.1, 2.0);
              char v44 = v43;
              *(double *)&uint64_t v107 = COERCE_DOUBLE(sub_10038100C(*(double *)(a2 + 56), *(double *)(a1 + 8344), v42, -409.6, 409.5, 0.1, 2.0));
              char v46 = v45;
              uint64_t v47 = sub_10038100C(*(double *)(a2 + 64), *(double *)(a1 + 8352), v42, -25.6, 25.5, 0.1, 2.0);
              long long v49 = qword_1008ABDE0;
              if (v44 && v46 && v48)
              {
                uint64_t v105 = v47;
                int v17 = v108;
                if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v50 = *(void *)(a2 + 32);
                  *(_DWORD *)long long buf = 134219008;
                  *(void *)&uint8_t buf[4] = v106;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&buf[14] = v105;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  double v121 = *(double *)&v107;
                  *(_WORD *)long long v122 = 2048;
                  *(double *)&v122[2] = v42;
                  *(_WORD *)&v122[10] = 2048;
                  *(void *)&v122[12] = v50;
                  _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#findalgs-peoplefinder,#findeePDR Computed delta postion, x: %f, z: %f, y: %f, deltaT: %f, app time: %f", buf, 0x34u);
                }
                sub_10037B09C(a1 + 448, *(double *)&v106, *(double *)&v107, 0.0, v119 - *(double *)(a2 + 32), v42);
              }
              else
              {
                int v17 = v108;
                if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
                  sub_100436290();
                }
              }
              goto LABEL_90;
            }
            uint64_t v100 = *(void *)(a2 + 32);
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v100;
            _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,measured applicability: %f", buf, 0xCu);
            long long v101 = qword_1008ABDE0;
            int v102 = *(unsigned __int8 *)(a1 + 8376);
            if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
            {
              if (!v102) {
                sub_10000AE44();
              }
              double v103 = v119 - *(double *)(a2 + 32);
              uint64_t v104 = *(void *)(a1 + 8368);
              *(_DWORD *)long long buf = 134218240;
              *(double *)&uint8_t buf[4] = v103;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v104;
              _os_log_debug_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,measured applicability with offset: %f, last timestamp: %f ", buf, 0x16u);
              if (*(unsigned char *)(a1 + 8376)) {
                goto LABEL_170;
              }
            }
            else if (v102)
            {
LABEL_170:
              unint64_t v41 = qword_1008ABDE0;
              goto LABEL_79;
            }
            sub_10000AE44();
          }
          double v38 = v119;
        }
        else
        {
          double v38 = v119;
          double v37 = v119 - *v27;
          int v115 = 1;
        }
        double v110 = v38 - *(double *)(a2 + 32);
        int v109 = *(_DWORD *)(a2 + 40);
        double v2 = *(double *)(a2 + 48);
        uint64_t v3 = *(void *)(a2 + 56);
        char v31 = 1;
        double v30 = v37;
        goto LABEL_76;
      }
    }
    char v29 = 0;
    goto LABEL_58;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_10043614C();
  }
}

void sub_100385CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::locale a31)
{
}

void sub_100385CD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8516))
  {
    sub_100398808(a1 + 5504, (uint64_t)__src);
    if (LOBYTE(__src[13]))
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100436534();
      }
      memcpy(v2, __src, sizeof(v2));
      sub_100375B78(a1 + 448, v2);
    }
  }
  else
  {
    memset(__src, 0, sizeof(__src));
  }
  sub_100397174(a1 + 5504);
}

void sub_100385DDC(uint64_t a1)
{
  uint64_t v2 = a1 + 8514;
  if (*(unsigned char *)(a1 + 8514))
  {
    sub_10033DE98(a1 + 4944, (uint64_t)__src);
    if (*(unsigned char *)(v2 + 63)) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = LOBYTE(__src[13]) == 0;
    }
    if (!v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
        sub_100436568();
      }
      memcpy(v4, __src, sizeof(v4));
      sub_100375B78(a1 + 448, v4);
    }
  }
  else
  {
    memset(__src, 0, sizeof(__src));
  }
  sub_100340C8C(a1 + 4944, 1);
}

void sub_100385EFC(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
    sub_10043659C(a2, a1, v8);
  }
  if (*(unsigned char *)(a2 + 24) && *(unsigned char *)(a1 + 8208))
  {
    unsigned int v9 = *(_DWORD *)(a2 + 16);
    long long v18 = *(_OWORD *)a2;
    v17[0] = sub_100030414(*(double *)(a1 + 8168));
    if (!*(unsigned char *)(a1 + 8208)) {
      goto LABEL_19;
    }
    v17[1] = sub_100030414(*(double *)(a1 + 8176));
    long double v10 = sub_1003933C0(v9);
    double v11 = sub_100393244(v17, (double *)&v18);
    double v13 = v12;
    double v14 = sub_100030430(v11);
    double v15 = sub_100030430(v13);
    if (!*(unsigned char *)(a1 + 8264)) {
      *(unsigned char *)(a1 + 8264) = 1;
    }
    *(double *)(a1 + 8216) = a4;
    *(double *)(a1 + 8224) = v14;
    *(double *)(a1 + 8232) = v15;
    *(long double *)(a1 + 8240) = v10;
    *(void *)(a1 + 8248) = 0;
    *(unsigned char *)(a1 + 8256) = a3;
    double v16 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__src[0]) = 134218496;
      *(double *)((char *)__src + 4) = a4;
      WORD6(__src[0]) = 2048;
      *(long double *)((char *)__src + 14) = v10;
      WORD3(__src[1]) = 1024;
      DWORD2(__src[1]) = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#findalgs-peoplefinder,#gri,findee,Pass peer location from UWB pipe to CL arrow filter, timestamp: %f, horUncM, %.1lf, goodGnssSignalConditions, %d", (uint8_t *)__src, 0x1Cu);
      if (!*(unsigned char *)(a1 + 8264)) {
LABEL_19:
      }
        sub_10000AE44();
    }
    sub_10035BD28(a1 + 48, a1 + 8216);
    if (!*(unsigned char *)(a1 + 7848)) {
      *(unsigned char *)(a1 + 7848) = 1;
    }
    *(double *)(a1 + 7832) = a4;
    *(unsigned char *)(a1 + 7840) = a3;
    if (*(unsigned char *)(a1 + 8576))
    {
      if (*(unsigned char *)(a1 + 8512)) {
        sub_10035B670(a1 + 48, (uint64_t)__src);
      }
      else {
        memset(__src, 0, sizeof(__src));
      }
      if (sub_100384100(a1, (uint64_t)__src))
      {
        memcpy(__dst, __src, sizeof(__dst));
        sub_10037652C(a1 + 448, __dst);
      }
    }
  }
}

uint64_t sub_100386174(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = sub_10038096C((int *)(a1 + 9892), a3);
  if (result > 3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = qword_1004C43B0[(int)result];
    *(_DWORD *)(a2 + 372) = dword_1004C41E0[(int)result];
    *(unsigned char *)(a2 + 376) = 1;
  }
  *(void *)a2 = v5;
  return result;
}

uint64_t sub_1003861DC(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  if (a3[5].i32[0] != 2) {
    return 0;
  }
  float v4 = *(float *)(a2 + 24);
  BOOL v5 = !*(unsigned char *)(a2 + 208) || *(unsigned char *)(a2 + 192) == 0;
  if (v5 || v4 == 1.1755e-38) {
    return 0;
  }
  double v9 = v4;
  __double2 v10 = __sincos_stret(*(double *)(a2 + 200) * 3.14159265 / 180.0);
  float v11 = v10.__cosval * v9;
  float v12 = v10.__sinval * v9;
  float v17 = v11;
  float v18 = v12;
  v19.columns[0] = (simd_float2)sub_100340A70(a3);
  simd_float2x2 v13 = __invert_f2(v19);
  float32x2_t v14 = vmla_n_f32(vmul_n_f32((float32x2_t)v13.columns[0], v17), (float32x2_t)v13.columns[1], v18);
  *(float *)&uint64_t v15 = a3[4].f32[0] + v14.f32[1];
  HIDWORD(v15) = a3[4].i32[1];
  *(float *)(a4 + 8) = a3[4].f32[2] + v14.f32[0];
  *(void *)a4 = v15;
  return 1;
}

uint64_t sub_1003862C4()
{
  return 1;
}

uint64_t sub_1003862CC()
{
  return 0;
}

uint64_t sub_1003862D4()
{
  return 1;
}

uint64_t sub_1003862DC()
{
  return 1;
}

uint64_t sub_1003862E4()
{
  return 1;
}

uint64_t sub_1003862EC()
{
  return 0;
}

uint64_t sub_1003862F4()
{
  return 1;
}

uint64_t sub_1003862FC()
{
  return 1;
}

uint64_t sub_100386304()
{
  return 1;
}

uint64_t sub_10038630C()
{
  return 1;
}

uint64_t sub_100386314()
{
  return 1;
}

uint64_t sub_10038631C()
{
  return 1;
}

uint64_t sub_100386324()
{
  return 1;
}

uint64_t sub_10038632C()
{
  return 1;
}

uint64_t sub_100386334()
{
  return 0;
}

uint64_t sub_10038633C()
{
  return 0;
}

uint64_t sub_100386344()
{
  return 0;
}

uint64_t sub_10038634C()
{
  return 1;
}

uint64_t sub_100386354()
{
  return 1;
}

uint64_t sub_10038635C()
{
  return 1;
}

uint64_t sub_100386364()
{
  return 0;
}

uint64_t sub_10038636C()
{
  return 0;
}

void sub_100386378(uint64_t a1)
{
  sub_1003868C0(a1);

  operator delete();
}

uint64_t sub_1003863B0(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 28;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 56;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_10003ACC4((uint64_t)a1);
}

uint64_t sub_100386458(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 15;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 30;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_10003ACC4((uint64_t)a1);
}

uint64_t sub_100386500(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 13;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 26;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_10003ACC4((uint64_t)a1);
}

void sub_1003865A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)(a2 + 496) = off_100853598;
    *(void *)(a2 + 424) = off_100853598;
    unint64_t v5 = (void **)(a2 + 360);
    sub_10034D6B4(&v5);
    *(void *)(a2 + 240) = off_100853598;
    *(void *)(a2 + 160) = off_100853598;
    *(void *)(a2 + 96) = off_100853598;
    unint64_t v5 = (void **)(a2 + 72);
    sub_10034D574(&v5);
    BOOL v3 = *(void **)(a2 + 40);
    if (v3)
    {
      *(void *)(a2 + 48) = v3;
      operator delete(v3);
    }
    unint64_t v4 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v4;
      operator delete(v4);
    }
    operator delete();
  }
}

uint64_t sub_1003866D0(uint64_t a1)
{
  sub_10003AC1C((void *)(a1 + 4440));
  sub_10016CC78((void *)(a1 + 4304));
  sub_10037FEA4((void *)(a1 + 4024));
  sub_10015DFF4((void *)(a1 + 3976));
  sub_100386754((void *)(a1 + 3640));
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(void *)(a1 + 64) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    BOOL v3 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_100386754(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    BOOL v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x49];
    unint64_t v7 = (unint64_t)v2[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if ((char *)*v6 + 56 * (v5 % 0x49) != (void *)v7)
    {
      uint64_t v8 = (void (***)(void))((char *)*v6 + 56 * (v5 % 0x49));
      do
      {
        double v9 = *v8;
        v8 += 7;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v6 == 4088)
        {
          __double2 v10 = (void (***)(void))v6[1];
          ++v6;
          uint64_t v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      uint64_t v2 = (void **)a1[1];
      BOOL v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 36;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_17;
    }
    uint64_t v13 = 73;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    float32x2_t v14 = *v2++;
    operator delete(v14);
  }

  return sub_10003ACC4((uint64_t)a1);
}

uint64_t sub_1003868C0(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 5072);
  *(void *)a1 = off_100862B18;
  sub_10003AC1C((void *)(a1 + 9312));
  sub_1003863B0((void *)(a1 + 8880));
  sub_100386A54((void *)(a1 + 8096));
  sub_100386A54((void *)(a1 + 8048));
  if (v2[2736])
  {
    BOOL v3 = *(void **)(a1 + 7776);
    if (v3)
    {
      *(void *)(a1 + 7784) = v3;
      operator delete(v3);
    }
  }
  sub_10003AC1C((void *)(a1 + 7632));
  sub_100386458((void *)(a1 + 7200));
  sub_10003AC1C((void *)(a1 + 6928));
  sub_10003AC1C((void *)(a1 + 6880));
  sub_10003AC1C((void *)(a1 + 6256));
  sub_10003AC1C((void *)(a1 + 6208));
  sub_10037FEA4((void *)(a1 + 5944));
  sub_10003AC1C((void *)(a1 + 5872));
  sub_100386500((void *)(a1 + 5824));
  if (v2[552])
  {
    unint64_t v4 = *(void **)(a1 + 5592);
    if (v4)
    {
      *(void *)(a1 + 5600) = v4;
      operator delete(v4);
    }
  }
  uint64_t v5 = *(void *)(a1 + 5568);
  *(void *)(a1 + 5568) = 0;
  if (v5) {
    sub_1003865A8(a1 + 5568, v5);
  }
  uint64_t v8 = (void **)(a1 + 5472);
  sub_100320DD0(&v8);
  sub_10003AC1C((void *)(a1 + 5400));
  sub_100320E74((void *)(a1 + 5080), 0);
  if (*v2)
  {
    uint64_t v6 = *(void **)(a1 + 5040);
    if (v6)
    {
      *(void *)(a1 + 5048) = v6;
      operator delete(v6);
    }
  }
  sub_100320EFC((uint64_t *)(a1 + 5016), 0);
  sub_1003866D0(a1 + 448);
  return a1;
}

uint64_t sub_100386A54(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 11;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 22;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_10003ACC4((uint64_t)a1);
}

void sub_100386AFC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x16;
  unint64_t v4 = v2 - 22;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_100056BF0(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    simd_float2x2 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFD0uLL);
      sub_100151818(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFD0uLL);
    sub_100151930((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_100056BF0((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      char v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      char v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_100056BF0((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFD0uLL);
  sub_100151A50(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_100151B68((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100386DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100386E14(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x16) {
    a2 = 1;
  }
  if (v2 < 0x2C) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 22;
  }
  return v4 ^ 1u;
}

uint64_t sub_100386E74(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 22 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x16) {
    a2 = 1;
  }
  if (v5 < 0x2C) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void *sub_100386EEC(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x2C8590B21642C859 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 21 - v3;
      uint64_t v6 = &v2[-(v5 / 0x16)];
      _DWORD *result = v6;
      unint64_t v4 = *v6 + 184 * (22 * (v5 / 0x16) - v5) + 3864;
    }
    else
    {
      _DWORD *result = &v2[v3 / 0x16];
      unint64_t v4 = v2[v3 / 0x16] + 184 * (v3 % 0x16);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_100386FA0@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    simd_float2x2 v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100387070(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 4048;
    }
    uint64_t v18 = *a1 + 4048;
    simd_float2x2 v19 = a2;
  }
  sub_100387070(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100387070@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    double v9 = a1;
  }
  else
  {
    double v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xD37A6F4DE9BD37A7 * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xD37A6F4DE9BD37A7 * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0xD37A6F4DE9BD37A7 * ((v11 - a1) >> 3);
      }
      v11 -= 184 * v12;
      a4 -= 184 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 184 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4048);
    }
    if ((char *)(*v6 + 4048) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100387154(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (int i = (unsigned char *)(*a1 + 4048); ; int i = v12 + 4048)
    {
      sub_1003871E8(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1003871E8(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1003871E8@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    double v9 = __src;
  }
  else
  {
    double v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xD37A6F4DE9BD37A7 * ((v10 - __dst + 4048) >> 3);
      unint64_t v12 = (uint64_t)(0xD37A6F4DE9BD37A7 * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xD37A6F4DE9BD37A7 * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 184 * v12);
      }
      v7 += 184 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }
    __dst += 184 * v12;
    if ((char *)*(v6 - 1) + 4048 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

uint64_t sub_1003872D8()
{
  qword_1008AAE28 = 0;
  qword_1008AAE30 = 0;
  qword_1008AAE38 = 0;
  uint64_t v0 = operator new(0x40uLL);
  qword_1008AAE30 = (uint64_t)(v0 + 4);
  qword_1008AAE38 = (uint64_t)(v0 + 4);
  _OWORD *v0 = xmmword_1004C4200;
  v0[1] = unk_1004C4210;
  v0[2] = xmmword_1004C4220;
  v0[3] = unk_1004C4230;
  qword_1008AAE28 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AAE28, (void *)&_mh_execute_header);
  qword_1008AAE48 = 0;
  unk_1008AAE50 = 0;
  qword_1008AAE40 = 0;
  int v1 = operator new(0x10uLL);
  qword_1008AAE48 = (uint64_t)(v1 + 1);
  unk_1008AAE50 = v1 + 1;
  _OWORD *v1 = xmmword_1004C4240;
  qword_1008AAE40 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_100032C1C, &qword_1008AAE40, (void *)&_mh_execute_header);
}

void sub_1003873B0(uint64_t a1, double a2, double a3)
{
  double v8 = a2;
  if (*(unsigned char *)(a1 + 32) && a3 - *(double *)(a1 + 24) > *(double *)(a1 + 8)) {
    sub_100387484(a1);
  }
  sub_1001F2440((void *)(a1 + 40), &v8);
  double v5 = v8 + *(double *)(a1 + 16);
  *(double *)(a1 + 16) = v5;
  *(double *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 32) = 1;
  unint64_t v6 = *(void *)(a1 + 80);
  if (*(double *)a1 < (double)v6)
  {
    unint64_t v7 = *(void *)(a1 + 72);
    *(double *)(a1 + 16) = v5
                         - *(double *)(*(void *)(*(void *)(a1 + 48) + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * (v7 & 0x1FF));
    *(void *)(a1 + 72) = v7 + 1;
    *(void *)(a1 + 80) = v6 - 1;
    sub_1001F286C(a1 + 40, 1);
  }
}

void sub_100387484(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 80) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 56);
      uint64_t v2 = (void **)(*(void *)(a1 + 48) + 8);
      *(void *)(a1 + 48) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 512;
  }
  *(void *)(a1 + 72) = v6;
LABEL_8:
  *(void *)(a1 + 16) = 0;
  if (*(unsigned char *)(a1 + 32)) {
    *(unsigned char *)(a1 + 32) = 0;
  }
}

double sub_10038750C(uint64_t a1, char a2)
{
  unint64_t v2 = *(void *)(a1 + 80);
  double result = (double)v2;
  if (*(double *)a1 < (double)v2) {
    sub_100436630();
  }
  if (*(double *)a1 == (double)v2) {
    char v4 = 0;
  }
  else {
    char v4 = a2;
  }
  if (v2)
  {
    if ((v4 & 1) == 0) {
      return *(double *)(a1 + 16) / result;
    }
  }
  return result;
}

uint64_t sub_100387560(uint64_t a1, uint64_t a2, long long **a3)
{
  *(void *)a1 = off_100862CB8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  sub_1003202FC((char *)(a1 + 8), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 96) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)&long long v5 = *(void *)(a2 + 64);
  *(double *)(a1 + 104) = (double)*(int *)(a2 + 56);
  *(void *)(a1 + 112) = v5;
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  double v8 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#handoffPredictor HandoffPredictor is created", v10, 2u);
  }
  return a1;
}

void sub_100387678(uint64_t a1, long long *a2)
{
  if (!*(unsigned char *)(a1 + 592)) {
    goto LABEL_32;
  }
  if (!*(unsigned char *)(a1 + 600))
  {
    float v4 = *(float *)(a1 + 424);
    float v5 = *((float *)a2 + 4);
    if (*(double *)(a1 + 64) <= vabds_f32(v5, v4))
    {
      *(unsigned char *)(a1 + 600) = 1;
      *(void *)(a1 + 192) = 0x3FF0000000000000;
      long long v6 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = 134218240;
        double v38 = v5;
        __int16 v39 = 2048;
        double v40 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#handoffPredictor distance measurements have changed enough - current distance is %f, first distance is %f", (uint8_t *)&v37, 0x16u);
        if (!*(unsigned char *)(a1 + 592))
        {
LABEL_32:
          long long v7 = *a2;
          long long v8 = a2[1];
          long long v9 = a2[3];
          *(_OWORD *)(a1 + 440) = a2[2];
          *(_OWORD *)(a1 + 456) = v9;
          *(_OWORD *)(a1 + 408) = v7;
          *(_OWORD *)(a1 + 424) = v8;
          long long v10 = a2[4];
          long long v11 = a2[5];
          long long v12 = a2[7];
          *(_OWORD *)(a1 + 504) = a2[6];
          *(_OWORD *)(a1 + 520) = v12;
          *(_OWORD *)(a1 + 472) = v10;
          *(_OWORD *)(a1 + 488) = v11;
          long long v13 = a2[8];
          long long v14 = a2[9];
          long long v15 = a2[10];
          *(void *)(a1 + 584) = *((void *)a2 + 22);
          *(_OWORD *)(a1 + 552) = v14;
          *(_OWORD *)(a1 + 568) = v15;
          *(_OWORD *)(a1 + 536) = v13;
          *(unsigned char *)(a1 + 592) = 1;
          uint64_t v16 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            double v17 = *(float *)(a1 + 424);
            int v37 = 134217984;
            double v38 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#handoffPredictor first distance measurement is %f", (uint8_t *)&v37, 0xCu);
          }
        }
      }
    }
  }
  if (!*(unsigned char *)(a1 + 400)) {
    goto LABEL_23;
  }
  double v18 = *((double *)a2 + 1);
  float v19 = v18 - *(double *)(a1 + 224);
  if (v19 > 0.0)
  {
    if (*(double *)(a1 + 96) <= v19)
    {
      uint64_t v24 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v37) = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#handoffPredictor velocity measurements stale, clearing velocity buffer and velocity score", (uint8_t *)&v37, 2u);
      }
      sub_100387484(a1 + 104);
    }
    else
    {
      sub_1003873B0(a1 + 104, (float)((float)-(float)(*((float *)a2 + 4) - *(float *)(a1 + 232)) / v19), v18);
      sub_10038750C(a1 + 104, 0);
      if (v21)
      {
        double v22 = 0.0;
        if (*(double *)(a1 + 80) < v20) {
          double v22 = 1.0;
        }
        goto LABEL_22;
      }
    }
    double v22 = 0.0;
LABEL_22:
    *(double *)(a1 + 208) = v22;
LABEL_23:
    if (*((unsigned char *)a2 + 36))
    {
      BOOL v25 = fabs(sub_100030430(*((float *)a2 + 6))) > *(double *)(a1 + 72);
      double v26 = 0.0;
      if (!v25) {
        double v26 = 1.0;
      }
    }
    else
    {
      double v26 = 0.0;
    }
    *(double *)(a1 + 200) = v26;
    int v27 = *(unsigned __int8 *)(a1 + 400);
    long long v28 = a2[3];
    long long v30 = *a2;
    long long v29 = a2[1];
    *(_OWORD *)(a1 + 248) = a2[2];
    *(_OWORD *)(a1 + 264) = v28;
    *(_OWORD *)(a1 + 216) = v30;
    *(_OWORD *)(a1 + 232) = v29;
    long long v31 = a2[7];
    long long v33 = a2[4];
    long long v32 = a2[5];
    *(_OWORD *)(a1 + 312) = a2[6];
    *(_OWORD *)(a1 + 328) = v31;
    *(_OWORD *)(a1 + 280) = v33;
    *(_OWORD *)(a1 + 296) = v32;
    long long v35 = a2[9];
    long long v34 = a2[10];
    long long v36 = a2[8];
    *(void *)(a1 + 392) = *((void *)a2 + 22);
    *(_OWORD *)(a1 + 360) = v35;
    *(_OWORD *)(a1 + 376) = v34;
    *(_OWORD *)(a1 + 344) = v36;
    if (!v27) {
      *(unsigned char *)(a1 + 400) = 1;
    }
    return;
  }
  uint64_t v23 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_10043665C(v23);
  }
  sub_100387484(a1 + 104);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
}

void sub_1003879B8()
{
  uint64_t v0 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#handoffPredictor region changed", v1, 2u);
  }
}

double sub_100387A20(uint64_t a1)
{
  unint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 192);
    uint64_t v4 = *(void *)(a1 + 200);
    uint64_t v5 = *(void *)(a1 + 208);
    int v7 = 134218496;
    uint64_t v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    __int16 v11 = 2048;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#handoffPredictor _distanceChangeScore: %f, _directionScore: %f, _velocityScore: %f", (uint8_t *)&v7, 0x20u);
  }
  return *(double *)(a1 + 48) * *(double *)(a1 + 200)
       + *(double *)(a1 + 40) * *(double *)(a1 + 192)
       + *(double *)(a1 + 56) * *(double *)(a1 + 208);
}

uint64_t sub_100387AFC(uint64_t a1)
{
  *(void *)a1 = off_100862CB8;
  sub_10016CC78((void *)(a1 + 144));
  uint64_t v3 = (void **)(a1 + 8);
  sub_10031F5E0(&v3);
  return a1;
}

void sub_100387B58(uint64_t a1)
{
  *(void *)a1 = off_100862CB8;
  sub_10016CC78((void *)(a1 + 144));
  unint64_t v2 = (void **)(a1 + 8);
  sub_10031F5E0(&v2);
  operator delete();
}

uint64_t sub_100387BC8()
{
  v8[0] = xmmword_1004C43E0;
  v8[1] = unk_1004C43F0;
  sub_1001A003C((uint64_t)&unk_1008AAE58, (int *)v8, 4);
  xmmword_1008AAE70 = xmmword_1004B7660;
  unk_1008AAE80 = xmmword_1004B7670;
  qword_1008AAE98 = 0;
  unk_1008AAEA0 = 0;
  qword_1008AAE90 = 0x3FD999999999999ALL;
  unk_1008AAEA8 = xmmword_1004B7680;
  dword_1008AAEB8 = 5;
  qword_1008AAEC0 = 0x4000000000000000;
  dword_1008AAEC8 = 5;
  byte_1008AAED0 = 0;
  *(void *)&algn_1008AAED1[3] = 0x30000000ALL;
  xmmword_1008AAEE0 = xmmword_1004B7690;
  unk_1008AAEF0 = xmmword_1004B76A0;
  xmmword_1008AAF00 = xmmword_1004B76B0;
  qword_1008AAF10 = 0x3FE3333333333333;
  dword_1008AAF18 = 3;
  xmmword_1008AAF20 = xmmword_1004B76C0;
  unk_1008AAF30 = xmmword_1004B76A0;
  xmmword_1008AAF40 = xmmword_1004B7690;
  qword_1008AAF50 = 0x3FE3333333333333;
  byte_1008AAF58 = 0;
  xmmword_1008AAF60 = xmmword_1004B76D0;
  unk_1008AAF70 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v6 = _Q0;
  xmmword_1008AAF80 = _Q0;
  qword_1008AAF90 = 0xBFD3333333333333;
  xmmword_1008AAF98 = xmmword_1004B76F0;
  qword_1008AAFA8 = 0x3E99999A40000000;
  xmmword_1008AAFB0 = xmmword_1004B7670;
  qword_1008AAFC8 = 0;
  unk_1008AAFD0 = 0;
  qword_1008AAFC0 = 0x3FD999999999999ALL;
  xmmword_1008AAFD8 = xmmword_1004B7680;
  dword_1008AAFE8 = 5;
  qword_1008AAFF0 = 0x4000000000000000;
  dword_1008AAFF8 = 4;
  qword_1008AB000 = 0x300000008;
  qword_1008AB008 = 0xC04E800000000000;
  unint64_t v7 = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)&unk_1008AB010, (double *)&v7, 1);
  xmmword_1008AB028 = xmmword_1004B7700;
  qword_1008AB038 = 0x4024000000000000;
  dword_1008AB040 = 45;
  byte_1008AB048 = 0;
  byte_1008AB060 = 0;
  qword_1008AB068 = 0;
  byte_1008AB070 = 0;
  dword_1008AB074 = 1;
  byte_1008AB078 = 1;
  xmmword_1008AB080 = xmmword_1004B7710;
  unk_1008AB090 = xmmword_1004B7720;
  xmmword_1008AB0A0 = v6;
  qword_1008AB0B0 = 0xC059000000000000;
  xmmword_1008AB0B8 = xmmword_1004B7730;
  qword_1008AB0C8 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008AB0D0 = xmmword_1004B7670;
  qword_1008AB0E0 = 0x3FD999999999999ALL;
  qword_1008AB0F0 = 0;
  qword_1008AB0E8 = 0;
  xmmword_1008AB0F8 = xmmword_1004B7680;
  dword_1008AB108 = 5;
  qword_1008AB110 = 0x4000000000000000;
  dword_1008AB118 = 10;
  qword_1008AB120 = 0x4034000000000000;
  dword_1008AB128 = 3;
  xmmword_1008AB130 = xmmword_1004B7740;
  return __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008AAE58, (void *)&_mh_execute_header);
}

void sub_100387E7C(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100387E9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 352);
}

double sub_100387EA4(uint64_t a1)
{
  *(unsigned char *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 180) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 360) = 0x3FB999999999999ALL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_1004C4440;
  *(_OWORD *)(a1 + 32) = xmmword_1004C1B40;
  return result;
}

void sub_100387EF8(void *a1)
{
  unint64_t v2 = (void **)a1[7];
  uint64_t v3 = a1[8];
  a1[11] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[8];
      unint64_t v2 = (void **)(a1[7] + 8);
      a1[7] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 16;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 32;
  }
  a1[10] = v6;
LABEL_8:
  unint64_t v7 = (void **)a1[13];
  uint64_t v8 = a1[14];
  a1[17] = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = a1[14];
      unint64_t v7 = (void **)(a1[13] + 8);
      a1[13] = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 16;
  }
  else
  {
    if (v9 >> 3 != 2) {
      return;
    }
    uint64_t v11 = 32;
  }
  a1[16] = v11;
}

__n128 sub_100387FC8@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 128) = 0;
  if (a1[11])
  {
    uint64_t v2 = *(void *)(a1[7] + ((a1[10] >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((a1[10] & 0x1FLL) << 7);
    long long v3 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(a2 + 80) = v3;
    long long v4 = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(a2 + 112) = v4;
    long long v5 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v2;
    *(_OWORD *)(a2 + 16) = v5;
    __n128 result = *(__n128 *)(v2 + 32);
    long long v7 = *(_OWORD *)(v2 + 48);
    *(__n128 *)(a2 + 32) = result;
    *(_OWORD *)(a2 + 48) = v7;
    *(unsigned char *)(a2 + 128) = 1;
  }
  return result;
}

void sub_100388020(int64x2_t *a1, long long *a2)
{
  sub_10033C83C(a1, a2);
  uint64_t v4 = a1->i64[1];
  if (a1[1].i64[0] != v4)
  {
    unint64_t v5 = a1[2].u64[0];
    uint64_t v6 = (void *)(v4 + 8 * (v5 >> 5));
    long long v7 = (double *)(*v6 + ((v5 & 0x1F) << 7));
    uint64_t v8 = *(void *)(v4 + (((a1[2].i64[1] + v5) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((a1[2].i64[1] + v5) & 0x1F) << 7);
    while (v7 != (double *)v8)
    {
      if (*(double *)a2 - *v7 <= 5.0) {
        break;
      }
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1004B59B0);
      sub_10015ED2C((uint64_t)a1, 1);
      v7 += 16;
      if ((double *)((char *)v7 - *v6) == (double *)4096)
      {
        unint64_t v9 = (double *)v6[1];
        ++v6;
        long long v7 = v9;
      }
    }
  }
}

__n128 sub_10038810C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 128) = 0;
  uint64_t v3 = a1[1];
  if (a1[2] != v3)
  {
    unint64_t v4 = a1[4];
    unint64_t v5 = (void *)(v3 + 8 * (v4 >> 5));
    unint64_t v6 = *v5 + ((v4 & 0x1F) << 7);
    uint64_t v7 = *(void *)(v3 + (((a1[5] + v4) >> 2) & 0x3FFFFFFFFFFFFFF8)) + (((a1[5] + v4) & 0x1F) << 7);
    while (v6 != v7)
    {
      double v8 = *(double *)v6;
      uint64_t v17 = *(void *)(v6 + 120);
      long long v15 = *(_OWORD *)(v6 + 88);
      long long v16 = *(_OWORD *)(v6 + 104);
      long long v14 = *(_OWORD *)(v6 + 72);
      __n128 v12 = *(__n128 *)(v6 + 40);
      long long v13 = *(_OWORD *)(v6 + 56);
      long long v10 = *(_OWORD *)(v6 + 8);
      long long v11 = *(_OWORD *)(v6 + 24);
      if (*(double *)v6 > result.n128_f64[0])
      {
        result.n128_f64[0] = v8 - result.n128_f64[0];
        if (result.n128_f64[0] < 0.2)
        {
          *(double *)a2 = v8;
          *(_OWORD *)(a2 + 72) = v14;
          *(_OWORD *)(a2 + 88) = v15;
          *(_OWORD *)(a2 + 104) = v16;
          *(_OWORD *)(a2 + 8) = v10;
          *(_OWORD *)(a2 + 24) = v11;
          __n128 result = v12;
          *(__n128 *)(a2 + 40) = v12;
          *(void *)(a2 + 120) = v17;
          *(_OWORD *)(a2 + 56) = v13;
          *(unsigned char *)(a2 + 128) = 1;
        }
        return result;
      }
      v6 += 128;
      if (v6 - *v5 == 4096)
      {
        unint64_t v9 = v5[1];
        ++v5;
        unint64_t v6 = v9;
      }
    }
  }
  return result;
}

__n128 sub_100388250@<Q0>(void *a1@<X0>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 128) = 0;
  if (a1[17])
  {
    uint64_t v3 = *(void *)(a1[13] + ((a1[16] >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((a1[16] & 0x1FLL) << 7);
    result.n128_f64[0] = *(double *)v3 - result.n128_f64[0];
    if (result.n128_f64[0] < 0.2)
    {
      long long v4 = *(_OWORD *)(v3 + 80);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 64);
      *(_OWORD *)(a2 + 80) = v4;
      long long v5 = *(_OWORD *)(v3 + 112);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 96);
      *(_OWORD *)(a2 + 112) = v5;
      long long v6 = *(_OWORD *)(v3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v3;
      *(_OWORD *)(a2 + 16) = v6;
      __n128 result = *(__n128 *)(v3 + 32);
      long long v7 = *(_OWORD *)(v3 + 48);
      *(__n128 *)(a2 + 32) = result;
      *(_OWORD *)(a2 + 48) = v7;
      *(unsigned char *)(a2 + 128) = 1;
    }
  }
  return result;
}

void sub_1003882C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = *(void *)(a1 + 88);
  if (v8)
  {
    while (1)
    {
      unint64_t v9 = *(void *)(a1 + 80);
      uint64_t v10 = *(void *)(*(void *)(a1 + 56) + ((v9 >> 2) & 0x3FFFFFFFFFFFFFF8));
      double v11 = *(double *)(v10 + ((v9 & 0x1F) << 7));
      if (v11 >= a4) {
        break;
      }
      *(void *)(a1 + 80) = v9 + 1;
      *(void *)(a1 + 88) = v8 - 1;
      sub_10015ED2C(a1 + 48, 1);
      uint64_t v8 = *(void *)(a1 + 88);
      if (!v8) {
        goto LABEL_4;
      }
    }
    v64[0].i8[0] = 0;
    char v65 = 0;
    char v12 = 1;
    if (v11 - a4 < 0.1)
    {
      long long v15 = (float32x4_t *)(v10 + ((v9 & 0x1F) << 7));
      float32x4_t v16 = v15[5];
      int v64[4] = v15[4];
      v64[5] = v16;
      float32x4_t v17 = v15[7];
      v64[6] = v15[6];
      v64[7] = v17;
      float32x4_t v18 = v15[1];
      v64[0] = *v15;
      v64[1] = v18;
      float32x4_t v19 = v15[3];
      double v64[2] = v15[2];
      v64[3] = v19;
      char v65 = 1;
      char v12 = 0;
    }
  }
  else
  {
LABEL_4:
    v64[0].i8[0] = 0;
    char v65 = 0;
    char v12 = 1;
  }
  if (*(unsigned char *)(a2 + 32)) {
    BOOL v13 = *(unsigned char *)(a2 + 48) == 0;
  }
  else {
    BOOL v13 = 1;
  }
  BOOL v14 = !v13 && *(unsigned char *)(a2 + 64) != 0;
  switch(*(_DWORD *)(a1 + 352))
  {
    case 0:
      if (!v14) {
        goto LABEL_30;
      }
      *(_OWORD *)(a1 + 16) = xmmword_1004C4440;
LABEL_24:
      int v20 = 4;
      goto LABEL_29;
    case 1:
      if (v14) {
        goto LABEL_24;
      }
      goto LABEL_30;
    case 2:
      if (v12) {
        goto LABEL_30;
      }
      if (!*(unsigned char *)(a1 + 344)) {
        goto LABEL_42;
      }
      sub_1003886E0(a1, v64, a1 + 184);
      if (v14) {
        int v20 = 5;
      }
      else {
        int v20 = 3;
      }
LABEL_29:
      *(_DWORD *)(a1 + 352) = v20;
LABEL_30:
      if (!*(unsigned char *)(a2 + 80)) {
        goto LABEL_42;
      }
      if (!*(unsigned char *)(a2 + 96)) {
        goto LABEL_42;
      }
      if (!*(unsigned char *)(a2 + 112)) {
        goto LABEL_42;
      }
      float v21 = *(double *)(a2 + 72);
      float v22 = *(double *)(a2 + 88);
      float v23 = *(double *)(a2 + 104);
      float32x4_t v24 = *(float32x4_t *)(a1 + 16);
      float32x4_t v25 = vmulq_f32(v24, (float32x4_t)xmmword_1004C1CE0);
      int32x4_t v26 = (int32x4_t)vnegq_f32(v25);
      int8x16_t v27 = (int8x16_t)vtrn2q_s32((int32x4_t)v25, vtrn1q_s32((int32x4_t)v25, v26));
      float32x4_t v28 = (float32x4_t)vextq_s8(v27, v27, 8uLL);
      float32x4_t v29 = (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v26, 8uLL);
      float32x4_t v30 = vmulq_n_f32(v29, v22);
      float32x4_t v31 = (float32x4_t)vrev64q_s32((int32x4_t)v25);
      v31.i32[0] = v26.i32[1];
      v31.i32[3] = v26.i32[2];
      float32x4_t v32 = vmlaq_n_f32(vmlaq_n_f32(v30, v28, v21), v31, v23);
      int32x4_t v33 = (int32x4_t)vnegq_f32(v32);
      int8x16_t v34 = (int8x16_t)vtrn2q_s32((int32x4_t)v32, vtrn1q_s32((int32x4_t)v32, v33));
      float32x4_t v35 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v33, 8uLL), *(float32x2_t *)v24.f32, 1), (float32x4_t)vextq_s8(v34, v34, 8uLL), v24.f32[0]);
      float32x4_t v36 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
      v36.i32[0] = v33.i32[1];
      v36.i32[3] = v33.i32[2];
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 16) = 0;
      *(double *)(a3 + 64) = a4;
      *(float32x4_t *)(a3 + 32) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v32, v24, 3), v36, v24, 2), v35);
      if (!*(unsigned char *)(a2 + 152)) {
        goto LABEL_42;
      }
      float32x4_t v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 0);
      float32x4_t v38 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2);
      float v39 = *(double *)(a2 + 128);
      float v40 = *(double *)(a2 + 136);
      float v41 = *(double *)(a2 + 144);
      float v42 = *(double *)(a2 + 120);
      float32x4_t v43 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_1004C4450, v40), (float32x4_t)xmmword_1004C4460, v39), vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_1004C4470, v42), (float32x4_t)xmmword_1004C4480, v41));
      int32x4_t v44 = (int32x4_t)vnegq_f32(v43);
      int8x16_t v45 = (int8x16_t)vtrn2q_s32((int32x4_t)v43, vtrn1q_s32((int32x4_t)v43, v44));
      float32x4_t v46 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v44, 8uLL), *(float32x2_t *)v24.f32, 1), (float32x4_t)vextq_s8(v45, v45, 8uLL), v37);
      float32x4_t v47 = (float32x4_t)vrev64q_s32((int32x4_t)v43);
      v47.i32[0] = v44.i32[1];
      v47.i32[3] = v44.i32[2];
      *(float32x4_t *)(a3 + 48) = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v43, v24, 3), v47, v38), v46);
      int v48 = *(unsigned __int8 *)(a1 + 344);
      long long v49 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 200) = v49;
      long long v50 = *(_OWORD *)(a2 + 64);
      long long v51 = *(_OWORD *)(a2 + 80);
      long long v52 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 264) = v51;
      *(_OWORD *)(a1 + 248) = v50;
      *(_OWORD *)(a1 + 232) = v52;
      long long v53 = *(_OWORD *)(a2 + 144);
      long long v55 = *(_OWORD *)(a2 + 96);
      long long v54 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 328) = v53;
      *(_OWORD *)(a1 + 280) = v55;
      *(_OWORD *)(a1 + 296) = v54;
      if (!v48) {
        *(unsigned char *)(a1 + 344) = 1;
      }
      *(double *)(a1 + 192) = a4;
      *(unsigned char *)(a1 + 200) = 1;
      if (v14)
      {
        if (!*(unsigned char *)(a2 + 32) || !*(unsigned char *)(a2 + 48) || !*(unsigned char *)(a2 + 64)) {
LABEL_42:
        }
          sub_10000AE44();
        float v56 = *(double *)(a2 + 24);
        float v57 = *(double *)(a2 + 40);
        float v58 = *(double *)(a2 + 56);
        float32x4_t v59 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v29, v57), v28, v56), v31, v58);
        int32x4_t v60 = (int32x4_t)vnegq_f32(v59);
        int8x16_t v61 = (int8x16_t)vtrn2q_s32((int32x4_t)v59, vtrn1q_s32((int32x4_t)v59, v60));
        float32x4_t v62 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v60, 8uLL), *(float32x2_t *)v24.f32, 1), (float32x4_t)vextq_s8(v61, v61, 8uLL), v37);
        float32x4_t v63 = (float32x4_t)vrev64q_s32((int32x4_t)v59);
        v63.i32[0] = v60.i32[1];
        v63.i32[3] = v60.i32[2];
        *(unsigned char *)(a3 + 16) = 1;
        *(float32x4_t *)a3 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v59, v24, 3), v63, v38), v62);
      }
      return;
    case 3:
      if (!v14) {
        goto LABEL_30;
      }
      int v20 = 5;
      goto LABEL_29;
    case 4:
      if (v14) {
        goto LABEL_30;
      }
      int v20 = 1;
      goto LABEL_29;
    case 5:
      if (v14) {
        goto LABEL_30;
      }
      int v20 = 3;
      goto LABEL_29;
    default:
      goto LABEL_30;
  }
}

void sub_1003886E0(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  float32x4_t v18 = a2[1];
  float32x4_t v19 = a2[2];
  float32x4_t v16 = a2[4];
  float32x4_t v17 = a2[3];
  *(double *)&long long v5 = sub_100344D00((float32x4_t)xmmword_1004C44D0);
  uint64_t v6 = 0;
  v20[0] = v5;
  v20[1] = v7;
  void v20[2] = v8;
  _OWORD v20[3] = v9;
  do
  {
    v21[v6] = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(v20[v6])), v19, *(float32x2_t *)&v20[v6], 1), v17, (float32x4_t)v20[v6], 2), v16, (float32x4_t)v20[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  *(double *)v10.i64 = sub_10033F314(v21[0], v21[1], (__n128)v21[2]);
  int32x4_t v11 = (int32x4_t)vnegq_f32(v10);
  int8x16_t v12 = (int8x16_t)vtrn2q_s32((int32x4_t)v10, vtrn1q_s32((int32x4_t)v10, v11));
  float32x4_t v13 = (float32x4_t)vrev64q_s32((int32x4_t)v10);
  v13.i32[0] = v11.i32[1];
  v13.i32[3] = v11.i32[2];
  *(double *)&long long v15 = sub_1003887F4(vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 8uLL), *(float32x2_t *)(a1 + 32), 1), (float32x4_t)vextq_s8(v12, v12, 8uLL), COERCE_FLOAT(*(_OWORD *)(a1 + 32))), vmlaq_laneq_f32(vmulq_laneq_f32(v10, *(float32x4_t *)(a1 + 32), 3), v13, *(float32x4_t *)(a1 + 32), 2)), v14, a3);
  *(_OWORD *)(a1 + 16) = v15;
}

double sub_1003887C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 152)) {
    sub_10000AE44();
  }
  int8x16_t v1 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 120)), *(float64x2_t *)(a1 + 136));
  *(void *)&double result = vextq_s8(v1, v1, 4uLL).u64[0];
  return result;
}

double sub_1003887F4(float32x4_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 152)) {
    sub_10000AE44();
  }
  int8x16_t v3 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a3 + 120)), *(float64x2_t *)(a3 + 136));
  float32x4_t v4 = (float32x4_t)vextq_s8(v3, v3, 4uLL);
  int32x4_t v5 = (int32x4_t)vnegq_f32(v4);
  int8x16_t v6 = (int8x16_t)vtrn2q_s32((int32x4_t)v4, vtrn1q_s32((int32x4_t)v4, v5));
  v7.i64[0] = 0x8000000080000000;
  v7.i64[1] = 0x8000000080000000;
  float32x4_t v8 = (float32x4_t)vrev64q_s32((int32x4_t)v4);
  v8.i32[0] = v5.i32[1];
  v8.i32[3] = v5.i32[2];
  float32x4_t v9 = vaddq_f32(vmlaq_f32(vmulq_f32(v4, (float32x4_t)vdupq_n_s32(0x3F3504F3u)), v7, v8), vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL), v7), (float32x4_t)vdupq_n_s32(0xBF3504F3), (float32x4_t)vextq_s8(v6, v6, 8uLL)));
  float32x4_t v10 = vmulq_f32(v9, (float32x4_t)xmmword_1004C1CE0);
  int8x16_t v11 = (int8x16_t)vmulq_f32(v9, v9);
  *(float32x2_t *)v11.i8 = vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
  v11.i32[0] = vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1)).u32[0];
  *(float32x2_t *)v6.i8 = vrecpe_f32((float32x2_t)v11.u32[0]);
  *(float32x2_t *)v6.i8 = vmul_f32(*(float32x2_t *)v6.i8, vrecps_f32((float32x2_t)v11.u32[0], *(float32x2_t *)v6.i8));
  float32x4_t v12 = vmulq_n_f32(v10, vmul_f32(*(float32x2_t *)v6.i8, vrecps_f32((float32x2_t)v11.u32[0], *(float32x2_t *)v6.i8)).f32[0]);
  int32x4_t v13 = (int32x4_t)vnegq_f32(v12);
  int8x16_t v14 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v13));
  float32x4_t v15 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
  v15.i32[0] = v13.i32[1];
  v15.i32[3] = v13.i32[2];
  float32x4_t v16 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v12, a1, 3), v15, a1, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v13, 8uLL), *(float32x2_t *)a1.f32, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), a1.f32[0]));
  float32x4_t v17 = vmulq_f32(v16, v16);
  v13.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).u32[0];
  v17.f32[0] = sqrtf(*(float *)v13.i32);
  *(float32x2_t *)v14.i8 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  *(float32x2_t *)v14.i8 = vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)));
  float32x4_t v18 = vmulq_f32(vmulq_n_f32(v16, vmul_f32(*(float32x2_t *)v14.i8, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8))).f32[0]), (float32x4_t)xmmword_1004A04A0);
  float32x4_t v29 = vmulq_n_f32((float32x4_t)xmmword_1004A04A0, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
  float v19 = atan2f(v17.f32[0], v16.f32[3]);
  __float2 v20 = __sincosf_stret((float)(v19 + v19) * 0.5);
  float32x4_t v21 = vmulq_n_f32(v29, v20.__sinval);
  v21.i32[3] = LODWORD(v20.__cosval);
  int8x16_t v22 = (int8x16_t)vmulq_f32(v21, v21);
  float32x2_t v23 = vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
  if (vaddv_f32(v23) == 0.0)
  {
    float32x4_t v24 = (float32x4_t)xmmword_1004C1B40;
  }
  else
  {
    unsigned __int32 v25 = vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1)).u32[0];
    float32x2_t v26 = vrsqrte_f32((float32x2_t)v25);
    float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25, vmul_f32(v26, v26)));
    float32x4_t v24 = vmulq_n_f32(v21, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25, vmul_f32(v27, v27))).f32[0]);
  }
  *(void *)&double result = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)xmmword_1004C4490, *(float32x2_t *)v24.f32, 1), (float32x4_t)xmmword_1004C44A0, v24.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1004C4440, v24, 3), (float32x4_t)xmmword_1004C44B0, v24, 2)).u64[0];
  return result;
}

BOOL sub_1003889F8(float32x4_t *a1, float32x4_t *a2, float32x4_t a3)
{
  __int32 v3 = a2[5].i32[0];
  if (v3 == 2)
  {
    float32x4_t v36 = a2[1];
    float32x4_t v37 = a2[2];
    float32x4_t v34 = a2[4];
    float32x4_t v35 = a2[3];
    *(double *)&long long v5 = sub_100344D00((float32x4_t)xmmword_1004C44D0);
    uint64_t v6 = 0;
    v40[0] = v5;
    v40[1] = v7;
    v40[2] = v8;
    void v40[3] = v9;
    do
    {
      v41[v6] = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, COERCE_FLOAT(v40[v6])), v37, *(float32x2_t *)&v40[v6], 1), v35, (float32x4_t)v40[v6], 2), v34, (float32x4_t)v40[v6], 3);
      ++v6;
    }
    while (v6 != 4);
    *(double *)v10.i64 = sub_10033F314(v41[0], v41[1], (__n128)v41[2]);
    float32x4_t v11 = vmulq_f32(v10, (float32x4_t)xmmword_1004C1CE0);
    int8x16_t v12 = (int8x16_t)vmulq_f32(v10, v10);
    *(float32x2_t *)v12.i8 = vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
    v12.i32[0] = vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
    float32x2_t v13 = vrecpe_f32((float32x2_t)v12.u32[0]);
    float32x2_t v14 = vmul_f32(v13, vrecps_f32((float32x2_t)v12.u32[0], v13));
    float32x4_t v15 = vmulq_n_f32(v11, vmul_f32(v14, vrecps_f32((float32x2_t)v12.u32[0], v14)).f32[0]);
    int32x4_t v16 = (int32x4_t)vnegq_f32(v15);
    int8x16_t v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v15, vtrn1q_s32((int32x4_t)v15, v16));
    float32x4_t v18 = (float32x4_t)vrev64q_s32((int32x4_t)v15);
    v18.i32[0] = v16.i32[1];
    v18.i32[3] = v16.i32[2];
    float32x4_t v19 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v15, a3, 3), v18, a3, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 8uLL), *(float32x2_t *)a3.f32, 1), (float32x4_t)vextq_s8(v17, v17, 8uLL), a3.f32[0]));
    float32x4_t v20 = vmulq_f32(v19, v19);
    v17.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).u32[0];
    v20.f32[0] = sqrtf(*(float *)v17.i32);
    float32x2_t v21 = vrsqrte_f32((float32x2_t)v17.u32[0]);
    float32x2_t v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v21, v21)));
    float32x4_t v23 = vmulq_f32(vmulq_n_f32(v19, vmul_f32(v22, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v22, v22))).f32[0]), (float32x4_t)xmmword_1004A04A0);
    float32x4_t v39 = vmulq_n_f32((float32x4_t)xmmword_1004A04A0, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
    float v24 = atan2f(v20.f32[0], v19.f32[3]);
    __float2 v25 = __sincosf_stret((float)(v24 + v24) * 0.5);
    float32x4_t v26 = vmulq_n_f32(v39, v25.__sinval);
    v26.i32[3] = LODWORD(v25.__cosval);
    int8x16_t v27 = (int8x16_t)vmulq_f32(v26, v26);
    float32x2_t v28 = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
    if (vaddv_f32(v28) == 0.0)
    {
      float32x4_t v29 = (float32x4_t)xmmword_1004C1B40;
    }
    else
    {
      unsigned __int32 v30 = vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1)).u32[0];
      float32x2_t v31 = vrsqrte_f32((float32x2_t)v30);
      float32x2_t v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v30, vmul_f32(v31, v31)));
      float32x4_t v29 = vmulq_n_f32(v26, vmul_f32(v32, vrsqrts_f32((float32x2_t)v30, vmul_f32(v32, v32))).f32[0]);
    }
    a1[2] = v29;
  }
  return v3 == 2;
}

void sub_100388BF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(_DWORD *)(a2 + 80);
  int v7 = *(_DWORD *)(a1 + 352);
  switch(v7)
  {
    case 0:
      if (v6 == 2)
      {
        int v24 = 2;
        goto LABEL_17;
      }
      long long v46 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a3 + 80) = v46;
      long long v47 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a3 + 112) = v47;
      long long v48 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_OWORD *)(a3 + 16) = v48;
      long long v49 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a3 + 48) = v49;
      *(_DWORD *)(a3 + 112) = 0;
      *(unsigned char *)(a3 + 116) = 1;
      goto LABEL_20;
    case 1:
    case 4:
      if (v6 != 2) {
        goto LABEL_18;
      }
      if (!*(unsigned char *)(a1 + 344)) {
        goto LABEL_18;
      }
      if (!*(unsigned char *)(a1 + 200)) {
        goto LABEL_18;
      }
      if (!*(void *)(a1 + 88)) {
        goto LABEL_18;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 56) + ((*(void *)(a1 + 80) >> 2) & 0x3FFFFFFFFFFFFFF8))
         + ((*(void *)(a1 + 80) & 0x1FLL) << 7);
      if (*(double *)v8 - *(double *)(a1 + 192) >= *(double *)(a1 + 360)) {
        goto LABEL_18;
      }
      long long v9 = *(_OWORD *)(v8 + 80);
      long long v89 = *(_OWORD *)(v8 + 64);
      long long v90 = v9;
      long long v10 = *(_OWORD *)(v8 + 112);
      long long v91 = *(_OWORD *)(v8 + 96);
      long long v92 = v10;
      long long v11 = *(_OWORD *)(v8 + 16);
      float32x4_t v85 = *(float32x4_t *)v8;
      long long v86 = v11;
      long long v12 = *(_OWORD *)(v8 + 48);
      long long v87 = *(_OWORD *)(v8 + 32);
      long long v88 = v12;
      char v93 = 1;
      long long v13 = *(_OWORD *)(a1 + 296);
      long long v81 = *(_OWORD *)(a1 + 280);
      long long v82 = v13;
      long long v14 = *(_OWORD *)(a1 + 328);
      long long v83 = *(_OWORD *)(a1 + 312);
      long long v84 = v14;
      long long v15 = *(_OWORD *)(a1 + 232);
      long long v77 = *(_OWORD *)(a1 + 216);
      long long v78 = v15;
      long long v16 = *(_OWORD *)(a1 + 264);
      long long v79 = *(_OWORD *)(a1 + 248);
      long long v80 = v16;
      long long v17 = *(_OWORD *)(a1 + 200);
      float32x4_t v75 = *(float32x4_t *)(a1 + 184);
      long long v76 = v17;
      *(double *)v18.i64 = sub_1003887C0((uint64_t)&v75);
      int32x4_t v19 = (int32x4_t)vnegq_f32(v18);
      int8x16_t v20 = (int8x16_t)vtrn2q_s32((int32x4_t)v18, vtrn1q_s32((int32x4_t)v18, v19));
      float32x4_t v21 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
      v21.i32[0] = v19.i32[1];
      v21.i32[3] = v19.i32[2];
      if (!sub_1003889F8((float32x4_t *)a1, &v85, vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 8uLL), *(float32x2_t *)(a1 + 16), 1), (float32x4_t)vextq_s8(v20, v20, 8uLL), COERCE_FLOAT(*(_OWORD *)(a1 + 16))), vmlaq_laneq_f32(vmulq_laneq_f32(v18, *(float32x4_t *)(a1 + 16), 3), v21, *(float32x4_t *)(a1 + 16), 2))))goto LABEL_18; {
      int v22 = *(_DWORD *)(a1 + 352);
      }
      if (v22 == 4)
      {
        int v23 = 5;
      }
      else
      {
        if (v22 != 1) {
          goto LABEL_38;
        }
        int v23 = 3;
      }
      *(_DWORD *)(a1 + 352) = v23;
LABEL_38:
      uint64_t v51 = *(void *)(a1 + 56);
      if (*(void *)(a1 + 64) != v51)
      {
        unint64_t v52 = *(void *)(a1 + 80);
        long long v53 = (void *)(v51 + 8 * (v52 >> 5));
        long long v54 = (long long *)(*v53 + ((v52 & 0x1F) << 7));
        uint64_t v55 = *(void *)(v51 + (((*(void *)(a1 + 88) + v52) >> 2) & 0x3FFFFFFFFFFFFFF8))
            + (((*(void *)(a1 + 88) + v52) & 0x1F) << 7);
        while (v54 != (long long *)v55)
        {
          long long v56 = *v54;
          long long v66 = v54[2];
          long long v67 = v54[1];
          long long v64 = v54[4];
          long long v65 = v54[3];
          long long v57 = v54[6];
          long long v73 = v54[7];
          long long v74 = v56;
          long long v71 = v54[5];
          long long v72 = v57;
          v70[0] = v56;
          v70[5] = v71;
          v70[6] = v57;
          v70[7] = v73;
          *(double *)v58.i64 = sub_100344D00(*(float32x4_t *)(a1 + 32));
          uint64_t v62 = 0;
          v68[0] = v67;
          v68[1] = v66;
          v68[2] = v65;
          v68[3] = v64;
          do
          {
            v69[v62] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58, COERCE_FLOAT(v68[v62])), v59, *(float32x2_t *)&v68[v62], 1), v60, (float32x4_t)v68[v62], 2), v61, (float32x4_t)v68[v62], 3);
            ++v62;
          }
          while (v62 != 4);
          v70[1] = v69[0];
          v70[2] = v69[1];
          v70[3] = v69[2];
          _OWORD v70[4] = v69[3];
          sub_10033C83C((void *)(a1 + 96), v70);
          v54 += 8;
          if ((long long *)((char *)v54 - *v53) == (long long *)4096)
          {
            float32x4_t v63 = (long long *)v53[1];
            ++v53;
            long long v54 = v63;
          }
        }
      }
      goto LABEL_18;
    case 2:
      if (v6 == 2) {
        goto LABEL_22;
      }
      *(_OWORD *)(a1 + 16) = xmmword_1004C4440;
      *(_OWORD *)(a1 + 32) = xmmword_1004C1B40;
      *(_DWORD *)(a1 + 352) = 0;
      goto LABEL_18;
    case 3:
      if (v6 == 2) {
        goto LABEL_22;
      }
      int v24 = 1;
LABEL_17:
      *(_DWORD *)(a1 + 352) = v24;
      goto LABEL_18;
    case 5:
      if (v6 == 2)
      {
LABEL_22:
        long long v29 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a3 + 80) = v29;
        long long v30 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a3 + 112) = v30;
        long long v31 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v31;
        long long v32 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a3 + 48) = v32;
        *(_DWORD *)(a3 + 112) = v7;
        *(unsigned char *)(a3 + 116) = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 352) = 4;
        if (*(unsigned char *)(a1 + 344))
        {
          if (*(unsigned char *)(a1 + 200))
          {
            if (*(void *)(a1 + 88))
            {
              uint64_t v50 = *(void *)(*(void *)(a1 + 56) + ((*(void *)(a1 + 80) >> 2) & 0x3FFFFFFFFFFFFFF8))
                  + ((*(void *)(a1 + 80) & 0x1FLL) << 7);
              if (*(double *)v50 - *(double *)(a1 + 192) < *(double *)(a1 + 360))
              {
                long long v79 = *(_OWORD *)(v50 + 64);
                long long v80 = *(_OWORD *)(v50 + 80);
                long long v81 = *(_OWORD *)(v50 + 96);
                long long v82 = *(_OWORD *)(v50 + 112);
                float32x4_t v75 = *(float32x4_t *)v50;
                long long v76 = *(_OWORD *)(v50 + 16);
                long long v77 = *(_OWORD *)(v50 + 32);
                long long v78 = *(_OWORD *)(v50 + 48);
                LOBYTE(v83) = 1;
                sub_1003886E0(a1, &v75, a1 + 184);
              }
            }
          }
        }
LABEL_18:
        int v6 = *(_DWORD *)(a2 + 80);
        int v7 = *(_DWORD *)(a1 + 352);
LABEL_19:
        long long v25 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a3 + 80) = v25;
        long long v26 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a3 + 112) = v26;
        long long v27 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v27;
        long long v28 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a3 + 48) = v28;
        *(_DWORD *)(a3 + 112) = v7;
        *(unsigned char *)(a3 + 116) = 1;
        if (v6 != 2)
        {
LABEL_20:
          sub_100387EF8((void *)a1);
          return;
        }
      }
      sub_10033C83C((void *)(a1 + 48), (long long *)a2);
      *(_DWORD *)(a3 + 80) = 0;
      unsigned int v33 = *(_DWORD *)(a1 + 352);
      if (v33 <= 5 && ((1 << v33) & 0x2C) != 0)
      {
        *(_DWORD *)(a3 + 80) = 2;
        *(double *)v34.i64 = sub_100344D00(*(float32x4_t *)(a1 + 32));
        unint64_t v38 = 0;
        long long v39 = *(_OWORD *)(a2 + 32);
        long long v40 = *(_OWORD *)(a2 + 48);
        long long v41 = *(_OWORD *)(a2 + 64);
        float32x4_t v85 = *(float32x4_t *)(a2 + 16);
        long long v86 = v39;
        long long v87 = v40;
        long long v88 = v41;
        do
        {
          *(float32x4_t *)((char *)&v75 + v38) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)((char *)&v85 + v38))), v35, *(float32x2_t *)&v85.f32[v38 / 4], 1), v36, *(float32x4_t *)((char *)&v85 + v38), 2), v37, *(float32x4_t *)((char *)&v85 + v38), 3);
          v38 += 16;
        }
        while (v38 != 64);
        long long v42 = v76;
        long long v43 = v77;
        long long v44 = v78;
        *(float32x4_t *)(a3 + 16) = v75;
        *(_OWORD *)(a3 + 32) = v42;
        *(_OWORD *)(a3 + 48) = v43;
        *(_OWORD *)(a3 + 64) = v44;
        sub_10033C83C((void *)(a1 + 96), (long long *)a3);
        if (*(double *)a3
           - *(double *)(*(void *)(*(void *)(a1 + 104) + ((*(void *)(a1 + 128) >> 2) & 0x3FFFFFFFFFFFFFF8))
                       + ((*(void *)(a1 + 128) & 0x1FLL) << 7)) > 1.28)
        {
          uint64_t v45 = *(void *)(a1 + 136) - 1;
          ++*(void *)(a1 + 128);
          *(void *)(a1 + 136) = v45;
          sub_10015ED2C(a1 + 96, 1);
        }
      }
      return;
    default:
      goto LABEL_19;
  }
}

void sub_100389180(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 356) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 364) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 372) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 380) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_1004366A0();
  }
}

void sub_10038922C(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_1004366D4();
  }
}

uint64_t sub_100389298(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)(result + 8) = *(_OWORD *)a2;
  *(void *)(result + 24) = v3;
  if (!v2) {
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

BOOL sub_1003892C0(uint64_t a1, double *a2, double a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 32);
  if (*(unsigned char *)(a1 + 32)) {
    *a2 = a3 - *(double *)(a1 + 16) + *(double *)(a1 + 8);
  }
  return v3 != 0;
}

BOOL sub_1003892E4(uint64_t a1, double *a2, double a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 32);
  if (*(unsigned char *)(a1 + 32)) {
    *a2 = a3 - *(double *)(a1 + 24) + *(double *)(a1 + 8);
  }
  return v3 != 0;
}

void sub_10038930C()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_100436708();
  }
}

void sub_100389350()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_10043673C();
  }
}

void sub_100389394()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_100436770();
  }
}

void sub_1003893D8()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_1004367A4();
  }
}

void sub_10038941C()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_1004367D8();
  }
}

void sub_100389460()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_10043680C();
  }
}

void sub_1003894A4()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_100436840();
  }
}

void sub_1003894E8()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_100436874();
  }
}

void sub_10038952C()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_1004368A8();
  }
}

void sub_100389570()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_1004368DC();
  }
}

void sub_1003895B4()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_100436910();
  }
}

void sub_1003895F8()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_100436944();
  }
}

void sub_10038963C()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_100436978();
  }
}

void sub_100389680()
{
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
    sub_1004369AC();
  }
}

uint64_t sub_1003896C4()
{
  return 0;
}

uint64_t sub_1003896CC()
{
  return 0;
}

uint64_t sub_1003896D4(int a1, double a2, double a3)
{
  if (a1 != 2) {
    return 1;
  }
  if (a2 < -1000.0) {
    return 1;
  }
  if (a2 > 0.15) {
    return 1;
  }
  uint64_t result = 0;
  if (a3 <= 10000.0 && a3 >= 350.0) {
    return 1;
  }
  return result;
}

void sub_100389728(uint64_t a1)
{
  int v2 = (void **)(a1 + 96);
  sub_10038CAE0((char *)(a1 + 208), (std::string *)(a1 + 96));
  if (*(unsigned char *)(a1 + 144))
  {
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*v2);
    }
    *(unsigned char *)(a1 + 144) = 0;
  }
}

void sub_100389774(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>, float a4@<S0>)
{
  uint64_t v8 = *(void *)(a1 + 80);
  long long v11 = *(uint64_t ***)(v8 + 8);
  long long v10 = (uint64_t *)(v8 + 8);
  long long v9 = v11;
  if (v11)
  {
    long long v12 = v10;
    do
    {
      long long v13 = v9 + 1;
      if (*((float *)v9 + 14) > a4)
      {
        long long v13 = v9;
        long long v12 = (uint64_t *)v9;
      }
      long long v9 = (uint64_t **)*v13;
    }
    while (*v13);
  }
  else
  {
    long long v12 = v10;
  }
  int v14 = *(unsigned __int8 *)(a1 + 144);
  LOBYTE(__p) = 0;
  char v57 = 0;
  char v58 = 0;
  long long v15 = (long long *)v59;
  sub_10031FE98((char *)v59, &__p);
  if (v57 && v56 < 0) {
    operator delete((void *)__p);
  }
  LOBYTE(v48) = 0;
  char v50 = 0;
  char v51 = 1;
  long long v16 = (long long *)v52;
  sub_10031FE98((char *)v52, &v48);
  if (v50 && v49 < 0) {
    operator delete((void *)v48);
  }
  if (v12 == v10)
  {
    if (!v14) {
      goto LABEL_48;
    }
    if (!*(unsigned char *)(a1 + 144))
    {
      int v42 = 106;
      goto LABEL_86;
    }
    if ((float)(*(float *)(a1 + 120) + *(float *)a1) < a4)
    {
      sub_10038CAE0((char *)(a1 + 208), (std::string *)(a1 + 96));
      if (*(unsigned char *)(a1 + 144))
      {
        if (*(char *)(a1 + 119) < 0) {
          operator delete(*(void **)(a1 + 96));
        }
        *(unsigned char *)(a1 + 144) = 0;
      }
      uint64_t v27 = *(void *)(a1 + 80);
      uint64_t v30 = *(void *)(v27 + 8);
      uint64_t v28 = v27 + 8;
      uint64_t v29 = v30;
      if (v30)
      {
        do
        {
          uint64_t v31 = v29;
          uint64_t v29 = *(void *)(v29 + 8);
        }
        while (v29);
      }
      else
      {
        do
        {
          uint64_t v31 = *(void *)(v28 + 16);
          BOOL v18 = *(void *)v31 == v28;
          uint64_t v28 = v31;
        }
        while (v18);
      }
      sub_100389D10((char *)(a1 + 152), (std::string *)(v31 + 32));
      long long v32 = &v51;
      long long v15 = (long long *)v52;
    }
    else
    {
LABEL_48:
      long long v32 = &v58;
    }
    *a3 = *v32;
    sub_10031FE98(a3 + 8, v15);
    goto LABEL_77;
  }
  long long v17 = v12 + 4;
  if (*((unsigned char *)v12 + 72)) {
    BOOL v18 = (a2 & 0xFF00000000) == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18 || (double v19 = *(double *)(a1 + 8), v19 <= *(float *)&a2))
  {
    if (!v14)
    {
      uint64_t v33 = *(void *)(a1 + 80);
      uint64_t v36 = *(void *)(v33 + 8);
      uint64_t v34 = v33 + 8;
      uint64_t v35 = v36;
      if (v36)
      {
        do
        {
          uint64_t v37 = v35;
          uint64_t v35 = *(void *)(v35 + 8);
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v37 = *(void *)(v34 + 16);
          BOOL v18 = *(void *)v37 == v34;
          uint64_t v34 = v37;
        }
        while (v18);
      }
      if ((float)(*(float *)(v37 + 56) - *(float *)(a1 + 4)) >= a4)
      {
        sub_10038CAE0((char *)(a1 + 208), (std::string *)(a1 + 96));
        sub_100389D10((char *)(a1 + 96), (std::string *)(v12 + 4));
        if (v12 == **(uint64_t ***)(a1 + 80))
        {
          if (*(unsigned char *)(a1 + 200))
          {
            if (*(char *)(a1 + 175) < 0) {
              operator delete(*(void **)(a1 + 152));
            }
            *(unsigned char *)(a1 + 200) = 0;
          }
        }
        else
        {
          long long v40 = (uint64_t **)*v12;
          if (*v12)
          {
            do
            {
              long long v41 = v40;
              long long v40 = (uint64_t **)v40[1];
            }
            while (v40);
          }
          else
          {
            do
            {
              long long v41 = (uint64_t **)v12[2];
              BOOL v18 = *v41 == v12;
              long long v12 = (uint64_t *)v41;
            }
            while (v18);
          }
          sub_100389D10((char *)(a1 + 152), (std::string *)(v41 + 4));
        }
        unint64_t v38 = &v51;
      }
      else
      {
        unint64_t v38 = &v58;
        long long v16 = (long long *)v59;
      }
      *a3 = *v38;
      sub_10031FE98(a3 + 8, v16);
      goto LABEL_77;
    }
    if (*(unsigned char *)(a1 + 144))
    {
      buf[0].__r_.__value_.__s.__data_[0] = 0;
      char v63 = 0;
      if (v12 != **(uint64_t ***)(a1 + 80))
      {
        int8x16_t v20 = (uint64_t **)*v12;
        if (*v12)
        {
          do
          {
            float32x4_t v21 = v20;
            int8x16_t v20 = (uint64_t **)v20[1];
          }
          while (v20);
        }
        else
        {
          do
          {
            float32x4_t v21 = (uint64_t **)v12[2];
            BOOL v18 = *v21 == v12;
            long long v12 = (uint64_t *)v21;
          }
          while (v18);
        }
        sub_100389D10((char *)buf, (std::string *)(v21 + 4));
      }
      int v22 = sub_100389DA0(a1, (float *)(a1 + 96), (uint64_t)v17, buf, a4);
      int v23 = &v58;
      if (v22) {
        int v23 = &v51;
      }
      *a3 = *v23;
      int v24 = a3 + 8;
      if (v22) {
        long long v25 = (long long *)v52;
      }
      else {
        long long v25 = (long long *)v59;
      }
      sub_10031FE98(v24, v25);
      if (v63 && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      {
        long long v26 = (void *)buf[0].__r_.__value_.__r.__words[0];
LABEL_70:
        operator delete(v26);
        goto LABEL_77;
      }
      goto LABEL_77;
    }
    int v42 = 143;
LABEL_86:
    __assert_rtn("checkForRegionChange", "NRBYDeviceMonitor.cpp", v42, "_currentRegion.has_value()");
  }
  long long v39 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218240;
    *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = *(float *)&a2;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v19;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#regionmon region change supressed: intent score: %f, required score: %f", (uint8_t *)buf, 0x16u);
  }
  if (*((char *)v12 + 55) < 0)
  {
    sub_100002DE4(v43, (void *)v12[4], v12[5]);
  }
  else
  {
    *(_OWORD *)long long v43 = *v17;
    uint64_t v44 = v12[6];
  }
  long long v45 = *(_OWORD *)(v12 + 7);
  __int16 v46 = *((_WORD *)v12 + 36);
  char v47 = 1;
  *a3 = 0;
  sub_10031FE98(a3 + 8, (long long *)v43);
  if (v47 && SHIBYTE(v44) < 0)
  {
    long long v26 = v43[0];
    goto LABEL_70;
  }
LABEL_77:
  if (v54 && v53 < 0) {
    operator delete(v52[0]);
  }
  if (v61)
  {
    if (v60 < 0) {
      operator delete(v59[0]);
    }
  }
}

void sub_100389C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a40 && a36 < 0) {
    operator delete(__p);
  }
  if (a61)
  {
    if (a57 < 0) {
      operator delete(a52);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_100389D10(char *__dst, std::string *__str)
{
  if (__dst[48])
  {
    std::string::operator=((std::string *)__dst, __str);
    __int16 v4 = __str[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)(__dst + 24) = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
    *((_WORD *)__dst + 20) = v4;
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100002DE4(__dst, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v5 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      *((void *)__dst + 2) = *((void *)&__str->__r_.__value_.__l + 2);
      *(_OWORD *)__dst = v5;
    }
    long long v6 = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
    *((_WORD *)__dst + 20) = __str[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)(__dst + 24) = v6;
    __dst[48] = 1;
  }
  return __dst;
}

uint64_t sub_100389DA0(uint64_t a1, float *a2, uint64_t a3, std::string *a4, float a5)
{
  if (sub_100389E74((unsigned __int8 *)a3, a2)) {
    return 0;
  }
  if (*(float *)(a3 + 24) >= a2[6])
  {
    if (!*(unsigned char *)(a1 + 144)) {
      sub_100436A0C();
    }
    if ((float)(*(float *)(a1 + 120) + *(float *)a1) >= a5) {
      return 0;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 200)) {
      sub_1004369E0();
    }
    if ((float)(*(float *)(a1 + 176) - *(float *)(a1 + 4)) <= a5) {
      return 0;
    }
  }
  sub_10038CAE0((char *)(a1 + 208), (std::string *)(a1 + 96));
  sub_100389D10((char *)(a1 + 96), (std::string *)a3);
  sub_10038CAE0((char *)(a1 + 152), a4);
  return 1;
}

BOOL sub_100389E74(unsigned __int8 *a1, float *a2)
{
  if (*((float *)a1 + 6) != a2[6]) {
    return 0;
  }
  int v2 = a2;
  uint64_t v4 = a1[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    a2 = *(float **)a2;
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return *((_DWORD *)a1 + 9) == *((_DWORD *)v2 + 9);
    }
    return 0;
  }
  if (a1[23])
  {
    for (int i = a1; *i == *(unsigned __int8 *)a2; ++i)
    {
      a2 = (float *)((char *)a2 + 1);
      if (!--v4) {
        return *((_DWORD *)a1 + 9) == *((_DWORD *)v2 + 9);
      }
    }
    return 0;
  }
  return *((_DWORD *)a1 + 9) == *((_DWORD *)v2 + 9);
}

uint64_t sub_100389F38(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v5 = *(uint64_t ***)(v2 + 8);
  int v3 = (uint64_t *)(v2 + 8);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_14;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = v4 + 1;
    if (*((float *)v4 + 14) > a2)
    {
      int v7 = v4;
      uint64_t v6 = (uint64_t *)v4;
    }
    uint64_t v4 = (uint64_t **)*v7;
  }
  while (*v7);
  if (v6 == v3)
  {
LABEL_14:
    uint64_t v12 = qword_1008ABDE0;
    BOOL v13 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    LOWORD(v26) = 0;
    int v14 = "#regionmon #spatialGesturesPredictor Current region = candidateOutsideKnownRegions, shouldPredictIntent = false";
    long long v15 = v12;
    uint32_t v16 = 2;
    goto LABEL_16;
  }
  uint64_t v8 = v6 + 4;
  if (*((unsigned char *)v6 + 72))
  {
    long long v9 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    if (*((char *)v6 + 55) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    int v26 = 136315138;
    uint64_t v27 = v8;
    long long v10 = "#regionmon #spatialGesturesPredictor Current region = %s, shouldPredictIntent = true, since this region requires user intent";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v26, 0xCu);
    return 1;
  }
  if (v6 != **(uint64_t ***)(a1 + 80))
  {
    long long v17 = (uint64_t *)*v6;
    if (*v6)
    {
      do
      {
        BOOL v18 = v17;
        long long v17 = (uint64_t *)v17[1];
      }
      while (v17);
    }
    else
    {
      double v19 = v6;
      do
      {
        BOOL v18 = (uint64_t *)v19[2];
        BOOL v20 = *v18 == (void)v19;
        double v19 = v18;
      }
      while (v20);
    }
    if (*((unsigned char *)v18 + 72))
    {
      long long v9 = qword_1008ABDE0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      if (*((char *)v6 + 55) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      int v26 = 136315138;
      uint64_t v27 = v8;
      long long v10 = "#regionmon #spatialGesturesPredictor Current region = %s, shouldPredictIntent = true, since inner adjacent r"
            "egion requires user intent";
      goto LABEL_12;
    }
  }
  float32x4_t v21 = (uint64_t *)v6[1];
  if (v21)
  {
    do
    {
      int v22 = v21;
      float32x4_t v21 = (uint64_t *)*v21;
    }
    while (v21);
  }
  else
  {
    int v23 = v6;
    do
    {
      int v22 = (uint64_t *)v23[2];
      BOOL v20 = *v22 == (void)v23;
      int v23 = v22;
    }
    while (!v20);
  }
  if (v22 != v3 && *((unsigned char *)v22 + 72))
  {
    long long v9 = qword_1008ABDE0;
    if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
      return 1;
    }
    if (*((char *)v6 + 55) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    int v26 = 136315138;
    uint64_t v27 = v8;
    long long v10 = "#regionmon #spatialGesturesPredictor Current region = %s, shouldPredictIntent = true, since outer adjacent reg"
          "ion requires user intent";
    goto LABEL_12;
  }
  uint64_t v24 = qword_1008ABDE0;
  BOOL v25 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v25)
  {
    if (*((char *)v6 + 55) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    int v26 = 136315138;
    uint64_t v27 = v8;
    int v14 = "#regionmon #spatialGesturesPredictor Current region = %s, shouldPredictIntent = false, since neither this regi"
          "on nor adjacent ones require user intent";
    long long v15 = v24;
    uint32_t v16 = 12;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v26, v16);
    return 0;
  }
  return result;
}

uint64_t sub_10038A208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  *(void *)a1 = a2;
  uint64_t v16 = a1 + 40;
  sub_10038CC54(a1 + 8, a3);
  sub_10038CCEC(v16, a4);
  sub_10038CD84(a1 + 72, a11);
  *(void *)(a1 + 104) = *a5;
  uint64_t v17 = a5[1];
  *(void *)(a1 + 112) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = a9;
  BOOL v18 = (_OWORD *)(a1 + 152);
  uint64_t v20 = *a5;
  double v19 = (std::__shared_weak_count *)a5[1];
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    _OWORD *v18 = *(_OWORD *)(a6 + 32);
    long long v21 = *(_OWORD *)(a6 + 48);
    long long v22 = *(_OWORD *)(a6 + 64);
    long long v23 = *(_OWORD *)(a6 + 96);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a6 + 80);
    *(_OWORD *)(a1 + 216) = v23;
    *(_OWORD *)(a1 + 168) = v21;
    *(_OWORD *)(a1 + 184) = v22;
    *(void *)(a1 + 232) = v20;
    *(void *)(a1 + 240) = v19;
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 248) = 0;
    *(unsigned char *)(a1 + 304) = 0;
    *(unsigned char *)(a1 + 296) = 0;
    *(unsigned char *)(a1 + 352) = 0;
    *(unsigned char *)(a1 + 360) = 0;
    *(unsigned char *)(a1 + 408) = 0;
    sub_10001A970(v19);
  }
  else
  {
    _OWORD *v18 = *(_OWORD *)(a6 + 32);
    long long v24 = *(_OWORD *)(a6 + 48);
    long long v25 = *(_OWORD *)(a6 + 64);
    long long v26 = *(_OWORD *)(a6 + 96);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a6 + 80);
    *(_OWORD *)(a1 + 216) = v26;
    *(_OWORD *)(a1 + 168) = v24;
    *(_OWORD *)(a1 + 184) = v25;
    *(void *)(a1 + 232) = v20;
    *(void *)(a1 + 240) = 0;
    *(unsigned char *)(a1 + 248) = 0;
    *(unsigned char *)(a1 + 304) = 0;
    *(unsigned char *)(a1 + 296) = 0;
    *(unsigned char *)(a1 + 352) = 0;
    *(unsigned char *)(a1 + 360) = 0;
    *(unsigned char *)(a1 + 408) = 0;
  }
  *(unsigned char *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  sub_10031F8BC((uint64_t *)(a1 + 432), a6);
  memcpy((void *)(a1 + 456), (const void *)(a6 + 24), 0x18CuLL);
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(a6 + 424);
  sub_10025A138((uint64_t *)(a1 + 872), a6 + 440);
  long long v27 = *(_OWORD *)(a6 + 464);
  *(_OWORD *)(a1 + 908) = *(_OWORD *)(a6 + 476);
  *(_OWORD *)(a1 + 896) = v27;
  sub_10025A21C(a1 + 928, (long long *)(a6 + 496));
  long long v28 = *(_OWORD *)(a6 + 544);
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a6 + 528);
  *(_OWORD *)(a1 + 976) = v28;
  long long v29 = *(_OWORD *)(a6 + 560);
  long long v30 = *(_OWORD *)(a6 + 576);
  long long v31 = *(_OWORD *)(a6 + 592);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a6 + 608);
  *(_OWORD *)(a1 + 1008) = v30;
  *(_OWORD *)(a1 + 1024) = v31;
  *(_OWORD *)(a1 + 992) = v29;
  long long v32 = *(_OWORD *)(a6 + 624);
  long long v33 = *(_OWORD *)(a6 + 640);
  long long v34 = *(_OWORD *)(a6 + 656);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a6 + 672);
  *(_OWORD *)(a1 + 1088) = v34;
  *(_OWORD *)(a1 + 1072) = v33;
  *(_OWORD *)(a1 + 1056) = v32;
  long long v35 = *(_OWORD *)(a6 + 688);
  long long v36 = *(_OWORD *)(a6 + 704);
  long long v37 = *(_OWORD *)(a6 + 720);
  *(void *)(a1 + 1168) = *(void *)(a6 + 736);
  *(_OWORD *)(a1 + 1152) = v37;
  *(_OWORD *)(a1 + 1136) = v36;
  *(_OWORD *)(a1 + 1120) = v35;
  *(_DWORD *)(a1 + 1176) = a7;
  *(_DWORD *)(a1 + 1184) = a8;
  *(unsigned char *)(a1 + 1192) = 0;
  *(unsigned char *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  uint64_t v38 = *(void *)(a1 + 440);
  if (!v38) {
    goto LABEL_71;
  }
  uint64_t v39 = a1 + 440;
  do
  {
    int v40 = *(_DWORD *)(v38 + 28);
    BOOL v41 = v40 < a7;
    if (v40 >= a7) {
      int v42 = (uint64_t *)v38;
    }
    else {
      int v42 = (uint64_t *)(v38 + 8);
    }
    if (!v41) {
      uint64_t v39 = v38;
    }
    uint64_t v38 = *v42;
  }
  while (*v42);
  if (v39 == a1 + 440 || *(_DWORD *)(v39 + 28) > a7)
  {
LABEL_71:
    long long v67 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
      sub_100436A38(v67);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "technology mapping not found for ranging technology.");
  }
  int v43 = *(_DWORD *)(v39 + 32);
  *(_DWORD *)(a1 + 1180) = v43;
  switch(v43)
  {
    case 1:
      operator new();
    case 3:
      operator new();
    case 2:
      operator new();
  }
  uint64_t v71 = 0;
  unint64_t v72 = 0;
  unint64_t v73 = 0;
  uint64_t v44 = *(void **)(a1 + 104);
  char v47 = (void *)*v44;
  long long v45 = v44 + 1;
  __int16 v46 = v47;
  if (v47 != v45)
  {
    unint64_t v48 = 0;
    do
    {
      if (*((unsigned char *)v46 + 72))
      {
        char v49 = (long long *)(v46 + 4);
        if (v48 >= v73)
        {
          unint64_t v48 = sub_10038CF18(&v71, v49);
        }
        else
        {
          sub_10038CEA0((uint64_t)&v71, v49);
          v48 += 48;
        }
        unint64_t v72 = v48;
      }
      char v50 = (void *)v46[1];
      if (v50)
      {
        do
        {
          char v51 = v50;
          char v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          char v51 = (void *)v46[2];
          BOOL v52 = *v51 == (void)v46;
          __int16 v46 = v51;
        }
        while (!v52);
      }
      __int16 v46 = v51;
    }
    while (v51 != v45);
    if (v71 != v48)
    {
      char v53 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor", buf, 2u);
      }
      if (a7 == 4 || a7 == 2)
      {
        if (!a8)
        {
LABEL_41:
          char v54 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = a2;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor with intent predictor None for dev %llx", buf, 0xCu);
          }
          qword_10089F638 = *(void *)(a1 + 536);
          long long v55 = *(_OWORD *)(a1 + 488);
          long long v56 = *(_OWORD *)(a1 + 520);
          xmmword_10089F618 = *(_OWORD *)(a1 + 504);
          unk_10089F628 = v56;
          xmmword_10089F5F8 = *(_OWORD *)(a1 + 472);
          unk_10089F608 = v55;
          operator new();
        }
        long long v65 = "typePredictor == common::TypeOfPredictor::None";
        int v66 = 335;
LABEL_68:
        __assert_rtn("DeviceMonitor", "NRBYDeviceMonitor.cpp", v66, v65);
      }
      switch(a8)
      {
        case 0:
          goto LABEL_41;
        case 1:
          float32x4_t v59 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = a2;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor with intent predictor SpatialGeatures for dev %llx", buf, 0xCu);
          }
          if (*(unsigned char *)(a10 + 32)) {
            operator new();
          }
          long long v65 = "gestureClassifiers.has_value()";
          int v66 = 353;
          goto LABEL_68;
        case 2:
          char v61 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = a2;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor with intent predictor AoA for dev %llx", buf, 0xCu);
          }
          qword_10089F638 = *(void *)(a1 + 536);
          long long v62 = *(_OWORD *)(a1 + 488);
          long long v63 = *(_OWORD *)(a1 + 520);
          xmmword_10089F618 = *(_OWORD *)(a1 + 504);
          unk_10089F628 = v63;
          xmmword_10089F5F8 = *(_OWORD *)(a1 + 472);
          unk_10089F608 = v62;
          operator new();
        case 3:
          char v60 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = a2;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor with intent predictor DualAnchorAntennaSpatialGestures for dev %llx", buf, 0xCu);
          }
          if (*(unsigned char *)(a10 + 32)) {
            operator new();
          }
          long long v65 = "gestureClassifiers.has_value()";
          int v66 = 359;
          goto LABEL_68;
        case 4:
          goto LABEL_45;
        default:
          goto LABEL_49;
      }
    }
  }
  if (a8 == 4)
  {
LABEL_45:
    char v57 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#regionmon #spatialGesturesPredictor creating deviceMonitor with intent predictor MotionBasedSpatialGestures for dev %llx", buf, 0xCu);
    }
    if (*(unsigned char *)(a10 + 32)) {
      operator new();
    }
    long long v64 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_FAULT, "#regionmon #spatialGesturesPredictor for intent predictor MotionBasedSpatialGestures, gestureClassifiers should have value", buf, 2u);
      long long v64 = qword_1008ABDE0;
    }
    if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/Proximity/Libraries/NearbyAlgorithms/RegionMonitoring/N"
                           "RBYDeviceMonitor.cpp";
      __int16 buf_12 = 1024;
      int buf_14 = 373;
      __int16 v77 = 2080;
      long long v78 = "DeviceMonitor";
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "#regionmon %s:%d: assertion failure in %s", buf, 0x1Cu);
    }
    abort();
  }
LABEL_49:
  *(void *)long long buf = &v71;
  sub_10031F5E0((void ***)buf);
  return a1;
}

void sub_10038B0BC()
{
}

uint64_t sub_10038B2EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 256) && *(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(unsigned char *)(a1 + 200) && *(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(unsigned char *)(a1 + 144) && *(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    sub_10001A970(v2);
  }
  return a1;
}

uint64_t sub_10038B364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  return sub_10038A208(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_10038B378(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float v7 = *((float *)a2 + 4);
  double v8 = *((double *)a2 + 1);
  __int16 v9 = *((_WORD *)a2 + 40);
  *(void *)&v119[6] = *((void *)a2 + 11);
  v119[14] = *((unsigned char *)a2 + 96);
  *(void *)((char *)&v118 + 7) = *((void *)a2 + 13);
  HIBYTE(v118) = *((unsigned char *)a2 + 112);
  *(_OWORD *)((char *)v117 + 7) = a2[8];
  v117[1] = *(long long *)((char *)a2 + 137);
  uint64_t v10 = *(void *)(a1 + 120);
  double v11 = v7;
  __int16 v102 = v9;
  *(void *)((char *)v103 + 7) = *(void *)&v119[7];
  v103[0] = *(void *)v119;
  char v104 = 0;
  char v105 = 0;
  long long v106 = v118;
  long long v108 = v117[1];
  long long v107 = v117[0];
  char v109 = 1;
  double v12 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t, __int16 *, double, double))(*(void *)v10 + 16))(v10, a3, &v102, v7, v8));
  if (!v13)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 184) = 0;
    return;
  }
  float v14 = v12;
  long long v15 = a2[9];
  long long v98 = a2[8];
  long long v99 = v15;
  long long v100 = a2[10];
  uint64_t v101 = *((void *)a2 + 22);
  long long v16 = a2[5];
  long long v94 = a2[4];
  long long v95 = v16;
  long long v17 = a2[7];
  long long v96 = a2[6];
  long long v97 = v17;
  long long v18 = a2[1];
  long long v90 = *a2;
  long long v91 = v18;
  long long v19 = a2[3];
  long long v92 = a2[2];
  long long v93 = v19;
  *(float *)&long long v91 = v14;
  sub_10037C6B0(*(void **)(a1 + 120), *(double *)&v92);
  unint64_t v21 = 0xBFF0000000000000;
  if (v22) {
    unint64_t v21 = v20;
  }
  *((void *)&v92 + 1) = v21;
  int v23 = *(_DWORD *)(a1 + 1184);
  if ((v23 - 1) < 2)
  {
    uint64_t v24 = *(void *)(a1 + 1208);
    if (!v24) {
      goto LABEL_24;
    }
    long long v25 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v61 = *(void *)a1;
      *(_DWORD *)long long buf = 134217984;
      *(void *)int v111 = v61;
      _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#regionmon Consuming range result for default intent predictor for device identifier %llu", buf, 0xCu);
      uint64_t v24 = *(void *)(a1 + 1208);
    }
LABEL_21:
    (*(void (**)(uint64_t, long long *))(*(void *)v24 + 24))(v24, &v90);
    goto LABEL_24;
  }
  if (v23 != 3) {
    goto LABEL_24;
  }
  if (!*((unsigned char *)a2 + 81)) {
    sub_100436B10();
  }
  int v26 = *((unsigned __int8 *)a2 + 80);
  if (v26 == 2)
  {
    uint64_t v24 = *(void *)(a1 + 1216);
    if (!v24) {
      goto LABEL_24;
    }
    long long v28 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v63 = *(void *)a1;
      *(_DWORD *)long long buf = 134217984;
      *(void *)int v111 = v63;
      _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#regionmon Consuming range result for secondary intent predictor for device identifier 0x%llx", buf, 0xCu);
      uint64_t v24 = *(void *)(a1 + 1216);
    }
    goto LABEL_21;
  }
  if (v26 == 1)
  {
    uint64_t v24 = *(void *)(a1 + 1208);
    if (!v24) {
      goto LABEL_24;
    }
    long long v27 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v62 = *(void *)a1;
      *(_DWORD *)long long buf = 134217984;
      *(void *)int v111 = v62;
      _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#regionmon Consuming range result for default intent predictor for device identifier 0x%llx", buf, 0xCu);
      uint64_t v24 = *(void *)(a1 + 1208);
    }
    goto LABEL_21;
  }
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100436AA8();
  }
LABEL_24:
  long long v29 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v60 = *(void *)a2;
    *(_DWORD *)long long buf = 134218752;
    *(double *)int v111 = v8;
    *(_WORD *)&v111[8] = 2048;
    *(void *)&v111[10] = v60;
    __int16 v112 = 2048;
    double v113 = v11;
    __int16 v114 = 2048;
    double v115 = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#regionmon time:%f, dev:%llx, raw:%f, filtered:%f", buf, 0x2Au);
  }
  int v30 = *(unsigned __int8 *)(a1 + 424);
  int v31 = *(_DWORD *)(a1 + 1184);
  float v32 = 0.0;
  switch(v31)
  {
    case 1:
      int v41 = sub_100389F38(a1 + 152, v14);
      int v42 = 0;
      uint64_t v43 = *(void *)(a1 + 1208);
      if (!v43 || !v41) {
        goto LABEL_59;
      }
      uint64_t v44 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v45 = *(void *)a1;
        *(_DWORD *)long long buf = 134217984;
        *(void *)int v111 = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#regionmon using default intent predictor for dev 0x%llx", buf, 0xCu);
        uint64_t v43 = *(void *)(a1 + 1208);
      }
      (*(void (**)(uint64_t))(*(void *)v43 + 40))(v43);
      goto LABEL_55;
    case 2:
      uint64_t v35 = *(void *)(a1 + 1208);
      if (v35)
      {
        uint64_t v39 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v40 = *(void *)a1;
          *(_DWORD *)long long buf = 134217984;
          *(void *)int v111 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#regionmon using default intent predictor for dev 0x%llx", buf, 0xCu);
          uint64_t v35 = *(void *)(a1 + 1208);
        }
        goto LABEL_38;
      }
      break;
    case 3:
      int v33 = sub_100389F38(a1 + 152, v14);
      if (!*((unsigned char *)a2 + 81)) {
        sub_100436A7C();
      }
      int v34 = *((unsigned __int8 *)a2 + 80);
      if (v34 == 2)
      {
        uint64_t v46 = *(void *)(a1 + 1216);
        if (v46) {
          int v47 = v33;
        }
        else {
          int v47 = 0;
        }
        if (v47 == 1)
        {
          unint64_t v48 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v65 = *(void *)a1;
            *(_DWORD *)long long buf = 134217984;
            *(void *)int v111 = v65;
            _os_log_debug_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "#regionmon using secondary SG predictory for dev 0x%llx", buf, 0xCu);
            uint64_t v46 = *(void *)(a1 + 1216);
          }
          double v38 = (*(double (**)(uint64_t))(*(void *)v46 + 40))(v46);
          goto LABEL_55;
        }
      }
      else if (v34 == 1)
      {
        uint64_t v35 = *(void *)(a1 + 1208);
        if (v35) {
          int v36 = v33;
        }
        else {
          int v36 = 0;
        }
        if (v36 == 1)
        {
          long long v37 = qword_1008ABDE0;
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v64 = *(void *)a1;
            *(_DWORD *)long long buf = 134217984;
            *(void *)int v111 = v64;
            _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#regionmon using default SG predictor for dev 0x%llx", buf, 0xCu);
            uint64_t v35 = *(void *)(a1 + 1208);
          }
LABEL_38:
          (*(void (**)(uint64_t))(*(void *)v35 + 40))(v35);
LABEL_55:
          float v32 = v38;
          int v42 = &_mh_execute_header;
          goto LABEL_59;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR))
      {
        sub_100436AA8();
      }
      break;
  }
  int v42 = 0;
LABEL_59:
  BOOL v49 = v30 != 0;
  uint64_t v50 = (unint64_t)v42 | LODWORD(v32);
  sub_100389774(a1 + 152, v50, (char *)buf, v14);
  if (buf[0]) {
    BOOL v51 = 0;
  }
  else {
    BOOL v51 = v49;
  }
  if (!v51)
  {
    sub_10031FE98((char *)v87, (long long *)(a1 + 248));
    sub_10031FE98((char *)v84, (long long *)(a1 + 360));
    uint64_t v54 = *(void *)a1;
    sub_10031FE98((char *)v81, (long long *)v87);
    sub_10031FE98((char *)v78, (long long *)v84);
    v75[8] = v98;
    v75[9] = v99;
    v75[10] = v100;
    uint64_t v76 = v101;
    v75[4] = v94;
    v75[5] = v95;
    v75[6] = v96;
    v75[7] = v97;
    v75[0] = v90;
    v75[1] = v91;
    v75[2] = v92;
    v75[3] = v93;
    char v77 = 1;
    sub_10038BDF4(a1 + 8, v54, (uint64_t)v81, (uint64_t)v78, (uint64_t)v75, v50, 0, v8);
    if (v80 && v79 < 0) {
      operator delete(v78[0]);
    }
    if (!v83 || (v82 & 0x80000000) == 0) {
      goto LABEL_81;
    }
    char v53 = v81[0];
    goto LABEL_80;
  }
  if (v116)
  {
    sub_10031FE98((char *)v87, (long long *)&v111[4]);
    if (v89)
    {
      sub_10031FE98((char *)v84, (long long *)(a1 + 248));
      if (v86)
      {
        if (!v89) {
          sub_10000AE44();
        }
        if (sub_100389E74((unsigned __int8 *)v84, (float *)v87)) {
          goto LABEL_81;
        }
      }
      uint64_t v52 = *(void *)a1;
      sub_10031FE98(v72, (long long *)v87);
      sub_10031FE98((char *)__p, (long long *)v84);
      v66[8] = v98;
      v66[9] = v99;
      v66[10] = v100;
      uint64_t v67 = v101;
      v66[4] = v94;
      v66[5] = v95;
      v66[6] = v96;
      v66[7] = v97;
      v66[0] = v90;
      v66[1] = v91;
      v66[2] = v92;
      v66[3] = v93;
      char v68 = 1;
      sub_10038BDF4(a1 + 8, v52, (uint64_t)v72, (uint64_t)__p, (uint64_t)v66, v50, 1, v8);
      if (v71 && v70 < 0) {
        operator delete(__p[0]);
      }
      if (!v74 || (v73 & 0x80000000) == 0) {
        goto LABEL_81;
      }
      char v53 = *(void **)v72;
LABEL_80:
      operator delete(v53);
LABEL_81:
      if (v86 && v85 < 0) {
        operator delete(v84[0]);
      }
      if (v89 && v88 < 0) {
        operator delete(v87[0]);
      }
    }
  }
  *(double *)(a1 + 416) = v8;
  *(unsigned char *)(a1 + 424) = 1;
  long long v55 = v99;
  *(_OWORD *)(a4 + 128) = v98;
  *(_OWORD *)(a4 + 144) = v55;
  *(_OWORD *)(a4 + 160) = v100;
  *(void *)(a4 + 176) = v101;
  long long v56 = v95;
  *(_OWORD *)(a4 + 64) = v94;
  *(_OWORD *)(a4 + 80) = v56;
  long long v57 = v97;
  *(_OWORD *)(a4 + 96) = v96;
  *(_OWORD *)(a4 + 112) = v57;
  long long v58 = v91;
  *(_OWORD *)a4 = v90;
  *(_OWORD *)(a4 + 16) = v58;
  long long v59 = v93;
  *(_OWORD *)(a4 + 32) = v92;
  *(_OWORD *)(a4 + 48) = v59;
  *(unsigned char *)(a4 + 184) = 1;
  if (v116)
  {
    if (SHIBYTE(v113) < 0) {
      operator delete(*(void **)&v111[4]);
    }
  }
}

void sub_10038BD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a42 && a38 < 0) {
    operator delete(__p);
  }
  if (a52 && a48 < 0) {
    operator delete(a43);
  }
  if (LOBYTE(STACK[0x290]) && SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (LOBYTE(STACK[0x2C8]) && SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (*(unsigned char *)(v52 - 184))
  {
    if (*(char *)(v52 - 209) < 0) {
      operator delete(*(void **)(v52 - 232));
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10038BDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  uint64_t v13 = a6;
  double v12 = a8;
  uint64_t v11 = a2;
  char v10 = a7;
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, double *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t *, char *))(*(void *)v8 + 48))(v8, &v12, &v11, a3, a4, a5, &v13, &v10);
}

BOOL sub_10038BE70(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 1184);
  if ((v1 - 1) < 2 || v1 == 4)
  {
    int v3 = (void *)(a1 + 1208);
    return *v3 != 0;
  }
  if (v1 == 3 && *(void *)(a1 + 1208))
  {
    int v3 = (void *)(a1 + 1216);
    return *v3 != 0;
  }
  return 0;
}

void sub_10038BEB8(uint64_t a1, double *a2)
{
  int v4 = *(_DWORD *)(a1 + 1184);
  if ((v4 - 1) < 2)
  {
    uint64_t v6 = *(void *)(a1 + 1208);
    if (!v6) {
      return;
    }
    goto LABEL_9;
  }
  if (v4 != 4)
  {
    if (v4 != 3) {
      return;
    }
    uint64_t v5 = *(void *)(a1 + 1208);
    if (v5) {
      (*(void (**)(uint64_t, double *))(*(void *)v5 + 16))(v5, a2);
    }
    uint64_t v6 = *(void *)(a1 + 1216);
    if (!v6) {
      return;
    }
LABEL_9:
    float v7 = *(void (**)(void))(*(void *)v6 + 16);
    v7();
    return;
  }
  uint64_t v8 = *(void *)(a1 + 1208);
  if (v8)
  {
    (*(void (**)(uint64_t, double *))(*(void *)v8 + 16))(v8, a2);
    double v9 = *a2;
    if (!*(unsigned char *)(a1 + 1200) || v9 - *(double *)(a1 + 1192) > 0.100000001)
    {
      *(double *)(a1 + 1192) = v9;
      *(unsigned char *)(a1 + 1200) = 1;
      (*(void (**)(void))(**(void **)(a1 + 1208) + 40))(*(void *)(a1 + 1208));
      if (*(void *)(a1 + 96))
      {
        float v11 = v10;
        uint64_t v12 = *(void *)a1;
        sub_10038C08C(a1 + 72, v12, v11);
      }
    }
  }
  else
  {
    uint64_t v13 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)float v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#regionmon Motion based spatial gestures predictor not defined", v14, 2u);
    }
  }
}

uint64_t sub_10038C08C(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = a2;
  float v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, float *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

BOOL sub_10038C0E8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1180) == 3;
}

BOOL sub_10038C0F8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) == *(_DWORD *)(a1 + 1176);
}

void sub_10038C10C(uint64_t a1, double a2)
{
  (*(void (**)(void))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120));
  sub_100389728(a1 + 152);
  uint64_t v4 = *(void *)a1;
  int v5 = *(_DWORD *)(a1 + 144);
  int v6 = *(_DWORD *)(a1 + 1184);
  sub_10031FE98((char *)v28, (long long *)(a1 + 248));
  sub_10031FE98((char *)v25, (long long *)(a1 + 360));
  v7[0] = v4;
  *(double *)&v7[1] = a2;
  char v8 = 0;
  v7[3] = 0;
  void v7[4] = 0;
  _DWORD v7[2] = 0x3C47A0000;
  char v9 = 0;
  char v10 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  __int16 v14 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  int v17 = v5;
  int v18 = v6;
  char v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v24 = 1;
  sub_10038BDF4(a1 + 8, v4, (uint64_t)v28, (uint64_t)v25, (uint64_t)v7, 0x13F800000, 0, a2);
  if (v27 && v26 < 0) {
    operator delete(v25[0]);
  }
  if (v30)
  {
    if (v29 < 0) {
      operator delete(v28[0]);
    }
  }
}

void sub_10038C254(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 128) && *(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(unsigned char *)(v1 - 72))
  {
    if (*(char *)(v1 - 97) < 0) {
      operator delete(*(void **)(v1 - 120));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10038C298(uint64_t a1, long long *a2)
{
  double v4 = *(double *)a2;
  uint64_t v5 = *(void *)(a1 + 120);
  long long v115 = *a2;
  int v116 = *((_DWORD *)a2 + 4);
  int v6 = (long long *)((char *)a2 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    sub_100002DE4(&v117, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v117 = *v6;
    uint64_t v118 = *((void *)a2 + 5);
  }
  long long v120 = 0;
  long long __p = 0;
  uint64_t v121 = 0;
  sub_10016D488(&__p, *((const void **)a2 + 6), *((void *)a2 + 7), *((void *)a2 + 7) - *((void *)a2 + 6));
  long long v122 = *(long long *)((char *)a2 + 72);
  (*(void (**)(void **__return_ptr, uint64_t, long long *, void))(*(void *)v5 + 24))(&v123, v5, &v115, 0);
  int v7 = v124;
  double v8 = v125;
  int v34 = v123;
  uint64_t v35 = v126;
  uint64_t v9 = v127;
  int v10 = v128;
  int v11 = v130;
  int v12 = v131;
  int v13 = v132;
  if (__p)
  {
    long long v120 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v118) < 0)
  {
    operator delete((void *)v117);
    if (!v13) {
      return;
    }
  }
  else if (!v13)
  {
    return;
  }
  if (v10)
  {
    uint64_t v14 = *(void *)(a1 + 104);
    if (v9)
    {
      uint64_t v123 = *(void **)v14;
      sub_100343E50(&v123, v9 - 1);
      long long v15 = (float *)v123;
    }
    else
    {
      int v18 = *(float **)(v14 + 8);
      long long v16 = (float *)(v14 + 8);
      int v17 = v18;
      if (v18)
      {
        do
        {
          long long v15 = v17;
          int v17 = (float *)*((void *)v17 + 1);
        }
        while (v17);
      }
      else
      {
        do
        {
          long long v15 = (float *)*((void *)v16 + 2);
          BOOL v19 = *(void *)v15 == (void)v16;
          long long v16 = v15;
        }
        while (v19);
      }
    }
    float v20 = v15[14] + -0.101;
    sub_100389774(a1 + 152, 0x13F800000, (char *)&v123, v20);
    if ((_BYTE)v123)
    {
      sub_10031FE98((char *)v111, (long long *)(a1 + 248));
      sub_10031FE98((char *)v108, (long long *)(a1 + 360));
      uint64_t v21 = *(void *)a1;
      float v22 = v113;
      int v23 = *(_DWORD *)(a1 + 144);
      if (v12 && v11 < *(_DWORD *)(a1 + 856))
      {
        char v24 = qword_1008ABDE0;
        if (v9)
        {
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
          {
            if (!v7) {
              sub_10000AE44();
            }
            *(_DWORD *)long long buf = 134218496;
            double v134 = v22;
            __int16 v135 = 2048;
            double v136 = v34;
            __int16 v137 = 1024;
            LODWORD(v138) = v11;
            _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#regionmon BT threshold detector early return with estimate, range:%f  RSSI: %f, numSamples: %d", buf, 0x1Cu);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
        {
          if (!v7) {
            sub_10000AE44();
          }
          sub_100436B3C(v139, (uint64_t)v34, v11, v24);
        }
      }
      int v25 = v23;
      char v26 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_INFO))
      {
        double v27 = *((double *)a2 + 10);
        if (*((char *)a2 + 47) >= 0) {
          long long v28 = v6;
        }
        else {
          long long v28 = (_OWORD *)*((void *)a2 + 3);
        }
        uint64_t v29 = *((void *)a2 + 1);
        *(_DWORD *)long long buf = 134218498;
        double v134 = v27;
        __int16 v135 = 2080;
        double v136 = v28;
        __int16 v137 = 2048;
        uint64_t v138 = v29;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#regionmon Device Monitor suggested region change for device %llu (%s) with current RSSI of %f", buf, 0x20u);
      }
      uint64_t v30 = *(void *)a1;
      sub_10031FE98((char *)v105, (long long *)v111);
      sub_10031FE98((char *)v102, (long long *)v108);
      v80[0] = v21;
      *(double *)&v80[1] = v4;
      float v81 = v22;
      int v82 = 3;
      char v85 = 0;
      uint64_t v83 = 0;
      uint64_t v84 = 0;
      char v86 = 0;
      char v87 = 0;
      char v88 = 0;
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      __int16 v91 = 0;
      long long v92 = 0u;
      long long v93 = 0u;
      int v94 = v25;
      int v95 = 0;
      char v96 = 0;
      char v97 = 0;
      uint64_t v99 = 0;
      uint64_t v98 = 0;
      uint64_t v100 = 0;
      char v101 = 1;
      sub_10038BDF4(a1 + 8, v30, (uint64_t)v105, (uint64_t)v102, (uint64_t)v80, 0x13F800000, 0, v4);
      if (v104 && v103 < 0) {
        operator delete(v102[0]);
      }
      if (v107 && v106 < 0) {
        operator delete(v105[0]);
      }
      if (v110 && v109 < 0) {
        operator delete(v108[0]);
      }
      if (v114 && v112 < 0) {
        operator delete(v111[0]);
      }
    }
    if (!*(unsigned char *)(a1 + 968) || !(_BYTE)v35) {
      goto LABEL_51;
    }
    uint64_t v31 = *(void *)a1;
    int v32 = *(_DWORD *)(a1 + 272);
    int v33 = *(_DWORD *)(a1 + 144);
    if (*(unsigned char *)(a1 + 136))
    {
      if (vabdd_f64(*(double *)(a1 + 128), v8) <= 0.005) {
        goto LABEL_51;
      }
      v58[0] = *(void *)a1;
      *(double *)&v58[1] = v4;
      int v59 = v32;
      int v60 = 3;
      char v63 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      char v64 = 0;
      char v65 = 0;
      char v66 = 0;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      __int16 v69 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      int v72 = v33;
      int v73 = 0;
      char v74 = 0;
      char v75 = 0;
      double v76 = v8;
      uint64_t v77 = v35;
      uint64_t v78 = 0;
      char v79 = 1;
      sub_10038C94C(a1 + 40, v31, (uint64_t)v58, v4);
    }
    else
    {
      v36[0] = *(void *)a1;
      *(double *)&v36[1] = v4;
      int v37 = v32;
      int v38 = 3;
      char v41 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      char v42 = 0;
      char v43 = 0;
      char v44 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      __int16 v47 = 0;
      long long v48 = 0u;
      long long v49 = 0u;
      int v50 = v33;
      int v51 = 0;
      char v52 = 0;
      char v53 = 0;
      double v54 = v8;
      uint64_t v55 = v35;
      uint64_t v56 = 0;
      char v57 = 1;
      sub_10038C94C(a1 + 40, v31, (uint64_t)v36, v4);
    }
    *(double *)(a1 + 128) = v8;
    *(unsigned char *)(a1 + 136) = 1;
LABEL_51:
    *(double *)(a1 + 416) = v4;
    *(unsigned char *)(a1 + 424) = 1;
    if (v129)
    {
      if (SHIBYTE(v126) < 0) {
        operator delete(v124);
      }
    }
  }
}

void sub_10038C86C(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2F0]) && SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (LOBYTE(STACK[0x328]) && SLOBYTE(STACK[0x30F]) < 0) {
    operator delete((void *)STACK[0x2F8]);
  }
  if (LOBYTE(STACK[0x3C0]))
  {
    if (SLOBYTE(STACK[0x3A7]) < 0) {
      operator delete((void *)STACK[0x390]);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10038C94C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v7 = a4;
  uint64_t v6 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, double *, uint64_t *, uint64_t))(*(void *)v4 + 48))(v4, &v7, &v6, a3);
}

void sub_10038C9AC(uint64_t a1, double a2)
{
  sub_10031FE98((char *)&v12, (long long *)(a1 + 248));
  uint64_t v4 = *(void *)a1;
  sub_10031FE98((char *)v9, &v12);
  LOBYTE(__p) = 0;
  char v8 = 0;
  v5[0] = 0;
  v5[184] = 0;
  sub_10038BDF4(a1 + 8, v4, (uint64_t)v9, (uint64_t)&__p, (uint64_t)v5, 0x13F800000, 1, a2);
  if (v8 && v7 < 0) {
    operator delete(__p);
  }
  if (v11 && v10 < 0) {
    operator delete(v9[0]);
  }
  if (v14)
  {
    if (v13 < 0) {
      operator delete((void *)v12);
    }
  }
}

void sub_10038CA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a43 && a39 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v43 - 112) && *(char *)(v43 - 137) < 0) {
    operator delete(*(void **)(v43 - 160));
  }
  if (*(unsigned char *)(v43 - 56))
  {
    if (*(char *)(v43 - 81) < 0) {
      operator delete(*(void **)(v43 - 104));
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10038CAE0(char *__dst, std::string *__str)
{
  if (__dst[48] == __str[2].__r_.__value_.__s.__data_[0])
  {
    if (__dst[48])
    {
      std::string::operator=((std::string *)__dst, __str);
      __int16 v4 = __str[1].__r_.__value_.__r.__words[2];
      __n128 result = *(__n128 *)&__str[1].__r_.__value_.__l.__data_;
      *(__n128 *)(__dst + 24) = result;
      *((_WORD *)__dst + 20) = v4;
    }
  }
  else if (__dst[48])
  {
    if (__dst[23] < 0) {
      operator delete(*(void **)__dst);
    }
    __dst[48] = 0;
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_100002DE4(__dst, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v6 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      *((void *)__dst + 2) = *((void *)&__str->__r_.__value_.__l + 2);
      *(_OWORD *)__dst = v6;
    }
    __n128 result = *(__n128 *)&__str[1].__r_.__value_.__l.__data_;
    *((_WORD *)__dst + 20) = __str[1].__r_.__value_.__r.__words[2];
    *(__n128 *)(__dst + 24) = result;
    __dst[48] = 1;
  }
  return result;
}

__n128 sub_10038CB94(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *((unsigned __int8 *)a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      __n128 result = *(__n128 *)((char *)a2 + 24);
      *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
      *(__n128 *)(a1 + 24) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __n128 result = *(__n128 *)((char *)a2 + 24);
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    *(__n128 *)(a1 + 24) = result;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return result;
}

uint64_t sub_10038CC54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10038CCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10038CD84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10038CE1C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_10038CEA0(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(*(unsigned char **)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(_WORD *)(v4 + 40) = *((_WORD *)a2 + 20);
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_10038CF10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10038CF18(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_1000267C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  float v20 = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_1002FE83C(v7, v9);
  }
  else {
    char v10 = 0;
  }
  char v11 = &v10[48 * v4];
  v17[0] = v10;
  v17[1] = v11;
  int v18 = v11;
  BOOL v19 = &v10[48 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_100002DE4(v11, *(void **)a2, *((void *)a2 + 1));
    char v11 = v18;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v11 = v12;
  }
  char v13 = &v10[48 * v4];
  long long v14 = *(long long *)((char *)a2 + 24);
  *((_WORD *)v13 + 20) = *((_WORD *)a2 + 20);
  *(_OWORD *)(v13 + 24) = v14;
  int v18 = v11 + 48;
  sub_10031F684(a1, v17);
  uint64_t v15 = a1[1];
  sub_10031F82C((uint64_t)v17);
  return v15;
}

void sub_10038D040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10031F82C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10038D054()
{
  v8[0] = xmmword_1004C4530;
  v8[1] = unk_1004C4540;
  sub_1001A003C((uint64_t)&unk_1008AB140, (int *)v8, 4);
  xmmword_1008AB158 = xmmword_1004B7660;
  unk_1008AB168 = xmmword_1004B7670;
  qword_1008AB180 = 0;
  unk_1008AB188 = 0;
  qword_1008AB178 = 0x3FD999999999999ALL;
  unk_1008AB190 = xmmword_1004B7680;
  dword_1008AB1A0 = 5;
  qword_1008AB1A8 = 0x4000000000000000;
  dword_1008AB1B0 = 5;
  byte_1008AB1B8 = 0;
  unk_1008AB1BC = 0x30000000ALL;
  xmmword_1008AB1C8 = xmmword_1004B7690;
  unk_1008AB1D8 = xmmword_1004B76A0;
  xmmword_1008AB1E8 = xmmword_1004B76B0;
  qword_1008AB1F8 = 0x3FE3333333333333;
  dword_1008AB200 = 3;
  xmmword_1008AB208 = xmmword_1004B76C0;
  unk_1008AB218 = xmmword_1004B76A0;
  xmmword_1008AB228 = xmmword_1004B7690;
  qword_1008AB238 = 0x3FE3333333333333;
  byte_1008AB240 = 0;
  xmmword_1008AB248 = xmmword_1004B76D0;
  unk_1008AB258 = xmmword_1004B76E0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v6 = _Q0;
  xmmword_1008AB268 = _Q0;
  qword_1008AB278 = 0xBFD3333333333333;
  xmmword_1008AB280 = xmmword_1004B76F0;
  qword_1008AB290 = 0x3E99999A40000000;
  xmmword_1008AB298 = xmmword_1004B7670;
  qword_1008AB2B0 = 0;
  unk_1008AB2B8 = 0;
  qword_1008AB2A8 = 0x3FD999999999999ALL;
  xmmword_1008AB2C0 = xmmword_1004B7680;
  dword_1008AB2D0 = 5;
  qword_1008AB2D8 = 0x4000000000000000;
  dword_1008AB2E0 = 4;
  qword_1008AB2E8 = 0x300000008;
  qword_1008AB2F0 = 0xC04E800000000000;
  unint64_t v7 = 0xC04E800000000000;
  sub_1001A02EC((uint64_t)&unk_1008AB2F8, (double *)&v7, 1);
  xmmword_1008AB310 = xmmword_1004B7700;
  qword_1008AB320 = 0x4024000000000000;
  dword_1008AB328 = 45;
  byte_1008AB330 = 0;
  byte_1008AB348 = 0;
  qword_1008AB350 = 0;
  byte_1008AB358 = 0;
  dword_1008AB35C = 1;
  byte_1008AB360 = 1;
  xmmword_1008AB368 = xmmword_1004B7710;
  unk_1008AB378 = xmmword_1004B7720;
  xmmword_1008AB388 = v6;
  qword_1008AB398 = 0xC059000000000000;
  xmmword_1008AB3A0 = xmmword_1004B7730;
  qword_1008AB3B0 = (uint64_t)vdup_n_s32(0x3DCCCCCDu);
  xmmword_1008AB3B8 = xmmword_1004B7670;
  qword_1008AB3C8 = 0x3FD999999999999ALL;
  qword_1008AB3D8 = 0;
  qword_1008AB3D0 = 0;
  xmmword_1008AB3E0 = xmmword_1004B7680;
  dword_1008AB3F0 = 5;
  qword_1008AB3F8 = 0x4000000000000000;
  dword_1008AB400 = 10;
  qword_1008AB408 = 0x4034000000000000;
  dword_1008AB410 = 3;
  xmmword_1008AB418 = xmmword_1004B7740;
  __cxa_atexit((void (*)(void *))sub_10019E4F8, &unk_1008AB140, (void *)&_mh_execute_header);
  __cxa_atexit((void (*)(void *))nullsub_72, &off_10089F5E8, (void *)&_mh_execute_header);
  return __cxa_atexit((void (*)(void *))nullsub_73, &off_10089F5F0, (void *)&_mh_execute_header);
}

void sub_10038D34C(_Unwind_Exception *a1)
{
  sub_10003E96C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

__n128 sub_10038D36C(uint64_t a1, __n128 *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 40) = *a2;
  return result;
}

double sub_10038D380(double *a1)
{
  double result = 0.0;
  if (*((unsigned char *)a1 + 32))
  {
    double v2 = *a1;
    uint64_t v3 = *((void *)a1 + 1);
    if (*(void *)a1 != v3)
    {
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        if (*(double *)(*(void *)&v2 + 8) >= a1[6])
        {
          ++v4;
          v5 += *(unsigned __int8 *)(*(void *)&v2 + 41);
        }
        *(void *)&v2 += 48;
      }
      while (*(void *)&v2 != v3);
      if (v4) {
        return (double)v5 / (double)v4;
      }
    }
  }
  return result;
}

void sub_10038D3DC(uint64_t a1, uint64_t a2, double a3)
{
  *(_OWORD *)long long __p = 0u;
  long long v7 = 0u;
  char v8 = 1;
  sub_10038D5B8(a1, (__n128 *)__p);
  if (v8 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (a1 != a2) {
    sub_10038D654((char *)a1, *(char **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(double *)(a1 + 24) = a3;
}

BOOL sub_10038D474(uint64_t a1, uint64_t *a2, double a3)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  if (vabdd_f64(*(double *)(a1 + 24), a3) <= 3.0)
  {
    double v7 = sub_10038D380((double *)a1);
    double v8 = *(double *)(a1 + 40);
    BOOL v5 = v7 >= v8;
    unint64_t v9 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a2 + 23) < 0) {
        a2 = (uint64_t *)*a2;
      }
      int v11 = 136315650;
      long long v12 = a2;
      __int16 v13 = 2048;
      double v14 = v7;
      __int16 v15 = 1024;
      BOOL v16 = v7 >= v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gri,%s,tracked_ratio,%.1lf,has_good_gnss_conditions,%d", (uint8_t *)&v11, 0x1Cu);
    }
  }
  else
  {
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    BOOL v5 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
  return v5;
}

double sub_10038D5B8(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == a2[2].n128_u8[0])
  {
    if (*(unsigned char *)(a1 + 32))
    {
      sub_100150500(a1, a2);
      double result = a2[1].n128_f64[1];
      *(double *)(a1 + 24) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    BOOL v5 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v5;
      operator delete(v5);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    double result = a2[1].n128_f64[1];
    *(double *)(a1 + 24) = result;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

char *sub_10038D654(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  double v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      sub_1000267C4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = sub_100320384(v7, v12);
    double v14 = (char *)v7[1];
    __int16 v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  __int16 v13 = (void **)(result + 8);
  __int16 v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4) {
    goto LABEL_16;
  }
  BOOL v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *__int16 v13 = &v9[v17];
  return result;
}

uint64_t sub_10038D790(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, long long *a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20 = sub_10038CC54(a1, a3) + 32;
  sub_100390C04(v20, a4);
  sub_10038CCEC(a1 + 64, a5);
  sub_100320734(a1 + 96, a10);
  sub_1003207CC(a1 + 128, a11);
  sub_100320864(a1 + 160, a12);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  sub_10031F8BC((uint64_t *)(a1 + 376), a6);
  memcpy((void *)(a1 + 400), (const void *)(a6 + 24), 0x18CuLL);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a6 + 424);
  sub_10025A138((uint64_t *)(a1 + 816), a6 + 440);
  long long v21 = *(_OWORD *)(a6 + 464);
  *(_OWORD *)(a1 + 852) = *(_OWORD *)(a6 + 476);
  *(_OWORD *)(a1 + 840) = v21;
  sub_10025A21C(a1 + 872, (long long *)(a6 + 496));
  long long v22 = *(_OWORD *)(a6 + 544);
  *(_OWORD *)(a1 + 904) = *(_OWORD *)(a6 + 528);
  *(_OWORD *)(a1 + 920) = v22;
  long long v23 = *(_OWORD *)(a6 + 560);
  long long v24 = *(_OWORD *)(a6 + 576);
  long long v25 = *(_OWORD *)(a6 + 608);
  *(_OWORD *)(a1 + 968) = *(_OWORD *)(a6 + 592);
  *(_OWORD *)(a1 + 984) = v25;
  *(_OWORD *)(a1 + 936) = v23;
  *(_OWORD *)(a1 + 952) = v24;
  long long v26 = *(_OWORD *)(a6 + 624);
  long long v27 = *(_OWORD *)(a6 + 640);
  long long v28 = *(_OWORD *)(a6 + 672);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a6 + 656);
  *(_OWORD *)(a1 + 1048) = v28;
  *(_OWORD *)(a1 + 1000) = v26;
  *(_OWORD *)(a1 + 1016) = v27;
  long long v29 = *(_OWORD *)(a6 + 688);
  long long v30 = *(_OWORD *)(a6 + 704);
  long long v31 = *(_OWORD *)(a6 + 720);
  *(void *)(a1 + 1112) = *(void *)(a6 + 736);
  *(_OWORD *)(a1 + 1080) = v30;
  *(_OWORD *)(a1 + 1096) = v31;
  *(_OWORD *)(a1 + 1064) = v29;
  *(unsigned char *)(a1 + 1120) = 0;
  *(unsigned char *)(a1 + 1128) = 0;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1160) = 0;
  *(void *)(a1 + 1144) = 0;
  *(float *)(a1 + 1168) = a9;
  long long v32 = *a8;
  long long v33 = a8[1];
  *(void *)(a1 + 1208) = *((void *)a8 + 4);
  *(_OWORD *)(a1 + 1176) = v32;
  *(_OWORD *)(a1 + 1192) = v33;
  *(unsigned char *)(a1 + 1216) = 0;
  *(unsigned char *)(a1 + 1240) = 0;
  *(unsigned char *)(a1 + 1248) = 0;
  *(unsigned char *)(a1 + 1272) = 0;
  *(unsigned char *)(a1 + 1280) = 0;
  *(unsigned char *)(a1 + 1312) = 0;
  sub_10038DAF8((void *)a1, a2);
  sub_100259E60((std::string *)(a1 + 1216), (const std::string *)a7);
  sub_100259E60((std::string *)(a1 + 1248), (const std::string *)(a7 + 32));
  return a1;
}

void sub_10038D9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  long long v23 = (void **)(v16 + 1144);
  if (*(unsigned char *)(v16 + 1312))
  {
    for (uint64_t i = 0; i != -32; i -= 16)
    {
      long long v25 = *(std::__shared_weak_count **)(v16 + 1304 + i);
      if (v25) {
        sub_10001A970(v25);
      }
    }
  }
  sub_1002BA2B4(v18);
  long long v26 = *v23;
  if (*v23)
  {
    *(void *)(v16 + 1152) = v26;
    operator delete(v26);
  }
  if (*(unsigned char *)(v16 + 1128)) {

  }
  sub_10019E4F8(a9);
  sub_100390F3C(v17);
  sub_100390F3C(v21);
  sub_100390EBC(a10);
  sub_100390CFC(a11);
  sub_100390C9C(v19, *v20);
  sub_10031FA1C(a12);
  sub_10031F998(a13);
  sub_10031F914(a14);
  sub_1003208FC(a15);
  sub_100320980(a16);
  sub_100320A04((void *)v16);
  _Unwind_Resume(a1);
}

void sub_10038DAF8(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Region vector is empty.");
  }
  unint64_t v4 = a1 + 24;
  int v38 = a1 + 25;
  do
  {
    int v5 = *(_DWORD *)(v2 + 28);
    int v43 = v5;
    long long v6 = v38;
    while (1)
    {
      long long v6 = (void *)*v6;
      if (!v6) {
        break;
      }
      int v7 = *((_DWORD *)v6 + 8);
      if (v5 >= v7)
      {
        if (v7 >= v5) {
          goto LABEL_12;
        }
        ++v6;
      }
    }
    uint64_t v8 = (std::__shared_weak_count *)operator new(0x30uLL);
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_100862D48;
    v8[1].__shared_owners_ = 0;
    v8[1].__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1].__shared_owners_;
    char v41 = v8 + 1;
    char v42 = v8;
    unint64_t v9 = (std::__shared_weak_count *)operator new(0x30uLL);
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)off_100862D48;
    v9[1].__shared_weak_owners_ = 0;
    v9[1].__shared_owners_ = 0;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)&v9[1].__shared_owners_;
    uint64_t v39 = v9 + 1;
    uint64_t v40 = v9;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    uint64_t v45 = &v43;
    *(void *)long long buf = &buf[8];
    char v44 = buf;
    sub_1003910DC((uint64_t)v4, &v43, (uint64_t)&unk_1004BC2F8, &v45, &v44);
    sub_1002D41D4((uint64_t)buf, *(void **)&buf[8]);
    unint64_t v10 = sub_10038E244((uint64_t)v4, &v43);
    uint64_t v45 = (int *)&v41;
    *(void *)long long buf = &unk_1004C4574;
    sub_100391228((uint64_t **)v10, (unsigned __int8 *)&unk_1004C4574, (uint64_t)&unk_1004BC2F8, (unsigned char **)buf, (void **)&v45);
    uint64_t v11 = sub_10038E244((uint64_t)v4, &v43);
    LOBYTE(v44) = 1;
    *(void *)long long buf = &v44;
    uint64_t v45 = (int *)&v39;
    sub_100391228((uint64_t **)v11, (unsigned __int8 *)&v44, (uint64_t)&unk_1004BC2F8, (unsigned char **)buf, (void **)&v45);
    if (v40) {
      sub_10001A970(v40);
    }
    if (v42) {
      sub_10001A970(v42);
    }
LABEL_12:
    unint64_t v12 = sub_10038E244((uint64_t)v4, &v43);
    __int16 v13 = sub_10038E29C((uint64_t)v12, (unsigned __int8 *)&unk_1004C4574);
    sub_100391308(*v13, v2, v2);
    if (!v14)
    {
      long long v32 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
        sub_100436B94(v2, v32);
      }
      sub_100390C9C((uint64_t)v4, (void *)a1[25]);
      a1[25] = 0;
      a1[26] = 0;
      a1[24] = v38;
      long long v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v33, "Region radii are not unique.");
    }
    if (*(unsigned char *)(v2 + 41))
    {
      __int16 v15 = sub_10038E244((uint64_t)v4, &v43);
      buf[0] = 1;
      uint64_t v16 = sub_10038E29C((uint64_t)v15, buf);
      sub_100391308(*v16, v2, v2);
      if (!v17)
      {
        int v34 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
          sub_100436B94(v2, v34);
        }
        sub_100390C9C((uint64_t)v4, (void *)a1[25]);
        a1[25] = 0;
        a1[26] = 0;
        a1[24] = v38;
        uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "Region radii are not unique.");
      }
    }
    uint64_t v18 = qword_1008ABDE0;
    BOOL v19 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG);
    if (v19)
    {
      uint64_t v20 = v2;
      if (*(char *)(v2 + 23) < 0) {
        uint64_t v20 = *(void *)v2;
      }
      double v21 = *(float *)(v2 + 24);
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v21;
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v43;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#regionmon #region-class adding region (%s: %.2f) to region category %d dictionary", buf, 0x1Cu);
    }
    v2 += 48;
  }
  while (v2 != v3);
  long long v22 = (void *)*v4;
  if ((void *)*v4 != v38)
  {
    do
    {
      long long v23 = (void *)v22[5];
      if (v23 != v22 + 6)
      {
        do
        {
          sub_10038E2F4(v19, (void *)v23[5]);
          long long v24 = qword_1008ABDE0;
          BOOL v19 = os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT);
          if (v19)
          {
            uint64_t v25 = *(void *)(v23[5] + 16);
            int v26 = *((_DWORD *)v22 + 8);
            *(_DWORD *)long long buf = 134218498;
            *(void *)&uint8_t buf[4] = v25;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v26;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "YES";
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#regionmon region-class %lu regions for region category %d valid: %s", buf, 0x1Cu);
          }
          long long v27 = (void *)v23[1];
          if (v27)
          {
            do
            {
              long long v28 = v27;
              long long v27 = (void *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              long long v28 = (void *)v23[2];
              BOOL v29 = *v28 == (void)v23;
              long long v23 = v28;
            }
            while (!v29);
          }
          long long v23 = v28;
        }
        while (v28 != v22 + 6);
      }
      long long v30 = (void *)v22[1];
      if (v30)
      {
        do
        {
          long long v31 = v30;
          long long v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          long long v31 = (void *)v22[2];
          BOOL v29 = *v31 == (void)v22;
          long long v22 = v31;
        }
        while (!v29);
      }
      long long v22 = v31;
    }
    while (v31 != v38);
  }
}

void sub_10038E044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_10038E0A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, long long *a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_10038D790(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void *sub_10038E0BC(uint64_t a1)
{
  uint64_t v2 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#regionmon ~RegionMonitor", v9, 2u);
  }
  sub_100390FCC((void *)a1);
  if (*(unsigned char *)(a1 + 1312))
  {
    for (uint64_t i = 0; i != -32; i -= 16)
    {
      unint64_t v4 = *(std::__shared_weak_count **)(a1 + 1304 + i);
      if (v4) {
        sub_10001A970(v4);
      }
    }
  }
  for (uint64_t j = 0; j != -64; j -= 32)
  {
    uint64_t v6 = a1 + j;
    if (*(unsigned char *)(a1 + j + 1272) && *(char *)(v6 + 1271) < 0) {
      operator delete(*(void **)(v6 + 1248));
    }
  }
  int v7 = *(void **)(a1 + 1144);
  if (v7)
  {
    *(void *)(a1 + 1152) = v7;
    operator delete(v7);
  }
  if (*(unsigned char *)(a1 + 1128)) {

  }
  if (*(unsigned char *)(a1 + 896) && *(char *)(a1 + 895) < 0) {
    operator delete(*(void **)(a1 + 872));
  }
  sub_10003E96C(a1 + 816, *(void **)(a1 + 824));
  sub_10003E96C(a1 + 376, *(void **)(a1 + 384));
  sub_100390F3C(a1 + 336);
  sub_100390F3C(a1 + 296);
  sub_100390EBC(a1 + 256);
  sub_100390CFC(a1 + 216);
  sub_100390C9C(a1 + 192, *(void **)(a1 + 200));
  sub_10031FA1C((void *)(a1 + 160));
  sub_10031F998((void *)(a1 + 128));
  sub_10031F914((void *)(a1 + 96));
  sub_1003208FC((void *)(a1 + 64));
  sub_100320980((void *)(a1 + 32));
  return sub_100320A04((void *)a1);
}

uint64_t *sub_10038E244(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_10015FDEC("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t *sub_10038E29C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_10015FDEC("map::at:  key not found");
  unsigned int v3 = *a2;
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *((unsigned __int8 *)v2 + 32);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return (uint64_t *)(v2 + 5);
    }
    uint64_t v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_10038E2F4(uint64_t a1, void *a2)
{
  if (a2[2] >= 2uLL)
  {
    uint64_t v2 = a2 + 1;
    unsigned int v3 = (void *)*a2;
    if ((void *)*a2 != a2 + 1)
    {
      do
      {
        unsigned int v4 = (void *)v3[1];
        int v5 = v4;
        uint64_t v6 = v3;
        if (v4)
        {
          do
          {
            int v7 = v5;
            int v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            int v7 = (void *)v6[2];
            BOOL v8 = *v7 == (void)v6;
            uint64_t v6 = v7;
          }
          while (!v8);
        }
        if (v7 != v2)
        {
          int v9 = *((_DWORD *)v3 + 15);
          while (v9 == *((_DWORD *)v7 + 15))
          {
            uint64_t v10 = *((unsigned __int8 *)v3 + 55);
            if ((v10 & 0x80u) == 0) {
              uint64_t v11 = *((unsigned __int8 *)v3 + 55);
            }
            else {
              uint64_t v11 = v3[5];
            }
            uint64_t v12 = *((unsigned __int8 *)v7 + 55);
            int v13 = (char)v12;
            if ((v12 & 0x80u) != 0) {
              uint64_t v12 = v7[5];
            }
            if (v11 == v12)
            {
              if (v13 >= 0) {
                char v14 = (unsigned __int8 *)(v7 + 4);
              }
              else {
                char v14 = (unsigned __int8 *)v7[4];
              }
              if ((v10 & 0x80) != 0)
              {
                if (!memcmp((const void *)v3[4], v14, v3[5]))
                {
LABEL_43:
                  long long v23 = qword_1008ABDE0;
                  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
                    sub_100436C14((char *)v3 + 55, v3 + 4, v23);
                  }
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Region names are not unique.");
                  goto LABEL_46;
                }
              }
              else
              {
                if (!*((unsigned char *)v3 + 55)) {
                  goto LABEL_43;
                }
                __int16 v15 = (unsigned __int8 *)(v3 + 4);
                while (*v15 == *v14)
                {
                  ++v15;
                  ++v14;
                  if (!--v10) {
                    goto LABEL_43;
                  }
                }
              }
            }
            float v16 = *((float *)v7 + 14);
            float v17 = *((float *)v3 + 14);
            if (v16 <= v17) {
              sub_100436C9C();
            }
            float v18 = v16 - v17;
            if (v18 < 0.1)
            {
              float v26 = v18;
              uint64_t v25 = qword_1008ABDE0;
              if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
                sub_100436CC8(v25, v26);
              }
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Regions are too close together.");
              goto LABEL_46;
            }
            BOOL v19 = (void *)v7[1];
            if (v19)
            {
              do
              {
                uint64_t v20 = v19;
                BOOL v19 = (void *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                uint64_t v20 = (void *)v7[2];
                BOOL v8 = *v20 == (void)v7;
                int v7 = v20;
              }
              while (!v8);
            }
            int v7 = v20;
            if (v20 == v2) {
              goto LABEL_35;
            }
          }
          if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT)) {
            sub_100436D60();
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Region categories in set doesn't match");
LABEL_46:
        }
LABEL_35:
        if (v4)
        {
          do
          {
            double v21 = v4;
            unsigned int v4 = (void *)*v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            double v21 = (void *)v3[2];
            BOOL v8 = *v21 == (void)v3;
            unsigned int v3 = v21;
          }
          while (!v8);
        }
        unsigned int v3 = v21;
      }
      while (v21 != v2);
    }
  }
  return 1;
}

void sub_10038E5A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10038E5C4(std::string::size_type a1, std::string::size_type a2, int a3, int a4, int a5, double a6)
{
  std::string::size_type v54 = a2;
  int v52 = a4;
  int v53 = a3;
  int v51 = 0;
  switch(a3)
  {
    case 1:
      int v9 = a5;
      int v51 = a5;
      goto LABEL_8;
    case 2:
    case 5:
      BOOL v8 = qword_1008ABDE0;
      int v9 = 0;
      if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_8;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#regionmon Setting typePredictor as None since WifiToF/ObjectTracking based ranging does not use user intent score.", (uint8_t *)&buf, 2u);
LABEL_4:
      int v9 = 0;
LABEL_8:
      sub_10039146C((void *)(a1 + 216), &v54);
      long long v49 = 0;
      int v50 = 0;
      uint64_t v10 = *(uint64_t **)(a1 + 200);
      if (!v10) {
        goto LABEL_13;
      }
      break;
    case 3:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100436EA0();
      }
      return 0;
    case 4:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100436ED4();
      }
      return 0;
    default:
      goto LABEL_4;
  }
  do
  {
    int v11 = *((_DWORD *)v10 + 8);
    if (v52 >= v11)
    {
      if (v11 >= v52)
      {
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEBUG)) {
          sub_100436E20();
        }
        char v14 = sub_10038E244(a1 + 192, &v52);
        __int16 v15 = sub_10038E29C((uint64_t)v14, (unsigned __int8 *)&unk_1004C4574);
        float v17 = (void *)*v15;
        float v16 = (std::__shared_weak_count *)v15[1];
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v49 = v17;
        int v50 = v16;
        uint64_t v46 = 0;
        __int16 v47 = 0;
        unint64_t v48 = 0;
        uint64_t v20 = (void *)*v17;
        float v18 = v17 + 1;
        BOOL v19 = v20;
        if (v20 != v18)
        {
          double v21 = 0;
          do
          {
            long long v22 = (long long *)(v19 + 4);
            if ((unint64_t)v21 >= v48)
            {
              double v21 = (long long *)sub_10038CF18((uint64_t *)&v46, v22);
            }
            else
            {
              sub_10038CEA0((uint64_t)&v46, v22);
              v21 += 3;
            }
            __int16 v47 = v21;
            long long v23 = (void *)v19[1];
            if (v23)
            {
              do
              {
                long long v24 = v23;
                long long v23 = (void *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                long long v24 = (void *)v19[2];
                BOOL v25 = *v24 == (void)v19;
                BOOL v19 = v24;
              }
              while (!v25);
            }
            BOOL v19 = v24;
          }
          while (v24 != v18);
          int v9 = v51;
        }
        std::string::size_type v45 = 0;
        if ((v9 & 0xFFFFFFFD) == 1 && (!*(unsigned char *)(a1 + 1312) || !*(void *)(a1 + 1280)))
        {
          memset(&buf, 0, sizeof(buf));
          uint64_t v58 = 0x3FE8000000000000;
          long long v57 = *(_OWORD *)(a1 + 1184);
          if (!*(unsigned char *)(a1 + 1240)) {
            __assert_rtn("initStateForDevice", "NRBYRegionMonitor.mm", 255, "_pathToModelWeights[kIdxUwbSpatialGesturePredictor].has_value()");
          }
          std::string::operator=(&buf, (const std::string *)(a1 + 1216));
          if (*(unsigned char *)(a1 + 1312))
          {
            LODWORD(v55) = 0;
            sub_100391514(&v42);
            if (!*(unsigned char *)(a1 + 1312)) {
              sub_10000AE44();
            }
            long long v26 = v42;
            long long v42 = 0uLL;
            long long v27 = *(std::__shared_weak_count **)(a1 + 1288);
            *(_OWORD *)(a1 + 1280) = v26;
            if (v27)
            {
              sub_10001A970(v27);
              if (*((void *)&v42 + 1)) {
                sub_10001A970(*((std::__shared_weak_count **)&v42 + 1));
              }
            }
          }
          else
          {
            LODWORD(v55) = 0;
            sub_100391514(&v42);
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            sub_10038ED10(a1 + 1280, (uint64_t)&v42);
            for (uint64_t i = 24; i != -8; i -= 16)
            {
              BOOL v29 = *(std::__shared_weak_count **)((char *)&v42 + i);
              if (v29) {
                sub_10001A970(v29);
              }
            }
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        switch(v9)
        {
          case 0:
            std::string::size_type v30 = *(void *)(a1 + 1200);
            std::string::size_type v45 = v30;
            long long v31 = qword_1008ABDE0;
            if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_60;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v30;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
            long long v32 = "#regionmon No intent classifier threshold set to %f for dev 0x%llx";
            break;
          case 1:
            std::string::size_type v35 = *(void *)(a1 + 1184);
            std::string::size_type v45 = v35;
            long long v31 = qword_1008ABDE0;
            if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_60;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v35;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
            long long v32 = "#regionmon Single antenna spatial gesture threshold set to %f for dev 0x%llx";
            break;
          case 2:
            std::string::size_type v33 = *(void *)(a1 + 1176);
            std::string::size_type v45 = v33;
            long long v31 = qword_1008ABDE0;
            if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_60;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v33;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
            long long v32 = "#regionmon AoA intent threshold set to %f for dev 0x%llx";
            break;
          case 3:
            std::string::size_type v34 = *(void *)(a1 + 1192);
            std::string::size_type v45 = v34;
            long long v31 = qword_1008ABDE0;
            if (!os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_60;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v34;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
            long long v32 = "#regionmon Dual antenna spatial gesture threshold set to %f for dev 0x%llx";
            break;
          case 4:
            __assert_rtn("initStateForDevice", "NRBYRegionMonitor.mm", 287, "0");
          default:
            goto LABEL_60;
        }
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v32, (uint8_t *)&buf, 0x16u);
LABEL_60:
        uint64_t v55 = &v54;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
        buf.__r_.__value_.__l.__size_ = a1;
        buf.__r_.__value_.__r.__words[2] = a1 + 64;
        *(void *)&long long v57 = &v49;
        *((void *)&v57 + 1) = a1 + 376;
        uint64_t v58 = (uint64_t)&v53;
        int v59 = &v51;
        int v60 = &v45;
        uint64_t v61 = &v52;
        std::string::size_type v62 = a1 + 1280;
        sub_100391670(a1 + 216, (uint64_t *)&v54, (uint64_t)&unk_1004BC2F8, &v55, &buf);
        int v37 = v36;
        if (v36)
        {
          uint64_t v38 = v54;
          int v39 = v52;
          memset(v40, 0, sizeof(v40));
          sub_1003202FC((char *)v40, v46, v47, 0xAAAAAAAAAAAAAAABLL * (v47 - v46));
          char v41 = 1;
          sub_10038ED9C(a1 + 32, 1, v38, v39, (uint64_t)v40, v51, a6);
          if (v41)
          {
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
            sub_10031F5E0((void ***)&buf);
          }
        }
        BOOL v12 = v37 != 0;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
        sub_10031F5E0((void ***)&buf);
        if (v50) {
          sub_10001A970(v50);
        }
        return v12;
      }
      ++v10;
    }
    uint64_t v10 = (uint64_t *)*v10;
  }
  while (v10);
LABEL_13:
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
    sub_100436DA0();
  }
  return 0;
}

void sub_10038EC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v36 = 24;
  while (1)
  {
    int v37 = *(std::__shared_weak_count **)(v34 + v36);
    if (v37) {
      sub_10001A970(v37);
    }
    v36 -= 16;
    if (v36 == -8)
    {
      if (a34 < 0) {
        operator delete(__p);
      }
      a13 = &a19;
      sub_10031F5E0((void ***)&a13);
      if (a23) {
        sub_10001A970(a23);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_10038ED10(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    for (uint64_t i = 0; i != 32; i += 16)
    {
      int v5 = (void *)(a2 + i);
      long long v6 = *(_OWORD *)(a2 + i);
      *int v5 = 0;
      v5[1] = 0;
      int v7 = *(std::__shared_weak_count **)(a1 + i + 8);
      *(_OWORD *)(a1 + i) = v6;
      if (v7) {
        sub_10001A970(v7);
      }
    }
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t sub_10038ED9C(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, int a6, double a7)
{
  char v13 = a2;
  uint64_t v12 = a3;
  double v11 = a7;
  int v9 = a6;
  int v10 = a4;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    sub_100027894();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t *, double *, int *, uint64_t, int *))(*(void *)v7 + 48))(v7, &v13, &v12, &v11, &v10, a5, &v9);
}

uint64_t sub_10038EE14(uint64_t a1, std::string::size_type a2, std::string::size_type a3, void *a4, int a5, char a6, int a7, double a8)
{
  std::string::size_type v105 = a2;
  std::string::size_type v104 = a3;
  char v103 = a6;
  int v102 = a7;
  uint64_t v12 = (void *)(a1 + 256);
  if (sub_1003217DC((void *)(a1 + 256), &v105))
  {
    char v13 = sub_100056B3C(v12, &v105);
    if (!v13) {
      sub_10015FDEC("unordered_map::at: key not found");
    }
    sub_10039146C(v13 + 3, &v104);
  }
  char v14 = sub_10038E244(a1 + 192, &v102);
  __int16 v15 = sub_10038E29C((uint64_t)v14, (unsigned __int8 *)&v103);
  float v16 = (std::__shared_weak_count *)v15[1];
  uint64_t v100 = (void *)*v15;
  char v101 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10031F8BC(v79, a1 + 376);
  memcpy(v80, (const void *)(a1 + 400), sizeof(v80));
  long long v81 = *(_OWORD *)(a1 + 800);
  sub_10025A138((uint64_t *)v82, a1 + 816);
  *(_OWORD *)((char *)v83 + 12) = *(_OWORD *)(a1 + 852);
  v83[0] = *(_OWORD *)(a1 + 840);
  sub_10025A21C((uint64_t)&v84, (long long *)(a1 + 872));
  uint64_t v99 = *(void *)(a1 + 1112);
  long long v17 = *(_OWORD *)(a1 + 984);
  long long v90 = *(_OWORD *)(a1 + 968);
  long long v91 = v17;
  long long v18 = *(_OWORD *)(a1 + 952);
  long long v88 = *(_OWORD *)(a1 + 936);
  long long v89 = v18;
  long long v19 = *(_OWORD *)(a1 + 1048);
  long long v94 = *(_OWORD *)(a1 + 1032);
  long long v95 = v19;
  long long v20 = *(_OWORD *)(a1 + 1016);
  long long v92 = *(_OWORD *)(a1 + 1000);
  long long v93 = v20;
  long long v21 = *(_OWORD *)(a1 + 1096);
  long long v22 = *(_OWORD *)(a1 + 1064);
  long long v97 = *(_OWORD *)(a1 + 1080);
  long long v98 = v21;
  long long v96 = v22;
  long long v23 = *(_OWORD *)(a1 + 920);
  long long v86 = *(_OWORD *)(a1 + 904);
  long long v87 = v23;
  uint64_t v24 = *a4;
  long long v81 = *(_OWORD *)(*a4 + 32);
  if (&v81 != (long long *)(v24 + 32)) {
    sub_100259BFC(v82, *(void **)(v24 + 48), (void *)(v24 + 56));
  }
  long long v25 = *(_OWORD *)(v24 + 72);
  *(_OWORD *)((char *)v83 + 12) = *(_OWORD *)(v24 + 84);
  v83[0] = v25;
  sub_100259E60(&v84, (const std::string *)(v24 + 104));
  long long v26 = *(_OWORD *)(v24 + 152);
  long long v86 = *(_OWORD *)(v24 + 136);
  long long v87 = v26;
  long long v27 = *(_OWORD *)(v24 + 168);
  long long v28 = *(_OWORD *)(v24 + 184);
  long long v29 = *(_OWORD *)(v24 + 216);
  long long v90 = *(_OWORD *)(v24 + 200);
  long long v91 = v29;
  long long v88 = v27;
  long long v89 = v28;
  long long v30 = *(_OWORD *)(v24 + 232);
  long long v31 = *(_OWORD *)(v24 + 248);
  long long v32 = *(_OWORD *)(v24 + 280);
  long long v94 = *(_OWORD *)(v24 + 264);
  long long v95 = v32;
  long long v92 = v30;
  long long v93 = v31;
  long long v33 = *(_OWORD *)(v24 + 296);
  long long v34 = *(_OWORD *)(v24 + 312);
  long long v35 = *(_OWORD *)(v24 + 328);
  uint64_t v99 = *(void *)(v24 + 344);
  long long v97 = v34;
  long long v98 = v35;
  long long v96 = v33;
  BYTE8(v86) = *(unsigned char *)(a1 + 912);
  HIDWORD(v86) = *(_DWORD *)(a1 + 916);
  uint64_t v72 = a1;
  LOBYTE(v87) = *(unsigned char *)(a1 + 920);
  memset(&v78, 0, sizeof(v78));
  uint64_t v36 = (void *)*a4;
  if ((void *)*a4 != a4 + 1)
  {
    do
    {
      *(_OWORD *)&__val.__r_.__value_.__l.__data_ = *((_OWORD *)v36 + 2);
      sub_10025A138((uint64_t *)&__val.__r_.__value_.__r.__words[2], (uint64_t)(v36 + 6));
      *(_OWORD *)&v114[16] = *(_OWORD *)(v36 + 9);
      *(_OWORD *)&v114[28] = *(_OWORD *)((char *)v36 + 84);
      sub_10025A21C((uint64_t)v115, (long long *)(v36 + 13));
      long long v37 = *(_OWORD *)(v36 + 31);
      long long v124 = *(_OWORD *)(v36 + 29);
      long long v125 = v37;
      long long v38 = *(_OWORD *)(v36 + 23);
      long long v120 = *(_OWORD *)(v36 + 21);
      long long v121 = v38;
      long long v39 = *(_OWORD *)(v36 + 27);
      long long v122 = *(_OWORD *)(v36 + 25);
      long long v123 = v39;
      long long v40 = *(_OWORD *)(v36 + 19);
      long long v118 = *(_OWORD *)(v36 + 17);
      long long v119 = v40;
      long long v41 = *(_OWORD *)(v36 + 39);
      long long v128 = *(_OWORD *)(v36 + 37);
      long long v129 = v41;
      long long v130 = *(_OWORD *)(v36 + 41);
      uint64_t v131 = v36[43];
      long long v42 = *(_OWORD *)(v36 + 35);
      long long v126 = *(_OWORD *)(v36 + 33);
      long long v127 = v42;
      sub_100343FC8(v82, (double *)&__val.__r_.__value_.__l.__size_, (uint64_t *)&__val.__r_.__value_.__l.__size_);
      std::to_string(&v107, *(double *)&__val.__r_.__value_.__l.__size_);
      uint64_t v43 = std::string::append(&v107, " ");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      int64_t v110 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (v110 >= 0) {
        std::string::size_type v45 = __p;
      }
      else {
        std::string::size_type v45 = (void **)__p[0];
      }
      if (v110 >= 0) {
        std::string::size_type v46 = HIBYTE(v110);
      }
      else {
        std::string::size_type v46 = (std::string::size_type)__p[1];
      }
      std::string::append(&v78, (const std::string::value_type *)v45, v46);
      if (SHIBYTE(v110) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      if (v117 && v116 < 0) {
        operator delete(v115[0]);
      }
      sub_10003E96C((uint64_t)&__val.__r_.__value_.__r.__words[2], *(void **)v114);
      __int16 v47 = (void *)v36[1];
      if (v47)
      {
        do
        {
          unint64_t v48 = v47;
          __int16 v47 = (void *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          unint64_t v48 = (void *)v36[2];
          BOOL v49 = *v48 == (void)v36;
          uint64_t v36 = v48;
        }
        while (!v49);
      }
      uint64_t v36 = v48;
    }
    while (v48 != a4 + 1);
  }
  int v50 = qword_1008ABDE0;
  if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
  {
    int v52 = *(_DWORD *)(*a4 + 32);
    int v51 = *(_DWORD *)(*a4 + 36);
    int v53 = &v78;
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v53 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    LODWORD(__val.__r_.__value_.__l.__data_) = 134219010;
    *(std::string::size_type *)((char *)__val.__r_.__value_.__r.__words + 4) = v105;
    WORD2(__val.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&__val.__r_.__value_.__r.__words[1] + 6) = v104;
    HIWORD(__val.__r_.__value_.__r.__words[2]) = 1024;
    *(_DWORD *)char v114 = v52;
    *(_WORD *)&v114[4] = 1024;
    *(_DWORD *)&v114[6] = v51;
    *(_WORD *)&v114[10] = 2080;
    *(void *)&v114[12] = v53;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#regionmon setting threshold detector parameters for device-part:0x%llx-0x%llx -- sample size: %d, filter type: %d, rssi thresholds: %s", (uint8_t *)&__val, 0x2Cu);
  }
  std::string::size_type v54 = sub_1003217DC(v12, &v105);
  if (!v54)
  {
    int v112 = 1065353216;
    *(_OWORD *)&__val.__r_.__value_.__l.__data_ = v105;
    uint64_t v111 = 0;
    int64_t v110 = 0;
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&v114[8] = 0;
    __val.__r_.__value_.__r.__words[2] = 0;
    *(void *)char v114 = 0;
    *(_DWORD *)&v114[16] = 1065353216;
    sub_100391BF0((uint64_t)v12, (unint64_t *)&__val, &__val);
    sub_100390CFC((uint64_t)&__val.__r_.__value_.__l.__size_);
    sub_100390CFC((uint64_t)__p);
  }
  uint64_t v77 = *(void *)(v72 + 1200);
  sub_10038F994(v72, v103, __p);
  switch(a5)
  {
    case 1:
    case 2:
    case 4:
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_ERROR)) {
        sub_100436F08();
      }
      goto LABEL_48;
    case 3:
      long long v57 = sub_100056B3C(v12, &v105);
      if (!v57) {
        sub_10015FDEC("unordered_map::at: key not found");
      }
      LODWORD(v106) = 3;
      int v76 = 0;
      v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      __val.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
      __val.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
      __val.__r_.__value_.__r.__words[2] = v72 + 64;
      *(void *)char v114 = &v100;
      *(void *)&v114[8] = v79;
      *(void *)&v114[16] = &v106;
      *(void *)&v114[24] = &v76;
      *(void *)&v114[32] = &v77;
      *(void *)&v114[40] = &v102;
      v115[0] = &unk_1004C4575;
      sub_100391EAC((uint64_t)(v57 + 3), (uint64_t *)&v104, (uint64_t)&unk_1004BC2F8, &v107, &__val);
      goto LABEL_47;
    case 5:
      if (!*(unsigned char *)(v72 + 1312) || !*(void *)(v72 + 1296))
      {
        memset(&__val, 0, sizeof(__val));
        *(int64x2_t *)char v114 = vdupq_n_s64(0x3FEB333333333333uLL);
        *(void *)&v114[16] = *(void *)(v72 + 1208);
        if (!*(unsigned char *)(v72 + 1272)) {
          __assert_rtn("initStateForBluetoothDevice", "NRBYRegionMonitor.mm", 360, "_pathToModelWeights[kIdxMotionBasedSpatialGesturePredictor].has_value()");
        }
        std::string::operator=(&__val, (const std::string *)(v72 + 1248));
        uint64_t v77 = *(void *)(v72 + 1208);
        if (*(unsigned char *)(v72 + 1312))
        {
          LODWORD(v106) = 1;
          sub_100391514(&v107);
          if (!*(unsigned char *)(v72 + 1312)) {
            sub_10000AE44();
          }
          long long v55 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = 0uLL;
          uint64_t v56 = *(std::__shared_weak_count **)(v72 + 1304);
          *(_OWORD *)(v72 + 1296) = v55;
          if (v56)
          {
            sub_10001A970(v56);
            if (v107.__r_.__value_.__l.__size_) {
              sub_10001A970((std::__shared_weak_count *)v107.__r_.__value_.__l.__size_);
            }
          }
        }
        else
        {
          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = 0uLL;
          LODWORD(v106) = 1;
          sub_100391514(&v107.__r_.__value_.__r.__words[2]);
          sub_10038ED10(v72 + 1280, (uint64_t)&v107);
          for (uint64_t i = 24; i != -8; i -= 16)
          {
            uint64_t v61 = *(std::__shared_weak_count **)((char *)&v107.__r_.__value_.__l.__data_ + i);
            if (v61) {
              sub_10001A970(v61);
            }
          }
        }
        if (SHIBYTE(__val.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__val.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v108 = 0;
      std::string::size_type v62 = sub_100056B3C(v12, &v105);
      if (!v62) {
        sub_10015FDEC("unordered_map::at: key not found");
      }
      int v75 = 4;
      int v76 = 3;
      char v106 = &v104;
      __val.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
      __val.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
      __val.__r_.__value_.__r.__words[2] = v72 + 64;
      *(void *)char v114 = &v100;
      *(void *)&v114[8] = v79;
      *(void *)&v114[16] = &v76;
      *(void *)&v114[24] = &v75;
      *(void *)&v114[32] = &v77;
      *(void *)&v114[40] = &v102;
      v115[0] = (void *)(v72 + 1280);
      v115[1] = &v107;
      sub_100392348((uint64_t)(v62 + 3), (uint64_t *)&v104, (uint64_t)&unk_1004BC2F8, &v106, (uint64_t)&__val);
      sub_10038CE1C(&v107);
      if (!v54) {
        goto LABEL_65;
      }
      goto LABEL_48;
    default:
LABEL_47:
      if (v54)
      {
LABEL_48:
        uint64_t v58 = 0;
      }
      else
      {
LABEL_65:
        memset(&__val, 0, sizeof(__val));
        char v63 = v100 + 1;
        char v64 = (void *)*v100;
        if ((void *)*v100 == v100 + 1)
        {
          char v65 = 0;
          __int16 v69 = 0;
        }
        else
        {
          char v65 = 0;
          do
          {
            char v66 = (long long *)(v64 + 4);
            if ((unint64_t)v65 >= __val.__r_.__value_.__r.__words[2])
            {
              char v65 = (long long *)sub_10038CF18((uint64_t *)&__val, v66);
            }
            else
            {
              sub_10038CEA0((uint64_t)&__val, v66);
              v65 += 3;
            }
            __val.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
            uint64_t v67 = (void *)v64[1];
            if (v67)
            {
              do
              {
                uint64_t v68 = v67;
                uint64_t v67 = (void *)*v67;
              }
              while (v67);
            }
            else
            {
              do
              {
                uint64_t v68 = (void *)v64[2];
                BOOL v49 = *v68 == (void)v64;
                char v64 = v68;
              }
              while (!v49);
            }
            char v64 = v68;
          }
          while (v68 != v63);
          __int16 v69 = (long long *)__val.__r_.__value_.__r.__words[0];
        }
        uint64_t v70 = v105;
        int v71 = v102;
        memset(v73, 0, sizeof(v73));
        sub_1003202FC((char *)v73, v69, v65, 0xAAAAAAAAAAAAAAABLL * (v65 - v69));
        char v74 = 1;
        sub_10038ED9C(v72 + 32, 1, v70, v71, (uint64_t)v73, 0, a8);
        if (v74)
        {
          v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
          sub_10031F5E0((void ***)&v107);
        }
        v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&__val;
        sub_10031F5E0((void ***)&v107);
        uint64_t v58 = 1;
      }
      sub_100320A04(__p);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if (v85 && SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      sub_10003E96C((uint64_t)v82, v82[1]);
      sub_10003E96C((uint64_t)v79, (void *)v79[1]);
      if (v101) {
        sub_10001A970(v101);
      }
      return v58;
  }
}

void sub_10038F7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, ...)
{
  va_start(va, a17);
  uint64_t v19 = 24;
  while (1)
  {
    long long v20 = *(std::__shared_weak_count **)(v17 + v19);
    if (v20) {
      sub_10001A970(v20);
    }
    v19 -= 16;
    if (v19 == -8)
    {
      if (SLOBYTE(STACK[0x3E7]) < 0) {
        operator delete((void *)STACK[0x3D0]);
      }
      sub_100320A04(&STACK[0x3A0]);
      if (a17 < 0) {
        operator delete(a12);
      }
      sub_10019E4F8((uint64_t)va);
      if (STACK[0x358]) {
        sub_10001A970((std::__shared_weak_count *)STACK[0x358]);
      }
      _Unwind_Resume(a1);
    }
  }
}

void *sub_10038F994@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    unsigned int v4 = v7;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    int v5 = sub_100390B00;
  }
  else
  {
    unsigned int v4 = v8;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    int v5 = sub_1003909B4;
  }
  v4[2] = v5;
  v4[3] = &unk_100862D18;
  v4[4] = a1;
  a3[3] = 0;
  *a3 = off_100862DE8;
  double result = objc_retainBlock(v4);
  a3[1] = result;
  a3[3] = a3;
  return result;
}

void sub_10038FA78(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v13 = a2;
  uint64_t v7 = (void *)(a1 + 216);
  if (sub_1003217DC((void *)(a1 + 216), (unint64_t *)&v13))
  {
    BOOL v8 = sub_100056B3C(v7, (unint64_t *)&v13);
    if (!v8) {
      goto LABEL_11;
    }
    sub_10038C10C((uint64_t)(v8 + 3), a4);
  }
  if (!sub_1003217DC((void *)(a1 + 256), (unint64_t *)&v13)) {
    goto LABEL_8;
  }
  int v9 = sub_100056B3C((void *)(a1 + 256), (unint64_t *)&v13);
  if (!v9) {
LABEL_11:
  }
    sub_10015FDEC("unordered_map::at: key not found");
  for (uint64_t i = (void *)v9[5]; i; uint64_t i = (void *)*i)
    sub_10038C10C((uint64_t)(i + 3), a4);
LABEL_8:
  sub_10039146C(v7, (unint64_t *)&v13);
  sub_100392838((void *)(a1 + 256), (unint64_t *)&v13);
  v11[0] = 0;
  char v12 = 0;
  sub_10038ED9C(a1 + 32, 0, v13, a3, (uint64_t)v11, 0, a4);
  if (v12)
  {
    char v14 = (void **)v11;
    sub_10031F5E0(&v14);
  }
}

void sub_10038FB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t *a14)
{
  if (a12)
  {
    a14 = &a9;
    sub_10031F5E0((void ***)&a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10038FBBC(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v6 = *(uint64_t **)(a1 + 200);
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v9 = a1 + 192;
  int v10 = *(_DWORD *)(a2 + 120);
  while (1)
  {
    int v11 = *((_DWORD *)v6 + 8);
    if (v10 >= v11) {
      break;
    }
LABEL_6:
    long long v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (v11 < v10)
  {
    ++v6;
    goto LABEL_6;
  }
  uint64_t v17 = sub_10038E244(a1 + 192, (int *)(a2 + 120))[1];
  if (!v17) {
    goto LABEL_7;
  }
  while (*(unsigned char *)(v17 + 32))
  {
    uint64_t v17 = *(void *)v17;
    if (!v17) {
      goto LABEL_7;
    }
  }
  long long v18 = sub_10038E244(v9, (int *)(a2 + 120));
  if (!*(void *)(*sub_10038E29C((uint64_t)v18, (unsigned __int8 *)&unk_1004C4574) + 16)) {
    goto LABEL_7;
  }
  std::string::size_type v23 = *(void *)a2;
  if (!sub_1003217DC((void *)(a1 + 216), &v23))
  {
    if (sub_10038E5C4(a1, v23, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 120), *(_DWORD *)(a2 + 124), *(double *)(a2 + 8))) {
      goto LABEL_21;
    }
    goto LABEL_7;
  }
  uint64_t v19 = sub_100056B3C((void *)(a1 + 216), &v23);
  if (!v19) {
    goto LABEL_24;
  }
  if (!sub_10038C0F8((uint64_t)(v19 + 3), a2))
  {
    long long v20 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)std::string buf = 134218240;
      std::string::size_type v25 = v23;
      __int16 v26 = 1024;
      int v27 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#regionmon updating technology for device monitor: %llu, new tech: %d", buf, 0x12u);
    }
    sub_10038FA78(a1, v23, 0, *(double *)(a2 + 8));
    if (!sub_10038E5C4(a1, v23, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 120), *(_DWORD *)(a2 + 124), *(double *)(a2 + 8)))
    {
LABEL_7:
      long long v12 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a4 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a4 + 144) = v12;
      *(_OWORD *)(a4 + 160) = *(_OWORD *)(a2 + 160);
      *(void *)(a4 + 176) = *(void *)(a2 + 176);
      long long v13 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a4 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a4 + 80) = v13;
      long long v14 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a4 + 112) = v14;
      long long v15 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a2;
      *(_OWORD *)(a4 + 16) = v15;
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a4 + 48) = v16;
      *(unsigned char *)(a4 + 184) = 1;
      return;
    }
  }
LABEL_21:
  if (!sub_100056B3C((void *)(a1 + 216), &v23)) {
    goto LABEL_7;
  }
  long long v22 = sub_100056B3C((void *)(a1 + 216), &v23);
  if (!v22) {
LABEL_24:
  }
    sub_10015FDEC("unordered_map::at: key not found");
  sub_10038B378((uint64_t)(v22 + 3), (long long *)a2, a3, a4);
}

void sub_10038FE20(void *a1, double *a2, char a3)
{
  for (uint64_t i = (void *)a1[29]; i; uint64_t i = (void *)*i)
  {
    if (sub_10038BE70((uint64_t)(i + 3))) {
      sub_10038BEB8((uint64_t)(i + 3), a2);
    }
  }
  for (uint64_t j = (void *)a1[34]; j; uint64_t j = (void *)*j)
  {
    BOOL v8 = (void *)a1[143];
    uint64_t v9 = (void *)a1[144];
    if (v8 != v9)
    {
      while (*v8 != j[2])
      {
        if (++v8 == v9)
        {
          BOOL v8 = (void *)a1[144];
          break;
        }
      }
    }
    if ((a3 & 1) != 0 || v8 != v9)
    {
      for (unint64_t k = (void *)j[5]; k; unint64_t k = (void *)*k)
      {
        if (sub_10038BE70((uint64_t)(k + 3))) {
          sub_10038BEB8((uint64_t)(k + 3), a2);
        }
      }
    }
  }
}

void sub_10038FEFC(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, int a6, int a7)
{
  if (a4 - *(double *)a2 <= 60.0)
  {
    if (sub_1003903F8(a1, *(void *)(a2 + 72), *(void *)(a2 + 80)))
    {
      sub_100321BB0(v37, a3);
      if (!v37[2])
      {
        long long v15 = qword_1008ABDE0;
        if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_FAULT))
        {
          long long v31 = (void *)(a2 + 24);
          uint64_t v32 = *(void *)(a2 + 72);
          uint64_t v33 = *(void *)(a2 + 80);
          if (*(char *)(a2 + 47) < 0) {
            long long v31 = *(void **)(a2 + 24);
          }
          *(_DWORD *)std::string buf = 134218498;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v33;
          __int16 v39 = 2080;
          long long v40 = v31;
          _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "#regionmon init bluetooth device with no thresholds for device-part: 0x%llx-0x%llx with model: %s. Using default threshold", buf, 0x20u);
        }
        *(void *)std::string buf = 0x300000008;
        *(void *)&uint8_t buf[8] = 0xC04E800000000000;
        unint64_t v68 = 0xC04E800000000000;
        sub_1001A02EC((uint64_t)&buf[16], (double *)&v68, 1);
        long long v41 = xmmword_1004B7700;
        uint64_t v42 = 0x4024000000000000;
        int v43 = 45;
        LOBYTE(__p) = 0;
        char v46 = 0;
        uint64_t v47 = 0;
        char v48 = 0;
        int v49 = 1;
        char v50 = 1;
        long long v51 = xmmword_1004B7710;
        long long v52 = xmmword_1004B7720;
        __asm { FMOV            V0.2D, #1.0 }
        long long v53 = _Q0;
        unint64_t v54 = 0xC059000000000000;
        long long v55 = xmmword_1004B7730;
        int32x2_t v56 = vdup_n_s32(0x3DCCCCCDu);
        long long v57 = xmmword_1004B7670;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        uint64_t v58 = 0x3FD999999999999ALL;
        long long v61 = xmmword_1004B7680;
        int v62 = 5;
        uint64_t v63 = 0x4000000000000000;
        int v64 = 10;
        uint64_t v65 = 0x4034000000000000;
        int v66 = 3;
        long long v67 = xmmword_1004B7740;
        sub_10032193C((uint64_t)v37, (uint64_t)buf, (uint64_t)buf);
        if (v46 && v45 < 0) {
          operator delete(__p);
        }
        sub_10003E96C((uint64_t)&buf[16], v40);
      }
      int v21 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        long long v22 = (void *)(a2 + 24);
        uint64_t v23 = *(void *)(a2 + 72);
        uint64_t v24 = *(void *)(a2 + 80);
        if (*(char *)(a2 + 47) < 0) {
          long long v22 = *(void **)(a2 + 24);
        }
        *(_DWORD *)std::string buf = 134218498;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v24;
        __int16 v39 = 2080;
        long long v40 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#regionmon init bluetooth device-part: 0x%llx-0x%llx with model: %s", buf, 0x20u);
      }
      if (*(char *)(a2 + 47) < 0)
      {
        sub_100002DE4(__dst, *(void **)(a2 + 24), *(void *)(a2 + 32));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a2 + 24);
        uint64_t v36 = *(void *)(a2 + 40);
      }
      if (SHIBYTE(v36) < 0) {
        operator delete(__dst[0]);
      }
      std::string::size_type v25 = qword_1008ABDE0;
      if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a6;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#regionmon Initializing BT device monitoring without spatial gesture detection, allowCoarseEstimation: %d.", buf, 8u);
      }
      std::string::size_type v26 = *(void *)(a2 + 72);
      std::string::size_type v27 = *(void *)(a2 + 80);
      sub_100321BB0(v34, (uint64_t)v37);
      sub_10038EE14(a1, v26, v27, v34, 3, a6, a7, *(double *)a2);
      sub_100321890((uint64_t)v34, (void *)v34[1]);
      sub_100321890((uint64_t)v37, (void *)v37[1]);
    }
    long long v28 = sub_100056B3C((void *)(a1 + 256), (unint64_t *)(a2 + 72));
    if (!v28) {
      sub_10015FDEC("unordered_map::at: key not found");
    }
    long long v29 = sub_100056B3C(v28 + 3, (unint64_t *)(a2 + 80));
    if (!v29) {
      sub_10015FDEC("unordered_map::at: key not found");
    }
    uint64_t v30 = (uint64_t)(v29 + 3);
    if (sub_10038C0E8((uint64_t)(v29 + 3))) {
      sub_10038C298(v30, (long long *)a2);
    }
  }
  else
  {
    uint64_t v9 = qword_1008ABDE0;
    if (os_log_type_enabled((os_log_t)qword_1008ABDE0, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = *(double *)a2;
      *(_DWORD *)std::string buf = 134218240;
      *(double *)&uint8_t buf[4] = a4;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#regionmon stale sample being ignored, current time: %f, sample timestamp: %f", buf, 0x16u);
    }
  }
}

void sub_1003903B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  long long v12 = va_arg(va1, void *);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_1002560E4((uint64_t)va1);
  sub_100321890((uint64_t)va, v12);
  _Unwind_Resume(a1);
}

BOOL sub_1003903F8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3;
  unint64_t v7 = a2;
  unsigned int v3 = (void *)(a1 + 256);
  if (!sub_100056B3C((void *)(a1 + 256), &v7)) {
    return 1;
  }
  unsigned int v4 = sub_100056B3C(v3, &v7);
  if (!v4) {
    sub_10015FDEC("unordered_map::at: key not found");
  }
  return !sub_1003217DC(v4 + 3, &v6);
}

void sub_10039046C(uint64_t a1, double a2)
{
  for (uint64_t i = *(void **)(a1 + 232); i; uint64_t i = (void *)*i)
    sub_10038C9AC((uint64_t)(i + 3), a2);
  for (uint64_t j = *(void **)(a1 + 272); j; uint64_t j = (void *)*j)
  {
    for (unint64_t k = (void *)j[5]; k; unint64_t k = (void *)*k)
      sub_10038C9AC((uint64_t)(k + 3), a2);
  }
}

uint64_t *sub_1003904E0@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v14 = a2;
  int v13 = a3;
  if (!result[26]) {
    goto LABEL_9;
  }
  uint64_t v5 = result[25];
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v7 = (uint64_t)(result + 24);
  while (1)
  {
    int v8 = *(_DWORD *)(v5 + 32);
    if (v8 <= a3) {
      break;
    }
LABEL_8:
    uint64_t v5 = *(void *)v5;
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (v8 < a3)
  {
    v5 += 8;
    goto LABEL_8;
  }
  double result = sub_10038E244((uint64_t)(result + 24), &v13);
  uint64_t v9 = result[1];
  if (!v9)
  {
LABEL_9:
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  while (1)
  {
    unsigned int v10 = *(unsigned __int8 *)(v9 + 32);
    if (v10 <= a2) {
      break;
    }
LABEL_15:
    uint64_t v9 = *(void *)v9;
    if (!v9) {
      goto LABEL_9;
    }
  }
  if (v10 < a2)
  {
    v9 += 8;
    goto LABEL_15;
  }
  int v11 = sub_10038E244(v7, &v13);
  double result = sub_10038E29C((uint64_t)v11, &v14);
  uint64_t v12 = result[1];
  *a4 = *result;
  a4[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1003905B4(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7, char a8, int a9)
{
  uint64_t v33 = a2;
  if ((sub_100390754(a1, a2) & 1) != 0 || a9)
  {
    long long v16 = sub_100056B3C((void *)(a1 + 296), (unint64_t *)&v33);
    if (!v16) {
      sub_10015FDEC("unordered_map::at: key not found");
    }
    sub_10031FE98((char *)v30, (long long *)(v16 + 3));
    uint64_t v17 = sub_100056B3C((void *)(a1 + 336), (unint64_t *)&v33);
    if (!v17) {
      sub_10015FDEC("unordered_map::at: key not found");
    }
    sub_10031FE98((char *)__p, (long long *)(v17 + 3));
    long long v18 = a6[9];
    v26[8] = a6[8];
    v26[9] = v18;
    long long v19 = a6[11];
    v26[10] = a6[10];
    v26[11] = v19;
    long long v20 = a6[5];
    v26[4] = a6[4];
    v26[5] = v20;
    long long v21 = a6[7];
    v26[6] = a6[6];
    v26[7] = v21;
    long long v22 = a6[1];
    v26[0] = *a6;
    v26[1] = v22;
    long long v24 = a6[3];
    if (a8)
    {
      *(float *)&unsigned int v23 = *(double *)&a7;
      unint64_t v25 = v23 | (unint64_t)&_mh_execute_header;
    }
    else
    {
      unint64_t v25 = 0;
    }
    v26[2] = a6[2];
    void v26[3] = v24;
    sub_10038BDF4(a1, a2, (uint64_t)v30, (uint64_t)__p, (uint64_t)v26, v25, a9, a3);
    if (v29 && v28 < 0) {
      operator delete(__p[0]);
    }
    if (v32)
    {
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
  }
}

void sub_100390710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a43 && a39 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v43 - 96))
  {
    if (*(char *)(v43 - 121) < 0) {
      operator delete(*(void **)(v43 - 144));
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100390754(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a2;
  LOBYTE(__dst) = 0;
  char v18 = 0;
  LOBYTE(v12[0]) = 0;
  unsigned int v3 = (void *)(a1 + 296);
  char v15 = 0;
  if (sub_1003217DC((void *)(a1 + 296), (unint64_t *)&v19))
  {
    unsigned int v4 = (std::string *)sub_100056B3C(v3, (unint64_t *)&v19);
    if (!v4) {
      sub_10015FDEC("unordered_map::at: key not found");
    }
    sub_10038CAE0((char *)&__dst, v4 + 1);
  }
  uint64_t v5 = sub_100056B3C((void *)(a1 + 256), (unint64_t *)&v19);
  if (!v5) {
    sub_10015FDEC("unordered_map::at: key not found");
  }
  for (uint64_t i = (long long *)v5[5]; i; uint64_t i = *(long long **)i)
  {
    sub_10031FE98((char *)&__p, i + 17);
    if (v11)
    {
      if (v15 && v10 >= v14 || (sub_10038CAE0((char *)v12, &__p), v11))
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (!v18 || !v15)
  {
    if ((v18 != 0) != (v15 != 0)) {
      goto LABEL_16;
    }
LABEL_18:
    uint64_t v7 = 0;
    goto LABEL_19;
  }
  if (sub_100389E74((unsigned __int8 *)&__dst, (float *)v12)) {
    goto LABEL_18;
  }
LABEL_16:
  sub_100390960((uint64_t)v3, &v19, (long long *)v12);
  sub_100390960(a1 + 336, &v19, &__dst);
  uint64_t v7 = 1;
LABEL_19:
  if (v15 && v13 < 0) {
    operator delete(v12[0]);
  }
  if (v18 && v17 < 0) {
    operator delete((void *)__dst);
  }
  return v7;
}

void sub_1003908FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a28 && a24 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v28 - 48))
  {
    if (*(char *)(v28 - 73) < 0) {
      operator delete(*(void **)(v28 - 96));
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_100390960(uint64_t a1, uint64_t *a2, long long *a3)
{
  unsigned int v4 = (char *)sub_100392888(a1, a2, a2, a3);
  uint64_t v5 = v4;
  if (!v6) {
    sub_10038CAE0(v4 + 24, (std::string *)a3);
  }
  return v5;
}

void sub_1003909B4(uint64_t a1, uint64_t a2, long long *a3, long long *a4, _OWORD *a5, uint64_t a6, int a7, double a8)
{
  uint64_t v14 = *(void *)(a1 + 32);
  sub_10031FE98((char *)&v28, a3);
  sub_10031FE98((char *)&__p, a4);
  long long v17 = a5[9];
  v24[8] = a5[8];
  v24[9] = v17;
  long long v18 = a5[11];
  v24[10] = a5[10];
  v24[11] = v18;
  long long v19 = a5[5];
  v24[4] = a5[4];
  v24[5] = v19;
  long long v20 = a5[7];
  v24[6] = a5[6];
  v24[7] = v20;
  long long v21 = a5[1];
  v24[0] = *a5;
  v24[1] = v21;
  long long v22 = a5[3];
  if ((a6 & 0xFF00000000) != 0) {
    double v23 = *(float *)&a6;
  }
  else {
    double v23 = 0.0;
  }
  __n128 v24[2] = a5[2];
  double v24[3] = v22;
  sub_1003905B4(v14, a2, a8, v15, v16, v24, *(uint64_t *)&v23, (a6 & 0xFF00000000) != 0, a7);
  if (v27 && v26 < 0) {
    operator delete(__p);
  }
  if (v30)
  {
    if (v29 < 0) {
      operator delete(v28);
    }
  }
}

void sub_100390ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a42 && a38 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v42 - 88))
  {
    if (*(char *)(v42 - 113) < 0) {
      operator delete(*(void **)(v42 - 136));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100390B00(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  sub_10031FE98((char *)&v8, a3);
  sub_10031FE98((char *)&__p, a4);
  if (v7 && v6 < 0) {
    operator delete(__p);
  }
  if (v10)
  {
    if (v9 < 0) {
      operator delete(v8);
    }
  }
}

void sub_100390B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a25)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100390B94(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)double result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  unsigned int v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *unsigned int v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_100390C04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100390C9C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100390C9C(a1, *a2);
    sub_100390C9C(a1, a2[1]);
    sub_1002D41D4((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t sub_100390CFC(uint64_t a1)
{
  sub_100390D38(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100390D38(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100390D7C((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100390D7C(uint64_t a1)
{
  for (uint64_t i = 1216; i != 1200; i -= 8)
  {
    uint64_t v3 = *(void *)(a1 + i);
    *(void *)(a1 + i) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  if (*(unsigned char *)(a1 + 952) && *(char *)(a1 + 951) < 0) {
    operator delete(*(void **)(a1 + 928));
  }
  sub_10003E96C(a1 + 872, *(void **)(a1 + 880));
  sub_10003E96C(a1 + 432, *(void **)(a1 + 440));
  if (*(unsigned char *)(a1 + 408) && *(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(unsigned char *)(a1 + 352) && *(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  if (*(unsigned char *)(a1 + 296) && *(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 240);
  if (v4) {
    sub_10001A970(v4);
  }
  uint64_t v5 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 112);
  if (v6) {
    sub_10001A970(v6);
  }
  sub_10038CE1C((void *)(a1 + 72));
  sub_1003208FC((void *)(a1 + 40));
  sub_100320A04((void *)(a1 + 8));
  return a1;
}

uint64_t sub_100390EBC(uint64_t a1)
{
  sub_100390EF8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100390EF8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100390CFC((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100390F3C(uint64_t a1)
{
  sub_100390F78(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100390F78(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (void *)*v2;
      if (*((unsigned char *)v3 + 72))
      {
        if (*((char *)v3 + 47) < 0) {
          operator delete((void *)v3[3]);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

void *sub_100390FCC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100391054(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100862D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100391074(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100862D48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1003910C8(uint64_t a1)
{
}

uint64_t *sub_1003910DC(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4, void **a5)
{
  unint64_t v7 = (uint64_t **)(a1 + 8);
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v9 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_100391198(a1, a4, a5, (uint64_t)&v12);
    sub_100026D98((uint64_t **)a1, (uint64_t)v9, v7, v12);
    return v12;
  }
  return (uint64_t *)v9;
}

_DWORD *sub_100391198@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  double result = operator new(0x40uLL);
  char v9 = *a3;
  result[8] = **a2;
  *((void *)result + 5) = *v9;
  int v10 = v9 + 1;
  uint64_t v11 = v9[1];
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *((void *)result + 6) = v11;
  uint64_t v12 = (char *)(result + 12);
  uint64_t v13 = v9[2];
  *((void *)result + 7) = v13;
  if (v13)
  {
    *(void *)(v11 + 16) = v12;
    *char v9 = v10;
    *int v10 = 0;
    _OWORD v9[2] = 0;
  }
  else
  {
    *((void *)result + 5) = v12;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t **sub_100391228(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4, void **a5)
{
  char v9 = a1 + 1;
  int v8 = a1[1];
  if (v8)
  {
    unsigned int v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v8;
        unsigned int v12 = *((unsigned __int8 *)v8 + 32);
        if (v10 >= v12) {
          break;
        }
        int v8 = *v11;
        char v9 = v11;
        if (!*v11) {
          goto LABEL_10;
        }
      }
      if (v12 >= v10) {
        return v11;
      }
      int v8 = v11[1];
      if (!v8)
      {
        char v9 = v11 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_10:
    uint64_t v13 = operator new(0x38uLL);
    uint64_t v14 = *a5;
    unsigned char v13[32] = **a4;
    uint64_t v15 = v14[1];
    *((void *)v13 + 5) = *v14;
    *((void *)v13 + 6) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100026D98(a1, (uint64_t)v11, v9, (uint64_t *)v13);
  }
  return (uint64_t **)v13;
}

uint64_t *sub_100391308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    float v6 = *(float *)(a2 + 24);
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v4;
        float v8 = *((float *)v4 + 14);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = (uint64_t *)v4[1];
      if (!v4)
      {
        uint64_t v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_1003913BC(a1, a3, (uint64_t)&v10);
    sub_100026D98((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

__n128 sub_1003913BC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  float v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100002DE4(v7, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((_WORD *)v6 + 36) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100391450(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1001FD964(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10039146C(void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)sub_100056B3C(a1, a2);
  if (result)
  {
    sub_10002A6C0(a1, (void *)result, (uint64_t)v4);
    sub_1003914BC((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void sub_1003914BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100390D7C((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

void *sub_100391514@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x88uLL);
  uint64_t result = sub_100391578(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100391564(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100391578(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100862D98;
  sub_100353780(a1 + 3);
  return a1;
}

void sub_1003915C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1003915D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100862D98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1003915F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100862D98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100391648(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100391670(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4, _OWORD *a5)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v5 = *a2;
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
    }
    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void **)(*(void *)a1 + 8 * v5);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v5) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_1003918B8(a1, *a2, a4, a5, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_10002AA24(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
      else {
        unint64_t v5 = v7;
      }
    }
    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
  }
  long long v19 = *(void **)(*(void *)a1 + 8 * v5);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *long long v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v5) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  uint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1003914BC((uint64_t)v22, 0);
  return v11;
}

void sub_1003918A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003914BC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1003918B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unsigned int v10 = operator new(0x4E0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unsigned int v10 = 0;
  v10[1] = a2;
  uint64_t v11 = *a3;
  long long v12 = a4[3];
  void v15[2] = a4[2];
  v15[3] = v12;
  v15[4] = a4[4];
  long long v13 = a4[1];
  v15[0] = *a4;
  v15[1] = v13;
  unint64_t v16 = v11;
  uint64_t result = sub_100391960(v10 + 2, &v16, (uint64_t)v15);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_100391948(_Unwind_Exception *a1)
{
  sub_1003914BC(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100391960(void *a1, void **a2, uint64_t a3)
{
  *a1 = **a2;
  uint64_t v5 = (uint64_t)(a1 + 1);
  uint64_t v6 = **(void **)a3;
  sub_10038CC54((uint64_t)v23, *(void *)(a3 + 8));
  sub_10038CCEC((uint64_t)v22, *(void *)(a3 + 16));
  unint64_t v7 = *(uint64_t **)(a3 + 24);
  uint64_t v9 = *v7;
  unint64_t v8 = (std::__shared_weak_count *)v7[1];
  uint64_t v19 = v9;
  unint64_t v20 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a3 + 32);
  int v11 = **(_DWORD **)(a3 + 40);
  int v12 = **(_DWORD **)(a3 + 48);
  uint64_t v13 = *(void *)(a3 + 72);
  int v14 = **(_DWORD **)(a3 + 64);
  sub_100391B48(v18, v13);
  int8x16_t v21[3] = 0;
  sub_10038B364(v5, v6, (uint64_t)v23, (uint64_t)v22, &v19, v10, v11, v12, v14, (uint64_t)v18, (uint64_t)v21);
  sub_10038CE1C(v21);
  if (v18[32])
  {
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      unint64_t v16 = *(std::__shared_weak_count **)&v18[i];
      if (v16) {
        sub_10001A970(v16);
      }
    }
  }
  if (v20) {
    sub_10001A970(v20);
  }
  sub_1003208FC(v22);
  sub_100320A04(v23);
  return a1;
}

void sub_100391AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  unint64_t v16 = va_arg(va1, std::__shared_weak_count *);
  va_copy(va2, va1);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  sub_10038CE1C((uint64_t *)va1);
  if ((_BYTE)v14)
  {
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      unint64_t v8 = *(std::__shared_weak_count **)(va + i);
      if (v8) {
        sub_10001A970(v8);
      }
    }
  }
  if (v16) {
    sub_10001A970(v16);
  }
  sub_1003208FC((uint64_t *)va2);
  sub_100320A04((void *)(v5 - 136));
  _Unwind_Resume(a1);
}

unsigned char *sub_100391B48(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  sub_100391BB0((uint64_t)a1, a2);
  return a1;
}

void sub_100391B80(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32))
  {
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      uint64_t v4 = *(std::__shared_weak_count **)(v1 + i);
      if (v4) {
        sub_10001A970(v4);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100391BB0(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    for (uint64_t i = 0; i != 32; i += 16)
    {
      long long v3 = *(_OWORD *)(a2 + i);
      *(_OWORD *)(result + i) = v3;
      if (*((void *)&v3 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v3 + 1) + 8), 1uLL, memory_order_relaxed);
      }
    }
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

void *sub_100391BF0(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  uint64_t v13 = operator new(0x40uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *uint64_t v13 = 0;
  v13[1] = v6;
  void v13[2] = *a3;
  sub_100390B94((uint64_t)(v13 + 3), a3 + 1);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_10002AA24(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    *uint64_t v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t v10 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100391E54((uint64_t)v23, 0);
  return v10;
}

void sub_100391E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100391E54((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100391E54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100390CFC((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

void *sub_100391EAC(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4, _OWORD *a5)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v5 = *a2;
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
    }
    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v5);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v5) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_1003920F4(a1, *a2, a4, a5, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_10002AA24(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
      else {
        unint64_t v5 = v7;
      }
    }
    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
  }
  size_t v19 = *(void **)(*(void *)a1 + 8 * v5);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *size_t v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v5) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  unint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1003914BC((uint64_t)v22, 0);
  return v11;
}

void sub_1003920DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003914BC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1003920F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x4E0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint64_t v10 = 0;
  v10[1] = a2;
  unint64_t v11 = *a3;
  long long v12 = a4[3];
  void v15[2] = a4[2];
  v15[3] = v12;
  v15[4] = a4[4];
  long long v13 = a4[1];
  v15[0] = *a4;
  v15[1] = v13;
  unint64_t v16 = v11;
  uint64_t result = sub_10039219C(v10 + 2, &v16, (uint64_t)v15);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_100392184(_Unwind_Exception *a1)
{
  sub_1003914BC(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_10039219C(void *a1, void **a2, uint64_t a3)
{
  *a1 = **a2;
  uint64_t v5 = **(void **)a3;
  sub_10038CC54((uint64_t)v22, *(void *)(a3 + 8));
  sub_10038CCEC((uint64_t)v21, *(void *)(a3 + 16));
  unint64_t v6 = *(uint64_t **)(a3 + 24);
  uint64_t v8 = *v6;
  unint64_t v7 = (std::__shared_weak_count *)v6[1];
  uint64_t v18 = v8;
  size_t v19 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a3 + 32);
  int v10 = **(_DWORD **)(a3 + 40);
  int v11 = **(_DWORD **)(a3 + 48);
  int v12 = **(_DWORD **)(a3 + 64);
  v16[0] = 0;
  char v17 = 0;
  _OWORD v20[3] = 0;
  sub_10038B364((uint64_t)(a1 + 1), v5, (uint64_t)v22, (uint64_t)v21, &v18, v9, v10, v11, v12, (uint64_t)v16, (uint64_t)v20);
  sub_10038CE1C(v20);
  if (v17)
  {
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      float v14 = *(std::__shared_weak_count **)&v16[i];
      if (v14) {
        sub_10001A970(v14);
      }
    }
  }
  if (v19) {
    sub_10001A970(v19);
  }
  sub_1003208FC(v21);
  sub_100320A04(v22);
  return a1;
}

void sub_1003922E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  unint64_t v16 = va_arg(va1, std::__shared_weak_count *);
  sub_10038CE1C((uint64_t *)va1);
  if ((_BYTE)v14)
  {
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      uint64_t v8 = *(std::__shared_weak_count **)(va + i);
      if (v8) {
        sub_10001A970(v8);
      }
    }
  }
  if (v16) {
    sub_10001A970(v16);
  }
  sub_1003208FC((void *)(v5 - 104));
  sub_100320A04((void *)(v5 - 72));
  _Unwind_Resume(a1);
}

void *sub_100392348(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4, uint64_t a5)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v5 = *a2;
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
    }
    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
    int v10 = *(void **)(*(void *)a1 + 8 * v5);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v5) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_100392590(a1, *a2, a4, a5, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_10002AA24(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v5 = v7 % v8;
      }
      else {
        unint64_t v5 = v7;
      }
    }
    else
    {
      unint64_t v5 = (v8 - 1) & v7;
    }
  }
  size_t v19 = *(void **)(*(void *)a1 + 8 * v5);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *size_t v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v5) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  uint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1003914BC((uint64_t)v22, 0);
  return v11;
}

void sub_100392578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003914BC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100392590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  int v10 = operator new(0x4E0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *int v10 = 0;
  v10[1] = a2;
  uint64_t v11 = *a3;
  long long v12 = *(_OWORD *)(a4 + 48);
  void v15[2] = *(_OWORD *)(a4 + 32);
  v15[3] = v12;
  v15[4] = *(_OWORD *)(a4 + 64);
  uint64_t v16 = *(void *)(a4 + 80);
  long long v13 = *(_OWORD *)(a4 + 16);
  v15[0] = *(_OWORD *)a4;
  v15[1] = v13;
  unint64_t v17 = v11;
  uint64_t result = sub_100392640(v10 + 2, &v17, (uint64_t)v15);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_100392628(_Unwind_Exception *a1)
{
  sub_1003914BC(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100392640(void *a1, void **a2, uint64_t a3)
{
  *a1 = **a2;
  uint64_t v5 = (uint64_t)(a1 + 1);
  uint64_t v6 = **(void **)a3;
  sub_10038CC54((uint64_t)v22, *(void *)(a3 + 8));
  sub_10038CCEC((uint64_t)v21, *(void *)(a3 + 16));
  unint64_t v7 = *(uint64_t **)(a3 + 24);
  uint64_t v9 = *v7;
  unint64_t v8 = (std::__shared_weak_count *)v7[1];
  uint64_t v18 = v9;
  size_t v19 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a3 + 32);
  int v11 = **(_DWORD **)(a3 + 40);
  int v12 = **(_DWORD **)(a3 + 48);
  int v13 = **(_DWORD **)(a3 + 64);
  sub_100391B48(v17, *(void *)(a3 + 72));
  sub_10038CD84((uint64_t)v20, *(void *)(a3 + 80));
  sub_10038B364(v5, v6, (uint64_t)v22, (uint64_t)v21, &v18, v10, v11, v12, v13, (uint64_t)v17, (uint64_t)v20);
  sub_10038CE1C(v20);
  if (v17[32])
  {
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      BOOL v15 = *(std::__shared_weak_count **)&v17[i];
      if (v15) {
        sub_10001A970(v15);
      }
    }
  }
  if (v19) {
    sub_10001A970(v19);
  }
  sub_1003208FC(v21);
  sub_100320A04(v22);
  return a1;
}

void sub_1003927C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, std::__shared_weak_count *);
  va_copy(va2, va1);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  sub_10038CE1C((uint64_t *)va1);
  if ((_BYTE)v14)
  {
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      unint64_t v8 = *(std::__shared_weak_count **)(va + i);
      if (v8) {
        sub_10001A970(v8);
      }
    }
  }
  if (v16) {
    sub_10001A970(v16);
  }
  sub_1003208FC((uint64_t *)va2);
  sub_100320A04((void *)(v5 - 136));
  _Unwind_Resume(a1);
}

uint64_t sub_100392838(void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)sub_100056B3C(a1, a2);
  if (result)
  {
    sub_10002A6C0(a1, (void *)result, (uint64_t)v4);
    sub_100391E54((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void *sub_100392888(uint64_t a1, uint64_t *a2, void *a3, long long *a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_100392AC0(a1, *a2, a3, a4, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_10002AA24(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *uint64_t v20 = *v18;
    void *v18 = v20;
  }
  else
  {
    *uint64_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  uint64_t result = v20;
  ++*(void *)(a1 + 24);
  return result;
}