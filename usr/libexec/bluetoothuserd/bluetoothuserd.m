uint64_t SystemVersionNumber.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall SystemVersionNumber.init(rawValue:)(bluetoothuserd::SystemVersionNumber_optional *__return_ptr retstr, Swift::String rawValue)
{
  sub_100003F00(rawValue._countAndFlagsBits, (uint64_t)rawValue._object, v3);
  sub_1000043DC((uint64_t)v3, (uint64_t)retstr, &qword_10008E760);
}

void __swiftcall SystemVersionNumber.init(stringLiteral:)(bluetoothuserd::SystemVersionNumber *__return_ptr retstr, Swift::String stringLiteral)
{
  sub_100003F00(stringLiteral._countAndFlagsBits, (uint64_t)stringLiteral._object, v10);
  sub_1000043DC((uint64_t)v10, (uint64_t)&v11, &qword_10008E760);
  v3 = v12;
  if (v12)
  {
    v4 = v14;
    Swift::Int v5 = v15;
    Swift::Bool v6 = v16;
    v7 = v18;
    long long v8 = v13;
    long long v9 = v17;
    retstr->rawValue._countAndFlagsBits = v11;
    retstr->rawValue._object = v3;
    *(_OWORD *)&retstr->baseNumber = v8;
    retstr->baseLetter._object = v4;
    retstr->childType.value = v5;
    retstr->childType.is_nil = v6;
    *(_OWORD *)&retstr->buildNumber = v9;
    retstr->suffix.value._object = v7;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000035B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100003F00(*a1, a1[1], v4);
  return sub_1000043DC((uint64_t)v4, a2, &qword_10008E760);
}

uint64_t sub_100003600@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000360C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10000366C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000036C0@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100003F00(*a1, a1[1], v6);
  uint64_t result = sub_1000043DC((uint64_t)v6, (uint64_t)v7, &qword_10008E760);
  if (*((void *)&v7[0] + 1))
  {
    long long v4 = v7[3];
    a2[2] = v7[2];
    a2[3] = v4;
    a2[4] = v7[4];
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100003734(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s14bluetoothuserd19SystemVersionNumberV1loiySbAC_ACtFZ_0(v8, v9) & 1;
}

BOOL sub_100003790(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000037EC(v8, v9);
}

BOOL sub_1000037EC(void *a1, void *a2)
{
  uint64_t v2 = a2[2];
  uint64_t v3 = a1[2];
  char v4 = 1;
  if (v2 >= v3)
  {
    if (v3 >= v2)
    {
      uint64_t v7 = a2[3];
      uint64_t v8 = a2[4];
      BOOL v9 = v7 == a1[3] && v8 == a1[4];
      if ((v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) && a2[7] >= a1[7])
      {
        sub_1000043DC((uint64_t)(a2 + 8), (uint64_t)v16, &qword_10008E770);
        sub_1000043DC((uint64_t)v16, (uint64_t)&v17, &qword_10008E770);
        if (v18) {
          uint64_t v10 = v17;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v18) {
          unint64_t v11 = v18;
        }
        else {
          unint64_t v11 = 0xE000000000000000;
        }
        sub_1000043DC((uint64_t)(a1 + 8), (uint64_t)v15, &qword_10008E770);
        sub_1000043DC((uint64_t)v15, (uint64_t)&v19, &qword_10008E770);
        if (v20) {
          uint64_t v12 = v19;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v20) {
          unint64_t v13 = v20;
        }
        else {
          unint64_t v13 = 0xE000000000000000;
        }
        if (v10 == v12 && v11 == v13) {
          char v4 = 0;
        }
        else {
          char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        sub_100004844((uint64_t)v16);
        sub_100004844((uint64_t)v15);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      char v4 = 0;
    }
  }
  return (v4 & 1) == 0;
}

BOOL sub_100003940(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_10000399C(v8, v9);
}

BOOL sub_10000399C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  char v4 = 1;
  if (v2 >= v3)
  {
    if (v3 >= v2)
    {
      BOOL v7 = a1[3] == a2[3] && a1[4] == a2[4];
      if ((v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) && a1[7] >= a2[7])
      {
        sub_1000043DC((uint64_t)(a1 + 8), (uint64_t)v14, &qword_10008E770);
        sub_1000043DC((uint64_t)v14, (uint64_t)&v15, &qword_10008E770);
        if (v16) {
          uint64_t v8 = v15;
        }
        else {
          uint64_t v8 = 0;
        }
        if (v16) {
          unint64_t v9 = v16;
        }
        else {
          unint64_t v9 = 0xE000000000000000;
        }
        sub_1000043DC((uint64_t)(a2 + 8), (uint64_t)v13, &qword_10008E770);
        sub_1000043DC((uint64_t)v13, (uint64_t)&v17, &qword_10008E770);
        if (v18) {
          uint64_t v10 = v17;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v18) {
          unint64_t v11 = v18;
        }
        else {
          unint64_t v11 = 0xE000000000000000;
        }
        if (v8 == v10 && v9 == v11) {
          char v4 = 0;
        }
        else {
          char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        sub_100004844((uint64_t)v14);
        sub_100004844((uint64_t)v13);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      char v4 = 0;
    }
  }
  return (v4 & 1) == 0;
}

uint64_t sub_100003AF4(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_100003B50(v8, v9) & 1;
}

uint64_t sub_100003B50(void *a1, void *a2)
{
  uint64_t v2 = a2[2];
  uint64_t v3 = a1[2];
  if (v2 < v3) {
    goto LABEL_2;
  }
  if (v3 < v2)
  {
    char v4 = 0;
    return v4 & 1;
  }
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  BOOL v9 = v7 == a1[3] && v8 == a1[4];
  if (v9 || (char v4 = 1, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    if (a2[7] < a1[7])
    {
LABEL_2:
      char v4 = 1;
      return v4 & 1;
    }
    sub_1000043DC((uint64_t)(a2 + 8), (uint64_t)v16, &qword_10008E770);
    sub_1000043DC((uint64_t)v16, (uint64_t)&v17, &qword_10008E770);
    if (v18) {
      uint64_t v10 = v17;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v18) {
      unint64_t v11 = v18;
    }
    else {
      unint64_t v11 = 0xE000000000000000;
    }
    sub_1000043DC((uint64_t)(a1 + 8), (uint64_t)v15, &qword_10008E770);
    sub_1000043DC((uint64_t)v15, (uint64_t)&v19, &qword_10008E770);
    if (v20) {
      uint64_t v12 = v19;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v20) {
      unint64_t v13 = v20;
    }
    else {
      unint64_t v13 = 0xE000000000000000;
    }
    if (v10 == v12 && v11 == v13) {
      char v4 = 0;
    }
    else {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    sub_100004844((uint64_t)v16);
    sub_100004844((uint64_t)v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4 & 1;
}

uint64_t sub_100003CA8(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t SystemVersionNumber.description.getter()
{
  sub_1000043DC(v0 + 40, (uint64_t)v10, &qword_10008E768);
  sub_1000043DC((uint64_t)v10, (uint64_t)&v11, &qword_10008E768);
  if (v12)
  {
    uint64_t v1 = 0;
    uint64_t v2 = (void *)0xE000000000000000;
  }
  else
  {
    v13[0] = v11;
    uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v2 = v3;
  }
  sub_1000043DC(v0 + 64, (uint64_t)v9, &qword_10008E770);
  sub_1000043DC((uint64_t)v9, (uint64_t)v13, &qword_10008E770);
  if (v13[1]) {
    Character.write<A>(to:)();
  }
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  Character.write<A>(to:)();
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100003EBC()
{
  return SystemVersionNumber.description.getter();
}

uint64_t sub_100003F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v38 = a3;
  uint64_t v5 = type metadata accessor for NSScanner.NumberRepresentation();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&countAndFlagsBits - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_allocWithZone((Class)NSScanner);
  swift_bridgeObjectRetain();
  uint64_t v37 = a1;
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithString:v10];

  uint64_t v12 = enum case for NSScanner.NumberRepresentation.decimal(_:);
  unint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v13(v8, enum case for NSScanner.NumberRepresentation.decimal(_:), v5);
  uint64_t v36 = NSScanner.scanInt(representation:)();
  char v15 = v14;
  unint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v8, v5);
  if (v15)
  {

    goto LABEL_15;
  }
  Swift::String_optional v17 = NSScanner.scanCharacter()();
  object = v17.value._object;
  if (v17.value._object)
  {
    uint64_t countAndFlagsBits = v17.value._countAndFlagsBits;
    v13(v8, v12, v5);
    uint64_t v19 = NSScanner.scanInt(representation:)();
    char v21 = v20;
    v16(v8, v5);
    if ((v21 & 1) == 0)
    {
      if (v19 >= 1000) {
        unint64_t v22 = v19 % 0x3E8uLL;
      }
      else {
        unint64_t v22 = v19;
      }
      if (v19 >= 1000) {
        unint64_t v23 = v19 / 0x3E8uLL;
      }
      else {
        unint64_t v23 = 0;
      }
      uint64_t v24 = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Swift::String_optional v25 = NSScanner.scanCharacter()();
      uint64_t v26 = v25.value._countAndFlagsBits;
      v27 = v25.value._object;
      uint64_t v28 = v37;
      swift_bridgeObjectRetain();
      NSScanner.currentIndex.getter();
      uint64_t v29 = String.distance(from:to:)();

      if (!v29)
      {
        BOOL v33 = v19 < 1000;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        v34 = v38;
        uint64_t v32 = countAndFlagsBits;
        uint64_t v31 = v36;
        goto LABEL_18;
      }
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease_n();
      goto LABEL_16;
    }

    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_16:
    uint64_t v28 = 0;
    uint64_t v24 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    object = 0;
    goto LABEL_17;
  }

  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v28 = 0;
  uint64_t v24 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
LABEL_17:
  unint64_t v23 = 0;
  BOOL v33 = 0;
  unint64_t v22 = 0;
  uint64_t v26 = 0;
  v27 = 0;
  v34 = v38;
LABEL_18:
  void *v34 = v28;
  v34[1] = v24;
  v34[2] = v31;
  v34[3] = v32;
  v34[4] = object;
  v34[5] = v23;
  v34[6] = v33;
  v34[7] = v22;
  v34[8] = v26;
  v34[9] = v27;
  return result;
}

uint64_t sub_10000423C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t _s14bluetoothuserd19SystemVersionNumberV1loiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  if (v2 < v3) {
    goto LABEL_2;
  }
  if (v3 < v2)
  {
    char v4 = 0;
    return v4 & 1;
  }
  BOOL v7 = a1[3] == a2[3] && a1[4] == a2[4];
  if (v7 || (char v4 = 1, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    if (a1[7] < a2[7])
    {
LABEL_2:
      char v4 = 1;
      return v4 & 1;
    }
    sub_1000043DC((uint64_t)(a1 + 8), (uint64_t)v14, &qword_10008E770);
    sub_1000043DC((uint64_t)v14, (uint64_t)&v15, &qword_10008E770);
    if (v16) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v16) {
      unint64_t v9 = v16;
    }
    else {
      unint64_t v9 = 0xE000000000000000;
    }
    sub_1000043DC((uint64_t)(a2 + 8), (uint64_t)v13, &qword_10008E770);
    sub_1000043DC((uint64_t)v13, (uint64_t)&v17, &qword_10008E770);
    if (v18) {
      uint64_t v10 = v17;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v18) {
      unint64_t v11 = v18;
    }
    else {
      unint64_t v11 = 0xE000000000000000;
    }
    if (v8 == v10 && v9 == v11) {
      char v4 = 0;
    }
    else {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    sub_100004844((uint64_t)v14);
    sub_100004844((uint64_t)v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4 & 1;
}

uint64_t sub_1000043DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000423C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100004444()
{
  unint64_t result = qword_10008E778;
  if (!qword_10008E778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008E778);
  }
  return result;
}

void *sub_100004498()
{
  return &protocol witness table for String;
}

unint64_t sub_1000044A8()
{
  unint64_t result = qword_10008E780;
  if (!qword_10008E780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008E780);
  }
  return result;
}

void *sub_1000044FC()
{
  return &protocol witness table for String;
}

void *sub_100004508()
{
  return &protocol witness table for String;
}

unint64_t sub_100004518()
{
  unint64_t result = qword_10008E788;
  if (!qword_10008E788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008E788);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemVersionNumber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for SystemVersionNumber()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemVersionNumber(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemVersionNumber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemVersionNumber()
{
  return &type metadata for SystemVersionNumber;
}

uint64_t sub_100004844(uint64_t a1)
{
  return a1;
}

unint64_t sub_100004870()
{
  unint64_t result = qword_10008E790;
  if (!qword_10008E790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008E790);
  }
  return result;
}

uint64_t sub_1000048C4()
{
  type metadata accessor for DarwinNotificationManager();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = &_swiftEmptyArrayStorage;
  static DarwinNotificationManager.shared = result;
  return result;
}

uint64_t *DarwinNotificationManager.shared.unsafeMutableAddressor()
{
  if (qword_100091020 != -1) {
    swift_once();
  }
  return &static DarwinNotificationManager.shared;
}

uint64_t static DarwinNotificationManager.shared.getter()
{
  if (qword_100091020 != -1) {
    swift_once();
  }

  return swift_retain();
}

void *variable initialization expression of DarwinNotificationManager.helpers()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t DarwinNotificationManager.registerHelper(helper:)()
{
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t DarwinNotificationManager.unregisterHelper(helper:)(uint64_t a1)
{
  swift_beginAccess();
  swift_retain();
  unint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000055FC(v3, a1);
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v1 + 16) = v4;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall DarwinNotificationManager.setUp()()
{
  uint64_t v1 = v0;
  sub_100005758();
  unint64_t v2 = static OS_dispatch_queue.main.getter();
  v4[4] = sub_100005798;
  v4[5] = v1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_100004EEC;
  v4[3] = &unk_1000859F0;
  unint64_t v3 = _Block_copy(v4);
  swift_retain();
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v2, v3);
  _Block_release(v3);
}

uint64_t sub_100004BAC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  BOOL v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v9 = String.init(cString:)();
    unint64_t v11 = v10;
    uint64_t v12 = sub_100038200();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
    swift_bridgeObjectRetain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v23 = a2;
      unint64_t v16 = (uint8_t *)v15;
      v25[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v16 = 136315138;
      unint64_t v22 = v16 + 4;
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_100004FA4(v9, v11, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "On xpc event stream, com.apple.notifyd.matching, notification %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v23;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess();
    unint64_t v17 = *(void *)(a2 + 16);
    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v18 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v18)
      {
LABEL_7:
        if (v18 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v19 = 0;
        do
        {
          if ((v17 & 0xC000000000000001) != 0)
          {
            uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v20 = *(void *)(v17 + 8 * v19 + 32);
            swift_retain();
          }
          ++v19;
          NSString v21 = String._bridgeToObjectiveC()();
          (*(void (**)(void))(*(void *)v20 + 120))();
          swift_release();
        }
        while (v18 != v19);
      }
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100004EEC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t DarwinNotificationManager.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DarwinNotificationManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_100004FA4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100005078(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000582C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000582C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1000057DC((uint64_t)v12);
  return v7;
}

uint64_t sub_100005078(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100005234(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100005234(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000052CC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000054AC(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000054AC(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000052CC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100005444(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100005444(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000423C(&qword_10008F3C0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000054AC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000423C(&qword_10008F3C0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000055FC(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_16:
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return &_swiftEmptyArrayStorage;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          uint64_t v6 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_13;
          }
        }
        if (v6 == a2)
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v7 == v4) {
          return &_swiftEmptyArrayStorage;
        }
      }
    }
  }
  return &_swiftEmptyArrayStorage;
}

unint64_t sub_100005758()
{
  unint64_t result = qword_10008E900;
  if (!qword_10008E900)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10008E900);
  }
  return result;
}

uint64_t sub_100005798(void *a1)
{
  return sub_100004BAC(a1, v1);
}

uint64_t sub_1000057A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000057B0()
{
  return swift_release();
}

uint64_t type metadata accessor for DarwinNotificationManager()
{
  return self;
}

uint64_t sub_1000057DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000582C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_10000588C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  id v10 = sub_10000787C(a1, a2, a3, a4);

  swift_release();
  return v10;
}

id sub_1000058FC()
{
  (*(void (**)(void))((swift_isaMask & *v0) + 0xE0))();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KeyValueStoreCustomObserver();
  return [super dealloc];
}

uint64_t sub_100005A74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  size_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100038200();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Start KeyValueStoreCustomObserver", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v11 = *(void *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    unint64_t v13 = *(void **)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_defaults);
    os_log_type_t v14 = *(void **)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults);
    swift_bridgeObjectRetain();
    uint64_t v15 = v11 + 40;
    do
    {
      swift_bridgeObjectRetain();
      NSString v16 = String._bridgeToObjectiveC()();
      [v13 addObserver:v1 forKeyPath:v16 options:0 context:0];

      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v14 addObserver:v1 forKeyPath:v17 options:0 context:0];

      v15 += 16;
      --v12;
    }
    while (v12);
    uint64_t v10 = swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x110))(v10);
}

uint64_t sub_100005CDC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_defaults);
    uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults);
    swift_bridgeObjectRetain();
    uint64_t v5 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      NSString v6 = String._bridgeToObjectiveC()();
      [v3 removeObserver:v0 forKeyPath:v6 context:0];

      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v4 removeObserver:v0 forKeyPath:v7 context:0];

      v5 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  id v8 = [self defaultCenter];
  [v8 removeObserver:v0];

  id v9 = (int *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken);
  swift_beginAccess();
  return notify_cancel(*v9);
}

void sub_100006000()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v37 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  NSString v6 = (char *)v31 - v5;
  id v35 = v0;
  id v7 = *(id *)&v0[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults];
  LODWORD(v34) = [v7 synchronize];
  uint64_t v8 = sub_100038434();
  id v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v9(v6, v8, v1);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = v2;
    uint64_t v13 = v1;
    os_log_type_t v14 = v12;
    *(_DWORD *)uint64_t v12 = 67109120;
    LODWORD(v39) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cloud KVS synchronized: %{BOOL}d", v14, 8u);
    uint64_t v1 = v13;
    uint64_t v2 = v36;
    swift_slowDealloc();
  }

  uint64_t v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  v15(v6, v1);
  NSString v16 = v37;
  v9(v37, v8, v1);
  uint64_t v17 = v2 + 8;
  uint64_t v18 = v35;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v36 = v17;
    NSString v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v39 = v32;
    uint64_t v34 = v1;
    *(_DWORD *)NSString v21 = 136315138;
    v31[1] = v21 + 4;
    id v22 = [v7 dictionaryRepresentation];
    BOOL v33 = (uint64_t (*)(char *, uint64_t))v15;
    id v35 = v7;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = Dictionary.description.getter();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v38 = sub_100004FA4(v23, v25, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v7 = v35;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Cloud KVS snapshot: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v26 = v33(v37, v34);
  }
  else
  {

    uint64_t v26 = ((uint64_t (*)(char *, uint64_t))v15)(v16, v1);
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v18) + 0xF0))(v26);
  v27 = self;
  id v28 = [v27 defaultCenter];
  [v28 addObserver:v18 selector:"handleUbiquitousKeyValueStoreChangeWithNotification:" name:NSUbiquitousKeyValueStoreDidChangeExternallyNotification object:v7];

  id v29 = [v27 defaultCenter];
  sub_10000E798();
  swift_bridgeObjectRetain();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 addObserver:v18 selector:"handleUbiquitousKeyValueStoreChangeLocallyWithNotification:" name:v30 object:0];
}

void sub_1000064D4()
{
  uint64_t v1 = self;
  id v2 = [v1 defaultCenter];
  [v2 removeObserver:v0 name:NSUbiquitousKeyValueStoreDidChangeExternallyNotification object:*(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults)];

  id v3 = [v1 defaultCenter];
  sub_10000E798();
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 removeObserver:v0 name:v4 object:0];
}

uint64_t sub_1000065CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = Notification.userInfo.getter();
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = sub_100038434();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
  swift_bridgeObjectRetain_n();
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v23 = v1;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v22 = swift_slowAlloc();
    v26[0] = v22;
    *(_DWORD *)uint64_t v12 = 136315138;
    v21[0] = v12 + 4;
    swift_bridgeObjectRetain();
    v21[1] = (char *)&type metadata for Any + 8;
    uint64_t v13 = Dictionary.description.getter();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    *(void *)&long long v27 = sub_100004FA4(v13, v15, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Cloud KVS Notification: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v23;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)&long long v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v27 + 1) = v16;
  swift_bridgeObjectRetain();
  uint64_t result = AnyHashable.init<A>(_:)();
  if (!*(void *)(v7 + 16))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t result = sub_100007770((uint64_t)v26);
  if ((v17 & 1) == 0)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  sub_10000582C(*(void *)(v7 + 56) + 32 * result, (uint64_t)v25);
  sub_1000079C0((uint64_t)v26);
  swift_bridgeObjectRelease();
  sub_100007A14(v25, &v27);
  swift_dynamicCast();
  if (v24 > 3 || v24 == 2) {
    return swift_bridgeObjectRelease();
  }
  *(void *)&v25[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v25[0] + 1) = v18;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v7 + 16) && (unint64_t v19 = sub_100007770((uint64_t)v26), (v20 & 1) != 0))
  {
    sub_10000582C(*(void *)(v7 + 56) + 32 * v19, (uint64_t)&v27);
  }
  else
  {
    long long v27 = 0u;
    long long v28 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000079C0((uint64_t)v26);
  if (!*((void *)&v28 + 1)) {
    return sub_100007A24((uint64_t)&v27);
  }
  sub_10000423C(&qword_10008FDD0);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    (*(void (**)(void, void))((swift_isaMask & *v1) + 0x108))(0, *(void *)&v25[0]);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100006A1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = Notification.userInfo.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    AnyHashable.init<A>(_:)();
    if (*(void *)(v3 + 16) && (unint64_t v4 = sub_100007770((uint64_t)v8), (v5 & 1) != 0))
    {
      sub_10000582C(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1000079C0((uint64_t)v8);
    if (*((void *)&v10 + 1))
    {
      sub_10000423C(&qword_10008FDD0);
      if (swift_dynamicCast())
      {
        (*(void (**)(void, uint64_t))((swift_isaMask & *v1) + 0x108))(0, v7);
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_100007A24((uint64_t)&v9);
    }
  }
  return (*(uint64_t (**)(void, void *))((swift_isaMask & *v1) + 0x108))(0, &_swiftEmptyArrayStorage);
}

uint64_t sub_100006BC8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6 = type metadata accessor for Notification();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = a1;
  a4(v9);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100006CB8(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(void *)(v3 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_dispatchQueue);
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(unsigned char *)(v15 + 24) = a1;
  *(void *)(v15 + 32) = a2;
  aBlock[4] = sub_100007AFC;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006FA4;
  aBlock[3] = &unk_100085A68;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v18[1] = &_swiftEmptyArrayStorage;
  sub_100007DEC((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_100007BB4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
  return swift_release();
}

uint64_t sub_100006FA4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_100006FE8()
{
  uint64_t v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_dispatchQueue);
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v5[4] = sub_100007C58;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_1000072B8;
  v5[3] = &unk_100085A90;
  uint64_t v3 = _Block_copy(v5);
  swift_release();
  unint64_t v4 = (int *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken);
  swift_beginAccess();
  notify_register_dispatch("com.apple.bluetooth.prefsChanged", v4, v1, v3);
  swift_endAccess();
  _Block_release(v3);
}

uint64_t sub_1000070F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100038434();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Root KVS Notification", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    long long v9 = (void *)result;
    uint64_t v10 = *(void (**)(uint64_t, void *))(result
                                                 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify);
    swift_retain();

    v10(1, &_swiftEmptyArrayStorage);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000072B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_10000733C(uint64_t a1, uint64_t a2)
{
  return sub_100007434(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100007354()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000073A8()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000741C(uint64_t a1, uint64_t a2)
{
  return sub_100007434(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100007434(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100007478(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000074F0(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100007570@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000075B4()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100007640@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100007688@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000076B4(uint64_t a1)
{
  uint64_t v2 = sub_100007DEC(&qword_10008E8C8, (void (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey);
  uint64_t v3 = sub_100007DEC((unint64_t *)&unk_10008E8F0, (void (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

unint64_t sub_100007770(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000077B4(a1, v4);
}

unint64_t sub_1000077B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100007CB8(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000079C0((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

id sub_10000787C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_defaults;
  uint64_t v10 = self;
  uint64_t v11 = v4;
  *(void *)&v4[v9] = [v10 standardUserDefaults];
  uint64_t v12 = OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults;
  uint64_t v13 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v14 = (void *)*v13;
  *(void *)&v11[v12] = *v13;
  *(_DWORD *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken] = -1;
  *(void *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudKVSChangedNotification] = 0;
  *(void *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_dispatchQueue] = a1;
  *(void *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys] = a2;
  uint64_t v15 = &v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify];
  *(void *)uint64_t v15 = a3;
  *((void *)v15 + 1) = a4;
  id v16 = v14;
  id v17 = a1;
  swift_retain();

  v19.receiver = v11;
  v19.super_class = (Class)type metadata accessor for KeyValueStoreCustomObserver();
  return [super init];
}

uint64_t type metadata accessor for KeyValueStoreCustomObserver()
{
  return self;
}

uint64_t sub_1000079C0(uint64_t a1)
{
  return a1;
}

_OWORD *sub_100007A14(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100007A24(uint64_t a1)
{
  uint64_t v2 = sub_10000423C(&qword_10008FE80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100007A84()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100007ABC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100007AFC()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    unint64_t v4 = (void *)result;
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(result
                                                 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify);
    swift_retain();

    v5(v1, v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_100007B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100007BAC()
{
  return swift_release();
}

unint64_t sub_100007BB4()
{
  unint64_t result = qword_10008EE30;
  if (!qword_10008EE30)
  {
    sub_100007C10((uint64_t *)&unk_10008E960);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EE30);
  }
  return result;
}

uint64_t sub_100007C10(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100007C58()
{
  return sub_1000070F8();
}

void type metadata accessor for NSKeyValueChangeKey()
{
  if (!qword_10008E8D0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10008E8D0);
    }
  }
}

uint64_t sub_100007CB8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100007D14()
{
  return sub_100007DEC(&qword_10008E8D8, (void (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_100007D5C()
{
  return sub_100007DEC(&qword_10008E8E0, (void (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_100007DA4()
{
  return sub_100007DEC(&qword_10008E8E8, (void (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_100007DEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100007E3C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ApplePushServiceManager()) init];
  qword_1000949B8 = (uint64_t)result;
  return result;
}

uint64_t *sub_100007E6C()
{
  if (qword_100091330 != -1) {
    swift_once();
  }
  return &qword_1000949B8;
}

uint64_t sub_100007F14()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100007F60(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100007FB4())()
{
  return j__swift_endAccess;
}

uint64_t sub_100008014()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10000806C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

id sub_1000080CC()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v16 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushServiceQueue;
  sub_100005758();
  uint64_t v7 = *(void (**)(char *, void, uint64_t))(v4 + 104);
  uint64_t v15 = v4 + 104;
  id v17 = v7;
  v7(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  uint64_t v8 = v0;
  static DispatchQoS.unspecified.getter();
  objc_super v19 = &_swiftEmptyArrayStorage;
  sub_10000AAC0((unint64_t *)&qword_10008EDE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000423C((uint64_t *)&unk_10008E910);
  sub_10000AC68((unint64_t *)&qword_10008EDF0, (uint64_t *)&unk_10008E910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v13 + v14) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v8[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions] = &_swiftEmptyArrayStorage;
  uint64_t v14 = OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptionQueue;
  static DispatchQoS.unspecified.getter();
  objc_super v19 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v17(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v16);
  *(void *)&v8[v14] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v9 = (uint64_t *)&v8[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment];
  *uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9[1] = v10;
  *(void *)&v8[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_apsConnection] = 0;

  uint64_t v11 = (objc_class *)type metadata accessor for ApplePushServiceManager();
  v18.receiver = v8;
  v18.super_class = v11;
  return [super init];
}

uint64_t type metadata accessor for ApplePushServiceManager()
{
  return self;
}

id sub_100008488()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = (id)__chkstk_darwin(v4);
  uint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_apsConnection;
  if (!*(void *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_apsConnection))
  {
    id v11 = [self mainBundle];
    id v12 = [v11 bundleIdentifier];

    if (v12)
    {
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      uint64_t v16 = sub_10003823C();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v16, v2);
      id v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        objc_super v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)objc_super v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Set up APS connection", v19, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      unint64_t v42 = 0xD00000000000001BLL;
      unint64_t v43 = 0x800000010007A5B0;
      v20._uint64_t countAndFlagsBits = v13;
      v20._object = v15;
      String.append(_:)(v20);
      uint64_t v21 = swift_bridgeObjectRelease();
      unint64_t v23 = v42;
      unint64_t v22 = v43;
      (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0xA8))(v21);
      unint64_t v24 = *(void **)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushServiceQueue);
      id v25 = objc_allocWithZone((Class)APSConnection);
      id v26 = v24;
      NSString v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v28 = String._bridgeToObjectiveC()();
      id v29 = [v25 initWithEnvironmentName:v27 namedDelegatePort:v28 queue:v26];

      NSString v30 = *(void **)((char *)v1 + v10);
      *(void *)((char *)v1 + v10) = v29;

      uint64_t v31 = *(void **)((char *)v1 + v10);
      if (!v31) {
        goto LABEL_10;
      }
      sub_10000423C((uint64_t *)&unk_10008F630);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_1000747D0;
      *(void *)(v32 + 32) = v23;
      *(void *)(v32 + 40) = v22;
      id v33 = v31;
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v33 _setEnabledTopics:isa];

      id v35 = *(void **)((char *)v1 + v10);
      if (v35)
      {
        id v36 = v35;
        NSString v37 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v36 requestTokenForTopic:v37 identifier:0];

        id result = *(id *)((char *)v1 + v10);
        if (!result) {
          return result;
        }
      }
      else
      {
LABEL_10:
        swift_bridgeObjectRelease();
        id result = *(id *)((char *)v1 + v10);
        if (!result) {
          return result;
        }
      }
      return [result setDelegate:v1];
    }
    uint64_t v38 = sub_10003823C();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v38, v2);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to setup APS cannot get bundleIdentifier!", v41, 2u);
      swift_slowDealloc();
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

uint64_t sub_100008924(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100009B50(a2, a3);
}

uint64_t sub_1000089D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  return sub_100009ED4(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100008B2C(uint64_t a1, void *a2)
{
  return sub_10000A354(a2);
}

id sub_100008BAC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplePushServiceManager();
  return [super dealloc];
}

uint64_t sub_100008C60()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100008CD8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000423C((uint64_t *)&unk_10008E950);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000ACAC(a1, (uint64_t)v21);
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v11 = sub_10000423C(&qword_10008EA38);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_10000AD48, v10, v11, a3);
  sub_10000A7CC(a3, (uint64_t)v9);
  id v12 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((swift_isaMask & *a2) + 0xA0))(v21);
  uint64_t v14 = v13;
  unint64_t v15 = *v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_100009678(0, *(void *)(v15 + 16) + 1, 1, v15);
    unint64_t *v14 = v15;
  }
  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = sub_100009678(v17 > 1, v18 + 1, 1, v15);
    unint64_t *v14 = v15;
  }
  *(void *)(v15 + 16) = v18 + 1;
  sub_10000A944((uint64_t)v9, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v18);
  return v12(v21, 0);
}

uint64_t sub_100008EEC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000423C((uint64_t *)&unk_10008E950);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8);
  v18[1] = *(void *)&v1[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptionQueue];
  sub_10000A7CC(a1, (uint64_t)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  sub_10000A944((uint64_t)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  aBlock[4] = sub_10000A9AC;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006FA4;
  aBlock[3] = &unk_100085B08;
  unint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v1;
  static DispatchQoS.unspecified.getter();
  Swift::String v20 = &_swiftEmptyArrayStorage;
  sub_10000AAC0((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
  return swift_release();
}

uint64_t sub_10000924C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000423C((uint64_t *)&unk_10008E950);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v20 - v11;
  unint64_t v13 = &_swiftEmptyArrayStorage;
  id v25 = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    unint64_t v15 = (unint64_t *)&_swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      unint64_t v13 = *(void **)(v24 + 72);
      sub_10000A7CC(a3 + v16 + (void)v13 * v14, (uint64_t)v12);
      char v17 = a1(v12);
      if (v3)
      {
        sub_10000AC08((uint64_t)v12);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }
      if (v17)
      {
        sub_10000A944((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000098E8(0, v15[2] + 1, 1);
        }
        unint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000098E8(v18 > 1, v19 + 1, 1);
          unint64_t v15 = v25;
        }
        v15[2] = v19 + 1;
        uint64_t result = sub_10000A944(v23, (uint64_t)v15 + v16 + v19 * (void)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = sub_10000AC08((uint64_t)v12);
      }
      if (v22 == ++v14)
      {
        unint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_100009484()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x90))();
}

uint64_t sub_1000094D8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x98))();
}

void (*sub_10000952C(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((swift_isaMask & **v1) + 0xA0))();
  return sub_1000095B8;
}

void sub_1000095B8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_100009600()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100009678(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000423C(&qword_10008EA28);
  uint64_t v10 = *(void *)(sub_10000423C((uint64_t *)&unk_10008E950) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_10000423C((uint64_t *)&unk_10008E950) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10000ADB8(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_1000098E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100009908(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100009908(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000423C(&qword_10008EA28);
  uint64_t v10 = *(void *)(sub_10000423C((uint64_t *)&unk_10008E950) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_10000423C((uint64_t *)&unk_10008E950) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (char *)v13 + v17;
  unint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100009B50(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - v9;
  if (a2 >> 60 == 15)
  {
    uint64_t v11 = sub_10003823C();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v11, v4);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      size_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)size_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Invalid Public Token", v14, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    sub_10000AF6C(a1, a2);
    if (IsAppleInternalBuild())
    {
      uint64_t v16 = sub_10003823C();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v16, v4);
      sub_10000AF6C(a1, a2);
      sub_10000AF6C(a1, a2);
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        unint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        uint64_t v24 = v22;
        *(_DWORD *)unint64_t v19 = 136315138;
        uint64_t v21 = v19 + 4;
        Swift::String v20 = Data.base64EncodedString(options:)(0);
        uint64_t v23 = sub_100004FA4(v20._countAndFlagsBits, (unint64_t)v20._object, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000AB08(a1, a2);
        sub_10000AB08(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "didReceivePublicToken: %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_10000AB08(a1, a2);
      }
      else
      {
        sub_10000AB08(a1, a2);
        sub_10000AB08(a1, a2);
        sub_10000AB1C(a1, a2);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    else
    {
      return sub_10000AB08(a1, a2);
    }
  }
}

uint64_t sub_100009ED4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)v31 - v17;
  if (a2 >> 60 != 15 && a4 && a6)
  {
    sub_10000AF58(a1, a2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (IsAppleInternalBuild())
    {
      uint64_t v19 = sub_10003823C();
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v19, v12);
      sub_10000AF58(a1, a2);
      sub_10000AF58(a1, a2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Swift::String v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      int v35 = v21;
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v33 = a5;
        uint64_t v23 = v22;
        uint64_t v34 = swift_slowAlloc();
        uint64_t v37 = v34;
        *(_DWORD *)uint64_t v23 = 136315650;
        v31[0] = v23 + 4;
        Swift::String v24 = Data.base64EncodedString(options:)(0);
        os_log_t v32 = v20;
        uint64_t v36 = sub_100004FA4(v24._countAndFlagsBits, (unint64_t)v24._object, &v37);
        v31[1] = &v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10000AB08(a1, a2);
        sub_10000AB08(a1, a2);
        *(_WORD *)(v23 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v36 = sub_100004FA4(a3, a4, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v23 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v36 = sub_100004FA4(v33, a6, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v25 = v32;
        _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v35, "didReceiveToken: %s, for topic: %s, identifier: %s", (uint8_t *)v23, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_10000AB08(a1, a2);
      }
      else
      {
        sub_10000AB08(a1, a2);
        sub_10000AB08(a1, a2);
        sub_10000AB1C(a1, a2);

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    }
    else
    {
      sub_10000AB08(a1, a2);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v26 = sub_10003823C();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v26, v12);
    NSString v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Invalid APS data arguments", v29, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
}

uint64_t sub_10000A354(void *a1)
{
  objc_super v2 = v1;
  uint64_t v4 = sub_10000423C((uint64_t *)&unk_10008E950);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v37 - v13;
  if (a1)
  {
    id v15 = a1;
    uint64_t v16 = sub_10003823C();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v16, v8);
    uint64_t v17 = v15;
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v42 = v8;
      Swift::String v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v38 = a1;
      uint64_t v22 = (void *)v21;
      uint64_t v41 = v5;
      uint64_t v39 = v20;
      *(_DWORD *)Swift::String v20 = 138412290;
      v37[1] = v20 + 4;
      v43[0] = v17;
      uint64_t v23 = v17;
      os_log_type_t v40 = v2;
      Swift::String v24 = v23;
      uint64_t v5 = v41;
      uint64_t v8 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v38;

      objc_super v2 = v40;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "didReceive: message: %@", v39, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v18 = v17;
    }

    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    uint64_t v31 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x90))(v30);
    uint64_t v32 = *(void *)(v31 + 16);
    if (v32)
    {
      uint64_t v33 = v31 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v34 = *(void *)(v5 + 72);
      do
      {
        sub_10000A7CC(v33, (uint64_t)v7);
        sub_10000ACAC((uint64_t)v7, (uint64_t)v43);
        sub_10000AC08((uint64_t)v7);
        uint64_t v35 = v44;
        uint64_t v36 = v45;
        sub_10000AF14(v43, v44);
        (*(void (**)(NSObject *, uint64_t, uint64_t))(v36 + 8))(v17, v35, v36);
        sub_1000057DC((uint64_t)v43);
        v33 += v34;
        --v32;
      }
      while (v32);
    }

    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = sub_10003823C();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v25, v8);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Invalid message Token", v28, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

uint64_t sub_10000A7A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100008CD8(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_10000A7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C((uint64_t *)&unk_10008E950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A834()
{
  uint64_t v1 = (int *)(sub_10000423C((uint64_t *)&unk_10008E950) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;

  uint64_t v6 = v0 + v3;
  sub_1000057DC(v6);
  uint64_t v7 = v6 + v1[9];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10000A944(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C((uint64_t *)&unk_10008E950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A9AC()
{
  uint64_t v1 = *(void *)(sub_10000423C((uint64_t *)&unk_10008E950) - 8);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x90))();
  v7[2] = v3;
  uint64_t v5 = sub_10000924C((uint64_t (*)(char *))sub_10000AB74, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x98))(v5);
}

uint64_t sub_10000AAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AAB8()
{
  return swift_release();
}

uint64_t sub_10000AAC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000AB08(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000AB1C(a1, a2);
  }
  return a1;
}

uint64_t sub_10000AB1C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

BOOL sub_10000AB74()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_10000AC08(uint64_t a1)
{
  uint64_t v2 = sub_10000423C((uint64_t *)&unk_10008E950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000AC68(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100007C10(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000ACAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000AD10()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10000AD48(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_100008EEC(a1);
  }
}

uint64_t sub_10000ADB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_10000423C((uint64_t *)&unk_10008E950) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10000AF14(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000AF58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000AF6C(a1, a2);
  }
  return a1;
}

uint64_t sub_10000AF6C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10000AFC4@<X0>(uint64_t a1@<X8>)
{
  return sub_10000A7A0(a1);
}

uint64_t sub_10000AFDC()
{
  uint64_t v9 = UUID.uuid.getter();
  char v10 = v0;
  char v11 = v1;
  char v12 = v2;
  char v13 = v3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  return sub_10000B0B0((uint64_t)&v9, (uint64_t)&v18);
}

uint64_t sub_10000B0B0(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  char v2 = sub_10000AF14(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  char v3 = (unsigned char *)*v2;
  if (*v2 && (v4 = (unsigned char *)v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_10000B16C(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_10000B2B4((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_10000B230((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_1000057DC((uint64_t)v8);
  return v6;
}

uint64_t sub_10000B16C(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10000B230(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10000B2B4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

unint64_t sub_10000B330()
{
  _StringGuts.grow(_:)(35);
  uint64_t v1 = swift_bridgeObjectRelease();
  char v2 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 112))(v1);
  BOOL v3 = (v2 & 1) == 0;
  if (v2) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (v3) {
    unint64_t v5 = 0xE500000000000000;
  }
  else {
    unint64_t v5 = 0xE400000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0xD000000000000021;
  v7._object = (void *)0x800000010007A7C0;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 10;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0xD00000000000001DLL;
}

uint64_t sub_10000B440()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v10 = v20[15];
  double v11 = sub_100011A70(0, 1);
  if (v10 == 1)
  {
    double v12 = v11;
    if (v11 > 0.0)
    {
      static Date.now.getter();
      Date.timeIntervalSince1970.getter();
      double v14 = v13;
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
      if (v12 >= v14)
      {
        return 1;
      }
      else
      {
        uint64_t v15 = sub_100038288();
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v15, v2);
        char v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Audio accessory limited logging expired", v18, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
        (*(void (**)(void))(*(void *)v1 + 120))(0);
        return 0;
      }
    }
  }
  return v10;
}

void sub_10000B6F8(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled);
}

uint64_t sub_10000B70C(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_serialQueue);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v1;
  aBlock[4] = sub_10000D7E4;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006FA4;
  aBlock[3] = &unk_100085BD0;
  double v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v14[1] = &_swiftEmptyArrayStorage;
  sub_10000DE9C((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000D808((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_10000B9C4(char a1, uint64_t a2)
{
  int v4 = a1 & 1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = __chkstk_darwin(v12);
  char v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(a2 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled) != v4)
  {
    uint64_t v36 = OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled;
    double v17 = sub_100011A70(0, 1);
    if ((a1 & 1) != 0
      && ((double v18 = v17, v17 <= 0.0)
       || (static Date.now.getter(),
           Date.timeIntervalSince1970.getter(),
           double v20 = v19,
           (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12),
           v18 >= v20)))
    {
      uint64_t v28 = sub_100038288();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v28, v5);
      id v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Start audio accessory limited logging", v31, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      *((void *)&v38 + 1) = &type metadata for Bool;
      LOBYTE(v37) = 1;
      sub_10001230C((uint64_t)&off_100085B58, (uint64_t)&v37, 0);
      sub_10000E044((uint64_t)&v37, &qword_10008FE80);
      if (v18 <= 0.0)
      {
        sub_10000BE9C((uint64_t)v16);
        Date.timeIntervalSince1970.getter();
        double v18 = v32;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      }
      *((void *)&v38 + 1) = &type metadata for Double;
      *(double *)&long long v37 = v18;
      char v27 = 1;
      sub_100012458(0, (uint64_t)&v37, 1);
      sub_10000E044((uint64_t)&v37, &qword_10008FE80);
      uint64_t v33 = *sub_100062EA8();
      swift_retain();
      unint64_t v34 = sub_10000EBE0(0);
      (*(void (**)(unint64_t, double))(*(void *)v33 + 168))(v34, v18);
    }
    else
    {
      uint64_t v21 = sub_100038288();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v21, v5);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        Swift::String v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Stop Audio Accessory Limited Logging", v24, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      *((void *)&v38 + 1) = &type metadata for Bool;
      LOBYTE(v37) = 0;
      sub_10001230C((uint64_t)&off_100085B80, (uint64_t)&v37, 0);
      sub_10000E044((uint64_t)&v37, &qword_10008FE80);
      long long v37 = 0u;
      long long v38 = 0u;
      sub_100012458(0, (uint64_t)&v37, 1);
      sub_10000E044((uint64_t)&v37, &qword_10008FE80);
      uint64_t v25 = *sub_100062EA8();
      swift_retain();
      unint64_t v26 = sub_10000EBE0(0);
      (*(void (**)(unint64_t))(*(void *)v25 + 176))(v26);
      char v27 = 0;
    }
    swift_release();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a2 + v36) = v27;
    return notify_post("com.apple.bluetoothuser.settingsChanged");
  }
  return result;
}

uint64_t sub_10000BE9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = sub_100011A70(2, 2);
  uint64_t v11 = sub_100038288();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v21 = a1;
    double v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v24 = v20;
    *(_DWORD *)double v14 = 136315138;
    if (v10 <= 0.0)
    {
      unint64_t v17 = 0xE700000000000000;
      uint64_t v16 = 0x746C7561666564;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0xE000000000000000;
      v15._uint64_t countAndFlagsBits = 0x656469727265766FLL;
      v15._object = (void *)0xE900000000000020;
      String.append(_:)(v15);
      Double.write<A>(to:)();
      uint64_t v16 = v22;
      unint64_t v17 = v23;
    }
    uint64_t v19 = v6;
    uint64_t v22 = sub_100004FA4(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Requesting %s expiration interval", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  static Date.now.getter();
  Date.advanced(by:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t (*sub_10000C1F8(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_10000B440() & 1;
  return sub_10000C244;
}

uint64_t sub_10000C244(uint64_t a1)
{
  return sub_10000B70C(*(unsigned char *)(a1 + 8));
}

uint64_t sub_10000C26C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000423C(&qword_10008EAB8);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v30 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v29 = (char *)&v26 - v5;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Swift::String v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100038288();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Activate Debug Manager", v19, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  unint64_t v34 = sub_10000D858;
  uint64_t v35 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006FA4;
  uint64_t v33 = &unk_100085BF8;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = &_swiftEmptyArrayStorage;
  sub_10000DE9C((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000D808((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  swift_release();
  sub_100062EA8();
  uint64_t v33 = (void *)type metadata accessor for DebugManager();
  unint64_t v34 = (uint64_t (*)())&off_100085C58;
  aBlock[0] = v1;
  swift_retain();
  swift_retain();
  uint64_t v21 = (uint64_t)v29;
  sub_100064F48();
  swift_release();
  sub_1000057DC((uint64_t)aBlock);
  uint64_t v22 = sub_10000423C(&qword_10008EAB0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 0, 1, v22);
  uint64_t v23 = v30;
  sub_1000043DC(v21, v30, &qword_10008EAB8);
  uint64_t v24 = v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription;
  swift_beginAccess();
  sub_10000D8A8(v23, v24);
  return swift_endAccess();
}

uint64_t sub_10000C774()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000423C(&qword_10008EAB8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000423C(&qword_10008EAB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100038288();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = v8;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Invalidate Debug Manager", v16, 2u);
    uint64_t v8 = v21;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v17 = v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription;
  swift_beginAccess();
  sub_10000D910(v17, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    os_log_type_t v18 = &qword_10008EAB8;
    uint64_t v19 = (uint64_t)v4;
  }
  else
  {
    sub_1000043DC((uint64_t)v4, (uint64_t)v8, &qword_10008EAB0);
    Subscription.unsubscribe(completion:)((uint64_t)Transaction.capture(), 0, v5);
    uint64_t v19 = (uint64_t)v8;
    os_log_type_t v18 = &qword_10008EAB0;
  }
  return sub_10000E044(v19, v18);
}

uint64_t sub_10000CA64()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = *(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_serialQueue);
  aBlock[4] = sub_10000D858;
  uint64_t v13 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100085C20;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v11[1] = &_swiftEmptyArrayStorage;
  sub_10000DE9C((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000D808((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_10000CCFC()
{
  sub_10000E044(v0 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription, &qword_10008EAB8);

  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10000CD78()
{
  uint64_t v0 = swift_allocObject();
  sub_10000CDB0();
  return v0;
}

uint64_t sub_10000CDB0()
{
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = v0 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription;
  uint64_t v7 = sub_10000423C(&qword_10008EAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v10 = OBJC_IVAR____TtC14bluetoothuserd12DebugManager_serialQueue;
  sub_100005758();
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = _swiftEmptyArrayStorage;
  sub_10000DE9C((unint64_t *)&qword_10008EDE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000423C((uint64_t *)&unk_10008E910);
  sub_10000D808((unint64_t *)&qword_10008EDF0, (uint64_t *)&unk_10008E910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v11);
  *(void *)(v0 + v10) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled) = 0;
  return v0;
}

uint64_t sub_10000D060()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t sub_10000D0A8(char a1)
{
  return sub_10000D978(a1);
}

uint64_t sub_10000D0CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v55 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  v56 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v18 = type metadata accessor for SystemNotificationSource();
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000DDDC(a1, (uint64_t)v20);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 2, v11))
  {
    v56 = v15;
    uint64_t v27 = v10;
    uint64_t v28 = v11;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v20, v11);
    unint64_t v29 = sub_10000EBE0(0);
    unint64_t v31 = v55;
    if (v29 == a2 && v30 == v55)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v33 & 1) == 0)
      {
        v47 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
        return v47(v17, v28);
      }
    }
    uint64_t v54 = a2;
    uint64_t v34 = sub_100038288();
    uint64_t v35 = v12;
    uint64_t v36 = v6;
    long long v37 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v27, v34, v5);
    long long v38 = v56;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v56, v17, v28);
    swift_bridgeObjectRetain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      v52 = v37;
      os_log_t v50 = v39;
      uint64_t v42 = v41;
      uint64_t v51 = swift_slowAlloc();
      uint64_t v58 = v51;
      *(_DWORD *)uint64_t v42 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_100004FA4(v54, v31, &v58);
      uint64_t v54 = v5;
      os_log_type_t v43 = v40;
      uint64_t v44 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v42 + 12) = 2080;
      sub_10000DE9C(&qword_10008EAC0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = sub_100004FA4(v45, v46, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v47 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
      v47(v38, v28);
      os_log_t v48 = v50;
      _os_log_impl((void *)&_mh_execute_header, v50, v43, "Received alarm from name: %s at %s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v44 + 8))(v52, v54);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      v47 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
      v47(v38, v28);

      (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v5);
    }
    (*(void (**)(void))(*(void *)v53 + 120))(0);
    return v47(v17, v28);
  }
  uint64_t v54 = a2;
  uint64_t v21 = sub_100038288();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v56, v21, v5);
  unint64_t v22 = v55;
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  uint64_t v25 = v6;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v57 = sub_100004FA4(v54, v22, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Received notification from name: %s", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v25 + 8))(v56, v5);
  return sub_10000DE40((uint64_t)v20);
}

uint64_t sub_10000D788(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10000D0CC(a1, a2, a3);
}

uint64_t sub_10000D7AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000D7E4()
{
  return sub_10000B9C4(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10000D7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000D800()
{
  return swift_release();
}

uint64_t sub_10000D808(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100007C10(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for DebugManager()
{
  uint64_t result = qword_1000913E0;
  if (!qword_1000913E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000D8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008EAB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D910(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008EAB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D978(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v28 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  uint64_t v25 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100038288();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v23 = v2;
    os_log_type_t v15 = (uint8_t *)v14;
    aBlock[0] = swift_slowAlloc();
    uint64_t v22 = v3;
    *(_DWORD *)os_log_type_t v15 = 136315138;
    uint64_t v16 = sub_10000E0B8(a1);
    unint64_t v29 = (void *)sub_100004FA4(v16, v17, aBlock);
    uint64_t v3 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "keyValueChanged source: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v23;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = (uint64_t)sub_10000D858;
  void aBlock[5] = v24;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100006FA4;
  void aBlock[3] = (uint64_t)&unk_100085C68;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v19 = v25;
  static DispatchQoS.unspecified.getter();
  unint64_t v29 = &_swiftEmptyArrayStorage;
  sub_10000DE9C((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000D808((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  uint64_t v20 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v20, v2);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v27);
  return swift_release();
}

uint64_t sub_10000DDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemNotificationSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000DE40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SystemNotificationSource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000DE9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000DEE4()
{
  return type metadata accessor for DebugManager();
}

void sub_10000DEEC()
{
  sub_10000DF94();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10000DF94()
{
  if (!qword_10008EEC0)
  {
    sub_100007C10(&qword_10008EAB0);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10008EEC0);
    }
  }
}

uint64_t sub_10000DFF0()
{
  char v1 = sub_1000111D8(0, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 120);
  uint64_t v3 = v1 & 1;

  return v2(v3);
}

uint64_t sub_10000E044(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000423C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000E0B8(char a1)
{
  return *(void *)&aCloud_1[8 * a1];
}

uint64_t sub_10000E0D8(char *a1, char *a2)
{
  return sub_10000E2B0(*a1, *a2);
}

uint64_t sub_10000E0E4(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD00000000000001BLL;
  unint64_t v3 = 0x800000010007A920;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD00000000000001BLL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000025;
      uint64_t v6 = "APLogCloudCollectionEnabledExpiration";
      goto LABEL_8;
    case 2:
      unint64_t v5 = 0xD00000000000002ELL;
      uint64_t v6 = "APLogCloudCollectionExpirationIntervalOverride";
      goto LABEL_8;
    case 3:
      unint64_t v5 = 0xD000000000000022;
      uint64_t v6 = "cloudPairingManagerEnabledOverride";
      goto LABEL_8;
    case 4:
      uint64_t v6 = "debugManagerEnabledOverride";
      goto LABEL_8;
    case 5:
      unint64_t v5 = 0xD000000000000022;
      uint64_t v6 = "intelligenceManagerEnabledOverride";
      goto LABEL_8;
    case 6:
      unint64_t v5 = 0xD000000000000018;
      uint64_t v6 = "internalStorageMigration";
LABEL_8:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0x800000010007A920;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xD000000000000025;
      uint64_t v8 = "APLogCloudCollectionEnabledExpiration";
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0xD00000000000002ELL;
      uint64_t v8 = "APLogCloudCollectionExpirationIntervalOverride";
      goto LABEL_16;
    case 3:
      unint64_t v2 = 0xD000000000000022;
      uint64_t v8 = "cloudPairingManagerEnabledOverride";
      goto LABEL_16;
    case 4:
      uint64_t v8 = "debugManagerEnabledOverride";
      goto LABEL_16;
    case 5:
      unint64_t v2 = 0xD000000000000022;
      uint64_t v8 = "intelligenceManagerEnabledOverride";
      goto LABEL_16;
    case 6:
      unint64_t v2 = 0xD000000000000018;
      uint64_t v8 = "internalStorageMigration";
LABEL_16:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10000E2B0(char a1, char a2)
{
  if (*(void *)&aCloud_1[8 * a1] == *(void *)&aCloud_1[8 * a2] && qword_100074D48[a1] == qword_100074D48[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

unint64_t sub_10000E338@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100012E98(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000E368@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10000E0B8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_10000E394()
{
  return sub_10000E39C();
}

Swift::Int sub_10000E39C()
{
  return Hasher._finalize()();
}

uint64_t sub_10000E408()
{
  return sub_10000E504();
}

uint64_t sub_10000E410()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10000E504()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000E558()
{
  return sub_10000E560();
}

Swift::Int sub_10000E560()
{
  return Hasher._finalize()();
}

Swift::Int sub_10000E5C8()
{
  return Hasher._finalize()();
}

uint64_t sub_10000E6D8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10000E738()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_10000E788(void *a1@<X8>)
{
  *a1 = &off_100085D08;
}

void *sub_10000E798()
{
  return &unk_100085C90;
}

id sub_10000E7A4()
{
  swift_beginAccess();
  char v1 = *(void **)(v0 + 16);

  return v1;
}

void sub_10000E7E8(uint64_t a1)
{
  swift_beginAccess();
  char v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t (*sub_10000E830())()
{
  return j__swift_endAccess;
}

uint64_t sub_10000E884()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000E8BC(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10000E904())()
{
  return j_j__swift_endAccess;
}

id sub_10000E958()
{
  uint64_t v1 = (void *)v0[6];
  if (v1)
  {
    id v2 = (id)v0[6];
  }
  else
  {
    char v3 = v0;
    unint64_t v29 = (void *)(*(uint64_t (**)(void))(*v0 + 120))();
    sub_100012AA4(0, 7, 0);
    uint64_t v4 = 0;
    unint64_t v5 = (unint64_t)"APLogCloudCollectionEnabled";
    unint64_t v6 = (unint64_t)"tionEnabledExpiration";
    unint64_t v7 = (unint64_t)"tionExpirationIntervalOverride";
    unint64_t v8 = (unint64_t)"gerEnabledOverride";
    unint64_t v9 = (unint64_t)"debugManagerEnabledOverride";
    unint64_t v10 = 0xD000000000000018;
    unint64_t v11 = (unint64_t)"gerEnabledOverride";
    do
    {
      unint64_t v12 = 0x800000010007A920;
      unint64_t v13 = 0xD00000000000001BLL;
      switch(*((unsigned char *)&off_100085D30 + v4 + 32))
      {
        case 1:
          unint64_t v13 = 0xD000000000000025;
          unint64_t v12 = v5 | 0x8000000000000000;
          break;
        case 2:
          unint64_t v13 = 0xD00000000000002ELL;
          unint64_t v12 = v6 | 0x8000000000000000;
          break;
        case 3:
          unint64_t v13 = 0xD000000000000022;
          unint64_t v12 = v7 | 0x8000000000000000;
          break;
        case 4:
          unint64_t v12 = v8 | 0x8000000000000000;
          break;
        case 5:
          unint64_t v13 = 0xD000000000000022;
          unint64_t v12 = v9 | 0x8000000000000000;
          break;
        case 6:
          unint64_t v12 = v11 | 0x8000000000000000;
          unint64_t v13 = v10;
          break;
        default:
          break;
      }
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1)
      {
        uint64_t v27 = (char *)v6;
        uint64_t v28 = (const char *)v5;
        uint64_t v25 = (char *)v8;
        uint64_t v26 = (char *)v7;
        unint64_t v23 = v10;
        uint64_t v24 = (const char *)v9;
        uint64_t v22 = (char *)v11;
        sub_100012AA4(v14 > 1, v15 + 1, 1);
        unint64_t v11 = (unint64_t)v22;
        unint64_t v10 = v23;
        unint64_t v9 = (unint64_t)v24;
        unint64_t v8 = (unint64_t)v25;
        unint64_t v7 = (unint64_t)v26;
        unint64_t v6 = (unint64_t)v27;
        unint64_t v5 = (unint64_t)v28;
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      uint64_t v16 = (char *)&_swiftEmptyArrayStorage[2 * v15];
      *((void *)v16 + 4) = v13;
      *((void *)v16 + 5) = v12;
    }
    while (v4 != 7);
    type metadata accessor for KeyValueStoreCustomObserver();
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    id v18 = sub_10000588C(v29, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)sub_100014730, v17);
    uint64_t v19 = (void *)v0[6];
    v3[6] = v18;
    id v2 = v18;

    uint64_t v1 = 0;
  }
  id v20 = v1;
  return v2;
}

unint64_t sub_10000EBE0(char a1)
{
  unint64_t result = 0xD00000000000001BLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000025;
      break;
    case 2:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000022;
      break;
    case 5:
      unint64_t result = 0xD000000000000022;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10000ECA0(int a1, uint64_t a2, uint64_t a3)
{
  int v33 = a1;
  uint64_t v32 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unint64_t v31 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  unint64_t v29 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v27 = v38;
    uint64_t v26 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v25 = (void (**)(char *, uint64_t))(v7 + 8);
    v24[1] = a2;
    unint64_t v10 = (uint64_t *)(a2 + 40);
    uint64_t v28 = a3 + 16;
    uint64_t v11 = v32;
    do
    {
      uint64_t v13 = *(v10 - 1);
      uint64_t v12 = *v10;
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        unint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)Strong + 120);
        uint64_t v16 = swift_bridgeObjectRetain();
        uint64_t v35 = v15(v16);
        uint64_t v17 = swift_allocObject();
        swift_weakInit();
        uint64_t v18 = swift_allocObject();
        *(void *)(v18 + 16) = v17;
        *(unsigned char *)(v18 + 24) = v33;
        *(void *)(v18 + 32) = v13;
        *(void *)(v18 + 40) = v12;
        uint64_t v34 = v12;
        v38[2] = sub_100014780;
        v38[3] = v18;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        v38[0] = sub_100006FA4;
        v38[1] = &unk_1000860A8;
        uint64_t v19 = _Block_copy(aBlock);
        swift_bridgeObjectRetain();
        swift_retain();
        id v20 = v29;
        static DispatchQoS.unspecified.getter();
        uint64_t v36 = &_swiftEmptyArrayStorage;
        sub_10000AAC0((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000423C((uint64_t *)&unk_10008E960);
        sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
        uint64_t v21 = v31;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v22 = (void *)v35;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v19);

        (*v26)(v21, v11);
        (*v25)(v20, v30);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      v10 += 2;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    return notify_post("com.apple.bluetoothuser.prefsChanged");
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_10000F4E4(v33, 0, 0);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10000F0F8(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  return _objc_release_x1();
}

void (*sub_10000F104(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_10000E958();
  return sub_10000F14C;
}

void sub_10000F14C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  char v3 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = v2;
}

void sub_10000F15C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100038200();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Activate KeyValueStoreManager", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 192))(v10);
  (*(void (**)(void))((swift_isaMask & *v11) + 0xD8))();
}

void sub_10000F31C(char a1)
{
  uint64_t v2 = v1;
  if (a1)
  {
    if (v1[40]) {
      return;
    }
    uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 192))();
    (*(void (**)(void))((swift_isaMask & *v3) + 0xE8))();
    char v4 = 1;
  }
  else
  {
    if (!v1[40]) {
      return;
    }
    uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 192))();
    (*(void (**)(void))((swift_isaMask & *v3) + 0xF0))();
    char v4 = 0;
  }

  v2[40] = v4;
}

uint64_t sub_10000F428()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(*((uint64_t (**)(void))*v0 + 24))();
  (*(void (**)(void))((swift_isaMask & *v2) + 0xE0))();

  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v1, 56, 7);
}

uint64_t sub_10000F4E4(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v20 - 8);
  uint64_t v11 = __chkstk_darwin(v20);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v11);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(unsigned char *)(v16 + 24) = a1;
  *(void *)(v16 + 32) = a2;
  *(void *)(v16 + 40) = a3;
  aBlock[4] = sub_100014524;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100086058;
  uint64_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = &_swiftEmptyArrayStorage;
  sub_10000AAC0((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_10000F810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10000F88C(a2, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t sub_10000F88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = v3;
  uint64_t v27 = a2;
  uint64_t v7 = sub_10000423C(&qword_10008EBE0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = 0;
  uint64_t v11 = *((void *)v4 + 3);
  unint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &v32;
  *(void *)(v12 + 24) = v4;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_100014450;
  *(void *)(v13 + 24) = v12;
  uint64_t v30 = sub_1000144C0;
  uint64_t v31 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10000FBDC;
  unint64_t v29 = &unk_100085FE0;
  unint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    goto LABEL_12;
  }
  v26[1] = v12;
  if (a3)
  {
    swift_bridgeObjectRetain();
    char v4 = sub_100012724(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
    unint64_t v12 = *((void *)v4 + 2);
    unint64_t v16 = *((void *)v4 + 3);
    uint64_t v11 = (v12 + 1);
    if (v12 >= v16 >> 1) {
      goto LABEL_13;
    }
    while (1)
    {
      *((void *)v4 + 2) = v11;
      unint64_t v16 = (unint64_t)&v4[16 * v12];
      *(void *)(v16 + 32) = v27;
      *(void *)(v16 + 40) = a3;
      uint64_t v17 = v32;
      if (v32) {
        break;
      }
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      char v4 = sub_100012724((char *)(v16 > 1), (int64_t)v11, 1, v4);
    }
  }
  else
  {
    char v4 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v17 = v32;
    if (!v32) {
      goto LABEL_11;
    }
  }
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v19 = v17 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v27 = *(void *)(v8 + 72);
    v26[0] = v17;
    swift_bridgeObjectRetain();
    uint64_t v20 = (uint64_t)v10;
    uint64_t v21 = a1;
    do
    {
      sub_1000145C4(v19, v20, &qword_10008EBE0);
      sub_10000ACAC(v20, (uint64_t)aBlock);
      sub_10000E044(v20, &qword_10008EBE0);
      unint64_t v23 = v29;
      uint64_t v22 = v30;
      sub_10000AF14(aBlock, (uint64_t)v29);
      uint64_t v24 = (void (*)(uint64_t, char *, void *, uint64_t (*)()))*((void *)v22 + 1);
      swift_bridgeObjectRetain();
      v24(v21, v4, v23, v22);
      swift_bridgeObjectRelease();
      sub_1000057DC((uint64_t)aBlock);
      v19 += v27;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000FBDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10000FC04()
{
  uint64_t v0 = swift_allocObject();
  sub_10000FC3C();
  return v0;
}

uint64_t sub_10000FC3C()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  v13[5] = sub_100014588(0, (unint64_t *)&qword_10008E900);
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = _swiftEmptyArrayStorage;
  v13[3] = sub_10000AAC0((unint64_t *)&qword_10008EDE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  void v13[2] = sub_10000423C((uint64_t *)&unk_10008E910);
  v13[4] = sub_10000AC68((unint64_t *)&qword_10008EDF0, (uint64_t *)&unk_10008E910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v6 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v13[1] = v1 + 104;
  uint64_t v8 = v0;
  v7(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t v9 = v3;
  uint64_t v10 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v11 = v14;
  *(void *)(v14 + 16) = v10;
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v7(v9, v6, v8);
  *(void *)(v11 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v11 + 32) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  return v11;
}

uint64_t sub_10000FF6C()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_10000FFDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000423C(&qword_10008EBE0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000ACAC(a1, (uint64_t)v21);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = sub_10000423C((uint64_t *)&unk_10008EDB0);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_1000146BC, v10, v11, a3);
  sub_1000145C4(a3, (uint64_t)v9, &qword_10008EBE0);
  unint64_t v12 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)a2 + 160))(v21);
  uint64_t v14 = v13;
  unint64_t v15 = *v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_100012834(0, *(void *)(v15 + 16) + 1, 1, v15);
    unint64_t *v14 = v15;
  }
  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = sub_100012834(v17 > 1, v18 + 1, 1, v15);
    unint64_t *v14 = v15;
  }
  *(void *)(v15 + 16) = v18 + 1;
  sub_100013020((uint64_t)v9, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v18);
  return v12(v21, 0);
}

uint64_t sub_1000101E8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000423C(&qword_10008EBE0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v16 = *(void *)(v1 + 24);
  sub_1000145C4(a1, (uint64_t)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10008EBE0);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v1;
  sub_100013020((uint64_t)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12);
  aBlock[4] = sub_100013088;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100085E48;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_10000AAC0((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  return swift_release();
}

uint64_t sub_100010550(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000423C(&qword_10008EBE0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  unint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    unint64_t v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void **)(v24 + 72);
      sub_1000145C4(a3 + v16 + (void)v13 * v14, (uint64_t)v12, &qword_10008EBE0);
      char v17 = a1(v12);
      if (v3)
      {
        sub_10000E044((uint64_t)v12, &qword_10008EBE0);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }
      if (v17)
      {
        sub_100013020((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100012AC4(0, v15[2] + 1, 1);
        }
        unint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_100012AC4(v18 > 1, v19 + 1, 1);
          unint64_t v15 = v25;
        }
        v15[2] = v19 + 1;
        uint64_t result = sub_100013020(v23, (uint64_t)v15 + v16 + v19 * (void)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = sub_10000E044((uint64_t)v12, &qword_10008EBE0);
      }
      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_1000107A0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t sub_1000107E4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

void (*sub_100010828(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 160))();
  return sub_1000095B8;
}

uint64_t sub_1000108A4()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100010914@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6 = 0xD00000000000001BLL;
  unint64_t v7 = 0x800000010007A920;
  switch(a2)
  {
    case 1:
      uint64_t v6 = 0xD000000000000025;
      uint64_t v8 = "APLogCloudCollectionEnabledExpiration";
      goto LABEL_8;
    case 2:
      uint64_t v6 = 0xD00000000000002ELL;
      uint64_t v8 = "APLogCloudCollectionExpirationIntervalOverride";
      goto LABEL_8;
    case 3:
      uint64_t v6 = 0xD000000000000022;
      uint64_t v8 = "cloudPairingManagerEnabledOverride";
      goto LABEL_8;
    case 4:
      uint64_t v8 = "debugManagerEnabledOverride";
      goto LABEL_8;
    case 5:
      uint64_t v6 = 0xD000000000000022;
      uint64_t v8 = "intelligenceManagerEnabledOverride";
      goto LABEL_8;
    case 6:
      uint64_t v6 = 0xD000000000000018;
      uint64_t v8 = "internalStorageMigration";
LABEL_8:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  sub_100010A0C(v6, v7, a1, a3, a4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100010A0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v63 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v64 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  __chkstk_darwin(v13);
  unint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    uint64_t v30 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
    swift_beginAccess();
    id v31 = (id)*v30;
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = [v31 objectForKey:v32];
LABEL_9:
    id v34 = v33;

    if (v34)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100007A14(v66, v65);
    }
    else
    {
      memset(v65, 0, 32);
    }
    sub_10000423C(&qword_10008FE80);
    int v35 = swift_dynamicCast();
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(a5, v35 ^ 1u, 1, a4);
  }
  if (a3 != 1)
  {
    id v31 = [self standardUserDefaults];
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = [v31 valueForKey:v32];
    goto LABEL_9;
  }
  uint64_t v59 = v17;
  uint64_t v60 = v10;
  uint64_t v61 = v16;
  v62 = a5;
  uint64_t v20 = self;
  sub_10000423C((uint64_t *)&unk_10008F630);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1000747D0;
  *(void *)(v21 + 32) = a1;
  *(void *)(v21 + 40) = a2;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&v65[0] = 0;
  id v23 = [v20 readPrefKeys:isa error:v65];

  uint64_t v24 = *(void **)&v65[0];
  if (v23)
  {
    uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v26 = v24;

    *(void *)&v66[0] = a1;
    *((void *)&v66[0] + 1) = a2;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    uint64_t v27 = v61;
    if (*(void *)(v25 + 16) && (unint64_t v28 = sub_100007770((uint64_t)v65), (v29 & 1) != 0)) {
      sub_10000582C(*(void *)(v25 + 56) + 32 * v28, (uint64_t)v66);
    }
    else {
      memset(v66, 0, sizeof(v66));
    }
    swift_bridgeObjectRelease();
    sub_1000079C0((uint64_t)v65);
    sub_10000423C(&qword_10008FE80);
    char v37 = swift_dynamicCast();
    long long v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    if (v37)
    {
      v38(v15, 0, 1, a4);
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
      v39(v19, v15, a4);
      os_log_type_t v40 = v62;
      v39(v62, v19, a4);
      uint64_t v41 = v40;
      uint64_t v42 = 0;
    }
    else
    {
      v38(v15, 1, 1, a4);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v15, v12);
      uint64_t v41 = v62;
      uint64_t v42 = 1;
    }
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v38)(v41, v42, 1, a4);
  }
  else
  {
    id v43 = *(id *)&v65[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v44 = sub_100038434();
    uint64_t v46 = v63;
    uint64_t v45 = v64;
    uint64_t v47 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v64, v44, v60);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    os_log_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = v61;
    if (v50)
    {
      uint64_t v52 = swift_slowAlloc();
      os_log_t v58 = v48;
      uint64_t v53 = v52;
      uint64_t v59 = swift_slowAlloc();
      *(void *)&v65[0] = v59;
      *(_DWORD *)uint64_t v53 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)&v66[0] = sub_100004FA4(a1, a2, (uint64_t *)v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v53 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v54 = Error.localizedDescription.getter();
      *(void *)&v66[0] = sub_100004FA4(v54, v55, (uint64_t *)v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v56 = v58;
      _os_log_impl((void *)&_mh_execute_header, v58, v49, "Unable to get value for key: %s due to: %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v64, v47);
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v62, 1, 1, a4);
  }
}

unint64_t sub_1000111D8(char a1, char a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v8 = 0xD00000000000001BLL;
      sub_10000423C((uint64_t *)&unk_10008F630);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1000747D0;
      unint64_t v10 = 0x800000010007A920;
      uint64_t v11 = v9;
      unint64_t v12 = 0xD00000000000001BLL;
      switch(a2)
      {
        case 1:
          unint64_t v12 = 0xD000000000000025;
          uint64_t v13 = "APLogCloudCollectionEnabledExpiration";
          goto LABEL_12;
        case 2:
          unint64_t v12 = 0xD00000000000002ELL;
          uint64_t v13 = "APLogCloudCollectionExpirationIntervalOverride";
          goto LABEL_12;
        case 3:
          unint64_t v12 = 0xD000000000000022;
          uint64_t v13 = "cloudPairingManagerEnabledOverride";
          goto LABEL_12;
        case 4:
          uint64_t v13 = "debugManagerEnabledOverride";
          goto LABEL_12;
        case 5:
          unint64_t v12 = 0xD000000000000022;
          uint64_t v13 = "intelligenceManagerEnabledOverride";
          goto LABEL_12;
        case 6:
          unint64_t v12 = 0xD000000000000018;
          uint64_t v13 = "internalStorageMigration";
LABEL_12:
          unint64_t v10 = (unint64_t)(v13 - 32) | 0x8000000000000000;
          break;
        default:
          break;
      }
      uint64_t v16 = self;
      *(void *)(v11 + 32) = v12;
      *(void *)(v11 + 40) = v10;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v44[0] = 0;
      id v18 = [v16 readPrefKeys:isa error:v44];

      id v19 = v44[0];
      if (v18)
      {
        uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
        id v21 = v19;

        unint64_t v22 = 0x800000010007A920;
        switch(a2)
        {
          case 0:
            goto LABEL_26;
          case 1:
            uint64_t v8 = 0xD000000000000025;
            id v23 = "APLogCloudCollectionEnabledExpiration";
            goto LABEL_25;
          case 2:
            uint64_t v8 = 0xD00000000000002ELL;
            id v23 = "APLogCloudCollectionExpirationIntervalOverride";
            goto LABEL_25;
          case 3:
            uint64_t v8 = 0xD000000000000022;
            id v23 = "cloudPairingManagerEnabledOverride";
            goto LABEL_25;
          case 4:
            id v23 = "debugManagerEnabledOverride";
            goto LABEL_25;
          case 5:
            uint64_t v8 = 0xD000000000000022;
            id v23 = "intelligenceManagerEnabledOverride";
            goto LABEL_25;
          case 6:
            uint64_t v8 = 0xD000000000000018;
            id v23 = "internalStorageMigration";
LABEL_25:
            unint64_t v22 = (unint64_t)(v23 - 32) | 0x8000000000000000;
LABEL_26:
            uint64_t v42 = v8;
            unint64_t v43 = v22;
            AnyHashable.init<A>(_:)();
            if (*(void *)(v20 + 16) && (unint64_t v35 = sub_100007770((uint64_t)v44), (v36 & 1) != 0))
            {
              sub_10000582C(*(void *)(v20 + 56) + 32 * v35, (uint64_t)&v45);
            }
            else
            {
              long long v45 = 0u;
              long long v46 = 0u;
            }
            swift_bridgeObjectRelease();
            sub_1000079C0((uint64_t)v44);
            if (!*((void *)&v46 + 1))
            {
              sub_10000E044((uint64_t)&v45, &qword_10008FE80);
              return 0;
            }
            if ((swift_dynamicCast() & 1) == 0) {
              return 0;
            }
            unint64_t v33 = v42;
            break;
          default:
            goto LABEL_44;
        }
      }
      else
      {
        id v24 = v44[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        uint64_t v25 = sub_100038434();
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v25, v4);
        swift_errorRetain();
        swift_errorRetain();
        id v26 = Logger.logObject.getter();
        int v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, (os_log_type_t)v27))
        {
          int v41 = v27;
          uint64_t v28 = swift_slowAlloc();
          os_log_type_t v40 = (void *)swift_slowAlloc();
          v44[0] = v40;
          *(_DWORD *)uint64_t v28 = 136315394;
          unint64_t v29 = 0x800000010007A920;
          switch(a2)
          {
            case 0:
              goto LABEL_40;
            case 1:
              uint64_t v8 = 0xD000000000000025;
              uint64_t v30 = "APLogCloudCollectionEnabledExpiration";
              goto LABEL_39;
            case 2:
              uint64_t v8 = 0xD00000000000002ELL;
              uint64_t v30 = "APLogCloudCollectionExpirationIntervalOverride";
              goto LABEL_39;
            case 3:
              uint64_t v8 = 0xD000000000000022;
              uint64_t v30 = "cloudPairingManagerEnabledOverride";
              goto LABEL_39;
            case 4:
              uint64_t v30 = "debugManagerEnabledOverride";
              goto LABEL_39;
            case 5:
              uint64_t v8 = 0xD000000000000022;
              uint64_t v30 = "intelligenceManagerEnabledOverride";
              goto LABEL_39;
            case 6:
              uint64_t v8 = 0xD000000000000018;
              uint64_t v30 = "internalStorageMigration";
LABEL_39:
              unint64_t v29 = (unint64_t)(v30 - 32) | 0x8000000000000000;
LABEL_40:
              *(void *)&long long v45 = sub_100004FA4(v8, v29, (uint64_t *)v44);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v28 + 12) = 2080;
              swift_getErrorValue();
              uint64_t v37 = Error.localizedDescription.getter();
              *(void *)&long long v45 = sub_100004FA4(v37, v38, (uint64_t *)v44);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v41, "Unable to get BOOL for key: %s due to: %s", (uint8_t *)v28, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              swift_errorRelease();
              break;
            default:
LABEL_44:
              JUMPOUT(0);
          }
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return 0;
      }
    }
    else
    {
      id v15 = [self standardUserDefaults];
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unint64_t v33 = (unint64_t)[v15 BOOLForKey:v34];
    }
  }
  else
  {
    uint64_t v14 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
    swift_beginAccess();
    id v31 = (id)*v14;
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unint64_t v33 = (unint64_t)[v31 BOOLForKey:v32];
  }
  return v33;
}

double sub_100011A70(char a1, char a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    uint64_t v14 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
    swift_beginAccess();
    id v31 = (id)*v14;
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v31 doubleForKey:v32];
    double v34 = v33;

LABEL_20:
    return v34;
  }
  if (a1 != 1)
  {
    id v15 = [self standardUserDefaults];
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v15 doubleForKey:v32];
    double v34 = v35;

    goto LABEL_20;
  }
  uint64_t v8 = 0xD00000000000001BLL;
  sub_10000423C((uint64_t *)&unk_10008F630);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000747D0;
  unint64_t v10 = 0x800000010007A920;
  uint64_t v11 = v9;
  unint64_t v12 = 0xD00000000000001BLL;
  switch(a2)
  {
    case 1:
      unint64_t v12 = 0xD000000000000025;
      uint64_t v13 = "APLogCloudCollectionEnabledExpiration";
      goto LABEL_12;
    case 2:
      unint64_t v12 = 0xD00000000000002ELL;
      uint64_t v13 = "APLogCloudCollectionExpirationIntervalOverride";
      goto LABEL_12;
    case 3:
      unint64_t v12 = 0xD000000000000022;
      uint64_t v13 = "cloudPairingManagerEnabledOverride";
      goto LABEL_12;
    case 4:
      uint64_t v13 = "debugManagerEnabledOverride";
      goto LABEL_12;
    case 5:
      unint64_t v12 = 0xD000000000000022;
      uint64_t v13 = "intelligenceManagerEnabledOverride";
      goto LABEL_12;
    case 6:
      unint64_t v12 = 0xD000000000000018;
      uint64_t v13 = "internalStorageMigration";
LABEL_12:
      unint64_t v10 = (unint64_t)(v13 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  uint64_t v16 = self;
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v10;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v45[0] = 0;
  id v18 = [v16 readPrefKeys:isa error:v45];

  id v19 = v45[0];
  if (v18)
  {
    uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v21 = v19;

    unint64_t v22 = 0x800000010007A920;
    switch(a2)
    {
      case 0:
        goto LABEL_27;
      case 1:
        uint64_t v8 = 0xD000000000000025;
        id v23 = "APLogCloudCollectionEnabledExpiration";
        goto LABEL_26;
      case 2:
        uint64_t v8 = 0xD00000000000002ELL;
        id v23 = "APLogCloudCollectionExpirationIntervalOverride";
        goto LABEL_26;
      case 3:
        uint64_t v8 = 0xD000000000000022;
        id v23 = "cloudPairingManagerEnabledOverride";
        goto LABEL_26;
      case 4:
        id v23 = "debugManagerEnabledOverride";
        goto LABEL_26;
      case 5:
        uint64_t v8 = 0xD000000000000022;
        id v23 = "intelligenceManagerEnabledOverride";
        goto LABEL_26;
      case 6:
        uint64_t v8 = 0xD000000000000018;
        id v23 = "internalStorageMigration";
LABEL_26:
        unint64_t v22 = (unint64_t)(v23 - 32) | 0x8000000000000000;
LABEL_27:
        double v43 = *(double *)&v8;
        unint64_t v44 = v22;
        AnyHashable.init<A>(_:)();
        if (*(void *)(v20 + 16) && (unint64_t v36 = sub_100007770((uint64_t)v45), (v37 & 1) != 0))
        {
          sub_10000582C(*(void *)(v20 + 56) + 32 * v36, (uint64_t)&v46);
        }
        else
        {
          long long v46 = 0u;
          long long v47 = 0u;
        }
        swift_bridgeObjectRelease();
        sub_1000079C0((uint64_t)v45);
        if (!*((void *)&v47 + 1))
        {
          sub_10000E044((uint64_t)&v46, &qword_10008FE80);
          return 0.0;
        }
        if ((swift_dynamicCast() & 1) == 0) {
          return 0.0;
        }
        double v34 = v43;
        break;
      default:
        goto LABEL_45;
    }
  }
  else
  {
    id v24 = v45[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v25 = sub_100038434();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v25, v4);
    swift_errorRetain();
    swift_errorRetain();
    id v26 = Logger.logObject.getter();
    int v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, (os_log_type_t)v27))
    {
      int v42 = v27;
      uint64_t v28 = swift_slowAlloc();
      int v41 = (void *)swift_slowAlloc();
      v45[0] = v41;
      *(_DWORD *)uint64_t v28 = 136315394;
      unint64_t v29 = 0x800000010007A920;
      switch(a2)
      {
        case 0:
          goto LABEL_41;
        case 1:
          uint64_t v8 = 0xD000000000000025;
          uint64_t v30 = "APLogCloudCollectionEnabledExpiration";
          goto LABEL_40;
        case 2:
          uint64_t v8 = 0xD00000000000002ELL;
          uint64_t v30 = "APLogCloudCollectionExpirationIntervalOverride";
          goto LABEL_40;
        case 3:
          uint64_t v8 = 0xD000000000000022;
          uint64_t v30 = "cloudPairingManagerEnabledOverride";
          goto LABEL_40;
        case 4:
          uint64_t v30 = "debugManagerEnabledOverride";
          goto LABEL_40;
        case 5:
          uint64_t v8 = 0xD000000000000022;
          uint64_t v30 = "intelligenceManagerEnabledOverride";
          goto LABEL_40;
        case 6:
          uint64_t v8 = 0xD000000000000018;
          uint64_t v30 = "internalStorageMigration";
LABEL_40:
          unint64_t v29 = (unint64_t)(v30 - 32) | 0x8000000000000000;
LABEL_41:
          *(void *)&long long v46 = sub_100004FA4(v8, v29, (uint64_t *)v45);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v28 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v38 = Error.localizedDescription.getter();
          *(void *)&long long v46 = sub_100004FA4(v38, v39, (uint64_t *)v45);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v42, "Unable to get double for key: %s due to: %s", (uint8_t *)v28, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          break;
        default:
LABEL_45:
          JUMPOUT(0);
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0.0;
  }
  return v34;
}

uint64_t sub_10001230C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = 0xD00000000000001BLL;
  unint64_t v4 = 0x800000010007A920;
  switch(a3)
  {
    case 1:
      uint64_t v3 = 0xD000000000000025;
      unint64_t v7 = "APLogCloudCollectionEnabledExpiration";
      goto LABEL_8;
    case 2:
      uint64_t v3 = 0xD00000000000002ELL;
      unint64_t v7 = "APLogCloudCollectionExpirationIntervalOverride";
      goto LABEL_8;
    case 3:
      uint64_t v3 = 0xD000000000000022;
      unint64_t v7 = "cloudPairingManagerEnabledOverride";
      goto LABEL_8;
    case 4:
      unint64_t v7 = "debugManagerEnabledOverride";
      goto LABEL_8;
    case 5:
      uint64_t v3 = 0xD000000000000022;
      unint64_t v7 = "intelligenceManagerEnabledOverride";
      goto LABEL_8;
    case 6:
      uint64_t v3 = 0xD000000000000018;
      unint64_t v7 = "internalStorageMigration";
LABEL_8:
      unint64_t v4 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v8; ++i)
    {
      uint64_t v10 = a1 + i;
      sub_1000133D4(*(unsigned char *)(v10 + 32), v3, v4, a2);
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100012458(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = 0xD00000000000001BLL;
  unint64_t v5 = 0x800000010007A920;
  switch(a3)
  {
    case 1:
      uint64_t v4 = 0xD000000000000025;
      uint64_t v6 = "APLogCloudCollectionEnabledExpiration";
      goto LABEL_8;
    case 2:
      uint64_t v4 = 0xD00000000000002ELL;
      uint64_t v6 = "APLogCloudCollectionExpirationIntervalOverride";
      goto LABEL_8;
    case 3:
      uint64_t v4 = 0xD000000000000022;
      uint64_t v6 = "cloudPairingManagerEnabledOverride";
      goto LABEL_8;
    case 4:
      uint64_t v6 = "debugManagerEnabledOverride";
      goto LABEL_8;
    case 5:
      uint64_t v4 = 0xD000000000000022;
      uint64_t v6 = "intelligenceManagerEnabledOverride";
      goto LABEL_8;
    case 6:
      uint64_t v4 = 0xD000000000000018;
      uint64_t v6 = "internalStorageMigration";
LABEL_8:
      unint64_t v5 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  sub_1000133D4(a1, v4, v5, a2);

  return swift_bridgeObjectRelease();
}

unint64_t sub_10001254C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000423C(&qword_100090150);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000145C4(v6, (uint64_t)v15, &qword_1000901C0);
    unint64_t result = sub_100007770((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100007A14(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100012690(unsigned __int8 *a1, char *a2)
{
  return sub_10000E0E4(*a1, *a2);
}

Swift::Int sub_10001269C()
{
  return sub_10000E5C8();
}

uint64_t sub_1000126A8()
{
  return sub_10000E410();
}

Swift::Int sub_1000126B0()
{
  return sub_10000E5C8();
}

unint64_t sub_1000126B8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100013F38(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000126E8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10000EBE0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100012714(void *a1@<X8>)
{
  *a1 = &off_100085D30;
}

char *sub_100012724(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000423C((uint64_t *)&unk_10008F630);
      long long v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      BOOL v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v10 = (char *)&_swiftEmptyArrayStorage;
      BOOL v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100013184(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100012834(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    BOOL v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000423C(&qword_10008EDA0);
  uint64_t v10 = *(void *)(sub_10000423C(&qword_10008EBE0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  BOOL v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_10000423C(&qword_10008EBE0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100013278(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_100012AA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100012AE4(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_100012AC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100012C50(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100012AE4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000423C((uint64_t *)&unk_10008F630);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  BOOL v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100012C50(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    BOOL v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000423C(&qword_10008EDA0);
  uint64_t v10 = *(void *)(sub_10000423C(&qword_10008EBE0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  BOOL v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_10000423C(&qword_10008EBE0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (char *)v13 + v17;
  id v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  id v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100012E98(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100085CA0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100012EE4@<X0>(uint64_t a1@<X8>)
{
  return sub_10000FFDC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100012F10()
{
  uint64_t v1 = (int *)(sub_10000423C(&qword_10008EBE0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_1000057DC(v6);
  uint64_t v7 = v6 + v1[9];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100013020(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008EBE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013088()
{
  uint64_t v1 = *(void *)(sub_10000423C(&qword_10008EBE0) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 144))();
  v7[2] = v3;
  uint64_t v5 = sub_100010550((uint64_t (*)(char *))sub_100014628, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 152))(v5);
}

uint64_t sub_10001316C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001317C()
{
  return swift_release();
}

uint64_t sub_100013184(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100013278(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_10000423C(&qword_10008EBE0) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000133D4(char a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = &v69[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  size_t v14 = &v69[-v13];
  if (a1)
  {
    if (a1 == 1)
    {
      NSString v15 = String._bridgeToObjectiveC()();
      sub_1000145C4(a4, (uint64_t)&v77, &qword_10008FE80);
      if (v78)
      {
        sub_100007A14(&v77, &v79);
      }
      else
      {
        id v35 = [objc_allocWithZone((Class)NSNull) init];
        uint64_t v80 = sub_100014588(0, &qword_10008ED90);
        *(void *)&long long v79 = v35;
        sub_10000E044((uint64_t)&v77, &qword_10008FE80);
      }
      unint64_t v36 = self;
      sub_10000AF14(&v79, v80);
      uint64_t v37 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_1000057DC((uint64_t)&v79);
      *(void *)&long long v79 = 0;
      LODWORD(v36) = [v36 writePrefKey:v15 value:v37 error:&v79];

      swift_unknownObjectRelease();
      id v38 = (id)v79;
      if (v36)
      {
        notify_post("com.apple.bluetooth.prefsChanged");
      }
      else
      {
        unint64_t v39 = v38;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        uint64_t v40 = sub_100038434();
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v12, v40, v8);
        swift_bridgeObjectRetain();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        int v41 = Logger.logObject.getter();
        int v42 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v41, (os_log_type_t)v42))
        {
          uint64_t v43 = swift_slowAlloc();
          *(void *)&long long v74 = v8;
          uint64_t v44 = v43;
          *(void *)&long long v79 = swift_slowAlloc();
          *(_DWORD *)uint64_t v44 = 136315394;
          os_log_t v72 = v41;
          swift_bridgeObjectRetain();
          *(void *)&long long v77 = sub_100004FA4(a2, a3, (uint64_t *)&v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v44 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v45 = Error.localizedDescription.getter();
          *(void *)&long long v77 = sub_100004FA4(v45, v46, (uint64_t *)&v79);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          os_log_t v47 = v72;
          _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v42, "Unable to get value for key: %s due to: %s", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          (*(void (**)(unsigned char *, void))(v9 + 8))(v12, v74);
        }
        else
        {
          swift_errorRelease();
          swift_bridgeObjectRelease_n();
          swift_errorRelease();
          swift_errorRelease();

          (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
        }
      }
    }
    else
    {
      int v27 = self;
      id v28 = [v27 standardUserDefaults];
      sub_1000145C4(a4, (uint64_t)&v79, &qword_10008FE80);
      uint64_t v29 = v80;
      if (v80)
      {
        uint64_t v30 = sub_10000AF14(&v79, v80);
        uint64_t v31 = *(void *)(v29 - 8);
        __chkstk_darwin(v30);
        double v33 = &v69[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
        (*(void (**)(unsigned char *))(v31 + 16))(v33);
        uint64_t v34 = _bridgeAnythingToObjectiveC<A>(_:)();
        (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v33, v29);
        sub_1000057DC((uint64_t)&v79);
      }
      else
      {
        uint64_t v34 = 0;
      }
      NSString v67 = String._bridgeToObjectiveC()();
      [v28 setValue:v34 forKey:v67];

      swift_unknownObjectRelease();
      id v68 = [v27 standardUserDefaults];
      [v68 synchronize];
    }
  }
  else
  {
    uint64_t v73 = v9;
    *(void *)&long long v74 = v8;
    uint64_t v16 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
    swift_beginAccess();
    os_log_t v72 = (os_log_t)v16;
    unint64_t v17 = (void *)*v16;
    sub_1000145C4(a4, (uint64_t)&v79, &qword_10008FE80);
    uint64_t v18 = v80;
    if (v80)
    {
      id v19 = sub_10000AF14(&v79, v80);
      uint64_t v20 = *(void *)(v18 - 8);
      __chkstk_darwin(v19);
      uint64_t v22 = a2;
      id v23 = &v69[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(unsigned char *))(v20 + 16))(v23);
      id v24 = v17;
      uint64_t v25 = _bridgeAnythingToObjectiveC<A>(_:)();
      id v26 = v23;
      a2 = v22;
      (*(void (**)(unsigned char *, uint64_t))(v20 + 8))(v26, v18);
      sub_1000057DC((uint64_t)&v79);
    }
    else
    {
      id v48 = v17;
      uint64_t v25 = 0;
    }
    NSString v49 = String._bridgeToObjectiveC()();
    [v17 setObject:v25 forKey:v49];

    swift_unknownObjectRelease();
    uint64_t v50 = sub_100038434();
    uint64_t v51 = v73;
    uint64_t v52 = v74;
    (*(void (**)(unsigned char *, uint64_t, void))(v73 + 16))(v14, v50, v74);
    sub_1000145C4(a4, (uint64_t)&v79, &qword_10008FE80);
    swift_bridgeObjectRetain_n();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    int v55 = v54;
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v56 = swift_slowAlloc();
      int v70 = v55;
      uint64_t v57 = v56;
      uint64_t v71 = swift_slowAlloc();
      uint64_t v76 = v71;
      *(_DWORD *)uint64_t v57 = 136315650;
      swift_bridgeObjectRetain();
      *(void *)&long long v77 = sub_100004FA4(a2, a3, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v57 + 12) = 2080;
      sub_1000145C4((uint64_t)&v79, (uint64_t)&v77, &qword_10008FE80);
      sub_10000423C(&qword_10008FE80);
      uint64_t v58 = String.init<A>(describing:)();
      *(void *)&long long v77 = sub_100004FA4(v58, v59, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000E044((uint64_t)&v79, &qword_10008FE80);
      *(_WORD *)(v57 + 22) = 1024;
      os_log_t v60 = v72;
      swift_beginAccess();
      unsigned int v75 = [(objc_class *)v60->isa synchronize];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v70, "Cloud defaults update %s: %s, synchronized: %{BOOL}d", (uint8_t *)v57, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(unsigned char *, void))(v73 + 8))(v14, v74);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_10000E044((uint64_t)&v79, &qword_10008FE80);

      (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v14, v52);
    }
    id v61 = [self defaultCenter];
    NSString v62 = String._bridgeToObjectiveC()();
    sub_10000423C(&qword_10008ED98);
    uint64_t inited = swift_initStackObject();
    long long v74 = xmmword_1000747D0;
    *(_OWORD *)(inited + 16) = xmmword_1000747D0;
    *(void *)&long long v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v79 + 1) = v64;
    AnyHashable.init<A>(_:)();
    sub_10000423C((uint64_t *)&unk_10008F630);
    uint64_t v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = v74;
    *(void *)(v65 + 32) = a2;
    *(void *)(v65 + 40) = a3;
    *(void *)(inited + 96) = sub_10000423C(&qword_10008FDD0);
    *(void *)(inited + 72) = v65;
    swift_bridgeObjectRetain();
    sub_10001254C(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v61 postNotificationName:v62 object:0 userInfo:isa];
  }
}

unint64_t sub_100013F38(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100085D58, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

unint64_t sub_100013F88()
{
  unint64_t result = qword_10008EBE8;
  if (!qword_10008EBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EBE8);
  }
  return result;
}

uint64_t sub_100013FDC()
{
  return sub_10000AC68(&qword_10008EBF0, &qword_10008EBF8);
}

unint64_t sub_10001401C()
{
  unint64_t result = qword_10008EC30;
  if (!qword_10008EC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EC30);
  }
  return result;
}

uint64_t sub_100014070()
{
  return sub_10000AC68(&qword_10008EC38, &qword_10008EC40);
}

unsigned char *initializeBufferWithCopyOfBuffer for KeyValueSource(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for KeyValueSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KeyValueSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100014218);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_100014240(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100014248(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for KeyValueSource()
{
  return &type metadata for KeyValueSource;
}

uint64_t type metadata accessor for KeyValueStoreManager()
{
  return self;
}

uint64_t getEnumTagSinglePayload for KeyValueStoreManager.Defaults(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KeyValueStoreManager.Defaults(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000143E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyValueStoreManager.Defaults()
{
  return &type metadata for KeyValueStoreManager.Defaults;
}

uint64_t sub_100014418()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100014450()
{
  uint64_t v1 = *(void **)(v0 + 16);
  void *v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 144))();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000144B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000144C0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000144E8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100014524()
{
  return sub_10000F810(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

unint64_t sub_100014534()
{
  unint64_t result = qword_10008ED88;
  if (!qword_10008ED88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008ED88);
  }
  return result;
}

uint64_t sub_100014588(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000145C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000423C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

BOOL sub_100014628()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_1000146BC(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000101E8(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100014730(int a1, uint64_t a2)
{
  return sub_10000ECA0(a1, a2, v2);
}

uint64_t sub_10001473C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001479C@<X0>(uint64_t a1@<X8>)
{
  return sub_100012EE4(a1);
}

void *sub_1000147BC()
{
  uint64_t v0 = type metadata accessor for URL();
  sub_1000370B0(v0, qword_1000949C0);
  uint64_t v1 = sub_100014818(v0, (uint64_t)qword_1000949C0);
  type metadata accessor for UserFileManager();
  return sub_10003F2D0(v1);
}

uint64_t sub_100014818(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100014850()
{
  _StringGuts.grow(_:)(78);
  v1._uint64_t countAndFlagsBits = 0xD000000000000025;
  v1._object = (void *)0x800000010007AB50;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  int v3 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x800000010007AB80;
  v5._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v5);
  uint64_t v6 = v0[2];
  BOOL v7 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x4449656E6F7A202CLL;
  v9._object = (void *)0xEB00000000203A73;
  String.append(_:)(v9);
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100014984(char a1)
{
  if (!a1) {
    return 0x696669746E656469;
  }
  if (a1 == 1) {
    return 0xD000000000000013;
  }
  return 0x734449656E6F7ALL;
}

uint64_t sub_1000149EC()
{
  return sub_100014984(*v0);
}

uint64_t sub_1000149F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100030264(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100014A1C()
{
  return 0;
}

void sub_100014A28(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100014A34(uint64_t a1)
{
  unint64_t v2 = sub_100014C7C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100014A70(uint64_t a1)
{
  unint64_t v2 = sub_100014C7C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100014AAC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000423C((uint64_t *)&unk_10008EDC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000AF14(a1, a1[3]);
  sub_100014C7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 32);
    v10[15] = 2;
    sub_10000423C(&qword_10008FDD0);
    sub_10003704C((unint64_t *)&unk_10008EDD0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100014C7C()
{
  unint64_t result = qword_1000918F8;
  if (!qword_1000918F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000918F8);
  }
  return result;
}

uint64_t sub_100014CD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t sub_100014CE0@<X0>(uint64_t a1@<X8>)
{
  if (qword_1000918F0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = sub_100014818(v2, (uint64_t)qword_1000949C0);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

double sub_100014DA4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000303B4(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100014DEC(void *a1)
{
  return sub_100014AAC(a1);
}

BOOL sub_100014E14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100014E28()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100014E70()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100014E9C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100014EE0@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_100014F50(long long *a1)
{
  long long v3 = *a1;
  long long v7 = a1[1];
  long long v8 = v3;
  uint64_t v6 = *((void *)a1 + 4);
  swift_beginAccess();
  long long v4 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v4;
  *(void *)(v1 + 48) = *((void *)a1 + 4);
  sub_100004844((uint64_t)&v8);
  sub_100004844((uint64_t)&v7);
  sub_100030698((uint64_t)&v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000306C4((uint64_t)&v8);
  sub_1000306C4((uint64_t)&v7);
  return sub_1000306F0((uint64_t)&v6);
}

uint64_t sub_10001500C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100015044(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10001508C())()
{
  return j__swift_endAccess;
}

id sub_1000150E0()
{
  uint64_t v1 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container);
  }
  else
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v0 + 256))(&v9);
    long long v12 = v9;
    sub_1000306C4((uint64_t)&v12);
    uint64_t v11 = v10;
    sub_1000306F0((uint64_t)&v11);
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v5 = [self containerWithIdentifier:v4];

    uint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_1000151E4()
{
  return sub_100015298(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudZoneSetupGroup);
}

id sub_100015208()
{
  return sub_100015298(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___susbscriptionSetupGroup);
}

id sub_10001522C()
{
  return sub_100015298(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___fetchDatabaseGroup);
}

id sub_100015250()
{
  return sub_100015298(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudUserActionExplicitGroup);
}

id sub_100015274()
{
  return sub_100015298(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___deferredUpdatesGroup);
}

id sub_100015298(uint64_t *a1)
{
  uint64_t v2 = *a1;
  id v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }
  else
  {
    id v5 = [objc_allocWithZone((Class)CKOperationGroup) init];
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setName:v6];

    id v7 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = v5;
    id v4 = v5;

    id v3 = 0;
  }
  id v8 = v3;
  return v4;
}

uint64_t sub_100015344()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v5 = *(void **)(v0 + 56);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.notOnQueue(_:), v1);
  v5;
  char v6 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v6)
  {
    OS_dispatch_queue.sync<A>(execute:)();
    return v8[15];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100015488(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (void *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)(v1 + 56);
  *char v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  char v9 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(unsigned char *)(v11 + 24) = a1;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1000307AC;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_1000144C0;
  void aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10000FBDC;
  void aBlock[3] = &unk_100086120;
  char v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v13);
  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_1000156C0(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_100015700(a1);
  return v2;
}

void *sub_100015700(long long *a1)
{
  uint64_t v2 = v1;
  unint64_t v39 = a1;
  uint64_t v46 = type metadata accessor for URL.DirectoryHint();
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  int v42 = &v37[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v45 = type metadata accessor for URL();
  uint64_t v43 = *(void *)(v45 - 8);
  uint64_t v4 = __chkstk_darwin(v45);
  uint64_t v40 = &v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  int v41 = &v37[-v6];
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  __chkstk_darwin(v7);
  uint64_t v50 = &v37[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v10 - 8);
  uint64_t v47 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  char v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100014588(0, (unint64_t *)&qword_10008E900);
  unsigned int v38 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  size_t v14 = *(void (**)(void))(v11 + 104);
  uint64_t v48 = v11 + 104;
  NSString v49 = (void (*)(unsigned char *, void, uint64_t))v14;
  v14(v13);
  static DispatchQoS.unspecified.getter();
  *(void *)&v57[0] = _swiftEmptyArrayStorage;
  sub_100032010((unint64_t *)&qword_10008EDE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000423C((uint64_t *)&unk_10008E910);
  sub_10000AC68((unint64_t *)&qword_10008EDF0, (uint64_t *)&unk_10008E910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v1[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v49(v13, v38, v47);
  static DispatchQoS.unspecified.getter();
  *(void *)&v57[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v1[8] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static DispatchQoS.unspecified.getter();
  *(void *)&v57[0] = _swiftEmptyArrayStorage;
  NSString v15 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v49(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v47);
  v1[9] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[10] = _swiftEmptyArrayStorage;
  uint64_t v16 = (char *)v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription;
  uint64_t v17 = sub_10000423C(&qword_10008EAB0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = (char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription;
  uint64_t v19 = sub_10000423C((uint64_t *)&unk_10008E950);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(void *)((char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container) = 0;
  *(void *)((char *)v2
            + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudZoneSetupGroup) = 0;
  *(void *)((char *)v2
            + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___susbscriptionSetupGroup) = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___fetchDatabaseGroup) = 0;
  *(void *)((char *)v2
            + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudUserActionExplicitGroup) = 0;
  *(void *)((char *)v2
            + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___deferredUpdatesGroup) = 0;
  *((unsigned char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable) = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_currentAccountStatus) = 0;
  *((unsigned char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_initialUploadDone) = 0;
  *((unsigned char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords) = &_swiftEmptyDictionarySingleton;
  *(void *)((char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords) = &_swiftEmptyDictionarySingleton;
  *(void *)((char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity) = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer) = 0;
  uint64_t v20 = sub_100038360();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v51 + 16))(v50, v20, v52);
  long long v21 = *v15;
  long long v56 = v15[1];
  v57[0] = v21;
  uint64_t v55 = *((void *)v15 + 4);
  sub_100004844((uint64_t)v57);
  sub_100004844((uint64_t)&v56);
  sub_100030698((uint64_t)&v55);
  sub_100004844((uint64_t)v57);
  sub_100004844((uint64_t)&v56);
  sub_100030698((uint64_t)&v55);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v54 = swift_slowAlloc();
    *(_DWORD *)id v24 = 136315138;
    sub_100004844((uint64_t)v57);
    sub_100004844((uint64_t)&v56);
    sub_100030698((uint64_t)&v55);
    uint64_t v25 = sub_100014850();
    unint64_t v27 = v26;
    sub_1000306C4((uint64_t)v57);
    sub_1000306C4((uint64_t)&v56);
    sub_1000306F0((uint64_t)&v55);
    uint64_t v53 = sub_100004FA4(v25, v27, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000306C4((uint64_t)v57);
    sub_1000306C4((uint64_t)&v56);
    sub_1000306F0((uint64_t)&v55);
    sub_1000306C4((uint64_t)v57);
    sub_1000306C4((uint64_t)&v56);
    sub_1000306F0((uint64_t)&v55);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Initializing CloudStorageCoordinator with %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000306C4((uint64_t)v57);
    sub_1000306C4((uint64_t)&v56);
    sub_1000306F0((uint64_t)&v55);
    sub_1000306C4((uint64_t)v57);
    sub_1000306C4((uint64_t)&v56);
    sub_1000306F0((uint64_t)&v55);
  }

  (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v50, v52);
  long long v28 = v15[1];
  *((_OWORD *)v2 + 1) = *v15;
  *((_OWORD *)v2 + 2) = v28;
  v2[6] = *((void *)v15 + 4);
  type metadata accessor for UserFileManager();
  sub_100004844((uint64_t)v57);
  sub_100004844((uint64_t)&v56);
  sub_100030698((uint64_t)&v55);
  uint64_t v29 = v40;
  sub_10003F2D0((uint64_t)v40);
  long long v54 = v57[0];
  uint64_t v30 = v44;
  uint64_t v31 = v42;
  uint64_t v32 = v46;
  (*(void (**)(unsigned char *, void, uint64_t))(v44 + 104))(v42, enum case for URL.DirectoryHint.isDirectory(_:), v46);
  sub_100030800();
  double v33 = v41;
  URL.appending<A>(path:directoryHint:)();
  sub_1000306C4((uint64_t)&v56);
  sub_1000306F0((uint64_t)&v55);
  (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v31, v32);
  swift_bridgeObjectRelease();
  uint64_t v34 = v43;
  uint64_t v35 = v45;
  (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v29, v45);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v34 + 32))((uint64_t)v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_tokenDirectory, v33, v35);
  return v2;
}

uint64_t sub_1000160D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000423C((uint64_t *)&unk_10008EE00);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v24 - v6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if ((v30[0] & 1) == 0)
  {
    uint64_t v13 = sub_100038360();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
    swift_retain_n();
    size_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v29[0] = v26;
      uint64_t v25 = v16;
      *(_DWORD *)uint64_t v16 = 136315138;
      v24[1] = v16 + 4;
      (*(void (**)(_OWORD *__return_ptr))(*(void *)v0 + 256))(v30);
      long long v33 = v30[1];
      long long v34 = v30[0];
      uint64_t v32 = v31;
      uint64_t v17 = sub_100014850();
      unint64_t v27 = v5;
      unint64_t v19 = v18;
      sub_1000306C4((uint64_t)&v34);
      sub_1000306C4((uint64_t)&v33);
      sub_1000306F0((uint64_t)&v32);
      uint64_t v28 = sub_100004FA4(v17, v19, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v5 = v27;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Activating CloudStorageCoordinator with %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_10001686C();
    uint64_t v20 = (void *)*sub_100007E6C();
    v29[3] = type metadata accessor for CloudStorageCoordinator();
    v29[4] = (uint64_t)&off_100086338;
    v29[0] = v1;
    swift_retain();
    id v21 = v20;
    sub_100008C60();

    sub_1000057DC((uint64_t)v29);
    uint64_t v22 = sub_10000423C((uint64_t *)&unk_10008E950);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v7, 0, 1, v22);
    sub_1000043DC((uint64_t)v7, (uint64_t)v5, (uint64_t *)&unk_10008EE00);
    uint64_t v23 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription;
    swift_beginAccess();
    sub_100036FE8((uint64_t)v5, v23, (uint64_t *)&unk_10008EE00);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_100016510()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000423C((uint64_t *)&unk_10008EE00);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_10000423C((uint64_t *)&unk_10008E950);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_10000423C(&qword_10008EAB8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_10000423C(&qword_10008EAB0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  os_log_type_t v15 = &v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v16 = [self defaultCenter];
  [v16 removeObserver:v1];

  uint64_t v17 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription;
  swift_beginAccess();
  sub_1000145C4(v17, (uint64_t)v11, &qword_10008EAB8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    unint64_t v18 = &qword_10008EAB8;
    uint64_t v19 = (uint64_t)v11;
  }
  else
  {
    sub_1000043DC((uint64_t)v11, (uint64_t)v15, &qword_10008EAB0);
    sub_100062EA8();
    swift_retain();
    sub_1000651BC((uint64_t)v15);
    swift_release();
    uint64_t v19 = (uint64_t)v15;
    unint64_t v18 = &qword_10008EAB0;
  }
  sub_10000E044(v19, v18);
  uint64_t v20 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription;
  swift_beginAccess();
  sub_1000145C4(v20, (uint64_t)v4, (uint64_t *)&unk_10008EE00);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    id v21 = (uint64_t *)&unk_10008EE00;
    uint64_t v22 = (uint64_t)v4;
  }
  else
  {
    sub_1000043DC((uint64_t)v4, (uint64_t)v8, (uint64_t *)&unk_10008E950);
    id v23 = (id)*sub_100007E6C();
    sub_100008EEC((uint64_t)v8);

    uint64_t v22 = (uint64_t)v8;
    id v21 = (uint64_t *)&unk_10008E950;
  }
  return sub_10000E044(v22, v21);
}

uint64_t sub_10001686C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000423C(&qword_10008EAB8);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v31 = (uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v30 = (char *)&v29 - v5;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - v11;
  id v32 = [self defaultCenter];
  uint64_t v13 = sub_1000382C8();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14(v12, v13, v6);
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = v1;
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Add listener for account change", v17, 2u);
    uint64_t v1 = v29;
    swift_slowDealloc();
  }

  unint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v12, v6);
  [v32 addObserver:v1 selector:"accountDidChange:" name:CKAccountChangedNotification object:0];
  v14(v10, v13, v6);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Add listener for CKIdentityUpdate", v21, 2u);
    swift_slowDealloc();
  }

  v18(v10, v6);
  id v22 = v32;
  [v32 addObserver:v1 selector:"accountDidChange:" name:CKIdentityUpdateNotification object:0];
  sub_100062EA8();
  v33[3] = type metadata accessor for CloudStorageCoordinator();
  v33[4] = &off_100086328;
  v33[0] = v1;
  swift_retain();
  swift_retain();
  uint64_t v23 = (uint64_t)v30;
  sub_100064F48();
  swift_release();
  sub_1000057DC((uint64_t)v33);
  uint64_t v24 = sub_10000423C(&qword_10008EAB0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 1, v24);
  uint64_t v25 = v31;
  sub_1000043DC(v23, v31, &qword_10008EAB8);
  uint64_t v26 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription;
  swift_beginAccess();
  sub_100036FE8(v25, v26, &qword_10008EAB8);
  swift_endAccess();
  uint64_t v27 = type metadata accessor for Transaction();
  __chkstk_darwin(v27);
  *(&v29 - 4) = v1;
  *(&v29 - 3) = (uint64_t)sub_1000359F4;
  *(&v29 - 2) = v1;
  swift_retain();
  static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.accountStatus", 37, 2uLL, sub_100037574);

  return swift_release();
}

void sub_100016D28(uint64_t a1, uint64_t a2)
{
  void (*v8)(_OWORD *__return_ptr);
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Class isa;
  objc_class *v25;
  Swift::String v26;
  Class v27;
  objc_class *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  objc_class *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  void v45[2];
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  NSString *v55;
  Swift::String v56;
  char v57;
  _OWORD v58[2];
  uint64_t v59;
  long long v60;
  long long v61;
  void v62[2];
  Swift::OpaquePointer_optional v63;
  Swift::OpaquePointer_optional v64;

  NSString v49 = type metadata accessor for Logger();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v47 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000423C(&qword_10008F2F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100074DA0;
  id v6 = sub_1000150E0();
  id v7 = [v6 privateCloudDatabase];

  *(void *)(inited + 32) = v7;
  *(void *)&v58[0] = inited;
  specialized Array._endMutation()();
  uint64_t v8 = *(void (**)(_OWORD *__return_ptr))(*(void *)a2 + 256);
  uint64_t v46 = a1;
  uint64_t v52 = *(void *)&v58[0];
  if ((*(void *)&v58[0] & 0xC000000000000001) != 0)
  {
    uint64_t v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((*(void *)&v58[0] & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    uint64_t v9 = *(id *)(*(void *)&v58[0] + 32);
  }
  uint64_t v51 = v9;
  uint64_t v10 = swift_allocObject();
  uint64_t v50 = v10;
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v11 = (void *)(v10 + 16);
  v45[1] = a2;
  v8(v58);
  uint64_t v12 = v59;
  v62[0] = v59;
  id v61 = v58[0];
  swift_bridgeObjectRetain();
  sub_1000306C4((uint64_t)&v61);
  os_log_t v60 = v58[1];
  sub_1000306C4((uint64_t)&v60);
  sub_1000306F0((uint64_t)v62);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v14 = (void **)(v12 + 40);
    long long v54 = (unint64_t)"rageCoordinator.subscription";
    uint64_t v55 = CKCurrentUserDefaultName;
    os_log_type_t v15 = (void *)0x800000010007AC60;
    uint64_t v53 = 0x800000010007AC60;
    do
    {
      uint64_t v17 = (uint64_t)*(v14 - 1);
      os_log_type_t v16 = *v14;
      v56._uint64_t countAndFlagsBits = 0;
      v56._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      v56._uint64_t countAndFlagsBits = 0xD000000000000024;
      v56._object = v15;
      v18._uint64_t countAndFlagsBits = v17;
      v18._object = v16;
      String.append(_:)(v18);
      sub_100010A0C(v56._countAndFlagsBits, (unint64_t)v56._object, 2, (uint64_t)&type metadata for Bool, &v57);
      swift_bridgeObjectRelease();
      if (v57 == 2 || (v57 & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_100014588(0, &qword_10008F310);
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v21 = v20;
        swift_bridgeObjectRetain();
        v22._uint64_t countAndFlagsBits = v17;
        v22._object = v16;
        v23._uint64_t countAndFlagsBits = v19;
        v23._object = v21;
        Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v22, v23).super.isa;
        sub_100014588(0, &qword_10008F340);
        v56._uint64_t countAndFlagsBits = 0;
        v56._object = (void *)0xE000000000000000;
        uint64_t v25 = isa;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease();
        v56._uint64_t countAndFlagsBits = 0xD000000000000024;
        v56._object = (void *)(v54 | 0x8000000000000000);
        v26._uint64_t countAndFlagsBits = v17;
        v26._object = v16;
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        uint64_t v27 = CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v25, v56).super.super.isa;
        swift_beginAccess();
        uint64_t v28 = v27;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();

        os_log_type_t v15 = (void *)v53;
      }
      v14 += 2;
      --v13;
    }
    while (v13);
  }
  sub_1000306F0((uint64_t)v62);
  swift_beginAccess();
  if (*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = *(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v30 = v51;
  uint64_t v31 = v50;
  if (v29 <= 0)
  {
    swift_bridgeObjectRelease();
    int v41 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v41, v49);
    int v42 = Logger.logObject.getter();
    uint64_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Already subscribed cloud notifications", v44, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
    swift_release();
  }
  else
  {
    sub_100014588(0, (unint64_t *)&unk_10008F330);
    id v32 = *(void **)(v31 + 16);
    sub_10000423C((uint64_t *)&unk_10008F630);
    long long v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_1000747D0;
    swift_bridgeObjectRetain();
    long long v34 = sub_100017400();
    uint64_t v35 = CKSubscription.subscriptionID.getter();
    uint64_t v37 = v36;

    *(void *)(v33 + 32) = v35;
    *(void *)(v33 + 40) = v37;
    v63.value._rawValue = v32;
    v63.is_nil = v33;
    unsigned int v38 = CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v63, v64).super.super.super.super.isa;
    unint64_t v39 = sub_100015208();
    [(objc_class *)v38 setGroup:v39];

    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v46;
    *(void *)(v40 + 24) = v31;
    swift_retain();
    swift_retain();
    CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter();
    [v30 addOperation:v38];
    swift_bridgeObjectRelease();

    swift_release();
  }
}

Class sub_100017400()
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  sub_100014588(0, &qword_10008EE10);
  strcpy((char *)&v9, "bluetoothuser-");
  HIBYTE(v9._object) = -18;
  [v0 scope];
  id v1 = (id)CKDatabaseScopeString();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  Class isa = CKDatabaseSubscription.init(subscriptionID:)(v9).super.super.isa;
  id v7 = [objc_allocWithZone((Class)CKNotificationInfo) init];
  [v7 setShouldSendContentAvailable:1];
  [(objc_class *)isa setNotificationInfo:v7];

  return isa;
}

uint64_t sub_100017534(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  Transaction.capture()();
  if ((a2 & 1) == 0)
  {
    uint64_t v14 = (uint64_t *)(a4 + 16);
    uint64_t v15 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v15, v7);
    swift_retain_n();
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      v40[0] = v38;
      *(_DWORD *)unint64_t v18 = 136315138;
      unint64_t v36 = v18 + 4;
      uint64_t v37 = v18;
      swift_beginAccess();
      sub_100014588(0, &qword_10008F348);
      swift_bridgeObjectRetain();
      uint64_t v19 = Array.description.getter();
      uint64_t v39 = v7;
      unint64_t v21 = v20;
      uint64_t v14 = (uint64_t *)(a4 + 16);
      swift_bridgeObjectRelease();
      v40[4] = sub_100004FA4(v19, v21, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Successfully subscribed to %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v39);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
    swift_beginAccess();
    uint64_t v28 = *v14;
    if ((unint64_t)*v14 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v29 = result;
      if (result) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v29)
      {
LABEL_9:
        if (v29 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v31 = 0;
        do
        {
          if ((v28 & 0xC000000000000001) != 0) {
            id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v32 = *(id *)(v28 + 8 * v31 + 32);
          }
          long long v33 = v32;
          ++v31;
          uint64_t v34 = CKSubscription.subscriptionID.getter();
          v40[3] = (uint64_t)&type metadata for Bool;
          LOBYTE(v40[0]) = 1;
          sub_100012454(2, v34, v35, (uint64_t)v40);

          swift_bridgeObjectRelease();
          sub_10000E044((uint64_t)v40, &qword_10008FE80);
        }
        while (v29 != v31);
      }
    }
    return swift_bridgeObjectRelease();
  }
  swift_errorRetain();
  uint64_t v22 = sub_1000382C8();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v22, v7);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = (void *)swift_slowAlloc();
    uint64_t v39 = v7;
    *(_DWORD *)uint64_t v25 = 138412290;
    swift_errorRetain();
    uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
    v40[0] = v27;
    uint64_t v7 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v26 = v27;
    sub_100035380(a1, 1);
    sub_100035380(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Subscription error: %@", v25, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100035380(a1, 1);
  }
  else
  {
    sub_100035380(a1, 1);
    sub_100035380(a1, 1);
    swift_errorRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_100017A9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::String v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_1000382C8();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CKAccountChanged notification received", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = type metadata accessor for Transaction();
  __chkstk_darwin(v10);
  *(void *)&v12[-32] = v1;
  *(void *)&v12[-24] = sub_1000359F4;
  *(void *)&v12[-16] = v1;
  swift_retain();
  static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.accountStatus", 37, 2uLL, sub_1000359FC);
  return swift_release();
}

uint64_t sub_100017D7C(objc_class *a1, NSObject *a2)
{
  void (*v77)(_OWORD *__return_ptr, uint64_t);
  uint64_t v78;
  uint64_t v79;
  void **v80;
  uint64_t v81;
  void *v82;
  Swift::String v83;
  uint64_t v84;
  NSObject *v85;
  id v86;
  id v87;
  Class v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  void *v93;
  NSObject *isa;
  uint64_t v95;
  void *v96;
  os_log_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  int v108;
  char *v109;
  uint64_t v110;
  NSObject *v111;
  long long aBlock;
  long long v113;
  uint64_t (*v114)();
  uint64_t v115;
  _OWORD v116[2];
  uint64_t v117;
  long long v118;
  long long v119;
  uint64_t v120;

  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  os_log_type_t v8 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  v106 = (char *)&v97 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v105 = (char *)&v97 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v97 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  v109 = (char *)&v97 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v103 = (char *)&v97 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v107 = (char *)&v97 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v104 = (char *)&v97 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v97 - v24;
  uint64_t v26 = sub_1000382C8();
  uint64_t v27 = v5;
  uint64_t v29 = *(NSObject **)(v5 + 16);
  uint64_t v28 = v5 + 16;
  v110 = v26;
  uint64_t v30 = v4;
  v111 = v29;
  ((void (*)(char *))v29)(v25);
  swift_retain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  v108 = v32;
  long long v33 = &unk_100091000;
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v34 = swift_slowAlloc();
    v100 = v15;
    uint64_t v35 = v34;
    v98 = swift_slowAlloc();
    *(void *)&aBlock = v98;
    *(_DWORD *)uint64_t v35 = 136315394;
    v102 = v30;
    id v36 = (id)CKStringFromAccountStatus();
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v101 = v27;
    uint64_t v38 = v37;
    v99 = v28;
    unint64_t v40 = v39;

    *(void *)&v116[0] = sub_100004FA4(v38, v40, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    id v41 = (id)CKStringFromAccountStatus();
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v97 = v31;
    uint64_t v43 = v8;
    uint64_t v44 = a2;
    unint64_t v46 = v45;

    uint64_t v47 = v101;
    *(void *)&v116[0] = sub_100004FA4(v42, v46, (uint64_t *)&aBlock);
    long long v33 = (void *)&unk_100091000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v44;
    os_log_type_t v8 = v43;
    swift_bridgeObjectRelease();
    os_log_t v48 = v97;
    _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v108, "iCloud Account Changed from %s -> %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v15 = v100;
    swift_slowDealloc();

    NSString v49 = *(void (**)(char *))(v47 + 8);
    uint64_t v30 = v102;
  }
  else
  {

    swift_release_n();
    NSString v49 = *(void (**)(char *))(v27 + 8);
  }
  v49(v25);
  uint64_t v50 = v33[297];
  uint64_t v51 = *(uint64_t *)((char *)&a2->isa + v50);
  *(Class *)((char *)&a2->isa + v50) = a1;
  *((unsigned char *)&a2->isa + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable) = a1 == (objc_class *)1;
  switch((unint64_t)a1)
  {
    case 0uLL:
      os_log_type_t v8 = v105;
      ((void (*)(char *, uint64_t, uint64_t))v111)(v105, v110, v30);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v52, v53)) {
        goto LABEL_29;
      }
      long long v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v54 = 0;
      uint64_t v55 = "iCloud Account state cannot be determined!";
      goto LABEL_28;
    case 1uLL:
      long long v56 = v104;
      ((void (*)(char *, uint64_t, uint64_t))v111)(v104, v110, v30);
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v57, v58))
      {
        unint64_t v59 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "iCloud Account Available", v59, 2u);
        swift_slowDealloc();
      }

      uint64_t result = ((uint64_t (*)(char *, uint64_t))v49)(v56, v30);
      if (v51 != 1)
      {
        sub_10001945C((BOOL)_swiftEmptyArrayStorage);
        uint64_t v61 = type metadata accessor for Transaction();
        __chkstk_darwin(v61);
        *(&v97 - 4) = a2;
        *(&v97 - 3) = (os_log_t)sub_100035C18;
        *(&v97 - 2) = a2;
        swift_retain();
        static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.accountInfo", 35, 2uLL, sub_100035C24);
        return swift_release();
      }
      return result;
    case 2uLL:
      ((void (*)(char *, uint64_t, uint64_t))v111)(v107, v110, v30);
      NSString v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "iCloud Account not available due to restrictions!", v64, 2u);
        swift_slowDealloc();
      }

      ((void (*)(char *, uint64_t))v49)(v107, v30);
      if (v51 != 2) {
        goto LABEL_19;
      }
      uint64_t v65 = v103;
      ((void (*)(char *, uint64_t, uint64_t))v111)(v103, v110, v30);
      v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v66, v67))
      {
        id v68 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Account was already in .restricted state", v68, 2u);
        swift_slowDealloc();
      }

      v69 = v65;
      return ((uint64_t (*)(char *, uint64_t))v49)(v69, v30);
    case 3uLL:
LABEL_19:
      ((void (*)(char *, uint64_t, uint64_t))v111)(v109, v110, v30);
      int v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v70, v71))
      {
        os_log_t v72 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_t v72 = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "iCloud Account not available!", v72, 2u);
        swift_slowDealloc();
      }

      uint64_t v73 = ((uint64_t (*)(char *, uint64_t))v49)(v109, v30);
      if (v51 == 3)
      {
        ((void (*)(char *, uint64_t, uint64_t))v111)(v15, v110, v30);
        long long v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v76 = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "Account was already in .noAccount state", v76, 2u);
          swift_slowDealloc();
        }

        v69 = v15;
        return ((uint64_t (*)(char *, uint64_t))v49)(v69, v30);
      }
      else
      {
        long long v77 = (void (*)(_OWORD *__return_ptr, uint64_t))*((void *)a2->isa + 32);
        v111 = a2;
        v77(v116, v73);
        uint64_t v78 = v117;
        v120 = v117;
        v119 = v116[0];
        swift_bridgeObjectRetain();
        sub_1000306C4((uint64_t)&v119);
        v118 = v116[1];
        sub_1000306C4((uint64_t)&v118);
        sub_1000306F0((uint64_t)&v120);
        long long v79 = *(void *)(v78 + 16);
        if (v79)
        {
          uint64_t v80 = (void **)(v78 + 40);
          do
          {
            v81 = (uint64_t)*(v80 - 1);
            v82 = *v80;
            *(void *)&aBlock = 0;
            *((void *)&aBlock + 1) = 0xE000000000000000;
            swift_bridgeObjectRetain();
            _StringGuts.grow(_:)(38);
            swift_bridgeObjectRelease();
            *(void *)&aBlock = 0xD000000000000024;
            *((void *)&aBlock + 1) = 0x800000010007AC60;
            v83._uint64_t countAndFlagsBits = v81;
            v83._object = v82;
            String.append(_:)(v83);
            swift_bridgeObjectRelease();
            v84 = aBlock;
            *((void *)&v113 + 1) = &type metadata for Bool;
            LOBYTE(aBlock) = 1;
            sub_100012454(2, v84, *((unint64_t *)&aBlock + 1), (uint64_t)&aBlock);
            swift_bridgeObjectRelease();
            sub_10000E044((uint64_t)&aBlock, &qword_10008FE80);
            v80 += 2;
            --v79;
          }
          while (v79);
        }
        sub_1000306F0((uint64_t)&v120);
        v85 = v111;
        v86 = sub_1000150E0();
        v87 = [v86 privateCloudDatabase];

        v88 = sub_100017400();
        v89 = CKSubscription.subscriptionID.getter();
        v91 = v90;

        v113 = 0u;
        aBlock = 0u;
        sub_100012454(2, v89, v91, (uint64_t)&aBlock);
        swift_bridgeObjectRelease();
        sub_10000E044((uint64_t)&aBlock, &qword_10008FE80);
        *((unsigned char *)&v85->isa + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) = 0;
        v92 = (Class *)((char *)&v85->isa
                      + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
        swift_beginAccess();
        *v92 = &_swiftEmptyDictionarySingleton;
        swift_bridgeObjectRelease();
        v93 = (Class *)((char *)&v85->isa
                      + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
        swift_beginAccess();
        *v93 = &_swiftEmptyDictionarySingleton;
        swift_bridgeObjectRelease();
        Class isa = v85[9].isa;
        v95 = swift_allocObject();
        *(void *)(v95 + 16) = sub_100035AE8;
        *(void *)(v95 + 24) = v85;
        v114 = sub_100037468;
        v115 = v95;
        *(void *)&aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&v113 = sub_10000FBDC;
        *((void *)&v113 + 1) = &unk_1000869A8;
        v96 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(isa, v96);
        _Block_release(v96);
        LOBYTE(isa) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        uint64_t result = swift_release();
        if (isa)
        {
          __break(1u);
          JUMPOUT(0x100018BA4);
        }
      }
      return result;
    case 4uLL:
      os_log_type_t v8 = v106;
      ((void (*)(char *, uint64_t, uint64_t))v111)(v106, v110, v30);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v52, v53)) {
        goto LABEL_29;
      }
      long long v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v54 = 0;
      uint64_t v55 = "iCloud Account temporarily unavailable!";
      goto LABEL_28;
    default:
      ((void (*)(char *, uint64_t, uint64_t))v111)(v8, v110, v30);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v52, v53)) {
        goto LABEL_29;
      }
      long long v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v54 = 0;
      uint64_t v55 = "Unknown CKAccountStatus!";
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v52, v53, v55, v54, 2u);
      swift_slowDealloc();
LABEL_29:

      return ((uint64_t (*)(char *, uint64_t))v49)(v8, v30);
  }
}

void sub_100018BB8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_100018C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = sub_1000150E0();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  _OWORD v9[5] = a4;
  v11[4] = sub_100035A74;
  v11[5] = v9;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  void v11[2] = sub_1000193E4;
  v11[3] = &unk_100086908;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [v8 accountStatusWithCompletionHandler:v10];
  _Block_release(v10);
}

uint64_t sub_100018D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v47 = a4;
  uint64_t v54 = a1;
  uint64_t v46 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  unint64_t v45 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v43 - v17;
  Transaction.capture()();
  uint64_t v51 = v9;
  uint64_t v52 = v8;
  uint64_t v50 = v11;
  if (a2)
  {
    swift_errorRetain();
    uint64_t v19 = sub_1000382C8();
    uint64_t v44 = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v19, v12);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      uint64_t v43 = v12;
      *(_DWORD *)uint64_t v22 = 138412290;
      swift_errorRetain();
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      aBlock[0] = v24;
      uint64_t v12 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v24;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "error fetching account status: %@", v22, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v12);
  }
  else
  {
    uint64_t v25 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v25, v12);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    int v28 = v27;
    uint64_t v29 = v13;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v30 = swift_slowAlloc();
      LODWORD(v43) = v28;
      uint64_t v31 = (uint8_t *)v30;
      uint64_t v44 = swift_slowAlloc();
      aBlock[0] = v44;
      *(_DWORD *)uint64_t v31 = 136315138;
      id v32 = (id)CKStringFromAccountStatus();
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      uint64_t v55 = (void *)sub_100004FA4(v33, v35, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v43, "Fetched CK account status: %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v12);
  }
  id v36 = (void *)swift_allocObject();
  uint64_t v37 = v49;
  v36[2] = v48;
  v36[3] = v37;
  v36[4] = v54;
  aBlock[4] = (uint64_t)sub_100035AB8;
  void aBlock[5] = (uint64_t)v36;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_100006FA4;
  void aBlock[3] = (uint64_t)&unk_100086958;
  uint64_t v38 = _Block_copy(aBlock);
  swift_retain();
  unint64_t v39 = v50;
  static DispatchQoS.unspecified.getter();
  uint64_t v55 = _swiftEmptyArrayStorage;
  sub_100032010((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  unint64_t v40 = v45;
  uint64_t v41 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v52);
  return swift_release();
}

void sub_1000193E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_10001945C(BOOL a1)
{
  uint64_t v2 = v1;
  BOOL v55 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (void *)((char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v59 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v50 - v11;
  uint64_t v13 = sub_1000382C8();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v57 = v13;
  uint64_t v58 = v8 + 16;
  long long v56 = v14;
  ((void (*)(char *))v14)(v12);
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  int v17 = v16;
  BOOL v18 = os_log_type_enabled(v15, v16);
  uint64_t v60 = v8;
  if (v18)
  {
    LODWORD(v53) = v17;
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(void *)&v63[0] = v52;
    uint64_t v54 = (void (*)(char *, uint64_t))v3;
    uint64_t v51 = v19;
    *(_DWORD *)uint64_t v19 = 136315138;
    v50[1] = v19 + 4;
    (*(void (**)(_OWORD *__return_ptr))(*v2 + 256))(v62);
    long long v69 = v62[0];
    swift_bridgeObjectRetain();
    sub_1000306C4((uint64_t)&v69);
    long long v68 = v62[1];
    sub_1000306C4((uint64_t)&v68);
    swift_bridgeObjectRelease();
    uint64_t v20 = v4;
    uint64_t v21 = Array.description.getter();
    uint64_t v22 = v7;
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = v21;
    uint64_t v4 = v20;
    *(void *)&long long v66 = sub_100004FA4(v25, v24, (uint64_t *)v63);
    uint64_t v3 = (uint64_t)v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v7 = v22;
    uint64_t v8 = v60;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v53, "setupZones: %s", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
  v26(v12, v7);
  os_log_type_t v27 = (void *)v2[8];
  *id v6 = v27;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v3);
  id v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v27)
  {
    uint64_t v54 = v26;
    uint64_t v29 = dispatch_group_create();
    (*(void (**)(_OWORD *__return_ptr))(*v2 + 256))(v63);
    uint64_t v30 = v64;
    uint64_t v67 = v64;
    long long v66 = v63[0];
    swift_bridgeObjectRetain();
    sub_1000306C4((uint64_t)&v66);
    long long v65 = v63[1];
    sub_1000306C4((uint64_t)&v65);
    sub_1000306F0((uint64_t)&v67);
    uint64_t v31 = _swiftEmptyArrayStorage;
    unint64_t v61 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v32 = *(void *)(v30 + 16);
    if (v32)
    {
      id v53 = v28;
      swift_bridgeObjectRetain();
      uint64_t v33 = v30 + 40;
      do
      {
        id v34 = objc_allocWithZone((Class)CKRecordZone);
        swift_bridgeObjectRetain();
        NSString v35 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v36 = [v34 initWithZoneName:v35];

        if (v36)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v33 += 16;
        --v32;
      }
      while (v32);
      sub_1000306F0((uint64_t)&v67);
      uint64_t v31 = (void *)v61;
      id v28 = v53;
    }
    sub_1000306F0((uint64_t)&v67);
    sub_100014588(0, &qword_10008F328);
    swift_bridgeObjectRetain();
    Swift::Bool v37 = v55;
    swift_bridgeObjectRetain();
    v70.value._rawValue = v31;
    v70.is_nil = v37;
    Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v70, v71).super.super.super.super.isa;
    [(objc_class *)isa setCallbackQueue:v28];
    unint64_t v39 = isa;
    id v40 = sub_1000151E4();
    [(objc_class *)v39 setGroup:v40];

    dispatch_group_enter(v29);
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v31;
    *(void *)(v41 + 24) = v29;
    uint64_t v42 = v29;
    CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter();
    qos_class_t v43 = qos_class_self();
    uint64_t v44 = v59;
    if (v43 >= QOS_CLASS_USER_INITIATED) {
      [(objc_class *)v39 setQualityOfService:25];
    }
    id v45 = sub_1000150E0();
    id v46 = [v45 privateCloudDatabase];

    [v46 addOperation:v39];
    v56(v44, v57, v7);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Waiting for all zone create tasks to complete.", v49, 2u);
      swift_slowDealloc();
    }

    v54(v44, v7);
    OS_dispatch_group.wait()();
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.setupCloudNotifications", 47, 2uLL, sub_1000359A0);
  }
  else
  {
    __break(1u);
  }
}

void sub_100019C74(uint64_t a1)
{
  uint64_t v28 = a1 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v29 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v4 = 0;
  os_log_type_t v27 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    if (v3)
    {
      unint64_t v5 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v6 = v5 | (v4 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v4++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v4 >= v29) {
      goto LABEL_31;
    }
    unint64_t v8 = *(void *)(v28 + 8 * v4);
    if (!v8) {
      break;
    }
LABEL_16:
    unint64_t v3 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v4 << 6);
LABEL_17:
    id v10 = *(id *)(*(void *)(a1 + 48) + 8 * v6);
    swift_retain();
    id v11 = v10;
    swift_retain();
    id v12 = [v11 recordID];
    id v13 = [v12 recordName];

    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = 58;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v18 = v16;
    uint64_t v19 = CKRecord.recordType.getter();
    uint64_t v21 = v20;

    swift_bridgeObjectRetain();
    v22._uint64_t countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      return;
    }
    swift_release();

    if (v18)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        os_log_type_t v27 = sub_100012724(0, *((void *)v27 + 2) + 1, 1, v27);
      }
      unint64_t v24 = *((void *)v27 + 2);
      unint64_t v23 = *((void *)v27 + 3);
      if (v24 >= v23 >> 1) {
        os_log_type_t v27 = sub_100012724((char *)(v23 > 1), v24 + 1, 1, v27);
      }
      *((void *)v27 + 2) = v24 + 1;
      uint64_t v25 = &v27[16 * v24];
      *((void *)v25 + 4) = v14;
      *((void *)v25 + 5) = v18;
    }
  }
  int64_t v9 = v4 + 1;
  if (v4 + 1 >= v29) {
    goto LABEL_31;
  }
  unint64_t v8 = *(void *)(v28 + 8 * v9);
  if (v8) {
    goto LABEL_15;
  }
  int64_t v9 = v4 + 2;
  if (v4 + 2 >= v29) {
    goto LABEL_31;
  }
  unint64_t v8 = *(void *)(v28 + 8 * v9);
  if (v8) {
    goto LABEL_15;
  }
  int64_t v9 = v4 + 3;
  if (v4 + 3 >= v29) {
    goto LABEL_31;
  }
  unint64_t v8 = *(void *)(v28 + 8 * v9);
  if (v8)
  {
LABEL_15:
    int64_t v4 = v9;
    goto LABEL_16;
  }
  int64_t v26 = v4 + 4;
  if (v4 + 4 >= v29)
  {
LABEL_31:
    swift_release();
    return;
  }
  unint64_t v8 = *(void *)(v28 + 8 * v26);
  v4 += 4;
  if (v8) {
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v4 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v4 >= v29) {
      goto LABEL_31;
    }
    unint64_t v8 = *(void *)(v28 + 8 * v4);
    ++v26;
    if (v8) {
      goto LABEL_16;
    }
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100019FB4(uint64_t a1)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v7 = (char *)_swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v8 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain();
    id v14 = [v13 recordName];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
    swift_release();

    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100012724(0, *((void *)v7 + 2) + 1, 1, v7);
      uint64_t v7 = (char *)result;
    }
    unint64_t v19 = *((void *)v7 + 2);
    unint64_t v18 = *((void *)v7 + 3);
    if (v19 >= v18 >> 1)
    {
      uint64_t result = (uint64_t)sub_100012724((char *)(v18 > 1), v19 + 1, 1, v7);
      uint64_t v7 = (char *)result;
    }
    *((void *)v7 + 2) = v19 + 1;
    uint64_t v20 = &v7[16 * v19];
    *((void *)v20 + 4) = v15;
    *((void *)v20 + 5) = v17;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v22) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v10);
    ++v6;
    if (!v11)
    {
      int64_t v6 = v10 + 1;
      if (v10 + 1 >= v22) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v21 + 8 * v6);
      if (!v11)
      {
        int64_t v6 = v10 + 2;
        if (v10 + 2 >= v22) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v21 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 3;
          if (v10 + 3 >= v22) {
            goto LABEL_27;
          }
          unint64_t v11 = *(void *)(v21 + 8 * v6);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v11 - 1) & v11;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v22)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v7;
  }
  unint64_t v11 = *(void *)(v21 + 8 * v12);
  if (v11)
  {
    int64_t v6 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v6 >= v22) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v6);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_10001A214(uint64_t a1, char a2, uint64_t a3, NSObject *a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)v32 - v12;
  if (a2)
  {
    swift_errorRetain();
    uint64_t v23 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v23, v7);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      int64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v33 = v7;
      uint64_t v28 = (void *)v27;
      id v34 = a4;
      *(_DWORD *)int64_t v26 = 138412290;
      swift_errorRetain();
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v36 = v29;
      a4 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v29;
      sub_100035380(a1, 1);
      sub_100035380(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error creating zone: %@", v26, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      uint64_t v7 = v33;
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100035380(a1, 1);
    }
    else
    {
      sub_100035380(a1, 1);
      sub_100035380(a1, 1);
      swift_errorRelease();
    }
    uint64_t v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v31 = v11;
    goto LABEL_9;
  }
  uint64_t v14 = sub_1000382C8();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v14, v7);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v15, v16))
  {

    swift_bridgeObjectRelease_n();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v31 = v13;
LABEL_9:
    v30(v31, v7);
    goto LABEL_10;
  }
  id v34 = a4;
  uint64_t v17 = (uint8_t *)swift_slowAlloc();
  uint64_t v18 = swift_slowAlloc();
  uint64_t v33 = v7;
  uint64_t v36 = v18;
  *(_DWORD *)uint64_t v17 = 136315138;
  v32[1] = v17 + 4;
  sub_100014588(0, &qword_10008F350);
  swift_bridgeObjectRetain();
  uint64_t v19 = Array.description.getter();
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = v19;
  a4 = v34;
  uint64_t v35 = sub_100004FA4(v22, v21, &v36);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v15, v16, "Created Zone: %s", v17, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v33);
LABEL_10:
  dispatch_group_leave(a4);
}

void sub_10001A654(char *a1, char a2, uint64_t a3)
{
  uint64_t v121 = a3;
  uint64_t v120 = type metadata accessor for URL();
  uint64_t v115 = *(void *)(v120 - 8);
  uint64_t v5 = __chkstk_darwin(v120);
  v119 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v105 - v8;
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v105 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  id v13 = *(char **)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  v117 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v105 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v20 = __chkstk_darwin(v19);
  v118 = (char *)&v105 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v24 = (char *)&v105 - v23;
  __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v105 - v26;
  uint64_t v28 = (void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  if (a2)
  {
    swift_errorRetain();
    uint64_t v38 = sub_1000382C8();
    (*v28)(v27, v38, v12);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      v118 = v13;
      uint64_t v42 = (uint8_t *)v41;
      qos_class_t v43 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 138412290;
      swift_errorRetain();
      uint64_t v44 = a1;
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long aBlock = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *qos_class_t v43 = v45;
      sub_100035E8C(v44, 1);
      sub_100035E8C(v44, 1);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "accountInfo error: %@", v42, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v13 = v118;
      swift_slowDealloc();

      sub_100035E8C(v44, 1);
    }
    else
    {
      sub_100035E8C(a1, 1);
      sub_100035E8C(a1, 1);
      swift_errorRelease();
    }
    (*((void (**)(char *, uint64_t))v13 + 1))(v27, v12);
  }
  else
  {
    v109 = v9;
    v110 = v11;
    v111 = v25;
    uint64_t v29 = a1;
    uint64_t v30 = sub_1000382C8();
    uint64_t v31 = *v28;
    (*v28)(v24, v30, v12);
    v116 = v29;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    v108 = v18;
    v114 = v13 + 16;
    v113 = v31;
    if (v34)
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v112 = v12;
      v107 = (void (*)(void, void))v36;
      *(_DWORD *)uint64_t v35 = 138412290;
      *(void *)&long long aBlock = v116;
      Swift::Bool v37 = v116;
      uint64_t v31 = v113;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)v107 = a1;
      sub_100035E8C(a1, 0);
      sub_100035E8C(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "accountInfo: %@", v35, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      uint64_t v12 = v112;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100035E8C(a1, 0);
      sub_100035E8C(a1, 0);
    }

    os_log_type_t v48 = (void (*)(void, void))*((void *)v13 + 1);
    uint64_t v47 = v13 + 8;
    id v46 = v48;
    v48(v24, v12);
    uint64_t v49 = v116;
    if ([v116 accountStatus] == (id)1)
    {
      uint64_t v50 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable;
      LODWORD(v117) = *(unsigned __int8 *)(v121
                                         + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable);
      uint64_t v106 = v30;
      v31(v118, v30, v12);
      uint64_t v51 = v49;
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      BOOL v54 = os_log_type_enabled(v52, v53);
      v107 = v46;
      if (v54)
      {
        BOOL v55 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)BOOL v55 = 67109120;
        LODWORD(aBlock) = [v51 supportsDeviceToDeviceEncryption];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100035E8C(a1, 0);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Setting manateeAvailable to %{BOOL}d", v55, 8u);
        id v46 = v107;
        swift_slowDealloc();
      }
      else
      {
        sub_100035E8C(a1, 0);
      }

      uint64_t v60 = v118;
      v118 = v47;
      v46(v60, v12);
      unsigned __int8 v61 = [v51 supportsDeviceToDeviceEncryption];
      uint64_t v62 = v121;
      *(unsigned char *)(v121 + v50) = v61;
      os_log_type_t v63 = *(NSObject **)(v62 + 72);
      uint64_t v64 = swift_allocObject();
      *(void *)(v64 + 16) = sub_100035E98;
      *(void *)(v64 + 24) = v62;
      v124 = sub_100037468;
      uint64_t v125 = v64;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v123 = sub_10000FBDC;
      *((void *)&v123 + 1) = &unk_100086A48;
      long long v65 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v63, v65);
      _Block_release(v65);
      LOBYTE(v63) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v63)
      {
        __break(1u);
      }
      else if ((v117 & 1) != 0 || ![v51 supportsDeviceToDeviceEncryption])
      {
        notify_post("com.apple.bluetoothuser.cloudChanged");
        sub_100035E8C(a1, 0);
        swift_release();
      }
      else
      {
        uint64_t v112 = v12;
        v117 = a1;
        uint64_t v66 = v121;
        uint64_t v67 = v109;
        URL.appendingPathComponent(_:isDirectory:)();
        long long v68 = v110;
        URL.appendingPathComponent(_:)();
        long long v69 = *(void (**)(char *, uint64_t))(v115 + 8);
        uint64_t v70 = v120;
        v69(v67, v120);
        v116 = (char *)sub_100030C78();
        uint64_t v71 = ((uint64_t (*)(char *, uint64_t))v69)(v68, v70);
        (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v66 + 256))(&aBlock, v71);
        os_log_t v72 = v124;
        v128[0] = v124;
        long long v127 = aBlock;
        swift_bridgeObjectRetain();
        sub_1000306C4((uint64_t)&v127);
        long long v126 = v123;
        sub_1000306C4((uint64_t)&v126);
        sub_1000306F0((uint64_t)v128);
        uint64_t v73 = *((void *)v72 + 2);
        if (v73)
        {
          sub_100014588(0, &qword_10008F310);
          uint64_t v74 = v73 - 1;
          os_log_type_t v75 = (void **)((char *)v72 + 40);
          do
          {
            uint64_t v76 = v74;
            uint64_t v78 = (uint64_t)*(v75 - 1);
            long long v77 = *v75;
            uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v81 = v80;
            swift_bridgeObjectRetain();
            v82._uint64_t countAndFlagsBits = v78;
            v82._object = v77;
            v83._uint64_t countAndFlagsBits = v79;
            v83._object = v81;
            Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v82, v83).super.isa;
            v85 = v119;
            sub_10001B6C0(2, isa);

            v86 = (void *)sub_100030C78();
            v69(v85, v120);

            BOOL v87 = v86 == 0;
            if (!v86) {
              break;
            }
            uint64_t v74 = v76 - 1;
            v75 += 2;
          }
          while (v76);
        }
        else
        {
          BOOL v87 = 0;
        }
        sub_1000306F0((uint64_t)v128);
        v88 = v113;
        v113(v111, v106, v112);
        v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v89, v90))
        {
          v91 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v91 = 0;
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "Manatee PCS keys are now available", v91, 2u);
          swift_slowDealloc();
        }

        v92 = (void (*)(char *, uint64_t))v107;
        v107(v111, v112);
        v94 = v116;
        v93 = v117;
        if (v116) {
          char v95 = v87;
        }
        else {
          char v95 = 1;
        }
        if ((v95 & 1) != 0
          || (v96 = sub_10006B584(),
              swift_beginAccess(),
              int v97 = *v96,
              v92 = (void (*)(char *, uint64_t))v107,
              v97 == 1))
        {
          v98 = v108;
          uint64_t v99 = v112;
          v88(v108, v106, v112);
          v100 = Logger.logObject.getter();
          os_log_type_t v101 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v100, v101))
          {
            v102 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v102 = 0;
            _os_log_impl((void *)&_mh_execute_header, v100, v101, "Fetching from cloud container", v102, 2u);
            v92 = (void (*)(char *, uint64_t))v107;
            swift_slowDealloc();
          }

          v92(v98, v99);
          uint64_t v103 = v121;
          v104 = *(void (**)(uint64_t, void, uint64_t (*)(uint64_t, char), uint64_t))(*(void *)v121 + 816);
          swift_retain();
          v104(2, 0, sub_100035FD8, v103);
          sub_100035E8C(v93, 0);
          swift_release_n();
        }
        else
        {
          notify_post("com.apple.bluetoothuser.cloudChanged");
          sub_100035E8C(v93, 0);
          swift_release();
        }
      }
    }
    else
    {
      long long v56 = v117;
      v31(v117, v30, v12);
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v57, v58))
      {
        unint64_t v59 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Account not available", v59, 2u);
        swift_slowDealloc();

        sub_100035E8C(a1, 0);
      }
      else
      {
        sub_100035E8C(a1, 0);
      }
      v46(v56, v12);
    }
  }
}

uint64_t sub_10001B400(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:isDirectory:)();
  if (a1 != 3 && a1 != 2 && a1 != 1)
  {
    uint64_t v10 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unknown CKDatabase.Scope!", v13, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  URL.appendingPathComponent(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10001B6C0(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:isDirectory:)();
  if (a1 == 3)
  {
    uint64_t v8 = 0x646572616853;
    unint64_t v9 = 0xE600000000000000;
    goto LABEL_11;
  }
  if (a1 == 2)
  {
    uint64_t v8 = 0x65746176697250;
LABEL_10:
    unint64_t v9 = 0xE700000000000000;
    goto LABEL_11;
  }
  if (a1 != 1)
  {
    uint64_t v10 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unknown CKDatabase.Scope!", v13, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v8 = 0x6E776F6E6B6E55;
    goto LABEL_10;
  }
  uint64_t v8 = 0x63696C627550;
  unint64_t v9 = 0xE600000000000000;
LABEL_11:
  URL.appendPathComponent(_:)(*(Swift::String *)&v8);
  id v14 = [a2 ownerName];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  URL.appendPathComponent(_:)(v18);
  swift_bridgeObjectRelease();
  id v19 = [a2 zoneName];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  v25._uint64_t countAndFlagsBits = v20;
  v25._object = v22;
  v23._uint64_t countAndFlagsBits = 0x6E656B6F742ELL;
  v23._object = (void *)0xE600000000000000;
  String.append(_:)(v23);
  URL.appendPathComponent(_:)(v25);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001B978(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  os_log_type_t v12 = (char *)&v23 - v11;
  if (a2)
  {
    swift_errorRetain();
    uint64_t v18 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v18, v6);
    swift_errorRetain();
    swift_errorRetain();
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v25 = a3;
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      unint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      swift_errorRetain();
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v26 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v24 = v22;
      sub_100035380(a1, 1);
      sub_100035380(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error from fetchChanges: %@", v21, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100035380(a1, 1);
      sub_100035380(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    sub_1000230D4(a1, 1);
    return sub_100035380(a1, 1);
  }
  else
  {
    uint64_t v13 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v13, v6);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "fetchChanges succeeded", v16, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

void sub_10001BCB4(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (char *)&v32 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v32 - v15;
  if (a1 == 1)
  {
    uint64_t v19 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, v19, v7);
    os_log_type_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "NOT USING PUBLIC DB", v22, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    goto LABEL_16;
  }
  if (a1 == 3)
  {
    uint64_t v23 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v16, v23, v7);
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "NOT USING SHARED DB", v26, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
    goto LABEL_16;
  }
  if (a1 != 2)
  {
    uint64_t v27 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v27, v7);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unknown CKDatabase.Scope!", v30, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
LABEL_16:
    sub_100031024();
    swift_allocError();
    *uint64_t v31 = 1;
    a3();
    swift_errorRelease();
    return;
  }
  id v17 = sub_1000150E0();
  id v33 = [v17 privateCloudDatabase];

  sub_100031078(v33, (uint64_t)a3, a4);
  uint64_t v18 = v33;
}

void sub_10001C068(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = a4;
  uint64_t v65 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v73 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v57 - v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = _swiftEmptyArrayStorage;
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = _swiftEmptyArrayStorage;
  uint64_t v16 = v6;
  sub_10001B400((uint64_t)[a2 scope]);
  id v17 = (void *)sub_100030C78();
  uint64_t v18 = v15;
  uint64_t v19 = v11;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  id v20 = [objc_allocWithZone((Class)CKFetchDatabaseChangesOperation) initWithPreviousServerChangeToken:v17];
  uint64_t v66 = a1;
  os_log_type_t v21 = v17;
  id v22 = sub_10001522C();
  [v20 setGroup:v22];

  [v20 setFetchAllChanges:1];
  uint64_t v23 = sub_1000382C8();
  unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v63 = v7 + 16;
  uint64_t v64 = v23;
  uint64_t v62 = v24;
  ((void (*)(char *))v24)(v19);
  id v25 = a2;
  id v26 = v17;
  id v27 = v25;
  id v28 = v26;
  os_log_type_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v68 = v7;
  uint64_t v69 = v16;
  id v70 = v28;
  unsigned __int8 v61 = v17;
  if (v31)
  {
    uint64_t v60 = v19;
    uint64_t v32 = swift_slowAlloc();
    os_log_type_t v58 = (void *)swift_slowAlloc();
    unint64_t v59 = (void **)swift_slowAlloc();
    long long aBlock = v59;
    *(_DWORD *)uint64_t v32 = 136315394;
    [v27 scope];
    id v33 = (id)CKDatabaseScopeString();
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    uint64_t v74 = sub_100004FA4(v34, v36, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2112;
    if (v21)
    {
      id v37 = v70;
      uint64_t v74 = (uint64_t)v70;
      id v38 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v74 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v37 = v70;
    }
    *os_log_type_t v58 = v21;

    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Old %s database change token: %@", (uint8_t *)v32, 0x16u);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v39 = v68;
    uint64_t v16 = v69;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v60, v69);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v16);
    uint64_t v39 = v7;
  }
  uint64_t v40 = v72;
  uint64_t v79 = sub_100036978;
  uint64_t v80 = v72;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v76 = 1107296256;
  long long v77 = sub_10001CBF0;
  uint64_t v78 = &unk_100086D18;
  uint64_t v41 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v20 setRecordZoneWithIDChangedBlock:v41];
  _Block_release(v41);
  uint64_t v42 = v71;
  uint64_t v79 = sub_100036980;
  uint64_t v80 = v71;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v76 = 1107296256;
  long long v77 = sub_10001CBF0;
  uint64_t v78 = &unk_100086D40;
  qos_class_t v43 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v20 setRecordZoneWithIDWasDeletedBlock:v43];
  _Block_release(v43);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v27;
  uint64_t v79 = sub_100036A54;
  uint64_t v80 = v44;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v76 = 1107296256;
  long long v77 = sub_10001CBF0;
  uint64_t v78 = &unk_100086D90;
  uint64_t v45 = _Block_copy(&aBlock);
  id v46 = v27;
  swift_release();
  [v20 setChangeTokenUpdatedBlock:v45];
  _Block_release(v45);
  uint64_t v47 = (void *)swift_allocObject();
  uint64_t v48 = v65;
  v47[2] = v66;
  v47[3] = v48;
  v47[4] = v67;
  v47[5] = v46;
  v47[6] = v42;
  v47[7] = v40;
  v47[8] = v61;
  id v49 = v46;
  id v50 = v70;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter();
  v62(v73, v64, v16);
  uint64_t v51 = (void **)v20;
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    id v70 = v50;
    BOOL v54 = (uint8_t *)swift_slowAlloc();
    BOOL v55 = (void *)swift_slowAlloc();
    *(_DWORD *)BOOL v54 = 138412290;
    long long aBlock = v51;
    long long v56 = v51;
    uint64_t v39 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v55 = v51;

    id v50 = v70;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Adding Cloud operation %@", v54, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    uint64_t v16 = v69;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v52 = v51;
  }

  (*(void (**)(char *, uint64_t))(v39 + 8))(v73, v16);
  [v49 addOperation:v51];
  swift_release();
  swift_release();
}

uint64_t sub_10001C964(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  id v8 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  uint64_t v9 = sub_1000382C8();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  uint64_t v10 = v8;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v20 = v4;
    os_log_type_t v21 = v10;
    uint64_t v15 = (void *)v14;
    uint64_t v19 = v7;
    *(_DWORD *)uint64_t v13 = 138412290;
    uint64_t v16 = v10;
    uint64_t v7 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Record Zone ID Changed: %@", v13, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    uint64_t v4 = v20;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v11 = v10;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10001CBF4(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000382C8();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  id v9 = a2;
  id v10 = a1;
  id v11 = v9;
  id v12 = v10;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v27 = v25;
    *(_DWORD *)uint64_t v15 = 136315394;
    [v11 scope:v15 + 4];
    id v16 = (id)CKDatabaseScopeString();
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v4;
    unint64_t v19 = v18;

    uint64_t v26 = sub_100004FA4(v17, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2112;
    uint64_t v26 = (uint64_t)v12;
    id v20 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Change token updated, database, %s, token, %@", (uint8_t *)v15, 0x16u);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v24);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void sub_10001CEE4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_10001CF4C(NSObject *a1, uint64_t a2, void *a3, void (*a4)(NSObject *, uint64_t), uint64_t a5, void *a6, char *a7, unint64_t *a8, uint64_t a9)
{
  v170 = a8;
  v151 = (void (*)(NSObject *, uint64_t))a4;
  uint64_t v152 = a5;
  v172 = a3;
  uint64_t v165 = type metadata accessor for URL();
  uint64_t v149 = *(void *)(v165 - 8);
  uint64_t v13 = *(void *)(v149 + 64);
  uint64_t v14 = __chkstk_darwin(v165);
  uint64_t v15 = __chkstk_darwin(v14);
  v153 = (char *)&v141 - v16;
  __chkstk_darwin(v15);
  v166 = (char *)&v141 - v17;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v21 = __chkstk_darwin(v20);
  v169 = (char *)&v141 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v173 = (char *)&v141 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v174 = (void **)((char *)&v141 - v26);
  uint64_t v27 = __chkstk_darwin(v25);
  BOOL v31 = (char *)&v141 - v30;
  uint64_t v175 = v32;
  id v33 = (void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  unsigned int v156 = a2;
  uint64_t v163 = v27;
  if ((a2 & 0x100) != 0)
  {
    swift_errorRetain();
    uint64_t v50 = sub_1000382C8();
    (*v33)(v31, v50, v18);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      os_log_type_t v53 = (uint8_t *)swift_slowAlloc();
      BOOL v54 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v53 = 138412290;
      swift_errorRetain();
      BOOL v55 = (void **)_swift_stdlib_bridgeErrorToNSError();
      long long aBlock = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v54 = v55;
      sub_100036B00(a1, v156, 1);
      sub_100036B00(a1, v156, 1);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Error during fetch database changes operation: %@", v53, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v156;
      swift_slowDealloc();
    }
    else
    {
      sub_100036B00(a1, a2, 1);
      sub_100036B00(a1, a2, 1);
    }
    uint64_t v56 = v175;

    (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v163);
    sub_1000230D4((uint64_t)a1, 0);
    swift_errorRetain();
    v151(a1, 1);
    sub_100036B00(a1, a2, 1);
    sub_100036B00(a1, a2, 1);
    return;
  }
  v162 = v29;
  v155 = v28;
  v167 = a7;
  v168 = a7 + 16;
  uint64_t v34 = a6;
  unint64_t v35 = a1;
  uint64_t v36 = sub_1000382C8();
  id v37 = *v33;
  uint64_t v159 = v36;
  v160 = v33;
  v158 = v37;
  ((void (*)(void **))v37)(v174);
  sub_100036AF4(a1, a2, 0);
  id v38 = v34;
  sub_100036AF4(a1, a2, 0);
  id v39 = v38;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  LODWORD(v161) = v41;
  BOOL v42 = os_log_type_enabled(v40, v41);
  v171 = v35;
  v145 = a1;
  uint64_t v141 = v13;
  v142 = (char *)&v141 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v164 = v39;
  if (v42)
  {
    uint64_t v43 = swift_slowAlloc();
    v154 = (void *)swift_slowAlloc();
    v157 = (void **)swift_slowAlloc();
    long long aBlock = v157;
    *(_DWORD *)uint64_t v43 = 67109634;
    LODWORD(v184[0]) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 8) = 2080;
    [v39 scope];
    id v44 = (id)CKDatabaseScopeString();
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v47 = v46;

    v184[0] = sub_100004FA4(v45, v47, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 18) = 2112;
    v184[0] = v171;
    uint64_t v48 = v171;
    uint64_t v49 = v156;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v154 = a1;
    sub_100036B00(a1, v49, 0);
    sub_100036B00(a1, v49, 0);
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v161, "Fetch database changes complete, moreComing %{BOOL}d, database, %s, token, %@", (uint8_t *)v43, 0x1Cu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_100036B00(a1, a2, 0);
    sub_100036B00(a1, a2, 0);
  }

  uint64_t v57 = (_DWORD *)v175;
  v157 = *(void ***)(v175 + 8);
  ((void (*)(void **, uint64_t))v157)(v174, v18);
  uint64_t v58 = (uint64_t)v168;
  swift_beginAccess();
  unint64_t v59 = (uint64_t *)v173;
  if (*(void *)v58 >> 62) {
    goto LABEL_66;
  }
  uint64_t v60 = *(void *)((*(void *)v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unsigned __int8 v61 = v171;
    if (v60)
    {
      uint64_t v62 = v163;
      v158((char *)v59, v159, v163);
      swift_retain_n();
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        v174 = (void **)swift_slowAlloc();
        long long aBlock = v174;
        *(_DWORD *)uint64_t v65 = 136315138;
        swift_beginAccess();
        sub_100014588(0, &qword_10008F310);
        swift_bridgeObjectRetain();
        uint64_t v66 = Array.description.getter();
        unint64_t v68 = v67;
        unsigned __int8 v61 = v171;
        swift_bridgeObjectRelease();
        uint64_t v69 = v66;
        uint64_t v58 = (uint64_t)v168;
        v184[0] = sub_100004FA4(v69, v68, (uint64_t *)&aBlock);
        uint64_t v57 = (_DWORD *)v175;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Cloud zone deleted: %s", v65, 0xCu);
        swift_arrayDestroy();
        id v70 = v172;
        swift_slowDealloc();
        swift_slowDealloc();

        ((void (*)(char *, uint64_t))v157)(v173, v163);
      }
      else
      {

        swift_release_n();
        ((void (*)(uint64_t *, uint64_t))v157)(v59, v62);
        id v70 = v172;
      }
      uint64_t v71 = v70[9];
      uint64_t v72 = swift_allocObject();
      *(void *)(v72 + 16) = v70;
      *(void *)(v72 + 24) = v58;
      uint64_t v73 = swift_allocObject();
      *(void *)(v73 + 16) = sub_100036B44;
      *(void *)(v73 + 24) = v72;
      uint64_t v144 = v72;
      v182 = sub_100037468;
      uint64_t v183 = v73;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v179 = 1107296256;
      v180 = sub_10000FBDC;
      v181 = &unk_100086E30;
      uint64_t v74 = (long long *)_Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v71, v74);
      _Block_release(v74);
      LOBYTE(v71) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v71)
      {
        __break(1u);
LABEL_72:
        swift_bridgeObjectRetain();
        uint64_t v140 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v79 = swift_bridgeObjectRelease();
        if (!v140) {
          goto LABEL_29;
        }
        goto LABEL_25;
      }
      os_log_type_t v75 = v169;
      v158(v169, v159, v163);
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Re-Setup Zones", v78, 2u);
        swift_slowDealloc();
      }

      ((void (*)(char *, uint64_t))v157)(v75, v163);
      sub_10001945C((BOOL)_swiftEmptyArrayStorage);
      uint64_t v60 = (uint64_t)sub_100036B44;
    }
    else
    {
      uint64_t v144 = 0;
      id v70 = v172;
    }
    uint64_t v79 = swift_beginAccess();
    uint64_t v80 = *(void *)v58;
    uint64_t v81 = *(void *)v58 >> 62;
    uint64_t v143 = v60;
    if (v81)
    {
      swift_bridgeObjectRetain();
      uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v79 = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v82 = *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v74 = (long long *)v184;
    v170 += 2;
    if (!v82) {
      goto LABEL_29;
    }
    Swift::String v83 = v170;
    uint64_t v79 = swift_beginAccess();
    unint64_t v84 = *v83;
    if (v84 >> 62) {
      goto LABEL_72;
    }
    if (!*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_29;
    }
LABEL_25:
    if (!a9)
    {
      v158((char *)v162, v159, v163);
      v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v85, v86))
      {
        BOOL v87 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v87 = 0;
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "New Account Setup Zones", v87, 2u);
        swift_slowDealloc();
      }

      ((void (*)(NSString *, uint64_t))v157)(v162, v163);
      sub_10001945C((BOOL)_swiftEmptyArrayStorage);
    }
LABEL_29:
    (*(void (**)(void *__return_ptr, uint64_t))(*v70 + 256))(v184, v79);
    v88 = v185;
    v188[0] = v185;
    long long v187 = *v74;
    swift_bridgeObjectRetain();
    sub_1000306C4((uint64_t)&v187);
    long long v186 = v74[1];
    sub_1000306C4((uint64_t)&v186);
    sub_1000306F0((uint64_t)v188);
    unint64_t v59 = (uint64_t *)v170;
    v168 = (char *)*((void *)v88 + 2);
    v169 = v88;
    if (!v168) {
      break;
    }
    v167 = v169 + 32;
    swift_beginAccess();
    unint64_t v89 = 0;
    v161 = (void (**)(char *, uint64_t))(v149 + 8);
    v162 = CKCurrentUserDefaultName;
    v154 = v57 + 2;
    v148 = &v177;
    *(void *)&long long v90 = 136315138;
    long long v147 = v90;
    v146 = (char *)&type metadata for Any + 8;
    while (v89 < *((void *)v169 + 2))
    {
      v173 = (char *)v89;
      v100 = (uint64_t *)&v167[16 * v89];
      uint64_t v101 = v100[1];
      v174 = (void **)*v100;
      uint64_t v175 = v101;
      uint64_t v102 = *v59;
      if ((unint64_t)*v59 >> 62)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v103 = _CocoaArrayWrapper.endIndex.getter();
        if (v103)
        {
LABEL_38:
          unint64_t v59 = (uint64_t *)(v102 & 0xC000000000000001);
          uint64_t v104 = 4;
          while (1)
          {
            uint64_t v105 = v59
                 ? (_DWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)()
                 : *(id *)(v102 + 8 * v104);
            uint64_t v57 = v105;
            uint64_t v106 = v104 - 3;
            if (__OFADD__(v104 - 4, 1)) {
              break;
            }
            uint64_t v58 = (uint64_t)[v105 zoneName];
            uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v109 = v108;

            if ((void **)v107 == v174 && v109 == v175)
            {
              swift_bridgeObjectRelease_n();

LABEL_54:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v70 = v172;
              goto LABEL_33;
            }
            uint64_t v58 = _stringCompareWithSmolCheck(_:_:expecting:)();

            swift_bridgeObjectRelease();
            if (v58)
            {
              swift_bridgeObjectRelease();
              goto LABEL_54;
            }
            ++v104;
            if (v106 == v103) {
              goto LABEL_31;
            }
          }
          __break(1u);
          break;
        }
      }
      else
      {
        uint64_t v103 = *(void *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if (v103) {
          goto LABEL_38;
        }
      }
LABEL_31:
      swift_bridgeObjectRelease_n();
      sub_100014588(0, &qword_10008F310);
      uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v57 = v92;
      v93 = (void *)v175;
      swift_bridgeObjectRetain();
      v94._uint64_t countAndFlagsBits = (uint64_t)v174;
      v94._object = v93;
      v95._uint64_t countAndFlagsBits = v91;
      v95._object = v57;
      v96.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v94, v95).super.isa;
      id v97 = [v164 scope];
      v98 = v166;
      id v70 = v172;
      sub_10001B6C0((uint64_t)v97, v96.super.isa);
      uint64_t v99 = (void *)sub_100030C78();

      if (v99)
      {
        (*v161)(v98, v165);
        swift_bridgeObjectRelease();

LABEL_33:
        unint64_t v59 = (uint64_t *)v170;
        unsigned __int8 v61 = v171;
      }
      else
      {
        v111 = v155;
        uint64_t v112 = v163;
        v158(v155, v159, v163);
        swift_bridgeObjectRetain();
        v113 = Logger.logObject.getter();
        os_log_type_t v114 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v113, v114))
        {
          uint64_t v57 = (_DWORD *)swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          long long aBlock = (void **)v58;
          *uint64_t v57 = v147;
          v150 = v57 + 1;
          swift_bridgeObjectRetain();
          uint64_t v176 = sub_100004FA4((uint64_t)v174, (unint64_t)v93, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v113, v114, "Adding fetch operation for new zone: %s", (uint8_t *)v57, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v115 = v111;
          uint64_t v116 = v163;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          uint64_t v115 = v111;
          uint64_t v116 = v112;
        }
        ((void (*)(char *, uint64_t))v157)(v115, v116);
        unint64_t v59 = (uint64_t *)v170;
        swift_beginAccess();
        v117 = v96.super.isa;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unsigned __int8 v61 = v171;
        if (*(void *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();

        (*v161)(v166, v165);
      }
      unint64_t v89 = (unint64_t)(v173 + 1);
      if (v173 + 1 == v168) {
        goto LABEL_61;
      }
    }
    __break(1u);
LABEL_66:
    swift_bridgeObjectRetain();
    uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_61:
  sub_1000306F0((uint64_t)v188);
  swift_beginAccess();
  swift_retain();
  unint64_t v118 = swift_bridgeObjectRetain();
  v119 = sub_10003208C(v118, (uint64_t)v70);
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  *unint64_t v59 = (uint64_t)v119;
  swift_bridgeObjectRelease();
  sub_10001B400((uint64_t)[v164 scope]);
  swift_beginAccess();
  if ((unint64_t)*v59 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v134 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v120 = (uint64_t)v153;
    if (!v134) {
      goto LABEL_69;
    }
LABEL_63:
    swift_beginAccess();
    uint64_t v175 = *v59;
    uint64_t v121 = v70;
    uint64_t v122 = v149;
    long long v123 = v142;
    uint64_t v124 = v165;
    (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v142, v120, v165);
    unint64_t v125 = (*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
    unint64_t v126 = (v141 + v125 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v127 = swift_allocObject();
    *(void *)(v127 + 16) = v121;
    *(void *)(v127 + 24) = v61;
    (*(void (**)(unint64_t, char *, uint64_t))(v122 + 32))(v127 + v125, v123, v124);
    v128 = (void *)(v127 + v126);
    uint64_t v129 = v152;
    *v128 = v151;
    v128[1] = v129;
    v130 = *(void (**)(id, uint64_t, uint64_t (*)(uint64_t, char), uint64_t))(*v121 + 832);
    v131 = v145;
    uint64_t v132 = v156;
    sub_100036AF4(v145, v156, 0);
    swift_retain();
    uint64_t v133 = v175;
    swift_bridgeObjectRetain();
    swift_retain();
    v130(v164, v133, sub_100036DDC, v127);
    swift_bridgeObjectRelease();
    swift_release();
    sub_100036B00(v131, v132, 0);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v153, v165);
    sub_100036E90(v143);
  }
  else
  {
    uint64_t v120 = (uint64_t)v153;
    if (*(void *)((*v59 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_63;
    }
LABEL_69:
    v135 = v145;
    uint64_t v136 = v156;
    sub_100036AF4(v145, v156, 0);
    sub_10003143C(v135, v120);
    sub_100036B00(v135, v136, 0);
    v137 = v70[9];
    uint64_t v138 = swift_allocObject();
    *(void *)(v138 + 16) = sub_100036EA0;
    *(void *)(v138 + 24) = v70;
    v182 = sub_100037468;
    uint64_t v183 = v138;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v179 = 1107296256;
    v180 = sub_10000FBDC;
    v181 = &unk_100086EA8;
    v139 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v137, v139);
    _Block_release(v139);
    LOBYTE(v137) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v137)
    {
      __break(1u);
    }
    else
    {
      v151(0, 0);
      sub_100036B00(v135, v136, 0);
      (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v120, v165);
      sub_100036E90(v143);
      swift_release();
    }
  }
}

uint64_t sub_10001E530(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  id v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10001E5F8(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000423C(&qword_10008EE48);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  BOOL v12 = (char *)v20 - v11;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    uint64_t v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void **)(v24 + 72);
      sub_1000145C4(a3 + v16 + (void)v13 * v14, (uint64_t)v12, &qword_10008EE48);
      char v17 = a1(v12);
      if (v3)
      {
        sub_10000E044((uint64_t)v12, &qword_10008EE48);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }
      if (v17)
      {
        sub_1000043DC((uint64_t)v12, v23, &qword_10008EE48);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_10002E898(0, v15[2] + 1, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_10002E898(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }
        _OWORD v15[2] = v19 + 1;
        uint64_t result = sub_1000043DC(v23, (uint64_t)v15 + v16 + v19 * (void)v13, &qword_10008EE48);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = sub_10000E044((uint64_t)v12, &qword_10008EE48);
      }
      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_10001E858(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), NSObject *a6)
{
  uint64_t v36 = a5;
  uint64_t v11 = a2 & 1;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v32 - v17;
  if (a2)
  {
    swift_errorRetain();
    uint64_t v23 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v23, v12);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_t v34 = v24;
      uint64_t v26 = swift_slowAlloc();
      unint64_t v35 = a6;
      uint64_t v27 = (uint8_t *)v26;
      id v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      swift_errorRetain();
      uint64_t v28 = v11;
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v37 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v33 = v29;
      uint64_t v11 = v28;
      sub_100035380(a1, 1);
      sub_100035380(a1, 1);
      os_log_t v30 = v34;
      _os_log_impl((void *)&_mh_execute_header, v34, v25, "Database Error from fetchZoneChanges: %@", v27, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100035380(a1, 1);
    }
    else
    {
      sub_100035380(a1, 1);
      sub_100035380(a1, 1);
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  else
  {
    uint64_t v19 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v19, v12);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      unint64_t v35 = a3;
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Database fetchZoneChanges succeeded", v22, 2u);
      a3 = v35;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    sub_10003143C(a3, a4);
  }
  return v36(a1, v11);
}

uint64_t sub_10001EBF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  os_log_type_t v25 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  id v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014588(0, (unint64_t *)&qword_10008E900);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  uint64_t v15 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  unint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = v25;
  uint64_t v18 = v26;
  v16[2] = a2;
  v16[3] = v18;
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  v16[4] = v17;
  v16[5] = v19;
  v16[6] = v20;
  aBlock[4] = sub_100032000;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100086170;
  os_log_type_t v21 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  id v22 = v17;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  BOOL v31 = _swiftEmptyArrayStorage;
  sub_100032010((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v29);
  return swift_release();
}

uint64_t sub_10001EFC4(unint64_t a1, id *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v99 = a4;
  id v117 = a3;
  uint64_t v105 = a2;
  uint64_t v114 = type metadata accessor for URL();
  uint64_t v7 = *(uint8_t **)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void **)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  v100 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v106 = (char *)&v97 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v97 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v97 - v19;
  uint64_t v21 = sub_1000382C8();
  id v22 = (void (*)(char *, uint64_t, uint64_t))v11[2];
  uint64_t v120 = v21;
  uint64_t v121 = v11 + 2;
  v119 = v22;
  ((void (*)(char *))v22)(v20);
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v124 = v10;
  uint64_t v122 = (id *)a1;
  uint64_t v115 = v9;
  uint64_t v98 = a5;
  uint64_t v101 = v18;
  if (v25)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v129 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    long long v123 = (uint8_t *)v11;
    sub_100014588(0, &qword_10008F310);
    swift_bridgeObjectRetain();
    uint64_t v27 = Array.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v127 = sub_100004FA4(v27, v29, &v129);
    uint64_t v11 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "zoneIDs changed: %s", v26, 0xCu);
    swift_arrayDestroy();
    a1 = (unint64_t)v122;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v30 = (uint8_t *)v11[1];
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v20, v124);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v30 = (uint8_t *)v11[1];
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v20, v10);
  }
  uint64_t v32 = (char *)&type metadata for Any;
  id v33 = v106;
  if (a1 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v34) {
      return result;
    }
  }
  else
  {
    uint64_t v34 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v34) {
      return result;
    }
  }
  uint64_t v126 = (uint64_t)&_swiftEmptyDictionarySingleton;
  if (v34 < 1) {
    __break(1u);
  }
  unint64_t v113 = a1 & 0xC000000000000001;
  unint64_t v118 = v11 + 1;
  v111 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v104 = &v128;
  swift_bridgeObjectRetain();
  uint64_t v35 = 0;
  *(void *)&long long v36 = 136315394;
  long long v103 = v36;
  uint64_t v102 = v32 + 8;
  uint64_t v37 = v105;
  uint64_t v112 = v34;
  do
  {
    if (v113) {
      id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v38 = *(id *)(a1 + 8 * v35 + 32);
    }
    id v39 = v38;
    id v40 = [objc_allocWithZone((Class)CKFetchRecordZoneChangesConfiguration) init];
    a1 = (unint64_t)v37;
    sub_10001B6C0((uint64_t)[v117 scope], v39);
    uint64_t v11 = (void *)sub_100030C78();
    os_log_type_t v41 = (void *)sub_100030C78();
    [v40 setPreviousServerChangeToken:v41];

    uint64_t v32 = (char *)v126;
    if ((v126 & 0xC000000000000001) != 0)
    {
      if (v126 >= 0) {
        uint64_t v32 = (char *)(v126 & 0xFFFFFFFFFFFFFF8);
      }
      id v42 = v39;
      id v43 = v40;
      uint64_t v44 = __CocoaDictionary.count.getter();
      uint64_t v45 = v124;
      if (__OFADD__(v44, 1))
      {
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v7 = v30;
      uint64_t v32 = (char *)sub_10002EBE8((uint64_t)v32, v44 + 1);
    }
    else
    {
      uint64_t v7 = v30;
      id v46 = v39;
      id v47 = v40;
      uint64_t v45 = v124;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v129 = (uint64_t)v32;
    sub_10002F6FC((uint64_t)v40, v39, isUniquelyReferenced_nonNull_native);
    uint64_t v126 = v129;

    swift_bridgeObjectRelease();
    v119(v33, v120, v45);
    uint64_t v49 = v11;
    id v50 = v39;
    uint64_t v51 = v49;
    long long v123 = (uint8_t *)v11;
    uint64_t v52 = v45;
    os_log_type_t v53 = v40;
    id v54 = v51;
    id v55 = v50;
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      os_log_t v109 = v56;
      id v110 = v53;
      uint64_t v116 = v7;
      uint64_t v58 = swift_slowAlloc();
      uint64_t v107 = (void *)swift_slowAlloc();
      uint64_t v108 = swift_slowAlloc();
      uint64_t v129 = v108;
      *(_DWORD *)uint64_t v58 = v103;
      id v59 = [v55 zoneName];
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v62 = v61;

      uint64_t v127 = sub_100004FA4(v60, v62, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2112;
      uint64_t v7 = v123;
      if (v123)
      {
        uint64_t v127 = (uint64_t)v54;
        id v63 = v54;
      }
      else
      {
        uint64_t v127 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v64 = v124;
      uint64_t v30 = v116;
      *uint64_t v107 = v7;

      os_log_type_t v65 = v57;
      os_log_t v66 = v109;
      _os_log_impl((void *)&_mh_execute_header, v109, v65, "Old change token for %s : %@", (uint8_t *)v58, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v33 = v106;
      ((void (*)(char *, uint64_t))v30)(v106, v64);
      (*v111)(v115, v114);
      uint64_t v37 = v105;
    }
    else
    {

      uint64_t v30 = v7;
      ((void (*)(char *, uint64_t))v7)(v33, v52);
      (*v111)(v115, v114);
      uint64_t v37 = (id *)a1;
    }
    a1 = (unint64_t)v122;
    ++v35;
  }
  while (v112 != v35);
  unint64_t v67 = v37;
  swift_bridgeObjectRelease();
  unint64_t v68 = v101;
  uint64_t v69 = v124;
  v119(v101, v120, v124);
  id v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    uint64_t v116 = v30;
    uint64_t v129 = v73;
    *(_DWORD *)uint64_t v72 = 136315138;
    long long v123 = v72 + 4;
    swift_beginAccess();
    sub_100014588(0, &qword_10008F310);
    sub_100014588(0, &qword_10008F378);
    uint64_t v69 = v124;
    sub_1000353B0(&qword_10008F380, &qword_10008F310);
    swift_bridgeObjectRetain();
    unint64_t v67 = v105;
    uint64_t v74 = Dictionary.description.getter();
    unint64_t v76 = v75;
    swift_bridgeObjectRelease();
    uint64_t v77 = v74;
    a1 = (unint64_t)v122;
    uint64_t v125 = sub_100004FA4(v77, v76, &v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "optionsByRecordZoneID: %s", v72, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v116)(v101, v69);
  }
  else
  {

    uint64_t v116 = v30;
    ((void (*)(char *, uint64_t))v30)(v68, v69);
  }
  uint64_t v78 = v100;
  uint64_t v79 = v98;
  uint64_t v80 = swift_allocObject();
  *(void *)(v80 + 16) = _swiftEmptyArrayStorage;
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = _swiftEmptyArrayStorage;
  sub_100014588(0, &qword_10008F370);
  swift_beginAccess();
  Swift::Bool v82 = v126;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v130.value._rawValue = (void *)a1;
  v130.is_nil = v82;
  Class isa = CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v130, v131).super.super.super.super.isa;
  [(objc_class *)isa setFetchAllChanges:1];
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter();
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter();
  unint64_t v84 = (void *)swift_allocObject();
  id v85 = v117;
  v84[2] = v117;
  v84[3] = v67;
  v84[4] = v81;
  v84[5] = v80;
  swift_retain();
  long long v123 = (uint8_t *)v80;
  swift_retain();
  id v86 = v85;
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter();
  BOOL v87 = (void *)swift_allocObject();
  v87[2] = v86;
  v87[3] = a1;
  uint64_t v88 = v99;
  v87[4] = v67;
  v87[5] = v88;
  v87[6] = v79;
  swift_bridgeObjectRetain();
  unint64_t v89 = (id *)v86;
  swift_retain();
  swift_retain();
  CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter();
  v119(v78, v120, v69);
  long long v90 = isa;
  uint64_t v91 = Logger.logObject.getter();
  os_log_type_t v92 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v91, v92))
  {
    v93 = (uint8_t *)swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    uint64_t v122 = v89;
    Swift::String v95 = (void *)v94;
    *(_DWORD *)v93 = 138412290;
    uint64_t v125 = (uint64_t)v90;
    CKRecordZoneID v96 = v90;
    uint64_t v69 = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *Swift::String v95 = v90;

    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Adding Cloud operation %@", v93, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    unint64_t v89 = v122;
    uint64_t v78 = v100;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v91 = v90;
  }

  ((void (*)(char *, uint64_t))v116)(v78, v69);
  [v89 addOperation:v90];
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001FE18(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v71 = a4;
  int v75 = a3;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (uint8_t *)&v69 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v69 - v14;
  uint64_t v16 = sub_1000382C8();
  uint64_t v17 = *(void (**)(uint8_t *, os_log_t, uint64_t))(v7 + 16);
  os_log_t v76 = v16;
  uint64_t v77 = v17;
  ((void (*)(char *))v17)(v15);
  uint64_t v18 = a1;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v74 = v6;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v78 = v7;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v72 = v13;
    uint64_t v69 = (uint64_t *)v24;
    id v70 = v10;
    uint64_t v73 = a2;
    *(_DWORD *)uint64_t v23 = 138412290;
    v80[0] = (uint64_t)v18;
    BOOL v25 = v18;
    a2 = v73;
    uint64_t v26 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t *v69 = (uint64_t)v18;

    _os_log_impl((void *)&_mh_execute_header, v19, v20, "RecordID changed: %@", v23, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    uint64_t v10 = v26;
    uint64_t v6 = v74;
    uint64_t v13 = v72;
    swift_slowDealloc();
    uint64_t v7 = v78;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v19 = v18;
  }

  unint64_t v29 = *(void (**)(uint8_t *, os_log_t, uint64_t))(v7 + 8);
  uint64_t v27 = v7 + 8;
  unint64_t v28 = v29;
  ((void (*)(char *, uint64_t))v29)(v15, v6);
  if (v75)
  {
    v77(v13, v76, v6);
    sub_100035400(a2, 1);
    id v33 = v18;
    sub_100035400(a2, 1);
    uint64_t v34 = v33;
    sub_100035400(a2, 1);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v77 = v28;
      id v38 = a2;
      uint64_t v39 = v37;
      uint64_t v40 = swift_slowAlloc();
      uint64_t v72 = v13;
      os_log_type_t v41 = (void *)v40;
      *(_DWORD *)uint64_t v39 = 138412546;
      uint64_t v78 = v27;
      v80[0] = (uint64_t)v34;
      id v42 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v41 = v34;

      *(_WORD *)(v39 + 12) = 2112;
      swift_errorRetain();
      uint64_t v43 = _swift_stdlib_bridgeErrorToNSError();
      v80[0] = v43;
      uint64_t v6 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v41[1] = v43;
      sub_100035E8C(v38, 1);
      sub_100035E8C(v38, 1);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "%@ failed to be fetched: %@", (uint8_t *)v39, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      uint64_t v13 = v72;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v44 = v38;
      unint64_t v28 = v77;
      sub_100035E8C(v44, 1);
    }
    else
    {
      sub_100035E8C(a2, 1);

      sub_100035E8C(a2, 1);
      sub_100035E8C(a2, 1);
    }
    uint64_t v45 = v13;
    return ((uint64_t (*)(uint8_t *, uint64_t))v28)(v45, v6);
  }
  uint64_t v30 = (void *)(v71 + 16);
  swift_beginAccess();
  id v31 = a2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  v77((uint8_t *)v10, v76, v6);
  if (IsAppleInternalBuild()) {
    int v32 = static os_log_type_t.default.getter();
  }
  else {
    int v32 = static os_log_type_t.debug.getter();
  }
  int v46 = v32;
  id v47 = v18;
  sub_100035400(a2, 0);
  uint64_t v48 = v47;
  sub_100035400(a2, 0);
  uint64_t v49 = Logger.logObject.getter();
  if (!os_log_type_enabled(v49, (os_log_type_t)v46))
  {
    sub_100035E8C(a2, 0);

    sub_100035E8C(a2, 0);
    sub_100035E8C(a2, 0);

    uint64_t v45 = (uint8_t *)v10;
    return ((uint64_t (*)(uint8_t *, uint64_t))v28)(v45, v6);
  }
  int v75 = v46;
  os_log_t v76 = v49;
  uint64_t v77 = v28;
  uint64_t v73 = a2;
  uint64_t v78 = v27;
  uint64_t v50 = swift_slowAlloc();
  uint64_t v71 = swift_slowAlloc();
  v80[0] = v71;
  *(_DWORD *)uint64_t v50 = 136315394;
  id v51 = [v48 recordName];
  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v54 = v53;

  uint64_t v79 = sub_100004FA4(v52, v54, v80);
  uint64_t v69 = v80;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  uint64_t v72 = (uint8_t *)v50;
  *(_WORD *)(v50 + 12) = 2080;
  id v55 = [[objc_msgSend(v31, "encryptedValues") allKeys];
  swift_unknownObjectRelease();
  uint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v79 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v57 = *(void *)(v56 + 16);
  if (v57)
  {
    id v70 = v10;
    swift_bridgeObjectRetain();
    uint64_t v58 = v56 + 40;
    do
    {
      swift_bridgeObjectRetain();
      id v59 = [v31 encryptedValues];
      NSString v60 = String._bridgeToObjectiveC()();
      id v61 = [v59 objectForKeyedSubscript:v60];
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      if (v61)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v58 += 16;
      --v57;
    }
    while (v57);
    swift_bridgeObjectRelease();
    uint64_t v6 = v74;
    uint64_t v10 = v70;
  }
  swift_bridgeObjectRelease();
  id v63 = v72;
  sub_10000423C(&qword_10008F510);
  uint64_t v64 = Array.description.getter();
  unint64_t v66 = v65;
  swift_bridgeObjectRelease();
  uint64_t v79 = sub_100004FA4(v64, v66, v80);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  unint64_t v67 = v73;
  sub_100035E8C(v73, 0);
  sub_100035E8C(v67, 0);
  os_log_t v68 = v76;
  _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v75, "CKRecord fetched: %s - %s", v63, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  sub_100035E8C(v67, 0);
  return ((uint64_t (*)(char *, uint64_t))v77)(v10, v6);
}

uint64_t sub_1000206F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void **)(a4 + 16);
  uint64_t v13 = sub_1000382C8();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  uint64_t v14 = a1;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v29 = v8;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v31 = a3;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v30 = a2;
    unint64_t v28 = v18;
    *(_DWORD *)uint64_t v18 = 138412290;
    int v32 = v14;
    uint64_t v19 = v14;
    uint64_t v8 = v29;
    a2 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v27 = v14;

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Record deleted: %@", v28, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v31;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v15 = v14;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_beginAccess();
  os_log_type_t v20 = *v12;
  BOOL v21 = v14;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char *v12 = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    os_log_type_t v20 = sub_10002E304(0, v20[2] + 1, 1, v20);
    char *v12 = v20;
  }
  unint64_t v24 = v20[2];
  unint64_t v23 = v20[3];
  if (v24 >= v23 >> 1)
  {
    os_log_type_t v20 = sub_10002E304((void *)(v23 > 1), v24 + 1, 1, v20);
    char *v12 = v20;
  }
  void v20[2] = v24 + 1;
  BOOL v25 = &v20[3 * v24];
  v25[4] = v21;
  v25[5] = a2;
  v25[6] = a3;
  return swift_endAccess();
}

void sub_1000209DC(void *a1, NSObject *a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v124 = a8;
  Swift::OpaquePointer_optional v130 = a7;
  uint64_t v132 = a4;
  long long v123 = a3;
  uint64_t v134 = a2;
  uint64_t v122 = type metadata accessor for URL();
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v120 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v125 = (char *)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  Swift::OpaquePointer_optional v131 = (char *)&v115 - v18;
  __chkstk_darwin(v17);
  os_log_type_t v20 = (char *)&v115 - v19;
  BOOL v21 = (void *)sub_1000382C8();
  uint64_t v22 = *(void (**)(char *, id, uint64_t))(v14 + 16);
  id v127 = v21;
  char v128 = v22;
  id v126 = (id)(v14 + 16);
  ((void (*)(char *))v22)(v20);
  id v23 = a6;
  id v24 = a1;
  id v25 = v23;
  id v26 = v24;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  int v29 = v28;
  BOOL v30 = os_log_type_enabled(v27, v28);
  uint64_t v129 = v13;
  uint64_t v133 = v14;
  if (v30)
  {
    uint64_t v31 = swift_slowAlloc();
    LODWORD(v117) = v29;
    uint64_t v32 = v31;
    id v118 = (id)swift_slowAlloc();
    *(void *)&long long aBlock = v118;
    *(_DWORD *)uint64_t v32 = 136315394;
    unsigned int v119 = a5;
    [v25 scope];
    id v33 = (id)CKDatabaseScopeString();
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    uint64_t v139 = sub_100004FA4(v34, v36, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    id v37 = [v26 zoneName];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;

    uint64_t v41 = v38;
    a5 = v119;
    uint64_t v139 = sub_100004FA4(v41, v40, (uint64_t *)&aBlock);
    uint64_t v13 = v129;
    uint64_t v14 = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v42 = v26;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v117, "record zone fetch complete, database, %s, zone, %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v42 = v26;
  }
  uint64_t v43 = *(void (**)(char *, uint64_t))(v14 + 8);
  v43(v20, v13);
  uint64_t v44 = v25;
  unint64_t v45 = (unint64_t)v132;
  int v46 = v131;
  if ((a5 & 0x100) != 0)
  {
    v128(v131, v127, v13);
    uint64_t v78 = v134;
    uint64_t v79 = v123;
    sub_100036868(v134, (uint64_t)v123, v45, a5, 1);
    id v80 = v44;
    sub_100036868(v78, (uint64_t)v79, v45, a5, 1);
    id v81 = v80;
    sub_100036868(v78, (uint64_t)v79, v45, a5, 1);
    Swift::Bool v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.error.getter();
    int v84 = v83;
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v85 = swift_slowAlloc();
      LODWORD(v126) = v84;
      uint64_t v86 = v85;
      uint64_t v125 = (char *)swift_slowAlloc();
      id v127 = (id)swift_slowAlloc();
      *(void *)&long long aBlock = v127;
      *(_DWORD *)uint64_t v86 = 136315394;
      [v81 scope];
      id v87 = (id)CKDatabaseScopeString();
      char v128 = (void (*)(char *, id, uint64_t))v43;
      id v88 = v87;
      unint64_t v89 = v82;
      uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v91 = a5;
      unint64_t v93 = v92;

      uint64_t v94 = v90;
      Swift::String v95 = v134;
      unint64_t v45 = (unint64_t)v132;
      uint64_t v139 = sub_100004FA4(v94, v93, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a5 = v91;
      swift_bridgeObjectRelease();
      *(_WORD *)(v86 + 12) = 2112;
      swift_errorRetain();
      uint64_t v96 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v139 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v125 = v96;
      sub_1000368BC(v95, (uint64_t)v79, v45, v91, 1);
      sub_1000368BC(v95, (uint64_t)v79, v45, v91, 1);
      _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v126, "Error fetching zone changes for %s database: %@", (uint8_t *)v86, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v128)(v131, v129);
    }
    else
    {

      unint64_t v113 = v134;
      sub_1000368BC(v134, (uint64_t)v79, v45, a5, 1);
      sub_1000368BC(v113, (uint64_t)v79, v45, a5, 1);

      v43(v46, v13);
    }
    uint64_t v114 = v134;
    sub_1000230D4((uint64_t)v134, 0);
    sub_1000368BC(v114, (uint64_t)v79, v45, a5, 1);
  }
  else
  {
    Swift::OpaquePointer_optional v131 = (char *)(v124 + 16);
    uint64_t v132 = (void *)(a9 + 16);
    id v47 = v125;
    v128(v125, v127, v13);
    uint64_t v48 = v134;
    id v49 = v25;
    id v50 = v42;
    id v51 = v48;
    swift_retain_n();
    swift_retain_n();
    id v52 = v49;
    id v53 = v50;
    unint64_t v54 = v51;
    id v55 = Logger.logObject.getter();
    unsigned int v119 = static os_log_type_t.default.getter();
    BOOL v56 = os_log_type_enabled(v55, (os_log_type_t)v119);
    id v127 = v54;
    id v126 = v53;
    id v118 = v52;
    if (!v56)
    {

      swift_release_n();
      swift_release_n();
      v43(v47, v13);
      uint64_t v73 = v130;
      int v75 = v132;
      uint64_t v71 = v131;
      goto LABEL_12;
    }
    os_log_t v117 = v55;
    char v128 = (void (*)(char *, id, uint64_t))v43;
    uint64_t v57 = swift_slowAlloc();
    long long v123 = (void *)swift_slowAlloc();
    uint64_t v116 = swift_slowAlloc();
    *(void *)&long long aBlock = v116;
    *(_DWORD *)uint64_t v57 = 136316162;
    [v52 scope];
    uint64_t v58 = v54;
    id v59 = (id)CKDatabaseScopeString();
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v61 = v53;
    unint64_t v62 = v52;
    unint64_t v64 = v63;

    uint64_t v139 = sub_100004FA4(v60, v64, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 2080;
    id v65 = [v61 zoneName];
    uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v68 = v67;

    uint64_t v139 = sub_100004FA4(v66, v68, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v69 = v134;
    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 22) = 2112;
    uint64_t v139 = (uint64_t)v58;
    id v70 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v123 = v69;

    *(_WORD *)(v57 + 32) = 2048;
    uint64_t v71 = v131;
    swift_beginAccess();
    if (*v71 >> 62) {
      goto LABEL_20;
    }
    uint64_t v72 = *(void *)((*v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_release();
    while (1)
    {
      uint64_t v73 = v130;
      uint64_t v74 = v128;
      int v75 = v132;
      uint64_t v139 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v57 + 42) = 2048;
      swift_beginAccess();
      uint64_t v76 = *(void *)(*(void *)(a9 + 16) + 16);
      swift_release();
      uint64_t v139 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      os_log_t v77 = v117;
      _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v119, "record zone fetch database, %s, zone, %s, token: %@, records changed: %ld, deleted: %ld", (uint8_t *)v57, 0x34u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v74)(v125, v129);
LABEL_12:
      uint64_t v97 = swift_beginAccess();
      __chkstk_darwin(v97);
      *(&v115 - 2) = (uint64_t)v71;
      uint64_t v98 = swift_bridgeObjectRetain();
      sub_100030A58(v98, (void (*)(id, uint64_t (*)(uint64_t), _OWORD *))sub_100036644);
      swift_bridgeObjectRelease();
      uint64_t v99 = v73[9];
      v100 = (void *)swift_allocObject();
      v100[2] = v73;
      v100[3] = v75;
      v100[4] = v71;
      uint64_t v101 = swift_allocObject();
      *(void *)(v101 + 16) = sub_100036684;
      *(void *)(v101 + 24) = v100;
      v137 = sub_100037468;
      uint64_t v138 = v101;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v136 = sub_10000FBDC;
      *((void *)&v136 + 1) = &unk_100086C78;
      uint64_t v102 = _Block_copy(&aBlock);
      uint64_t v57 = v138;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v99, v102);
      _Block_release(v102);
      LOBYTE(v102) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v102 & 1) == 0) {
        break;
      }
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    *uint64_t v71 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *int v75 = _swiftEmptyArrayStorage;
    uint64_t v103 = swift_bridgeObjectRelease();
    (*(void (**)(long long *__return_ptr, uint64_t))(*v73 + 256))(&aBlock, v103);
    uint64_t v104 = v137;
    long long v141 = aBlock;
    swift_bridgeObjectRetain();
    sub_1000306C4((uint64_t)&v141);
    long long v140 = v136;
    sub_1000306C4((uint64_t)&v140);
    swift_bridgeObjectRelease();
    id v105 = v126;
    id v106 = [v126 zoneName];
    uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v109 = v108;

    LOBYTE(v106) = sub_10001E530(v107, v109, v104);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v106)
    {
      id v110 = [v118 scope];
      uint64_t v111 = (uint64_t)v120;
      sub_10001B6C0((uint64_t)v110, v105);
      id v112 = v127;
      sub_10003143C(v134, v111);

      (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v111, v122);
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

void sub_1000219B8(void *a1, unint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  id v8 = a1;
  unint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = (void *)sub_100032438(v9, v8);
  swift_bridgeObjectRelease();

  if (v10)
  {
    swift_beginAccess();
    id v11 = v8;
    uint64_t v12 = sub_1000327E0(a2, v11);

    if (*a2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13 >= v12)
      {
LABEL_4:
        sub_100032BD4(v12, v13);
        swift_endAccess();
        uint64_t v14 = sub_1000382C8();
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, v4);
        id v15 = v10;
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = swift_slowAlloc();
          uint64_t v22 = (void *)swift_slowAlloc();
          uint64_t v23 = swift_slowAlloc();
          v27[0] = v23;
          *(_DWORD *)uint64_t v18 = 136315394;
          uint64_t v25 = v4;
          uint64_t v19 = CKRecord.recordType.getter();
          uint64_t v26 = sub_100004FA4(v19, v20, v27);
          uint64_t v24 = v5;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v18 + 12) = 2112;
          uint64_t v26 = (uint64_t)v15;
          id v21 = v15;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v22 = v10;

          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Don't send this record as part of update list as it is in queue for deletion: %s, %@", (uint8_t *)v18, 0x16u);
          sub_10000423C((uint64_t *)&unk_10008EA40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        }
        return;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v13 >= v12) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_100021D64(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v74 = a7;
  int v75 = a6;
  uint64_t v67 = a5;
  LODWORD(v71) = a2;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v68 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)&v62 - v14;
  __chkstk_darwin(v13);
  os_log_type_t v17 = (char *)&v62 - v16;
  uint64_t v18 = sub_1000382C8();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v69 = v18;
  id v70 = v19;
  ((void (*)(char *))v19)(v17);
  id v20 = a3;
  swift_bridgeObjectRetain_n();
  id v21 = v20;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  BOOL v25 = os_log_type_enabled(v22, v23);
  uint64_t v72 = v10;
  uint64_t v73 = v9;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    int v64 = v24;
    uint64_t v27 = v26;
    uint64_t v63 = swift_slowAlloc();
    os_log_t v77 = (void (*)(void, void, void))v63;
    *(_DWORD *)uint64_t v27 = 136315394;
    [v21 scope];
    id v28 = (id)CKDatabaseScopeString();
    uint64_t v66 = v15;
    id v29 = v28;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v65 = a1;
    unint64_t v32 = v31;

    uint64_t v76 = sub_100004FA4(v30, v32, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    sub_100014588(0, &qword_10008F310);
    swift_bridgeObjectRetain();
    uint64_t v33 = Array.description.getter();
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v36 = v33;
    id v15 = v66;
    uint64_t v76 = sub_100004FA4(v36, v35, (uint64_t *)&v77);
    uint64_t v10 = v72;
    uint64_t v9 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a1 = v65;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v64, "Fetch record zone changes complete, database, %s, zoneIds, %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v37 = *(void (**)(char *, uint64_t))(v10 + 8);
  v37(v17, v9);
  if (v71)
  {
    v70(v15, v69, v9);
    sub_1000353A4(a1, 1);
    id v47 = v21;
    sub_1000353A4(a1, 1);
    id v48 = v47;
    sub_1000353A4(a1, 1);
    id v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v66 = v15;
      id v53 = (void *)v52;
      id v70 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
      os_log_t v77 = (void (*)(void, void, void))v70;
      *(_DWORD *)uint64_t v51 = 136315394;
      [v48 scope];
      id v54 = (id)CKDatabaseScopeString();
      uint64_t v55 = a1;
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v71 = v37;
      unint64_t v58 = v57;

      uint64_t v59 = v56;
      a1 = v55;
      uint64_t v76 = sub_100004FA4(v59, v58, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v51 + 12) = 2112;
      swift_errorRetain();
      uint64_t v60 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v76 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v53 = v60;
      sub_100035380(v55, 1);
      sub_100035380(v55, 1);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Error fetching zone changes for %s database: %@", (uint8_t *)v51, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v71(v66, v73);
    }
    else
    {

      sub_100035380(a1, 1);
      sub_100035380(a1, 1);

      v37(v15, v9);
    }
    sub_1000230D4(a1, 0);
    swift_errorRetain();
    v75(a1, 1);
    sub_100035380(a1, 1);
    return sub_100035380(a1, 1);
  }
  else
  {
    uint64_t v38 = v68;
    v70(v68, v69, v9);
    id v39 = v21;
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      id v42 = (uint8_t *)swift_slowAlloc();
      os_log_t v77 = (void (*)(void, void, void))swift_slowAlloc();
      *(_DWORD *)id v42 = 136315138;
      [v39 scope];
      id v43 = (id)CKDatabaseScopeString();
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v71 = v37;
      unint64_t v46 = v45;

      uint64_t v76 = sub_100004FA4(v44, v46, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Successfully fetched zone changes for database: %s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v71(v68, v73);
    }
    else
    {

      v37(v38, v9);
    }
    return ((uint64_t (*)(void, void))v75)(0, 0);
  }
}

void sub_100022530(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
    __break(1u);
    goto LABEL_12;
  }
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_C)
  {
LABEL_12:
    __break(1u);
    return;
  }
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
  sub_10002FDC8(v9, 0.0, 120.0);
  double v11 = v10;
  uint64_t v12 = sub_1000382C8();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134218240;
    *(double *)long long aBlock = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2048;
    *(double *)long long aBlock = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "checkinRetryFetch %f with random delay: %f", (uint8_t *)v15, 0x16u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v16 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v16 initWithIdentifier:v17];

  uint64_t v19 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity;
  id v20 = *(void **)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity);
  *(void *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity) = v18;

  id v21 = *(void **)(v2 + v19);
  if (v21
    && ([v21 setQualityOfService:25], (uint64_t v22 = *(void **)(v2 + v19)) != 0)
    && ([v22 setInterval:v11 + a1], (os_log_type_t v23 = *(void **)(v2 + v19)) != 0)
    && ([v23 _setAdditionalXPCActivityProperties:v8], (int v24 = *(void **)(v2 + v19)) != 0))
  {
    aBlock[4] = sub_100035824;
    void aBlock[5] = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100022B68;
    void aBlock[3] = &unk_1000867F0;
    BOOL v25 = _Block_copy(aBlock);
    id v26 = v24;
    swift_retain();
    swift_release();
    [v26 scheduleWithBlock:v25];
    swift_unknownObjectRelease();
    _Block_release(v25);
  }
  else
  {
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1000228CC(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0) {
    return a3(1);
  }
  swift_errorRetain();
  uint64_t v11 = sub_1000382C8();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v18 = a3;
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    id v16 = (void *)swift_slowAlloc();
    NSString v17 = v14;
    *(_DWORD *)os_log_type_t v14 = 138412290;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v19 = v15;
    a3 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v16 = v15;
    sub_100035380(a1, 1);
    sub_100035380(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "checkinRetryFetch failed with %@", v17, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100035380(a1, 1);
    sub_100035380(a1, 1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  a3(2);
  return sub_100035380(a1, 1);
}

uint64_t sub_100022B68(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_100035914, v4);
  swift_release();

  return swift_release();
}

uint64_t sub_100022BFC(double a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *(void *)(v1 + 56);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = swift_allocObject();
  *(double *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_100035818;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_1000867C8;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v16 = _swiftEmptyArrayStorage;
  sub_100032010((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
  swift_release();
  return swift_release();
}

uint64_t sub_100022EF8(double a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000382C8();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134217984;
    *(double *)&v11[1] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "scheduleRetryFetch for %f", v9, 0xCu);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (!*(void *)(result + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity)) {
      sub_100022530(a1);
    }
    return swift_release();
  }
  return result;
}

void sub_1000230D4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  LODWORD(v197) = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)v172 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v190 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v189 = (char *)v172 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = (uint8_t *)type metadata accessor for URL();
  uint64_t v185 = *((void *)v203 - 1);
  uint64_t v11 = __chkstk_darwin(v203);
  v184 = (char *)v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v183 = (char *)v172 - v14;
  __chkstk_darwin(v13);
  v194 = (char *)v172 - v15;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  v195 = (NSString *)((char *)v172 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __chkstk_darwin(v18);
  v188 = (char *)v172 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v182 = (char *)v172 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  long long v187 = (char *)v172 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v201 = (char *)v172 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v193 = (NSString *)((char *)v172 - v29);
  uint64_t v30 = __chkstk_darwin(v28);
  long long v186 = (NSString *)((char *)v172 - v31);
  uint64_t v32 = __chkstk_darwin(v30);
  v192 = (NSString *)((char *)v172 - v33);
  uint64_t v34 = __chkstk_darwin(v32);
  v191 = (NSString *)((char *)v172 - v35);
  uint64_t v36 = __chkstk_darwin(v34);
  v196 = (NSString *)((char *)v172 - v37);
  __chkstk_darwin(v36);
  id v39 = (char *)v172 - v38;
  *(void *)&long long aBlock = a1;
  swift_errorRetain();
  sub_10000423C(&qword_10008F2F8);
  type metadata accessor for CKError(0);
  v202 = v40;
  if (swift_dynamicCast())
  {
    v173 = v8;
    uint64_t v175 = v6;
    os_log_type_t v41 = *(void **)&v210[0];
    uint64_t v42 = sub_1000382C8();
    id v43 = *(void (**)(NSString *, uint64_t, uint64_t))(v17 + 16);
    uint64_t v198 = v42;
    uint64_t v200 = v17 + 16;
    v199 = v43;
    ((void (*)(char *))v43)(v39);
    uint64_t v44 = v41;
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v176 = v5;
    uint64_t v174 = v9;
    if (v47)
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v180 = v17;
      id v49 = (uint8_t *)v48;
      os_log_type_t v50 = (void *)swift_slowAlloc();
      *(_DWORD *)id v49 = 138412290;
      uint64_t v179 = v3;
      uint64_t v51 = v44;
      v181 = v44;
      uint64_t v52 = v51;
      uint64_t v53 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long aBlock = v53;
      uint64_t v3 = v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v50 = v53;

      uint64_t v44 = v181;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Error with cloud operation %@", v49, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v17 = v180;
      swift_slowDealloc();
    }
    else
    {

      unint64_t v45 = v44;
    }

    uint64_t v56 = *(void (**)(void, void))(v17 + 8);
    uint64_t v55 = v17 + 8;
    id v54 = v56;
    v56(v39, v16);
    *(void *)&v210[0] = v44;
    uint64_t v57 = sub_100032010((unint64_t *)&unk_10008F300, type metadata accessor for CKError);
    uint64_t v58 = _BridgedStoredNSError.userInfo.getter();
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v58 + 16))
    {
      unint64_t v61 = sub_10002EE3C(v59, v60);
      uint64_t v62 = v201;
      if (v63)
      {
        sub_10000582C(*(void *)(v58 + 56) + 32 * v61, (uint64_t)&aBlock);
      }
      else
      {
        long long aBlock = 0u;
        long long v207 = 0u;
      }
    }
    else
    {
      long long aBlock = 0u;
      long long v207 = 0u;
      uint64_t v62 = v201;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v207 + 1))
    {
      sub_10000423C(&qword_10008F318);
      if (swift_dynamicCast())
      {
        uint64_t v177 = v57;
        uint64_t v64 = *(void *)&v210[0];
        uint64_t v65 = v196;
        v199(v196, v198, v16);
        swift_bridgeObjectRetain_n();
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          v181 = v44;
          uint64_t v68 = swift_slowAlloc();
          v178 = v54;
          uint64_t v69 = (uint8_t *)v68;
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v69 = 136315138;
          v172[1] = v69 + 4;
          swift_bridgeObjectRetain();
          uint64_t v70 = v3;
          uint64_t v71 = v16;
          uint64_t v72 = Dictionary.description.getter();
          uint64_t v180 = v55;
          unint64_t v74 = v73;
          swift_bridgeObjectRelease();
          uint64_t v75 = v72;
          uint64_t v16 = v71;
          uint64_t v3 = v70;
          uint64_t v44 = v181;
          *(void *)&v210[0] = sub_100004FA4(v75, v74, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          uint64_t v55 = v180;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "Handling partial internal errors - %s", v69, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          id v54 = v178;
          swift_slowDealloc();

          uint64_t v76 = v196;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          uint64_t v76 = v65;
        }
        uint64_t v77 = ((uint64_t (*)(NSString *, uint64_t))v54)(v76, v16);
        uint64_t v57 = v177;
        __chkstk_darwin(v77);
        v172[-2] = v3;
        LOBYTE(v172[-1]) = v197 & 1;
        sub_1000308B4(v64, (void (*)(unsigned char *, id))sub_1000357E8);
        swift_bridgeObjectRelease();
        uint64_t v62 = v201;
      }
    }
    else
    {
      sub_10000E044((uint64_t)&aBlock, &qword_10008FE80);
    }
    *(void *)&long long aBlock = v44;
    _BridgedStoredNSError.code.getter();
    switch((uint64_t)v213)
    {
      case 3:
      case 4:
        if ((v197 & 1) == 0) {
          goto LABEL_42;
        }
        double v78 = 150.0;
        goto LABEL_22;
      case 6:
      case 7:
        double v78 = COERCE_DOUBLE(related decl 'e' for CKErrorCode.retryAfterSeconds.getter());
        if (v79) {
          double v78 = 600.0;
        }
LABEL_22:
        sub_100022BFC(v78);
        goto LABEL_42;
      case 14:
        v199(v192, v198, v16);
        id v88 = v44;
        unint64_t v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.error.getter();
        BOOL v91 = os_log_type_enabled(v89, v90);
        uint64_t v179 = v3;
        if (v91)
        {
          unint64_t v92 = (uint8_t *)swift_slowAlloc();
          unint64_t v93 = (void *)swift_slowAlloc();
          *(_DWORD *)unint64_t v92 = 138412290;
          v178 = v54;
          uint64_t v94 = v88;
          v203 = v88;
          Swift::String v95 = v94;
          uint64_t v96 = v16;
          uint64_t v97 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)&long long aBlock = v97;
          id v54 = v178;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v93 = v97;
          uint64_t v16 = v96;

          id v88 = v203;
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "Server Record Changed, We need to Fetch the data again: %@", v92, 0xCu);
          sub_10000423C((uint64_t *)&unk_10008EA40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          unint64_t v89 = v88;
        }

        v54(v192, v16);
        uint64_t v129 = related decl 'e' for CKErrorCode.serverRecord.getter();
        if (v129)
        {
          Swift::OpaquePointer_optional v130 = (void *)v129;
          v199(v186, v198, v16);
          Swift::OpaquePointer_optional v131 = v130;
          uint64_t v132 = Logger.logObject.getter();
          os_log_type_t v133 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v132, v133))
          {
            uint64_t v134 = (uint8_t *)swift_slowAlloc();
            v201 = (char *)swift_slowAlloc();
            v203 = v88;
            v202 = v134;
            *(_DWORD *)uint64_t v134 = 138412290;
            v178 = v54;
            *(void *)&long long aBlock = v131;
            v135 = v131;
            id v54 = v178;
            id v88 = v203;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(void *)v201 = v130;

            _os_log_impl((void *)&_mh_execute_header, v132, v133, "Resolving with server record - %@", v202, 0xCu);
            sub_10000423C((uint64_t *)&unk_10008EA40);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v132 = v131;
          }

          v54(v186, v16);
          uint64_t v166 = v179;
          v167 = *(NSObject **)(v179 + 72);
          uint64_t v168 = swift_allocObject();
          *(void *)(v168 + 16) = v166;
          *(void *)(v168 + 24) = v131;
          uint64_t v169 = swift_allocObject();
          *(void *)(v169 + 16) = sub_1000355F8;
          *(void *)(v169 + 24) = v168;
          v208 = sub_100037468;
          uint64_t v209 = v169;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256;
          *(void *)&long long v207 = sub_10000FBDC;
          *((void *)&v207 + 1) = &unk_100086778;
          v170 = _Block_copy(&aBlock);
          v171 = v131;
          swift_retain();
          swift_retain();
          swift_release();
          dispatch_sync(v167, v170);

          _Block_release(v170);
          LOBYTE(v170) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          swift_release();
          if (v170)
          {
            __break(1u);
            JUMPOUT(0x100024D44);
          }
        }
        else
        {
          sub_100022BFC(30.0);
        }
        return;
      case 21:
        uint64_t v177 = v57;
        v181 = v44;
        v178 = v54;
        v193 = (NSString *)v16;
        uint64_t v180 = v55;
        uint64_t v98 = v183;
        URL.appendingPathComponent(_:isDirectory:)();
        uint64_t v99 = (uint64_t)v194;
        URL.appendingPathComponent(_:)();
        uint64_t v100 = v185 + 8;
        uint64_t v101 = *(void (**)(char *, uint8_t *))(v185 + 8);
        uint64_t v102 = v98;
        uint64_t v103 = v203;
        v101(v102, v203);
        uint64_t v104 = sub_10003143C(0, v99);
        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)v3 + 256))(v210, v104);
        uint64_t v105 = v211;
        uint64_t v217 = v211;
        long long v215 = v210[0];
        swift_bridgeObjectRetain();
        sub_1000306C4((uint64_t)&v215);
        long long v214 = v210[1];
        sub_1000306C4((uint64_t)&v214);
        sub_1000306F0((uint64_t)&v217);
        uint64_t v106 = *(void *)(v105 + 16);
        uint64_t v107 = (uint64_t)v184;
        if (v106)
        {
          uint64_t v197 = sub_100014588(0, &qword_10008F310);
          v196 = CKCurrentUserDefaultName;
          uint64_t v108 = (void **)(v105 + 40);
          do
          {
            uint64_t v109 = (uint64_t)*(v108 - 1);
            id v110 = *v108;
            uint64_t v111 = v3;
            uint64_t v112 = v100;
            uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v114 = v101;
            uint64_t v116 = v115;
            swift_bridgeObjectRetain();
            v117._uint64_t countAndFlagsBits = v109;
            v117._object = v110;
            v118._uint64_t countAndFlagsBits = v113;
            uint64_t v100 = v112;
            uint64_t v3 = v111;
            v118._object = v116;
            uint64_t v101 = v114;
            Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v117, v118).super.isa;
            sub_10001B6C0(2, isa);

            uint64_t v103 = v203;
            sub_10003143C(0, v107);
            v114((char *)v107, v103);
            v108 += 2;
            --v106;
          }
          while (v106);
        }
        sub_1000306F0((uint64_t)&v217);
        sub_100022BFC(30.0);
        v101(v194, v103);
        uint64_t v16 = (uint64_t)v193;
        id v54 = v178;
        uint64_t v44 = v181;
        uint64_t v62 = v201;
        goto LABEL_42;
      case 26:
        uint64_t v177 = v57;
        v199(v191, v198, v16);
        uint64_t v120 = v44;
        uint64_t v121 = Logger.logObject.getter();
        os_log_type_t v122 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v121, v122))
        {
          v178 = v54;
          long long v123 = (uint8_t *)swift_slowAlloc();
          uint64_t v124 = (void *)swift_slowAlloc();
          uint64_t v179 = v3;
          v203 = v123;
          *(_DWORD *)long long v123 = 138412290;
          uint64_t v125 = v120;
          id v126 = v44;
          uint64_t v127 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)&long long aBlock = v127;
          id v54 = v178;
          uint64_t v3 = v179;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v124 = v127;
          uint64_t v44 = v126;
          uint64_t v62 = v201;

          _os_log_impl((void *)&_mh_execute_header, v121, v122, "Zone not found: %@", v203, 0xCu);
          sub_10000423C((uint64_t *)&unk_10008EA40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v121 = v120;
        }

        char v128 = &v215;
        goto LABEL_41;
      default:
        uint64_t v177 = v57;
        v199(v193, v198, v16);
        id v80 = v44;
        id v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v81, v82))
        {
          v178 = v54;
          os_log_type_t v83 = (uint8_t *)swift_slowAlloc();
          int v84 = (void *)swift_slowAlloc();
          uint64_t v179 = v3;
          v203 = v83;
          *(_DWORD *)os_log_type_t v83 = 138412290;
          uint64_t v85 = v80;
          uint64_t v86 = v44;
          uint64_t v87 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)&long long aBlock = v87;
          id v54 = v178;
          uint64_t v3 = v179;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *int v84 = v87;
          uint64_t v44 = v86;
          uint64_t v62 = v201;

          _os_log_impl((void *)&_mh_execute_header, v81, v82, "Uncaught error: %@", v203, 0xCu);
          sub_10000423C((uint64_t *)&unk_10008EA40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          id v81 = v80;
        }

        char v128 = (long long *)&v216;
LABEL_41:
        v54(*((void *)v128 - 32), v16);
LABEL_42:
        *(void *)&long long v213 = v44;
        _BridgedStoredNSError.code.getter();
        if ((void)aBlock == 110)
        {
          long long v141 = v187;
          v199((NSString *)v187, v198, v16);
          v142 = Logger.logObject.getter();
          os_log_type_t v143 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v142, v143))
          {
            uint64_t v144 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v144 = 0;
            _os_log_impl((void *)&_mh_execute_header, v142, v143, "Attempting to use Manatee from a non-HSA2 account!", v144, 2u);
            swift_slowDealloc();
          }

          v54(v141, v16);
          if (*(unsigned char *)(v3 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) != 1)
          {

            return;
          }
          *(unsigned char *)(v3 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) = 0;
          v145 = v182;
          v199((NSString *)v182, v198, v16);
          v146 = Logger.logObject.getter();
          os_log_type_t v147 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v146, v147))
          {
            v148 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v148 = 0;
            _os_log_impl((void *)&_mh_execute_header, v146, v147, "Manatee was available, but is not available now.", v148, 2u);
            swift_slowDealloc();
            uint64_t v149 = v44;
          }
          else
          {
            uint64_t v149 = v146;
            v146 = v44;
          }

          uint64_t v165 = v145;
          goto LABEL_63;
        }
        if ((void)aBlock != 112)
        {
          if ((void)aBlock == 111)
          {
            v199((NSString *)v62, v198, v16);
            swift_retain_n();
            long long v136 = v62;
            v137 = Logger.logObject.getter();
            os_log_type_t v138 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v137, v138))
            {
              v178 = v54;
              uint64_t v139 = (uint8_t *)swift_slowAlloc();
              uint64_t v205 = swift_slowAlloc();
              *(_DWORD *)uint64_t v139 = 136315138;
              v203 = v139 + 4;
              (*(void (**)(long long *__return_ptr))(*(void *)v3 + 256))(&aBlock);
              v181 = v44;
              long long v140 = v207;
              long long v213 = aBlock;
              sub_1000306C4((uint64_t)&v213);
              v212 = v208;
              sub_1000306F0((uint64_t)&v212);
              uint64_t v204 = sub_100004FA4(v140, *((unint64_t *)&v140 + 1), &v205);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v137, v138, "PCS Keys for %s are not yet synced.", v139, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              v178(v201, v16);
              return;
            }

            swift_release_n();
            uint64_t v165 = v136;
          }
          else
          {
            v199(v195, v198, v16);
            v158 = v44;
            uint64_t v159 = Logger.logObject.getter();
            os_log_type_t v160 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v159, v160))
            {
              v178 = v54;
              v161 = (uint8_t *)swift_slowAlloc();
              v203 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)v161 = 138412290;
              v162 = v158;
              uint64_t v163 = v16;
              uint64_t v164 = _swift_stdlib_bridgeErrorToNSError();
              *(void *)&long long aBlock = v164;
              id v54 = v178;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(void *)v203 = v164;
              uint64_t v16 = v163;

              _os_log_impl((void *)&_mh_execute_header, v159, v160, "Uncaught private error: %@", v161, 0xCu);
              sub_10000423C((uint64_t *)&unk_10008EA40);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v159 = v158;
            }

            uint64_t v165 = (char *)v195;
          }
LABEL_63:
          v54(v165, v16);
          return;
        }
        v150 = v188;
        v199((NSString *)v188, v198, v16);
        v151 = Logger.logObject.getter();
        os_log_type_t v152 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v151, v152))
        {
          v153 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v153 = 0;
          _os_log_impl((void *)&_mh_execute_header, v151, v152, "Private Missing Manatee Identity, Reset...", v153, 2u);
          swift_slowDealloc();
        }

        v54(v150, v16);
        v208 = sub_100035428;
        uint64_t v209 = v3;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v207 = sub_100006FA4;
        *((void *)&v207 + 1) = &unk_100086700;
        v154 = _Block_copy(&aBlock);
        swift_retain();
        v155 = v189;
        static DispatchQoS.unspecified.getter();
        *(void *)&long long v213 = _swiftEmptyArrayStorage;
        sub_100032010((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000423C((uint64_t *)&unk_10008E960);
        sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
        unsigned int v156 = v173;
        uint64_t v157 = v176;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v154);

        (*(void (**)(char *, uint64_t))(v175 + 8))(v156, v157);
        (*(void (**)(char *, uint64_t))(v190 + 8))(v155, v174);
        swift_release();
        break;
    }
  }
}

uint64_t sub_100024DA4()
{
  return static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.storeCKRecord", 37, 2uLL, (void (*)(uint64_t))sub_100032058);
}

uint64_t sub_100024E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a2 + 56);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  *(void *)(v18 + 32) = a3;
  *(void *)(v18 + 40) = a4;
  *(void *)(v18 + 48) = a5;
  *(unsigned char *)(v18 + 56) = a6;
  aBlock[4] = sub_10003641C;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100086B60;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  id v20 = a5;
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_100032010((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v23);
  return swift_release();
}

uint64_t sub_100025138(void *a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v155 = a4;
  unsigned int v156 = a3;
  int v157 = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  v158 = ((char *)&v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_type_t v152 = (char *)&v147 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v154 = (uint8_t *)&v147 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v153 = (char *)&v147 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = ((char *)&v147 - v18);
  __chkstk_darwin(v17);
  uint64_t v21 = ((char *)&v147 - v20);
  uint64_t v22 = sub_1000382C8();
  uint64_t v23 = *(void (**)(NSObject *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v164 = v22;
  uint64_t v165 = v8 + 16;
  uint64_t v163 = v23;
  ((void (*))v23)(v21);
  uint64_t v24 = a1;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v160 = v5;
  uint64_t v161 = v7;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v166 = v19;
    uint64_t v29 = (uint8_t *)v28;
    v162 = (void (*)(NSObject *, uint64_t))swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 138412290;
    v169[4] = v24;
    uint64_t v30 = v24;
    uint64_t v5 = v160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)v162 = v24;

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Attempting to store the record: %@", v29, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    uint64_t v7 = v161;
    swift_slowDealloc();
    uint64_t v19 = v166;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v25 = v24;
  }

  uint64_t v31 = *(void (**)(NSObject *, uint64_t))(v8 + 8);
  uint64_t v159 = v8 + 8;
  v162 = v31;
  v31(v21, v7);
  swift_beginAccess();
  uint64_t v32 = v24;
  uint64_t v33 = swift_bridgeObjectRetain();
  uint64_t v34 = 0;
  sub_100032EC4(v33, v32);
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();

  if (v36)
  {
    sub_100031024();
    uint64_t v41 = swift_allocError();
    *uint64_t v42 = 1;
    v169[0] = v41;
    swift_retain();
    uint64_t v151 = v40;
    v38(v169);
    swift_errorRelease();
    swift_beginAccess();
    uint64_t v43 = sub_10002EB00((uint64_t)v36, (uint64_t (*)(uint64_t))sub_10002EF54, &qword_10008F2E0);
    swift_endAccess();
    if (v43) {
      sub_100036E90(v43);
    }
    v163(v19, v164, v7);
    uint64_t v44 = v36;
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v150 = 0;
      uint64_t v47 = swift_slowAlloc();
      uint64_t v166 = v19;
      uint64_t v48 = (uint8_t *)v47;
      id v49 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 138412290;
      v169[0] = v44;
      uint64_t v44 = v44;
      uint64_t v34 = v150;
      uint64_t v5 = v160;
      uint64_t v7 = v161;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v49 = v36;

      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Updating cancelled pending record deletion for: %@", v48, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v19 = v166;
      swift_slowDealloc();
      swift_release_n();
    }
    else
    {

      swift_release_n();
      unint64_t v45 = v44;
    }

    v162(v19, v7);
  }
  uint64_t v50 = v5 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords;
  swift_beginAccess();
  uint64_t v51 = v32;
  uint64_t v52 = swift_bridgeObjectRetain();
  sub_10003361C(v52, v51);
  id v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  swift_bridgeObjectRelease();

  uint64_t v166 = v54;
  uint64_t v149 = v34;
  if (v54)
  {
    uint64_t v151 = v50;
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = v56;
    *(void *)(v59 + 24) = v58;
    os_log_type_t v152 = (char *)v59;
    p_type = &stru_10008CFF0.type;
    id v61 = [[-[NSObject encryptedValues](v166, "encryptedValues") allKeys];
    swift_unknownObjectRelease();
    uint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v150 = v62;
    uint64_t v63 = *(void *)(v62 + 16);
    if (v63)
    {
      uint64_t v64 = v150 + 40;
      do
      {
        swift_bridgeObjectRetain();
        id v65 = [v51 p_type[433]];
        NSString v66 = String._bridgeToObjectiveC()();
        id v67 = [v65 objectForKeyedSubscript:v66];
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        if (v67)
        {
          id v68 = [v166 p_type[433]];
          id v69 = [v51 p_type[433]];
          NSString v70 = String._bridgeToObjectiveC()();
          id v71 = [v69 objectForKeyedSubscript:v70];

          swift_unknownObjectRelease();
          NSString v72 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v68 setObject:v71 forKeyedSubscript:v72];
          p_type = (char **)(&stru_10008CFF0 + 16);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v64 += 16;
        --v63;
      }
      while (v63);
    }
    swift_bridgeObjectRelease();
    unint64_t v73 = (void *)swift_allocObject();
    unint64_t v74 = v166;
    v73[2] = v166;
    v73[3] = sub_100033934;
    uint64_t v75 = v152;
    uint64_t v76 = v156;
    v73[4] = v152;
    v73[5] = v76;
    unsigned int v156 = v73;
    v73[6] = v155;
    uint64_t v77 = v153;
    uint64_t v78 = v161;
    v163(v153, v164, v161);
    char v79 = v74;
    swift_retain_n();
    id v80 = v79;
    swift_retain();
    id v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.default.getter();
    BOOL v83 = os_log_type_enabled(v81, v82);
    uint64_t v166 = v80;
    if (v83)
    {
      int v84 = (uint8_t *)swift_slowAlloc();
      uint64_t v167 = swift_slowAlloc();
      *(_DWORD *)int v84 = 136315138;
      uint64_t v85 = swift_allocObject();
      *(void *)(v85 + 16) = sub_100033934;
      *(void *)(v85 + 24) = v75;
      v168[0] = (uint64_t)v80;
      v168[1] = (uint64_t)sub_100033930;
      v168[2] = v85;
      uint64_t v86 = v80;
      swift_retain();
      sub_10000423C(&qword_10008EE38);
      uint64_t v87 = String.init<A>(describing:)();
      v168[0] = sub_100004FA4(v87, v88, &v167);
      uint64_t v78 = v161;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();

      p_type = (char **)(&stru_10008CFF0 + 16);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Updating existing pending record: %s", v84, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v89 = v153;
    }
    else
    {

      swift_release_n();
      unint64_t v89 = v77;
    }
    v162(v89, v78);
    unint64_t v92 = v154;
    v163(v154, v164, v78);
    if (IsAppleInternalBuild()) {
      int v93 = static os_log_type_t.default.getter();
    }
    else {
      int v93 = static os_log_type_t.debug.getter();
    }
    int v94 = v93;
    uint64_t v50 = v151;
    Swift::String v95 = v51;
    uint64_t v96 = Logger.logObject.getter();
    if (os_log_type_enabled(v96, (os_log_type_t)v94))
    {
      LODWORD(v155) = v94;
      uint64_t v97 = swift_slowAlloc();
      uint64_t v98 = (void *)swift_slowAlloc();
      v153 = (char *)swift_slowAlloc();
      v168[0] = (uint64_t)v153;
      *(_DWORD *)uint64_t v97 = 138412546;
      id v99 = [v95 recordID];
      uint64_t v167 = (uint64_t)v99;
      v148 = v168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v150 = (uint64_t)v98;
      void *v98 = v99;
      *(_WORD *)(v97 + 12) = 2080;
      id v100 = [[[v95 p_type[433]] allKeys];
      swift_unknownObjectRelease();
      uint64_t v101 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v167 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v102 = *(void *)(v101 + 16);
      if (v102)
      {
        os_log_type_t v147 = (uint64_t *)v96;
        swift_bridgeObjectRetain();
        uint64_t v103 = v101 + 40;
        do
        {
          swift_bridgeObjectRetain();
          id v104 = [v95 p_type[433]];
          NSString v105 = String._bridgeToObjectiveC()();
          id v106 = [v104 objectForKeyedSubscript:v105];
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          if (v106)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          v103 += 16;
          --v102;
          p_type = &stru_10008CFF0.type;
        }
        while (v102);
        swift_bridgeObjectRelease();
        uint64_t v50 = v151;
        uint64_t v96 = v147;
      }
      swift_bridgeObjectRelease();
      sub_10000423C(&qword_10008F510);
      uint64_t v107 = Array.description.getter();
      unint64_t v109 = v108;
      swift_bridgeObjectRelease();
      uint64_t v167 = sub_100004FA4(v107, v109, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v96, (os_log_type_t)v155, "Updating existing pending CKRecord %@ - %s", (uint8_t *)v97, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v78 = v161;
      v162(v154, v161);
    }
    else
    {

      v162(v92, v78);
    }
    uint64_t v110 = swift_allocObject();
    uint64_t v111 = v156;
    *(void *)(v110 + 16) = sub_100033978;
    *(void *)(v110 + 24) = v111;
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v167 = *(void *)v50;
    *(void *)uint64_t v50 = 0x8000000000000000;
    uint64_t v113 = v166;
    uint64_t v114 = sub_10002FE74((uint64_t)sub_100033930, v110, v166, isUniquelyReferenced_nonNull_native, (uint64_t (*)(void *))sub_10002EF04, &qword_10008F2D8, &qword_10008F2B0);
    *(void *)uint64_t v50 = v167;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();

    swift_release();
    uint64_t v115 = v158;
    if (v114) {
LABEL_38:
    }
      sub_100036E90(v114);
  }
  else
  {
    os_log_type_t v90 = v152;
    uint64_t v78 = v161;
    v163(v152, v164, v161);
    if (IsAppleInternalBuild()) {
      int v91 = static os_log_type_t.default.getter();
    }
    else {
      int v91 = static os_log_type_t.debug.getter();
    }
    int v126 = v91;
    uint64_t v115 = v158;
    uint64_t v127 = v51;
    char v128 = Logger.logObject.getter();
    if (os_log_type_enabled(v128, (os_log_type_t)v126))
    {
      LODWORD(v153) = v126;
      uint64_t v166 = v128;
      uint64_t v151 = v50;
      uint64_t v129 = swift_slowAlloc();
      Swift::OpaquePointer_optional v130 = (uint64_t *)swift_slowAlloc();
      uint64_t v150 = swift_slowAlloc();
      v168[0] = v150;
      *(_DWORD *)uint64_t v129 = 138412546;
      id v131 = [v127 recordID];
      uint64_t v167 = (uint64_t)v131;
      os_log_type_t v147 = v168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v148 = v130;
      *Swift::OpaquePointer_optional v130 = (uint64_t)v131;
      v154 = (uint8_t *)v129;
      *(_WORD *)(v129 + 12) = 2080;
      id v132 = [[-[NSObject encryptedValues](v127, "encryptedValues") allKeys];
      swift_unknownObjectRelease();
      uint64_t v133 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v167 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v134 = *(void *)(v133 + 16);
      if (v134)
      {
        swift_bridgeObjectRetain();
        uint64_t v135 = v133 + 40;
        do
        {
          swift_bridgeObjectRetain();
          id v136 = [v127 encryptedValues];
          NSString v137 = String._bridgeToObjectiveC()();
          id v138 = [v136 objectForKeyedSubscript:v137];
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          if (v138)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          v135 += 16;
          --v134;
        }
        while (v134);
        swift_bridgeObjectRelease();
        uint64_t v115 = v158;
        os_log_type_t v90 = v152;
      }
      swift_bridgeObjectRelease();
      uint64_t v139 = v154;
      sub_10000423C(&qword_10008F510);
      uint64_t v140 = Array.description.getter();
      unint64_t v142 = v141;
      swift_bridgeObjectRelease();
      uint64_t v167 = sub_100004FA4(v140, v142, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v143 = v166;
      _os_log_impl((void *)&_mh_execute_header, v166, (os_log_type_t)v153, "Staging pending CKRecord %@ - %s", v139, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v78 = v161;
      v162(v90, v161);
      uint64_t v50 = v151;
    }
    else
    {

      v162(v90, v78);
    }
    uint64_t v144 = v155;
    uint64_t v145 = swift_allocObject();
    *(void *)(v145 + 16) = v156;
    *(void *)(v145 + 24) = v144;
    swift_beginAccess();
    swift_retain();
    char v146 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v167 = *(void *)v50;
    *(void *)uint64_t v50 = 0x8000000000000000;
    uint64_t v114 = sub_10002FE74((uint64_t)sub_100033930, v145, v127, v146, (uint64_t (*)(void *))sub_10002EF04, &qword_10008F2D8, &qword_10008F2B0);
    *(void *)uint64_t v50 = v167;
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (v114) {
      goto LABEL_38;
    }
  }
  v163(v115, v164, v78);
  if (IsAppleInternalBuild()) {
    os_log_type_t v116 = static os_log_type_t.default.getter();
  }
  else {
    os_log_type_t v116 = static os_log_type_t.debug.getter();
  }
  os_log_type_t v117 = v116;
  swift_retain_n();
  Swift::String v118 = Logger.logObject.getter();
  if (os_log_type_enabled(v118, v117))
  {
    uint64_t v119 = swift_slowAlloc();
    uint64_t v120 = swift_slowAlloc();
    *(_DWORD *)uint64_t v119 = 134218242;
    uint64_t v167 = *(void *)(*(void *)v50 + 16);
    v168[0] = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v119 + 12) = 2080;
    uint64_t v121 = swift_bridgeObjectRetain();
    sub_100019C74(v121);
    swift_bridgeObjectRelease();
    uint64_t v122 = Array.description.getter();
    unint64_t v124 = v123;
    swift_bridgeObjectRelease();
    uint64_t v167 = sub_100004FA4(v122, v124, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v118, v117, "Pending records[%ld]: %s", (uint8_t *)v119, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v162(v158, v161);
  }
  else
  {

    swift_release_n();
    v162(v115, v78);
  }
  return sub_1000275CC(v157 & 1);
}

uint64_t sub_1000266F4(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(void *)(v5 + 56);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v5;
  *(void *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = a3;
  *(void *)(v17 + 40) = a4;
  *(unsigned char *)(v17 + 48) = a2;
  aBlock[4] = sub_100033A14;
  void aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100086288;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  id v19 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_100032010((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v22);
  return swift_release();
}

uint64_t sub_1000269D8(uint64_t a1, void *a2, void *a3, NSObject *a4, int a5)
{
  int v100 = a5;
  uint64_t v98 = a3;
  id v99 = a4;
  uint64_t v107 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v107 - 8);
  uint64_t v8 = __chkstk_darwin(v107);
  id v104 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v102 = (char *)&v92 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v97 = (char *)&v92 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v92 - v14;
  uint64_t v16 = a1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords;
  swift_beginAccess();
  id v17 = a2;
  uint64_t v18 = swift_bridgeObjectRetain();
  sub_100034D08(v18, v17);
  uint64_t v20 = v19;
  uint64_t v101 = v21;
  uint64_t v23 = v22;
  uint64_t v103 = 0;
  uint64_t v24 = v17;
  swift_bridgeObjectRelease();

  uint64_t v105 = a1;
  uint64_t v106 = v7;
  if (v20)
  {
    swift_retain();
    uint64_t v25 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v15, v25, v107);
    os_log_type_t v26 = v20;
    BOOL v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v96 = v24;
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      int v93 = v29;
      *(_DWORD *)uint64_t v29 = 138412290;
      uint64_t v95 = v16;
      uint64_t v94 = v23;
      uint64_t v110 = v26;
      uint64_t v31 = v26;
      uint64_t v24 = v96;
      uint64_t v7 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v20;

      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Removing pending update for record: %@", v93, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      BOOL v27 = v26;
    }
    a1 = v105;
    uint64_t v32 = v101;

    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v107);
    sub_100031024();
    uint64_t v33 = swift_allocError();
    void *v34 = 1;
    uint64_t v110 = v33;
    char v111 = 1;
    ((void (*)(NSObject **))v32)(&v110);
    swift_errorRelease();
    swift_beginAccess();
    uint64_t v35 = sub_10002EB00((uint64_t)v26, (uint64_t (*)(uint64_t))sub_10002EF04, &qword_10008F2D8);
    swift_endAccess();
    swift_release_n();

    if (v35) {
      sub_100036E90(v35);
    }
  }
  uint64_t v36 = (uint64_t *)(a1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
  swift_beginAccess();
  id v37 = v24;
  uint64_t v38 = swift_bridgeObjectRetain();
  uint64_t v39 = v103;
  sub_10003317C(v38, v37);
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  swift_bridgeObjectRelease();

  uint64_t v101 = v36;
  uint64_t v103 = v39;
  if (v41)
  {
    uint64_t v46 = swift_allocObject();
    uint64_t v47 = v99;
    uint64_t v48 = v46;
    *(void *)(v46 + 16) = v43;
    *(void *)(v46 + 24) = v45;
    id v49 = (void *)swift_allocObject();
    v49[2] = v41;
    v49[3] = sub_1000362FC;
    uint64_t v50 = v98;
    v49[4] = v48;
    v49[5] = v50;
    v49[6] = v47;
    swift_retain();
    id v51 = v41;
    swift_retain();
    uint64_t v52 = sub_1000382C8();
    uint64_t v53 = v97;
    (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v97, v52, v107);
    id v54 = v51;
    swift_retain();
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    id v99 = v54;
    if (v57)
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v98 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 138412290;
      v109[0] = (uint64_t)v54;
      uint64_t v59 = v54;
      uint64_t v53 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v98 = v41;
      swift_release();

      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Updating existing pending record: %@", v58, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
      uint64_t v55 = v54;
    }
    uint64_t v64 = v106;
    uint64_t v36 = v101;
    id v65 = v102;

    (*(void (**)(char *, uint64_t))(v64 + 8))(v53, v107);
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = sub_100036380;
    *(void *)(v66 + 24) = v49;
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v108 = *v36;
    *uint64_t v36 = 0x8000000000000000;
    uint64_t v68 = v66;
    id v69 = v99;
    uint64_t v63 = sub_10002FE74((uint64_t)sub_10003746C, v68, v99, isUniquelyReferenced_nonNull_native, (uint64_t (*)(void *))sub_10002EF54, &qword_10008F2E0, &qword_10008F298);
    *uint64_t v36 = v108;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();

    swift_release();
    if (v63) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v60 = swift_allocObject();
    id v61 = v99;
    *(void *)(v60 + 16) = v98;
    *(void *)(v60 + 24) = v61;
    swift_beginAccess();
    swift_retain();
    char v62 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v108 = *v36;
    *uint64_t v36 = 0x8000000000000000;
    uint64_t v63 = sub_10002FE74((uint64_t)sub_1000362D0, v60, v37, v62, (uint64_t (*)(void *))sub_10002EF54, &qword_10008F2E0, &qword_10008F298);
    *uint64_t v36 = v108;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v64 = v106;
    id v65 = v102;
    if (v63) {
LABEL_14:
    }
      sub_100036E90(v63);
  }
  uint64_t v70 = sub_1000382C8();
  id v99 = *(NSObject **)(v64 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v99)(v65, v70, v107);
  swift_retain_n();
  id v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    *(_DWORD *)uint64_t v73 = 134218242;
    uint64_t v108 = *(void *)(*v36 + 16);
    v109[0] = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v73 + 12) = 2080;
    uint64_t v98 = (void *)v70;
    uint64_t v75 = swift_bridgeObjectRetain();
    uint64_t v76 = v103;
    sub_100019FB4(v75);
    uint64_t v103 = v76;
    swift_bridgeObjectRelease();
    uint64_t v77 = Array.description.getter();
    unint64_t v79 = v78;
    swift_bridgeObjectRelease();
    uint64_t v108 = sub_100004FA4(v77, v79, v109);
    uint64_t v70 = (uint64_t)v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Pending deletion for records[%ld] : %s", (uint8_t *)v73, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v80 = *(void (**)(char *, uint64_t))(v106 + 8);
    v80(v102, v107);
  }
  else
  {

    swift_release_n();
    id v80 = *(void (**)(char *, uint64_t))(v64 + 8);
    v80(v65, v107);
  }
  id v81 = v104;
  ((void (*)(char *, uint64_t, uint64_t))v99)(v104, v70, v107);
  swift_retain_n();
  os_log_type_t v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v82, v83))
  {
    uint64_t v84 = swift_slowAlloc();
    uint64_t v85 = swift_slowAlloc();
    *(_DWORD *)uint64_t v84 = 134218242;
    uint64_t v108 = *(void *)(*v101 + 16);
    v109[0] = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v84 + 12) = 2080;
    uint64_t v86 = swift_bridgeObjectRetain();
    sub_100019FB4(v86);
    swift_bridgeObjectRelease();
    uint64_t v87 = Array.description.getter();
    unint64_t v89 = v88;
    swift_bridgeObjectRelease();
    uint64_t v108 = sub_100004FA4(v87, v89, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Pending deletion for records[%ld] : %s", (uint8_t *)v84, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    os_log_type_t v90 = v104;
  }
  else
  {

    swift_release_n();
    os_log_type_t v90 = v81;
  }
  v80(v90, v107);
  return sub_1000275CC(v100 & 1);
}

uint64_t sub_1000275CC(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  BOOL v57 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v50 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v50 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint8_t **)((char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v17 = *(void **)(v2 + 56);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    LODWORD(v56) = a1;
    uint64_t v20 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer;
    uint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer);
    if (v21)
    {
      uint64_t v22 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity;
      uint64_t v23 = *(void *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity);
      swift_retain();
      if (v23)
      {
        uint64_t v24 = sub_1000382C8();
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v12, v24, v4);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v25, v26))
        {
          BOOL v27 = (uint8_t *)swift_slowAlloc();
          uint64_t v52 = v10;
          *(_WORD *)BOOL v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "Defer fetch until scheduled changes are pushed to cloud", v27, 2u);
          uint64_t v10 = v52;
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
        [*(id *)(v2 + v22) invalidate];
        os_log_type_t v28 = *(void **)(v2 + v22);
        *(void *)(v2 + v22) = 0;

        (*(void (**)(void))(*(void *)v21 + 160))();
        *(void *)(v2 + v20) = 0;
        swift_release();
        sub_100027D6C(v56 & 1, 1);
      }
      uint64_t v54 = v21;
      uint64_t v29 = sub_1000382C8();
      uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      uint64_t v56 = v29;
      uint64_t v53 = v30;
      ((void (*)(char *))v30)(v10);
      swift_retain_n();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      BOOL v33 = os_log_type_enabled(v31, v32);
      uint64_t v55 = v5;
      if (v33)
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        id v51 = (uint8_t *)v35;
        *(_DWORD *)uint64_t v34 = 136315138;
        v59[0] = v35;
        uint64_t v50 = v34 + 4;
        uint64_t v52 = v10;
        swift_beginAccess();
        sub_100014588(0, &qword_10008F2B0);
        swift_bridgeObjectRetain();
        sub_10000423C(&qword_10008F2B8);
        sub_1000353B0(&qword_10008F2C0, &qword_10008F2B0);
        uint64_t v36 = Dictionary.Keys.description.getter();
        unint64_t v38 = v37;
        swift_bridgeObjectRelease();
        uint64_t v60 = sub_100004FA4(v36, v38, v59);
        uint64_t v39 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Already Scheduled changes: %s", v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v40 = *(void (**)(char *, uint64_t))(v39 + 8);
        v40(v52, v4);
      }
      else
      {

        swift_release_n();
        uint64_t v40 = *(void (**)(char *, uint64_t))(v5 + 8);
        v40(v10, v4);
      }
      uint64_t v41 = v57;
      v53(v57, v56, v4);
      swift_retain_n();
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v56 = v4;
        uint64_t v45 = (uint8_t *)v44;
        uint64_t v46 = swift_slowAlloc();
        uint64_t v52 = (char *)v46;
        uint64_t v53 = (void (*)(char *, uint64_t, uint64_t))v40;
        *(_DWORD *)uint64_t v45 = 136315138;
        uint64_t v60 = v46;
        id v51 = v45 + 4;
        swift_beginAccess();
        sub_100014588(0, &qword_10008F298);
        swift_bridgeObjectRetain();
        sub_10000423C(&qword_10008F2A0);
        sub_1000353B0(&qword_10008F2A8, &qword_10008F298);
        uint64_t v47 = Dictionary.Keys.description.getter();
        unint64_t v49 = v48;
        swift_bridgeObjectRelease();
        uint64_t v58 = sub_100004FA4(v47, v49, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Already Scheduled deletion: %s", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_release();
        return ((uint64_t (*)(char *, uint64_t))v53)(v57, v56);
      }
      else
      {

        swift_release();
        swift_release_n();
        return ((uint64_t (*)(char *, uint64_t))v40)(v41, v4);
      }
    }
    else
    {
      return sub_100027D6C(v56 & 1, 0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100027D6C(char a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (void *)((char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)(v3 + 56);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    sub_10002FDC8(result, 0.0, 10.0);
    double v31 = v17;
    uint64_t v18 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_initialUploadDone;
    if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_initialUploadDone) & 1) == 0)
    {
      double v19 = v17;
      uint64_t v20 = sub_10006B584();
      uint64_t v21 = swift_beginAccess();
      double v22 = 3.0;
      if (*v20 == 1 && (a1 & 1) == 0)
      {
        sub_10002FDC8(v21, 0.0, 120.0);
        double v22 = v19 + v23;
      }
      double v31 = v22;
      *(unsigned char *)(v3 + v18) = 1;
    }
    uint64_t v24 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v24, v6);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 67109376;
      int v30 = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 8) = 2048;
      swift_beginAccess();
      *(double *)&v29[1] = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "checkInPendingCloudUpdates, userInitiated: %{BOOL}d with delay: %f", (uint8_t *)v27, 0x12u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v28 = type metadata accessor for Transaction();
    __chkstk_darwin(v28);
    v29[-4] = v3;
    v29[-3] = &v31;
    LOBYTE(v29[-2]) = a1 & 1;
    BYTE1(v29[-2]) = a2 & 1;
    return static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.checkInPendingCloudUpdates", 50, 2uLL, (void (*)(uint64_t))sub_1000349B4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100028118(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v88 = a4;
  int v87 = a3;
  uint64_t v5 = (void *)type metadata accessor for Logger();
  uint64_t v6 = *(v5 - 1);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v95 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v92 = (char *)&v80 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v80 - v11;
  uint64_t v86 = a2;
  Transaction.capture()();
  uint64_t v13 = sub_1000382C8();
  uint64_t v14 = v6;
  id v15 = *(void (**)(void))(v6 + 16);
  uint64_t v97 = v13;
  uint64_t v91 = v6 + 16;
  uint64_t v96 = (void (*)(char *, uint64_t, void *))v15;
  v15(v12);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "checkInPendingCloudUpdates timer fired", v18, 2u);
    swift_slowDealloc();
  }

  double v19 = *(void (**)(char *, void *))(v14 + 8);
  uint64_t v94 = v14 + 8;
  int v93 = v19;
  v19(v12, v5);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v21 = Strong;
    uint64_t v22 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer;
    uint64_t v23 = *(void *)(Strong + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer);
    uint64_t v89 = Strong;
    if (v23)
    {
      uint64_t v24 = *(void (**)(uint64_t))(*(void *)v23 + 160);
      uint64_t v25 = swift_retain();
      v24(v25);
      uint64_t v21 = v89;
      swift_release();
    }
    *(void *)(v21 + v22) = 0;
    swift_release();
    os_log_type_t v26 = *(void **)(v21 + 56);
    uint64_t v27 = (uint64_t *)(v21 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
    swift_beginAccess();
    uint64_t v28 = *v27;
    swift_bridgeObjectRetain_n();
    id v29 = v26;
    os_log_type_t v90 = sub_10002E7AC(v28);
    uint64_t v84 = v28;
    swift_bridgeObjectRelease();
    int v30 = (uint64_t *)(v21 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
    swift_beginAccess();
    uint64_t v31 = *v30;
    swift_bridgeObjectRetain_n();
    unint64_t v32 = (unint64_t)sub_10002E7AC(v31);
    uint64_t v83 = v31;
    swift_bridgeObjectRelease();
    BOOL v33 = v92;
    v96(v92, v97, v5);
    int v34 = IsAppleInternalBuild();
    id v85 = v29;
    if (v34) {
      int v35 = static os_log_type_t.default.getter();
    }
    else {
      int v35 = static os_log_type_t.debug.getter();
    }
    int v36 = v35;
    swift_retain_n();
    unint64_t v37 = Logger.logObject.getter();
    if (os_log_type_enabled(v37, (os_log_type_t)v36))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      uint64_t v107 = v80;
      id v81 = v38;
      *(_DWORD *)unint64_t v38 = 136315138;
      if ((v32 & 0x8000000000000000) != 0 || (v32 & 0x4000000000000000) != 0) {
        goto LABEL_50;
      }
      uint64_t v39 = *(void *)(v32 + 16);
      swift_retain();
      while (1)
      {
        os_log_type_t v82 = v5;
        uint64_t v40 = _swiftEmptyArrayStorage;
        if (!v39) {
          break;
        }
        uint64_t v41 = 0;
        uint64_t v102 = v39;
        unint64_t v103 = v32 & 0xC000000000000001;
        uint64_t v98 = (void *)(v32 + 32);
        uint64_t v42 = _swiftEmptyArrayStorage;
        int v100 = v37;
        uint64_t v101 = (void *)v32;
        int v99 = v36;
        while (1)
        {
          os_log_type_t v43 = v103 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : (id)v98[v41];
          uint64_t v5 = v43;
          BOOL v44 = __OFADD__(v41, 1);
          uint64_t v45 = v41 + 1;
          if (v44) {
            break;
          }
          uint64_t v104 = v45;
          uint64_t v105 = v42;
          id v46 = [[v43 encryptedValues:v80] allKeys];
          swift_unknownObjectRelease();
          uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v106 = (uint64_t)v40;
          unint64_t v48 = v40;
          uint64_t v49 = *(void *)(v47 + 16);
          if (v49)
          {
            swift_bridgeObjectRetain();
            uint64_t v50 = v47 + 40;
            do
            {
              swift_bridgeObjectRetain();
              id v51 = [v5 encryptedValues];
              NSString v52 = String._bridgeToObjectiveC()();
              id v53 = [v51 objectForKeyedSubscript:v52];
              swift_bridgeObjectRelease();

              swift_unknownObjectRelease();
              if (v53)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
              v50 += 16;
              --v49;
            }
            while (v49);
            swift_bridgeObjectRelease();
            uint64_t v54 = v106;
            unint64_t v37 = v100;
            unint64_t v32 = (unint64_t)v101;
            int v36 = v99;
            uint64_t v40 = _swiftEmptyArrayStorage;
          }
          else
          {
            uint64_t v54 = (uint64_t)v48;
            uint64_t v40 = v48;
          }

          swift_bridgeObjectRelease();
          uint64_t v42 = v105;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v42 = sub_10002E42C(0, v42[2] + 1, 1, v42);
          }
          unint64_t v56 = v42[2];
          unint64_t v55 = v42[3];
          if (v56 >= v55 >> 1) {
            uint64_t v42 = sub_10002E42C((void *)(v55 > 1), v56 + 1, 1, v42);
          }
          v42[2] = v56 + 1;
          v42[v56 + 4] = v54;
          uint64_t v41 = v104;
          if (v104 == v102) {
            goto LABEL_35;
          }
        }
        __break(1u);
LABEL_50:
        swift_retain();
        uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      }
LABEL_35:
      swift_release();
      BOOL v57 = v81;
      sub_10000423C(&qword_10008F288);
      uint64_t v58 = Array.description.getter();
      unint64_t v60 = v59;
      swift_bridgeObjectRelease();
      uint64_t v106 = sub_100004FA4(v58, v60, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v36, "Staged CKRecords - %s", v57, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v5 = v82;
      v93(v92, v82);
    }
    else
    {

      swift_release_n();
      v93(v33, v5);
    }
    v96(v95, v97, v5);
    swift_retain_n();
    id v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = v5;
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 134217984;
      if ((v32 & 0x8000000000000000) != 0 || (v32 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
      }
      else
      {
        uint64_t v65 = *(void *)(v32 + 16);
      }
      swift_release();
      uint64_t v107 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "checkInPendingCloudUpdates count: %ld", v64, 0xCu);
      swift_slowDealloc();

      uint64_t v5 = v63;
    }
    else
    {

      swift_release_n();
    }
    v93(v95, v5);
    sub_100014588(0, &qword_10008F280);
    swift_retain();
    Swift::Bool v66 = (char)v90;
    swift_retain();
    v108.value._rawValue = (void *)v32;
    v108.is_nil = v66;
    id v67 = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v108, v109).super.super.super.super.isa;
    char v68 = v87;
    uint64_t v69 = v89;
    if (v87) {
      id v70 = sub_100015250();
    }
    else {
      id v70 = sub_100015274();
    }
    id v71 = v70;
    -[objc_class setGroup:](v67, "setGroup:", v70, v80);

    [(objc_class *)v67 setCallbackQueue:*(void *)(v69 + 64)];
    if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
      [(objc_class *)v67 setQualityOfService:25];
    }
    uint64_t v72 = swift_allocObject();
    *(void *)(v72 + 16) = v83;
    *(void *)(v72 + 24) = v86;
    swift_retain();
    CKModifyRecordsOperation.perRecordSaveBlock.setter();
    *(void *)(swift_allocObject() + 16) = v84;
    CKModifyRecordsOperation.perRecordDeleteBlock.setter();
    uint64_t v73 = swift_allocObject();
    uint64_t v74 = v85;
    *(void *)(v73 + 16) = v85;
    *(void *)(v73 + 24) = v69;
    uint64_t v75 = v90;
    *(void *)(v73 + 32) = v32;
    *(void *)(v73 + 40) = v75;
    *(unsigned char *)(v73 + 48) = v68 & 1;
    *(unsigned char *)(v73 + 49) = v88 & 1;
    id v76 = v74;
    swift_retain();
    CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
    uint64_t v77 = type metadata accessor for Transaction();
    __chkstk_darwin(v77);
    *(&v80 - 2) = (uint64_t)v67;
    static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.checkInPendingCloudUpdates.completionBlock", 66, 2uLL, (void (*)(uint64_t))sub_100034C18);
    id v78 = sub_1000150E0();
    id v79 = [v78 privateCloudDatabase];

    [v79 addOperation:v67];
    swift_release();
  }
}

void sub_100028CA4(void *a1, NSObject *a2, char a3, uint64_t a4)
{
  uint64_t v84 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v84 - 8);
  uint64_t v9 = __chkstk_darwin(v84);
  uint64_t v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  os_log_type_t v82 = (char *)&v72 - v13;
  __chkstk_darwin(v12);
  id v15 = (char *)&v72 - v14;
  id v16 = a1;
  sub_100034D08(a4, v16);
  id v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;

  if (v18)
  {
    id v80 = v18;
    id v81 = v20;
    uint64_t v83 = v8;
    uint64_t v23 = (char **)(v8 + 16);
    if (a3)
    {
      swift_errorRetain();
      uint64_t v35 = sub_1000382C8();
      uint64_t v36 = v84;
      ((void (*)(char *, uint64_t, uint64_t))*v23)(v11, v35, v84);
      id v37 = v16;
      sub_100035400(a2, 1);
      unint64_t v38 = v37;
      sub_100035400(a2, 1);
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      int v41 = v40;
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v42 = swift_slowAlloc();
        os_log_type_t v43 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 138412546;
        uint64_t v79 = v22;
        LODWORD(v82) = v41;
        uint64_t v86 = v38;
        uint64_t v77 = &v87;
        BOOL v44 = v38;
        id v78 = v39;
        uint64_t v45 = v44;
        uint64_t v36 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v43 = v38;

        uint64_t v39 = v78;
        *(_WORD *)(v42 + 12) = 2112;
        swift_errorRetain();
        uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v86 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v43[1] = v46;
        sub_100035E8C(a2, 1);
        sub_100035E8C(a2, 1);
        _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v82, "CheckInPendingCloudUpdates CKRecord save failed %@ with error: %@", (uint8_t *)v42, 0x16u);
        sub_10000423C((uint64_t *)&unk_10008EA40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_100035E8C(a2, 1);
        sub_100035E8C(a2, 1);
      }
      uint64_t v51 = v83;

      (*(void (**)(char *, uint64_t))(v51 + 8))(v11, v36);
      uint64_t v86 = a2;
      char v87 = 1;
      swift_errorRetain();
      v81(&v86);
      sub_100035E8C(a2, 1);
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        sub_1000230D4((uint64_t)a2, 0);
        swift_release();

        sub_100035E8C(a2, 1);
        swift_release();
        return;
      }
      swift_release();

      uint64_t v64 = a2;
      char v65 = 1;
    }
    else
    {
      uint64_t v75 = a2;
      uint64_t v24 = sub_1000382C8();
      uint64_t v77 = *v23;
      id v78 = v24;
      uint64_t v25 = v84;
      ((void (*)(char *))v77)(v15);
      os_log_type_t v26 = v16;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      BOOL v29 = os_log_type_enabled(v27, v28);
      id v76 = a2;
      uint64_t v79 = v22;
      if (v29)
      {
        int v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)int v30 = 138412290;
        uint64_t v86 = v26;
        uint64_t v31 = v26;
        uint64_t v32 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)uint64_t v74 = v26;

        a2 = v76;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "CheckInPendingCloudUpdates CKRecord successfully saved (%@.", v30, 0xCu);
        sub_10000423C((uint64_t *)&unk_10008EA40);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v18 = v80;
        swift_slowDealloc();
        int v34 = v82;
        uint64_t v33 = v83;
      }
      else
      {

        uint64_t v27 = v26;
        int v34 = v82;
        uint64_t v33 = v83;
        uint64_t v32 = v25;
      }

      uint64_t v49 = *(NSObject **)(v33 + 8);
      uint64_t v48 = v33 + 8;
      uint64_t v47 = v49;
      ((void (*)(char *, uint64_t))v49)(v15, v32);
      ((void (*)(char *, NSObject *, uint64_t))v77)(v34, v78, v32);
      if (IsAppleInternalBuild()) {
        int v50 = static os_log_type_t.default.getter();
      }
      else {
        int v50 = static os_log_type_t.debug.getter();
      }
      int v52 = v50;
      id v53 = v75;
      sub_100035400(a2, 0);
      uint64_t v54 = v53;
      unint64_t v55 = Logger.logObject.getter();
      if (os_log_type_enabled(v55, (os_log_type_t)v52))
      {
        LODWORD(v75) = v52;
        uint64_t v77 = (char *)v55;
        id v78 = v47;
        unint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v73 = swift_slowAlloc();
        uint64_t v86 = v73;
        uint64_t v74 = v56;
        *(_DWORD *)unint64_t v56 = 136315138;
        id v57 = [[-[NSObject encryptedValues](v54, "encryptedValues") allKeys];
        swift_unknownObjectRelease();
        uint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v85 = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t v59 = *(void *)(v58 + 16);
        if (v59)
        {
          uint64_t v83 = v48;
          swift_bridgeObjectRetain();
          uint64_t v60 = v58 + 40;
          do
          {
            swift_bridgeObjectRetain();
            id v61 = [v54 encryptedValues];
            NSString v62 = String._bridgeToObjectiveC()();
            id v63 = [v61 objectForKeyedSubscript:v62];
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
            if (v63)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            v60 += 16;
            --v59;
          }
          while (v59);
          swift_bridgeObjectRelease();
          int v34 = v82;
        }
        swift_bridgeObjectRelease();
        Swift::Bool v66 = v74;
        sub_10000423C(&qword_10008F510);
        uint64_t v67 = Array.description.getter();
        unint64_t v69 = v68;
        swift_bridgeObjectRelease();
        uint64_t v85 = sub_100004FA4(v67, v69, (uint64_t *)&v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        a2 = v76;
        sub_100035E8C(v76, 0);
        sub_100035E8C(a2, 0);
        os_log_t v70 = (os_log_t)v77;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v77, (os_log_type_t)v75, "CheckInPendingCloudUpdates saved CKRecords values - %s", v66, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        ((void (*)(char *, uint64_t))v78)(v34, v84);
        id v18 = v80;
      }
      else
      {
        sub_100035E8C(a2, 0);
        sub_100035E8C(a2, 0);

        ((void (*)(char *, uint64_t))v47)(v34, v32);
      }
      id v71 = v81;
      uint64_t v86 = a2;
      char v87 = 0;
      sub_100035400(a2, 0);
      v71(&v86);

      sub_100035E8C(a2, 0);
      swift_release();
      uint64_t v64 = a2;
      char v65 = 0;
    }
    sub_100035E8C(v64, v65);
  }
}

void sub_100029590(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - v13;
  id v15 = a1;
  sub_100033414(a4);
  os_log_type_t v17 = v16;
  double v19 = v18;
  uint64_t v21 = v20;

  if (v17)
  {
    if (a3)
    {
      swift_errorRetain();
      uint64_t v30 = sub_1000382C8();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v30, v8);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      int v33 = v32;
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v45 = v17;
        uint64_t v34 = swift_slowAlloc();
        LODWORD(v44) = v33;
        uint64_t v35 = (uint8_t *)v34;
        uint64_t v36 = (void *)swift_slowAlloc();
        uint64_t v42 = v36;
        uint64_t v46 = v21;
        os_log_type_t v43 = v35;
        *(_DWORD *)uint64_t v35 = 138412290;
        swift_errorRetain();
        id v37 = v31;
        unint64_t v38 = v19;
        uint64_t v39 = v8;
        uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
        v47[0] = v40;
        os_log_type_t v17 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v36 = v40;
        uint64_t v8 = v39;
        double v19 = v38;
        uint64_t v31 = v37;
        sub_100035380(a2, 1);
        sub_100035380(a2, 1);
        _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v44, "CheckInPendingCloudUpdates CKRecord deletion failed with error: %@", v43, 0xCu);
        sub_10000423C((uint64_t *)&unk_10008EA40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100035380(a2, 1);
        sub_100035380(a2, 1);
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v47[0] = a2;
      swift_errorRetain();
      v19(v47);

      sub_100035380(a2, 1);
      swift_release();
      sub_100035380(a2, 1);
    }
    else
    {
      uint64_t v22 = sub_1000382C8();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v22, v8);
      uint64_t v23 = v15;
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v46 = v21;
        uint64_t v26 = swift_slowAlloc();
        uint64_t v45 = (void *)v8;
        uint64_t v27 = (uint8_t *)v26;
        uint64_t v42 = (void *)swift_slowAlloc();
        os_log_type_t v43 = v27;
        *(_DWORD *)uint64_t v27 = 138412290;
        v47[0] = v23;
        os_log_type_t v28 = v23;
        BOOL v44 = v19;
        BOOL v29 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v42 = v23;

        double v19 = v44;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "CheckInPendingCloudUpdates CKRecord deleted: %@", v43, 0xCu);
        sub_10000423C((uint64_t *)&unk_10008EA40);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v8 = (uint64_t)v45;
        swift_slowDealloc();
      }
      else
      {

        uint64_t v24 = v23;
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      v47[0] = 0;
      v19(v47);
      swift_release();
    }
  }
}

uint64_t sub_100029A34(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  int v24 = a8;
  uint64_t v28 = a3;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v16 - 8);
  uint64_t v26 = v16;
  __chkstk_darwin(v16);
  id v18 = &v23[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = a1;
  a2 &= 1u;
  *(unsigned char *)(v20 + 32) = a2;
  *(void *)(v20 + 40) = a5;
  *(void *)(v20 + 48) = a6;
  *(unsigned char *)(v20 + 56) = a7;
  *(unsigned char *)(v20 + 57) = v24;
  aBlock[4] = sub_10003538C;
  void aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_1000866D8;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  sub_1000353A4(a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  BOOL v29 = _swiftEmptyArrayStorage;
  sub_100032010((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v15, v13);
  (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v18, v26);
  swift_release();
  return swift_release();
}

uint64_t sub_100029D6C(uint64_t a1, void (*a2)(void, void), char a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  int v155 = a6;
  unint64_t v163 = a5;
  unint64_t v164 = a4;
  v162 = a2;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  v154 = (char *)&v150 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v161 = (char *)&v150 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v150 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v150 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  int v24 = (char *)&v150 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v150 - v25;
  swift_beginAccess();
  uint64_t v156 = a1 + 16;
  uint64_t result = swift_weakLoadStrong();
  uint64_t v160 = result;
  if (!result) {
    return result;
  }
  uint64_t v159 = v10;
  uint64_t v158 = a1;
  if (a3)
  {
    uint64_t v157 = v11;
    unint64_t v46 = v164;
    if (v164 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_1000353A4((uint64_t)v162, 1);
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v47 = result;
    }
    else
    {
      uint64_t v47 = *(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t result = sub_1000353A4((uint64_t)v162, 1);
    }
    uint64_t v48 = v161;
    if (v47)
    {
      if (v47 < 1)
      {
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }
      uint64_t v49 = (uint64_t *)(v160 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
      unint64_t v50 = v46 & 0xC000000000000001;
      swift_beginAccess();
      uint64_t v51 = 0;
      do
      {
        if (v50) {
          id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v52 = *(id *)(v46 + 8 * v51 + 32);
        }
        id v53 = v52;
        uint64_t v54 = swift_bridgeObjectRetain();
        sub_100034FC0(v54, v53);
        unint64_t v56 = v55;
        uint64_t v58 = v57;
        swift_bridgeObjectRelease();

        if (v56)
        {

          uint64_t v59 = v162;
          uint64_t v167 = v162;
          char v168 = 1;
          sub_1000353A4((uint64_t)v162, 1);
          v58(&v167);
          swift_release();
          sub_100035380((uint64_t)v59, 1);
        }
        swift_beginAccess();
        swift_bridgeObjectRetain();
        unint64_t v60 = sub_10002EF04((uint64_t)v53);
        char v62 = v61;
        swift_bridgeObjectRelease();
        if (v62)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v64 = *v49;
          v166[0] = *v49;
          *uint64_t v49 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10002FC10(&qword_10008F2D8);
            uint64_t v64 = v166[0];
          }

          sub_10002F548(v60, v64);
          *uint64_t v49 = v64;
          swift_bridgeObjectRelease();
          swift_endAccess();
          swift_release();
        }
        else
        {
          swift_endAccess();
        }
        ++v51;

        unint64_t v46 = v164;
        uint64_t v48 = v161;
      }
      while (v47 != v51);
    }
    swift_bridgeObjectRelease();
    uint64_t v65 = sub_1000382C8();
    uint64_t v66 = v157;
    uint64_t v67 = *(void (**)(void))(v157 + 16);
    v153 = (void (*)(char *, char *, uint64_t))v65;
    uint64_t v68 = v159;
    unint64_t v164 = v157 + 16;
    os_log_type_t v152 = (char *)v67;
    v67(v48);
    swift_retain_n();
    unint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v69, v70))
    {
      id v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v151 = (void (*)(void, void))swift_slowAlloc();
      uint64_t v167 = v151;
      *(_DWORD *)id v71 = 136315138;
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        sub_10002B2F4((uint64_t)_swiftEmptyArrayStorage, &qword_10008F2D8, (uint64_t (*)(id))sub_10002EF04);
      }
      sub_100014588(0, &qword_10008F2B0);
      sub_10000423C(&qword_10008F2B8);
      sub_1000353B0(&qword_10008F2C0, &qword_10008F2B0);
      uint64_t v75 = Dictionary.description.getter();
      unint64_t v77 = v76;
      swift_bridgeObjectRelease();
      v166[0] = sub_100004FA4(v75, v77, (uint64_t *)&v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Pending changes in queue: %s", v71, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v72 = *(char **)(v157 + 8);
      uint64_t v73 = v161;
      uint64_t v74 = v159;
    }
    else
    {

      swift_release_n();
      uint64_t v72 = *(char **)(v66 + 8);
      uint64_t v73 = v48;
      uint64_t v74 = v68;
    }
    uint64_t v161 = v72;
    ((void (*)(char *, uint64_t))v72)(v73, v74);
    unint64_t v78 = v163;
    if (v163 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v79 = result;
      if (!result) {
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v79 = *(void *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v79) {
        goto LABEL_77;
      }
    }
    if (v79 < 1)
    {
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    id v80 = (uint64_t *)(v160 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
    unint64_t v81 = v78 & 0xC000000000000001;
    swift_beginAccess();
    for (uint64_t i = 0; i != v79; ++i)
    {
      if (v81) {
        id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v83 = *(id *)(v78 + 8 * i + 32);
      }
      id v84 = v83;
      uint64_t v85 = swift_bridgeObjectRetain();
      sub_100033414(v85);
      char v87 = v86;
      uint64_t v89 = v88;
      swift_bridgeObjectRelease();

      if (v87)
      {

        os_log_type_t v90 = v162;
        v166[0] = (uint64_t)v162;
        sub_1000353A4((uint64_t)v162, 1);
        v89(v166);
        swift_release();
        sub_100035380((uint64_t)v90, 1);
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v91 = sub_10002EF54((uint64_t)v84);
      char v93 = v92;
      swift_bridgeObjectRelease();
      if (v93)
      {
        char v94 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v95 = *v80;
        uint64_t v165 = *v80;
        *id v80 = 0x8000000000000000;
        if ((v94 & 1) == 0)
        {
          sub_10002FC10(&qword_10008F2E0);
          uint64_t v95 = v165;
        }

        sub_10002F548(v91, v95);
        *id v80 = v95;
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();
      }
      else
      {
        swift_endAccess();
      }

      unint64_t v78 = v163;
    }
LABEL_77:
    swift_bridgeObjectRelease();
    uint64_t v119 = v154;
    uint64_t v120 = v159;
    ((void (*)(char *, void, uint64_t))v152)(v154, v153, v159);
    swift_retain_n();
    uint64_t v121 = Logger.logObject.getter();
    os_log_type_t v122 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v121, v122))
    {
      unint64_t v123 = (uint8_t *)swift_slowAlloc();
      v166[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v123 = 136315138;
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        sub_10002B2F4((uint64_t)_swiftEmptyArrayStorage, &qword_10008F2E0, (uint64_t (*)(id))sub_10002EF54);
      }
      sub_100014588(0, &qword_10008F298);
      sub_10000423C(&qword_10008F2A0);
      sub_1000353B0(&qword_10008F2A8, &qword_10008F298);
      uint64_t v126 = Dictionary.description.getter();
      unint64_t v128 = v127;
      swift_bridgeObjectRelease();
      uint64_t v165 = sub_100004FA4(v126, v128, v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "Pending deletion in queue: %s", v123, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v124 = v154;
      uint64_t v125 = v159;
    }
    else
    {

      swift_release_n();
      unint64_t v124 = v119;
      uint64_t v125 = v120;
    }
    ((void (*)(char *, uint64_t))v161)(v124, v125);
    uint64_t v129 = v160;
    uint64_t v130 = v160 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords;
    swift_beginAccess();
    if (*(void *)(*(void *)v130 + 16)
      || (uint64_t v131 = v129 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,
          swift_beginAccess(),
          *(void *)(*(void *)v131 + 16)))
    {
      sub_1000275CC(v155 & 1);
    }
    sub_100035380((uint64_t)v162, 1);
    return swift_release();
  }
  uint64_t v28 = sub_1000382C8();
  BOOL v29 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v154 = (char *)v28;
  uint64_t v161 = (char *)(v11 + 16);
  v153 = v29;
  ((void (*)(char *))v29)(v26);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "CKRecords modify operation finished successfully", v32, 2u);
    swift_slowDealloc();
  }

  int v33 = *(void (**)(void, void))(v11 + 8);
  uint64_t v157 = v11 + 8;
  v162 = v33;
  v33(v26, v10);
  unint64_t v34 = v164;
  os_log_type_t v152 = v18;
  LODWORD(v151) = a7;
  uint64_t v150 = v21;
  if (v164 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v35 = result;
    if (!result) {
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v35 = *(void *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v35) {
      goto LABEL_56;
    }
  }
  if (v35 < 1)
  {
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v36 = 0;
  id v37 = (uint64_t *)(v160 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
  unint64_t v38 = v34 & 0xC000000000000001;
  do
  {
    if (v38) {
      id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v39 = *(id *)(v34 + 8 * v36 + 32);
    }
    uint64_t v40 = v39;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v41 = sub_10002EF04((uint64_t)v40);
    char v43 = v42;
    swift_bridgeObjectRelease();
    if (v43)
    {
      int v44 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v45 = *v37;
      uint64_t v167 = (void (*)(void, void))*v37;
      *id v37 = 0x8000000000000000;
      if (!v44)
      {
        sub_10002FC10(&qword_10008F2D8);
        uint64_t v45 = (uint64_t)v167;
      }

      sub_10002F548(v41, v45);
      *id v37 = v45;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
    }
    else
    {
      swift_endAccess();
    }
    ++v36;

    unint64_t v34 = v164;
  }
  while (v35 != v36);
LABEL_56:
  swift_bridgeObjectRelease();
  uint64_t v96 = v159;
  v153(v24, v154, v159);
  swift_retain_n();
  uint64_t v97 = Logger.logObject.getter();
  os_log_type_t v98 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v97, v98))
  {
    int v99 = (uint8_t *)swift_slowAlloc();
    uint64_t v169 = swift_slowAlloc();
    *(_DWORD *)int v99 = 136315138;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v101 = (void *)(Strong + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
      swift_beginAccess();
      uint64_t v102 = (void (*)(void, void))*v101;
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      uint64_t v102 = 0;
    }
    uint64_t v167 = v102;
    sub_10000423C(&qword_10008F2D0);
    uint64_t v105 = String.init<A>(describing:)();
    uint64_t v167 = (void (*)(void, void))sub_100004FA4(v105, v106, &v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "Pending changes in queue: %s", v99, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v103 = v24;
    uint64_t v104 = v159;
  }
  else
  {

    swift_release_n();
    unint64_t v103 = v24;
    uint64_t v104 = v96;
  }
  v162(v103, v104);
  unint64_t v107 = v163;
  if (v163 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v108 = result;
    if (!result) {
      goto LABEL_88;
    }
  }
  else
  {
    uint64_t v108 = *(void *)((v163 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v108) {
      goto LABEL_88;
    }
  }
  if (v108 < 1)
  {
LABEL_107:
    __break(1u);
    return result;
  }
  uint64_t v109 = 0;
  uint64_t v110 = (uint64_t *)(v160 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
  unint64_t v111 = v107 & 0xC000000000000001;
  do
  {
    if (v111) {
      id v112 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v112 = *(id *)(v107 + 8 * v109 + 32);
    }
    uint64_t v113 = v112;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v114 = sub_10002EF54((uint64_t)v113);
    char v116 = v115;
    swift_bridgeObjectRelease();
    if (v116)
    {
      int v117 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v118 = *v110;
      uint64_t v167 = (void (*)(void, void))*v110;
      uint64_t *v110 = 0x8000000000000000;
      if (!v117)
      {
        sub_10002FC10(&qword_10008F2E0);
        uint64_t v118 = (uint64_t)v167;
      }

      sub_10002F548(v114, v118);
      uint64_t *v110 = v118;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
    }
    else
    {
      swift_endAccess();
    }
    ++v109;

    unint64_t v107 = v163;
  }
  while (v108 != v109);
LABEL_88:
  swift_bridgeObjectRelease();
  id v132 = v150;
  uint64_t v133 = v159;
  v153(v150, v154, v159);
  swift_retain_n();
  uint64_t v134 = Logger.logObject.getter();
  os_log_type_t v135 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v134, v135))
  {
    id v136 = (uint8_t *)swift_slowAlloc();
    uint64_t v169 = swift_slowAlloc();
    *(_DWORD *)id v136 = 136315138;
    swift_beginAccess();
    uint64_t v137 = swift_weakLoadStrong();
    id v138 = v152;
    char v139 = (char)v151;
    if (v137)
    {
      uint64_t v140 = (void *)(v137 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
      swift_beginAccess();
      unint64_t v141 = (void (*)(void, void))*v140;
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      unint64_t v141 = 0;
    }
    uint64_t v167 = v141;
    sub_10000423C(&qword_10008F2C8);
    uint64_t v142 = String.init<A>(describing:)();
    uint64_t v167 = (void (*)(void, void))sub_100004FA4(v142, v143, &v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v134, v135, "Pending deletion in queue: %s", v136, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v133 = v159;
    v162(v132, v159);
  }
  else
  {

    swift_release_n();
    v162(v132, v133);
    id v138 = v152;
    char v139 = (char)v151;
  }
  uint64_t v144 = v160;
  uint64_t v145 = v160 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords;
  swift_beginAccess();
  if (*(void *)(*(void *)v145 + 16)
    || (uint64_t v146 = v144 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,
        swift_beginAccess(),
        *(void *)(*(void *)v146 + 16)))
  {
    sub_1000275CC(v155 & 1);
  }
  if ((v139 & 1) == 0) {
    return swift_release();
  }
  sub_100022BFC(45.0);
  v153(v138, v154, v133);
  os_log_type_t v147 = Logger.logObject.getter();
  os_log_type_t v148 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v147, v148))
  {
    uint64_t v149 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v149 = 0;
    _os_log_impl((void *)&_mh_execute_header, v147, v148, "Cloud update done, continue the fetch...", v149, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
  }
  return ((uint64_t (*)(char *, uint64_t))v162)(v138, v133);
}

unint64_t sub_10002B2F4(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_13;
  }
  sub_10000423C(a2);
  uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  unint64_t result = swift_retain();
  uint64_t v8 = 0;
  uint64_t v9 = (_OWORD *)(a1 + 40);
  while (1)
  {
    uint64_t v10 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    uint64_t v11 = (void *)*((void *)v9 - 1);
    if (!v11)
    {
      swift_retain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    long long v17 = *v9;
    id v12 = v11;
    swift_retain();
    unint64_t result = a3(v12);
    if (v13) {
      goto LABEL_15;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v5[6] + 8 * result) = v12;
    *(_OWORD *)(v5[7] + 16 * result) = v17;
    uint64_t v14 = v5[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_16;
    }
    v5[2] = v16;
    uint64_t v9 = (_OWORD *)((char *)v9 + 24);
    ++v8;
    if (v10 == v6) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

id *sub_10002B44C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_10000E044((uint64_t)v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription, &qword_10008EAB8);
  sub_10000E044((uint64_t)v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription, (uint64_t *)&unk_10008EE00);

  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudZoneSetupGroup));
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___susbscriptionSetupGroup));
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___fetchDatabaseGroup));
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudUserActionExplicitGroup));
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___deferredUpdatesGroup));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_tokenDirectory;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10002B5C4()
{
  sub_10002B44C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

void sub_10002B61C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  Class isa = v2[-1].isa;
  unint64_t v76 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v74 = (char *)&v73 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v73 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  char v13 = (char *)&v73 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v73 - v15;
  __chkstk_darwin(v14);
  id v18 = (char *)&v73 - v17;
  id v19 = [a1 userInfo];
  if (!v19) {
    __break(1u);
  }
  uint64_t v20 = v19;
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  Class v21 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v22 = [self notificationFromRemoteNotificationDictionary:v21];

  if (v22)
  {
    id v23 = [v22 notificationType];
    switch((unint64_t)v23)
    {
      case 1uLL:
        uint64_t v24 = sub_1000382C8();
        Class v25 = isa;
        uint64_t v26 = v76;
        (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v18, v24, v76);
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          BOOL v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)BOOL v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Query notifications are not handled", v29, 2u);
          swift_slowDealloc();
          uint64_t v30 = v22;
        }
        else
        {
          uint64_t v30 = v27;
          uint64_t v27 = v22;
        }

        (*((void (**)(char *, NSObject *))v25 + 1))(v18, v26);
        break;
      case 2uLL:
        self;
        uint64_t v49 = swift_dynamicCastObjCClass();
        if (v49)
        {
          unint64_t v50 = (void *)v49;
          unint64_t v76 = v22;
          sub_10002BF08(v50);
          goto LABEL_17;
        }
        uint64_t v60 = sub_1000382C8();
        char v61 = v76;
        (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v16, v60, v76);
        char v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v64 = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unable to cast to CKRecordZoneNotification", v64, 2u);
          swift_slowDealloc();
          uint64_t v65 = v22;
        }
        else
        {
          uint64_t v65 = v62;
          char v62 = v22;
        }

        (*((void (**)(char *, NSObject *))isa + 1))(v16, v61);
        break;
      case 3uLL:
        uint64_t v51 = sub_1000382C8();
        Class v52 = isa;
        (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v13, v51, v76);
        id v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          unint64_t v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Read notifications are not handled", v55, 2u);
          swift_slowDealloc();
          unint64_t v56 = v22;
        }
        else
        {
          unint64_t v56 = v53;
          id v53 = v22;
        }

        (*((void (**)(char *, NSObject *))v52 + 1))(v13, v76);
        break;
      case 4uLL:
        self;
        uint64_t v57 = swift_dynamicCastObjCClass();
        if (v57)
        {
          uint64_t v58 = (void *)v57;
          unint64_t v76 = v22;
          sub_10002C6A0(v58);
LABEL_17:

          uint64_t v59 = v76;
        }
        else
        {
          uint64_t v66 = sub_1000382C8();
          Class v67 = isa;
          uint64_t v68 = v76;
          (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v10, v66, v76);
          unint64_t v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v69, v70))
          {
            id v71 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v71 = 0;
            _os_log_impl((void *)&_mh_execute_header, v69, v70, "Unable to cast to CKRecordZoneNotification", v71, 2u);
            swift_slowDealloc();
            uint64_t v72 = v22;
          }
          else
          {
            uint64_t v72 = v69;
            unint64_t v69 = v22;
          }

          (*((void (**)(char *, NSObject *))v67 + 1))(v10, v68);
        }
        break;
      default:
        uint64_t v38 = (uint64_t)v23;
        uint64_t v39 = sub_1000382C8();
        uint64_t v40 = v74;
        Class v41 = isa;
        char v42 = v76;
        (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v74, v39, v76);
        char v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = (uint8_t *)swift_slowAlloc();
          uint64_t v46 = swift_slowAlloc();
          uint64_t v77 = v38;
          uint64_t v78 = v46;
          *(_DWORD *)uint64_t v45 = 136315138;
          type metadata accessor for NotificationType(0);
          uint64_t v47 = String.init<A>(describing:)();
          uint64_t v77 = sub_100004FA4(v47, v48, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unknown notificationType: %s", v45, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*((void (**)(char *, NSObject *))v41 + 1))(v74, v76);
        }
        else
        {

          (*((void (**)(char *, NSObject *))v41 + 1))(v40, v42);
        }
        break;
    }
  }
  else
  {
    uint64_t v31 = sub_1000382C8();
    Class v32 = isa;
    int v33 = v76;
    (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v5, v31, v76);
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      id v37 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 138412290;
      uint64_t v78 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unknown notification: %@", v36, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*((void (**)(char *, NSObject *))v32 + 1))(v5, v33);
  }
}

void sub_10002BF08(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void **)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v59 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v59 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v66 = (char *)&v59 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v59 - v15;
  id v17 = [a1 recordZoneID];
  if (v17)
  {
    id v18 = v17;
    unint64_t v69 = [a1 databaseScope];
    uint64_t v19 = sub_1000382C8();
    uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))v3[2];
    uint64_t v63 = v19;
    uint64_t v64 = v20;
    uint64_t v65 = v3 + 2;
    ((void (*)(char *))v20)(v16);
    Class v21 = a1;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    char v62 = v12;
    if (v24)
    {
      uint64_t v68 = v2;
      uint64_t v25 = swift_slowAlloc();
      id v61 = v18;
      uint64_t v26 = (uint8_t *)v25;
      uint64_t v59 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412290;
      id v71 = v21;
      uint64_t v27 = v21;
      uint64_t v60 = v9;
      os_log_type_t v28 = v3;
      BOOL v29 = v27;
      uint64_t v2 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v59 = v21;

      uint64_t v3 = v28;
      uint64_t v9 = v60;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "RecordZoneNotification: %@", v26, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v18 = v61;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v22 = v21;
    }

    uint64_t v39 = (void (*)(char *, uint64_t))v3[1];
    id v37 = v3 + 1;
    uint64_t v38 = v39;
    v39(v16, v2);
    if (v69 == (void *)1)
    {
      v64(v62, v63, v2);
      Class v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        char v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Nothing public", v43, 2u);
        swift_slowDealloc();
      }

      os_log_type_t v44 = v62;
    }
    else if (v69 == (void *)3)
    {
      uint64_t v45 = v66;
      v64(v66, v63, v2);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        unint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Nothing shared", v48, 2u);
        swift_slowDealloc();
      }

      os_log_type_t v44 = v45;
    }
    else
    {
      if (v69 == (void *)2)
      {
        uint64_t v40 = type metadata accessor for Transaction();
        __chkstk_darwin(v40);
        *(&v59 - 2) = v67;
        *(&v59 - 1) = v18;
        static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.recordZoneNotification", 46, 2uLL, sub_100033A38);

        return;
      }
      v64(v9, v63, v2);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = swift_slowAlloc();
        id v61 = v18;
        Class v52 = (uint8_t *)v51;
        uint64_t v53 = swift_slowAlloc();
        uint64_t v68 = v2;
        id v71 = v53;
        uint64_t v60 = v9;
        *(_DWORD *)Class v52 = 136315138;
        id v54 = (id)CKDatabaseScopeString();
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v69 = v37;
        uint64_t v56 = v55;
        unint64_t v58 = v57;

        uint64_t v70 = sub_100004FA4(v56, v58, (uint64_t *)&v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unknown databaseScope: %s", v52, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v38(v60, v68);
        return;
      }

      os_log_type_t v44 = v9;
    }
    v38(v44, v2);
  }
  else
  {
    uint64_t v30 = sub_1000382C8();
    ((void (*)(char *, uint64_t, uint64_t))v3[2])(v6, v30, v2);
    uint64_t v31 = a1;
    Class v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v69 = v3;
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v35 = (void *)swift_slowAlloc();
      uint64_t v68 = v2;
      *(_DWORD *)unint64_t v34 = 138412290;
      id v71 = v31;
      uint64_t v36 = v31;
      uint64_t v2 = v68;
      uint64_t v3 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v35 = v31;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "No recordZoneID in %@", v34, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      Class v32 = v31;
    }

    ((void (*)(char *, uint64_t))v3[1])(v6, v2);
  }
}

uint64_t sub_10002C6A0(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 databaseScope];
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v1 + 256))(v39);
  uint64_t v8 = v40;
  v43[0] = v40;
  long long v42 = v39[0];
  swift_bridgeObjectRetain();
  sub_1000306C4((uint64_t)&v42);
  long long v41 = v39[1];
  sub_1000306C4((uint64_t)&v41);
  sub_1000306F0((uint64_t)v43);
  uint64_t v9 = *(void *)(v8 + 16);
  os_log_type_t v35 = v6;
  uint64_t v36 = v4;
  if (v9)
  {
    id v33 = v7;
    unint64_t v34 = v1;
    uint64_t v31 = a1;
    uint64_t v32 = v3;
    uint64_t v10 = (void **)(v8 + 40);
    uint64_t result = swift_bridgeObjectRetain();
    BOOL v12 = 0;
    uint64_t v13 = 1;
    do
    {
      if (v12)
      {
        if (v9 == v13)
        {
          sub_1000306F0((uint64_t)v43);
          sub_1000306F0((uint64_t)v43);
LABEL_13:
          uint64_t v29 = type metadata accessor for Transaction();
          __chkstk_darwin(v29);
          id v30 = v33;
          *(&v31 - 2) = v34;
          *(&v31 - 1) = v30;
          return static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.databaseNotification", 44, 2uLL, (void (*)(uint64_t))sub_100033B84);
        }
        BOOL v12 = 1;
      }
      else
      {
        uint64_t v14 = (uint64_t)*(v10 - 1);
        uint64_t v15 = *v10;
        unint64_t v37 = 0;
        unint64_t v38 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease();
        unint64_t v37 = 0xD000000000000024;
        unint64_t v38 = 0x800000010007AC60;
        v16._uint64_t countAndFlagsBits = v14;
        v16._object = v15;
        String.append(_:)(v16);
        uint64_t v17 = v37;
        unint64_t v18 = v38;
        uint64_t v19 = sub_10000423C(&qword_10008EE40);
        sub_100010A0C(v17, v18, 2, v19, (char *)&v37);
        swift_bridgeObjectRelease();
        unint64_t v20 = v37;
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v12 = v20 == 0;
        if (v9 == v13)
        {
          sub_1000306F0((uint64_t)v43);
          sub_1000306F0((uint64_t)v43);
          a1 = v31;
          uint64_t v3 = v32;
          uint64_t v6 = v35;
          uint64_t v4 = v36;
          if (v20) {
            goto LABEL_10;
          }
          goto LABEL_13;
        }
      }
      v10 += 2;
    }
    while (!__OFADD__(v13++, 1));
    __break(1u);
  }
  else
  {
    sub_1000306F0((uint64_t)v43);
LABEL_10:
    uint64_t v22 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v22, v3);
    os_log_type_t v23 = a1;
    BOOL v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412290;
      unint64_t v37 = (unint64_t)v23;
      os_log_type_t v28 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v27 = v23;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Only handle cloud pairing recordZoneNotification, Dropping DatabaseNotification: %@", v26, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      uint64_t v6 = v35;
      swift_slowDealloc();
      uint64_t v4 = v36;
      swift_slowDealloc();
    }
    else
    {

      BOOL v24 = v23;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

void sub_10002CAE4(uint64_t a1, int a2, uint64_t a3)
{
  LODWORD(v50) = a2;
  uint64_t v47 = a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v42 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v42 - v12;
  uint64_t v14 = sub_1000382C8();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v48 = v14;
  uint64_t v49 = v15;
  ((void (*)(char *))v15)(v13);
  swift_retain_n();
  Swift::String v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v45 = v11;
    uint64_t v19 = (uint8_t *)v18;
    char v43 = (void *)swift_slowAlloc();
    uint64_t v46 = v5;
    os_log_type_t v44 = v19;
    *(_DWORD *)uint64_t v19 = 138412290;
    v42[1] = v19 + 4;
    id v20 = sub_1000150E0();
    Class v21 = v8;
    uint64_t v22 = v4;
    uint64_t v23 = a3;
    id v24 = [v20 privateCloudDatabase];

    id v52 = v24;
    uint64_t v5 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v43 = v24;
    a3 = v23;
    uint64_t v4 = v22;
    uint64_t v8 = v21;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "database: %@ updateCache completed.", v44, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v11 = v45;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  char v25 = v50;
  os_log_type_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v26 = v5 + 8;
  uint64_t v27 = v28;
  v28(v13, v4);
  if (v25)
  {
    v49(v11, v48, v4);
    uint64_t v32 = v47;
    sub_1000353A4(v47, 1);
    swift_errorRetain();
    swift_errorRetain();
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    v42[0] = a3;
    if (v35)
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v46 = v26;
      unint64_t v37 = (uint8_t *)v36;
      uint64_t v38 = swift_slowAlloc();
      uint64_t v50 = v4;
      uint64_t v39 = (void *)v38;
      *(_DWORD *)unint64_t v37 = 138412290;
      swift_errorRetain();
      uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
      id v52 = (id)v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v39 = v40;
      sub_100035380(v32, 1);
      sub_100035380(v32, 1);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "APS fetchDatabaseChanges error: %@", v37, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      uint64_t v4 = v50;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100035380(v32, 1);
      sub_100035380(v32, 1);
    }

    v27(v11, v4);
    id v52 = (id)v32;
    swift_errorRetain();
    sub_10000423C(&qword_10008F2F8);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      long long v41 = v51;
      sub_100032010((unint64_t *)&unk_10008F300, type metadata accessor for CKError);
      _BridgedStoredNSError.code.getter();
      if (v52 == (id)4 || (uint64_t v51 = v41, _BridgedStoredNSError.code.getter(), v52 == (id)3)) {
        sub_100022BFC(150.0);
      }
      sub_100035380(v32, 1);
    }
    else
    {
      sub_100035380(v32, 1);
    }
  }
  else
  {
    v49(v8, v48, v4);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "APS fetchDatabaseChanges completed.", v31, 2u);
      swift_slowDealloc();
    }

    v27(v8, v4);
  }
}

void sub_10002D0CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  LODWORD(v51) = a2;
  uint64_t v48 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v43 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v43 - v13;
  Transaction.capture()();
  uint64_t v15 = sub_1000382C8();
  Swift::String v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v49 = v15;
  uint64_t v50 = v16;
  ((void (*)(char *))v16)(v14);
  swift_retain_n();
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v46 = v12;
    id v20 = (uint8_t *)v19;
    os_log_type_t v44 = (void *)swift_slowAlloc();
    uint64_t v47 = v6;
    uint64_t v45 = v20;
    *(_DWORD *)id v20 = 138412290;
    v43[1] = v20 + 4;
    id v21 = sub_1000150E0();
    uint64_t v22 = v9;
    uint64_t v23 = v5;
    uint64_t v24 = a4;
    id v25 = [v21 privateCloudDatabase];

    id v53 = v25;
    uint64_t v6 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v44 = v25;
    a4 = v24;
    uint64_t v5 = v23;
    uint64_t v9 = v22;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "database: %@ zone updateCache completed.", v45, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v12 = v46;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  char v26 = v51;
  uint64_t v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v27 = v6 + 8;
  os_log_type_t v28 = v29;
  v29(v14, v5);
  if (v26)
  {
    v50(v12, v49, v5);
    uint64_t v33 = v48;
    sub_1000353A4(v48, 1);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    v43[0] = a4;
    if (v36)
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v47 = v27;
      uint64_t v38 = (uint8_t *)v37;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v51 = v5;
      uint64_t v40 = (void *)v39;
      *(_DWORD *)uint64_t v38 = 138412290;
      swift_errorRetain();
      uint64_t v41 = _swift_stdlib_bridgeErrorToNSError();
      id v53 = (id)v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v40 = v41;
      sub_100035380(v33, 1);
      sub_100035380(v33, 1);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "APS fetchZoneChanges error: %@", v38, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      uint64_t v5 = v51;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100035380(v33, 1);
      sub_100035380(v33, 1);
    }

    v28(v12, v5);
    id v53 = (id)v33;
    swift_errorRetain();
    sub_10000423C(&qword_10008F2F8);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      long long v42 = v52;
      sub_100032010((unint64_t *)&unk_10008F300, type metadata accessor for CKError);
      _BridgedStoredNSError.code.getter();
      if (v53 == (id)4 || (id v52 = v42, _BridgedStoredNSError.code.getter(), v53 == (id)3)) {
        sub_100022BFC(150.0);
      }
      sub_100035380(v33, 1);
    }
    else
    {
      sub_100035380(v33, 1);
    }
  }
  else
  {
    v50(v9, v49, v5);
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "APS fetchZoneChanges completed.", v32, 2u);
      swift_slowDealloc();
    }

    v28(v9, v5);
  }
}

void sub_10002D6BC(void *a1)
{
}

uint64_t sub_10002D6E0()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_10002D750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000423C(&qword_10008EE48);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000ACAC(a1, (uint64_t)v21);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = sub_10000423C(&qword_10008F368);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_100036078, v10, v11, a3);
  sub_1000145C4(a3, (uint64_t)v9, &qword_10008EE48);
  uint64_t v12 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)a2 + 296))(v21);
  uint64_t v14 = v13;
  unint64_t v15 = *v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_10002E53C(0, *(void *)(v15 + 16) + 1, 1, v15);
    unint64_t *v14 = v15;
  }
  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = sub_10002E53C(v17 > 1, v18 + 1, 1, v15);
    unint64_t *v14 = v15;
  }
  *(void *)(v15 + 16) = v18 + 1;
  sub_1000043DC((uint64_t)v9, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v18, &qword_10008EE48);
  return v12(v21, 0);
}

uint64_t sub_10002D978(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000423C(&qword_10008EE48);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v16 = *(void *)(v1 + 72);
  sub_1000145C4(a1, (uint64_t)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10008EE48);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v1;
  sub_1000043DC((uint64_t)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, &qword_10008EE48);
  aBlock[4] = sub_100033D60;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_1000862D8;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_100032010((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  return swift_release();
}

uint64_t sub_10002DCE4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 280))();
}

uint64_t sub_10002DD30()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 288))();
}

void (*sub_10002DD7C(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 296))();
  return sub_1000095B8;
}

uint64_t sub_10002DE00()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_10002DE70(uint64_t a1)
{
  uint64_t v2 = sub_100032010(&qword_10008F3F8, type metadata accessor for CKError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10002DEDC(uint64_t a1)
{
  uint64_t v2 = sub_100032010(&qword_10008F3F8, type metadata accessor for CKError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002DF48(uint64_t a1)
{
  uint64_t v2 = sub_100032010((unint64_t *)&unk_10008F300, type metadata accessor for CKError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_10002DFB4()
{
  return *v0;
}

uint64_t sub_10002DFBC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_10002DFC4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_10002DFD4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10002DFE0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10002DFF0(uint64_t a1)
{
  uint64_t v2 = sub_100032010((unint64_t *)&unk_10008F300, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10002E05C(uint64_t a1)
{
  uint64_t v2 = sub_100032010((unint64_t *)&unk_10008F300, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002E0C8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100032010((unint64_t *)&unk_10008F300, type metadata accessor for CKError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10002E158()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10002E190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100032010((unint64_t *)&unk_10008F300, type metadata accessor for CKError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10002E20C()
{
  return Hasher._finalize()();
}

uint64_t sub_10002E26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100032010((unint64_t *)&unk_10008F300, type metadata accessor for CKError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_10002E2F0(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_10002E304(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000423C(&qword_10008F388);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      unint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100032328(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10002E42C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000423C(&qword_10008F290);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10003520C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002E53C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000423C(&qword_10008F358);
  uint64_t v10 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000360EC(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_10002E7AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000423C(&qword_10008F2F0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  unint64_t v6 = sub_10002FFEC(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10003540C();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_10002E898(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10002E8B8(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10002E8B8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000423C(&qword_10008F358);
  uint64_t v10 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  id v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10002EB00(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3)
{
  unint64_t v6 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = a2(a1);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v6;
  uint64_t v14 = *v6;
  *unint64_t v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10002FC10(a3);
    uint64_t v11 = v14;
  }

  uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 16 * v8);
  sub_10002F548(v8, v11);
  *unint64_t v6 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

Swift::Int sub_10002EBE8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000423C(&qword_10008F398);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_100014588(0, &qword_10008F310);
      do
      {
        swift_dynamicCast();
        sub_100014588(0, &qword_10008F378);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10002EFA4(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

unint64_t sub_10002EE3C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10002F870(a1, a2, v4);
}

unint64_t sub_10002EEB4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10002F954(a1, v4, &qword_10008F310);
}

unint64_t sub_10002EF04(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10002F954(a1, v4, &qword_10008F2B0);
}

unint64_t sub_10002EF54(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10002F954(a1, v4, &qword_10008F298);
}

uint64_t sub_10002EFA4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000423C(&qword_10008F398);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  BOOL v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    os_log_type_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10002F278(uint64_t a1, char a2, uint64_t *a3)
{
  Swift::Int v4 = v3;
  uint64_t v6 = *v3;
  sub_10000423C(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    id v33 = v3;
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    unint64_t v10 = (void *)(v6 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v6 + 64);
    int64_t v13 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v14 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v22 = v21 | (v16 << 6);
      }
      else
      {
        int64_t v23 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v23 >= v13) {
          goto LABEL_33;
        }
        unint64_t v24 = v10[v23];
        ++v16;
        if (!v24)
        {
          int64_t v16 = v23 + 1;
          if (v23 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v24 = v10[v16];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::Int v4 = v33;
                goto LABEL_40;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v6 + 32);
              if (v32 >= 64) {
                bzero((void *)(v6 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v10 = -1 << v32;
              }
              Swift::Int v4 = v33;
              *(void *)(v6 + 16) = 0;
              break;
            }
            unint64_t v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v16 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v16 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v24 = v10[v16];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v16 = v25;
          }
        }
LABEL_30:
        unint64_t v12 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v16 << 6);
      }
      uint64_t v30 = *(void **)(*(void *)(v6 + 48) + 8 * v22);
      long long v34 = *(_OWORD *)(*(void *)(v6 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
      {
        id v31 = v30;
        swift_retain();
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      uint64_t v17 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v18 = result & ~v17;
      unint64_t v19 = v18 >> 6;
      if (((-1 << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v28 = v19 == v27;
          if (v19 == v27) {
            unint64_t v19 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v19);
        }
        while (v29 == -1);
        unint64_t v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }
      *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(void *)(*(void *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20) = v34;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v4 = v8;
  return result;
}

void sub_10002F548(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            unint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (_OWORD *)(v19 + 16 * v3);
            unint64_t v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *unint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *unint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_10002F6FC(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10002EEB4((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10002FA68();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10002EFA4(v12, a3 & 1);
  unint64_t v17 = sub_10002EEB4((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_100014588(0, &qword_10008F310);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v15[2] = v22;

  id v23 = a2;
}

unint64_t sub_10002F870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        char v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10002F954(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_100014588(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

id sub_10002FA68()
{
  uint64_t v1 = v0;
  sub_10000423C(&qword_10008F398);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    char v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10002FC10(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000423C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v14) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v7 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v22 + 1;
      if (v22 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v7 + 8 * v10);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v16 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    char v18 = *(void **)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t v19 = 16 * v16;
    long long v20 = *(_OWORD *)(*(void *)(v3 + 56) + v19);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(void *)(v5 + 56) + v19) = v20;
    id v21 = v18;
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v14) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v7 + 8 * v24);
  if (v23)
  {
    int64_t v10 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v7 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10002FDC8(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  id result = swift_stdlib_random();
  if (v5 * ((double)0 * 1.11022302e-16) + a2 == a3) {
    return sub_10002FDC8(v6, a2, a3);
  }
  return result;
}

uint64_t sub_10002FE74(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t (*a5)(void *), uint64_t *a6, unint64_t *a7)
{
  int64_t v10 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = a5(a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    sub_10002FC10(a6);
LABEL_7:
    unint64_t v23 = (void *)*v10;
    if (v21)
    {
LABEL_8:
      int64_t v24 = (uint64_t *)(v23[7] + 16 * v17);
      uint64_t result = *v24;
      *int64_t v24 = a1;
      v24[1] = a2;
      return result;
    }
LABEL_11:
    v23[(v17 >> 6) + 8] |= 1 << v17;
    *(void *)(v23[6] + 8 * v17) = a3;
    BOOL v28 = (uint64_t *)(v23[7] + 16 * v17);
    *BOOL v28 = a1;
    v28[1] = a2;
    uint64_t v29 = v23[2];
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (!v30)
    {
      v23[2] = v31;
      id v32 = a3;
      return 0;
    }
    goto LABEL_14;
  }
  sub_10002F278(v20, a4 & 1, a6);
  uint64_t v26 = a5(a3);
  if ((v21 & 1) == (v27 & 1))
  {
    unint64_t v17 = v26;
    unint64_t v23 = (void *)*v10;
    if (v21) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  sub_100014588(0, a7);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_10002FFEC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  double v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *double v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000301E8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_100030264(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010007AFD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x734449656E6F7ALL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000303B4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000423C(&qword_10008F3C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AF14(a1, a1[3]);
  sub_100014C7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000057DC((uint64_t)a1);
  }
  char v24 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v20 = v9;
  char v23 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v18 = v12;
  sub_10000423C(&qword_10008FDD0);
  char v22 = 2;
  sub_10003704C(&qword_10008F3D0);
  uint64_t v19 = v14;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v21;
  swift_bridgeObjectRetain();
  sub_1000057DC((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v16 = v19;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v20;
  a2[1] = v11;
  a2[2] = v18;
  a2[3] = v16;
  a2[4] = v15;
  return result;
}

uint64_t sub_100030698(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000306C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000306F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003071C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 512))();
  *a1 = result;
  return result;
}

uint64_t sub_100030774()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000307AC()
{
  return sub_100015488(*(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_1000307D8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000307E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000307F8()
{
  return swift_release();
}

unint64_t sub_100030800()
{
  unint64_t result = qword_10008EDF8;
  if (!qword_10008EDF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EDF8);
  }
  return result;
}

void sub_100030854(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable);
}

uint64_t type metadata accessor for CloudStorageCoordinator()
{
  uint64_t result = qword_100091D90;
  if (!qword_100091D90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000308B4(uint64_t a1, void (*a2)(unsigned char *, id))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    sub_100007CB8(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v16);
    id v17 = *(id *)(*(void *)(a1 + 56) + 8 * v12);
    a2(v16, v17);
    uint64_t result = sub_10000E044((uint64_t)v16, &qword_10008F320);
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100030A58(uint64_t a1, void (*a2)(id, uint64_t (*)(uint64_t), _OWORD *))
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v19 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v19) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    ++v8;
    if (!v14)
    {
      int64_t v8 = v13 + 1;
      if (v13 + 1 >= v19) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v8);
      if (!v14)
      {
        int64_t v8 = v13 + 2;
        if (v13 + 2 >= v19) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v17 + 8 * v8);
        if (!v14)
        {
          int64_t v8 = v13 + 3;
          if (v13 + 3 >= v19) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v17 + 8 * v8);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_5:
    long long v18 = *(_OWORD *)(*(void *)(a1 + 56) + 16 * v10);
    __chkstk_darwin(v7);
    v16[1] = v18;
    id v12 = v11;
    swift_retain();
    a2(v12, sub_1000374A4, v16);
    swift_release();
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v19)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v14 = *(void *)(v17 + 8 * v15);
  if (v14)
  {
    int64_t v8 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v8 >= v19) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100030C78()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  id v1 = [self defaultManager];
  URL.path.getter();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v3 = [v1 fileExistsAtPath:v2];

  uint64_t result = 0;
  if (v3)
  {
    uint64_t v5 = Data.init(contentsOf:options:)();
    unint64_t v7 = v6;
    sub_100014588(0, &qword_10008F3A8);
    sub_10000423C(&qword_10008F3B0);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1000747D0;
    *(void *)(v8 + 32) = sub_100014588(0, &qword_10008F3B8);
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
    sub_10000AB1C(v5, v7);
    swift_bridgeObjectRelease();
    if (v10[3])
    {
      if (swift_dynamicCast()) {
        return v9;
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_10000E044((uint64_t)v10, &qword_10008FE80);
      return 0;
    }
  }
  return result;
}

unint64_t sub_100031024()
{
  unint64_t result = qword_10008EE18;
  if (!qword_10008EE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EE18);
  }
  return result;
}

uint64_t sub_100031078(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(void *)(v4 + 56);
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = v4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  aBlock[4] = sub_10003696C;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100086CC8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  id v18 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_100032010((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

id sub_100031354()
{
  id v0 = [self defaultManager];
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v7 = 0;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v7];

  if (v4) {
    return v7;
  }
  id v6 = v7;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t sub_10003143C(NSObject *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v89 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  int v88 = ((char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v80 - v8;
  __chkstk_darwin(v7);
  id v11 = (char *)&v80 - v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v87 = (unint64_t)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v80 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v80 - v20;
  __chkstk_darwin(v19);
  char v23 = (char *)&v80 - v22;
  os_log_t v86 = a1;
  if (!a1)
  {
    sub_100031354();
    uint64_t v41 = sub_1000382C8();
    (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v9, v41, v4);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, a2, v12);
    long long v42 = Logger.logObject.getter();
    uint64_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, (os_log_type_t)v43))
    {
      uint64_t v44 = v13;
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = (void *)swift_slowAlloc();
      uint64_t v85 = v4;
      id v91 = v46;
      *(_DWORD *)uint64_t v45 = 136315138;
      int v88 = (v45 + 4);
      sub_100032010(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v90 = sub_100004FA4(v47, v48, (uint64_t *)&v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v12);
      _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v43, "Deleted change token, URL, %s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v9, v85);
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);

    uint64_t v68 = *(uint64_t (**)(NSObject *, uint64_t))(v89 + 8);
    unint64_t v69 = v9;
    return v68(v69, v4);
  }
  id v84 = v11;
  char v24 = self;
  uint64_t v25 = a1;
  id v26 = [v24 defaultManager];
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v27);
  uint64_t v29 = v28;
  uint64_t v85 = v13;
  BOOL v30 = *(void (**)(char *, uint64_t))(v13 + 8);
  v30(v23, v12);
  id v91 = 0;
  unsigned int v31 = [v26 createDirectoryAtURL:v29 withIntermediateDirectories:1 attributes:0 error:&v91];

  id v32 = v91;
  if (v31)
  {
    uint64_t v33 = v12;
    long long v34 = self;
    id v91 = 0;
    id v35 = [v34 archivedDataWithRootObject:v25 requiringSecureCoding:1 error:&v91];
    id v36 = v91;
    if (v35)
    {
      id v83 = v30;
      uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      Data.write(to:excludeFromBackup:options:)(a2, 1);
      uint64_t v82 = v37;
      unint64_t v87 = v39;
      uint64_t v70 = sub_1000382C8();
      (*(void (**)(void *, uint64_t, uint64_t))(v89 + 16))(v84, v70, v4);
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v21, a2, v12);
      id v71 = v25;
      uint64_t v72 = Logger.logObject.getter();
      uint64_t v73 = static os_log_type_t.default.getter();
      int v88 = v72;
      if (os_log_type_enabled(v72, (os_log_type_t)v73))
      {
        uint64_t v75 = swift_slowAlloc();
        id v80 = (void *)swift_slowAlloc();
        unint64_t v81 = (void *)swift_slowAlloc();
        id v91 = v81;
        *(_DWORD *)uint64_t v75 = 136315394;
        sub_100032010(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v90 = sub_100004FA4(v76, v77, (uint64_t *)&v91);
        uint64_t v85 = v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v83(v21, v12);
        *(_WORD *)(v75 + 12) = 2112;
        uint64_t v90 = (uint64_t)v71;
        uint64_t v78 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v80 = v86;

        uint64_t v79 = v88;
        _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v73, "Updated change token, URL, %s, token, %@", (uint8_t *)v75, 0x16u);
        sub_10000423C((uint64_t *)&unk_10008EA40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_10000AB1C(v82, v87);

        return (*(uint64_t (**)(void *, uint64_t))(v89 + 8))(v84, v85);
      }
      else
      {

        v83(v21, v12);
        sub_10000AB1C(v82, v87);

        return (*(uint64_t (**)(void *, uint64_t))(v89 + 8))(v84, v4);
      }
    }
    uint64_t v50 = v36;
    _convertNSErrorToError(_:)();
  }
  else
  {
    uint64_t v40 = v32;
    uint64_t v33 = v12;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();

  uint64_t v51 = v85;
  uint64_t v52 = sub_1000382C8();
  id v53 = v88;
  (*(void (**)(NSObject *, uint64_t, uint64_t))(v89 + 16))(v88, v52, v4);
  unint64_t v54 = v87;
  uint64_t v55 = v33;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v51 + 16))(v87, a2, v33);
  uint64_t v56 = v25;
  swift_errorRetain();
  unint64_t v57 = v56;
  swift_errorRetain();
  unint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v58, v59))
  {
    swift_errorRelease();

    (*(void (**)(unint64_t, uint64_t))(v51 + 8))(v54, v55);
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v68 = *(uint64_t (**)(NSObject *, uint64_t))(v89 + 8);
    unint64_t v69 = v53;
    return v68(v69, v4);
  }
  uint64_t v60 = v51;
  uint64_t v61 = swift_slowAlloc();
  id v83 = (void (*)(char *, uint64_t))swift_slowAlloc();
  id v84 = (void *)swift_slowAlloc();
  id v91 = v84;
  *(_DWORD *)uint64_t v61 = 136315650;
  if (v86) {
    uint64_t v62 = 0x657461647075;
  }
  else {
    uint64_t v62 = 0x6574656C6564;
  }
  os_log_t v86 = v58;
  uint64_t v90 = sub_100004FA4(v62, 0xE600000000000000, (uint64_t *)&v91);
  uint64_t v85 = v4;
  uint64_t v63 = v89;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v61 + 12) = 2080;
  sub_100032010(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v90 = sub_100004FA4(v64, v65, (uint64_t *)&v91);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v60 + 8))(v54, v55);
  *(_WORD *)(v61 + 22) = 2112;
  swift_errorRetain();
  uint64_t v66 = _swift_stdlib_bridgeErrorToNSError();
  uint64_t v90 = v66;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(void *)id v83 = v66;
  swift_errorRelease();
  swift_errorRelease();
  os_log_t v67 = v86;
  _os_log_impl((void *)&_mh_execute_header, v86, v59, "Unable to %s change token, URL, %s, error, %@ ", (uint8_t *)v61, 0x20u);
  sub_10000423C((uint64_t *)&unk_10008EA40);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  return (*(uint64_t (**)(NSObject *, uint64_t))(v63 + 8))(v88, v85);
}

uint64_t sub_100031FB0()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100032000()
{
  return sub_10001EFC4(*(void *)(v0 + 16), *(id **)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100032010(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100032058(uint64_t a1)
{
  return sub_100024E40(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(unsigned char *)(v1 + 48));
}

void *sub_10003208C(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  char v23 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_30;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v5 = 0;
    uint64_t v21 = v3 & 0xFFFFFFFFFFFFFF8;
    unint64_t v22 = v3 & 0xC000000000000001;
    uint64_t v20 = (void **)(v3 + 32);
    uint64_t v19 = i;
    while (1)
    {
      if (v22)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v5 >= *(void *)(v21 + 16))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        uint64_t v6 = v20[v5];
      }
      uint64_t v7 = v6;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_28;
      }
      (*(void (**)(_OWORD *__return_ptr))(*(void *)a2 + 256))(v24);
      uint64_t v9 = v25;
      BOOL v28 = v25;
      long long v27 = v24[0];
      swift_bridgeObjectRetain();
      sub_1000306C4((uint64_t)&v27);
      long long v26 = v24[1];
      sub_1000306C4((uint64_t)&v26);
      sub_1000306F0((uint64_t)&v28);
      id v10 = [v7 zoneName];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v3 = (unint64_t)v12;

      uint64_t v13 = v9[2];
      if (v13)
      {
        if (v9[4] == v11 && v9[5] == v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_14:
          swift_bridgeObjectRelease();
          sub_1000306F0((uint64_t)&v28);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          unint64_t v3 = (unint64_t)&v23;
          specialized ContiguousArray._endMutation()();
          goto LABEL_5;
        }
        if (v13 != 1) {
          break;
        }
      }
LABEL_4:
      swift_bridgeObjectRelease();
      sub_1000306F0((uint64_t)&v28);

LABEL_5:
      if (v5 == v19) {
        return v23;
      }
    }
    uint64_t v14 = v9 + 7;
    uint64_t v15 = 1;
    while (1)
    {
      uint64_t v16 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        break;
      }
      BOOL v17 = *(v14 - 1) == v11 && *v14 == v3;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_14;
      }
      v14 += 2;
      ++v15;
      if (v16 == v13) {
        goto LABEL_4;
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    ;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100032328(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10000423C(&qword_10008F390);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100032438(unint64_t a1, void *a2)
{
  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v5 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v7 = i - 3;
          if (__OFADD__(v5, 1)) {
            goto LABEL_18;
          }
        }
        else
        {
          id v6 = *(id *)(a1 + 8 * i);
          uint64_t v7 = i - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        uint64_t v21 = v6;
        id v8 = [v6 recordID];
        id v9 = [v8 recordName];

        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        id v13 = [a2 recordName];
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v15;

        if (v10 == v14 && v12 == v16)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_17:
          uint64_t v3 = (uint64_t)v21;
          swift_bridgeObjectRelease();
          return v3;
        }
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_17;
        }

        if (v7 == v3)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_10003261C(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    uint64_t v6 = 0;
    uint64_t v21 = v3;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(a1 + 8 * v6 + 32);
      }
      id v8 = v7;
      id v9 = [v7 recordID:v21];
      id v10 = [v9 recordName];

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      id v14 = [a2 recordName];
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      if (v11 == v3 && v13 == v16)
      {

        swift_bridgeObjectRelease_n();
        return v6;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18) {
        return v6;
      }
      uint64_t v19 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      ++v6;
      if (v19 == v5) {
        return 0;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_1000327E0(unint64_t *a1, void *a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  id v39 = a2;
  unint64_t v40 = sub_10003261C(v5, a2);
  char v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t v38 = v2;
  if (v2) {
    return v40;
  }
  if ((v7 & 1) == 0)
  {
    id v8 = (id)(v40 + 1);
    if (__OFADD__(v40, 1)) {
      goto LABEL_60;
    }
    if (*a1 >> 62)
    {
LABEL_61:
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8 != (id)v36) {
        goto LABEL_6;
      }
    }
    else if (v8 != *(id *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v40 + 5; ; ++i)
      {
        unint64_t v10 = i - 4;
        unint64_t v11 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v10 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
            goto LABEL_61;
          }
          if (v10 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          id v12 = *(id *)(v11 + 8 * i);
        }
        uint64_t v13 = v12;
        id v14 = [v12 recordID:v38];
        id v15 = [v14 recordName];

        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        id v8 = [v39 recordName];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        if (v16 == v19 && v18 == v21)
        {

          swift_bridgeObjectRelease_n();
          goto LABEL_38;
        }
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_38;
        }
        if (v10 != v40) {
          break;
        }
LABEL_35:
        if (__OFADD__(v40, 1)) {
          goto LABEL_53;
        }
        ++v40;
LABEL_38:
        id v8 = (id)(i - 3);
        if (__OFADD__(v10, 1)) {
          goto LABEL_52;
        }
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v33 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v8 == (id)v33) {
          return v40;
        }
      }
      unint64_t v24 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v24 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_21:
          if ((v10 & 0x8000000000000000) != 0) {
            goto LABEL_56;
          }
          if (v10 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_57;
          }
          id v26 = *(id *)(v24 + 8 * i);
          goto LABEL_24;
        }
      }
      else
      {
        if ((v40 & 0x8000000000000000) != 0) {
          goto LABEL_54;
        }
        if (v40 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_55;
        }
        id v25 = *(id *)(v24 + 8 * v40 + 32);
        if ((v24 & 0xC000000000000001) == 0) {
          goto LABEL_21;
        }
      }
      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      unint64_t v24 = *a1;
LABEL_24:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v24;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v24 & 0x8000000000000000) != 0
        || (v24 & 0x4000000000000000) != 0)
      {
        unint64_t v24 = sub_1000301E8(v24);
        *a1 = v24;
      }
      BOOL v28 = *(void **)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v40 + 0x20);
      *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v40 + 0x20) = v26;

      specialized Array._endMutation()();
      unint64_t v29 = *a1;
      int v30 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v29;
      if (!v30 || (v29 & 0x8000000000000000) != 0 || (v29 & 0x4000000000000000) != 0)
      {
        unint64_t v29 = sub_1000301E8(v29);
        *a1 = v29;
      }
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_58;
      }
      uint64_t v31 = v29 & 0xFFFFFFFFFFFFFF8;
      if (v10 >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_59;
      }
      id v32 = *(void **)(v31 + 8 * i);
      *(void *)(v31 + 8 * i) = v25;

      specialized Array._endMutation()();
      goto LABEL_35;
    }
    return v40;
  }
  unint64_t v34 = *a1;
  if (!(v34 >> 62)) {
    return *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v37;
}

uint64_t sub_100032BD4(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      unint64_t *v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_100014588(0, &qword_10008F2B0);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        id v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

void sub_100032EC4(uint64_t a1, void *a2)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v28 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    id v12 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain();
    id v13 = [v12 recordName];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    id v17 = [a2 recordID];
    id v18 = [v17 recordName];

    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    if (v14 == v19 && v16 == v21)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      return;
    }
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23)
    {
LABEL_28:
      swift_release();
      return;
    }
    swift_release();

    int64_t v5 = v28;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v25) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v24 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v25) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v24 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v25) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v24 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v25) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v24 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v25) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v24 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v4 = (v9 - 1) & v9;
    int64_t v28 = v10;
  }
  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v24 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }
LABEL_31:
  __break(1u);
}

void sub_10003317C(uint64_t a1, void *a2)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v27 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    id v12 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain();
    id v13 = [v12 recordName];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    id v17 = [a2 recordName];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    if (v14 == v18 && v16 == v20)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      return;
    }
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v22)
    {
LABEL_28:
      swift_release();
      return;
    }
    swift_release();

    int64_t v5 = v27;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v24) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v23 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v24) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v23 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v24) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v23 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v24) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v23 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v24) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v23 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v4 = (v9 - 1) & v9;
    int64_t v27 = v10;
  }
  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v23 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }
LABEL_31:
  __break(1u);
}

void sub_100033414(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v16 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    id v12 = *(void **)(*(void *)(a1 + 48) + 8 * i);
    sub_100014588(0, &qword_10008F2E8);
    id v13 = v12;
    swift_retain_n();
    id v14 = v13;
    char v15 = static NSObject.== infix(_:_:)();
    swift_release();

    if (v15)
    {
LABEL_23:
      swift_release();
      return;
    }
    swift_release();

    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v16) {
      goto LABEL_23;
    }
    unint64_t v10 = *(void *)(v2 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v10 = *(void *)(v2 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v16) {
          goto LABEL_23;
        }
        unint64_t v10 = *(void *)(v2 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v16) {
            goto LABEL_23;
          }
          unint64_t v10 = *(void *)(v2 + 8 * v6);
          if (!v10)
          {
            int64_t v11 = v9 + 4;
            if (v11 >= v16) {
              goto LABEL_23;
            }
            unint64_t v10 = *(void *)(v2 + 8 * v11);
            int64_t v6 = v11;
            if (!v10) {
              break;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v5 = (v10 - 1) & v10;
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v16) {
      goto LABEL_23;
    }
    unint64_t v10 = *(void *)(v2 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

void sub_10003361C(uint64_t a1, void *a2)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v29 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    id v12 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain();
    id v13 = [v12 recordID];
    id v14 = [v13 recordName];

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    id v18 = [a2 recordID];
    id v19 = [v18 recordName];

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    if (v15 == v20 && v17 == v22)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      return;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24)
    {
LABEL_28:
      swift_release();
      return;
    }
    swift_release();

    int64_t v5 = v29;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v26) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v25 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v26) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v25 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v26) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v25 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v26) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v25 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v26) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v25 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v4 = (v9 - 1) & v9;
    int64_t v29 = v10;
  }
  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v25 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_1000338F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033934(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_100033978(uint64_t a1, char a2)
{
  uint64_t v4 = a2 & 1;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40);
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(a1, v4);
  return v5(a1, v4);
}

uint64_t sub_1000339D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100033A0C()
{
  return sub_100036918(49);
}

uint64_t sub_100033A14()
{
  return sub_1000269D8(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(NSObject **)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

void type metadata accessor for NotificationType(uint64_t a1)
{
}

void sub_100033A38(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void **)(v1 + 24);
  id v5 = sub_1000150E0();
  id v6 = [v5 privateCloudDatabase];

  sub_10000423C(&qword_10008F2F0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100074DA0;
  *(void *)(v7 + 32) = v4;
  uint64_t v11 = v7;
  specialized Array._endMutation()();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = v3;
  unint64_t v9 = *(void (**)(id, uint64_t, void (*)(uint64_t, char), uint64_t))(*(void *)v3 + 832);
  id v10 = v4;
  swift_retain();
  swift_retain();
  v9(v6, v11, sub_1000362C4, v8);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_100033B84()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  Transaction.capture()();
  uint64_t v3 = *(void (**)(uint64_t, void, void (*)(uint64_t, char), uint64_t))(*(void *)v1 + 816);
  swift_retain();
  v3(v2, 0, sub_100036248, v1);
  return swift_release();
}

uint64_t sub_100033C24@<X0>(uint64_t a1@<X8>)
{
  return sub_10002D750(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100033C50()
{
  uint64_t v1 = (int *)(sub_10000423C(&qword_10008EE48) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_1000057DC(v6);
  uint64_t v7 = v6 + v1[9];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100033D60()
{
  uint64_t v1 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 280))();
  v7[2] = v3;
  uint64_t v5 = sub_10001E5F8((uint64_t (*)(char *))sub_100035FE4, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 288))(v5);
}

unint64_t sub_100033E6C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100033E9C();
  unint64_t result = sub_100033EF0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100033E9C()
{
  unint64_t result = qword_10008EE50;
  if (!qword_10008EE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EE50);
  }
  return result;
}

unint64_t sub_100033EF0()
{
  unint64_t result = qword_10008EE58;
  if (!qword_10008EE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EE58);
  }
  return result;
}

unint64_t sub_100033F48()
{
  unint64_t result = qword_10008EE60;
  if (!qword_10008EE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EE60);
  }
  return result;
}

uint64_t destroy for CloudStorageCoordinatorConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CloudStorageCoordinatorConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CloudStorageCoordinatorConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CloudStorageCoordinatorConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CloudStorageCoordinatorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudStorageCoordinatorConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudStorageCoordinatorConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinatorConfiguration()
{
  return &type metadata for CloudStorageCoordinatorConfiguration;
}

uint64_t sub_1000341CC()
{
  return type metadata accessor for CloudStorageCoordinator();
}

void sub_1000341D4()
{
  sub_100034360(319, (unint64_t *)&qword_10008EEC0, &qword_10008EAB0);
  if (v0 <= 0x3F)
  {
    sub_100034360(319, (unint64_t *)&unk_10008EEC8, (uint64_t *)&unk_10008E950);
    if (v1 <= 0x3F)
    {
      type metadata accessor for URL();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_100034360(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_100007C10(a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for CloudStorageCoordinator.CloudStorageCoordinatorError(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    swift_errorRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for CloudStorageCoordinator.CloudStorageCoordinatorError(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t *assignWithCopy for CloudStorageCoordinator.CloudStorageCoordinatorError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v3 >= 0xFFFFFFFF) {
      swift_errorRetain();
    }
    *a1 = v3;
  }
  else if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain();
    *a1 = v3;
    swift_errorRelease();
  }
  return a1;
}

void *initializeWithTake for CloudStorageCoordinator.CloudStorageCoordinatorError(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for CloudStorageCoordinator.CloudStorageCoordinatorError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_errorRelease();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_errorRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1000345B8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000345D0(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinator.CloudStorageCoordinatorError()
{
  return &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError;
}

uint64_t getEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003475CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinator.CloudStorageCoordinatorState()
{
  return &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorState;
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
}

unsigned char *storeEnumTagSinglePayload for CloudStorageCoordinatorConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100034874);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinatorConfiguration.CodingKeys()
{
  return &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys;
}

unint64_t sub_1000348B0()
{
  unint64_t result = qword_100091EA0[0];
  if (!qword_100091EA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100091EA0);
  }
  return result;
}

unint64_t sub_100034908()
{
  unint64_t result = qword_1000920B0;
  if (!qword_1000920B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000920B0);
  }
  return result;
}

unint64_t sub_100034960()
{
  unint64_t result = qword_1000920B8[0];
  if (!qword_1000920B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000920B8);
  }
  return result;
}

uint64_t sub_1000349B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  unsigned int v4 = *(double **)(v1 + 24);
  char v5 = *(unsigned char *)(v1 + 32);
  char v6 = *(unsigned char *)(v1 + 33);
  type metadata accessor for LocalDispatchTimer();
  swift_beginAccess();
  double v7 = *v4;
  int v8 = *(void **)(v3 + 56);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = v9;
  *(unsigned char *)(v10 + 32) = v5;
  *(unsigned char *)(v10 + 33) = v6;
  id v11 = v8;
  swift_retain();
  uint64_t v12 = LocalDispatchTimer.__allocating_init(deadline:repeating:leeway:queue:block:)(v8, (uint64_t)sub_100034B68, v10, v7, 0.0, 1.0);
  uint64_t v13 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer;
  *(void *)(v3 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer) = v12;
  uint64_t result = swift_release();
  uint64_t v15 = *(void *)(v3 + v13);
  if (v15)
  {
    uint64_t v16 = *(void (**)(uint64_t))(*(void *)v15 + 152);
    uint64_t v17 = swift_retain();
    v16(v17);
    return swift_release();
  }
  return result;
}

uint64_t sub_100034B14()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100034B4C()
{
  return sub_100036270((void (*)(void))&_swift_release, 34);
}

void sub_100034B68()
{
  sub_100028118(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33));
}

uint64_t sub_100034B78()
{
  return sub_100036270((void (*)(void))&_swift_bridgeObjectRelease, 32);
}

void sub_100034B94(void *a1, NSObject *a2, char a3)
{
  sub_100028CA4(a1, a2, a3 & 1, *(void *)(v3 + 16));
}

uint64_t sub_100034BA0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100034BD8(void *a1, uint64_t a2, char a3)
{
  sub_100029590(a1, a2, a3 & 1, *(void *)(v3 + 16));
}

uint64_t sub_100034BE4()
{
  return sub_100036540((void (*)(void))&_swift_bridgeObjectRelease, 50);
}

uint64_t sub_100034C00(uint64_t a1, char a2)
{
  return sub_100029A34(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned char *)(v2 + 48), *(unsigned __int8 *)(v2 + 49));
}

uint64_t sub_100034C18(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  v5[4] = j___s14bluetoothuserd11TransactionC7captureyyF;
  v5[5] = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100006FA4;
  v5[3] = &unk_100086688;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  sub_10003531C((uint64_t)j___s14bluetoothuserd11TransactionC7captureyyF);
  swift_release();
  [v2 setCompletionBlock:v3];
  _Block_release(v3);
  return swift_release();
}

void sub_100034D08(uint64_t a1, void *a2)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  int64_t v28 = v5;
  for (unint64_t i = v6 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    id v12 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain();
    id v13 = [v12 recordID];
    id v14 = [v13 recordName];

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    id v18 = [a2 recordName];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    if (v15 == v19 && v17 == v21)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      return;
    }
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23)
    {
LABEL_28:
      swift_release();
      return;
    }
    swift_release();

    int64_t v5 = v28;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v25) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v24 + 8 * v8);
    int64_t v10 = v5 + 1;
    if (!v9)
    {
      int64_t v10 = v5 + 2;
      if (v5 + 2 >= v25) {
        goto LABEL_28;
      }
      unint64_t v9 = *(void *)(v24 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v5 + 3;
        if (v5 + 3 >= v25) {
          goto LABEL_28;
        }
        unint64_t v9 = *(void *)(v24 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v5 + 4;
          if (v5 + 4 >= v25) {
            goto LABEL_28;
          }
          unint64_t v9 = *(void *)(v24 + 8 * v10);
          if (!v9)
          {
            uint64_t v11 = v5 + 5;
            if (v5 + 5 >= v25) {
              goto LABEL_28;
            }
            unint64_t v9 = *(void *)(v24 + 8 * v11);
            int64_t v10 = v5 + 5;
            if (!v9) {
              break;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v4 = (v9 - 1) & v9;
    int64_t v28 = v10;
  }
  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_28;
    }
    unint64_t v9 = *(void *)(v24 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_19;
    }
  }
LABEL_31:
  __break(1u);
}

void sub_100034FC0(uint64_t a1, void *a2)
{
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v18 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    id v12 = *(void **)(*(void *)(a1 + 48) + 8 * i);
    sub_100014588(0, &qword_10008F2E8);
    id v13 = v12;
    swift_retain();
    id v14 = [v13 recordID];
    id v15 = [a2 recordID];
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_23:
      swift_release();
      return;
    }
    swift_release();

    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v18) {
      goto LABEL_23;
    }
    unint64_t v10 = *(void *)(v17 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v18) {
        goto LABEL_23;
      }
      unint64_t v10 = *(void *)(v17 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v18) {
          goto LABEL_23;
        }
        unint64_t v10 = *(void *)(v17 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v18) {
            goto LABEL_23;
          }
          unint64_t v10 = *(void *)(v17 + 8 * v6);
          if (!v10)
          {
            int64_t v11 = v9 + 4;
            if (v11 >= v18) {
              goto LABEL_23;
            }
            unint64_t v10 = *(void *)(v17 + 8 * v11);
            int64_t v6 = v11;
            if (!v10) {
              break;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v5 = (v10 - 1) & v10;
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v18) {
      goto LABEL_23;
    }
    unint64_t v10 = *(void *)(v17 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_10003520C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_10000423C(&qword_10008F288);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003531C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10003532C()
{
  swift_release();
  sub_100035380(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 58, 7);
}

uint64_t sub_100035380(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10003538C()
{
  return sub_100029D6C(*(void *)(v0 + 16), *(void (**)(void, void))(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(unsigned __int8 *)(v0 + 57));
}

uint64_t sub_1000353A4(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_1000353B0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014588(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100035400(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

uint64_t sub_10003540C()
{
  return swift_release();
}

void type metadata accessor for CKError(uint64_t a1)
{
}

uint64_t sub_100035428()
{
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v0 + 256))(v12);
  uint64_t v1 = v13;
  uint64_t v16 = v13;
  long long v15 = v12[0];
  swift_bridgeObjectRetain();
  sub_1000306C4((uint64_t)&v15);
  long long v14 = v12[1];
  sub_1000306C4((uint64_t)&v14);
  sub_1000306F0((uint64_t)&v16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    sub_100014588(0, &qword_10008F310);
    swift_bridgeObjectRetain();
    uint64_t v3 = (void **)(v1 + 40);
    do
    {
      uint64_t v4 = (uint64_t)*(v3 - 1);
      unint64_t v5 = *v3;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int64_t v8 = v7;
      swift_bridgeObjectRetain();
      v9._uint64_t countAndFlagsBits = v4;
      v9._object = v5;
      v10._uint64_t countAndFlagsBits = v6;
      v10._object = v8;
      CKRecordZoneID.init(zoneName:ownerName:)(v9, v10);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v3 += 2;
      --v2;
    }
    while (v2);
    sub_1000306F0((uint64_t)&v16);
  }
  sub_1000306F0((uint64_t)&v16);
  sub_10001945C((BOOL)_swiftEmptyArrayStorage);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000355E0()
{
  return sub_10003594C((void (*)(void))&_swift_release);
}

uint64_t sub_1000355F8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v1 + 280))();
  uint64_t v3 = *(void *)(v14 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
    unint64_t v5 = (void *)(v14 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    uint64_t v16 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable;
    uint64_t v15 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = v5[3];
      uint64_t v6 = v5[4];
      sub_10000AF14(v5, v7);
      sub_10000423C(&qword_10008F2F0);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_100074DA0;
      *(void *)(v8 + 32) = v2;
      uint64_t v17 = v8;
      specialized Array._endMutation()();
      Swift::String v9 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(v6 + 8);
      id v10 = v2;
      v9(v1, _swiftEmptyArrayStorage, v17, v7, v6);
      swift_bridgeObjectRelease();
      uint64_t v11 = v5[3];
      uint64_t v12 = v5[4];
      sub_10000AF14(v5, v11);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 24))(v1, *(unsigned __int8 *)(v1 + v16), v11, v12);
      unint64_t v5 = (void *)((char *)v5 + v15);
      --v3;
    }
    while (v3);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000357D8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000357E8(uint64_t a1, uint64_t a2)
{
  return sub_1000230D4(a2, *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_100035818()
{
  return sub_100022EF8(*(double *)(v0 + 16));
}

uint64_t sub_100035824(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = *(void (**)(uint64_t, void, uint64_t (*)(uint64_t, char), uint64_t))(*(void *)v2 + 816);
  swift_retain();
  v6(2, 0, sub_100035928, v5);

  return swift_release();
}

uint64_t sub_1000358DC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100035914()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100035928(uint64_t a1, char a2)
{
  return sub_1000228CC(a1, a2 & 1, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_100035934()
{
  return sub_10003594C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10003594C(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));

  return _swift_deallocObject(v1, 32, 7);
}

void sub_100035994(uint64_t a1, char a2)
{
  sub_10001A214(a1, a2 & 1, *(void *)(v2 + 16), *(NSObject **)(v2 + 24));
}

void sub_1000359A0(uint64_t a1)
{
  sub_100016D28(a1, v1);
}

uint64_t sub_1000359CC()
{
  return sub_100036270((void (*)(void))&_swift_release, 32);
}

uint64_t sub_1000359E8(uint64_t a1, char a2)
{
  return sub_100017534(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000359F4(objc_class *a1)
{
  return sub_100017D7C(a1, v1);
}

void sub_1000359FC(uint64_t a1)
{
  sub_100018C44(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100035A2C()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100035A74(uint64_t a1, uint64_t a2)
{
  return sub_100018D54(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_100035A80()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100035AB8()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_100035AE8()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 280))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
    uint64_t v4 = (void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = v4[3];
      uint64_t v7 = v4[4];
      sub_10000AF14(v4, v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v0, v6, v7);
      uint64_t v4 = (void *)((char *)v4 + v5);
      --v2;
    }
    while (v2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100035C08()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100035C18(char *a1, char a2)
{
  sub_10001A654(a1, a2 & 1, v2);
}

void sub_100035C24(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  id v5 = sub_1000150E0();
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = a1;
  v6[3] = v3;
  v6[4] = v4;
  v8[4] = sub_100035D74;
  void v8[5] = v6;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100018BB8;
  v8[3] = &unk_1000869F8;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_retain();
  swift_release();
  [v5 accountInfoWithCompletionHandler:v7];
  _Block_release(v7);
}

uint64_t sub_100035D34()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100035D74(void *a1, void *a2)
{
  id v5 = *(void (**)(void *, uint64_t))(v2 + 24);
  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain();
    v5(a2, 1);
    swift_errorRelease();
  }
  else if (a1)
  {
    id v6 = a1;
    v5(a1, 0);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void sub_100035E8C(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_100035E98()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 280))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
    uint64_t v4 = (void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    uint64_t v5 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable;
    uint64_t v6 = *(void *)(v3 + 72);
    do
    {
      uint64_t v7 = v4[3];
      uint64_t v8 = v4[4];
      sub_10000AF14(v4, v7);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 24))(v0, *(unsigned __int8 *)(v0 + v5), v7, v8);
      uint64_t v4 = (void *)((char *)v4 + v6);
      --v2;
    }
    while (v2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100035FC8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100035FD8(uint64_t a1, char a2)
{
  return sub_10001B978(a1, a2 & 1, v2);
}

BOOL sub_100035FE4()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_100036078(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10002D978(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000360EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100036248(uint64_t a1, char a2)
{
  sub_10002CAE4(a1, a2 & 1, v2);
}

uint64_t sub_100036254()
{
  return sub_100036270((void (*)(void))&_swift_release, 32);
}

uint64_t sub_100036270(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 16));
  swift_release();

  return _swift_deallocObject(v2, a2, 7);
}

void sub_1000362C4(uint64_t a1, char a2)
{
  sub_10002D0CC(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000362D0(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1000362FC(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_100036338()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100036380(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 40);
  (*(void (**)(void))(v1 + 24))();
  return v3(a1);
}

uint64_t sub_1000363CC()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_10003641C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 56);
  Transaction.capture()();
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(void *)v1 + 872))(v4, v5, v2, v3);
  }
  sub_100031024();
  uint64_t v7 = swift_allocError();
  *uint64_t v8 = 0;
  v2(v7, 1);

  return swift_errorRelease();
}

uint64_t sub_100036510(void *a1, void *a2, char a3)
{
  return sub_10001FE18(a1, a2, a3 & 1, v3);
}

uint64_t sub_10003651C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000206F0(a1, a2, a3, v3);
}

uint64_t sub_100036524()
{
  return sub_100036540((void (*)(void))&_swift_release, 48);
}

uint64_t sub_100036540(void (*a1)(void), uint64_t a2)
{
  swift_release();
  a1(*(void *)(v2 + 32));
  a1(*(void *)(v2 + 40));

  return _swift_deallocObject(v2, a2, 7);
}

void sub_1000365B0(void *a1, NSObject *a2, void *a3, void *a4, __int16 a5)
{
  sub_1000209DC(a1, a2, a3, a4, a5 & 0x1FF, *(void **)(v5 + 16), *(void **)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40));
}

uint64_t sub_1000365E0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100036630(uint64_t a1, char a2)
{
  return sub_100021D64(a1, a2 & 1, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void (**)(uint64_t, uint64_t))(v2 + 40), *(void *)(v2 + 48));
}

void sub_100036644(void *a1)
{
  sub_1000219B8(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_10003664C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100036684()
{
  uint64_t v1 = v0[2];
  uint64_t v14 = (uint64_t *)v0[4];
  uint64_t v15 = (uint64_t *)v0[3];
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 280))();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
    uint64_t v5 = (void *)(v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v13 = *(void *)(v4 + 72);
    uint64_t v6 = v1;
    do
    {
      uint64_t v8 = v5[3];
      uint64_t v7 = v5[4];
      sub_10000AF14(v5, v8);
      uint64_t v9 = *v15;
      uint64_t v10 = *v14;
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11(v6, v9, v10, v8, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = (void *)((char *)v5 + v13);
      --v3;
    }
    while (v3);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100036858()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100036868(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return swift_errorRetain();
  }
  else
  {
    id v9 = a1;
    return sub_10000AF58(a2, a3);
  }
}

uint64_t sub_1000368BC(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return swift_errorRelease();
  }
  else
  {

    return sub_10000AB08(a2, a3);
  }
}

uint64_t sub_100036910()
{
  return sub_100036918(48);
}

uint64_t sub_100036918(uint64_t a1)
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

void sub_10003696C()
{
  sub_10001C068(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100036978(void *a1)
{
  return sub_10001C964(a1, v1);
}

uint64_t sub_100036980(void *a1)
{
  swift_beginAccess();
  id v3 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t sub_100036A1C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100036A54(void *a1)
{
  return sub_10001CBF4(a1, *(void **)(v1 + 16));
}

uint64_t sub_100036A5C()
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_100036ABC(NSObject *a1, __int16 a2)
{
  sub_10001CF4C(a1, a2 & 0x1FF, *(void **)(v2 + 16), *(void (**)(NSObject *, uint64_t))(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(char **)(v2 + 48), *(unint64_t **)(v2 + 56), *(void *)(v2 + 64));
}

id sub_100036AF4(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void sub_100036B00(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_100036B0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100036B44()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v12 = *(uint64_t **)(v0 + 24);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 280))();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
    uint64_t v5 = (void *)(v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    swift_beginAccess();
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v8 = v5[3];
      uint64_t v7 = v5[4];
      sub_10000AF14(v5, v8);
      uint64_t v9 = *v12;
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      v10(v1, v9, v8, v7);
      swift_bridgeObjectRelease();
      uint64_t v5 = (void *)((char *)v5 + v6);
      --v3;
    }
    while (v3);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100036CD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100036CE8()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100036DDC(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(NSObject **)(v2 + 24);
  uint64_t v8 = v2 + v6;
  uint64_t v9 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))v9;
  unint64_t v11 = *(NSObject **)(v9 + 8);

  return sub_10001E858(a1, v4, v7, v8, v10, v11);
}

uint64_t sub_100036E90(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100036EA0()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 280))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(sub_10000423C(&qword_10008EE48) - 8);
    char v4 = (void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = v4[3];
      uint64_t v7 = v4[4];
      sub_10000AF14(v4, v6);
      (*(void (**)(uint64_t, void *, void *, uint64_t, uint64_t))(v7 + 8))(v0, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v6, v7);
      char v4 = (void *)((char *)v4 + v5);
      --v2;
    }
    while (v2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100036FD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100036FE8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000423C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003704C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100007C10(&qword_10008FDD0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1000370B0(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void type metadata accessor for Result(uint64_t a1)
{
}

uint64_t sub_100037128()
{
  return sub_100032010(&qword_10008F3E8, type metadata accessor for CKError);
}

uint64_t sub_100037170()
{
  return sub_100032010(&qword_10008F3F0, type metadata accessor for CKError);
}

uint64_t sub_1000371B8()
{
  return sub_100032010(&qword_10008F3F8, type metadata accessor for CKError);
}

uint64_t sub_100037200()
{
  return sub_100032010(&qword_10008F400, type metadata accessor for CKError);
}

uint64_t sub_100037248()
{
  return sub_100032010(&qword_10008F408, type metadata accessor for CKError);
}

uint64_t sub_100037290()
{
  return sub_100032010(&qword_10008F410, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_1000372EC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100037334()
{
  return sub_100032010(&qword_10008F418, type metadata accessor for Code);
}

unint64_t sub_100037380()
{
  unint64_t result = qword_10008F420;
  if (!qword_10008F420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F420);
  }
  return result;
}

uint64_t sub_1000373D4()
{
  return sub_100032010(&qword_10008F428, type metadata accessor for Code);
}

uint64_t sub_10003741C()
{
  return sub_100032010((unint64_t *)&unk_10008F300, type metadata accessor for CKError);
}

uint64_t sub_10003755C@<X0>(uint64_t a1@<X8>)
{
  return sub_100033C24(a1);
}

void sub_100037574(uint64_t a1)
{
}

uint64_t sub_100037598()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  return v1;
}

uint64_t sub_100037648@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  if (v2)
  {
    swift_errorRelease();
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v6, 1, a1);
}

uint64_t sub_100037758(uint64_t a1, uint64_t a2)
{
  sub_1000377B4(v2, a1, a2, &v7);
  return v7;
}

uint64_t sub_1000377B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v12, v11);
  unint64_t v15 = v14;
  Class isa = sub_100037DE0(v13, v14);
  sub_10000AB1C(v13, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  if (!isa) {
    Class isa = sub_100037928((uint64_t)v10, a2, a3).super.isa;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
  uint64_t v19 = isa;
  uint64_t result = (*(uint64_t (**)(void **, uint64_t, uint64_t))(a3 + 64))(&v19, a2, a3);
  *a4 = v19;
  return result;
}

CKRecord sub_100037928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014588(0, &qword_10008F298);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 32))(a2);
  uint64_t v11 = v10;
  sub_100014588(0, &qword_10008F310);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  uint64_t v34 = a3;
  uint64_t v13 = v12(a2, a3);
  unint64_t v15 = v14;
  v16._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16._object = v17;
  v18._uint64_t countAndFlagsBits = v13;
  v18._object = v15;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
  v20._uint64_t countAndFlagsBits = v9;
  v20._object = v11;
  v21.super.Class isa = CKRecordID.init(recordName:zoneID:)(v20, (CKRecordZoneID)isa).super.isa;
  uint64_t v22 = sub_1000382C8();
  uint64_t v35 = v6;
  uint64_t v36 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v22, v5);
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    int64_t v25 = v21.super.isa;
    int64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)int64_t v26 = 136315138;
    uint64_t v38 = v27;
    uint64_t v33 = v26 + 4;
    uint64_t v28 = v34;
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 16))(a2, v34);
    uint64_t v37 = sub_100004FA4(v29, v30, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to unarchive record -- creating new %s record", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    v21.super.Class isa = v25;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
    uint64_t v28 = v34;
  }
  sub_100014588(0, &qword_10008F2B0);
  v31._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(a2, v28);
  return CKRecord.init(recordType:recordID:)(v31, v21);
}

uint64_t sub_100037C80()
{
  id v1 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [v0 encodeSystemFieldsWithCoder:v1];
  [v1 finishEncoding];
  id v2 = [v1 encodedData];
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id sub_100037D20()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 initForReadingFromData:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

id sub_100037DE0(uint64_t a1, unint64_t a2)
{
  id v4 = 0;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 != a1 >> 32) {
        goto LABEL_7;
      }
      return 0;
    case 2uLL:
      if (*(void *)(a1 + 16) != *(void *)(a1 + 24)) {
        goto LABEL_7;
      }
      return 0;
    case 3uLL:
      return v4;
    default:
      if ((a2 & 0xFF000000000000) == 0) {
        return 0;
      }
LABEL_7:
      id v10 = objc_allocWithZone((Class)NSKeyedUnarchiver);
      sub_10000AF6C(a1, a2);
      uint64_t v11 = sub_100037D20();
      sub_10000AB1C(a1, a2);
      id v12 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v11];
      if (v12)
      {
        id v4 = v12;
      }
      else
      {
        uint64_t v14 = sub_1000382C8();
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v14, v5);
        unint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to extract CKRecord from cloudKitMetadata", v17, 2u);
          swift_slowDealloc();
          Swift::String v18 = v11;
        }
        else
        {
          Swift::String v18 = v15;
          unint64_t v15 = v11;
        }

        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        return 0;
      }
      return v4;
  }
}

void *sub_1000381D8()
{
  return &unk_100086F38;
}

uint64_t sub_1000381E4(uint64_t a1)
{
  return sub_100038508(a1, qword_1000949D8);
}

uint64_t sub_100038200()
{
  return sub_1000385A4(&qword_1000925C0, (uint64_t)qword_1000949D8);
}

uint64_t sub_100038224(uint64_t a1)
{
  return sub_100038508(a1, qword_1000949F0);
}

uint64_t sub_10003823C()
{
  return sub_1000385A4(&qword_1000925C8, (uint64_t)qword_1000949F0);
}

uint64_t sub_100038260(uint64_t a1)
{
  return sub_100038508(a1, qword_100094A08);
}

uint64_t sub_100038288()
{
  return sub_1000385A4(&qword_1000925D0, (uint64_t)qword_100094A08);
}

uint64_t sub_1000382AC(uint64_t a1)
{
  return sub_100038508(a1, qword_100094A20);
}

uint64_t sub_1000382C8()
{
  return sub_1000385A4(&qword_1000925D8, (uint64_t)qword_100094A20);
}

uint64_t sub_1000382EC(uint64_t a1)
{
  return sub_100038508(a1, qword_100094A38);
}

uint64_t sub_100038314()
{
  return sub_1000385A4(&qword_1000925E0, (uint64_t)qword_100094A38);
}

uint64_t sub_100038338(uint64_t a1)
{
  return sub_100038508(a1, qword_100094A50);
}

uint64_t sub_100038360()
{
  return sub_1000385A4(&qword_1000925E8, (uint64_t)qword_100094A50);
}

uint64_t sub_100038384(uint64_t a1)
{
  return sub_100038508(a1, qword_100094A68);
}

uint64_t sub_1000383AC()
{
  return sub_1000385A4(&qword_1000925F0, (uint64_t)qword_100094A68);
}

uint64_t sub_1000383D0(uint64_t a1)
{
  return sub_100038508(a1, qword_100094A80);
}

uint64_t sub_1000383F8()
{
  return sub_1000385A4(&qword_1000925F8, (uint64_t)qword_100094A80);
}

uint64_t sub_10003841C(uint64_t a1)
{
  return sub_100038508(a1, qword_100094A98);
}

uint64_t sub_100038434()
{
  return sub_1000385A4(&qword_100092600, (uint64_t)qword_100094A98);
}

uint64_t sub_100038458(uint64_t a1)
{
  return sub_100038508(a1, qword_100094AB0);
}

uint64_t sub_100038480()
{
  return sub_1000385A4(&qword_100092608, (uint64_t)qword_100094AB0);
}

uint64_t sub_1000384A4(uint64_t a1)
{
  return sub_100038508(a1, qword_100094AC8);
}

uint64_t sub_1000384CC()
{
  return sub_1000385A4(&qword_100092610, (uint64_t)qword_100094AC8);
}

uint64_t sub_1000384F0(uint64_t a1)
{
  return sub_100038508(a1, qword_100094AE0);
}

uint64_t sub_100038508(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000370B0(v3, a2);
  sub_100014818(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100038580()
{
  return sub_1000385A4(&qword_100092618, (uint64_t)qword_100094AE0);
}

uint64_t sub_1000385A4(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();

  return sub_100014818(v3, a2);
}

ValueMetadata *type metadata accessor for LogConstants()
{
  return &type metadata for LogConstants;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

BOOL sub_100038618(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void *sub_100038630@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_100038650(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10003865C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000386BC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10003870C()
{
  if (*v0) {
    return 0x6F636341656D6153;
  }
  else {
    return 0x6E776F6E6B6E55;
  }
}

void *sub_100038750()
{
  return &unk_10008F450;
}

uint64_t type metadata accessor for CloudPairedDeviceRecord()
{
  uint64_t result = qword_100092EB0;
  if (!qword_100092EB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000387A8()
{
  uint64_t v0 = type metadata accessor for URL();
  sub_1000370B0(v0, qword_100094AF8);
  sub_100014818(v0, (uint64_t)qword_100094AF8);
  return URL.init(fileURLWithPath:isDirectory:)();
}

uint64_t sub_100038810()
{
  if (qword_100092620 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for URL();

  return sub_100014818(v0, (uint64_t)qword_100094AF8);
}

unint64_t sub_100038874(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v137 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v132 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000423C((uint64_t *)&unk_10008F460);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  os_log_type_t v135 = (char *)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v128 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v133 = (char *)&v128 - v13;
  __chkstk_darwin(v12);
  uint64_t v134 = (uint64_t)&v128 - v14;
  unint64_t v15 = (int *)type metadata accessor for CloudPairedDeviceRecord();
  uint64_t v16 = sub_10003D7C8(&qword_10008FD90, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
  uint64_t v17 = (void *)sub_100037758((uint64_t)v15, v16);
  unint64_t v149 = 0xD000000000000019;
  unint64_t v150 = 0x800000010007B3F0;
  Swift::String v18 = (uint64_t *)(v1 + v15[6]);
  uint64_t v19 = (void *)v18[1];
  v143._uint64_t countAndFlagsBits = *v18;
  v143._object = v19;
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  String.append(_:)(v143);
  swift_bridgeObjectRelease();
  v148._uint64_t countAndFlagsBits = *(void *)(v1 + v15[10]);
  v143._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v143._object = v21;
  v22._uint64_t countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  String.append(_:)(v143);
  swift_bridgeObjectRelease();
  id v138 = v15;
  if (*(unsigned char *)(v1 + v15[11]) == 1)
  {
    v143._uint64_t countAndFlagsBits = 0;
    v143._object = (void *)0xE000000000000000;
    v23._uint64_t countAndFlagsBits = 0x6F636341656D6153;
    v23._object = (void *)0xEB00000000746E75;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 8236;
    v24._object = (void *)0xE200000000000000;
    String.append(_:)(v24);
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v1 + v138[12]))
  {
    v148._uint64_t countAndFlagsBits = *(void *)(v1 + v138[12]);
    v143._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v143._object = v25;
    v26._uint64_t countAndFlagsBits = 8236;
    v26._object = (void *)0xE200000000000000;
    String.append(_:)(v26);
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
  }
  v27._uint64_t countAndFlagsBits = 0x203A454C66;
  v27._object = (void *)0xE500000000000000;
  String.append(_:)(v27);
  uint64_t v28 = v138;
  v148._uint64_t countAndFlagsBits = *(void *)(v1 + v138[7]);
  v143._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v143._object = v29;
  v30._uint64_t countAndFlagsBits = 8236;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  String.append(_:)(v143);
  swift_bridgeObjectRelease();
  id v136 = v11;
  if (a1 >= 20)
  {
    v143._uint64_t countAndFlagsBits = Data.hexString.getter(*(void *)(v1 + v28[8]), *(void *)(v1 + v28[8] + 8));
    v143._object = v68;
    v69._uint64_t countAndFlagsBits = 8236;
    v69._object = (void *)0xE200000000000000;
    String.append(_:)(v69);
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
    v143._uint64_t countAndFlagsBits = 0;
    v143._object = (void *)0xE000000000000000;
    uint64_t v70 = *(void *)(v1 + v28[9]);
    uint64_t v71 = *(void *)(v70 + 16);
    if (v71)
    {
      uint64_t v131 = v2;
      swift_bridgeObjectRetain();
      uint64_t v72 = (unint64_t *)(v70 + 40);
      uint64_t v73 = (char *)_swiftEmptyArrayStorage;
      do
      {
        uint64_t v74 = *(v72 - 1);
        unint64_t v75 = *v72;
        sub_10000AF6C(v74, *v72);
        uint64_t v76 = Data.hexString.getter(v74, v75);
        uint64_t v78 = v77;
        sub_10000AB1C(v74, v75);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v73 = sub_100012724(0, *((void *)v73 + 2) + 1, 1, v73);
        }
        unint64_t v80 = *((void *)v73 + 2);
        unint64_t v79 = *((void *)v73 + 3);
        if (v80 >= v79 >> 1) {
          uint64_t v73 = sub_100012724((char *)(v79 > 1), v80 + 1, 1, v73);
        }
        v72 += 2;
        *((void *)v73 + 2) = v80 + 1;
        unint64_t v81 = &v73[16 * v80];
        *((void *)v81 + 4) = v76;
        *((void *)v81 + 5) = v78;
        --v71;
      }
      while (v71);
      swift_bridgeObjectRelease();
    }
    v84._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v85._uint64_t countAndFlagsBits = 8236;
    v85._object = (void *)0xE200000000000000;
    String.append(_:)(v85);
    String.append(_:)(v143);
  }
  else
  {
    Swift::String v31 = (uint64_t *)(v1 + v28[8]);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    sub_10000AF6C(*v31, v33);
    uint64_t v34 = Data.description.getter();
    uint64_t v36 = v35;
    sub_10000AB1C(v32, v33);
    v143._uint64_t countAndFlagsBits = v34;
    v143._object = v36;
    v37._uint64_t countAndFlagsBits = 8236;
    v37._object = (void *)0xE200000000000000;
    String.append(_:)(v37);
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
    v148._uint64_t countAndFlagsBits = 0;
    v148._object = (void *)0xE000000000000000;
    uint64_t v38 = *(void *)(v2 + v28[9]);
    uint64_t v39 = *(void *)(v38 + 16);
    if (v39)
    {
      uint64_t v131 = v2;
      uint64_t v129 = v4;
      uint64_t v130 = v17;
      swift_bridgeObjectRetain_n();
      uint64_t v128 = v38;
      unint64_t v40 = (unint64_t *)(v38 + 40);
      uint64_t v41 = (char *)_swiftEmptyArrayStorage;
      do
      {
        unint64_t v141 = v40;
        uint64_t v142 = v39;
        uint64_t v42 = *(v40 - 1);
        unint64_t v43 = *v40;
        sub_10000AF6C(v42, *v40);
        unint64_t v139 = v43;
        uint64_t v140 = v42;
        Data.hexString.getter(v42, v43);
        sub_10003CB70(8);
        swift_bridgeObjectRelease();
        v143._uint64_t countAndFlagsBits = 3026478;
        v143._object = (void *)0xE300000000000000;
        uint64_t v146 = static String._fromSubstring(_:)();
        uint64_t v147 = v44;
        String.append<A>(contentsOf:)();
        Substring.init(_:)();
        swift_bridgeObjectRelease();
        uint64_t v45 = Data.hexString.getter(v42, v43);
        unint64_t v47 = sub_10003CC0C(5uLL, v45, v46);
        uint64_t v49 = v48;
        uint64_t v51 = v50;
        uint64_t v53 = v52;
        swift_bridgeObjectRelease();
        v143._uint64_t countAndFlagsBits = v47;
        v143._object = v49;
        uint64_t v144 = v51;
        uint64_t v145 = v53;
        swift_bridgeObjectRetain();
        uint64_t v54 = static String._fromSubstring(_:)();
        uint64_t v56 = v55;
        swift_bridgeObjectRelease();
        uint64_t v146 = v54;
        uint64_t v147 = v56;
        sub_10003CCC8();
        String.append<A>(contentsOf:)();
        uint64_t v57 = Substring.init(_:)();
        uint64_t v59 = v58;
        uint64_t v61 = v60;
        uint64_t v63 = v62;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000AB1C(v140, v139);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v41 = sub_10003C98C(0, *((void *)v41 + 2) + 1, 1, v41);
        }
        unint64_t v65 = *((void *)v41 + 2);
        unint64_t v64 = *((void *)v41 + 3);
        uint64_t v66 = v141;
        if (v65 >= v64 >> 1) {
          uint64_t v41 = sub_10003C98C((char *)(v64 > 1), v65 + 1, 1, v41);
        }
        unint64_t v40 = v66 + 2;
        *((void *)v41 + 2) = v65 + 1;
        os_log_t v67 = &v41[32 * v65];
        *((void *)v67 + 4) = v57;
        *((void *)v67 + 5) = v59;
        *((void *)v67 + 6) = v61;
        *((void *)v67 + 7) = v63;
        uint64_t v39 = v142 - 1;
      }
      while (v142 != 1);
      swift_bridgeObjectRelease_n();
      uint64_t v17 = v130;
      uint64_t v4 = v129;
    }
    v82._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v83._uint64_t countAndFlagsBits = 8236;
    v83._object = (void *)0xE200000000000000;
    String.append(_:)(v83);
    String.append(_:)(v148);
  }
  swift_bridgeObjectRelease();
  id v86 = [v17 recordChangeTag];
  if (v86)
  {
    unint64_t v87 = v86;
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v90 = v89;

    v91._uint64_t countAndFlagsBits = 540691267;
    v91._object = (void *)0xE400000000000000;
    String.append(_:)(v91);
    v143._uint64_t countAndFlagsBits = v88;
    v143._object = v90;
    v92._uint64_t countAndFlagsBits = 8236;
    v92._object = (void *)0xE200000000000000;
    String.append(_:)(v92);
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
    v143._uint64_t countAndFlagsBits = 0;
    v143._object = (void *)0xE000000000000000;
    id v93 = [v17 modifiedByDevice];
    if (v93)
    {
      char v94 = v93;
      uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v97 = v96;
    }
    else
    {
      uint64_t v97 = (void *)0xE100000000000000;
      uint64_t v95 = 45;
    }
    v100._uint64_t countAndFlagsBits = v95;
    v100._object = v97;
    String.append(_:)(v100);
    swift_bridgeObjectRelease();
    v101._uint64_t countAndFlagsBits = 8236;
    v101._object = (void *)0xE200000000000000;
    String.append(_:)(v101);
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
    v143._uint64_t countAndFlagsBits = 544490595;
    v143._object = (void *)0xE400000000000000;
    id v102 = [v17 creationDate];
    if (v102)
    {
      unint64_t v103 = v102;
      uint64_t v104 = (uint64_t)v133;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v105 = v137;
      unint64_t v106 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56);
      v106(v104, 0, 1, v4);
    }
    else
    {
      uint64_t v105 = v137;
      unint64_t v106 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56);
      uint64_t v104 = (uint64_t)v133;
      v106((uint64_t)v133, 1, 1, v4);
    }
    uint64_t v107 = v134;
    sub_10003CA90(v104, v134);
    uint64_t v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
    if (v108(v107, 1, v4))
    {
      sub_10000E044(v107, (uint64_t *)&unk_10008F460);
      uint64_t v109 = (void *)0xE100000000000000;
      uint64_t v110 = 45;
    }
    else
    {
      unint64_t v111 = v132;
      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v132, v107, v4);
      sub_10000E044(v107, (uint64_t *)&unk_10008F460);
      uint64_t v110 = sub_10003E930();
      uint64_t v112 = v105;
      uint64_t v109 = v113;
      (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v4);
    }
    v114._uint64_t countAndFlagsBits = v110;
    v114._object = v109;
    String.append(_:)(v114);
    swift_bridgeObjectRelease();
    v115._uint64_t countAndFlagsBits = 8236;
    v115._object = (void *)0xE200000000000000;
    String.append(_:)(v115);
    String.append(_:)(v143);
    swift_bridgeObjectRelease();
    v143._uint64_t countAndFlagsBits = 544490605;
    v143._object = (void *)0xE400000000000000;
    id v116 = [v17 modificationDate];
    if (v116)
    {
      int v117 = v116;
      uint64_t v118 = (uint64_t)v135;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v119 = 0;
    }
    else
    {
      uint64_t v119 = 1;
      uint64_t v118 = (uint64_t)v135;
    }
    uint64_t v120 = (uint64_t)v136;
    uint64_t v121 = v137;
    v106(v118, v119, 1, v4);
    sub_10003CA90(v118, v120);
    if (v108(v120, 1, v4))
    {
      sub_10000E044(v120, (uint64_t *)&unk_10008F460);
      unint64_t v122 = 0xE100000000000000;
      uint64_t v123 = 45;
    }
    else
    {
      unint64_t v124 = v132;
      (*(void (**)(char *, uint64_t, uint64_t))(v121 + 16))(v132, v120, v4);
      sub_10000E044(v120, (uint64_t *)&unk_10008F460);
      uint64_t v123 = sub_10003E930();
      uint64_t v125 = v121;
      unint64_t v122 = v126;
      (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v4);
    }
    uint64_t v98 = v123;
    unint64_t v99 = v122;
  }
  else
  {
    v143._uint64_t countAndFlagsBits = 544490605;
    v143._object = (void *)0xE400000000000000;
    uint64_t v98 = sub_10003E930();
  }
  String.append(_:)(*(Swift::String *)&v98);
  swift_bridgeObjectRelease();
  String.append(_:)(v143);
  swift_bridgeObjectRelease();

  return v149;
}

void sub_1000394AC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9 = (int *)type metadata accessor for CloudPairedDeviceRecord();
  *(void *)((char *)a5 + v9[10]) = 0;
  uint64_t v10 = (void *)((char *)a5 + v9[6]);
  *uint64_t v10 = a1;
  v10[1] = a2;
  *(void *)((char *)a5 + v9[7]) = [a3 fastLEConnectionInfoVersion];
  id v11 = [a3 fastLEConnectionInfoData];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v15 = 0xC000000000000000;
  }
  uint64_t v16 = (uint64_t *)((char *)a5 + v9[8]);
  *uint64_t v16 = v13;
  v16[1] = v15;
  *(void *)((char *)a5 + v9[9]) = a4;
  *((unsigned char *)a5 + v9[11]) = 1;
  *(void *)((char *)a5 + v9[12]) = [a3 supportedServices];
  *a5 = xmmword_100075520;
  static Date.now.getter();
}

uint64_t sub_1000395D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v3 = sub_10000423C((uint64_t *)&unk_10008F460);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v72 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v73 = (char *)&v64 - v7;
  __chkstk_darwin(v6);
  uint64_t v75 = (uint64_t)&v64 - v8;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v76 = *(void *)(v9 - 8);
  uint64_t v77 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v64 - v13;
  uint64_t v15 = sub_10000423C(&qword_10008F478);
  uint64_t v78 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  Swift::String v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  Swift::String v20 = (char *)&v64 - v19;
  unint64_t v79 = (int *)type metadata accessor for CloudPairedDeviceRecord();
  __chkstk_darwin(v79);
  unint64_t v80 = (uint64_t *)((char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AF14(a1, a1[3]);
  sub_10003CD1C();
  Swift::String v22 = v81;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22) {
    return sub_1000057DC((uint64_t)a1);
  }
  uint64_t v70 = v12;
  uint64_t v71 = v18;
  unint64_t v81 = v14;
  char v83 = 0;
  sub_10003CD70();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  Swift::String v69 = a1;
  Swift::String v24 = v80;
  uint64_t v25 = *((void *)&v82 + 1);
  *unint64_t v80 = v82;
  v24[1] = v25;
  LOBYTE(v82) = 2;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v27 = v15;
  uint64_t v28 = v79;
  uint64_t v29 = (void *)((char *)v24 + v79[6]);
  *uint64_t v29 = v26;
  v29[1] = v30;
  LOBYTE(v82) = 3;
  uint64_t v31 = v27;
  *(void *)((char *)v24 + v28[7]) = KeyedDecodingContainer.decode(_:forKey:)();
  char v83 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)((char *)v24 + v28[8]) = v82;
  unint64_t v33 = (void (**)(char *, uint64_t))(v78 + 16);
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
  uint64_t v68 = v31;
  v32(v71, v20, v31);
  uint64_t v78 = sub_10000423C(&qword_10008F488);
  char v83 = 5;
  sub_10003D530(&qword_10008F490, (void (*)(void))sub_10003CD70);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  --v33;
  uint64_t v34 = (void *)v82;
  uint64_t v35 = *v33;
  (*v33)(v71, v31);
  uint64_t v36 = _swiftEmptyArrayStorage;
  if (v34) {
    uint64_t v36 = v34;
  }
  *(void *)((char *)v24 + v28[9]) = v36;
  LOBYTE(v82) = 6;
  uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v78 = (uint64_t)v35;
  *(void *)((char *)v24 + v28[10]) = v37;
  char v83 = 7;
  sub_10003CDC4();
  uint64_t v38 = v20;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((unsigned char *)v24 + v28[11]) = v82;
  LOBYTE(v82) = 8;
  uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v40 = (void (*)(char *, uint64_t))v78;
  uint64_t v41 = v28[12];
  uint64_t v71 = 0;
  uint64_t v42 = v80;
  *(void *)((char *)v80 + v41) = v39;
  os_log_t v67 = (char *)v42 + v28[5];
  static Date.now.getter();
  LOBYTE(v82) = 1;
  sub_10003D7C8(&qword_10008F4A0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v43 = v75;
  uint64_t v44 = v77;
  uint64_t v45 = v71;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v71 = v45;
  if (v45)
  {
    v40(v38, v31);
    sub_1000057DC((uint64_t)v69);
    sub_10000AB1C(*v42, v42[1]);
    (*(void (**)(char *, uint64_t))(v76 + 8))((char *)v42 + v28[5], v44);
    swift_bridgeObjectRelease();
    sub_10000AB1C(*(uint64_t *)((char *)v42 + v28[8]), *(uint64_t *)((char *)v42 + v28[8] + 8));
    return swift_bridgeObjectRelease();
  }
  uint64_t v66 = v38;
  unint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  if (v46(v43, 1, v44) == 1)
  {
    uint64_t v47 = sub_10003D7C8(&qword_10008FD90, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
    unint64_t v48 = (void *)sub_100037758((uint64_t)v79, v47);
    id v49 = [v48 modificationDate];

    if (v49)
    {
      uint64_t v50 = v70;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v51 = v76;
      uint64_t v52 = (uint64_t)v73;
      uint64_t v53 = v50;
      uint64_t v54 = v77;
      unint64_t v65 = *(void (**)(uint64_t, char *, uint64_t))(v76 + 32);
      v65((uint64_t)v73, v53, v77);
      uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
      v55(v52, 0, 1, v54);
      if (v46(v52, 1, v54) != 1)
      {
        ((void (*)(char *, uint64_t))v78)(v66, v68);
        v65((uint64_t)v81, v73, v77);
LABEL_19:
        sub_10000E044(v75, (uint64_t *)&unk_10008F460);
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56);
      v55((uint64_t)v73, 1, 1, v77);
    }
    uint64_t v56 = (void *)sub_100037758((uint64_t)v79, v47);
    id v57 = [v56 creationDate];

    if (v57)
    {
      uint64_t v58 = v70;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v59 = *(void (**)(uint64_t, char *, uint64_t))(v76 + 32);
      uint64_t v60 = (uint64_t)v72;
      uint64_t v61 = v58;
      uint64_t v62 = v77;
      v59((uint64_t)v72, v61, v77);
      v55(v60, 0, 1, v62);
      if (v46(v60, 1, v62) != 1)
      {
        ((void (*)(char *, uint64_t))v78)(v66, v68);
        v59((uint64_t)v81, v72, v77);
LABEL_18:
        sub_10000E044((uint64_t)v73, (uint64_t *)&unk_10008F460);
        goto LABEL_19;
      }
    }
    else
    {
      v55((uint64_t)v72, 1, 1, v77);
    }
    static Date.now.getter();
    ((void (*)(char *, uint64_t))v78)(v66, v68);
    sub_10000E044((uint64_t)v72, (uint64_t *)&unk_10008F460);
    goto LABEL_18;
  }
  ((void (*)(char *, uint64_t))v78)(v66, v68);
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v81, v75, v77);
LABEL_20:
  (*(void (**)(char *, char *, uint64_t))(v76 + 40))(v67, v81, v77);
  uint64_t v63 = v80;
  sub_10003CE18((uint64_t)v80, v74);
  sub_1000057DC((uint64_t)v69);
  return sub_10003CE7C((uint64_t)v63);
}

uint64_t sub_10003A114(uint64_t a1)
{
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CloudPairedDeviceRecord();
  uint64_t v7 = (int *)v6;
  uint64_t v8 = *(int *)(v6 + 28);
  uint64_t v9 = *(void *)(a1 + v8);
  if (!v9) {
    uint64_t v9 = *(void *)(v1 + v8);
  }
  *(void *)(v1 + v8) = v9;
  uint64_t v10 = *(int *)(v6 + 32);
  uint64_t v11 = *(void *)(a1 + v10);
  unint64_t v12 = *(void *)(a1 + v10 + 8);
  switch(v12 >> 62)
  {
    case 1uLL:
      if ((int)v11 == v11 >> 32) {
        goto LABEL_9;
      }
      break;
    case 2uLL:
      if (*(void *)(v11 + 16) == *(void *)(v11 + 24)) {
        goto LABEL_9;
      }
      break;
    case 3uLL:
      goto LABEL_9;
    default:
      if ((v12 & 0xFF000000000000) == 0)
      {
LABEL_9:
        uint64_t v11 = *(void *)(v1 + v10);
        unint64_t v12 = *(void *)(v1 + v10 + 8);
      }
      break;
  }
  uint64_t v13 = (uint64_t *)(v1 + v10);
  uint64_t v14 = *(void *)(v1 + v10);
  unint64_t v15 = *(void *)(v1 + v10 + 8);
  sub_10000AF6C(v11, v12);
  sub_10000AB1C(v14, v15);
  *uint64_t v13 = v11;
  v13[1] = v12;
  uint64_t v16 = v7[9];
  uint64_t v17 = *(void *)(a1 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v16) = v17;
  uint64_t v18 = v7[10];
  uint64_t v19 = *(void *)(a1 + v18);
  if (!v19) {
    uint64_t v19 = *(void *)(v1 + v18);
  }
  *(void *)(v1 + v18) = v19;
  uint64_t v20 = v7[11];
  if (*(unsigned char *)(a1 + v20)) {
    char v21 = 1;
  }
  else {
    char v21 = *(unsigned char *)(v1 + v20);
  }
  *(unsigned char *)(v1 + v20) = v21;
  uint64_t v22 = v7[12];
  uint64_t v23 = *(void *)(a1 + v22);
  if (!v23) {
    uint64_t v23 = *(void *)(v1 + v22);
  }
  *(void *)(v1 + v22) = v23;
  static Date.now.getter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 40))(v1 + v7[5], v5, v26);
}

void sub_10003A318(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000423C((uint64_t *)&unk_10008F460);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  Swift::String v69 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v71 = (char *)&v62 - v8;
  uint64_t v72 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v72 - 8);
  uint64_t v10 = __chkstk_darwin(v72);
  uint64_t v70 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v68 = (char *)&v62 - v12;
  uint64_t v13 = CKRecord.recordType.getter();
  unint64_t v15 = v14;
  swift_beginAccess();
  if (v13 == qword_10008F440 && v15 == off_10008F448)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      sub_10003CED8();
      swift_allocError();
      *unint64_t v33 = 0;
      swift_willThrow();

      return;
    }
  }
  uint64_t v63 = v9;
  uint64_t v65 = v2;
  id v17 = [a1 encryptedValues];
  swift_getObjectType();
  *a2 = sub_100037C80();
  a2[1] = v18;
  CKRecordKeyValueSetting.subscript.getter();
  if (BYTE8(v73)) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v73;
  }
  uint64_t v20 = (int *)type metadata accessor for CloudPairedDeviceRecord();
  *(uint64_t *)((char *)a2 + v20[10]) = v19;
  uint64_t v64 = a1;
  id v21 = [a1 recordID];
  id v22 = [v21 recordName];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  uint64_t v26 = (uint64_t *)((char *)a2 + v20[6]);
  *uint64_t v26 = v23;
  v26[1] = v25;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v27 = v73;
  if (BYTE8(v73)) {
    uint64_t v27 = 0;
  }
  *(uint64_t *)((char *)a2 + v20[7]) = v27;
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v17 objectForKeyedSubscript:v28];

  long long v30 = xmmword_100075520;
  if (v29)
  {
    long long v62 = xmmword_100075520;
    unint64_t v74 = (unint64_t)v29;
    sub_10000423C(&qword_10008F510);
    if (!swift_dynamicCast())
    {
      uint64_t v31 = v63;
      uint64_t v32 = v64;
      long long v30 = v62;
      goto LABEL_16;
    }
    long long v30 = v73;
  }
  uint64_t v31 = v63;
  uint64_t v32 = v64;
LABEL_16:
  *(_OWORD *)((char *)a2 + v20[8]) = v30;
  NSString v34 = String._bridgeToObjectiveC()();
  id v35 = [v17 objectForKeyedSubscript:v34];

  if (v35
    && (*(void *)&long long v73 = v35,
        sub_10000423C(&qword_10008F510),
        sub_10000423C(&qword_10008F488),
        swift_dynamicCast()))
  {
    uint64_t v36 = (void *)v74;
  }
  else
  {
    uint64_t v36 = _swiftEmptyArrayStorage;
  }
  *(uint64_t *)((char *)a2 + v20[9]) = (uint64_t)v36;
  NSString v37 = String._bridgeToObjectiveC()();
  id v38 = [v17 objectForKeyedSubscript:v37];

  if (v38 && (*(void *)&long long v73 = v38, sub_10000423C(&qword_10008F510), (swift_dynamicCast() & 1) != 0) && v74 <= 1) {
    *((unsigned char *)a2 + v20[11]) = v74;
  }
  else {
    *((unsigned char *)a2 + v20[11]) = 0;
  }
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v39 = v73;
  if (BYTE8(v73)) {
    uint64_t v39 = 0;
  }
  *(uint64_t *)((char *)a2 + v20[12]) = v39;
  id v40 = [v32 modificationDate];
  uint64_t v66 = v20;
  os_log_t v67 = a2;
  if (!v40)
  {
    uint64_t v48 = v31;
    uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
    v47((uint64_t)v71, 1, 1, v72);
    uint64_t v51 = (uint64_t)v69;
LABEL_31:
    id v53 = [v32 creationDate];
    if (v53)
    {
      uint64_t v54 = v53;
      uint64_t v55 = v32;
      uint64_t v56 = v70;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v57 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 32);
      uint64_t v58 = v56;
      uint64_t v59 = v72;
      v57(v51, v58, v72);
      v47(v51, 0, 1, v59);
      uint64_t v60 = v59;
      uint64_t v32 = v55;
      int v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v51, 1, v60);
      uint64_t v52 = v68;
      if (v61 != 1)
      {
        swift_unknownObjectRelease();

        v57((uint64_t)v52, (char *)v51, v72);
LABEL_36:
        sub_10000E044((uint64_t)v71, (uint64_t *)&unk_10008F460);
        uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 32);
        goto LABEL_37;
      }
    }
    else
    {
      v47(v51, 1, 1, v72);
      uint64_t v52 = v68;
    }
    static Date.now.getter();
    swift_unknownObjectRelease();

    sub_10000E044(v51, (uint64_t *)&unk_10008F460);
    goto LABEL_36;
  }
  uint64_t v41 = v40;
  uint64_t v42 = v70;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 32);
  uint64_t v44 = (uint64_t)v71;
  uint64_t v45 = v32;
  uint64_t v46 = v72;
  v43((uint64_t)v71, v42, v72);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
  v47(v44, 0, 1, v46);
  uint64_t v48 = v31;
  uint64_t v49 = v46;
  uint64_t v32 = v45;
  int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v44, 1, v49);
  uint64_t v51 = (uint64_t)v69;
  if (v50 == 1) {
    goto LABEL_31;
  }
  swift_unknownObjectRelease();

  uint64_t v52 = v68;
  v43((uint64_t)v68, v71, v72);
LABEL_37:
  v43((uint64_t)v67 + v66[5], v52, v72);
}

uint64_t sub_10003AAF4(id *a1)
{
  id v2 = [*a1 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v3 = (int *)type metadata accessor for CloudPairedDeviceRecord();
  if ((v13 & 1) != 0 || v12 != *(void *)(v1 + v3[7]))
  {
    uint64_t v12 = *(void *)(v1 + v3[7]);
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v4 = (uint64_t *)(v1 + v3[8]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  sub_10000AF6C(*v4, v6);
  if (v13 >> 60 == 15)
  {
    sub_10000AB08(v12, v13);
    sub_10000AB08(v5, v6);
LABEL_7:
    uint64_t v12 = v5;
    LOBYTE(v13) = v6;
    sub_10000AF6C(v5, v6);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_8;
  }
  sub_10000AF58(v12, v13);
  char v7 = sub_10003D128(v12, v13, v5, v6);
  sub_10000AB1C(v5, v6);
  sub_10000AB08(v12, v13);
  sub_10000AB08(v12, v13);
  if ((v7 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  sub_10000423C(&qword_10008F488);
  sub_10003CF2C();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v8 = *(void *)(v1 + v3[9]);
  if (!v12
    || (swift_bridgeObjectRetain(),
        uint64_t v9 = swift_bridgeObjectRetain(),
        char v10 = sub_10003B04C(v9, v8),
        swift_bridgeObjectRelease_n(),
        swift_bridgeObjectRelease(),
        (v10 & 1) == 0))
  {
    uint64_t v12 = v8;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  if ((v13 & 1) != 0 || v12 != *(void *)(v1 + v3[10]))
  {
    uint64_t v12 = *(void *)(v1 + v3[10]);
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  if ((v13 & 1) != 0 || v12 != *(unsigned __int8 *)(v1 + v3[11]))
  {
    uint64_t v12 = *(unsigned __int8 *)(v1 + v3[11]);
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  if ((v13 & 1) != 0 || v12 != *(void *)(v1 + v3[12])) {
    CKRecordKeyValueSetting.subscript.setter();
  }
  return swift_unknownObjectRelease();
}

void sub_10003AF1C()
{
  uint64_t v1 = (int *)type metadata accessor for CloudPairedDeviceRecord();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + v1[7]));
  id v2 = (uint64_t *)(v0 + v1[8]);
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  sub_10000AF6C(*v2, v4);
  Data.hash(into:)();
  sub_10000AB1C(v3, v4);
  uint64_t v5 = *(void *)(v0 + v1[9]);
  Hasher._combine(_:)(*(void *)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    char v7 = (unint64_t *)(v5 + 40);
    do
    {
      uint64_t v8 = *(v7 - 1);
      unint64_t v9 = *v7;
      sub_10000AF6C(v8, *v7);
      Data.hash(into:)();
      sub_10000AB1C(v8, v9);
      v7 += 2;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(*(void *)(v0 + v1[10]));
  Hasher._combine(_:)(*(void *)(v0 + v1[12]));
}

uint64_t sub_10003B04C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unint64_t *)(a1 + 40);
    unint64_t v4 = (unint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v6 = *(v3 - 1);
      unint64_t v5 = *v3;
      uint64_t v8 = *(v4 - 1);
      unint64_t v7 = *v4;
      unint64_t v9 = *v3 >> 62;
      v3 += 2;
      v4 += 2;
      uint64_t v10 = 0;
      switch(v9)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
          }
          uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_13:
          sub_10000AF6C(v6, v5);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          uint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_13;
          }
          goto LABEL_124;
        case 3uLL:
          break;
        default:
          uint64_t v10 = BYTE6(v5);
          break;
      }
      unint64_t v13 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_125;
          }
          uint64_t v14 = (int)v14;
LABEL_19:
          if (v10 != v14) {
            goto LABEL_121;
          }
          if (v10 < 1)
          {
LABEL_6:
            sub_10000AB1C(v6, v5);
          }
          else
          {
            switch((int)v9)
            {
              case 1:
                uint64_t v76 = v3;
                if ((int)v6 > v6 >> 32) {
                  goto LABEL_127;
                }
                sub_10000AF6C(v8, v7);
                uint64_t v23 = (char *)__DataStorage._bytes.getter();
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v24 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v6, v24)) {
                  goto LABEL_129;
                }
                v23 += (int)v6 - v24;
LABEL_33:
                __DataStorage._length.getter();
                if (!v13)
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v23) {
                    goto LABEL_157;
                  }
                  size_t v41 = BYTE6(v7);
                  id v40 = __s1;
                  uint64_t v39 = v23;
LABEL_103:
                  int v29 = memcmp(v39, v40, v41);
                  goto LABEL_104;
                }
                if (v13 == 1)
                {
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  uint64_t v25 = (char *)__DataStorage._bytes.getter();
                  if (v25)
                  {
                    uint64_t v26 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v8, v26)) {
                      goto LABEL_145;
                    }
                    v25 += (int)v8 - v26;
                  }
                  uint64_t v27 = __DataStorage._length.getter();
                  if (v27 >= (v8 >> 32) - (int)v8) {
                    size_t v28 = (v8 >> 32) - (int)v8;
                  }
                  else {
                    size_t v28 = v27;
                  }
                  if (!v23) {
                    goto LABEL_147;
                  }
                  if (!v25) {
                    goto LABEL_148;
                  }
                  int v29 = memcmp(v23, v25, v28);
                  sub_10000AB1C(v8, v7);
                  goto LABEL_72;
                }
                uint64_t v67 = *(void *)(v8 + 16);
                unint64_t v74 = *(char **)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = __DataStorage._bytes.getter();
                if (v68)
                {
                  uint64_t v69 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_144;
                  }
                  v68 += v67 - v69;
                }
                if (__OFSUB__(v74, v67)) {
                  goto LABEL_139;
                }
                uint64_t v70 = __DataStorage._length.getter();
                if (v70 >= (uint64_t)&v74[-v67]) {
                  uint64_t v71 = &v74[-v67];
                }
                else {
                  uint64_t v71 = (char *)v70;
                }
                uint64_t v56 = v23;
                uint64_t v3 = v76;
                if (!v23) {
                  goto LABEL_158;
                }
                if (!v68) {
                  goto LABEL_159;
                }
                size_t v55 = (size_t)v71;
                id v57 = (const void *)v68;
LABEL_116:
                int v58 = memcmp(v56, v57, v55);
                swift_release();
                goto LABEL_117;
              case 2:
                uint64_t v77 = v3;
                uint64_t v30 = *(void *)(v6 + 16);
                sub_10000AF6C(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_128;
                  }
                  long long v73 = (void *)(v32 + v30 - v33);
                }
                else
                {
                  long long v73 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v3 = v77;
                if (v13)
                {
                  if (v13 == 1)
                  {
                    if (v8 >> 32 < (int)v8) {
                      goto LABEL_134;
                    }
                    swift_retain();
                    uint64_t v42 = (char *)__DataStorage._bytes.getter();
                    if (v42)
                    {
                      uint64_t v43 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v8, v43)) {
                        goto LABEL_143;
                      }
                      v42 += (int)v8 - v43;
                    }
                    uint64_t v44 = __DataStorage._length.getter();
                    if (v44 >= (v8 >> 32) - (int)v8) {
                      size_t v45 = (v8 >> 32) - (int)v8;
                    }
                    else {
                      size_t v45 = v44;
                    }
                    if (!v73) {
                      goto LABEL_150;
                    }
                    uint64_t v3 = v77;
                    if (!v42) {
                      goto LABEL_151;
                    }
                    int v29 = memcmp(v73, v42, v45);
                    sub_10000AB1C(v8, v7);
                    swift_release();
                    swift_release();
LABEL_72:
                    sub_10000AB1C(v8, v7);
LABEL_104:
                    sub_10000AB1C(v6, v5);
                    if (v29) {
                      return 0;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void *)(v8 + 16);
                    uint64_t v59 = *(void *)(v8 + 24);
                    swift_retain();
                    swift_retain();
                    int v61 = (char *)__DataStorage._bytes.getter();
                    if (v61)
                    {
                      uint64_t v62 = __DataStorage._offset.getter();
                      if (__OFSUB__(v60, v62)) {
                        goto LABEL_142;
                      }
                      v61 += v60 - v62;
                    }
                    BOOL v17 = __OFSUB__(v59, v60);
                    int64_t v63 = v59 - v60;
                    if (v17) {
                      goto LABEL_137;
                    }
                    uint64_t v64 = __DataStorage._length.getter();
                    if (v64 >= v63) {
                      size_t v65 = v63;
                    }
                    else {
                      size_t v65 = v64;
                    }
                    uint64_t v3 = v77;
                    if (!v73) {
                      goto LABEL_155;
                    }
                    if (!v61) {
                      goto LABEL_156;
                    }
                    int v66 = memcmp(v73, v61, v65);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    sub_10000AB1C(v8, v7);
                    sub_10000AB1C(v6, v5);
                    if (v66) {
                      return 0;
                    }
                  }
                }
                else
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v73) {
                    goto LABEL_154;
                  }
                  int v58 = memcmp(v73, __s1, BYTE6(v7));
                  swift_release();
LABEL_117:
                  swift_release();
                  sub_10000AB1C(v8, v7);
                  sub_10000AB1C(v6, v5);
                  if (v58) {
                    return 0;
                  }
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v13) {
                  goto LABEL_58;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_131;
                  }
                  sub_10000AF6C(v8, v7);
                  uint64_t v34 = __DataStorage._bytes.getter();
                  if (!v34) {
                    goto LABEL_149;
                  }
                  uint64_t v20 = v34;
                  uint64_t v35 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v35;
                  if (__OFSUB__((int)v8, v35)) {
                    goto LABEL_133;
                  }
LABEL_53:
                  uint64_t v36 = __DataStorage._length.getter();
                  if (v36 >= v18) {
                    size_t v37 = v18;
                  }
                  else {
                    size_t v37 = v36;
                  }
                  int v38 = memcmp(__s1, (const void *)(v20 + v22), v37);
                  sub_10000AB1C(v8, v7);
                  sub_10000AB1C(v6, v5);
                  uint64_t v3 = v75;
                  if (v38) {
                    return 0;
                  }
                  break;
                }
                uint64_t v52 = *(void *)(v8 + 16);
                uint64_t v53 = *(void *)(v8 + 24);
                sub_10000AF6C(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_141;
                  }
                  v48 += v52 - v54;
                }
                BOOL v17 = __OFSUB__(v53, v52);
                int64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_136;
                }
                uint64_t v51 = __DataStorage._length.getter();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_153;
                }
LABEL_84:
                if (v51 >= v50) {
                  size_t v55 = v50;
                }
                else {
                  size_t v55 = v51;
                }
                uint64_t v56 = __s1;
                id v57 = (const void *)v48;
                goto LABEL_116;
              default:
                __s1[0] = v6;
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = BYTE4(v5);
                BYTE5(__s1[1]) = BYTE5(v5);
                if (!v13)
                {
LABEL_58:
                  uint64_t v78 = v8;
                  __int16 v79 = v7;
                  char v80 = BYTE2(v7);
                  char v81 = BYTE3(v7);
                  char v82 = BYTE4(v7);
                  char v83 = BYTE5(v7);
                  sub_10000AF6C(v8, v7);
                  uint64_t v39 = __s1;
                  id v40 = &v78;
                  size_t v41 = BYTE6(v7);
                  goto LABEL_103;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_130;
                  }
                  sub_10000AF6C(v8, v7);
                  uint64_t v19 = __DataStorage._bytes.getter();
                  if (!v19)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    JUMPOUT(0x10003B984);
                  }
                  uint64_t v20 = v19;
                  uint64_t v21 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v21;
                  if (__OFSUB__((int)v8, v21)) {
                    goto LABEL_132;
                  }
                  goto LABEL_53;
                }
                uint64_t v46 = *(void *)(v8 + 16);
                uint64_t v47 = *(void *)(v8 + 24);
                sub_10000AF6C(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v49 = __DataStorage._offset.getter();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_140;
                  }
                  v48 += v46 - v49;
                }
                BOOL v17 = __OFSUB__(v47, v46);
                int64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_135;
                }
                uint64_t v51 = __DataStorage._length.getter();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_152;
                }
                goto LABEL_84;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v8 + 16);
          uint64_t v15 = *(void *)(v8 + 24);
          BOOL v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_126;
        case 3uLL:
          if (!v10) {
            goto LABEL_6;
          }
          sub_10000AF6C(v8, v7);
LABEL_121:
          sub_10000AB1C(v6, v5);
          return 0;
        default:
          uint64_t v14 = BYTE6(v7);
          goto LABEL_19;
      }
    }
  }
  return 1;
}

unint64_t sub_10003B9B4(char a1)
{
  unint64_t result = 0x74654D64756F6C63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0x7954656369766564;
      break;
    case 7:
      unint64_t result = 0x69687372656E776FLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10003BB0C()
{
  return sub_10003B9B4(*v0);
}

uint64_t sub_10003BB14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10003E508(a1, a2);
  *a3 = result;
  return result;
}

void sub_10003BB3C(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10003BB48(uint64_t a1)
{
  unint64_t v2 = sub_10003CD1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003BB84(uint64_t a1)
{
  unint64_t v2 = sub_10003CD1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003BBC0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000423C(&qword_10008F520);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AF14(a1, a1[3]);
  sub_10003CD1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  char v12 = 0;
  sub_10003D4DC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    unint64_t v9 = (int *)type metadata accessor for CloudPairedDeviceRecord();
    LOBYTE(v11) = 1;
    type metadata accessor for Date();
    sub_10003D7C8(&qword_10008F530, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v11 = *(_OWORD *)((char *)v3 + v9[8]);
    char v12 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v11 = *(void *)((char *)v3 + v9[9]);
    char v12 = 5;
    sub_10000423C(&qword_10008F488);
    sub_10003D530(&qword_10008F538, (void (*)(void))sub_10003D4DC);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = *((unsigned char *)v3 + v9[11]);
    char v12 = 7;
    sub_10003D5A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_10003BF58()
{
  return Hasher._finalize()();
}

uint64_t sub_10003BF98(uint64_t a1, uint64_t a2)
{
  return sub_10003BFB8(a1, a2, &qword_10008F440);
}

uint64_t sub_10003BFA8(uint64_t a1, uint64_t a2)
{
  return sub_10003BFB8(a1, a2, &qword_10008F450);
}

uint64_t sub_10003BFB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  swift_beginAccess();
  uint64_t v4 = *a3;
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t sub_10003C010()
{
  uint64_t v1 = *(void *)v0;
  sub_10000AF6C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_10003C044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

void sub_10003C0B4(void *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_10003C0D4()
{
  return sub_100037598();
}

uint64_t sub_10003C100@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_100037648(a1, a2);
}

Swift::Int sub_10003C130()
{
  return Hasher._finalize()();
}

unint64_t sub_10003C170()
{
  return sub_100038874(50);
}

unint64_t sub_10003C178()
{
  return sub_100038874(20);
}

uint64_t sub_10003C180@<X0>(uint64_t a1@<X8>)
{
  if (qword_100092620 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = sub_100014818(v2, (uint64_t)qword_100094AF8);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10003C240(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10003C278@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000395D4(a1, a2);
}

uint64_t sub_10003C290(void *a1)
{
  return sub_10003BBC0(a1);
}

uint64_t sub_10003C2A8()
{
  uint64_t v0 = sub_10000423C(&qword_10008F548);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CloudPairedDeviceRecord();
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000E044((uint64_t)v2, &qword_10008F548);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    uint64_t v8 = sub_10000AFDC();
    v11[0] = sub_10003C464(v8, v9);
    v11[1] = v10;
    Data.append(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return v11[0];
  }
}

uint64_t sub_10003C464(uint64_t a1, unint64_t a2)
{
  v28[3] = &type metadata for Data;
  v28[4] = &protocol witness table for Data;
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = sub_10000AF14(v28, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_10000AF6C(a1, a2);
      sub_10000AF6C(v5, v6);
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      char v12 = &v8[v11];
      if (v8) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = 0;
      }
      sub_10003CAF8(v8, v13, &v27);
      sub_10000AB1C(v5, v6);
LABEL_27:
      sub_10000AB1C(a1, a2);
      uint64_t v24 = v27;
      sub_1000057DC((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_10000AF6C(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_10003CAF8(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_10000AF6C(a1, a2);
      uint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_10000AF6C(a1, a2);
      uint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_10003CAF8(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t sub_10003C718@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_10000AF6C(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x10003C97CLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10000AB1C(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

char *sub_10003C98C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000423C(&qword_10008F628);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10003CA90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C((uint64_t *)&unk_10008F460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *sub_10003CAF8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_10000B16C(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_10000B2B4((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_10000B230((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10003CB70(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

unint64_t sub_10003CC0C(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v4) {
    uint64_t result = 15;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_12;
  }

  return String.subscript.getter();
}

unint64_t sub_10003CCC8()
{
  unint64_t result = qword_10008F470;
  if (!qword_10008F470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F470);
  }
  return result;
}

unint64_t sub_10003CD1C()
{
  unint64_t result = qword_100092628[0];
  if (!qword_100092628[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100092628);
  }
  return result;
}

unint64_t sub_10003CD70()
{
  unint64_t result = qword_10008F480;
  if (!qword_10008F480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F480);
  }
  return result;
}

unint64_t sub_10003CDC4()
{
  unint64_t result = qword_10008F498;
  if (!qword_10008F498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F498);
  }
  return result;
}

uint64_t sub_10003CE18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudPairedDeviceRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003CE7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudPairedDeviceRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10003CED8()
{
  unint64_t result = qword_10008F4A8;
  if (!qword_10008F4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F4A8);
  }
  return result;
}

unint64_t sub_10003CF2C()
{
  unint64_t result = qword_10008F518;
  if (!qword_10008F518)
  {
    sub_100007C10(&qword_10008F488);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F518);
  }
  return result;
}

uint64_t sub_10003CF98(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10003C718((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_10003D070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_10003C718(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_10003D128(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x10003D390);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_10000AF6C(a3, a4);
                  sub_10000AF6C(a1, a2);
                  char v17 = sub_10003D070((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10000AB1C(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_10000AF6C(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_10003D070(v21, v22, v20, a3, a4);
                  sub_10000AB1C(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_10000AF6C(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_10000AF6C(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_10003CF98(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10000AB1C(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

BOOL sub_10003D3C0(uint64_t a1, uint64_t a2)
{
  if ((sub_10003D128(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for CloudPairedDeviceRecord();
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v4[6];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v10 & 1) != 0))
  {
    if (*(void *)(a1 + v4[7]) == *(void *)(a2 + v4[7])
      && (sub_10003D128(*(void *)(a1 + v4[8]), *(void *)(a1 + v4[8] + 8), *(void *)(a2 + v4[8]), *(void *)(a2 + v4[8] + 8)) & 1) != 0&& (sub_10003B04C(*(void *)(a1 + v4[9]), *(void *)(a2 + v4[9])) & 1) != 0&& *(void *)(a1 + v4[10]) == *(void *)(a2 + v4[10])&& *(unsigned __int8 *)(a1 + v4[11]) == *(unsigned __int8 *)(a2 + v4[11]))
    {
      return *(void *)(a1 + v4[12]) == *(void *)(a2 + v4[12]);
    }
    return 0;
  }
  return result;
}

unint64_t sub_10003D4DC()
{
  unint64_t result = qword_10008F528;
  if (!qword_10008F528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F528);
  }
  return result;
}

uint64_t sub_10003D530(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100007C10(&qword_10008F488);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003D5A0()
{
  unint64_t result = qword_10008F540;
  if (!qword_10008F540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F540);
  }
  return result;
}

unint64_t sub_10003D5F8()
{
  unint64_t result = qword_10008F550;
  if (!qword_10008F550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F550);
  }
  return result;
}

unint64_t sub_10003D650()
{
  unint64_t result = qword_10008F558;
  if (!qword_10008F558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F558);
  }
  return result;
}

uint64_t sub_10003D6A4(uint64_t a1)
{
  uint64_t result = sub_10003D7C8(&qword_10008F560, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10003D6FC()
{
  return sub_10003D7C8(&qword_10008F568, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
}

uint64_t sub_10003D744(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10003D7C8(&qword_10008F570, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
  uint64_t result = sub_10003D7C8(&qword_10008F578, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10003D7C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_10003D810(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10000AF6C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    char v10 = (char *)a1 + v9;
    BOOL v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v18 = a3[8];
    unint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    swift_bridgeObjectRetain();
    sub_10000AF6C(v21, v22);
    *unint64_t v19 = v21;
    v19[1] = v22;
    uint64_t v23 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v23) = *(uint64_t *)((char *)a2 + v23);
    uint64_t v24 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *(uint64_t *)((char *)a1 + v24) = *(uint64_t *)((char *)a2 + v24);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10003D964(uint64_t a1, uint64_t a2)
{
  sub_10000AB1C(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  sub_10000AB1C(*(void *)(a1 + *(int *)(a2 + 32)), *(void *)(a1 + *(int *)(a2 + 32) + 8));

  return swift_bridgeObjectRelease();
}

uint64_t *sub_10003DA14(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10000AF6C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  char v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v12);
  uint64_t v15 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  unint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  swift_bridgeObjectRetain();
  sub_10000AF6C(v20, v21);
  uint64_t *v18 = v20;
  v18[1] = v21;
  uint64_t v22 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + v22) = *(uint64_t *)((char *)a2 + v22);
  uint64_t v23 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(uint64_t *)((char *)a1 + v23) = *(uint64_t *)((char *)a2 + v23);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_10003DB18(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10000AF6C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10000AB1C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  unint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_10000AF6C(*v19, v21);
  uint64_t v22 = *v18;
  unint64_t v23 = v18[1];
  uint64_t *v18 = v20;
  v18[1] = v21;
  sub_10000AB1C(v22, v23);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  return a1;
}

_OWORD *sub_10003DC58(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t *sub_10003DD2C(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000AB1C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v18 = *(uint64_t *)((char *)a1 + v17);
  unint64_t v19 = *(uint64_t *)((char *)a1 + v17 + 8);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  sub_10000AB1C(v18, v19);
  *(uint64_t *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[11];
  *(uint64_t *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((unsigned char *)a1 + v20) = *((unsigned char *)a2 + v20);
  *(uint64_t *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t sub_10003DE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003DE48);
}

uint64_t sub_10003DE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_10003DF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003DF24);
}

uint64_t sub_10003DF24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10003DFE8()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudPairedDeviceRecord.CloudPairedDeviceRecordError()
{
  return &type metadata for CloudPairedDeviceRecord.CloudPairedDeviceRecordError;
}

uint64_t _s14bluetoothuserd23CloudPairedDeviceRecordV19DeviceOwnershipTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s14bluetoothuserd23CloudPairedDeviceRecordV19DeviceOwnershipTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003E228);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10003E250(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CloudPairedDeviceRecord.DeviceOwnershipType()
{
  return &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType;
}

uint64_t getEnumTagSinglePayload for CloudPairedDeviceRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CloudPairedDeviceRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003E3C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudPairedDeviceRecord.CodingKeys()
{
  return &type metadata for CloudPairedDeviceRecord.CodingKeys;
}

unint64_t sub_10003E404()
{
  unint64_t result = qword_100092FC0[0];
  if (!qword_100092FC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100092FC0);
  }
  return result;
}

unint64_t sub_10003E45C()
{
  unint64_t result = qword_1000930D0;
  if (!qword_1000930D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000930D0);
  }
  return result;
}

unint64_t sub_10003E4B4()
{
  unint64_t result = qword_1000930D8[0];
  if (!qword_1000930D8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000930D8);
  }
  return result;
}

uint64_t sub_10003E508(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010007B410 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000010007B370 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000010007B390 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000010007B3B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7954656369766564 && a2 == 0xEA00000000006570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x69687372656E776FLL && a2 == 0xED00006570795470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010007B3D0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

unint64_t sub_10003E8D8()
{
  unint64_t result = qword_10008F620;
  if (!qword_10008F620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F620);
  }
  return result;
}

uint64_t sub_10003E930()
{
  uint64_t v0 = self;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

void *sub_10003E9B4()
{
  return &unk_100075A00;
}

void *sub_10003E9C0()
{
  return &unk_100075A10;
}

void *sub_10003E9CC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10003E9D8(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_10003E9E0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_10003E9F4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_10003EA08@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10003EA1C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_10003EA4C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10003EA78@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_10003EA9C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_10003EAB0(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_10003EAC4(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_10003EAD8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10003EAEC(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10003EB00(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10003EB14(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_10003EB28()
{
  return *v0 == 0;
}

uint64_t sub_10003EB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_10003EB50(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_10003EB64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10004775C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_10003EBA4()
{
  return 1;
}

Swift::Int sub_10003EBAC()
{
  return Hasher._finalize()();
}

void sub_10003EBF0()
{
}

Swift::Int sub_10003EC18()
{
  return Hasher._finalize()();
}

uint64_t sub_10003EC58()
{
  type metadata accessor for UserFileManager();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100046238();
  qword_100094B10 = v0;
  return result;
}

uint64_t sub_10003EC94()
{
  uint64_t v0 = swift_allocObject();
  sub_100046238();
  return v0;
}

uint64_t *sub_10003ECCC()
{
  if (qword_100093160 != -1) {
    swift_once();
  }
  return &qword_100094B10;
}

void *sub_10003ED18()
{
  if (*(void *)(v0 + 16))
  {
    unint64_t v1 = *(void **)(v0 + 16);
  }
  else
  {
    unint64_t v1 = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 16) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10003ED60(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10003ED70(void **a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_10003ED18();
  return sub_10003EDB8;
}

uint64_t sub_10003EDB8(void *a1)
{
  *(void *)(a1[1] + 16) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003EDC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000423C(&qword_10008F640);
  __chkstk_darwin(v5 - 8);
  BOOL v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - v13;
  id v15 = [self processInfo];
  id v16 = [v15 environment];

  uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v17 + 16))
  {
    sub_10002EE3C(0xD00000000000001BLL, 0x800000010007B4A0);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19)
    {
      uint64_t v20 = sub_100038200();
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v20, v1);
      unint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        unint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Under test appContainerURL to tmp", v23, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      uint64_t v24 = NSTemporaryDirectory();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URL.init(fileURLWithPath:isDirectory:)();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v26 = [self defaultManager];
  id v27 = [v26 URLsForDirectory:5 inDomains:1];

  uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v28 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, v28 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000E044((uint64_t)v7, &qword_10008F640);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    char v29 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v29(v14, v7, v8);
    URL.appendingPathComponent(_:isDirectory:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v29)(v31, v12, v8);
  }
  return result;
}

void *sub_10003F2D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003EDC8(a1);
  uint64_t result = (void *)xpc_copy_entitlement_for_self();
  if (result)
  {
    if (xpc_string_get_string_ptr(result))
    {
      v8[0] = String.init(cString:)();
      v8[1] = v7;
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for URL.DirectoryHint.inferFromPath(_:), v2);
      sub_100030800();
      URL.append<A>(path:directoryHint:)();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return (void *)swift_bridgeObjectRelease();
    }
    else
    {
      return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

void sub_10003F448()
{
  sub_10003F4C8();
}

uint64_t sub_10003F4C8()
{
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (!v0) {
    return swift_release();
  }
  swift_release();
  uint64_t v4 = sub_1000383AC();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v14);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    unint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v16 = v13;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v8 = _typeName(_:qualified:)();
    uint64_t v15 = sub_100004FA4(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error decoding %s: %@", (uint8_t *)v7, 0x16u);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v14);
  return swift_willThrow();
}

uint64_t sub_10003F7EC()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  return v1;
}

uint64_t sub_10003F898()
{
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_10003F904(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v73 = *(void *)(v7 - 8);
  uint64_t v74 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v72 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v71 = (char *)&v67 - v10;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v69 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v70 = (char *)&v67 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  char v19 = (char *)&v67 - v18;
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v67 - v20;
  (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v3 + 224))(a1, a2, a3);
  os_log_type_t v22 = self;
  id v23 = [v22 defaultManager];
  URL.path.getter();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v25 = [v23 fileExistsAtPath:v24];

  if (!v25)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v11);
    return 1;
  }
  uint64_t v26 = v12;
  id v27 = [v22 defaultManager];
  URL._bridgeToObjectiveC()(v28);
  uint64_t v30 = v29;
  uint64_t v76 = 0;
  unsigned int v31 = [v27 removeItemAtURL:v29 error:&v76];

  if (v31)
  {
    uint64_t v32 = v76;
    uint64_t v33 = sub_1000383AC();
    uint64_t v34 = v73;
    uint64_t v35 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v71, v33, v74);
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    uint64_t v37 = v11;
    v36(v19, v21, v11);
    int v38 = v70;
    v36(v70, a3, v37);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    int v41 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v72 = (char *)swift_slowAlloc();
      uint64_t v76 = v72;
      *(_DWORD *)uint64_t v42 = 136315394;
      LODWORD(v69) = v41;
      sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v75 = sub_100004FA4(v43, v44, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      size_t v45 = *(void (**)(char *, uint64_t))(v26 + 8);
      uint64_t v46 = v19;
      uint64_t v47 = v37;
      v45(v46, v37);
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v48 = v70;
      uint64_t v49 = URL.lastPathComponent.getter();
      uint64_t v75 = sub_100004FA4(v49, v50, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v45(v48, v47);
      _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v69, "Deleted record %s from %s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v74);
      v45(v21, v47);
    }
    else
    {

      size_t v65 = *(void (**)(char *, uint64_t))(v26 + 8);
      v65(v38, v37);
      v65(v19, v37);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v74);
      v65(v21, v37);
    }
    return 1;
  }
  uint64_t v51 = v76;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v52 = sub_1000383AC();
  uint64_t v53 = v72;
  uint64_t v54 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v72, v52, v74);
  size_t v55 = v69;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v69, v21, v11);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.error.getter();
  int v58 = v57;
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v59 = v55;
    uint64_t v60 = swift_slowAlloc();
    uint64_t v67 = (void *)swift_slowAlloc();
    uint64_t v71 = (char *)swift_slowAlloc();
    uint64_t v76 = v71;
    *(_DWORD *)uint64_t v60 = 136315394;
    int v68 = v58;
    uint64_t v70 = (char *)(v60 + 4);
    sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v75 = sub_100004FA4(v61, v62, (uint64_t *)&v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v70 = *(char **)(v12 + 8);
    ((void (*)(char *, uint64_t))v70)(v59, v11);
    *(_WORD *)(v60 + 12) = 2112;
    swift_errorRetain();
    uint64_t v63 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v75 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v67 = v63;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v68, "Could not delete record %s due to %@", (uint8_t *)v60, 0x16u);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v72, v74);
    ((void (*)(char *, uint64_t))v70)(v21, v11);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    int v66 = *(void (**)(char *, uint64_t))(v12 + 8);
    v66(v55, v11);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v74);
    v66(v21, v11);
  }
  return 0;
}

uint64_t sub_1000401C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_queue_t v25 = *(dispatch_queue_t *)(v4 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a3);
  uint64_t v14 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v7);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v16 = (v12 + *(unsigned __int8 *)(v8 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  uint64_t v18 = v24;
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = v22;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[v15], v13, a3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v17[v16], (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_10004689C;
  *(void *)(v19 + 24) = v17;
  aBlock[4] = sub_1000144C0;
  void aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10000FBDC;
  void aBlock[3] = &unk_100087238;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v25, v20);
  _Block_release(v20);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v20) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000404C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = a5;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v52 = a1;
  uint64_t v55 = *(void *)(a4 - 8);
  uint64_t v56 = *(void *)(v55 + 64);
  __chkstk_darwin(a1);
  uint64_t v54 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = (void *)type metadata accessor for URL.DirectoryHint();
  uint64_t v8 = *(v46 - 1);
  __chkstk_darwin(v46);
  uint64_t v10 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for URL();
  uint64_t v49 = *(void *)(v58 - 8);
  uint64_t v11 = v49;
  uint64_t v53 = *(void *)(v49 + 64);
  uint64_t v12 = __chkstk_darwin(v58);
  uint64_t v14 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v45 - v16;
  __chkstk_darwin(v15);
  uint64_t v57 = (uint64_t)v45 - v18;
  uint64_t v19 = *(void *)(a5 + 8);
  v45[1] = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(a4, v19);
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(a4, v19);
  Swift::String v20 = URL.path(percentEncoded:)(1);
  unint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v22 = v14;
  uint64_t v23 = v58;
  v21(v22, v58);
  unint64_t v50 = (void (*)(uint64_t, uint64_t))v21;
  uint64_t v51 = v11 + 8;
  Swift::String v60 = v20;
  uint64_t v24 = v46;
  (*(void (**)(char *, void, void *))(v8 + 104))(v10, enum case for URL.DirectoryHint.isDirectory(_:), v46);
  sub_100030800();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, void *))(v8 + 8))(v10, v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = v57;
  uint64_t v26 = v17;
  sub_1000410FC(v57);
  swift_bridgeObjectRelease();
  v45[0] = v17;
  v21(v17, v23);
  uint64_t v27 = URL.lastPathComponent.getter();
  uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 240))(v27);
  swift_bridgeObjectRelease();
  uint64_t v28 = v47;
  uint64_t v29 = a4;
  uint64_t v30 = (void *)(*(uint64_t (**)(uint64_t))(v59 + 56))(a4);
  uint64_t v46 = [v30 recordID];

  uint64_t v31 = swift_allocObject();
  swift_weakInit();
  uint64_t v32 = v54;
  uint64_t v33 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v28, a4);
  uint64_t v34 = v49;
  uint64_t v35 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v26, v25, v58);
  unint64_t v36 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v37 = (v56 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = (*(unsigned __int8 *)(v34 + 80) + v37 + 8) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v39 = swift_allocObject();
  uint64_t v40 = v59;
  *(void *)(v39 + 16) = v29;
  *(void *)(v39 + 24) = v40;
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v39 + v36, v32, v29);
  *(void *)(v39 + v37) = v31;
  uint64_t v41 = v35;
  (*(void (**)(unint64_t, void, uint64_t))(v34 + 32))(v39 + v38, v45[0], v35);
  uint64_t v42 = *(void (**)(void *, uint64_t, uint64_t (*)(uint64_t), uint64_t))(*(void *)v48 + 880);
  swift_retain();
  uint64_t v43 = v46;
  v42(v46, 1, sub_100047C70, v39);
  swift_release();

  swift_release();
  v50(v57, v41);
  return swift_release();
}

uint64_t sub_100040A2C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, NSObject *a6)
{
  os_log_t v48 = a6;
  uint64_t v52 = *(void *)(a5 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v51 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v45 - v20;
  uint64_t v49 = v16;
  uint64_t v50 = v19;
  if (a1)
  {
    swift_errorRetain();
    uint64_t v22 = sub_1000383AC();
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v51, v22, v15);
    uint64_t v23 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v12, a2, a5);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v46 = (void *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      v54[0] = v47;
      *(_DWORD *)uint64_t v26 = 136315394;
      uint64_t v27 = (*((uint64_t (**)(uint64_t))v48[1].isa + 4))(a5);
      uint64_t v53 = sub_100004FA4(v27, v28, v54);
      os_log_t v48 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v12, a5);
      *(_WORD *)(v26 + 12) = 2112;
      swift_errorRetain();
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v53 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v46 = v29;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v30 = v48;
      _os_log_impl((void *)&_mh_execute_header, v48, v25, "Error removing record %s from cloud %@", (uint8_t *)v26, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v12, a5);
      swift_errorRelease();
      swift_errorRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v51, v50);
  }
  else
  {
    uint64_t v51 = a4;
    uint64_t v31 = sub_1000383AC();
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v21, v31, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v14, a2, a5);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v47 = a2;
      uint64_t v35 = (uint8_t *)v34;
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      v54[0] = v36;
      uint64_t v46 = v35 + 4;
      uint64_t v37 = (*((uint64_t (**)(uint64_t))v48[1].isa + 4))(a5);
      uint64_t v53 = sub_100004FA4(v37, v38, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = v14;
      uint64_t v40 = a5;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v39, a5);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Removed record %s from cloud", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v42 = v14;
      uint64_t v40 = a5;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v42, a5);
    }

    (*(void (**)(char *, uint64_t))(v49 + 8))(v21, v50);
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v43 = result;
      uint64_t v44 = (*((uint64_t (**)(uint64_t))v48[1].isa + 4))(v40);
      (*(void (**)(uint64_t))(*(void *)v43 + 144))(v44);
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10004108C()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000410FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v81 = *(void *)(v2 - 8);
  uint64_t v82 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v77 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v76 = (char *)&v73 - v5;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v75 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v74 = (uint64_t *)((char *)&v73 - v11);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v73 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v73 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v73 - v18;
  URL.appendingPathComponent(_:)();
  URL.appendingPathComponent(_:)();
  URL.appendingPathComponent(_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  unint64_t v21 = v14;
  uint64_t v22 = v6;
  v20(v21, v6);
  URL.appendingPathExtension(_:)();
  uint64_t v78 = v20;
  uint64_t v79 = v7 + 8;
  v20(v17, v6);
  sub_100014588(0, &qword_10008F7B0);
  sub_1000543A8();
  sub_100054420(a1);
  swift_bridgeObjectRelease();
  uint64_t v23 = self;
  id v24 = [v23 defaultManager];
  URL.path(percentEncoded:)(1);
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v26 = [v24 fileExistsAtPath:v25];

  id v28 = [v23 defaultManager];
  char v80 = v19;
  if (v26)
  {
    URL._bridgeToObjectiveC()(v27);
    os_log_t v30 = v29;
    URL._bridgeToObjectiveC()(v31);
    os_log_type_t v33 = v32;
    Swift::String v84 = 0;
    unsigned __int8 v34 = [v28 replaceItemAtURL:v30 withItemAtURL:v32 backupItemName:0 options:0 resultingItemURL:0 error:&v84];

    uint64_t v35 = v84;
    if ((v34 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    URL._bridgeToObjectiveC()(v27);
    uint64_t v52 = v51;
    URL._bridgeToObjectiveC()(v53);
    uint64_t v55 = v54;
    Swift::String v84 = 0;
    unsigned int v56 = [v28 moveItemAtURL:v52 toURL:v54 error:&v84];

    uint64_t v35 = v84;
    if (!v56)
    {
LABEL_3:
      id v36 = v35;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v37 = sub_1000383AC();
      uint64_t v39 = v81;
      uint64_t v38 = v82;
      uint64_t v40 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v77, v37, v82);
      uint64_t v41 = v75;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v75, a1, v6);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v74 = (void *)swift_slowAlloc();
        uint64_t v76 = (char *)swift_slowAlloc();
        Swift::String v84 = v76;
        *(_DWORD *)uint64_t v44 = 136315394;
        sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v83 = sub_100004FA4(v45, v46, (uint64_t *)&v84);
        uint64_t v73 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v47 = v41;
        os_log_t v48 = (uint64_t (*)(char *, uint64_t))v78;
        v78(v47, v22);
        *(_WORD *)(v44 + 12) = 2112;
        swift_errorRetain();
        uint64_t v49 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v83 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v74 = v49;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Unable to tombstone record to %s due to %@", (uint8_t *)v44, 0x16u);
        sub_10000423C((uint64_t *)&unk_10008EA40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v77, v82);
        return v48(v80, v73);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        uint64_t v71 = (uint64_t (*)(char *, uint64_t))v78;
        v78(v41, v22);
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v38);
        return v71(v80, v22);
      }
    }
  }
  id v57 = v35;
  uint64_t v58 = sub_1000383AC();
  uint64_t v59 = v81;
  uint64_t v60 = v82;
  uint64_t v61 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v76, v58, v82);
  unint64_t v62 = v74;
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v74, a1, v22);
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    size_t v65 = (char *)v62;
    int v66 = (uint8_t *)swift_slowAlloc();
    Swift::String v84 = (char *)swift_slowAlloc();
    *(_DWORD *)int v66 = 136315138;
    uint64_t v77 = (char *)(v66 + 4);
    sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v83 = sub_100004FA4(v67, v68, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v69 = v65;
    uint64_t v70 = (uint64_t (*)(char *, uint64_t))v78;
    v78(v69, v22);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Tombstoned record to %s", v66, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v82);
    return v70(v80, v22);
  }
  else
  {

    uint64_t v72 = (uint64_t (*)(char *, uint64_t))v78;
    v78((char *)v62, v22);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v60);
    return v72(v80, v22);
  }
}

uint64_t sub_100041A1C(uint8_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v123 = a3;
  uint64_t v113 = type metadata accessor for Optional();
  uint64_t v119 = *(char **)(v113 - 8);
  uint64_t v5 = __chkstk_darwin(v113);
  unint64_t v122 = (char *)&v93 - v6;
  uint64_t v108 = *(void (***)(char *, uint64_t))(a2 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v112 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v111 = (char *)&v93 - v9;
  uint64_t v10 = sub_10000423C(&qword_10008F640);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void **)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v128 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v106 = (char *)&v93 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v97 = (char *)&v93 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v121 = (char *)&v93 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v104 = (char *)&v93 - v24;
  __chkstk_darwin(v23);
  unsigned int v26 = (char *)&v93 - v25;
  uint64_t v114 = type metadata accessor for Logger();
  uint64_t v27 = *(void *)(v114 - 8);
  uint64_t v28 = __chkstk_darwin(v114);
  uint64_t v129 = (char *)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v93 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v96 = (char *)&v93 - v34;
  __chkstk_darwin(v33);
  id v36 = (char *)&v93 - v35;
  uint64_t v95 = a2;
  uint64_t v132 = Array.init()();
  id v37 = [self defaultManager];
  uint64_t v38 = (void *)sub_100054A78();

  id v126 = v38;
  if (v38)
  {
    uint64_t v39 = sub_1000383AC();
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    uint64_t v101 = v39;
    uint64_t v103 = v27 + 16;
    Swift::String v100 = v40;
    ((void (*)(char *))v40)(v36);
    uint64_t v41 = (void (*)(char *, uint8_t *, char *))v14[2];
    id v102 = v14 + 2;
    unint64_t v99 = v41;
    v41(v26, a1, (char *)v13);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    uint64_t v125 = v42;
    BOOL v44 = os_log_type_enabled(v42, v43);
    unint64_t v127 = a1;
    uint64_t v128 = (char *)v13;
    uint64_t v118 = v32;
    if (v44)
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v105 = v27;
      v131[0] = v46;
      *(_DWORD *)uint64_t v45 = 136315138;
      uint64_t v129 = (char *)(v45 + 4);
      sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&v130[0] = sub_100004FA4(v47, v48, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v49 = (void (*)(char *, uint64_t))v14[1];
      uint64_t v129 = (char *)(v14 + 1);
      v49(v26, v13);
      uint64_t v50 = v125;
      os_log_type_t v51 = v43;
      uint64_t v52 = v49;
      _os_log_impl((void *)&_mh_execute_header, v125, v51, "Enumerate: %s", v45, 0xCu);
      swift_arrayDestroy();
      uint64_t v27 = v105;
      swift_slowDealloc();
      uint64_t v32 = v118;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v52 = (void (*)(char *, uint64_t))v14[1];
      uint64_t v129 = (char *)(v14 + 1);
      v52(v26, v13);
    }
    uint64_t v98 = *(__n128 (**)(char *, uint64_t))(v27 + 8);
    __n128 v60 = v98(v36, v114);
    uint64_t v125 = (v14 + 7);
    uint64_t v120 = (unsigned int (**)(char *, uint64_t, char *))(v14 + 6);
    int v117 = (void (**)(char *, char *, char *))(v14 + 4);
    id v116 = (unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 6);
    uint64_t v110 = (void (**)(char *, char *, uint64_t))(v108 + 4);
    uint64_t v109 = (void (**)(char *, char *, uint64_t))(v108 + 2);
    ++v108;
    uint64_t v107 = (void (**)(char *, uint64_t))(v119 + 8);
    uint64_t v119 = (char *)&type metadata for Any + 8;
    v60.n128_u64[0] = 136315394;
    __n128 v93 = v60;
    uint64_t v61 = v95;
    unint64_t v62 = v106;
    uint64_t v63 = v104;
    uint64_t v105 = v27 + 8;
    Swift::String v115 = v12;
    while (1)
    {
      if (objc_msgSend(v126, "nextObject", v93.n128_u64[0], v93.n128_u64[1]))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v130, 0, sizeof(v130));
      }
      size_t v65 = v128;
      int v66 = v129;
      sub_100046A18((uint64_t)v130, (uint64_t)v131);
      if (!v131[3]) {
        break;
      }
      int v67 = swift_dynamicCast();
      ((void (*)(char *, void, uint64_t, char *))v125->isa)(v12, v67 ^ 1u, 1, v65);
      if ((*v120)(v12, 1, v65) == 1) {
        goto LABEL_23;
      }
      (*v117)(v63, v12, v65);
      unint64_t v68 = v121;
      URL.deletingPathExtension()();
      uint64_t v69 = URL.lastPathComponent.getter();
      uint64_t v70 = (void (*)(char *, char *))v52;
      unint64_t v72 = v71;
      v70(v68, v65);
      uint64_t v73 = v63;
      uint64_t v74 = v122;
      (*(void (**)(uint64_t, unint64_t, uint8_t *, uint64_t, uint64_t))(*(void *)v124 + 192))(v69, v72, v127, v61, v123);
      if ((*v116)(v74, 1, v61) == 1)
      {
        (*v107)(v74, v113);
        if (URL.hasDirectoryPath.getter())
        {
          uint64_t v63 = v73;
          v70(v73, v128);
          uint64_t v52 = (void (*)(char *, uint64_t))v70;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v75 = v96;
          v100(v96, v101, v114);
          uint64_t v76 = v97;
          uint64_t v77 = v128;
          v99(v97, v127, v128);
          swift_bridgeObjectRetain();
          uint64_t v78 = Logger.logObject.getter();
          os_log_type_t v79 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v78, v79))
          {
            uint64_t v80 = swift_slowAlloc();
            uint64_t v94 = swift_slowAlloc();
            v131[0] = v94;
            *(_DWORD *)uint64_t v80 = v93.n128_u32[0];
            swift_bridgeObjectRetain();
            *(void *)(v80 + 4) = sub_100004FA4(v69, v72, v131);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v80 + 12) = 2080;
            sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
            uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v80 + 14) = sub_100004FA4(v81, v82, v131);
            swift_bridgeObjectRelease();
            uint64_t v83 = v75;
            uint64_t v52 = (void (*)(char *, uint64_t))v70;
            v70(v76, v77);
            _os_log_impl((void *)&_mh_execute_header, v78, v79, "Could not read item %s for records at %s", (uint8_t *)v80, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v61 = v95;
            swift_slowDealloc();
          }
          else
          {

            uint64_t v83 = v75;
            v70(v76, v77);
            uint64_t v52 = (void (*)(char *, uint64_t))v70;
            swift_bridgeObjectRelease_n();
          }
          v98(v83, v114);
          uint64_t v63 = v104;
          v70(v104, v77);
          unint64_t v62 = v106;
        }
        uint64_t v32 = v118;
        uint64_t v12 = v115;
      }
      else
      {
        swift_bridgeObjectRelease();
        os_log_type_t v64 = v111;
        (*v110)(v111, v74, v61);
        (*v109)(v112, v64, v61);
        type metadata accessor for Array();
        Array.append(_:)();
        (*v108)(v64, v61);
        v70(v73, v65);
        uint64_t v32 = v118;
        uint64_t v63 = v73;
        uint64_t v12 = v115;
        uint64_t v52 = (void (*)(char *, uint64_t))v70;
      }
    }
    sub_10000E044((uint64_t)v131, &qword_10008FE80);
    ((void (*)(char *, uint64_t, uint64_t, char *))v125->isa)(v12, 1, 1, v65);
LABEL_23:
    sub_10000E044((uint64_t)v12, &qword_10008F640);
    v100(v32, v101, v114);
    v99(v62, v127, v65);
    swift_bridgeObjectRetain();
    Swift::String v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = swift_slowAlloc();
      uint64_t v129 = v66;
      uint64_t v87 = v86;
      uint64_t v88 = swift_slowAlloc();
      uint64_t v128 = (char *)v52;
      v131[0] = v88;
      *(_DWORD *)uint64_t v87 = 134218242;
      *(void *)&v130[0] = Array.count.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2080;
      sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v89 = v106;
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&v130[0] = sub_100004FA4(v90, v91, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *))v128)(v89, v65);
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Found %ld records at %s", (uint8_t *)v87, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
      v52(v62, (uint64_t)v65);
    }
    v98(v32, v114);
    swift_beginAccess();
  }
  else
  {
    uint64_t v53 = sub_1000383AC();
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v129, v53, v114);
    ((void (*)(char *, uint8_t *, uint64_t))v14[2])(v128, a1, v13);
    uint64_t v54 = Logger.logObject.getter();
    uint64_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, (os_log_type_t)v55))
    {
      unsigned int v56 = (uint8_t *)swift_slowAlloc();
      v131[0] = swift_slowAlloc();
      *(_DWORD *)unsigned int v56 = 136315138;
      unint64_t v127 = v56 + 4;
      sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
      id v57 = v128;
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&v130[0] = sub_100004FA4(v58, v59, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v14[1])(v57, v13);
      _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v55, "Could not enumerate %s", v56, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(char *, uint64_t))v14[1])(v128, v13);
    }

    (*(void (**)(char *, uint64_t))(v27 + 8))(v129, v114);
  }
  return v132;
}

uint64_t sub_100042B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 224))(a1, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 200))(v14, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_100042C70()
{
  type metadata accessor for Optional();
  OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100042D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v25 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - v10;
  if (SystemInfo.deviceFirstUnlocked.getter())
  {
    uint64_t v12 = Data.init(contentsOf:options:)();
    if (v3)
    {
      swift_errorRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v26, 1, 1, v27);
    }
    else
    {
      uint64_t v19 = v12;
      unint64_t v20 = v13;
      uint64_t v21 = v27;
      (*(void (**)(void))(*(void *)a1 + 128))();
      sub_10000AB1C(v19, v20);
      uint64_t v22 = v25;
      uint64_t v23 = v26;
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v26, v6, v21);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v23, 0, 1, v21);
    }
  }
  else
  {
    uint64_t v15 = sub_1000383AC();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v15, v7);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "record call failed because in device is in beforeFirstUnlock state", v18, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v26, 1, 1, v27);
  }
}

uint64_t sub_10004320C()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_10004326C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v150 = a6;
  uint64_t v151 = a2;
  uint64_t v138 = a4;
  uint64_t v143 = a3;
  uint64_t v152 = a1;
  uint64_t v137 = *(void *)(a5 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  id v136 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = v8;
  __chkstk_darwin(v7);
  os_log_type_t v135 = (void (*)(char *, uint64_t, uint64_t))((char *)&v120 - v9);
  uint64_t v140 = type metadata accessor for URLResourceValues();
  uint64_t v10 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v147 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v133 = (char *)&v120 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v139 = (char *)&v120 - v20;
  __chkstk_darwin(v19);
  uint64_t v144 = (char *)&v120 - v21;
  uint64_t v22 = type metadata accessor for URL.DirectoryHint();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v120 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for URL();
  uint64_t v141 = *(void *)(v149 - 8);
  uint64_t v26 = __chkstk_darwin(v149);
  uint64_t v145 = (char *)&v120 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v142 = (char *)&v120 - v29;
  uint64_t v132 = v30;
  __chkstk_darwin(v28);
  uint64_t v146 = (char *)&v120 - v31;
  if (SystemInfo.deviceFirstUnlocked.getter())
  {
    uint64_t v130 = v13;
    uint64_t v131 = v12;
    uint64_t v129 = v10;
    Class v32 = isa;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v152 + 136))(v151, a5, *(void *)(v150 + 8), *(void *)(v150 + 16));
    if (!v32)
    {
      uint64_t v35 = result;
      unint64_t v36 = v34;
      uint64_t v126 = 0;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000AB1C(v35, v36);
      uint64_t v37 = v150;
      uint64_t v38 = v142;
      (*(void (**)(uint64_t, uint64_t))(v150 + 24))(a5, v150);
      Swift::String v39 = URL.path(percentEncoded:)(1);
      unint64_t v127 = *(void (**)(char *, uint64_t))(v141 + 8);
      uint64_t v128 = v141 + 8;
      v127(v38, v149);
      Swift::String v163 = v39;
      (*(void (**)(char *, void, uint64_t))(v23 + 104))(v25, enum case for URL.DirectoryHint.isDirectory(_:), v22);
      sub_100030800();
      uint64_t v40 = (uint64_t)v146;
      URL.appending<A>(path:directoryHint:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      swift_bridgeObjectRelease();
      sub_100014588(0, &qword_10008F7B0);
      sub_1000543A8();
      sub_100054420(v40);
      swift_bridgeObjectRelease();
      uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 32);
      uint64_t v122 = a5;
      uint64_t v42 = v41(a5, v37);
      os_log_type_t v43 = v145;
      (*(void (**)(uint64_t))(*(void *)v152 + 224))(v42);
      swift_bridgeObjectRelease();
      uint64_t v44 = sub_1000383AC();
      uint64_t v45 = v130;
      uint64_t v46 = v131;
      uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v130 + 16);
      unint64_t v48 = v144;
      uint64_t v124 = v44;
      uint64_t v125 = v130 + 16;
      uint64_t v123 = v47;
      ((void (*)(char *))v47)(v144);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        os_log_type_t v51 = (uint8_t *)swift_slowAlloc();
        v163._uint64_t countAndFlagsBits = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v51 = 136315138;
        uint64_t v121 = v51 + 4;
        swift_beginAccess();
        sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v160 = sub_100004FA4(v52, v53, &v163._countAndFlagsBits);
        uint64_t v46 = v131;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Writing record to file: %s", v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v54 = *(char **)(v45 + 8);
        uint64_t v55 = v144;
      }
      else
      {

        uint64_t v54 = *(char **)(v45 + 8);
        uint64_t v55 = v48;
      }
      uint64_t v144 = v54;
      ((void (*)(char *, uint64_t))v54)(v55, v46);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      swift_beginAccess();
      URL._bridgeToObjectiveC()(v60);
      unint64_t v62 = v61;
      Class v63 = isa;
      unsigned int v64 = [(objc_class *)isa writeToURL:v61 atomically:1];

      size_t v65 = v43;
      if (v64)
      {
        int v66 = v139;
        v123(v139, v124, v46);
        int v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = (uint8_t *)swift_slowAlloc();
          v163._uint64_t countAndFlagsBits = swift_slowAlloc();
          *(_DWORD *)uint64_t v69 = 136315138;
          uint64_t v121 = v69 + 4;
          sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v160 = sub_100004FA4(v70, v71, &v163._countAndFlagsBits);
          size_t v65 = v145;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Wrote record to file: %s", v69, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v72 = v131;
          uint64_t v73 = v139;
        }
        else
        {

          uint64_t v73 = v66;
          uint64_t v72 = v46;
        }
        ((void (*)(char *, uint64_t))v144)(v73, v72);
      }
      sub_10000423C(&qword_10008F7C8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1000747D0;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v75 = NSFileProtectionKey;
      uint64_t v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v77 = sub_100044420(inited);
      id v78 = [self defaultManager];
      sub_10004452C(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_1000469D0(&qword_10008F7D0, type metadata accessor for FileAttributeKey);
      Class v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v80 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v163._uint64_t countAndFlagsBits = 0;
      unsigned int v81 = [v78 setAttributes:v79 ofItemAtPath:v80 error:&v163];

      id v82 = (id)v163._countAndFlagsBits;
      if (!v81)
      {
        uint64_t v87 = v82;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v129 + 8))(v147, v140);
        uint64_t v88 = v149;
        uint64_t v89 = (uint64_t (*)(char *, uint64_t))v127;
        v127(v146, v149);
        return v89(v65, v88);
      }
      swift_beginAccess();
      uint64_t v83 = v147;
      uint64_t v84 = v126;
      URL.setResourceValues(_:)();
      uint64_t v85 = v129;
      uint64_t v86 = v149;
      if (v84)
      {
        swift_endAccess();
LABEL_20:

        (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v140);
        uint64_t v90 = (uint64_t (*)(char *, uint64_t))v127;
        v127(v146, v86);
        unint64_t v91 = v65;
        return v90(v91, v86);
      }
      swift_endAccess();
      if ((v138 & 2) == 0) {
        goto LABEL_20;
      }
      uint64_t v126 = 0;
      uint64_t v92 = v137 + 16;
      __n128 v93 = *(void (**)(char *, uint64_t, uint64_t))(v137 + 16);
      v93((char *)v135, v151, v122);
      sub_10000423C(&qword_10008F7D8);
      if (swift_dynamicCast())
      {
        os_log_type_t v135 = v93;
        uint64_t v138 = v92;
        sub_1000477FC(&v160, (uint64_t)&v163);
        uint64_t v94 = URL.lastPathComponent.getter();
        uint64_t v95 = (*(uint64_t (**)(uint64_t))(*(void *)v152 + 240))(v94);
        swift_bridgeObjectRelease();
        uint64_t v96 = v133;
        uint64_t v97 = v131;
        v123(v133, v124, v131);
        unint64_t v139 = (char *)v95;
        swift_retain_n();
        uint64_t v98 = Logger.logObject.getter();
        os_log_type_t v99 = static os_log_type_t.default.getter();
        int v100 = v99;
        if (os_log_type_enabled(v98, v99))
        {
          uint64_t v101 = swift_slowAlloc();
          uint64_t v125 = swift_slowAlloc();
          uint64_t v159 = v125;
          *(_DWORD *)uint64_t v101 = 136315394;
          LODWORD(v124) = v100;
          uint64_t v102 = URL.lastPathComponent.getter();
          *(void *)&long long v160 = sub_100004FA4(v102, v103, &v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v104 = swift_bridgeObjectRelease();
          *(_WORD *)(v101 + 12) = 2080;
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v139 + 256))(&v153, v104);
          v158[0] = v155;
          long long v156 = v153;
          long long v157 = v154;
          long long v160 = v153;
          long long v161 = v154;
          uint64_t v162 = v155;
          sub_100047A54();
          uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v107 = v106;
          sub_1000306C4((uint64_t)&v156);
          sub_1000306C4((uint64_t)&v157);
          sub_1000306F0((uint64_t)v158);
          *(void *)&long long v160 = sub_100004FA4(v105, v107, &v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v98, (os_log_type_t)v124, "Uploading record to cloud: %s for %s", (uint8_t *)v101, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v86 = v149;
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        ((void (*)(char *, uint64_t))v144)(v96, v97);
        uint64_t v109 = v164;
        uint64_t v110 = v165;
        sub_10000AF14(&v163, v164);
        uint64_t v149 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 56))(v109, v110);
        uint64_t v111 = v141;
        (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v142, v143, v86);
        uint64_t v112 = v122;
        v135(v136, v151, v122);
        unint64_t v113 = (*(unsigned __int8 *)(v111 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80);
        uint64_t v114 = v137;
        unint64_t v115 = (v132 + *(unsigned __int8 *)(v137 + 80) + v113) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80);
        id v116 = (char *)swift_allocObject();
        uint64_t v117 = v150;
        *((void *)v116 + 2) = v112;
        *((void *)v116 + 3) = v117;
        *((void *)v116 + 4) = v152;
        (*(void (**)(char *, char *, uint64_t))(v111 + 32))(&v116[v113], v142, v86);
        (*(void (**)(char *, char *, uint64_t))(v114 + 32))(&v116[v115], v136, v112);
        uint64_t v118 = *(void (**)(uint64_t, void, void (*)(void *, char), char *))(*(void *)v139
                                                                                                 + 864);
        swift_retain();
        uint64_t v119 = (void *)v149;
        v118(v149, 0, sub_100047964, v116);
        swift_release();

        swift_release();
        (*(void (**)(char *, uint64_t))(v129 + 8))(v147, v140);
        uint64_t v90 = (uint64_t (*)(char *, uint64_t))v127;
        v127(v146, v86);
        sub_1000057DC((uint64_t)&v163);
        unint64_t v91 = v145;
        return v90(v91, v86);
      }
      uint64_t v162 = 0;
      long long v161 = 0u;
      long long v160 = 0u;

      (*(void (**)(char *, uint64_t))(v85 + 8))(v147, v140);
      uint64_t v108 = (uint64_t (*)(char *, uint64_t))v127;
      v127(v146, v86);
      sub_10000E044((uint64_t)&v160, &qword_10008F7E0);
      return v108(v145, v86);
    }
  }
  else
  {
    uint64_t v56 = sub_1000383AC();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v56, v12);
    id v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      unint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "store call failed because in device is in beforeFirstUnlock state", v59, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    sub_100047794();
    swift_allocError();
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_100044420(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000423C(&qword_10008F7F8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_100046C08((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10004452C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000423C(&qword_10008F7F0);
    uint64_t v2 = (unsigned char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  id v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v30 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v30 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v30 + 1;
    if (!v12)
    {
      int64_t v13 = v30 + 2;
      if (v30 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v30 + 3;
        if (v30 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v30 + 4;
          if (v30 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v30 = v13;
LABEL_28:
    uint64_t v16 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v33[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    uint64_t v15 = *(void **)&v33[0];
    *(void *)&v32[0] = v16;
    type metadata accessor for FileProtectionType(0);
    id v17 = v15;
    id v18 = v16;
    swift_dynamicCast();
    uint64_t v19 = *(void *)&v33[0];
    sub_100007A14((_OWORD *)((char *)v33 + 8), v31);
    sub_100007A14(v31, v33);
    sub_100007A14(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = -1 << v2[32];
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v6[8 * v23];
      }
      while (v27 == -1);
      unint64_t v8 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)&v6[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(void *)(*((void *)v2 + 6) + 8 * v8) = v19;
    uint64_t result = (uint64_t)sub_100007A14(v32, (_OWORD *)(*((void *)v2 + 7) + 32 * v8));
    ++*((void *)v2 + 2);
  }
  int64_t v14 = v30 + 5;
  if (v30 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    sub_10003540C();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v29 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v30 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1000448D0(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  os_log_t v64 = a7;
  uint64_t v70 = a1;
  uint64_t v68 = a6;
  unint64_t v10 = *(uint64_t **)(a6 - 8);
  uint64_t v66 = a5;
  int v67 = v10;
  __chkstk_darwin(a1);
  unint64_t v12 = (char *)v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CloudPairedDeviceRecord();
  __chkstk_darwin(v13);
  uint64_t v15 = (void *)((char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v18 = __chkstk_darwin(v17);
  Swift::Int v20 = (char *)v59 - v19;
  __chkstk_darwin(v18);
  unint64_t v23 = (char *)v59 - v22;
  uint64_t v69 = v24;
  unint64_t v25 = (void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  if (a2)
  {
    swift_errorRetain();
    uint64_t v41 = sub_1000383AC();
    uint64_t v42 = v20;
    (*v25)(v20, v41, v16);
    os_log_type_t v43 = v67;
    uint64_t v44 = v68;
    ((void (*)(char *, uint64_t, uint64_t))v67[2])(v12, v66, v68);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      Class v63 = (void *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      uint64_t v72 = v66;
      *(_DWORD *)uint64_t v47 = 136315394;
      uint64_t v65 = v16;
      unint64_t v48 = v70;
      uint64_t v49 = ((uint64_t (*)(uint64_t))v64[4].isa)(v44);
      uint64_t v71 = sub_100004FA4(v49, v50, &v72);
      os_log_t v64 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v43[1])(v12, v44);
      *(_WORD *)(v47 + 12) = 2112;
      swift_errorRetain();
      uint64_t v51 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v71 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Class v63 = v51;
      sub_100035E8C(v48, 1);
      sub_100035E8C(v48, 1);
      os_log_t v52 = v64;
      _os_log_impl((void *)&_mh_execute_header, v64, v46, "Error updating cloud with record %s: %@", (uint8_t *)v47, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100035E8C(v48, 1);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v42, v65);
    }
    else
    {
      os_log_type_t v58 = v70;
      sub_100035E8C(v70, 1);
      ((void (*)(char *, uint64_t))v43[1])(v12, v44);
      sub_100035E8C(v58, 1);
      sub_100035E8C(v58, 1);

      (*(void (**)(char *, uint64_t))(v69 + 8))(v42, v16);
    }
  }
  else
  {
    uint64_t v61 = v13;
    uint64_t v62 = a4;
    int v67 = v15;
    uint64_t v68 = a3;
    Class v63 = v21;
    BOOL v26 = v70;
    uint64_t v27 = sub_1000383AC();
    os_log_t v28 = (os_log_t)*v25;
    uint64_t v66 = v27;
    ((void (*)(char *))v28)(v23);
    id v29 = v26;
    int64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v65 = v16;
    if (v32)
    {
      uint64_t v33 = swift_slowAlloc();
      os_log_t v64 = v28;
      unint64_t v34 = (uint8_t *)v33;
      uint64_t v60 = swift_slowAlloc();
      uint64_t v72 = v60;
      *(_DWORD *)unint64_t v34 = 136315138;
      v59[1] = v34 + 4;
      id v35 = [v29 recordID];
      id v36 = [v35 recordName];

      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      uint64_t v40 = v70;
      uint64_t v71 = sub_100004FA4(v37, v39, &v72);
      uint64_t v16 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100035E8C(v40, 0);
      sub_100035E8C(v40, 0);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Updating cloud record file: %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      os_log_t v28 = v64;
      swift_slowDealloc();
    }
    else
    {
      unint64_t v53 = v70;
      sub_100035E8C(v70, 0);
      sub_100035E8C(v53, 0);
    }

    (*(void (**)(char *, uint64_t))(v69 + 8))(v23, v16);
    id v54 = v29;
    uint64_t v55 = v67;
    sub_10003A318(v54, v67);
    os_log_t v64 = v28;
    uint64_t v56 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v68 + 208);
    uint64_t v57 = sub_1000469D0(&qword_10008F560, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
    v56(v55, v62, 1, v61, v57);
    sub_10003CE7C((uint64_t)v55);
    notify_post("com.apple.bluetoothuser.cloudChanged");
    sub_100035E8C(v70, 0);
  }
}

uint64_t sub_1000452E0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  id v6 = *(NSObject **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100046B34;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_100037468;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10000FBDC;
  void aBlock[3] = &unk_1000872B0;
  unint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v6, v10);
  _Block_release(v10);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

void sub_1000454F0(void *a1)
{
  uint64_t v2 = sub_10000423C(&qword_10008F640);
  __chkstk_darwin(v2 - 8);
  uint64_t v83 = (uint64_t)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(NSObject **)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v68 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v62 - v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v62 - v11;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  Class v79 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v69 = (char *)&v62 - v18;
  __chkstk_darwin(v17);
  Swift::Int v20 = (char *)&v62 - v19;
  uint64_t v21 = sub_1000383AC();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v77 = v14 + 16;
  uint64_t v78 = v21;
  uint64_t v76 = v22;
  ((void (*)(char *))v22)(v20);
  uint64_t v73 = v5;
  Class isa = (void (*)(char *, char *, uint64_t))v5[2].isa;
  id v82 = a1;
  int v67 = v5 + 2;
  uint64_t v66 = isa;
  isa(v12, (char *)a1, v4);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v64 = v13;
  if (v26)
  {
    os_log_t v81 = v24;
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    id v80 = (id)swift_slowAlloc();
    v85[0] = v80;
    *(_DWORD *)uint64_t v27 = 136315138;
    uint64_t v75 = (void (*)(char *, uint64_t))(v27 + 4);
    sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&v84[0] = sub_100004FA4(v28, v29, (uint64_t *)v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v75 = (void (*)(char *, uint64_t))v73[1].isa;
    v75(v12, v4);
    uint64_t v24 = v81;
    _os_log_impl((void *)&_mh_execute_header, v81, v25, "Obliterating all user's local storage from %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v75 = (void (*)(char *, uint64_t))v73[1].isa;
    v75(v12, v4);
  }

  uint64_t v74 = *(void (**)(char *, uint64_t))(v14 + 8);
  v74(v20, v13);
  id v80 = self;
  id v30 = [v80 defaultManager];
  os_log_type_t v31 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  uint64_t v33 = v69;
  id v82 = v31;
  if (v31)
  {
    uint64_t v65 = 0;
    os_log_t v81 = v73 + 7;
    unint64_t v34 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))&v73[6];
    uint64_t v72 = (void (**)(char *, uint64_t, uint64_t))&v73[4];
    uint64_t v71 = v14 + 8;
    uint64_t v70 = v73 + 1;
    p_type = &stru_10008CFF0.type;
    uint64_t v73 = ((char *)&type metadata for Any + 8);
    *(void *)&long long v32 = 136315138;
    long long v63 = v32;
    *(void *)&long long v32 = 138412290;
    long long v62 = v32;
    uint64_t v36 = v64;
    while (1)
    {
      if (objc_msgSend(v82, p_type[489], (void)v62, *((void *)&v62 + 1)))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v84, 0, sizeof(v84));
      }
      sub_100046A18((uint64_t)v84, (uint64_t)v85);
      if (!v85[3]) {
        break;
      }
      uint64_t v37 = v83;
      int v38 = swift_dynamicCast();
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v81->isa)(v37, v38 ^ 1u, 1, v4);
      if ((*v34)(v37, 1, v4) == 1) {
        goto LABEL_20;
      }
      (*v72)(v10, v83, v4);
      id v39 = [v80 defaultManager];
      URL._bridgeToObjectiveC()(v40);
      uint64_t v42 = v41;
      v85[0] = 0;
      unsigned int v43 = [v39 removeItemAtURL:v41 error:v85];

      id v44 = v85[0];
      if (v43)
      {
        v76(v33, v78, v36);
        uint64_t v45 = v68;
        v66(v68, v10, v4);
        id v46 = v44;
        uint64_t v47 = Logger.logObject.getter();
        os_log_type_t v48 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = v45;
          uint64_t v50 = swift_slowAlloc();
          v85[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v50 = v63;
          sub_1000469D0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v50 + 4) = sub_100004FA4(v51, v52, (uint64_t *)v85);
          swift_bridgeObjectRelease();
          uint64_t v36 = v64;
          unint64_t v53 = v75;
          v75(v49, v4);
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Deleted iCloud user file: %s", (uint8_t *)v50, 0xCu);
          swift_arrayDestroy();
          uint64_t v33 = v69;
          swift_slowDealloc();
          swift_slowDealloc();

          v74(v33, v36);
          v53(v10, v4);
          p_type = (char **)(&stru_10008CFF0 + 16);
        }
        else
        {

          uint64_t v61 = v75;
          v75(v45, v4);
          v74(v33, v36);
          v61(v10, v4);
        }
      }
      else
      {
        id v54 = v85[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        v76(v79, v78, v36);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = swift_slowAlloc();
          uint64_t v58 = v36;
          unint64_t v59 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v57 = v62;
          swift_errorRetain();
          uint64_t v60 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v57 + 4) = v60;
          *unint64_t v59 = v60;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "Could not delete iCloud user file: %@", (uint8_t *)v57, 0xCu);
          sub_10000423C((uint64_t *)&unk_10008EA40);
          swift_arrayDestroy();
          uint64_t v36 = v58;
          swift_slowDealloc();
          uint64_t v33 = v69;
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        swift_errorRelease();
        v74(v79, v36);
        v75(v10, v4);
        uint64_t v65 = 0;
      }
    }
    sub_10000E044((uint64_t)v85, &qword_10008FE80);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v81->isa)(v83, 1, 1, v4);
LABEL_20:

    sub_10000E044(v83, &qword_10008F640);
  }
}

void sub_100045F60()
{
  URL.appendingPathComponent(_:)();
}

uint64_t sub_100045FC8()
{
  type metadata accessor for CloudStorageCoordinator();
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_100046038(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 104);
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = v6(v7);
  if (*(void *)(v8 + 16) && (unint64_t v9 = sub_10002EE3C(a1, a2), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_100014CD0(a1, a2, 0xD00000000000001CLL, 0x800000010007B450, (uint64_t)&off_1000871B8, v20);
    type metadata accessor for CloudStorageCoordinator();
    uint64_t v11 = sub_1000156C0(v20);
    unint64_t v12 = *(uint64_t (**)(unsigned char *))(*(void *)v3 + 120);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v13 = (void (*)(unsigned char *, void))v12(v19);
    uint64_t v15 = v14;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v15;
    *uint64_t v15 = 0x8000000000000000;
    sub_10004712C(v11, a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v15 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v19, 0);
  }
  return v11;
}

uint64_t sub_1000461F8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100046238()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 16) = 0;
  Transaction.capture()();
  sub_100014588(0, (unint64_t *)&qword_10008E900);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  v8[1] = _swiftEmptyArrayStorage;
  sub_1000469D0((unint64_t *)&qword_10008EDE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000423C((uint64_t *)&unk_10008E910);
  sub_10004647C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

unint64_t sub_10004647C()
{
  unint64_t result = qword_10008EDF0;
  if (!qword_10008EDF0)
  {
    sub_100007C10((uint64_t *)&unk_10008E910);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EDF0);
  }
  return result;
}

uint64_t sub_1000464D8(uint64_t a1, uint64_t a2)
{
  return sub_10004669C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000464FC(uint64_t a1, uint64_t a2)
{
  return sub_10004669C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100046524(uint64_t a1)
{
  uint64_t v2 = sub_1000469D0(&qword_10008F7D0, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_1000469D0(&qword_10008F850, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000465E0(uint64_t a1)
{
  uint64_t v2 = sub_1000469D0(&qword_10008F840, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_1000469D0(&qword_10008F848, type metadata accessor for FileProtectionType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10004669C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000466E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10003F904(*(void *)(v1 + 24), *(void *)(v1 + 32), *(char **)(v1 + 40));
  *a1 = result & 1;
  return result;
}

uint64_t type metadata accessor for UserFileManager()
{
  return self;
}

uint64_t sub_10004674C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10004689C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v6 = v0[4];
  uint64_t v7 = (uint64_t)v0 + ((v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000404C4(v6, (uint64_t)v0 + v3, v7, v1, v2);
}

uint64_t sub_100046978()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100046988(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100046998()
{
  return swift_release();
}

uint64_t sub_1000469A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000410FC(a1);
}

uint64_t sub_1000469D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100046A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008FE80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100046A80()
{
  return sub_10004326C(v0[4], v0[5], v0[6], v0[7], v0[2], v0[3]);
}

uint64_t sub_100046AA4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100046B34()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v2 = (void *)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  sub_1000454F0(v2);
}

uint64_t sub_100046B94()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100046BA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v1 + 16) + 240))(*(void *)(v1 + 24), *(void *)(v1 + 32));
  *a1 = result;
  return result;
}

unint64_t sub_100046C08(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_100046C9C(a1, v2);
}

unint64_t sub_100046C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_100046E14(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000423C(&qword_10008F7B8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    char v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10004712C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10002EE3C(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000475A4();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100046E14(v15, a4 & 1);
  unint64_t v21 = sub_10002EE3C(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;

  return swift_bridgeObjectRetain();
}

unint64_t sub_1000472A0()
{
  unint64_t result = qword_10008F648;
  if (!qword_10008F648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F648);
  }
  return result;
}

unint64_t sub_1000472F8()
{
  unint64_t result = qword_10008F650;
  if (!qword_10008F650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F650);
  }
  return result;
}

unint64_t sub_100047350()
{
  unint64_t result = qword_10008F658;
  if (!qword_10008F658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F658);
  }
  return result;
}

unint64_t sub_1000473A8()
{
  unint64_t result = qword_10008F660;
  if (!qword_10008F660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F660);
  }
  return result;
}

unint64_t sub_100047400()
{
  unint64_t result = qword_10008F668;
  if (!qword_10008F668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F668);
  }
  return result;
}

ValueMetadata *type metadata accessor for UserFileManager.UserFileManagerFileType()
{
  return &type metadata for UserFileManager.UserFileManagerFileType;
}

uint64_t getEnumTagSinglePayload for UserFileManager.UserFileManagerError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for UserFileManager.UserFileManagerError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100047554);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004757C()
{
  return 0;
}

ValueMetadata *type metadata accessor for UserFileManager.UserFileManagerError()
{
  return &type metadata for UserFileManager.UserFileManagerError;
}

ValueMetadata *type metadata accessor for UserFileManager.UserFileManagerCloudConstants()
{
  return &type metadata for UserFileManager.UserFileManagerCloudConstants;
}

void *sub_1000475A4()
{
  uint64_t v1 = v0;
  sub_10000423C(&qword_10008F7B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10004775C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_100047794()
{
  unint64_t result = qword_10008F7C0;
  if (!qword_10008F7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F7C0);
  }
  return result;
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

uint64_t sub_1000477FC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100047814()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v6 = *(void *)(v1 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v4 | v7 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v1);

  return _swift_deallocObject(v0, v9, v10);
}

void sub_100047964(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v2[4];
  uint64_t v10 = (uint64_t)v2
      + ((v8 + *(void *)(v7 + 64) + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));

  sub_1000448D0(a1, v4, v9, (uint64_t)v2 + v8, v10, v5, v6);
}

unint64_t sub_100047A54()
{
  unint64_t result = qword_10008F7E8;
  if (!qword_10008F7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F7E8);
  }
  return result;
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

uint64_t sub_100047ABC@<X0>(uint64_t a1@<X8>)
{
  return sub_100042D10(*(void *)(v1 + 32), *(void *)(v1 + 16), a1);
}

uint64_t sub_100047ADC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100047B14()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100047C70(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(NSObject **)(v1 + 24);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  unint64_t v6 = (*(void *)(*(void *)(v3 - 8) + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v8 = *(void *)(v1 + v6);
  uint64_t v9 = (char *)(v1 + ((v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));

  return sub_100040A2C(a1, v1 + v5, v8, v9, v3, v4);
}

uint64_t sub_100047D60()
{
  return sub_1000469D0(&qword_10008F810, type metadata accessor for FileAttributeKey);
}

uint64_t sub_100047DA8()
{
  return sub_1000469D0(&qword_10008F818, type metadata accessor for FileAttributeKey);
}

uint64_t sub_100047DF0()
{
  return sub_1000469D0(&qword_10008F820, type metadata accessor for FileProtectionType);
}

uint64_t sub_100047E38()
{
  return sub_1000469D0(&qword_10008F828, type metadata accessor for FileProtectionType);
}

uint64_t sub_100047E80()
{
  return sub_1000469D0(&qword_10008F830, type metadata accessor for FileProtectionType);
}

uint64_t sub_100047EC8()
{
  return sub_1000469D0(&qword_10008F838, type metadata accessor for FileAttributeKey);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100047F8C();
  id v4 = [self currentRunLoop];
  [v4 run];

  return 0;
}

uint64_t sub_100047F8C()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BluetoothUserDaemon();
  sub_10006B328();
  sub_100005758();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_10004825C();
  sub_10000423C((uint64_t *)&unk_10008E910);
  sub_10004647C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v6 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v7 = *(void *)sub_10006BCCC((uint64_t)v6);
  (*(void (**)(void))(v7 + 400))();
  uint64_t v8 = *(void (**)(uint64_t))(*(void *)*DarwinNotificationManager.shared.unsafeMutableAddressor() + 136);
  uint64_t v9 = swift_retain();
  v8(v9);

  swift_release();
  return swift_release();
}

unint64_t sub_10004825C()
{
  unint64_t result = qword_10008EDE0;
  if (!qword_10008EDE0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EDE0);
  }
  return result;
}

uint64_t Data.init(hexString:)()
{
  if (String.count.getter())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::String v0 = String.uppercased()();
  uint64_t v18 = sub_1000052CC(v0._countAndFlagsBits, (unint64_t)v0._object);
  swift_bridgeObjectRelease();
  uint64_t result = String.count.getter();
  if (result >= 0) {
    uint64_t v2 = result;
  }
  else {
    uint64_t v2 = result + 1;
  }
  if (result >= -1)
  {
    if (result <= 1)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      size_t v3 = v2 >> 1;
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v4[2] = v3;
      bzero(v4 + 4, v3);
    }
    uint64_t v5 = String.count.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5 >= 1)
    {
      unint64_t v6 = 0;
      uint64_t v7 = v18 + 4;
      unint64_t v8 = v18[2];
      while (1)
      {
        uint64_t v9 = __OFADD__(v6, 2) ? 0x7FFFFFFFFFFFFFFFLL : v6 + 2;
        if (v6 >= v8) {
          break;
        }
        if (v6 + 1 >= v8) {
          goto LABEL_36;
        }
        unsigned int v10 = *((unsigned __int8 *)v7 + v6);
        unsigned int v11 = *((unsigned __int8 *)v7 + v6 + 1);
        if (!isxdigit(v10) || (uint64_t result = isxdigit(v11), !result))
        {
          swift_bridgeObjectRelease();
          swift_release();
          return 0;
        }
        if (v10 >= 0x41) {
          int v12 = 55;
        }
        else {
          int v12 = 48;
        }
        unsigned int v13 = v10 - v12;
        if ((v13 & 0xFFFFFF00) != 0) {
          goto LABEL_37;
        }
        if (v11 >= 0x41) {
          int v14 = 55;
        }
        else {
          int v14 = 48;
        }
        unsigned int v15 = v11 - v14;
        if ((v15 & 0xFFFFFF00) != 0) {
          goto LABEL_38;
        }
        if (v13 > 0xFu) {
          goto LABEL_39;
        }
        __int16 v16 = 16 * (v13 & 0xF) + v15;
        if ((v16 & 0x100) != 0) {
          goto LABEL_40;
        }
        if (v6 >> 1 >= v4[2]) {
          goto LABEL_41;
        }
        *((unsigned char *)v4 + (v6 >> 1) + 32) = v16;
        unint64_t v6 = v9;
        if (v9 >= v5) {
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
LABEL_31:
    swift_release();
    uint64_t v17 = sub_100049A40((uint64_t)v4);
    swift_bridgeObjectRelease();
    return v17;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t Data.hexString.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000495D4(0xD000000000000010, 0x800000010007B610);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_23;
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if (v9 + 0x4000000000000000 < 0) {
        goto LABEL_22;
      }
      unsigned int v13 = sub_100048C10(0, (2 * v9) & ~((2 * v9) >> 63), 0, (char *)_swiftEmptyArrayStorage);
      if (a2 >> 62) {
        sub_10000AF6C(a1, a2);
      }
LABEL_10:
      Data.Iterator.init(_:at:)();
      Swift::UInt8_optional v14 = Data.Iterator.next()();
      if ((*(_WORD *)&v14 & 0x100) != 0) {
        goto LABEL_19;
      }
      Swift::UInt8 value = v14.value;
      __int16 v16 = v8 + 4;
      break;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_24;
    case 3uLL:
      unsigned int v13 = sub_100048C10(0, 0, 0, (char *)_swiftEmptyArrayStorage);
      goto LABEL_10;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
  do
  {
    unint64_t v17 = value >> 4;
    if (v17 >= v8[2])
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      JUMPOUT(0x1000487ACLL);
    }
    __int16 v18 = *((_WORD *)v16 + v17);
    unint64_t v20 = *((void *)v13 + 2);
    unint64_t v19 = *((void *)v13 + 3);
    unint64_t v21 = v20 + 1;
    if (v20 >= v19 >> 1) {
      unsigned int v13 = sub_100048C10((char *)(v19 > 1), v20 + 1, 1, v13);
    }
    *((void *)v13 + 2) = v21;
    *(_WORD *)&v13[2 * v20 + 32] = v18;
    if ((unint64_t)(value & 0xF) >= v8[2]) {
      goto LABEL_21;
    }
    __int16 v22 = *((_WORD *)v16 + (value & 0xF));
    unint64_t v23 = *((void *)v13 + 3);
    if ((uint64_t)(v20 + 2) > (uint64_t)(v23 >> 1)) {
      unsigned int v13 = sub_100048C10((char *)(v23 > 1), v20 + 2, 1, v13);
    }
    *((void *)v13 + 2) = v20 + 2;
    *(_WORD *)&v13[2 * v21 + 32] = v22;
    Swift::UInt8_optional v24 = Data.Iterator.next()();
    Swift::UInt8 value = v24.value;
  }
  while ((*(_WORD *)&v24 & 0x100) == 0);
LABEL_19:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  uint64_t v25 = String.init(utf16CodeUnits:count:)();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t Data.intValue.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result = Data.hexString.getter(a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = HIBYTE(v3) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (uint64_t)sub_100048D08(result, v4, 16);
    char v11 = v24;
    goto LABEL_48;
  }
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      unint64_t v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v9 = (uint64_t)sub_100048DF0(v8, v6, 16);
    char v11 = v10 & 1;
LABEL_48:
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0) {
      return v9;
    }
    return 0;
  }
  v25[0] = result;
  v25[1] = v4 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v5)
    {
      uint64_t v17 = v5 - 1;
      if (v17)
      {
        uint64_t v9 = 0;
        __int16 v18 = (unsigned __int8 *)v25 + 1;
        while (1)
        {
          int v19 = *v18;
          unsigned __int8 v20 = v19 - 48;
          if ((v19 - 48) >= 0xA)
          {
            if ((v19 - 65) < 6)
            {
              unsigned __int8 v20 = v19 - 55;
            }
            else
            {
              if ((v19 - 97) > 5) {
                goto LABEL_47;
              }
              unsigned __int8 v20 = v19 - 87;
            }
          }
          if ((unint64_t)(v9 - 0x800000000000000) >> 60 != 15) {
            break;
          }
          BOOL v16 = __OFADD__(16 * v9, v20);
          uint64_t v9 = 16 * v9 + v20;
          if (v16) {
            break;
          }
          ++v18;
          if (!--v17)
          {
LABEL_46:
            char v11 = 0;
            goto LABEL_48;
          }
        }
      }
      goto LABEL_47;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v5)
      {
        uint64_t v9 = 0;
        unint64_t v21 = (unsigned __int8 *)v25;
        while (1)
        {
          int v22 = *v21;
          unsigned __int8 v23 = v22 - 48;
          if ((v22 - 48) >= 0xA)
          {
            if ((v22 - 65) < 6)
            {
              unsigned __int8 v23 = v22 - 55;
            }
            else
            {
              if ((v22 - 97) > 5) {
                goto LABEL_47;
              }
              unsigned __int8 v23 = v22 - 87;
            }
          }
          if ((unint64_t)(v9 - 0x800000000000000) >> 60 != 15) {
            break;
          }
          BOOL v16 = __OFADD__(16 * v9, v23);
          uint64_t v9 = 16 * v9 + v23;
          if (v16) {
            break;
          }
          ++v21;
          if (!--v5) {
            goto LABEL_46;
          }
        }
      }
      goto LABEL_47;
    }
    if (v5)
    {
      uint64_t v12 = v5 - 1;
      if (v12)
      {
        uint64_t v9 = 0;
        unsigned int v13 = (unsigned __int8 *)v25 + 1;
        while (1)
        {
          int v14 = *v13;
          unsigned __int8 v15 = v14 - 48;
          if ((v14 - 48) >= 0xA)
          {
            if ((v14 - 65) < 6)
            {
              unsigned __int8 v15 = v14 - 55;
            }
            else
            {
              if ((v14 - 97) > 5) {
                break;
              }
              unsigned __int8 v15 = v14 - 87;
            }
          }
          if ((unint64_t)(v9 - 0x800000000000000) >> 60 != 15) {
            break;
          }
          BOOL v16 = __OFSUB__(16 * v9, v15);
          uint64_t v9 = 16 * v9 - v15;
          if (v16) {
            break;
          }
          ++v13;
          if (!--v12) {
            goto LABEL_46;
          }
        }
      }
LABEL_47:
      uint64_t v9 = 0;
      char v11 = 1;
      goto LABEL_48;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Data.write(to:excludeFromBackup:options:)(uint64_t a1, int a2)
{
  v15[1] = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  uint64_t v18 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URLResourceValues();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1;
  uint64_t v11 = v19;
  uint64_t result = Data.write(to:options:)();
  if (!v11)
  {
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    uint64_t v13 = v17;
    uint64_t v14 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v6, v16, v17);
    URL.setResourceValues(_:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

char *sub_100048C10(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000423C(&qword_10008F858);
    char v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    char v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 2 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

unsigned __int8 *sub_100048D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    int64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_10004906C();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    int64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    int64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  int64_t v11 = sub_100048DF0(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_100048DF0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10004906C()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_1000490EC(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000490EC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_100049244(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_100005444(v9, 0),
          unint64_t v12 = sub_100049344((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_100049244(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_100049558(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_100049558(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_100049344(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_100049558(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_100049558(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100049558(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

void *sub_1000495D4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_5;
  }
  uint64_t v4 = String.UTF16View._nativeGetOffset(for:)();
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    uint64_t v5 = sub_1000499CC(v4, 0);
    swift_bridgeObjectRetain();
    unint64_t v2 = sub_1000496A8((uint64_t)v7, (uint64_t)(v5 + 4), v4, a1, v2);
    swift_bridgeObjectRelease();
    if (v2 == v4) {
      break;
    }
    __break(1u);
LABEL_5:
    uint64_t v4 = String.UTF16View._foreignCount()();
    if (!v4) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

uint64_t sub_1000496A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(a5) & 0xF;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (!a2)
  {
    uint64_t v11 = 0;
    __int16 v12 = 0;
    a3 = 0;
    char v15 = 1;
    goto LABEL_39;
  }
  swift_bridgeObjectRetain();
  if (!a3)
  {
    uint64_t v11 = 0;
    __int16 v12 = 0;
    char v15 = 1;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
    __break(1u);
    JUMPOUT(0x1000499ACLL);
  }
  uint64_t v11 = 0;
  __int16 v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = a5 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v27 = a1;
  char v15 = 1;
  while (1)
  {
    if ((v15 & 1) == 0)
    {
      char v15 = 1;
      LOWORD(v16) = v12;
      __int16 v12 = 0;
      goto LABEL_9;
    }
    if (v11 >= v8) {
      break;
    }
    if ((a5 & 0x1000000000000000) != 0)
    {
      uint64_t v21 = v14;
      unsigned int v22 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      uint64_t v14 = v21;
      unsigned int v16 = v22;
    }
    else
    {
      if ((a5 & 0x2000000000000000) == 0)
      {
        uint64_t v17 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000) == 0)
        {
          uint64_t v25 = v14;
          uint64_t v17 = _StringObject.sharedUTF8.getter();
          uint64_t v14 = v25;
        }
        unsigned int v16 = *(unsigned __int8 *)(v17 + v11);
        if (*(char *)(v17 + v11) < 0)
        {
          switch(__clz(v16 ^ 0xFF))
          {
            case 0x1Au:
              LOWORD(v16) = *(unsigned char *)(v11 + v17 + 1) & 0x3F | ((v16 & 0x1F) << 6);
              uint64_t v18 = 2;
              goto LABEL_18;
            case 0x1Bu:
              LOWORD(v16) = ((v16 & 0xF) << 12) | ((*(unsigned char *)(v11 + v17 + 1) & 0x3F) << 6) | *(unsigned char *)(v11 + v17 + 2) & 0x3F;
              uint64_t v18 = 3;
              goto LABEL_18;
            case 0x1Cu:
              unsigned int v20 = (char *)(v11 + v17);
              goto LABEL_29;
            default:
              break;
          }
        }
        uint64_t v18 = 1;
LABEL_18:
        v11 += v18;
        char v15 = 1;
        goto LABEL_9;
      }
      v28[0] = a4;
      v28[1] = v14;
      unsigned int v16 = *((unsigned __int8 *)v28 + v11);
      if (*((char *)v28 + v11) < 0)
      {
        switch(__clz(v16 ^ 0xFF))
        {
          case 0x1Au:
            unsigned int v16 = *((unsigned char *)v28 + v11 + 1) & 0x3F | ((v16 & 0x1F) << 6);
            uint64_t v19 = 2;
            break;
          case 0x1Bu:
            unsigned int v16 = ((v16 & 0xF) << 12) | ((*((unsigned char *)v28 + v11 + 1) & 0x3F) << 6) | *((unsigned char *)v28 + v11 + 2) & 0x3F;
            uint64_t v19 = 3;
            break;
          case 0x1Cu:
            unsigned int v20 = (char *)v28 + v11;
LABEL_29:
            unsigned int v16 = ((v16 & 0xF) << 18) | ((v20[1] & 0x3F) << 12) | ((v20[2] & 0x3F) << 6) | v20[3] & 0x3F;
            uint64_t v19 = 4;
            break;
          default:
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        uint64_t v19 = 1;
      }
    }
    v11 += v19;
    if (HIWORD(v16))
    {
      uint64_t v23 = v14;
      __int16 v12 = Unicode.Scalar.UTF16View.subscript.getter();
      __int16 v24 = Unicode.Scalar.UTF16View.subscript.getter();
      uint64_t v14 = v23;
      LOWORD(v16) = v24;
      char v15 = 0;
    }
    else
    {
      char v15 = 1;
    }
LABEL_9:
    *(_WORD *)(a2 + 2 * v13++) = v16;
    if (a3 == v13) {
      goto LABEL_37;
    }
  }
  char v15 = 1;
  a3 = v13;
LABEL_37:
  a1 = v27;
LABEL_38:
  swift_bridgeObjectRelease();
LABEL_39:
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 34) = v15;
  return a3;
}

void *sub_1000499CC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000423C(&qword_10008F858);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = j__malloc_size(v4);
  int64_t v6 = v5 - 32;
  if (v5 < 32) {
    int64_t v6 = v5 - 31;
  }
  v4[2] = a1;
  v4[3] = v6 & 0xFFFFFFFFFFFFFFFELL;
  return v4;
}

uint64_t sub_100049A40(uint64_t a1)
{
  uint64_t v9 = sub_10000423C(&qword_10008F860);
  unint64_t v10 = sub_100049ADC();
  v8[0] = a1;
  uint64_t v2 = sub_10000AF14(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_10003CAF8(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_1000057DC((uint64_t)v8);
  return v5;
}

unint64_t sub_100049ADC()
{
  unint64_t result = qword_10008F868;
  if (!qword_10008F868)
  {
    sub_100007C10(&qword_10008F860);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008F868);
  }
  return result;
}

uint64_t sub_100049B38()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000370B0(v0, qword_100094B18);
  sub_100014818(v0, (uint64_t)qword_100094B18);
  sub_1000381D8();
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

double variable initialization expression of LocalDispatchTimer.millisecondsPerSecond()
{
  return 1000.0;
}

uint64_t LocalDispatchTimer.isCancelled.getter()
{
  return OS_dispatch_source.isCancelled.getter() & 1;
}

uint64_t LocalDispatchTimer.__allocating_init(deadline:repeating:leeway:queue:block:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12 = swift_allocObject();
  LocalDispatchTimer.init(deadline:repeating:leeway:queue:block:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t LocalDispatchTimer.init(deadline:repeating:leeway:queue:block:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v76 = *(void *)(v14 - 8);
  uint64_t v77 = v14;
  __chkstk_darwin(v14);
  uint64_t v75 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchTimeInterval();
  uint64_t v84 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v73 = (uint64_t *)((char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  unsigned int v20 = (uint64_t *)((char *)&v64 - v19);
  uint64_t v80 = type metadata accessor for DispatchTime();
  uint64_t v21 = *(void *)(v80 - 8);
  uint64_t v22 = __chkstk_darwin(v80);
  uint64_t v74 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v83 = (char *)&v64 - v24;
  uint64_t v25 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  char v28 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = (void *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v67 = *(v69 - 1);
  __chkstk_darwin(v69);
  uint64_t v68 = (char *)&v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v65);
  uint64_t v66 = (char *)&v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v32 = __chkstk_darwin(v31);
  Class v79 = (char *)&v64 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v7 + 16) = 0x408F400000000000;
  double v35 = a4 * 1000.0;
  double v36 = fmin(v35, 2147483650.0);
  if ((~*(void *)&v36 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v36 <= -2147483650.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v36 >= 2147483650.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  a5 = a5 * 1000.0;
  *(_DWORD *)(v7 + 24) = (int)v36;
  double v37 = fmin(a5, 2147483650.0);
  if ((~*(void *)&v37 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v37 <= -2147483650.0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v37 >= 2147483650.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  a6 = a6 * 1000.0;
  *(_DWORD *)(v7 + 28) = (int)v37;
  double v38 = fmin(a6, 2147483650.0);
  if ((~*(void *)&v38 & 0x7FF0000000000000) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v38 <= -2147483650.0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v38 >= 2147483650.0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once();
    goto LABEL_14;
  }
  uint64_t v70 = v26;
  uint64_t v71 = v33;
  uint64_t v72 = v32;
  *(_DWORD *)(v7 + 32) = (int)v38;
  uint64_t v81 = v7;
  uint64_t v82 = v21;
  uint64_t v78 = a3;
  if (v35 <= 2147483650.0 && a5 <= 2147483650.0 && a6 <= 2147483650.0) {
    goto LABEL_17;
  }
  uint64_t v64 = (uint64_t)a1;
  if (qword_100093B70 != -1) {
    goto LABEL_33;
  }
LABEL_14:
  uint64_t v39 = type metadata accessor for Logger();
  sub_100014818(v39, (uint64_t)qword_100094B18);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 134218752;
    aBlock[0] = 0x41DFFFFFFFC00000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v42 + 12) = 2048;
    *(double *)long long aBlock = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v42 + 22) = 2048;
    *(double *)long long aBlock = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v42 + 32) = 2048;
    *(double *)long long aBlock = a6;
    a3 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "LocalDispatchTimer: Exceeded maximum value of %f: deadline: %f, repeating: %f, leeway: %f", (uint8_t *)v42, 0x2Au);
    uint64_t v7 = v81;
    swift_slowDealloc();
  }

  a1 = (void *)v64;
LABEL_17:
  *(void *)(v7 + 48) = a2;
  *(void *)(v7 + 56) = a3;
  if (a1)
  {
    swift_retain();
    unsigned int v43 = a1;
  }
  else
  {
    uint64_t v64 = sub_100014588(0, (unint64_t *)&qword_10008E900);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_10004AAF0((unint64_t *)&qword_10008EDE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_10000423C((uint64_t *)&unk_10008E910);
    sub_10000D808((unint64_t *)&qword_10008EDF0, (uint64_t *)&unk_10008E910);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, void *))(v67 + 104))(v68, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v69);
    a1 = 0;
    unsigned int v43 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  }
  uint64_t v44 = v81;
  *(void *)(v81 + 64) = v43;
  sub_100014588(0, &qword_10008F870);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10004AAF0(&qword_10008F878, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  uint64_t v69 = a1;
  uint64_t v68 = v43;
  sub_10000423C(&qword_10008F880);
  sub_10000D808(&qword_10008F888, &qword_10008F880);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v45 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v28, v25);
  *(void *)(v44 + 40) = v45;
  id v46 = v74;
  static DispatchTime.now()();
  *unsigned int v20 = *(int *)(v44 + 24);
  uint64_t v47 = enum case for DispatchTimeInterval.milliseconds(_:);
  uint64_t v48 = v84;
  uint64_t v49 = *(void (**)(void *, uint64_t, uint64_t))(v84 + 104);
  v49(v20, enum case for DispatchTimeInterval.milliseconds(_:), v16);
  + infix(_:_:)();
  uint64_t v50 = v20;
  uint64_t v51 = v20;
  uint64_t v52 = v16;
  uint64_t v70 = *(void *)(v48 + 8);
  ((void (*)(void *, uint64_t))v70)(v51, v16);
  unint64_t v53 = *(char **)(v82 + 8);
  v82 += 8;
  uint64_t v74 = v53;
  ((void (*)(char *, uint64_t))v53)(v46, v80);
  uint64_t v54 = *(unsigned int *)(v44 + 28);
  if ((int)v54 < 1)
  {
    uint64_t v56 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v55 = v73;
  }
  else
  {
    uint64_t v55 = v73;
    *uint64_t v73 = v54;
    uint64_t v56 = v47;
  }
  v49(v55, v56, v16);
  uint64_t v57 = v81;
  swift_getObjectType();
  *uint64_t v50 = *(int *)(v57 + 32);
  v49(v50, v47, v16);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  uint64_t v84 = v48 + 8;
  uint64_t v58 = (void (*)(void *, uint64_t))v70;
  ((void (*)(void *, uint64_t))v70)(v50, v16);
  swift_getObjectType();
  uint64_t v59 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_10004A8A4;
  void aBlock[5] = v59;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_1000874A0;
  uint64_t v60 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v61 = v79;
  static DispatchQoS.unspecified.getter();
  long long v62 = v75;
  sub_10004A934();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v60);

  swift_release();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v62, v77);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v61, v72);
  v58(v55, v52);
  ((void (*)(char *, uint64_t))v74)(v83, v80);
  swift_release();
  swift_release();
  return v57;
}

uint64_t sub_10004A86C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004A8A4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    unint64_t v1 = *(void (**)(uint64_t))(result + 48);
    swift_retain();
    uint64_t v2 = swift_release();
    v1(v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10004A91C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004A92C()
{
  return swift_release();
}

uint64_t sub_10004A934()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

Swift::Void __swiftcall LocalDispatchTimer.resume()()
{
}

Swift::Void __swiftcall LocalDispatchTimer.cancel()()
{
}

uint64_t LocalDispatchTimer.deinit()
{
  swift_unknownObjectRelease();
  swift_release();

  return v0;
}

uint64_t LocalDispatchTimer.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for LocalDispatchTimer()
{
  return self;
}

uint64_t sub_10004AAF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004AB38()
{
  unint64_t v1 = 0xE100000000000000;
  v2._object = (void *)0x800000010007B700;
  v2._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v2);
  v3._object = (void *)0x800000010007B720;
  v3._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v3);
  _StringGuts.grow(_:)(18);
  uint64_t v4 = swift_bridgeObjectRelease();
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 144))(v4);
  if (v6) {
    unint64_t v1 = v6;
  }
  else {
    uint64_t v5 = 45;
  }
  unint64_t v7 = v1;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 10;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 0x71696E5520534449;
  v9._object = (void *)0xEF203A4449206575;
  String.append(_:)(v9);
  uint64_t v10 = swift_bridgeObjectRelease();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 200))(v10);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v13 = *(void *)(type metadata accessor for CloudPairedDeviceRecord() - 8);
    unint64_t v14 = v11 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v15 = *(void *)(v13 + 72);
    do
    {
      v19._uint64_t countAndFlagsBits = sub_100038874(20);
      v19._object = v16;
      v17._uint64_t countAndFlagsBits = 10;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v14 += v15;
      --v12;
    }
    while (v12);
  }
  swift_bridgeObjectRelease();
  return 10;
}

uint64_t sub_10004AD4C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10004AD98(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004ADEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CloudPairedDeviceRecord();
  uint64_t v20 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 144))(v4);
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v1 + 200))();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v13 = v11 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      uint64_t v14 = *(void *)(v20 + 72);
      while (1)
      {
        sub_10003CE18(v13, (uint64_t)v6);
        uint64_t v15 = &v6[*(int *)(v3 + 24)];
        BOOL v16 = *(void *)v15 == v9 && v10 == *((void *)v15 + 1);
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        sub_10003CE7C((uint64_t)v6);
        v13 += v14;
        if (!--v12) {
          goto LABEL_10;
        }
      }
      sub_10004B014((uint64_t)v6, a1);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v3);
    }
    else
    {
LABEL_10:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(a1, 1, 1, v3);
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    Swift::String v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    return v17(a1, 1, 1, v3);
  }
}

uint64_t sub_10004B014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudPairedDeviceRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_10004B078()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v38 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v39 - 8);
  uint64_t v6 = __chkstk_darwin(v39);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v36 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t countAndFlagsBits = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (SystemInfo.deviceFirstUnlocked.getter())
  {
    uint64_t v18 = v1[4];
    sub_10000423C(&qword_10008FA40);
    dispatch_queue_t v37 = v18;
    uint64_t v19 = OS_dispatch_queue.sync<A>(execute:)();
    uint64_t countAndFlagsBits = (char *)aBlock._countAndFlagsBits;
    if (aBlock._countAndFlagsBits) {
      return countAndFlagsBits;
    }
    (*(void (**)(uint64_t))(*v1 + 232))(v19);
    uint64_t v20 = sub_100038810();
    swift_beginAccess();
    uint64_t v21 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v20, v39);
    Swift::String v22 = URL.path(percentEncoded:)(1);
    double v36 = v13;
    uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23(v8, v21);
    Swift::String aBlock = v22;
    uint64_t v24 = v38;
    (*(void (**)(char *, void, uint64_t))(v38 + 104))(v4, enum case for URL.DirectoryHint.isDirectory(_:), v2);
    sub_100030800();
    uint64_t v25 = v36;
    URL.appending<A>(path:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
    swift_bridgeObjectRelease();
    v23(v11, v21);
    uint64_t v15 = *(void *)(*(void *)*sub_10003ECCC() + 184);
    uint64_t v26 = type metadata accessor for CloudPairedDeviceRecord();
    uint64_t v27 = sub_1000502DC(&qword_10008F560, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
    swift_retain();
    uint64_t countAndFlagsBits = (char *)((uint64_t (*)(char *, uint64_t, uint64_t))v15)(v25, v26, v27);
    swift_release();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v1;
    *(void *)(v14 + 24) = countAndFlagsBits;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = sub_10004E288;
    *(void *)(v28 + 24) = v14;
    unsigned int v43 = sub_1000144C0;
    uint64_t v44 = v28;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    os_log_type_t v41 = sub_10000FBDC;
    uint64_t v42 = &unk_100087518;
    uint64_t v29 = _Block_copy(&aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v37, v29);
    _Block_release(v29);
    v23(v25, v39);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return countAndFlagsBits;
    }
    __break(1u);
  }
  uint64_t v31 = sub_100038314();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(countAndFlagsBits, v31, v14);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Cloud Paired Devices read failed because device is in before first unlock state", v34, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(countAndFlagsBits, v14);
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_10004B664()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10004B6B0(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004B704@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10004B788(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_10004B814()
{
  return swift_retain();
}

uint64_t sub_10004B860(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t sub_10004B8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  sub_10004B904(a1, a2);
  return v4;
}

void *sub_10004B904(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  uint64_t v4 = sub_10000423C(&qword_10008FA48);
  __chkstk_darwin(v4 - 8);
  uint64_t v60 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  __chkstk_darwin(v6);
  uint64_t v71 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for URL.DirectoryHint();
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  long long v63 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v66 = *(void *)(v9 - 8);
  uint64_t v67 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v61 = (char *)&v58 - v13;
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v14);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005758();
  v2[2] = 0;
  long long v62 = v2 + 2;
  v2[3] = 0;
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v16);
  static DispatchQoS.unspecified.getter();
  v76[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000502DC((unint64_t *)&qword_10008EDE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000423C((uint64_t *)&unk_10008E910);
  sub_10000D808((unint64_t *)&qword_10008EDF0, (uint64_t *)&unk_10008E910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v2[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v2[5] = 0;
  uint64_t v68 = (void *)((char *)v2 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator);
  *uint64_t v68 = 0;
  uint64_t v20 = (uint64_t)v2 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageNotificationSubscription;
  uint64_t v21 = sub_10000423C(&qword_10008EE48);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56);
  uint64_t v59 = v21;
  uint64_t v69 = v22 + 56;
  uint64_t v70 = v23;
  ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v20, 1, 1);
  uint64_t v25 = v74;
  uint64_t v24 = v75;
  v2[6] = v74;
  v2[7] = v24;
  type metadata accessor for UserFileManager();
  swift_bridgeObjectRetain();
  sub_10003F2D0((uint64_t)v12);
  v76[0] = v25;
  v76[1] = v24;
  uint64_t v26 = v64;
  uint64_t v27 = v63;
  uint64_t v28 = v65;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, enum case for URL.DirectoryHint.isDirectory(_:), v65);
  sub_100030800();
  uint64_t v29 = v61;
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  uint64_t v31 = v66;
  uint64_t v30 = v67;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v67);
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))((uint64_t)v3 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL, v29, v30);
  uint64_t v32 = IDSCopyLocalDeviceUniqueID();
  if (v32)
  {
    os_log_type_t v33 = (void *)v32;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;
  }
  else
  {
    uint64_t v34 = 0;
    unint64_t v36 = 0;
  }
  swift_beginAccess();
  v3[2] = v34;
  v3[3] = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = sub_100038314();
  uint64_t v38 = v71;
  uint64_t v39 = v72;
  uint64_t v40 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v37, v73);
  swift_retain_n();
  swift_bridgeObjectRetain();
  os_log_type_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    v76[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315394;
    if (v36) {
      uint64_t v44 = v34;
    }
    else {
      uint64_t v44 = 45;
    }
    if (v36) {
      unint64_t v45 = v36;
    }
    else {
      unint64_t v45 = 0xE100000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v77 = sub_100004FA4(v44, v45, v76);
    uint64_t v67 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v46 = swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2048;
    uint64_t v47 = *(void *)((*(uint64_t (**)(uint64_t))(*v3 + 200))(v46) + 16);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v77 = v47;
    uint64_t v20 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Start Cloud Pairing Manager (IDS ID: %s) with cached records count: %ld", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v73);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
  }
  uint64_t v48 = (uint64_t)v60;
  uint64_t v50 = v74;
  uint64_t v49 = v75;
  uint64_t v51 = v59;
  uint64_t v52 = sub_10003ECCC();
  unint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)*v52 + 232);
  swift_retain();
  uint64_t v54 = v53(v50, v49);
  swift_release();
  uint64_t v55 = v68;
  swift_beginAccess();
  *uint64_t v55 = v54;
  swift_release();
  uint64_t v56 = *(void (**)(uint64_t, uint64_t))(*(void *)*v52 + 232);
  swift_retain();
  v56(v50, v49);
  swift_release();
  swift_bridgeObjectRelease();
  v76[3] = type metadata accessor for CloudPairingManager();
  v76[4] = (uint64_t)&off_100087540;
  v76[0] = (uint64_t)v3;
  swift_retain();
  sub_10002D6E0();
  swift_release();
  sub_1000057DC((uint64_t)v76);
  v70(v48, 0, 1, v51);
  swift_beginAccess();
  sub_10004E33C(v48, v20);
  swift_endAccess();
  return v3;
}

uint64_t sub_10004C278()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000423C(&qword_10008FA48);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000423C(&qword_10008EE48);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageNotificationSubscription;
  swift_beginAccess();
  sub_10004E3A4(v13, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    uint64_t v14 = &qword_10008FA48;
    uint64_t v15 = (uint64_t)v8;
  }
  else
  {
    sub_10004E40C((uint64_t)v8, (uint64_t)v12);
    uint64_t v16 = (uint64_t *)*sub_10003ECCC();
    swift_beginAccess();
    uint64_t v17 = *(void *)(v1 + 48);
    uint64_t v18 = *(void *)(v1 + 56);
    uint64_t v19 = *v16;
    os_log_type_t v33 = v5;
    uint64_t v20 = v3;
    uint64_t v21 = v2;
    uint64_t v22 = v13;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v19 + 232);
    swift_retain();
    swift_bridgeObjectRetain();
    v23(v17, v18);
    uint64_t v13 = v22;
    uint64_t v2 = v21;
    uint64_t v3 = v20;
    uint64_t v5 = v33;
    swift_release();
    swift_bridgeObjectRelease();
    sub_10002D978((uint64_t)v12);
    swift_release();
    uint64_t v14 = &qword_10008EE48;
    uint64_t v15 = (uint64_t)v12;
  }
  sub_10000E044(v15, v14);
  uint64_t v24 = *sub_10003ECCC();
  uint64_t v25 = (char *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v25, v2);
  uint64_t v26 = *(void (**)(char *))(*(void *)v24 + 216);
  swift_retain();
  v26(v5);
  swift_release();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v3 + 8);
  v27(v5, v2);
  uint64_t v28 = v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator;
  swift_beginAccess();
  if (*(void *)v28)
  {
    uint64_t v29 = *(void (**)(uint64_t))(**(void **)v28 + 744);
    uint64_t v30 = swift_retain();
    v29(v30);
    swift_release();
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27(v25, v2);
  swift_release();
  sub_10000E044(v13, &qword_10008FA48);
  return v1;
}

uint64_t sub_10004C668()
{
  sub_10004C278();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10004C6C0()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 256))();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 736))(result);
    return swift_release();
  }
  return result;
}

uint64_t sub_10004C75C()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 256))();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 744))(result);
    return swift_release();
  }
  return result;
}

uint64_t sub_10004C7F8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = *(void *)(v0 + 32);
  aBlock[4] = sub_100050334;
  uint64_t v13 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100087670;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_1000502DC((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000D808((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_10004CA88(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v82 = type metadata accessor for URL();
  uint64_t v80 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v81 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Logger();
  uint64_t v86 = *(void *)(v83 - 8);
  uint64_t v5 = __chkstk_darwin(v83);
  uint64_t v78 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v76 = (char *)&v72 - v7;
  uint64_t v8 = sub_10000423C(&qword_10008FA50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CloudPairedDeviceRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v75 = (uint64_t)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v73 = (uint64_t)&v72 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v72 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v72 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v84 = (uint64_t)&v72 - v24;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 200))(v23);
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    Class v79 = v22;
    uint64_t v77 = v1;
    uint64_t v27 = v25 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v28 = *(int *)(v11 + 24);
    uint64_t v74 = a1;
    uint64_t v29 = (void *)(a1 + v28);
    uint64_t v30 = *(void *)(v12 + 72);
    while (1)
    {
      sub_10003CE18(v27, (uint64_t)v19);
      uint64_t v31 = &v19[*(int *)(v11 + 24)];
      BOOL v32 = *(void *)v31 == *v29 && *((void *)v31 + 1) == v29[1];
      if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      sub_10003CE7C((uint64_t)v19);
      v27 += v30;
      if (!--v26)
      {
        uint64_t v33 = 1;
        goto LABEL_11;
      }
    }
    sub_10004B014((uint64_t)v19, (uint64_t)v10);
    uint64_t v33 = 0;
LABEL_11:
    uint64_t v2 = v77;
    uint64_t v22 = v79;
    a1 = v74;
  }
  else
  {
    uint64_t v33 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v33, 1, v11);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10000E044((uint64_t)v10, &qword_10008FA50);
    uint64_t v34 = v84;
    sub_10003CE18(a1, v84);
  }
  else
  {
    sub_10004B014((uint64_t)v10, (uint64_t)v22);
    Swift::Int v35 = sub_10003BF58();
    if (v35 == sub_10003BF58())
    {
      uint64_t v36 = sub_1000383AC();
      uint64_t v37 = v86;
      uint64_t v38 = v76;
      uint64_t v39 = v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v76, v36, v83);
      Class v79 = v22;
      uint64_t v40 = v73;
      sub_10003CE18((uint64_t)v22, v73);
      uint64_t v41 = v75;
      sub_10003CE18(a1, v75);
      os_log_type_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      LODWORD(v84) = v43;
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v82 = swift_slowAlloc();
        uint64_t v88 = v82;
        *(_DWORD *)uint64_t v44 = 136315394;
        uint64_t v77 = v2;
        sub_1000502DC(&qword_10008FA58, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v87 = sub_100004FA4(v45, v46, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10003CE7C(v40);
        *(_WORD *)(v44 + 12) = 2080;
        uint64_t v47 = v75;
        uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v87 = sub_100004FA4(v48, v49, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10003CE7C(v47);
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v84, "Dropping same record update: %s for %s", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v50 = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v76, v83);
        uint64_t v2 = v77;
      }
      else
      {
        sub_10003CE7C(v40);
        sub_10003CE7C(v41);

        uint64_t v50 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v38, v39);
      }
      (*(void (**)(uint64_t))(*(void *)v2 + 352))(v50);
      uint64_t v70 = (uint64_t)v79;
      return sub_10003CE7C(v70);
    }
    uint64_t v34 = v84;
    sub_10003CE18((uint64_t)v22, v84);
    sub_10003A114(a1);
    sub_10003CE7C((uint64_t)v22);
  }
  uint64_t v52 = v80;
  uint64_t v51 = v81;
  uint64_t v53 = v85;
  sub_10004C7F8();
  uint64_t v54 = *sub_10003ECCC();
  uint64_t v55 = *(void (**)(uint64_t))(*(void *)v2 + 232);
  uint64_t v56 = swift_retain();
  v55(v56);
  uint64_t v57 = *(void *)sub_10003E9C0();
  uint64_t v58 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)v54 + 208);
  uint64_t v59 = sub_1000502DC(&qword_10008F560, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
  v58(v34, v51, v57, v11, v59);
  uint64_t v60 = (void (**)(char *, uint64_t))(v52 + 8);
  if (v53)
  {
    (*v60)(v51, v82);
    swift_release();
    uint64_t v61 = sub_1000383AC();
    uint64_t v62 = v86;
    long long v63 = v78;
    uint64_t v64 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v78, v61, v83);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 138412290;
      swift_errorRetain();
      uint64_t v69 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v88 = v69;
      uint64_t v34 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v68 = v69;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Unable to store device record with error: %@", v67, 0xCu);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      long long v63 = v78;
      swift_slowDealloc();
      uint64_t v62 = v86;
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
  }
  else
  {
    swift_release();
    (*v60)(v51, v82);
  }
  uint64_t v70 = v34;
  return sub_10003CE7C(v70);
}

uint64_t sub_10004D3F0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004C7F8();
  uint64_t v7 = *sub_10003ECCC();
  uint64_t v8 = *(void (**)(uint64_t))(*(void *)v1 + 232);
  uint64_t v9 = swift_retain();
  v8(v9);
  uint64_t v10 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v7 + 160);
  uint64_t v11 = type metadata accessor for CloudPairedDeviceRecord();
  uint64_t v12 = sub_1000502DC(&qword_10008FD90, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
  v10(a1, v6, v11, v12);
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return notify_post("com.apple.bluetoothuser.cloudChanged");
}

uint64_t sub_10004D584()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 200))();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(type metadata accessor for CloudPairedDeviceRecord() - 8);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      sub_10004D670(v4, v0);
      v4 += v5;
      --v2;
    }
    while (v2);
  }

  return swift_bridgeObjectRelease();
}

void sub_10004D670(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v74 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v70 = *(void *)(v5 - 8);
  uint64_t v71 = v5;
  __chkstk_darwin(v5);
  uint64_t v69 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v72 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v75 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000423C((uint64_t *)&unk_10008F460);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v65 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v67 = (char *)&v64 - v12;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  os_log_type_t v66 = (char *)&v64 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v64 - v20;
  uint64_t v22 = type metadata accessor for CloudPairedDeviceRecord();
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v68 = (uint64_t)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v64 - v25;
  uint64_t v27 = sub_1000502DC(&qword_10008FD90, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
  uint64_t v77 = v22;
  id v78 = (id)sub_100037758(v22, v27);
  id v28 = [v78 recordChangeTag];
  uint64_t v76 = a1;
  uint64_t v73 = v7;
  if (!v28)
  {
    sub_10003CE18(a1, (uint64_t)v26);
    goto LABEL_7;
  }
  uint64_t v29 = v28;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  swift_bridgeObjectRelease();
  sub_10003CE18(a1, (uint64_t)v26);
  if (!v31)
  {
LABEL_7:
    sub_10003CE7C((uint64_t)v26);
    goto LABEL_16;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v21, &v26[*(int *)(v77 + 20)], v13);
  id v32 = [v78 modificationDate];
  if (v32)
  {
    uint64_t v33 = v32;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v35 = (uint64_t)v67;
    v34(v67, v17, v13);
    uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v64(v35, 0, 1, v13);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v35, 1, v13) != 1)
    {
      uint64_t v36 = v66;
      v34(v66, (char *)v35, v13);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v35 = (uint64_t)v67;
    uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v64((uint64_t)v67, 1, 1, v13);
  }
  id v37 = [v78 creationDate];
  if (!v37)
  {
    uint64_t v39 = (uint64_t)v65;
    v64((uint64_t)v65, 1, 1, v13);
    uint64_t v36 = v66;
    goto LABEL_13;
  }
  uint64_t v38 = v37;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v39 = (uint64_t)v65;
  uint64_t v67 = *(char **)(v14 + 32);
  ((void (*)(char *, char *, uint64_t))v67)(v65, v17, v13);
  v64(v39, 0, 1, v13);
  int v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v39, 1, v13);
  uint64_t v36 = v66;
  if (v40 == 1)
  {
LABEL_13:
    static Date.now.getter();
    sub_10000E044(v39, (uint64_t *)&unk_10008F460);
    goto LABEL_14;
  }
  ((void (*)(char *, uint64_t, uint64_t))v67)(v66, v39, v13);
LABEL_14:
  sub_10000E044(v35, (uint64_t *)&unk_10008F460);
LABEL_15:
  char v41 = static Date.> infix(_:_:)();
  os_log_type_t v42 = *(void (**)(char *, uint64_t))(v14 + 8);
  v42(v36, v13);
  v42(v21, v13);
  sub_10003CE7C((uint64_t)v26);
  if ((v41 & 1) == 0)
  {
LABEL_20:

    return;
  }
LABEL_16:
  uint64_t v43 = v74;
  sub_10004C7F8();
  uint64_t v44 = *sub_10003ECCC();
  uint64_t v45 = *(void (**)(uint64_t))(*(void *)v43 + 232);
  uint64_t v46 = swift_retain();
  uint64_t v47 = v75;
  v45(v46);
  uint64_t v48 = *(void *)sub_10003E9C0();
  unint64_t v49 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)v44 + 208);
  uint64_t v50 = sub_1000502DC(&qword_10008F560, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
  uint64_t v51 = v76;
  v49(v76, v47, v48, v77, v50);
  if (!v3)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v47, v73);
    swift_release();
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t))(v72 + 8))(v47, v73);
  swift_release();
  uint64_t v52 = sub_1000383AC();
  uint64_t v53 = v69;
  uint64_t v54 = v70;
  uint64_t v55 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v52, v71);
  uint64_t v56 = v68;
  sub_10003CE18(v51, v68);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = swift_slowAlloc();
    uint64_t v60 = (void *)swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    uint64_t v80 = v76;
    *(_DWORD *)uint64_t v59 = 136315394;
    sub_1000502DC(&qword_10008FA58, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
    uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v79 = sub_100004FA4(v61, v62, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10003CE7C(v56);
    *(_WORD *)(v59 + 12) = 2112;
    swift_errorRetain();
    uint64_t v63 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v79 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v60 = v63;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Error saving cloud record to cloud: %s due to %@", (uint8_t *)v59, 0x16u);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v71);
  }
  else
  {

    swift_errorRelease();
    sub_10003CE7C(v56);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v55);
  }
}

uint64_t sub_10004E008()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t sub_10004E04C(uint64_t a1, char *a2, unint64_t a3)
{
  return sub_10004E474(a2, a3);
}

uint64_t sub_10004E078(uint64_t a1, unint64_t a2)
{
  return sub_10004FA98(a2);
}

uint64_t sub_10004E0A0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352))();
}

uint64_t sub_10004E0EC()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_10004C7F8();
  uint64_t v6 = *sub_10003ECCC();
  uint64_t v7 = *(void (**)(uint64_t))(*(void *)v5 + 232);
  uint64_t v8 = swift_retain();
  v7(v8);
  (*(void (**)(char *))(*(void *)v6 + 216))(v4);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_10004E228@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10004E248()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004E288()
{
  *(void *)(*(void *)(v0 + 16) + 40) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004E2C8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004E2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004E2E8()
{
  return swift_release();
}

uint64_t type metadata accessor for CloudPairingManager()
{
  uint64_t result = qword_100093D90;
  if (!qword_100093D90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10004E33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008FA48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008FA48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E40C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008EE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E474(char *a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v145 = type metadata accessor for CloudPairedDeviceRecord();
  __chkstk_darwin(v145);
  uint64_t v7 = (uint64_t *)((char *)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v144 = (char *)&v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v162 = (char *)&v139 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  *(void *)&long long v161 = (char *)&v139 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (void (**)(char *, uint64_t))((char *)&v139 - v16);
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v166 = (char *)&v139 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v149 = (char *)&v139 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v151 = (char *)&v139 - v25;
  __chkstk_darwin(v24);
  long long v160 = (char *)&v139 - v26;
  uint64_t v173 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v142 = *(void *)(v173 - 8);
  __chkstk_darwin(v173);
  v172 = (char *)&v139 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for DispatchQoS();
  uint64_t v141 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  v170 = (char *)&v139 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *((void *)a1 + 2);
  unint64_t v150 = a2;
  uint64_t v177 = v3;
  uint64_t v159 = v7;
  uint64_t v174 = v8;
  uint64_t v176 = v18;
  if (v29)
  {
    uint64_t v30 = v18;
    uint64_t v31 = v29;
    Swift::String v163 = (void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v139 = v19;
    uint64_t v164 = (uint64_t (**)(uint64_t))(v19 + 8);
    long long v156 = &v181;
    uint64_t v155 = (void (**)(char *, uint64_t))(v142 + 8);
    long long v154 = (void (**)(char *, uint64_t))(v141 + 8);
    Swift::String v148 = &v186;
    uint64_t v140 = v9;
    long long v153 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    uint64_t v32 = 32;
    *(void *)&long long v33 = 138412290;
    long long v143 = v33;
    *(void *)&long long v33 = 138412546;
    long long v147 = v33;
    uint64_t v146 = (char *)&type metadata for Any + 8;
    uint64_t v34 = v31;
    uint64_t v35 = v30;
    long long v157 = a1;
    uint64_t v165 = v17;
    *(void *)&long long v158 = v9 + 8;
    while (1)
    {
      id v47 = *(id *)&a1[v32];
      id v48 = [v47 zoneID];
      id v49 = [v48 zoneName];

      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v52 = v51;

      uint64_t v53 = sub_100038750();
      swift_beginAccess();
      if (*v53 == v50 && v53[1] == v52) {
        break;
      }
      char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v55) {
        goto LABEL_14;
      }
      uint64_t v56 = sub_1000383AC();
      (*v163)(v151, v56, v35);
      uint64_t v57 = v47;
      os_log_type_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = swift_slowAlloc();
        uint64_t v61 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = v143;
        *(void *)(v60 + 4) = v57;
        *uint64_t v61 = v57;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Ignoring deleted record from unknown zone: %@", (uint8_t *)v60, 0xCu);
        sub_10000423C((uint64_t *)&unk_10008EA40);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v35 = v176;
        swift_slowDealloc();
      }
      else
      {

        os_log_type_t v58 = v57;
      }

      ((void (*)(char *, uint64_t))*v164)(v151, v35);
LABEL_5:
      v32 += 24;
      if (!--v34)
      {
        swift_bridgeObjectRelease();
        a2 = v150;
        uint64_t v9 = v140;
        uint64_t v19 = v139;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
LABEL_14:
    unint64_t v168 = v32;
    uint64_t v169 = v34;
    uint64_t v183 = sub_100050334;
    uint64_t v184 = v3;
    Swift::String aBlock = (void (**)(void, void, void))_NSConcreteStackBlock;
    uint64_t v180 = 1107296256;
    v181 = sub_100006FA4;
    v182 = &unk_100087648;
    unint64_t v62 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v63 = v35;
    uint64_t v64 = v3;
    uint64_t v65 = v170;
    static DispatchQoS.unspecified.getter();
    uint64_t v185 = _swiftEmptyArrayStorage;
    sub_1000502DC((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000423C((uint64_t *)&unk_10008E960);
    sub_10000D808((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
    os_log_type_t v66 = v172;
    uint64_t v67 = v173;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v62);
    (*v155)(v66, v67);
    uint64_t v68 = v65;
    uint64_t v69 = v64;
    uint64_t v70 = v63;
    (*v154)(v68, v171);
    swift_release();
    uint64_t v71 = sub_1000383AC();
    uint64_t v72 = v160;
    (*v163)(v160, v71, v70);
    id v73 = v47;
    swift_retain_n();
    id v74 = v73;
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.info.getter();
    BOOL v77 = os_log_type_enabled(v75, v76);
    id v175 = v74;
    if (v77)
    {
      uint64_t v78 = swift_slowAlloc();
      uint64_t v79 = (void *)swift_slowAlloc();
      uint64_t v167 = (void (**)(void, void, void))swift_slowAlloc();
      Swift::String aBlock = v167;
      *(_DWORD *)uint64_t v78 = v147;
      uint64_t v185 = v74;
      id v80 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v79 = v74;

      *(_WORD *)(v78 + 12) = 2080;
      uint64_t v152 = v78 + 14;
      uint64_t v81 = v165;
      (*(void (**)(void))(*(void *)v177 + 232))();
      sub_1000502DC(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v84 = v83;
      id v37 = (void (**)(char *, uint64_t))v158;
      (*(void (**)(void, uint64_t))v158)(v81, v174);
      uint64_t v185 = (void *)sub_100004FA4(v82, v84, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v85 = v176;
      uint64_t v69 = v177;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Deleting record: %@ from %s", (uint8_t *)v78, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v36 = v174;
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))*v164)(v72, v85);
    }
    else
    {

      swift_release_n();
      ((void (*)(char *, uint64_t))*v164)(v72, v70);
      uint64_t v36 = v174;
      id v37 = (void (**)(char *, uint64_t))v158;
    }
    uint64_t v38 = *sub_10003ECCC();
    swift_retain();
    id v39 = [v175 recordName];
    uint64_t v167 = (void (**)(void, void, void))static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;

    os_log_type_t v42 = (char *)v161;
    (*(void (**)(void))(*(void *)v69 + 232))();
    uint64_t v43 = sub_100038810();
    swift_beginAccess();
    uint64_t v44 = v162;
    (*v153)(v162, v43, v36);
    URL.path.getter();
    uint64_t v45 = *v37;
    (*v37)(v44, v36);
    uint64_t v46 = v165;
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    v45(v42, v36);
    (*(void (**)(void, uint64_t, void (**)(char *, uint64_t)))(*(void *)v38 + 144))(v167, v41, v46);

    swift_release();
    swift_bridgeObjectRelease();
    v45((char *)v46, v36);
    uint64_t v35 = v176;
    uint64_t v3 = v177;
    a1 = v157;
    uint64_t v34 = v169;
    uint64_t v32 = v168;
    goto LABEL_5;
  }
LABEL_19:
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v86 = result;
    if (result) {
      goto LABEL_21;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    return notify_post("com.apple.bluetoothuser.cloudChanged");
  }
  uint64_t v86 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v86) {
    goto LABEL_45;
  }
LABEL_21:
  if (v86 >= 1)
  {
    uint64_t v89 = 0;
    id v175 = 0;
    unint64_t v168 = a2 & 0xC000000000000001;
    uint64_t v167 = (void (**)(void, void, void))(v19 + 16);
    uint64_t v165 = (void (**)(char *, uint64_t))(v19 + 8);
    uint64_t v164 = &v181;
    Swift::String v163 = (void (**)(char *, uint64_t, uint64_t))(v142 + 8);
    uint64_t v162 = (char *)(v141 + 8);
    long long v160 = (char *)(v9 + 8);
    *(void *)&long long v88 = 136315394;
    long long v158 = v88;
    long long v157 = (char *)&type metadata for Any + 8;
    *(void *)&long long v88 = 138412546;
    long long v161 = v88;
    uint64_t v169 = v86;
    while (1)
    {
      if (v168) {
        id v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v91 = *(id *)(a2 + 8 * v89 + 32);
      }
      uint64_t v92 = v91;
      id v93 = [v91 recordID];
      id v94 = [v93 zoneID];

      id v95 = [v94 zoneName];
      uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v98 = v97;

      os_log_type_t v99 = sub_100038750();
      swift_beginAccess();
      if (*v99 == v96 && v99[1] == v98)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v101 & 1) == 0)
        {
          uint64_t v102 = sub_1000383AC();
          unint64_t v103 = v149;
          uint64_t v104 = v176;
          (*v167)(v149, v102, v176);
          id v105 = v92;
          unint64_t v106 = Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v106, v107))
          {
            uint64_t v108 = swift_slowAlloc();
            uint64_t v109 = (void *)swift_slowAlloc();
            Swift::String aBlock = (void (**)(void, void, void))swift_slowAlloc();
            *(_DWORD *)uint64_t v108 = v158;
            id v110 = [v105 recordID];
            id v111 = [v110 zoneID];

            id v112 = [v111 zoneName];
            uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v115 = v114;

            *(void *)(v108 + 4) = sub_100004FA4(v113, v115, (uint64_t *)&aBlock);
            swift_bridgeObjectRelease();
            *(_WORD *)(v108 + 12) = 2112;
            *(void *)(v108 + 14) = v105;
            void *v109 = v105;

            _os_log_impl((void *)&_mh_execute_header, v106, v107, "Ignoring updated record from %s zone: %@", (uint8_t *)v108, 0x16u);
            sub_10000423C((uint64_t *)&unk_10008EA40);
            swift_arrayDestroy();
            a2 = v150;
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v3 = v177;
            swift_slowDealloc();

            (*v165)(v149, v176);
          }
          else
          {

            (*v165)(v103, v104);
          }
          goto LABEL_43;
        }
      }
      unint64_t v116 = a2;
      uint64_t v183 = sub_100050334;
      uint64_t v184 = v3;
      Swift::String aBlock = (void (**)(void, void, void))_NSConcreteStackBlock;
      uint64_t v180 = 1107296256;
      v181 = sub_100006FA4;
      v182 = &unk_100087620;
      uint64_t v117 = _Block_copy(&aBlock);
      swift_retain();
      uint64_t v118 = v170;
      static DispatchQoS.unspecified.getter();
      v178 = _swiftEmptyArrayStorage;
      sub_1000502DC((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000423C((uint64_t *)&unk_10008E960);
      sub_10000D808((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
      uint64_t v119 = v172;
      uint64_t v120 = v173;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v117);
      ((void (*)(char *, uint64_t))*v163)(v119, v120);
      (*(void (**)(char *, uint64_t))v162)(v118, v171);
      swift_release();
      id v121 = v92;
      uint64_t v122 = v159;
      id v123 = v175;
      sub_10003A318(v121, v159);
      if (v123)
      {
        id v175 = 0;
        a2 = v116;
        uint64_t v131 = v169;
        uint64_t v132 = sub_1000383AC();
        (*v167)(v166, v132, v176);
        id v133 = v121;
        swift_errorRetain();
        uint64_t v90 = v133;
        swift_errorRetain();
        uint64_t v134 = Logger.logObject.getter();
        os_log_type_t v135 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v134, v135))
        {
          uint64_t v136 = swift_slowAlloc();
          uint64_t v137 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v136 = v161;
          *(void *)(v136 + 4) = v90;
          void *v137 = v90;

          *(_WORD *)(v136 + 12) = 2112;
          swift_errorRetain();
          uint64_t v138 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v136 + 14) = v138;
          v137[1] = v138;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v134, v135, "Error saving cloud record to disk: %@ due to %@", (uint8_t *)v136, 0x16u);
          sub_10000423C((uint64_t *)&unk_10008EA40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          uint64_t v90 = v134;
        }
        swift_errorRelease();

        (*v165)(v166, v176);
        uint64_t v3 = v177;
        goto LABEL_25;
      }
      uint64_t v124 = *sub_10003ECCC();
      uint64_t v125 = *(void (**)(uint64_t))(*(void *)v177 + 232);
      uint64_t v126 = swift_retain();
      unint64_t v127 = v144;
      v125(v126);
      uint64_t v128 = *(void *)sub_10003E9B4();
      uint64_t v129 = *(void (**)(uint64_t *, char *, uint64_t, uint64_t, uint64_t))(*(void *)v124 + 208);
      uint64_t v130 = sub_1000502DC(&qword_10008F560, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
      v129(v122, v127, v128, v145, v130);
      id v175 = 0;

      swift_release();
      (*(void (**)(char *, uint64_t))v160)(v127, v174);
      sub_10003CE7C((uint64_t)v122);
      a2 = v150;
      uint64_t v3 = v177;
LABEL_43:
      uint64_t v131 = v169;
LABEL_25:
      if (v131 == ++v89) {
        goto LABEL_45;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10004FA98(unint64_t a1)
{
  uint64_t v43 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  os_log_type_t v42 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v38 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_20:
    return swift_bridgeObjectRelease();
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v10 = 0;
    unint64_t v44 = a1 & 0xC000000000000001;
    uint64_t v35 = v48;
    uint64_t v34 = (void (**)(char *, uint64_t))(v4 + 8);
    long long v33 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v32 = (void (**)(char *, uint64_t))(v2 + 8);
    unint64_t v36 = a1;
    uint64_t v11 = v37;
    uint64_t v12 = v40;
    while (1)
    {
      id v13 = v44 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v10 + 32);
      uint64_t v14 = v13;
      id v15 = [v13 zoneName];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      uint64_t v19 = sub_100038750();
      swift_beginAccess();
      if (v16 == *v19 && v18 == v19[1]) {
        break;
      }
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_17;
      }

LABEL_6:
      if (v8 == ++v10) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
LABEL_17:
    v48[2] = sub_1000502D0;
    v48[3] = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    v48[0] = sub_100006FA4;
    v48[1] = &unk_1000875F8;
    uint64_t v22 = _Block_copy(aBlock);
    swift_retain();
    id v45 = v14;
    uint64_t v23 = v8;
    uint64_t v24 = v38;
    static DispatchQoS.unspecified.getter();
    uint64_t v46 = _swiftEmptyArrayStorage;
    sub_1000502DC((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000423C((uint64_t *)&unk_10008E960);
    sub_10000D808((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
    uint64_t v25 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v22);
    (*v34)(v12, v25);
    uint64_t v26 = v24;
    uint64_t v8 = v23;
    (*v33)(v26, v39);
    swift_release();
    uint64_t v27 = *sub_10003ECCC();
    uint64_t v28 = *(void (**)(uint64_t))(*(void *)v11 + 232);
    uint64_t v29 = swift_retain();
    uint64_t v30 = v42;
    v28(v29);
    a1 = v36;
    (*(void (**)(char *))(*(void *)v27 + 216))(v30);
    swift_release();

    (*v32)(v30, v43);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

unint64_t sub_100050020()
{
  unint64_t result = qword_10008FA60;
  if (!qword_10008FA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008FA60);
  }
  return result;
}

uint64_t sub_100050074()
{
  return type metadata accessor for CloudPairingManager();
}

void sub_10005007C()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_100050170();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100050170()
{
  if (!qword_10008FA90)
  {
    sub_100007C10(&qword_10008EE48);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10008FA90);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CloudPairingManager.CloudPairingManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100050298);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudPairingManager.CloudPairingManagerError()
{
  return &type metadata for CloudPairingManager.CloudPairingManagerError;
}

uint64_t sub_1000502D0()
{
  *(void *)(v0 + 40) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000502DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100050348()
{
  id v0 = objc_allocWithZone((Class)NSUbiquitousKeyValueStore);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithStoreIdentifier:v1 type:2];

  static NSUbiquitousKeyValueStore.bluetoothCloudDefaults = (uint64_t)v2;
}

uint64_t *NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor()
{
  if (qword_100093DA0 != -1) {
    swift_once();
  }
  return &static NSUbiquitousKeyValueStore.bluetoothCloudDefaults;
}

id static NSUbiquitousKeyValueStore.bluetoothCloudDefaults.getter()
{
  if (qword_100093DA0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v0 = (void *)static NSUbiquitousKeyValueStore.bluetoothCloudDefaults;

  return v0;
}

void static NSUbiquitousKeyValueStore.bluetoothCloudDefaults.setter(uint64_t a1)
{
  if (qword_100093DA0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v2 = (void *)static NSUbiquitousKeyValueStore.bluetoothCloudDefaults;
  static NSUbiquitousKeyValueStore.bluetoothCloudDefaults = a1;
}

uint64_t (*static NSUbiquitousKeyValueStore.bluetoothCloudDefaults.modify())()
{
  if (qword_100093DA0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t Subscription.subscriber.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Subscription.init(subscriber:unsubscribeBlock:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Subscription();
  UUID.init()();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v12 = (void *)(a5 + *(int *)(v10 + 32));
  void *v12 = a2;
  v12[1] = a3;
  return result;
}

uint64_t type metadata accessor for Subscription()
{
  return sub_1000519E0();
}

uint64_t Subscription.unsubscribe(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v7);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005758();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
  uint64_t v25 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v26, a3);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = *(void *)(a3 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v17 + v16, (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  uint64_t v18 = (void *)(v17 + ((v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v19 = v28;
  void *v18 = v27;
  v18[1] = v19;
  aBlock[4] = sub_100050BEC;
  void aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_1000876C0;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  long long v33 = &_swiftEmptyArrayStorage;
  sub_100050D18();
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_100007BB4();
  uint64_t v21 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v22 = (void *)v25;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v21);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
  return swift_release();
}

uint64_t sub_100050A98()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for Subscription() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(*(void *)v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0 + v4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  uint64_t v8 = v7 + v2[9];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100050BEC()
{
  uint64_t v1 = type metadata accessor for Subscription();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  (*(void (**)(unint64_t))(v0 + v3 + *(int *)(v1 + 32)))(v0 + v3);
  return v4(0);
}

uint64_t sub_100050D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100050D10()
{
  return swift_release();
}

unint64_t sub_100050D18()
{
  unint64_t result = qword_10008EE20;
  if (!qword_10008EE20)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008EE20);
  }
  return result;
}

uint64_t static Subscription.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for Subscription() + 28);

  return static UUID.== infix(_:_:)(a1 + v4, a2 + v4);
}

uint64_t sub_100050DBC(uint64_t a1, uint64_t a2)
{
  return static Subscription.== infix(_:_:)(a1, a2);
}

uint64_t sub_100050DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100050DCC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100050EA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v7 + v10) & ~v10;
  uint64_t v13 = *(void *)(v9 + 64) + 7;
  unint64_t v14 = ((v13 + v12) & 0xFFFFFFFFFFFFFFF8) + 16;
  unsigned int v15 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v15 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
  }
  else
  {
    uint64_t v19 = v8;
    uint64_t v20 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    unint64_t v21 = ((unint64_t)a2 + v11) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v20, v21, v19);
    uint64_t v22 = (void *)((v13 + v21) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = v22[1];
    uint64_t v24 = (void *)((v13 + (((unint64_t)a1 + v11) & v20)) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v24 = *v22;
    v24[1] = v23;
  }
  swift_retain();
  return a1;
}

uint64_t sub_10005104C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))((v4 + a1 + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80), v5);

  return swift_release();
}

uint64_t sub_100051110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  unsigned int v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *unsigned int v15 = *v16;
  v15[1] = v17;
  swift_retain();
  return a1;
}

uint64_t sub_1000511E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  unsigned int v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *unsigned int v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000512CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v12, v13, v7);
  *(_OWORD *)((*(void *)(v9 + 32) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v9 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000513A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v12, v13, v7);
  *(_OWORD *)((*(void *)(v9 + 24) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v9 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_10005147C(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v11;
  uint64_t v14 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  if (v12 < a2)
  {
    unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v16 = v15 & 0xFFFFFFF8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v12 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v15);
        if (!v20) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v15);
        if (v20) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000516E4);
      case 4:
        int v20 = *(int *)((char *)a1 + v15);
        if (!v20) {
          break;
        }
LABEL_24:
        int v22 = v20 - 1;
        if (v16)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v12 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if (v7 == v12)
  {
    uint64_t v24 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v6 + 48);
    return v24(a1, v7, v5);
  }
  else
  {
    unint64_t v25 = ((unint64_t)a1 + v13) & ~v11;
    if (v10 == v12)
    {
      uint64_t v26 = *(uint64_t (**)(unint64_t))(v9 + 48);
      return v26(v25);
    }
    else
    {
      unint64_t v27 = *(void *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
      if (v27 >= 0xFFFFFFFF) {
        LODWORD(v27) = -1;
      }
      return (v27 + 1);
    }
  }
}

void sub_1000516F8(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v30 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  uint64_t v15 = *(void *)(v8 + 64) + v13;
  uint64_t v16 = *(void *)(*(void *)(v10 - 8) + 64) + 7;
  unint64_t v17 = ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v18 = a3 - v14 + 1;
  }
  else {
    unsigned int v18 = 2;
  }
  if (v18 >= 0x10000) {
    int v19 = 4;
  }
  else {
    int v19 = 2;
  }
  if (v18 < 0x100) {
    int v19 = 1;
  }
  if (v18 >= 2) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = 0;
  }
  if (v14 < a3) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  if (a2 > v14)
  {
    if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v22 = a2 - v14;
    }
    else {
      int v22 = 1;
    }
    if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v23 = ~v14 + a2;
      bzero(a1, ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v23;
    }
    switch(v21)
    {
      case 1:
        *((unsigned char *)a1 + v17) = v22;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v17) = v22;
        return;
      case 3:
        goto LABEL_50;
      case 4:
        *(_DWORD *)((char *)a1 + v17) = v22;
        return;
      default:
        return;
    }
  }
  uint64_t v24 = ~v13;
  switch(v21)
  {
    case 1:
      *((unsigned char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)((char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_50:
      __break(1u);
      JUMPOUT(0x1000519B8);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v9 == v14)
        {
          unint64_t v25 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v30 + 56);
          v25(a1, a2, v9, v7);
        }
        else
        {
          unint64_t v26 = ((unint64_t)a1 + v15) & v24;
          if (v12 == v14)
          {
            unint64_t v27 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
            v27(v26, a2);
          }
          else
          {
            uint64_t v28 = (void *)((v16 + v26) & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0)
            {
              uint64_t v29 = a2 ^ 0x80000000;
              v28[1] = 0;
            }
            else
            {
              uint64_t v29 = (a2 - 1);
            }
            *uint64_t v28 = v29;
          }
        }
      }
      return;
  }
}

uint64_t sub_1000519E0()
{
  return swift_getGenericMetadata();
}

uint64_t DarwinNotificationHelper.__allocating_init(notificationHandlers:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  DarwinNotificationHelper.init(notificationHandlers:)(a1);
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t (**v5)();
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t (**v26)();
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  id v30;
  uint64_t (*v31)(void *);
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v37;
  uint64_t vars8;

  unint64_t v1 = 0;
  uint64_t v34 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 64);
  uint64_t v35 = (unint64_t)(v2 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      uint64_t v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      uint64_t v37 = v1;
      uint64_t v7 = v6 | (v1 << 6);
      goto LABEL_22;
    }
    uint64_t v8 = v1 + 1;
    if (__OFADD__(v1, 1)) {
      goto LABEL_38;
    }
    if (v8 >= v35) {
      break;
    }
    uint64_t v9 = *(void *)(v34 + 8 * v8);
    uint64_t v10 = v1 + 1;
    if (!v9)
    {
      uint64_t v10 = v1 + 2;
      if (v1 + 2 >= v35) {
        break;
      }
      uint64_t v9 = *(void *)(v34 + 8 * v10);
      if (!v9)
      {
        uint64_t v10 = v1 + 3;
        if (v1 + 3 >= v35) {
          break;
        }
        uint64_t v9 = *(void *)(v34 + 8 * v10);
        if (!v9)
        {
          uint64_t v11 = v1 + 4;
          if (v1 + 4 >= v35) {
            break;
          }
          uint64_t v9 = *(void *)(v34 + 8 * v11);
          if (!v9)
          {
            while (1)
            {
              uint64_t v10 = v11 + 1;
              if (__OFADD__(v11, 1)) {
                goto LABEL_39;
              }
              if (v10 >= v35) {
                goto LABEL_33;
              }
              uint64_t v9 = *(void *)(v34 + 8 * v10);
              ++v11;
              if (v9) {
                goto LABEL_21;
              }
            }
          }
          uint64_t v10 = v1 + 4;
        }
      }
    }
LABEL_21:
    uint64_t v4 = (v9 - 1) & v9;
    uint64_t v37 = v10;
    uint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_22:
    unsigned int v12 = 16 * v7;
    uint64_t v13 = *(void *)(a1 + 56);
    unsigned int v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = *(_OWORD *)(v13 + v12);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v15 = String._bridgeToObjectiveC()();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_100052C58;
    *(void *)(v16 + 24) = v14;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int v19 = sub_100052C80((uint64_t)v15);
    unsigned int v20 = _swiftEmptyDictionarySingleton[2];
    uint64_t v21 = (v18 & 1) == 0;
    int v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      type metadata accessor for CFString();
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    int v23 = v18;
    if (_swiftEmptyDictionarySingleton[3] >= v22)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v18) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_100053190();
        if (v23) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_100052D20(v22, isUniquelyReferenced_nonNull_native);
      uint64_t v24 = sub_100052C80((uint64_t)v15);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_40;
      }
      int v19 = v24;
      if (v23)
      {
LABEL_4:
        uint64_t v5 = (uint64_t (**)())(_swiftEmptyDictionarySingleton[7] + 16 * v19);
        swift_release();
        *uint64_t v5 = sub_1000144C0;
        v5[1] = (uint64_t (*)())v16;
        goto LABEL_5;
      }
    }
    _swiftEmptyDictionarySingleton[(v19 >> 6) + 8] |= 1 << v19;
    *(void *)(_swiftEmptyDictionarySingleton[6] + 8 * v19) = v15;
    unint64_t v26 = (uint64_t (**)())(_swiftEmptyDictionarySingleton[7] + 16 * v19);
    *unint64_t v26 = sub_1000144C0;
    v26[1] = (uint64_t (*)())v16;
    unint64_t v27 = _swiftEmptyDictionarySingleton[2];
    uint64_t v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_37;
    }
    _swiftEmptyDictionarySingleton[2] = v29;
    uint64_t v30 = v15;
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    unint64_t v1 = v37;
  }
LABEL_33:
  swift_release();
  uint64_t v31 = *(uint64_t (**)(void *))(v33 + 112);

  return v31(_swiftEmptyDictionarySingleton);
}

uint64_t DarwinNotificationHelper.init(notificationHandlers:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v37 - v9;
  CFNotificationCenterRef v47 = CFNotificationCenterGetDarwinNotifyCenter();
  if (!v47) {
    goto LABEL_30;
  }
  v1[2] = a1;
  swift_bridgeObjectRetain();
  uint64_t v11 = *(void (**)(void *))(*(void *)*DarwinNotificationManager.shared.unsafeMutableAddressor() + 120);
  swift_retain();
  v11(v1);
  swift_release();
  uint64_t v12 = sub_100038200();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v45 = v5 + 16;
  uint64_t v46 = v12;
  unint64_t v44 = v13;
  ((void (*)(char *))v13)(v10);
  unsigned int v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Setup darwin callback handlers", v16, 2u);
    swift_slowDealloc();
  }

  uint64_t v43 = *(void (**)(char *, uint64_t))(v5 + 8);
  v43(v10, v4);
  int64_t v18 = 0;
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v41 = a1 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v42 = (unint64_t)(v20 + 63) >> 6;
  *(void *)&long long v17 = 136315138;
  long long v38 = v17;
  v37[1] = (char *)&type metadata for Any + 8;
  uint64_t v39 = v2;
  uint64_t v40 = a1;
  while (1)
  {
    if (v22)
    {
      uint64_t v48 = (v22 - 1) & v22;
      int64_t v49 = v18;
      unint64_t v23 = __clz(__rbit64(v22)) | (v18 << 6);
      goto LABEL_25;
    }
    int64_t v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v24 >= v42) {
      goto LABEL_27;
    }
    unint64_t v25 = *(void *)(v41 + 8 * v24);
    int64_t v26 = v18 + 1;
    if (!v25)
    {
      int64_t v26 = v18 + 2;
      if (v18 + 2 >= v42) {
        goto LABEL_27;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v26);
      if (!v25)
      {
        int64_t v26 = v18 + 3;
        if (v18 + 3 >= v42) {
          goto LABEL_27;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25) {
          break;
        }
      }
    }
LABEL_24:
    uint64_t v48 = (v25 - 1) & v25;
    int64_t v49 = v26;
    unint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_25:
    uint64_t v28 = *(void **)(*(void *)(a1 + 48) + 8 * v23);
    v44(v8, v46, v4);
    uint64_t v29 = v28;
    swift_retain();
    uint64_t v30 = Logger.logObject.getter();
    uint64_t v31 = v8;
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = v38;
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v33 + 4) = sub_100004FA4(v34, v35, &v50);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v32, "Setting up darwin callback handler for %s", (uint8_t *)v33, 0xCu);
      swift_arrayDestroy();
      uint64_t v2 = v39;
      a1 = v40;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v43(v31, v4);
    uint64_t v8 = v31;
    CFNotificationCenterAddObserver(v47, v2, (CFNotificationCallback)sub_100051F94, v29, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    swift_release();

    unint64_t v22 = v48;
    int64_t v18 = v49;
  }
  uint64_t v27 = v18 + 4;
  if (v18 + 4 >= v42)
  {
LABEL_27:
    swift_release();

    return (uint64_t)v2;
  }
  unint64_t v25 = *(void *)(v41 + 8 * v27);
  if (v25)
  {
    int64_t v26 = v18 + 4;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v26 >= v42) {
      goto LABEL_27;
    }
    unint64_t v25 = *(void *)(v41 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100051F94(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a1;
  id v9 = a3;
  id v10 = a5;
  sub_100053478(a2, a3);
}

void DarwinNotificationHelper.deinit()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(void *))(*(void *)*DarwinNotificationManager.shared.unsafeMutableAddressor() + 128);
  swift_retain();
  v6(v0);
  swift_release();
  uint64_t v7 = CFNotificationCenterGetDarwinNotifyCenter();
  if (!v7)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    return;
  }
  id v8 = v7;
  uint64_t v9 = v0[2];
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v37 = v9 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v38 = (unint64_t)(v11 + 63) >> 6;
  unsigned int v14 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  os_log_type_t v15 = (void (**)(char *, uint64_t))(v3 + 8);
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  *(void *)&long long v17 = 136315138;
  long long v33 = v17;
  v32[1] = (char *)&type metadata for Any + 8;
  unint64_t v35 = v8;
  unint64_t v36 = v5;
  uint64_t v34 = (void (**)(char *, uint64_t))(v3 + 8);
  while (1)
  {
    if (v13)
    {
      uint64_t v39 = (v13 - 1) & v13;
      int64_t v40 = v16;
      unint64_t v18 = __clz(__rbit64(v13)) | (v16 << 6);
      goto LABEL_23;
    }
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v38) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v37 + 8 * v19);
    int64_t v21 = v16 + 1;
    if (!v20)
    {
      int64_t v21 = v16 + 2;
      if (v16 + 2 >= v38) {
        goto LABEL_25;
      }
      unint64_t v20 = *(void *)(v37 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v16 + 3;
        if (v16 + 3 >= v38) {
          goto LABEL_25;
        }
        unint64_t v20 = *(void *)(v37 + 8 * v21);
        if (!v20) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v39 = (v20 - 1) & v20;
    int64_t v40 = v21;
    unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_23:
    uint64_t v23 = *(void *)(*(void *)(v9 + 56) + 16 * v18 + 8);
    id v24 = *(id *)(*(void *)(v9 + 48) + 8 * v18);
    uint64_t v41 = v23;
    swift_retain();
    uint64_t v25 = sub_100038200();
    (*v14)(v5, v25, v2);
    int64_t v26 = (__CFString *)v24;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = v33;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v29 + 4) = sub_100004FA4(v30, v31, &v42);

      os_log_type_t v15 = v34;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Remove darwin callback handler for %s", (uint8_t *)v29, 0xCu);
      swift_arrayDestroy();
      id v8 = v35;
      swift_slowDealloc();
      uint64_t v5 = v36;
      swift_slowDealloc();
    }
    else
    {
    }
    (*v15)(v5, v2);
    unint64_t v13 = v39;
    int64_t v16 = v40;
    CFNotificationCenterRemoveObserver(v8, v1, v26, 0);
    swift_release();
  }
  uint64_t v22 = v16 + 4;
  if (v16 + 4 >= v38)
  {
LABEL_25:
    swift_release();

    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v37 + 8 * v22);
  if (v20)
  {
    int64_t v21 = v16 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v21 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v21 >= v38) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v37 + 8 * v21);
    ++v22;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_28:
  __break(1u);
}

uint64_t DarwinNotificationHelper.__deallocating_deinit()
{
  DarwinNotificationHelper.deinit();

  return _swift_deallocClassInstance(v0, 24, 7);
}

Swift::Void __swiftcall DarwinNotificationHelper.onNotification(notificationName:)(CFStringRef notificationName)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 16);
  if (*(void *)(v7 + 16))
  {
    id v8 = (id)notificationName;
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_100052C80((uint64_t)v8);
    if (v10)
    {
      uint64_t v11 = *(void *)(v7 + 56) + 16 * v9;
      unint64_t v13 = *(void (**)(void))v11;
      uint64_t v12 = *(void *)(v11 + 8);
      swift_retain();

      swift_bridgeObjectRelease();
      uint64_t v14 = sub_100038200();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
      os_log_type_t v15 = v8;
      int64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v25 = v12;
        uint64_t v18 = swift_slowAlloc();
        id v24 = v13;
        int64_t v19 = (uint8_t *)v18;
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)int64_t v19 = 136315138;
        v23[1] = v19 + 4;
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = sub_100004FA4(v20, v21, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invoking callback, notification, %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v13 = v24;
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v13(v22);
      swift_release();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_100052AA8()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100052AF4()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100052B4C()
{
  return Hasher._finalize()();
}

uint64_t sub_100052BB4()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_100052C20()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100052C58()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_100052C80(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString();
  sub_100053434(&qword_10008FCF8);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100053048(a1, v2);
}

uint64_t sub_100052D20(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000423C(&qword_10008FCF0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  os_log_type_t v32 = v2;
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v33 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v33 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v32;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v33 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v33 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v20);
    long long v34 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
    if ((a2 & 1) == 0)
    {
      id v30 = v29;
      swift_retain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for CFString();
    sub_100053434(&qword_10008FCF8);
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v29;
    *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v34;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v32;
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
  if (v31 >= 64) {
    bzero(v22, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v31;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_100053048(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString();
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_100053434(&qword_10008FCF8);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

void *sub_100053190()
{
  uint64_t v1 = v0;
  sub_10000423C(&qword_10008FCF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    id v20 = v17;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void type metadata accessor for CFString()
{
  if (!qword_10008FCD8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10008FCD8);
    }
  }
}

uint64_t type metadata accessor for DarwinNotificationHelper()
{
  return self;
}

uint64_t sub_1000533CC()
{
  return sub_100053434(&qword_10008FCE0);
}

uint64_t sub_100053400()
{
  return sub_100053434(&qword_10008FCE8);
}

uint64_t sub_100053434(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100053478(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v32 - v10;
  __chkstk_darwin(v9);
  int64_t v13 = (char *)&v32 - v12;
  if (a1)
  {
    if (a2)
    {
      id v14 = a2;
      uint64_t v15 = sub_100038200();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v15, v4);
      id v16 = v14;
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        long long v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        uint64_t v35 = v33;
        *(_DWORD *)long long v19 = 136315138;
        os_log_type_t v32 = v19 + 4;
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v34 = sub_100004FA4(v20, v21, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Got darwin notification, %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      id v30 = *(void (**)(id))(*(void *)a1 + 120);
      id v31 = v16;
      swift_retain();
      v30(v31);
      swift_release();
    }
    else
    {
      uint64_t v26 = sub_100038200();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v26, v4);
      BOOL v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "cfNotificationName for darwin callback handler not found", v29, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
  }
  else
  {
    uint64_t v22 = sub_100038200();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, v22, v4);
    int64_t v23 = Logger.logObject.getter();
    uint64_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      char v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "Observer for darwin callback handler not found", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
  }
}

BOOL static DeviceLockState.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void DeviceLockState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int DeviceLockState.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void sub_100053908(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v23 = 0;
  NSString v10 = String._bridgeToObjectiveC()();
  uint64_t v11 = MGCopyAnswerWithError();

  if (v11)
  {
    if (v23)
    {
      uint64_t v12 = sub_100038200();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
      swift_bridgeObjectRetain_n();
      int64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      int v15 = v14;
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v16 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v25 = v21;
        *(_DWORD *)uint64_t v16 = 136315394;
        int v20 = v15;
        swift_bridgeObjectRetain();
        uint64_t v24 = sub_100004FA4(a1, a2, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v16 + 12) = 2080;
        swift_beginAccess();
        LODWORD(v22) = v23;
        uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v22 = sub_100004FA4(v17, v18, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v20, "MGCopyAnswerWithError error for key: %s -> %s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    *(void *)(a3 + 24) = swift_getObjectType();
    *(void *)a3 = v11;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

uint64_t SystemInfo.deviceName.getter()
{
  return sub_100053FA0(0xD000000000000016, 0x800000010007B940);
}

uint64_t SystemInfo.productType.getter()
{
  return sub_100053FA0(0x54746375646F7250, 0xEB00000000657079);
}

uint64_t SystemInfo.buildVersion.getter()
{
  return sub_100053FA0(0x726556646C697542, 0xEC0000006E6F6973);
}

uint64_t SystemInfo.osVersion.getter()
{
  return sub_100053FA0(0x56746375646F7250, 0xEE006E6F69737265);
}

uint64_t SystemInfo.uniqueDeviceID.getter()
{
  return sub_100053FA0(0x6544657571696E55, 0xEE00444965636976);
}

uint64_t SystemInfo.ecid.getter()
{
  return sub_100053D00(0x6843657571696E55, 0xEC00000044497069);
}

uint64_t SystemInfo.chipID.getter()
{
  return sub_100053D00(0x444970696843, 0xE600000000000000);
}

uint64_t sub_100053D00(uint64_t a1, unint64_t a2)
{
  sub_100053908(a1, a2, (uint64_t)v4);
  if (v5)
  {
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100007A24((uint64_t)v4);
    return 0;
  }
}

BOOL SystemInfo.internalBuild.getter()
{
  return IsAppleInternalBuild() != 0;
}

uint64_t SystemInfo.underTest.getter()
{
  if (!IsAppleInternalBuild()) {
    return 0;
  }
  id v0 = [self processInfo];
  id v1 = [v0 environment];

  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v2 + 16) && (sub_10002EE3C(0xD00000000000001BLL, 0x800000010007B4A0), (v3 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

BOOL SystemInfo.deviceFirstUnlocked.getter()
{
  return MKBDeviceUnlockedSinceBoot() == 1;
}

uint64_t SystemInfo.lockState.getter()
{
  return 0;
}

uint64_t SystemInfo.regionCode.getter()
{
  return sub_100053FA0(0xD000000000000016, 0x800000010007B960);
}

uint64_t SystemInfo.hardwareModel.getter()
{
  return sub_100053FA0(0xD000000000000016, 0x800000010007B980);
}

uint64_t SystemInfo.architecture.getter()
{
  return sub_100053FA0(0xD000000000000016, 0x800000010007B9A0);
}

uint64_t sub_100053FA0(uint64_t a1, unint64_t a2)
{
  sub_100053908(a1, a2, (uint64_t)v4);
  if (v5)
  {
    if (swift_dynamicCast()) {
      return v3;
    }
  }
  else
  {
    sub_100007A24((uint64_t)v4);
  }
  return 0;
}

unint64_t sub_100054018()
{
  unint64_t result = qword_10008FD00;
  if (!qword_10008FD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008FD00);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceLockState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DeviceLockState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000541C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceLockState()
{
  return &type metadata for DeviceLockState;
}

ValueMetadata *type metadata accessor for SystemInfo()
{
  return &type metadata for SystemInfo;
}

unint64_t sub_100054210()
{
  sub_10000423C(&qword_10008FD08);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000747D0;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 32) = NSFilePosixPermissions;
  *(void *)(inited + 40) = 492;
  id v1 = NSFilePosixPermissions;
  unint64_t result = sub_10005428C(inited);
  qword_100094B48 = result;
  return result;
}

unint64_t sub_10005428C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000423C(&qword_10008F7F0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100054B38(v6, (uint64_t)&v13);
    uint64_t v7 = v13;
    unint64_t result = sub_100046C08(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_100007A14(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000543A8()
{
  if (qword_100094130 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_100054420(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  char v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  BOOL v11 = (char *)v39 - v10;
  id v12 = [self defaultManager];
  char v46 = 0;
  URL.path.getter();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v14 = [v12 fileExistsAtPath:v13 isDirectory:&v46];

  if (v14)
  {
    if ((v46 & 1) == 0)
    {
      uint64_t v16 = sub_1000383AC();
      uint64_t v17 = v43;
      uint64_t v18 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v11, v16, v44);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        os_log_t v42 = v19;
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = (void *)swift_slowAlloc();
        id v47 = v41;
        *(_DWORD *)uint64_t v21 = 136315138;
        v39[1] = v21 + 4;
        int64_t v40 = v21;
        sub_100054AF0(&qword_10008F3A0, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v45 = sub_100004FA4(v22, v23, (uint64_t *)&v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        os_log_t v24 = v42;
        _os_log_impl((void *)&_mh_execute_header, v42, v20, "Expected a directory, but is a file: %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v44);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

        (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v18);
      }
      return v14 ^ 1;
    }
LABEL_7:

    return v14 ^ 1;
  }
  URL._bridgeToObjectiveC()(v15);
  uint64_t v26 = v25;
  type metadata accessor for FileAttributeKey(0);
  sub_100054AF0(&qword_10008F7D0, type metadata accessor for FileAttributeKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v47 = 0;
  unsigned int v28 = [v12 createDirectoryAtURL:v26 withIntermediateDirectories:1 attributes:isa error:&v47];

  if (v28)
  {
    id v29 = v47;
    goto LABEL_7;
  }
  id v30 = v47;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v31 = sub_1000383AC();
  uint64_t v33 = v43;
  uint64_t v32 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v9, v31, v44);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    unint64_t v36 = (uint8_t *)swift_slowAlloc();
    os_log_t v42 = (os_log_t)swift_slowAlloc();
    *(_DWORD *)unint64_t v36 = 138412290;
    swift_errorRetain();
    uint64_t v37 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id v47 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v42->Class isa = (Class)v37;
    uint64_t v32 = v44;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "createDirectory error: %@", v36, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v33 = v43;
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v32);
  return v14 ^ 1;
}

uint64_t sub_100054A78()
{
  id v0 = [self defaultManager];
  uint64_t v1 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  return v1;
}

uint64_t sub_100054AF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100054B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C((uint64_t *)&unk_10008FD10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_100054BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  *(void *)&v7[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener] = a1;
  *(void *)&v7[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_dispatchQueue] = a2;
  *(void *)&v7[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_xpcConnection] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return [super init];
}

uint64_t type metadata accessor for XPCConnection()
{
  return self;
}

id sub_100054C3C()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_xpcConnection) invalidate];
}

id sub_100054C84()
{
  return sub_10005BE2C(type metadata accessor for XPCConnection);
}

uint64_t sub_100054E74(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1) {
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  v3[4] = v6;
  objc_super v9 = (uint64_t (*)(void))((char *)&dword_10008FD40 + dword_10008FD40);
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  void *v7 = v3;
  v7[1] = sub_100060EC4;
  return v9();
}

uint64_t sub_100054F70()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_10005505C, 0, 0);
}

uint64_t sub_10005505C()
{
  unint64_t v36 = v0;
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0[4]
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (v1)
  {
    uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 440))();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = self;
      v0[2] = 0;
      id v5 = [v4 devicesWithDiscoveryFlags:0x800000 error:v0 + 2];
      uint64_t v6 = (void *)v0[2];
      if (v5)
      {
        uint64_t v7 = v5;
        sub_100014588(0, &qword_10008FD58);
        uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        id v9 = v6;
      }
      else
      {
        id v14 = v6;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v8 = 0;
      }
      uint64_t v16 = v0[6];
      uint64_t v15 = v0[7];
      uint64_t v17 = v0[5];
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v3 + 200))();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v19 = sub_10005E88C(v18, v8, v3);
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v20 = sub_100038580();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v20, v17);
      swift_bridgeObjectRetain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      BOOL v23 = os_log_type_enabled(v21, v22);
      uint64_t v25 = v0[6];
      uint64_t v24 = v0[7];
      uint64_t v26 = v0[5];
      if (v23)
      {
        log = v21;
        uint64_t v34 = v0[5];
        BOOL v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        *(_DWORD *)BOOL v27 = 136315138;
        sub_100014588(0, &qword_10008FD58);
        uint64_t v33 = v24;
        swift_bridgeObjectRetain();
        uint64_t v28 = Array.description.getter();
        unint64_t v30 = v29;
        swift_bridgeObjectRelease();
        v0[3] = sub_100004FA4(v28, v30, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, log, v22, "Cloud Paired Devices Metadata: %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v33, v34);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_release();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      }
      swift_task_dealloc();
      uint64_t v31 = (uint64_t (*)(void *))v0[1];
      return v31(v19);
    }
    sub_10005E6A4();
    swift_allocError();
    *BOOL v11 = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_10005E6A4();
    swift_allocError();
    *uint64_t v10 = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  id v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

void sub_10005555C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v99 = a3;
  char v101 = a4;
  uint64_t v6 = sub_10000423C(&qword_10008FA50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000423C((uint64_t *)&unk_10008FD80);
  __chkstk_darwin(v9);
  uint64_t v102 = (uint64_t)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for Date();
  uint64_t v104 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  id v95 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000423C((uint64_t *)&unk_10008F460);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v94 = (uint64_t)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v97 = (char *)&v91 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v103 = (uint64_t)&v91 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v98 = (uint64_t)&v91 - v20;
  __chkstk_darwin(v19);
  os_log_type_t v22 = (char *)&v91 - v21;
  BOOL v23 = (int *)type metadata accessor for CloudPairedDeviceRecord();
  uint64_t v24 = v23[6];
  uint64_t v107 = a1;
  uint64_t v25 = (uint64_t *)(a1 + v24);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  id v106 = [objc_allocWithZone((Class)CBDevice) init];
  int v100 = v8;
  if (a2
    && (swift_bridgeObjectRetain(),
        unint64_t v28 = swift_bridgeObjectRetain(),
        unint64_t v29 = sub_10005E6F8(v28, v27, v26),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        v29)
    && (id v30 = [v29 identifier], v29, v30))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v32 = v106;
  [v106 setIdentifier:v31];

  NSString v33 = String._bridgeToObjectiveC()();
  [v32 setIdsDeviceID:v33];

  uint64_t v34 = v107;
  unint64_t v35 = *(void *)(v107 + v23[10]);
  if ((v35 & 0x8000000000000000) != 0 || v35 >= 0x100) {
    goto LABEL_43;
  }
  [v32 setDeviceType:*(void *)(v107 + v23[10])];
  uint64_t v36 = sub_10005ED24(&qword_10008FD90, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
  uint64_t v37 = (void *)sub_100037758((uint64_t)v23, v36);
  id v105 = [objc_allocWithZone((Class)CBControllerInfo) init];
  [v105 setCloudSyncStatus:1];
  id v108 = v37;
  id v38 = [v37 recordChangeTag];
  if (v38)
  {
    uint64_t v92 = v9;

    id v93 = v23;
    uint64_t v39 = v34 + v23[5];
    uint64_t v40 = v104;
    uint64_t v41 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v22, v39, v109);
    os_log_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
    v42((uint64_t)v22, 0, 1, v41);
    id v43 = [v108 modificationDate];
    uint64_t v96 = v22;
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = v95;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      char v46 = *(void (**)(uint64_t, char *, uint64_t))(v40 + 32);
      uint64_t v47 = v103;
      uint64_t v48 = v109;
      v46(v103, v45, v109);
      int64_t v49 = v42;
      v42(v47, 0, 1, v48);
      int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v47, 1, v48);
      uint64_t v51 = (uint64_t)v97;
      if (v50 != 1)
      {
        uint64_t v52 = v98;
        uint64_t v53 = (void (*)(uint64_t, uint64_t, uint64_t))v46;
        uint64_t v54 = v109;
        v53(v98, v103, v109);
        v49(v52, 0, 1, v54);
        uint64_t v34 = v107;
        uint64_t v55 = v92;
        BOOL v23 = v93;
        goto LABEL_17;
      }
    }
    else
    {
      int64_t v49 = v42;
      v42(v103, 1, 1, v109);
      uint64_t v51 = (uint64_t)v97;
    }
    id v56 = [v108 creationDate];
    if (v56)
    {
      uint64_t v57 = v56;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v58 = 0;
    }
    else
    {
      uint64_t v58 = 1;
    }
    uint64_t v34 = v107;
    uint64_t v55 = v92;
    BOOL v23 = v93;
    uint64_t v52 = v98;
    v49(v51, v58, 1, v109);
    sub_1000043DC(v51, v52, (uint64_t *)&unk_10008F460);
    sub_10000E044(v103, (uint64_t *)&unk_10008F460);
LABEL_17:
    uint64_t v59 = v102;
    uint64_t v60 = v102 + *(int *)(v55 + 48);
    uint64_t v61 = (uint64_t)v96;
    sub_1000145C4((uint64_t)v96, v102, (uint64_t *)&unk_10008F460);
    uint64_t v62 = v59;
    sub_1000145C4(v52, v60, (uint64_t *)&unk_10008F460);
    uint64_t v63 = v52;
    uint64_t v64 = v61;
    uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
    if (v65(v59, 1, v109) == 1)
    {
      sub_10000E044(v63, (uint64_t *)&unk_10008F460);
      uint64_t v62 = v102;
      sub_10000E044(v64, (uint64_t *)&unk_10008F460);
      int v66 = v65(v60, 1, v109);
      id v32 = v106;
      if (v66 == 1)
      {
        sub_10000E044(v62, (uint64_t *)&unk_10008F460);
        uint64_t v67 = 3;
LABEL_24:
        id v38 = [v105 setCloudSyncStatus:v67];
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v68 = v94;
      sub_1000145C4(v59, v94, (uint64_t *)&unk_10008F460);
      if (v65(v60, 1, v109) != 1)
      {
        uint64_t v82 = v68;
        uint64_t v83 = v104;
        unint64_t v84 = v95;
        uint64_t v85 = v109;
        (*(void (**)(char *, uint64_t, uint64_t))(v104 + 32))(v95, v60, v109);
        sub_10005ED24(&qword_10008FD98, (void (*)(uint64_t))&type metadata accessor for Date);
        LODWORD(v103) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v86 = *(void (**)(char *, uint64_t))(v83 + 8);
        v86(v84, v85);
        sub_10000E044(v98, (uint64_t *)&unk_10008F460);
        sub_10000E044((uint64_t)v96, (uint64_t *)&unk_10008F460);
        v86((char *)v82, v85);
        sub_10000E044(v102, (uint64_t *)&unk_10008F460);
        id v32 = v106;
        if (v103)
        {
          uint64_t v67 = 3;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      sub_10000E044(v98, (uint64_t *)&unk_10008F460);
      sub_10000E044((uint64_t)v96, (uint64_t *)&unk_10008F460);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v68, v109);
      id v32 = v106;
    }
    sub_10000E044(v62, (uint64_t *)&unk_10008FD80);
LABEL_23:
    uint64_t v67 = 2;
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v69 = (uint64_t)v100;
  (*(void (**)(id))(*(void *)v99 + 168))(v38);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v23 - 1) + 48))(v69, 1, v23) == 1)
  {
    sub_10000E044(v69, &qword_10008FA50);
    id v70 = v105;
  }
  else
  {
    uint64_t v71 = sub_10003C2A8();
    unint64_t v73 = v72;
    sub_10003CE7C(v69);
    if (v73 >> 60 == 15)
    {
      id v70 = v105;
    }
    else
    {
      uint64_t v74 = *(void *)(*(void *)(v34 + v23[9]) + 16);
      if (v74)
      {
        uint64_t v75 = swift_bridgeObjectRetain();
        uint64_t v76 = v74 - 1;
        uint64_t v109 = v75;
        BOOL v77 = (unint64_t *)(v75 + 40);
        do
        {
          uint64_t v78 = v76;
          uint64_t v80 = *(v77 - 1);
          unint64_t v79 = *v77;
          sub_10000AF6C(v80, *v77);
          char v81 = sub_10005D500(v80, v79, v71, v73);
          sub_10000AB1C(v80, v79);
          if (v81) {
            break;
          }
          uint64_t v76 = v78 - 1;
          v77 += 2;
        }
        while (v78);
        swift_bridgeObjectRelease();
        id v32 = v106;
        uint64_t v34 = v107;
      }
      else
      {
        char v81 = 0;
      }
      id v70 = v105;
      [v105 setFastLEConnectionAllowed:v81 & 1];
      sub_10000AB08(v71, v73);
    }
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v70 setFastLEConnectionInfoData:isa];

  unint64_t v88 = *(void *)(v34 + v23[7]);
  if ((v88 & 0x8000000000000000) == 0 && v88 < 0x100)
  {
    [v70 setFastLEConnectionInfoVersion:*(void *)(v34 + v23[7])];
    unint64_t v89 = *(void *)(v34 + v23[12]);
    if ((v89 & 0x8000000000000000) == 0 && !HIDWORD(v89))
    {
      [v70 setSupportedServices:];
      id v90 = v70;
      [v32 setControllerInfo:v90];

      *char v101 = v32;
      return;
    }
  }
LABEL_43:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000561CC(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  void *v4 = v2;
  v4[1] = sub_100056274;
  return sub_100054F70();
}

uint64_t sub_100056274()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    sub_100014588(0, &qword_10008FD58);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_100056414(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_10000423C(&qword_10008FA50);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CloudPairedDeviceRecord();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100056514, 0, 0);
}

uint64_t sub_100056514()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (!v1)
  {
    sub_10005E6A4();
    swift_allocError();
    *uint64_t v20 = 1;
    swift_willThrow();
LABEL_22:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_23;
  }
  uint64_t v2 = v1;
  id v3 = [*(id *)(v0 + 16) idsDeviceID];
  if (!v3)
  {
    sub_10005E6A4();
    swift_allocError();
    char v22 = 3;
LABEL_16:
    *uint64_t v21 = v22;
    swift_willThrow();
LABEL_21:
    swift_release();
    goto LABEL_22;
  }
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v2 + 440))();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    sub_10005E6A4();
    swift_allocError();
    char v22 = 1;
    goto LABEL_16;
  }
  uint64_t v9 = v8;
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v8 + 200))();
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v13 = *(void *)(v0 + 40);
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v14 = v10 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v15 = *(void *)(v12 + 72);
    while (1)
    {
      uint64_t v16 = *(void *)(v0 + 56);
      sub_10003CE18(v14, v16);
      uint64_t v17 = (void *)(v16 + *(int *)(v13 + 24));
      BOOL v18 = *v17 == v5 && v17[1] == v7;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      sub_10003CE7C(*(void *)(v0 + 56));
      v14 += v15;
      if (!--v11)
      {
        uint64_t v19 = 1;
        goto LABEL_19;
      }
    }
    sub_10004B014(*(void *)(v0 + 56), *(void *)(v0 + 32));
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 1;
  }
LABEL_19:
  uint64_t v23 = *(void *)(v0 + 40);
  uint64_t v24 = *(void *)(v0 + 48);
  uint64_t v25 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v25, v19, 1, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v25, 1, v23) == 1)
  {
    sub_10000E044(*(void *)(v0 + 32), &qword_10008FA50);
    sub_10005E6A4();
    swift_allocError();
    *uint64_t v26 = 2;
    swift_willThrow();
    swift_release();
    goto LABEL_21;
  }
  uint64_t v29 = *(void *)(v0 + 64);
  sub_10004B014(*(void *)(v0 + 32), v29);
  (*(void (**)(uint64_t))(*(void *)v9 + 344))(v29);
  swift_release();
  swift_release();
  sub_10003CE7C(v29);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
LABEL_23:
  return v27();
}

uint64_t sub_100056A84(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  void *v7 = v3;
  v7[1] = sub_100056B48;
  return sub_100056414((uint64_t)v6);
}

uint64_t sub_100056B48()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 24);
  id v6 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  uint64_t v8 = *(void *)(v3 + 32);
  if (v2)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  }
  _Block_release(*(const void **)(v4 + 32));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_100056CE4(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for CloudPairedDeviceRecord();
  v2[4] = swift_task_alloc();
  return _swift_task_switch(sub_100056D74, 0, 0);
}

uint64_t sub_100056D74()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (v1)
  {
    uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 440))();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144))(v2);
      if (v5)
      {
        uint64_t v6 = v4;
        uint64_t v7 = v5;
        if ([*(id *)(v0 + 16) fastLEConnectionInfoVersion]
          && (id v8 = [*(id *)(v0 + 16) fastLEConnectionInfoData]) != 0)
        {
          uint64_t v9 = v8;
          uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v12 = v11;

          switch(v12 >> 62)
          {
            case 1uLL:
              uint64_t v18 = (int)v10;
              uint64_t v19 = v10 >> 32;
              goto LABEL_15;
            case 2uLL:
              uint64_t v18 = *(void *)(v10 + 16);
              uint64_t v19 = *(void *)(v10 + 24);
LABEL_15:
              if (v18 == v19) {
                goto LABEL_16;
              }
              goto LABEL_8;
            case 3uLL:
              goto LABEL_16;
            default:
              if ((v12 & 0xFF000000000000) != 0)
              {
LABEL_8:
                uint64_t v13 = *(_OWORD **)(v0 + 32);
                uint64_t v23 = *(void **)(v0 + 16);
                uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v3 + 200))();
                swift_retain();
                char v22 = sub_10005EAF8(v14, v3);
                swift_release();
                swift_bridgeObjectRelease();
                sub_1000394AC(v6, v7, v23, (uint64_t)v22, v13);
                (*(void (**)(_OWORD *))(*(void *)v3 + 336))(v13);
                sub_10003CE7C((uint64_t)v13);
                swift_release();
                sub_10000AB1C(v10, v12);
                swift_release();
                swift_task_dealloc();
                uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
                goto LABEL_20;
              }
LABEL_16:
              swift_bridgeObjectRelease();
              sub_10000AB1C(v10, v12);
              break;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        sub_10005E6A4();
        swift_allocError();
        *uint64_t v20 = 0;
        swift_willThrow();
        swift_release();
        goto LABEL_18;
      }
      swift_release();
    }
    sub_10005E6A4();
    swift_allocError();
    *uint64_t v17 = 1;
    swift_willThrow();
LABEL_18:
    swift_release();
    goto LABEL_19;
  }
  sub_10005E6A4();
  swift_allocError();
  *uint64_t v16 = 1;
  swift_willThrow();
LABEL_19:
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
  return v15();
}

uint64_t sub_10005728C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  void *v7 = v3;
  v7[1] = sub_100060ECC;
  return sub_100056CE4((uint64_t)v6);
}

uint64_t sub_100057350(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = sub_10000423C((uint64_t *)&unk_10008FD80);
  v2[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  sub_10000423C((uint64_t *)&unk_10008F460);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  sub_10000423C(&qword_10008FA50);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CloudPairedDeviceRecord();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_100057560, 0, 0);
}

uint64_t sub_100057560()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0[3]
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (!v1)
  {
    sub_10005E6A4();
    swift_allocError();
    *uint64_t v37 = 1;
    swift_willThrow();
    goto LABEL_34;
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 440))(v1);
  if (!v2)
  {
    sub_10005E6A4();
    swift_allocError();
    unsigned char *v38 = 1;
    swift_willThrow();
    goto LABEL_33;
  }
  uint64_t v3 = v2;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 200))();
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v129 = v3;
  if (!v5)
  {
    uint64_t v39 = 1;
    goto LABEL_31;
  }
  uint64_t v7 = v0[16];
  uint64_t v6 = v0[17];
  uint64_t v8 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  id v130 = *(id *)(v6 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v9 = v0[19];
    uint64_t v10 = (void *)v0[2];
    sub_10003CE18(v8, v9);
    unint64_t v11 = (uint64_t *)(v9 + *(int *)(v7 + 24));
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    swift_bridgeObjectRetain();
    id v14 = [v10 idsDeviceID];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      uint64_t v20 = v0[18];
      uint64_t v19 = v0[19];
      if (v13 == v16 && v12 == v18)
      {
        swift_bridgeObjectRelease_n();
        sub_10003CE18(v19, v20);
LABEL_27:
        sub_10003CE7C(v0[18]);
        goto LABEL_29;
      }
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10003CE18(v19, v20);
      if (v22) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v24 = v0[18];
      uint64_t v23 = v0[19];
      swift_bridgeObjectRelease();
      sub_10003CE18(v23, v24);
    }
    uint64_t v25 = (void *)v0[2];
    uint64_t v26 = (uint64_t *)(v0[18] + *(int *)(v7 + 24));
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    swift_bridgeObjectRetain();
    id v29 = [v25 identifier];
    if (!v29)
    {
      sub_10003CE7C(v0[18]);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    uint64_t v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    uint64_t v34 = v0[18];
    if (v28 == v31 && v27 == v33) {
      break;
    }
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    sub_10003CE7C(v34);
    swift_bridgeObjectRelease();
    if (v36) {
      goto LABEL_29;
    }
LABEL_6:
    sub_10003CE7C(v0[19]);
    v8 += (uint64_t)v130;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      uint64_t v39 = 1;
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease();
  sub_10003CE7C(v34);
  swift_bridgeObjectRelease();
LABEL_29:
  uint64_t v40 = v0[19];
  uint64_t v41 = v0[15];
  swift_bridgeObjectRelease();
  sub_10004B014(v40, v41);
  uint64_t v39 = 0;
LABEL_30:
  uint64_t v3 = v129;
LABEL_31:
  uint64_t v43 = v0[16];
  uint64_t v42 = v0[17];
  uint64_t v44 = v0[15];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v44, v39, 1, v43);
  swift_bridgeObjectRelease();
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  if (v45(v44, 1, v43) != 1)
  {
    uint64_t v49 = v0[16];
    sub_10004B014(v0[15], v0[20]);
    uint64_t v50 = sub_10005ED24(&qword_10008FD90, (void (*)(uint64_t))type metadata accessor for CloudPairedDeviceRecord);
    uint64_t v51 = (void *)sub_100037758(v49, v50);
    id v52 = [objc_allocWithZone((Class)CBControllerInfo) init];
    [v52 setCloudSyncStatus:1];
    id v131 = v51;
    id v53 = [v51 recordChangeTag];
    id v128 = v52;
    if (!v53)
    {
LABEL_54:
      uint64_t v94 = v0[16];
      uint64_t v95 = v0[14];
      (*(void (**)(id))(*(void *)v3 + 168))(v53);
      int v96 = v45(v95, 1, v94);
      uint64_t v97 = v0[14];
      if (v96 == 1)
      {
        sub_10000E044(v0[14], &qword_10008FA50);
      }
      else
      {
        uint64_t v98 = sub_10003C2A8();
        unint64_t v100 = v99;
        sub_10003CE7C(v97);
        if (v100 >> 60 != 15)
        {
          uint64_t v101 = *(void *)(v0[20] + *(int *)(v0[16] + 36));
          uint64_t v102 = *(void *)(v101 + 16);
          if (v102)
          {
            swift_bridgeObjectRetain();
            uint64_t v103 = v102 - 1;
            uint64_t v104 = (unint64_t *)(v101 + 40);
            do
            {
              uint64_t v105 = v103;
              uint64_t v107 = *(v104 - 1);
              unint64_t v106 = *v104;
              sub_10000AF6C(v107, *v104);
              char v108 = sub_10005D500(v107, v106, v98, v100);
              sub_10000AB1C(v107, v106);
              if (v108) {
                break;
              }
              uint64_t v103 = v105 - 1;
              v104 += 2;
            }
            while (v105);
            swift_bridgeObjectRelease();
            id v52 = v128;
          }
          else
          {
            char v108 = 0;
          }
          [v52 setFastLEConnectionAllowed:v108 & 1];
          sub_10000AB08(v98, v100);
        }
      }
      uint64_t v114 = v0[20];
      uint64_t v115 = v0[16];
      unint64_t v116 = (uint64_t *)(v114 + *(int *)(v115 + 32));
      uint64_t v117 = *v116;
      unint64_t v118 = v116[1];
      sub_10000AF6C(*v116, v118);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000AB1C(v117, v118);
      [v52 setFastLEConnectionInfoData:isa];

      unint64_t v120 = *(void *)(v114 + *(int *)(v115 + 28));
      if ((v120 & 0x8000000000000000) != 0) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      if (v120 > 0xFF) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v121 = v0[20];
      uint64_t v122 = v0[16];
      [v52 setFastLEConnectionInfoVersion:v120];
      unint64_t v123 = *(void *)(v121 + *(int *)(v122 + 48));
      if ((v123 & 0x8000000000000000) != 0 || HIDWORD(v123)) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v124 = v0[20];
      [v128 setSupportedServices:];

      swift_release();
      swift_release();
      sub_10003CE7C(v124);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v125 = (uint64_t (*)(id))v0[1];
      return v125(v128);
    }
    unint64_t v127 = v45;
    uint64_t v54 = v0[20];
    uint64_t v55 = v0[16];
    uint64_t v56 = v0[13];
    uint64_t v57 = v0[6];
    uint64_t v58 = v0[7];

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v56, v54 + *(int *)(v55 + 20), v57);
    uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
    v59(v56, 0, 1, v57);
    id v60 = [v131 modificationDate];
    uint64_t v61 = v0[11];
    if (v60)
    {
      uint64_t v62 = v60;
      uint64_t v64 = v0[7];
      uint64_t v63 = v0[8];
      uint64_t v65 = v0[6];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      int v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32);
      v66(v61, v63, v65);
      v59(v61, 0, 1, v65);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v61, 1, v65) != 1)
      {
        uint64_t v67 = v0[12];
        uint64_t v68 = v66;
        uint64_t v69 = v0[6];
        v68(v67, v0[11], v69);
        v59(v67, 0, 1, v69);
        goto LABEL_46;
      }
    }
    else
    {
      v59(v0[11], 1, 1, v0[6]);
    }
    id v70 = [v131 creationDate];
    if (v70)
    {
      uint64_t v71 = v70;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v72 = 0;
    }
    else
    {
      uint64_t v72 = 1;
    }
    uint64_t v74 = v0[11];
    uint64_t v73 = v0[12];
    uint64_t v75 = v0[10];
    v59(v75, v72, 1, v0[6]);
    sub_1000043DC(v75, v73, (uint64_t *)&unk_10008F460);
    sub_10000E044(v74, (uint64_t *)&unk_10008F460);
LABEL_46:
    uint64_t v76 = v0[12];
    uint64_t v77 = v0[6];
    uint64_t v78 = v0[7];
    uint64_t v79 = v0[5];
    uint64_t v80 = v79 + *(int *)(v0[4] + 48);
    sub_1000145C4(v0[13], v79, (uint64_t *)&unk_10008F460);
    sub_1000145C4(v76, v80, (uint64_t *)&unk_10008F460);
    char v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
    int v82 = v81(v79, 1, v77);
    uint64_t v83 = v0[6];
    if (v82 == 1)
    {
      uint64_t v84 = v0[13];
      sub_10000E044(v0[12], (uint64_t *)&unk_10008F460);
      sub_10000E044(v84, (uint64_t *)&unk_10008F460);
      int v85 = v81(v80, 1, v83);
      id v52 = v128;
      if (v85 == 1)
      {
        sub_10000E044(v0[5], (uint64_t *)&unk_10008F460);
        uint64_t v86 = 3;
        uint64_t v3 = v129;
        uint64_t v45 = v127;
        p_type = (char **)(&stru_10008CFF0 + 16);
LABEL_53:
        id v53 = [v52 p_type[504]:v86];
        goto LABEL_54;
      }
    }
    else
    {
      sub_1000145C4(v0[5], v0[9], (uint64_t *)&unk_10008F460);
      int v88 = v81(v80, 1, v83);
      uint64_t v90 = v0[12];
      uint64_t v89 = v0[13];
      uint64_t v91 = v0[9];
      if (v88 != 1)
      {
        uint64_t v110 = v0[7];
        uint64_t v109 = v0[8];
        uint64_t v111 = v0[6];
        uint64_t v126 = v0[5];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 32))(v109, v80, v111);
        sub_10005ED24(&qword_10008FD98, (void (*)(uint64_t))&type metadata accessor for Date);
        char v112 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
        v113(v109, v111);
        sub_10000E044(v90, (uint64_t *)&unk_10008F460);
        sub_10000E044(v89, (uint64_t *)&unk_10008F460);
        v113(v91, v111);
        sub_10000E044(v126, (uint64_t *)&unk_10008F460);
        id v52 = v128;
        uint64_t v3 = v129;
        uint64_t v45 = v127;
        p_type = (char **)(&stru_10008CFF0 + 16);
        if (v112)
        {
          uint64_t v86 = 3;
          goto LABEL_53;
        }
        goto LABEL_52;
      }
      uint64_t v92 = v0[6];
      uint64_t v93 = v0[7];
      sub_10000E044(v0[12], (uint64_t *)&unk_10008F460);
      sub_10000E044(v89, (uint64_t *)&unk_10008F460);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v91, v92);
      id v52 = v128;
    }
    sub_10000E044(v0[5], (uint64_t *)&unk_10008FD80);
    uint64_t v3 = v129;
    uint64_t v45 = v127;
    p_type = &stru_10008CFF0.type;
LABEL_52:
    uint64_t v86 = 2;
    goto LABEL_53;
  }
  sub_10000E044(v0[15], &qword_10008FA50);
  sub_10005E6A4();
  swift_allocError();
  *char v46 = 2;
  swift_willThrow();
  swift_release();
LABEL_33:
  swift_release();
LABEL_34:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = (uint64_t (*)(void))v0[1];
  return v47();
}

uint64_t sub_1000583E4(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  void *v7 = v3;
  v7[1] = sub_1000584A8;
  return sub_100057350((uint64_t)v6);
}

uint64_t sub_1000584A8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  id v6 = *(void **)(*v2 + 24);
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void (***)(void, void, void))(v5 + 32);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0);
    _Block_release(v9);
  }
  unint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_100058660()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_100058720, 0, 0);
}

uint64_t sub_100058720()
{
  *(_DWORD *)(v0 + 72) = 0;
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 40)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (v1)
  {
    uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 480))();
    if (v2)
    {
      if ((*(uint64_t (**)(void))(*(void *)v2 + 112))())
      {
        int v3 = 1;
        *(_DWORD *)(v0 + 72) = 1;
      }
      else
      {
        int v3 = 0;
      }
      uint64_t v6 = *(void *)(v0 + 56);
      uint64_t v5 = *(void *)(v0 + 64);
      uint64_t v7 = *(void *)(v0 + 48);
      uint64_t v8 = sub_100038580();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        unint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v11 = 67109120;
        *(_DWORD *)(v0 + 76) = v3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Distributed logging status: %u", v11, 8u);
        swift_slowDealloc();
      }
      swift_release();
      swift_release();

      (*(void (**)(void, void))(*(void *)(v0 + 56) + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));
      swift_beginAccess();
      uint64_t v4 = *(unsigned int *)(v0 + 72);
    }
    else
    {
      swift_release();
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v12(v4);
}

uint64_t sub_100058AF0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  void *v4 = v2;
  v4[1] = sub_100058B98;
  return sub_100058660();
}

uint64_t sub_100058B98(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    os_log_type_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, a1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  unint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_100058D24(int a1)
{
  *(void *)(v2 + 16) = v1;
  *(_DWORD *)(v2 + 52) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 24) = v3;
  *(void *)(v2 + 32) = *(void *)(v3 - 8);
  *(void *)(v2 + 40) = swift_task_alloc();
  return _swift_task_switch(sub_100058DE8, 0, 0);
}

uint64_t sub_100058DE8()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 480))();
  if (!v2)
  {
    swift_release();
LABEL_7:
    sub_10005ED6C();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_8;
  }
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 24);
  (*(void (**)(void))(*(void *)v2 + 120))(*(_DWORD *)(v0 + 52) & 1);
  uint64_t v6 = sub_100038580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = *(_DWORD *)(v0 + 52);
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v10 = 67109120;
    *(_DWORD *)(v0 + 48) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Distributed logging status changed: %u", v10, 8u);
    swift_slowDealloc();
  }
  swift_release();
  swift_release();

  (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40), *(void *)(v0 + 24));
  swift_task_dealloc();
  unint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
LABEL_8:
  return v11();
}

uint64_t sub_1000591DC(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[4] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100059298;
  return sub_100058D24(a1);
}

uint64_t sub_100059298()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  int v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_10005941C()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000594DC, 0, 0);
}

uint64_t sub_1000594DC()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 480))();
  if (!v2)
  {
    swift_release();
LABEL_7:
    char v6 = 0;
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 24);
  char v6 = (*(uint64_t (**)(void))(*(void *)v2 + 112))();
  uint64_t v7 = sub_100038580();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v10 = 67109120;
    *(_DWORD *)(v0 + 48) = v6 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Apple audio accessory limited logging enabled: %{BOOL}d", v10, 8u);
    swift_slowDealloc();
  }
  swift_release();
  swift_release();

  (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40), *(void *)(v0 + 24));
LABEL_8:
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11(v6 & 1);
}

uint64_t sub_100059870(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  void *v4 = v2;
  v4[1] = sub_100059918;
  return sub_10005941C();
}

uint64_t sub_100059918(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    os_log_type_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_100059AA8(char a1)
{
  *(void *)(v2 + 24) = v1;
  *(unsigned char *)(v2 + 56) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = *(void *)(v3 - 8);
  *(void *)(v2 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_100059B6C, 0, 0);
}

uint64_t sub_100059B6C()
{
  uint64_t v24 = v0;
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (v1)
  {
    uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 480))();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v5 = *(void *)(v0 + 40);
      uint64_t v4 = *(void *)(v0 + 48);
      uint64_t v6 = *(void *)(v0 + 32);
      uint64_t v7 = sub_100038580();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      BOOL v10 = os_log_type_enabled(v8, v9);
      uint64_t v12 = *(void *)(v0 + 40);
      uint64_t v11 = *(void *)(v0 + 48);
      uint64_t v13 = *(void *)(v0 + 32);
      if (v10)
      {
        uint64_t v22 = *(void *)(v0 + 32);
        int v14 = *(unsigned __int8 *)(v0 + 56);
        uint64_t v21 = *(void *)(v0 + 48);
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136315138;
        uint64_t v23 = v20;
        if (v14) {
          uint64_t v16 = 7562585;
        }
        else {
          uint64_t v16 = 28494;
        }
        if (v14) {
          unint64_t v17 = 0xE300000000000000;
        }
        else {
          unint64_t v17 = 0xE200000000000000;
        }
        *(void *)(v0 + 16) = sub_100004FA4(v16, v17, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Enable Apple audio accessory limited logging: %s", v15, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v21, v22);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      }
      (*(void (**)(void))(*(void *)v3 + 120))(*(unsigned __int8 *)(v0 + 56));
      swift_release();
    }
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_100059FA8(char a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[4] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100060EA4;
  return sub_100059AA8(a1);
}

uint64_t sub_10005A3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    long long v6 = *(_OWORD *)(a1 + 16);
    v10[0] = *(_OWORD *)a1;
    v10[1] = v6;
    uint64_t v11 = *(void *)(a1 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_10005E10C((uint64_t)v10, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000E044(a1, &qword_1000901A8);
    sub_10005DAD4(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_10000E044((uint64_t)v10, &qword_1000901A8);
  }
}

uint64_t sub_10005A48C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000423C(&qword_100090150);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  long long v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    unint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_100007CB8(*(void *)(a1 + 56) + 40 * v12, (uint64_t)v46);
    uint64_t v44 = v19;
    uint64_t v45 = v18;
    long long v41 = v46[0];
    long long v42 = v46[1];
    uint64_t v43 = v47;
    uint64_t v31 = v19;
    uint64_t v32 = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v29[0] = v41;
    v29[1] = v42;
    uint64_t v30 = v43;
    swift_dynamicCast();
    long long v37 = v33;
    long long v38 = v34;
    uint64_t v39 = v35;
    sub_100007A14(&v36, v40);
    long long v33 = v37;
    long long v34 = v38;
    uint64_t v35 = v39;
    sub_100007A14(v40, v29);
    sub_100007A14(v29, &v37);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~v6[v21 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~v6[v21 >> 6])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = v6[v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v33;
    *(_OWORD *)(v10 + 16) = v34;
    *(void *)(v10 + 32) = v35;
    uint64_t result = (uint64_t)sub_100007A14(&v37, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10003540C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10005A9F8(int a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[4] = v7;
  unint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10008FE48 + dword_10008FE48);
  id v8 = a4;
  unint64_t v9 = (void *)swift_task_alloc();
  v4[5] = v9;
  *unint64_t v9 = v4;
  v9[1] = sub_10005AAE8;
  return v11(v7, a2);
}

uint64_t sub_10005AAE8()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    id v8 = (void *)v6;
  }
  else
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    id v8 = isa;
  }
  unint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_10005AE44(int a1, int a2, uint64_t a3, void *aBlock, void *a5)
{
  void v5[6] = a5;
  v5[7] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  v5[8] = v9;
  swift_unknownObjectRetain();
  id v11 = a5;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  unint64_t v14 = (char *)&dword_10008FE58 + dword_10008FE58;
  uint64_t v12 = (void *)swift_task_alloc();
  v5[9] = v12;
  void *v12 = v5;
  v12[1] = sub_10005AF60;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))v14)(v8, v10, v5 + 2, a3);
}

uint64_t sub_10005AF60()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 48);
  uint64_t v5 = *v1;
  swift_task_dealloc();
  sub_1000057DC(v3 + 16);

  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v3 + 56);
  if (v2)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
  }
  _Block_release(*(const void **)(v3 + 56));
  uint64_t v8 = *(uint64_t (**)(void))(v5 + 8);
  return v8();
}

uint64_t sub_10005B114()
{
  return swift_retain();
}

uint64_t sub_10005B160(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*sub_10005B1B4())()
{
  return j__swift_endAccess;
}

id sub_10005B210()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void sub_10005B268(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue);
  swift_beginAccess();
  uint64_t v4 = *v3;
  void *v3 = a1;
}

void *sub_10005B2BC()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections))
  {
    uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  }
  else
  {
    uint64_t v1 = _swiftEmptyArrayStorage;
    *(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10005B30C(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = a1;
  return swift_bridgeObjectRelease();
}

id sub_10005B324()
{
  uint64_t v1 = OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  }
  else
  {
    id v4 = objc_allocWithZone((Class)NSXPCListener);
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 initWithMachServiceName:v5];

    id v7 = [v6 setDelegate:v0];
    uint64_t v8 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x88))(v7);
    [v6 _setQueue:v8];

    uint64_t v9 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v10 = v2;
  return v3;
}

uint64_t sub_10005B430(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener) = a1;
  return _objc_release_x1();
}

void (*sub_10005B444(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_10005B324();
  return sub_10005B48C;
}

void sub_10005B48C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener) = v2;
}

id sub_10005B4A4(uint64_t a1)
{
  id v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon] = 0;
  *(void *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections] = 0;
  *(void *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener] = 0;
  *(void *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return [super init];
}

uint64_t sub_10005B518()
{
  return sub_10005B770((uint64_t)&unk_1000878A0, (uint64_t)sub_10005FA40, (uint64_t)&unk_1000878B8);
}

uint64_t sub_10005B540(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  objc_super v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100038580();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Activate Bluetooth User Controller XPC Service", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xE0))(v10);
}

void sub_10005B6D4()
{
  id v1 = (id)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
  [v1 resume];
}

uint64_t sub_10005B748()
{
  return sub_10005B770((uint64_t)&unk_1000878F0, (uint64_t)sub_10005FA60, (uint64_t)&unk_100087908);
}

uint64_t sub_10005B770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v19[0] - 8);
  uint64_t v11 = __chkstk_darwin(v19[0]);
  int64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x88))(v11);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v3;
  aBlock[4] = a2;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = a3;
  int64_t v16 = _Block_copy(aBlock);
  unint64_t v17 = v3;
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_10005ED24((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_100007BB4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, void))(v10 + 8))(v13, v19[0]);
  return swift_release();
}

uint64_t sub_10005BA28(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  objc_super v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100038580();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalidate Bluetooth User Controller XPC Service", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xF0))(v10);
}

void sub_10005BBBC()
{
  id v1 = v0;
  unint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0))();
  unint64_t v3 = v2;
  if (v2 >> 62)
  {
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (!v4) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v6 = *(id *)(v3 + 8 * i + 32);
    }
    uint64_t v7 = v6;
    (*(void (**)(void))((swift_isaMask & *v6) + 0x70))();
  }
LABEL_10:
  uint64_t v8 = swift_bridgeObjectRelease();
  id v9 = (id)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xB8))(v8);
  [v9 invalidate];
}

uint64_t sub_10005BD34(void *a1)
{
  unint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0))();
  id v4 = a1;
  objc_super v5 = sub_10005FA68(v3);
  swift_bridgeObjectRelease();

  *(void *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = v5;

  return swift_bridgeObjectRelease();
}

id sub_10005BE14()
{
  return sub_10005BE2C(type metadata accessor for BluetoothUserXPCServer);
}

id sub_10005BE2C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t sub_10005BED0(uint64_t a1, void *a2)
{
  objc_super v3 = v2;
  uint64_t v76 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v76 - 8);
  uint64_t v6 = __chkstk_darwin(v76);
  uint64_t v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v72 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v72 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v17 = (char *)&v72 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v72 - v18;
  if ((sub_10005CA08() & 1) == 0)
  {
    int v47 = IsAppleInternalBuild();
    uint64_t v48 = sub_100038580();
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    if (v47)
    {
      uint64_t v50 = v76;
      v49(v11, v48, v76);
      id v51 = a2;
      id v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 67109378;
        LODWORD(v80) = [v51 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v54 + 8) = 2080;
        uint64_t v80 = sub_100004FA4(0xD00000000000001ALL, 0x800000010007BAB0, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "XPC connection denied, %d, add %s entitlement", (uint8_t *)v54, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v50);
    }
    else
    {
      uint64_t v61 = v76;
      v49(v8, v48, v76);
      uint64_t v62 = a2;
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v65 = 67109120;
        LODWORD(aBlock[0]) = [v62 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v63, v64, "XPC connection denied, %d", v65, 8u);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v63 = v62;
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v61);
    }
    return 0;
  }
  uint64_t v75 = v19;
  sub_100014588(0, &qword_10008F2E8);
  uint64_t v20 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB8))();
  char v21 = static NSObject.== infix(_:_:)();

  if ((v21 & 1) == 0)
  {
    uint64_t v55 = sub_100038580();
    uint64_t v56 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v55, v76);
    uint64_t v57 = a2;
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      id v60 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v60 = 67109120;
      LODWORD(aBlock[0]) = [v57 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v58, v59, "XPC connection denied bad listener, %d", v60, 8u);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v58 = v57;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v56);
    return 0;
  }
  unint64_t v22 = *(uint64_t (**)(void))((swift_isaMask & *v3) + 0x88);
  char v23 = v3;
  uint64_t v24 = v22();
  BOOL v25 = (objc_class *)type metadata accessor for XPCConnection();
  uint64_t v26 = (char *)objc_allocWithZone(v25);
  *(void *)&v26[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener] = v23;
  *(void *)&v26[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_dispatchQueue] = v24;
  *(void *)&v26[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_xpcConnection] = a2;
  v78.receiver = v26;
  v78.super_class = v25;
  id v27 = a2;
  id v28 = [super init];
  aBlock[0] = (uint64_t)sub_10005B2BC();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  *(void *)((char *)v23 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = aBlock[0];
  swift_bridgeObjectRelease();
  id v29 = (id)CBUserControllerXPCInterface();
  [v27 setExportedInterface:v29];

  uint64_t v30 = (void *)v22();
  [v27 _setQueue:v30];

  [v27 setExportedObject:v28];
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v31;
  *(void *)(v32 + 24) = v28;
  aBlock[4] = (uint64_t)sub_10005FC34;
  void aBlock[5] = v32;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_100006FA4;
  void aBlock[3] = (uint64_t)&unk_100087980;
  long long v33 = _Block_copy(aBlock);
  long long v34 = v28;
  swift_release();
  [v27 setInvalidationHandler:v33];
  _Block_release(v33);
  id v35 = (id)CBUserControllerXPCInterface();
  [v27 setRemoteObjectInterface:v35];

  [v27 resume];
  [v27 auditToken];
  if (xpc_copy_code_signing_identity_for_token())
  {
    uint64_t v74 = String.init(cString:)();
    unint64_t v37 = v36;
    uint64_t v38 = sub_100038580();
    uint64_t v39 = v75;
    uint64_t v40 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v75, v38, v76);
    id v41 = v27;
    swift_bridgeObjectRetain();
    long long v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      uint64_t v80 = v72;
      *(_DWORD *)uint64_t v44 = 67109378;
      uint64_t v73 = v34;
      unsigned int v45 = [v41 processIdentifier:v72];

      LODWORD(v77) = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v44 + 8) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v77 = sub_100004FA4(v74, v37, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "XPC connection started: %d, %s", (uint8_t *)v44, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v39, v76);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v39, v40);
      swift_slowDealloc();
    }
    return 1;
  }
  else
  {
    uint64_t v66 = sub_100038580();
    uint64_t v67 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v17, v66, v76);
    uint64_t v68 = v27;
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 67109120;
      LODWORD(v80) = [v68 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v69, v70, "XPC connection started: %d", v71, 8u);
      swift_slowDealloc();
      uint64_t v68 = v34;
    }
    else
    {

      uint64_t v69 = v34;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v67);
    return 1;
  }
}

uint64_t sub_10005CA08()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 valueForEntitlement:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  sub_1000043DC((uint64_t)&v7, (uint64_t)v9, &qword_10008FE80);
  if (v10)
  {
    if (swift_dynamicCast() & 1) != 0 && (v6) {
      return 1;
    }
  }
  else
  {
    sub_10000E044((uint64_t)v9, &qword_10008FE80);
  }
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v0 valueForEntitlement:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  sub_1000043DC((uint64_t)&v7, (uint64_t)v9, &qword_10008FE80);
  if (v10)
  {
    if (swift_dynamicCast()) {
      return v6;
    }
  }
  else
  {
    sub_10000E044((uint64_t)v9, &qword_10008FE80);
  }
  return 0;
}

uint64_t CBDistributedDebugLogging.description.getter(char a1)
{
  if (a1)
  {
    v2._object = (void *)0x800000010007BAF0;
    v2._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(contentsOf:)(v2);
  }
  return 0;
}

uint64_t sub_10005CC88()
{
  if (*v0)
  {
    v2._object = (void *)0x800000010007BAF0;
    v2._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(contentsOf:)(v2);
  }
  return 0;
}

void sub_10005CCE8(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_10005CCF0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_10005CD04@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_10005CD18@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10005CD2C(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_10005CD5C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_10005CD88@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_10005CDAC(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_10005CDC0(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_10005CDD4(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_10005CDE8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10005CDFC(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10005CE10(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10005CE24(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_10005CE38()
{
  return *v0 == 0;
}

_DWORD *sub_10005CE48(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_10005CE5C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_10005CE68@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_10005CE78(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_10005CE84(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10005CE98@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_10005EDC0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_10005CED8(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned __int8 v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  int v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_100060ED0;
  return v6();
}

uint64_t sub_10005CFA4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  int v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *int v5 = v4;
  v5[1] = sub_100060ED0;
  return v7();
}

uint64_t sub_10005D070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000E044(a1, &qword_100090620);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10005D21C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10005D2F8;
  return v6(a1);
}

uint64_t sub_10005D2F8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  NSString v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void *sub_10005D3F0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000423C(&qword_1000901B8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      _OWORD v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005EA04(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005D500(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v9 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      unint64_t v13 = a4 >> 62;
      switch(a4 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_64;
          }
          if (v9 != HIDWORD(a3) - a3) {
            goto LABEL_23;
          }
          goto LABEL_11;
        case 2uLL:
          uint64_t v15 = *(void *)(a3 + 16);
          uint64_t v14 = *(void *)(a3 + 24);
          BOOL v12 = __OFSUB__(v14, v15);
          uint64_t v16 = v14 - v15;
          if (v12) {
            goto LABEL_63;
          }
          if (v9 != v16)
          {
LABEL_23:
            char v23 = 0;
            return v23 & 1;
          }
LABEL_11:
          if (v9 < 1)
          {
            char v23 = 1;
            return v23 & 1;
          }
          break;
        case 3uLL:
          goto LABEL_20;
        default:
          if (v9 != BYTE6(a4)) {
            goto LABEL_23;
          }
          goto LABEL_11;
      }
      switch(a2 >> 62)
      {
        case 1uLL:
          if (a1 >> 32 < (int)a1) {
            goto LABEL_65;
          }
          sub_10000AF6C(a3, a4);
          sub_10000AF6C(v8, v7);
          char v32 = sub_10003D070((int)v8, v8 >> 32, v7 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
          if (v4) {
            goto LABEL_77;
          }
          char v23 = v32;
          sub_10000AB1C(v8, v7);
LABEL_39:
          sub_10000AB1C(a3, a4);
          return v23 & 1;
        case 2uLL:
          uint64_t v7 = a2 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v24 = *(void *)(a1 + 16);
          uint64_t v25 = *(void *)(a1 + 24);
          sub_10000AF6C(a3, a4);
          swift_retain();
          swift_retain();
          char v26 = sub_10003D070(v24, v25, v7, a3, a4);
          if (v4) {
            goto LABEL_76;
          }
          char v23 = v26;
          swift_release();
          swift_release();
          goto LABEL_39;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v13) {
            goto LABEL_40;
          }
          if (v13 != 1)
          {
            uint64_t v33 = *(void *)(a3 + 16);
            uint64_t v34 = *(void *)(a3 + 24);
            sub_10000AF6C(a3, a4);
            sub_10000AF6C(a3, a4);
            swift_retain();
            swift_retain();
            uint64_t v7 = __DataStorage._bytes.getter();
            if (v7)
            {
              uint64_t v35 = __DataStorage._offset.getter();
              if (__OFSUB__(v33, v35))
              {
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
              }
              v7 += v33 - v35;
            }
            BOOL v12 = __OFSUB__(v34, v33);
            int64_t v36 = v34 - v33;
            if (!v12)
            {
              uint64_t v37 = __DataStorage._length.getter();
              if (!v7)
              {
                sub_10000AB1C(a3, a4);
                sub_10000AB1C(a3, a4);
                __break(1u);
LABEL_47:
                uint64_t v8 = a4 & 0x3FFFFFFFFFFFFFFFLL;
                uint64_t v38 = *(void *)(a3 + 16);
                uint64_t v39 = *(void *)(a3 + 24);
                sub_10000AF6C(a3, a4);
                sub_10000AF6C(a3, a4);
                swift_retain();
                swift_retain();
                uint64_t v7 = __DataStorage._bytes.getter();
                if (v7)
                {
                  uint64_t v40 = __DataStorage._offset.getter();
                  if (__OFSUB__(v38, v40)) {
                    goto LABEL_72;
                  }
                  v7 += v38 - v40;
                }
                BOOL v12 = __OFSUB__(v39, v38);
                int64_t v36 = v39 - v38;
                if (v12) {
                  goto LABEL_69;
                }
                uint64_t v37 = __DataStorage._length.getter();
                if (!v7) {
                  goto LABEL_75;
                }
              }
              if (v37 >= v36) {
                size_t v41 = v36;
              }
              else {
                size_t v41 = v37;
              }
              int v31 = memcmp(__s1, (const void *)v7, v41);
              swift_release();
              swift_release();
              sub_10000AB1C(a3, a4);
              goto LABEL_56;
            }
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
            goto LABEL_70;
          }
          uint64_t v17 = (a3 >> 32) - (int)a3;
          if (a3 >> 32 < (int)a3) {
            goto LABEL_67;
          }
          uint64_t v8 = a4 & 0x3FFFFFFFFFFFFFFFLL;
          sub_10000AF6C(a3, a4);
          uint64_t v27 = __DataStorage._bytes.getter();
          if (!v27)
          {
LABEL_74:
            __DataStorage._length.getter();
            __break(1u);
LABEL_75:
            sub_10000AB1C(a3, a4);
            sub_10000AB1C(a3, a4);
            __break(1u);
LABEL_76:
            sub_10000AB1C(a3, a4);
            swift_release();
            swift_release();
            __break(1u);
LABEL_77:
            sub_10000AB1C(a3, a4);
            sub_10000AB1C(v8, v7);
            __break(1u);
            JUMPOUT(0x10005DAA4);
          }
          uint64_t v19 = v27;
          uint64_t v28 = __DataStorage._offset.getter();
          uint64_t v21 = (int)a3 - v28;
          if (__OFSUB__((int)a3, v28))
          {
LABEL_70:
            __break(1u);
            goto LABEL_71;
          }
LABEL_32:
          uint64_t v29 = __DataStorage._length.getter();
          if (v29 >= v17) {
            size_t v30 = v17;
          }
          else {
            size_t v30 = v29;
          }
          int v31 = memcmp(__s1, (const void *)(v19 + v21), v30);
LABEL_56:
          sub_10000AB1C(a3, a4);
          BOOL v22 = v31 == 0;
LABEL_57:
          char v23 = v22;
          return v23 & 1;
        default:
          __s1[0] = a1;
          LOWORD(__s1[1]) = a2;
          BYTE2(__s1[1]) = BYTE2(a2);
          BYTE3(__s1[1]) = BYTE3(a2);
          BYTE4(__s1[1]) = BYTE4(a2);
          BYTE5(__s1[1]) = BYTE5(a2);
          if (!v13)
          {
LABEL_40:
            uint64_t __s2 = a3;
            __int16 v44 = a4;
            char v45 = BYTE2(a4);
            char v46 = BYTE3(a4);
            char v47 = BYTE4(a4);
            char v48 = BYTE5(a4);
            BOOL v22 = memcmp(__s1, &__s2, BYTE6(a4)) == 0;
            goto LABEL_57;
          }
          if (v13 != 1) {
            goto LABEL_47;
          }
          uint64_t v17 = (a3 >> 32) - (int)a3;
          if (a3 >> 32 < (int)a3) {
            goto LABEL_66;
          }
          uint64_t v8 = a4 & 0x3FFFFFFFFFFFFFFFLL;
          sub_10000AF6C(a3, a4);
          uint64_t v18 = __DataStorage._bytes.getter();
          if (v18)
          {
            uint64_t v19 = v18;
            uint64_t v20 = __DataStorage._offset.getter();
            uint64_t v21 = (int)a3 - v20;
            if (__OFSUB__((int)a3, v20))
            {
              __break(1u);
LABEL_20:
              BOOL v22 = v9 == 0;
              goto LABEL_57;
            }
            goto LABEL_32;
          }
          __DataStorage._length.getter();
          __break(1u);
          goto LABEL_74;
      }
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_62;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

double sub_10005DAD4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10002EE3C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v15 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10005E29C();
      uint64_t v11 = v15;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56) + 40 * v8;
    long long v13 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v12;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = *(void *)(v12 + 32);
    sub_10005DF20(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10005DBE8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000423C(&qword_1000901B0);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v40) {
      break;
    }
    BOOL v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v41 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v41 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v41 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v40) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v41 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    uint64_t v25 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = *(void *)(v5 + 56) + 40 * v20;
    if (v42)
    {
      long long v29 = *(_OWORD *)v28;
      long long v30 = *(_OWORD *)(v28 + 16);
      uint64_t v45 = *(void *)(v28 + 32);
      long long v43 = v29;
      long long v44 = v30;
    }
    else
    {
      sub_100007CB8(v28, (uint64_t)&v43);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v27;
    v15[1] = v26;
    uint64_t v16 = *(void *)(v7 + 56) + 40 * v14;
    long long v17 = v43;
    long long v18 = v44;
    *(void *)(v16 + 32) = v45;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  BOOL v22 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v22 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_10005DF20(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          unint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            _OWORD *v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          long long v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *unint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10005E10C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10002EE3C(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_18;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10005E29C();
LABEL_7:
    long long v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 40 * v12;
      return sub_100060E34(a1, v19);
    }
    goto LABEL_13;
  }
  sub_10005DBE8(v15, a4 & 1);
  unint64_t v21 = sub_10002EE3C(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_19:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  long long v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_13:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  BOOL v23 = (uint64_t *)(v18[6] + 16 * v12);
  *BOOL v23 = a2;
  v23[1] = a3;
  uint64_t v24 = v18[7] + 40 * v12;
  long long v25 = *(_OWORD *)a1;
  long long v26 = *(_OWORD *)(a1 + 16);
  *(void *)(v24 + 32) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v24 = v25;
  *(_OWORD *)(v24 + 16) = v26;
  uint64_t v27 = v18[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  void v18[2] = v29;

  return swift_bridgeObjectRetain();
}

void *sub_10005E29C()
{
  NSString v1 = v0;
  sub_10000423C(&qword_1000901B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  BOOL v28 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_100007CB8(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    uint64_t v22 = *(void *)(v4 + 56) + v20;
    uint64_t v23 = v30;
    long long v24 = v29[1];
    *(_OWORD *)uint64_t v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(void *)(v22 + 32) = v23;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    NSString v1 = v28;
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10005E494()
{
  *(void *)(v1 + 136) = v0;
  return _swift_task_switch(sub_10005E4B4, 0, 0);
}

uint64_t sub_10005E4B4()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0[17]
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (v1)
  {
    v2._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v1 + 392))();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    sub_10000423C(&qword_10008ED98);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1000747D0;
    v0[15] = 1920226159;
    v0[16] = 0xE400000000000000;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = 10;
    *(void *)(inited + 80) = 0xE100000000000000;
    unint64_t v4 = sub_10001254C(inited);
    swift_release();
    uint64_t v5 = (uint64_t (*)(unint64_t))v0[1];
    return v5(v4);
  }
  else
  {
    sub_10005E6A4();
    swift_allocError();
    unsigned char *v7 = 1;
    swift_willThrow();
    unint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

unint64_t sub_10005E6A4()
{
  unint64_t result = qword_10008FD50;
  if (!qword_10008FD50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008FD50);
  }
  return result;
}

void *sub_10005E6F8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      unint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 idsDeviceID];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v8;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_18;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_10005E88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v9 = *(void *)(type metadata accessor for CloudPairedDeviceRecord() - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_10005555C(v10, a2, a3, &v12);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      if (v12)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += v11;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return (void *)v13;
  }
  return result;
}

uint64_t sub_10005EA04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10005EAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v25 = type metadata accessor for CloudPairedDeviceRecord();
  uint64_t v5 = a1
     + ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80));
  long long v24 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 144);
  uint64_t v6 = *(void *)(*(void *)(v25 - 8) + 72);
  swift_bridgeObjectRetain();
  id v7 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v8 = (uint64_t *)(v5 + *(int *)(v25 + 24));
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = v24(v11);
    if (!v13)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      uint64_t v16 = sub_10003C2A8();
      if (v17 >> 60 != 15)
      {
        uint64_t v18 = v16;
        unint64_t v19 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v7 = sub_10005D3F0(0, v7[2] + 1, 1, v7);
        }
        unint64_t v21 = v7[2];
        unint64_t v20 = v7[3];
        if (v21 >= v20 >> 1) {
          id v7 = sub_10005D3F0((void *)(v20 > 1), v21 + 1, 1, v7);
        }
        v7[2] = v21 + 1;
        uint64_t v22 = &v7[2 * v21];
        v22[4] = v18;
        v22[5] = v19;
      }
      goto LABEL_4;
    }
    if (v10 == v12 && v13 == v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_4:
    v5 += v6;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_10005ED24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005ED6C()
{
  unint64_t result = qword_10008FDB0;
  if (!qword_10008FDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10008FDB0);
  }
  return result;
}

uint64_t sub_10005EDC0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

void sub_10005EDF8(uint64_t a1)
{
  uint64_t v37 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  int v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v7 = (char *)&v34 - v6;
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  id v8 = [objc_allocWithZone((Class)CNContactStore) init];
  sub_10000423C((uint64_t *)&unk_10008F630);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000747D0;
  *(void *)(v9 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v9 + 40) = v10;
  v41[0] = (id)v9;
  sub_10000423C(&qword_10008FDD0);
  sub_10000423C(&qword_10008FE38);
  if (!swift_dynamicCast())
  {
LABEL_4:
    uint64_t v18 = sub_100038580();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v18, v1);
    uint64_t v20 = v39;
    unint64_t v19 = v40;
    swift_bridgeObjectRetain_n();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v36 = v8;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v35 = v1;
      long long v24 = (uint8_t *)v23;
      v41[0] = (id)swift_slowAlloc();
      *(_DWORD *)long long v24 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_100004FA4(v20, v19, (uint64_t *)v41);
      id v8 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Users first name returned from Bluetoothuserd: (%s)", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v35);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }
    swift_beginAccess();
    NSString v25 = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, NSString, void))(v37 + 16))(v37, v25, 0);

    swift_bridgeObjectRelease();
    id v8 = v25;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  sub_10000423C(&qword_10008FE40);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v41[0] = 0;
  id v12 = [v8 _crossPlatformUnifiedMeContactWithKeysToFetch:isa error:v41];

  if (v12)
  {
    id v13 = v41[0];
    id v14 = [v12 givenName];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    uint64_t v39 = v15;
    unint64_t v40 = v17;
    goto LABEL_4;
  }
  id v26 = v41[0];
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v27 = sub_100038580();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v27, v1);
  swift_errorRetain();
  swift_errorRetain();
  BOOL v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    id v36 = v8;
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    uint64_t v35 = v1;
    *(_DWORD *)uint64_t v30 = 138412290;
    swift_errorRetain();
    unint64_t v32 = (void *)_swift_stdlib_bridgeErrorToNSError();
    v41[0] = v32;
    uint64_t v1 = v35;
    id v8 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v32;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Error trying to access contact store for users first name %@", v30, 0xCu);
    sub_10000423C((uint64_t *)&unk_10008EA40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  swift_errorRetain();
  unint64_t v33 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void *))(v37 + 16))(v37, 0, v33);

  swift_errorRelease();
  swift_errorRelease();
LABEL_8:
}

uint64_t sub_10005F3D4(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + 40) = a2;
  *(void *)(v2 + 32) = a1;
  return _swift_task_switch(sub_10005F3F8, 0, 0);
}

uint64_t sub_10005F3F8()
{
  uint64_t v27 = v0;
  BOOL v1 = *(_DWORD *)(v0 + 40) != 8;
  uint64_t v2 = *(void *)(v0 + 32);
  id v26 = _swiftEmptyDictionarySingleton;
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = (char *)(v23 + 2);
    char v24 = 2 * v1;
    int v5 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    while (1)
    {
      uint64_t v7 = *(v5 - 1);
      unint64_t v6 = *v5;
      uint64_t v8 = sub_10000423C(&qword_10008FDD0);
      sub_100010A0C(v7, v6, v24, v8, v4);
      if (*(void *)v4) {
        break;
      }
      uint64_t v9 = sub_10000423C(&qword_100090158);
      sub_100010A0C(v7, v6, v24, v9, v4);
      if (*(void *)v4)
      {
        *(void *)uint64_t v4 = *(void *)v4;
        sub_100060D74(&qword_100090198, &qword_100090158);
        goto LABEL_7;
      }
      sub_100010A0C(v7, v6, v24, (uint64_t)&type metadata for Bool, v4);
      int v10 = *v4;
      if (v10 != 2)
      {
        char *v4 = v10 & 1;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      }
      sub_100010A0C(v7, v6, v24, (uint64_t)&type metadata for Data, v4);
      unint64_t v11 = v23[3];
      if (v11 >> 60 == 15)
      {
        uint64_t v12 = sub_10000423C(&qword_100090160);
        sub_100010A0C(v7, v6, v24, v12, v4);
        if (*(void *)v4)
        {
          *(void *)uint64_t v4 = *(void *)v4;
          sub_100060DD8(&qword_100090188, &qword_100090160);
          swift_bridgeObjectRetain();
LABEL_19:
          AnyHashable.init<A>(_:)();
          sub_10005A3AC((uint64_t)v25, v7, v6);
          goto LABEL_9;
        }
        uint64_t v14 = sub_10000423C(&qword_100090168);
        sub_100010A0C(v7, v6, v24, v14, v4);
        if (*(void *)v4)
        {
          *(void *)uint64_t v4 = *(void *)v4;
          sub_100060D74(&qword_100090180, &qword_100090168);
          swift_bridgeObjectRetain();
          goto LABEL_19;
        }
        uint64_t v15 = sub_100014588(0, &qword_100090170);
        sub_100010A0C(v7, v6, v24, v15, v4);
        unint64_t v16 = *(void **)v4;
        if (!*(void *)v4)
        {
          sub_100010A0C(v7, v6, v24, (uint64_t)&type metadata for String, v4);
          uint64_t v18 = v23[3];
          if (!v18) {
            goto LABEL_9;
          }
          void v23[2] = v23[2];
          v23[3] = v18;
          swift_bridgeObjectRetain();
          goto LABEL_19;
        }
        *(void *)uint64_t v4 = v16;
        sub_100060CB8();
        swift_bridgeObjectRetain();
        id v17 = v16;
        AnyHashable.init<A>(_:)();
        sub_10005A3AC((uint64_t)v25, v7, v6);
      }
      else
      {
        uint64_t v13 = v23[2];
        void v23[2] = v13;
        v23[3] = v11;
        swift_bridgeObjectRetain();
        sub_10000AF58(v13, v11);
        sub_100060D20();
        AnyHashable.init<A>(_:)();
        sub_10005A3AC((uint64_t)v25, v7, v6);
        sub_10000AB08(v13, v11);
      }
LABEL_9:
      v5 += 2;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    *(void *)uint64_t v4 = *(void *)v4;
    sub_100060DD8(&qword_1000901A0, &qword_10008FDD0);
LABEL_7:
    swift_bridgeObjectRetain();
LABEL_8:
    AnyHashable.init<A>(_:)();
    sub_10005A3AC((uint64_t)v25, v7, v6);
    goto LABEL_9;
  }
LABEL_25:
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = sub_10005A48C(v19);
  swift_bridgeObjectRelease_n();
  unint64_t v21 = (uint64_t (*)(uint64_t))v23[1];
  return v21(v20);
}

uint64_t sub_10005F8DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(v4 + 72) = a4;
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = a3;
  *(void *)(v4 + 48) = a1;
  return _swift_task_switch(sub_10005F904, 0, 0);
}

uint64_t sub_10005F904()
{
  int v1 = *(_DWORD *)(v0 + 72);
  BOOL v2 = v1 != 8;
  BOOL v3 = v1 == 8;
  unint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 48);
  sub_10000582C(*(void *)(v0 + 64), v0 + 16);
  sub_100012454(2 * v2, v5, v4, v0 + 16);
  sub_10000E044(v0 + 16, &qword_10008FE80);
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  sub_100012454(2 * v3, v5, v4, v0 + 16);
  sub_10000E044(v0 + 16, &qword_10008FE80);
  unint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t type metadata accessor for BluetoothUserXPCServer()
{
  return self;
}

uint64_t sub_10005FA08()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005FA40()
{
  return sub_10005B540(*(void **)(v0 + 16));
}

uint64_t sub_10005FA48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005FA58()
{
  return swift_release();
}

uint64_t sub_10005FA60()
{
  return sub_10005BA28(*(void **)(v0 + 16));
}

void *sub_10005FA68(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unint64_t v6 = v5;
        unint64_t v7 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        type metadata accessor for XPCConnection();
        if (static NSObject.== infix(_:_:)())
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        ++v3;
        if (v7 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v3 < *(void *)(v4 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10005FBE4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005FC1C()
{
  return sub_100060A74((void (*)(void))&_swift_release);
}

void sub_10005FC34()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v3 = Strong;
    (*(void (**)(uint64_t))((swift_isaMask & *Strong) + 0xF8))(v1);
  }
}

unint64_t sub_10005FCC4()
{
  unint64_t result = qword_10008FE88;
  if (!qword_10008FE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10008FE88);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for XPCConnection.XPCConnectionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10005FDB4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCConnection.XPCConnectionError()
{
  return &type metadata for XPCConnection.XPCConnectionError;
}

void type metadata accessor for CBDistributedDebugLogging(uint64_t a1)
{
}

uint64_t sub_10005FE00()
{
  return sub_10005ED24(&qword_10008FFA8, type metadata accessor for CBDistributedDebugLogging);
}

uint64_t sub_10005FE48()
{
  return sub_10005ED24(&qword_10008FFB0, type metadata accessor for CBDistributedDebugLogging);
}

uint64_t sub_10005FE90()
{
  return sub_10005ED24(&qword_10008FFB8, type metadata accessor for CBDistributedDebugLogging);
}

uint64_t sub_10005FED8()
{
  return sub_10005ED24((unint64_t *)&unk_10008FFC0, type metadata accessor for CBDistributedDebugLogging);
}

uint64_t sub_10005FF20()
{
  swift_unknownObjectRelease();
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10005FF70()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(unsigned int *)(v0 + 32);
  unint64_t v6 = *(void **)(v0 + 40);
  uint64_t v5 = *(void **)(v0 + 48);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_100060ED0;
  uint64_t v8 = (uint64_t (*)(int, int, uint64_t, void *, void *))((char *)&dword_10008FFD0 + dword_10008FFD0);
  return v8(v2, v3, v4, v6, v5);
}

uint64_t sub_10006003C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100060ED0;
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10008FFE0 + dword_10008FFE0);
  return v6(v2, v3, v4);
}

uint64_t sub_100060100(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100060ED0;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10008FFF0 + dword_10008FFF0);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000601CC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100060204(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000602BC;
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100090000 + dword_100090000);
  return v6(a1, v4);
}

uint64_t sub_1000602BC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000603B0()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000603F8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(unsigned int *)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 40);
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_1000602BC;
  unint64_t v7 = (uint64_t (*)(int, uint64_t, void *, void *))((char *)&dword_100090010 + dword_100090010);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1000604C8()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100060ED0;
  unint64_t v6 = (uint64_t (*)(char, void *, void *))((char *)&dword_100090030 + dword_100090030);
  return v6(v2, v4, v3);
}

uint64_t sub_100060584()
{
  return sub_100060A74((void (*)(void))&__Block_release);
}

uint64_t sub_10006059C()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100060ED0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100090050 + dword_100090050);
  return v5(v2, v3);
}

uint64_t sub_100060654()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100060694()
{
  int v2 = *(_DWORD *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100060ED0;
  unint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_100090070 + dword_100090070);
  return v6(v2, v4, v3);
}

uint64_t sub_100060750()
{
  return sub_100060A74((void (*)(void))&__Block_release);
}

uint64_t sub_100060768()
{
  int v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100060ED0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100090090 + dword_100090090);
  return v5(v2, v3);
}

uint64_t sub_100060820()
{
  int v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100060ED0;
  unint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1000900B0 + dword_1000900B0);
  return v6(v2, v3, v4);
}

uint64_t sub_1000608E0()
{
  int v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100060ED0;
  unint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1000900D0 + dword_1000900D0);
  return v6(v2, v3, v4);
}

uint64_t sub_1000609A0()
{
  int v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100060ED0;
  unint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1000900F0 + dword_1000900F0);
  return v6(v2, v3, v4);
}

uint64_t sub_100060A5C()
{
  return sub_100060A74((void (*)(void))&__Block_release);
}

uint64_t sub_100060A74(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_100060ABC()
{
  int v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100060ED0;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100090110 + dword_100090110);
  return v5(v2, v3);
}

uint64_t sub_100060B74()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100060BBC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100060ED0;
  unint64_t v6 = (uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100090130 + dword_100090130);
  return v6(v2, v3, v4);
}

uint64_t sub_100060C78()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_100060CB8()
{
  unint64_t result = qword_100090178;
  if (!qword_100090178)
  {
    sub_100014588(255, &qword_100090170);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090178);
  }
  return result;
}

unint64_t sub_100060D20()
{
  unint64_t result = qword_100090190;
  if (!qword_100090190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090190);
  }
  return result;
}

uint64_t sub_100060D74(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100007C10(a2);
    sub_100060CB8();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100060DD8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100007C10(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100060E34(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for CBKeyValueSource(uint64_t a1)
{
}

id sub_100060ED4()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }
  else
  {
    id v3 = [(id)BiomeLibrary() Device];
    swift_unknownObjectRelease();
    id v4 = [v3 Wireless];
    swift_unknownObjectRelease();
    id v5 = [v4 BluetoothNearbyDevice];
    swift_unknownObjectRelease();
    unint64_t v6 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v5;
    id v2 = v5;

    uint64_t v1 = 0;
  }
  id v7 = v1;
  return v2;
}

uint64_t sub_100060FA0(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return _objc_release_x1();
}

void (*sub_100060FAC(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100060ED4();
  return sub_100060FF4;
}

void sub_100060FF4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = v2;
}

id sub_100061004()
{
  uint64_t v1 = (void *)v0[4];
  if (v1)
  {
    id v2 = (id)v0[4];
  }
  else
  {
    id v3 = (void *)(*(uint64_t (**)(void))(*v0 + 120))();
    id v4 = [v3 source];

    id v5 = (void *)v0[4];
    v0[4] = v4;
    id v2 = v4;

    uint64_t v1 = 0;
  }
  id v6 = v1;
  return v2;
}

uint64_t sub_10006109C(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return _objc_release_x1();
}

void (*sub_1000610A8(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100061004();
  return sub_1000610F0;
}

void sub_1000610F0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = v2;
}

id sub_100061100()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    id v2 = *(id *)(v0 + 40);
  }
  else
  {
    id v3 = [(id)BiomeLibrary() Device];
    swift_unknownObjectRelease();
    id v4 = [v3 Wireless];
    swift_unknownObjectRelease();
    id v5 = [v4 BluetoothUseCase];
    swift_unknownObjectRelease();
    id v6 = *(void **)(v0 + 40);
    *(void *)(v0 + 40) = v5;
    id v2 = v5;

    uint64_t v1 = 0;
  }
  id v7 = v1;
  return v2;
}

uint64_t sub_1000611CC(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _objc_release_x1();
}

void (*sub_1000611D8(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100061100();
  return sub_100061220;
}

void sub_100061220(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = v2;
}

id sub_100061230()
{
  uint64_t v1 = (void *)v0[6];
  if (v1)
  {
    id v2 = (id)v0[6];
  }
  else
  {
    id v3 = (void *)(*(uint64_t (**)(void))(*v0 + 168))();
    id v4 = [v3 source];

    id v5 = (void *)v0[6];
    v0[6] = v4;
    id v2 = v4;

    uint64_t v1 = 0;
  }
  id v6 = v1;
  return v2;
}

void (*sub_1000612C8(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100061230();
  return sub_10000F14C;
}

uint64_t sub_100061310(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  int v20 = a4;
  int v21 = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(v5 + 16);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(unsigned char *)(v17 + 24) = a3;
  *(void *)(v17 + 32) = a1;
  *(void *)(v17 + 40) = a2;
  *(unsigned char *)(v17 + 48) = v20;
  *(_DWORD *)(v17 + 52) = v21;
  aBlock[4] = sub_100061A60;
  void aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100088020;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  char v24 = _swiftEmptyArrayStorage;
  sub_10000AAC0((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000D808((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v23);
  swift_release();
  return swift_release();
}

uint64_t sub_100061618()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100061650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = result;
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    Class v14 = Bool._bridgeToObjectiveC()().super.super.isa;
    LODWORD(v32) = a6;
    Class v15 = UInt32._bridgeToObjectiveC()().super.super.isa;
    id v16 = objc_allocWithZone((Class)BMDeviceBluetoothNearbyDevice);
    swift_bridgeObjectRetain();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v16 initWithInitiator:isa localIdentifier:v17 starting:v14 useCase:v15];

    uint64_t v19 = (void *)(*(uint64_t (**)(void))(*(void *)v12 + 144))();
    [v19 sendEvent:v18];

    uint64_t v20 = sub_1000383F8();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v20, v7);
    id v21 = v18;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      os_log_type_t v29 = (void *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v34 = v30;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v31 = v8;
      sub_10006249C(v32);
      uint64_t v25 = String.init(cString:)();
      uint64_t v32 = v7;
      uint64_t v33 = sub_100004FA4(v25, v26, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2112;
      uint64_t v33 = (uint64_t)v21;
      id v27 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v29 = v21;

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Send nearby device event %s for %@", (uint8_t *)v24, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v10, v32);
    }
    else
    {

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  return result;
}

uint64_t sub_100061A20()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100061A60()
{
  return sub_100061650(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(_DWORD *)(v0 + 52));
}

uint64_t sub_100061A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100061A88()
{
  return swift_release();
}

uint64_t sub_100061A90(char a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(void *)(v3 + 16);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(unsigned char *)(v14 + 24) = a1;
  *(_DWORD *)(v14 + 28) = a2;
  aBlock[4] = sub_100062130;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100088070;
  Class v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_10000AAC0((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000D808((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v18);
  swift_release();
  return swift_release();
}

uint64_t sub_100061D7C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = result;
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    Class v11 = UInt32._bridgeToObjectiveC()().super.super.isa;
    id v12 = [objc_allocWithZone((Class)BMDeviceBluetoothUseCase) initWithStarting:isa useCase:v11];

    uint64_t v13 = (void *)(*(uint64_t (**)(void))(*(void *)v9 + 192))();
    [v13 sendEvent:v12];

    uint64_t v14 = sub_1000383F8();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, v4);
    id v15 = v12;
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      os_log_type_t v23 = (void *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v28 = v24;
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v26 = v4;
      sub_10006249C(a3);
      uint64_t v19 = String.init(cString:)();
      uint64_t v27 = sub_100004FA4(v19, v20, &v28);
      uint64_t v25 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2112;
      uint64_t v27 = (uint64_t)v15;
      id v21 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v23 = v15;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Send usecase event %s for %@", (uint8_t *)v18, 0x16u);
      sub_10000423C((uint64_t *)&unk_10008EA40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v7, v26);
    }
    else
    {

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return result;
}

uint64_t sub_1000620F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100062130()
{
  return sub_100061D7C(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_DWORD *)(v0 + 28));
}

uint64_t sub_100062140()
{
  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_100062198()
{
  uint64_t v0 = swift_allocObject();
  sub_1000621D0();
  return v0;
}

uint64_t sub_1000621D0()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005758();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  v8[1] = _swiftEmptyArrayStorage;
  sub_10000AAC0((unint64_t *)&qword_10008EDE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000423C((uint64_t *)&unk_10008E910);
  sub_10000D808((unint64_t *)&qword_10008EDF0, (uint64_t *)&unk_10008E910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  return v0;
}

uint64_t type metadata accessor for IntelligenceManager()
{
  return self;
}

void type metadata accessor for CBUseCase()
{
  if (!qword_100090420)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_100090420);
    }
  }
}

const char *sub_10006249C(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

uint64_t sub_100062DE0@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000880B8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

uint64_t sub_100062E34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000663BC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_100062E5C(void *a1@<X8>)
{
  *a1 = &off_1000880F0;
}

void *sub_100062E6C()
{
  type metadata accessor for SystemNotificationManager();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100062FC8();
  qword_100094B50 = v0;
  return result;
}

uint64_t *sub_100062EA8()
{
  if (qword_100094640 != -1) {
    swift_once();
  }
  return &qword_100094B50;
}

uint64_t sub_100062EF4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100062F2C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100062F74())()
{
  return j__swift_endAccess;
}

void *sub_100062FC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  v13[1] = sub_100005758();
  static DispatchQoS.unspecified.getter();
  Swift::String aBlock = (void **)&_swiftEmptyArrayStorage;
  sub_10000AAC0((unint64_t *)&qword_10008EDE0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000423C((uint64_t *)&unk_10008E910);
  sub_10000AC68((unint64_t *)&qword_10008EDF0, (uint64_t *)&unk_10008E910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  uint64_t v8 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[2] = v8;
  v1[3] = &_swiftEmptyArrayStorage;
  v1[4] = &_swiftEmptyDictionarySingleton;
  uint64_t v18 = sub_100067688;
  uint64_t v19 = v1;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  id v16 = sub_100004EEC;
  os_log_type_t v17 = &unk_1000882E0;
  uint64_t v9 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  xpc_set_event_stream_handler("com.apple.alarm", v8, v9);
  _Block_release(v9);
  uint64_t v10 = v1[2];
  uint64_t v18 = sub_100067690;
  uint64_t v19 = v1;
  Swift::String aBlock = _NSConcreteStackBlock;
  uint64_t v15 = 1107296256;
  id v16 = sub_100004EEC;
  os_log_type_t v17 = &unk_100088308;
  Class v11 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v10, v11);
  _Block_release(v11);
  return v1;
}

uint64_t sub_100063360(uint64_t a1, uint64_t a2)
{
  Date.timeIntervalSince1970.getter();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 168);

  return v5(a1, a2);
}

xpc_object_t sub_1000633D0(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100038480();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  swift_bridgeObjectRetain_n();
  Class v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_100004FA4(a1, a2, &v20);
    uint64_t v18 = v6;
    double v19 = *(double *)&v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2048;
    double v19 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Scheduling alarm: %s for %f", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  xpc_object_t result = xpc_dictionary_create(0, 0, 0);
  if ((~*(void *)&a3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a3 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a3 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v16 = 1000000000 * (uint64_t)a3;
  if ((unsigned __int128)((uint64_t)a3 * (__int128)1000000000) >> 64 == v16 >> 63)
  {
    xpc_dictionary_set_date(result, "Date", v16);
    String.utf8CString.getter();
    swift_unknownObjectRetain();
    xpc_set_event();
    swift_unknownObjectRelease_n();
    return (xpc_object_t)swift_release();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1000636EC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100038480();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v15 = a1;
    os_log_type_t v12 = (uint8_t *)v11;
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v12 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_100004FA4(v15, a2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Canceling alarm: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  String.utf8CString.getter();
  xpc_set_event();
  return swift_release();
}

void sub_10006393C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SystemNotificationSource();
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000DDDC(a3, (uint64_t)v14);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 2, v8);
  if (v15)
  {
    if (v15 == 1)
    {
      int out_token = -1;
      uint64_t v16 = v4[2];
      uint64_t v17 = (void *)swift_allocObject();
      void v17[2] = v4;
      v17[3] = a1;
      v17[4] = a2;
      uint64_t v33 = sub_100066498;
      uint64_t v34 = v17;
      Swift::String aBlock = _NSConcreteStackBlock;
      uint64_t v30 = 1107296256;
      uint64_t v31 = sub_1000072B8;
      uint64_t v32 = &unk_100088190;
      uint64_t v18 = _Block_copy(&aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v19 = String.utf8CString.getter();
      notify_register_dispatch((const char *)(v19 + 32), &out_token, v16, v18);
      swift_release();
      _Block_release(v18);
      if (!out_token)
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v27 = v4[4];
        v4[4] = 0x8000000000000000;
        sub_100065E40(0, a1, a2, isUniquelyReferenced_nonNull_native);
        v4[4] = v27;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
      }
    }
    else
    {
      id v21 = [self defaultCenter];
      NSString v22 = String._bridgeToObjectiveC()();
      os_log_type_t v23 = (void *)swift_allocObject();
      void v23[2] = v4;
      v23[3] = a1;
      unsigned char v23[4] = a2;
      uint64_t v33 = sub_100066430;
      uint64_t v34 = v23;
      Swift::String aBlock = _NSConcreteStackBlock;
      uint64_t v30 = 1107296256;
      uint64_t v31 = sub_100064494;
      uint64_t v32 = &unk_100088140;
      uint64_t v24 = _Block_copy(&aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      id v25 = [v21 addObserverForName:v22 object:v4 queue:0 usingBlock:v24];
      _Block_release(v24);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    (*(void (**)(uint64_t, uint64_t, char *))(*v4 + 160))(a1, a2, v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_100063D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SystemNotificationSource();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000423C(&qword_10008EAB0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9 - 8);
  uint64_t v13 = (char *)&v24[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(v11);
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v23 = v14;
    uint64_t v17 = v14 + ((v16 + 32) & ~v16);
    uint64_t v18 = *(void *)(v10 + 72);
    do
    {
      sub_1000664D0(v17, (uint64_t)v13);
      sub_10000ACAC((uint64_t)v13, (uint64_t)v24);
      sub_100067420((uint64_t)v13);
      uint64_t v19 = v25;
      uint64_t v20 = v26;
      sub_10000AF14(v24, v25);
      uint64_t v21 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 1, 2, v21);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8))(v8, a2, a3, v19, v20);
      sub_10000DE40((uint64_t)v8);
      sub_1000057DC((uint64_t)v24);
      v17 += v18;
      --v15;
    }
    while (v15);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100063FC0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v51 = a1;
  uint64_t v52 = a2;
  uint64_t v6 = type metadata accessor for SystemNotificationSource();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000423C(&qword_10008EAB0);
  uint64_t v48 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Notification();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100038480();
  uint64_t v50 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v20, v16);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v49 = v12;
  v21(v15, v51, v12);
  id v51 = v19;
  NSString v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    os_log_t v46 = v22;
    uint64_t v25 = swift_slowAlloc();
    int v44 = v24;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v45 = swift_slowAlloc();
    v54[0] = v45;
    uint64_t v47 = v16;
    *(_DWORD *)uint64_t v26 = 136315138;
    v42[1] = v26 + 4;
    long long v43 = v26;
    uint64_t v27 = (void *)Notification.name.getter();
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    uint64_t v53 = sub_100004FA4(v28, v30, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v49);
    os_log_t v31 = v46;
    _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v44, "Local notification received: %s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v32 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v51, v47);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v49);

    uint64_t v32 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v51, v16);
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 104))(v32);
  uint64_t v34 = *(void *)(v33 + 16);
  if (v34)
  {
    uint64_t v35 = *(unsigned __int8 *)(v48 + 80);
    uint64_t v52 = v33;
    uint64_t v36 = v33 + ((v35 + 32) & ~v35);
    uint64_t v37 = *(void *)(v48 + 72);
    do
    {
      sub_1000664D0(v36, (uint64_t)v11);
      sub_10000ACAC((uint64_t)v11, (uint64_t)v54);
      sub_100067420((uint64_t)v11);
      uint64_t v38 = v55;
      uint64_t v39 = v56;
      sub_10000AF14(v54, v55);
      uint64_t v40 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v8, 2, 2, v40);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 8))(v8, a3, a4, v38, v39);
      sub_10000DE40((uint64_t)v8);
      sub_1000057DC((uint64_t)v54);
      v36 += v37;
      --v34;
    }
    while (v34);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100064494(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100064588(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  (*(void (**)(void))(*v2 + 176))();
  swift_beginAccess();
  uint64_t v6 = v2[4];
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_10002EE3C(a1, a2);
    if (v8)
    {
      int v9 = *(_DWORD *)(*(void *)(v6 + 56) + 4 * v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      notify_cancel(v9);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  id v10 = [self defaultCenter];
  [v10 removeObserver:v3];
}

const char *sub_100064690(void *a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for SystemNotificationSource();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000423C(&qword_10008EAB0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  int v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_object_t result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v34 = v7;
    uint64_t v15 = String.init(cString:)();
    unint64_t v17 = v16;
    uint64_t v18 = sub_100038480();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v18, v10);
    swift_bridgeObjectRetain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v37[0] = v33;
      uint64_t v32 = v21;
      *(_DWORD *)uint64_t v21 = 136315138;
      v31[1] = v21 + 4;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_100004FA4(v15, v17, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "On xpc event stream, com.apple.notifyd.matching, notification %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 104))(v22);
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24)
    {
      uint64_t v25 = *(unsigned __int8 *)(v34 + 80);
      uint64_t v35 = v23;
      uint64_t v26 = v23 + ((v25 + 32) & ~v25);
      uint64_t v27 = *(void *)(v34 + 72);
      do
      {
        sub_1000664D0(v26, (uint64_t)v9);
        sub_10000ACAC((uint64_t)v9, (uint64_t)v37);
        sub_100067420((uint64_t)v9);
        uint64_t v28 = v38;
        uint64_t v29 = v39;
        sub_10000AF14(v37, v38);
        uint64_t v30 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v5, 1, 2, v30);
        (*(void (**)(char *, uint64_t, unint64_t, uint64_t, uint64_t))(v29 + 8))(v5, v15, v17, v28, v29);
        sub_10000DE40((uint64_t)v5);
        sub_1000057DC((uint64_t)v37);
        v26 += v27;
        --v24;
      }
      while (v24);
    }
    swift_bridgeObjectRelease();
    return (const char *)swift_bridgeObjectRelease();
  }
  return result;
}

const char *sub_100064AC4(void *a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for SystemNotificationSource();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000423C(&qword_10008EAB0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  int v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_object_t result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v34 = v7;
    uint64_t v15 = String.init(cString:)();
    unint64_t v17 = v16;
    uint64_t v18 = sub_100038480();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v18, v10);
    swift_bridgeObjectRetain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v37[0] = v33;
      uint64_t v32 = v21;
      *(_DWORD *)uint64_t v21 = 136315138;
      v31[1] = v21 + 4;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_100004FA4(v15, v17, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "On xpc event stream, com.apple.alarm, notification %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 104))(v22);
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24)
    {
      uint64_t v25 = *(unsigned __int8 *)(v34 + 80);
      uint64_t v35 = v23;
      uint64_t v26 = v23 + ((v25 + 32) & ~v25);
      uint64_t v27 = *(void *)(v34 + 72);
      do
      {
        sub_1000664D0(v26, (uint64_t)v9);
        sub_10000ACAC((uint64_t)v9, (uint64_t)v37);
        sub_100067420((uint64_t)v9);
        uint64_t v28 = v38;
        uint64_t v29 = v39;
        sub_10000AF14(v37, v38);
        static Date.now.getter();
        uint64_t v30 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v5, 0, 2, v30);
        (*(void (**)(char *, uint64_t, unint64_t, uint64_t, uint64_t))(v29 + 8))(v5, v15, v17, v28, v29);
        sub_10000DE40((uint64_t)v5);
        sub_1000057DC((uint64_t)v37);
        v26 += v27;
        --v24;
      }
      while (v24);
    }
    swift_bridgeObjectRelease();
    return (const char *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100064F00()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_100064F48()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100064FB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000423C(&qword_10008EAB0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  int v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000ACAC(a1, (uint64_t)v21);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = sub_10000423C(&qword_100090608);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_1000674B8, v10, v11, a3);
  sub_1000664D0(a3, (uint64_t)v9);
  uint64_t v12 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)a2 + 120))(v21);
  uint64_t v14 = v13;
  unint64_t v15 = *v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_1000658C4(0, *(void *)(v15 + 16) + 1, 1, v15);
    unint64_t *v14 = v15;
  }
  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = sub_1000658C4(v17 > 1, v18 + 1, 1, v15);
    unint64_t *v14 = v15;
  }
  *(void *)(v15 + 16) = v18 + 1;
  sub_100066648((uint64_t)v9, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v18);
  return v12(v21, 0);
}

uint64_t sub_1000651BC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  int v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000423C(&qword_10008EAB0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8);
  v17[1] = *(void *)(v1 + 16);
  sub_1000664D0(a1, (uint64_t)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  sub_100066648((uint64_t)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  aBlock[4] = sub_1000666B0;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_1000881E0;
  unint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = &_swiftEmptyArrayStorage;
  sub_10000AAC0((unint64_t *)&qword_10008EE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_10000AC68((unint64_t *)&qword_10008EE30, (uint64_t *)&unk_10008E960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  return swift_release();
}

uint64_t sub_100065518(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000423C(&qword_10008EAB0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v20 - v11;
  unint64_t v13 = &_swiftEmptyArrayStorage;
  uint64_t v25 = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    unint64_t v15 = (unint64_t *)&_swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      unint64_t v13 = *(void **)(v24 + 72);
      sub_1000664D0(a3 + v16 + (void)v13 * v14, (uint64_t)v12);
      char v17 = a1(v12);
      if (v3)
      {
        sub_100067420((uint64_t)v12);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }
      if (v17)
      {
        sub_100066648((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100066154(0, v15[2] + 1, 1);
        }
        unint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_100066154(v18 > 1, v19 + 1, 1);
          unint64_t v15 = v25;
        }
        _DWORD v15[2] = v19 + 1;
        uint64_t result = sub_100066648(v23, (uint64_t)v15 + v16 + v19 * (void)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = sub_100067420((uint64_t)v12);
      }
      if (v22 == ++v14)
      {
        unint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_100065750()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t sub_100065794()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

void (*sub_1000657D8(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(void **)v1 + 120))();
  return sub_1000095B8;
}

uint64_t sub_100065854()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000658C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000423C(&qword_1000905F8);
  uint64_t v10 = *(void *)(sub_10000423C(&qword_10008EAB0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_10000423C(&qword_10008EAB0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10006752C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_100065B34(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000423C((uint64_t *)&unk_100090610);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    int v32 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_100065E40(int a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10002EE3C(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100065FA4();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(_DWORD *)(v18[7] + 4 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100065B34(result, a4 & 1);
  uint64_t result = sub_10002EE3C(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v20 = a2;
  v20[1] = a3;
  *(_DWORD *)(v18[7] + 4 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v23;

  return swift_bridgeObjectRetain();
}

void *sub_100065FA4()
{
  uint64_t v1 = v0;
  sub_10000423C((uint64_t *)&unk_100090610);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(void *)(v2 + 56) + v20);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v20) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100066154(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100066174(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100066174(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    int64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000423C(&qword_1000905F8);
  uint64_t v10 = *(void *)(sub_10000423C(&qword_10008EAB0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  int64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_10000423C(&qword_10008EAB0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000663BC()
{
  return 0x6C7070612E6D6F63;
}

uint64_t type metadata accessor for SystemNotificationSource()
{
  uint64_t result = qword_100094850;
  if (!qword_100094850) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100066430(char *a1)
{
  return sub_100063FC0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10006643C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006644C()
{
  return swift_release();
}

uint64_t sub_100066458()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100066498()
{
  return sub_100063D84(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000664A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100064FB8(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000664D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008EAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066538()
{
  uint64_t v1 = (int *)(sub_10000423C(&qword_10008EAB0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_1000057DC(v6);
  uint64_t v7 = v6 + v1[9];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100066648(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008EAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000666B0()
{
  uint64_t v1 = *(void *)(sub_10000423C(&qword_10008EAB0) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 104))();
  v7[2] = v3;
  uint64_t v5 = sub_100065518((uint64_t (*)(char *))sub_10006738C, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 112))(v5);
}

unint64_t sub_100066798()
{
  unint64_t result = qword_100090428;
  if (!qword_100090428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090428);
  }
  return result;
}

uint64_t sub_1000667EC()
{
  return sub_10000AC68(&qword_100090430, &qword_100090438);
}

uint64_t *sub_100066828(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_100066974(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_100066A44(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100066B54(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *sub_100066CC8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100066DD8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_100066F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100066F60);
}

uint64_t sub_100066F60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_100066FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100066FE0);
}

uint64_t sub_100066FE0(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_100067064(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t sub_1000670CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

uint64_t sub_10006713C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SystemNotificationManager()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SystemNotificationManager.Constants(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100067274);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemNotificationManager.Constants()
{
  return &type metadata for SystemNotificationManager.Constants;
}

Swift::Int sub_1000672AC()
{
  return Hasher._finalize()();
}

uint64_t sub_10006730C()
{
  return String.hash(into:)();
}

Swift::Int sub_100067330()
{
  return Hasher._finalize()();
}

BOOL sub_10006738C()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_100067420(uint64_t a1)
{
  uint64_t v2 = sub_10000423C(&qword_10008EAB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100067480()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000674B8(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000651BC(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10006752C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_10000423C(&qword_10008EAB0) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

const char *sub_100067688(void *a1)
{
  return sub_100064AC4(a1, v1);
}

const char *sub_100067690(void *a1)
{
  return sub_100064690(a1, v1);
}

uint64_t sub_1000676B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000664A4(a1);
}

uint64_t sub_1000676D0()
{
  qword_100094868 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");

  return swift_unknownObjectRetain();
}

uint64_t sub_10006770C(uint64_t a1)
{
  return sub_1000677C8(a1, &qword_100090818, &static Transaction.$current);
}

uint64_t *Transaction.$current.unsafeMutableAddressor()
{
  if (qword_100094870 != -1) {
    swift_once();
  }
  return &static Transaction.$current;
}

uint64_t static Transaction.$current.getter()
{
  return sub_100067888(&qword_100094870);
}

uint64_t static Transaction.current.getter()
{
  return sub_1000678F8(&qword_100094870);
}

uint64_t sub_1000677B4(uint64_t a1)
{
  return sub_1000677C8(a1, &qword_100090810, &static Transaction.$currentNSXPCConnection);
}

uint64_t sub_1000677C8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_10000423C(a2);
  swift_allocObject();
  uint64_t result = TaskLocal.init(wrappedValue:)();
  *a3 = result;
  return result;
}

uint64_t *Transaction.$currentNSXPCConnection.unsafeMutableAddressor()
{
  if (qword_100094878 != -1) {
    swift_once();
  }
  return &static Transaction.$currentNSXPCConnection;
}

uint64_t static Transaction.$currentNSXPCConnection.getter()
{
  return sub_100067888(&qword_100094878);
}

uint64_t sub_100067888(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t static Transaction.currentNSXPCConnection.getter()
{
  return sub_1000678F8(&qword_100094878);
}

uint64_t sub_1000678F8(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  TaskLocal.get()();
  return v2;
}

uint64_t variable initialization expression of Transaction.underlyingTransaction()
{
  return 0;
}

uint64_t variable initialization expression of Transaction.activityState()
{
  return 0;
}

uint64_t static Transaction.asyncTask(name:block:)(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10000423C(&qword_100090620);
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  sub_100068344(a1, a2, a3);
  id v14 = [self currentConnection];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = 0;
  v16[3] = 0;
  v16[4] = v13;
  v16[5] = v14;
  v16[6] = a4;
  v16[7] = a5;
  swift_retain();
  swift_retain();
  sub_1000680F8((uint64_t)v12, (uint64_t)&unk_100090630, (uint64_t)v16);
  swift_release();
  return swift_release();
}

uint64_t sub_100067AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  void v7[4] = a4;
  _OWORD v7[5] = a5;
  v7[3] = a1;
  return _swift_task_switch(sub_100067B08, 0, 0);
}

uint64_t sub_100067B08()
{
  if (qword_100094870 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 16) = *(void *)(v0 + 32);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  long long v3 = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  void *v4 = v0;
  v4[1] = sub_100067C70;
  uint64_t v5 = *(void *)(v0 + 24);
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v5, v0 + 16, &unk_1000907F8, v2, 0, 0, 0xD000000000000020, 0x800000010007C9C0);
}

uint64_t sub_100067C70()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100067DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  void v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return _swift_task_switch(sub_100067DC8, 0, 0);
}

uint64_t sub_100067DC8()
{
  if (qword_100094878 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = *(void *)(v0 + 32);
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100067F18;
  uint64_t v3 = *(void *)(v0 + 24);
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v3, v0 + 16, &unk_100090808, v1, 0, 0, 0xD000000000000020, 0x800000010007C9C0);
}

uint64_t sub_100067F18()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10006802C(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  void *v3 = v2;
  v3[1] = sub_10005D2F8;
  return v5();
}

uint64_t sub_1000680F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000698BC(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t static Transaction.named<A>(_:with:)(char *a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8 = swift_allocObject();
  sub_100068344(a1, a2, a3);
  a4(v8);
  return swift_release();
}

os_activity_scope_state_s *sub_100068344(char *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  unint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = &v48;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v16 = (char *)&v48 - v15;
  v3[3].opaque[0] = 0;
  v3[2].opaque[0] = 0;
  v3[3].opaque[1] = 0;
  uint64_t v52 = v6;
  uint64_t v53 = v9;
  unint64_t v49 = v7;
  uint64_t v50 = v12;
  int v51 = a3;
  if (a3)
  {
    unint64_t v15 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      LODWORD(v15) = a1 >> 11;
      if (a1 >> 11 == 27) {
        goto LABEL_45;
      }
      LODWORD(v15) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if ((a1 & 0xFFFFFF80) != 0) {
          goto LABEL_34;
        }
        if (a1 <= 0xFF)
        {
          unsigned int v17 = ((_BYTE)a1 + 1);
          goto LABEL_10;
        }
        __break(1u);
        goto LABEL_41;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_30;
  }
  while (1)
  {
    *(void *)description = static String._fromUTF8Repairing(_:)();
    unint64_t v56 = v18;
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = 46;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t v9 = *(char **)description;
    a3 = v56;
    UUID.init()();
    uint64_t v20 = UUID.uuidString.getter();
    unint64_t v22 = v21;
    unint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
    v11 += 8;
    v23(v16, v50);
    *(void *)description = v9;
    unint64_t v56 = a3;
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = v20;
    v24._object = v22;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v25 = v56;
    v3[1].opaque[0] = *(void *)description;
    v3[1].opaque[1] = v25;
    String.utf8CString.getter();
    uint64_t v26 = os_transaction_create();
    swift_release();
    v3[2].opaque[0] = v26;
    swift_unknownObjectRelease();
    LODWORD(v15) = v51;
    if (v51) {
      break;
    }
    a3 = v49;
    uint64_t v9 = v53;
    if (a1)
    {
      if (qword_100094860 != -1) {
        swift_once();
      }
      BOOL v27 = qword_100094868;
      uint64_t v28 = a1;
      goto LABEL_25;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    int v42 = (a1 & 0x3F) << 8;
    unsigned int v43 = (v42 | (a1 >> 6)) + 33217;
    unsigned int v44 = (v42 | (a1 >> 6) & 0x3F) << 8;
    unsigned int v45 = (((v44 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    unsigned int v46 = (v44 | (a1 >> 12)) + 8487393;
    if (v15) {
      unsigned int v17 = v45;
    }
    else {
      unsigned int v17 = v46;
    }
    if (a1 < 0x800) {
      unsigned int v17 = v43;
    }
LABEL_10:
    *(void *)description = (v17 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v17) >> 3)) & 7)));
  }
  unint64_t v15 = (unint64_t)a1 >> 32;
  if ((unint64_t)a1 >> 32) {
    goto LABEL_33;
  }
  LODWORD(v15) = a1 >> 11;
  if (a1 >> 11 == 27) {
    goto LABEL_46;
  }
  LODWORD(v15) = a1 >> 16;
  if (a1 >> 16 <= 0x10)
  {
    if ((a1 & 0xFFFFFF80) != 0) {
      goto LABEL_42;
    }
    a3 = v49;
    uint64_t v9 = v53;
    if (a1 <= 0xFF)
    {
      unsigned int v29 = ((_BYTE)a1 + 1);
      goto LABEL_22;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    unsigned int v47 = (v13 | (a1 >> 6) & 0x3F) << 8;
    if (v15) {
      unsigned int v29 = (((v47 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    }
    else {
      unsigned int v29 = (v47 | (a1 >> 12)) + 8487393;
    }
    goto LABEL_22;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  LODWORD(v13) = (a1 & 0x3F) << 8;
  a3 = v49;
  uint64_t v9 = v53;
  if (a1 >= 0x800) {
    goto LABEL_47;
  }
  unsigned int v29 = (v13 | (a1 >> 6)) + 33217;
LABEL_22:
  *(void *)description = (v29 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v29) & 0x38)) & 0x38));
  if (qword_100094860 != -1) {
    swift_once();
  }
  BOOL v27 = qword_100094868;
  uint64_t v28 = description;
LABEL_25:
  v3[2].opaque[1] = (uint64_t)_os_activity_create((void *)&_mh_execute_header, v28, v27, OS_ACTIVITY_FLAG_DEFAULT);
  swift_beginAccess();
  uint64_t v30 = swift_unknownObjectRetain();
  os_activity_scope_enter(v30, v3 + 3);
  swift_endAccess();
  swift_unknownObjectRelease();
  uint64_t v31 = sub_1000384CC();
  uint64_t v32 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 16))(v9, v31, v52);
  swift_retain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    int64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)int64_t v35 = 136315138;
    uint64_t v54 = v36;
    *(void *)description = 0x3A4E58545BLL;
    unint64_t v56 = 0xE500000000000000;
    uint64_t v37 = v3[1].opaque[0];
    uint64_t v38 = (void *)v3[1].opaque[1];
    swift_retain();
    v39._uint64_t countAndFlagsBits = v37;
    v39._object = v38;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = 93;
    v40._object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    swift_release();
    *(void *)description = sub_100004FA4(*(uint64_t *)description, v56, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Opened %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(a3 + 8))(v53, v52);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(a3 + 8))(v9, v32);
  }
  return v3;
}

uint64_t sub_1000689E8()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100068A38(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 48);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = sub_1000602BC;
  *(_OWORD *)(v6 + 48) = v7;
  *(void *)(v6 + 32) = v4;
  *(void *)(v6 + 40) = v5;
  *(void *)(v6 + 24) = a1;
  return _swift_task_switch(sub_100067B08, 0, 0);
}

uint64_t Transaction.deinit()
{
  sub_100068B30();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100068B30()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v0[2].opaque[0])
  {
    uint64_t v7 = sub_1000384CC();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    int v10 = v9;
    if (os_log_type_enabled(v8, v9))
    {
      HIDWORD(v16) = v10;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = v17;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v19 = 0x3A4E58545BLL;
      unint64_t v20 = 0xE500000000000000;
      uint64_t v13 = v1[1].opaque[0];
      uint64_t v12 = (void *)v1[1].opaque[1];
      swift_retain();
      v14._uint64_t countAndFlagsBits = v13;
      v14._object = v12;
      String.append(_:)(v14);
      v15._uint64_t countAndFlagsBits = 93;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      uint64_t v19 = sub_100004FA4(v19, v20, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, BYTE4(v16), "Closed %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    swift_beginAccess();
    os_activity_scope_leave(v1 + 3);
    swift_endAccess();
    v1[2].opaque[0] = 0;
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t Transaction.__deallocating_deinit()
{
  sub_100068B30();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t static Transaction.named<A>(_:with:)(char *a1, uint64_t a2, unint64_t a3)
{
  return static Transaction.named<A>(_:with:)(a1, a2, a3, (void (*)(uint64_t))sub_100068E5C);
}

uint64_t sub_100068E5C()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t static Transaction.named<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(unsigned char *)(v7 + 88) = a4;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a5;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return _swift_task_switch(sub_100068EB0, 0, 0);
}

uint64_t sub_100068EB0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(int **)(v0 + 40);
  uint64_t v3 = *(char **)(v0 + 24);
  unint64_t v4 = *(unsigned __int8 *)(v0 + 88);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 64) = v5;
  sub_100068344(v3, v2, v4);
  os_log_type_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100068FD0;
  uint64_t v7 = *(void *)(v0 + 16);
  return v9(v7, v5);
}

uint64_t sub_100068FD0()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100069148;
  }
  else {
    uint64_t v2 = sub_1000690E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000690E4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100069148()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static Transaction.named<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(unsigned char *)(v8 + 96) = a4;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 16) = a1;
  return _swift_task_switch(sub_1000691DC, 0, 0);
}

uint64_t sub_1000691DC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 72) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  *(void *)uint64_t v4 = v0;
  *(void *)(v4 + 8) = sub_1000692D4;
  uint64_t v5 = *(void *)(v0 + 64);
  char v6 = *(unsigned char *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 16);
  long long v8 = *(_OWORD *)(v0 + 24);
  *(void *)(v4 + 48) = v2;
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 40) = &unk_100090650;
  *(unsigned char *)(v4 + 88) = v6;
  *(_OWORD *)(v4 + 24) = v8;
  *(void *)(v4 + 16) = v7;
  return _swift_task_switch(sub_100068EB0, 0, 0);
}

uint64_t sub_1000692D4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100069410, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    long long v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100069410()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100069474(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1000602BC;
  return v7(a1);
}

uint64_t sub_100069550(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 24);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000602BC;
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  char v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *char v6 = v5;
  v6[1] = sub_1000602BC;
  return v8(a1);
}

uint64_t Transaction.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x3A4E58545BLL;
}

uint64_t sub_1000696EC()
{
  return Transaction.description.getter();
}

uint64_t type metadata accessor for Transaction()
{
  return self;
}

__n128 sub_100069734(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100069740(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100069760(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s()
{
  if (!qword_1000907D0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1000907D0);
    }
  }
}

uint64_t sub_1000697E0(uint64_t a1, int *a2)
{
  char v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  Swift::String v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100069BE4;
  return v6(a1);
}

uint64_t sub_1000698BC(uint64_t a1)
{
  uint64_t v2 = sub_10000423C(&qword_100090620);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006991C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100069954(uint64_t a1)
{
  Swift::String v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100060ED0;
  char v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000907E0 + dword_1000907E0);
  return v6(a1, v4);
}

uint64_t sub_100069A0C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 24);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100060ED0;
  *(_OWORD *)(v5 + 40) = v6;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = v4;
  return _swift_task_switch(sub_100067DC8, 0, 0);
}

uint64_t sub_100069ACC()
{
  uint64_t v2 = *(int **)(v0 + 16);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100060ED0;
  long long v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  void *v4 = v3;
  v4[1] = sub_10005D2F8;
  return v6();
}

void sub_100069BE8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v109 = a4;
  sub_10006A810((uint64_t)a1, (uint64_t)v139);
  unint64_t v100 = (void *)v139[1];
  uint64_t v101 = v139[0];
  uint64_t v98 = v139[3];
  Swift::Int v99 = v139[2];
  Swift::Int v96 = v139[5];
  uint64_t v97 = (void *)v139[4];
  Swift::Int v120 = v139[7];
  uint64_t v121 = v139[6];
  uint64_t v94 = (void *)v139[9];
  uint64_t v95 = v139[8];
  sub_10006A810(a2, (uint64_t)v134);
  uint64_t v7 = (void *)v134[1];
  uint64_t v124 = v134[2];
  uint64_t v125 = v134[0];
  uint64_t v123 = v134[3];
  uint64_t v126 = v134[4];
  uint64_t v8 = v134[5];
  char v9 = v135;
  Swift::Int v10 = v136;
  uint64_t v11 = v137;
  uint64_t v12 = v138;
  uint64_t v92 = type metadata accessor for Logger();
  uint64_t v107 = *(void *)(v92 - 8);
  uint64_t v13 = __chkstk_darwin(v92);
  unint64_t v106 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v91 = (char *)&v89 - v16;
  uint64_t v113 = a3;
  uint64_t v111 = *(void *)(a3 - 8);
  __chkstk_darwin(v15);
  uint64_t v117 = (uint64_t)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v103 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v110 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v122 = (char *)&v89 - v22;
  __chkstk_darwin(v21);
  uint64_t v108 = (uint64_t)&v89 - v23;
  uint64_t v24 = sub_10000423C(&qword_10008F548);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v104 = (uint64_t)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  unint64_t v116 = (char *)&v89 - v27;
  id v105 = self;
  id v115 = [v105 standardUserDefaults];
  sub_10006A810((uint64_t)a1, (uint64_t)v161);
  uint64_t v102 = v18;
  if (v161[1])
  {
    sub_10006A810(a2, (uint64_t)&v151);
    uint64_t v28 = v152;
    if (!v152)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    unsigned int v29 = (uint64_t *)a2;
    uint64_t v124 = v153;
    uint64_t v125 = v151;
    uint64_t v123 = v154;
    uint64_t v126 = v155;
    Swift::Int v30 = v158;
    uint64_t v31 = v159;
    uint64_t v118 = v156;
    uint64_t v119 = v160;
    int v114 = v157 & 1;
    goto LABEL_6;
  }
  uint64_t v118 = v8;
  uint64_t v119 = v12;
  uint64_t v90 = (uint64_t *)a2;
  sub_10006A810(a2, (uint64_t)&v151);
  if (v152)
  {
    int v114 = v9 & 1;
    Swift::Int v30 = v10;
    uint64_t v28 = v7;
    uint64_t v31 = v11;
    unsigned int v29 = v90;
LABEL_6:
    sub_10006B410(a1);
    int v93 = 1;
    object = v100;
    uint64_t countAndFlagsBits = v101;
    uint64_t v34 = v98;
    Swift::Int baseNumber = v99;
    Swift::Int value = v96;
    uint64_t v36 = v97;
    Swift::Int buildNumber = v120;
    uint64_t v38 = v121;
    uint64_t v41 = v94;
    uint64_t v40 = v95;
    goto LABEL_7;
  }
  Transaction.capture()();
  v49._uint64_t countAndFlagsBits = SystemInfo.buildVersion.getter();
  SystemVersionNumber.init(rawValue:)(&v132, v49);
  sub_10006A810((uint64_t)&v132, (uint64_t)&v140);
  uint64_t v28 = v141;
  if (!v141)
  {

    return;
  }
  uint64_t v124 = v142;
  uint64_t v125 = v140;
  uint64_t v123 = v143;
  uint64_t v126 = v144;
  unsigned __int8 v50 = v146;
  unsigned __int8 v150 = v146;
  Swift::Int v30 = v147;
  uint64_t v31 = v148;
  uint64_t v118 = v145;
  uint64_t v119 = v149;
  NSString v51 = String._bridgeToObjectiveC()();
  id v52 = [v115 stringForKey:v51];

  if (!v52)
  {
    uint64_t v101 = v31;
    int v114 = v50 & 1;
    uint64_t v44 = v124;
    uint64_t v45 = v125;
    uint64_t v46 = v123;
    uint64_t v47 = v118;
    uint64_t v48 = v126;
    goto LABEL_19;
  }
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  v56._uint64_t countAndFlagsBits = v53;
  v56._object = v55;
  SystemVersionNumber.init(rawValue:)(&v133, v56);
  int v93 = 0;
  uint64_t countAndFlagsBits = v133.value.rawValue._countAndFlagsBits;
  object = v133.value.rawValue._object;
  Swift::Int baseNumber = v133.value.baseNumber;
  uint64_t v34 = v133.value.baseLetter._countAndFlagsBits;
  uint64_t v36 = v133.value.baseLetter._object;
  Swift::Int value = v133.value.childType.value;
  uint64_t v38 = *(void *)&v133.value.childType.is_nil;
  Swift::Int buildNumber = v133.value.buildNumber;
  uint64_t v40 = v133.value.suffix.value._countAndFlagsBits;
  uint64_t v41 = v133.value.suffix.value._object;
  int v114 = v150;
  unsigned int v29 = v90;
LABEL_7:
  *(void *)&long long v172 = v125;
  *((void *)&v172 + 1) = v28;
  *(void *)&long long v173 = v124;
  *((void *)&v173 + 1) = v123;
  *(void *)&long long v174 = v126;
  *((void *)&v174 + 1) = v118;
  LOBYTE(v175) = v114;
  *((void *)&v175 + 1) = v30;
  *(void *)&long long v176 = v31;
  *((void *)&v176 + 1) = v119;
  uint64_t v101 = v31;
  if (object)
  {
    Swift::Int v99 = v30;
    unint64_t v100 = v28;
    *(void *)&long long v167 = countAndFlagsBits;
    *((void *)&v167 + 1) = object;
    *(void *)&long long v168 = baseNumber;
    *((void *)&v168 + 1) = v34;
    *(void *)&long long v169 = v36;
    *((void *)&v169 + 1) = value;
    LOBYTE(v170) = v38 & 1;
    *((void *)&v170 + 1) = buildNumber;
    *(void *)&long long v171 = v40;
    *((void *)&v171 + 1) = v41;
    long long v164 = v169;
    long long v165 = v170;
    long long v166 = v171;
    long long v162 = v167;
    long long v163 = v168;
    long long v129 = v174;
    long long v130 = v175;
    long long v131 = v176;
    long long v127 = v172;
    long long v128 = v173;
    int v42 = v29;
    uint64_t v43 = (uint64_t)object;
    Swift::Int v120 = buildNumber;
    uint64_t v121 = v38;
    sub_10006B410(v42);
    sub_100004518();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
      (*(void (**)(long long *, long long *, uint64_t))(v109 + 16))(&v167, &v172, v113);
    }
    sub_10006B4AC(countAndFlagsBits, v43);
    uint64_t v44 = v124;
    uint64_t v45 = v125;
    uint64_t v46 = v123;
    uint64_t v47 = v118;
    Swift::Int v30 = v99;
    uint64_t v28 = v100;
  }
  else
  {
    sub_10006B410(v29);
    uint64_t v44 = v124;
    uint64_t v45 = v125;
    uint64_t v46 = v123;
    uint64_t v47 = v118;
  }
  uint64_t v48 = v126;
  if (v93)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
LABEL_19:
  *(void *)&long long v162 = v45;
  *((void *)&v162 + 1) = v28;
  *(void *)&long long v163 = v44;
  *((void *)&v163 + 1) = v46;
  *(void *)&long long v164 = v48;
  *((void *)&v164 + 1) = v47;
  LOBYTE(v165) = v114;
  *((void *)&v165 + 1) = v30;
  *(void *)&long long v166 = v101;
  *((void *)&v166 + 1) = v119;
  SystemVersionNumber.description.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v58 = String._bridgeToObjectiveC()();
  [v115 setValue:v57 forKey:v58];

LABEL_20:
  uint64_t v59 = v108;
  uint64_t v60 = v113;
  sub_10006A878(v108);
  id v61 = [v105 standardUserDefaults];
  NSString v62 = String._bridgeToObjectiveC()();
  id v63 = [v61 stringForKey:v62];

  uint64_t v64 = (uint64_t)v116;
  uint64_t v65 = v102;
  uint64_t v66 = v103;
  if (v63)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56))(v116, 1, 1, v102);
  }
  uint64_t v67 = v110;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v122, v59, v65);
  uint64_t v68 = v111;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16))(v117, v112, v60);
  uint64_t v69 = v104;
  sub_10006AF3C(v64, v104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v69, 1, v65) == 1)
  {
    sub_10006AFA4(v69);
    uint64_t v70 = sub_100038200();
    uint64_t v71 = v107;
    uint64_t v72 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v106, v70, v92);
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "No lastLaunchBootSessionUUID on record", v75, 2u);
      uint64_t v68 = v111;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v106, v72);
    uint64_t v76 = (uint64_t)v122;
    uint64_t v77 = v117;
    sub_10006AD28((uint64_t)v122, v117, v60, v109);

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v77, v60);
    objc_super v78 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v78(v76, v65);
    v78(v59, v65);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v67, v69, v65);
    sub_10006B3B8();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v87 = v117;
      sub_10006AD28((uint64_t)v122, v117, v60, v109);

      int v88 = *(void (**)(char *, uint64_t))(v66 + 8);
      v88(v67, v65);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v87, v60);
      v88(v122, v65);
      v88((char *)v59, v65);
      uint64_t v86 = v64;
      goto LABEL_33;
    }
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v117, v60);
    uint64_t v79 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v79((uint64_t)v122, v65);
    uint64_t v80 = sub_100038200();
    int v82 = v91;
    uint64_t v81 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v91, v80, v92);
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v83, v84))
    {
      int v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "This is *NOT* the first run since reboot", v85, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v107 + 8))(v82, v81);
    v79((uint64_t)v110, v65);
    v79(v59, v65);
  }
  uint64_t v86 = (uint64_t)v116;
LABEL_33:
  sub_10006AFA4(v86);
}

uint64_t sub_10006A810(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008E760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006A878@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_10000423C(&qword_10008F548);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v27 = 37;
  uint64_t v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v12 + 16) = 37;
  *(_OWORD *)(v12 + 48) = 0u;
  *(void *)(v12 + 61) = 0;
  *(_OWORD *)(v12 + 32) = 0u;
  if (sysctlbyname("kern.bootsessionuuid", (void *)(v12 + 32), &v27, 0, 0))
  {
    int v15 = errno.getter();
    if (!strerror(v15)) {
      __break(1u);
    }
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  static String.Encoding.ascii.getter();
  sub_10006B004(v12, v11);
  if (!v13)
  {
    while (1)
    {
LABEL_9:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v17 = String.init(utf8String:)();
      unint64_t v18 = v16;
      if (v16) {
        unint64_t v19 = v16;
      }
      else {
        unint64_t v19 = 0xE700000000000000;
      }
      uint64_t v20 = sub_100038200();
      (*(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t, uint64_t))(v3 + 16))(v5, v20, v2);
      swift_bridgeObjectRetain();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        if (v18) {
          uint64_t v23 = v17;
        }
        else {
          uint64_t v23 = 0x6E776F6E6B6E55;
        }
        uint64_t v24 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v26 = sub_100004FA4(v23, v19, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v24 + 12) = 1024;
        LODWORD(v26) = errno.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error from sysctlbyname: %s(%d", (uint8_t *)v24, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v25 = *(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))(v3 + 8);
      v3 += 8;
      v25(v5, v2);
    }
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v5 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v2 - 8);
  if (v5[6](v8, 1, v2) == 1)
  {
    sub_10006AFA4((uint64_t)v8);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v5[4])(a1, v8, v2);
}

uint64_t sub_10006AD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100038200();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "This is the first run since reboot", v13, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v14 = [self standardUserDefaults];
  UUID.uuidString.getter();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  [v14 setObject:v15 forKey:v16];

  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
}

uint64_t sub_10006AF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_10008F548);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006AFA4(uint64_t a1)
{
  uint64_t v2 = sub_10000423C(&qword_10008F548);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006B004(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  static String.Encoding.utf8.getter();
  char v11 = static String.Encoding.== infix(_:_:)();
  os_log_type_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v10, v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, a2, v4);
  if (v11)
  {
    v12(v8, v4);
    goto LABEL_4;
  }
  static String.Encoding.ascii.getter();
  char v13 = static String.Encoding.== infix(_:_:)();
  v12(v10, v4);
  v12(v8, v4);
  if (v13)
  {
LABEL_4:
    uint64_t v14 = sub_10006B4FC(0, a1);
    if ((v15 & 1) == 0)
    {
      if ((v14 & 0x8000000000000000) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = static String._tryFromUTF8(_:)();
        uint64_t v18 = v17;
        swift_unknownObjectRelease();
        if (v18)
        {
          static String.Encoding.utf8.getter();
          char v19 = static String.Encoding.== infix(_:_:)();
          v12(v10, v4);
          if (v19 & 1) != 0 || (_StringGuts._isContiguousASCII.getter())
          {
            swift_bridgeObjectRelease();
LABEL_15:
            v12(a2, v4);
            return v16;
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_11;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_11:
  uint64_t v20 = sub_10006B4FC(0, a1);
  if ((v21 & 1) == 0)
  {
    id v22 = [objc_allocWithZone((Class)NSString) initWithBytes:a1 + 32 length:v20 encoding:String.Encoding.rawValue.getter()];
    swift_bridgeObjectRelease();
    if (v22)
    {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v16 = 0;
    }
    goto LABEL_15;
  }
LABEL_18:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10006B328()
{
  String.utf8CString.getter();
  int v0 = _set_user_dir_suffix();
  uint64_t result = swift_release();
  if (!v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t sub_10006B3B8()
{
  unint64_t result = qword_100090820;
  if (!qword_100090820)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090820);
  }
  return result;
}

uint64_t *sub_10006B410(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10006B45C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10006B4AC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10006B4FC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(unsigned __int8 *)(a2 + 32) == a1) {
    return 0;
  }
  if (v2 == 1) {
    return 0;
  }
  if (*(unsigned __int8 *)(a2 + 33) == a1) {
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v2 - 2;
  while (v5 != v4)
  {
    int v6 = *(unsigned __int8 *)(a2 + 34 + v4++);
    if (v6 == a1) {
      return v4 + 1;
    }
  }
  return 0;
}

char *sub_10006B584()
{
  return &byte_100094B68;
}

id sub_10006B590()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (v1)
  {
    id v2 = *(id *)(v0 + 48);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)ACAccountStore) init];
    uint64_t v4 = *(void **)(v0 + 48);
    *(void *)(v0 + 48) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

void (*sub_10006B5FC(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_10006B590();
  return sub_10000F14C;
}

uint64_t sub_10006B644()
{
  if (*(void *)(v0 + 56))
  {
    uint64_t v1 = *(void *)(v0 + 56);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for KeyValueStoreManager();
    uint64_t v1 = sub_10000FC04();
    (*(void (**)(id))(*(void *)v1 + 128))(*(id *)(v2 + 16));
    *(void *)(v2 + 56) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10006B6DC(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t (*sub_10006B6EC(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_10006B644();
  return sub_10006B734;
}

uint64_t sub_10006B734(void *a1)
{
  *(void *)(a1[1] + 56) = *a1;
  return swift_release();
}

void sub_10006B744()
{
  if (*(unsigned char *)(v0 + 64) == 1)
  {
    Transaction.capture()();
    *(unsigned char *)(v0 + 64) = 0;
  }
}

void sub_10006B76C()
{
  *(unsigned char *)(v0 + 64) = 0;
}

uint64_t (*sub_10006B774(void *a1))(uint64_t result)
{
  *a1 = v1;
  sub_10006B744();
  return sub_10006B7B4;
}

uint64_t sub_10006B7B4(uint64_t result)
{
  *(unsigned char *)(*(void *)result + 64) = 0;
  return result;
}

id sub_10006B7C0()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1)
  {
    id v2 = *(id *)(v0 + 72);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)CUSystemMonitor) init];
    [v3 setDispatchQueue:*(void *)(v0 + 16)];
    char v13 = sub_1000700D8;
    uint64_t v14 = v0;
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 1107296256;
    char v11 = sub_100006FA4;
    os_log_type_t v12 = &unk_100088520;
    uint64_t v4 = _Block_copy(&v9);
    swift_retain();
    swift_release();
    [v3 setFirstUnlockHandler:v4];
    _Block_release(v4);
    char v13 = sub_1000700D8;
    uint64_t v14 = v0;
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 1107296256;
    char v11 = sub_100006FA4;
    os_log_type_t v12 = &unk_100088548;
    id v5 = _Block_copy(&v9);
    swift_retain();
    swift_release();
    [v3 activateWithCompletion:v5];
    _Block_release(v5);
    int v6 = *(void **)(v0 + 72);
    *(void *)(v0 + 72) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v7 = v1;
  return v2;
}

uint64_t sub_10006B970(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return _objc_release_x1();
}

void (*sub_10006B97C(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_10006B7C0();
  return sub_10006B9C4;
}

void sub_10006B9C4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = v2;
}

id sub_10006B9D4()
{
  uint64_t v1 = *(void **)(v0 + 80);
  if (v1)
  {
    id v2 = *(id *)(v0 + 80);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)CUSystemMonitor) init];
    [v3 setDispatchQueue:*(void *)(v0 + 16)];
    char v13 = sub_100070174;
    uint64_t v14 = v0;
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 1107296256;
    char v11 = sub_100006FA4;
    os_log_type_t v12 = &unk_1000884D0;
    uint64_t v4 = _Block_copy(&v9);
    swift_retain();
    swift_release();
    [v3 setPrimaryAppleIDChangedHandler:v4];
    _Block_release(v4);
    char v13 = sub_1000700D4;
    uint64_t v14 = v0;
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 1107296256;
    char v11 = sub_100006FA4;
    os_log_type_t v12 = &unk_1000884F8;
    id v5 = _Block_copy(&v9);
    swift_retain();
    swift_release();
    [v3 activateWithCompletion:v5];
    _Block_release(v5);
    int v6 = *(void **)(v0 + 80);
    *(void *)(v0 + 80) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v7 = v1;
  return v2;
}

uint64_t sub_10006BB84(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return _objc_release_x1();
}

void (*sub_10006BB90(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_10006B9D4();
  return sub_10006BBD8;
}

void sub_10006BBD8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 80);
  *(void *)(v1 + 80) = v2;
}

uint64_t sub_10006BBE8()
{
  id v0 = [self processInfo];
  id v1 = [v0 environment];

  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v2 + 16) && (unint64_t v3 = sub_10002EE3C(0xD000000000000010, 0x800000010007CF10), (v4 & 1) != 0))
  {
    id v5 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v3);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  qword_100094B70 = v7;
  qword_100094B78 = v6;
  return result;
}

uint64_t sub_10006BCCC(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_10006BD0C(a1);
  return v2;
}

uint64_t sub_10006BD0C(uint64_t a1)
{
  *(void *)(v1 + 56) = 0;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(unsigned char *)(v1 + 64) = 1;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 99) = 0u;
  uint64_t v3 = v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription;
  uint64_t v4 = sub_10000423C(&qword_10008EBE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer) = 0;
  *(void *)(v1 + 16) = a1;
  return v1;
}

Swift::UInt64 sub_10006BDC8()
{
  uint64_t v1 = (_OWORD *)v0;
  uint64_t v2 = type metadata accessor for DefaultStringInterpolation.PrintUtilsTimeDuration();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = 0;
  unint64_t v29 = 0xE000000000000000;
  Swift::UInt64 v6 = UpTicks()();
  Swift::UInt64 v7 = *(void *)(v0 + 24);
  BOOL v8 = v6 >= v7;
  Swift::UInt64 result = v6 - v7;
  if (v8)
  {
    Swift::UInt64 v10 = UpTicksToSeconds(_:)(result);
    v27._uint64_t countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v11._object = (void *)0x800000010007CB80;
    v11._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v11);
    *(void *)&long long v26 = v10;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DefaultStringInterpolation.PrintUtilsTimeDuration.duration(_:), v2);
    sub_10006C168();
    DefaultStringInterpolation.appendInterpolation<A>(_:_:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t countAndFlagsBits = v27._countAndFlagsBits;
    object = v27._object;
    swift_bridgeObjectRelease();
    uint64_t v28 = countAndFlagsBits;
    unint64_t v29 = (unint64_t)object;
    if (IsAppleInternalBuild())
    {
      v27._uint64_t countAndFlagsBits = 0;
      v27._object = (void *)0xE000000000000000;
      v14._uint64_t countAndFlagsBits = 0x20656C707041202CLL;
      v14._object = (void *)0xEC000000203A4449;
      String.append(_:)(v14);
      long long v26 = v1[2];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
    }
    v15._uint64_t countAndFlagsBits = 10;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v27._uint64_t countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v1 + 440))();
    if (v16)
    {
      uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v16 + 136))();
      uint64_t v19 = v18;
      swift_release();
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v19 = 0;
    }
    *(void *)&long long v26 = v17;
    *((void *)&v26 + 1) = v19;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    swift_bridgeObjectRelease();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 10;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v27._uint64_t countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v1 + 480))();
    if (v21)
    {
      uint64_t v22 = (*(uint64_t (**)(void))(*(void *)v21 + 104))();
      uint64_t v24 = v23;
      swift_release();
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v24 = 0;
    }
    *(void *)&long long v26 = v22;
    *((void *)&v26 + 1) = v24;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    swift_bridgeObjectRelease();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 10;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    return v28;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10006C168()
{
  unint64_t result = qword_100090828;
  if (!qword_100090828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090828);
  }
  return result;
}

uint64_t sub_10006C1BC()
{
  return static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.activate", 32, 2uLL, (void (*)(uint64_t))sub_10006C4A8);
}

uint64_t sub_10006C234(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::UInt64 v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::String v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  aBlock[4] = sub_1000700CC;
  void aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_1000884A8;
  char v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_100050D18();
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_100007BB4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_10006C4A8(uint64_t a1)
{
  return sub_10006C234(a1, v1);
}

uint64_t sub_10006C4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  uint64_t v7 = sub_100038200();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Activate", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 408))(v11);
}

uint64_t sub_10006C678()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - v7;
  if (!*(void *)(v1 + 24)) {
    *(void *)(v1 + 24) = UpTicks()();
  }
  if (qword_100094900 != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v9 = qword_100094B78;
  if (qword_100094B78)
  {
    uint64_t v10 = qword_100094B70;
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_100038200();
    Swift::String v27 = *(void (**)(char *))(v3 + 16);
    uint64_t v28 = v11;
    v27(v8);
    swift_bridgeObjectRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v23 = v10;
      uint64_t v14 = swift_slowAlloc();
      uint64_t v26 = v1;
      Swift::String v15 = (uint8_t *)v14;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v24 = v6;
      uint64_t v30 = v16;
      uint64_t v25 = v2;
      *(_DWORD *)Swift::String v15 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_100004FA4(v23, v9, &v30);
      uint64_t v2 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Launching bluetoothuserd (%s)", v15, 0xCu);
      swift_arrayDestroy();
      uint64_t v6 = v24;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v8, v2);
    ((void (*)(char *, uint64_t, uint64_t))v27)(v6, v28, v2);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      Swift::String v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Activate bluetoothuserd services", v20, 2u);
      swift_slowDealloc();
    }

    v17(v6, v2);
    sub_10006E6CC();
    return notify_post("com.apple.bluetoothuser.daemonStarted");
  }
  else
  {
    uint64_t result = fatalError(_:file:line:)();
    __break(1u);
  }
  return result;
}

unint64_t sub_10006CA38()
{
  return 0xD000000000000027;
}

uint64_t sub_10006CA54()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = sub_10006FA48;
  uint64_t v13 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006FA4;
  void aBlock[3] = &unk_100088400;
  unint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_100050D18();
  sub_10000423C((uint64_t *)&unk_10008E960);
  sub_100007BB4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_10006CCA0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100038200();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Invalidate", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_10006CE04();
}

uint64_t sub_10006CE04()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000423C(&qword_100090830);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000423C(&qword_10008EBE0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10006DD38();
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 440))(v13);
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 320))(v14);
    swift_release();
  }
  uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v0 + 448))(0);
  (*(void (**)(uint64_t))(*(void *)v0 + 552))(v15);
  if (*(void *)(v0 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler)) {
    os_state_remove_handler();
  }
  uint64_t v16 = v0 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription;
  swift_beginAccess();
  sub_10006FFBC(v16, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    uint64_t v17 = &qword_100090830;
    uint64_t v18 = (uint64_t)v8;
  }
  else
  {
    uint64_t v19 = sub_1000043DC((uint64_t)v8, (uint64_t)v12, &qword_10008EBE0);
    (*(void (**)(uint64_t))(*(void *)v1 + 288))(v19);
    sub_1000101E8((uint64_t)v12);
    swift_release();
    uint64_t v18 = (uint64_t)v12;
    uint64_t v17 = &qword_10008EBE0;
  }
  sub_10000E044(v18, v17);
  Swift::String v20 = *(void **)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer);
  if (v20)
  {
    uint64_t v21 = *(void (**)(void))((swift_isaMask & *v20) + 0xE8);
    uint64_t v22 = v20;
    v21();
  }
  uint64_t v23 = sub_100038200();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v23, v2);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Invalidated", v26, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10006D244()
{
  return swift_retain();
}

uint64_t sub_10006D27C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 88) = a1;
  return swift_release();
}

uint64_t (*sub_10006D2C4())()
{
  return j_j__swift_endAccess;
}

void sub_10006D318()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v54[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = &v54[-v8];
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*v0 + 360))(v7);
  id v11 = [v10 primaryAppleID];

  if (!v11)
  {
    uint64_t v18 = v1 + 5;
    uint64_t v17 = v1[5];
    uint64_t v16 = v1 + 4;
LABEL_11:
    if (!v17) {
      return;
    }
    goto LABEL_14;
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  uint64_t v16 = v1 + 4;
  uint64_t v18 = v1 + 5;
  uint64_t v17 = v1[5];
  if (!v15) {
    goto LABEL_11;
  }
  if (v17)
  {
    if (v13 == v1[4] && v17 == v15) {
      goto LABEL_29;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v12 = swift_bridgeObjectRelease();
    if (v20) {
      return;
    }
  }
  else
  {
    uint64_t v12 = swift_bridgeObjectRelease();
  }
LABEL_14:
  uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(*v1 + 264))(v12);
  id v61 = [v21 aa_primaryAppleAccount];

  if (!v61) {
    return;
  }
  id v22 = [v61 aa_altDSID];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    id v26 = [v61 username];
    if (!v26)
    {

      goto LABEL_29;
    }
    Swift::String v27 = v26;
    unint64_t v59 = v25;
    uint64_t v57 = v3;
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    uint64_t v30 = (*(uint64_t (**)(void))(*v1 + 440))();
    if (v30)
    {
      uint64_t v31 = (*(uint64_t (**)(void))(*(void *)v30 + 208))();
      uint64_t v33 = v32;
      swift_release();
      if (v31 == v60 && v33 == v59)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v35)
      {

        swift_bridgeObjectRelease();
LABEL_29:
        swift_bridgeObjectRelease();
        return;
      }
    }
    uint64_t v37 = v58;
    *uint64_t v16 = v58;
    unint64_t *v18 = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (IsAppleInternalBuild())
    {
      uint64_t v38 = sub_100038200();
      uint64_t v39 = v57;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v57 + 16))(v9, v38, v2);
      uint64_t v40 = v59;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      int v43 = v42;
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v63 = v56;
        *(_DWORD *)uint64_t v44 = 136315394;
        int v55 = v43;
        swift_bridgeObjectRetain();
        uint64_t v62 = sub_100004FA4(v37, v29, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v44 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v62 = sub_100004FA4(v60, v59, &v63);
        uint64_t v40 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v55, "Apple Account %s) updated for %s", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v9, v2);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v45 = sub_100038200();
      uint64_t v46 = v57;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v57 + 16))(v6, v45, v2);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        Swift::String v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Apple Account found", v49, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(unsigned char *, uint64_t))(v46 + 8))(v6, v2);
      uint64_t v40 = v59;
    }
    type metadata accessor for CloudPairingManager();
    uint64_t v50 = sub_10004B8B4(v60, v40);
    NSString v51 = *(uint64_t (**)(uint64_t))(*v1 + 448);
    uint64_t v52 = swift_retain();
    uint64_t v53 = v51(v52);
    (*(void (**)(uint64_t))(*(void *)v50 + 312))(v53);

    swift_release();
  }
  else
  {
    id v36 = v61;
  }
}

uint64_t sub_10006DA38()
{
  return swift_retain();
}

uint64_t sub_10006DA70(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 96) = a1;
  return swift_release();
}

uint64_t (*sub_10006DAB8())()
{
  return j__swift_endAccess;
}

uint64_t sub_10006DB0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 480))(v4);
  uint64_t result = swift_release();
  if (!v7)
  {
    uint64_t v9 = sub_100038200();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Debug manager started", v12, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    type metadata accessor for DebugManager();
    uint64_t v13 = sub_10000CD78();
    (*(void (**)(void))(*(void *)v13 + 184))();
    uint64_t v14 = *(void (**)(uint64_t))(*(void *)v1 + 488);
    uint64_t v15 = swift_retain();
    v14(v15);
    return swift_release();
  }
  return result;
}

uint64_t sub_10006DD38()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 480))(v3);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = sub_100038200();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v8, v1);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Debug manager stopped", v11, 2u);
      swift_slowDealloc();
    }

    uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    (*(void (**)(uint64_t))(*(void *)v7 + 192))(v12);
    return swift_release();
  }
  return result;
}

uint64_t sub_10006DF04()
{
  return swift_retain();
}

uint64_t sub_10006DF3C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 104) = a1;
  return swift_release();
}

uint64_t (*sub_10006DF84())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10006DFD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 520))(v4);
  uint64_t result = swift_release();
  if (!v7)
  {
    uint64_t v9 = sub_100038200();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
    os_log_type_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Intelligence manager started", v12, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    type metadata accessor for IntelligenceManager();
    uint64_t v13 = sub_100062198();
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 528))(v13);
  }
  return result;
}

uint64_t sub_10006E1C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 520))(v4);
  swift_release();
  if (v7)
  {
    uint64_t v8 = sub_100038200();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v8, v2);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Intelligence manager stopped", v11, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return (*(uint64_t (**)(void))(*(void *)v1 + 528))(0);
}

uint64_t sub_10006E3A0()
{
  uint64_t v1 = sub_10000423C(&qword_100090830);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v23 = (uint64_t)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v22 - v5;
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v9 = v0 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription;
  swift_beginAccess();
  sub_10006FFBC(v9, (uint64_t)v8);
  uint64_t v10 = sub_10000423C(&qword_10008EBE0);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  uint64_t v13 = sub_10000E044((uint64_t)v8, &qword_100090830);
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 288);
  uint64_t v15 = v14(v13);
  uint64_t v16 = v15;
  if (v12 == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 216))(v15);
    uint64_t v17 = swift_release();
    v14(v17);
    void v24[3] = type metadata accessor for BluetoothUserDaemon();
    v24[4] = &off_100088448;
    v24[0] = v0;
    swift_retain();
    sub_10000FF6C();
    swift_release();
    sub_1000057DC((uint64_t)v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    uint64_t v18 = v23;
    sub_1000043DC((uint64_t)v6, v23, &qword_100090830);
    swift_beginAccess();
    sub_100070024(v18, v9);
    return swift_endAccess();
  }
  else
  {
    char v20 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 360))();
    id v21 = [v20 primaryAppleID];

    if (v21) {
    (*(void (**)(BOOL))(*(void *)v16 + 224))(v21 != 0);
    }
    return swift_release();
  }
}

void sub_10006E6CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v36 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36 - v10;
  int v12 = v0[112];
  unsigned __int8 v41 = v0[112];
  uint64_t v13 = sub_100010914(2, 3, (uint64_t)&type metadata for Bool, (char *)v39);
  if (LOBYTE(v39[0]) == 2)
  {
    uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v0 + 336))(v13);
    int v15 = [v14 firstUnlocked];
  }
  else
  {
    int v15 = v39[0] & 1;
  }
  unsigned __int8 v40 = v15;
  if (v12 != v15)
  {
    uint64_t v16 = sub_100038200();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v11, v16, v2);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 67109376;
      swift_beginAccess();
      v39[0] = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 8) = 1024;
      swift_beginAccess();
      v39[0] = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Cloud Pairing Manager Enabled: %{BOOL}d -> %{BOOL}d", (uint8_t *)v19, 0xEu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    swift_beginAccess();
    v1[112] = v40;
  }
  int v20 = v1[113];
  swift_beginAccess();
  unsigned __int8 v41 = v20;
  uint64_t v21 = sub_100010914(2, 4, (uint64_t)&type metadata for Bool, v38);
  if (v38[0] == 2)
  {
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v21);
    int v23 = [v22 firstUnlocked];
  }
  else
  {
    int v23 = v38[0] & 1;
  }
  swift_beginAccess();
  unsigned __int8 v40 = v23;
  if (v20 != v23)
  {
    uint64_t v24 = sub_100038200();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v24, v2);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 67109376;
      int v37 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 8) = 1024;
      int v37 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Debug Manager Enabled: %{BOOL}d -> %{BOOL}d", (uint8_t *)v27, 0xEu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    v1[113] = v40;
  }
  int v28 = v1[114];
  unsigned __int8 v41 = v1[114];
  uint64_t v29 = sub_100010914(2, 5, (uint64_t)&type metadata for Bool, (char *)&v37);
  if (v37 == 2)
  {
    uint64_t v30 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v29);
    int v31 = [v30 firstUnlocked];
  }
  else
  {
    int v31 = v37 & 1;
  }
  unsigned __int8 v40 = v31;
  if (v28 != v31)
  {
    uint64_t v32 = sub_100038200();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v32, v2);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 67109376;
      int v37 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 8) = 1024;
      int v37 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Intelligence Manager Enabled: %{BOOL}d -> %{BOOL}d", (uint8_t *)v35, 0xEu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v1[114] = v40;
  }
  sub_10006ECDC();
}

void sub_10006ECDC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*v0 + 336))(v4);
  unsigned int v8 = [v7 firstUnlocked];

  if (v8)
  {
    uint64_t v9 = (id *)sub_100007E6C();
    uint64_t v10 = *(void (**)(void))((swift_isaMask & *(void *)*v9) + 0xD8);
    id v11 = *v9;
    v10();

    if (*((unsigned char *)v1 + 112) == 1)
    {
      sub_10006D318();
    }
    else
    {
      uint64_t v16 = (*(uint64_t (**)(void))(*v1 + 440))();
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 320))(v16);
        swift_release();
      }
      (*(void (**)(void))(*v1 + 448))(0);
    }
    if (*((unsigned char *)v1 + 113) == 1) {
      uint64_t v17 = sub_10006DB0C();
    }
    else {
      uint64_t v17 = sub_10006DD38();
    }
    uint64_t v18 = *v1;
    if (*((unsigned char *)v1 + 114) == 1) {
      (*(void (**)(uint64_t))(v18 + 544))(v17);
    }
    else {
      (*(void (**)(uint64_t))(v18 + 552))(v17);
    }
    uint64_t v19 = OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler;
    if (!*(uint64_t *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler))
    {
      aBlock[4] = sub_10006FCA0;
      void aBlock[5] = v1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_10006F168;
      void aBlock[3] = &unk_100088458;
      int v20 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      uint64_t v21 = os_state_add_handler();
      _Block_release(v20);
      *(uint64_t *)((char *)v1 + v19) = v21;
    }
    sub_10006E3A0();
    uint64_t v22 = OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer;
    if (!*(uint64_t *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer))
    {
      type metadata accessor for BluetoothUserXPCServer();
      int v23 = sub_10005B4A4((uint64_t)(id)v1[2]);
      uint64_t v24 = *(void (**)(uint64_t))((swift_isaMask & *v23) + 0x78);
      uint64_t v25 = swift_retain();
      v24(v25);
      os_log_type_t v26 = *(void **)((char *)v1 + v22);
      *(uint64_t *)((char *)v1 + v22) = (uint64_t)v23;
      uint64_t v27 = v23;

      (*(void (**)(void))((swift_isaMask & *v27) + 0xD8))();
    }
  }
  else
  {
    uint64_t v12 = sub_100038200();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v12, v2);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      int v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Bluetooth User Daemon waiting for first unlock...", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_10006F168(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  return v4;
}

uint64_t sub_10006F1B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unsigned int v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  char v11 = static SystemVersionNumber.< infix(_:_:)(a1, a2);
  uint64_t v12 = sub_100038200();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  if (v11)
  {
    v13(v10, v12, v4);
    sub_10006FA68((uint64_t)a1);
    sub_10006FA68((uint64_t)a2);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v34 = v31;
      *(_DWORD *)uint64_t v16 = 136315394;
      uint64_t v32 = v4;
      uint64_t v18 = *a1;
      unint64_t v17 = a1[1];
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_100004FA4(v18, v17, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006FAB4((uint64_t)a1);
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v19 = *a2;
      unint64_t v20 = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_100004FA4(v19, v20, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006FAB4((uint64_t)a2);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Migrating from %s to %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v32);
    }
    sub_10006FAB4((uint64_t)a1);
    sub_10006FAB4((uint64_t)a2);

    uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v30 = v10;
  }
  else
  {
    v13(v8, v12, v4);
    sub_10006FA68((uint64_t)a1);
    sub_10006FA68((uint64_t)a2);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v34 = v31;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v32 = v4;
      uint64_t v26 = *a1;
      unint64_t v25 = a1[1];
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_100004FA4(v26, v25, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006FAB4((uint64_t)a1);
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v27 = *a2;
      unint64_t v28 = a2[1];
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_100004FA4(v27, v28, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006FAB4((uint64_t)a2);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Back-migrating from %s to %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v32);
    }
    sub_10006FAB4((uint64_t)a1);
    sub_10006FAB4((uint64_t)a2);

    uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v30 = v8;
  }
  return v29(v30, v4);
}

uint64_t sub_10006F628()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100038200();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "First launch since boot...", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t result = swift_beginAccess();
  byte_100094B68 = 1;
  return result;
}

id *sub_10006F7A0()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  sub_10000E044((uint64_t)v0 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription, &qword_100090830);

  return v0;
}

uint64_t sub_10006F828()
{
  sub_10006F7A0();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10006F880()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 400))();
}

uint64_t sub_10006F8CC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 736))();
}

uint64_t sub_10006F918()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 744))();
}

uint64_t sub_10006F964()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 392))();
}

uint64_t sub_10006F9B0(char a1)
{
  uint64_t v3 = *v1;
  sub_10006E6CC();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 480))();
  if (result)
  {
    sub_10000D0A4(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10006FA48()
{
  return sub_10006CCA0();
}

uint64_t sub_10006FA50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006FA60()
{
  return swift_release();
}

uint64_t sub_10006FA68(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006FAB4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006FB00()
{
  return type metadata accessor for BluetoothUserDaemon();
}

uint64_t type metadata accessor for BluetoothUserDaemon()
{
  uint64_t result = qword_1000949A0;
  if (!qword_1000949A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10006FB54()
{
  sub_10006FC44();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10006FC44()
{
  if (!qword_100090860)
  {
    sub_100007C10(&qword_10008EBE0);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100090860);
    }
  }
}

char *sub_10006FCA0()
{
  (*(void (**)(void))(*(void *)v0 + 392))();
  uint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = 0;
  id v3 = [v1 dataWithPropertyList:v2 format:200 options:0 error:&v20];

  id v4 = v20;
  if (v3)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;

    unint64_t v8 = v7 >> 62;
    uint64_t v9 = 0;
    switch(v7 >> 62)
    {
      case 1uLL:
        LODWORD(v9) = HIDWORD(v5) - v5;
        if (__OFSUB__(HIDWORD(v5), v5)) {
          goto LABEL_30;
        }
        uint64_t v9 = (int)v9;
LABEL_8:
        if (__OFADD__(v9, 200))
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x10006FF9CLL);
        }
        os_log_type_t v15 = (char *)calloc(v9 + 200, 1uLL);
        char v11 = v15;
        if (v15)
        {
          *(_DWORD *)os_log_type_t v15 = 1;
          switch((int)v8)
          {
            case 1:
              LODWORD(v18) = HIDWORD(v5) - v5;
              if (__OFSUB__(HIDWORD(v5), v5)) {
                goto LABEL_32;
              }
              unint64_t v18 = (int)v18;
LABEL_19:
              if ((v18 & 0x8000000000000000) != 0 || HIDWORD(v18)) {
                goto LABEL_34;
              }
              *((_DWORD *)v15 + 1) = v18;
              strcpy(v15 + 136, "BluetoothUserDaemon State");
              if (v8 != 2) {
                goto LABEL_25;
              }
              if (__OFSUB__(*(void *)(v5 + 24), *(void *)(v5 + 16)))
              {
                __break(1u);
LABEL_25:
                if (__OFSUB__(HIDWORD(v5), v5)) {
                  goto LABEL_33;
                }
              }
LABEL_26:
              Data.copyBytes(to:count:)();
              break;
            case 2:
              uint64_t v17 = *(void *)(v5 + 16);
              uint64_t v16 = *(void *)(v5 + 24);
              BOOL v14 = __OFSUB__(v16, v17);
              unint64_t v18 = v16 - v17;
              if (!v14) {
                goto LABEL_19;
              }
              __break(1u);
LABEL_15:
              *((_DWORD *)v15 + 1) = 0;
LABEL_16:
              strcpy(v15 + 136, "BluetoothUserDaemon State");
              goto LABEL_26;
            case 3:
              goto LABEL_15;
            default:
              *((_DWORD *)v15 + 1) = BYTE6(v7);
              goto LABEL_16;
          }
        }
        sub_10000AB1C(v5, v7);
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(v5 + 16);
        uint64_t v12 = *(void *)(v5 + 24);
        BOOL v14 = __OFSUB__(v12, v13);
        uint64_t v9 = v12 - v13;
        if (!v14) {
          goto LABEL_8;
        }
        goto LABEL_31;
      case 3uLL:
        goto LABEL_8;
      default:
        uint64_t v9 = BYTE6(v7);
        goto LABEL_8;
    }
  }
  else
  {
    uint64_t v10 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  return v11;
}

uint64_t sub_10006FFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_100090830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100070024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000423C(&qword_100090830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007008C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000700CC()
{
  return sub_10006C4D4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000700DC()
{
  uint64_t v0 = type metadata accessor for BluetoothUserDaemon();
  memset(v1, 0, sizeof(v1));
  sub_100069BE8((uint64_t *)v1, (uint64_t)v1, v0, (uint64_t)&off_100088428);
  sub_10006E6CC();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Notification.name.getter()
{
  return Notification.name.getter();
}

uint64_t Notification.userInfo.getter()
{
  return Notification.userInfo.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t URLResourceValues.isExcludedFromBackup.setter()
{
  return URLResourceValues.isExcludedFromBackup.setter();
}

uint64_t URLResourceValues.init()()
{
  return URLResourceValues.init()();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _BridgedStoredNSError.userInfo.getter()
{
  return _BridgedStoredNSError.userInfo.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return URL.init(fileURLWithPath:isDirectory:)();
}

uint64_t URL.hasDirectoryPath.getter()
{
  return URL.hasDirectoryPath.getter();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

uint64_t URL.setResourceValues(_:)()
{
  return URL.setResourceValues(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

Swift::Void __swiftcall URL.appendPathComponent(_:)(Swift::String a1)
{
}

uint64_t URL.deletingPathExtension()()
{
  return URL.deletingPathExtension()();
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t URL.appendingPathExtension(_:)()
{
  return URL.appendingPathExtension(_:)();
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.path(percentEncoded:)(percentEncoded);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.append<A>(path:directoryHint:)()
{
  return URL.append<A>(path:directoryHint:)();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.hash(into:)()
{
  return Data.hash(into:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Data.append(_:)()
{
  return Data.append(_:)();
}

Swift::UInt8_optional __swiftcall Data.Iterator.next()()
{
  return (Swift::UInt8_optional)Data.Iterator.next()();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return type metadata accessor for Data.Iterator();
}

uint64_t Data.Iterator.init(_:at:)()
{
  return Data.Iterator.init(_:at:)();
}

uint64_t Data.copyBytes(to:count:)()
{
  return Data.copyBytes(to:count:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date.== infix(_:_:)()
{
  return static Date.== infix(_:_:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.advanced(by:)()
{
  return Date.advanced(by:)();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t UUID.uuid.getter()
{
  return UUID.uuid.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t fatalError(_:file:line:)()
{
  return fatalError(_:file:line:)();
}

Swift::UInt64 __swiftcall UpTicksToSeconds(_:)(Swift::UInt64 a1)
{
  return UpTicksToSeconds(_:)(a1);
}

Swift::UInt64 __swiftcall UpTicks()()
{
  return UpTicks()();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t errno.getter()
{
  return errno.getter();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t Array.init()()
{
  return Array.init()();
}

uint64_t related decl 'e' for CKErrorCode.serverRecord.getter()
{
  return related decl 'e' for CKErrorCode.serverRecord.getter();
}

uint64_t related decl 'e' for CKErrorCode.retryAfterSeconds.getter()
{
  return related decl 'e' for CKErrorCode.retryAfterSeconds.getter();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.Keys.description.getter()
{
  return Dictionary.Keys.description.getter();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t Character.write<A>(to:)()
{
  return Character.write<A>(to:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.init(utf8String:)()
{
  return String.init(utf8String:)();
}

uint64_t String.init(utf16CodeUnits:count:)()
{
  return String.init(utf16CodeUnits:count:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static String.Encoding.== infix(_:_:)()
{
  return static String.Encoding.== infix(_:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t static String.Encoding.ascii.getter()
{
  return static String.Encoding.ascii.getter();
}

uint64_t String.Encoding.rawValue.getter()
{
  return String.Encoding.rawValue.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = String.uppercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._tryFromUTF8(_:)()
{
  return static String._tryFromUTF8(_:)();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

Swift::Void __swiftcall String.append(contentsOf:)(Swift::String contentsOf)
{
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.distance(from:to:)()
{
  return String.distance(from:to:)();
}

Swift::Int __swiftcall String.UTF16View._foreignCount()()
{
  return String.UTF16View._foreignCount()();
}

uint64_t String.UTF16View._nativeGetOffset(for:)()
{
  return String.UTF16View._nativeGetOffset(for:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

uint64_t Array.append(_:)()
{
  return Array.append(_:)();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

CKRecordID __swiftcall CKRecordID.init(recordName:zoneID:)(Swift::String recordName, CKRecordZoneID zoneID)
{
  return (CKRecordID)CKRecordID.init(recordName:zoneID:)(recordName._countAndFlagsBits, recordName._object, zoneID.super.isa);
}

uint64_t NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)()
{
  return NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

CKRecordZoneID __swiftcall CKRecordZoneID.init(zoneName:ownerName:)(Swift::String zoneName, Swift::String ownerName)
{
  return (CKRecordZoneID)CKRecordZoneID.init(zoneName:ownerName:)(zoneName._countAndFlagsBits, zoneName._object, ownerName._countAndFlagsBits, ownerName._object);
}

uint64_t CKSubscription.subscriptionID.getter()
{
  return CKSubscription.subscriptionID.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
}

Swift::Void __swiftcall OS_dispatch_group.wait()()
{
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OS_dispatch_source.isCancelled.getter()
{
  return OS_dispatch_source.isCancelled.getter();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

CKDatabaseSubscription __swiftcall CKDatabaseSubscription.init(subscriptionID:)(Swift::String subscriptionID)
{
  return (CKDatabaseSubscription)CKDatabaseSubscription.init(subscriptionID:)(subscriptionID._countAndFlagsBits, subscriptionID._object);
}

uint64_t CKRecordKeyValueSetting.subscript.setter()
{
  return CKRecordKeyValueSetting.subscript.setter();
}

uint64_t CKRecordKeyValueSetting.subscript.getter()
{
  return CKRecordKeyValueSetting.subscript.getter();
}

uint64_t CKModifyRecordsOperation.modifyRecordsResultBlock.setter()
{
  return CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
}

CKModifyRecordsOperation __swiftcall CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(Swift::OpaquePointer_optional recordsToSave, Swift::OpaquePointer_optional recordIDsToDelete)
{
  return (CKModifyRecordsOperation)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(recordsToSave.value._rawValue, *(void *)&recordsToSave.is_nil, recordIDsToDelete.value._rawValue, *(void *)&recordIDsToDelete.is_nil);
}

uint64_t CKModifyRecordsOperation.perRecordSaveBlock.setter()
{
  return CKModifyRecordsOperation.perRecordSaveBlock.setter();
}

uint64_t CKModifyRecordsOperation.perRecordDeleteBlock.setter()
{
  return CKModifyRecordsOperation.perRecordDeleteBlock.setter();
}

CKRecordZoneSubscription __swiftcall CKRecordZoneSubscription.init(zoneID:subscriptionID:)(CKRecordZoneID zoneID, Swift::String subscriptionID)
{
  return (CKRecordZoneSubscription)CKRecordZoneSubscription.init(zoneID:subscriptionID:)(zoneID.super.isa, subscriptionID._countAndFlagsBits, subscriptionID._object);
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

uint64_t CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter()
{
  return CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter();
}

CKModifyRecordZonesOperation __swiftcall CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(Swift::OpaquePointer_optional recordZonesToSave, Swift::OpaquePointer_optional recordZoneIDsToDelete)
{
  return (CKModifyRecordZonesOperation)CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(recordZonesToSave.value._rawValue, *(void *)&recordZonesToSave.is_nil, recordZoneIDsToDelete.value._rawValue, *(void *)&recordZoneIDsToDelete.is_nil);
}

uint64_t CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter()
{
  return CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter();
}

CKModifySubscriptionsOperation __swiftcall CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(Swift::OpaquePointer_optional subscriptionsToSave, Swift::OpaquePointer_optional subscriptionIDsToDelete)
{
  return (CKModifySubscriptionsOperation)CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(subscriptionsToSave.value._rawValue, *(void *)&subscriptionsToSave.is_nil, subscriptionIDsToDelete.value._rawValue, *(void *)&subscriptionIDsToDelete.is_nil);
}

uint64_t CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter()
{
  return CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter();
}

uint64_t CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter();
}

uint64_t CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter();
}

CKFetchRecordZoneChangesOperation __swiftcall CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(Swift::OpaquePointer_optional recordZoneIDs, Swift::OpaquePointer_optional configurationsByRecordZoneID)
{
  return (CKFetchRecordZoneChangesOperation)CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(recordZoneIDs.value._rawValue, *(void *)&recordZoneIDs.is_nil, configurationsByRecordZoneID.value._rawValue, *(void *)&configurationsByRecordZoneID.is_nil);
}

uint64_t CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter();
}

uint64_t CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter();
}

CKRecord __swiftcall CKRecord.init(recordType:recordID:)(Swift::String recordType, CKRecordID recordID)
{
  return (CKRecord)CKRecord.init(recordType:recordID:)(recordType._countAndFlagsBits, recordType._object, recordID.super.isa);
}

uint64_t CKRecord.recordType.getter()
{
  return CKRecord.recordType.getter();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t NSScanner.currentIndex.getter()
{
  return NSScanner.currentIndex.getter();
}

Swift::String_optional __swiftcall NSScanner.scanCharacter()()
{
  uint64_t v0 = NSScanner.scanCharacter()();
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t type metadata accessor for NSScanner.NumberRepresentation()
{
  return type metadata accessor for NSScanner.NumberRepresentation();
}

uint64_t NSScanner.scanInt(representation:)()
{
  return NSScanner.scanInt(representation:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t Substring.init(_:)()
{
  return Substring.init(_:)();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t _StringGuts._isContiguousASCII.getter()
{
  return _StringGuts._isContiguousASCII.getter();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t type metadata accessor for DefaultStringInterpolation.PrintUtilsTimeDuration()
{
  return type metadata accessor for DefaultStringInterpolation.PrintUtilsTimeDuration();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:_:)()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:_:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)UInt32._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t Unicode.Scalar.UTF16View.subscript.getter()
{
  return Unicode.Scalar.UTF16View.subscript.getter();
}

uint64_t TaskLocal.init(wrappedValue:)()
{
  return TaskLocal.init(wrappedValue:)();
}

uint64_t TaskLocal.get()()
{
  return TaskLocal.get()();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

uint64_t CBUserControllerXPCInterface()
{
  return _CBUserControllerXPCInterface();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

uint64_t CKDatabaseScopeString()
{
  return _CKDatabaseScopeString();
}

uint64_t CKStringFromAccountStatus()
{
  return _CKStringFromAccountStatus();
}

uint64_t IDSCopyLocalDeviceUniqueID()
{
  return _IDSCopyLocalDeviceUniqueID();
}

uint64_t IsAppleInternalBuild()
{
  return _IsAppleInternalBuild();
}

uint64_t MGCopyAnswerWithError()
{
  return _MGCopyAnswerWithError();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

{
}

{
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return __os_activity_create(dso, description, activity, flags);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return _calloc(__count, __size);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void free(void *a1)
{
}

int isxdigit(int _c)
{
  return _isxdigit(_c);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_state_remove_handler()
{
  return _os_state_remove_handler();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

uint64_t xpc_copy_code_signing_identity_for_token()
{
  return _xpc_copy_code_signing_identity_for_token();
}

uint64_t xpc_copy_entitlement_for_self()
{
  return _xpc_copy_entitlement_for_self();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_date(xpc_object_t xdict, const char *key, int64_t value)
{
}

uint64_t xpc_set_event()
{
  return _xpc_set_event();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}