void sub_10000C90C()
{
  sub_10000C930();
}

void sub_10000C930()
{
  nw_connection_cancel(*(nw_connection_t *)(v0 + 32));
}

uint64_t sub_10000C94C()
{
  sub_10000C980();

  return _swift_deallocClassInstance(v0, 42, 7);
}

uint64_t sub_10000C980()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_10000C9A8()
{
  return sub_10000C9C4();
}

uint64_t sub_10000C9C4()
{
  return swift_release();
}

uint64_t sub_10000CA1C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10000CA50()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10000CA98(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

void sub_10000CAF8(NSObject *a1)
{
}

void sub_10000CB50()
{
  sub_10001385C();
  OS_nw_connection.receive(minLength:maxLength:peerConnectionInfo:completion:)(v3, v2, 0, v1, v0);
}

void OS_nw_connection.receive(minLength:maxLength:peerConnectionInfo:completion:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a1 & 0x8000000000000000) != 0 || HIDWORD(a1) || (uint32_t v7 = a2, (a2 & 0x8000000000000000) != 0) || HIDWORD(a2))
  {
    sub_100013898();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v11 = (void *)swift_allocObject();
    v11[2] = a3;
    v11[3] = a1;
    v11[4] = a4;
    v11[5] = a5;
    aBlock[4] = sub_10000D3F8;
    aBlock[5] = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000D348;
    aBlock[3] = &unk_10008C908;
    v12 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    nw_connection_receive(v5, a1, v7, v12);
    _Block_release(v12);
  }
}

void sub_10000CD28(NSObject *a1, uint64_t a2, uint64_t a3)
{
}

void sub_10000CD4C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v8 = *(NSObject **)(v4 + 32);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  v10 = (void *)swift_allocObject();
  v10[2] = v9;
  v10[3] = a2;
  v10[4] = a3;
  v12[4] = sub_10000F7EC;
  v12[5] = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100017414;
  v12[3] = &unk_10008C1B0;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  nw_connection_set_state_changed_handler(v8, v11);
  _Block_release(v11);
  nw_connection_set_queue(v8, a1);
  nw_connection_start(v8);
}

uint64_t sub_10000CE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a3) = v5(a2, a3);
  swift_release();
  return a3 & 1;
}

uint64_t sub_10000CED0()
{
  return sub_10000CED8();
}

uint64_t sub_10000CED8()
{
  return 1;
}

uint64_t sub_10000CF80(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10000CFC4()
{
  return sub_10000CFD0();
}

uint64_t sub_10000CFD0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10000D030();
    return swift_release();
  }
  return result;
}

void sub_10000D030()
{
  sub_1000139EC();
  int v4 = v3;
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (sub_1000157E8(v5))
  {
    *(_DWORD *)sub_1000161BC() = 67109120;
    LODWORD(v15) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100011308((void *)&_mh_execute_header, v6, v7, "Dispatch source event handler fired for listening socket %d");
    sub_1000120B0();
  }
  int v8 = accept(v4, 0, 0);
  if (v8 < 0)
  {
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (sub_1000157E8(v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v15 = sub_100015720();
      *(_DWORD *)uint64_t v11 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 8) = 2080;
      uint64_t v12 = sub_1000153C0((uint64_t *)&unk_1000969E0);
      __chkstk_darwin(v12);
      sub_100012078();
      static POSIXError.current.getter();
      uint64_t v13 = String.init<A>(describing:)();
      sub_100010478(v13, v14, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "NetworkControlChannelService: error accepting connection from listening socket %d: %s", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
  }
  else
  {
    int v9 = v8;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_retain();
    sub_1000123CC(0, v0, v9, v0);
  }
  sub_100013918();
}

uint64_t sub_10000D274()
{
  return swift_allocObject();
}

uint64_t sub_10000D28C()
{
  return type metadata accessor for DiscoveredBonjourAdvert();
}

uint64_t sub_10000D2CC(uint64_t result)
{
  **(void **)(v1 - 288) = result;
  return result;
}

uint64_t sub_10000D2E0()
{
  return v0;
}

uint64_t sub_10000D2EC()
{
  return swift_retain();
}

uint64_t sub_10000D310()
{
  return static Data.== infix(_:_:)();
}

uint64_t sub_10000D330()
{
  return swift_beginAccess();
}

void sub_10000D348(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  id v10 = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9(a2, a3, a4, a5);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t sub_10000D3F8(void *a1, NSObject *a2, char a3, uint64_t a4)
{
  return sub_10000D404(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void (**)(void, void, void))(v4 + 32), *(void *)(v4 + 40));
}

uint64_t sub_10000D404(void *a1, NSObject *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void, void, void), uint64_t a8)
{
  uint64_t v16 = type metadata accessor for RemotePairingError();
  __chkstk_darwin();
  v45 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (nw_content_context_get_is_wake_packet())
    {
      uint64_t v44 = a6;
      os_log_type_t v18 = static os_log_type_t.default.getter();
      v19 = powerLog.getter();
      if (os_log_type_enabled(v19, v18))
      {
        swift_bridgeObjectRetain_n();
        uint64_t v41 = v16;
        uint64_t v20 = swift_slowAlloc();
        uint64_t v43 = a8;
        v21 = (uint8_t *)v20;
        uint64_t v40 = swift_slowAlloc();
        *(void *)&v50[0] = v40;
        v42 = a7;
        *(_DWORD *)v21 = 136315138;
        v39[1] = v21 + 4;
        *(void *)&long long v48 = a5;
        swift_bridgeObjectRetain();
        sub_1000153C0(&qword_100096EA0);
        uint64_t v22 = String.init<A>(describing:)();
        *(void *)&long long v48 = sub_100010478(v22, v23, (uint64_t *)v50);
        a7 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v18, "Received a wake packet from: %s", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a8 = v43;
        swift_slowDealloc();
      }

      a6 = v44;
    }
    if (a3)
    {
      BOOL is_final = nw_content_context_get_is_final(a2);
      if (!a4) {
        goto LABEL_8;
      }
LABEL_15:
      swift_unknownObjectRetain();
      uint64_t v26 = (uint64_t)sub_10004DDD0();
      swift_unknownObjectRelease();
LABEL_18:
      unint64_t v27 = 0;
      BOOL v29 = 1;
      goto LABEL_19;
    }
  }
  BOOL is_final = 0;
  if (a4) {
    goto LABEL_15;
  }
LABEL_8:
  if (!a1)
  {
LABEL_17:
    sub_10000D9E4((unint64_t *)&unk_1000953D0);
    static Error<>.dataCorrupted.getter();
    sub_10000D9E4((unint64_t *)&unk_1000959D0);
    uint64_t v26 = swift_allocError();
    Error<>.init(_:_:)();
    goto LABEL_18;
  }
  unint64_t v49 = sub_10000D9A4();
  *(void *)&long long v48 = a1;
  sub_10001673C(&v48, v50);
  sub_100015404((uint64_t)v50, (uint64_t)&v48);
  id v25 = a1;
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_100010548((uint64_t)v50);
    goto LABEL_17;
  }
  uint64_t v26 = v46;
  unint64_t v27 = v47;
  uint64_t v28 = Data.count.getter();
  BOOL v29 = v28 < a6;
  if (v28 < a6)
  {
    uint64_t v43 = a8;
    *(void *)&long long v48 = 0;
    *((void *)&v48 + 1) = 0xE000000000000000;
    if (is_final)
    {
      _StringGuts.grow(_:)(61);
      unint64_t v30 = 0xD000000000000017;
      v31 = "Connection closed with ";
    }
    else
    {
      _StringGuts.grow(_:)(63);
      unint64_t v30 = 0xD000000000000019;
      v31 = "Connection received only ";
    }
    unint64_t v33 = (unint64_t)(v31 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v30);
    uint64_t v46 = Data.count.getter();
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 543584032;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    uint64_t v46 = a6;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._object = (void *)0x800000010007DDD0;
    v37._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v37);
    sub_10000D9E4((unint64_t *)&unk_1000953D0);
    static Error<>.dataCorrupted.getter();
    sub_10000D9E4((unint64_t *)&unk_1000959D0);
    uint64_t v38 = swift_allocError();
    Error<>.init(_:_:)();
    sub_1000158A8(v26, v27);
    sub_100010548((uint64_t)v50);
    unint64_t v27 = 0;
    uint64_t v26 = v38;
  }
  else
  {
    sub_100010548((uint64_t)v50);
  }
LABEL_19:
  a7(v26, v27, v29);
  return sub_10000D998(v26, v27, v29);
}

uint64_t sub_10000D998(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return sub_1000158A8(a1, a2);
  }
}

unint64_t sub_10000D9A4()
{
  unint64_t result = qword_100096E98;
  if (!qword_100096E98)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100096E98);
  }
  return result;
}

uint64_t sub_10000D9E4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for RemotePairingError();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000DA28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000DA70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000DAB8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000DB00(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000DB48(uint64_t a1, uint64_t a2)
{
  swift_retain();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  if (!remotePairingIsEnabled())
  {
    static os_log_type_t.default.getter();
LABEL_12:
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    return swift_release_n();
  }
  if ((static Defaults.deviceAllowTCPControlChannels.getter() & 1) == 0
    || !sub_100012D20()
    || !RPIdentity)
  {
    static os_log_type_t.error.getter();
    goto LABEL_12;
  }
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  size_t v29 = 8;
  int v5 = sysctlbyname("security.mac.amfi.developer_mode_status", (void *)(v4 + 16), &v29, 0, 0);
  if (!v5) {
    goto LABEL_9;
  }
  int v6 = v5;
  os_log_type_t v7 = static os_log_type_t.error.getter();
  int v8 = qword_1000986F0;
  if (!os_log_type_enabled((os_log_t)qword_1000986F0, v7)) {
    goto LABEL_9;
  }
  int v9 = (uint8_t *)swift_slowAlloc();
  aBlock[0] = swift_slowAlloc();
  *(_DWORD *)int v9 = 136446210;
  if (strerror(v6))
  {
    uint64_t v10 = String.init(cString:)();
    uint64_t v28 = (void *)sub_100010478(v10, v11, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v7, "Failed to fetch developer mode status: (%{public}s)", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_9:
    uint64_t v27 = *(void *)(a1 + 40);
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v4;
    v12[3] = a1;
    v12[4] = sub_10000EBF0;
    v12[5] = a2;
    aBlock[4] = (uint64_t)sub_10000E748;
    aBlock[5] = (uint64_t)v12;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10000CF80;
    aBlock[3] = (uint64_t)&unk_10008C5A0;
    uint64_t v13 = _Block_copy(aBlock);
    uint64_t v25 = type metadata accessor for DispatchQoS();
    uint64_t v26 = v24;
    uint64_t v14 = *(void *)(v25 - 8);
    uint64_t v15 = v4;
    v24[1] = v4;
    uint64_t v16 = v14;
    __chkstk_darwin(v15);
    os_log_type_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v19 = type metadata accessor for DispatchWorkItemFlags();
    v24[0] = v24;
    uint64_t v20 = *(void *)(v19 - 8);
    __chkstk_darwin(v19);
    uint64_t v22 = (char *)v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v28 = &_swiftEmptyArrayStorage;
    sub_100047DF0((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000153C0(&qword_1000950F0);
    sub_10000E5F4((unint64_t *)&qword_1000953C0, &qword_1000950F0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v25);
    swift_release_n();
    swift_release();
    return swift_release();
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10000E0F0()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_10000E120()
{
  return sub_10000E12C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10000E12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((sub_10000E644() & 1) != 0
    && ((lockdown_wifi_sync_enabled() & 1) != 0 || (lockdown_wifi_debug_enabled() & 1) != 0)
    || (swift_beginAccess(), *(void *)(a1 + 16)))
  {
    uint64_t v25 = *(void *)(a2 + 80);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a3;
    *(void *)(v8 + 24) = a4;
    v31 = sub_10000E11C;
    uint64_t v32 = v8;
    aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256;
    size_t v29 = sub_10000CF80;
    unint64_t v30 = &unk_10008C438;
    int v9 = _Block_copy(&aBlock);
    uint64_t v10 = type metadata accessor for DispatchQoS();
    v24 = &v22;
    uint64_t v11 = *(void *)(v10 - 8);
    __chkstk_darwin(v10);
    uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v23 = &v22;
    uint64_t v15 = *(void *)(v14 - 8);
    __chkstk_darwin(v14);
    uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v26 = &_swiftEmptyArrayStorage;
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v25 = *(void *)(a2 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a3;
    *(void *)(v18 + 24) = a4;
    v31 = sub_100047F7C;
    uint64_t v32 = v18;
    aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256;
    size_t v29 = sub_10000CF80;
    unint64_t v30 = &unk_10008C3E8;
    int v9 = _Block_copy(&aBlock);
    uint64_t v10 = type metadata accessor for DispatchQoS();
    v24 = &v22;
    uint64_t v11 = *(void *)(v10 - 8);
    __chkstk_darwin(v10);
    uint64_t v13 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v23 = &v22;
    uint64_t v15 = *(void *)(v14 - 8);
    __chkstk_darwin(v14);
    uint64_t v17 = (char *)&v22 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v26 = &_swiftEmptyArrayStorage;
  }
  sub_100047DF0((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_10000E5F4((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_10000E5F4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001C510(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000E644()
{
  if (qword_1000949E8 != -1) {
    swift_once();
  }
  [(id)qword_100097798 lock];
  if (byte_100097790 == 2)
  {
    dlopen("/usr/lib/liblockdown.dylib", 2);
    sub_1000153C0(&qword_1000977A0);
    char v0 = Optional.isNil.getter() ^ 1;
    byte_100097790 = v0 & 1;
    if ((v0 & 1) == 0)
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
    }
  }
  else
  {
    char v0 = byte_100097790 & 1;
  }
  [(id)qword_100097798 unlock];
  return v0 & 1;
}

uint64_t sub_10000E74C(char a1)
{
  return sub_10000E75C(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10000E75C(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 & 1) != 0 || (a1)
  {
    uint64_t v24 = *(void *)(a3 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a4;
    *(void *)(v18 + 24) = a5;
    unint64_t v30 = sub_10000E0F0;
    uint64_t v31 = v18;
    aBlock = _NSConcreteStackBlock;
    uint64_t v27 = 1107296256;
    uint64_t v28 = sub_10000CF80;
    size_t v29 = &unk_10008C4D8;
    int v9 = _Block_copy(&aBlock);
    uint64_t v10 = type metadata accessor for DispatchQoS();
    uint64_t v23 = &v22;
    uint64_t v11 = *(void *)(v10 - 8);
    __chkstk_darwin(v10);
    uint64_t v13 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v22 = (uint64_t)&v22;
    uint64_t v15 = *(void *)(v14 - 8);
    __chkstk_darwin(v14);
    uint64_t v17 = (char *)&v22 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v25 = &_swiftEmptyArrayStorage;
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v24 = *(void *)(a3 + 80);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a4;
    *(void *)(v8 + 24) = a5;
    unint64_t v30 = sub_100047BF8;
    uint64_t v31 = v8;
    aBlock = _NSConcreteStackBlock;
    uint64_t v27 = 1107296256;
    uint64_t v28 = sub_10000CF80;
    size_t v29 = &unk_10008C488;
    int v9 = _Block_copy(&aBlock);
    uint64_t v10 = type metadata accessor for DispatchQoS();
    uint64_t v23 = &v22;
    uint64_t v11 = *(void *)(v10 - 8);
    __chkstk_darwin(v10);
    uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v22 = (uint64_t)&v22;
    uint64_t v15 = *(void *)(v14 - 8);
    __chkstk_darwin(v14);
    uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v25 = &_swiftEmptyArrayStorage;
  }
  sub_100047DF0((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_10000E5F4((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_10000EBF0(char a1)
{
  return sub_10000EBF8(a1, v1);
}

uint64_t sub_10000EBF8(char a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v3 = type metadata accessor for XPCDictionary();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BonjourService();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BonjourAdvertFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0 && *(unsigned char *)(v40 + 74) != 1)
  {
    uint64_t v32 = v8;
    unint64_t v33 = v6;
    uint64_t v34 = v4;
    uint64_t v39 = v3;
    uint64_t v31 = (void **)*(unsigned __int16 *)(v40 + 72);
    uint64_t v37 = type metadata accessor for UUID();
    uint64_t v38 = &v30;
    uint64_t v36 = *(void *)(v37 - 8);
    __chkstk_darwin(v37);
    uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    UUID.init()();
    aBlock = (void **)&_swiftEmptyArrayStorage;
    sub_100011F58(&qword_1000969C0, (void (*)(uint64_t))&type metadata accessor for BonjourAdvertFlags);
    sub_1000153C0(&qword_1000969C8);
    sub_10000E5F4(&qword_1000969D0, &qword_1000969C8);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    Swift::String v35 = v17;
    sub_100012EDC();
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if (v19)
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      uint64_t v20 = swift_allocBox();
      uint64_t v22 = v21;
      XPCDictionary.init()();
      aBlock = 0;
      LOBYTE(v42) = 0;
      sub_10000F254();
      XPCDictionary.subscript.setter();
      uint64_t v23 = v32;
      (*(void (**)(char *, void, uint64_t))(v32 + 104))(v10, enum case for BonjourService.default(_:), v7);
      BonjourService.rawValue.getter();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v7);
      XPCDictionary.subscript.setter();
      aBlock = 0;
      LOBYTE(v42) = 0;
      XPCDictionary.subscript.setter();
      aBlock = v31;
      LOBYTE(v42) = 0;
      XPCDictionary.subscript.setter();
      uint64_t v24 = v35;
      UUID.uuidString.getter();
      XPCDictionary.subscript.setter();
      v45 = sub_10000CED0;
      uint64_t v46 = v20;
      aBlock = _NSConcreteStackBlock;
      uint64_t v42 = 1107296256;
      uint64_t v43 = sub_10000CE74;
      uint64_t v44 = &unk_10008C5C8;
      uint64_t v25 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      nw_txt_record_access_bytes(v19, v25);
      _Block_release(v25);
      swift_beginAccess();
      uint64_t v27 = v33;
      uint64_t v26 = v34;
      uint64_t v28 = v22;
      uint64_t v29 = v39;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v33, v28, v39);
      XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v29);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v37);
      return swift_release();
    }
    else
    {
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v35, v37);
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    return os_log(_:dso:log:_:_:)();
  }
}

unint64_t sub_10000F254()
{
  unint64_t result = qword_1000969D8;
  if (!qword_1000969D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000969D8);
  }
  return result;
}

uint64_t sub_10000F2A0(char a1)
{
  return sub_10000F2AC(a1, *(_DWORD *)(v1 + 16));
}

uint64_t sub_10000F2AC(char a1, int a2)
{
  if ((a1 & 1) == 0)
  {
    uint64_t result = close(a2);
    if (result != -1) {
      return result;
    }
    os_log_type_t v5 = static os_log_type_t.error.getter();
    int v6 = qword_1000986F0;
    os_log_type_t v7 = v5;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1000986F0, v5);
    if (!result) {
      return result;
    }
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    uint64_t v9 = sub_1000153C0((uint64_t *)&unk_1000969E0);
    __chkstk_darwin(v9);
    static POSIXError.current.getter();
    uint64_t v10 = String.init<A>(describing:)();
    sub_100010478(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received error closing rejected socket: %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    return swift_slowDealloc();
  }
  sub_10000F680();
  id v3 = _remotepairing_nw_connection_create_with_connected_socket_and_parameters();
  swift_unknownObjectRelease();
  if (!v3)
  {
    static os_log_type_t.error.getter();
    uint64_t v12 = qword_1000986F0;
    os_log(_:dso:log:_:_:)();
    uint64_t result = close(a2);
    if (result != -1) {
      return result;
    }
    os_log_type_t v13 = static os_log_type_t.error.getter();
    uint64_t result = os_log_type_enabled(v12, v13);
    if (!result) {
      return result;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v15 = sub_1000153C0((uint64_t *)&unk_1000969E0);
    __chkstk_darwin(v15);
    static POSIXError.current.getter();
    uint64_t v16 = String.init<A>(describing:)();
    sub_100010478(v16, v17, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received error closing socket: %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    return swift_slowDealloc();
  }
  sub_1000109DC();

  return swift_unknownObjectRelease();
}

id _remotepairing_nw_connection_create_with_connected_socket_and_parameters()
{
  char v0 = (void *)nw_connection_create_with_connected_socket_and_parameters();

  return v0;
}

NSObject *sub_10000F680()
{
  v3[4] = sub_10000CAF8;
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1000174C8;
  v3[3] = &unk_10008C730;
  char v0 = _Block_copy(v3);
  uint64_t v1 = create_nw_parameters_for_tcp(v0);
  _Block_release(v0);
  nw_parameters_prohibit_interface_type(v1, nw_interface_type_cellular);
  nw_parameters_prohibit_interface_type(v1, nw_interface_type_loopback);
  return v1;
}

nw_parameters_t create_nw_parameters_for_tcp(nw_parameters_configure_protocol_block_t configure_tcp)
{
  nw_parameters_t secure_tcp = nw_parameters_create_secure_tcp(_nw_parameters_configure_protocol_disable, configure_tcp);

  return secure_tcp;
}

uint64_t sub_10000F774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10000F7EC(int a1, uint64_t a2)
{
  return sub_10000F7F8(a1, a2, *(void *)(v2 + 16), *(void (**)(void))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10000F7F8(int a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v9 = type metadata accessor for RemotePairingError();
  __chkstk_darwin();
  v68 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ControlChannelTransportEvent();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v69 = a2;
    os_log_type_t v17 = static os_log_type_t.default.getter();
    uint64_t v18 = qword_1000986F0;
    os_log_type_t v19 = v17;
    BOOL v20 = os_log_type_enabled((os_log_t)qword_1000986F0, v17);
    v70 = v14;
    if (v20)
    {
      swift_retain();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v67 = v12;
      uint64_t v22 = v21;
      uint64_t v72 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446466;
      v64 = a4;
      uint64_t v65 = v9;
      uint64_t v23 = a5;
      uint64_t v66 = v11;
      uint64_t v25 = *(void *)(v16 + 16);
      uint64_t v24 = *(void *)(v16 + 24);
      swift_bridgeObjectRetain();
      uint64_t v71 = sub_100010478(v25, v24, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2082;
      LODWORD(v71) = a1;
      type metadata accessor for nw_connection_state_t(0);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v71 = sub_100010478(v26, v27, &v72);
      a5 = v23;
      uint64_t v9 = v65;
      uint64_t v11 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a4 = v64;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s: Connection state changed to %{public}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      uint64_t v14 = v70;
      swift_slowDealloc();
      uint64_t v12 = v67;
      swift_slowDealloc();
    }
    if (a1 == 1)
    {
      if (v69)
      {
        swift_getObjectType();
        uint64_t v40 = (uint64_t)sub_10004DDD0();
      }
      else
      {
        sub_100011CAC((unint64_t *)&unk_1000953D0, 255, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        static Error<>.networkingError.getter();
        sub_100011CAC((unint64_t *)&unk_1000959D0, 255, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        uint64_t v40 = swift_allocError();
        Error<>.init(_:_:)();
      }
      os_log_type_t v43 = static os_log_type_t.error.getter();
      uint64_t v44 = qword_1000986F0;
      os_log_type_t v45 = v43;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v43))
      {
        swift_retain();
        swift_errorRetain();
        swift_retain();
        swift_errorRetain();
        uint64_t v46 = swift_slowAlloc();
        uint64_t v69 = a5;
        uint64_t v47 = v46;
        uint64_t v72 = swift_slowAlloc();
        *(_DWORD *)uint64_t v47 = 136446466;
        uint64_t v66 = v11;
        uint64_t v67 = v12;
        uint64_t v48 = v16;
        uint64_t v49 = *(void *)(v16 + 16);
        uint64_t v50 = *(void *)(v16 + 24);
        swift_bridgeObjectRetain();
        uint64_t v71 = sub_100010478(v49, v50, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2082;
        uint64_t v71 = v40;
        swift_errorRetain();
        sub_1000153C0(&qword_100095A00);
        uint64_t v51 = String.init<A>(describing:)();
        uint64_t v71 = sub_100010478(v51, v52, &v72);
        uint64_t v16 = v48;
        uint64_t v12 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v11 = v66;
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%{public}s: Connection failed with error %{public}s", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      v53 = v70;
      uint64_t *v70 = v40;
      (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))(v53, enum case for ControlChannelTransportEvent.error(_:), v11);
      swift_errorRetain();
      a4(v53);
      (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v53, v11);
      nw_connection_cancel(*(nw_connection_t *)(v16 + 32));
      swift_release();
      return swift_errorRelease();
    }
    else if (a1 == 4)
    {
      if (v69)
      {
        swift_getObjectType();
        uint64_t v41 = (uint64_t)sub_10004DDD0();
      }
      else
      {
        sub_100011CAC((unint64_t *)&unk_1000953D0, 255, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        static Error<>.networkingError.getter();
        sub_100011CAC((unint64_t *)&unk_1000959D0, 255, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        uint64_t v41 = swift_allocError();
        Error<>.init(_:_:)();
      }
      os_log_type_t v54 = static os_log_type_t.error.getter();
      v55 = qword_1000986F0;
      os_log_type_t v56 = v54;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v54))
      {
        swift_retain();
        swift_errorRetain();
        swift_retain();
        swift_errorRetain();
        uint64_t v57 = swift_slowAlloc();
        uint64_t v69 = a5;
        uint64_t v58 = v57;
        uint64_t v72 = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 136446466;
        uint64_t v66 = v11;
        uint64_t v67 = v12;
        uint64_t v59 = *(void *)(v16 + 16);
        uint64_t v60 = *(void *)(v16 + 24);
        swift_bridgeObjectRetain();
        uint64_t v71 = sub_100010478(v59, v60, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v58 + 12) = 2082;
        uint64_t v71 = v41;
        swift_errorRetain();
        sub_1000153C0(&qword_100095A00);
        uint64_t v61 = String.init<A>(describing:)();
        uint64_t v71 = sub_100010478(v61, v62, &v72);
        uint64_t v12 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v11 = v66;
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "%{public}s: Connection failed with error %{public}s", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      v63 = v70;
      uint64_t *v70 = v41;
      (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))(v63, enum case for ControlChannelTransportEvent.error(_:), v11);
      swift_errorRetain();
      a4(v63);
      swift_errorRelease();
      swift_release();
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8))(v63, v11);
    }
    else
    {
      if (a1 == 3)
      {
        uint64_t v65 = v9;
        swift_getObjectType();
        swift_unknownObjectRetain();
        BOOL v28 = sub_10001097C();
        swift_unknownObjectRelease();
        if (v28)
        {
          uint64_t v67 = v12;
          os_log_type_t v29 = static os_log_type_t.error.getter();
          uint64_t v30 = qword_1000986F0;
          os_log_type_t v31 = v29;
          if (os_log_type_enabled((os_log_t)qword_1000986F0, v29))
          {
            swift_retain_n();
            uint64_t v32 = swift_slowAlloc();
            uint64_t v72 = swift_slowAlloc();
            *(_DWORD *)uint64_t v32 = 136446466;
            uint64_t v66 = v11;
            uint64_t v33 = v16;
            uint64_t v34 = *(void *)(v16 + 16);
            uint64_t v35 = *(void *)(v16 + 24);
            swift_bridgeObjectRetain();
            uint64_t v71 = sub_100010478(v34, v35, &v72);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v32 + 12) = 2082;
            uint64_t v71 = *(void *)(v33 + 32);
            swift_unknownObjectRetain();
            sub_1000153C0(&qword_1000965A8);
            uint64_t v36 = String.init<A>(describing:)();
            uint64_t v71 = sub_100010478(v36, v37, &v72);
            uint64_t v16 = v33;
            uint64_t v14 = v70;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            uint64_t v11 = v66;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "%{public}s: Rejecting control channel connection originating from local machine: %{public}s", (uint8_t *)v32, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          sub_100011CAC((unint64_t *)&unk_1000953D0, 255, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
          static Error<>.networkingError.getter();
          sub_100011CAC((unint64_t *)&unk_1000959D0, 255, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
          uint64_t v38 = swift_allocError();
          Error<>.init(_:_:)();
          *uint64_t v14 = v38;
          uint64_t v39 = v67;
          (*(void (**)(uint64_t *, void, uint64_t))(v67 + 104))(v14, enum case for ControlChannelTransportEvent.error(_:), v11);
          a4(v14);
          (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v14, v11);
          nw_connection_cancel(*(nw_connection_t *)(v16 + 32));
        }
        else
        {
          (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))(v14, enum case for ControlChannelTransportEvent.transportStarted(_:), v11);
          a4(v14);
          (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
          type metadata accessor for NWObjcConnectionControlChannelTransport();
          sub_100011CAC(&qword_1000965A0, v42, (void (*)(uint64_t))type metadata accessor for NWObjcConnectionControlChannelTransport);
          JSONDataBasedControlChannelTransport.startReceivingMessages(usingEventHandler:)();
        }
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100010478(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100015670();
  uint64_t v6 = sub_100010598(v12, 0, 0, 1, v4, v3);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100015404((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = v4;
    v12[1] = v3;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100015404((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100010548((uint64_t)v12);
  return v7;
}

uint64_t sub_100010548(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100010598(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100054524((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_1000106F0(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_1000106F0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_100010788(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000545FC(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000545FC((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_100010788(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_1000108FC(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000108FC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000153C0((uint64_t *)&unk_1000970B0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

void type metadata accessor for nw_connection_state_t(uint64_t a1)
{
}

BOOL sub_10001097C()
{
  nw_path_t v1 = nw_connection_copy_current_path(v0);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  BOOL v3 = (nw_path_is_local() & 1) != 0 || nw_path_uses_interface_type(v2, nw_interface_type_loopback);
  swift_unknownObjectRelease();
  return v3;
}

void sub_1000109DC()
{
  sub_1000139EC();
  uint64_t v2 = v0;
  uint64_t v26 = type metadata accessor for ControlChannelConnection.Options();
  sub_100013814();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100012078();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for ControlChannelConnection.Options.Device();
  sub_100013814();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100010EB0();
  uint64_t v13 = *(void **)(v0 + 80);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)();
  uint64_t v14 = type metadata accessor for NWObjcConnectionControlChannelTransport();
  swift_allocObject();
  uint64_t v15 = swift_unknownObjectRetain();
  uint64_t v16 = sub_10001156C(v15);
  uint64_t v28 = v14;
  uint64_t v29 = sub_100011F58((unint64_t *)&unk_100096590, (void (*)(uint64_t))type metadata accessor for NWObjcConnectionControlChannelTransport);
  uint64_t v27 = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v1, v9);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v8, enum case for ControlChannelConnection.Options.device(_:), v26);
  type metadata accessor for SystemKeychainPairingManager();
  sub_100011F58(&qword_100094F88, (void (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager);
  type metadata accessor for ControlChannelConnection();
  swift_retain();
  id v17 = v13;
  swift_retain();
  static ControlChannelConnection.defaultMaxReconnectionAttempts.getter();
  swift_allocObject();
  ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)();
  uint64_t v18 = *(void *)(v0 + 128);
  uint64_t v28 = type metadata accessor for MetadataService();
  uint64_t v29 = sub_100011F58(&qword_100096960, (void (*)(uint64_t))type metadata accessor for MetadataService);
  uint64_t v27 = v18;
  swift_retain();
  dispatch thunk of ControlChannelConnection.customDeviceMetadataProvider.setter();
  sub_100017194(v2 + 144, (uint64_t)&v27);
  dispatch thunk of ControlChannelConnection.tunnelListenerCreator.setter();
  sub_100047F98();
  swift_retain();
  sub_10001101C();
  swift_endAccess();
  swift_release();
  sub_10001261C();
  uint64_t v19 = sub_100010E68();
  swift_weakInit();
  uint64_t v20 = sub_100010E68();
  swift_weakInit();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  *(void *)(v21 + 24) = v20;
  swift_retain();
  swift_retain();
  dispatch thunk of ControlChannelConnection.invalidationHandler.setter();
  swift_release();
  swift_release();
  uint64_t v22 = sub_100010E68();
  swift_weakInit();
  uint64_t v23 = sub_100010E68();
  swift_weakInit();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  *(void *)(v24 + 24) = v22;
  swift_retain();
  swift_retain();
  dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter();
  swift_release();
  swift_release();
  sub_100016C68((void *)(v2 + 88), *(void *)(v2 + 112));
  swift_retain();
  sub_100055278();
  swift_release();
  swift_release();
  sub_100010EE4();
  v25();
  sub_100013918();
}

uint64_t sub_100010E68()
{
  return swift_allocObject();
}

uint64_t sub_100010EC8()
{
  return swift_retain();
}

uint64_t sub_100010F14()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_100010F34()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t *sub_100010F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

void sub_100010F80()
{
  sub_100052FCC();
}

uint64_t sub_100010F9C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100010FB8()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100010FDC()
{
  return v0;
}

uint64_t type metadata accessor for NWObjcConnectionControlChannelTransport()
{
  return self;
}

uint64_t sub_10001101C()
{
  sub_1000684D0();
  if (v5)
  {
    unint64_t v15 = *(void *)(v3 + 40);
    type metadata accessor for ControlChannelConnection();
    sub_100012030(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    swift_bridgeObjectRetain();
    sub_100068668();
    sub_100013500();
    if (v16)
    {
      sub_100012030(&qword_1000972C8, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      while ((sub_100016B5C() & 1) == 0)
      {
        sub_1000167D0();
        if ((v17 & 1) == 0) {
          goto LABEL_8;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      sub_100068634();
      return 0;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = sub_100015B88();
    sub_100011380(v18, v15, v2);
    *uint64_t v1 = v24;
    swift_bridgeObjectRelease();
    *uint64_t v0 = v3;
  }
  else
  {
    sub_100068484();
    swift_retain();
    uint64_t v6 = __CocoaSet.member(for:)();
    swift_release();
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for ControlChannelConnection();
      sub_1000685BC();
      uint64_t v7 = sub_100016CD0();
      sub_100068508(v7, v8, v9, v10, v11, v12, v13, v14, v23, v6, v24);
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    sub_100063034(v4, result + 1);
    sub_100016D04();
    if (!v5 & v21)
    {
      uint64_t v22 = v20;
      swift_retain();
    }
    else
    {
      swift_retain();
      sub_100068628();
      sub_1000636C4();
      uint64_t v22 = v24;
    }
    sub_1000640F8();
    *uint64_t v1 = v22;
    swift_bridgeObjectRelease();
    *uint64_t v0 = v2;
  }
  return 1;
}

uint64_t sub_100011270()
{
  return v0;
}

uint64_t sub_100011284(uint64_t a1)
{
  return sub_100015C0C(a1, 1, v1);
}

void sub_1000112BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 - 144) = a3;
  *(void *)(v4 - 136) = v3;
}

void sub_100011308(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

uint64_t sub_10001134C()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_10001136C()
{
  return *(void *)(v0 - 280);
}

uint64_t sub_100011380(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000636C4();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1000645D8(&qword_1000976D0);
      goto LABEL_12;
    }
    sub_10006477C();
  }
  uint64_t v8 = *v3;
  type metadata accessor for ControlChannelConnection();
  sub_100012030(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    sub_100012030(&qword_1000972C8, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    do
    {
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10001156C(uint64_t a1)
{
  uint64_t v2 = v1;
  *(_WORD *)(v1 + 40) = 512;
  *(void *)(v1 + 32) = a1;
  uint64_t v3 = qword_1000949D8;
  swift_unknownObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  dispatch thunk of AtomicCounter.next()();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = 762340212;
  *(void *)(v2 + 24) = 0xE400000000000000;
  return v2;
}

uint64_t type metadata accessor for SystemKeychainPairingManager()
{
  return self;
}

uint64_t sub_100011664()
{
  uint64_t v0 = type metadata accessor for ControlChannelConnectionError.Code();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v32 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v34 = (char *)&v29 - v4;
  uint64_t v5 = type metadata accessor for ControlChannelConnectionError();
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = type metadata accessor for RemotePairingError();
  uint64_t v35 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000153C0(&qword_100096968);
  __chkstk_darwin(v14 - 8);
  char v16 = (uint64_t *)((char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v31 = v1;
    swift_beginAccess();
    if (!swift_weakLoadStrong()) {
      return swift_release();
    }
    swift_beginAccess();
    sub_100011CF4();
    swift_endAccess();
    swift_release();
    sub_10001261C();
    dispatch thunk of ControlChannelConnection.invalidationReason.getter();
    uint64_t v18 = type metadata accessor for ControlChannelConnection.InvalidationReason();
    if (sub_100015C0C((uint64_t)v16, 1, v18) == 1)
    {
      swift_release();
      swift_release();
      return sub_100047D34((uint64_t)v16, &qword_100096968);
    }
    uint64_t v30 = v0;
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v19 + 88))(v16, v18) == enum case for ControlChannelConnection.InvalidationReason.internalError(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v19 + 96))(v16, v18);
      uint64_t v20 = *v16;
      swift_errorRetain();
      sub_100011F58((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      static Error<>.networkingError.getter();
      char v21 = static _Error.~= infix(_:_:)();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v11);
      if (v21)
      {
LABEL_11:
        static os_log_type_t.default.getter();
        os_log(_:dso:log:_:_:)();
        sub_100017128();
        swift_errorRelease();
        swift_release();
        return swift_release();
      }
      uint64_t v38 = v20;
      swift_errorRetain();
      sub_1000153C0(&qword_100095A00);
      if (swift_dynamicCast())
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v8, v10, v5);
        ControlChannelConnectionError.code.getter();
        uint64_t v22 = v31;
        uint64_t v23 = v32;
        uint64_t v24 = *(void (**)(char *, void, uint64_t))(v31 + 104);
        uint64_t v35 = v20;
        uint64_t v25 = v30;
        v24(v32, enum case for ControlChannelConnectionError.Code.transportError(_:), v30);
        sub_100011F58(&qword_100096970, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnectionError.Code);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v27 = v36;
        uint64_t v26 = v37;
        uint64_t v28 = *(void (**)(char *, uint64_t))(v22 + 8);
        v28(v23, v25);
        v28(v34, v25);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v5);
        if (v26 == v27)
        {
          swift_errorRelease();
          goto LABEL_11;
        }
      }
      swift_release();
      swift_release();
      swift_errorRelease();
      return swift_errorRelease();
    }
    else
    {
      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v19 + 8))(v16, v18);
    }
  }
  return result;
}

uint64_t sub_100011CAC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100011CF4()
{
  sub_1000684A4();
  sub_100068614();
  if (v2)
  {
    unint64_t v4 = *(void *)(v1 + 40);
    type metadata accessor for ControlChannelConnection();
    sub_100012030(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    swift_bridgeObjectRetain();
    sub_100068708();
    sub_100013CE4();
    if (v5)
    {
      sub_100012030(&qword_1000972C8, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      while ((sub_100016E38() & 1) == 0)
      {
        sub_100016170();
        if ((v6 & 1) == 0) {
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRelease();
      swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *v0;
      sub_1000686DC();
      if ((v7 & 1) == 0) {
        sub_1000645D8(&qword_1000976D0);
      }
      sub_1000121F8(v4, (void (*)(void))&type metadata accessor for ControlChannelConnection, &qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      *uint64_t v0 = v8;
    }
  }
  else
  {
    sub_100068584();
    swift_retain();
    char v3 = __CocoaSet.contains(_:)();
    swift_release();
    if (v3) {
      sub_100065430();
    }
  }
LABEL_12:
  swift_bridgeObjectRelease();
  sub_1000112A4();
}

uint64_t sub_100011EC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100011F10(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100011F58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100011FA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100011FE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100012030(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000120B0()
{
  return swift_slowDealloc();
}

uint64_t sub_100012130()
{
  sub_100013BC4(v2, v3);
  sub_100013BC4(v1, v0);
  return sub_100013BC4(v1, v0);
}

id sub_1000121DC()
{
  return [v0 publicKey];
}

unint64_t sub_1000121F8(unint64_t result, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t))
{
  int64_t v5 = result;
  uint64_t v6 = *v4;
  uint64_t v7 = *v4 + 56;
  uint64_t v8 = -1 << *(unsigned char *)(*v4 + 32);
  unint64_t v9 = (result + 1) & ~v8;
  if (((1 << v9) & *(void *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v13 = ~v8;
    swift_retain();
    uint64_t v14 = _HashTable.previousHole(before:)();
    if ((*(void *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v15 = (v14 + 1) & v13;
      a2(0);
      sub_100012030(a3, a4);
      do
      {
        uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)() & v13;
        if (v5 >= (uint64_t)v15)
        {
          if (v16 >= v15 && v5 >= v16)
          {
LABEL_15:
            uint64_t v19 = *(void *)(v6 + 48);
            uint64_t v20 = (void *)(v19 + 8 * v5);
            char v21 = (void *)(v19 + 8 * v9);
            BOOL v22 = v5 != v9 || v20 >= v21 + 1;
            int64_t v5 = v9;
            if (v22)
            {
              *uint64_t v20 = *v21;
              int64_t v5 = v9;
            }
          }
        }
        else if (v16 >= v15 || v5 >= v16)
        {
          goto LABEL_15;
        }
        unint64_t v9 = (v9 + 1) & v13;
      }
      while (((*(void *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(void *)(v7 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v5) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v23 = *(void *)(v6 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v6 + 16) = v25;
    ++*(_DWORD *)(v6 + 36);
  }
  return result;
}

uint64_t sub_1000123CC(char a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  swift_retain();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  swift_beginAccess();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100012750(v9);
  swift_bridgeObjectRelease();
  if (v10 > 39)
  {
    os_log_type_t v11 = static os_log_type_t.error.getter();
    uint64_t v12 = qword_1000986F0;
    os_log_type_t v13 = v11;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v11))
    {
      swift_retain();
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 134217984;
      uint64_t v15 = swift_bridgeObjectRetain();
      sub_100012750(v15);
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Rejecting incoming TCP connection as we already have %ld TCP peers", v14, 0xCu);
      swift_slowDealloc();
    }
  }
  else
  {
    if ((remotePairingIsEnabled() & 1) != 0 && (*(unsigned char *)(a2 + 216) & 1) == 0)
    {
      swift_retain();
      swift_retain();
      sub_100012754(a2, a1 & 1, a2, (uint64_t)sub_10000F2A0, v8);
      goto LABEL_9;
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
  }
  sub_10000F2AC(0, a3);
LABEL_9:
  swift_release();
  return swift_release();
}

uint64_t sub_10001261C()
{
  os_log_type_t v0 = static os_log_type_t.default.getter();
  uint64_t v1 = qword_1000986F0;
  os_log_type_t v2 = v0;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000986F0, v0);
  if (result)
  {
    swift_retain();
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 134217984;
    swift_beginAccess();
    uint64_t v5 = swift_bridgeObjectRetain();
    sub_100012750(v5);
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "TCP connected peers updated. Total count: %ld", v4, 0xCu);
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_100012730(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaSet.count.getter();
  }
  else {
    return *(void *)(a1 + 16);
  }
}

uint64_t sub_100012754(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  *(void *)(v10 + 32) = a4;
  *(void *)(v10 + 40) = a5;
  swift_retain();
  swift_retain();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  if (!remotePairingIsEnabled())
  {
    static os_log_type_t.default.getter();
LABEL_12:
    os_log(_:dso:log:_:_:)();
    sub_10000E75C(0, a2 & 1, a3, a4, a5);
    swift_release();
    goto LABEL_13;
  }
  if ((static Defaults.deviceAllowTCPControlChannels.getter() & 1) == 0
    || !sub_100012D20()
    || !RPIdentity)
  {
    static os_log_type_t.error.getter();
    goto LABEL_12;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  size_t v36 = 8;
  int v12 = sysctlbyname("security.mac.amfi.developer_mode_status", (void *)(v11 + 16), &v36, 0, 0);
  uint64_t v34 = v11;
  if (!v12) {
    goto LABEL_9;
  }
  int v13 = v12;
  os_log_type_t v14 = static os_log_type_t.error.getter();
  uint64_t v15 = qword_1000986F0;
  if (!os_log_type_enabled((os_log_t)qword_1000986F0, v14)) {
    goto LABEL_9;
  }
  uint64_t v16 = (uint8_t *)swift_slowAlloc();
  aBlock[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v16 = 136446210;
  if (strerror(v13))
  {
    uint64_t v17 = String.init(cString:)();
    uint64_t v35 = (void *)sub_100010478(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v14, "Failed to fetch developer mode status: (%{public}s)", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v11 = v34;
LABEL_9:
    uint64_t v33 = *(void *)(a1 + 40);
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = v11;
    v19[3] = a1;
    v19[4] = sub_10000E74C;
    v19[5] = v10;
    aBlock[4] = (uint64_t)sub_10000E120;
    aBlock[5] = (uint64_t)v19;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10000CF80;
    aBlock[3] = (uint64_t)&unk_10008C398;
    uint64_t v29 = _Block_copy(aBlock);
    uint64_t v31 = type metadata accessor for DispatchQoS();
    uint64_t v32 = &v28;
    uint64_t v30 = *(void *)(v31 - 8);
    __chkstk_darwin(v31);
    char v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v28 = (uint64_t)&v28;
    uint64_t v23 = *(void *)(v22 - 8);
    __chkstk_darwin(v22);
    uint64_t v25 = (char *)&v28 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v35 = &_swiftEmptyArrayStorage;
    sub_100047DF0((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000153C0(&qword_1000950F0);
    sub_10000E5F4((unint64_t *)&qword_1000953C0, &qword_1000950F0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v26 = v29;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v26);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v31);
    swift_release();
    swift_release();
    swift_release();
LABEL_13:
    swift_release();
    return swift_release();
  }
  swift_release();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

BOOL sub_100012D20()
{
  sub_100013DE4();
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v1 != 0;
}

void sub_100012EDC()
{
  sub_1000139EC();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  UUID.uuidString.getter();
  uint64_t v5 = type metadata accessor for String.Encoding();
  sub_100013814();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100013900();
  static String.Encoding.utf8.getter();
  uint64_t v9 = String.data(using:allowLossyConversion:)();
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
  if (v11 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = sub_100017038(v9, v11);
    uint64_t v41 = v2;
    unint64_t v42 = v11;
    unint64_t v39 = v13;
    uint64_t v40 = v12;
    sub_100015BB4(v12, v13);
    nw_txt_record_create_dictionary();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    uint64_t v15 = qword_1000986F0;
    uint64_t v16 = type metadata accessor for UUID();
    sub_100013814();
    uint64_t v18 = v17;
    __chkstk_darwin(v19);
    sub_100012078();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v21 - v20, v4, v16);
    if (os_log_type_enabled(v15, v14))
    {
      uint64_t v38 = v9;
      uint64_t v22 = (uint8_t *)sub_100014750();
      os_log_t v36 = v15;
      uint64_t v44 = sub_100015720();
      uint64_t v37 = v35;
      *(_DWORD *)uint64_t v22 = 136446210;
      v35[1] = v22 + 4;
      sub_100047DF0(&qword_1000959C8, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v43 = sub_100010478(v23, v24, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v25 = sub_100016564();
      v26(v25);
      _os_log_impl((void *)&_mh_execute_header, v36, v14, "NetworkControlChannelService: Creating new bonjour advertisment with UUID=%{public}s", v22, 0xCu);
      swift_arrayDestroy();
      sub_1000120B0();
      uint64_t v9 = v38;
      sub_1000120B0();
    }
    else
    {
      uint64_t v27 = sub_100016564();
      v28(v27);
    }
    swift_getObjectType();
    static NetworkPairingKeys.identifier.getter();
    UUID.uuidString.getter();
    sub_100047F80();
    static NetworkPairingKeys.authTag.getter();
    unint64_t v30 = v39;
    uint64_t v29 = v40;
    Data.base64EncodedString(options:)(0);
    sub_1000158A8(v29, v30);
    sub_100047F80();
    type metadata accessor for ControlChannelConnectionWireProtocolVersion();
    uint64_t v31 = (void *)static ControlChannelConnectionWireProtocolVersion.current.getter();
    id v32 = [v31 description];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NetworkPairingKeys.wireProtocolVersion.getter();
    sub_100047F80();
    uint64_t v33 = (void *)static ControlChannelConnectionWireProtocolVersion.minimumSupported.getter();
    id v34 = [v33 description];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static NetworkPairingKeys.minimumSupportedWireProtocolVersion.getter();
    sub_100047F80();
    static NetworkPairingKeys.flags.getter();
    uint64_t v44 = BonjourAdvertFlags.rawValue.getter();
    sub_100016FEC();
    BinaryInteger.description.getter();
    sub_100047F80();
    sub_1000158A8(v29, v30);
    sub_100013BC4(v9, v42);
    sub_100013918();
  }
}

uint64_t sub_10001340C(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100013434()
{
  return v0;
}

uint64_t sub_100013494(uint64_t a1)
{
  *(void *)(v1 - 72) = a1;
  return v1 - 72;
}

unint64_t sub_1000134A8()
{
  return 0xD000000000000028;
}

uint64_t sub_1000134B8()
{
  return swift_beginAccess();
}

uint64_t sub_1000134D0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_100013528()
{
  return v0;
}

void sub_100013538()
{
  sub_1000139EC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for String.Encoding();
  sub_100013814();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1000120C8();
  static String.Encoding.utf8.getter();
  uint64_t v12 = String.data(using:allowLossyConversion:)();
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v1, v8);
  if (v14 >> 60 == 15)
  {
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    swift_release();
    swift_release();
    __break(1u);
  }
  else
  {
    __chkstk_darwin(v15);
    v21[2] = v3;
    v21[3] = v0;
    v21[4] = v7;
    v21[5] = v5;
    v21[6] = v12;
    v21[7] = v14;
    switch(v14 >> 62)
    {
      case 1uLL:
        if (v12 >> 32 >= (int)v12)
        {
          swift_retain();
          sub_1000171F8((int)v12, v12 >> 32, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100013D24);
          sub_100013BC4(v12, v14);
          goto LABEL_9;
        }
        __break(1u);
        goto LABEL_12;
      case 2uLL:
        uint64_t v19 = *(void *)(v12 + 16);
        uint64_t v20 = *(void *)(v12 + 24);
        swift_retain();
        swift_retain();
        sub_1000171F8(v19, v20, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100013D24);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_10;
      case 3uLL:
        uint64_t v18 = 0;
        uint64_t v17 = 0;
        uint64_t v16 = 0;
        goto LABEL_6;
      default:
        uint64_t v16 = BYTE6(v14);
        uint64_t v17 = v14 & 0xFFFFFFFFFFFFLL;
        uint64_t v18 = v12;
LABEL_6:
        sub_100047C50(v18, v17, (void (*)(char *__return_ptr, uint64_t *, char *))sub_100013D24, (uint64_t)v21, v16);
LABEL_9:
        swift_bridgeObjectRelease();
LABEL_10:
        sub_100013BC4(v12, v14);
        sub_100013918();
        break;
    }
  }
}

void sub_1000137F8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_10001385C()
{
  return swift_getObjectType();
}

uint64_t sub_100013884()
{
  return v0;
}

uint64_t sub_1000138AC(float *a1, float a2)
{
  *a1 = a2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000138D8()
{
  return type metadata accessor for XPCDictionary();
}

uint64_t sub_100013930()
{
  return v0;
}

uint64_t sub_100013940()
{
  return v0 + v1;
}

uint64_t sub_100013990()
{
  return swift_slowAlloc();
}

uint64_t sub_1000139AC()
{
  return v0;
}

void sub_1000139CC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100013A04()
{
  return static POSIXError.current(or:)(5);
}

id sub_100013A30(uint64_t a1, const char *a2)
{
  return [v3 a2:v2];
}

uint64_t sub_100013A48()
{
  return swift_beginAccess();
}

uint64_t sub_100013A60()
{
  return static DispatchWorkItemFlags.barrier.getter();
}

BOOL sub_100013A88(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100013AB4()
{
  return swift_allocObject();
}

uint64_t sub_100013AD0()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100013AE8()
{
  return swift_arrayDestroy();
}

uint64_t sub_100013B04()
{
  return v0;
}

uint64_t sub_100013B24(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100013B4C()
{
  **(void **)(v1 - 264) = v0;
  return swift_storeEnumTagMultiPayload();
}

unint64_t sub_100013B78()
{
  unint64_t result = qword_100095A98;
  if (!qword_100095A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095A98);
  }
  return result;
}

uint64_t sub_100013BC4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000158A8(a1, a2);
  }
  return a1;
}

uint64_t sub_100013BF4()
{
  return swift_slowAlloc();
}

uint64_t sub_100013C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100016260(a1, a3, a4);
}

uint64_t sub_100013C40()
{
  uint64_t v5 = *(void *)(v3 - 128);
  uint64_t v6 = *(void *)(v3 - 120);
  return sub_10003634C(v0, v5, v2, v6, v1);
}

uint64_t sub_100013C60()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_100013C9C()
{
  return v0 + 32;
}

BOOL sub_100013CA8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100013CC4()
{
  return swift_dynamicCast();
}

uint64_t sub_100013D0C()
{
  return v0;
}

uint64_t sub_100013D24@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100013D48(a1, *(NSObject **)(v2 + 24), a2);
}

uint64_t sub_100013D48@<X0>(uint64_t result@<X0>, NSObject *a2@<X2>, unsigned char *a3@<X8>)
{
  if (result)
  {
    uint64_t v4 = (const uint8_t *)result;
    size_t v6 = Data.count.getter();
    uint64_t v7 = String.utf8CString.getter();
    LOBYTE(v4) = nw_txt_record_set_key(a2, (const char *)(v7 + 32), v4, v6);
    unint64_t result = swift_release();
    *a3 = (_BYTE)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100013DE4()
{
  sub_100015CAC();
  uint64_t v3 = type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v4);
  sub_100013900();
  sub_100016BCC();
  if (v1)
  {
LABEL_23:
    sub_100012088();
    return;
  }
  uint64_t v50 = v0;
  uint64_t v51 = v2;
  uint64_t v52 = v3;
  unint64_t v55 = (unint64_t)&_swiftEmptyArrayStorage;
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  sub_1000153C0(&qword_100095580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100075C70;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v6;
  type metadata accessor for CFString(0);
  uint64_t v8 = v7;
  *(void *)(inited + 72) = v7;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  if (kSecUseSystemKeychain)
  {
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 88) = v9;
    *(void *)(inited + 120) = &type metadata for Bool;
    *(unsigned char *)(inited + 96) = 1;
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 136) = v10;
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = 0xD00000000000001ALL;
    *(void *)(inited + 152) = 0x800000010007A7C0;
    *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 184) = v11;
    *(void *)(inited + 216) = &type metadata for Bool;
    *(unsigned char *)(inited + 192) = 1;
    *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 232) = v12;
    *(void *)(inited + 264) = v8;
    *(void *)(inited + 240) = kSecMatchLimitAll;
    CFStringRef v13 = (id)kSecClassGenericPassword;
    CFStringRef v14 = (id)kSecMatchLimitAll;
    sub_10001674C();
    uint64_t v54 = Dictionary.init(dictionaryLiteral:)();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100016064();
    v59[3] = &type metadata for String;
    sub_100027DD0();
    v59[0] = 0xD000000000000017;
    v59[1] = v15;
    sub_100013C10((uint64_t)v59, v16, v17, v18);
    CFTypeRef v58 = 0;
    sub_10001674C();
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    OSStatus v20 = SecItemCopyMatching(isa, &v58);

    if (v20)
    {
      swift_bridgeObjectRelease();
      if (v20 != -25300)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_100027DDC();
        id v39 = objc_allocWithZone((Class)NSError);
        sub_1000168EC();
        swift_willThrow();
      }
    }
    else if (v58 {
           && (v59[0] = v58, swift_unknownObjectRetain(),
    }
                             sub_1000153C0(&qword_1000955B0),
                             (swift_dynamicCast() & 1) != 0))
    {
      uint64_t v21 = v56;
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      uint64_t v23 = qword_1000986F0;
      os_log_type_t v24 = v22;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v22))
      {
        swift_bridgeObjectRetain();
        uint64_t v25 = (uint8_t *)sub_100014750();
        *(_DWORD *)uint64_t v25 = 134217984;
        v59[0] = *(void *)(v21 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Successfully fetched %ld peer items from keychain", v25, 0xCu);
        sub_1000120B0();
      }
      uint64_t v26 = *(void *)(v21 + 16);
      if (v26)
      {
        uint64_t v27 = v21 + 32;
        v46[1] = v21;
        v46[2] = (char *)&type metadata for Any + 8;
        while (1)
        {
          sub_100015404(v27, (uint64_t)v59);
          sub_100015404((uint64_t)v59, (uint64_t)&v56);
          sub_1000153C0(&qword_1000955A0);
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_27;
          }
          uint64_t v28 = v53;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          sub_100015460(v28, &v56);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v57)
          {
            sub_100015C5C((uint64_t)&v56, &qword_100095588);
LABEL_27:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_29;
          }
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_27;
          }
          uint64_t v47 = v27;
          uint64_t v48 = v26;
          uint64_t v29 = type metadata accessor for UUID();
          uint64_t v49 = v46;
          sub_100013844();
          __chkstk_darwin(v30);
          sub_100012078();
          uint64_t v31 = sub_1000153C0((uint64_t *)&unk_1000976C0);
          uint64_t v32 = sub_100014774(v31);
          __chkstk_darwin(v32);
          sub_1000112DC();
          UUID.init(uuidString:)();
          swift_bridgeObjectRelease();
          sub_100015B08(v28, 1, v29);
          if (v33) {
            break;
          }
          sub_100016EDC();
          v34();
          sub_100014818();
          id v36 = v35;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          uint64_t v37 = sub_100027E80();
          v38(v37);
          sub_100010548((uint64_t)v59);
          uint64_t v27 = v47 + 32;
          uint64_t v26 = v48 - 1;
          if (v48 == 1) {
            goto LABEL_30;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100015C5C(v28, (uint64_t *)&unk_1000976C0);
        sub_100027ECC();
LABEL_29:
        static RemotePairingError.pairingFailed.getter();
        *(void *)&long long v56 = 0;
        *((void *)&v56 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(34);
        v40._countAndFlagsBits = 0xD000000000000020;
        v40._object = (void *)0x800000010007A8C0;
        String.append(_:)(v40);
        _print_unlocked<A, B>(_:_:)();
        sub_10000D9E4((unint64_t *)&unk_1000959D0);
        sub_100015738();
        sub_10000D9E4((unint64_t *)&unk_1000953D0);
        sub_100027EAC();
        sub_10001471C();
        swift_willThrow();
        sub_100010548((uint64_t)v59);
      }
      else
      {
LABEL_30:
        swift_bridgeObjectRelease();
        os_log_type_t v41 = static os_log_type_t.debug.getter();
        unint64_t v42 = qword_1000986F0;
        unint64_t v43 = v55;
        if (os_log_type_enabled((os_log_t)qword_1000986F0, v41))
        {
          swift_bridgeObjectRetain_n();
          uint64_t v44 = (uint8_t *)sub_100014750();
          *(_DWORD *)uint64_t v44 = 134217984;
          if (v43 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v45 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          v59[0] = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v41, "Successfully parsed %ld peer items from keychain", v44, 0xCu);
          sub_1000120B0();
        }
        swift_beginAccess();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      static RemotePairingError.pairingFailed.getter();
      sub_10000D9E4((unint64_t *)&unk_1000959D0);
      swift_allocError();
      sub_10000D9E4((unint64_t *)&unk_1000953D0);
      sub_100027E98();
      Error<>.init(_:_:)();
      swift_willThrow();
    }
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_10001471C()
{
  return Error<>.init(_:_:)();
}

uint64_t sub_100014734()
{
  return v0;
}

uint64_t sub_100014750()
{
  return swift_slowAlloc();
}

uint64_t sub_100014774(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100014780()
{
  sub_100013BC4(*(void *)(v1 - 72), v0[16]);
  uint64_t v2 = v0[25];
  unint64_t v3 = v0[18];
  return sub_100013BC4(v2, v3);
}

uint64_t sub_1000147B4()
{
  uint64_t result = v0;
  *(void *)(v2 - 184) = *(void *)(v1 + 8);
  return result;
}

uint64_t sub_1000147D0()
{
  return swift_allocObject();
}

uint64_t sub_1000147E8()
{
  return swift_bridgeObjectRelease_n();
}

void sub_100014818()
{
  sub_100015CAC();
  unint64_t v65 = v0;
  type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v1);
  sub_1000120E0();
  unint64_t v66 = v2;
  static os_log_type_t.debug.getter();
  sub_1000153C0(&qword_100095570);
  uint64_t v3 = sub_10000D274();
  *(_OWORD *)(v3 + 16) = xmmword_100075C50;
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_100016B8C();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000153C0(&qword_100095580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100075CB0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v8;
  type metadata accessor for CFString(0);
  *(void *)(inited + 72) = v9;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v10;
  CFStringRef v11 = (id)kSecClassGenericPassword;
  uint64_t v12 = UUID.uuidString.getter();
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v12;
  *(void *)(inited + 104) = v13;
  if (!kSecUseSystemKeychain) {
    __break(1u);
  }
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v14;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 1;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v15;
  *(void *)(inited + 216) = &type metadata for String;
  *(void *)(inited + 192) = 0xD00000000000001ALL;
  *(void *)(inited + 200) = 0x800000010007A7C0;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v16;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(unsigned char *)(inited + 240) = 1;
  *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 280) = v17;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(unsigned char *)(inited + 288) = 1;
  uint64_t v67 = Dictionary.init(dictionaryLiteral:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100016064();
  uint64_t v72 = &type metadata for String;
  sub_100027DD0();
  *(void *)&long long v71 = 0xD000000000000017;
  *((void *)&v71 + 1) = v18;
  sub_100013C10((uint64_t)&v71, v19, v20, v21);
  CFTypeRef v70 = 0;
  swift_bridgeObjectRetain();
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v23 = SecItemCopyMatching(isa, &v70);

  if (v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;
    id v27 = objc_allocWithZone((Class)NSError);
    sub_10001641C(v24, v26, v23);
    swift_willThrow();
LABEL_14:
    swift_unknownObjectRelease();
LABEL_15:
    sub_100012088();
    return;
  }
  if (!v70
    || (*(void *)&long long v71 = v70, swift_unknownObjectRetain(), sub_1000153C0(&qword_1000955A0), (sub_100015EE4() & 1) == 0))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    static RemotePairingError.pairingFailed.getter();
    sub_10000D9E4((unint64_t *)&unk_1000959D0);
    sub_100015738();
    sub_10000D9E4((unint64_t *)&unk_1000953D0);
    sub_100027E98();
    sub_10001471C();
    swift_willThrow();
    goto LABEL_14;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100016D14();
  swift_bridgeObjectRelease();
  if (!v72)
  {
    swift_bridgeObjectRelease();
    sub_100015C5C((uint64_t)&v71, &qword_100095588);
    goto LABEL_13;
  }
  if ((sub_100015D94() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  OPACKDecode(data:)();
  if (v65)
  {
    swift_bridgeObjectRelease();
    sub_10001561C();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if ((sub_100015EE4() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v68;
    unint64_t v33 = v69;
LABEL_31:
    sub_1000158A8(v32, v33);
    goto LABEL_13;
  }
  sub_100015460((uint64_t)v68, &v71);
  if (!v72)
  {
    swift_bridgeObjectRelease();
    sub_10001561C();
    swift_bridgeObjectRelease();
LABEL_35:
    sub_100015C5C((uint64_t)&v71, &qword_100095588);
    goto LABEL_13;
  }
  if ((sub_100015D94() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_10001561C();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v64 = (uint64_t)v68;
  unint64_t v65 = v69;
  sub_100027EB8();
  sub_100015460((uint64_t)v68, v28);
  if (!v72)
  {
    swift_bridgeObjectRelease();
    sub_10001561C();
    swift_bridgeObjectRelease();
    sub_1000158A8(v64, v65);
    goto LABEL_35;
  }
  v63 = v68;
  if ((sub_100015D94() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_10001561C();
    swift_bridgeObjectRelease();
    uint64_t v32 = v64;
    unint64_t v33 = v65;
    goto LABEL_31;
  }
  uint64_t v29 = (uint64_t)v68;
  unint64_t v66 = v69;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100016D14();
  swift_bridgeObjectRelease();
  if (!v72)
  {
    sub_100015C5C((uint64_t)&v71, &qword_100095588);
    goto LABEL_38;
  }
  if ((sub_100015D94() & 1) == 0)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  if (kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate)
  {
    if (v68 == (void *)static String._unconditionallyBridgeFromObjectiveC(_:)() && v69 == v30)
    {
      swift_bridgeObjectRelease_n();
LABEL_68:
      sub_100026E18(v67);
      swift_bridgeObjectRelease();
LABEL_39:
      id v34 = [objc_allocWithZone((Class)CUPairedPeer) init];
      Class v35 = UUID._bridgeToObjectiveC()().super.isa;
      sub_100013A30((uint64_t)v35, "setIdentifier:");

      sub_1000167EC(v64, v65, v34);
      uint64_t v61 = v29;
      sub_100016844(v29, v66, v34);
      uint64_t v36 = sub_1000153C0(&qword_100096160);
      uint64_t v37 = sub_100014774(v36);
      __chkstk_darwin(v37);
      v60[1] = v38;
      uint64_t v62 = (uint64_t)v60 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100016D14();
      swift_bridgeObjectRelease();
      if (v72)
      {
        uint64_t v39 = type metadata accessor for Date();
        uint64_t v40 = v62;
        int v41 = swift_dynamicCast();
        sub_100015C34(v40, v41 ^ 1u, 1, v39);
        uint64_t v42 = sub_100015C0C(v40, 1, v39);
        Class v43 = 0;
        if (v42 != 1)
        {
          v60[0] = v60;
          Class v43 = Date._bridgeToObjectiveC()().super.isa;
          sub_100010EE4();
          uint64_t v42 = v44();
        }
      }
      else
      {
        sub_100015C5C((uint64_t)&v71, &qword_100095588);
        uint64_t v45 = type metadata accessor for Date();
        uint64_t v42 = sub_100015C34(v62, 1, 1, v45);
        Class v43 = 0;
      }
      sub_100013A30(v42, "setDateModified:");

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v47 = v46;
      sub_100016D14();
      swift_bridgeObjectRelease();
      if (v72)
      {
        uint64_t v48 = sub_100015D94();
        if (v48)
        {
          String._bridgeToObjectiveC()();
          uint64_t v48 = sub_100027EE4();
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v48 = sub_100015C5C((uint64_t)&v71, &qword_100095588);
      }
      uint64_t v47 = 0;
LABEL_48:
      sub_100013A30(v48, "setName:");

      sub_100015460((uint64_t)v63, &v71);
      if (v72)
      {
        sub_1000153C0(&qword_1000955A8);
        uint64_t v49 = sub_100027E10();
        if (v49)
        {
          Dictionary._bridgeToObjectiveC()();
          uint64_t v49 = sub_100027EE4();
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v49 = sub_100015C5C((uint64_t)&v71, &qword_100095588);
      }
      uint64_t v47 = 0;
LABEL_53:
      sub_100013A30(v49, "setAcl:");

      sub_100015460((uint64_t)v63, &v71);
      if (v72)
      {
        uint64_t v50 = sub_100015D94();
        if (v50)
        {
          String._bridgeToObjectiveC()();
          uint64_t v50 = sub_100027EE4();
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v50 = sub_100015C5C((uint64_t)&v71, &qword_100095588);
      }
      uint64_t v47 = 0;
LABEL_58:
      sub_100013A30(v50, "setModel:");

      uint64_t v51 = v63;
      sub_100015460((uint64_t)v63, &v71);
      swift_bridgeObjectRelease();
      if (v72)
      {
        sub_1000153C0(&qword_1000955A8);
        uint64_t v52 = sub_100027E10();
        if (v52)
        {
          Dictionary._bridgeToObjectiveC()();
          uint64_t v52 = sub_100027EE4();
LABEL_63:
          sub_100013A30(v52, "setInfo:");

          __chkstk_darwin(v53);
          sub_100015954();
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          sub_100016D14();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v72)
          {
            uint64_t v54 = type metadata accessor for Date();
            uint64_t v55 = swift_dynamicCast() ^ 1;
            uint64_t v56 = (uint64_t)v51;
            uint64_t v57 = 1;
            uint64_t v58 = v54;
          }
          else
          {
            sub_100015C5C((uint64_t)&v71, &qword_100095588);
            type metadata accessor for Date();
            uint64_t v56 = sub_100016AC8();
          }
          sub_100015C34(v56, v55, v57, v58);
          uint64_t v59 = v64;
          CUPairedPeer.initialPairingTime.setter();
          sub_10001561C();
          sub_1000158A8(v59, v65);
          sub_1000158A8(v61, v66);
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v52 = sub_100015C5C((uint64_t)&v71, &qword_100095588);
      }
      uint64_t v51 = 0;
      goto LABEL_63;
    }
    LODWORD(v62) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v62) {
      goto LABEL_68;
    }
    goto LABEL_38;
  }
  __break(1u);
}

uint64_t sub_1000153C0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100015404(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

double sub_100015460@<D0>(uint64_t a1@<X2>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_1000155A8(), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(a1 + 56) + 32 * v4;
    sub_100015404(v6, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

unint64_t sub_1000154C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000155A8()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._finalize()();
  uint64_t v0 = sub_100068540();

  return sub_1000154C4(v0, v1, v2);
}

uint64_t sub_10001561C()
{
  return sub_1000158A8(v1, v0);
}

void sub_100015650(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

uint64_t sub_10001567C()
{
  return swift_allocObject();
}

uint64_t sub_1000156A0()
{
  sub_100013BC4(v1, v0);
  return sub_100013BC4(v2, v3);
}

uint64_t sub_1000156D4(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t sub_1000156E8()
{
  *(void *)(v2 - 160) = v1 + 4;
  *(void *)(v2 - 128) = v0;
  return swift_errorRetain();
}

uint64_t sub_100015708()
{
  return sub_1000158A8(v0, v1);
}

uint64_t sub_100015720()
{
  return swift_slowAlloc();
}

uint64_t sub_100015738()
{
  return swift_allocError();
}

uint64_t sub_100015758()
{
  *unint64_t v1 = v0;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100015790()
{
  return swift_retain();
}

uint64_t sub_1000157B8()
{
  return swift_retain();
}

BOOL sub_1000157E8(os_log_type_t a1)
{
  uint64_t v4 = *(NSObject **)(v1 + 1776);
  return os_log_type_enabled(v4, a1);
}

uint64_t sub_100015824()
{
  return v0;
}

uint64_t sub_100015848(uint64_t a1, ...)
{
  va_start(va, a1);
  return sub_100010478(v2, v1, (uint64_t *)va);
}

uint64_t sub_100015864()
{
  return Error<>.init(_:_:)();
}

uint64_t sub_10001588C()
{
  return swift_slowAlloc();
}

uint64_t sub_1000158A8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100015910()
{
  return v0;
}

uint64_t sub_100015964(uint64_t result)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(result + 64));
  uint64_t v4 = *(int *)(result + 80);
  uint64_t v5 = *(void *)(v1 + v4 + 8);
  *(void *)(v2 - 128) = *(void *)(v1 + v4);
  *(void *)(v2 - 120) = v3;
  *(void *)(v2 - 136) = v5;
  return result;
}

char *sub_100015984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000159BC()
{
  return v0;
}

uint64_t sub_1000159CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) |= 1 << result;
  return result;
}

uint64_t sub_1000159E4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000159F4()
{
  return v1 + *(int *)(v0 + 56);
}

uint64_t sub_100015A2C(uint64_t a1)
{
  return a1 - 8;
}

void sub_100015A5C()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_100015A6C()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_100015A90()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_100015AB8()
{
  *uint64_t v0 = 0x8000000000000000;
}

void sub_100015AD4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100015AF4()
{
  return v0;
}

uint64_t sub_100015B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100015C0C(a1, a2, a3);
}

uint64_t sub_100015B20()
{
  return swift_release();
}

uint64_t sub_100015B50(uint64_t a1, ...)
{
  va_start(va, a1);
  return sub_100010478(v2, v1, (uint64_t *)va);
}

uint64_t sub_100015B6C()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t sub_100015B88()
{
  *uint64_t v0 = 0x8000000000000000;
  return swift_retain();
}

uint64_t sub_100015BB4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100015C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100015C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_100015C5C(uint64_t a1, uint64_t *a2)
{
  sub_1000153C0(a2);
  sub_100010EF0();
  sub_100010EE4();
  v3();
  return a1;
}

uint64_t sub_100015CC4()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_100015CFC(uint64_t a1, uint64_t a2)
{
  return _swift_deallocObject(a1, a2, 7);
}

float *sub_100015D04(float *result, float a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_100015D14()
{
  return swift_dynamicCast();
}

uint64_t sub_100015D34()
{
  return 0;
}

uint64_t sub_100015D44()
{
  return sub_10000D998(v1, v0, 1);
}

uint64_t sub_100015D74()
{
  return swift_allocError();
}

uint64_t sub_100015D94()
{
  return swift_dynamicCast();
}

uint64_t sub_100015DB4()
{
  return v0;
}

uint64_t sub_100015DD4()
{
  return v0;
}

uint64_t sub_100015DF4(void (*a1)(void), void (*a2)(void))
{
  return sub_10001741C(a1, a2, 32);
}

uint64_t sub_100015DFC()
{
  return sub_100015C34(v0, 1, 1, v1);
}

void *sub_100015E1C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_100015E38()
{
  return swift_beginAccess();
}

void sub_100015E7C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100015EC4()
{
  return swift_arrayDestroy();
}

uint64_t sub_100015EE4()
{
  return swift_dynamicCast();
}

uint64_t sub_100015F18()
{
  return v0;
}

uint64_t sub_100015F30()
{
  return v0;
}

void sub_100015F48(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_100015F70()
{
  return swift_beginAccess();
}

uint64_t sub_100015F90()
{
  return swift_allocError();
}

void sub_100015FC0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100015FE0()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_100015FF0()
{
  return swift_allocError();
}

BOOL sub_100016010(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_10001604C()
{
  return v0;
}

void sub_100016070()
{
  *(void *)(v0 - 96) = 0;
  *(void *)(v0 - 88) = 0xE000000000000000;
}

uint64_t sub_100016080()
{
  return Dictionary.init(dictionaryLiteral:)();
}

void sub_1000160B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100016104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100015C34(v4, a2, 1, a4);
  return String.init<A>(describing:)();
}

uint64_t sub_10001614C()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_10001618C()
{
  return v0;
}

uint64_t sub_1000161BC()
{
  return swift_slowAlloc();
}

uint64_t sub_1000161E4()
{
  return v0;
}

void sub_1000161FC()
{
  *(void *)(*(void *)v0 + 16) = v1 + 1;
}

uint64_t sub_100016238(uint64_t a1)
{
  return a1 - 8;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t sub_100016260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001673C((_OWORD *)a1, v6);
    sub_1000162F4(v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10002A49C(a1, &qword_100095588);
    sub_100065CBC(v6, a2, a3);
    swift_bridgeObjectRelease();
    return sub_10002A49C((uint64_t)v6, &qword_100095588);
  }
}

#error "100016318: call analysis failed (funcsize=19)"

uint64_t sub_100016350()
{
  return swift_allocError();
}

uint64_t sub_10001637C()
{
  return swift_dynamicCast();
}

uint64_t sub_10001639C()
{
  return swift_dynamicCast();
}

uint64_t sub_1000163CC(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000163EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  uint64_t *v10 = a10;
  return result;
}

uint64_t sub_1000163FC()
{
  *(void *)(v1 - 144) = v0;
  return swift_slowAlloc();
}

id sub_10001641C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004E7D0(a1, a2, a3, 0);
}

uint64_t sub_100016440()
{
  return Error<>.init(_:_:)();
}

uint64_t sub_100016470()
{
  return v0;
}

uint64_t sub_1000164A4()
{
  return v0;
}

uint64_t sub_1000164B8()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000164D4()
{
  **(void **)(v1 - 264) = v0;
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100016520()
{
  return swift_allocError();
}

uint64_t sub_10001653C()
{
  return swift_retain();
}

uint64_t sub_100016564()
{
  return v0;
}

_OWORD *sub_1000165B0(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  os_log_type_t v5 = v4;
  Swift::Int v10 = *v4;
  sub_1000155A8();
  sub_1000685A8();
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v14 = v11;
  char v15 = v12;
  sub_1000153C0((uint64_t *)&unk_100097720);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v10)) {
    goto LABEL_5;
  }
  sub_100068540();
  unint64_t v16 = sub_1000155A8();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_13:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v5;
  if (v15)
  {
    uint64_t v19 = (_OWORD *)(*(void *)(v18 + 56) + 32 * v14);
    sub_100010548((uint64_t)v19);
    return sub_10001673C(a1, v19);
  }
  else
  {
    sub_1000166E0(v14, a2, a3, (uint64_t)a1, v18);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

_OWORD *sub_1000166E0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_1000159CC(a1, a5 + 8 * (a1 >> 6));
  uint64_t v8 = (void *)(*(void *)(v7 + 48) + 16 * v6);
  void *v8 = v9;
  v8[1] = v10;
  uint64_t result = sub_10001673C(v11, (_OWORD *)(*(void *)(v7 + 56) + 32 * v6));
  uint64_t v13 = *(void *)(a5 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v15;
  }
  return result;
}

_OWORD *sub_10001673C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10001674C()
{
  return v0;
}

BOOL sub_100016760(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10001677C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

double sub_10001679C()
{
  return sub_100015460(v1, (_OWORD *)(v0 + 112));
}

uint64_t sub_1000167B8()
{
  return v0;
}

void sub_1000167EC(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setPublicKey:isa];
}

void sub_100016844(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setAltIRK:isa];
}

uint64_t sub_10001689C()
{
  return v0;
}

uint64_t sub_1000168B0()
{
  return OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)();
}

void sub_1000168D4()
{
  *uint64_t v0 = 0x8000000000000000;
}

id sub_1000168EC()
{
  return sub_10004E7D0(v1, v2, v0, 0);
}

uint64_t sub_100016934()
{
  return v0;
}

void sub_100016960()
{
  *(_WORD *)(v0 + 12) = 1024;
}

uint64_t sub_10001698C()
{
  return swift_allocError();
}

uint64_t sub_1000169AC()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_1000169D4()
{
  return v0;
}

uint64_t sub_100016A00()
{
  return 0;
}

uint64_t sub_100016A1C()
{
  return v0;
}

uint64_t sub_100016A38()
{
  return v0;
}

uint64_t sub_100016A4C()
{
  return swift_release_n();
}

uint64_t sub_100016A64(uint64_t a1)
{
  return sub_100015C0C(a1, 1, v1);
}

uint64_t sub_100016A84()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100016AA4(uint64_t a1)
{
  return TunnelEndpoint.init(id:connection:workQueue:)(v1, v2, v3 - 160, a1);
}

uint64_t sub_100016AC8()
{
  return v0;
}

uint64_t sub_100016AD8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_100016AF8()
{
  return v0;
}

size_t sub_100016B28(const void *a1)
{
  return j__malloc_size(a1);
}

uint64_t sub_100016B44()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100016B5C()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

unint64_t sub_100016B8C()
{
  unint64_t result = qword_100095578;
  if (!qword_100095578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095578);
  }
  return result;
}

void *sub_100016BCC()
{
  unint64_t result = sub_100016C68((void *)(v0 + 64), *(void *)(v0 + 88));
  if (*(unsigned char *)(*result + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted) != 1)
  {
    type metadata accessor for RemotePairingError();
    sub_10000D9E4((unint64_t *)&unk_1000959D0);
    swift_allocError();
    static RemotePairingError.unlockRequired.getter();
    return (void *)swift_willThrow();
  }
  return result;
}

void *sub_100016C68(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100016CAC()
{
  return v0;
}

uint64_t sub_100016CC4()
{
  return v0;
}

uint64_t sub_100016CD0()
{
  return swift_dynamicCast();
}

uint64_t sub_100016CF4()
{
  return v0;
}

double sub_100016D14()
{
  return sub_100015460(v1, (_OWORD *)(v0 + 96));
}

uint64_t sub_100016D2C(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_100016D40()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

BOOL sub_100016D60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_100016D90()
{
  return v0;
}

uint64_t sub_100016DB0()
{
  return 0;
}

uint64_t sub_100016DCC()
{
  return static DispatchQoS.userInitiated.getter();
}

void sub_100016E08(uint64_t a1@<X8>)
{
  *(void *)(v5 + 8 * a1) = v2 | v1;
  *(void *)(*(void *)(v3 + 48) + 8 * v4) = v6;
}

uint64_t sub_100016E38()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_100016E68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000153C0(a3);
}

uint64_t sub_100016E84()
{
  return type metadata accessor for XPCDictionary();
}

uint64_t sub_100016EAC()
{
  return sub_100015BB4(v0, v1);
}

uint64_t sub_100016F14()
{
  return static os_log_type_t.default.getter();
}

void sub_100016F48(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_100016F58()
{
  return swift_slowAlloc();
}

uint64_t sub_100016F74()
{
  return sub_100013BC4(v0, v1);
}

uint64_t sub_100016F8C()
{
  return v0;
}

uint64_t sub_100016FA4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100016FC0()
{
  return swift_beginAccess();
}

unint64_t sub_100016FEC()
{
  unint64_t result = qword_1000969B0;
  if (!qword_1000969B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000969B0);
  }
  return result;
}

uint64_t sub_100017038(uint64_t a1, uint64_t a2)
{
  sub_100016BCC();
  if (!v2)
  {
    uint64_t v4 = sub_1000170B8();
    a2 = CUPairingIdentity.authTag(for:type:)();
  }
  return a2;
}

void *sub_1000170B8()
{
  uint64_t v2 = (void *)v0[13];
  if (v2)
  {
    uint64_t v0 = (void *)v0[13];
  }
  else
  {
    sub_100022F98();
    if (v1) {
      return v0;
    }
    uint64_t v6 = (void *)v0[13];
    v0[13] = v4;
    uint64_t v0 = v4;

    uint64_t v2 = 0;
  }
  id v3 = v2;
  return v0;
}

uint64_t sub_100017128()
{
  OS_dispatch_queue.assertOnQueueHierarchy()();
  String.utf8CString.getter();
  xpc_set_event();
  swift_release();
  uint64_t v1 = swift_retain();

  return sub_10000DB48(v1, v0);
}

uint64_t sub_100017194(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000171F8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = v8 + v12;
  if (v8) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  a3(&v16, v8, v14);
  if (!v3) {
    char v15 = v16;
  }
  return v15 & 1;
}

uint64_t sub_1000172AC()
{
  return swift_release();
}

uint64_t sub_1000172B4()
{
  return swift_release();
}

uint64_t sub_1000172BC()
{
  return swift_release();
}

uint64_t sub_1000172C4()
{
  return swift_release();
}

uint64_t sub_1000172CC()
{
  return swift_release();
}

uint64_t sub_1000172D4()
{
  return swift_release();
}

uint64_t sub_1000172DC()
{
  return swift_release();
}

uint64_t sub_1000172E4()
{
  return swift_release();
}

uint64_t sub_1000172EC()
{
  return swift_release();
}

uint64_t sub_1000172F4()
{
  return swift_release();
}

uint64_t sub_1000172FC()
{
  return swift_release();
}

uint64_t sub_100017304()
{
  return swift_release();
}

uint64_t sub_10001730C()
{
  return swift_release();
}

uint64_t sub_100017314()
{
  return swift_release();
}

uint64_t sub_10001731C()
{
  return swift_release();
}

uint64_t sub_100017324(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017344(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017354(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017364(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017374(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017384(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017394(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000173A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000173B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000173C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000173D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000173E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000173F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017404(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100017414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000F774(a1, a2, a3);
}

uint64_t sub_10001741C(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  a1(*(void *)(v3 + 16));
  a2(*(void *)(v3 + 24));

  return _swift_deallocObject(v3, a3, 7);
}

uint64_t sub_1000174D0()
{
  return sub_100011664();
}

uint64_t _remotepairing_xpc_remote_connection_get_failsafe_version_flags()
{
  return _xpc_remote_connection_get_failsafe_version_flags();
}

BOOL socket_deny_cellular(int a1)
{
  int v2 = 4;
  return setsockopt(a1, 0xFFFF, 4225, &v2, 4u) == 0;
}

uint64_t is_setup_complete()
{
  if (&_BYSetupAssistantHasCompletedInitialRun) {
    return BYSetupAssistantHasCompletedInitialRun();
  }
  else {
    return 1;
  }
}

BOOL is_pairing_restricted_by_findMy()
{
  uint64_t v0 = +[FMDFMIPManager sharedInstance];
  uint64_t v1 = v0;
  BOOL v2 = v0 != 0;
  if (v0)
  {
    if ([v0 lockdownShouldDisableDevicePairing])
    {
      uint64_t v3 = pairing_utilities_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_100071FC8();
      }
LABEL_9:

      goto LABEL_10;
    }
  }
  else if ((os_variant_is_darwinos() & 1) == 0)
  {
    uint64_t v3 = pairing_utilities_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_100072008();
    }
    goto LABEL_9;
  }
  BOOL v2 = 0;
LABEL_10:

  return v2;
}

id pairing_utilities_log()
{
  if (qword_100097968[0] != -1) {
    dispatch_once(qword_100097968, &stru_10008A9E0);
  }
  uint64_t v0 = (void *)qword_100097960;

  return v0;
}

uint64_t managed_configuration_allow_pairing(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = +[MCProfileConnection sharedConnection];
  uint64_t v6 = v5;
  if (v5)
  {
    unsigned int v7 = [v5 hostMayPairWithOptions:v3 challenge:v4];
    uint64_t v8 = v7;
    switch(v7)
    {
      case 0u:
        BOOL v9 = pairing_utilities_log();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_100072100();
        }
        goto LABEL_8;
      case 1u:
        goto LABEL_13;
      case 2u:
        uint64_t v8 = 2;
        break;
      case 3u:
        break;
      default:
        uint64_t v10 = pairing_utilities_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_100072088(v8, v10);
        }

LABEL_13:
        uint64_t v8 = 1;
        break;
    }
  }
  else
  {
    if ((os_variant_is_darwinos() & 1) == 0)
    {
      BOOL v9 = pairing_utilities_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)) {
        sub_100072048();
      }
LABEL_8:
    }
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_1000177AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.dt.remotepairing", "pairingutilities");
  BOOL v2 = (void *)qword_100097960;
  qword_100097960 = (uint64_t)v1;
}

uint64_t lockdown_wifi_pairing_enabled()
{
  uint64_t v0 = lockdown_connect();
  if (v0)
  {
    CFBooleanRef v1 = (CFBooleanRef)lockdown_copy_value();
    lockdown_disconnect();
    if (v1)
    {
      uint64_t v0 = v1 == kCFBooleanTrue;
      CFRelease(v1);
    }
    else
    {
      return 0;
    }
  }
  return v0;
}

void sub_100017A7C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (a3 && [*(id *)(a1 + 32) active])
  {
    [*(id *)(a1 + 32) setBrowser:0];
    if (([*(id *)(a1 + 32) startOnQueue:*(void *)(a1 + 40)] & 1) == 0)
    {
      uint64_t v6 = [*(id *)(a1 + 32) log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1000721DC();
      }
    }
  }
  else
  {
    remote_device_set_disconnected_callback();
  }
}

id sub_100017B6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) dispatchDisconnectListeners];
}

void sub_100017C48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100017D74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100017F4C(0, (unint64_t *)&unk_1000949F0);
  static NSError.setRemotePairingNormalizationProviders()();
  sub_100017F4C(0, (unint64_t *)&qword_100096990);
  qword_1000986F0 = OS_os_log.init(subsystem:category:)();
  type metadata accessor for RemotePairingDeviceService();
  swift_allocObject();
  sub_10003BA70();
  qword_1000986F8 = v3;
  sub_10003BC84();
  CFRunLoopRun();
  return 0;
}

uint64_t sub_100017F4C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for CFUserNotification(uint64_t a1)
{
}

uint64_t sub_100017F9C()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100017FE8()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100018040()
{
  return Hasher._finalize()();
}

BOOL sub_1000180A8(int *a1, int *a2)
{
  return sub_10004ECA0(*a1, *a2);
}

uint64_t sub_1000180B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100047A74();
  *a1 = result;
  return result;
}

uint64_t sub_1000180DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100047A7C(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_10001810C(void *a1, uint64_t *a2)
{
  return sub_100047A84(a1, *a2);
}

uint64_t sub_100018114(uint64_t *a1)
{
  return sub_100047AB0(*a1);
}

uint64_t sub_10001811C(uint64_t *a1)
{
  return sub_100047AC0(*a1);
}

uint64_t sub_100018124()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

BOOL sub_100018188(uint64_t *a1, uint64_t *a2)
{
  return sub_100018340(*a1, *a2);
}

void *sub_100018194@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000181A0(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_1000181AC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1000181BC(void *a1@<X8>)
{
  *a1 = *v1;
}

void type metadata accessor for RPUSBConnectedHostTrustState(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for Tunnel.MutableState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_100018214(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100018220(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100018240(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for remote_device_type_t(uint64_t a1)
{
}

uint64_t sub_100018294()
{
  return sub_1000182FC(&qword_100094CD0);
}

uint64_t sub_1000182C8()
{
  return sub_1000182FC(&qword_100094CD8);
}

uint64_t sub_1000182FC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_100018340(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_100018354()
{
  os_log_type_t v0 = static os_log_type_t.default.getter();
  CFBooleanRef v1 = qword_1000986F0;
  os_log_type_t v2 = v0;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000986F0, v0);
  if (result)
  {
    swift_retain();
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v4 = 134217984;
    swift_beginAccess();
    uint64_t v5 = swift_bridgeObjectRetain();
    sub_100012750(v5);
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Lockdown Peers updated. Total count: %ld", v4, 0xCu);
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_100018468()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000184A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ControlChannelConnection.Options();
  sub_100013814();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100012078();
  uint64_t v10 = v9 - v8;
  type metadata accessor for ControlChannelConnection.Options.Device();
  sub_100013814();
  __chkstk_darwin(v11);
  sub_100012078();
  uint64_t v16 = v15 - v14;
  if (*(unsigned char *)(v2 + 72))
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    return lockdown_disconnect();
  }
  else
  {
    uint64_t v26 = v16;
    uint64_t v27 = v12;
    uint64_t v28 = v13;
    ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)();
    lockdown_connection_is_usb();
    lockdown_get_socket();
    *(void *)(sub_100010E68() + 16) = a1;
    *(void *)(sub_100010E68() + 16) = a1;
    *(void *)(sub_100010E68() + 16) = a1;
    *(void *)(sub_100010E68() + 16) = a1;
    type metadata accessor for SecureSocketDataTransport();
    swift_allocObject();
    SecureSocketDataTransport.init(physicallyConnected:underlyingConnectionSocket:bufferedReceiveSizeHandler:syncReceiveHandler:syncSendHandler:cleanupConnectionHandler:)();
    uint64_t v18 = *(void **)(v2 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v10, v26, v27);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v10, enum case for ControlChannelConnection.Options.device(_:), v4);
    type metadata accessor for SystemKeychainPairingManager();
    sub_100011EC8(&qword_100094F88, (void (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager);
    type metadata accessor for ControlChannelConnection();
    swift_retain();
    id v19 = v18;
    swift_retain();
    static ControlChannelConnection.defaultMaxReconnectionAttempts.getter();
    swift_allocObject();
    ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)();
    swift_beginAccess();
    swift_retain();
    sub_10001101C();
    swift_endAccess();
    swift_release();
    sub_100018354();
    uint64_t v20 = sub_100010E68();
    swift_weakInit();
    uint64_t v21 = sub_100010E68();
    swift_weakInit();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v20;
    *(void *)(v22 + 24) = v21;
    swift_retain();
    swift_retain();
    dispatch thunk of ControlChannelConnection.invalidationHandler.setter();
    swift_release();
    swift_release();
    uint64_t v23 = sub_100010E68();
    swift_weakInit();
    uint64_t v24 = sub_100010E68();
    swift_weakInit();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = v23;
    swift_retain();
    swift_retain();
    dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter();
    swift_release();
    swift_release();
    dispatch thunk of ControlChannelConnection.requireUserConsentForPairing.setter();
    sub_100016C68((void *)(v2 + 32), *(void *)(v2 + 56));
    swift_retain();
    sub_100054DF4();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  }
}

uint64_t sub_1000189E4()
{
  if (lockdown_get_buffered_read_size()) {
    return 0;
  }
  else {
    return -1;
  }
}

uint64_t sub_100018A44()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_beginAccess();
      sub_100011CF4();
      swift_endAccess();
      swift_release();
      sub_100018354();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100018B10()
{
  uint64_t v0 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v5 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      if (v5)
      {
        uint64_t v6 = (void *)v5;
        sub_10005FB60();
        if ((v7 & 1) == 0)
        {
          (*(void (**)(unsigned char *, void, uint64_t))(v1 + 104))(v3, enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:), v0);
          dispatch thunk of ControlChannelConnection.invalidate(for:)();

          swift_release();
          swift_release();
          return (*(uint64_t (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
        }
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100018CB0()
{
  return dispatch thunk of ControlChannelConnection.start()();
}

void sub_100018CD4()
{
  static RemoteServiceNames.lockdownService.getter();
  v2[4] = sub_100019C5C;
  uint64_t v3 = v0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 1107296256;
  v2[2] = sub_10005A794;
  v2[3] = &unk_10008ADA8;
  uint64_t v1 = _Block_copy(v2);
  swift_retain();
  swift_release();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  lockdown_checkin_xpc();
  swift_release();
  _Block_release(v1);
}

uint64_t sub_100018DCC(uint64_t result)
{
  if (result) {
    return sub_1000184A0(result);
  }
  return result;
}

uint64_t sub_100018DF8()
{
  uint64_t v1 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  sub_100013814();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100012078();
  uint64_t v7 = v6 - v5;
  if (*(unsigned char *)(v0 + 72))
  {
    static os_log_type_t.error.getter();
    return os_log(_:dso:log:_:_:)();
  }
  *(unsigned char *)(v0 + 72) = 1;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v0 + 16);
  if ((v9 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ControlChannelConnection();
    sub_100011EC8(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v9 = v28;
    uint64_t v25 = v29;
    uint64_t v10 = v30;
    int64_t v11 = v31;
    unint64_t v12 = v32;
  }
  else
  {
    uint64_t v25 = v9 + 56;
    uint64_t v10 = ~(-1 << *(unsigned char *)(v9 + 32));
    sub_100010E80();
    unint64_t v12 = v13 & v14;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v11 = 0;
  }
  int64_t v24 = (unint64_t)(v10 + 64) >> 6;
  unsigned int v26 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
  uint64_t v15 = (void (**)(uint64_t, void, uint64_t))(v3 + 104);
  uint64_t v16 = (uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  if (v9 < 0) {
    goto LABEL_9;
  }
  while (1)
  {
    if (v12)
    {
      uint64_t v17 = (v12 - 1) & v12;
      unint64_t v18 = __clz(__rbit64(v12)) | (v11 << 6);
      int64_t v19 = v11;
      goto LABEL_26;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v20 >= v24) {
      return sub_100019C54();
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    int64_t v19 = v11 + 1;
    if (!v21)
    {
      int64_t v19 = v11 + 2;
      if (v11 + 2 >= v24) {
        return sub_100019C54();
      }
      unint64_t v21 = *(void *)(v25 + 8 * v19);
      if (!v21)
      {
        int64_t v19 = v11 + 3;
        if (v11 + 3 >= v24) {
          return sub_100019C54();
        }
        unint64_t v21 = *(void *)(v25 + 8 * v19);
        if (!v21)
        {
          int64_t v19 = v11 + 4;
          if (v11 + 4 >= v24) {
            return sub_100019C54();
          }
          unint64_t v21 = *(void *)(v25 + 8 * v19);
          if (!v21)
          {
            int64_t v22 = v11 + 5;
            while (v22 < v24)
            {
              unint64_t v21 = *(void *)(v25 + 8 * v22++);
              if (v21)
              {
                int64_t v19 = v22 - 1;
                goto LABEL_25;
              }
            }
            return sub_100019C54();
          }
        }
      }
    }
LABEL_25:
    uint64_t v17 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v19 << 6);
LABEL_26:
    uint64_t v23 = *(void *)(*(void *)(v9 + 48) + 8 * v18);
    swift_retain();
    if (!v23) {
      return sub_100019C54();
    }
    while (1)
    {
      (*v15)(v7, v26, v1);
      dispatch thunk of ControlChannelConnection.invalidate(for:)();
      swift_release();
      uint64_t result = (*v16)(v7, v1);
      int64_t v11 = v19;
      unint64_t v12 = v17;
      if ((v9 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_9:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ControlChannelConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        int64_t v19 = v11;
        uint64_t v17 = v12;
        if (v27) {
          continue;
        }
      }
      return sub_100019C54();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100019194(NSObject *a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if ((v3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ControlChannelConnection();
    sub_100011EC8(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v24[4];
    uint64_t v23 = v24[5];
    uint64_t v5 = v24[6];
    uint64_t v6 = v24[7];
    unint64_t v7 = v24[8];
  }
  else
  {
    uint64_t v23 = v3 + 56;
    uint64_t v5 = ~(-1 << *(unsigned char *)(v3 + 32));
    sub_100010E80();
    unint64_t v7 = v8 & v9;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  int64_t v22 = (unint64_t)(v5 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_7;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v10 = (v7 - 1) & v7;
      unint64_t v11 = __clz(__rbit64(v7)) | (v6 << 6);
      uint64_t v12 = v6;
      goto LABEL_24;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v14 >= v22) {
      return sub_100019C54();
    }
    unint64_t v15 = *(void *)(v23 + 8 * v14);
    uint64_t v12 = v6 + 1;
    if (!v15)
    {
      uint64_t v12 = v6 + 2;
      if (v6 + 2 >= v22) {
        return sub_100019C54();
      }
      unint64_t v15 = *(void *)(v23 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v6 + 3;
        if (v6 + 3 >= v22) {
          return sub_100019C54();
        }
        unint64_t v15 = *(void *)(v23 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v6 + 4;
          if (v6 + 4 >= v22) {
            return sub_100019C54();
          }
          unint64_t v15 = *(void *)(v23 + 8 * v12);
          if (!v15)
          {
            int64_t v16 = v6 + 5;
            while (v16 < v22)
            {
              unint64_t v15 = *(void *)(v23 + 8 * v16++);
              if (v15)
              {
                uint64_t v12 = v16 - 1;
                goto LABEL_23;
              }
            }
            return sub_100019C54();
          }
        }
      }
    }
LABEL_23:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v3 + 48) + 8 * v11);
    swift_retain();
    if (!v17) {
      return sub_100019C54();
    }
    while (1)
    {
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(a1, v18))
      {
        swift_retain_n();
        uint64_t v19 = swift_slowAlloc();
        v24[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136446210;
        type metadata accessor for ControlChannelConnection();
        swift_retain();
        uint64_t v20 = String.init<A>(describing:)();
        *(void *)(v19 + 4) = sub_100010478(v20, v21, v24);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, a1, v18, "State dump: LockdownService control channel connection: %{public}s", (uint8_t *)v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      uint64_t result = swift_release();
      uint64_t v6 = v12;
      unint64_t v7 = v10;
      if ((v3 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_7:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ControlChannelConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v13 = v24[0];
        swift_unknownObjectRelease();
        uint64_t v12 = v6;
        uint64_t v10 = v7;
        if (v13) {
          continue;
        }
      }
      return sub_100019C54();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100019564()
{
  swift_bridgeObjectRelease();

  sub_100010548(v0 + 32);
  swift_release();
  return v0;
}

uint64_t sub_10001959C()
{
  sub_100019564();

  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for LockdownService()
{
  return self;
}

uint64_t sub_1000195F4()
{
  return sub_100018468();
}

void sub_100019618()
{
}

uint64_t sub_10001963C()
{
  return sub_100018DF8();
}

uint64_t sub_100019660(NSObject *a1)
{
  return sub_100019194(a1);
}

void *sub_100019684(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    sub_100056AD0((uint64_t)&_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v6 = &_swiftEmptySetSingleton;
  }
  v3[4] = a1;
  v3[5] = v6;
  v3[2] = a2;
  type metadata accessor for SystemXPCListenerConnection();
  swift_retain();
  id v7 = a2;
  static RemoteServiceNames.lockdownService.getter();
  id v8 = v7;
  static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)();
  swift_bridgeObjectRelease();
  swift_release();

  v3[3] = swift_dynamicCastClassUnconditional();
  return v3;
}

uint64_t sub_100019784()
{
  return dispatch thunk of XPCConnection.activate()();
}

uint64_t sub_1000197C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCError();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v25 - v8;
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)v25 - v10;
  uint64_t v12 = sub_1000153C0(&qword_100094F80);
  __chkstk_darwin(v12);
  int64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019BEC(a1, (uint64_t)v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v14, v2);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    int64_t v16 = qword_1000986F0;
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v17(v9, v11, v2);
    os_log_type_t v18 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v29 = v27;
      os_log_t v26 = v16;
      *(_DWORD *)uint64_t v19 = 136315138;
      v25[1] = v19 + 4;
      v17(v6, v9, v2);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v28 = sub_100010478(v20, v21, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
      v22(v9, v2);
      _os_log_impl((void *)&_mh_execute_header, v26, v18, "Failed to start dummy lockdown service with error: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      return ((uint64_t (*)(char *, uint64_t))v22)(v11, v2);
    }
    else
    {
      int64_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
      v24(v9, v2);
      return ((uint64_t (*)(char *, uint64_t))v24)(v11, v2);
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    swift_retain();
    dispatch thunk of XPCConnection.cancel()();
    return swift_release_n();
  }
}

uint64_t sub_100019B2C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100019B64()
{
  sub_100019B2C();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for DummyLockdownService()
{
  return self;
}

uint64_t sub_100019BBC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100019BC8()
{
  return sub_100019784();
}

uint64_t sub_100019BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0(&qword_100094F80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019C54()
{
  return swift_release();
}

uint64_t sub_100019C5C(uint64_t result)
{
  return sub_100018DCC(result);
}

uint64_t sub_100019C68()
{
  return sub_1000189E4();
}

uint64_t sub_100019C74()
{
  return lockdown_recv();
}

uint64_t sub_100019C88()
{
  return lockdown_send();
}

uint64_t sub_100019C9C()
{
  return lockdown_disconnect();
}

uint64_t sub_100019CA4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100019CE0()
{
  return sub_100018A44();
}

uint64_t sub_100019CEC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100019D2C()
{
  return sub_100018B10();
}

uint64_t sub_100019D38()
{
  return sub_10001B798() & 1;
}

void sub_100019D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100015CAC();
  a19 = v22;
  a20 = v23;
  sub_1000112BC(v24, v25, v26);
  sub_1000153C0(&qword_1000950E8);
  sub_100016D80();
  __chkstk_darwin(v27);
  uint64_t v28 = sub_1000138D8();
  sub_100013814();
  uint64_t v30 = v29;
  __chkstk_darwin(v31);
  sub_100016030();
  __chkstk_darwin(v32);
  uint64_t v33 = sub_1000159F4();
  v34(v33);
  uint64_t v35 = sub_10001C6D4();
  v36(v35);
  swift_retain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  XPCDictionary.auditToken.getter();
  XPCDictionary.entitlements.getter();
  sub_100015AF4();
  sub_10001ABC0();
  uint64_t v37 = (void (**)(void))(v30 - 24);
  if (v20)
  {
    uint64_t v38 = *v37;
    sub_100015900();
    v38();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (sub_10001C6F0(v39))
    {
      swift_errorRetain();
      swift_errorRetain();
      sub_100014750();
      a10 = sub_1000163FC();
      *(_DWORD *)uint64_t v38 = 136315138;
      sub_1000156E8();
      sub_1000153C0(&qword_100095A00);
      uint64_t v40 = String.init<A>(describing:)();
      uint64_t v42 = sub_100010478(v40, v41, &a10);
      sub_10001340C(v42);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_1000139CC((void *)&_mh_execute_header, v43, v44, "Pairing deletion failed with error: %s");
      sub_100015EC4();
      sub_1000120B0();
      uint64_t v38 = v46;
      sub_1000120B0();
    }
    swift_willThrow();
    swift_release();
    sub_100015900();
    v38();
  }
  else
  {
    swift_release();
    uint64_t v45 = *v37;
    sub_100015900();
    v45();
    ((void (*)(uint64_t, uint64_t))v45)(v21, v28);
  }
  sub_100016500();
  sub_100012088();
}

void sub_100019FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100015CAC();
  a19 = v22;
  a20 = v23;
  uint64_t v51 = v24;
  uint64_t v26 = v25;
  sub_1000153C0(&qword_1000950E8);
  sub_100016D80();
  __chkstk_darwin(v27);
  sub_100012078();
  uint64_t v30 = v29 - v28;
  uint64_t v31 = type metadata accessor for XPCDictionary();
  sub_100013814();
  uint64_t v33 = v32;
  __chkstk_darwin(v34);
  sub_100013BD8();
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v49 - v36;
  uint64_t v38 = v30 + *(int *)(v21 + 56);
  uint64_t v39 = *v26;
  sub_1000120A0();
  v40();
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v37, v38, v31);
  swift_retain();
  static os_log_type_t.debug.getter();
  os_log(_:dso:log:_:_:)();
  XPCDictionary.auditToken.getter();
  XPCDictionary.entitlements.getter();
  sub_10001ACAC();
  uint64_t v41 = (void (**)(void))(v33 + 8);
  if (v20)
  {
    uint64_t v52 = v39;
    uint64_t v42 = *v41;
    sub_100015F60();
    v42();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (sub_10001C6F0(v43))
    {
      swift_errorRetain();
      swift_errorRetain();
      sub_100014750();
      uint64_t v50 = sub_1000163FC();
      a10 = v50;
      *(_DWORD *)uint64_t v42 = 136315138;
      sub_1000156E8();
      sub_1000153C0(&qword_100095A00);
      uint64_t v44 = String.init<A>(describing:)();
      uint64_t v53 = sub_100010478(v44, v45, &a10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_1000139CC((void *)&_mh_execute_header, v46, v47, "Listing paired hosts failed with error: %s");
      swift_arrayDestroy();
      sub_1000120B0();
      uint64_t v42 = v51;
      sub_1000120B0();
    }
    swift_willThrow();
    swift_release();
    sub_100015F60();
    v42();
  }
  else
  {
    swift_release();
    uint64_t v48 = *v41;
    sub_100015F60();
    v48();
    ((void (*)(char *, uint64_t))v48)(v37, v31);
  }
  sub_100016500();
  sub_100012088();
}

void sub_10001A264()
{
  sub_100015CAC();
  uint64_t v0 = sub_1000153C0(&qword_1000950E8);
  __chkstk_darwin(v0);
  sub_100016E84();
  sub_100013814();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_100013BD8();
  __chkstk_darwin(v4);
  sub_1000120A0();
  v6(v5);
  sub_10000D264();
  v8(v7);
  swift_retain();
  static os_log_type_t.debug.getter();
  os_log(_:dso:log:_:_:)();
  XPCDictionary.auditToken.getter();
  XPCDictionary.entitlements.getter();
  sub_10001AD84();
  swift_release();
  uint64_t v9 = *(void (**)(uint64_t))(v2 + 8);
  sub_100015F60();
  v9(v10);
  sub_100015F60();
  v9(v11);
  sub_100016500();
  sub_100012088();
}

void sub_10001A404()
{
  sub_100015CAC();
  uint64_t v0 = sub_1000153C0(&qword_1000950E8);
  __chkstk_darwin(v0);
  sub_100016E84();
  sub_100013814();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_100010E94();
  __chkstk_darwin(v4);
  sub_1000120A0();
  v5();
  sub_10000D264();
  v6();
  XPCDictionary.entitlements.getter();
  sub_10001AD04();
  uint64_t v7 = *(void (**)(void))(v2 + 8);
  sub_100016340();
  v7();
  sub_100016340();
  v7();
  sub_100016500();
  sub_100012088();
}

void sub_10001A54C()
{
  sub_100015CAC();
  uint64_t v12 = v1;
  uint64_t v2 = sub_1000153C0(&qword_1000950E8);
  __chkstk_darwin(v2);
  sub_100013900();
  type metadata accessor for XPCDictionary();
  sub_100013814();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100010E94();
  __chkstk_darwin(v6);
  static os_log_type_t.debug.getter();
  os_log(_:dso:log:_:_:)();
  sub_1000120A0();
  v7();
  sub_10000D264();
  v8();
  XPCDictionary.entitlements.getter();
  sub_10001AA48();
  if (v0)
  {
    uint64_t v9 = *(void (**)(void))(v4 + 8);
    sub_100016340();
    v9();
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    swift_willThrow();
    sub_100016340();
    v9();
  }
  else
  {
    uint64_t v10 = sub_10003FB14();
    uint64_t v11 = *(void (**)(void))(v4 + 8);
    sub_100016340();
    v11();
    sub_100016340();
    v11();
    uint64_t *v12 = v10;
  }
  sub_100012088();
}

void sub_10001A73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100015CAC();
  a19 = v22;
  a20 = v23;
  sub_1000112BC(v24, v25, v26);
  sub_1000153C0(&qword_1000950E8);
  sub_100016D80();
  __chkstk_darwin(v27);
  uint64_t v28 = sub_1000138D8();
  sub_100013814();
  uint64_t v30 = v29;
  __chkstk_darwin(v31);
  sub_100016030();
  __chkstk_darwin(v32);
  uint64_t v33 = sub_1000159F4();
  v34(v33);
  uint64_t v35 = sub_10001C6D4();
  v36(v35);
  swift_retain();
  static os_log_type_t.debug.getter();
  os_log(_:dso:log:_:_:)();
  XPCDictionary.auditToken.getter();
  XPCDictionary.entitlements.getter();
  sub_100015AF4();
  sub_10001C188();
  uint64_t v37 = (void (**)(void))(v30 - 24);
  if (v20)
  {
    uint64_t v38 = *v37;
    sub_100015900();
    v38();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (sub_10001C6F0(v39))
    {
      swift_errorRetain();
      swift_errorRetain();
      sub_100014750();
      a10 = sub_1000163FC();
      *(_DWORD *)uint64_t v38 = 136315138;
      sub_1000156E8();
      sub_1000153C0(&qword_100095A00);
      uint64_t v40 = String.init<A>(describing:)();
      uint64_t v42 = sub_100010478(v40, v41, &a10);
      sub_10001340C(v42);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_1000139CC((void *)&_mh_execute_header, v43, v44, "Allowing promptless pairing failed with error: %s");
      sub_100015EC4();
      sub_1000120B0();
      uint64_t v38 = v46;
      sub_1000120B0();
    }
    swift_willThrow();
    swift_release();
    sub_100015900();
    v38();
  }
  else
  {
    swift_release();
    uint64_t v45 = *v37;
    sub_100015900();
    v45();
    ((void (*)(uint64_t, uint64_t))v45)(v21, v28);
  }
  sub_100016500();
  sub_100012088();
}

uint64_t sub_10001A97C()
{
  dispatch thunk of XPCConnection.activate()();
  sub_100016C68((void *)(v0 + 56), *(void *)(v0 + 80));
  swift_retain();
  sub_100054F14();
  static os_log_type_t.debug.getter();
  os_log(_:dso:log:_:_:)();

  return sub_10001BBDC();
}

uint64_t sub_10001AA24()
{
  return sub_10001BB4C();
}

uint64_t sub_10001AA48()
{
  uint64_t v0 = type metadata accessor for RemotePairingError();
  __chkstk_darwin(v0);
  uint64_t result = XPCDictionary.subscript.getter();
  if ((result & 1) == 0)
  {
    uint64_t result = _RPIsAppleInternal();
    if ((result & 1) == 0)
    {
      sub_10001C684((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      static Error<>.permissionDenied.getter();
      sub_10001C684((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      swift_allocError();
      Error<>.init(_:_:)();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_10001ABC0()
{
  type metadata accessor for HostDeletionTarget();
  sub_100013814();
  __chkstk_darwin(v1);
  sub_100012078();
  uint64_t result = sub_10001AA48();
  if (!v0)
  {
    DeletePairedHostRecordRequest.target.getter();
    sub_10003E16C();
    uint64_t v3 = sub_1000169D4();
    v4(v3);
    return EmptyResponse.init()();
  }
  return result;
}

uint64_t sub_10001ACAC()
{
  uint64_t result = sub_10001AA48();
  if (!v0)
  {
    sub_10003EAC8();
    return ListPairedHostRecordResponse.init(hosts:)();
  }
  return result;
}

uint64_t sub_10001AD04()
{
  uint64_t result = sub_10001AA48();
  if (!v0)
  {
    sub_10003ACCC();
    sub_100057F0C();
    swift_release();
    return FetchNetworkPairingSessionIDResponse.init(networkPairingSessionID:)();
  }
  return result;
}

void sub_10001AD84()
{
  sub_100015CAC();
  uint64_t v2 = type metadata accessor for PinNotificationEvent();
  sub_100013814();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100012078();
  uint64_t v8 = v7 - v6;
  sub_10001AA48();
  if (!v1)
  {
    type metadata accessor for SystemXPCPeerConnection();
    WirelessPairingSession = (_xpc_endpoint_s *)CreateWirelessPairingSessionRequest.endpoint.getter();
    xpc_connection_create_from_endpoint(WirelessPairingSession);
    swift_unknownObjectRelease();
    static SystemXPCConnection.unsafePeer(from:)();
    swift_unknownObjectRelease();
    uint64_t v10 = swift_dynamicCastClassUnconditional();
    dispatch thunk of XPCConnection.setTargetQueue(_:)();
    swift_retain();
    char v11 = CreateWirelessPairingSessionRequest.requestCustomPinHandler.getter();
    swift_beginAccess();
    sub_10006684C(v11 & 1, v10);
    swift_endAccess();
    swift_release();
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = v0;
    swift_retain();
    swift_retain();
    dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)();
    swift_release();
    swift_release();
    dispatch thunk of XPCConnection.activate()();
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v8, enum case for PinNotificationEvent.empty(_:), v2);
    sub_10001C684(&qword_1000950F8, (void (*)(uint64_t))&type metadata accessor for PinNotificationEvent);
    sub_10001C684((unint64_t *)&unk_100095100, (void (*)(uint64_t))&type metadata accessor for PinNotificationEvent);
    XPCConnection.send<A>(value:)();
    uint64_t v14 = sub_100015910();
    v15(v14);
    sub_10001BB4C();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    uint64_t v17 = qword_1000986F0;
    os_log_type_t v18 = v16;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v16))
    {
      swift_retain_n();
      uint64_t v19 = (uint8_t *)sub_100014750();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_retain();
      uint64_t v20 = String.init<A>(describing:)();
      sub_100010478(v20, v21, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Configured wireless pairing session for %s", v19, 0xCu);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
    EmptyResponse.init()();
    swift_release();
  }
  sub_100012088();
}

uint64_t sub_10001B160(uint64_t a1, uint64_t a2, uint8_t *a3)
{
  uint64_t v48 = a3;
  os_log_t v50 = (os_log_t)type metadata accessor for XPCError();
  Class isa = v50[-1].isa;
  uint64_t v4 = __chkstk_darwin(v50);
  uint64_t v46 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v44 - v7;
  __chkstk_darwin(v6);
  uint64_t v49 = (char *)&v44 - v9;
  uint64_t v10 = type metadata accessor for XPCDictionary();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v44 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v20 = sub_1000153C0(&qword_100095A80);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10001C61C(a1, (uint64_t)v22);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      Class v24 = isa;
      uint64_t v26 = v49;
      os_log_t v25 = v50;
      (*((void (**)(char *, char *, os_log_t))isa + 4))(v49, v22, v50);
      os_log_type_t v27 = static os_log_type_t.error.getter();
      uint64_t v28 = qword_1000986F0;
      uint64_t v29 = (void (*)(char *, char *, os_log_t))*((void *)v24 + 2);
      v29(v8, v26, v25);
      os_log_type_t v30 = v27;
      if (os_log_type_enabled(v28, v27))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        v52[0] = v45;
        *(_DWORD *)uint64_t v31 = 136315138;
        uint64_t v44 = v31 + 4;
        v29(v46, v8, v50);
        uint64_t v32 = String.init<A>(describing:)();
        uint64_t v51 = sub_100010478(v32, v33, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v34 = (void (*)(char *, os_log_t))*((void *)v24 + 1);
        v34(v8, v50);
        _os_log_impl((void *)&_mh_execute_header, v28, v30, "Received error from wireless pairing session peer: %s", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        os_log_t v25 = v50;
        swift_slowDealloc();
      }
      else
      {
        uint64_t v34 = (void (*)(char *, os_log_t))*((void *)v24 + 1);
        v34(v8, v25);
      }
      swift_beginAccess();
      uint64_t v42 = swift_retain();
      sub_100065EB8(v42);
      swift_endAccess();
      swift_release();
      sub_10001BB4C();
      swift_release();
      return ((uint64_t (*)(char *, os_log_t))v34)(v49, v25);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v22, v10);
      os_log_type_t v35 = static os_log_type_t.error.getter();
      uint64_t v36 = qword_1000986F0;
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
      v37(v17, v19, v10);
      os_log_t v50 = v36;
      if (os_log_type_enabled(v36, v35))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = (char *)swift_slowAlloc();
        v52[0] = (uint64_t)v49;
        Class isa = (Class)v11;
        uint64_t v48 = v38;
        *(_DWORD *)uint64_t v38 = 136315138;
        v37(v14, v17, v10);
        uint64_t v39 = String.init<A>(describing:)();
        uint64_t v51 = sub_100010478(v39, v40, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v41 = (void (*)(char *, uint64_t))*((void *)isa + 1);
        v41(v17, v10);
        _os_log_impl((void *)&_mh_execute_header, v50, v35, "Received unexpected message from wireless pairing session peer: %s", v48, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
        return ((uint64_t (*)(char *, uint64_t))v41)(v19, v10);
      }
      else
      {
        uint64_t v43 = *(void (**)(char *, uint64_t))(v11 + 8);
        v43(v17, v10);
        swift_release();
        return ((uint64_t (*)(char *, uint64_t))v43)(v19, v10);
      }
    }
  }
  return result;
}

uint64_t sub_10001B798()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = v1 + 64;
  char v14 = 1;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_17:
    if (*(unsigned char *)(*(void *)(v1 + 56) + v10))
    {
      int64_t v15 = v8;
      swift_retain();
      static os_log_type_t.debug.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for PinNotificationEvent();
      sub_10001C684(&qword_1000950F8, (void (*)(uint64_t))&type metadata accessor for PinNotificationEvent);
      sub_10001C684((unint64_t *)&unk_100095100, (void (*)(uint64_t))&type metadata accessor for PinNotificationEvent);
      XPCConnection.send<A>(value:)();
      uint64_t result = swift_release();
      int64_t v8 = v15;
    }
    else
    {
      char v14 = 0;
    }
  }
  if (__OFADD__(v8++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v8 >= v6) {
    goto LABEL_24;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_16:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_17;
  }
  int64_t v13 = v8 + 1;
  if (v8 + 1 >= v6) {
    goto LABEL_24;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v8 + 2;
  if (v8 + 2 >= v6) {
    goto LABEL_24;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v8 + 3;
  if (v8 + 3 >= v6)
  {
LABEL_24:
    swift_release();
    return v14 & 1;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
LABEL_15:
    int64_t v8 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10001BB4C()
{
  OS_dispatch_queue.assertOnQueueHierarchy()();
  if ((static Defaults.networkPairingEnabled.getter() & 1) != 0
    || (swift_beginAccess(), *(void *)(*(void *)(v0 + 32) + 16))
    || *(unsigned char *)(v0 + 96) == 1)
  {
    char v1 = *(unsigned char *)(*sub_100016C68((void *)(v0 + 56), *(void *)(v0 + 80))
                  + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted);
  }
  else
  {
    char v1 = 0;
  }
  return sub_10003FD80(v1);
}

uint64_t sub_10001BBDC()
{
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008AF90;
  char v1 = _Block_copy(aBlock);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  sub_100013814();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100013900();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  sub_100013814();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = &_swiftEmptyArrayStorage;
  sub_10001C478();
  sub_1000153C0(&qword_1000950F0);
  sub_10001C4BC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v1);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  return swift_release();
}

uint64_t sub_10001BDC8(uint64_t a1)
{
  if (sub_10000E644()) {
    char v2 = lockdown_wifi_pairing_enabled();
  }
  else {
    char v2 = 0;
  }
  v14[2] = *(void *)(a1 + 40);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  *(unsigned char *)(v3 + 24) = v2;
  void aBlock[4] = sub_10001C590;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008AFE0;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  v14[1] = v14;
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[3] = &_swiftEmptyArrayStorage;
  sub_10001C478();
  sub_1000153C0(&qword_1000950F0);
  sub_10001C4BC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_10001C068(uint64_t result, char a2)
{
  if (*(unsigned char *)(result + 96) != (a2 & 1))
  {
    uint64_t v3 = result;
    os_log_type_t v4 = static os_log_type_t.default.getter();
    uint64_t v5 = qword_1000986F0;
    os_log_type_t v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v4))
    {
      swift_retain();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 67109376;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v7 + 8) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "lockdown_wifi_pairing_enabled value changed: %{BOOL}d -> %{BOOL}d", (uint8_t *)v7, 0xEu);
      swift_slowDealloc();
    }
    *(unsigned char *)(v3 + 96) = a2 & 1;
    return sub_10001BB4C();
  }
  return result;
}

uint64_t sub_10001C188()
{
  uint64_t result = sub_10001AA48();
  if (!v0)
  {
    AllowPromptlessPairingWithHostRequest.pairingShouldBeMarkedForAutomation.getter();
    AllowPromptlessPairingWithHostRequest.associatedHostBUID.getter();
    sub_10003A7C4();
    sub_100038AD4();
    swift_bridgeObjectRelease();
    swift_release();
    return EmptyResponse.init()();
  }
  return result;
}

uint64_t sub_10001C228()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  sub_100010548(v0 + 56);

  return v0;
}

uint64_t sub_10001C270()
{
  sub_10001C228();

  return _swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for PairingManagementService()
{
  return self;
}

unsigned char *initializeBufferWithCopyOfBuffer for SystemKeychainPairingManager.PeersChangedEvent(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WirelessPairingOptions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for WirelessPairingOptions(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001C438);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WirelessPairingOptions()
{
  return &type metadata for WirelessPairingOptions;
}

uint64_t sub_10001C470()
{
  return sub_10001BDC8(v0);
}

unint64_t sub_10001C478()
{
  unint64_t result = qword_1000953B0;
  if (!qword_1000953B0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000953B0);
  }
  return result;
}

unint64_t sub_10001C4BC()
{
  unint64_t result = qword_1000953C0;
  if (!qword_1000953C0)
  {
    sub_10001C510(&qword_1000950F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000953C0);
  }
  return result;
}

uint64_t sub_10001C510(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001C558()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10001C590()
{
  return sub_10001C068(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10001C59C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001C5D4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001C614(uint64_t a1)
{
  return sub_10001B160(a1, *(void *)(v1 + 16), *(uint8_t **)(v1 + 24));
}

uint64_t sub_10001C61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0(&qword_100095A80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001C684(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001C6D4()
{
  return v0;
}

BOOL sub_10001C6F0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_10001C70C()
{
}

uint64_t sub_10001C714()
{
  return 0x10000;
}

uint64_t sub_10001C724(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  *(_OWORD *)(v2 + 16) = xmmword_100075A70;
  *(void *)(v2 + 32) = static IPv6Header.minHeaderLength.getter();
  *(void *)(v2 + 40) = 0x80000;
  type metadata accessor for TunnelConnectionIdentifierCategory();
  Identifier.init()();
  uint64_t v6 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests) = &_swiftEmptyArrayStorage;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData) = xmmword_100075A80;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests) = &_swiftEmptyArrayStorage;
  *(void *)(v2 + v6) = a1;
  *(_DWORD *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__underlyingConnectionSocket) = lockdown_get_socket();
  uint64_t v7 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue) = a2;
  sub_100020CB0();
  id v38 = a2;
  uint64_t v8 = static OS_dispatch_source.makeReadSource(fileDescriptor:queue:)();
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource) = v8;
  uint64_t v9 = v8;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  id v10 = *(id *)(v2 + v7);
  uint64_t v11 = static OS_dispatch_source.makeWriteSource(fileDescriptor:queue:)();

  uint64_t v46 = v11;
  *(void *)(v2 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource) = v11;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v12 = v9;
  swift_getObjectType();
  uint64_t v54 = sub_100020CF0;
  uint64_t v55 = v3;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v42 = &v52;
  uint64_t v52 = sub_10000CF80;
  uint64_t v53 = &unk_10008B160;
  int64_t v13 = _Block_copy(&aBlock);
  uint64_t v49 = type metadata accessor for DispatchQoS();
  sub_100013830();
  uint64_t v15 = v14;
  uint64_t v40 = *(void *)(v16 + 64);
  __chkstk_darwin(v17);
  unint64_t v41 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v47 = v19;
  sub_100013830();
  uint64_t v21 = v20;
  uint64_t v44 = *(void *)(v22 + 64);
  __chkstk_darwin(v23);
  unint64_t v45 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  os_log_t v25 = (char *)v37 - v45;
  sub_10001CDE4();
  v37[2] = v12;
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v13);
  uint64_t v43 = *(void (**)(void))(v21 + 8);
  uint64_t v48 = v21 + 8;
  ((void (*)(char *, uint64_t))v43)(v25, v19);
  v37[0] = *(void *)(v15 + 8);
  v37[1] = v15 + 8;
  sub_100014768();
  v26();
  swift_release();
  uint64_t v54 = sub_100020CF4;
  uint64_t v55 = v3;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_10000CF80;
  uint64_t v53 = &unk_10008B188;
  os_log_type_t v27 = _Block_copy(&aBlock);
  __chkstk_darwin(v27);
  swift_retain();
  uint64_t v28 = static DispatchQoS.unspecified.getter();
  __chkstk_darwin(v28);
  sub_10001CDE4();
  sub_100013434();
  OS_dispatch_source.setCancelHandler(qos:flags:handler:)();
  _Block_release(v27);
  sub_100014768();
  v29();
  os_log_type_t v30 = (void (*)(void))v37[0];
  sub_1000112D0();
  v30();
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v54 = sub_100020D18;
  uint64_t v55 = v3;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_10000CF80;
  uint64_t v53 = &unk_10008B1B0;
  uint64_t v31 = _Block_copy(&aBlock);
  __chkstk_darwin(v31);
  swift_retain();
  uint64_t v32 = static DispatchQoS.unspecified.getter();
  __chkstk_darwin(v32);
  sub_10001CDE4();
  sub_100013434();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v31);
  uint64_t v33 = v43;
  sub_100014768();
  v33();
  sub_1000112D0();
  v30();
  swift_release();
  uint64_t v54 = sub_100020D1C;
  uint64_t v55 = v3;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_10000CF80;
  uint64_t v53 = &unk_10008B1D8;
  uint64_t v34 = _Block_copy(&aBlock);
  __chkstk_darwin(v34);
  swift_retain();
  uint64_t v35 = static DispatchQoS.unspecified.getter();
  __chkstk_darwin(v35);
  sub_10001CDE4();
  sub_100013434();
  OS_dispatch_source.setCancelHandler(qos:flags:handler:)();
  _Block_release(v34);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  sub_100014768();
  v33();
  sub_1000112D0();
  v30();
  swift_release();
  return v3;
}

uint64_t sub_10001CDC8()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_10001CDE4()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10001CE64(uint64_t a1, void *a2)
{
  *(void *)(a1 + *a2) = 0;
  swift_unknownObjectRelease();
  uint64_t v3 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection;
  uint64_t result = *(void *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection);
  if (result)
  {
    uint64_t result = lockdown_disconnect();
    *(void *)(a1 + v3) = 0;
  }
  return result;
}

void sub_10001CEAC()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RemotePairingError();
  sub_100013830();
  uint64_t v4 = v3;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)v85 - v9;
  id v11 = *(id *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  OS_dispatch_queue.assertOnQueueHierarchy()();

  uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource);
  if (v12)
  {
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    if (OS_dispatch_source.data.getter()
      && (uint64_t v14 = *(NSObject **)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection)) != 0)
    {
      uint64_t v15 = (uint8_t *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests);
      swift_beginAccess();
      if (*(void *)(*(void *)v15 + 16))
      {
        v85[0] = ObjectType;
        v85[1] = v8;
        uint64_t v86 = v4;
        v87 = v10;
        uint64_t v88 = v2;
        uint64_t v94 = v12;
        swift_beginAccess();
        v91 = v15;
        uint64_t v89 = sub_10001DBB4();
        uint64_t v90 = v16;
        uint64_t v92 = v17;
        uint64_t v93 = v18;
        swift_endAccess();
        type metadata accessor for __DataStorage();
        swift_allocObject();
        uint64_t v19 = __DataStorage.init(length:)();
        uint64_t v100 = 0x200000000000;
        unint64_t v101 = v19 | 0x4000000000000000;
        uint64_t v99 = 0;
        uint64_t v20 = v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData;
        os_log_t v96 = v14;
        uint64_t v95 = v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData;
        while (1)
        {
          uint64_t v21 = sub_100020D88(&v100);
          uint64_t v22 = v21;
          if (v21 <= 0) {
            break;
          }
          uint64_t v23 = v100;
          unint64_t v24 = v101;
          unint64_t v25 = v101 >> 62;
          uint64_t v26 = 0;
          uint64_t v27 = v100 >> 32;
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v20 = BYTE6(v101);
          uint64_t v30 = 0;
          switch(v101 >> 62)
          {
            case 1uLL:
              sub_100015BB4(v100, v101);
              if (v27 < (int)v23) {
                goto LABEL_58;
              }
              uint64_t v26 = v23 >> 32;
              uint64_t v28 = (int)v23;
              uint64_t v29 = v23 >> 32;
              uint64_t v30 = (int)v23;
              goto LABEL_13;
            case 2uLL:
              uint64_t v28 = *(void *)(v100 + 16);
              uint64_t v26 = *(void *)(v100 + 24);
              sub_100015BB4(v100, v101);
              if (v26 < v28)
              {
LABEL_58:
                __break(1u);
LABEL_59:
                __break(1u);
LABEL_60:
                __break(1u);
LABEL_61:
                __break(1u);
LABEL_62:
                __break(1u);
LABEL_63:
                __break(1u);
              }
              uint64_t v30 = *(void *)(v23 + 16);
              uint64_t v29 = *(void *)(v23 + 24);
LABEL_13:
              if (v29 < v26 || v26 < v30) {
                goto LABEL_59;
              }
              uint64_t v32 = v26 - v28;
              if (__OFSUB__(v26, v28)) {
                goto LABEL_60;
              }
              if ((v32 & 0x8000000000000000) == 0 && v32 < v22)
              {
                switch((int)v25)
                {
                  case 1:
                    uint64_t v33 = v23 >> 32;
                    goto LABEL_33;
                  case 2:
                    uint64_t v33 = *(void *)(v23 + 24);
                    goto LABEL_34;
                  default:
                    goto LABEL_36;
                }
              }
              uint64_t v33 = v28 + v22;
              if (__OFADD__(v28, v22)) {
                goto LABEL_62;
              }
              uint64_t v34 = 0;
              uint64_t v35 = 0;
              switch((int)v25)
              {
                case 1:
                  uint64_t v34 = v23 >> 32;
                  uint64_t v35 = (int)v23;
                  break;
                case 2:
                  uint64_t v35 = *(void *)(v23 + 16);
                  uint64_t v34 = *(void *)(v23 + 24);
                  break;
                case 3:
                  break;
                default:
                  uint64_t v35 = 0;
                  uint64_t v34 = BYTE6(v24);
                  break;
              }
              if (v34 < v33 || v33 < v35) {
                goto LABEL_63;
              }
              uint64_t v37 = 0;
              switch((int)v25)
              {
                case 1:
LABEL_33:
                  uint64_t v37 = (int)v23;
                  break;
                case 2:
LABEL_34:
                  uint64_t v37 = *(void *)(v23 + 16);
                  break;
                default:
                  break;
              }
              if (v33 < v37) {
                goto LABEL_61;
              }
LABEL_36:
              uint64_t v38 = Data._Representation.subscript.getter();
              unint64_t v40 = v39;
              sub_1000158A8(v23, v24);
              sub_100015F70();
              Data.append(_:)();
              swift_endAccess();
              sub_1000158A8(v38, v40);
              if ((lockdown_get_buffered_read_size() & 1) == 0)
              {
                uint64_t v99 = -1;
LABEL_47:
                sub_100016EAC();
                uint64_t v49 = Data.count.getter();
                sub_100015708();
                if (v49 < v89)
                {
                  sub_100015F70();
                  sub_100010EC8();
                  uint64_t v50 = sub_100021B70();
                  sub_10002123C(v50, v51, v52, v90, v92, v23 >> 32);
                  swift_endAccess();
                  swift_release();
                  swift_unknownObjectRelease();
                  goto LABEL_56;
                }
                uint64_t v53 = *(void *)BYTE6(v24);
                unint64_t v54 = *(void *)(BYTE6(v24) + 8);
                sub_100016EAC();
                sub_10001DC1C(v90, v53, v54, v102);
                uint64_t v55 = *(void *)BYTE6(v24);
                unint64_t v56 = *(void *)(BYTE6(v24) + 8);
                sub_100015BB4(v55, v56);
                uint64_t v57 = Data.count.getter();
                sub_10001DDA8(v57, v55, v56, v102);
                uint64_t v58 = sub_100068EE8(v102[0], v102[1]);
                uint64_t v59 = *(void *)BYTE6(v24);
                unint64_t v60 = *(void *)(BYTE6(v24) + 8);
                *(void *)BYTE6(v24) = v58;
                *(void *)(BYTE6(v24) + 8) = v61;
                sub_1000158A8(v59, v60);
                sub_100010EC8();
                sub_100016EAC();
                sub_10001650C();
                v62();
                sub_100015708();
                swift_release();
                if (*(void *)(*(void *)v91 + 16))
                {
                  sub_1000158A8(v23, v24);
                  sub_100015708();
                  swift_unknownObjectRelease();
                  swift_release();
                  goto LABEL_43;
                }
                OS_dispatch_source.suspend()();
                swift_unknownObjectRelease();
                sub_100015708();
                swift_release();
LABEL_56:
                uint64_t v83 = v23;
                unint64_t v84 = v24;
LABEL_57:
                sub_1000158A8(v83, v84);
                goto LABEL_43;
              }
              if (v99 <= 0) {
                goto LABEL_47;
              }
              break;
            case 3uLL:
              goto LABEL_13;
            default:
              uint64_t v28 = 0;
              uint64_t v30 = 0;
              uint64_t v26 = BYTE6(v101);
              uint64_t v29 = BYTE6(v101);
              goto LABEL_13;
          }
        }
        if (v21 < 0)
        {
          uint64_t v63 = type metadata accessor for POSIXError();
          sub_100013830();
          uint64_t v65 = v64;
          __chkstk_darwin(v66);
          sub_100013A04();
          POSIXError._nsError.getter();
          (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v20, v63);
          uint64_t v48 = v88;
          uint64_t v47 = v87;
        }
        else
        {
          uint64_t v47 = v87;
          static RemotePairingError.mobileDeviceError.getter();
          sub_100020D40((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
          uint64_t v48 = v88;
          sub_100016350();
          sub_100020D40((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
          sub_100016D90();
          Error<>.init(_:_:)();
        }
        os_log_type_t v67 = static os_log_type_t.error.getter();
        v68 = qword_1000986F0;
        int v69 = v67;
        if (os_log_type_enabled((os_log_t)qword_1000986F0, v67))
        {
          swift_errorRetain();
          swift_errorRetain();
          os_log_t v96 = v68;
          CFTypeRef v70 = (uint8_t *)swift_slowAlloc();
          uint64_t v95 = sub_100015720();
          v102[0] = v95;
          *(_DWORD *)CFTypeRef v70 = 136315138;
          v91 = v70 + 4;
          swift_getErrorValue();
          uint64_t v71 = v98;
          sub_100013830();
          uint64_t v73 = v72;
          __chkstk_darwin(v74);
          sub_100012078();
          LODWORD(v90) = v69;
          uint64_t v77 = v76 - v75;
          (*(void (**)(uint64_t))(v73 + 16))(v76 - v75);
          uint64_t v78 = Error.localizedDescription.getter();
          uint64_t v80 = v79;
          uint64_t v81 = v71;
          uint64_t v47 = v87;
          uint64_t v48 = v88;
          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v77, v81);
          uint64_t v97 = sub_100010478(v78, v80, v102);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v96, (os_log_type_t)v90, "Lockdown tunnel connection receive error: %s", v70, 0xCu);
          swift_arrayDestroy();
          sub_1000120B0();
          sub_1000120B0();
        }
        sub_100010EC8();
        static RemotePairingError.mobileDeviceError.getter();
        sub_100020D40((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        Error<>.init(_:_:)();
        sub_100020D40((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        sub_100016350();
        swift_errorRetain();
        _Error.wrapping(_:)();
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v86 + 8))(v47, v48);
        sub_10001650C();
        v82();
        swift_errorRelease();
        swift_unknownObjectRelease();
        swift_release_n();
        swift_errorRelease();
        uint64_t v83 = v100;
        unint64_t v84 = v101;
        goto LABEL_57;
      }
    }
    else
    {
      static RemotePairingError.connectionFailed.getter();
      sub_100020D40((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_100016350();
      sub_100020D40((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      Error<>.init(_:_:)();
      swift_willThrow();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      uint64_t v42 = qword_1000986F0;
      os_log_type_t v43 = v41;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v41))
      {
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v44 = (uint8_t *)sub_100013BF4();
        uint64_t v103 = sub_100015720();
        *(_DWORD *)uint64_t v44 = 136315138;
        swift_getErrorValue();
        uint64_t v45 = Error.localizedDescription.getter();
        v102[0] = sub_100010478(v45, v46, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Lockdown tunnel connection failed with error: %s", v44, 0xCu);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      swift_errorRetain();
      sub_10001FF28();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_unknownObjectRelease();
  }
LABEL_43:
  sub_100013918();
}

uint64_t sub_10001DBB4()
{
  if (*(void *)(*(void *)v0 + 16))
  {
    uint64_t v1 = *(void *)(*(void *)v0 + 32);
    swift_retain();
    sub_10002113C(0, 1);
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001DC1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    JUMPOUT(0x10001DD78);
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(v5)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v10 = (int)a2;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_10002192C(v10, a1, v9, a2, a3);
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = v11;
    uint64_t v14 = 0;
    switch((int)v5)
    {
      case 0:
      case 3:
        goto LABEL_13;
      case 1:
        goto LABEL_10;
      case 2:
        goto LABEL_12;
      default:
        goto LABEL_17;
    }
  }
  switch((int)v5)
  {
    case 0:
    case 3:
      goto LABEL_14;
    case 1:
      uint64_t v13 = a2 >> 32;
LABEL_10:
      uint64_t v14 = (int)a2;
      goto LABEL_13;
    case 2:
      uint64_t v13 = *(void *)(a2 + 24);
LABEL_12:
      uint64_t v14 = *(void *)(a2 + 16);
LABEL_13:
      if (v13 < v14) {
        goto LABEL_16;
      }
LABEL_14:
      uint64_t v15 = Data._Representation.subscript.getter();
      uint64_t v17 = v16;
      uint64_t result = sub_1000158A8(a2, a3);
      *a4 = v15;
      a4[1] = v17;
      return result;
    default:
LABEL_17:
      JUMPOUT(0);
  }
}

uint64_t sub_10001DDA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x10001DF04);
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(v5)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_10002192C(v10, a1, v9, a2, a3);
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 0:
        uint64_t v13 = BYTE6(a3);
        goto LABEL_12;
      case 1:
        uint64_t v13 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        goto LABEL_12;
      case 3:
LABEL_12:
        if (v13 < v11) {
          __break(1u);
        }
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  switch((int)v5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
LABEL_14:
      uint64_t v14 = Data._Representation.subscript.getter();
      uint64_t v16 = v15;
      uint64_t result = sub_1000158A8(a2, a3);
      *a4 = v14;
      a4[1] = v16;
      return result;
    default:
LABEL_16:
      JUMPOUT(0);
  }
}

void sub_10001DF34()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RemotePairingError();
  sub_100013830();
  uint64_t v4 = v3;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v55 - v9;
  id v11 = *(id *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  OS_dispatch_queue.assertOnQueueHierarchy()();

  if (!*(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource)) {
    goto LABEL_14;
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v12 = OS_dispatch_source.data.getter();
  if (v12 < 0)
  {
    unint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v13 = v12;
    if (!v12)
    {
LABEL_10:
      static RemotePairingError.connectionFailed.getter();
      sub_100020D40((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_100015D74();
      sub_100020D40((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      Error<>.init(_:_:)();
      swift_willThrow();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      uint64_t v22 = qword_1000986F0;
      os_log_type_t v23 = v21;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v21))
      {
        swift_errorRetain();
        swift_errorRetain();
        unint64_t v24 = (uint8_t *)sub_100013BF4();
        uint64_t v68 = sub_100015720();
        *(_DWORD *)unint64_t v24 = 136315138;
        swift_getErrorValue();
        uint64_t v25 = Error.localizedDescription.getter();
        v67[0] = sub_100010478(v25, v26, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Lockdown tunnel connection failed with error: %s", v24, 0xCu);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      swift_errorRetain();
      sub_10001FF28();
      swift_errorRelease();
      swift_errorRelease();
LABEL_13:
      swift_unknownObjectRelease();
LABEL_14:
      sub_100013918();
      return;
    }
  }
  if (!*(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection)) {
    goto LABEL_10;
  }
  if (v13 >= 0x401)
  {
    uint64_t v63 = v8;
    uint64_t v14 = v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests;
    swift_beginAccess();
    if (*(void *)(*(void *)v14 + 16))
    {
      uint64_t v58 = v4;
      swift_beginAccess();
      uint64_t v15 = *(void **)v14;
      if (!*(void *)(*(void *)v14 + 16))
      {
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x10001E9F0);
      }
      uint64_t v16 = v15[4];
      unint64_t v17 = v15[5];
      uint64_t v18 = v15[7];
      unint64_t v60 = (void (*)(uint64_t))v15[6];
      uint64_t v62 = v17 >> 62;
      sub_100015BB4(v16, v17);
      uint64_t v61 = v18;
      swift_retain();
      uint64_t v59 = v14;
      sub_10002103C(0, 1);
      swift_endAccess();
      uint64_t v64 = v16;
      unint64_t v65 = v17;
      Data.count.getter();
      switch(v62)
      {
        case 1:
          if (v64 >> 32 < (int)v64) {
            goto LABEL_37;
          }
          uint64_t v62 = (int)v64;
          unint64_t v28 = v65;
          swift_retain();
          uint64_t v20 = sub_1000215E8(v62);
          unint64_t v29 = v28;
          uint64_t v19 = v64;
          sub_1000158A8(v64, v29);
LABEL_22:
          if (v20 <= 0)
          {
            if (v20 < 0)
            {
              type metadata accessor for POSIXError();
              sub_100013830();
              __chkstk_darwin(v37);
              sub_100013A04();
              POSIXError._nsError.getter();
              uint64_t v38 = sub_10001604C();
              v39(v38);
            }
            else
            {
              static RemotePairingError.mobileDeviceError.getter();
              sub_100020D40((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
              sub_100015D74();
              sub_100020D40((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
              Error<>.init(_:_:)();
            }
            os_log_type_t v40 = static os_log_type_t.error.getter();
            os_log_type_t v41 = qword_1000986F0;
            int v42 = v40;
            if (os_log_type_enabled((os_log_t)qword_1000986F0, v40))
            {
              swift_errorRetain();
              swift_errorRetain();
              uint64_t v62 = (uint64_t)v41;
              os_log_type_t v43 = (uint8_t *)sub_100013BF4();
              uint64_t v59 = sub_100015720();
              v67[0] = v59;
              uint64_t v57 = v43;
              *(_DWORD *)os_log_type_t v43 = 136315138;
              v55[2] = (char *)v41 + (void)v43;
              v55[1] = v43 + 4;
              swift_getErrorValue();
              v55[0] = v55;
              int v56 = v42;
              sub_100013830();
              uint64_t v45 = v44;
              __chkstk_darwin(v46);
              (*(void (**)(char *))(v45 + 16))((char *)v55 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
              uint64_t v48 = Error.localizedDescription.getter();
              uint64_t v50 = v49;
              uint64_t v51 = sub_10001604C();
              v52(v51);
              uint64_t v53 = v48;
              uint64_t v19 = v64;
              uint64_t v66 = sub_100010478(v53, v50, v67);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)v62, (os_log_type_t)v56, "Lockdown tunnel connection received connection send error: %s", v57, 0xCu);
              swift_arrayDestroy();
              sub_1000120B0();
              sub_1000120B0();
            }
            static RemotePairingError.mobileDeviceError.getter();
            sub_100020D40((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
            sub_100016D90();
            Error<>.init(_:_:)();
            sub_100020D40((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
            uint64_t v54 = sub_100015D74();
            swift_errorRetain();
            _Error.wrapping(_:)();
            swift_errorRelease();
            (*(void (**)(char *, uint64_t))(v58 + 8))(v10, v2);
            v60(v54);
            swift_errorRelease();
            swift_errorRelease();
            swift_unknownObjectRelease();
            sub_1000158A8(v19, v65);
          }
          else
          {
            unint64_t v31 = v65;
            if (v20 >= Data.count.getter())
            {
              v60(0);
              if (!*(void *)(*(void *)v59 + 16)) {
                OS_dispatch_source.suspend()();
              }
              sub_1000158A8(v19, v31);
              swift_unknownObjectRelease();
            }
            else
            {
              sub_100015BB4(v19, v31);
              sub_10001DDA8(v20, v19, v31, v67);
              uint64_t v32 = v67[1];
              sub_100015F70();
              sub_100016EAC();
              uint64_t v33 = v61;
              swift_retain();
              sub_100016EAC();
              swift_retain();
              uint64_t v34 = sub_100021B70();
              sub_10002136C(v34, v35, v36, v32, (uint64_t)v60, v33);
              swift_endAccess();
              sub_100015708();
              sub_100015708();
              swift_release();
              sub_1000158A8(v19, v31);
              swift_unknownObjectRelease();
            }
          }
          swift_release();
          break;
        case 2:
          uint64_t v19 = v64;
          uint64_t v30 = *(void *)(v64 + 16);
          uint64_t v62 = *(void *)(v64 + 24);
          swift_retain();
          swift_retain();
          uint64_t v20 = sub_1000215E8(v30);
          swift_release();
          swift_release();
          goto LABEL_22;
        case 3:
          sub_100021B70();
          uint64_t v20 = sub_100021518();
          uint64_t v19 = v64;
          goto LABEL_22;
        default:
          uint64_t v19 = v64;
          uint64_t v20 = sub_100021518();
          goto LABEL_22;
      }
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  sub_100013918();
  swift_unknownObjectRelease();
}

uint64_t sub_10001EA00()
{
  sub_10001FF28();
  sub_100013BC4(*(void *)(v0 + 16), *(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection_identifier;
  uint64_t v2 = sub_1000153C0((uint64_t *)&unk_1000953A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000158A8(*(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData), *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData + 8));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001EADC()
{
  sub_10001EA00();
  sub_100016368();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);

  return _swift_deallocClassInstance(v0, v2, v3);
}

uint64_t sub_10001EB14()
{
  return type metadata accessor for LockdownTunnelConnection();
}

uint64_t type metadata accessor for LockdownTunnelConnection()
{
  uint64_t result = qword_100095178;
  if (!qword_100095178) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10001EB64()
{
  sub_10002041C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10001EC50()
{
  sub_100016368();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10001ED04()
{
  sub_1000139EC();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  v10[3] = v4;
  v10[4] = v2;
  id v11 = (void *)swift_allocObject();
  v11[2] = v0;
  v11[3] = sub_100021834;
  v11[4] = v10;
  v11[5] = v8;
  v11[6] = v6;
  v23[4] = sub_100021884;
  v23[5] = v11;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = sub_10000CF80;
  v23[3] = &unk_10008B390;
  uint64_t v12 = _Block_copy(v23);
  type metadata accessor for DispatchQoS();
  sub_100013830();
  __chkstk_darwin(v13);
  sub_100010EB0();
  id v14 = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  sub_100013830();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_100012078();
  uint64_t v21 = v20 - v19;
  sub_10001C478();
  sub_1000153C0(&qword_1000950F0);
  sub_10001C4BC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v15);
  sub_1000112D0();
  v22();
  swift_release();
  sub_100013918();
}

uint64_t sub_10001EF74(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a5;
  *(void *)(v11 + 24) = a6;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  char v12 = a3 & 1;
  *(unsigned char *)(v11 + 48) = a3 & 1;
  void aBlock[4] = sub_100021AE8;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008B3E0;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_100021B1C(a1, a2, v12);
  static DispatchQoS.unspecified.getter();
  uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = &_swiftEmptyArrayStorage;
  sub_10001C478();
  sub_1000153C0(&qword_1000950F0);
  sub_10001C4BC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return swift_release();
}

uint64_t sub_10001F208(uint64_t a1, void (*a2)(uint64_t, void, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for RemotePairingError();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v36 - v13 + 16;
  if (!*(void *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource))
  {
    static RemotePairingError.mobileDeviceError.getter();
    sub_100020D40((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    Error<>.init(_:_:)();
    sub_100020D40((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    uint64_t v16 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v17, v14, v10);
    a2(v16, 0, 1);
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  uint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests);
  swift_beginAccess();
  if (*(void *)(*v15 + 16))
  {
    swift_unknownObjectRetain();
    goto LABEL_6;
  }
  uint64_t v19 = (uint64_t *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__partialReceivedData);
  swift_beginAccess();
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  swift_unknownObjectRetain();
  sub_100015BB4(v20, v21);
  uint64_t v22 = Data.count.getter();
  sub_1000158A8(v20, v21);
  if (v22 < a4)
  {
LABEL_6:
    swift_beginAccess();
    swift_retain();
    sub_100052E20();
    uint64_t v23 = *(void *)(*v15 + 16);
    sub_100052FD8();
    uint64_t v24 = *v15;
    *(void *)(v24 + 16) = v23 + 1;
    uint64_t v25 = (void *)(v24 + 32 * v23);
    v25[4] = a4;
    v25[5] = a5;
    v25[6] = a2;
    v25[7] = a3;
    uint64_t v26 = *v15;
    swift_endAccess();
    if (*(void *)(v26 + 16) == 1)
    {
      swift_getObjectType();
      OS_dispatch_source.resume()();
    }
    return swift_unknownObjectRelease();
  }
  uint64_t v27 = *v19;
  unint64_t v28 = v19[1];
  sub_100015BB4(*v19, v28);
  sub_10001DC1C(a5, v27, v28, v36);
  long long v29 = *(_OWORD *)v36;
  uint64_t v30 = *v19;
  unint64_t v31 = v19[1];
  sub_100015BB4(*v19, v31);
  uint64_t v32 = Data.count.getter();
  sub_10001DDA8(v32, v30, v31, v36);
  uint64_t v33 = *v19;
  unint64_t v34 = v19[1];
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v36;
  sub_1000158A8(v33, v34);
  sub_100015BB4(v29, *((unint64_t *)&v29 + 1));
  a2(v29, *((void *)&v29 + 1), 0);
  sub_1000158A8(v29, *((unint64_t *)&v29 + 1));
  sub_1000158A8(v29, *((unint64_t *)&v29 + 1));
  return swift_unknownObjectRelease();
}

void sub_10001F5C0()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v10;
  v11[3] = v5;
  v11[4] = v3;
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v1;
  void v12[3] = sub_100021714;
  v12[4] = v11;
  v12[5] = v9;
  void v12[6] = v7;
  v21[4] = sub_100021768;
  v21[5] = v12;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_10000CF80;
  v21[3] = &unk_10008B2C8;
  uint64_t v13 = _Block_copy(v21);
  type metadata accessor for DispatchQoS();
  sub_100013830();
  __chkstk_darwin(v14);
  sub_100010EB0();
  id v15 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100015BB4(v9, v7);
  static DispatchQoS.unspecified.getter();
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags();
  sub_100013830();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  sub_100015928();
  sub_10001C478();
  sub_1000153C0(&qword_1000950F0);
  sub_10001C4BC();
  sub_100015CC4();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v1, v16);
  sub_1000112D0();
  v20();
  swift_release();
  sub_100013918();
}

uint64_t sub_10001F81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a1;
  void aBlock[4] = sub_1000217C0;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008B318;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = &_swiftEmptyArrayStorage;
  sub_10001C478();
  sub_1000153C0(&qword_1000950F0);
  sub_10001C4BC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_10001FA98(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = type metadata accessor for RemotePairingError();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v23 - v13;
  if (*(void *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource))
  {
    uint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests);
    swift_beginAccess();
    swift_unknownObjectRetain();
    sub_100015BB4(a4, a5);
    swift_retain();
    sub_100052EC4();
    uint64_t v16 = *(void *)(*v15 + 16);
    sub_100053048();
    uint64_t v17 = *v15;
    *(void *)(v17 + 16) = v16 + 1;
    uint64_t v18 = (void *)(v17 + 32 * v16);
    v18[4] = a4;
    v18[5] = a5;
    v18[6] = a2;
    v18[7] = a3;
    uint64_t v19 = *v15;
    swift_endAccess();
    if (*(void *)(v19 + 16) == 1)
    {
      swift_getObjectType();
      OS_dispatch_source.resume()();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    static RemotePairingError.mobileDeviceError.getter();
    sub_100020D40((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    Error<>.init(_:_:)();
    sub_100020D40((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    uint64_t v21 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v22, v14, v10);
    a2(v21);
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
}

void sub_10001FD30()
{
  sub_1000139EC();
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__queue);
  v11[4] = sub_100021708;
  uint64_t v12 = v0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10000CF80;
  v11[3] = &unk_10008B250;
  uint64_t v3 = _Block_copy(v11);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  sub_100013830();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100010EB0();
  id v8 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100013830();
  __chkstk_darwin(v9);
  sub_100015928();
  sub_10001C478();
  sub_1000153C0(&qword_1000950F0);
  sub_10001C4BC();
  sub_100015CC4();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v3);

  sub_1000112D0();
  v10();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  swift_release();
  sub_100013918();
}

void sub_10001FF00()
{
}

void sub_10001FF28()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for RemotePairingError();
  __chkstk_darwin(v4);
  sub_100012078();
  if (v3)
  {
    uint64_t v5 = v3;
  }
  else
  {
    static RemotePairingError.mobileDeviceError.getter();
    sub_100020D40((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    uint64_t v5 = sub_100016350();
    sub_100020D40((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    Error<>.init(_:_:)();
  }
  uint64_t v6 = (void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingReceiveRequests);
  swift_beginAccess();
  uint64_t v35 = v6;
  uint64_t v36 = v0;
  uint64_t v7 = *v6;
  int64_t v8 = *(void *)(*v6 + 16);
  if (v8)
  {
    swift_errorRetain();
    unint64_t v39 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10004A1B8(0, v8, 0);
    uint64_t v9 = &_swiftEmptyArrayStorage;
    uint64_t v10 = (uint64_t *)(v7 + 56);
    do
    {
      uint64_t v12 = *(v10 - 1);
      uint64_t v11 = *v10;
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = v11;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10004A1B8(0, v9[2] + 1, 1);
        uint64_t v9 = v39;
      }
      unint64_t v15 = v9[2];
      unint64_t v14 = v9[3];
      if (v15 >= v14 >> 1)
      {
        sub_10004A1B8((void *)(v14 > 1), v15 + 1, 1);
        uint64_t v9 = v39;
      }
      v9[2] = v15 + 1;
      uint64_t v16 = (char *)&v9[2 * v15];
      *((void *)v16 + 4) = sub_1000216A8;
      *((void *)v16 + 5) = v13;
      v10 += 4;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_errorRetain();
    uint64_t v9 = &_swiftEmptyArrayStorage;
  }
  uint64_t v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__pendingSendRequests);
  swift_beginAccess();
  uint64_t v18 = *v17;
  int64_t v19 = *(void *)(*v17 + 16);
  uint64_t v20 = &_swiftEmptyArrayStorage;
  if (v19)
  {
    v37[0] = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_10004A17C(0, v19, 0);
    uint64_t v20 = &_swiftEmptyArrayStorage;
    uint64_t v21 = (uint64_t *)(v18 + 56);
    do
    {
      uint64_t v23 = *(v21 - 1);
      uint64_t v22 = *v21;
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = v22;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10004A17C(0, v20[2] + 1, 1);
        uint64_t v20 = (void *)v37[0];
      }
      unint64_t v26 = v20[2];
      unint64_t v25 = v20[3];
      if (v26 >= v25 >> 1)
      {
        sub_10004A17C((void *)(v25 > 1), v26 + 1, 1);
        uint64_t v20 = (void *)v37[0];
      }
      v20[2] = v26 + 1;
      uint64_t v27 = (char *)&v20[2 * v26];
      *((void *)v27 + 4) = sub_1000216DC;
      *((void *)v27 + 5) = v24;
      v21 += 4;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  uint64_t v28 = v9[2];
  if (v28)
  {
    swift_bridgeObjectRetain();
    long long v29 = (char *)(v9 + 5);
    do
    {
      uint64_t v30 = (void (*)(void *))*((void *)v29 - 1);
      v37[0] = v5;
      v37[1] = 0;
      char v38 = 1;
      swift_retain();
      v30(v37);
      swift_release();
      v29 += 16;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = v20[2];
  if (v31)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = (char *)(v20 + 5);
    do
    {
      uint64_t v33 = (void (*)(void *))*((void *)v32 - 1);
      v37[0] = v5;
      swift_retain();
      v33(v37);
      swift_release();
      v32 += 16;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *uint64_t v35 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  *uint64_t v17 = (uint64_t)&_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (*(void *)(v36 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  if (*(void *)(v36 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  uint64_t v34 = OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection;
  if (*(void *)(v36 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__lockdownConnection))
  {
    lockdown_disconnect();
    swift_errorRelease();
    *(void *)(v36 + v34) = 0;
  }
  else
  {
    swift_errorRelease();
  }
  sub_100013918();
}

void sub_10002041C()
{
  if (!qword_100096EF0)
  {
    type metadata accessor for TunnelConnectionIdentifierCategory();
    unint64_t v0 = type metadata accessor for Identifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100096EF0);
    }
  }
}

uint64_t sub_10002047C(uint64_t a1)
{
  sub_1000158A8(*(void *)a1, *(void *)(a1 + 8));

  return swift_release();
}

uint64_t *sub_1000204BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100015BB4(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain();
  return a1;
}

uint64_t *sub_10002050C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100015BB4(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1000158A8(v6, v7);
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_retain();
  swift_release();
  return a1;
}

__n128 sub_100020570(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10002057C(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  sub_1000158A8(v4, v5);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release();
  return a1;
}

void type metadata accessor for LockdownTunnelConnection.SendRequest()
{
}

uint64_t sub_1000205DC()
{
  return swift_release();
}

uint64_t sub_1000205E4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  return a1;
}

void *sub_10002061C(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_100020668(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t sub_10002069C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000206DC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LockdownTunnelConnection.ReceiveRequest()
{
}

uint64_t sub_100020728()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100020C9C(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t sub_100020778(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v2 + 24);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_100013BC4(v5, v6);
}

uint64_t (*sub_1000207CC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100020820()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

uint64_t sub_100020854(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_100020894())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000208E8()
{
  swift_beginAccess();
  return *(void *)(v0 + 40);
}

uint64_t sub_10002091C(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*sub_10002095C())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000209BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection_identifier;
  uint64_t v4 = sub_1000153C0((uint64_t *)&unk_1000953A0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100020A38()
{
  return StreamBasedTunnelConnection.send(packets:completion:)();
}

uint64_t sub_100020AAC()
{
  return StreamBasedTunnelConnection.send(controlMessage:completion:)();
}

uint64_t sub_100020B20()
{
  return StreamBasedTunnelConnection.receivePackets(completion:)();
}

uint64_t sub_100020B84()
{
  return StreamBasedTunnelConnection.receiveControlMessage(completion:)();
}

void sub_100020BE8()
{
}

void sub_100020C0C()
{
}

uint64_t sub_100020C24()
{
  return sub_10001C714() & 0x1FFFF;
}

uint64_t sub_100020C48()
{
  return 0;
}

uint64_t sub_100020C54()
{
  return sub_100020D40(&qword_100095398, (void (*)(uint64_t))type metadata accessor for LockdownTunnelConnection);
}

uint64_t sub_100020C9C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100015BB4(a1, a2);
  }
  return a1;
}

unint64_t sub_100020CB0()
{
  unint64_t result = qword_100096200;
  if (!qword_100096200)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100096200);
  }
  return result;
}

uint64_t sub_100020CF4()
{
  return sub_10001CE64(v0, &OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canReceiveSource);
}

uint64_t sub_100020D1C()
{
  return sub_10001CE64(v0, &OBJC_IVAR____TtC20remotepairingdeviced24LockdownTunnelConnection__canSendSource);
}

uint64_t sub_100020D40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100020D88(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_100075A80;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v7 = v2 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v7 < (int)v2) {
        goto LABEL_16;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v2, __DataStorage._offset.getter())) {
        goto LABEL_17;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v9 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v5 = v9;
      uint64_t v7 = v2 >> 32;
LABEL_11:
      if (v7 < (int)v2)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t result = sub_10002149C((int)v2);
      unint64_t v8 = v5 | 0x4000000000000000;
      *a1 = v2;
LABEL_13:
      a1[1] = v8;
      return result;
    case 2uLL:
      uint64_t v10 = *a1;
      uint64_t v12 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_10002149C(*(void *)(v10 + 16));
      unint64_t v8 = v12 | 0x8000000000000000;
      *a1 = v10;
      goto LABEL_13;
    case 3uLL:
      return lockdown_recv();
    default:
      LOWORD(v11) = a1[1];
      BYTE2(v11) = BYTE2(a1[1]);
      HIBYTE(v11) = BYTE3(a1[1]);
      __int16 v13 = WORD2(a1[1]);
      unsigned __int8 v14 = BYTE6(a1[1]);
      uint64_t result = lockdown_recv();
      *a1 = v2;
      a1[1] = v11 | ((unint64_t)v13 << 32) | ((unint64_t)HIBYTE(v13) << 40) | ((unint64_t)v14 << 48);
      return result;
  }
}

uint64_t sub_10002103C(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      uint64_t v11 = v5 + v8;
    }
    else {
      uint64_t v11 = v5;
    }
    sub_1000532A0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    uint64_t v4 = v12;
  }
  __int16 v13 = (char *)(v4 + 32 + 32 * v6);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(v4 + 16);
  if (__OFSUB__(v14, a2)) {
    goto LABEL_22;
  }
  uint64_t result = (uint64_t)sub_100054148((char *)(v4 + 32 + 32 * a2), v14 - a2, v13);
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v16 = __OFADD__(v15, v8);
  uint64_t v17 = v15 - v7;
  if (!v16)
  {
    *(void *)(v4 + 16) = v17;
LABEL_16:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10002113C(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      uint64_t v11 = v5 + v8;
    }
    else {
      uint64_t v11 = v5;
    }
    sub_1000532D4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    uint64_t v4 = v12;
  }
  __int16 v13 = (char *)(v4 + 32 + 32 * v6);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(v4 + 16);
  if (__OFSUB__(v14, a2)) {
    goto LABEL_22;
  }
  uint64_t result = (uint64_t)sub_100054148((char *)(v4 + 32 + 32 * a2), v14 - a2, v13);
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v16 = __OFADD__(v15, v8);
  uint64_t v17 = v15 - v7;
  if (!v16)
  {
    *(void *)(v4 + 16) = v17;
LABEL_16:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10002123C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v10 = result;
  uint64_t v11 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v13 > *(void *)(v8 + 24) >> 1)
  {
    if (v9 <= v13) {
      uint64_t v17 = v9 + v12;
    }
    else {
      uint64_t v17 = v9;
    }
    sub_1000532D4(isUniquelyReferenced_nonNull_native, v17, 1, v8);
    uint64_t v8 = v18;
  }
  uint64_t v19 = v8 + 32 + 32 * v10;
  uint64_t result = swift_arrayDestroy();
  if (!v12) {
    goto LABEL_16;
  }
  uint64_t v20 = *(void *)(v8 + 16);
  if (__OFSUB__(v20, a2)) {
    goto LABEL_22;
  }
  uint64_t result = (uint64_t)sub_100054148((char *)(v8 + 32 + 32 * a2), v20 - a2, (char *)(v19 + 32));
  uint64_t v21 = *(void *)(v8 + 16);
  BOOL v22 = __OFADD__(v21, v12);
  uint64_t v23 = v21 + v12;
  if (!v22)
  {
    *(void *)(v8 + 16) = v23;
LABEL_16:
    *(void *)uint64_t v19 = a3;
    *(void *)(v19 + 8) = a4;
    *(void *)(v19 + 16) = a5;
    *(void *)(v19 + 24) = a6;
    *uint64_t v6 = v8;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10002136C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v10 = result;
  uint64_t v11 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v13 > *(void *)(v8 + 24) >> 1)
  {
    if (v9 <= v13) {
      uint64_t v17 = v9 + v12;
    }
    else {
      uint64_t v17 = v9;
    }
    sub_1000532A0(isUniquelyReferenced_nonNull_native, v17, 1, v8);
    uint64_t v8 = v18;
  }
  uint64_t v19 = v8 + 32 + 32 * v10;
  uint64_t result = swift_arrayDestroy();
  if (!v12) {
    goto LABEL_16;
  }
  uint64_t v20 = *(void *)(v8 + 16);
  if (__OFSUB__(v20, a2)) {
    goto LABEL_22;
  }
  uint64_t result = (uint64_t)sub_100054148((char *)(v8 + 32 + 32 * a2), v20 - a2, (char *)(v19 + 32));
  uint64_t v21 = *(void *)(v8 + 16);
  BOOL v22 = __OFADD__(v21, v12);
  uint64_t v23 = v21 + v12;
  if (!v22)
  {
    *(void *)(v8 + 16) = v23;
LABEL_16:
    *(void *)uint64_t v19 = a3;
    *(void *)(v19 + 8) = a4;
    *(void *)(v19 + 16) = a5;
    *(void *)(v19 + 24) = a6;
    *uint64_t v6 = v8;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10002149C(uint64_t a1)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(a1, result))
    {
      __DataStorage._length.getter();
      return lockdown_recv();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100021518()
{
  return lockdown_send();
}

uint64_t sub_1000215E8(uint64_t a1)
{
  uint64_t v2 = __DataStorage._bytes.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
      __break(1u);
      goto LABEL_8;
    }
    uint64_t v5 = v3 + a1 - result;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = __DataStorage._length.getter();
  if (v5) {
    return lockdown_send();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100021670()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000216A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_1000216DC(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

void sub_100021708()
{
}

uint64_t sub_100021714(uint64_t a1)
{
  return sub_10001F81C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100021720()
{
  swift_release();
  swift_release();
  sub_1000158A8(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100021768()
{
  return sub_10002189C((uint64_t (*)(void, void, void, void, void))sub_10001FA98);
}

uint64_t sub_100021780()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000217C0()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_1000217F4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100021834(uint64_t a1, unint64_t a2, char a3)
{
  return sub_10001EF74(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
}

uint64_t sub_100021844()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100021884()
{
  return sub_10002189C((uint64_t (*)(void, void, void, void, void))sub_10001F208);
}

uint64_t sub_10002189C(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000218B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v8 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v8)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v6 = (int)a3;
      uint64_t v5 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(a3 + 16);
      uint64_t v5 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = 0;
      uint64_t v5 = BYTE6(a4);
      break;
  }
  if (v5 >= result)
  {
    BOOL v8 = __OFSUB__(result, v6);
    BOOL v7 = result - v6 < 0;
  }
  else
  {
    BOOL v8 = 0;
    BOOL v7 = 1;
  }
  if (v7 != v8)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x10002191CLL);
  }
  return result;
}

uint64_t sub_10002192C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = sub_1000219B4(a1, a3, a4, a5);
  if (a2 <= 0)
  {
    if (v9 <= 0 && v9 > a2) {
      return 0;
    }
  }
  else if ((v9 & 0x8000000000000000) == 0 && v9 < (unint64_t)a2)
  {
    return 0;
  }
  return sub_1000218B4(a1, a2, a4, a5);
}

uint64_t sub_1000219B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v4 = a3 >> 32;
      uint64_t v5 = (int)a3;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = a3 >> 32;
      uint64_t v8 = (int)a3;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a3 + 16);
      uint64_t v7 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v7 = BYTE6(a4);
      break;
  }
  if (v7 < a2 || v8 > a2) {
    goto LABEL_21;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v10)
  {
LABEL_22:
    __break(1u);
    JUMPOUT(0x100021A84);
  }
  return result;
}

uint64_t sub_100021AA4()
{
  swift_release();
  sub_10000D998(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100021AE8()
{
  return (*(uint64_t (**)(void, void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

uint64_t sub_100021B1C(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRetain();
  }
  else {
    return sub_100015BB4(a1, a2);
  }
}

uint64_t sub_100021B70()
{
  return 0;
}

BOOL sub_100021B80(char a1, char a2)
{
  return a1 == a2;
}

void sub_100021B90(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int sub_100021BB8(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_100021C00(char *a1, char *a2)
{
  return sub_100021B80(*a1, *a2);
}

Swift::Int sub_100021C0C()
{
  return sub_100021BB8(*v0);
}

void sub_100021C14(uint64_t a1)
{
  sub_100021B90(a1, *v1);
}

Swift::Int sub_100021C1C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100021C60(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  sub_100015BB4(a2, a3);
  swift_retain();
  sub_100016BCC();
  BOOL v10 = sub_1000170B8();
  uint64_t v11 = CUPairingIdentity.authTag(for:type:)();
  unint64_t v13 = v12;
  sub_100027ED8();
  a4();
  sub_10000D998(v11, v13, 0);
  swift_release();

  sub_1000158A8(a2, a3);
  swift_release();
  sub_100013444();
}

void sub_100021F10(void (*a1)(void))
{
  sub_100016BCC();
  uint64_t v4 = sub_1000170B8();
  sub_100027ED8();
  a1();

  sub_100013444();
}

void sub_10002214C(void *a1, unint64_t a2, char a3, uint64_t a4, void (*a5)(void *, uint64_t))
{
  os_log_type_t v10 = static os_log_type_t.default.getter();
  uint64_t v11 = qword_1000986F0;
  os_log_type_t v12 = v10;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v10))
  {
    swift_retain_n();
    char v17 = a3;
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136446210;
    sub_100017194(a4 + 24, (uint64_t)v18);
    sub_1000153C0(&qword_100095568);
    uint64_t v14 = String.init<A>(describing:)();
    v18[0] = sub_100010478(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Fetched IRK from IRK generator %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v17;
    swift_slowDealloc();
  }
  if (a3)
  {
    swift_errorRetain();
    uint64_t v16 = 1;
  }
  else
  {
    sub_100015BB4((uint64_t)a1, a2);
    sub_10002236C(a4, (uint64_t)a1, a2, &v19, v18);
    uint64_t v16 = 0;
    sub_10000D998((uint64_t)a1, a2, 0);
    a1 = (void *)v18[0];
  }
  a5(a1, v16);
  sub_100027720(a1, v16);
}

void sub_10002236C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = *(void **)(a1 + 104);
  if (v7)
  {
    id v8 = v7;
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    os_log_type_t v10 = qword_1000986F0;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v9))
    {
      id v41 = v8;
      int v42 = a5;
      id v11 = v8;
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v12 = 136315138;
      id v13 = [v11 identifier];
      uint64_t v14 = sub_1000153C0((uint64_t *)&unk_1000976C0);
      os_log_type_t v40 = &v37;
      __chkstk_darwin(v14);
      uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v43 = v5;
      if (v13)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v17 = type metadata accessor for UUID();
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v17 = type metadata accessor for UUID();
        uint64_t v18 = 1;
      }
      sub_100015C34((uint64_t)v16, v18, 1, v17);
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v44 = sub_100010478(v35, v36, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v9, "Not saving new pairing identity as one has already been created. Using already created identity %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      a5 = v42;
      id v8 = v41;
    }
    *a5 = v8;
  }
  else
  {
    uint64_t v37 = a4;
    id v41 = (id)a3;
    int v42 = a5;
    os_log_type_t v40 = (void **)a2;
    id v19 = [objc_allocWithZone((Class)CUPairingIdentity) init];
    uint64_t PairingKey = generatePairingKeyPair()();
    unint64_t v38 = v22;
    unint64_t v39 = v21;
    uint64_t v24 = v23;
    uint64_t v25 = type metadata accessor for UUID();
    uint64_t v26 = *(void *)(v25 - 8);
    __chkstk_darwin(v25);
    uint64_t v28 = (char *)&v37 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    UUID.init()();
    v29.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v43 = v5;
    Class isa = v29.super.isa;
    uint64_t v31 = v25;
    unint64_t v32 = v39;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v31);
    unint64_t v33 = v38;
    [v19 setIdentifier:isa];

    sub_1000167EC(PairingKey, v32, v19);
    sub_100027AC0(v24, v33, v19);
    sub_100016844((uint64_t)v40, (uint64_t)v41, v19);
    uint64_t v34 = v43;
    sub_100022744();
    if (v34)
    {
      sub_1000158A8(v24, v33);
      sub_1000158A8(PairingKey, v32);

      *uint64_t v37 = v34;
    }
    else
    {
      sub_1000158A8(PairingKey, v32);
      sub_1000158A8(v24, v33);
      *int v42 = v19;
    }
  }
}

void sub_100022744()
{
  sub_100015CAC();
  uint64_t v87 = v0;
  uint64_t v3 = v2;
  LODWORD(v92) = static os_log_type_t.info.getter();
  uint64_t v91 = qword_1000986F0;
  uint64_t v89 = sub_1000153C0(&qword_100095570);
  uint64_t v4 = sub_10000D274();
  long long v88 = xmmword_100075C50;
  *(_OWORD *)(v4 + 16) = xmmword_100075C50;
  uint64_t v5 = sub_1000153C0((uint64_t *)&unk_1000976C0);
  uint64_t v6 = sub_100014774(v5);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v10 = [v3 identifier];
  uint64_t v90 = v8;
  if (__chkstk_darwin(v10))
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v11 = type metadata accessor for UUID();
    os_log_type_t v12 = (char *)&v84 - v9;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    os_log_type_t v12 = (char *)&v84 - v9;
    uint64_t v13 = 1;
  }
  sub_100015C34((uint64_t)v12, v13, 1, v11);
  sub_100027BBC((uint64_t)&v84 - v9, (uint64_t)&v84 - v9);
  type metadata accessor for UUID();
  if (sub_100015C0C((uint64_t)&v84 - v9, 1, v11))
  {
    sub_100015C5C((uint64_t)&v84 - v9, (uint64_t *)&unk_1000976C0);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    sub_100013844();
    uint64_t v16 = v3;
    uint64_t v18 = v17;
    __chkstk_darwin(v19);
    sub_100013900();
    sub_100015CF0();
    v20();
    sub_100015C5C((uint64_t)&v84 - v9, (uint64_t *)&unk_1000976C0);
    uint64_t v14 = UUID.uuidString.getter();
    uint64_t v15 = v21;
    (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v9, v11);
    uint64_t v3 = v16;
  }
  *(void *)&long long v94 = v14;
  *((void *)&v94 + 1) = v15;
  sub_1000153C0(&qword_100095590);
  uint64_t v22 = String.init<A>(describing:)();
  uint64_t v24 = v23;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v25 = sub_100016B8C();
  *(void *)(v4 + 64) = v25;
  *(void *)(v4 + 32) = v22;
  *(void *)(v4 + 40) = v24;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v96 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v26 = sub_100027A60(v3, (SEL *)&selRef_altIRK);
  if (v27 >> 60 == 15)
  {
    long long v94 = 0u;
    long long v95 = 0u;
  }
  else
  {
    *((void *)&v95 + 1) = &type metadata for Data;
    *(void *)&long long v94 = v26;
    *((void *)&v94 + 1) = v27;
  }
  sub_100016260((uint64_t)&v94, 0x4B5249746C61, 0xE600000000000000);
  uint64_t v28 = sub_100027A60(v3, (SEL *)&selRef_secretKey);
  if (v29 >> 60 == 15)
  {
    long long v94 = 0u;
    long long v95 = 0u;
  }
  else
  {
    *((void *)&v95 + 1) = &type metadata for Data;
    *(void *)&long long v94 = v28;
    *((void *)&v94 + 1) = v29;
  }
  sub_100016260((uint64_t)&v94, 27507, 0xE200000000000000);
  uint64_t v30 = sub_100027A60(v3, (SEL *)&selRef_publicKey);
  if (v31 >> 60 == 15)
  {
    long long v94 = 0u;
    long long v95 = 0u;
  }
  else
  {
    *((void *)&v95 + 1) = &type metadata for Data;
    *(void *)&long long v94 = v30;
    *((void *)&v94 + 1) = v31;
  }
  sub_100016260((uint64_t)&v94, 27504, 0xE200000000000000);
  uint64_t v32 = v96;
  *((void *)&v95 + 1) = sub_1000153C0(&qword_1000955A0);
  *(void *)&long long v94 = v32;
  swift_bridgeObjectRetain();
  uint64_t v33 = OPACKEncoderCreateData(from:)();
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_100010548((uint64_t)&v94);
LABEL_24:
    sub_100012088();
    return;
  }
  uint64_t v92 = v33;
  unint64_t v97 = v34;
  unint64_t v85 = v25;
  sub_100010548((uint64_t)&v94);
  sub_1000153C0(&qword_100095580);
  uint64_t v35 = v3;
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100075C60;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v37;
  type metadata accessor for CFString(0);
  uint64_t v91 = v38;
  *(void *)(inited + 72) = v38;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v39;
  CFStringRef v40 = (id)kSecClassGenericPassword;
  unint64_t v84 = v35;
  id v41 = [v35 identifier];
  uint64_t v86 = &v84;
  __chkstk_darwin(v41);
  sub_100015954();
  if (!v42)
  {
    uint64_t v81 = sub_100016AC8();
    sub_100015C34(v81, v82, v83, v11);
    goto LABEL_26;
  }
  sub_100013844();
  uint64_t v44 = v43;
  __chkstk_darwin(v45);
  sub_100012078();
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100016EDC();
  v46();
  uint64_t v47 = sub_100013930();
  sub_100015C34(v47, v48, v49, v11);
  sub_100015B08((uint64_t)kSecClassGenericPassword, 1, v11);
  if (v50)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v51 = UUID.uuidString.getter();
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v51;
  *(void *)(inited + 104) = v52;
  (*(void (**)(const CFStringRef, uint64_t))(v44 + 8))(kSecClassGenericPassword, v11);
  if (kSecUseSystemKeychain)
  {
    swift_bridgeObjectRelease();
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 136) = v53;
    *(void *)(inited + 168) = &type metadata for Bool;
    *(unsigned char *)(inited + 144) = 1;
    *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 184) = v54;
    *(void *)(inited + 216) = &type metadata for String;
    *(void *)(inited + 192) = 0xD000000000000017;
    *(void *)(inited + 200) = 0x800000010007AA60;
    *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 232) = v55;
    *(void *)(inited + 264) = &type metadata for String;
    *(void *)(inited + 240) = 0xD000000000000017;
    *(void *)(inited + 248) = 0x800000010007AA60;
    *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 280) = v56;
    *(void *)(inited + 312) = &type metadata for String;
    *(void *)(inited + 288) = 0xD000000000000017;
    *(void *)(inited + 296) = 0x800000010007AA60;
    *(void *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 328) = v57;
    *(void *)(inited + 360) = &type metadata for Data;
    uint64_t v58 = v92;
    *(void *)(inited + 336) = v92;
    *(void *)(inited + 344) = v97;
    sub_100015BB4(v58, v97);
    uint64_t v93 = Dictionary.init(dictionaryLiteral:)();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100016064();
    *((void *)&v95 + 1) = &type metadata for String;
    sub_100027DD0();
    *(void *)&long long v94 = 0xD000000000000017;
    *((void *)&v94 + 1) = v59;
    sub_100013C10((uint64_t)&v94, v60, v61, v62);
    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v65 = v64;
    *((void *)&v95 + 1) = v91;
    *(void *)&long long v94 = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    CFStringRef v66 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    sub_100016260((uint64_t)&v94, v63, v65);
    Dictionary._bridgeToObjectiveC()();
    sub_100027E68();
    OSStatus v67 = SecItemAdd((CFDictionaryRef)((char *)&type metadata for Any + 8), 0);

    if (v67)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100027DDC();
      id v68 = objc_allocWithZone((Class)NSError);
      id v69 = sub_1000168EC();
      static os_log_type_t.error.getter();
      uint64_t v70 = sub_10000D274();
      *(_OWORD *)(v70 + 16) = v88;
      id v71 = v69;
      id v72 = [v71 description];
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v75 = v74;

      unint64_t v76 = v85;
      *(void *)(v70 + 56) = &type metadata for String;
      *(void *)(v70 + 64) = v76;
      *(void *)(v70 + 32) = v73;
      *(void *)(v70 + 40) = v75;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      id v77 = v71;
      swift_willThrow();
      sub_1000158A8(v92, v97);
    }
    else
    {
      sub_1000158A8(v92, v97);
      uint64_t v78 = *(void **)(v87 + 104);
      uint64_t v79 = v84;
      *(void *)(v87 + 104) = v84;
      id v80 = v79;
    }
    goto LABEL_24;
  }
LABEL_27:
  __break(1u);
}

void sub_100022F98()
{
  sub_100015CAC();
  uint64_t v70 = v0;
  type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v1);
  sub_1000120C8();
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  sub_1000153C0(&qword_100095580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100075C70;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v3;
  type metadata accessor for CFString(0);
  *(void *)(inited + 72) = v4;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  if (!kSecUseSystemKeychain) {
    __break(1u);
  }
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v5;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(unsigned char *)(inited + 96) = 1;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v6;
  *(void *)(inited + 168) = &type metadata for String;
  sub_100027DD0();
  *(void *)(inited + 144) = 0xD000000000000017;
  *(void *)(inited + 152) = v7;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v8;
  *(void *)(inited + 216) = &type metadata for Bool;
  *(unsigned char *)(inited + 192) = 1;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v9;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(unsigned char *)(inited + 240) = 1;
  CFStringRef v10 = (id)kSecClassGenericPassword;
  uint64_t v71 = Dictionary.init(dictionaryLiteral:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100016064();
  unint64_t v76 = &type metadata for String;
  sub_100027DD0();
  *(void *)&long long v75 = 0xD000000000000017;
  *((void *)&v75 + 1) = v11;
  sub_100013C10((uint64_t)&v75, v12, v13, v14);
  CFTypeRef v74 = 0;
  uint64_t v15 = v71;
  swift_bridgeObjectRetain();
  Dictionary._bridgeToObjectiveC()();
  sub_100027E68();
  OSStatus v16 = SecItemCopyMatching((CFDictionaryRef)&type metadata for String, &v74);

  if (v16)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;
    id v20 = objc_allocWithZone((Class)NSError);
    sub_10001641C(v17, v19, v16);
    swift_willThrow();
LABEL_16:
    swift_unknownObjectRelease();
LABEL_17:
    sub_100012088();
    return;
  }
  if (!v74) {
    goto LABEL_14;
  }
  *(void *)&long long v75 = v74;
  swift_unknownObjectRetain();
  sub_1000153C0(&qword_1000955A0);
  if ((sub_100027DEC() & 1) == 0) {
    goto LABEL_14;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10001679C();
  swift_bridgeObjectRelease();
  if (!v76)
  {
    swift_bridgeObjectRelease();
    sub_100015C5C((uint64_t)&v75, &qword_100095588);
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v21 = v72;
  uint64_t v69 = v73;
  uint64_t v22 = type metadata accessor for UUID();
  id v68 = v62;
  sub_100013844();
  uint64_t v67 = v23;
  __chkstk_darwin(v24);
  sub_1000120E0();
  uint64_t v65 = v25;
  uint64_t v26 = sub_1000153C0((uint64_t *)&unk_1000976C0);
  CFStringRef v66 = v62;
  uint64_t v27 = sub_100014774(v26);
  __chkstk_darwin(v27);
  sub_1000112DC();
  uint64_t v64 = v21;
  UUID.init(uuidString:)();
  sub_100015B08(v15, 1, v22);
  if (v38)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100015C5C(v15, (uint64_t *)&unk_1000976C0);
    sub_100027ECC();
LABEL_15:
    static RemotePairingError.pairingFailed.getter();
    sub_10000D9E4((unint64_t *)&unk_1000959D0);
    sub_100015738();
    sub_10000D9E4((unint64_t *)&unk_1000953D0);
    sub_10001471C();
    swift_willThrow();
    goto LABEL_16;
  }
  sub_100016EDC();
  v28();
  sub_100027ECC();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10001679C();
  swift_bridgeObjectRelease();
  if (!v76)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100015C5C((uint64_t)&v75, &qword_100095588);
LABEL_24:
    sub_100010EE4();
    v33();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if ((sub_10001637C() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  CFStringRef v66 = (void *)v22;
  uint64_t v30 = v72;
  unint64_t v29 = v73;
  uint64_t v31 = v70;
  OPACKDecode(data:)();
  if (v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000158A8(v30, v29);
    sub_100010EE4();
    v32();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v70 = v30;
  if ((sub_100027DEC() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000158A8(v70, v29);
    sub_100010EE4();
    v40();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v63 = v29;
  uint64_t v34 = v72;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10001679C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v76)
  {
    sub_100015C5C((uint64_t)&v75, &qword_100095588);
    goto LABEL_37;
  }
  if ((sub_10001637C() & 1) == 0) {
    goto LABEL_37;
  }
  if (kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate)
  {
    uint64_t v36 = v72;
    unint64_t v35 = v73;
    BOOL v38 = v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v35 == v37;
    if (v38)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      sub_100027EAC();
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0) {
        goto LABEL_37;
      }
    }
    sub_100026E18(v71);
LABEL_37:
    swift_bridgeObjectRelease();
    [objc_allocWithZone((Class)CUPairingIdentity) init];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    sub_100013A30((uint64_t)isa, "setIdentifier:");

    sub_100027EB8();
    sub_100015460(v34, v42);
    if (v76)
    {
      uint64_t v43 = sub_10001637C();
      if (v43)
      {
        uint64_t v44 = v72;
        unint64_t v45 = v73;
        v46.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v43 = sub_1000158A8(v44, v45);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v43 = sub_100015C5C((uint64_t)&v75, &qword_100095588);
    }
    v46.super.Class isa = 0;
LABEL_42:
    sub_100013A30(v43, "setAltIRK:");

    sub_100015460(v34, &v75);
    if (v76)
    {
      uint64_t v47 = sub_10001637C();
      if (v47)
      {
        uint64_t v48 = v72;
        unint64_t v49 = v73;
        v50.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v47 = sub_1000158A8(v48, v49);
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v47 = sub_100015C5C((uint64_t)&v75, &qword_100095588);
    }
    v50.super.Class isa = 0;
LABEL_47:
    sub_100013A30(v47, "setSecretKey:");

    sub_100015460(v34, &v75);
    swift_bridgeObjectRelease();
    if (v76)
    {
      uint64_t v51 = sub_10001637C();
      if (v51)
      {
        uint64_t v52 = v72;
        unint64_t v53 = v73;
        v54.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v51 = sub_1000158A8(v52, v53);
        uint64_t v55 = &unk_100098000;
LABEL_52:
        sub_100013A30(v51, "setPublicKey:");

        os_log_type_t v56 = static os_log_type_t.info.getter();
        uint64_t v57 = *((void *)v55 + 222);
        os_log_type_t v58 = v56;
        if (os_log_type_enabled(v57, v56))
        {
          uint64_t v59 = v69;
          swift_bridgeObjectRetain();
          uint64_t v60 = (uint8_t *)sub_100014750();
          *(void *)&long long v75 = swift_slowAlloc();
          *(_DWORD *)uint64_t v60 = 136315138;
          v62[1] = v60 + 4;
          swift_bridgeObjectRetain();
          uint64_t v72 = sub_100010478(v64, v59, (uint64_t *)&v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "Fetched existing system pairing identity (id=%s from keychain", v60, 0xCu);
          swift_arrayDestroy();
          sub_1000120B0();
          sub_1000120B0();
          sub_1000158A8(v70, v63);
        }
        else
        {
          sub_1000158A8(v70, v63);
          swift_bridgeObjectRelease();
        }
        sub_100010EE4();
        v61();
        swift_unknownObjectRelease();
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v51 = sub_100015C5C((uint64_t)&v75, &qword_100095588);
    }
    uint64_t v55 = &unk_100098000;
    v54.super.Class isa = 0;
    goto LABEL_52;
  }
  __break(1u);
}

void sub_100023A1C()
{
  sub_100015CAC();
  uint64_t v3 = v2;
  sub_100016BCC();
  if (!v1)
  {
    uint64_t v4 = type metadata accessor for UUID();
    uint64_t v36 = &v33;
    sub_100013844();
    uint64_t v35 = v5;
    uint64_t v7 = *(void *)(v6 + 64);
    __chkstk_darwin(v8);
    unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v34 = (char *)&v33 - v9;
    id v10 = [v3 identifier];
    uint64_t v11 = sub_1000153C0((uint64_t *)&unk_1000976C0);
    uint64_t v12 = sub_100014774(v11);
    __chkstk_darwin(v12);
    sub_100016EC4();
    if (v10)
    {
      __chkstk_darwin(v13);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v14 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
      v14(v0, (char *)&v33 - v9, v4);
      uint64_t v15 = sub_100013930();
      sub_100015C34(v15, v16, v17, v4);
      sub_100015B08(v0, 1, v4);
      if (!v18)
      {
        v14((uint64_t)v34, (char *)v0, v4);
        sub_100016DA4();
        static os_log_type_t.debug.getter();
        sub_1000153C0(&qword_100095570);
        uint64_t v19 = sub_10000D274();
        *(_OWORD *)(v19 + 16) = xmmword_100075C50;
        uint64_t v20 = UUID.uuidString.getter();
        uint64_t v22 = v21;
        *(void *)(v19 + 56) = &type metadata for String;
        *(void *)(v19 + 64) = sub_100016B8C();
        *(void *)(v19 + 32) = v20;
        *(void *)(v19 + 40) = v22;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_100014818();
        sub_100010EE4();
        v32();
LABEL_10:
        static os_log_type_t.debug.getter();
        os_log(_:dso:log:_:_:)();
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v23 = sub_100016AC8();
      sub_100015C34(v23, v24, v25, v4);
    }
    sub_100015C5C(v0, (uint64_t *)&unk_1000976C0);
    sub_100016DA4();
    static os_log_type_t.debug.getter();
    os_log(_:dso:log:_:_:)();
    sub_100013DE4();
    uint64_t v27 = sub_100023DBC(v26, v3);
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_10;
    }
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;
    id v31 = objc_allocWithZone((Class)NSError);
    sub_10001641C(v28, v30, -25300);
    swift_willThrow();
  }
LABEL_7:
  sub_100012088();
}

void *sub_100023DBC(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  unint64_t v4 = a1;
  if (a1 >> 62) {
    goto LABEL_94;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_95:

    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    uint64_t v72 = v3;
    unint64_t v80 = v4;
    unint64_t v81 = v4 & 0xC000000000000001;
    uint64_t v6 = 4;
    uint64_t v79 = v5;
LABEL_4:
    uint64_t v3 = v6 - 4;
    id v7 = v81 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v4 + 8 * v6);
    uint64_t v8 = v7;
    uint64_t v9 = v6 - 3;
    if (!__OFADD__(v3, 1)) {
      break;
    }
    __break(1u);
LABEL_94:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_95;
    }
  }
  uint64_t v10 = sub_100027A60(v7, (SEL *)&selRef_publicKey);
  unint64_t v12 = v11;
  uint64_t v14 = sub_100027A60(a2, (SEL *)&selRef_publicKey);
  unint64_t v15 = v13;
  if (v12 >> 60 == 15)
  {
    if (v13 >> 60 == 15)
    {

      swift_bridgeObjectRelease();
      return v8;
    }
LABEL_12:
    sub_100013BC4(v10, v12);
    uint64_t v16 = v14;
    unint64_t v17 = v15;
LABEL_13:
    sub_100013BC4(v16, v17);
    goto LABEL_14;
  }
  if (v13 >> 60 == 15) {
    goto LABEL_12;
  }
  uint64_t v18 = 0;
  unint64_t v19 = HIDWORD(v10);
  switch(v12 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v10), v10))
      {
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
      }
      uint64_t v18 = HIDWORD(v10) - (int)v10;
LABEL_21:
      uint64_t v22 = v10;
      uint64_t v23 = v10;
      uint64_t v24 = v8;
      char v25 = v19;
      sub_100020C9C(v22, v12);
      LOBYTE(v19) = v25;
      uint64_t v8 = v24;
      uint64_t v10 = v23;
      uint64_t v9 = v6 - 3;
      break;
    case 2uLL:
      uint64_t v21 = *(void *)(v10 + 16);
      uint64_t v20 = *(void *)(v10 + 24);
      uint64_t v18 = v20 - v21;
      if (!__OFSUB__(v20, v21)) {
        goto LABEL_21;
      }
      goto LABEL_98;
    case 3uLL:
      break;
    default:
      uint64_t v18 = BYTE6(v12);
      break;
  }
  unint64_t v26 = v15 >> 62;
  size_t v27 = BYTE6(v15);
  switch(v15 >> 62)
  {
    case 1uLL:
      LODWORD(v28) = HIDWORD(v14) - v14;
      if (__OFSUB__(HIDWORD(v14), v14)) {
        goto LABEL_100;
      }
      uint64_t v28 = (int)v28;
LABEL_31:
      if (v18 != v28)
      {
LABEL_40:
        sub_100013BC4(v14, v15);
        sub_100013BC4(v10, v12);
        uint64_t v16 = v10;
        unint64_t v17 = v12;
        goto LABEL_13;
      }
      if (v18 >= 1)
      {
        uint64_t v32 = v14 >> 32;
        switch(v12 >> 62)
        {
          case 1uLL:
            if (v10 >> 32 < (int)v10) {
              goto LABEL_101;
            }
            sub_100020C9C(v10, v12);
            sub_100020C9C(v14, v15);
            uint64_t v42 = __DataStorage._bytes.getter();
            if (!v42) {
              goto LABEL_54;
            }
            uint64_t v43 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v10, v43)) {
              goto LABEL_104;
            }
            v42 += (int)v10 - v43;
LABEL_54:
            __DataStorage._length.getter();
            sub_10002772C(v42, v14, v15, (BOOL *)__s1);
            if (v72) {
              goto LABEL_116;
            }
            sub_100013BC4(v14, v15);
            sub_100013BC4(v10, v12);
            sub_100013BC4(v14, v15);
            char v44 = __s1[0];
            sub_100013BC4(v10, v12);
            sub_100013BC4(v10, v12);
            if (v44) {
              goto LABEL_92;
            }
            break;
          case 2uLL:
            uint64_t v74 = *(void *)(v10 + 16);
            uint64_t v67 = *(void **)(v10 + 24);
            sub_100020C9C(v14, v15);
            swift_retain();
            swift_retain();
            uint64_t v35 = __DataStorage._bytes.getter();
            if (v35)
            {
              uint64_t v36 = v35;
              uint64_t v37 = __DataStorage._offset.getter();
              uint64_t v38 = v74;
              if (__OFSUB__(v74, v37)) {
                goto LABEL_103;
              }
              uint64_t v39 = v36 + v74 - v37;
            }
            else
            {
              uint64_t v39 = 0;
              uint64_t v38 = v74;
            }
            if (__OFSUB__(v67, v38)) {
              goto LABEL_102;
            }
            uint64_t v75 = v39;
            __DataStorage._length.getter();
            sub_10002772C(v75, v14, v15, (BOOL *)__s1);
            if (v72) {
              goto LABEL_117;
            }
            sub_100013BC4(v14, v15);
            swift_release();
            swift_release();
            char v46 = __s1[0];
            sub_100013BC4(v14, v15);
            sub_100013BC4(v10, v12);
            sub_100013BC4(v10, v12);
            if (v46) {
              goto LABEL_92;
            }
            break;
          case 3uLL:
            memset(__s1, 0, 14);
            if (!v26) {
              goto LABEL_57;
            }
            if (v26 == 1)
            {
              uint64_t v73 = v14 >> 32;
              if (v32 < (int)v14) {
                goto LABEL_106;
              }
              uint64_t v40 = __DataStorage._bytes.getter();
              if (v40)
              {
                id v68 = (char *)v40;
                uint64_t v41 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v14, v41)) {
                  goto LABEL_112;
                }
                uint64_t v69 = &v68[(int)v14 - v41];
              }
              else
              {
                uint64_t v69 = 0;
              }
              uint64_t v61 = __DataStorage._length.getter();
              unint64_t v45 = (uint64_t *)v69;
              if (!v69) {
                goto LABEL_113;
              }
              goto LABEL_86;
            }
            uint64_t v76 = *(void *)(v14 + 16);
            uint64_t v70 = *(char **)(v14 + 24);
            swift_retain();
            swift_retain();
            uint64_t v47 = __DataStorage._bytes.getter();
            if (v47)
            {
              uint64_t v48 = v47;
              uint64_t v49 = __DataStorage._offset.getter();
              uint64_t v50 = v76;
              if (__OFSUB__(v76, v49)) {
                goto LABEL_109;
              }
              uint64_t v51 = (const void *)(v48 + v76 - v49);
            }
            else
            {
              uint64_t v51 = 0;
              uint64_t v50 = v76;
            }
            uint64_t v78 = v51;
            os_log_type_t v56 = &v70[-v50];
            if (__OFSUB__(v70, v50)) {
              goto LABEL_108;
            }
            uint64_t v57 = __DataStorage._length.getter();
            os_log_type_t v58 = v78;
            if (!v78)
            {
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              sub_100013BC4(v14, v15);
              sub_100013BC4(v10, v12);
              __break(1u);
LABEL_117:
              sub_100013BC4(v14, v15);
              swift_release();
              swift_release();
              __break(1u);
              JUMPOUT(0x100024654);
            }
            goto LABEL_76;
          default:
            LOWORD(__s1[0]) = v10;
            BYTE2(__s1[0]) = BYTE2(v10);
            BYTE3(__s1[0]) = BYTE3(v10);
            BYTE4(__s1[0]) = v19;
            BYTE5(__s1[0]) = BYTE5(v10);
            BYTE6(__s1[0]) = BYTE6(v10);
            HIBYTE(__s1[0]) = HIBYTE(v10);
            LOWORD(__s1[1]) = v12;
            BYTE2(__s1[1]) = BYTE2(v12);
            BYTE3(__s1[1]) = BYTE3(v12);
            BYTE4(__s1[1]) = BYTE4(v12);
            BYTE5(__s1[1]) = BYTE5(v12);
            if (!v26)
            {
LABEL_57:
              uint64_t v83 = v14;
              __int16 v84 = v15;
              char v85 = BYTE2(v15);
              char v86 = BYTE3(v15);
              char v87 = BYTE4(v15);
              char v88 = BYTE5(v15);
              unint64_t v45 = &v83;
LABEL_89:
              int v62 = memcmp(__s1, v45, v27);
              sub_100013BC4(v14, v15);
              sub_100013BC4(v10, v12);
              sub_100013BC4(v10, v12);
              if (!v62) {
                goto LABEL_92;
              }
              break;
            }
            if (v26 == 1)
            {
              uint64_t v73 = v14 >> 32;
              if (v32 < (int)v14) {
                goto LABEL_105;
              }
              uint64_t v33 = __DataStorage._bytes.getter();
              if (v33)
              {
                uint64_t v65 = (char *)v33;
                uint64_t v34 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v14, v34)) {
                  goto LABEL_111;
                }
                CFStringRef v66 = &v65[(int)v14 - v34];
              }
              else
              {
                CFStringRef v66 = 0;
              }
              uint64_t v61 = __DataStorage._length.getter();
              unint64_t v45 = (uint64_t *)v66;
              if (!v66) {
                goto LABEL_115;
              }
LABEL_86:
              if (v61 >= v73 - (int)v14) {
                size_t v27 = v73 - (int)v14;
              }
              else {
                size_t v27 = v61;
              }
              goto LABEL_89;
            }
            uint64_t v77 = *(void *)(v14 + 16);
            uint64_t v71 = *(char **)(v14 + 24);
            swift_retain();
            swift_retain();
            uint64_t v52 = __DataStorage._bytes.getter();
            if (v52)
            {
              uint64_t v53 = v52;
              uint64_t v54 = __DataStorage._offset.getter();
              uint64_t v55 = v77;
              if (__OFSUB__(v77, v54)) {
                goto LABEL_110;
              }
              __s2 = (void *)(v53 + v77 - v54);
            }
            else
            {
              __s2 = 0;
              uint64_t v55 = v77;
            }
            os_log_type_t v56 = &v71[-v55];
            if (__OFSUB__(v71, v55)) {
              goto LABEL_107;
            }
            uint64_t v57 = __DataStorage._length.getter();
            os_log_type_t v58 = __s2;
            if (!__s2) {
              goto LABEL_114;
            }
LABEL_76:
            if (v57 >= (uint64_t)v56) {
              size_t v59 = (size_t)v56;
            }
            else {
              size_t v59 = v57;
            }
            int v60 = memcmp(__s1, v58, v59);
            swift_release();
            swift_release();
            sub_100013BC4(v14, v15);
            sub_100013BC4(v10, v12);
            sub_100013BC4(v10, v12);
            if (!v60) {
              goto LABEL_92;
            }
            break;
        }
LABEL_14:

        ++v6;
        unint64_t v4 = v80;
        if (v9 == v79) {
          goto LABEL_95;
        }
        goto LABEL_4;
      }
LABEL_91:
      sub_100013BC4(v14, v15);
      sub_100013BC4(v10, v12);
      sub_100013BC4(v10, v12);
LABEL_92:
      swift_bridgeObjectRelease();

      return v8;
    case 2uLL:
      uint64_t v30 = *(void *)(v14 + 16);
      uint64_t v29 = *(void *)(v14 + 24);
      BOOL v31 = __OFSUB__(v29, v30);
      uint64_t v28 = v29 - v30;
      if (!v31) {
        goto LABEL_31;
      }
      goto LABEL_99;
    case 3uLL:
      if (!v18) {
        goto LABEL_91;
      }
      goto LABEL_40;
    default:
      uint64_t v28 = BYTE6(v15);
      goto LABEL_31;
  }
}

void *sub_100024684(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v9 = 4;
    while (1)
    {
      id v10 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a1 + 8 * v9);
      unint64_t v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      if (CUPairedPeer.verify(authTag:data:type:)())
      {
        swift_bridgeObjectRelease();
        sub_1000158A8(a2, a3);
        goto LABEL_15;
      }

      ++v9;
      if (v12 == v8) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  sub_1000158A8(a2, a3);
  unint64_t v11 = 0;
LABEL_15:
  sub_1000158A8(a4, a5);
  return v11;
}

void sub_1000247EC()
{
  sub_100015CAC();
  type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v2);
  sub_100012078();
  uint64_t v5 = v4 - v3;
  sub_100016BCC();
  if (v1) {
    goto LABEL_9;
  }
  uint64_t v171 = v5;
  uint64_t v166 = v0;
  uint64_t v167 = 0;
  uint64_t v6 = type metadata accessor for UUID();
  sub_100013844();
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v11);
  unint64_t v12 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v169 = v13;
  v170 = (char *)v148 - v12;
  id v14 = [v13 identifier];
  uint64_t v15 = sub_1000153C0((uint64_t *)&unk_1000976C0);
  uint64_t v16 = sub_100014774(v15);
  __chkstk_darwin(v16);
  sub_100016EC4();
  if (!v14)
  {
    uint64_t v30 = sub_100016AC8();
    sub_100015C34(v30, v31, v32, v6);
    goto LABEL_7;
  }
  v168 = v148;
  __chkstk_darwin(v17);
  uint64_t v18 = (char *)v148 - v12;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v165 = v8;
  unint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v19(v0, v18, v6);
  uint64_t v20 = sub_100013930();
  sub_100015C34(v20, v21, v22, v6);
  sub_100015B08(v0, 1, v6);
  if (v23)
  {
LABEL_7:
    sub_100015C5C(v0, (uint64_t *)&unk_1000976C0);
    sub_100016DA4();
    goto LABEL_8;
  }
  uint64_t v24 = v6;
  uint64_t v25 = sub_100027EAC();
  ((void (*)(uint64_t))v19)(v25);
  sub_100016DA4();
  unint64_t v26 = v169;
  uint64_t v27 = sub_100027A60(v169, (SEL *)&selRef_altIRK);
  if (v28 >> 60 == 15)
  {
    sub_100010EE4();
    v29();
LABEL_8:
    static RemotePairingError.pairingFailed.getter();
    sub_10000D9E4((unint64_t *)&unk_1000959D0);
    sub_100015738();
    sub_10000D9E4((unint64_t *)&unk_1000953D0);
    sub_10001471C();
    swift_willThrow();
    goto LABEL_9;
  }
  uint64_t v33 = v27;
  unint64_t v34 = v28;
  uint64_t v35 = sub_100027A60(v26, (SEL *)&selRef_publicKey);
  if (v36 >> 60 == 15)
  {
    sub_100010EE4();
    v37();
    sub_100013BC4(v33, v34);
    goto LABEL_8;
  }
  unint64_t v38 = v36;
  uint64_t v181 = v35;
  uint64_t v39 = sub_100040940(v26);
  unint64_t v164 = v34;
  if (v40)
  {
    *((void *)&v177 + 1) = &type metadata for String;
    *(void *)&long long v176 = v39;
    *((void *)&v176 + 1) = v40;
    sub_10001673C(&v176, &v178);
  }
  else
  {
    unint64_t v41 = v38;
    uint64_t v42 = sub_1000408D4(v26);
    if (v42)
    {
      uint64_t v43 = v42;
      uint64_t v174 = 1701667182;
      unint64_t v175 = 0xE400000000000000;
      AnyHashable.init<A>(_:)();
      sub_10004A7B0(v43, &v178);
      sub_100027D34((uint64_t)&v176);
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v178 = 0u;
      long long v179 = 0u;
    }
    unint64_t v38 = v41;
    unint64_t v34 = v164;
  }
  if (!*((void *)&v179 + 1))
  {
    sub_100010EE4();
    v60();
    sub_100013BC4(v33, v34);
    sub_100013BC4(v181, v38);
    sub_100015C5C((uint64_t)&v178, &qword_100095588);
    goto LABEL_8;
  }
  sub_10001673C(&v178, v180);
  uint64_t v44 = sub_1000153C0(&qword_100096160);
  uint64_t v171 = v33;
  v163 = v148;
  uint64_t v45 = sub_100014774(v44);
  __chkstk_darwin(v45);
  sub_100012078();
  unint64_t v46 = v34;
  unint64_t v47 = v38;
  uint64_t v50 = v49 - v48;
  Date.init()();
  type metadata accessor for Date();
  uint64_t v51 = sub_100013930();
  sub_100015C34(v51, v52, v53, v54);
  uint64_t v55 = v169;
  sub_100068728(v50);
  v163 = (void *)sub_1000153C0(&qword_100095580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100075C80;
  *(void *)(inited + 32) = 0x4B5249746C61;
  *(void *)(inited + 40) = 0xE600000000000000;
  uint64_t v57 = v171;
  *(void *)(inited + 48) = v171;
  *(void *)(inited + 56) = v46;
  *(void *)(inited + 72) = &type metadata for Data;
  *(void *)(inited + 80) = 27504;
  *(void *)(inited + 120) = &type metadata for Data;
  *(void *)(inited + 88) = 0xE200000000000000;
  *(void *)(inited + 96) = v181;
  *(void *)(inited + 104) = v47;
  sub_100020C9C(v57, v46);
  unint64_t v162 = v47;
  sub_100020C9C(v181, v47);
  *(void *)&long long v178 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v58 = sub_1000279F4(v55);
  if (v58)
  {
    uint64_t v59 = v58;
    *((void *)&v177 + 1) = sub_1000153C0(&qword_1000955A8);
    *(void *)&long long v176 = v59;
  }
  else
  {
    long long v176 = 0u;
    long long v177 = 0u;
  }
  sub_100016260((uint64_t)&v176, 7103329, 0xE300000000000000);
  uint64_t v61 = sub_10004094C(v55);
  if (v62)
  {
    *((void *)&v177 + 1) = &type metadata for String;
    *(void *)&long long v176 = v61;
    *((void *)&v176 + 1) = v62;
  }
  else
  {
    long long v176 = 0u;
    long long v177 = 0u;
  }
  sub_100016260((uint64_t)&v176, 0x6C65646F6DLL, 0xE500000000000000);
  uint64_t v63 = sub_1000408D4(v55);
  if (v63)
  {
    uint64_t v64 = v63;
    *((void *)&v177 + 1) = sub_1000153C0(&qword_1000955A8);
    *(void *)&long long v176 = v64;
  }
  else
  {
    long long v176 = 0u;
    long long v177 = 0u;
  }
  sub_100016260((uint64_t)&v176, 1868983913, 0xE400000000000000);
  uint64_t v65 = v178;
  *((void *)&v177 + 1) = sub_1000153C0(&qword_1000955A0);
  *(void *)&long long v176 = v65;
  swift_bridgeObjectRetain();
  uint64_t v66 = v167;
  uint64_t v67 = (void *)OPACKEncoderCreateData(from:)();
  if (v66)
  {
    sub_100014780();
    swift_bridgeObjectRelease();
    sub_100010548((uint64_t)v180);
    sub_100010EE4();
    v69();
    sub_100010548((uint64_t)&v176);
    goto LABEL_9;
  }
  unint64_t v161 = v68;
  v169 = v67;
  uint64_t v159 = v24;
  sub_100010548((uint64_t)&v176);
  uint64_t v70 = swift_initStackObject();
  *(_OWORD *)(v70 + 16) = xmmword_100075C90;
  CFStringRef v158 = kSecClass;
  *(void *)(v70 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v70 + 40) = v71;
  type metadata accessor for CFString(0);
  uint64_t v160 = v72;
  *(void *)(v70 + 72) = v72;
  *(void *)(v70 + 48) = kSecClassGenericPassword;
  CFStringRef v157 = kSecAttrAccount;
  *(void *)(v70 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v70 + 88) = v73;
  CFStringRef v156 = (id)kSecClassGenericPassword;
  uint64_t v74 = UUID.uuidString.getter();
  *(void *)(v70 + 120) = &type metadata for String;
  *(void *)(v70 + 96) = v74;
  *(void *)(v70 + 104) = v75;
  if (kSecUseSystemKeychain)
  {
    v148[2] = kSecUseSystemKeychain;
    *(void *)(v70 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v70 + 136) = v76;
    *(void *)(v70 + 168) = &type metadata for Bool;
    *(unsigned char *)(v70 + 144) = 1;
    CFStringRef v151 = kSecAttrService;
    *(void *)(v70 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v70 + 184) = v77;
    *(void *)(v70 + 216) = &type metadata for String;
    *(void *)(v70 + 192) = 0xD00000000000001ALL;
    *(void *)(v70 + 200) = 0x800000010007A7C0;
    uint64_t v174 = Dictionary.init(dictionaryLiteral:)();
    CFStringRef v155 = kSecAttrAccessGroup;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100016064();
    *((void *)&v177 + 1) = &type metadata for String;
    sub_100027DD0();
    uint64_t v153 = v78;
    uint64_t v154 = v79;
    *(void *)&long long v176 = v79;
    *((void *)&v176 + 1) = v78;
    sub_100013C10((uint64_t)&v176, v80, v81, v82);
    CFStringRef v152 = kSecAttrAccessible;
    uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v85 = v84;
    *((void *)&v177 + 1) = v160;
    *(void *)&long long v176 = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    v150 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    sub_100016260((uint64_t)&v176, v83, v85);
    uint64_t v86 = swift_initStackObject();
    *(_OWORD *)(v86 + 16) = xmmword_100075CA0;
    v148[1] = kSecAttrDescription;
    *(void *)(v86 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v86 + 40) = v87;
    *(void *)(v86 + 72) = &type metadata for String;
    *(void *)(v86 + 48) = 0xD00000000000001ALL;
    *(void *)(v86 + 56) = 0x800000010007A7C0;
    unint64_t v149 = 0x800000010007A7C0;
    v148[0] = kSecAttrLabel;
    *(void *)(v86 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v86 + 88) = v88;
    sub_100015404((uint64_t)v180, v86 + 96);
    *(void *)(v86 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v86 + 136) = v89;
    *(void *)(v86 + 168) = &type metadata for Data;
    uint64_t v90 = (uint64_t)v169;
    unint64_t v91 = v161;
    *(void *)(v86 + 144) = v169;
    *(void *)(v86 + 152) = v91;
    sub_100015BB4(v90, v91);
    Dictionary.init(dictionaryLiteral:)();
    swift_bridgeObjectRetain();
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CFDictionaryRef v93 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v94 = SecItemUpdate(isa, v93);

    if (v94 == -25300)
    {
      uint64_t v167 = 0;
      uint64_t v100 = swift_allocObject();
      *(_OWORD *)(v100 + 16) = xmmword_100075C60;
      *(void *)(v100 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v100 + 40) = v101;
      *(void *)(v100 + 72) = v160;
      v102 = (__CFString *)v156;
      *(void *)(v100 + 48) = v156;
      *(void *)(v100 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v100 + 88) = v103;
      v104 = v102;
      uint64_t v105 = UUID.uuidString.getter();
      *(void *)(v100 + 120) = &type metadata for String;
      *(void *)(v100 + 96) = v105;
      *(void *)(v100 + 104) = v106;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v100 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v100 + 136) = v107;
      *(void *)(v100 + 168) = &type metadata for Bool;
      *(unsigned char *)(v100 + 144) = 1;
      *(void *)(v100 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v100 + 184) = v108;
      *(void *)(v100 + 216) = &type metadata for String;
      unint64_t v109 = v149;
      *(void *)(v100 + 192) = 0xD00000000000001ALL;
      *(void *)(v100 + 200) = v109;
      *(void *)(v100 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v100 + 232) = v110;
      sub_100015404((uint64_t)v180, v100 + 240);
      *(void *)(v100 + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v100 + 280) = v111;
      *(void *)(v100 + 312) = &type metadata for String;
      *(void *)(v100 + 288) = 0xD00000000000001ALL;
      *(void *)(v100 + 296) = v109;
      unint64_t v112 = v161;
      *(void *)(v100 + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v100 + 328) = v113;
      *(void *)(v100 + 360) = &type metadata for Data;
      uint64_t v114 = (uint64_t)v169;
      *(void *)(v100 + 336) = v169;
      *(void *)(v100 + 344) = v112;
      sub_100015BB4(v114, v112);
      uint64_t v173 = Dictionary.init(dictionaryLiteral:)();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100016064();
      *((void *)&v177 + 1) = &type metadata for String;
      *(void *)&long long v176 = v154;
      *((void *)&v176 + 1) = v153;
      sub_100013C10((uint64_t)&v176, v115, v116, v117);
      uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v120 = v119;
      *((void *)&v177 + 1) = v160;
      *(void *)&long long v176 = v150;
      v121 = v150;
      sub_100016260((uint64_t)&v176, v118, v120);
      Dictionary._bridgeToObjectiveC()();
      sub_100027E68();
      uint64_t v122 = SecItemAdd((CFDictionaryRef)&protocol witness table for String, 0);

      if (!v122)
      {
        sub_100027E34();
        uint64_t v142 = *(void *)(v122 + 16);
        uint64_t v143 = *(void *)(v142 + 16);
        if (v143)
        {
          swift_bridgeObjectRetain();
          uint64_t v144 = v142 + 40;
          unint64_t v146 = v164;
          uint64_t v145 = v165;
          do
          {
            v147 = *(void (**)(char *))(v144 - 8);
            char v172 = 0;
            swift_retain();
            v147(&v172);
            swift_release();
            v144 += 16;
            --v143;
          }
          while (v143);
        }
        else
        {
          swift_bridgeObjectRetain();
          unint64_t v146 = v164;
          uint64_t v145 = v165;
        }
        sub_1000158A8((uint64_t)v169, v112);
        sub_100013BC4(v181, v162);
        sub_100013BC4(v171, v146);
        swift_bridgeObjectRelease();
        sub_100010548((uint64_t)v180);
        (*(void (**)(char *, uint64_t))(v145 + 8))(v170, v159);
        goto LABEL_9;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100027DDC();
      id v123 = objc_allocWithZone((Class)NSError);
      id v124 = sub_1000168EC();
      static os_log_type_t.error.getter();
      sub_1000153C0(&qword_100095570);
      uint64_t v125 = sub_10000D274();
      *(_OWORD *)(v125 + 16) = xmmword_100075C50;
      id v126 = v124;
      id v127 = [v126 description];
      uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v130 = v129;

      *(void *)(v125 + 56) = &type metadata for String;
      *(void *)(v125 + 64) = sub_100016B8C();
      *(void *)(v125 + 32) = v128;
      *(void *)(v125 + 40) = v130;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_willThrow();
      uint64_t v131 = (uint64_t)v169;
      unint64_t v132 = v112;
    }
    else
    {
      if (!v94)
      {
        uint64_t v167 = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100027E34();
        uint64_t v95 = *(void *)(v94 + 16);
        uint64_t v96 = *(void *)(v95 + 16);
        if (v96)
        {
          swift_bridgeObjectRetain();
          uint64_t v97 = v95 + 40;
          uint64_t v98 = v165;
          do
          {
            uint64_t v99 = *(void (**)(uint64_t *))(v97 - 8);
            LOBYTE(v173) = 2;
            swift_retain();
            v99(&v173);
            swift_release();
            v97 += 16;
            --v96;
          }
          while (v96);
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v98 = v165;
        }
        sub_1000158A8((uint64_t)v169, v161);
        sub_100014780();
        swift_bridgeObjectRelease();
        sub_100010548((uint64_t)v180);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v170, v159);
        goto LABEL_9;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100027DDC();
      id v133 = objc_allocWithZone((Class)NSError);
      id v134 = sub_1000168EC();
      static os_log_type_t.error.getter();
      sub_1000153C0(&qword_100095570);
      uint64_t v135 = sub_10000D274();
      *(_OWORD *)(v135 + 16) = xmmword_100075C50;
      id v136 = v134;
      id v137 = [v136 description];
      uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v140 = v139;

      *(void *)(v135 + 56) = &type metadata for String;
      *(void *)(v135 + 64) = sub_100016B8C();
      *(void *)(v135 + 32) = v138;
      *(void *)(v135 + 40) = v140;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_willThrow();
      uint64_t v131 = (uint64_t)v169;
      unint64_t v132 = v161;
    }
    sub_1000158A8(v131, v132);
    sub_100014780();
    sub_100010548((uint64_t)v180);
    sub_100010EE4();
    v141();
LABEL_9:
    sub_100012088();
    return;
  }
  __break(1u);
}

void sub_1000256DC(uint64_t a1, unint64_t a2, void (*a3)(void), uint64_t a4)
{
  sub_100015BB4(a1, a2);
  swift_retain();

  sub_100021C60(v4, a1, a2, a3, a4);
}

uint64_t sub_100025748(void *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(void *, unint64_t, uint64_t))
{
  uint64_t v6 = a1;
  if (a2)
  {
    swift_errorRetain();
    unint64_t v10 = 0;
    uint64_t v11 = 1;
  }
  else
  {
    id v7 = a1;
    uint64_t v8 = CUPairingIdentity.authTag(for:type:)();
    unint64_t v10 = v9;
    sub_100027720(v6, 0);
    uint64_t v11 = 0;
    uint64_t v6 = (void *)v8;
  }
  a5(v6, v10, v11);

  return sub_10000D998((uint64_t)v6, v10, v11);
}

uint64_t sub_100025840()
{
  sub_100013DE4();
  if (!v0)
  {
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      sub_100027E68();
    }
    else
    {
      uint64_t v1 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_1000258B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  sub_100052EF8();
  uint64_t v6 = *(void *)(*(void *)(v2 + 16) + 16);
  sub_10005307C();
  uint64_t v7 = *(void *)(v2 + 16);
  *(void *)(v7 + 16) = v6 + 1;
  uint64_t v8 = v7 + 16 * v6;
  *(void *)(v8 + 32) = sub_100027D08;
  *(void *)(v8 + 40) = v5;
  return swift_endAccess();
}

void sub_100025974()
{
  sub_100015CAC();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  type metadata accessor for RemotePairingError();
  sub_100013844();
  __chkstk_darwin(v5);
  sub_1000120C8();
  sub_100016BCC();
  if (v1) {
    goto LABEL_16;
  }
  uint64_t v6 = type metadata accessor for UUID();
  int v42 = sub_100015C0C(v4, 1, v6);
  sub_1000153C0(&qword_100095580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100075CA0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v8;
  type metadata accessor for CFString(0);
  *(void *)(inited + 72) = v9;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  if (kSecUseSystemKeychain)
  {
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 88) = v10;
    *(void *)(inited + 120) = &type metadata for Bool;
    *(unsigned char *)(inited + 96) = 1;
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 136) = v11;
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = 0xD00000000000001ALL;
    *(void *)(inited + 152) = 0x800000010007A7C0;
    CFStringRef v12 = (id)kSecClassGenericPassword;
    uint64_t v46 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    uint64_t v16 = sub_1000153C0((uint64_t *)&unk_1000976C0);
    uint64_t v17 = sub_100014774(v16);
    __chkstk_darwin(v17);
    sub_100016EC4();
    sub_100027C68(v4, 0xD000000000000017);
    sub_100015B08(0xD000000000000017, 1, v6);
    if (v18)
    {
      sub_100015C5C(0xD000000000000017, (uint64_t *)&unk_1000976C0);
      long long v45 = 0u;
      long long v44 = 0u;
    }
    else
    {
      *((void *)&v45 + 1) = &type metadata for String;
      *(void *)&long long v44 = UUID.uuidString.getter();
      *((void *)&v44 + 1) = v19;
      sub_100010EE4();
      v20();
    }
    sub_100016260((uint64_t)&v44, v13, v15);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100016064();
    *((void *)&v45 + 1) = &type metadata for String;
    sub_100027DD0();
    *(void *)&long long v44 = 0xD000000000000017;
    *((void *)&v44 + 1) = v21;
    sub_100013C10((uint64_t)&v44, v22, v23, v24);
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    OSStatus v26 = SecItemDelete(isa);

    if (!v26) {
      goto LABEL_9;
    }
    if (v26 == -25300)
    {
      if (v42 == 1)
      {
LABEL_9:
        swift_beginAccess();
        uint64_t v27 = *(void *)(v2 + 16);
        uint64_t v28 = *(void *)(v27 + 16);
        if (v28)
        {
          swift_bridgeObjectRetain();
          uint64_t v29 = v27 + 40;
          do
          {
            uint64_t v30 = *(void (**)(char *))(v29 - 8);
            char v43 = 1;
            swift_retain();
            v30(&v43);
            swift_release();
            v29 += 16;
            --v28;
          }
          while (v28);
          swift_bridgeObjectRelease();
        }
        goto LABEL_16;
      }
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;
      id v39 = objc_allocWithZone((Class)NSError);
      id v35 = sub_10001641C(v36, v38, -25300);
      static RemotePairingError.pairingRecordNotFound.getter();
    }
    else
    {
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;
      id v34 = objc_allocWithZone((Class)NSError);
      id v35 = sub_10001641C(v31, v33, v26);
      static RemotePairingError.pairingRecordRemovalFailed.getter();
    }
    sub_10000D9E4((unint64_t *)&unk_1000959D0);
    swift_allocError();
    sub_10000D9E4((unint64_t *)&unk_1000953D0);
    id v40 = v35;
    _Error.wrapping(_:)();

    sub_100010EE4();
    v41();
    swift_willThrow();

LABEL_16:
    sub_100012088();
    return;
  }
  __break(1u);
}

void sub_100025E94()
{
  sub_100016BCC();
  uint64_t v2 = v1;
  if (v1) {
    return;
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  sub_100013DE4();
  unint64_t v5 = v3;
  if (!(v3 >> 62))
  {
    uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_4;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_43:
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_38;
  }
LABEL_4:
  unint64_t v129 = v5 & 0xC000000000000001;
  uint64_t v122 = &v144;
  uint64_t v7 = 4;
  *(void *)&long long v4 = 136315138;
  long long v121 = v4;
  uint64_t v120 = (char *)&type metadata for Any + 8;
  *(void *)&long long v4 = 136315394;
  long long v114 = v4;
  uint64_t v127 = v6;
  unint64_t v128 = v5;
  unint64_t v126 = v0;
  while (1)
  {
    if (v129) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v5 + 8 * v7);
    }
    uint64_t v9 = v8;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    uint64_t v139 = v2;
    uint64_t v135 = v7 - 3;
    uint64_t v10 = type metadata accessor for UUID();
    id v137 = &v114;
    sub_100013844();
    uint64_t v12 = v11;
    uint64_t v14 = *(void *)(v13 + 64);
    __chkstk_darwin(v15);
    unint64_t v16 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    v141 = (char *)&v114 - v16;
    id v142 = v9;
    id v17 = [v9 identifier];
    uint64_t v18 = sub_1000153C0((uint64_t *)&unk_1000976C0);
    uint64_t v19 = sub_100014774(v18);
    __chkstk_darwin(v19);
    uint64_t v132 = v20;
    sub_100015940();
    if (!v17) {
      break;
    }
    uint64_t v136 = v7;
    uint64_t v130 = v14;
    __chkstk_darwin(v21);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v138 = v12;
    uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
    v22(v7 - 4, (char *)&v114 - v16, v10);
    uint64_t v23 = sub_100016CF4();
    sub_100015C34(v23, v24, v25, v10);
    sub_100015B08(v7 - 4, 1, v10);
    if (v26) {
      goto LABEL_46;
    }
    uint64_t v140 = v10;
    v22((uint64_t)v141, (char *)(v7 - 4), v10);
    uint64_t v27 = type metadata accessor for Date();
    sub_100013844();
    id v134 = v28;
    uint64_t v30 = *(void *)(v29 + 64);
    __chkstk_darwin(v31);
    unint64_t v32 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v33 = (char *)&v114 - v32;
    uint64_t v34 = sub_1000153C0(&qword_100096160);
    uint64_t v35 = sub_100014774(v34);
    __chkstk_darwin(v35);
    uint64_t v131 = v36;
    sub_100027E58();
    sub_100068858((uint64_t)&v114);
    sub_100015B08((uint64_t)&v114, 1, v27);
    if (v26)
    {
      uint64_t v133 = v27;
      sub_100015C5C((uint64_t)&v114, &qword_100096160);
      uint64_t v37 = static os_log_type_t.default.getter();
      uint64_t v38 = qword_1000986F0;
      uint64_t v39 = os_log_type_enabled((os_log_t)qword_1000986F0, (os_log_type_t)v37);
      uint64_t v40 = v139;
      id v41 = v142;
      if (v39)
      {
        LODWORD(v134) = v37;
        int v42 = (long long *)v142;
        char v43 = (uint8_t *)sub_100014750();
        uint64_t v44 = swift_slowAlloc();
        os_log_t v123 = (os_log_t)&v114;
        uint64_t v125 = v44;
        uint64_t v145 = v44;
        *(_DWORD *)char v43 = v121;
        __chkstk_darwin(v44);
        sub_1000121AC();
        id v124 = v42;
        id v45 = [v42 identifier];
        if (__chkstk_darwin(v45))
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v46 = 0;
        }
        else
        {
          uint64_t v46 = 1;
        }
        uint64_t v71 = v140;
        sub_100015C34((uint64_t)&v114 - v32, v46, 1, v140);
        sub_100027BBC((uint64_t)&v114 - v32, v37);
        uint64_t v72 = sub_100015C0C(v37, 1, v71);
        id v41 = v142;
        if (v72)
        {
          sub_100015C5C(v37, (uint64_t *)&unk_1000976C0);
          uint64_t v73 = 0;
          uint64_t v74 = 0;
        }
        else
        {
          __chkstk_darwin(v72);
          uint64_t v76 = (char *)&v114 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
          uint64_t v77 = v138;
          sub_100015CF0();
          v78();
          sub_100015C5C(v37, (uint64_t *)&unk_1000976C0);
          uint64_t v73 = UUID.uuidString.getter();
          uint64_t v79 = v71;
          uint64_t v74 = v80;
          (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v79);
          id v41 = v142;
        }
        uint64_t v143 = v73;
        uint64_t v144 = v74;
        sub_1000153C0(&qword_100095590);
        uint64_t v81 = String.init<A>(describing:)();
        uint64_t v143 = sub_100010478(v81, v82, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v83 = v124;

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v134, "Found old peer %s without last used date set. Setting last used date to now.", v43, 0xCu);
        uint64_t v38 = v125;
        swift_arrayDestroy();
        sub_1000120B0();
        uint64_t v39 = sub_1000120B0();
      }
      __chkstk_darwin(v39);
      sub_100015940();
      Date.init()();
      uint64_t v84 = sub_100016CF4();
      sub_100015C34(v84, v85, v86, v133);
      sub_100068728((uint64_t)v38);
      unint64_t v0 = v126;
      sub_1000247EC();
      uint64_t v2 = v40;
      if (v40)
      {

        sub_100010EE4();
        v110();
        swift_bridgeObjectRelease();
        return;
      }
      sub_100010EE4();
      v87();

      uint64_t v88 = v127;
      unint64_t v5 = v128;
      uint64_t v89 = v136;
      uint64_t v90 = v135;
    }
    else
    {
      uint64_t v131 = &v114;
      unint64_t v47 = v134;
      sub_100016EDC();
      uint64_t v49 = v48();
      __chkstk_darwin(v49);
      Date.init()();
      Date.distance(to:)();
      double v51 = v50;
      uint64_t v52 = v47 + 8;
      uint64_t v53 = (void (*)(void))*((void *)v47 + 1);
      sub_1000169F4();
      v53();
      unint64_t v0 = sub_100027B7C();
      if (sub_1000688C0() >= v51)
      {

        sub_1000169F4();
        v53();
        sub_100010EE4();
        v69();
        uint64_t v2 = v139;
      }
      else
      {
        uint64_t v54 = static os_log_type_t.default.getter();
        int v55 = v54;
        os_log_type_t v56 = &v114;
        uint64_t v57 = qword_1000986F0;
        __chkstk_darwin(v54);
        sub_100027E58();
        uint64_t v58 = (void (*)(long long *, char *, uint64_t))*((void *)v134 + 2);
        id v134 = v33;
        v58(&v114, v33, v27);
        BOOL v59 = os_log_type_enabled(v57, (os_log_type_t)v55);
        uint64_t v60 = v139;
        uint64_t v133 = v27;
        if (v59)
        {
          uint64_t v118 = &v114;
          int v119 = v55;
          os_log_t v123 = v57;
          id v124 = &v114;
          uint64_t v125 = v53;
          id v61 = v142;
          uint64_t v62 = swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          uint64_t v115 = &v114;
          uint64_t v117 = v63;
          uint64_t v145 = v63;
          *(_DWORD *)uint64_t v62 = v114;
          __chkstk_darwin(v63);
          sub_1000121AC();
          id v116 = v61;
          id v64 = [v61 identifier];
          uint64_t v65 = __chkstk_darwin(v64);
          uint64_t v66 = v140;
          uint64_t v67 = v138;
          if (v65)
          {
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v68 = 0;
          }
          else
          {
            uint64_t v68 = 1;
          }
          uint64_t v91 = v130;
          sub_100015C34((char *)&v114 - v52, v68, 1, v66);
          sub_100027BBC((char *)&v114 - v52, (uint64_t)v57);
          uint64_t v92 = sub_100015C0C((uint64_t)v57, 1, v66);
          if (v92)
          {
            sub_100015C5C((uint64_t)v57, (uint64_t *)&unk_1000976C0);
            uint64_t v93 = 0;
            uint64_t v94 = 0;
          }
          else
          {
            __chkstk_darwin(v92);
            sub_100027E58();
            sub_100027EAC();
            sub_100015CF0();
            v95();
            sub_100015C5C((uint64_t)v57, (uint64_t *)&unk_1000976C0);
            uint64_t v93 = UUID.uuidString.getter();
            uint64_t v96 = v66;
            uint64_t v94 = v97;
            (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v91, v96);
          }
          uint64_t v60 = v139;
          uint64_t v143 = v93;
          uint64_t v144 = v94;
          sub_1000153C0(&qword_100095590);
          uint64_t v98 = String.init<A>(describing:)();
          uint64_t v143 = sub_100010478(v98, v99, &v145);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v100 = v116;

          swift_bridgeObjectRelease();
          *(_WORD *)(v62 + 12) = 2080;
          sub_100027C24();
          uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v143 = sub_100010478(v101, v102, &v145);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v53 = (void (*)(void))v125;
          sub_1000169F4();
          v53();
          _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v119, "Found expired peer %s with last used date %s. Removing.", (uint8_t *)v62, 0x16u);
          swift_arrayDestroy();
          sub_1000120B0();
          uint64_t v70 = sub_1000120B0();
          unint64_t v0 = v126;
          os_log_type_t v56 = v124;
        }
        else
        {
          sub_1000169F4();
          uint64_t v70 = ((uint64_t (*)(void))v53)();
          unint64_t v0 = v126;
        }
        __chkstk_darwin(v70);
        sub_100015940();
        uint64_t v103 = v140;
        sub_100015CF0();
        v104();
        uint64_t v105 = sub_100016CF4();
        sub_100015C34(v105, v106, v107, v103);
        sub_100025974();
        uint64_t v2 = v60;
        if (v60)
        {

          sub_100015C5C((uint64_t)v56, (uint64_t *)&unk_1000976C0);
          sub_1000169F4();
          v53();
          uint64_t v111 = sub_100016CAC();
          v112(v111);
          swift_bridgeObjectRelease();
          return;
        }

        sub_100015C5C((uint64_t)v56, (uint64_t *)&unk_1000976C0);
        sub_1000169F4();
        v53();
        uint64_t v108 = sub_100016CAC();
        v109(v108);
      }
      uint64_t v88 = v127;
      unint64_t v5 = v128;
      uint64_t v89 = v136;
      uint64_t v90 = v135;
    }
    uint64_t v7 = v89 + 1;
    if (v90 == v88) {
      goto LABEL_38;
    }
  }
  sub_100015C34(v7 - 4, 1, 1, v10);
LABEL_46:
  sub_100015C5C(v7 - 4, (uint64_t *)&unk_1000976C0);
  int v113 = 0;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100026BBC(unint64_t a1)
{
  sub_100016BCC();
  if (!v2)
  {
    v27[1] = v1;
    uint64_t v4 = type metadata accessor for Date();
    v27[7] = v27;
    sub_100013844();
    uint64_t v6 = v5;
    uint64_t v8 = *(void *)(v7 + 64);
    __chkstk_darwin(v9);
    unint64_t v10 = a1;
    unint64_t v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v12 = sub_1000153C0(&qword_100096160);
    v27[3] = v27;
    uint64_t v13 = sub_100014774(v12);
    uint64_t v15 = *(void *)(v14 + 64);
    __chkstk_darwin(v13);
    v27[2] = v10;
    sub_100068858((uint64_t)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    sub_100015B08((uint64_t)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4);
    if (v16)
    {
      sub_100015C5C((uint64_t)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100096160);
      sub_100016DA4();
LABEL_6:
      __chkstk_darwin(v23);
      sub_100015954();
      Date.init()();
      uint64_t v24 = sub_100013930();
      sub_100015C34(v24, v25, v26, v4);
      sub_100068728(v10);
      sub_1000247EC();
      return;
    }
    sub_100016EDC();
    uint64_t v18 = v17();
    __chkstk_darwin(v18);
    Date.init()();
    Date.distance(to:)();
    double v20 = v19;
    uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21((char *)v27 - v11, v4);
    unint64_t v10 = sub_100027B7C();
    double v22 = sub_10006898C();
    v21((char *)v27 - v11, v4);
    sub_100016DA4();
    if (v22 < v20) {
      goto LABEL_6;
    }
  }
}

void sub_100026E18(uint64_t a1)
{
  uint64_t v39 = a1;
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;
  long long v37 = 0u;
  long long v38 = 0u;
  swift_bridgeObjectRetain();
  sub_100016260((uint64_t)&v37, v1, v3);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100016064();
  long long v37 = 0u;
  long long v38 = 0u;
  sub_100013C10((uint64_t)&v37, v4, v5, v6);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  uint64_t v8 = qword_1000986F0;
  uint64_t v9 = v39;
  swift_bridgeObjectRetain_n();
  if (os_log_type_enabled(v8, v7))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100015460(v9, &v37);
    swift_bridgeObjectRelease();
    sub_1000153C0(&qword_100095588);
    uint64_t v11 = String.init<A>(describing:)();
    sub_100010478(v11, v12, &v36);
    sub_100012174();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100015460(v9, &v37);
    swift_bridgeObjectRelease();
    uint64_t v13 = String.init<A>(describing:)();
    sub_100010478(v13, v14, &v36);
    sub_100012174();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v7, "Migrating storage class of keychain item (account=%s, service=%s)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    sub_1000120B0();
    sub_1000120B0();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  sub_1000153C0(&qword_100095580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100075C50;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v16;
  type metadata accessor for CFString(0);
  *(void *)(inited + 72) = v17;
  *(void *)(inited + 48) = kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  CFStringRef v18 = (id)kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  sub_100011270();
  Dictionary.init(dictionaryLiteral:)();
  swift_beginAccess();
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100011270();
  Dictionary._bridgeToObjectiveC()();
  sub_100027E68();
  OSStatus v20 = SecItemUpdate(isa, (CFDictionaryRef)((char *)&type metadata for Any + 8));

  if (v20)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
    id v24 = objc_allocWithZone((Class)NSError);
    id v25 = sub_10001641C(v21, v23, v20);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    uint64_t v27 = qword_1000986F0;
    os_log_type_t v28 = v26;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v26))
    {
      id v29 = v25;
      uint64_t v30 = (uint8_t *)sub_100014750();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      id v31 = v29;
      id v32 = [v31 description];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;

      sub_100010478(v33, v35, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to migrate keychain item accessibility: %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
    swift_willThrow();
  }
}

void *sub_1000272D8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (RPIdentity)
  {
    sub_100013DE4();
    unint64_t v9 = v8;
    sub_100015BB4(a1, a2);
    sub_100015BB4(a3, a4);
    uint64_t v10 = sub_100024684(v9, a1, a2, a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    static os_log_type_t.fault.getter();
    os_log(_:dso:log:_:_:)();
    return 0;
  }
  return v10;
}

uint64_t sub_1000273CC()
{
  swift_bridgeObjectRelease();
  sub_100010548(v0 + 24);
  sub_100010548(v0 + 64);

  return v0;
}

uint64_t sub_100027404()
{
  sub_1000273CC();

  return _swift_deallocClassInstance(v0, 112, 7);
}

uint64_t getEnumTagSinglePayload for SystemKeychainPairingManager.PeersChangedEvent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SystemKeychainPairingManager.PeersChangedEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002758CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1000275B4(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000275BC(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SystemKeychainPairingManager.PeersChangedEvent()
{
  return &type metadata for SystemKeychainPairingManager.PeersChangedEvent;
}

unint64_t sub_1000275D8()
{
  unint64_t result = qword_100095560;
  if (!qword_100095560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095560);
  }
  return result;
}

void sub_100027624(void (*a1)(void))
{
}

void sub_100027648()
{
}

void sub_10002766C()
{
}

void *sub_100027690(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1000272D8(a1, a2, a3, a4);
}

uint64_t sub_1000276B4(uint64_t a1, uint64_t a2)
{
  return sub_100017038(a1, a2);
}

void sub_1000276D8(uint64_t a1, unint64_t a2, void (*a3)(void), uint64_t a4)
{
}

uint64_t sub_1000276FC()
{
  return sub_100025840();
}

void sub_100027720(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_10002772C@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, BOOL *a4@<X8>)
{
  uint64_t v6 = v4;
  uint64_t v7 = a3;
  unint64_t v9 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain();
      char v14 = sub_100027954((int)a2, a2 >> 32, v7 & 0x3FFFFFFFFFFFFFFFLL, v9);
      if (v6) {
        goto LABEL_16;
      }
      BOOL v10 = v14;
      __s1 = sub_1000158A8(a2, v7);
      break;
    case 2uLL:
      uint64_t v7 = a3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      char v13 = sub_100027954(v11, v12, v7, v9);
      if (v6) {
        goto LABEL_15;
      }
      BOOL v10 = v13;
      swift_release();
      __s1 = swift_release();
      break;
    case 3uLL:
      if (!__s1) {
        goto LABEL_14;
      }
      BOOL v10 = 1;
      break;
    default:
      uint64_t __s2 = a2;
      __int16 v16 = a3;
      char v17 = BYTE2(a3);
      char v18 = BYTE3(a3);
      char v19 = BYTE4(a3);
      char v20 = BYTE5(a3);
      if (!__s1)
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        swift_release();
        swift_release();
        __break(1u);
LABEL_16:
        sub_1000158A8(a2, v7);
        __break(1u);
        JUMPOUT(0x100027944);
      }
      __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
      BOOL v10 = __s1 == 0;
      break;
  }
  *a4 = v10;
  return __s1;
}

uint64_t sub_100027954(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  unint64_t v8 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  return memcmp(a4, v8, v11) == 0;
}

uint64_t sub_1000279F4(void *a1)
{
  id v1 = [a1 acl];
  if (!v1) {
    return 0;
  }
  int v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100027A60(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void sub_100027AC0(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setSecretKey:isa];
}

uint64_t sub_100027B18()
{
  sub_1000158A8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100027B58(void *a1, char a2)
{
  return sub_100025748(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *, unint64_t, uint64_t))(v2 + 32));
}

void sub_100027B6C(void *a1, unint64_t a2, char a3)
{
  sub_10002214C(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void (**)(void *, uint64_t))(v3 + 24));
}

unint64_t sub_100027B7C()
{
  unint64_t result = qword_100096150;
  if (!qword_100096150)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100096150);
  }
  return result;
}

uint64_t sub_100027BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0((uint64_t *)&unk_1000976C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100027C24()
{
  unint64_t result = qword_100095598;
  if (!qword_100095598)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095598);
  }
  return result;
}

uint64_t sub_100027C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0((uint64_t *)&unk_1000976C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027CD0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100027D08(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100027D34(uint64_t a1)
{
  return a1;
}

uint64_t sub_100027D8C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100027DEC()
{
  return swift_dynamicCast();
}

uint64_t sub_100027E10()
{
  return swift_dynamicCast();
}

uint64_t sub_100027E34()
{
  return swift_beginAccess();
}

uint64_t sub_100027E68()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100027E80()
{
  return v0;
}

uint64_t sub_100027E98()
{
  return v0;
}

uint64_t sub_100027EAC()
{
  return v0;
}

uint64_t sub_100027EB8()
{
  return 0x4B5249746C61;
}

uint64_t sub_100027EE4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100027EFC(unint64_t a1)
{
  uint64_t v2 = v1;
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = qword_1000986F0;
  os_log_type_t v6 = v4;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000986F0, v4);
  if (result)
  {
    sub_10002A364(a1);
    swift_retain();
    sub_10002A364(a1);
    swift_retain();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    sub_10002A364(a1);
    uint64_t v9 = String.init<A>(describing:)();
    sub_100010478(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002A4F0(a1);
    sub_10002A4F0(a1);
    *(_WORD *)(v8 + 12) = 2082;
    sub_10002A364(*(void *)(v2 + 16));
    uint64_t v11 = String.init<A>(describing:)();
    sub_100010478(v11, v12, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "DeviceInitiatedPairingService state changed %{public}s -> %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    return swift_slowDealloc();
  }
  return result;
}

unint64_t sub_100028110(unint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  unint64_t v5 = sub_10001618C();
  sub_10002A364(v5);
  sub_10002A364(a1);
  unint64_t v6 = sub_10001618C();
  sub_10002A4F0(v6);
  unint64_t v7 = sub_10001618C();
  sub_100027EFC(v7);
  sub_10002A4F0(a1);
  unint64_t v8 = sub_10001618C();

  return sub_10002A4F0(v8);
}

void sub_1000281AC()
{
  sub_1000139EC();
  uint64_t v25 = v1;
  uint64_t v26 = v0;
  uint64_t v3 = v2;
  v24[1] = sub_1000153C0(&qword_1000956C8);
  sub_100010EF0();
  __chkstk_darwin(v4);
  sub_100010EB0();
  uint64_t v5 = sub_1000153C0(&qword_1000950E8);
  sub_100010EF0();
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for XPCDictionary();
  sub_100013814();
  uint64_t v11 = v10;
  uint64_t v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v24 - v14;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v16 = *(int *)(v5 + 48);
    char v17 = &v8[v16];
    uint64_t v18 = *v3;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(&v8[v16], (char *)v3 + v16, v9);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v17, v9);
    swift_retain();
    XPCDictionary.entitlements.getter();
    sub_100029DCC();
    v24[0] = *(void *)(v11 + 8);
    sub_100016434();
    v19();
    static os_log_type_t.info.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = v25;
    *(void *)(v20 + 16) = v26;
    *(void *)(v20 + 24) = v21;
    uint64_t v22 = swift_retain();
    sub_100028628(v22, v18, (uint64_t)sub_10002A35C, v20);
    sub_100016434();
    v23();
    swift_release();
    swift_release();
    swift_release();
  }
  sub_100013918();
}

uint64_t sub_100028514(void (*a1)(char *))
{
  uint64_t v2 = sub_1000153C0(&qword_1000956C8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  EmptyResponse.init()();
  swift_storeEnumTagMultiPayload();
  a1(v4);
  return sub_10002A49C((uint64_t)v4, &qword_1000956C8);
}

uint64_t sub_1000285D0()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_100028628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for PairableHostsBrowseRegistration();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v7 = sub_1000438CC(a2, a3, a4);
  dispatch thunk of XPCConnection.setTargetQueue(_:)();
  uint64_t v8 = sub_100010E68();
  swift_weakInit();
  uint64_t v9 = sub_100010E68();
  swift_weakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)();
  swift_release();
  swift_release();
  swift_release();
  sub_100028930(v7);
  return swift_release();
}

uint64_t sub_1000287A4(uint64_t a1)
{
  uint64_t v2 = sub_1000153C0(&qword_100095A80);
  __chkstk_darwin(v2);
  uint64_t v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_10001C61C(a1, (uint64_t)v4);
      if (swift_getEnumCaseMultiPayload() == 1) {
        static os_log_type_t.info.getter();
      }
      else {
        static os_log_type_t.error.getter();
      }
      os_log(_:dso:log:_:_:)();
      sub_10002A49C((uint64_t)v4, &qword_100095A80);
      sub_1000290CC();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100028930(uint64_t a1)
{
  type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v5);
  sub_100015928();
  uint64_t v6 = type metadata accessor for BonjourBrowser.Mode();
  sub_100013814();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100013460();
  type metadata accessor for BonjourService();
  sub_100013814();
  __chkstk_darwin(v10);
  sub_1000120C8();
  unint64_t v12 = v1[2];
  if (v12)
  {
    if (v12 != 1)
    {
      uint64_t v14 = v1[3];
      uint64_t v23 = v1[4];
      v36[0] = v1[2];
      swift_retain();
      uint64_t v35 = v23;
      sub_10002A364(v12);
      char v19 = v36;
      sub_100062B34(&v37, a1);
      swift_release();
      uint64_t v24 = v14 + 64;
      uint64_t v25 = 1 << *(unsigned char *)(v14 + 32);
      uint64_t v26 = -1;
      if (v25 < 64) {
        uint64_t v26 = ~(-1 << v25);
      }
      uint64_t v27 = v26 & *(void *)(v14 + 64);
      int64_t v28 = (unint64_t)(v25 + 63) >> 6;
      swift_bridgeObjectRetain();
      int64_t v29 = 0;
      if (!v27) {
        goto LABEL_12;
      }
LABEL_11:
      for (v27 &= v27 - 1; ; uint64_t v27 = (v31 - 1) & v31)
      {
        swift_retain();
        char v19 = (void *)a1;
        sub_100043A48();
        swift_release();
        if (v27) {
          goto LABEL_11;
        }
LABEL_12:
        int64_t v30 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
          goto LABEL_34;
        }
        if (v30 >= v28) {
          goto LABEL_30;
        }
        uint64_t v31 = *(void *)(v24 + 8 * v30);
        ++v29;
        if (!v31)
        {
          int64_t v29 = v30 + 1;
          if (v30 + 1 >= v28) {
            goto LABEL_30;
          }
          uint64_t v31 = *(void *)(v24 + 8 * v29);
          if (!v31)
          {
            int64_t v29 = v30 + 2;
            if (v30 + 2 >= v28) {
              goto LABEL_30;
            }
            uint64_t v31 = *(void *)(v24 + 8 * v29);
            if (!v31)
            {
              int64_t v29 = v30 + 3;
              if (v30 + 3 >= v28) {
                goto LABEL_30;
              }
              uint64_t v31 = *(void *)(v24 + 8 * v29);
              if (!v31)
              {
                int64_t v32 = v30 + 4;
                if (v32 >= v28)
                {
LABEL_30:
                  swift_release();
                  unint64_t v33 = v36[0];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_retain();
                  sub_100028110(v33, v14, v35);
                  swift_release();
                  swift_bridgeObjectRelease();
                  return swift_bridgeObjectRelease();
                }
                uint64_t v31 = *(void *)(v24 + 8 * v32);
                if (!v31)
                {
                  while (1)
                  {
                    int64_t v29 = v32 + 1;
                    if (__OFADD__(v32, 1)) {
                      break;
                    }
                    if (v29 >= v28) {
                      goto LABEL_30;
                    }
                    uint64_t v31 = *(void *)(v24 + 8 * v29);
                    ++v32;
                    if (v31) {
                      goto LABEL_27;
                    }
                  }
LABEL_34:
                  __break(1u);
LABEL_35:
                  swift_retain();
                  swift_bridgeObjectRetain();
                  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  goto LABEL_6;
                }
                int64_t v29 = v32;
              }
            }
          }
        }
LABEL_27:
        ;
      }
    }
    static RemotePairingError.invalidOperation.getter();
    sub_10002A3B4((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    swift_allocError();
    sub_10002A3B4((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    Error<>.init(_:_:)();
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(uint64_t, void))(v11 + 104))(v3, enum case for BonjourService.pairableHost(_:));
    [objc_allocWithZone((Class)CUNetLinkManager) init];
    sub_100017194((uint64_t)(v1 + 7), (uint64_t)v36);
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v2, enum case for BonjourBrowser.Mode.onDemand(_:), v6);
    type metadata accessor for BonjourBrowser();
    swift_allocObject();
    uint64_t v14 = BonjourBrowser.init(service:includePeerToPeer:netLinkManager:pairingManager:mode:)();
    uint64_t v15 = sub_100010E68();
    swift_weakInit();
    uint64_t v16 = sub_100010E68();
    swift_weakInit();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v16;
    swift_retain();
    swift_retain();
    dispatch thunk of BonjourBrowser.resultsChangedHandler.setter();
    swift_release();
    swift_release();
    sub_1000153C0((uint64_t *)&unk_1000956E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100075E10;
    *(void *)(inited + 32) = a1;
    v36[0] = inited;
    specialized Array._endMutation()();
    char v19 = (void *)v36[0];
    if (v36[0] >> 62) {
      goto LABEL_35;
    }
    uint64_t v20 = *(void *)((v36[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
LABEL_6:
    if (v20)
    {
      sub_100056EC8((unint64_t)v19);
      uint64_t v22 = v21;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = &_swiftEmptySetSingleton;
    }
    type metadata accessor for UUID();
    type metadata accessor for DiscoveredPairableHost(0);
    sub_10002A414();
    uint64_t v34 = Dictionary.init(dictionaryLiteral:)();
    swift_retain();
    sub_100028110((unint64_t)v22, v34, v14);
    dispatch thunk of BonjourBrowser.start(queue:)();
    return swift_release();
  }
}

uint64_t sub_100028F08(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BonjourBrowser.Change.Kind();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
      int v7 = (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 88))(v5, v2);
      if (v7 == enum case for BonjourBrowser.Change.Kind.added(_:))
      {
        type metadata accessor for BonjourBrowser.Change();
        sub_100029404();
      }
      else
      {
        if (v7 != enum case for BonjourBrowser.Change.Kind.lost(_:))
        {
          uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          return result;
        }
        type metadata accessor for BonjourBrowser.Change();
        sub_100029AB8();
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void sub_1000290CC()
{
  sub_1000139EC();
  uint64_t v3 = v0;
  uint64_t v4 = sub_1000153C0(&qword_100095A10);
  __chkstk_darwin(v4 - 8);
  sub_100015928();
  sub_100043A0C();
  unint64_t v5 = v0[2];
  if (v5 >= 2)
  {
    uint64_t v7 = v0[3];
    uint64_t v6 = v0[4];
    uint64_t v31 = v7;
    unint64_t v32 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100065064();
    swift_release();
    uint64_t v8 = swift_bridgeObjectRetain();
    BOOL v9 = sub_1000293C8(v8);
    swift_bridgeObjectRelease();
    if (v9)
    {
      dispatch thunk of BonjourBrowser.cancel()();
      sub_1000153C0(&qword_1000956D0);
      sub_100010EF0();
      __chkstk_darwin(v10);
      sub_100016914();
      uint64_t v12 = __chkstk_darwin(v11);
      uint64_t v15 = (char *)v30 - v14;
      if (*(void *)(v7 + 16))
      {
        v30[1] = v6;
        v30[2] = v3;
        do
        {
          v30[3] = v13;
          uint64_t v16 = *(int *)(v12 + 48);
          uint64_t v17 = sub_10005E69C(v7);
          uint64_t v19 = v18;
          char v21 = v20 & 1;
          sub_1000153C0(&qword_1000956D8);
          Dictionary._Variant.remove(at:)();
          sub_10002A3FC(v17, v19, v21);
          type metadata accessor for UUID();
          sub_100010EF0();
          (*(void (**)(uint64_t, char *))(v22 + 32))(v2, v15);
          *(void *)(v2 + v16) = *(void *)&v15[v16];
          uint64_t v23 = type metadata accessor for DiscoveredBonjourAdvert();
          sub_100015C34(v1, 1, 1, v23);
          swift_retain();
          sub_10002C514();
          sub_10002A49C(v1, &qword_100095A10);
          sub_10002CBF8();
          swift_release();
          sub_10002A49C(v2, &qword_1000956D0);
          sub_1000153C0(&qword_1000956D0);
          sub_100010EF0();
          __chkstk_darwin(v24);
          sub_100016914();
          uint64_t v12 = __chkstk_darwin(v25);
          uint64_t v15 = (char *)v30 - v26;
          uint64_t v7 = v31;
        }
        while (*(void *)(v31 + 16));
      }
      unint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v27 = v32;
      uint64_t v28 = v7;
      uint64_t v29 = v6;
    }
    sub_100028110(v27, v28, v29);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_100013918();
}

BOOL sub_1000293C8(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v1 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v1 = *(void *)(a1 + 16);
  }
  return v1 == 0;
}

void sub_100029404()
{
  sub_1000139EC();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for DiscoveredBonjourAdvert();
  sub_100013814();
  __chkstk_darwin(v6);
  sub_100013460();
  uint64_t v7 = sub_1000153C0(&qword_100095A10);
  __chkstk_darwin(v7 - 8);
  BOOL v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = v0[2];
  uint64_t v11 = v0[4];
  if (v10 < 2 || v11 != v2) {
    goto LABEL_5;
  }
  uint64_t v63 = v2;
  uint64_t v13 = v0[3];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v66 = v4;
  int64_t v67 = v14;
  uint64_t v62 = v0;
  id v64 = &v57;
  sub_100013814();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  uint64_t v61 = v18;
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_10002A364(v10);
  unint64_t v65 = v10;
  uint64_t v60 = v11;
  DiscoveredBonjourAdvert.identifier.getter();
  uint64_t v20 = sub_10004A814((uint64_t)v19, v13);
  swift_bridgeObjectRelease();
  char v21 = *(void (**)(char *, int64_t))(v16 + 8);
  v21(v19, v67);
  if (v20)
  {
    sub_100016EE8();
    v22();
    sub_100015C34((uint64_t)v9, 0, 1, v5);
    sub_10002C514();
    swift_release();
    sub_10002A49C((uint64_t)v9, &qword_100095A10);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    sub_100013918();
    return;
  }
  uint64_t v58 = v13;
  BOOL v59 = v21;
  uint64_t v23 = v61;
  sub_100016EE8();
  v24();
  uint64_t v25 = v62;
  sub_100017194((uint64_t)(v62 + 7), (uint64_t)v70);
  uint64_t v26 = (void *)v25[5];
  type metadata accessor for DiscoveredPairableHost(0);
  swift_allocObject();
  id v27 = v26;
  sub_10002C1FC();
  uint64_t v29 = v28;
  os_log_type_t v30 = static os_log_type_t.default.getter();
  id v64 = (uint8_t **)qword_1000986F0;
  uint64_t v31 = os_log_type_enabled((os_log_t)qword_1000986F0, v30);
  if (v31)
  {
    swift_retain();
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v32 = 136315138;
    uint64_t v57 = v32 + 4;
    uint64_t v33 = *(void *)(v29 + 16);
    uint64_t v34 = *(void *)(v29 + 24);
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_100010478(v33, v34, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v64, v30, "Created new wirelessly pairable host: %s", v32, 0xCu);
    swift_arrayDestroy();
    sub_1000120B0();
    uint64_t v31 = sub_1000120B0();
  }
  __chkstk_darwin(v31);
  DiscoveredBonjourAdvert.identifier.getter();
  swift_retain();
  uint64_t v35 = v58;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v70[0] = v35;
  sub_100067540(v29, (uint64_t)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), isUniquelyReferenced_nonNull_native);
  id v64 = (uint8_t **)v70[0];
  swift_bridgeObjectRelease();
  v59((char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v67);
  if ((v65 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for PairableHostsBrowseRegistration();
    sub_10002A3B4(&qword_1000966A0, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    Set.Iterator.init(_cocoa:)();
    uint64_t v38 = v70[0];
    uint64_t v37 = v70[1];
    uint64_t v39 = v70[2];
    uint64_t v40 = v70[3];
    unint64_t v41 = v70[4];
  }
  else
  {
    uint64_t v42 = -1 << *(unsigned char *)(v65 + 32);
    uint64_t v37 = v65 + 56;
    uint64_t v43 = ~v42;
    uint64_t v44 = -v42;
    if (v44 < 64) {
      uint64_t v45 = ~(-1 << v44);
    }
    else {
      uint64_t v45 = -1;
    }
    unint64_t v41 = v45 & *(void *)(v65 + 56);
    uint64_t v46 = swift_bridgeObjectRetain();
    uint64_t v39 = v43;
    uint64_t v40 = 0;
    uint64_t v38 = v46;
  }
  uint64_t v61 = v39;
  int64_t v67 = (unint64_t)(v39 + 64) >> 6;
  uint64_t v66 = (char *)&type metadata for Swift.AnyObject + 8;
  if (v38 < 0) {
    goto LABEL_19;
  }
LABEL_17:
  if (v41)
  {
    uint64_t v47 = (v41 - 1) & v41;
    unint64_t v48 = __clz(__rbit64(v41)) | (v40 << 6);
    uint64_t v49 = v40;
    goto LABEL_35;
  }
  int64_t v52 = v40 + 1;
  if (!__OFADD__(v40, 1))
  {
    if (v52 < v67)
    {
      unint64_t v53 = *(void *)(v37 + 8 * v52);
      uint64_t v49 = v40 + 1;
      if (v53) {
        goto LABEL_34;
      }
      uint64_t v49 = v40 + 2;
      if (v40 + 2 >= v67) {
        goto LABEL_39;
      }
      unint64_t v53 = *(void *)(v37 + 8 * v49);
      if (v53) {
        goto LABEL_34;
      }
      uint64_t v49 = v40 + 3;
      if (v40 + 3 >= v67) {
        goto LABEL_39;
      }
      unint64_t v53 = *(void *)(v37 + 8 * v49);
      if (v53)
      {
LABEL_34:
        uint64_t v47 = (v53 - 1) & v53;
        unint64_t v48 = __clz(__rbit64(v53)) + (v49 << 6);
LABEL_35:
        uint64_t v51 = *(void *)(*(void *)(v38 + 48) + 8 * v48);
        swift_retain();
        while (v51)
        {
          sub_100043A48();
          swift_release();
          uint64_t v40 = v49;
          unint64_t v41 = v47;
          if ((v38 & 0x8000000000000000) == 0) {
            goto LABEL_17;
          }
LABEL_19:
          uint64_t v50 = __CocoaSet.Iterator.next()();
          if (!v50) {
            goto LABEL_39;
          }
          uint64_t v68 = v50;
          type metadata accessor for PairableHostsBrowseRegistration();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v51 = v69;
          swift_unknownObjectRelease();
          uint64_t v49 = v40;
          uint64_t v47 = v41;
        }
        goto LABEL_39;
      }
      uint64_t v49 = v40 + 4;
      if (v40 + 4 < v67)
      {
        unint64_t v53 = *(void *)(v37 + 8 * v49);
        if (!v53)
        {
          int64_t v54 = v40 + 5;
          while (v54 < v67)
          {
            unint64_t v53 = *(void *)(v37 + 8 * v54++);
            if (v53)
            {
              uint64_t v49 = v54 - 1;
              goto LABEL_34;
            }
          }
          goto LABEL_39;
        }
        goto LABEL_34;
      }
    }
LABEL_39:
    sub_100019C54();
    unint64_t v55 = v65;
    swift_bridgeObjectRetain();
    os_log_t v56 = (os_log_t)v64;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100028110(v55, (uint64_t)v56, v60);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_5;
  }
  __break(1u);
}

void sub_100029AB8()
{
  sub_1000139EC();
  uint64_t v4 = v3;
  uint64_t v5 = sub_1000153C0(&qword_100095A10);
  __chkstk_darwin(v5 - 8);
  sub_100013460();
  unint64_t v6 = v0[2];
  if (v6 < 2)
  {
LABEL_2:
    sub_100013918();
    return;
  }
  uint64_t v7 = v0[4];
  uint64_t v25 = v0[3];
  if (v7 == v4)
  {
    uint64_t v23 = v7;
    uint64_t v9 = type metadata accessor for UUID();
    sub_100013814();
    uint64_t v11 = v10;
    __chkstk_darwin(v12);
    sub_1000120C8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    DiscoveredBonjourAdvert.identifier.getter();
    sub_100065FA4();
    uint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v9);
    if (v14)
    {
      os_log_type_t v15 = static os_log_type_t.default.getter();
      uint64_t v16 = qword_1000986F0;
      os_log_type_t v17 = v15;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v15))
      {
        swift_retain();
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        uint64_t v20 = *(void *)(v14 + 16);
        uint64_t v19 = *(void *)(v14 + 24);
        swift_bridgeObjectRetain();
        sub_100010478(v20, v19, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removing wireless pairing host %s because the wireless pairing advert was lost", v18, 0xCu);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      uint64_t v21 = type metadata accessor for DiscoveredBonjourAdvert();
      sub_100015C34(v1, 1, 1, v21);
      sub_10002C514();
      sub_10002A49C(v1, &qword_100095A10);
      sub_10002CBF8();
      uint64_t v22 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_100028110(v6, v22, v23);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    goto LABEL_2;
  }
  swift_bridgeObjectRetain();
  sub_100013918();
  swift_bridgeObjectRelease();
}

uint64_t sub_100029DCC()
{
  type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v0);
  sub_100010EB0();
  uint64_t result = XPCDictionary.subscript.getter();
  if ((result & 1) == 0)
  {
    uint64_t result = _RPIsAppleInternal();
    if ((result & 1) == 0)
    {
      sub_10002A3B4((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      static Error<>.permissionDenied.getter();
      sub_10002A3B4((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      swift_allocError();
      Error<>.init(_:_:)();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_100029F2C()
{
  sub_10002A4F0(*(void *)(v0 + 16));

  swift_release();
  sub_100010548(v0 + 56);
  return v0;
}

uint64_t sub_100029F68()
{
  sub_100029F2C();

  return _swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for DeviceInitiatedPairingService()
{
  return self;
}

unint64_t destroy for DeviceInitiatedPairingService.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t _s20remotepairingdeviced29DeviceInitiatedPairingServiceC5StateOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for DeviceInitiatedPairingService.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      return a1;
    }
LABEL_7:
    long long v6 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v6;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DeviceInitiatedPairingService.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceInitiatedPairingService.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DeviceInitiatedPairingService.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_10002A2DC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10002A2F4(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceInitiatedPairingService.State()
{
  return &type metadata for DeviceInitiatedPairingService.State;
}

uint64_t sub_10002A324()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002A35C()
{
  return sub_100028514(*(void (**)(char *))(v0 + 16));
}

unint64_t sub_10002A364(unint64_t result)
{
  if (result >= 2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_10002A3B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002A3FC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002A40C(uint64_t a1)
{
  return sub_100028F08(a1);
}

unint64_t sub_10002A414()
{
  unint64_t result = qword_100096300;
  if (!qword_100096300)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100096300);
  }
  return result;
}

uint64_t sub_10002A458()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002A494(uint64_t a1)
{
  return sub_1000287A4(a1);
}

uint64_t sub_10002A49C(uint64_t a1, uint64_t *a2)
{
  sub_1000153C0(a2);
  sub_100010EF0();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t sub_10002A4F0(unint64_t result)
{
  if (result >= 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t destroy for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

void *_s20remotepairingdeviced29DeviceInitiatedPairingServiceC5StateO28BrowsingForPairableHostsInfoVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo()
{
  return &type metadata for DeviceInitiatedPairingService.State.BrowsingForPairableHostsInfo;
}

uint64_t sub_10002A738(uint64_t a1)
{
  return sub_10002A750(a1, &qword_1000956F0);
}

uint64_t sub_10002A744(uint64_t a1)
{
  return sub_10002A750(a1, &qword_1000956F8);
}

uint64_t sub_10002A750(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for AtomicCounter();
  swift_allocObject();
  uint64_t result = AtomicCounter.init()();
  *a2 = result;
  return result;
}

uint64_t sub_10002A790()
{
  type metadata accessor for DiscoveredPairableHost.State(0);
  sub_100010EF0();
  __chkstk_darwin(v1);
  sub_100012078();
  sub_1000323E8(v0, v3 - v2);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = 0;
  switch(EnumCaseMultiPayload)
  {
    case 1:
    case 2:
      sub_1000153C0(&qword_100095918);
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_3;
    case 4:
      return result;
    default:
LABEL_3:
      type metadata accessor for DiscoveredBonjourAdvert();
      sub_100010EF0();
      sub_100010EE4();
      v6();
      uint64_t result = 1;
      break;
  }
  return result;
}

void sub_10002A8B4()
{
  sub_1000139EC();
  uint64_t v2 = type metadata accessor for DiscoveredBonjourAdvert();
  sub_100013814();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100015778();
  type metadata accessor for DiscoveredPairableHost.State(0);
  sub_100010EF0();
  __chkstk_darwin(v6);
  sub_100012078();
  sub_1000323E8(v0, v8 - v7);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1000153C0(&qword_100095918);
      sub_100015B20();
      swift_release();
      uint64_t v11 = sub_100015DB4();
      v12(v11);
      sub_100016070();
      _StringGuts.grow(_:)(57);
      sub_100032758();
      uint64_t v14 = v13 + 22;
      os_log_type_t v15 = "Establishing control channel (advert: ";
      goto LABEL_5;
    case 2u:
      sub_1000153C0(&qword_100095918);
      sub_100015B20();
      swift_release();
      uint64_t v16 = sub_100015DB4();
      v17(v16);
      sub_100016070();
      _StringGuts.grow(_:)(55);
      sub_100032758();
      uint64_t v14 = v18 + 20;
      os_log_type_t v15 = "Manual pairing in progress (advert: ";
LABEL_5:
      unint64_t v19 = (unint64_t)(v15 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v14);
      type metadata accessor for UUID();
      sub_100013814();
      __chkstk_darwin(v20);
      DiscoveredBonjourAdvert.identifier.getter();
      sub_1000324EC(&qword_1000959C8, (void (*)(uint64_t))&type metadata accessor for UUID);
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      sub_1000112D0();
      v22();
      v23._countAndFlagsBits = 0x63656E6E6F63202CLL;
      v23._object = (void *)0xEE00203A6E6F6974;
      String.append(_:)(v23);
      v24._countAndFlagsBits = dispatch thunk of ControlChannelConnection.id.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 41;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);
      swift_release();
      goto LABEL_8;
    case 3u:
      uint64_t v26 = sub_100015DB4();
      v27(v26);
      sub_100016070();
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      sub_100032758();
      goto LABEL_7;
    case 4u:
      goto LABEL_9;
    default:
      uint64_t v9 = sub_100015DB4();
      v10(v9);
      sub_100016070();
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      sub_100032758();
LABEL_7:
      uint64_t v28 = type metadata accessor for UUID();
      sub_100013814();
      uint64_t v30 = v29;
      __chkstk_darwin(v31);
      sub_100013900();
      DiscoveredBonjourAdvert.identifier.getter();
      sub_1000324EC(&qword_1000959C8, (void (*)(uint64_t))&type metadata accessor for UUID);
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v30 + 8))(0xEB00000000656C62, v28);
      v33._countAndFlagsBits = 41;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
LABEL_8:
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
LABEL_9:
      sub_100013918();
      return;
  }
}

void sub_10002ACD0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DiscoveredPairableHost.State(0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v20 - v7;
  os_log_type_t v9 = static os_log_type_t.default.getter();
  uint64_t v10 = qword_1000986F0;
  sub_1000323E8(a1, (uint64_t)v8);
  os_log_type_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    swift_retain_n();
    uint64_t v12 = swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    uint64_t v22 = v20[0];
    *(_DWORD *)uint64_t v12 = 136446722;
    uint64_t v14 = *(void *)(v1 + 16);
    uint64_t v13 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_100010478(v14, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    sub_1000323E8((uint64_t)v8, (uint64_t)v6);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v21 = sub_100010478(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100031E08((uint64_t)v8);
    *(_WORD *)(v12 + 22) = 2082;
    uint64_t v17 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
    swift_beginAccess();
    sub_1000323E8(v17, (uint64_t)v6);
    uint64_t v18 = String.init<A>(describing:)();
    v20[1] = sub_100010478(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: State changed from %{public}s -> %{public}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100031E08((uint64_t)v8);
  }
  sub_10002FB90();
}

uint64_t sub_10002AF80(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DiscoveredPairableHost.State(0);
  __chkstk_darwin(v4 - 8);
  sub_100015778();
  uint64_t v5 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_100013A48();
  sub_1000323E8(v5, v2);
  swift_beginAccess();
  sub_100032694(a1, v5);
  swift_endAccess();
  sub_10002ACD0(v2);
  sub_100031E08(a1);
  return sub_100031E08(v2);
}

uint64_t sub_10002B048()
{
  uint64_t v1 = OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___listener;
  if (*(uint64_t *)((char *)v0
                  + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___listener))
  {
    uint64_t v2 = *(uint64_t *)((char *)v0
                    + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___listener);
  }
  else
  {
    uint64_t v2 = sub_10002B0D8((uint64_t)v0, *v0);
    *(uint64_t *)((char *)v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10002B0D8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SystemXPCListenerConnection();
  static SystemXPCConnection.anonymousListenerConnection(targetQueue:)();
  uint64_t v3 = swift_dynamicCastClassUnconditional();
  dispatch thunk of XPCConnection.setTargetQueue(_:)();
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = a2;
  swift_retain();
  dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)();
  swift_release();
  swift_release();
  dispatch thunk of XPCConnection.activate()();
  return v3;
}

uint64_t sub_10002B1BC(uint64_t a1)
{
  uint64_t v2 = sub_1000153C0(&qword_100094F80);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    sub_10003263C(a1, (uint64_t)v4, &qword_100094F80);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_100015C5C((uint64_t)v4, &qword_100094F80);
      os_log_type_t v7 = static os_log_type_t.error.getter();
      uint64_t v8 = qword_1000986F0;
      os_log_type_t v9 = v7;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v7))
      {
        swift_retain();
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136446210;
        uint64_t v11 = *(void *)(v6 + 16);
        uint64_t v12 = *(void *)(v6 + 24);
        swift_bridgeObjectRetain();
        uint64_t v29 = sub_100010478(v11, v12, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Received error from host listener", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      return swift_release();
    }
    else
    {
      type metadata accessor for SystemXPCPeerConnection();
      uint64_t v13 = swift_dynamicCastClassUnconditional();
      swift_retain();
      dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)();
      int v14 = v27;
      swift_beginAccess();
      swift_retain();
      sub_100062DE0();
      swift_endAccess();
      swift_release();
      uint64_t v27 = 0;
      unint64_t v28 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      uint64_t v27 = 0xD000000000000018;
      unint64_t v28 = 0x800000010007AF70;
      v15._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = 46;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      uint64_t v17 = *(void *)(v6 + 16);
      uint64_t v18 = *(void **)(v6 + 24);
      swift_bridgeObjectRetain();
      v19._countAndFlagsBits = v17;
      v19._object = v18;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 0x2E746E65696C632ELL;
      v20._object = (void *)0xE800000000000000;
      String.append(_:)(v20);
      LODWORD(v29) = v14;
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v22 = os_transaction_create();
      swift_release();
      swift_beginAccess();
      if (v22)
      {
        sub_1000668B4();
        swift_release();
      }
      else
      {
        sub_1000660F8(v13);
        swift_release();
        swift_unknownObjectRelease();
      }
      swift_endAccess();
      id v23 = *(id *)(v6 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue);
      dispatch thunk of XPCConnection.setTargetQueue(_:)();

      uint64_t v24 = swift_allocObject();
      swift_weakInit();
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v24;
      *(void *)(v26 + 24) = v25;
      swift_retain();
      swift_retain();
      dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)();
      swift_release();
      swift_release();
      swift_release();
      dispatch thunk of XPCConnection.activate()();
      swift_release();
      return swift_release_n();
    }
  }
  return result;
}

uint64_t sub_10002B6C0@<X0>(_xpc_connection_s *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = xpc_connection_get_pid(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10002B6F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCDictionary();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000153C0(&qword_100095A80);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v10 = result;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return swift_release();
  }
  uint64_t v12 = Strong;
  sub_10003263C(a1, (uint64_t)v8, &qword_100095A80);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_10002BB3C();
    v22[0] = v12;
    dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return swift_release();
  }
  dispatch thunk of XPCConnection.cancel()();
  swift_beginAccess();
  sub_10006525C();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  sub_1000660F8(v12);
  swift_endAccess();
  swift_unknownObjectRelease();
  sub_100030330();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  int v14 = qword_1000986F0;
  os_log_type_t v15 = v13;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v13))
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v16 = swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446466;
    uint64_t v17 = *(void *)(v10 + 16);
    uint64_t v18 = *(void *)(v10 + 24);
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_100010478(v17, v18, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v21 = v12;
    type metadata accessor for SystemXPCPeerConnection();
    swift_retain();
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v21 = sub_100010478(v19, v20, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s: Releasing usage assertions owned by disconnected peer %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  swift_release();
  swift_release();
  return sub_100015C5C((uint64_t)v8, &qword_100095A80);
}

uint64_t sub_10002BB3C()
{
  uint64_t v1 = OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___dispatcher;
  if (*(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___dispatcher))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___dispatcher);
  }
  else
  {
    uint64_t v2 = sub_10002BBA4();
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10002BBA4()
{
  uint64_t v0 = type metadata accessor for XPCReplyProviding();
  __chkstk_darwin(v0 - 8);
  static XPCReplyProviding.passthrough.getter();
  sub_1000153C0(&qword_100095A18);
  swift_allocObject();
  uint64_t v1 = XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)();
  type metadata accessor for RemotePairingErrorCodingWrapper();
  swift_allocObject();
  swift_weakInit();
  type metadata accessor for AttemptPairingPinCommand();
  type metadata accessor for EmptyResponse();
  sub_10000DA28(&qword_100095A20, (void (*)(uint64_t))&type metadata accessor for AttemptPairingPinCommand);
  sub_10000DA28(&qword_100095A28, (void (*)(uint64_t))&type metadata accessor for AttemptPairingPinCommand);
  sub_10000DA28(&qword_100095A30, (void (*)(uint64_t))&type metadata accessor for EmptyResponse);
  sub_10000DA28(&qword_100095A38, (void (*)(uint64_t))&type metadata accessor for EmptyResponse);
  sub_10000DA28(&qword_100095A40, (void (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  type metadata accessor for CancelPairingCommand();
  sub_10000DA28(&qword_100095A48, (void (*)(uint64_t))&type metadata accessor for CancelPairingCommand);
  sub_10000DA28(&qword_100095A50, (void (*)(uint64_t))&type metadata accessor for CancelPairingCommand);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  type metadata accessor for InitiatePairingWithHostCommand();
  type metadata accessor for PairableHostInfo();
  sub_10000DA28(&qword_100095A58, (void (*)(uint64_t))&type metadata accessor for InitiatePairingWithHostCommand);
  sub_10000DA28(&qword_100095A60, (void (*)(uint64_t))&type metadata accessor for InitiatePairingWithHostCommand);
  sub_10000DA28(&qword_100095A68, (void (*)(uint64_t))&type metadata accessor for PairableHostInfo);
  sub_10000DA28((unint64_t *)&unk_100095A70, (void (*)(uint64_t))&type metadata accessor for PairableHostInfo);
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
  swift_release();
  return v1;
}

uint64_t sub_10002C03C()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    AttemptPairingPinCommand.pinAttempt.getter();
    sub_10002CE98();
    if (v0)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return EmptyResponse.init()();
}

uint64_t sub_10002C0F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return EmptyResponse.init()();
  }
  sub_10002D4E0(v3);
  uint64_t result = swift_release();
  if (!v2) {
    return EmptyResponse.init()();
  }
  return result;
}

uint64_t sub_10002C180()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10002DDFC();
    return swift_release();
  }
  return result;
}

void sub_10002C1FC()
{
  sub_1000139EC();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v26 = v7;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    sub_100056CCC((uint64_t)&_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v8 = &_swiftEmptySetSingleton;
  }
  *(void *)((char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers) = v8;
  uint64_t v9 = OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__transactions;
  type metadata accessor for SystemXPCPeerConnection();
  sub_1000153C0(&qword_100095A88);
  sub_10000DA28(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  *(void *)((char *)v0 + v9) = Dictionary.init(dictionaryLiteral:)();
  *(void *)((char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___listener) = 0;
  *(void *)((char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost____lazy_storage___dispatcher) = 0;
  strcpy((char *)&v27, "pairablehost-");
  HIWORD(v27) = -4864;
  if (qword_100094988 != -1) {
    swift_once();
  }
  dispatch thunk of AtomicCounter.next()();
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)&v27 + 1);
  v0[2] = v27;
  v0[3] = v11;
  *(void *)((char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue) = v4;
  uint64_t v12 = (char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  uint64_t v13 = type metadata accessor for DiscoveredBonjourAdvert();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, v6, v13);
  type metadata accessor for DiscoveredPairableHost.State(0);
  swift_storeEnumTagMultiPayload();
  id v14 = v4;
  uint64_t v15 = DiscoveredBonjourAdvert.userAssignedName.getter();
  uint64_t v17 = 0x6E776F6E6B6E55;
  if (v16) {
    uint64_t v17 = v15;
  }
  unint64_t v18 = 0xE700000000000000;
  if (v16) {
    unint64_t v18 = v16;
  }
  v2[4] = v17;
  void v2[5] = v18;
  v2[6] = DiscoveredBonjourAdvert.model.getter();
  v2[7] = v19;
  uint64_t v20 = type metadata accessor for UUID();
  sub_100013814();
  uint64_t v22 = v21;
  __chkstk_darwin(v23);
  sub_100013C28();
  DiscoveredBonjourAdvert.identifier.getter();

  uint64_t v24 = sub_100032714();
  v25(v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))((uint64_t)v2 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__advertID, v1, v20);
  sub_1000326F8(v26, (uint64_t)v2 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__pairingManager);
  sub_100013918();
}

void sub_10002C514()
{
  sub_1000139EC();
  uint64_t v41 = v1;
  uint64_t v4 = v3;
  type metadata accessor for DiscoveredPairableHost.State(0);
  sub_100010EF0();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  sub_100015F08();
  uint64_t v9 = sub_1000153C0(&qword_100095A10);
  __chkstk_darwin(v9 - 8);
  sub_100013C28();
  uint64_t v10 = type metadata accessor for DiscoveredBonjourAdvert();
  sub_100013814();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100013900();
  sub_10003263C(v4, v2, &qword_100095A10);
  if (sub_100015C0C(v2, 1, v10) == 1)
  {
    sub_100015C5C(v2, &qword_100095A10);
    sub_100032714();
    swift_storeEnumTagMultiPayload();
    sub_100032764();
  }
  else
  {
    sub_100016EDC();
    v14();
    uint64_t v15 = v41 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
    sub_100013A48();
    sub_1000323E8(v15, v0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v27 = sub_1000153C0(&qword_100095918);
        uint64_t v28 = *(int *)(v27 + 48);
        uint64_t v29 = *(void *)(v0 + v28);
        sub_100015964(v27);
        uint64_t v31 = &v8[v30];
        uint64_t v32 = sub_100016934();
        v33(v32);
        *(void *)&v8[v28] = v29;
        uint64_t v34 = v39;
        *(uint64_t *)((char *)&qword_100095A10 + (void)v8) = v40;
        uint64_t v35 = v38;
        *(void *)uint64_t v31 = v34;
        *((void *)v31 + 1) = v35;
        sub_100032714();
        swift_storeEnumTagMultiPayload();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_100032764();
        goto LABEL_7;
      case 2u:
        uint64_t v16 = sub_1000153C0(&qword_100095918);
        uint64_t v17 = *(int *)(v16 + 48);
        uint64_t v18 = *(void *)(v0 + v17);
        sub_100015964(v16);
        uint64_t v20 = &v8[v19];
        uint64_t v21 = sub_100016934();
        v22(v21);
        *(void *)&v8[v17] = v18;
        uint64_t v23 = v39;
        *(uint64_t *)((char *)&qword_100095A10 + (void)v8) = v40;
        uint64_t v24 = v38;
        *(void *)uint64_t v20 = v23;
        *((void *)v20 + 1) = v24;
        sub_100032714();
        swift_storeEnumTagMultiPayload();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_100032764();
LABEL_7:
        swift_release();
        swift_release();
        swift_release();
        break;
      case 4u:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10002C87CLL);
      default:
        uint64_t v25 = sub_100016934();
        v26(v25);
        sub_100032714();
        swift_storeEnumTagMultiPayload();
        sub_100032764();
        break;
    }
    uint64_t v36 = *(void (**)(void))(v12 + 8);
    sub_1000112D0();
    v36();
    ((void (*)(uint64_t, uint64_t))v36)(v0, v10);
  }
  sub_100013918();
}

uint64_t sub_10002C890()
{
  if (qword_100094980 != -1) {
    swift_once();
  }
  swift_retain();
  dispatch thunk of AtomicCounter.next()();
  swift_release();
  sub_10002B048();
  SystemXPCListenerConnection.createEndpoint()();
  uint64_t v0 = swift_release();
  __chkstk_darwin(v0);
  type metadata accessor for PairableHostInfo();
  dispatch thunk of XPCEndpoint.withUnsafeUnderlyingEndpoint<A>(_:)();
  return swift_release();
}

uint64_t sub_10002C998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v18[1] = a4;
  void v18[2] = a3;
  v18[0] = a1;
  uint64_t v5 = type metadata accessor for DiscoveredPairableHost.State(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v18 - v9;
  uint64_t v11 = a2 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  swift_beginAccess();
  sub_1000323E8(v11, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v12 = type metadata accessor for DiscoveredBonjourAdvert();
    (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    sub_100031E08((uint64_t)v10);
  }
  uint64_t v13 = a2 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__advertID;
  uint64_t v14 = type metadata accessor for UUID();
  __chkstk_darwin(v14);
  (*(void (**)(char *, uint64_t))(v16 + 16))((char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  sub_1000323E8(v11, (uint64_t)v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10002A790();
  sub_100031E08((uint64_t)v8);
  swift_unknownObjectRetain();
  return PairableHostInfo.init(identifier:name:model:available:paired:monotonicIdentifier:endpoint:)();
}

uint64_t sub_10002CBF8()
{
  sub_10002B048();
  dispatch thunk of XPCConnection.cancel()();
  swift_release();
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers);
  sub_100013A48();
  uint64_t v2 = *v1;
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for SystemXPCPeerConnection();
    sub_10000DA28(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    sub_10003277C();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v19;
    uint64_t v4 = v20;
    uint64_t v5 = v21;
    int64_t v6 = v22;
    unint64_t v7 = v23;
  }
  else
  {
    uint64_t v4 = v2 + 56;
    uint64_t v5 = ~(-1 << *(unsigned char *)(v2 + 32));
    sub_100010E80();
    unint64_t v7 = v8 & v9;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v6 = 0;
  }
  int64_t v10 = (unint64_t)(v5 + 64) >> 6;
  if (v2 < 0) {
    goto LABEL_7;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v11 = (v7 - 1) & v7;
      unint64_t v12 = __clz(__rbit64(v7)) | (v6 << 6);
      int64_t v13 = v6;
      goto LABEL_24;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v14 >= v10) {
      return sub_100019C54();
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    int64_t v13 = v6 + 1;
    if (!v15)
    {
      int64_t v13 = v6 + 2;
      if (v6 + 2 >= v10) {
        return sub_100019C54();
      }
      unint64_t v15 = *(void *)(v4 + 8 * v13);
      if (!v15)
      {
        int64_t v13 = v6 + 3;
        if (v6 + 3 >= v10) {
          return sub_100019C54();
        }
        unint64_t v15 = *(void *)(v4 + 8 * v13);
        if (!v15)
        {
          int64_t v13 = v6 + 4;
          if (v6 + 4 >= v10) {
            return sub_100019C54();
          }
          unint64_t v15 = *(void *)(v4 + 8 * v13);
          if (!v15)
          {
            int64_t v16 = v6 + 5;
            while (v16 < v10)
            {
              unint64_t v15 = *(void *)(v4 + 8 * v16++);
              if (v15)
              {
                int64_t v13 = v16 - 1;
                goto LABEL_23;
              }
            }
            return sub_100019C54();
          }
        }
      }
    }
LABEL_23:
    uint64_t v11 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v12);
    swift_retain();
    if (!v17) {
      return sub_100019C54();
    }
    while (1)
    {
      dispatch thunk of XPCConnection.cancel()();
      uint64_t result = swift_release();
      int64_t v6 = v13;
      unint64_t v7 = v11;
      if ((v2 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_7:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for SystemXPCPeerConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        int64_t v13 = v6;
        uint64_t v11 = v7;
        if (v18) {
          continue;
        }
      }
      return sub_100019C54();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10002CE98()
{
  uint64_t v2 = v1;
  type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v3);
  sub_1000120E0();
  type metadata accessor for DiscoveredPairableHost.State(0);
  sub_100010EF0();
  __chkstk_darwin(v4);
  sub_100015634();
  __chkstk_darwin(v5);
  sub_100015F08();
  uint64_t v6 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  swift_beginAccess();
  sub_1000323E8(v6, v0);
  sub_10003277C();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    sub_1000153C0(&qword_100095918);
    swift_release();
    type metadata accessor for XPCConnection();
    if (static XPCConnection.== infix(_:_:)())
    {
      dispatch thunk of ControlChannelConnection.attempt(pairingPIN:)();
    }
    else
    {
      os_log_type_t v18 = static os_log_type_t.error.getter();
      uint64_t v19 = qword_1000986F0;
      os_log_type_t v20 = v18;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v18))
      {
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        uint64_t v30 = v19;
        uint64_t v21 = swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136446722;
        uint64_t v22 = *(void *)(v2 + 16);
        uint64_t v23 = *(void *)(v2 + 24);
        swift_bridgeObjectRetain();
        sub_100010478(v22, v23, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2082;
        type metadata accessor for SystemXPCPeerConnection();
        swift_retain();
        uint64_t v24 = String.init<A>(describing:)();
        sub_100010478(v24, v25, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 22) = 2082;
        swift_retain();
        uint64_t v26 = String.init<A>(describing:)();
        sub_100010478(v26, v27, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v20, "%{public}s: Received PIN challenge from peer %{public}s but pairing was initiated by %{public}s", (uint8_t *)v21, 0x20u);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      static RemotePairingError.invalidOperation.getter();
      sub_10000DA28((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_100016520();
      sub_10000DA28((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_10001689C();
      sub_100016440();
      swift_willThrow();
    }
    swift_release();
    swift_release();
    type metadata accessor for DiscoveredBonjourAdvert();
    sub_100010EF0();
    return (*(uint64_t (**)(uint64_t))(v28 + 8))(v0);
  }
  else
  {
    os_log_type_t v7 = static os_log_type_t.error.getter();
    uint64_t v8 = qword_1000986F0;
    os_log_type_t v9 = v7;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v7))
    {
      swift_retain_n();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446466;
      os_log_type_t v29 = v9;
      uint64_t v11 = *(void *)(v1 + 16);
      uint64_t v12 = *(void *)(v1 + 24);
      swift_bridgeObjectRetain();
      sub_100010478(v11, v12, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2082;
      uint64_t v13 = sub_100032714();
      sub_1000323E8(v13, v14);
      uint64_t v15 = String.init<A>(describing:)();
      sub_100010478(v15, v16, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v29, "%{public}s: Invalid state to attempt PIN pairing: %{public}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
    static RemotePairingError.invalidOperation.getter();
    sub_10000DA28((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    sub_100016520();
    sub_10000DA28((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    sub_100016440();
    swift_willThrow();
    return sub_100031E08(v0);
  }
}

uint64_t sub_10002D4E0(uint64_t a1)
{
  uint64_t v79 = a1;
  uint64_t v4 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  sub_100013814();
  uint64_t v75 = v5;
  __chkstk_darwin(v6);
  sub_100016DB0();
  uint64_t v7 = type metadata accessor for PairingOutcome();
  sub_100013814();
  uint64_t v74 = v8;
  __chkstk_darwin(v9);
  sub_100016A00();
  uint64_t v81 = type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v10);
  sub_1000120E0();
  uint64_t v83 = v11;
  uint64_t v12 = type metadata accessor for DiscoveredBonjourAdvert();
  sub_100013814();
  uint64_t v84 = v13;
  __chkstk_darwin(v14);
  uint64_t v16 = sub_100016AD8(v15, v68);
  uint64_t v17 = type metadata accessor for DiscoveredPairableHost.State(v16);
  sub_100010EF0();
  __chkstk_darwin(v18);
  sub_100010F00();
  uint64_t v77 = v19;
  sub_100013488();
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v68 - v21;
  uint64_t v80 = v1;
  uint64_t v23 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  swift_beginAccess();
  sub_1000323E8(v23, (uint64_t)v22);
  uint64_t v78 = v17;
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v71 = v2;
    uint64_t v72 = v3;
    uint64_t v70 = v4;
    uint64_t v24 = (int *)sub_1000153C0(&qword_100095918);
    uint64_t v25 = *(void *)&v22[v24[12]];
    uint64_t v26 = *(void *)&v22[v24[16]];
    uint64_t v27 = &v22[v24[20]];
    uint64_t v28 = *((void *)v27 + 1);
    uint64_t v69 = *(void (**)(uint64_t *))v27;
    uint64_t v29 = v84;
    uint64_t v30 = v82;
    sub_100016EDC();
    v31();
    type metadata accessor for XPCConnection();
    uint64_t v32 = v12;
    uint64_t v33 = v79;
    char v34 = static XPCConnection.== infix(_:_:)();
    uint64_t v73 = v32;
    if (v34)
    {
      type metadata accessor for POSIXError();
      uint64_t v83 = &v68;
      sub_100013814();
      __chkstk_darwin(v35);
      sub_100013C28();
      LODWORD(v86) = 89;
      sub_10004E880((uint64_t)&_swiftEmptyArrayStorage);
      sub_1000324EC((unint64_t *)&qword_1000959E0, (void (*)(uint64_t))&type metadata accessor for POSIXError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v36 = POSIXError._nsError.getter();
      sub_1000112D0();
      v37();
      uint64_t v38 = v71;
      *uint64_t v71 = v36;
      uint64_t v81 = v26;
      uint64_t v39 = v74;
      sub_100013478();
      v40();
      v69(v38);
      (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v38, v7);
      uint64_t v41 = v77;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v77, v30, v73);
      swift_storeEnumTagMultiPayload();
      sub_10002AF80(v41);
      uint64_t v42 = v75;
      uint64_t v43 = v72;
      uint64_t v44 = v70;
      (*(void (**)(uint64_t, void, uint64_t))(v75 + 104))(v72, enum case for ControlChannelConnection.InvalidationReason.onDemandTaskCompleted(_:), v70);
      dispatch thunk of ControlChannelConnection.invalidate(for:)();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
      sub_100010EE4();
      return v45();
    }
    else
    {
      uint64_t v77 = v25;
      uint64_t v78 = v28;
      os_log_type_t v56 = static os_log_type_t.error.getter();
      uint64_t v57 = qword_1000986F0;
      os_log_type_t v58 = v56;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v56))
      {
        uint64_t v59 = v80;
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        uint64_t v60 = swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        uint64_t v86 = v76;
        *(_DWORD *)uint64_t v60 = 136446722;
        uint64_t v61 = *(void *)(v59 + 16);
        uint64_t v62 = *(void *)(v59 + 24);
        swift_bridgeObjectRetain();
        uint64_t v63 = sub_100010478(v61, v62, &v86);
        sub_100016D2C(v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 12) = 2082;
        uint64_t v85 = v33;
        type metadata accessor for SystemXPCPeerConnection();
        swift_retain();
        uint64_t v64 = String.init<A>(describing:)();
        uint64_t v85 = sub_100010478(v64, v65, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v60 + 22) = 2082;
        uint64_t v85 = v26;
        swift_retain();
        uint64_t v66 = String.init<A>(describing:)();
        uint64_t v85 = sub_100010478(v66, v67, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v29 = v84;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "%{public}s: Received PIN challenge from peer %{public}s but pairing was initiated by %{public}s", (uint8_t *)v60, 0x20u);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      static RemotePairingError.invalidOperation.getter();
      sub_10000DA28((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_100016520();
      sub_10000DA28((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_100016440();
      swift_willThrow();
      swift_release();
      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v82, v73);
    }
  }
  else
  {
    os_log_type_t v47 = static os_log_type_t.error.getter();
    unint64_t v48 = qword_1000986F0;
    int v49 = v47;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v47))
    {
      uint64_t v50 = v80;
      swift_retain_n();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      uint64_t v86 = v84;
      *(_DWORD *)uint64_t v51 = 136446466;
      uint64_t v52 = *(void *)(v50 + 16);
      uint64_t v53 = *(void *)(v50 + 24);
      swift_bridgeObjectRetain();
      uint64_t v85 = sub_100010478(v52, v53, &v86);
      LODWORD(v82) = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v51 + 12) = 2082;
      sub_1000323E8(v23, v77);
      uint64_t v54 = String.init<A>(describing:)();
      uint64_t v85 = sub_100010478(v54, v55, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v82, "%{public}s: Invalid state to handle pairing cancellation: %{public}s", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
    static RemotePairingError.invalidOperation.getter();
    sub_10000DA28((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    sub_100016520();
    sub_10000DA28((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    sub_100016440();
    swift_willThrow();
    return sub_100031E08((uint64_t)v22);
  }
}

void sub_10002DDFC()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  uint64_t v60 = v2;
  uint64_t v61 = v3;
  uint64_t v5 = v4;
  uint64_t v58 = sub_1000153C0(&qword_100095A08);
  sub_100010EF0();
  __chkstk_darwin(v6);
  sub_1000120E0();
  uint64_t v59 = v7;
  uint64_t v8 = type metadata accessor for DiscoveredBonjourAdvert();
  sub_100013814();
  uint64_t v57 = v9;
  __chkstk_darwin(v10);
  sub_1000120E0();
  uint64_t v53 = v11;
  uint64_t v56 = type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v12);
  sub_1000120E0();
  uint64_t v55 = v13;
  uint64_t v14 = type metadata accessor for DiscoveredPairableHost.State(0);
  sub_100010EF0();
  __chkstk_darwin(v15);
  sub_100010F00();
  uint64_t v54 = v16;
  sub_100013488();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v50 - v18;
  os_log_type_t v20 = static os_log_type_t.default.getter();
  uint64_t v21 = qword_1000986F0;
  os_log_type_t v22 = v20;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v20))
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v23 = sub_100032720();
    uint64_t v52 = v14;
    uint64_t v24 = v23;
    v64[0] = sub_100032788();
    *(_DWORD *)uint64_t v24 = 136446466;
    uint64_t v51 = v8;
    uint64_t v25 = *(void *)(v1 + 16);
    uint64_t v26 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_100010478(v25, v26, v64);
    sub_100016D2C(v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2082;
    v63[0] = v5;
    type metadata accessor for SystemXPCPeerConnection();
    swift_retain();
    uint64_t v28 = String.init<A>(describing:)();
    v63[0] = sub_100010478(v28, v29, v64);
    uint64_t v8 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: Received request to wirelessly pair from peer: %{public}s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    sub_1000120B0();
    sub_1000120B0();
  }
  uint64_t v30 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_100013A48();
  sub_1000323E8(v30, (uint64_t)v19);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v53 = v30;
      sub_1000153C0(&qword_100095918);
      swift_release();
      swift_release();
      swift_release();
      sub_100010EE4();
      v31();
      static RemotePairingError.pairingFailed.getter();
      sub_10000DA28((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      uint64_t v32 = sub_100016350();
      sub_10000DA28((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_10001689C();
      Error<>.init(_:_:)();
      goto LABEL_7;
    case 3u:
      uint64_t v53 = v30;
      static RemotePairingError.pairingFailed.getter();
      sub_10000DA28((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      uint64_t v32 = sub_100016350();
      uint64_t v39 = v57;
      sub_10000DA28((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      Error<>.init(_:_:)();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v8);
      goto LABEL_9;
    case 4u:
      uint64_t v53 = v30;
      sub_10000DA28((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      uint64_t v32 = sub_100016350();
      static RemotePairingError.deviceNotFound.getter();
LABEL_7:
      swift_willThrow();
LABEL_9:
      os_log_type_t v40 = static os_log_type_t.error.getter();
      uint64_t v41 = qword_1000986F0;
      os_log_type_t v42 = v40;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v40))
      {
        swift_retain_n();
        uint64_t v43 = sub_100032720();
        v63[0] = sub_100032788();
        *(_DWORD *)uint64_t v43 = 136446466;
        uint64_t v44 = v1;
        uint64_t v45 = *(void *)(v1 + 16);
        uint64_t v46 = *(void *)(v44 + 24);
        swift_bridgeObjectRetain();
        uint64_t v62 = sub_100010478(v45, v46, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2082;
        sub_1000323E8(v53, v54);
        uint64_t v47 = String.init<A>(describing:)();
        uint64_t v62 = sub_100010478(v47, v48, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s: Invalid state to handle pairing initiation request: %{public}s", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      uint64_t v49 = (uint64_t)v59;
      *uint64_t v59 = v32;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v60(v49);
      swift_errorRelease();
      sub_100015C5C(v49, &qword_100095A08);
      break;
    default:
      uint64_t v33 = v57;
      uint64_t v34 = v53;
      sub_100016EDC();
      v35();
      uint64_t v36 = sub_100010E68();
      swift_weakInit();
      uint64_t v37 = (void *)swift_allocObject();
      uint64_t v38 = v60;
      void v37[2] = v36;
      void v37[3] = v38;
      v37[4] = v61;
      v37[5] = v5;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100030854();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v8);
      swift_release();
      break;
  }
  sub_100013918();
}

uint64_t sub_10002E5BC(char *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a5;
  uint64_t v59 = a4;
  uint64_t v60 = a3;
  uint64_t v51 = type metadata accessor for DeviceServiceEvent();
  uint64_t v49 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v62 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for PairingChallengeEvent();
  uint64_t v56 = *(void *)(v61 - 8);
  uint64_t v7 = __chkstk_darwin(v61);
  uint64_t v52 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v43 - v10;
  __chkstk_darwin(v9);
  uint64_t v53 = (char *)v43 - v12;
  uint64_t v57 = sub_1000153C0(&qword_100095A08);
  __chkstk_darwin(v57);
  uint64_t v58 = (void *)((char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for PairingOutcome();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)v43 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)v43 - v22;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v25 = result;
    uint64_t v45 = v11;
    os_log_type_t v26 = static os_log_type_t.default.getter();
    uint64_t v27 = qword_1000986F0;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v54 = a1;
    uint64_t v29 = a1;
    uint64_t v30 = v28;
    v28(v23, v29, v14);
    os_log_t v47 = v27;
    int v46 = v26;
    BOOL v31 = os_log_type_enabled(v27, v26);
    uint64_t v55 = v25;
    if (v31)
    {
      swift_retain();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      v64[0] = v44;
      *(_DWORD *)uint64_t v32 = 136446466;
      v43[1] = v32 + 4;
      uint64_t v48 = v30;
      uint64_t v33 = *(void *)(v25 + 16);
      uint64_t v34 = *(void *)(v25 + 24);
      swift_bridgeObjectRetain();
      uint64_t v63 = sub_100010478(v33, v34, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2082;
      v48(v21, v23, v14);
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v63 = sub_100010478(v35, v36, v64);
      uint64_t v30 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v46, "%{public}s: Received pairing outcome %{public}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
    }
    v30(v18, v54, v14);
    int v37 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v18, v14);
    uint64_t v38 = v62;
    if (v37 == enum case for PairingOutcome.failure(_:))
    {
      (*(void (**)(char *, uint64_t))(v15 + 96))(v18, v14);
      uint64_t v39 = (uint64_t)v58;
      *uint64_t v58 = *(void *)v18;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v60(v39);
      swift_errorRelease();
LABEL_7:
      swift_release();
      return sub_100015C5C(v39, &qword_100095A08);
    }
    if (v37 == enum case for PairingOutcome.challenge(_:))
    {
      (*(void (**)(char *, uint64_t))(v15 + 96))(v18, v14);
      os_log_type_t v40 = v53;
      PairingChallengeEvent.init(lastAttemptIncorrect:throttleSeconds:)();
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v38, v40, v61);
      uint64_t v41 = v49 + 104;
      uint64_t v42 = v51;
      (*(void (**)(char *, void, uint64_t))(v49 + 104))(v38, enum case for DeviceServiceEvent.pairingChallenge(_:), v51);
      sub_10000DA28(&qword_1000959F0, (void (*)(uint64_t))&type metadata accessor for DeviceServiceEvent);
      sub_10000DA28(&qword_1000959F8, (void (*)(uint64_t))&type metadata accessor for DeviceServiceEvent);
      XPCConnection.send<A>(value:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v41 - 96))(v38, v42);
      return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v40, v61);
    }
    if (v37 == enum case for PairingOutcome.success(_:))
    {
      uint64_t v39 = (uint64_t)v58;
      sub_10002C890();
      swift_storeEnumTagMultiPayload();
      v60(v39);
      goto LABEL_7;
    }
    if (v37 == enum case for PairingOutcome.awaitingUserConsent(_:))
    {
      return swift_release();
    }
    else
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

void sub_10002EFB8()
{
  sub_1000139EC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v30 = v6;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  type metadata accessor for DiscoveredPairableHost.State(0);
  sub_100010EF0();
  __chkstk_darwin(v11);
  sub_100013900();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  uint64_t v13 = qword_1000986F0;
  os_log_type_t v14 = v12;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v12))
  {
    swift_retain();
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446210;
    uint64_t v29 = v15;
    uint64_t v16 = v8;
    uint64_t v17 = v10;
    uint64_t v18 = v3;
    uint64_t v20 = *(void *)(v0 + 16);
    uint64_t v19 = *(void *)(v0 + 24);
    swift_bridgeObjectRetain();
    uint64_t v21 = v20;
    uint64_t v3 = v18;
    uint64_t v10 = v17;
    uint64_t v8 = v16;
    sub_100010478(v21, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s: Initating pairing", v29, 0xCu);
    swift_arrayDestroy();
    sub_1000120B0();
    sub_1000120B0();
  }
  uint64_t v22 = (int *)sub_1000153C0(&qword_100095918);
  uint64_t v23 = v22[12];
  uint64_t v24 = v22[16];
  uint64_t v25 = (void *)(v1 + v22[20]);
  type metadata accessor for DiscoveredBonjourAdvert();
  sub_100010EF0();
  (*(void (**)(uint64_t, uint64_t))(v26 + 16))(v1, v30);
  *(void *)(v1 + v23) = v8;
  *(void *)(v1 + v24) = v10;
  *uint64_t v25 = v5;
  v25[1] = v3;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10002AF80(v1);
  uint64_t v27 = sub_100010E68();
  swift_weakInit();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v27;
  *(void *)(v28 + 24) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of ControlChannelConnection.initiatePairing(withOptions:pairingOutcomeHandler:)();
  swift_release();
  swift_release();
  sub_100013918();
}

uint64_t sub_10002F260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v80 = a1;
  uint64_t v4 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  uint64_t v79 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v78 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PairingOutcome();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v82 = v6;
  uint64_t v83 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v81 = (uint8_t **)((char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v67 - v10;
  uint64_t v12 = type metadata accessor for DiscoveredPairableHost.State(0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v77 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v67 - v15;
  uint64_t v17 = type metadata accessor for DiscoveredBonjourAdvert();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v22 = result;
    uint64_t v23 = result + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
    swift_beginAccess();
    sub_1000323E8(v23, (uint64_t)v16);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v75 = v4;
      uint64_t v76 = v22;
      uint64_t v24 = a3;
      uint64_t v25 = v17;
      uint64_t v26 = sub_1000153C0(&qword_100095918);
      uint64_t v27 = *(void *)&v16[*(int *)(v26 + 48)];
      swift_release();
      uint64_t v28 = *(void (**)(void *))&v16[*(int *)(v26 + 80)];
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v25);
      if (v27 == v24)
      {
        uint64_t v73 = v24;
        uint64_t v74 = v28;
        uint64_t v29 = v25;
        uint64_t v30 = v82;
        uint64_t v31 = v83;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v11, v80, v82);
        uint64_t v32 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v11, v30);
        uint64_t v33 = v32;
        if (v32 == enum case for PairingOutcome.failure(_:))
        {
          (*(void (**)(char *, uint64_t))(v31 + 96))(v11, v30);
          uint64_t v34 = *(void *)v11;
          uint64_t v35 = v33;
          uint64_t v36 = v30;
          uint64_t v37 = v18;
          uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
          uint64_t v39 = v77;
          uint64_t v72 = v29;
          v38(v77, v20, v29);
          swift_storeEnumTagMultiPayload();
          sub_10002AF80(v39);
          os_log_type_t v40 = v81;
          *uint64_t v81 = v34;
          (*(void (**)(void *, uint64_t, uint64_t))(v31 + 104))(v40, v35, v36);
          swift_errorRetain();
          v74(v40);
          (*(void (**)(void *, uint64_t))(v31 + 8))(v40, v36);
          uint64_t v41 = v78;
          uint64_t v42 = v79;
          uint64_t v43 = v75;
          (*(void (**)(char *, void, uint64_t))(v79 + 104))(v78, enum case for ControlChannelConnection.InvalidationReason.onDemandTaskCompleted(_:), v75);
          dispatch thunk of ControlChannelConnection.invalidate(for:)();
          swift_release();
          swift_errorRelease();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v43);
          return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v20, v72);
        }
        else
        {
          uint64_t v44 = v76;
          if (v32 == enum case for PairingOutcome.challenge(_:))
          {
            (*(void (**)(char *, uint64_t))(v31 + 96))(v11, v30);
            char v45 = *v11;
            uint64_t v46 = *((void *)v11 + 1);
            char v47 = v11[16];
            uint64_t v48 = v81;
            *(unsigned char *)uint64_t v81 = v45;
            v48[1] = v46;
            *((unsigned char *)v48 + 16) = v47;
            (*(void (**)(void *, uint64_t, uint64_t))(v31 + 104))(v48, v33, v30);
            v74(v48);
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(void *, uint64_t))(v31 + 8))(v48, v30);
            return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v29);
          }
          else
          {
            uint64_t v49 = v74;
            uint64_t v71 = v20;
            if (v32 == enum case for PairingOutcome.success(_:))
            {
              LODWORD(v80) = v32;
              os_log_type_t v50 = static os_log_type_t.default.getter();
              uint64_t v51 = qword_1000986F0;
              int v52 = v50;
              if (os_log_type_enabled((os_log_t)qword_1000986F0, v50))
              {
                swift_retain();
                uint64_t v53 = swift_slowAlloc();
                int v69 = v52;
                uint64_t v54 = (uint8_t *)v53;
                uint64_t v70 = swift_slowAlloc();
                uint64_t v85 = v70;
                os_log_t v68 = v51;
                *(_DWORD *)uint64_t v54 = 136446210;
                uint64_t v67 = v54 + 4;
                uint64_t v56 = *(void *)(v44 + 16);
                uint64_t v55 = *(void *)(v44 + 24);
                swift_bridgeObjectRetain();
                uint64_t v84 = sub_100010478(v56, v55, &v85);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v69, "%{public}s: Successfully wirelessly paired with host", v54, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              uint64_t v57 = v18;
              uint64_t v58 = v77;
              (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v77, v20, v29);
              swift_storeEnumTagMultiPayload();
              sub_10002AF80(v58);
              uint64_t v59 = v82;
              uint64_t v60 = v83;
              uint64_t v61 = v81;
              (*(void (**)(void *, void, uint64_t))(v83 + 104))(v81, v80, v82);
              v74(v61);
              (*(void (**)(void *, uint64_t))(v60 + 8))(v61, v59);
              uint64_t v63 = v78;
              uint64_t v62 = v79;
              uint64_t v64 = v75;
              (*(void (**)(char *, void, uint64_t))(v79 + 104))(v78, enum case for ControlChannelConnection.InvalidationReason.devicePaired(_:), v75);
              dispatch thunk of ControlChannelConnection.invalidate(for:)();
              swift_release();
              swift_release();
              swift_release();
              (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
              return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v71, v29);
            }
            else if (v32 == enum case for PairingOutcome.awaitingUserConsent(_:))
            {
              uint64_t v65 = v83;
              uint64_t v66 = v81;
              (*(void (**)(void *, uint64_t, uint64_t))(v83 + 104))(v81, v32, v30);
              v49(v66);
              swift_release();
              swift_release();
              swift_release();
              (*(void (**)(void *, uint64_t))(v65 + 8))(v66, v30);
              return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v71, v29);
            }
            else
            {
              uint64_t result = _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
          }
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v25);
        swift_release();
        swift_release();
        return swift_release();
      }
    }
    else
    {
      swift_release();
      return sub_100031E08((uint64_t)v16);
    }
  }
  return result;
}

void sub_10002FB90()
{
  sub_1000139EC();
  uint64_t v1 = type metadata accessor for DeviceServiceEvent();
  sub_100013814();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100010F00();
  uint64_t v44 = v5;
  sub_100013488();
  __chkstk_darwin(v6);
  uint64_t v53 = (char *)v42 - v7;
  sub_100013488();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v42 - v9;
  sub_10002C890();
  uint64_t v55 = v3;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v10, enum case for DeviceServiceEvent.pairableHostFound(_:), v1);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  uint64_t v12 = qword_1000986F0;
  os_log_type_t v13 = v11;
  BOOL v14 = os_log_type_enabled((os_log_t)qword_1000986F0, v11);
  char v45 = v10;
  if (v14)
  {
    swift_retain();
    uint64_t v15 = sub_100032720();
    v59[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v17 = *(void *)(v0 + 16);
    uint64_t v16 = *(void *)(v0 + 24);
    swift_bridgeObjectRetain();
    uint64_t v58 = sub_100010478(v17, v16, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2048;
    sub_100013A48();
    uint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v19 = v12;
    uint64_t v20 = sub_100012750(v18);
    swift_bridgeObjectRelease();
    uint64_t v58 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v19, v13, "%{public}s: Publishing discovered host state changes to %ld peers", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    sub_1000120B0();
    sub_1000120B0();
  }
  uint64_t v21 = (uint64_t *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__peers);
  sub_100013A48();
  uint64_t v22 = *v21;
  if ((*v21 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for SystemXPCPeerConnection();
    sub_10000DA28(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    Set.Iterator.init(_cocoa:)();
    uint64_t v22 = v59[0];
    uint64_t v49 = v59[1];
    uint64_t v25 = v59[2];
    uint64_t v24 = v59[3];
    unint64_t v26 = v59[4];
  }
  else
  {
    uint64_t v27 = -1 << *(unsigned char *)(v22 + 32);
    uint64_t v49 = v22 + 56;
    uint64_t v25 = ~v27;
    sub_100010E80();
    unint64_t v26 = v28 & v29;
    swift_bridgeObjectRetain();
    uint64_t v24 = 0;
  }
  uint64_t v47 = v22 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v48 = (unint64_t)(v25 + 64) >> 6;
  uint64_t v51 = v55 + 16;
  uint64_t v52 = v55 + 8;
  *(void *)&long long v23 = 136315394;
  long long v43 = v23;
  v42[1] = (char *)&type metadata for Any + 8;
  uint64_t v46 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v54 = v25;
  uint64_t v50 = v22;
  while (v22 < 0)
  {
    uint64_t v32 = __CocoaSet.Iterator.next()();
    if (!v32) {
      goto LABEL_32;
    }
    uint64_t v56 = v32;
    type metadata accessor for SystemXPCPeerConnection();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v33 = v57;
    swift_unknownObjectRelease();
    int64_t v31 = v24;
    uint64_t v55 = v26;
    if (!v33) {
      goto LABEL_32;
    }
LABEL_25:
    sub_10000DA28(&qword_1000959F0, (void (*)(uint64_t))&type metadata accessor for DeviceServiceEvent);
    sub_10000DA28(&qword_1000959F8, (void (*)(uint64_t))&type metadata accessor for DeviceServiceEvent);
    XPCConnection.send<A>(value:)();
    swift_release();
    uint64_t v24 = v31;
    unint64_t v26 = v55;
  }
  if (v26)
  {
    uint64_t v55 = (v26 - 1) & v26;
    unint64_t v30 = __clz(__rbit64(v26)) | (v24 << 6);
    int64_t v31 = v24;
LABEL_24:
    uint64_t v38 = *(void *)(*(void *)(v22 + 48) + 8 * v30);
    swift_retain();
    if (!v38) {
      goto LABEL_32;
    }
    goto LABEL_25;
  }
  int64_t v31 = v24 + 1;
  if (!__OFADD__(v24, 1))
  {
    if (v31 >= v48) {
      goto LABEL_32;
    }
    unint64_t v34 = *(void *)(v49 + 8 * v31);
    if (!v34)
    {
      sub_100032748();
      if (v35 == v36) {
        goto LABEL_32;
      }
      sub_100032738();
      if (v34) {
        goto LABEL_22;
      }
      sub_100032748();
      if (v35 == v36) {
        goto LABEL_32;
      }
      sub_100032738();
      if (v34)
      {
LABEL_22:
        int64_t v31 = v37;
      }
      else
      {
        int64_t v31 = v24 + 4;
        if (v24 + 4 >= v48) {
          goto LABEL_32;
        }
        unint64_t v34 = *(void *)(v49 + 8 * v31);
        if (!v34)
        {
          while (1)
          {
            sub_100032748();
            if (v35 == v36) {
              break;
            }
            sub_100032738();
            uint64_t v40 = v39 + 1;
            if (v34)
            {
              int64_t v31 = v40 - 1;
              goto LABEL_23;
            }
          }
LABEL_32:
          sub_100019C54();
          sub_100010EE4();
          v41();
          sub_100013918();
          return;
        }
      }
    }
LABEL_23:
    uint64_t v55 = (v34 - 1) & v34;
    unint64_t v30 = __clz(__rbit64(v34)) + (v31 << 6);
    goto LABEL_24;
  }
  __break(1u);
}

void sub_100030330()
{
  sub_1000139EC();
  uint64_t v4 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  sub_100013814();
  uint64_t v47 = v5;
  __chkstk_darwin(v6);
  sub_100016AD8(v7, v38);
  type metadata accessor for PairingOutcome();
  sub_100013814();
  uint64_t v44 = v9;
  uint64_t v45 = v8;
  __chkstk_darwin(v8);
  sub_1000120E0();
  long long v43 = v10;
  type metadata accessor for DiscoveredPairableHost.State(0);
  sub_100010EF0();
  __chkstk_darwin(v11);
  sub_100015634();
  __chkstk_darwin(v12);
  sub_100015F08();
  uint64_t v13 = type metadata accessor for DiscoveredBonjourAdvert();
  sub_100013814();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_100013C28();
  uint64_t v17 = v1 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_100013A48();
  sub_1000323E8(v17, v0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v40 = v2;
      uint64_t v42 = v4;
      uint64_t v19 = sub_1000153C0(&qword_100095918);
      uint64_t v41 = *(void (**)(uint64_t *))(v0 + *(int *)(v19 + 80));
      uint64_t v20 = *(uint8_t **)(v0 + *(int *)(v19 + 64));
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
      v21(v3, v0, v13);
      type metadata accessor for XPCConnection();
      char v22 = static XPCConnection.== infix(_:_:)();
      swift_release();
      if (v22)
      {
        uint64_t v39 = v21;
        os_log_type_t v23 = static os_log_type_t.default.getter();
        uint64_t v24 = qword_1000986F0;
        os_log_type_t v25 = v23;
        if (os_log_type_enabled((os_log_t)qword_1000986F0, v23))
        {
          swift_retain();
          unint64_t v26 = (uint8_t *)swift_slowAlloc();
          swift_slowAlloc();
          *(_DWORD *)unint64_t v26 = 136446210;
          uint64_t v20 = v26 + 12;
          swift_bridgeObjectRetain();
          uint64_t v27 = sub_10003277C();
          sub_100010478(v27, v28, v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s: Cancelling pairing attempt because peer initiating pairing has disconnected", v26, 0xCu);
          swift_arrayDestroy();
          sub_1000120B0();
          sub_1000120B0();
        }
        v39(v40, v3, v13);
        swift_storeEnumTagMultiPayload();
        sub_10002AF80(v40);
        uint64_t v30 = type metadata accessor for POSIXError();
        sub_100013814();
        uint64_t v32 = v31;
        __chkstk_darwin(v33);
        sub_100015778();
        sub_10004E880((uint64_t)&_swiftEmptyArrayStorage);
        sub_1000324EC((unint64_t *)&qword_1000959E0, (void (*)(uint64_t))&type metadata accessor for POSIXError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v34 = POSIXError._nsError.getter();
        (*(void (**)(uint8_t *, uint64_t))(v32 + 8))(v20, v30);
        *long long v43 = v34;
        sub_100013478();
        v35();
        v41(v43);
        swift_release();
        (*(void (**)(uint64_t *, uint64_t))(v44 + 8))(v43, v45);
        sub_100013478();
        v36();
        dispatch thunk of ControlChannelConnection.invalidate(for:)();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v42);
      }
      else
      {
        sub_1000112D0();
        v37();
        swift_release();
        swift_release();
      }
      break;
    case 4u:
      break;
    default:
      sub_1000112D0();
      v18();
      break;
  }
  sub_100013918();
}

void sub_100030854()
{
  sub_1000139EC();
  uint64_t v28 = v2;
  uint64_t v29 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  type metadata accessor for DiscoveredPairableHost.State(0);
  sub_100010EF0();
  __chkstk_darwin(v8);
  sub_100016A00();
  uint64_t v9 = type metadata accessor for ControlChannelConnection.Options();
  sub_100013814();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100012078();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__queue);
  DiscoveredBonjourAdvert.createTransport(withTargetQueue:)();
  sub_100017194((uint64_t)v32, (uint64_t)&v31);
  id v17 = v16;
  ControlChannelConnection.Options.Host.init(attemptPairVerify:)();
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v15, enum case for ControlChannelConnection.Options.host(_:), v9);
  sub_100017194(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__pairingManager, (uint64_t)&v30);
  type metadata accessor for ControlChannelConnection();
  static ControlChannelConnection.defaultMaxReconnectionAttempts.getter();
  swift_allocObject();
  uint64_t v18 = ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)();
  uint64_t v19 = sub_100010E68();
  swift_weakInit();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = v18;
  swift_retain();
  swift_retain();
  dispatch thunk of ControlChannelConnection.invalidationHandler.setter();
  swift_release();
  uint64_t v21 = sub_100010E68();
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = v18;
  swift_retain();
  swift_retain();
  dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter();
  swift_release();
  os_log_type_t v23 = (int *)sub_1000153C0(&qword_100095918);
  uint64_t v24 = v23[12];
  uint64_t v25 = v23[16];
  unint64_t v26 = (void *)(v1 + v23[20]);
  type metadata accessor for DiscoveredBonjourAdvert();
  sub_100010EF0();
  (*(void (**)(uint64_t, uint64_t))(v27 + 16))(v1, v7);
  *(void *)(v1 + v24) = v18;
  *(void *)(v1 + v25) = v5;
  *unint64_t v26 = v28;
  v26[1] = v29;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10002AF80(v1);
  dispatch thunk of ControlChannelConnection.start()();
  swift_release();
  sub_100010548((uint64_t)v32);
  sub_100013918();
}

uint64_t sub_100030B58(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  sub_100013A48();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(a2);
    return swift_release();
  }
  return result;
}

void sub_100030BC4()
{
  sub_1000139EC();
  uint64_t v4 = v3;
  type metadata accessor for PairingOutcome();
  sub_100013814();
  uint64_t v38 = v6;
  uint64_t v39 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = sub_10000D28C();
  sub_100013814();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v11 = sub_100016DB0();
  type metadata accessor for DiscoveredPairableHost.State(v11);
  sub_100010EF0();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v17 = (char *)&v35 - v16;
  uint64_t v18 = v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_100013A48();
  sub_1000323E8(v18, (uint64_t)v17);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v27 = v4;
      uint64_t v28 = sub_1000153C0(&qword_100095918);
      uint64_t v37 = *(void *)&v17[*(int *)(v28 + 48)];
      swift_release();
      char v36 = *(void (**)(uint64_t *))&v17[*(int *)(v28 + 80)];
      uint64_t v29 = v37;
      sub_100016EDC();
      v30();
      if (v29 == v27)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, v2, v7);
        swift_storeEnumTagMultiPayload();
        sub_10002AF80(v15);
        type metadata accessor for RemotePairingError();
        sub_10000DA28((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        uint64_t v31 = sub_100016350();
        sub_10000DA28((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        static Error<>.unknown.getter();
        *uint64_t v1 = v31;
        uint64_t v33 = v38;
        uint64_t v32 = v39;
        sub_100013478();
        v34();
        v36(v1);
        swift_release();
        swift_release();
        (*(void (**)(uint64_t *, uint64_t))(v33 + 8))(v1, v32);
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
        swift_release();
        swift_release();
      }
      goto LABEL_9;
    case 2u:
      sub_1000153C0(&qword_100095918);
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3u:
LABEL_8:
      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v7);
      goto LABEL_9;
    case 4u:
      goto LABEL_3;
    default:
      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v7);
LABEL_3:
      os_log_type_t v19 = static os_log_type_t.error.getter();
      uint64_t v20 = qword_1000986F0;
      os_log_type_t v21 = v19;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v19))
      {
        swift_retain_n();
        swift_retain();
        uint64_t v22 = sub_100032720();
        v41[0] = sub_100032788();
        *(_DWORD *)uint64_t v22 = 136446466;
        uint64_t v23 = *(void *)(v0 + 16);
        uint64_t v24 = *(void *)(v0 + 24);
        swift_bridgeObjectRetain();
        uint64_t v40 = sub_100010478(v23, v24, v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 12) = 2080;
        uint64_t v25 = dispatch thunk of ControlChannelConnection.id.getter();
        uint64_t v40 = sub_100010478(v25, v26, v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s: Unexpectedly received control channel invalidation for %s while in state unavailable", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
LABEL_9:
      sub_100013918();
      return;
  }
}

void sub_1000310B0()
{
  sub_1000139EC();
  uint64_t v3 = v2;
  type metadata accessor for DiscoveredPairableHost.State(0);
  sub_100010EF0();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_10000D28C();
  sub_100013814();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100012078();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state;
  sub_100013A48();
  sub_1000323E8(v12, v1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *(void *)(v1 + *(int *)(sub_1000153C0(&qword_100095918) + 48));
    sub_100016EDC();
    v14();
    if (v13 == v3)
    {
      sub_10002EFB8();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
    }
    else
    {
      sub_1000112D0();
      v15();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    sub_100031E08(v1);
  }
  sub_100013918();
}

uint64_t sub_100031264()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_100010EF0();
  sub_100010EE4();
  v1();
  sub_100010548(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__pairingManager);

  sub_100031E08(v0 + OBJC_IVAR____TtC20remotepairingdeviced22DiscoveredPairableHost__state);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100031344()
{
  sub_100031264();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10003139C()
{
  return type metadata accessor for DiscoveredPairableHost(0);
}

uint64_t type metadata accessor for DiscoveredPairableHost(uint64_t a1)
{
  return sub_1000314F8(a1, qword_100095768);
}

uint64_t sub_1000313C4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DiscoveredPairableHost.State(319);
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata accessor for DiscoveredPairableHost.State(uint64_t a1)
{
  return sub_1000314F8(a1, qword_100095990);
}

uint64_t sub_1000314F8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_10003152C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 3u:
        uint64_t v14 = type metadata accessor for DiscoveredBonjourAdvert();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
        goto LABEL_7;
      case 1u:
      case 2u:
        uint64_t v8 = type metadata accessor for DiscoveredBonjourAdvert();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = (int *)sub_1000153C0(&qword_100095918);
        *(uint64_t *)((char *)a1 + v9[12]) = *(uint64_t *)((char *)a2 + v9[12]);
        *(uint64_t *)((char *)a1 + v9[16]) = *(uint64_t *)((char *)a2 + v9[16]);
        uint64_t v10 = v9[20];
        uint64_t v11 = (uint64_t *)((char *)a1 + v10);
        uint64_t v12 = (uint64_t *)((char *)a2 + v10);
        uint64_t v13 = v12[1];
        void *v11 = *v12;
        v11[1] = v13;
        swift_retain();
        swift_retain();
        swift_retain();
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000317E0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 3:
      uint64_t v3 = type metadata accessor for DiscoveredBonjourAdvert();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 1:
    case 2:
      uint64_t v5 = type metadata accessor for DiscoveredBonjourAdvert();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      sub_1000153C0(&qword_100095918);
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

char *sub_100031918(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 3u:
      uint64_t v12 = type metadata accessor for DiscoveredBonjourAdvert();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      goto LABEL_5;
    case 1u:
    case 2u:
      uint64_t v6 = type metadata accessor for DiscoveredBonjourAdvert();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)sub_1000153C0(&qword_100095918);
      *(void *)&a1[v7[12]] = *(void *)&a2[v7[12]];
      *(void *)&a1[v7[16]] = *(void *)&a2[v7[16]];
      uint64_t v8 = v7[20];
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = *((void *)v10 + 1);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v11;
      swift_retain();
      swift_retain();
      swift_retain();
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_100031B88(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100031E08((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 3u:
        uint64_t v12 = type metadata accessor for DiscoveredBonjourAdvert();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        goto LABEL_6;
      case 1u:
      case 2u:
        uint64_t v6 = type metadata accessor for DiscoveredBonjourAdvert();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)sub_1000153C0(&qword_100095918);
        *(void *)&a1[v7[12]] = *(void *)&a2[v7[12]];
        *(void *)&a1[v7[16]] = *(void *)&a2[v7[16]];
        uint64_t v8 = v7[20];
        uint64_t v9 = &a1[v8];
        uint64_t v10 = &a2[v8];
        uint64_t v11 = *((void *)v10 + 1);
        *(void *)uint64_t v9 = *(void *)v10;
        *((void *)v9 + 1) = v11;
        swift_retain();
        swift_retain();
        swift_retain();
LABEL_6:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100031E08(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiscoveredPairableHost.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100031E64(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 3u:
      uint64_t v8 = type metadata accessor for DiscoveredBonjourAdvert();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      goto LABEL_5;
    case 1u:
    case 2u:
      uint64_t v6 = type metadata accessor for DiscoveredBonjourAdvert();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)sub_1000153C0(&qword_100095918);
      *(void *)&a1[v7[12]] = *(void *)&a2[v7[12]];
      *(void *)&a1[v7[16]] = *(void *)&a2[v7[16]];
      *(_OWORD *)&a1[v7[20]] = *(_OWORD *)&a2[v7[20]];
LABEL_5:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_100032094(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100031E08((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 3u:
        uint64_t v8 = type metadata accessor for DiscoveredBonjourAdvert();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        goto LABEL_6;
      case 1u:
      case 2u:
        uint64_t v6 = type metadata accessor for DiscoveredBonjourAdvert();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = (int *)sub_1000153C0(&qword_100095918);
        *(void *)&a1[v7[12]] = *(void *)&a2[v7[12]];
        *(void *)&a1[v7[16]] = *(void *)&a2[v7[16]];
        *(_OWORD *)&a1[v7[20]] = *(_OWORD *)&a2[v7[20]];
LABEL_6:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000322E0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000322F0()
{
  uint64_t result = type metadata accessor for DiscoveredBonjourAdvert();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8) + 64;
    uint64_t v5 = v2;
    swift_getTupleTypeLayout();
    uint64_t v6 = &v4;
    v3[4] = v2;
    v3[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v3[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v3[7] = (char *)&value witness table for () + 64;
    swift_getTupleTypeLayout();
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1000323E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveredPairableHost.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003244C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100032488()
{
  return sub_100030B58(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(uint64_t))sub_100030BC4);
}

uint64_t sub_1000324BC()
{
  return sub_100030B58(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(uint64_t))sub_1000310B0);
}

uint64_t sub_1000324EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100032538(uint64_t a1)
{
  return sub_10002F260(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100032540()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100032588(char *a1)
{
  return sub_10002E5BC(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100032594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002C998(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1000325B0()
{
  return sub_10002C03C();
}

uint64_t sub_1000325CC(uint64_t a1, uint64_t *a2)
{
  return sub_10002C0F4(a1, a2);
}

uint64_t sub_1000325E8()
{
  return sub_10002C180();
}

uint64_t sub_1000325F0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100032628(uint64_t a1)
{
  return sub_10002B1BC(a1);
}

uint64_t sub_100032634(uint64_t a1)
{
  return sub_10002B6F0(a1);
}

uint64_t sub_10003263C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000153C0(a3);
  sub_100010EF0();
  uint64_t v4 = sub_10003277C();
  v5(v4);
  return a2;
}

uint64_t sub_100032694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiscoveredPairableHost.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000326F8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100032714()
{
  return v0;
}

uint64_t sub_100032720()
{
  return swift_slowAlloc();
}

uint64_t sub_100032764()
{
  return sub_10002AF80(v0);
}

uint64_t sub_10003277C()
{
  return v0;
}

uint64_t sub_100032788()
{
  return swift_slowAlloc();
}

void sub_1000327A0()
{
  off_100095A90 = &off_10008AAD0;
}

uint64_t sub_1000327B4()
{
  size_t v3 = 0;
  sysctlbyname("kern.bootargs", 0, &v3, 0, 0);
  size_t v0 = v3;
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (v3)
    {
      uint64_t v1 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v1[2] = v0;
      bzero(v1 + 4, v0);
    }
    else
    {
      uint64_t v1 = &_swiftEmptyArrayStorage;
    }
    sysctlbyname("kern.bootargs", v1 + 4, &v3, 0, 0);
    return sub_1000328CC((uint64_t)v1);
  }
  return result;
}

uint64_t sub_1000328CC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int8 *)(result + 32);
    result += 32;
    if (!v3)
    {
LABEL_6:
      uint64_t v7 = static String._fromUTF8Repairing(_:)();
      swift_bridgeObjectRelease();
      return v7;
    }
    uint64_t v4 = 0;
    uint64_t v5 = v1 - 1;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v2 + 33 + v4++)) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100032950()
{
  sub_1000327B4();
  if (!os_variant_allows_internal_security_policies()) {
    goto LABEL_9;
  }
  if (qword_100094990 != -1) {
    swift_once();
  }
  size_t v0 = (char *)off_100095A90;
  uint64_t v1 = *((void *)off_100095A90 + 2);
  if (v1)
  {
    swift_bridgeObjectRetain_n();
    for (i = v0 + 40; ; i += 16)
    {
      swift_bridgeObjectRetain_n();
      v3._countAndFlagsBits = 12605;
      v3._object = (void *)0xE200000000000000;
      String.append(_:)(v3);
      sub_100013B78();
      char v4 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v4) {
        break;
      }
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_100032ABC(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for SystemXPCListenerConnection();
  id v6 = a3;
  static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)();

  uint64_t v7 = swift_dynamicCastClassUnconditional();
  type metadata accessor for RemotePairingDeviceXPCServer();
  uint64_t v8 = swift_allocObject();
  sub_100032B68(v7, a1, a2, v6);
  return v8;
}

void *sub_100032B68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = type metadata accessor for XPCReplyProviding();
  __chkstk_darwin(v9 - 8);
  static XPCReplyProviding.passthrough.getter();
  sub_1000153C0(&qword_100095B80);
  swift_allocObject();
  v4[2] = XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)();
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    sub_100056CCC((uint64_t)&_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v10 = &_swiftEmptySetSingleton;
  }
  v4[4] = a4;
  v4[5] = v10;
  v4[3] = a1;
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  void v12[3] = a2;
  v12[4] = a3;
  id v13 = a4;
  swift_retain();
  swift_retain();
  dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)();
  swift_release();
  swift_release();
  swift_release();

  return v4;
}

uint64_t sub_100032D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a3;
  uint64_t v6 = type metadata accessor for XPCError();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v32 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = sub_1000153C0(&qword_100094F80);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000339D4(a1, (uint64_t)v18, &qword_100094F80);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v18, v6);
      os_log_type_t v20 = static os_log_type_t.error.getter();
      os_log_type_t v21 = qword_1000986F0;
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v35(v13, v15, v6);
      if (os_log_type_enabled(v21, v20))
      {
        swift_bridgeObjectRetain_n();
        uint64_t v22 = swift_slowAlloc();
        os_log_t v33 = v21;
        uint64_t v23 = v22;
        uint64_t v34 = swift_slowAlloc();
        v37[0] = v34;
        *(_DWORD *)uint64_t v23 = 136315394;
        uint64_t v32 = v23 + 4;
        swift_bridgeObjectRetain();
        uint64_t v38 = sub_100010478(v36, a4, v37);
        LODWORD(v36) = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v23 + 12) = 2080;
        v35(v10, v13, v6);
        uint64_t v24 = String.init<A>(describing:)();
        uint64_t v38 = sub_100010478(v24, v25, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
        v26(v13, v6);
        _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v36, "Failed to start %s with error: %s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
        return ((uint64_t (*)(char *, uint64_t))v26)(v15, v6);
      }
      else
      {
        swift_release();
        uint64_t v31 = *(void (**)(char *, uint64_t))(v7 + 8);
        v31(v13, v6);
        return ((uint64_t (*)(char *, uint64_t))v31)(v15, v6);
      }
    }
    else
    {
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      uint64_t v28 = qword_1000986F0;
      os_log_type_t v29 = v27;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v27))
      {
        swift_bridgeObjectRetain_n();
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        v37[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v38 = sub_100010478(v36, a4, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Peer connected to %s XPC service", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      type metadata accessor for SystemXPCPeerConnection();
      swift_dynamicCastClassUnconditional();
      swift_beginAccess();
      swift_retain();
      sub_100062DE0();
      swift_endAccess();
      swift_release();
      swift_dynamicCastClassUnconditional();
      swift_retain();
      sub_1000332A4();
      swift_release_n();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000332A4()
{
  dispatch thunk of XPCConnection.setTargetQueue(_:)();
  swift_beginAccess();
  swift_retain();
  sub_100062DE0();
  swift_endAccess();
  swift_release();
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = v1;
  swift_retain();
  swift_retain();
  dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)();
  swift_release();
  swift_release();
  swift_release();
  return dispatch thunk of XPCConnection.activate()();
}

uint64_t sub_1000333D8(uint64_t a1)
{
  uint64_t v34 = sub_1000153C0(&qword_1000950E8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v35 = (uint64_t *)((char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for XPCDictionary();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v28 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = sub_1000153C0(&qword_100095A80);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v18 = Strong;
      sub_1000339D4(a1, (uint64_t)v15, &qword_100095A80);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        swift_beginAccess();
        sub_10006525C();
        swift_endAccess();
        swift_release();
        swift_release();
        swift_release();
        return sub_100033A38((uint64_t)v15, &qword_100095A80);
      }
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v15, v3);
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      os_log_type_t v20 = qword_1000986F0;
      os_log_t v33 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
      v33(v10, v12, v3);
      if (os_log_type_enabled(v20, v19))
      {
        os_log_t v32 = v20;
        uint64_t v21 = swift_slowAlloc();
        int v30 = v19;
        uint64_t v22 = (uint8_t *)v21;
        uint64_t v31 = swift_slowAlloc();
        v37[0] = v31;
        os_log_type_t v29 = v22;
        *(_DWORD *)uint64_t v22 = 136315138;
        v33(v7, v10, v3);
        uint64_t v23 = String.init<A>(describing:)();
        uint64_t v36 = sub_100010478(v23, v24, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v25 = *(void (**)(char *, uint64_t))(v4 + 8);
        v25(v10, v3);
        _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v30, "Received XPC event from local peer: %s", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v25 = *(void (**)(char *, uint64_t))(v4 + 8);
        v25(v10, v3);
      }
      uint64_t v26 = (uint64_t)v35;
      os_log_type_t v27 = (char *)v35 + *(int *)(v34 + 48);
      *uint64_t v35 = v18;
      v33(v27, v12, v3);
      swift_retain();
      dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)();
      swift_release();
      sub_100033A38(v26, &qword_1000950E8);
      v25(v12, v3);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100033878()
{
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000338B0()
{
  sub_100033878();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RemotePairingDeviceXPCServer()
{
  return self;
}

uint64_t sub_100033908()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100033940()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100033980(uint64_t a1)
{
  return sub_100032D18(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10003398C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000339CC(uint64_t a1)
{
  return sub_1000333D8(a1);
}

uint64_t sub_1000339D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000153C0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100033A38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000153C0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100033A98()
{
  if (qword_1000949E0 != -1) {
    swift_once();
  }
  v4._countAndFlagsBits = 0xD00000000000003BLL;
  v4._object = (void *)0x800000010007B600;
  v0._object = (void *)0x800000010007B5E0;
  v0._countAndFlagsBits = 0xD000000000000014;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100098718, v1, v4);
  uint64_t result = v3._countAndFlagsBits;
  xmmword_100095B88 = (__int128)v3;
  return result;
}

uint64_t sub_100033B44()
{
  if (qword_1000949E0 != -1) {
    swift_once();
  }
  v4._object = (void *)0x800000010007B590;
  v0._countAndFlagsBits = 0x7473757254;
  v0._object = (void *)0xE500000000000000;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD00000000000004BLL;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100098718, v1, v4);
  uint64_t result = v3._countAndFlagsBits;
  xmmword_100095B98 = (__int128)v3;
  return result;
}

uint64_t sub_100033BE4()
{
  if (qword_1000949E0 != -1) {
    swift_once();
  }
  v4._object = (void *)0x800000010007B590;
  v0._countAndFlagsBits = 0x20749980E26E6F44;
  v0._object = (void *)0xAD00007473757254;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD00000000000004BLL;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100098718, v1, v4);
  uint64_t result = v3._countAndFlagsBits;
  xmmword_100095BA8 = (__int128)v3;
  return result;
}

uint64_t sub_100033C94()
{
  if (qword_1000949E0 != -1) {
    swift_once();
  }
  v0._countAndFlagsBits = 0xD000000000000068;
  v4._object = (void *)0x800000010007B6B0;
  v0._object = (void *)0x800000010007B640;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD00000000000005DLL;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100098718, v1, v4);
  uint64_t result = v3._countAndFlagsBits;
  xmmword_100095BB8 = (__int128)v3;
  return result;
}

Swift::String *sub_100033D40()
{
  if (qword_1000949E0 != -1) {
    swift_once();
  }
  v4._object = (void *)0x800000010007B550;
  v0._object = (void *)0x800000010007B4E0;
  v0._countAndFlagsBits = 0x1000000000000063;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD000000000000039;
  Swift::String v2 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100098718, v1, v4);
  uint64_t result = (Swift::String *)swift_allocObject();
  result[1] = v2;
  qword_100095BC8 = (uint64_t)sub_1000397A4;
  unk_100095BD0 = result;
  return result;
}

uint64_t sub_100033E20()
{
  if (qword_1000949E0 != -1) {
    swift_once();
  }
  v4._countAndFlagsBits = 0xD000000000000061;
  v4._object = (void *)0x800000010007B800;
  v0._object = (void *)0x800000010007B7D0;
  v0._countAndFlagsBits = 0xD00000000000002CLL;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100098718, v1, v4);
  uint64_t result = v3._countAndFlagsBits;
  xmmword_100095BD8 = (__int128)v3;
  return result;
}

uint64_t sub_100033ECC()
{
  if (qword_1000949E0 != -1) {
    swift_once();
  }
  v0._countAndFlagsBits = 0xD00000000000004CLL;
  v4._object = (void *)0x800000010007B8C0;
  v0._object = (void *)0x800000010007B870;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD000000000000049;
  Swift::String v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, (Swift::String_optional)0, (NSBundle)qword_100098718, v1, v4);
  uint64_t result = v3._countAndFlagsBits;
  xmmword_100095BE8 = (__int128)v3;
  return result;
}

uint64_t sub_100033F78(uint64_t a1)
{
  ((void (*)(void))sub_100066314)();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = v5[8];
  __chkstk_darwin(v4);
  uint64_t v7 = (void (*)(char *, uint64_t, uint64_t))v5[2];
  v7((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  if (v3)
  {
    uint64_t v8 = (void (*)(char *, uint64_t))v5[1];
    v8((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100066314((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v10 = v9;
    uint64_t v8 = (void (*)(char *, uint64_t))v5[1];
    v8((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v10) {
      return result;
    }
  }
  os_log_type_t v20 = (uint64_t (*)(char *, uint64_t))v8;
  uint64_t v12 = static os_log_type_t.default.getter();
  os_log_type_t v13 = v12;
  uint64_t v14 = qword_1000986F0;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7(v15, a1, v4);
  if (!os_log_type_enabled(v14, v13)) {
    return v20(v15, v4);
  }
  uint64_t v16 = (uint8_t *)swift_slowAlloc();
  uint64_t v22 = swift_slowAlloc();
  *(_DWORD *)uint64_t v16 = 136446210;
  uint64_t v17 = UUID.uuidString.getter();
  os_log_t v19 = v14;
  uint64_t v21 = sub_100010478(v17, v18, &v22);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v20(v15, v4);
  _os_log_impl((void *)&_mh_execute_header, v19, v13, "Ended promptless pairing session %{public}s", v16, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  return swift_slowDealloc();
}

uint64_t sub_100034248(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v9 = static os_log_type_t.default.getter();
  uint64_t v10 = qword_1000986F0;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v36 = (uint64_t *)&v31;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  BOOL v15 = os_log_type_enabled(v10, v9);
  if (a2)
  {
    if (v15)
    {
      uint64_t v35 = v4;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v32 = a3;
      uint64_t v17 = (uint8_t *)v16;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v34 = a4;
      uint64_t v38 = v18;
      *(_DWORD *)uint64_t v17 = 136446210;
      uint64_t v31 = v17 + 4;
      uint64_t v19 = UUID.uuidString.getter();
      uint64_t v33 = a1;
      uint64_t v37 = sub_100010478(v19, v20, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a1 = v33;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      _os_log_impl((void *)&_mh_execute_header, v10, v9, "Automation promptless pairing allowed by session %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      a4 = v34;
      swift_slowDealloc();
      a3 = v32;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
  else if (v15)
  {
    uint64_t v32 = a3;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v33 = a1;
    uint64_t v38 = v22;
    uint64_t v34 = a4;
    uint64_t v35 = v4;
    *(_DWORD *)uint64_t v21 = 136446210;
    uint64_t v31 = v21 + 4;
    uint64_t v23 = UUID.uuidString.getter();
    uint64_t v37 = sub_100010478(v23, v24, &v38);
    a4 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "Non-automation promptless pairing allowed by session %{public}s", v21, 0xCu);
    swift_arrayDestroy();
    a1 = v33;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  swift_bridgeObjectRetain();
  return sub_10006695C(a3, a4, a1, v25, v26, v27, v28, v29, (uint64_t)v31, v32);
}

uint64_t sub_1000345DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000153C0(&qword_100095DC8);
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = swift_bridgeObjectRetain();
  sub_10005A80C(v5, (uint64_t)&v24 - v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_1000153C0(&qword_100095DD0);
  if (sub_100015C0C((uint64_t)&v24 - v4, 1, v6) != 1)
  {
    uint64_t v12 = (uint64_t *)((char *)&v24 + *(int *)(v6 + 48) - v4);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))((char *)&v24 - v4, v15);
    uint64_t v16 = sub_1000153C0(&qword_100095DC0);
    uint64_t v17 = (void *)(a1 + *(int *)(v16 + 48));
    uint64_t v18 = (unsigned int *)&enum case for PermittedPromptlessPairingMode.automation(_:);
LABEL_6:
    uint64_t v21 = *v18;
    uint64_t v22 = type metadata accessor for PermittedPromptlessPairingMode();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(a1, v21, v22);
    *uint64_t v17 = v13;
    v17[1] = v14;
    uint64_t v10 = a1;
    uint64_t v11 = 0;
    uint64_t v9 = v16;
    return sub_100015C34(v10, v11, 1, v9);
  }
  uint64_t v7 = sub_100039BB0((uint64_t)&v24 - v4);
  __chkstk_darwin(v7);
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_10005A80C(v8, (uint64_t)&v24 - v4);
  swift_bridgeObjectRelease();
  if (sub_100015C0C((uint64_t)&v24 - v4, 1, v6) != 1)
  {
    uint64_t v19 = (uint64_t *)((char *)&v24 + *(int *)(v6 + 48) - v4);
    uint64_t v13 = *v19;
    uint64_t v14 = v19[1];
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))((char *)&v24 - v4, v20);
    uint64_t v16 = sub_1000153C0(&qword_100095DC0);
    uint64_t v17 = (void *)(a1 + *(int *)(v16 + 48));
    uint64_t v18 = (unsigned int *)&enum case for PermittedPromptlessPairingMode.nonAutomation(_:);
    goto LABEL_6;
  }
  sub_100039BB0((uint64_t)&v24 - v4);
  uint64_t v9 = sub_1000153C0(&qword_100095DC0);
  uint64_t v10 = a1;
  uint64_t v11 = 1;
  return sub_100015C34(v10, v11, 1, v9);
}

uint64_t sub_100034858()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000348AC()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v3 = *(void **)(v0 + 80);
  uint64_t v2 = *(void **)(v0 + 88);
  id v4 = v3;
  id v5 = v2;
  return v1;
}

void sub_1000348EC()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  id v34 = v2;
  v33[3] = sub_1000394F0();
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(*(void *)(v3 - 8) + 64);
  __chkstk_darwin(v3 - 8);
  unint64_t v36 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  static DispatchQoS.userInitiated.getter();
  uint64_t v40 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100013844();
  v33[4] = *(void *)(v5 + 64);
  __chkstk_darwin(v6);
  unint64_t v37 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v38 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v9 = *(void (**)(void))(v8 + 104);
  uint64_t v39 = v8 + 104;
  uint64_t v41 = v9;
  v9((char *)v33 - v37);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  __chkstk_darwin(v10);
  v33[1] = v11;
  v33[2] = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v42 = &_swiftEmptyArrayStorage;
  sub_100039854((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000153C0(&qword_100095D80);
  sub_100039728((unint64_t *)&unk_100096220, &qword_100095D80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for UUID();
  sub_100039854((unint64_t *)&qword_100096300, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v12 = sub_100016080();
  uint64_t v13 = sub_100016080();
  *(void *)(v0 + 48) = v12;
  *(void *)(v0 + 56) = v13;
  id v14 = [objc_allocWithZone((Class)USBListener) init];
  *(void *)(v0 + 64) = v14;
  *(unsigned char *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 88) = 0;
  *(void *)(v0 + 16) = v34;
  __chkstk_darwin(v14);
  id v34 = v15;
  uint64_t v16 = static OS_dispatch_queue.Attributes.concurrent.getter();
  __chkstk_darwin(v16);
  sub_100016EFC();
  v17();
  uint64_t v18 = type metadata accessor for DispatchQoS.QoSClass();
  sub_100013844();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_100012078();
  uint64_t v24 = v23 - v22;
  sub_1000120F4();
  v25();
  static OS_dispatch_queue.global(qos:)();
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v24, v18);
  __chkstk_darwin(v26);
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 32) = v27;
  __chkstk_darwin(v27);
  uint64_t v28 = static OS_dispatch_queue.Attributes.concurrent.getter();
  __chkstk_darwin(v28);
  sub_100016EFC();
  uint64_t v30 = v29();
  __chkstk_darwin(v30);
  id v31 = v27;
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  *(void *)(v1 + 40) = v32;
  sub_100013918();
}

void sub_100034DC8()
{
  sub_1000139EC();
  uint64_t v35 = v1;
  uint64_t v36 = v2;
  int v34 = v3;
  uint64_t v5 = v4;
  dispatch_suspend(*(dispatch_object_t *)(v0 + 40));
  uint64_t v37 = *(void *)(v0 + 32);
  uint64_t v38 = type metadata accessor for DispatchWorkItemFlags();
  sub_100013844();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100012078();
  uint64_t v11 = v10 - v9;
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v12 = sub_100010E68();
  swift_weakInit();
  uint64_t v13 = type metadata accessor for UUID();
  sub_100013844();
  uint64_t v15 = v14;
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v18);
  uint64_t v19 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, v5, v13);
  unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v21 = v20 + v17;
  uint64_t v22 = swift_allocObject();
  unint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + v22;
  *(void *)(v22 + 16) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v22 + v20, v19, v13);
  *(unsigned char *)(v22 + v21) = v34;
  uint64_t v24 = v36;
  *(void *)(v23 + 8) = v35;
  *(void *)(v23 + 16) = v24;
  v39[4] = sub_100039DF8;
  v39[5] = v22;
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 1107296256;
  void v39[2] = sub_10000CF80;
  v39[3] = &unk_10008BDE8;
  uint64_t v25 = _Block_copy(v39);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  sub_100013844();
  uint64_t v28 = v27;
  __chkstk_darwin(v29);
  sub_100012078();
  uint64_t v32 = v31 - v30;
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v32, v26);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v38);
  swift_release();
  swift_release();
  sub_100013918();
}

void sub_100035088(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_beginAccess();
    sub_100034248(a2, a3 & 1, a4, a5);
    swift_endAccess();
    OS_dispatch_queue.assertOnQueueHierarchy()();
    swift_release();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = *(id *)(Strong + 40);
    swift_release();
    dispatch_resume(v10);
  }
}

void sub_100035188()
{
  sub_1000139EC();
  uint64_t v3 = v2;
  dispatch_suspend(*(dispatch_object_t *)(v0 + 40));
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  sub_100013844();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100013A60();
  uint64_t v7 = sub_100010E68();
  swift_weakInit();
  uint64_t v8 = type metadata accessor for UUID();
  sub_100013844();
  uint64_t v10 = v9;
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v8);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v7;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v23[4] = sub_100039CB4;
  v23[5] = v15;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  void v23[2] = sub_10000CF80;
  v23[3] = &unk_10008BD98;
  uint64_t v16 = _Block_copy(v23);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  sub_100013844();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  sub_100015790();
  static DispatchQoS.unspecified.getter();
  sub_100010F14();
  _Block_release(v16);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v12, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v22);
  swift_release();
  swift_release();
  sub_100013918();
}

void sub_1000353E8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_beginAccess();
    sub_100033F78(a2);
    swift_endAccess();
    OS_dispatch_queue.assertOnQueueHierarchy()();
    swift_release();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = *(id *)(Strong + 40);
    swift_release();
    dispatch_resume(v4);
  }
}

void sub_1000354C0()
{
  sub_1000139EC();
  dispatch_suspend(*(dispatch_object_t *)(v0 + 40));
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  sub_100013844();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100013A60();
  uint64_t v7 = sub_100010E68();
  swift_weakInit();
  v13[4] = sub_100039C10;
  v13[5] = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  void v13[2] = sub_10000CF80;
  v13[3] = &unk_10008BD48;
  uint64_t v8 = _Block_copy(v13);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  sub_100013844();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100015790();
  static DispatchQoS.unspecified.getter();
  sub_100010F14();
  _Block_release(v8);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  swift_release();
  swift_release();
  sub_100013918();
}

void sub_100035664()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_beginAccess();
    sub_1000153C0(&qword_100095DD8);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_endAccess();
    OS_dispatch_queue.assertOnQueueHierarchy()();
    swift_release();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = *(id *)(Strong + 40);
    swift_release();
    dispatch_resume(v1);
  }
}

uint64_t sub_100035788@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000153C0(&qword_100095DB8);
  __chkstk_darwin(v4 - 8);
  sub_100012078();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = sub_1000153C0(&qword_100095DC0);
  sub_100015C34(v7, 1, 1, v8);
  uint64_t v9 = *(NSObject **)(v2 + 40);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_100039AA4;
  *(void *)(v11 + 24) = v10;
  void aBlock[4] = sub_100039AB8;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000359FC;
  aBlock[3] = &unk_10008BD20;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v12);
  _Block_release(v12);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_100039AE0(v7, a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100035954(uint64_t a1)
{
  uint64_t v2 = sub_1000153C0(&qword_100095DB8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100034858();
  sub_1000345DC((uint64_t)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100039B48((uint64_t)v4, a1);
}

uint64_t sub_1000359FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100035A24()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = sub_100010E68();
  swift_weakInit();
  v7[4] = sub_100039A9C;
  v7[5] = v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_10000CF80;
  v7[3] = &unk_10008BCA8;
  uint64_t v3 = _Block_copy(v7);
  id v4 = v1;
  swift_release();
  unsigned int v5 = [v4 addDisconnectHandler:v3];
  _Block_release(v3);

  if (v5 && [*(id *)(v0 + 64) startOnQueue:*(void *)(v0 + 16)])
  {
    static os_log_type_t.debug.getter();
    os_log(_:dso:log:_:_:)();
    return 1;
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    return 0;
  }
}

uint64_t sub_100035BC0()
{
  if (swift_weakLoadStrong())
  {
    sub_1000354C0();
    swift_release();
  }
  static os_log_type_t.default.getter();
  return os_log(_:dso:log:_:_:)();
}

void sub_100035C48()
{
  sub_1000348AC();
  uint64_t v2 = v1;

  if (v2)
  {
    CFUserNotificationCancel(v2);
    id v4 = *(void **)(v0 + 80);
    *(void *)(v0 + 80) = 0;

    OS_dispatch_queue.assertOnQueueHierarchy()();
  }
  sub_1000348AC();
  uint64_t v6 = v5;

  if (v6)
  {
    [v6 invalidate];
    uint64_t v8 = *(void **)(v0 + 88);
    *(void *)(v0 + 88) = 0;

    OS_dispatch_queue.assertOnQueueHierarchy()();
  }
  *(unsigned char *)(v0 + 72) = 0;
  OS_dispatch_queue.assertOnQueueHierarchy()();
}

BOOL sub_100035CE8()
{
  char v1 = sub_1000348AC();
  id v3 = v2;

  if ((v1 & 1) == 0)
  {
    *(unsigned char *)(v0 + 72) = 1;
    OS_dispatch_queue.assertOnQueueHierarchy()();
  }
  return (v1 & 1) == 0;
}

void sub_100035D3C()
{
  sub_1000139EC();
  uint64_t v2 = v1;
  id v4 = v3;
  unint64_t v6 = v5;
  uint64_t v42 = v7;
  Class isa = v8;
  unint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for PairingConsentCollectionOutcome();
  sub_100013844();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!sub_100035CE8())
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for RemotePairingError();
    sub_10000DA70((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    uint64_t v26 = sub_100015F90();
    static RemotePairingError.deviceIsAlreadyPairingWithHost.getter();
    uint64_t *v19 = v26;
    sub_1000120F4();
    v27();
    v4(v19);
LABEL_22:
    (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v19, v14);
    goto LABEL_23;
  }
  uint64_t v39 = v13;
  unint64_t v40 = v11;
  uint64_t v41 = v14;
  uint64_t v14 = (uint64_t)v4;
  uint64_t v20 = *(void **)(v0 + 16);
  uint64_t v21 = sub_100010E68();
  swift_weakInit();
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v20;
  uint64_t v22[3] = v21;
  v22[4] = v14;
  v22[5] = v2;
  swift_retain();
  swift_retain();
  id v23 = v20;
  if ((sub_100032950() & 1) == 0)
  {
    uint64_t v38 = v14;
    if (os_variant_is_darwinos())
    {
      uint64_t v28 = sub_100015DD4();
      v29(v28);
      sub_10003634C((uint64_t)v19, (uint64_t)v23, v21, v38, v2);
    }
    else
    {
      id v37 = v23;
      if (!is_pairing_restricted_by_findMy())
      {
        if (isa)
        {
          uint64_t v14 = sub_100036778((uint64_t)isa);
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        if (v6 >> 60 == 15) {
          Class v31 = 0;
        }
        else {
          Class v31 = Data._bridgeToObjectiveC()().super.isa;
        }
        uint64_t v32 = managed_configuration_allow_pairing(isa, v31);

        switch(v32)
        {
          case 0:
            type metadata accessor for RemotePairingError();
            sub_10000DA70((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
            uint64_t v30 = sub_100015F90();
            static RemotePairingError.managedConfigurationRejectedPairing.getter();
            goto LABEL_9;
          case 1:
            static os_log_type_t.default.getter();
            os_log(_:dso:log:_:_:)();
            if ((is_setup_complete() & 1) == 0) {
              goto LABEL_19;
            }
            uint64_t v33 = sub_100015DD4();
            v34(v33);
            sub_100013C40();
            swift_release();
            (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v19, v14);
            swift_retain();
            swift_retain();
            sub_100037428(v39, v40, (id *)v0, (void (*)(uint64_t *))sub_100039588, (uint64_t)v22, v0);
            swift_release();
            goto LABEL_23;
          case 2:
LABEL_19:
            static os_log_type_t.default.getter();
            os_log(_:dso:log:_:_:)();
            goto LABEL_20;
          case 3:
            goto LABEL_20;
          default:
            swift_release();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x10003633CLL);
        }
      }
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for RemotePairingError();
      sub_10000DA70((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      uint64_t v30 = sub_100015F90();
      static RemotePairingError.findMyRejectedPairing.getter();
LABEL_9:
      uint64_t *v19 = v30;
LABEL_20:
      uint64_t v35 = sub_100015DD4();
      v36(v35);
      sub_100013C40();
    }
    swift_release();
    swift_release();
    goto LABEL_22;
  }
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v24 = v41;
  sub_1000120F4();
  v25();
  sub_10003634C((uint64_t)v19, (uint64_t)v23, v21, v14, v2);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v16 + 8))(v19, v24);
LABEL_23:
  sub_100013918();
}

uint64_t sub_10003634C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v27[0] = a2;
  uint64_t v9 = type metadata accessor for PairingConsentCollectionOutcome();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v14 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v13, v12, v9);
  *(void *)(v15 + v14) = a3;
  uint64_t v16 = (void *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v16 = a4;
  v16[1] = a5;
  void aBlock[4] = sub_100039A24;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008BC80;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = &_swiftEmptyArrayStorage;
  sub_100039854((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_100039728((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  return swift_release();
}

uint64_t sub_1000366E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (PairingConsentCollectionOutcome.terminal.getter())
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_100035C48();
      swift_release();
    }
  }
  return a3(a1);
}

uint64_t sub_100036778(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000153C0(&qword_100095D88);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    sub_100015404(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v40);
    *(void *)&long long v39 = v17;
    *((void *)&v39 + 1) = v16;
    void v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v17;
    *((void *)&v37[0] + 1) = v16;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_10001673C(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_10001673C(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_10001673C(v36, v37);
    sub_10001673C(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v18 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)&v6[8 * (v19 >> 6)]) == 0)
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v20];
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)&v6[8 * (v19 >> 6)])) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)&v6[(v21 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v21;
    uint64_t v26 = v2[6] + 40 * v21;
    *(_OWORD *)uint64_t v26 = v29;
    *(_OWORD *)(v26 + 16) = v30;
    *(void *)(v26 + 32) = v31;
    uint64_t result = (uint64_t)sub_10001673C(&v33, (_OWORD *)(v2[7] + 32 * v21));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v27) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v28 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v28 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v28 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_36:
    swift_release();
    sub_100019C54();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100036B3C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000153C0(&qword_100095D88);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v26 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    int v15 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v10);
    sub_100015404(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v38 + 8);
    LODWORD(v38[0]) = v15;
    v36[0] = v38[0];
    v36[1] = v38[1];
    uint64_t v37 = v39;
    LODWORD(v35[0]) = v15;
    swift_dynamicCast();
    sub_10001673C((_OWORD *)((char *)v36 + 8), v30);
    long long v31 = v27;
    long long v32 = v28;
    uint64_t v33 = v29;
    sub_10001673C(v30, v34);
    long long v27 = v31;
    long long v28 = v32;
    uint64_t v29 = v33;
    sub_10001673C(v34, v35);
    sub_10001673C(v35, &v31);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v16 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)&v6[8 * (v17 >> 6)]) == 0)
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v16) >> 6;
      while (++v18 != v21 || (v20 & 1) == 0)
      {
        BOOL v22 = v18 == v21;
        if (v18 == v21) {
          unint64_t v18 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)&v6[8 * v18];
        if (v23 != -1)
        {
          unint64_t v19 = __clz(__rbit64(~v23)) + (v18 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)&v6[8 * (v17 >> 6)])) | v17 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)&v6[(v19 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v19;
    uint64_t v24 = v2[6] + 40 * v19;
    *(_OWORD *)uint64_t v24 = v27;
    *(_OWORD *)(v24 + 16) = v28;
    *(void *)(v24 + 32) = v29;
    uint64_t result = (uint64_t)sub_10001673C(&v31, (_OWORD *)(v2[7] + 32 * v19));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v25) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v26 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v25) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v26 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v25) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v26 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v25) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v26 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v25)
  {
LABEL_36:
    swift_release();
    sub_100019C54();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v26 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v25) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v26 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_100036EF0(char a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PairingConsentCollectionOutcome();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v11 = (uint64_t *)((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  static os_log_type_t.default.getter();
  if (a1)
  {
    os_log(_:dso:log:_:_:)();
    swift_retain();
    sub_100038524(a4, a2, a3);
  }
  else
  {
    os_log(_:dso:log:_:_:)();
    type metadata accessor for RemotePairingError();
    sub_10000DA70((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    uint64_t v12 = swift_allocError();
    static RemotePairingError.userRejectedPairing.getter();
    uint64_t *v11 = v12;
    (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, enum case for PairingConsentCollectionOutcome.rejected(_:), v8);
    a2((char *)v11);
    (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_1000370F0(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PairingConsentCollectionOutcome();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    swift_errorRetain();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    int64_t v11 = qword_1000986F0;
    os_log_type_t v12 = v10;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v10))
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v13 = swift_slowAlloc();
      unint64_t v21 = a2;
      int64_t v14 = (uint8_t *)v13;
      uint64_t v15 = swift_slowAlloc();
      void v20[2] = a3;
      uint64_t v22 = a1;
      uint64_t v23 = v15;
      *(_DWORD *)int64_t v14 = 136315138;
      v20[1] = v14 + 4;
      swift_errorRetain();
      sub_1000153C0(&qword_100095A00);
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t v22 = sub_100010478(v16, v17, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Rejecting pairing attempt as authentication policy evaluation failed with error: %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v21;
      swift_slowDealloc();
    }
    type metadata accessor for RemotePairingError();
    sub_10000DA70((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    uint64_t v18 = swift_allocError();
    static RemotePairingError.failedToAuthenticateUser.getter();
    *uint64_t v9 = v18;
    (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for PairingConsentCollectionOutcome.rejected(_:), v6);
    a2(v9);
    swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for PairingConsentCollectionOutcome.userConsented(_:), v6);
    a2(v9);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100037428(uint64_t a1, unint64_t a2, id *a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t a6)
{
  uint64_t v74 = a3;
  uint64_t v11 = type metadata accessor for PairingConsentCollectionOutcome();
  uint64_t v76 = *(id **)(v11 - 8);
  uint64_t v77 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v14 = (void *)swift_allocObject();
  uint64_t v75 = a4;
  v14[2] = a4;
  v14[3] = a5;
  uint64_t v80 = v14;
  void v14[4] = a6;
  uint64_t v78 = a5;
  uint64_t v79 = a6;
  if (!a2) {
    goto LABEL_8;
  }
  uint64_t v15 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v15 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v15)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    String.count.getter();
    String.index(_:offsetBy:)();
    uint64_t v16 = String.subscript.getter();
    uint64_t v18 = v17;
    char v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    CFStringRef v81 = (CFStringRef)v16;
    uint64_t v82 = v18;
    uint64_t v83 = v20;
    uint64_t v84 = v22;
    uint64_t v23 = type metadata accessor for CharacterSet();
    uint64_t v24 = *(void *)(v23 - 8);
    __chkstk_darwin(v23);
    uint64_t v26 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    static CharacterSet.newlines.getter();
    sub_1000396DC();
    uint64_t v27 = StringProtocol.components(separatedBy:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    swift_bridgeObjectRelease();
    CFStringRef v81 = (CFStringRef)v27;
    sub_1000153C0(&qword_100096980);
    sub_100039728(&qword_100095DA8, &qword_100096980);
    uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    if (qword_1000949B8 != -1) {
      swift_once();
    }
    long long v31 = (uint64_t (*)(uint64_t))qword_100095BC8;
    sub_1000153C0(&qword_100095570);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_100075C50;
    *(void *)(v32 + 56) = &type metadata for String;
    *(void *)(v32 + 64) = sub_100016B8C();
    *(void *)(v32 + 32) = v28;
    *(void *)(v32 + 40) = v30;
    uint64_t v33 = v31(v32);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    uint64_t v36 = qword_1000949B0;
    swift_retain();
    swift_retain();
    if (v36 != -1) {
      swift_once();
    }
    uint64_t v35 = *((void *)&xmmword_100095BB8 + 1);
    uint64_t v33 = xmmword_100095BB8;
    swift_bridgeObjectRetain();
  }
  sub_1000153C0(&qword_100095D90);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100075C90;
  CFStringRef v81 = kCFUserNotificationAlertHeaderKey;
  CFStringRef v38 = (id)kCFUserNotificationAlertHeaderKey;
  sub_1000153C0((uint64_t *)&unk_100096180);
  sub_1000395E0();
  AnyHashable.init<A>(_:)();
  if (qword_100094998 != -1) {
    swift_once();
  }
  long long v39 = xmmword_100095B88;
  *(void *)(inited + 96) = &type metadata for String;
  *(_OWORD *)(inited + 72) = v39;
  CFStringRef v81 = kCFUserNotificationAlertMessageKey;
  CFStringRef v40 = (id)kCFUserNotificationAlertMessageKey;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v33;
  *(void *)(inited + 152) = v35;
  CFStringRef v81 = kCFUserNotificationDefaultButtonTitleKey;
  CFStringRef v41 = (id)kCFUserNotificationDefaultButtonTitleKey;
  AnyHashable.init<A>(_:)();
  if (qword_1000949A8 != -1) {
    swift_once();
  }
  long long v42 = xmmword_100095BA8;
  *(void *)(inited + 240) = &type metadata for String;
  *(_OWORD *)(inited + 216) = v42;
  CFStringRef v81 = kCFUserNotificationAlternateButtonTitleKey;
  CFStringRef v43 = (id)kCFUserNotificationAlternateButtonTitleKey;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (qword_1000949A0 != -1) {
    swift_once();
  }
  long long v44 = xmmword_100095B98;
  *(void *)(inited + 312) = &type metadata for String;
  *(_OWORD *)(inited + 288) = v44;
  swift_bridgeObjectRetain();
  uint64_t v89 = Dictionary.init(dictionaryLiteral:)();
  v87[0] = SBUserNotificationAlternateButtonPresentationStyleKey;
  id v45 = SBUserNotificationAlternateButtonPresentationStyleKey;
  AnyHashable.init<A>(_:)();
  uint64_t v88 = &type metadata for UInt32;
  LODWORD(v87[0]) = 0;
  sub_10004A478((uint64_t)v87, (uint64_t)&v81);
  v87[0] = SBUserNotificationDefaultButtonPresentationStyleKey;
  id v46 = SBUserNotificationDefaultButtonPresentationStyleKey;
  AnyHashable.init<A>(_:)();
  uint64_t v88 = &type metadata for UInt32;
  LODWORD(v87[0]) = 2;
  sub_10004A478((uint64_t)v87, (uint64_t)&v81);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CFUserNotificationRef v48 = CFUserNotificationCreate(0, 0.0, 3uLL, 0, isa);

  if (v48)
  {
    uint64_t v49 = v74;
    char v50 = sub_1000348AC();
    uint64_t v52 = v51;

    if ((v50 & 1) == 0)
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      type metadata accessor for RemotePairingError();
      sub_10000DA70((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      uint64_t v69 = swift_allocError();
      static RemotePairingError.userRejectedPairing.getter();
      *uint64_t v13 = v69;
      uint64_t v71 = v76;
      uint64_t v70 = v77;
      ((void (*)(uint64_t *, void, uint64_t))v76[13])(v13, enum case for PairingConsentCollectionOutcome.rejected(_:), v77);
      v75(v13);
      ((void (*)(uint64_t *, uint64_t))v71[1])(v13, v70);
      swift_release();
      swift_release();

      return swift_release();
    }
    id v54 = v49[10];
    v49[10] = v48;
    uint64_t v55 = v48;

    OS_dispatch_queue.assertOnQueueHierarchy()();
    uint64_t v77 = (uint64_t)v49[3];
    uint64_t v56 = (void *)swift_allocObject();
    v56[2] = v55;
    v56[3] = v49;
    uint64_t v57 = v80;
    v56[4] = sub_1000395D4;
    v56[5] = v57;
    uint64_t v85 = sub_1000396D0;
    uint64_t v86 = v56;
    CFStringRef v81 = (CFStringRef)_NSConcreteStackBlock;
    uint64_t v82 = 1107296256;
    uint64_t v83 = sub_10000CF80;
    uint64_t v84 = &unk_10008BB18;
    uint64_t v58 = _Block_copy(&v81);
    uint64_t v75 = (void (*)(uint64_t *))type metadata accessor for DispatchQoS();
    uint64_t v76 = (id *)&v73;
    uint64_t v59 = *((void *)v75 - 1);
    __chkstk_darwin(v75);
    uint64_t v61 = (char *)&v73 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v73 = v55;
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v62 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v74 = (id *)&v73;
    uint64_t v63 = *(void *)(v62 - 8);
    __chkstk_darwin(v62);
    uint64_t v65 = (char *)&v73 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
    v87[0] = &_swiftEmptyArrayStorage;
    sub_100039854((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000153C0(&qword_1000950F0);
    sub_100039728((unint64_t *)&qword_1000953C0, &qword_1000950F0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v58);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v62);
    (*(void (**)(char *, void (*)(uint64_t *)))(v59 + 8))(v61, v75);
    swift_release();
    swift_release();
  }
  else
  {
    static os_log_type_t.fault.getter();
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for RemotePairingError();
    sub_10000DA70((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    uint64_t v66 = swift_allocError();
    static RemotePairingError.userRejectedPairing.getter();
    *uint64_t v13 = v66;
    os_log_t v68 = v76;
    uint64_t v67 = v77;
    ((void (*)(uint64_t *, void, uint64_t))v76[13])(v13, enum case for PairingConsentCollectionOutcome.rejected(_:), v77);
    v75(v13);
    ((void (*)(uint64_t *, uint64_t))v68[1])(v13, v67);
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t sub_100037FD8(__CFUserNotification *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  SInt32 v9 = CFUserNotificationReceiveResponse(a1, 0.0, (CFOptionFlags *)(v8 + 16));
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(_DWORD *)(v10 + 24) = v9;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 40) = a3;
  *(void *)(v10 + 48) = a4;
  void aBlock[4] = sub_100039800;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008BBB8;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  int64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = &_swiftEmptyArrayStorage;
  sub_100039854((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_100039728((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v21);
  swift_release();
  return swift_release();
}

uint64_t sub_1000382E4(uint64_t a1, int a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  return sub_100038358(a2, *(void *)(a3 + 16), a4);
}

uint64_t sub_100038358(int a1, char a2, uint64_t (*a3)(uint64_t))
{
  OS_dispatch_queue.assertOnQueueHierarchy()();
  if (!a1)
  {
    if ((a2 & 3) == 3) {
      goto LABEL_7;
    }
    if ((a2 & 3) == 1)
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      uint64_t v11 = 1;
      return a3(v11);
    }
    if ((a2 & 3) != 0) {
      static os_log_type_t.fault.getter();
    }
    else {
LABEL_7:
    }
      static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v11 = 0;
    return a3(v11);
  }
  os_log_type_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = qword_1000986F0;
  os_log_type_t v8 = v6;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000986F0, v6);
  if (result)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received invalid status code %d when reading response to trust prompt notification", v10, 8u);
    return swift_slowDealloc();
  }
  return result;
}

void sub_100038524(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PairingConsentCollectionOutcome();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  SInt32 v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  swift_retain();
  if (MKBGetDeviceLockState() == 3)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for PairingConsentCollectionOutcome.userConsented(_:), v6);
    a2(v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_9:
    swift_release();
    swift_release();
    return;
  }
  id v11 = [objc_allocWithZone((Class)LAContext) init];
  char v12 = sub_1000348AC();
  int64_t v14 = v13;

  if (v12)
  {
    uint64_t v16 = *(void **)(a1 + 88);
    *(void *)(a1 + 88) = v11;
    id v17 = v11;

    OS_dispatch_queue.assertOnQueueHierarchy()();
    sub_1000153C0(&qword_100095DB0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100075C50;
    *(_DWORD *)(inited + 32) = 2;
    if (qword_1000949C8 != -1) {
      swift_once();
    }
    long long v19 = xmmword_100095BE8;
    *(void *)(inited + 64) = &type metadata for String;
    *(_OWORD *)(inited + 40) = v19;
    swift_bridgeObjectRetain();
    uint64_t v33 = Dictionary.init(dictionaryLiteral:)();
    if (qword_1000949C0 != -1) {
      swift_once();
    }
    uint64_t v30 = &type metadata for String;
    long long aBlock = xmmword_100095BD8;
    swift_bridgeObjectRetain();
    sub_10004A500((uint64_t)&aBlock, 1037);
    uint64_t v20 = sub_100036B3C(v33);
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_10003984C;
    *(void *)(v21 + 24) = v10;
    long long v31 = sub_10003989C;
    uint64_t v32 = v21;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v29 = sub_100038A28;
    uint64_t v30 = &unk_10008BC30;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    sub_1000398C8(1013, v20, (uint64_t)v22, v17);

    _Block_release(v22);
    goto LABEL_9;
  }
  uint64_t v23 = type metadata accessor for POSIXError();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&aBlock - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(aBlock) = 89;
  sub_10004E880((uint64_t)&_swiftEmptyArrayStorage);
  sub_100039854((unint64_t *)&qword_1000959E0, (void (*)(uint64_t))&type metadata accessor for POSIXError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v27 = (void *)POSIXError._nsError.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  sub_1000370F0((uint64_t)v27, (void (*)(void))a2, a3);
  swift_release();
  swift_release();
}

uint64_t sub_100038A28(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100038AD4()
{
  sub_1000139EC();
  uint64_t v57 = type metadata accessor for UUID();
  sub_100013844();
  uint64_t v54 = v1;
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(v4);
  uint64_t v47 = (char *)((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)((char *)&v44 - v47);
  UUID.init()();
  uint64_t v56 = v5;
  sub_100034DC8();
  if (([*(id *)(v0 + 64) active] & 1) == 0 && (sub_100035A24() & 1) == 0)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
  }
  uint64_t v53 = *(void *)(v0 + 16);
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v55 = &v44;
  uint64_t v51 = v6;
  sub_100013844();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  CFUserNotificationRef v48 = &v44;
  uint64_t v49 = &v44;
  __chkstk_darwin(v10);
  char v12 = (char *)&v44 - v11;
  static DispatchTime.now()();
  uint64_t v13 = type metadata accessor for DispatchTimeInterval();
  sub_100013844();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_100012078();
  uint64_t v19 = v18 - v17;
  *(void *)(v18 - v17) = 10;
  sub_1000120F4();
  v20();
  + infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v19, v13);
  uint64_t v21 = *(void (**)(uint64_t *, uint64_t))(v8 + 8);
  uint64_t v50 = v8 + 8;
  uint64_t v52 = v21;
  v21((uint64_t *)v12, v6);
  uint64_t v22 = sub_100010E68();
  uint64_t v23 = swift_weakInit();
  uint64_t v49 = &v44;
  __chkstk_darwin(v23);
  uint64_t v24 = (char *)((char *)&v44 - v47);
  uint64_t v25 = v54;
  uint64_t v26 = v57;
  (*(void (**)(int64_t, char *, uint64_t))(v54 + 16))((char *)&v44 - v47, v56, v57);
  unint64_t v27 = (*(unsigned __int8 *)(v25 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v22;
  uint64_t v46 = v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v28 + v27, v24, v26);
  v59[4] = sub_10003956C;
  v59[5] = v28;
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 1107296256;
  v59[2] = sub_10000CF80;
  v59[3] = &unk_10008BA78;
  uint64_t v29 = _Block_copy(v59);
  uint64_t v45 = type metadata accessor for DispatchQoS();
  uint64_t v47 = (char *)&v44;
  sub_100013844();
  uint64_t v31 = v30;
  __chkstk_darwin(v32);
  sub_100012078();
  uint64_t v35 = v34 - v33;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = (uint64_t)&v44;
  sub_100013844();
  uint64_t v38 = v37;
  __chkstk_darwin(v39);
  sub_100012078();
  uint64_t v42 = v41 - v40;
  uint64_t v58 = &_swiftEmptyArrayStorage;
  sub_100039854((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_100039728((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  CFStringRef v43 = v48;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v29);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v42, v36);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v35, v45);
  v52(v43, v51);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v56, v57);
  swift_release();
  swift_release();
  sub_100013918();
}

uint64_t sub_10003904C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100035188();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000390AC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v1 = *(void **)(v0 + 88);
  return v0;
}

uint64_t sub_100039110()
{
  sub_1000390AC();

  return _swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for PairingConsentCollector()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for PairingConsentCollector.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for PairingConsentCollector.State(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t assignWithCopy for PairingConsentCollector.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void **)(a1 + 8);
  id v5 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 16);
  uint64_t v8 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for PairingConsentCollector.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;

  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for PairingConsentCollector.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingConsentCollector.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingConsentCollector.State()
{
  return &type metadata for PairingConsentCollector.State;
}

uint64_t destroy for PromptlessPairingSessionState()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s20remotepairingdeviced29PromptlessPairingSessionStateVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptlessPairingSessionState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PromptlessPairingSessionState(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for PromptlessPairingSessionState(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptlessPairingSessionState(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptlessPairingSessionState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptlessPairingSessionState()
{
  return &type metadata for PromptlessPairingSessionState;
}

unint64_t sub_1000394F0()
{
  unint64_t result = qword_100096250;
  if (!qword_100096250)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100096250);
  }
  return result;
}

uint64_t sub_100039530()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003956C()
{
  return sub_100039CCC((uint64_t (*)(uint64_t, uint64_t))sub_10003904C);
}

uint64_t sub_100039588(uint64_t a1)
{
  return sub_10003634C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100039594()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000395D4(char a1)
{
  sub_100036EF0(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

unint64_t sub_1000395E0()
{
  unint64_t result = qword_100095D98;
  if (!qword_100095D98)
  {
    sub_10001C510((uint64_t *)&unk_100096180);
    sub_10000DA70(&qword_100094CD0, type metadata accessor for CFString);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095D98);
  }
  return result;
}

uint64_t sub_100039688()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000396D0()
{
  return sub_100037FD8(*(__CFUserNotification **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

unint64_t sub_1000396DC()
{
  unint64_t result = qword_100095DA0;
  if (!qword_100095DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100095DA0);
  }
  return result;
}

uint64_t sub_100039728(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001C510(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003976C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000397A4()
{
  return sub_10004EC78();
}

uint64_t sub_1000397AC()
{
  return sub_100015CFC(v0, 24);
}

uint64_t sub_1000397B8()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100039800()
{
  return sub_1000382E4(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24), *(void *)(v0 + 32), *(uint64_t (**)(uint64_t))(v0 + 40));
}

uint64_t sub_100039814()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003984C(uint64_t a1)
{
  return sub_1000370F0(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100039854(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003989C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

void sub_1000398C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a4 evaluatePolicy:a1 options:isa reply:a3];
}

uint64_t sub_100039964()
{
  uint64_t v1 = type metadata accessor for PairingConsentCollectionOutcome();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100039A24()
{
  uint64_t v1 = type metadata accessor for PairingConsentCollectionOutcome();
  sub_100015A2C(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v0 + v7);
  id v9 = *(uint64_t (**)(uint64_t))(v0 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000366E4(v0 + v6, v8, v9);
}

uint64_t sub_100039A9C()
{
  return sub_100035BC0();
}

uint64_t sub_100039AA4()
{
  return sub_100035954(*(void *)(v0 + 16));
}

uint64_t sub_100039AAC()
{
  return sub_100015CFC(v0, 32);
}

uint64_t sub_100039AB8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100039AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0(&qword_100095DB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100039B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0(&qword_100095DB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100039BB0(uint64_t a1)
{
  uint64_t v2 = sub_1000153C0(&qword_100095DC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100039C10()
{
}

uint64_t sub_100039C1C()
{
  type metadata accessor for UUID();
  sub_100013844();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 24) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_release();
  uint64_t v8 = sub_100013940();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_100039CB4()
{
  return sub_100039CCC((uint64_t (*)(uint64_t, uint64_t))sub_1000353E8);
}

uint64_t sub_100039CCC(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100039D44()
{
  type metadata accessor for UUID();
  sub_100013844();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = v5 | 7;
  unint64_t v7 = ((((v5 + 24) & ~v5) + *(void *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_release();
  uint64_t v8 = sub_100013940();
  v9(v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v7, v6);
}

void sub_100039DF8()
{
  uint64_t v1 = type metadata accessor for UUID();
  sub_100015A2C(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + v0;
  uint64_t v9 = *(void *)(v0 + 16);
  char v10 = *(unsigned char *)(v0 + v7);
  uint64_t v11 = *(void *)(v8 + 8);
  uint64_t v12 = *(void *)(v8 + 16);

  sub_100035088(v9, v0 + v6, v10, v11, v12);
}

void sub_100039EBC()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v86 = v4;
  uint64_t v78 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  sub_100013814();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1000120E0();
  uint64_t v77 = v8;
  uint64_t v9 = type metadata accessor for ControlChannelConnection.State();
  sub_100013814();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_1000120E0();
  uint64_t v73 = v13;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v3, v1);
  uint64_t v15 = v14;
  if ((v14 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for ControlChannelConnection();
    sub_100011F10(&qword_100096130, 255, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    Set.Iterator.init(_cocoa:)();
    uint64_t v15 = v96;
    uint64_t v84 = v97;
    uint64_t v16 = v98;
    int64_t v17 = v99;
    unint64_t v18 = v100;
  }
  else
  {
    int64_t v17 = 0;
    uint64_t v19 = -1 << *(unsigned char *)(v14 + 32);
    uint64_t v20 = *(void *)(v14 + 56);
    uint64_t v84 = v14 + 56;
    uint64_t v16 = ~v19;
    uint64_t v21 = -v19;
    if (v21 < 64) {
      uint64_t v22 = ~(-1 << v21);
    }
    else {
      uint64_t v22 = -1;
    }
    unint64_t v18 = v22 & v20;
  }
  uint64_t v80 = v15 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v83 = (unint64_t)(v16 + 64) >> 6;
  uint64_t v92 = (uint64_t (**)(uint64_t *, uint64_t))(v11 + 88);
  int v91 = enum case for ControlChannelConnection.State.authenticated(_:);
  uint64_t v90 = v11 + 8;
  unsigned int v76 = enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:);
  uint64_t v75 = (void (**)(uint64_t, void, uint64_t))(v6 + 104);
  uint64_t v74 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v79 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v72 = v9;
  uint64_t v23 = v73;
  uint64_t v87 = v16;
  uint64_t v85 = v15;
  while (1)
  {
    if (v15 < 0)
    {
      uint64_t v27 = __CocoaSet.Iterator.next()();
      if (!v27) {
        goto LABEL_52;
      }
      uint64_t v94 = v27;
      type metadata accessor for ControlChannelConnection();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v28 = v95;
      swift_unknownObjectRelease();
      int64_t v26 = v17;
      uint64_t v24 = v18;
      if (!v28) {
        goto LABEL_52;
      }
      goto LABEL_29;
    }
    if (!v18) {
      break;
    }
    uint64_t v24 = (v18 - 1) & v18;
    unint64_t v25 = __clz(__rbit64(v18)) | (v17 << 6);
    int64_t v26 = v17;
LABEL_28:
    uint64_t v35 = *(void *)(*(void *)(v15 + 48) + 8 * v25);
    swift_retain();
    if (!v35) {
      goto LABEL_52;
    }
LABEL_29:
    dispatch thunk of ControlChannelConnection.state.getter();
    int v36 = (*v92)(v23, v9);
    if (v36 == v91)
    {
      unint64_t v89 = v24;
      int64_t v93 = v26;
      uint64_t v37 = v9;
      sub_100010EE4();
      v38();
      uint64_t v39 = type metadata accessor for UUID();
      uint64_t v40 = v86;
      int v41 = sub_100015C0C(v86, 1, v39);
      uint64_t v42 = sub_1000153C0((uint64_t *)&unk_1000976C0);
      uint64_t v88 = &v68;
      uint64_t v43 = sub_100014774(v42);
      uint64_t v15 = *(void *)(v44 + 64);
      __chkstk_darwin(v43);
      unint64_t v45 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v46 = (char *)&v68 - v45;
      uint64_t v47 = sub_1000409B8(v40, (uint64_t)&v68 - v45, (uint64_t *)&unk_1000976C0);
      if (v41 == 1)
      {
        sub_100042D9C();
        uint64_t v15 = v85;
        uint64_t v9 = v37;
        uint64_t v48 = v93;
LABEL_49:
        uint64_t v66 = v77;
        uint64_t v67 = v78;
        (*v75)(v77, v76, v78);
        dispatch thunk of ControlChannelConnection.invalidate(for:)();
        swift_release();
        (*v74)(v66, v67);
        goto LABEL_50;
      }
      uint64_t v23 = &v68;
      __chkstk_darwin(v47);
      uint64_t v50 = (char *)&v68 - v45;
      uint64_t v51 = (void *)dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      uint64_t v82 = &v68;
      if (v51)
      {
        uint64_t v52 = v51;
        uint64_t v23 = (uint64_t *)[v51 identifier];

        __chkstk_darwin(v53);
        if (v23)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v54 = 0;
        }
        else
        {
          uint64_t v54 = 1;
        }
        uint64_t v48 = v93;
        sub_100015C34((uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v54, 1, v39);
        sub_100040B14((uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v50, (uint64_t *)&unk_1000976C0);
        uint64_t v9 = v72;
      }
      else
      {
        sub_100015C34((uint64_t)v50, 1, 1, v39);
        uint64_t v9 = v37;
        uint64_t v48 = v93;
      }
      uint64_t v55 = sub_1000153C0(&qword_100096168);
      CFStringRef v81 = &v68;
      uint64_t v56 = sub_100014774(v55);
      __chkstk_darwin(v56);
      sub_100010EB0();
      uint64_t v58 = (uint64_t)v23 + *(int *)(v57 + 56);
      sub_1000409B8((uint64_t)v50, (uint64_t)v23, (uint64_t *)&unk_1000976C0);
      sub_1000409B8((uint64_t)v46, v58, (uint64_t *)&unk_1000976C0);
      uint64_t v59 = sub_100011284((uint64_t)v23);
      if (v60)
      {
        sub_100015C5C((uint64_t)v50, (uint64_t *)&unk_1000976C0);
        sub_100042D9C();
        sub_100011284(v58);
        if (!v60) {
          goto LABEL_47;
        }
        sub_100015C5C((uint64_t)v23, (uint64_t *)&unk_1000976C0);
        sub_10001619C();
        goto LABEL_49;
      }
      uint64_t v71 = &v68;
      __chkstk_darwin(v59);
      uint64_t v15 = (uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_1000409B8((uint64_t)v23, v15, (uint64_t *)&unk_1000976C0);
      uint64_t v61 = sub_100011284(v58);
      if (v60)
      {
        sub_100015C5C((uint64_t)v50, (uint64_t *)&unk_1000976C0);
        sub_100042D9C();
        sub_100010EE4();
        v62();
LABEL_47:
        sub_100015C5C((uint64_t)v23, &qword_100096168);
        swift_release();
        sub_10001619C();
        goto LABEL_50;
      }
      uint64_t v70 = &v68;
      uint64_t v68 = *(void *)(v39 - 8);
      __chkstk_darwin(v61);
      sub_100013900();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32))(v9, v58, v39);
      sub_100042C34(&qword_100096170, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v69 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      uint64_t v65 = v9;
      uint64_t v9 = v72;
      v64(v65, v39);
      sub_100015C5C((uint64_t)v50, (uint64_t *)&unk_1000976C0);
      sub_100042D9C();
      v64(v15, v39);
      uint64_t v48 = v93;
      sub_100015C5C((uint64_t)v23, (uint64_t *)&unk_1000976C0);
      sub_10001619C();
      if (v69) {
        goto LABEL_49;
      }
      swift_release();
LABEL_50:
      int64_t v17 = v48;
      unint64_t v18 = v89;
    }
    else
    {
      swift_release();
      sub_100010EE4();
      v49();
      int64_t v17 = v26;
      unint64_t v18 = v24;
    }
  }
  int64_t v29 = v17 + 1;
  if (!__OFADD__(v17, 1))
  {
    if (v29 >= v83) {
      goto LABEL_52;
    }
    int64_t v26 = v17 + 1;
    if (!*(void *)(v84 + 8 * v29))
    {
      int64_t v26 = v17 + 2;
      if (v17 + 2 >= v83) {
        goto LABEL_52;
      }
      if (!*(void *)(v84 + 8 * v26))
      {
        int64_t v26 = v17 + 3;
        if (v17 + 3 >= v83) {
          goto LABEL_52;
        }
        if (!*(void *)(v84 + 8 * v26))
        {
          int64_t v26 = v17 + 4;
          if (v17 + 4 >= v83) {
            goto LABEL_52;
          }
          if (!*(void *)(v84 + 8 * v26))
          {
            int64_t v30 = v17 + 5;
            while (v30 < v83)
            {
              if (*(void *)(v84 + 8 * v30++))
              {
                int64_t v26 = v30 - 1;
                goto LABEL_27;
              }
            }
LABEL_52:
            sub_100019C54();
            sub_100013918();
            return;
          }
        }
      }
    }
LABEL_27:
    sub_100042D34();
    uint64_t v24 = v33 & v32;
    unint64_t v25 = v34 + (v26 << 6);
    goto LABEL_28;
  }
  __break(1u);
}

uint64_t sub_10003A7C4()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = *(void **)(v0 + 16);
    type metadata accessor for PairingConsentCollector();
    swift_allocObject();
    id v4 = v3;
    sub_1000348EC();
    uint64_t v1 = v5;
    *(void *)(v2 + 24) = v5;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10003A840()
{
  if (v0[4])
  {
    uint64_t v1 = v0[4];
  }
  else
  {
    uint64_t v2 = (void *)v0[2];
    uint64_t v3 = v0[15];
    swift_retain();
    uint64_t v1 = sub_100041AC4(v2, v3, 0);
    v0[4] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_10003A8B8()
{
  if (*(void *)(v0 + 40))
  {
    uint64_t v1 = *(void **)(v0 + 40);
  }
  else
  {
    uint64_t v1 = sub_10003A918(v0);
    *(void *)(v0 + 40) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_10003A918(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InProcessIRKGenerator();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - v7;
  InProcessIRKGenerator.init()();
  uint64_t v9 = *(void *)(a1 + 120);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  swift_retain();
  uint64_t v10 = sub_100040CC0((uint64_t)v6, v9);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v10;
}

uint64_t sub_10003AA44()
{
  if (v0[6])
  {
    uint64_t v1 = v0[6];
  }
  else
  {
    uint64_t v2 = (void *)v0[2];
    uint64_t v3 = v0[15];
    swift_retain();
    id v4 = v2;
    uint64_t v5 = swift_retain();
    uint64_t v1 = sub_100041ED0(v5, v4, v3);
    v0[6] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void sub_10003AAC8()
{
  sub_1000139EC();
  if (!*(void *)(v0 + 56))
  {
    swift_retain_n();
    uint64_t v15 = sub_10003A8B8();
    uint64_t v1 = sub_10003B25C();
    v14[3] = sub_100042D7C((uint64_t)v1);
    void v14[4] = v14;
    sub_100013814();
    __chkstk_darwin(v2);
    sub_100016DCC();
    type metadata accessor for OS_dispatch_queue.Attributes();
    v14[1] = v14;
    sub_100013814();
    __chkstk_darwin(v3);
    sub_1000120C8();
    uint64_t v16 = &_swiftEmptyArrayStorage;
    sub_100042C34((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_1000153C0(&qword_100095D80);
    sub_10000E5F4((unint64_t *)&unk_100096220, &qword_100095D80);
    sub_100013C60();
    uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
    v14[0] = v14;
    sub_100013814();
    __chkstk_darwin(v5);
    sub_100015A44();
    uint64_t v6 = sub_100016A1C();
    v7(v6);
    sub_100015B44();
    sub_1000168B0();
    uint64_t v8 = sub_100016AF8();
    v9(v8);
    uint64_t v10 = sub_100042D44();
    v11(v10);
    uint64_t v12 = sub_1000167B8();
    v13(v12);
    sub_1000157B8();
    *(void *)(v0 + 56) = sub_1000410C8(v0, v0, (uint64_t)v15, v14[5], (uint64_t)&qword_100095D80, v4);
    swift_retain();
    swift_release();
  }
  swift_retain();
  sub_100013918();
}

void sub_10003ACCC()
{
  sub_1000139EC();
  if (!*(void *)(v0 + 64))
  {
    uint64_t v2 = v0;
    swift_retain();
    int64_t v26 = sub_10003A8B8();
    v23[3] = *(void *)(v0 + 16);
    uint64_t v24 = type metadata accessor for DispatchQoS();
    unint64_t v25 = v23;
    sub_100013814();
    uint64_t v4 = v3;
    __chkstk_darwin(v5);
    sub_100013460();
    static DispatchQoS.userInitiated.getter();
    uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
    void v23[2] = v23;
    sub_100013814();
    uint64_t v8 = v7;
    __chkstk_darwin(v9);
    sub_100012078();
    uint64_t v12 = v11 - v10;
    uint64_t v27 = &_swiftEmptyArrayStorage;
    sub_100042C34((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    uint64_t v13 = sub_1000153C0(&qword_100095D80);
    sub_10000E5F4((unint64_t *)&unk_100096220, &qword_100095D80);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
    v23[1] = v23;
    sub_100013814();
    uint64_t v16 = v15;
    __chkstk_darwin(v17);
    sub_100015A44();
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
    sub_100015B44();
    uint64_t v18 = OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v6);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v24);
    type metadata accessor for NetworkPairingService();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 88) = type metadata accessor for RemotePairingDeviceService();
    uint64_t v21 = sub_100011F10(&qword_100096258, v20, (void (*)(uint64_t))type metadata accessor for RemotePairingDeviceService);
    *(void *)(v19 + 16) = &_swiftEmptySetSingleton;
    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(void *)(v19 + 40) = 0;
    *(unsigned char *)(v19 + 48) = 2;
    uint64_t v22 = v26;
    *(void *)(v19 + 96) = v21;
    *(void *)(v19 + 104) = v22;
    *(void *)(v19 + 56) = v18;
    *(void *)(v19 + 64) = v2;
    *(void *)(v2 + 64) = v19;
    swift_retain();
    swift_release();
  }
  swift_retain();
  sub_100013918();
}

void sub_10003AFD0()
{
  sub_1000139EC();
  if (!*(void *)(v0 + 72))
  {
    swift_retain();
    uint64_t v15 = sub_10003A8B8();
    uint64_t v1 = sub_10003B25C();
    v14[3] = sub_100042D7C((uint64_t)v1);
    void v14[4] = v14;
    sub_100013814();
    __chkstk_darwin(v2);
    sub_100016DCC();
    type metadata accessor for OS_dispatch_queue.Attributes();
    v14[1] = v14;
    sub_100013814();
    __chkstk_darwin(v3);
    sub_1000120C8();
    uint64_t v16 = &_swiftEmptyArrayStorage;
    sub_100042C34((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_1000153C0(&qword_100095D80);
    sub_10000E5F4((unint64_t *)&unk_100096220, &qword_100095D80);
    sub_100013C60();
    uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
    v14[0] = v14;
    sub_100013814();
    __chkstk_darwin(v5);
    sub_100015A44();
    uint64_t v6 = sub_100016A1C();
    v7(v6);
    sub_100015B44();
    sub_1000168B0();
    uint64_t v8 = sub_100016AF8();
    v9(v8);
    uint64_t v10 = sub_100042D44();
    v11(v10);
    uint64_t v12 = sub_1000167B8();
    v13(v12);
    sub_1000157B8();
    *(void *)(v0 + 72) = sub_10004138C(v0, (uint64_t)v15, v14[5], (uint64_t)&qword_100095D80, v4);
    swift_retain();
    swift_release();
  }
  swift_retain();
  sub_100013918();
}

void *sub_10003B1CC()
{
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void **)(v0 + 80);
  }
  else
  {
    id v2 = *(id *)(v0 + 16);
    sub_10003A8B8();
    type metadata accessor for DeviceInitiatedPairingService();
    swift_allocObject();
    uint64_t v3 = (void *)sub_100016CC4();
    uint64_t v1 = sub_100041BF0(v3, v4, 0, v5);
    *(void *)(v0 + 80) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_10003B25C()
{
  if (*(void *)(v0 + 88))
  {
    uint64_t v1 = *(void **)(v0 + 88);
  }
  else
  {
    uint64_t v2 = sub_10003B31C();
    uint64_t v3 = *(void **)(v0 + 16);
    type metadata accessor for MetadataService();
    uint64_t v4 = (void *)swift_allocObject();
    uint64_t v1 = sub_100040F58(v2, (uint64_t)v3, (uint64_t)sub_100047FB4, 0, 0xD000000000000019, 0x800000010007C2C0, v4);
    *(void *)(v0 + 88) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10003B31C()
{
  if (*(void *)(v0 + 96))
  {
    uint64_t v1 = *(void *)(v0 + 96);
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = *(void **)(v0 + 16);
    uint64_t v4 = type metadata accessor for XPCEventPublisher();
    type metadata accessor for AuxiliaryMetadataService();
    swift_allocObject();
    uint64_t v1 = sub_10004A9F0(v3, v4, &off_10008C7A8, 0);
    *(void *)(v2 + 96) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10003B3BC()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 104);
  }
  else
  {
    uint64_t v1 = sub_10003B41C(v0);
    *(void *)(v0 + 104) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10003B41C(uint64_t a1)
{
  sub_1000153C0(&qword_100097130);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100075CA0;
  sub_10003AAC8();
  uint64_t v4 = v3;
  *(void *)(v2 + 56) = type metadata accessor for RSDService();
  *(void *)(v2 + 64) = &off_10008D2E8;
  *(void *)(v2 + 32) = v4;
  sub_10003ACCC();
  uint64_t v6 = v5;
  *(void *)(v2 + 96) = type metadata accessor for NetworkPairingService();
  *(void *)(v2 + 104) = &off_10008CF48;
  *(void *)(v2 + 72) = v6;
  sub_10003AFD0();
  uint64_t v8 = v7;
  *(void *)(v2 + 136) = type metadata accessor for NetworkControlChannelService();
  *(void *)(v2 + 144) = &off_10008C1D8;
  *(void *)(v2 + 112) = v8;
  if (sub_10000E644())
  {
    uint64_t v43 = sub_10003A8B8();
    uint64_t v39 = *(void *)(a1 + 16);
    uint64_t v41 = type metadata accessor for DispatchQoS();
    uint64_t v42 = v38;
    uint64_t v40 = *(void *)(v41 - 8);
    __chkstk_darwin(v41);
    uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    static DispatchQoS.userInitiated.getter();
    uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
    v38[1] = v38;
    uint64_t v12 = *(void *)(v11 - 8);
    __chkstk_darwin(v11);
    uint64_t v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(void *)&long long v44 = &_swiftEmptyArrayStorage;
    sub_100042C34((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_1000153C0(&qword_100095D80);
    sub_10000E5F4((unint64_t *)&unk_100096220, &qword_100095D80);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
    v38[0] = v38;
    uint64_t v16 = *(void *)(v15 - 8);
    __chkstk_darwin(v15);
    uint64_t v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v15);
    uint64_t v39 = OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v41);
    uint64_t v19 = *(void *)(a1 + 120);
    uint64_t v20 = type metadata accessor for LockStateManager();
    uint64_t v45 = v20;
    uint64_t v46 = &off_10008CD58;
    *(void *)&long long v44 = v19;
    uint64_t v21 = type metadata accessor for LockdownService();
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = sub_100040C70((uint64_t)&v44, v20);
    __chkstk_darwin(v23);
    unint64_t v25 = (void *)((char *)v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v26 + 16))(v25);
    uint64_t v27 = *v25;
    *(void *)(v22 + 56) = v20;
    *(void *)(v22 + 64) = &off_10008CD58;
    *(void *)(v22 + 32) = v27;
    *(unsigned char *)(v22 + 72) = 0;
    *(void *)(v22 + 80) = v43;
    uint64_t v28 = v39;
    *(void *)(v22 + 16) = &_swiftEmptySetSingleton;
    *(void *)(v22 + 24) = v28;
    swift_retain();
    sub_100010548((uint64_t)&v44);
    unint64_t v29 = *(void *)(v2 + 16);
    unint64_t v30 = *(void *)(v2 + 24);
    swift_retain();
    if (v29 >= v30 >> 1)
    {
      sub_10005311C();
      uint64_t v2 = v37;
    }
    uint64_t v45 = v21;
    uint64_t v46 = &off_10008AD78;
    *(void *)&long long v44 = v22;
    *(void *)(v2 + 16) = v29 + 1;
    sub_1000326F8(&v44, v2 + 40 * v29 + 32);
    swift_release();
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v31 = sub_10003A8B8();
    uint64_t v32 = *(void **)(a1 + 16);
    uint64_t v33 = type metadata accessor for DummyLockdownService();
    swift_allocObject();
    uint64_t v34 = sub_100019684((uint64_t)v31, v32);
    sub_10005311C();
    uint64_t v2 = v35;
    uint64_t v45 = v33;
    uint64_t v46 = &off_10008AD48;
    *(void *)&long long v44 = v34;
    *(void *)(v35 + 16) = 4;
    sub_1000326F8(&v44, v35 + 152);
  }
  return v2;
}

uint64_t sub_10003B9F0()
{
  if (*(void *)(v0 + 112))
  {
    uint64_t v1 = *(void *)(v0 + 112);
  }
  else
  {
    uint64_t v2 = v0;
    sub_100017F4C(0, (unint64_t *)&qword_100096200);
    uint64_t v1 = static OS_dispatch_source.makeSignalSource(signal:queue:)();
    *(void *)(v2 + 112) = v1;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v1;
}

void sub_10003BA70()
{
  sub_1000139EC();
  sub_100017F4C(0, (unint64_t *)&qword_100096250);
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100013814();
  __chkstk_darwin(v2);
  sub_100010EB0();
  (*(void (**)(uint64_t, void))(v3 + 104))(v1, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = sub_100014774(v4);
  __chkstk_darwin(v5);
  sub_100013900();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for OS_dispatch_queue.Attributes();
  sub_100010EF0();
  __chkstk_darwin(v6);
  sub_100013460();
  sub_100042C34((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000153C0(&qword_100095D80);
  sub_10000E5F4((unint64_t *)&unk_100096220, &qword_100095D80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_100015B44();
  *(void *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for LockStateManager();
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  swift_allocObject();
  *(void *)(v0 + 120) = sub_10005694C();
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(unsigned char *)(v0 + 160) = 1;
  sub_1000403D8();
  sub_100013918();
}

void sub_10003BC84()
{
  sub_1000139EC();
  v8[4] = sub_100042C98;
  uint64_t v9 = v0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10000CF80;
  v8[3] = &unk_10008BFE0;
  uint64_t v1 = _Block_copy(v8);
  type metadata accessor for DispatchQoS();
  sub_100013814();
  __chkstk_darwin(v2);
  sub_10001653C();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100013814();
  __chkstk_darwin(v3);
  sub_100015928();
  sub_100042C34((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_10000E5F4((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  sub_100010F34();
  sub_10001614C();
  _Block_release(v1);
  uint64_t v4 = sub_100042D0C();
  v5(v4);
  uint64_t v6 = sub_100015F18();
  v7(v6);
  swift_release();
  sub_100013918();
}

void sub_10003BE24()
{
  sub_1000139EC();
  swift_retain();
  sub_100015B44();
  sub_100055158();
  uint64_t v1 = sub_10003B25C();
  uint64_t v2 = sub_100010E68();
  swift_weakInit();
  uint64_t v3 = v1[3];
  v1[3] = sub_100040C58;
  v1[4] = v2;
  sub_1000408C4(v3);
  swift_release();
  uint64_t v4 = sub_10003B3BC();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 32;
    do
    {
      sub_100017194(v6, (uint64_t)v28);
      sub_100016C68(v28, (uint64_t)v29);
      uint64_t v7 = sub_100042DB4();
      v8(v7);
      sub_100010548((uint64_t)v28);
      v6 += 40;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  sub_10003A840();
  sub_10005BE04();
  swift_release();
  sub_10003A840();
  sub_10005AEF0();
  swift_release();
  sub_10003AA44();
  sub_10001A97C();
  swift_release();
  sub_10003B1CC();
  sub_1000285D0();
  swift_release();
  sub_10003B25C();
  sub_100048038();
  swift_release();
  sub_100015B44();
  sub_10003C8B8(v9, v10);
  sub_100015B44();
  sub_10003C8B8(v11, v12);
  sub_10003A8B8();
  uint64_t v13 = sub_100010E68();
  swift_weakInit();
  swift_retain();
  sub_1000258B8((uint64_t)sub_100040C60, v13);
  swift_release();
  swift_release_n();
  uint64_t v14 = (void (__cdecl *)(int))SIG_IGN.getter();
  signal(15, v14);
  sub_10003B9F0();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = sub_100010E68();
  swift_weakInit();
  unint64_t v30 = sub_100040C68;
  uint64_t v31 = v16;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 1107296256;
  v28[2] = sub_10000CF80;
  unint64_t v29 = &unk_10008BF68;
  uint64_t v17 = _Block_copy(v28);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v27 = v25;
  sub_100013814();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  sub_100015928();
  swift_retain();
  sub_10001CDC8();
  uint64_t v21 = type metadata accessor for DispatchWorkItemFlags();
  v25[1] = v25;
  sub_100013814();
  uint64_t v23 = v22;
  __chkstk_darwin(v24);
  sub_1000120C8();
  sub_10001CDE0(ObjectType);
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v17);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v0, v21);
  (*(void (**)(unint64_t, uint64_t))(v19 + 8))(0xD00000000000001CLL, v26);
  swift_release();
  swift_release();
  sub_10003B9F0();
  swift_getObjectType();
  OS_dispatch_source.resume()();
  swift_unknownObjectRelease();
  sub_10003FE84();
  sub_100013918();
}

uint64_t sub_10003C22C()
{
  sub_10003A8B8();
  sub_100025E94();
  sub_100013444();
  return swift_release();
}

uint64_t sub_10003C3BC()
{
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10003C594();
    return swift_release();
  }
  return result;
}

uint64_t sub_10003C444(unsigned __int8 a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    notify_post((const char *)[kRemotePairingTrustedHostsUpdatedNotificationName UTF8String]);
    if (a1 <= 2u) {
      notify_post((const char *)[objc_retainAutorelease(*(id *)*(&off_10008C008 + (char)a1)) UTF8String]);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10003C4F4()
{
  if (swift_weakLoadStrong())
  {
    sub_10003FDCC();
    swift_release();
  }
  return xpc_transaction_exit_clean();
}

uint64_t sub_10003C550(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  sub_100040BDC(a1);
  uint64_t v3 = sub_100016CC4();

  return sub_1000408C4(v3);
}

void sub_10003C594()
{
  uint64_t v0 = sub_10003B3BC();
  uint64_t v26 = *(void *)(v0 + 16);
  if (!v26)
  {
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v1 = 0;
  uint64_t v25 = v0 + 32;
  uint64_t v24 = v0;
LABEL_3:
  if (v1 >= *(void *)(v0 + 16)) {
    goto LABEL_36;
  }
  sub_100017194(v25 + 40 * v1, (uint64_t)v29);
  uint64_t v2 = v30;
  uint64_t v3 = v31;
  sub_100016C68(v29, v30);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  uint64_t v5 = v4;
  if ((v4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for ControlChannelConnection();
    sub_100011F10(&qword_100096130, 255, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v32;
    uint64_t v6 = v33;
    uint64_t v7 = v34;
    int64_t v8 = v35;
    unint64_t v9 = v36;
  }
  else
  {
    int64_t v8 = 0;
    uint64_t v6 = v4 + 56;
    sub_10000D2B4();
    unint64_t v9 = v10 & v11;
    uint64_t v7 = v12;
  }
  unint64_t v27 = v1 + 1;
  int64_t v13 = (unint64_t)(v7 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v9)
    {
      uint64_t v14 = (v9 - 1) & v9;
      unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
      int64_t v16 = v8;
      goto LABEL_27;
    }
    int64_t v17 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v17 >= v13) {
      goto LABEL_30;
    }
    int64_t v16 = v8 + 1;
    if (!*(void *)(v6 + 8 * v17))
    {
      int64_t v16 = v8 + 2;
      if (v8 + 2 >= v13) {
        goto LABEL_30;
      }
      if (!*(void *)(v6 + 8 * v16))
      {
        int64_t v16 = v8 + 3;
        if (v8 + 3 >= v13) {
          goto LABEL_30;
        }
        if (!*(void *)(v6 + 8 * v16))
        {
          int64_t v16 = v8 + 4;
          if (v8 + 4 >= v13) {
            goto LABEL_30;
          }
          if (!*(void *)(v6 + 8 * v16))
          {
            int64_t v18 = v8 + 5;
            while (v18 < v13)
            {
              if (*(void *)(v6 + 8 * v18++))
              {
                int64_t v16 = v18 - 1;
                goto LABEL_26;
              }
            }
LABEL_30:
            sub_100019C54();
            sub_100010548((uint64_t)v29);
            unint64_t v1 = v27;
            uint64_t v0 = v24;
            if (v27 == v26)
            {
              swift_bridgeObjectRelease();
              return;
            }
            goto LABEL_3;
          }
        }
      }
    }
LABEL_26:
    sub_100042D34();
    uint64_t v14 = v21 & v20;
    unint64_t v15 = v22 + (v16 << 6);
LABEL_27:
    uint64_t v23 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    swift_retain();
    if (!v23) {
      goto LABEL_30;
    }
    while (1)
    {
      dispatch thunk of ControlChannelConnection.pushDeviceInfoChangesToHost()();
      swift_release();
      int64_t v8 = v16;
      unint64_t v9 = v14;
      if ((v5 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ControlChannelConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        int64_t v16 = v8;
        uint64_t v14 = v9;
        if (v28) {
          continue;
        }
      }
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_10003C8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010E68();
  swift_weakInit();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  v8[4] = sub_100040C2C;
  void v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000174C8;
  v8[3] = &unk_10008BF40;
  uint64_t v6 = _Block_copy(v8);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v7 = String.utf8CString.getter();
  xpc_activity_register((const char *)(v7 + 32), XPC_ACTIVITY_CHECK_IN, v6);
  swift_release();
  _Block_release(v6);
}

void sub_10003C9E4()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v1 = *(id *)(Strong + 16);
    uint64_t v2 = swift_release();
    __chkstk_darwin(v2);
    sub_1000153C0(&qword_1000961F8);
    OS_dispatch_queue.sync<A>(execute:)();
  }
}

uint64_t sub_10003CAD8@<X0>(_xpc_activity_s *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, BOOL *a4@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v9 = result;
  if (result)
  {
    sub_10003CB74(a1, a2, a3);
    uint64_t result = swift_release();
  }
  *a4 = v9 == 0;
  return result;
}

void sub_10003CB74(_xpc_activity_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  if (!xpc_activity_get_state(a1))
  {
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)qword_1000986F0, v13)) {
      return;
    }
    swift_bridgeObjectRetain_n();
    sub_100014750();
    uint64_t v26 = sub_100015720();
    uint64_t v14 = sub_10001677C(4.8751e-34);
    sub_100015B50(v14);
    sub_100042CCC();
    swift_bridgeObjectRelease_n();
    sub_100042E14((void *)&_mh_execute_header, v15, v16, "Received check in event in for XPC activity %{public}s");
LABEL_9:
    swift_arrayDestroy();
    sub_1000120B0();
    goto LABEL_10;
  }
  if (xpc_activity_get_state(a1) != 2) {
    return;
  }
  if (xpc_activity_should_defer(a1))
  {
    if (!xpc_activity_set_state(a1, 3))
    {
      os_log_type_t v8 = static os_log_type_t.fault.getter();
      uint64_t v9 = qword_1000986F0;
      if (sub_100016760(v8))
      {
        swift_unknownObjectRetain_n();
        uint64_t v10 = (uint8_t *)sub_100014750();
        uint64_t v26 = sub_100015720();
        *(_DWORD *)uint64_t v10 = 136315138;
        swift_unknownObjectRetain();
        sub_1000153C0(&qword_1000961F0);
        uint64_t v11 = String.init<A>(describing:)();
        sub_100010478(v11, v12, &v26);
        sub_100042DFC();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v7, "Failed to defer activity %s", v10, 0xCu);
        swift_arrayDestroy();
        sub_1000120B0();
LABEL_10:
        sub_1000120B0();
        return;
      }
    }
    return;
  }
  os_log_type_t v17 = static os_log_type_t.default.getter();
  int64_t v18 = qword_1000986F0;
  os_log_type_t v19 = v17;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v17))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v20 = (uint8_t *)sub_100014750();
    uint64_t v26 = sub_100015720();
    *(_DWORD *)uint64_t v20 = 136446210;
    uint64_t v21 = swift_bridgeObjectRetain();
    sub_100015B50(v21);
    sub_100012188();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "XPC activity %{public}s fired", v20, 0xCu);
    swift_arrayDestroy();
    sub_1000120B0();
    sub_1000120B0();
  }
  if (a2 == 0xD00000000000002ELL && a3 == 0x800000010007C160
    || (sub_100015B44(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    sub_10003CF7C();
    return;
  }
  if (a2 == 0xD00000000000002BLL && a3 == 0x800000010007C190
    || (sub_100015B44(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    sub_1000554B8();
    return;
  }
  os_log_type_t v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v22))
  {
    swift_bridgeObjectRetain_n();
    sub_100014750();
    uint64_t v26 = sub_100015720();
    uint64_t v23 = sub_10001677C(4.8149e-34);
    sub_100015B50(v23);
    sub_100042CCC();
    swift_bridgeObjectRelease_n();
    sub_100042E14((void *)&_mh_execute_header, v24, v25, "Received event for unexpected XPC activity %s");
    goto LABEL_9;
  }
}

void sub_10003CF7C()
{
  sub_1000139EC();
  uint64_t v0 = sub_10003B3BC();
  uint64_t v28 = *(void *)(v0 + 16);
  if (!v28) {
    goto LABEL_34;
  }
  sub_100017F4C(0, (unint64_t *)&qword_100096990);
  unint64_t v1 = 0;
  uint64_t v27 = v0 + 32;
  uint64_t v26 = v0;
  while (2)
  {
    if (v1 >= *(void *)(v0 + 16))
    {
LABEL_36:
      __break(1u);
      return;
    }
    unint64_t v29 = v1;
    sub_100017194(v27 + 40 * v1, (uint64_t)v35);
    static os_log_type_t.info.getter();
    uint64_t v2 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v3 = v35[4];
    sub_100016C68(v35, v35[3]);
    uint64_t v4 = sub_100014734();
    uint64_t v6 = v5(v4, v3);
    uint64_t v7 = v6;
    if ((v6 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      type metadata accessor for ControlChannelConnection();
      sub_100011F10(&qword_100096130, 255, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      Set.Iterator.init(_cocoa:)();
      uint64_t v7 = v35[5];
      uint64_t v32 = v35[6];
      uint64_t v8 = v35[7];
      int64_t v9 = v35[8];
      unint64_t v10 = v35[9];
    }
    else
    {
      int64_t v9 = 0;
      uint64_t v32 = v6 + 56;
      sub_10000D2B4();
      unint64_t v10 = v11 & v12;
    }
    unint64_t v30 = v29 + 1;
    int64_t v31 = (unint64_t)(v8 + 64) >> 6;
    while (v7 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_33;
      }
      type metadata accessor for ControlChannelConnection();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      int64_t v15 = v9;
      uint64_t v13 = v10;
      if (!v34) {
        goto LABEL_33;
      }
LABEL_24:
      unint64_t v33 = v13;
      uint64_t v21 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      if (v21)
      {
        os_log_type_t v22 = (void *)v21;
        sub_10003A8B8();
        unint64_t v23 = sub_100014734();
        sub_100026BBC(v23);
        swift_release();
      }
      swift_release();
      int64_t v9 = v15;
      unint64_t v10 = v33;
    }
    if (v10)
    {
      uint64_t v13 = (v10 - 1) & v10;
      unint64_t v14 = __clz(__rbit64(v10)) | (v9 << 6);
      int64_t v15 = v9;
      goto LABEL_23;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v15 >= v31) {
      goto LABEL_33;
    }
    if (*(void *)(v32 + 8 * v15))
    {
LABEL_22:
      sub_100042D34();
      uint64_t v13 = v18 & v17;
      unint64_t v14 = v19 + (v15 << 6);
LABEL_23:
      uint64_t v20 = *(void *)(*(void *)(v7 + 48) + 8 * v14);
      swift_retain();
      if (!v20) {
        goto LABEL_33;
      }
      goto LABEL_24;
    }
    int64_t v16 = v9 + 2;
    if (v9 + 2 >= v31) {
      goto LABEL_33;
    }
    if (*(void *)(v32 + 8 * v16)) {
      goto LABEL_21;
    }
    int64_t v16 = v9 + 3;
    if (v9 + 3 >= v31) {
      goto LABEL_33;
    }
    if (*(void *)(v32 + 8 * v16))
    {
LABEL_21:
      int64_t v15 = v16;
      goto LABEL_22;
    }
    int64_t v15 = v9 + 4;
    if (v9 + 4 >= v31) {
      goto LABEL_33;
    }
    if (*(void *)(v32 + 8 * v15)) {
      goto LABEL_22;
    }
    int64_t v24 = v9 + 5;
    while (v24 < v31)
    {
      if (*(void *)(v32 + 8 * v24++))
      {
        int64_t v15 = v24 - 1;
        goto LABEL_22;
      }
    }
LABEL_33:
    sub_100019C54();
    sub_100010548((uint64_t)v35);
    unint64_t v1 = v30;
    uint64_t v0 = v26;
    if (v30 != v28) {
      continue;
    }
    break;
  }
LABEL_34:
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  sub_10003A8B8();
  sub_100025E94();
  swift_release();
  sub_100013918();
}

uint64_t sub_10003D740()
{
  return 0;
}

uint64_t sub_10003D748(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v9 = type metadata accessor for PinNotificationEvent();
  sub_100013814();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100015A44();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  unint64_t v14 = qword_1000986F0;
  os_log_type_t v15 = v13;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v13))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v38 = v6;
    int64_t v16 = (uint8_t *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)int64_t v16 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_100010478(a1, (uint64_t)a2, v41);
    sub_100013494(v17);
    a4 = *(void *)(v18 - 256);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, ">>>>> show pin: %s", v16, 0xCu);
    swift_arrayDestroy();
    sub_1000120B0();
    uint64_t v6 = v38;
    sub_1000120B0();
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t *))(v6 + 136);
  if (!v19) {
    goto LABEL_9;
  }
  uint64_t *v5 = a1;
  v5[1] = (uint64_t)a2;
  v5[2] = a3;
  v5[3] = a4;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v5, enum case for PinNotificationEvent.show(_:), v9);
  swift_bridgeObjectRetain();
  sub_100040BDC((uint64_t)v19);
  swift_bridgeObjectRetain();
  char v20 = v19(v5);
  uint64_t v21 = v9;
  char v22 = v20;
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v5, v21);
  if ((v22 & 1) == 0)
  {
    sub_1000408C4((uint64_t)v19);
LABEL_9:
    sub_1000153C0(&qword_100095D90);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100075C80;
    v41[0] = (uint64_t)kCFUserNotificationAlertHeaderKey;
    CFStringRef v30 = (id)kCFUserNotificationAlertHeaderKey;
    sub_1000153C0((uint64_t *)&unk_100096180);
    sub_1000395E0();
    sub_100042DC8();
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = 0x72696170206E6950;
    *(void *)(inited + 80) = 0xEB00000000676E69;
    v41[0] = (uint64_t)kCFUserNotificationAlertMessageKey;
    CFStringRef v31 = (id)kCFUserNotificationAlertMessageKey;
    sub_100042DC8();
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    strcpy((char *)v41, "Enter the PIN ");
    HIBYTE(v41[1]) = -18;
    v32._countAndFlagsBits = a1;
    v32._object = a2;
    String.append(_:)(v32);
    sub_100015B44();
    v33._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v33);
    uint64_t v34 = v41[0];
    uint64_t v35 = v41[1];
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = v34;
    *(void *)(inited + 152) = v35;
    Dictionary.init(dictionaryLiteral:)();
    Dictionary._bridgeToObjectiveC()();
    sub_100014734();
    swift_bridgeObjectRelease();
    CFUserNotificationRef v36 = CFUserNotificationCreate(0, 0.0, 0x23uLL, 0, (CFDictionaryRef)((char *)&type metadata for Any + 8));

    uint64_t v37 = *(void **)(v6 + 128);
    *(void *)(v6 + 128) = v36;

    static os_log_type_t.error.getter();
    return os_log(_:dso:log:_:_:)();
  }
  os_log_type_t v23 = static os_log_type_t.error.getter();
  int64_t v24 = qword_1000986F0;
  os_log_type_t v25 = v23;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v23))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_100010478(a1, (uint64_t)a2, v41);
    sub_100013494(v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, ">>>>> used custom pin handler: %s", v26, 0xCu);
    swift_arrayDestroy();
    sub_1000120B0();
    sub_1000120B0();
  }
  return sub_1000408C4((uint64_t)v19);
}

void sub_10003DCB4()
{
  uint64_t v2 = type metadata accessor for PinNotificationEvent();
  sub_100013814();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100010EB0();
  uint64_t v6 = *(void (**)(uint64_t))(v0 + 136);
  if (v6)
  {
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v1, enum case for PinNotificationEvent.hide(_:), v2);
    swift_retain();
    v6(v1);
    sub_1000408C4((uint64_t)v6);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  }
  uint64_t v7 = *(__CFUserNotification **)(v0 + 128);
  if (v7)
  {
    CFUserNotificationCancel(v7);
    uint64_t v8 = *(void **)(v0 + 128);
    *(void *)(v0 + 128) = 0;
  }
}

uint64_t sub_10003DDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000121C4();
  id v11 = v10;
  swift_retain_n();
  id v12 = v11;
  uint64_t v13 = sub_10003A840();
  sub_100042CF4();
  sub_10005AF18(v14, v15, v16, v17, v18, v19, v13, v12, a8, a9);
  swift_release();

  return swift_release();
}

void sub_10003DE5C()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  v19[0] = v4;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1000153C0(&qword_100096178);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  sub_1000409B8(v6, (uint64_t)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100096178);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v3;
  *(void *)(v11 + 24) = v1;
  sub_100040B14((uint64_t)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, &qword_100096178);
  v20[4] = sub_100040B70;
  v20[5] = v11;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  void v20[2] = sub_10000CF80;
  void v20[3] = &unk_10008BEF0;
  id v12 = _Block_copy(v20);
  type metadata accessor for DispatchQoS();
  sub_100013814();
  __chkstk_darwin(v13);
  sub_10001653C();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100013814();
  __chkstk_darwin(v14);
  sub_100015928();
  v19[1] = &_swiftEmptyArrayStorage;
  sub_100042C34((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_10000E5F4((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  sub_100010F34();
  sub_10001614C();
  _Block_release(v12);
  uint64_t v15 = sub_100042D0C();
  v16(v15);
  uint64_t v17 = sub_100015F18();
  v18(v17);
  swift_release();
  sub_100013918();
}

uint64_t sub_10003E0C4()
{
  sub_1000121C4();
  sub_10003A7C4();
  sub_100042CF4();
  sub_100035D3C();

  return swift_release();
}

uint64_t sub_10003E130()
{
  sub_10003A7C4();
  sub_100035C48();

  return swift_release();
}

uint64_t sub_10003E16C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for HostDeletionTarget();
  sub_100013814();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100012078();
  uint64_t v9 = v8 - v7;
  sub_100042DE8();
  sub_100015CF0();
  v10();
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v9, v3);
  if (v11 == enum case for HostDeletionTarget.singleHost(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 96))(v9, v3);
    id v12 = type metadata accessor for UUID();
    sub_100013814();
    uint64_t v14 = v13;
    __chkstk_darwin(v15);
    sub_1000112F8();
    uint64_t v18 = v16 - v17;
    (*(void (**)(uint64_t, uint64_t, NSObject *))(v14 + 32))(v16 - v17, v9, v12);
    sub_10003A8B8();
    sub_100016BCC();
    if (v1)
    {
      (*(void (**)(uint64_t, NSObject *))(v14 + 8))(v18, v12);
      return swift_release();
    }
    else
    {
      sub_100014818();
      CFStringRef v30 = v29;
      uint64_t v99 = &v94;
      uint64_t v101 = 0;
      swift_release();
      id v98 = v30;
      uint64_t v31 = CUPairedPeer.associatedLockdownHostBUID.getter();
      uint64_t v104 = v18;
      if (v32)
      {
        uint64_t v33 = v31;
        uint64_t v34 = v32;
        NSString v35 = String._bridgeToObjectiveC()();
        int v36 = lockdown_unpair_host_by_id();

        if (v36)
        {
          uint64_t v37 = static os_log_type_t.error.getter();
          os_log_type_t v38 = v37;
          uint64_t v103 = &v94;
          uint64_t v39 = qword_1000986F0;
          __chkstk_darwin(v37);
          sub_1000112F8();
          uint64_t v102 = v40 - v41;
          sub_100015CF0();
          v42();
          os_log_t v100 = v39;
          if (os_log_type_enabled(v39, v38))
          {
            swift_bridgeObjectRetain();
            uint64_t v43 = swift_slowAlloc();
            uint64_t v95 = v14;
            os_log_t v96 = v12;
            uint64_t v44 = v43;
            v105[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v44 = 136446466;
            swift_bridgeObjectRetain();
            uint64_t v107 = sub_100010478(v33, v34, v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v44 + 12) = 2082;
            uint64_t v45 = v102;
            uint64_t v46 = UUID.uuidString.getter();
            uint64_t v107 = sub_100010478(v46, v47, v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, os_log_t))(v95 + 8))(v45, v96);
            _os_log_impl((void *)&_mh_execute_header, v100, v38, "Failed to delete lockdown record with host buid %{public}s associated with RemotePairing record %{public}s", (uint8_t *)v44, 0x16u);
            swift_arrayDestroy();
            sub_1000120B0();
            uint64_t v14 = v95;
            id v12 = v96;
            sub_1000120B0();
          }
          else
          {
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, NSObject *))(v14 + 8))(v102, v12);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v48 = static os_log_type_t.default.getter();
      os_log_type_t v49 = v48;
      uint64_t v50 = &v94;
      uint64_t v51 = qword_1000986F0;
      __chkstk_darwin(v48);
      sub_1000112F8();
      sub_100042DE8();
      uint64_t v102 = v53;
      uint64_t v103 = v52;
      sub_100015CF0();
      v54();
      uint64_t v55 = v14;
      if (os_log_type_enabled(v51, v49))
      {
        os_log_t v100 = (os_log_t)&v94;
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        os_log_t v96 = v51;
        v105[0] = v57;
        *(_DWORD *)uint64_t v56 = 136315138;
        uint64_t v97 = (uint64_t (*)(uint64_t, NSObject *))(v56 + 4);
        uint64_t v58 = UUID.uuidString.getter();
        uint64_t v60 = sub_100010478(v58, v59, v105);
        sub_100013494(v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v50 = (uint64_t *)v100;
        swift_bridgeObjectRelease();
        uint64_t v61 = sub_1000147B4();
        v62(v61);
        _os_log_impl((void *)&_mh_execute_header, v96, v49, "Deleting pairing record for host %s", v56, 0xCu);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      else
      {
        uint64_t v63 = sub_1000147B4();
        v64(v63);
      }
      uint64_t v65 = v101;
      uint64_t v66 = v12;
      sub_10003A8B8();
      uint64_t v67 = sub_1000153C0((uint64_t *)&unk_1000976C0);
      uint64_t v68 = sub_100014774(v67);
      uint64_t v69 = __chkstk_darwin(v68);
      sub_100015984(v69, v70, v71, v72, v73, v74, v75, v76, v94);
      uint64_t v77 = v104;
      sub_100015CF0();
      v78();
      sub_100015C34((uint64_t)v50, 0, 1, (uint64_t)v66);
      sub_100025974();
      if (v65)
      {

        swift_release();
        sub_100015C5C((uint64_t)v50, (uint64_t *)&unk_1000976C0);
        return v97(v77, v66);
      }
      else
      {
        os_log_t v96 = v66;
        sub_100015C5C((uint64_t)v50, (uint64_t *)&unk_1000976C0);
        swift_release();
        os_log_t v100 = v2;
        uint64_t v79 = sub_10003B3BC();
        uint64_t v80 = *(void *)(v79 + 16);
        if (v80)
        {
          uint64_t v94 = v79;
          uint64_t v95 = v55;
          uint64_t v101 = 0;
          uint64_t v81 = v79 + 32;
          os_log_t v82 = v96;
          do
          {
            sub_100017194(v81, (uint64_t)v105);
            int64_t v83 = sub_100016C68(v105, v106);
            uint64_t v84 = __chkstk_darwin(v83);
            sub_100015984(v84, v85, v86, v87, v88, v89, v90, v91, v94);
            sub_100015CF0();
            v92();
            sub_100015C34((uint64_t)v50, 0, 1, (uint64_t)v82);
            sub_100039EBC();
            sub_100015C5C((uint64_t)v50, (uint64_t *)&unk_1000976C0);
            sub_100010548((uint64_t)v105);
            v81 += 40;
            --v80;
          }
          while (v80);
        }
        swift_bridgeObjectRelease();
        sub_10003A840();
        uint64_t v93 = v104;
        sub_10005D440(v104);

        swift_release();
        return v97(v93, v96);
      }
    }
  }
  else if (v11 == enum case for HostDeletionTarget.all(_:))
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_10003A8B8();
    uint64_t v20 = sub_1000153C0((uint64_t *)&unk_1000976C0);
    uint64_t v21 = sub_100014774(v20);
    uint64_t v23 = *(void *)(v22 + 64);
    __chkstk_darwin(v21);
    uint64_t v24 = type metadata accessor for UUID();
    sub_100015C34((uint64_t)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v24);
    sub_100025974();
    sub_100015C5C((uint64_t)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_1000976C0);
    uint64_t result = swift_release();
    if (!v1)
    {
      uint64_t v25 = sub_10003B3BC();
      uint64_t v26 = *(void *)(v25 + 16);
      if (v26)
      {
        os_log_t v100 = v2;
        uint64_t v101 = 0;
        uint64_t v104 = v25;
        uint64_t v27 = v25 + 32;
        do
        {
          sub_100017194(v27, (uint64_t)v105);
          uint64_t v28 = sub_100016C68(v105, v106);
          __chkstk_darwin(v28);
          sub_100015C34((uint64_t)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v24);
          sub_100039EBC();
          sub_100015C5C((uint64_t)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_1000976C0);
          sub_100010548((uint64_t)v105);
          v27 += 40;
          --v26;
        }
        while (v26);
      }
      swift_bridgeObjectRelease();
      sub_10003A840();
      sub_10005CFD0();
      return swift_release();
    }
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10003EAC8()
{
  uint64_t v2 = sub_1000153C0((uint64_t *)&unk_100096140);
  uint64_t v3 = sub_100014774(v2);
  __chkstk_darwin(v3);
  sub_100012078();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for PairedHostInfo();
  sub_100013814();
  uint64_t v9 = v8;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v39 - v14;
  sub_10003A8B8();
  sub_100013DE4();
  unint64_t v17 = v16;
  swift_release();
  if (v0) {
    return (uint64_t)v1;
  }
  unint64_t v40 = v17;
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v18 = result;
  }
  else
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v42 = 0;
  if (!v18)
  {
    uint64_t v1 = &_swiftEmptyArrayStorage;
LABEL_20:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v1;
  }
  if (v18 >= 1)
  {
    v39[0] = v15;
    uint64_t v20 = 0;
    unint64_t v41 = v40 & 0xC000000000000001;
    void v39[2] = v9;
    uint64_t v21 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    unint64_t v22 = v40;
    uint64_t v1 = &_swiftEmptyArrayStorage;
    v39[1] = v13;
    do
    {
      uint64_t v23 = v18;
      if (v41) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v24 = *(id *)(v22 + 8 * v20 + 32);
      }
      uint64_t v25 = v24;
      uint64_t v43 = v24;
      uint64_t v26 = v42;
      sub_10003EDCC(&v43, v6);
      uint64_t v42 = v26;

      if (sub_100015C0C(v6, 1, v7) == 1)
      {
        sub_100015C5C(v6, (uint64_t *)&unk_100096140);
      }
      else
      {
        uint64_t v27 = *v21;
        sub_100042D24();
        v27(v28, v29, v30);
        sub_100042D24();
        v27(v31, v32, v33);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = (void *)sub_1000531D8(0, v1[2] + 1, 1, (uint64_t)v1);
        }
        unint64_t v35 = v1[2];
        unint64_t v34 = v1[3];
        if (v35 >= v34 >> 1) {
          uint64_t v1 = (void *)sub_1000531D8(v34 > 1, v35 + 1, 1, (uint64_t)v1);
        }
        v1[2] = v35 + 1;
        sub_100042D24();
        v27(v36, v37, v38);
        unint64_t v22 = v40;
      }
      ++v20;
      uint64_t v18 = v23;
    }
    while (v23 != v20);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10003EDCC@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = sub_100040958(*a1, (SEL *)&selRef_name);
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x6E776F6E6B6E55;
  }
  if (v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0xE700000000000000;
  }
  uint64_t v8 = sub_100040958(v3, (SEL *)&selRef_model);
  if (v9)
  {
    uint64_t v49 = v8;
    uint64_t v53 = v9;
    goto LABEL_18;
  }
  uint64_t v10 = sub_1000408D4(v3);
  if (!v10)
  {
    long long v60 = 0u;
    long long v61 = 0u;
    goto LABEL_17;
  }
  uint64_t v11 = v10;
  uint64_t v56 = 0x6C65646F6DLL;
  unint64_t v57 = 0xE500000000000000;
  AnyHashable.init<A>(_:)();
  sub_10004A7B0(v11, &v60);
  sub_100027D34((uint64_t)&v58);
  swift_bridgeObjectRelease();
  if (!*((void *)&v61 + 1))
  {
LABEL_17:
    sub_100015C5C((uint64_t)&v60, &qword_100095588);
    uint64_t v53 = 0;
    uint64_t v49 = 0;
    goto LABEL_18;
  }
  int v12 = swift_dynamicCast();
  uint64_t v13 = v58;
  uint64_t v14 = v59;
  if (!v12) {
    uint64_t v14 = 0;
  }
  uint64_t v53 = v14;
  if (!v12) {
    uint64_t v13 = 0;
  }
  uint64_t v49 = v13;
LABEL_18:
  uint64_t v15 = CUPairedPeer.serialNumber.getter();
  unint64_t v54 = v7;
  uint64_t v55 = a2;
  if (v16)
  {
    uint64_t v48 = v15;
    uint64_t v52 = v16;
    goto LABEL_29;
  }
  uint64_t v17 = sub_1000408D4(v3);
  if (!v17)
  {
    long long v60 = 0u;
    long long v61 = 0u;
    goto LABEL_28;
  }
  uint64_t v18 = v17;
  sub_100017F4C(0, (unint64_t *)&qword_100096150);
  uint64_t v56 = static CUPairedPeer.serialNumberInfoKey.getter();
  unint64_t v57 = v19;
  AnyHashable.init<A>(_:)();
  sub_10004A7B0(v18, &v60);
  sub_100027D34((uint64_t)&v58);
  swift_bridgeObjectRelease();
  if (!*((void *)&v61 + 1))
  {
LABEL_28:
    sub_100015C5C((uint64_t)&v60, &qword_100095588);
    uint64_t v52 = 0;
    uint64_t v48 = 0;
    goto LABEL_29;
  }
  int v20 = swift_dynamicCast();
  uint64_t v21 = v58;
  uint64_t v22 = v59;
  if (!v20) {
    uint64_t v22 = 0;
  }
  uint64_t v52 = v22;
  if (!v20) {
    uint64_t v21 = 0;
  }
  uint64_t v48 = v21;
LABEL_29:
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v23 - 8);
  uint64_t v24 = *(void *)(v51 + 64);
  __chkstk_darwin(v23);
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v50 = (char *)v43 - v25;
  id v26 = [v3 identifier];
  uint64_t v27 = sub_1000153C0((uint64_t *)&unk_1000976C0);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v31 = (char *)v43 - v30;
  if (v26)
  {
    uint64_t v46 = v3;
    uint64_t v47 = v6;
    __chkstk_darwin(v28);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    v32(v31, (char *)v43 - v25, v23);
    sub_100015C34((uint64_t)v31, 0, 1, v23);
    if (sub_100015C0C((uint64_t)v31, 1, v23) != 1)
    {
      uint64_t v33 = v50;
      v32(v50, v31, v23);
      uint64_t v34 = CUPairedPeer.isPairedForAutomation.getter();
      v43[1] = v34;
      uint64_t v45 = v43;
      __chkstk_darwin(v34);
      uint64_t v35 = v51;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))((char *)v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v33, v23);
      uint64_t v36 = sub_1000153C0(&qword_100096160);
      uint64_t v44 = v43;
      uint64_t v37 = *(void *)(*(void *)(v36 - 8) + 64);
      __chkstk_darwin(v36 - 8);
      uint64_t v38 = sub_100068858((uint64_t)v43 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
      __chkstk_darwin(v38);
      CUPairedPeer.initialPairingTime.getter();
      uint64_t v39 = v55;
      PairedHostInfo.init(name:identifier:lastUsed:initialPairingTime:pairedForAutomation:model:serialNumber:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v50, v23);
      uint64_t v40 = type metadata accessor for PairedHostInfo();
      return sub_100015C34(v39, 0, 1, v40);
    }
  }
  else
  {
    sub_100015C34((uint64_t)v43 - v30, 1, 1, v23);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100015C5C((uint64_t)v31, (uint64_t *)&unk_1000976C0);
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v42 = type metadata accessor for PairedHostInfo();
  return sub_100015C34(v55, 1, 1, v42);
}

uint64_t sub_10003F3F0(uint64_t a1)
{
  uint64_t v59 = type metadata accessor for ControlChannelConnection.State();
  uint64_t v3 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  unint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ControlChannelConnection();
    sub_100011F10(&qword_100096130, 255, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    Set.Iterator.init(_cocoa:)();
    a1 = v61;
    uint64_t v46 = v62;
    uint64_t v6 = v63;
    int64_t v7 = v64;
    unint64_t v8 = v65;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v46 = a1 + 56;
    uint64_t v6 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & v10;
    swift_bridgeObjectRetain();
    int64_t v7 = 0;
  }
  uint64_t v41 = v6;
  int v58 = enum case for ControlChannelConnection.State.preparingPairingSession(_:);
  uint64_t v44 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v45 = (unint64_t)(v6 + 64) >> 6;
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v3 + 88);
  int v57 = enum case for ControlChannelConnection.State.setUpManualPairingInProgress(_:);
  int v56 = enum case for ControlChannelConnection.State.upgradeLockdownPairingInProgress(_:);
  int v55 = enum case for ControlChannelConnection.State.deviceRequestUserPairingConsentInProgress(_:);
  int v54 = enum case for ControlChannelConnection.State.notStarted(_:);
  int v53 = enum case for ControlChannelConnection.State.transportStarting(_:);
  int v52 = enum case for ControlChannelConnection.State.handshakeInProgress(_:);
  int v51 = enum case for ControlChannelConnection.State.verifyManualPairingInProgress(_:);
  int v50 = enum case for ControlChannelConnection.State.authenticated(_:);
  int v49 = enum case for ControlChannelConnection.State.unauthenticated(_:);
  int v48 = enum case for ControlChannelConnection.State.invalidated(_:);
  int v38 = enum case for ControlChannelConnection.State.hostRequestPeerInfoInProgress(_:);
  uint64_t v39 = (void (**)(char *, uint64_t))(v3 + 8);
  int v37 = enum case for ControlChannelConnection.State.deviceAwaitingPairVerify(_:);
  uint64_t v40 = (void (**)(char *, uint64_t))(v3 + 96);
  uint64_t v43 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v47 = &_swiftEmptyArrayStorage;
  while (1)
  {
    int64_t v14 = v7;
    if (a1 < 0)
    {
      uint64_t v17 = __CocoaSet.Iterator.next()();
      if (!v17) {
        goto LABEL_65;
      }
      uint64_t v60 = v17;
      type metadata accessor for ControlChannelConnection();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v18 = v66;
      swift_unknownObjectRelease();
      if (!v18) {
        goto LABEL_65;
      }
      goto LABEL_31;
    }
    if (!v8) {
      break;
    }
    unint64_t v15 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v16 = v15 | (v7 << 6);
LABEL_30:
    uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 8 * v16);
    swift_retain();
    if (!v22) {
      goto LABEL_65;
    }
LABEL_31:
    dispatch thunk of ControlChannelConnection.state.getter();
    int v23 = (*v13)(v5, v59);
    if (v23 == v58)
    {
      (*v40)(v5, v59);
      uint64_t v29 = sub_1000153C0(&qword_100096138);
      sub_1000408C4(*(void *)&v5[*(int *)(v29 + 48)]);
      sub_100013BC4(*(void *)&v5[*(int *)(v29 + 64)], *(void *)&v5[*(int *)(v29 + 64) + 8]);
      uint64_t v30 = type metadata accessor for PairingData.Kind();
      (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v5, v30);
LABEL_59:
      uint64_t v31 = 3;
LABEL_60:
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000531FC();
        uint64_t v47 = v34;
      }
      unint64_t v32 = v47[2];
      if (v32 >= v47[3] >> 1)
      {
        sub_1000531FC();
        uint64_t v47 = v35;
      }
      uint64_t v33 = v47;
      v47[2] = v32 + 1;
      v33[v32 + 4] = v31;
    }
    else
    {
      if (v23 == v57 || v23 == v56 || v23 == v55)
      {
        (*v39)(v5, v59);
        uint64_t v31 = 4;
        goto LABEL_60;
      }
      if (v23 == v54 || v23 == v53 || v23 == v52 || v23 == v51) {
        goto LABEL_59;
      }
      if (v23 == v50)
      {
        uint64_t v31 = 5;
        goto LABEL_60;
      }
      if (v23 == v49)
      {
        uint64_t v31 = 2;
        goto LABEL_60;
      }
      if (v23 != v48)
      {
        if (v23 == v38 || v23 != v37) {
          goto LABEL_67;
        }
        goto LABEL_59;
      }
      swift_release();
    }
  }
  int64_t v19 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v19 >= v45) {
      goto LABEL_65;
    }
    unint64_t v20 = *(void *)(v46 + 8 * v19);
    ++v7;
    if (!v20)
    {
      int64_t v7 = v14 + 2;
      if (v14 + 2 >= v45) {
        goto LABEL_65;
      }
      unint64_t v20 = *(void *)(v46 + 8 * v7);
      if (!v20)
      {
        int64_t v7 = v14 + 3;
        if (v14 + 3 >= v45) {
          goto LABEL_65;
        }
        unint64_t v20 = *(void *)(v46 + 8 * v7);
        if (!v20)
        {
          int64_t v7 = v14 + 4;
          if (v14 + 4 >= v45) {
            goto LABEL_65;
          }
          unint64_t v20 = *(void *)(v46 + 8 * v7);
          if (!v20)
          {
            int64_t v7 = v14 + 5;
            if (v14 + 5 >= v45) {
              goto LABEL_65;
            }
            unint64_t v20 = *(void *)(v46 + 8 * v7);
            if (!v20)
            {
              int64_t v21 = v14 + 6;
              while (v21 < v45)
              {
                unint64_t v20 = *(void *)(v46 + 8 * v21++);
                if (v20)
                {
                  int64_t v7 = v21 - 1;
                  goto LABEL_29;
                }
              }
LABEL_65:
              sub_100019C54();
              return (uint64_t)v47;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v7 << 6);
    goto LABEL_30;
  }
  __break(1u);
LABEL_67:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003FAD0@<X0>(uint64_t a1@<X8>)
{
  sub_10003A7C4();
  sub_100035788(a1);

  return swift_release();
}

uint64_t sub_10003FB14()
{
  sub_10003AAC8();
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = qword_1000986F0;
  os_log_type_t v5 = v3;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v3))
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (uint8_t *)sub_100014750();
    *(_DWORD *)uint64_t v6 = 134217984;
    uint64_t v19 = sub_100012750(v2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Determining USB host trust state across %ld control channels", v6, 0xCu);
    sub_1000120B0();
  }
  sub_10003F3F0(v2);
  sub_100014734();
  swift_bridgeObjectRelease();
  Class isa = v4[2].isa;
  if (isa)
  {
    Class v8 = v4[4].isa;
    uint64_t v9 = (char *)isa - 1;
    if (isa != (Class)1)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = 0;
      do
      {
        Class v11 = v4[(void)v10 + 5].isa;
        sub_100016CC4();
        if (static RPUSBConnectedHostTrustState.< infix(_:_:)()) {
          Class v8 = v11;
        }
        ++v10;
      }
      while (v9 != v10);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    uint64_t v13 = qword_1000986F0;
    os_log_type_t v14 = v12;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v12))
    {
      unint64_t v15 = (uint8_t *)sub_100014750();
      uint64_t v19 = sub_100015720();
      *(_DWORD *)unint64_t v15 = 136315138;
      uint64_t v16 = RPUSBConnectedHostTrustState.description.getter();
      sub_100010478(v16, v17, &v19);
      sub_100012188();
      sub_100042DFC();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Overall USB host trust state is %s", v15, 0xCu);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    return 1;
  }
  return (uint64_t)v8;
}

uint64_t sub_10003FD80(char a1)
{
  sub_10003ACCC();
  if (a1) {
    sub_1000579B4();
  }
  else {
    sub_1000577A4();
  }

  return swift_release();
}

uint64_t sub_10003FDCC()
{
  uint64_t v0 = sub_10003B3BC();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0 + 32;
    do
    {
      sub_100017194(v2, (uint64_t)v6);
      sub_100016C68(v6, v6[3]);
      uint64_t v3 = sub_100042DB4();
      v4(v3);
      sub_100010548((uint64_t)v6);
      v2 += 40;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  sub_10003A840();
  sub_10005D1BC();
  return swift_release();
}

void sub_10003FE84()
{
  uint64_t v1 = *(NSObject **)(v0 + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1000174C8;
  v3[3] = &unk_10008BEA0;
  uint64_t v2 = _Block_copy(v3);
  swift_retain();
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v1, v2);
  _Block_release(v2);
}

void sub_10003FF48(void *a1)
{
  uint64_t v2 = (const char *)XPC_EVENT_KEY_NAME.getter();
  if (!xpc_dictionary_get_string(a1, v2))
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    return;
  }
  uint64_t v4 = String.init(cString:)();
  uint64_t v5 = v3;
  if (v4 == 0xD000000000000025 && v3 == 0x800000010007BD80
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_1000554B8();
    return;
  }
  if (v4 == 0xD00000000000002FLL && v5 == 0x800000010007BDB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    goto LABEL_11;
  }
  if (v4 == 0xD000000000000036 && v5 == 0x800000010007BDE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_10003AA44();
    sub_10001BBDC();
    goto LABEL_12;
  }
  if (v4 == 0xD00000000000002FLL && v5 == 0x800000010007BE20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_10003AFD0();
    sub_100017128();
LABEL_12:
    swift_release();
    return;
  }
  os_log_type_t v6 = static os_log_type_t.error.getter();
  int64_t v7 = qword_1000986F0;
  os_log_type_t v8 = v6;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v6))
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    sub_100010478(v4, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received unknown notifyd launch event: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100040364()
{
  sub_100017F4C(0, (unint64_t *)&qword_100096990);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_100098708 = result;
  return result;
}

void sub_1000403D8()
{
  uint64_t v1 = sub_100010E68();
  swift_weakInit();
  v4[4] = sub_1000408B4;
  v4[5] = v1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_100040508;
  v4[3] = &unk_10008BE78;
  uint64_t v2 = _Block_copy(v4);
  swift_release();
  sub_100016CC4();
  uint64_t v3 = os_state_add_handler();
  _Block_release(v2);
  *(void *)(v0 + 152) = v3;
  *(unsigned char *)(v0 + 160) = 0;
}

uint64_t sub_1000404AC()
{
  if (swift_weakLoadStrong())
  {
    sub_100040558();
    swift_release();
  }
  return 0;
}

uint64_t sub_100040508(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  return v4;
}

uint64_t sub_100040558()
{
  uint64_t v0 = sub_10003B3BC();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0 + 32;
    do
    {
      sub_100017194(v2, (uint64_t)v6);
      uint64_t v3 = v7;
      uint64_t v4 = v8;
      sub_100016C68(v6, v7);
      if (qword_1000949D0 != -1) {
        swift_once();
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(qword_100098708, v3, v4);
      sub_100010548((uint64_t)v6);
      v2 += 40;
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
  sub_10003A840();
  if (qword_1000949D0 != -1) {
    swift_once();
  }
  sub_10005E2E4(qword_100098708);
  return swift_release();
}

uint64_t sub_100040694()
{
  if ((*(unsigned char *)(v0 + 160) & 1) == 0) {
    os_state_remove_handler();
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  sub_1000408C4(*(void *)(v0 + 136));
  return v0;
}

uint64_t sub_10004073C()
{
  sub_100040694();

  return _swift_deallocClassInstance(v0, 161, 7);
}

uint64_t type metadata accessor for RemotePairingDeviceService()
{
  return self;
}

uint64_t sub_100040794(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_10003D748(a1, a2, a3, a4);
}

void sub_1000407B8()
{
}

uint64_t sub_1000407DC()
{
  return sub_10003E0C4();
}

uint64_t sub_100040800()
{
  return sub_10003E130();
}

uint64_t sub_100040824@<X0>(uint64_t a1@<X8>)
{
  return sub_10003FAD0(a1);
}

uint64_t sub_100040848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10003DDAC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_10004087C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000408B4()
{
  return sub_1000404AC();
}

void sub_1000408BC(void *a1)
{
}

uint64_t sub_1000408C4(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000408D4(void *a1)
{
  id v1 = [a1 info];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100040940(void *a1)
{
  return sub_100040958(a1, (SEL *)&selRef_name);
}

uint64_t sub_10004094C(void *a1)
{
  return sub_100040958(a1, (SEL *)&selRef_model);
}

uint64_t sub_100040958(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_1000409B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000153C0(a3);
  sub_100010EF0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_100040A14()
{
  uint64_t v1 = *(void *)(sub_1000153C0(&qword_100096178) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  sub_100016CC4();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
  }
  else
  {
    type metadata accessor for ListenerStartedResponse();
    sub_100010EF0();
    (*(void (**)(uint64_t))(v5 + 8))(v0 + v3);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100040B14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000153C0(a3);
  sub_100010EF0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_100040B70()
{
  uint64_t v1 = *(void *)(sub_1000153C0(&qword_100096178) - 8);
  return (*(uint64_t (**)(unint64_t))(v0 + 16))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_100040BDC(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100040BEC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100040C2C()
{
}

uint64_t sub_100040C38@<X0>(BOOL *a1@<X8>)
{
  return sub_10003CAD8(*(_xpc_activity_s **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_100040C58()
{
  return sub_10003C3BC();
}

uint64_t sub_100040C60(unsigned __int8 a1)
{
  return sub_10003C444(a1);
}

uint64_t sub_100040C68()
{
  return sub_10003C4F4();
}

uint64_t sub_100040C70(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void *sub_100040CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InProcessIRKGenerator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LockStateManager();
  void v18[3] = v8;
  v18[4] = &off_10008CD58;
  v18[0] = a2;
  type metadata accessor for SystemKeychainPairingManager();
  uint64_t v9 = (void *)swift_allocObject();
  uint64_t v10 = sub_100040C70((uint64_t)v18, v8);
  __chkstk_darwin(v10);
  os_log_type_t v12 = (void *)((char *)&v18[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = *v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  unint64_t v15 = sub_100040EA0((uint64_t)v7, v14, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  sub_100010548((uint64_t)v18);
  return v15;
}

void *sub_100040EA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3 + 3;
  uint64_t v7 = type metadata accessor for InProcessIRKGenerator();
  a3[6] = v7;
  a3[7] = &protocol witness table for InProcessIRKGenerator;
  uint64_t v8 = sub_100042BD0(v6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v8, a1, v7);
  a3[11] = type metadata accessor for LockStateManager();
  a3[12] = &off_10008CD58;
  a3[8] = a2;
  a3[2] = &_swiftEmptyArrayStorage;
  a3[13] = 0;
  return a3;
}

void *sub_100040F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  sub_100017F4C(0, (unint64_t *)&qword_100096990);
  uint64_t v14 = OS_os_log.init(subsystem:category:)();
  a7[12] = 0;
  a7[3] = 0;
  a7[4] = 0;
  a7[2] = v14;
  uint64_t v15 = (uint64_t)a7 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
  uint64_t v16 = type metadata accessor for PeerDeviceInfo();
  sub_100015C34(v15, 1, 1, v16);
  sub_100015C34((uint64_t)a7 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys, 1, 1, v16);
  *(_DWORD *)((char *)a7 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken) = -1;
  a7[5] = a1;
  a7[6] = &off_10008C7E0;
  a7[7] = a2;
  a7[8] = a3;
  a7[9] = a4;
  a7[10] = a5;
  a7[11] = a6;
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = sub_1000410C0;
  *(void *)(a1 + 64) = v17;
  sub_1000408C4(v18);
  return a7;
}

uint64_t sub_1000410C0()
{
  return sub_100047FE0();
}

uint64_t sub_1000410C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = type metadata accessor for LockStateManager();
  uint64_t v22 = &off_10008CD58;
  v20[0] = a6;
  type metadata accessor for RSDService();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = sub_100040C70((uint64_t)v20, v21);
  __chkstk_darwin(v13);
  uint64_t v15 = (void *)((char *)&v20[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_100041214(a1, a2, a3, a4, a5, *v15, v12);
  sub_100010548((uint64_t)v20);
  return v17;
}

uint64_t sub_100041214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = type metadata accessor for RemotePairingDeviceService();
  uint64_t v25 = sub_100011F10(&qword_100096248, v14, (void (*)(uint64_t))type metadata accessor for RemotePairingDeviceService);
  *(void *)&long long v23 = a1;
  uint64_t v21 = v24;
  uint64_t v22 = sub_100011F10(&qword_100096258, v15, (void (*)(uint64_t))type metadata accessor for RemotePairingDeviceService);
  *(void *)&long long v20 = a2;
  uint64_t v18 = type metadata accessor for LockStateManager();
  uint64_t v19 = &off_10008CD58;
  *(void *)&long long v17 = a6;
  *(void *)(a7 + 16) = 50;
  *(void *)(a7 + 24) = &_swiftEmptySetSingleton;
  sub_100017F4C(0, (unint64_t *)&qword_100096260);
  *(void *)(a7 + 32) = Dictionary.init(dictionaryLiteral:)();
  *(unsigned char *)(a7 + 176) = 0;
  *(void *)(a7 + 184) = a3;
  sub_1000326F8(&v23, a7 + 88);
  sub_1000326F8(&v20, a7 + 48);
  *(void *)(a7 + 168) = a4;
  *(void *)(a7 + 40) = a5;
  sub_1000326F8(&v17, a7 + 128);
  return a7;
}

uint64_t sub_10004138C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = type metadata accessor for LockStateManager();
  long long v20 = &off_10008CD58;
  v18[0] = a5;
  type metadata accessor for NetworkControlChannelService();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = sub_100040C70((uint64_t)v18, v19);
  __chkstk_darwin(v11);
  uint64_t v13 = (void *)((char *)&v18[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = sub_1000414D0(a1, a2, a3, a4, *v13, v10);
  sub_100010548((uint64_t)v18);
  return v15;
}

uint64_t sub_1000414D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = a4;
  uint64_t v19 = a3;
  uint64_t v25 = type metadata accessor for RemotePairingDeviceService();
  uint64_t v26 = sub_100011F10(&qword_100096248, v10, (void (*)(uint64_t))type metadata accessor for RemotePairingDeviceService);
  *(void *)&long long v24 = a1;
  uint64_t v22 = type metadata accessor for LockStateManager();
  long long v23 = &off_10008CD58;
  *(void *)&long long v21 = a5;
  *(_OWORD *)(a6 + 16) = xmmword_1000760C0;
  *(void *)(a6 + 32) = 0x800000010007C330;
  sub_100017F4C(0, (unint64_t *)&qword_100096250);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v12);
  long long v20 = &_swiftEmptyArrayStorage;
  sub_100042C34((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000153C0(&qword_100095D80);
  sub_10000E5F4((unint64_t *)&unk_100096220, &qword_100095D80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v13);
  (*(void (**)(char *, void))(v15 + 104))((char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)(a6 + 40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a6 + 48) = &_swiftEmptySetSingleton;
  *(void *)(a6 + 56) = &_swiftEmptyArrayStorage;
  *(void *)(a6 + 64) = &_swiftEmptyArrayStorage;
  *(_WORD *)(a6 + 72) = 0;
  *(unsigned char *)(a6 + 74) = 1;
  *(void *)(a6 + 208) = 0;
  *(unsigned char *)(a6 + 216) = 0;
  *(void *)(a6 + 184) = 0;
  *(void *)(a6 + 192) = 0;
  *(_DWORD *)(a6 + 200) = 0;
  *(void *)(a6 + 224) = Dictionary.init(dictionaryLiteral:)();
  sub_1000326F8(&v24, a6 + 144);
  *(void *)(a6 + 136) = a2;
  *(void *)(a6 + 80) = v18;
  sub_1000326F8(&v21, a6 + 88);
  *(void *)(a6 + 128) = v19;
  return a6;
}

uint64_t sub_100041810(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  v14[3] = type metadata accessor for LockStateManager();
  void v14[4] = &off_10008CD58;
  v14[0] = a2;
  type metadata accessor for UUID();
  type metadata accessor for Tunnel();
  sub_100042C34((unint64_t *)&qword_100096300, (void (*)(uint64_t))&type metadata accessor for UUID);
  *(void *)(a4 + 24) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(a4 + 32) = a1;
  *(unsigned char *)(a4 + 80) = a3;
  sub_100017194((uint64_t)v14, a4 + 40);
  type metadata accessor for RemotePairingDeviceXPCServer();
  id v8 = a1;
  uint64_t v9 = static MachServiceNames.tunnelManagementService.getter();
  uint64_t v11 = v10;
  id v12 = v8;
  *(void *)(a4 + 16) = sub_100032ABC(v9, v11, v12);
  type metadata accessor for RemotePairingErrorCodingWrapper();
  type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest();
  type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse();
  sub_100011F10(&qword_100096308, 255, (void (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest);
  sub_100011F10(&qword_100096310, 255, (void (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest);
  sub_100011F10(&qword_100096318, 255, (void (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse);
  sub_100011F10((unint64_t *)&unk_100096320, 255, (void (*)(uint64_t))&type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse);
  sub_100011F10(&qword_100095A40, 255, (void (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper);
  swift_retain();
  swift_retain();
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();

  swift_release();
  swift_release();
  sub_100010548((uint64_t)v14);
  return a4;
}

uint64_t sub_100041AC4(void *a1, uint64_t a2, char a3)
{
  uint64_t v15 = type metadata accessor for LockStateManager();
  uint64_t v16 = &off_10008CD58;
  v14[0] = a2;
  type metadata accessor for DeviceTunnelManager();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = sub_100040C70((uint64_t)v14, v15);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = sub_100041810(a1, *v9, a3, v6);
  sub_100010548((uint64_t)v14);
  return v11;
}

void *sub_100041BF0(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  void v14[3] = type metadata accessor for SystemKeychainPairingManager();
  void v14[4] = sub_100011F10(&qword_100094F88, 255, (void (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager);
  v14[0] = a2;
  a4[5] = a1;
  if (a3)
  {
    id v8 = a1;
    uint64_t v9 = a3;
  }
  else
  {
    type metadata accessor for RemotePairingDeviceXPCServer();
    id v10 = a1;
    uint64_t v11 = static MachServiceNames.deviceInitiatedPairingService.getter();
    uint64_t v9 = sub_100032ABC(v11, v12, v10);
  }
  a4[6] = v9;
  sub_100017194((uint64_t)v14, (uint64_t)(a4 + 7));
  a4[3] = 0;
  a4[4] = 0;
  a4[2] = 0;
  type metadata accessor for RemotePairingErrorCodingWrapper();
  swift_allocObject();
  swift_weakInit();
  type metadata accessor for BrowseForPairableHostRequest();
  type metadata accessor for EmptyResponse();
  sub_100011F10(&qword_100096230, 255, (void (*)(uint64_t))&type metadata accessor for BrowseForPairableHostRequest);
  sub_100011F10((unint64_t *)&unk_100096238, 255, (void (*)(uint64_t))&type metadata accessor for BrowseForPairableHostRequest);
  sub_100011F10(&qword_100095A30, 255, (void (*)(uint64_t))&type metadata accessor for EmptyResponse);
  sub_100011F10(&qword_100095A38, 255, (void (*)(uint64_t))&type metadata accessor for EmptyResponse);
  sub_100011F10(&qword_100095A40, 255, (void (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper);
  swift_retain();
  swift_retain();
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();

  swift_release();
  swift_release();
  swift_release();
  sub_100010548((uint64_t)v14);
  return a4;
}

void sub_100041EC8()
{
}

uint64_t sub_100041ED0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v15 = type metadata accessor for LockStateManager();
  uint64_t v16 = &off_10008CD58;
  v14[0] = a3;
  type metadata accessor for PairingManagementService();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = sub_100040C70((uint64_t)v14, v15);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = sub_100041FFC(a1, a2, *v9, v6);
  sub_100010548((uint64_t)v14);
  return v11;
}

uint64_t sub_100041FFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v25[3] = type metadata accessor for LockStateManager();
  v25[4] = &off_10008CD58;
  v25[0] = a3;
  type metadata accessor for SystemXPCPeerConnection();
  sub_100011F10(&qword_1000959E8, 255, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  *(void *)(a4 + 32) = Dictionary.init(dictionaryLiteral:)();
  *(unsigned char *)(a4 + 96) = 0;
  sub_100017F4C(0, (unint64_t *)&qword_100096250);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  long long v24 = &_swiftEmptyArrayStorage;
  sub_100042C34((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000153C0(&qword_100095D80);
  sub_10000E5F4((unint64_t *)&unk_100096220, &qword_100095D80);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v10);
  (*(void (**)(char *, void))(v12 + 104))((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  *(void *)(a4 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a4 + 40) = a2;
  uint64_t v20 = a1;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = &off_10008BE10;
  type metadata accessor for RemotePairingDeviceXPCServer();
  id v13 = a2;
  swift_retain();
  uint64_t v14 = static MachServiceNames.pairingManagementService.getter();
  uint64_t v16 = v15;
  id v19 = v13;
  *(void *)(a4 + 48) = sub_100032ABC(v14, v16, v19);
  sub_100017194((uint64_t)v25, a4 + 56);
  swift_unknownObjectRetain();
  swift_retain();
  sub_10003C550((uint64_t)sub_100042B20, a4);
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for RemotePairingErrorCodingWrapper();
  type metadata accessor for DeletePairedHostRecordRequest();
  uint64_t v21 = type metadata accessor for EmptyResponse();
  sub_100011F10(&qword_100096270, 255, (void (*)(uint64_t))&type metadata accessor for DeletePairedHostRecordRequest);
  sub_100011F10(&qword_100096278, 255, (void (*)(uint64_t))&type metadata accessor for DeletePairedHostRecordRequest);
  uint64_t v23 = sub_100011F10(&qword_100095A30, 255, (void (*)(uint64_t))&type metadata accessor for EmptyResponse);
  uint64_t v22 = sub_100011F10(&qword_100095A38, 255, (void (*)(uint64_t))&type metadata accessor for EmptyResponse);
  sub_100011F10(&qword_100095A40, 255, (void (*)(uint64_t))&type metadata accessor for RemotePairingErrorCodingWrapper);
  swift_retain();
  swift_retain();
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
  swift_release();
  swift_release();
  type metadata accessor for ListPairedHostRecordRequest();
  type metadata accessor for ListPairedHostRecordResponse();
  sub_100011F10(&qword_100096280, 255, (void (*)(uint64_t))&type metadata accessor for ListPairedHostRecordRequest);
  sub_100011F10(&qword_100096288, 255, (void (*)(uint64_t))&type metadata accessor for ListPairedHostRecordRequest);
  sub_100011F10(&qword_100096290, 255, (void (*)(uint64_t))&type metadata accessor for ListPairedHostRecordResponse);
  sub_100011F10(&qword_100096298, 255, (void (*)(uint64_t))&type metadata accessor for ListPairedHostRecordResponse);
  swift_retain();
  swift_retain();
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
  swift_release();
  swift_release();
  type metadata accessor for CreateWirelessPairingSessionRequest();
  sub_100011F10(&qword_1000962A0, 255, (void (*)(uint64_t))&type metadata accessor for CreateWirelessPairingSessionRequest);
  sub_100011F10(&qword_1000962A8, 255, (void (*)(uint64_t))&type metadata accessor for CreateWirelessPairingSessionRequest);
  swift_retain();
  swift_retain();
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
  swift_release();
  swift_release();
  type metadata accessor for FetchNetworkPairingSessionIDRequest();
  type metadata accessor for FetchNetworkPairingSessionIDResponse();
  sub_100011F10(&qword_1000962B0, 255, (void (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDRequest);
  sub_100011F10(&qword_1000962B8, 255, (void (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDRequest);
  sub_100011F10(&qword_1000962C0, 255, (void (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDResponse);
  sub_100011F10(&qword_1000962C8, 255, (void (*)(uint64_t))&type metadata accessor for FetchNetworkPairingSessionIDResponse);
  swift_retain();
  swift_retain();
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
  swift_release();
  swift_release();
  type metadata accessor for QueryUSBConnectedHostTrustStateRequest();
  type metadata accessor for RPUSBConnectedHostTrustState(0);
  sub_100011F10(&qword_1000962D0, 255, (void (*)(uint64_t))&type metadata accessor for QueryUSBConnectedHostTrustStateRequest);
  sub_100011F10(&qword_1000962D8, 255, (void (*)(uint64_t))&type metadata accessor for QueryUSBConnectedHostTrustStateRequest);
  sub_100011F10(&qword_1000962E0, 255, type metadata accessor for RPUSBConnectedHostTrustState);
  sub_100011F10(&qword_1000962E8, 255, type metadata accessor for RPUSBConnectedHostTrustState);
  swift_retain();
  swift_retain();
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
  swift_release();
  swift_release();
  type metadata accessor for AllowPromptlessPairingWithHostRequest();
  sub_100011F10(&qword_1000962F0, 255, (void (*)(uint64_t))&type metadata accessor for AllowPromptlessPairingWithHostRequest);
  sub_100011F10(&qword_1000962F8, 255, (void (*)(uint64_t))&type metadata accessor for AllowPromptlessPairingWithHostRequest);
  swift_retain();
  swift_retain();
  dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
  swift_release();

  swift_release();
  swift_release();
  sub_100010548((uint64_t)v25);
  return a4;
}

uint64_t sub_100042B20()
{
  return sub_100019D38();
}

#error "100042B38: call analysis failed (funcsize=7)"

#error "100042B54: call analysis failed (funcsize=7)"

void sub_100042B60()
{
}

void sub_100042B7C()
{
}

void sub_100042B98()
{
}

#error "100042BC4: call analysis failed (funcsize=7)"

uint64_t *sub_100042BD0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100042C34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100042C7C@<X0>(unint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10005ABA0(a1, a2, v3, a3);
}

uint64_t sub_100042CCC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100042D0C()
{
  return v0;
}

uint64_t sub_100042D44()
{
  return v0;
}

void sub_100042D5C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100042D7C(uint64_t a1)
{
  *(void *)(v2 - 104) = a1;
  *(void *)(v2 - 128) = *(void *)(v1 + 16);
  return type metadata accessor for DispatchQoS();
}

uint64_t sub_100042D9C()
{
  return sub_100015C5C(v0, v1);
}

uint64_t sub_100042DB4()
{
  return v0;
}

uint64_t sub_100042DC8()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_100042DE8()
{
  return v0;
}

uint64_t sub_100042DFC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_100042E14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100042E34(uint64_t a1, char a2)
{
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = a1;
  *(unsigned char *)(v2 + 40) = a2;
  return v2;
}

void sub_100042E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(NSObject **)(v3 + 32);
  if (*(unsigned char *)(v3 + 40) == 1)
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a2;
    *(void *)(v7 + 24) = a3;
    uint64_t v14 = sub_100043584;
    uint64_t v15 = v7;
    uint64_t v10 = _NSConcreteStackBlock;
    uint64_t v11 = 1107296256;
    uint64_t v12 = sub_10000CA98;
    id v13 = &unk_10008C138;
    uint64_t v8 = _Block_copy(&v10);
    swift_retain();
    swift_release();
    nw_listener_set_new_connection_group_handler(v6, v8);
  }
  else
  {
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a2;
    *(void *)(v9 + 24) = a3;
    uint64_t v14 = sub_100043558;
    uint64_t v15 = v9;
    uint64_t v10 = _NSConcreteStackBlock;
    uint64_t v11 = 1107296256;
    uint64_t v12 = sub_10000CA98;
    id v13 = &unk_10008C0E8;
    uint64_t v8 = _Block_copy(&v10);
    swift_retain();
    swift_release();
    nw_listener_set_new_connection_handler(v6, v8);
  }
  _Block_release(v8);
}

void sub_100042FD0(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(NSObject **)(v4 + 32);
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = v4;
  v12[4] = sub_100043514;
  v12[5] = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10004339C;
  void v12[3] = &unk_10008C098;
  uint64_t v11 = _Block_copy(v12);
  swift_retain();
  swift_retain();
  swift_release();
  nw_listener_set_state_changed_handler(v8, v11);
  _Block_release(v11);
  nw_listener_set_queue(v8, a1);
  nw_listener_start(v8);
}

NSObject *sub_100043100(int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    switch(a1)
    {
      case 4:
        static os_log_type_t.default.getter();
        sub_1000153C0(&qword_100095570);
        uint64_t v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_100075C50;
        swift_unknownObjectRetain();
        sub_1000153C0((uint64_t *)&unk_1000963F0);
        uint64_t v14 = String.init<A>(describing:)();
        uint64_t v16 = v15;
        *(void *)(v13 + 56) = &type metadata for String;
        *(void *)(v13 + 64) = sub_100016B8C();
        *(void *)(v13 + 32) = v14;
        *(void *)(v13 + 40) = v16;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v12 = 1;
        break;
      case 3:
        static os_log_type_t.error.getter();
        sub_1000153C0(&qword_100095570);
        uint64_t v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = xmmword_100075C50;
        swift_unknownObjectRetain();
        sub_1000153C0((uint64_t *)&unk_100096460);
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v20 = v19;
        *(void *)(v17 + 56) = &type metadata for String;
        *(void *)(v17 + 64) = sub_100016B8C();
        *(void *)(v17 + 32) = v18;
        *(void *)(v17 + 40) = v20;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        nw_listener_cancel(*(nw_listener_t *)(a6 + 32));
        return swift_unknownObjectRelease();
      case 2:
        uint16_t port = nw_listener_get_port(result);
        static os_log_type_t.default.getter();
        sub_1000153C0(&qword_100095570);
        uint64_t v11 = swift_allocObject();
        *(_OWORD *)(v11 + 16) = xmmword_100075C50;
        *(void *)(v11 + 56) = &type metadata for UInt16;
        *(void *)(v11 + 64) = &protocol witness table for UInt16;
        *(_WORD *)(v11 + 32) = port;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v12 = 0;
        break;
      default:
        return swift_unknownObjectRelease();
    }
    a4(v12);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10004339C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10004340C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_10004343C()
{
  sub_10004340C();

  return _swift_deallocClassInstance(v0, 41, 7);
}

uint64_t type metadata accessor for NWObjcListener()
{
  return self;
}

uint64_t sub_100043494()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000434CC()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

NSObject *sub_100043514(int a1, uint64_t a2)
{
  return sub_100043100(a1, a2, *(void *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100043520()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100043558(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 16))(a1, 0);
}

uint64_t sub_100043584(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(a1, 1);
}

nw_path_t sub_1000435C4()
{
  nw_path_t result = nw_connection_copy_current_path(*(nw_connection_t *)(v0 + 32));
  if (result)
  {
    if (nw_path_copy_interface())
    {
      swift_unknownObjectRetain();
      int subtype = nw_interface_get_subtype();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      return (nw_path_t)(subtype == 1002);
    }
    else
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10004363C()
{
  type metadata accessor for AtomicCounter();
  swift_allocObject();
  uint64_t result = AtomicCounter.init()();
  qword_100096470 = result;
  return result;
}

double sub_10004367C@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_10004368C()
{
}

void sub_1000436E8()
{
  uint64_t v4 = sub_10001385C();
  OS_nw_connection.send(content:completion:)(v3, v2, v1, v0, v4);
}

uint64_t sub_100043734()
{
  return *(unsigned __int8 *)(*(void *)v0 + 41);
}

uint64_t sub_100043740()
{
  return JSONDataBasedControlChannelTransport.send(message:invokingCompletionHandlerOn:completion:)();
}

void sub_1000437BC()
{
}

double sub_1000437CC@<D0>(uint64_t a1@<X8>)
{
  return sub_10004367C(a1);
}

unint64_t sub_1000437E4()
{
  return (unint64_t)sub_1000435C4() & 1;
}

uint64_t sub_10004380C(uint64_t a1, uint64_t a2)
{
  return sub_100011CAC((unint64_t *)&unk_100096590, a2, (void (*)(uint64_t))type metadata accessor for NWObjcConnectionControlChannelTransport);
}

uint64_t sub_100043854()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004388C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000438CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)v3;
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = a1;
  swift_retain();
  dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)();
  _StringGuts.grow(_:)(65);
  v7._object = (void *)0x800000010007C850;
  v7._countAndFlagsBits = 0xD00000000000003FLL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v9 = os_transaction_create();
  uint64_t result = swift_release();
  if (v9)
  {
    swift_release();
    v4[4] = v9;
    v4[5] = a2;
    void v4[6] = a3;
    return (uint64_t)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100043A0C()
{
  *(unsigned char *)(v0 + 16) = 1;
  (*(void (**)(void))(v0 + 40))();
  return dispatch thunk of XPCConnection.cancel()();
}

uint64_t sub_100043A48()
{
  uint64_t v0 = type metadata accessor for DeviceServiceEvent();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  os_log_type_t v5 = (char *)&v7 - v4;
  sub_10002C890();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v5, enum case for DeviceServiceEvent.pairableHostFound(_:), v0);
  sub_1000440F8(&qword_1000959F0, 255, (void (*)(uint64_t))&type metadata accessor for DeviceServiceEvent);
  sub_1000440F8(&qword_1000959F8, 255, (void (*)(uint64_t))&type metadata accessor for DeviceServiceEvent);
  XPCConnection.send<A>(value:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v5, v0);
}

uint64_t sub_100043E0C()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_100043E3C()
{
  sub_100043E0C();

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for PairableHostsBrowseRegistration()
{
  return self;
}

Swift::Int sub_100043E94()
{
  Hasher.init(_seed:)();
  type metadata accessor for PairableHostsBrowseRegistration();
  sub_1000440F8(&qword_1000966A8, v0, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
  HashableByObjectIdentity.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_100043F18()
{
  return sub_100043E94();
}

uint64_t sub_100043F3C()
{
  return HashableByObjectIdentity.hash(into:)();
}

Swift::Int sub_100043F94()
{
  return Hasher._finalize()();
}

uint64_t sub_100043FFC()
{
  swift_getWitnessTable();

  return static HashableByObjectIdentity.== infix(_:_:)();
}

uint64_t sub_100044068(uint64_t a1, uint64_t a2)
{
  return sub_1000440F8(&qword_100096698, a2, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
}

uint64_t sub_1000440B0(uint64_t a1, uint64_t a2)
{
  return sub_1000440F8(&qword_1000966A0, a2, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
}

uint64_t sub_1000440F8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100044140()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100044170(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  if (*(void *)(*(void *)(v1 + 224) + 16))
  {
    if (!v2) {
      return sub_1000462D8();
    }
  }
  else if (v2)
  {
    return sub_1000464F8();
  }
  return result;
}

uint64_t sub_100044194(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 224);
  *(void *)(v1 + 224) = a1;
  sub_100044170(v2);

  return swift_bridgeObjectRelease();
}

void sub_1000441D4()
{
  sub_1000159A0();
  uint64_t v1 = v0;
  uint64_t v2 = *(NSObject **)(v0 + 80);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  uint64_t v3 = sub_100010E68();
  swift_weakInit();
  uint64_t v80 = (uint64_t (*)())sub_100047E74;
  uint64_t v81 = v3;
  uint64_t v76 = _NSConcreteStackBlock;
  uint64_t v77 = 1107296256;
  uint64_t v78 = (uint64_t (*)(uint64_t))sub_1000174C8;
  uint64_t v79 = &unk_10008C618;
  uint64_t v4 = _Block_copy(&v76);
  swift_release();
  xpc_activity_register("com.apple.dt.remotepairing.updatebonjour", XPC_ACTIVITY_CHECK_IN, v4);
  _Block_release(v4);
  uint64_t v80 = nullsub_1;
  uint64_t v81 = 0;
  uint64_t v76 = _NSConcreteStackBlock;
  uint64_t v77 = 1107296256;
  uint64_t v78 = (uint64_t (*)(uint64_t))sub_1000174C8;
  uint64_t v79 = &unk_10008C640;
  os_log_type_t v5 = _Block_copy(&v76);
  xpc_set_event_stream_handler("com.apple.bonjour.registration", v2, v5);
  _Block_release(v5);
  uint64_t v80 = sub_100044C70;
  uint64_t v81 = 0;
  uint64_t v76 = _NSConcreteStackBlock;
  uint64_t v77 = 1107296256;
  uint64_t v78 = (uint64_t (*)(uint64_t))sub_1000174C8;
  uint64_t v79 = &unk_10008C668;
  uint64_t v6 = _Block_copy(&v76);
  xpc_set_event_stream_handler("com.apple.bluetooth.discovery", v2, v6);
  _Block_release(v6);
  uint64_t v7 = (int **)sub_1000161BC();
  size_t v75 = 0;
  int v8 = launch_activate_socket("TCPControlChannelSocket", v7, &v75);
  if (v8)
  {
    int v10 = v8;
    os_log_type_t v11 = static os_log_type_t.error.getter();
    uint64_t v12 = qword_1000986F0;
    os_log_type_t v13 = v11;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v11))
    {
      uint64_t v14 = (uint8_t *)sub_1000161BC();
      *(_DWORD *)uint64_t v14 = 67109120;
      LODWORD(v76) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "NetworkControlChannelService: failed to fetch sockets from launchd. Received result %d", v14, 8u);
      sub_1000120B0();
    }
  }
  else
  {
    int v54 = v7;
    int v55 = *v7;
    if (v75)
    {
      uint64_t v60 = v1 + 56;
      uint64_t v73 = &v78;
      size_t v15 = 4 * v75;
      *(void *)&long long v9 = 67109120;
      long long v56 = v9;
      uint64_t v16 = v55;
      uint64_t v59 = v1;
      int v58 = v2;
      int v57 = (void *)(v1 + 64);
      do
      {
        int v17 = *v16;
        if (socket_deny_cellular(*v16))
        {
          uint64_t v71 = v16;
          size_t v72 = v15;
          sub_100017F4C(0, (unint64_t *)&qword_100096200);
          uint64_t v18 = static OS_dispatch_source.makeReadSource(fileDescriptor:queue:)();
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v20 = sub_100010E68();
          swift_weakInit();
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = v20;
          *(void *)(v21 + 24) = v18;
          int v70 = v17;
          *(_DWORD *)(v21 + 32) = v17;
          uint64_t v80 = sub_10000CFC4;
          uint64_t v81 = v21;
          uint64_t v76 = _NSConcreteStackBlock;
          uint64_t v77 = 1107296256;
          uint64_t v78 = sub_10000CF80;
          uint64_t v79 = &unk_10008C6B8;
          uint64_t v22 = _Block_copy(&v76);
          uint64_t v62 = type metadata accessor for DispatchQoS();
          uint64_t v63 = &v54;
          sub_100013814();
          uint64_t v74 = v23;
          uint64_t v68 = *(void *)(v24 + 64);
          __chkstk_darwin(v25);
          unint64_t v69 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
          swift_retain();
          swift_unknownObjectRetain();
          sub_10001CDC8();
          uint64_t v27 = type metadata accessor for DispatchWorkItemFlags();
          uint64_t v61 = &v54;
          uint64_t v66 = v27;
          uint64_t v28 = *(void *)(v27 - 8);
          uint64_t v29 = *(void *)(v28 + 64);
          __chkstk_darwin(v27);
          unint64_t v67 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v30 = (char *)&v54 - v67;
          sub_10001CDE0(ObjectType);
          OS_dispatch_source.setEventHandler(qos:flags:handler:)();
          _Block_release(v22);
          unint64_t v65 = *(void (**)(char *, uint64_t))(v28 + 8);
          v65(v30, v27);
          uint64_t v31 = *(void *)(v74 + 8);
          v74 += 8;
          uint64_t v64 = v31;
          sub_100010EE4();
          v33(v32);
          swift_release();
          swift_release();
          uint64_t v34 = sub_100010E68();
          *(void *)(v34 + 16) = v18;
          uint64_t v80 = sub_100047EEC;
          uint64_t v81 = v34;
          uint64_t v76 = _NSConcreteStackBlock;
          uint64_t v77 = 1107296256;
          uint64_t v78 = sub_10000CF80;
          uint64_t v79 = &unk_10008C708;
          uint64_t v35 = _Block_copy(&v76);
          __chkstk_darwin(v35);
          swift_unknownObjectRetain();
          uint64_t v36 = sub_100021B68();
          __chkstk_darwin(v36);
          int v37 = (char *)&v54 - v67;
          sub_10001CDE0(ObjectType);
          OS_dispatch_source.setCancelHandler(qos:flags:handler:)();
          _Block_release(v35);
          v65(v37, v66);
          sub_100010EE4();
          v39(v38);
          uint64_t v1 = v59;
          swift_release();
          OS_dispatch_source.resume()();
          swift_beginAccess();
          uint64_t v40 = *(void *)(v1 + 56);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v1 + 56) = v40;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100053538();
            sub_10000D2CC(v49);
          }
          unint64_t v42 = *(void *)(v40 + 16);
          uint64_t v43 = v57;
          uint64_t v16 = v71;
          size_t v15 = v72;
          int v44 = v70;
          if (v42 >= *(void *)(v40 + 24) >> 1)
          {
            sub_100053538();
            sub_10000D2CC(v50);
          }
          *(void *)(v40 + 16) = v42 + 1;
          *(_DWORD *)(v40 + 4 * v42 + 32) = v44;
          swift_endAccess();
          sub_100047F98();
          swift_unknownObjectRetain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_endAccess();
          swift_unknownObjectRelease();
        }
        else
        {
          os_log_type_t v45 = static os_log_type_t.error.getter();
          uint64_t v46 = qword_1000986F0;
          os_log_type_t v47 = v45;
          if (os_log_type_enabled((os_log_t)qword_1000986F0, v45))
          {
            uint64_t v48 = sub_1000161BC();
            *(_DWORD *)uint64_t v48 = v56;
            *(_DWORD *)(v48 + 4) = v17;
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "NetworkControlChannelService: Failed to set restrictions on socket %d", (uint8_t *)v48, 8u);
            sub_1000120B0();
          }
        }
        ++v16;
        v15 -= 4;
      }
      while (v15);
    }
    sub_100013A48();
    uint64_t v51 = *(void *)(v1 + 56);
    if (*(void *)(v51 + 16))
    {
      int v52 = sub_100047254(*(_DWORD *)(v51 + 32));
      *(_WORD *)(v1 + 72) = v52;
      *(unsigned char *)(v1 + 74) = BYTE2(v52) & 1;
    }
    uint64_t v53 = sub_100010E68();
    swift_weakInit();
    swift_retain();
    sub_1000258B8((uint64_t)sub_100047E7C, v53);
    swift_release_n();
    sub_100016C68((void *)(v1 + 88), *(void *)(v1 + 112));
    swift_retain();
    sub_1000134A8();
    sub_100055034();
    sub_1000120B0();
  }
  sub_1000120B0();
  sub_100012100();
}

void sub_100044B0C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v1 = *(id *)(Strong + 80);
    uint64_t v2 = swift_release();
    __chkstk_darwin(v2);
    sub_1000153C0(&qword_1000961F8);
    OS_dispatch_queue.sync<A>(execute:)();
  }
}

uint64_t sub_100044BEC@<X0>(_xpc_activity_s *a1@<X1>, BOOL *a2@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v5 = result;
  if (result)
  {
    sub_1000452D8(a1);
    uint64_t result = swift_release();
  }
  *a2 = v5 == 0;
  return result;
}

uint64_t sub_100044C70()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_100044CB4()
{
  os_log_type_t v0 = static os_log_type_t.error.getter();
  id v1 = qword_1000986F0;
  os_log_type_t v2 = v0;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000986F0, v0);
  if (result)
  {
    swift_unknownObjectRetain_n();
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_unknownObjectRetain();
    sub_1000153C0(&qword_1000969F0);
    uint64_t v5 = String.init<A>(describing:)();
    sub_100010478(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "NetworkControlChannelService: listener source %s cancelled", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_100044E1C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100017128();
    sub_100045398();
    return swift_release();
  }
  return result;
}

void sub_100044E78()
{
}

void sub_100044EA0()
{
  sub_1000139EC();
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  sub_100013814();
  int64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100015778();
  if (*(unsigned char *)(v0 + 216))
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
LABEL_38:
    sub_100013918();
    return;
  }
  *(unsigned char *)(v0 + 216) = 1;
  sub_100013A48();
  unint64_t v7 = *(void *)(v0 + 64);
  if (v7 >> 62) {
    goto LABEL_40;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_11;
  }
LABEL_5:
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_unknownObjectRetain();
      }
      ++v9;
      swift_getObjectType();
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease();
    }
    while (v8 != v9);
    while (1)
    {
LABEL_11:
      swift_bridgeObjectRelease();
      sub_100013A48();
      uint64_t v2 = *(void *)(v2 + 48);
      if ((v2 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        type metadata accessor for ControlChannelConnection();
        sub_100011F58(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
        Set.Iterator.init(_cocoa:)();
        uint64_t v2 = v26;
        uint64_t v23 = v27;
        uint64_t v10 = v28;
        int64_t v11 = v29;
        unint64_t v12 = v30;
      }
      else
      {
        uint64_t v23 = v2 + 56;
        uint64_t v10 = ~(-1 << *(unsigned char *)(v2 + 32));
        sub_100010E80();
        unint64_t v12 = v13 & v14;
        swift_bridgeObjectRetain();
        int64_t v11 = 0;
      }
      int64_t v22 = (unint64_t)(v10 + 64) >> 6;
      unsigned int v24 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
      size_t v15 = (void (**)(uint64_t, void, uint64_t))(v5 + 104);
      unint64_t v7 = v5 + 8;
      if (v2 < 0) {
        break;
      }
LABEL_15:
      if (v12)
      {
        uint64_t v16 = (v12 - 1) & v12;
        unint64_t v17 = __clz(__rbit64(v12)) | (v11 << 6);
        int64_t v5 = v11;
        goto LABEL_34;
      }
      int64_t v18 = v11 + 1;
      if (!__OFADD__(v11, 1))
      {
        if (v18 >= v22) {
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v18);
        int64_t v5 = v11 + 1;
        if (!v19)
        {
          int64_t v5 = v11 + 2;
          if (v11 + 2 >= v22) {
            goto LABEL_37;
          }
          unint64_t v19 = *(void *)(v23 + 8 * v5);
          if (!v19)
          {
            int64_t v5 = v11 + 3;
            if (v11 + 3 >= v22) {
              goto LABEL_37;
            }
            unint64_t v19 = *(void *)(v23 + 8 * v5);
            if (!v19)
            {
              int64_t v5 = v11 + 4;
              if (v11 + 4 >= v22) {
                goto LABEL_37;
              }
              unint64_t v19 = *(void *)(v23 + 8 * v5);
              if (!v19)
              {
                int64_t v20 = v11 + 5;
                while (v20 < v22)
                {
                  unint64_t v19 = *(void *)(v23 + 8 * v20++);
                  if (v19)
                  {
                    int64_t v5 = v20 - 1;
                    goto LABEL_33;
                  }
                }
                goto LABEL_37;
              }
            }
          }
        }
LABEL_33:
        uint64_t v16 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v5 << 6);
LABEL_34:
        uint64_t v21 = *(void *)(*(void *)(v2 + 48) + 8 * v17);
        swift_retain();
        if (v21) {
          goto LABEL_35;
        }
        goto LABEL_37;
      }
      __break(1u);
LABEL_40:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      if (v8) {
        goto LABEL_5;
      }
    }
    while (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for ControlChannelConnection();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      int64_t v5 = v11;
      uint64_t v16 = v12;
      if (!v25) {
        break;
      }
LABEL_35:
      (*v15)(v1, v24, v3);
      dispatch thunk of ControlChannelConnection.invalidate(for:)();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))v7)(v1, v3);
      int64_t v11 = v5;
      unint64_t v12 = v16;
      if ((v2 & 0x8000000000000000) == 0) {
        goto LABEL_15;
      }
    }
LABEL_37:
    sub_100019C54();
    goto LABEL_38;
  }
  __break(1u);
}

uint64_t sub_1000452D8(_xpc_activity_s *a1)
{
  OS_dispatch_queue.assertOnQueueHierarchy()();
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  static os_log_type_t.info.getter();
  if (!state) {
    return os_log(_:dso:log:_:_:)();
  }
  os_log(_:dso:log:_:_:)();

  return sub_100017128();
}

void sub_100045398()
{
  sub_1000159A0();
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for XPCDictionary();
  sub_100013814();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100013900();
  unint64_t v7 = (NSString *)String._bridgeToObjectiveC()();
  Class v8 = NSClassFromString(v7);

  if (!v8)
  {
    static os_log_type_t.default.getter();
    goto LABEL_8;
  }
  if (remotePairingIsEnabled())
  {
    if ((static Defaults.deviceAllowBluetoothDeviceDiscovery.getter() & 1) != 0 && sub_100012D20())
    {
      if (!*(void *)(v2 + 184))
      {
        sub_1000153C0(&qword_100096978);
        uint64_t v11 = swift_allocObject();
        *(_OWORD *)(v11 + 16) = xmmword_100075C80;
        *(void *)(v11 + 56) = &type metadata for String;
        strcpy((char *)(v11 + 32), "discoveryFlags");
        *(unsigned char *)(v11 + 47) = -18;
        uint64_t v12 = sub_1000153C0(&qword_100096980);
        *(void *)(v11 + 64) = &off_10008AB10;
        *(void *)(v11 + 88) = v12;
        *(void *)(v11 + 96) = 0x526E616353656C62;
        *(void *)(v11 + 104) = 0xEB00000000657461;
        *(void *)(v11 + 152) = &type metadata for String;
        *(void *)(v11 + 120) = &type metadata for String;
        *(void *)(v11 + 128) = 0x756F72676B636142;
        *(void *)(v11 + 136) = 0xEA0000000000646ELL;
        sub_100017F4C(0, &qword_100096988);
        NSDictionary.init(dictionaryLiteral:)();
        uint64_t v13 = XPCDictionary.init(nsDictionary:)();
        __chkstk_darwin(v13);
        XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)();
        id v14 = [objc_allocWithZone((Class)CBDiscovery) init];
        [v14 setDiscoveryFlags:33685504];
        [v14 setDispatchQueue:*(void *)(v2 + 80)];
        [v14 setBleScanRate:20];
        [v14 setBleScanRateScreenOff:20];
        uint64_t v23 = sub_100047C40;
        uint64_t v24 = v2;
        unint64_t v19 = _NSConcreteStackBlock;
        uint64_t v20 = 1107296256;
        uint64_t v21 = sub_100045CD4;
        int64_t v22 = &unk_10008C500;
        size_t v15 = _Block_copy(&v19);
        swift_retain();
        swift_release();
        [v14 setDeviceFoundHandler:v15];
        _Block_release(v15);
        uint64_t v23 = sub_100047C48;
        uint64_t v24 = v2;
        unint64_t v19 = _NSConcreteStackBlock;
        uint64_t v20 = 1107296256;
        uint64_t v21 = sub_100045CD4;
        int64_t v22 = &unk_10008C528;
        uint64_t v16 = _Block_copy(&v19);
        swift_retain();
        swift_release();
        [v14 setDeviceLostHandler:v16];
        _Block_release(v16);
        uint64_t v23 = sub_100046094;
        uint64_t v24 = 0;
        unint64_t v19 = _NSConcreteStackBlock;
        uint64_t v20 = 1107296256;
        uint64_t v21 = sub_10004626C;
        int64_t v22 = &unk_10008C550;
        unint64_t v17 = _Block_copy(&v19);
        [v14 activateWithCompletion:v17];
        _Block_release(v17);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
        int64_t v18 = *(void **)(v2 + 184);
        *(void *)(v2 + 184) = v14;

        goto LABEL_9;
      }
      static os_log_type_t.info.getter();
LABEL_8:
      os_log(_:dso:log:_:_:)();
LABEL_9:
      sub_100012100();
      return;
    }
    static os_log_type_t.error.getter();
  }
  else
  {
    static os_log_type_t.default.getter();
  }
  os_log(_:dso:log:_:_:)();
  xpc_set_event();
  [*(id *)(v2 + 184) invalidate];
  *(void *)(v2 + 184) = 0;
  sub_100012100();
}

uint64_t sub_100045914()
{
  return swift_release();
}

uint64_t sub_100045970(void *a1, uint64_t a2)
{
  uint64_t result = sub_100040958(a1, (SEL *)&selRef_identifier);
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    int v8 = static os_log_type_t.default.getter();
    sub_100017F4C(0, (unint64_t *)&qword_100096990);
    id v9 = a1;
    uint64_t v10 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v10, (os_log_type_t)v8))
    {
      int v31 = v8;
      uint64_t v32 = v6;
      uint64_t v11 = 0x6E776F6E6B6E553CLL;
      uint64_t v12 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v34[0] = v30;
      *(_DWORD *)uint64_t v12 = 136315394;
      uint64_t v13 = sub_100040958(v9, (SEL *)&selRef_name);
      if (!v14) {
        uint64_t v13 = 0x6E776F6E6B6E553CLL;
      }
      uint64_t v15 = 0xE90000000000003ELL;
      if (v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = 0xE90000000000003ELL;
      }
      uint64_t v33 = sub_100010478(v13, v16, v34);
      uint64_t v29 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v17 = sub_100047D8C(v9);
      if (v18 >> 60 != 15)
      {
        uint64_t v19 = v17;
        unint64_t v20 = v18;
        v27[0] = type metadata accessor for Data.HexStringEncodingOptions();
        v27[1] = v27;
        uint64_t v21 = *(void *)(v27[0] - 8);
        __chkstk_darwin(v27[0]);
        uint64_t v28 = a2;
        uint64_t v23 = (char *)v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
        static Data.HexStringEncodingOptions.bluetoothAddress.getter();
        uint64_t v11 = Data.hexEncodedString(options:)();
        uint64_t v15 = v24;
        sub_100013BC4(v19, v20);
        uint64_t v25 = v23;
        a2 = v28;
        (*(void (**)(char *, void))(v21 + 8))(v25, v27[0]);
      }
      uint64_t v33 = sub_100010478(v11, v15, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v31, "Discovered NearbyAction trigger from device (name=%s, address=%s)", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v6 = v32;
    }
    else
    {
    }
    v34[3] = sub_100017F4C(0, &qword_1000969A0);
    uint64_t v33 = *(void *)(a2 + 224);
    v34[0] = (uint64_t)v9;
    id v26 = v9;
    swift_bridgeObjectRetain();
    sub_100016260((uint64_t)v34, v6, v7);
    return sub_100044194(v33);
  }
  return result;
}

void sub_100045CD4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100045D3C(void *a1, uint64_t a2)
{
  uint64_t result = sub_100040958(a1, (SEL *)&selRef_identifier);
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    int v8 = static os_log_type_t.default.getter();
    sub_100017F4C(0, (unint64_t *)&qword_100096990);
    id v9 = a1;
    uint64_t v10 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v10, (os_log_type_t)v8))
    {
      int v30 = v8;
      uint64_t v31 = v6;
      uint64_t v11 = 0x6E776F6E6B6E553CLL;
      uint64_t v12 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      v33[0] = v29;
      *(_DWORD *)uint64_t v12 = 136315394;
      uint64_t v13 = sub_100040958(v9, (SEL *)&selRef_name);
      if (!v14) {
        uint64_t v13 = 0x6E776F6E6B6E553CLL;
      }
      uint64_t v15 = 0xE90000000000003ELL;
      if (v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = 0xE90000000000003ELL;
      }
      uint64_t v32 = sub_100010478(v13, v16, v33);
      uint64_t v28 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v17 = sub_100047D8C(v9);
      if (v18 >> 60 != 15)
      {
        uint64_t v19 = v17;
        unint64_t v20 = v18;
        v26[0] = type metadata accessor for Data.HexStringEncodingOptions();
        v26[1] = v26;
        uint64_t v21 = *(void *)(v26[0] - 8);
        __chkstk_darwin(v26[0]);
        uint64_t v27 = a2;
        uint64_t v23 = (char *)v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
        static Data.HexStringEncodingOptions.bluetoothAddress.getter();
        uint64_t v11 = Data.hexEncodedString(options:)();
        uint64_t v15 = v24;
        sub_100013BC4(v19, v20);
        uint64_t v25 = v23;
        a2 = v27;
        (*(void (**)(char *, void))(v21 + 8))(v25, v26[0]);
      }
      uint64_t v32 = sub_100010478(v11, v15, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v30, "Lost NearbyAction trigger from device (name=%s, address=%s)", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v6 = v31;
    }
    else
    {
    }
    uint64_t v32 = *(void *)(a2 + 224);
    swift_bridgeObjectRetain();
    sub_100065CBC(v33, v6, v7);
    sub_100047D34((uint64_t)v33, &qword_100095588);
    sub_100044194(v32);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100046094(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    os_log_type_t v1 = static os_log_type_t.error.getter();
    uint64_t v2 = qword_1000986F0;
    os_log_type_t v3 = v1;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v1))
    {
      swift_errorRetain();
      swift_errorRetain();
      id v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)id v4 = 136315138;
      swift_getErrorValue();
      uint64_t v5 = Error.localizedDescription.getter();
      sub_100010478(v5, v6, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Bluetooth discovery activation failed: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      return swift_errorRelease();
    }
    else
    {
      return swift_errorRelease();
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    return os_log(_:dso:log:_:_:)();
  }
}

void sub_10004626C(uint64_t a1, void *a2)
{
  os_log_type_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1000462D8()
{
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v1 = *(void *)(v0 + 192);
  if (!v1)
  {
    type metadata accessor for WiFiKeepAlive();
    swift_allocObject();
    sub_1000134A8();
    uint64_t v1 = WiFiKeepAlive.init(reason:)();
  }
  *(void *)(v0 + 192) = v1;
  swift_retain();
  swift_release();
  uint64_t v2 = (__CFString *)String._bridgeToObjectiveC()();
  os_log_type_t v3 = (__CFString *)String._bridgeToObjectiveC()();
  sub_1000134A8();
  id v4 = (__CFString *)String._bridgeToObjectiveC()();
  sub_100047F98();
  IOReturn v5 = IOPMAssertionCreateWithDescription(v2, v3, v4, 0, 0, 0.0, 0, (IOPMAssertionID *)(v0 + 200));
  swift_endAccess();

  if (v5)
  {
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (sub_1000157E8(v6))
    {
      uint64_t v7 = (float *)sub_1000161BC();
      sub_100015D04(v7, 1.5047e-36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100011308((void *)&_mh_execute_header, v8, v9, "Failed to create power assertion for NearbyAction: %d");
      sub_1000120B0();
    }
  }
  uint64_t v10 = sub_1000153C0((uint64_t *)&unk_1000976C0);
  __chkstk_darwin(v10 - 8);
  sub_100010EB0();
  UUID.init()();
  uint64_t v11 = type metadata accessor for UUID();
  sub_100015C34((uint64_t)v3, 0, 1, v11);
  sub_10004668C();
  return sub_100047D34((uint64_t)v3, (uint64_t *)&unk_1000976C0);
}

uint64_t sub_1000464F8()
{
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  *(void *)(v0 + 192) = 0;
  swift_release();
  sub_1000465CC();
  uint64_t v2 = sub_1000153C0((uint64_t *)&unk_1000976C0);
  __chkstk_darwin(v2 - 8);
  sub_100015778();
  uint64_t v3 = type metadata accessor for UUID();
  sub_100015C34(v1, 1, 1, v3);
  sub_10004668C();
  return sub_100047D34(v1, (uint64_t *)&unk_1000976C0);
}

uint64_t sub_1000465CC()
{
  swift_beginAccess();
  uint64_t result = *(unsigned int *)(v0 + 200);
  if (result)
  {
    uint64_t result = IOPMAssertionRelease(result);
    if (result)
    {
      os_log_type_t v2 = static os_log_type_t.error.getter();
      uint64_t result = sub_100013A88(v2);
      if (result)
      {
        uint64_t v3 = (float *)sub_1000161BC();
        sub_100015D04(v3, 1.5047e-36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100015650((void *)&_mh_execute_header, v4, v5, "Failed to release power assertion for NearbyAction: %d");
        uint64_t result = sub_1000120B0();
      }
    }
    *(_DWORD *)(v0 + 200) = 0;
  }
  return result;
}

void sub_10004668C()
{
  sub_1000159A0();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  type metadata accessor for BonjourService();
  sub_100013814();
  uint64_t v47 = v7;
  uint64_t v48 = v6;
  __chkstk_darwin(v6);
  sub_100012078();
  uint64_t v46 = v9 - v8;
  uint64_t v10 = type metadata accessor for BonjourAdvertFlags();
  sub_100013814();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_1000120C8();
  uint64_t v14 = *(NSObject **)(v0 + 208);
  if (v14)
  {
    nw_listener_cancel(v14);
    *(void *)(v0 + 208) = 0;
    swift_unknownObjectRelease();
  }
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v49 = v43;
  sub_100013814();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_100012078();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = sub_1000153C0((uint64_t *)&unk_1000976C0);
  __chkstk_darwin(v22 - 8);
  sub_100013900();
  sub_100027C68(v5, v1);
  if (sub_100015C0C(v1, 1, v15) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v21, v1, v15);
    static BonjourAdvertFlags.onDemand.getter();
    sub_100012EDC();
    uint64_t v24 = v23;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v10);
    uint64_t v25 = v21;
    if (!v24)
    {
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v15);
      goto LABEL_16;
    }
    uint64_t v44 = v17;
    uint64_t v45 = v15;
    id v26 = sub_10000F680();
    nw_parameters_set_no_wake_from_sleep();
    id v27 = [self currentState];
    if (v27)
    {
      uint64_t v28 = v27;
      unsigned int v29 = [v27 supportsDataTransfer];

      if (v29)
      {
        static os_log_type_t.debug.getter();
        os_log(_:dso:log:_:_:)();
        nw_parameters_set_include_peer_to_peer(v26, 1);
      }
    }
    nw_listener_t v30 = nw_listener_create(v26);
    if (v30)
    {
      uint64_t v31 = v30;
      v43[1] = v26;
      uint64_t v32 = v24;
      UUID.uuidString.getter();
      v43[0] = v25;
      uint64_t v33 = v46;
      uint64_t v34 = v47;
      uint64_t v35 = v48;
      (*(void (**)(uint64_t, void, uint64_t))(v47 + 104))(v46, enum case for BonjourService.default(_:), v48);
      BonjourService.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      uint64_t v36 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v37 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      bonjour_service = nw_advertise_descriptor_create_bonjour_service((const char *)(v36 + 32), (const char *)(v37 + 32), 0);
      swift_release();
      swift_release();
      if (bonjour_service)
      {
        nw_advertise_descriptor_set_txt_record_object(bonjour_service, v32);
        nw_listener_set_advertise_descriptor(v31, bonjour_service);
        int v54 = sub_100046C28;
        uint64_t v55 = 0;
        uint64_t v50 = _NSConcreteStackBlock;
        uint64_t v51 = 1107296256;
        int v52 = sub_10004339C;
        uint64_t v53 = &unk_10008C2A8;
        uint64_t v39 = _Block_copy(&v50);
        nw_listener_set_state_changed_handler(v31, v39);
        _Block_release(v39);
        int v54 = sub_100047B68;
        uint64_t v55 = v3;
        uint64_t v50 = _NSConcreteStackBlock;
        uint64_t v51 = 1107296256;
        int v52 = sub_10000CA98;
        uint64_t v53 = &unk_10008C2D0;
        uint64_t v40 = _Block_copy(&v50);
        swift_retain();
        swift_release();
        nw_listener_set_new_connection_handler(v31, v40);
        _Block_release(v40);
        nw_listener_set_queue(v31, *(dispatch_queue_t *)(v3 + 80));
        nw_listener_start(v31);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        (*(void (**)(void, uint64_t))(v44 + 8))(v43[0], v45);
        *(void *)(v3 + 208) = v31;
        swift_unknownObjectRelease();
        goto LABEL_16;
      }
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      uint64_t v42 = v43[0];
    }
    else
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      uint64_t v42 = v21;
    }
    v41(v42, v45);
    goto LABEL_16;
  }
  sub_100047D34(v1, (uint64_t *)&unk_1000976C0);
LABEL_16:
  sub_100012100();
}

uint64_t sub_100046C28(int a1, void *a2)
{
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = qword_1000986F0;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000986F0, v4);
  if (result)
  {
    swift_unknownObjectRetain_n();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109378;
    LODWORD(v12) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 8) = 2080;
    if (a2)
    {
      id v8 = [a2 description:v12, v13];
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;
    }
    else
    {
      uint64_t v11 = 0xE600000000000000;
      uint64_t v9 = 0x29656E6F6E28;
    }
    sub_100010478(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v4, "Bluetooth discovery bonjour listener state changed: %u, error: %s", (uint8_t *)v7, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_100046DD4(NSObject *a1, uint64_t a2)
{
  swift_unknownObjectRetain();
  swift_retain();

  return sub_100046E60(1, a2, a1, a2);
}

void sub_100046E24(char a1, nw_connection_t connection)
{
  if (a1) {
    sub_1000109DC();
  }
  else {
    nw_connection_cancel(connection);
  }
}

uint64_t sub_100046E60(char a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  swift_unknownObjectRetain();
  swift_retain();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  swift_beginAccess();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100012750(v9);
  swift_bridgeObjectRelease();
  if (v10 > 39)
  {
    os_log_type_t v11 = static os_log_type_t.error.getter();
    uint64_t v12 = qword_1000986F0;
    os_log_type_t v13 = v11;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v11))
    {
      swift_retain();
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 134217984;
      uint64_t v15 = swift_bridgeObjectRetain();
      sub_100012750(v15);
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Rejecting incoming TCP connection as we already have %ld TCP peers", v14, 0xCu);
      swift_slowDealloc();
    }
  }
  else
  {
    if ((remotePairingIsEnabled() & 1) != 0 && (*(unsigned char *)(a2 + 216) & 1) == 0)
    {
      swift_retain();
      swift_retain();
      sub_100012754(a2, a1 & 1, a2, (uint64_t)sub_100047B9C, v8);
      goto LABEL_9;
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
  }
  nw_connection_cancel(a3);
LABEL_9:
  swift_unknownObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1000470B4()
{
  uint64_t v0 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v5 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      if (v5)
      {
        uint64_t v6 = (void *)v5;
        sub_10005FE98();
        if ((v7 & 1) == 0)
        {
          (*(void (**)(unsigned char *, void, uint64_t))(v1 + 104))(v3, enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:), v0);
          dispatch thunk of ControlChannelConnection.invalidate(for:)();

          swift_release();
          swift_release();
          return (*(uint64_t (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
        }
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100047254(int a1)
{
  uint64_t v2 = swift_slowAlloc();
  socklen_t v19 = 128;
  if (getsockname(a1, (sockaddr *)v2, &v19))
  {
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (!sub_100013A88(v3))
    {
LABEL_5:
      sub_1000120B0();
      unsigned int v7 = 0;
      int v8 = 1;
      return v7 | (v8 << 16);
    }
    os_log_type_t v4 = (float *)sub_1000161BC();
    sub_100015D04(v4, 1.5047e-36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100015650((void *)&_mh_execute_header, v5, v6, "Unable to resolve port for listening socket. getsockname returned %d");
LABEL_4:
    sub_1000120B0();
    goto LABEL_5;
  }
  int v9 = *(unsigned __int8 *)(v2 + 1);
  if (v9 != 30 && v9 != 2)
  {
    os_log_type_t v15 = static os_log_type_t.error.getter();
    uint64_t v16 = qword_1000986F0;
    if (!sub_100013A88(v15)) {
      goto LABEL_5;
    }
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 16777472;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)0x80u, "Unknown socket family %hhu", v18, 5u);
    goto LABEL_4;
  }
  unsigned int v7 = bswap32(*(unsigned __int16 *)(v2 + 2)) >> 16;
  os_log_type_t v11 = static os_log_type_t.default.getter();
  uint64_t v12 = qword_1000986F0;
  if (sub_100013A88(v11))
  {
    os_log_type_t v13 = (float *)swift_slowAlloc();
    sub_100015D04(v13, 9.4042e-38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)0x80u, "Resolved listening port for network control channel service: %hu", (uint8_t *)v13, 6u);
    sub_1000120B0();
  }
  sub_1000120B0();
  int v8 = 0;
  return v7 | (v8 << 16);
}

id *sub_100047474()
{
  sub_1000465CC();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_100010548((uint64_t)(v0 + 11));
  swift_release();
  swift_release();
  sub_100010548((uint64_t)(v0 + 18));

  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100047500()
{
  sub_100047474();

  return _swift_deallocClassInstance(v0, 232, 7);
}

uint64_t type metadata accessor for NetworkControlChannelService()
{
  return self;
}

uint64_t sub_100047558(NSObject *a1)
{
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(a1, v3))
  {
    swift_retain();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 8) = 2048;
    sub_100013A48();
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = sub_100012750(v5);
    swift_bridgeObjectRelease();
    uint64_t v29 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, a1, v3, "NetworkControlChannelService state: ble enabled = %{BOOL}d, connection count = %ld", (uint8_t *)v4, 0x12u);
    sub_1000120B0();
  }
  sub_100013A48();
  uint64_t v7 = *(void *)(v1 + 48);
  if ((v7 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ControlChannelConnection();
    sub_100011F58(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v7 = v29;
    uint64_t v27 = v30;
    uint64_t v9 = v31;
    int64_t v10 = v32;
    unint64_t v11 = v33;
  }
  else
  {
    uint64_t v27 = v7 + 56;
    uint64_t v9 = ~(-1 << *(unsigned char *)(v7 + 32));
    sub_100010E80();
    unint64_t v11 = v12 & v13;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v10 = 0;
  }
  int64_t v26 = (unint64_t)(v9 + 64) >> 6;
  if (v7 < 0) {
    goto LABEL_9;
  }
  while (1)
  {
    if (v11)
    {
      uint64_t v14 = (v11 - 1) & v11;
      unint64_t v15 = __clz(__rbit64(v11)) | (v10 << 6);
      int64_t v16 = v10;
      goto LABEL_26;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v18 >= v26) {
      return sub_100019C54();
    }
    unint64_t v19 = *(void *)(v27 + 8 * v18);
    int64_t v16 = v10 + 1;
    if (!v19)
    {
      int64_t v16 = v10 + 2;
      if (v10 + 2 >= v26) {
        return sub_100019C54();
      }
      unint64_t v19 = *(void *)(v27 + 8 * v16);
      if (!v19)
      {
        int64_t v16 = v10 + 3;
        if (v10 + 3 >= v26) {
          return sub_100019C54();
        }
        unint64_t v19 = *(void *)(v27 + 8 * v16);
        if (!v19)
        {
          int64_t v16 = v10 + 4;
          if (v10 + 4 >= v26) {
            return sub_100019C54();
          }
          unint64_t v19 = *(void *)(v27 + 8 * v16);
          if (!v19)
          {
            int64_t v20 = v10 + 5;
            while (v20 < v26)
            {
              unint64_t v19 = *(void *)(v27 + 8 * v20++);
              if (v19)
              {
                int64_t v16 = v20 - 1;
                goto LABEL_25;
              }
            }
            return sub_100019C54();
          }
        }
      }
    }
LABEL_25:
    uint64_t v14 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v16 << 6);
LABEL_26:
    uint64_t v21 = *(void *)(*(void *)(v7 + 48) + 8 * v15);
    swift_retain();
    if (!v21) {
      return sub_100019C54();
    }
    while (1)
    {
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(a1, v22))
      {
        swift_retain_n();
        uint64_t v23 = sub_100014750();
        uint64_t v28 = sub_100015720();
        *(_DWORD *)uint64_t v23 = 136446210;
        type metadata accessor for ControlChannelConnection();
        swift_retain();
        uint64_t v24 = String.init<A>(describing:)();
        *(void *)(v23 + 4) = sub_100010478(v24, v25, &v28);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, a1, v22, "NetworkControlChannelService control channel connection: %{public}s", (uint8_t *)v23, 0xCu);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      uint64_t result = swift_release();
      int64_t v10 = v16;
      unint64_t v11 = v14;
      if ((v7 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_9:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ControlChannelConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v17 = v28;
        swift_unknownObjectRelease();
        int64_t v16 = v10;
        uint64_t v14 = v11;
        if (v17) {
          continue;
        }
      }
      return sub_100019C54();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000479E4()
{
  return sub_100044140();
}

void sub_100047A08()
{
}

void sub_100047A2C()
{
}

uint64_t sub_100047A50(NSObject *a1)
{
  return sub_100047558(a1);
}

uint64_t sub_100047A74()
{
  return 0;
}

uint64_t sub_100047A7C(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

BOOL sub_100047A84(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_100047AB0(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_100047AC0(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t sub_100047AD0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100047B08()
{
  return sub_100015DF4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_100047B34()
{
  return sub_100015DF4((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_100047B60()
{
  return sub_1000470B4();
}

uint64_t sub_100047B68(NSObject *a1)
{
  return sub_100046DD4(a1, v1);
}

uint64_t sub_100047B70()
{
  return sub_100015DF4((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

void sub_100047B9C(char a1)
{
  sub_100046E24(a1, *(nw_connection_t *)(v1 + 16));
}

uint64_t sub_100047BA4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100047BE4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100047BF8()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_100047C24()
{
  return sub_100045914();
}

uint64_t sub_100047C40(void *a1)
{
  return sub_100045970(a1, v1);
}

uint64_t sub_100047C48(void *a1)
{
  return sub_100045D3C(a1, v1);
}

uint64_t sub_100047C50(uint64_t a1, uint64_t a2, void (*a3)(char *__return_ptr, uint64_t *, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  char v12 = BYTE3(a2);
  char v13 = BYTE4(a2);
  char v14 = BYTE5(a2);
  a3(&v8, &v9, (char *)&v9 + a5);
  if (!v5) {
    char v6 = v8;
  }
  return v6 & 1;
}

uint64_t sub_100047D34(uint64_t a1, uint64_t *a2)
{
  sub_1000153C0(a2);
  sub_100010EE4();
  v3();
  return a1;
}

uint64_t sub_100047D8C(void *a1)
{
  id v1 = [a1 btAddressData];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100047DF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100047E3C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100047E74()
{
}

uint64_t sub_100047E7C()
{
  return sub_100044E1C();
}

uint64_t sub_100047E84()
{
  return sub_10001741C((void (*)(void))&_swift_release, (void (*)(void))&_swift_unknownObjectRelease, 36);
}

uint64_t sub_100047EB4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100047EEC()
{
  return sub_100044CB4();
}

uint64_t sub_100047EF4@<X0>(BOOL *a1@<X8>)
{
  return sub_100044BEC(*(_xpc_activity_s **)(v1 + 24), a1);
}

void sub_100047F80()
{
  sub_100013538();
}

uint64_t sub_100047F98()
{
  return swift_beginAccess();
}

uint64_t sub_100047FB4()
{
  return static DeviceKeyValueStore.keyValueStoreContainingStandardKeys()();
}

uint64_t sub_100047FE0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100049AF8();
    return swift_release();
  }
  return result;
}

void sub_100048038()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
  uint64_t v4 = *(NSObject **)(v0 + 56);
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  v9[4] = sub_10004A458;
  v9[5] = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_10004ECAC;
  v9[3] = &unk_10008C780;
  char v6 = _Block_copy(v9);
  swift_release();
  uint64_t v7 = (const char *)(String.utf8CString.getter() + 32);
  char v8 = (int *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken);
  sub_1000134B8();
  notify_register_dispatch(v7, v8, v4, v6);
  swift_endAccess();
  swift_release();
  _Block_release(v6);
}

uint64_t sub_100048188()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000499D0();
    return swift_release();
  }
  return result;
}

void sub_1000481E0(int a1@<W0>, unint64_t a2@<X8>)
{
  unint64_t v107 = a2;
  type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for PeerDeviceInfo();
  sub_100013814();
  uint64_t v105 = v7;
  __chkstk_darwin(v8);
  sub_1000120E0();
  uint64_t v101 = v9;
  uint64_t v119 = type metadata accessor for AuxiliaryMetadataItem();
  sub_100013814();
  uint64_t v111 = v10;
  __chkstk_darwin(v11);
  sub_1000120E0();
  uint64_t v118 = v12;
  uint64_t v13 = sub_1000153C0(&qword_100096BB0);
  uint64_t v14 = sub_100014774(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)v88 - v18;
  uint64_t v20 = sub_1000153C0(&qword_100096BA8);
  uint64_t v21 = sub_100014774(v20);
  __chkstk_darwin(v21);
  sub_100010F00();
  sub_100015A5C();
  __chkstk_darwin(v22);
  sub_10004A460();
  sub_100015A5C();
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v88 - v24;
  uint64_t v106 = v2;
  int v102 = a1;
  if (a1) {
    uint64_t v26 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
  }
  else {
    uint64_t v26 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys;
  }
  uint64_t v27 = v2 + v26;
  swift_beginAccess();
  sub_100049F48(v27, (uint64_t)v25);
  if (sub_100015C0C((uint64_t)v25, 1, v6) != 1)
  {
    (*(void (**)(unint64_t, char *, uint64_t))(v105 + 32))(v107, v25, v6);
    return;
  }
  sub_100015C5C((uint64_t)v25, &qword_100096BA8);
  NSString v28 = String._bridgeToObjectiveC()();
  uint64_t v29 = MGCopyAnswer();

  if (!v29) {
    goto LABEL_61;
  }
  uint64_t v93 = v3;
  uint64_t v122 = v29;
  if ((sub_10001639C() & 1) == 0) {
    goto LABEL_61;
  }
  uint64_t v30 = *((void *)&v120 + 1);
  uint64_t v92 = v120;
  NSString v31 = String._bridgeToObjectiveC()();
  uint64_t v32 = MGCopyAnswer();

  if (!v32 || (uint64_t v122 = v32, (sub_10001639C() & 1) == 0))
  {
LABEL_60:
    swift_bridgeObjectRelease();
LABEL_61:
    sub_10000D9E4((unint64_t *)&unk_1000953D0);
    static Error<>.dataCorrupted.getter();
    sub_10000D9E4((unint64_t *)&unk_1000959D0);
    swift_allocError();
    Error<>.init(_:_:)();
    swift_willThrow();
    return;
  }
  long long v91 = v120;
  NSString v33 = String._bridgeToObjectiveC()();
  uint64_t v34 = MGCopyAnswer();

  if (!v34 || (uint64_t v122 = v34, (sub_10001639C() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  v88[1] = v30;
  unint64_t v90 = *((void *)&v120 + 1);
  v88[0] = v120;
  uint64_t v35 = v106;
  sub_100049974();
  id v36 = objc_allocWithZone((Class)type metadata accessor for DeviceKeyValueStore());
  uint64_t v115 = DeviceKeyValueStore.init(copyingValuesFrom:)();
  uint64_t v37 = *(void *)(v35 + 48);
  uint64_t ObjectType = swift_getObjectType();
  int v89 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(ObjectType, v37);
  uint64_t v94 = v39 + 64;
  sub_100015808();
  unint64_t v42 = v41 & v40;
  unint64_t v95 = (unint64_t)(v43 + 63) >> 6;
  uint64_t v110 = v111 + 16;
  uint64_t v113 = v111 + 8;
  long long v114 = (void (**)(uint64_t, char *, uint64_t))(v111 + 32);
  uint64_t v98 = v44;
  swift_bridgeObjectRetain();
  uint64_t v45 = 0;
  unint64_t v46 = v107;
  uint64_t v97 = v6;
  uint64_t v117 = v17;
  if (!v42) {
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v103 = (v42 - 1) & v42;
  uint64_t v104 = v45;
  for (unint64_t i = __clz(__rbit64(v42)) | (v45 << 6); ; unint64_t i = __clz(__rbit64(v51)) + (v52 << 6))
  {
    uint64_t v55 = *(void *)(v98 + 56);
    long long v56 = (uint64_t *)(*(void *)(v98 + 48) + 16 * i);
    uint64_t v6 = v56[1];
    uint64_t v116 = *v56;
    uint64_t v57 = *(void *)(v55 + 8 * i);
    uint64_t v108 = v57 + 64;
    sub_100015808();
    unint64_t v46 = v59 & v58;
    int64_t v109 = (unint64_t)(v60 + 63) >> 6;
    int64_t v96 = v109 - 1;
    swift_bridgeObjectRetain();
    uint64_t v112 = v57;
    swift_bridgeObjectRetain();
    int64_t v61 = 0;
    if (v46)
    {
LABEL_33:
      unint64_t v62 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      unint64_t v63 = v62 | (v61 << 6);
      uint64_t v64 = (uint64_t)v117;
      goto LABEL_34;
    }
    while (1)
    {
      int64_t v71 = v61 + 1;
      uint64_t v64 = (uint64_t)v117;
      if (__OFADD__(v61, 1))
      {
        __break(1u);
        goto LABEL_66;
      }
      if (v71 < v109)
      {
        unint64_t v72 = *(void *)(v108 + 8 * v71);
        if (v72) {
          goto LABEL_38;
        }
        int64_t v73 = v61 + 2;
        ++v61;
        if (v71 + 1 < v109)
        {
          unint64_t v72 = *(void *)(v108 + 8 * v73);
          if (v72) {
            goto LABEL_41;
          }
          int64_t v61 = v71 + 1;
          if (v71 + 2 < v109)
          {
            unint64_t v72 = *(void *)(v108 + 8 * (v71 + 2));
            if (v72)
            {
              v71 += 2;
              goto LABEL_38;
            }
            int64_t v73 = v71 + 3;
            int64_t v61 = v71 + 2;
            if (v71 + 3 < v109)
            {
              unint64_t v72 = *(void *)(v108 + 8 * v73);
              if (!v72)
              {
                while (1)
                {
                  int64_t v71 = v73 + 1;
                  if (__OFADD__(v73, 1)) {
                    break;
                  }
                  if (v71 >= v109)
                  {
                    int64_t v61 = v96;
                    goto LABEL_52;
                  }
                  unint64_t v72 = *(void *)(v108 + 8 * v71);
                  ++v73;
                  if (v72) {
                    goto LABEL_38;
                  }
                }
LABEL_77:
                __break(1u);
LABEL_78:
                __break(1u);
                return;
              }
LABEL_41:
              int64_t v71 = v73;
LABEL_38:
              unint64_t v46 = (v72 - 1) & v72;
              unint64_t v63 = __clz(__rbit64(v72)) + (v71 << 6);
              int64_t v61 = v71;
LABEL_34:
              uint64_t v65 = v111;
              uint64_t v66 = *(void *)(v112 + 56);
              unint64_t v67 = (void *)(*(void *)(v112 + 48) + 16 * v63);
              uint64_t v68 = v67[1];
              *(void *)uint64_t v64 = *v67;
              *(void *)(v64 + 8) = v68;
              uint64_t v69 = v66 + *(void *)(v65 + 72) * v63;
              uint64_t v70 = sub_1000153C0(&qword_100096BB8);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v64 + *(int *)(v70 + 48), v69, v119);
              sub_100015C34(v64, 0, 1, v70);
              swift_bridgeObjectRetain();
              goto LABEL_53;
            }
          }
        }
      }
LABEL_52:
      uint64_t v74 = sub_1000153C0(&qword_100096BB8);
      sub_100015C34(v64, 1, 1, v74);
      unint64_t v46 = 0;
LABEL_53:
      sub_100040B14(v64, (uint64_t)v19, &qword_100096BB0);
      uint64_t v75 = sub_1000153C0(&qword_100096BB8);
      if (sub_100015C0C((uint64_t)v19, 1, v75) == 1) {
        break;
      }
      (*v114)(v118, &v19[*(int *)(v75 + 48)], v119);
      swift_bridgeObjectRetain();
      sub_100048E08(&v120);
      dispatch thunk of DeviceKeyValueStore.setValue(_:_:_:sensitive:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100010548((uint64_t)&v120);
      sub_100010EE4();
      v76();
      if (v46) {
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v46 = v107;
    uint64_t v6 = v97;
    uint64_t v45 = v104;
    unint64_t v42 = v103;
    if (v103) {
      goto LABEL_12;
    }
LABEL_13:
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_77;
    }
    sub_10004A46C();
    if (v49 == v50) {
      goto LABEL_62;
    }
    unint64_t v51 = *(void *)(v94 + 8 * v48);
    uint64_t v52 = v48;
    if (!v51)
    {
      sub_100013958();
      if (v49 == v50) {
        goto LABEL_62;
      }
      sub_100010F60();
      if (!v51)
      {
        sub_100013958();
        if (v49 == v50) {
          goto LABEL_62;
        }
        sub_100010F60();
        if (!v51) {
          break;
        }
      }
    }
LABEL_31:
    uint64_t v103 = (v51 - 1) & v51;
    uint64_t v104 = v52;
  }
  sub_10004A46C();
  if (v49 != v50)
  {
    unint64_t v51 = *(void *)(v94 + 8 * v53);
    if (!v51)
    {
      while (!__OFADD__(v53, 1))
      {
        sub_100013958();
        if (v49 == v50) {
          goto LABEL_62;
        }
        sub_100010F60();
        uint64_t v53 = v54 + 1;
        if (v51) {
          goto LABEL_31;
        }
      }
      goto LABEL_78;
    }
    uint64_t v52 = v53;
    goto LABEL_31;
  }
LABEL_62:
  swift_release();
  long long v121 = &type metadata for Bool;
  LOBYTE(v120) = v89 & 1;
  dispatch thunk of DeviceKeyValueStore.setValue(_:_:_:sensitive:)();
  swift_bridgeObjectRelease();
  sub_100010548((uint64_t)&v120);
  NSString v77 = String._bridgeToObjectiveC()();
  uint64_t v78 = MGCopyAnswer();

  LOBYTE(v64) = v102;
  if (v78)
  {
    self;
    uint64_t v79 = (void *)swift_dynamicCastObjCClass();
    if (v79)
    {
      [v79 unsignedLongLongValue];
      swift_unknownObjectRelease();
      goto LABEL_68;
    }
LABEL_66:
    swift_unknownObjectRelease();
  }
  static os_log_type_t.info.getter();
  os_log(_:dso:log:_:_:)();
LABEL_68:
  if ((v64 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v88[0] = 0;
    unint64_t v90 = 0xE000000000000000;
  }
  uint64_t v80 = (void *)v115;
  uint64_t v81 = v93;
  dispatch thunk of DeviceKeyValueStore.data(includeSensitive:)();
  if (v81)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v82 = v101;
    PeerDeviceInfo.init(name:model:udid:ecid:deviceKVSData:deviceKVSIncludesSensitiveInfo:)();

    uint64_t v83 = v105;
    uint64_t v84 = v99;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16))(v99, v82, v6);
    sub_100015C34(v84, 0, 1, v6);
    uint64_t v85 = v100;
    sub_100040B14(v84, v100, &qword_100096BA8);
    if (v64) {
      uint64_t v86 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
    }
    else {
      uint64_t v86 = OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys;
    }
    uint64_t v87 = v106 + v86;
    swift_beginAccess();
    sub_100049EE0(v85, v87);
    swift_endAccess();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v83 + 32))(v46, v101, v6);
  }
}

_OWORD *sub_100048E08@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v116 = a1;
  uint64_t v111 = sub_1000153C0(&qword_100096BB8);
  sub_100010EF0();
  __chkstk_darwin(v1);
  sub_100010F00();
  sub_100015A5C();
  __chkstk_darwin(v2);
  sub_10004A460();
  uint64_t v117 = (uint64_t *)v3;
  __chkstk_darwin(v4);
  int64_t v109 = (char *)&v101 - v5;
  uint64_t v6 = type metadata accessor for AuxiliaryMetadataItem();
  sub_100013814();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100010F00();
  sub_100015A5C();
  __chkstk_darwin(v10);
  sub_10004A460();
  sub_100015A5C();
  __chkstk_darwin(v11);
  sub_10004A460();
  sub_100015A5C();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v101 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (uint64_t *)((char *)&v101 - v17);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v101 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v101 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v101 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v101 - v28;
  uint64_t v30 = *(void (**)(void))(v8 + 16);
  sub_100016954();
  v30();
  int v31 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v29, v6);
  if (v31 == enum case for AuxiliaryMetadataItem.BOOLean(_:))
  {
    sub_100016954();
    v30();
    (*(void (**)(char *, uint64_t))(v8 + 96))(v27, v6);
    LOBYTE(v119[0]) = *(unsigned char *)(*(void *)v27 + 16);
    if (swift_dynamicCast())
    {
      uint64_t v27 = (char *)v6;
      uint64_t v6 = v8;
LABEL_9:
      sub_10001673C(v120, &v121);
      swift_release();
LABEL_10:
      (*(void (**)(char *, char *))(v6 + 8))(v29, v27);
      return sub_10001673C(&v121, v116);
    }
    goto LABEL_70;
  }
  long long v114 = v30;
  uint64_t v112 = v8 + 16;
  unint64_t v107 = v29;
  uint64_t v113 = v8;
  uint64_t v115 = (char *)v6;
  if (v31 == enum case for AuxiliaryMetadataItem.int(_:))
  {
    sub_1000160A0();
    v114();
    sub_100013C8C();
    sub_1000161D4();
    v32();
    *(void *)&v119[0] = *(void *)(*(void *)v24 + 16);
    goto LABEL_8;
  }
  if (v31 == enum case for AuxiliaryMetadataItem.float(_:))
  {
    uint64_t v29 = v107;
    uint64_t v27 = v115;
    sub_100016954();
    v33();
    sub_100013C8C();
    sub_1000161D4();
    v34();
    *(void *)&v119[0] = *(void *)(*(void *)v21 + 16);
LABEL_8:
    if (sub_100015D14()) {
      goto LABEL_9;
    }
    goto LABEL_70;
  }
  id v36 = v114;
  if (v31 == enum case for AuxiliaryMetadataItem.string(_:))
  {
    sub_100016954();
    v36();
    sub_100013C8C();
    sub_1000161D4();
    v37();
    uint64_t v38 = *v18;
    uint64_t v39 = *(void *)(v38 + 24);
    *(void *)&v119[0] = *(void *)(v38 + 16);
    *((void *)&v119[0] + 1) = v39;
    swift_bridgeObjectRetain();
    if (sub_100015D14())
    {
      sub_10001673C(v120, &v121);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v27 = v115;
      uint64_t v29 = v107;
      goto LABEL_10;
    }
    goto LABEL_68;
  }
  if (v31 == enum case for AuxiliaryMetadataItem.data(_:))
  {
    sub_1000160A0();
    sub_100016954();
    v36();
    sub_1000161D4();
    v40();
    unint64_t v41 = *(void *)(*(void *)v15 + 24);
    *(void *)&v119[0] = *(void *)(*(void *)v15 + 16);
    *((void *)&v119[0] + 1) = v41;
    sub_100015BB4(*(uint64_t *)&v119[0], v41);
    if (sub_100015D14())
    {
      sub_10001673C(v120, &v121);
      sub_1000158A8(*(uint64_t *)&v119[0], *((unint64_t *)&v119[0] + 1));
      swift_release();
      uint64_t v6 = v113;
      goto LABEL_10;
    }
    sub_1000158A8(*(uint64_t *)&v119[0], *((unint64_t *)&v119[0] + 1));
LABEL_70:
    swift_release();
    goto LABEL_71;
  }
  unint64_t v42 = v115;
  uint64_t v43 = v116;
  if (v31 != enum case for AuxiliaryMetadataItem.array(_:))
  {
    uint64_t v57 = v113;
    if (v31 != enum case for AuxiliaryMetadataItem.dictionary(_:))
    {
LABEL_71:
      uint64_t result = (_OWORD *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v58 = v106;
    sub_100016954();
    v36();
    (*(void (**)(uint64_t *, char *))(v57 + 96))(v58, v42);
    uint64_t v102 = *v58;
    uint64_t v59 = *(void *)(v102 + 16);
    uint64_t v60 = (void *)Dictionary.init(dictionaryLiteral:)();
    v43[3] = sub_1000153C0(&qword_1000955A0);
    sub_10004A3E8(v59, &v121);
    uint64_t v103 = *((void *)&v121 + 1);
    uint64_t v106 = (uint64_t *)v121;
    uint64_t v108 = v123;
    unint64_t v61 = v124;
    int64_t v104 = (unint64_t)(v122 + 64) >> 6;
    uint64_t v105 = v57 + 8;
    swift_bridgeObjectRetain();
    if (!v61) {
      goto LABEL_29;
    }
LABEL_28:
    unint64_t v62 = __clz(__rbit64(v61));
    v61 &= v61 - 1;
    unint64_t v63 = v62 | (v108 << 6);
    while (1)
    {
      unint64_t v72 = (uint64_t *)(v106[6] + 16 * v63);
      uint64_t v73 = *v72;
      uint64_t v74 = v72[1];
      uint64_t v75 = v111;
      uint64_t v76 = v109;
      ((void (*)(char *, unint64_t, char *))v36)(&v109[*(int *)(v111 + 48)], v106[7] + *(void *)(v57 + 72) * v63, v42);
      *uint64_t v76 = v73;
      v76[1] = v74;
      NSString v77 = v117;
      sub_100040B14((uint64_t)v76, (uint64_t)v117, &qword_100096BB8);
      uint64_t v78 = *(int *)(v75 + 48);
      uint64_t v79 = v110;
      uint64_t v80 = (char *)v77 + v78;
      uint64_t v81 = *v77;
      uint64_t v82 = v77[1];
      *uint64_t v110 = v81;
      v79[1] = v82;
      ((void (*)(char *, char *, char *))v36)((char *)v79 + v78, v80, v42);
      swift_bridgeObjectRetain();
      uint64_t v83 = swift_bridgeObjectRetain();
      sub_100048E08(v120, v83);
      sub_10001673C(v120, v119);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v118 = v60;
      unint64_t v85 = sub_1000155A8();
      uint64_t v87 = v60[2];
      BOOL v88 = (v86 & 1) == 0;
      Swift::Int v89 = v87 + v88;
      if (__OFADD__(v87, v88)) {
        break;
      }
      unint64_t v90 = v85;
      char v91 = v86;
      sub_1000153C0((uint64_t *)&unk_100097720);
      Swift::Bool v92 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v89);
      id v36 = v114;
      if (v92)
      {
        unint64_t v93 = sub_1000155A8();
        if ((v91 & 1) != (v94 & 1)) {
          goto LABEL_67;
        }
        unint64_t v90 = v93;
      }
      uint64_t v60 = v118;
      if (v91)
      {
        unint64_t v95 = (_OWORD *)(v118[7] + 32 * v90);
        sub_100010548((uint64_t)v95);
        sub_10001673C(v119, v95);
      }
      else
      {
        v118[(v90 >> 6) + 8] |= 1 << v90;
        int64_t v96 = (void *)(v60[6] + 16 * v90);
        *int64_t v96 = v81;
        v96[1] = v82;
        sub_10001673C(v119, (_OWORD *)(v60[7] + 32 * v90));
        uint64_t v97 = v60[2];
        BOOL v69 = __OFADD__(v97, 1);
        uint64_t v98 = v97 + 1;
        if (v69) {
          goto LABEL_65;
        }
        void v60[2] = v98;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v42 = v115;
      sub_100010EE4();
      v99();
      sub_100015C5C((uint64_t)v117, &qword_100096BB8);
      uint64_t v57 = v113;
      if (v61) {
        goto LABEL_28;
      }
LABEL_29:
      int64_t v64 = v108 + 1;
      if (__OFADD__(v108, 1)) {
        goto LABEL_66;
      }
      uint64_t v65 = v116;
      if (v64 >= v104) {
        goto LABEL_62;
      }
      unint64_t v66 = *(void *)(v103 + 8 * v64);
      uint64_t v67 = v108 + 1;
      if (!v66)
      {
        sub_100016460();
        if (v68 == v69) {
          goto LABEL_62;
        }
        sub_100013AA4();
        if (!v66)
        {
          sub_100016460();
          if (v68 == v69) {
            goto LABEL_62;
          }
          sub_100013AA4();
          if (!v66)
          {
            sub_100016460();
            if (v68 == v69) {
              goto LABEL_62;
            }
            sub_100013AA4();
            if (!v66)
            {
              sub_100016460();
              if (v68 == v69) {
                goto LABEL_62;
              }
              sub_100013AA4();
              if (!v66)
              {
                sub_10004A46C();
                if (v68 == v69) {
                  goto LABEL_62;
                }
                unint64_t v66 = *(void *)(v103 + 8 * v67);
                if (!v66)
                {
                  while (1)
                  {
                    sub_10004A46C();
                    if (v68 == v69) {
                      break;
                    }
                    unint64_t v66 = *(void *)(v103 + 8 * v70);
                    uint64_t v71 = v70 + 1;
                    if (v66)
                    {
                      uint64_t v67 = v71 - 1;
                      goto LABEL_51;
                    }
                  }
LABEL_62:
                  swift_release();
                  swift_release();
                  *uint64_t v65 = v60;
                  sub_100010EE4();
                  return (_OWORD *)v100();
                }
              }
            }
          }
        }
      }
LABEL_51:
      unint64_t v61 = (v66 - 1) & v66;
      unint64_t v63 = __clz(__rbit64(v66)) + (v67 << 6);
      uint64_t v108 = v67;
    }
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_68:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_71;
  }
  uint64_t v44 = v105;
  sub_100016954();
  v36();
  uint64_t v45 = v113;
  (*(void (**)(uint64_t, char *))(v113 + 96))(v44, v42);
  uint64_t v46 = *(void *)(*(void *)v44 + 16);
  int64_t v47 = *(void *)(v46 + 16);
  uint64_t v48 = &_swiftEmptyArrayStorage;
  if (v47)
  {
    *(void *)&v120[0] = &_swiftEmptyArrayStorage;
    sub_10004A1F4(0, v47, 0);
    uint64_t v49 = v46 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    uint64_t v50 = *(void *)(v45 + 72);
    do
    {
      uint64_t v51 = v108;
      uint64_t v52 = v115;
      sub_100016954();
      uint64_t v54 = v53();
      sub_100048E08(&v121, v54);
      (*(void (**)(uint64_t, char *))(v45 + 8))(v51, v52);
      uint64_t v48 = *(void **)&v120[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10004A1F4(0, v48[2] + 1, 1);
        uint64_t v48 = *(void **)&v120[0];
      }
      unint64_t v56 = v48[2];
      unint64_t v55 = v48[3];
      if (v56 >= v55 >> 1)
      {
        sub_10004A1F4((char *)(v55 > 1), v56 + 1, 1);
        uint64_t v48 = *(void **)&v120[0];
      }
      v48[2] = v56 + 1;
      sub_10001673C(&v121, &v48[4 * v56 + 4]);
      v49 += v50;
      --v47;
    }
    while (v47);
    uint64_t v43 = v116;
  }
  v43[3] = sub_1000153C0(&qword_1000955B0);
  swift_release();
  *uint64_t v43 = v48;
  return (_OWORD *)(*(uint64_t (**)(char *, char *))(v45 + 8))(v107, v115);
}

id sub_100049974()
{
  uint64_t v1 = *(void **)(v0 + 96);
  if (v1)
  {
    id v2 = *(id *)(v0 + 96);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = (void *)(*(uint64_t (**)(void))(v0 + 64))();
    uint64_t v5 = *(void **)(v0 + 96);
    *(void *)(v3 + 96) = v4;
    id v2 = v4;

    uint64_t v1 = 0;
  }
  id v6 = v1;
  return v2;
}

uint64_t sub_1000499D0()
{
  uint64_t v2 = sub_1000153C0(&qword_100096BA8);
  uint64_t v3 = sub_100014774(v2);
  __chkstk_darwin(v3);
  sub_100016F14();
  os_log(_:dso:log:_:_:)();
  uint64_t v4 = *(void **)(v1 + 96);
  *(void *)(v1 + 96) = 0;

  type metadata accessor for PeerDeviceInfo();
  sub_100015DFC();
  uint64_t v5 = v1 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
  sub_1000134B8();
  sub_100049EE0(v0, v5);
  swift_endAccess();
  sub_100015DFC();
  uint64_t v6 = v1 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys;
  sub_1000134B8();
  sub_100049EE0(v0, v6);
  uint64_t result = swift_endAccess();
  uint64_t v8 = *(void (**)(uint64_t))(v1 + 24);
  if (v8)
  {
    uint64_t v9 = swift_retain();
    v8(v9);
    return sub_1000408C4((uint64_t)v8);
  }
  return result;
}

uint64_t sub_100049AF8()
{
  uint64_t v2 = sub_1000153C0(&qword_100096BA8);
  uint64_t v3 = sub_100014774(v2);
  __chkstk_darwin(v3);
  sub_100016F14();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for PeerDeviceInfo();
  sub_100015DFC();
  uint64_t v4 = v1 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys;
  sub_1000134B8();
  sub_100049EE0(v0, v4);
  swift_endAccess();
  sub_100015DFC();
  uint64_t v5 = v1 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys;
  sub_1000134B8();
  sub_100049EE0(v0, v5);
  uint64_t result = swift_endAccess();
  uint64_t v7 = *(void (**)(uint64_t))(v1 + 24);
  if (v7)
  {
    uint64_t v8 = swift_retain();
    v7(v8);
    return sub_1000408C4((uint64_t)v7);
  }
  return result;
}

uint64_t sub_100049C14()
{
  uint64_t v1 = (int *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService_darwinNotificationToken);
  swift_beginAccess();
  if (*v1 != -1)
  {
    notify_cancel(*v1);
    *uint64_t v1 = -1;
  }

  sub_1000408C4(*(void *)(v0 + 24));
  swift_unknownObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  sub_100015C5C(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoIncludingSensitiveKeys, &qword_100096BA8);
  sub_100015C5C(v0 + OBJC_IVAR____TtC20remotepairingdeviced15MetadataService__deviceInfoExcludingSensitiveKeys, &qword_100096BA8);
  return v0;
}

uint64_t sub_100049CDC()
{
  sub_100049C14();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100049D34()
{
  return type metadata accessor for MetadataService();
}

uint64_t type metadata accessor for MetadataService()
{
  uint64_t result = qword_100096A30;
  if (!qword_100096A30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100049D84()
{
  sub_100049E64();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100049E64()
{
  if (!qword_100096A40)
  {
    type metadata accessor for PeerDeviceInfo();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100096A40);
    }
  }
}

void sub_100049EBC(int a1@<W0>, unint64_t a2@<X8>)
{
}

uint64_t sub_100049EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0(&qword_100096BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100049F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0(&qword_100096BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100049FB0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 16 * a2 > a1 ? (BOOL v3 = a1 + 16 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    sub_100013898();
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1000153C0(&qword_100096BD0);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_10004A098(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 32 * a2 > a1 ? (BOOL v3 = a1 + 32 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

void *sub_10004A17C(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004A214(a1, a2, a3, *v3, &qword_100096BC8, (void (*)(unint64_t, uint64_t, unint64_t))sub_1000541A4);
  *BOOL v3 = (uint64_t)result;
  return result;
}

void *sub_10004A1B8(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004A214(a1, a2, a3, *v3, &qword_100096BD8, (void (*)(unint64_t, uint64_t, unint64_t))sub_1000541A4);
  *BOOL v3 = (uint64_t)result;
  return result;
}

char *sub_10004A1F4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004A304(a1, a2, a3, *v3);
  *BOOL v3 = (uint64_t)result;
  return result;
}

void *sub_10004A214(void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(unint64_t, uint64_t, unint64_t))
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_1000153C0(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    void v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 16);
  }
  else
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = a4 + 32;
  if (v8)
  {
    a6(v16, v11, v15);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100049FB0(v16, v11, v15);
  }
  swift_release();
  return v13;
}

char *sub_10004A304(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000153C0(&qword_100096BC0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100054148(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10004A098((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

uint64_t sub_10004A3E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_10004A420()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004A458()
{
  return sub_100048188();
}

uint64_t sub_10004A478(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001673C((_OWORD *)a1, v4);
    sub_1000667FC();
    return sub_100027D34(a2);
  }
  else
  {
    sub_10002A49C(a1, &qword_100095588);
    sub_100065DA8(v4, a2);
    sub_100027D34(a2);
    return sub_10002A49C((uint64_t)v4, &qword_100095588);
  }
}

uint64_t sub_10004A500(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001673C((_OWORD *)a1, v12);
    return sub_100066974((uint64_t)v12, a2);
  }
  else
  {
    sub_10002A49C(a1, &qword_100095588);
    unint64_t v5 = sub_1000623A8(a2);
    if (v6)
    {
      unint64_t v7 = v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v9 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      Swift::Int v10 = *(void *)(v9 + 24);
      sub_1000153C0((uint64_t *)&unk_100096E78);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
      sub_10001673C((_OWORD *)(*(void *)(v11 + 56) + 32 * v7), v12);
      _NativeDictionary._delete(at:)();
      *uint64_t v2 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v12, 0, sizeof(v12));
    }
    return sub_10002A49C((uint64_t)v12, &qword_100095588);
  }
}

uint64_t sub_10004A624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000153C0(&qword_100096E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for XPCEventPublisher.Token();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100015C0C(a1, 1, v9) == 1)
  {
    sub_10002A49C(a1, &qword_100096E40);
    sub_100066404(a2, a3);
    swift_bridgeObjectRelease();
    return sub_10002A49C((uint64_t)v8, &qword_100096E40);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    sub_100066A40(v12, a2, a3);
    return swift_bridgeObjectRelease();
  }
}

double sub_10004A7B0@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100062250(), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(a1 + 56) + 32 * v4;
    sub_100015404(v6, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10004A814(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_100062290(), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_10004A858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_1000155A8(), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_10004A8A8()
{
  return 1;
}

uint64_t sub_10004A8F0()
{
  sub_1000408C4(*(void *)(v0 + 16));

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for StubAuxiliaryMetadataService()
{
  return self;
}

uint64_t sub_10004A94C()
{
  return 1;
}

BOOL sub_10004A968()
{
  if (*(unsigned char *)(v0 + 72) == 1)
  {
    sub_100013A48();
    uint64_t v1 = *(void *)(*(void *)(v0 + 96) + 16);
    sub_100013A48();
    BOOL v2 = v1 == *(void *)(*(void *)(v0 + 80) + 16);
  }
  else
  {
    BOOL v2 = 0;
  }
  sub_100013A48();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10004A9F0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  char v5 = (void *)v4;
  sub_10004DD1C();
  *(void *)(v4 + 16) = OS_os_log.init(subsystem:category:)();
  type metadata accessor for XPCEventPublisher.Token();
  sub_10004DD88(&qword_1000976F0, (void (*)(uint64_t))&type metadata accessor for XPCEventPublisher.Token);
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v4 + 88) = Dictionary.init(dictionaryLiteral:)();
  sub_1000153C0(&qword_100096E60);
  *(void *)(v4 + 96) = Dictionary.init(dictionaryLiteral:)();
  uint64_t v10 = static AuxiliaryMetadataProvider.XPCKeys.xpcEventStreamName.getter();
  uint64_t v12 = v11;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, id, uint64_t, void *))a3[1];
  id v14 = a1;
  uint64_t v15 = v13(v10, v12, v14, a2, a3);
  if (v15)
  {
    v5[4] = v15;
    v5[5] = a3;
    v5[3] = v14;
    uint64_t v26 = v14;
    if (a4)
    {
      id v16 = v14;
      swift_unknownObjectRetain();
      uint64_t v17 = a4;
    }
    else
    {
      type metadata accessor for RemotePairingDeviceXPCServer();
      id v18 = v14;
      swift_unknownObjectRetain();
      uint64_t v19 = static MachServiceNames.auxiliaryMetadata.getter();
      uint64_t v17 = sub_100032ABC(v19, v20, v18);
    }
    v5[6] = v17;
    uint64_t v21 = sub_100013AB4();
    swift_weakInit();
    uint64_t v22 = (void (*)(uint64_t (*)(), uint64_t, uint64_t, void *))a3[4];
    swift_retain();
    swift_retain();
    v22(sub_10004DD5C, v21, a2, a3);
    swift_release_n();
    uint64_t v23 = sub_100013AB4();
    swift_weakInit();
    uint64_t v24 = (void (*)(uint64_t (*)(), uint64_t, uint64_t, void *))a3[3];
    swift_retain();
    v24(sub_10004DD64, v23, a2, a3);
    swift_release_n();
    sub_100013AB4();
    swift_weakInit();
    type metadata accessor for AuxiliaryMetadataUpdate();
    type metadata accessor for EmptyResponse();
    sub_10004DD88(&qword_100096E68, (void (*)(uint64_t))&type metadata accessor for AuxiliaryMetadataUpdate);
    sub_10004DD88(&qword_100096E70, (void (*)(uint64_t))&type metadata accessor for AuxiliaryMetadataUpdate);
    sub_10004DD88(&qword_100095A30, (void (*)(uint64_t))&type metadata accessor for EmptyResponse);
    sub_10004DD88(&qword_100095A38, (void (*)(uint64_t))&type metadata accessor for EmptyResponse);
    swift_retain();
    dispatch thunk of CodableDispatcher.register<A, B>(handler:)();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();

    swift_release();
    return (uint64_t)v5;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10004AE5C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10004D45C();
    return swift_release();
  }
  return result;
}

uint64_t sub_10004AEBC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10004BD94();
    return swift_release();
  }
  return result;
}

uint64_t sub_10004AF1C(uint64_t a1)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return EmptyResponse.init()();
  }
  sub_1000153C0(&qword_1000950E8);
  sub_10004AFFC(a1);
  uint64_t result = swift_release();
  if (!v1) {
    return EmptyResponse.init()();
  }
  return result;
}

uint64_t sub_10004AFC8()
{
  return dispatch thunk of XPCConnection.activate()();
}

uint64_t sub_10004AFFC(uint64_t a1)
{
  uint64_t v110 = a1;
  os_log_t v106 = (os_log_t)type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v2);
  sub_100012078();
  os_log_t v105 = (os_log_t)(v4 - v3);
  uint64_t v109 = type metadata accessor for AuxiliaryMetadataUpdate();
  sub_100013814();
  uint64_t v107 = v5;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v100 - v11;
  __chkstk_darwin(v10);
  uint64_t v101 = (char *)v100 - v13;
  sub_100013488();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v100 - v16;
  __chkstk_darwin(v15);
  uint64_t v103 = (char *)v100 - v18;
  sub_100013488();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v100 - v20;
  uint64_t v22 = type metadata accessor for XPCDictionary();
  sub_100013814();
  uint64_t v24 = v23;
  __chkstk_darwin(v25);
  sub_100012078();
  uint64_t v28 = v27 - v26;
  XPCDictionary.auditToken.getter();
  sub_100040B14((uint64_t)v114, (uint64_t)&v115, &qword_100096E50);
  uint64_t v102 = v1;
  if (v116) {
    int v104 = -1;
  }
  else {
    int v104 = audit_token_t.processIdentifier.getter();
  }
  XPCDictionary.entitlements.getter();
  char v29 = XPCDictionary.subscript.getter();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v22);
  if ((v29 & 1) == 0)
  {
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = *(NSObject **)(v108 + 16);
    sub_100016B14();
    uint64_t v32 = v109;
    sub_100015CF0();
    v33();
    if (os_log_type_enabled(v31, v30))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v35 = AuxiliaryMetadataUpdate.domain.getter();
      v112[0] = sub_100010478(v35, v36, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v109);
      sub_100016960();
      LODWORD(v112[0]) = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v31, v30, "Received metadata update for domain %s from unentitled client pid/%d. Rejecting", v34, 0x12u);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v32);
    }
    sub_10004DD88((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    static Error<>.permissionDenied.getter();
    v113[0] = 0;
    v113[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(83);
    sub_1000160B8(0xD000000000000031, (uint64_t)"Rejecting metadata update from client for domain ");
    v67._countAndFlagsBits = AuxiliaryMetadataUpdate.domain.getter();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    sub_1000160B8(0xD00000000000001ELL, (uint64_t)" without required entitlement ");
    v68._object = (void *)0x800000010007DB00;
    v68._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v68);
    sub_10004DD88((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    swift_allocError();
LABEL_20:
    Error<>.init(_:_:)();
    return swift_willThrow();
  }
  uint64_t v38 = v108;
  swift_beginAccess();
  Class isa = v38[11].isa;
  swift_bridgeObjectRetain();
  AuxiliaryMetadataUpdate.domain.getter();
  if (!*((void *)isa + 2))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  sub_1000155A8();
  char v41 = v40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) == 0)
  {
LABEL_16:
    os_log_type_t v69 = static os_log_type_t.error.getter();
    uint64_t v70 = v38[2].isa;
    sub_100016B14();
    uint64_t v71 = v109;
    sub_100015CF0();
    v72();
    if (os_log_type_enabled(v70, v69))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 136315394;
      uint64_t v74 = AuxiliaryMetadataUpdate.domain.getter();
      v111[0] = sub_100010478(v74, v75, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))isa + 1))(v12, v109);
      sub_100016960();
      LODWORD(v111[0]) = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v70, v69, "Received metadata update for domain %s from client pid/%d without associated subscription. Rejecting", v73, 0x12u);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
    else
    {
      (*((void (**)(char *, uint64_t))isa + 1))(v12, v71);
    }
    static RemotePairingError.invalidInput.getter();
    v112[0] = 0;
    v112[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(84);
    sub_1000160B8(0xD000000000000025, (uint64_t)"Rejecting metadata update for domain ");
    v77._countAndFlagsBits = AuxiliaryMetadataUpdate.domain.getter();
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    sub_1000160B8(0xD00000000000002DLL, (uint64_t)" without associated launch event subscription");
    sub_10004DD88((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    swift_allocError();
    sub_10004DD88((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    goto LABEL_20;
  }
  uint64_t v42 = AuxiliaryMetadataUpdate.domain.getter();
  uint64_t v44 = v43;
  uint64_t v45 = v38 + 12;
  swift_beginAccess();
  uint64_t v46 = (uint64_t)v38[12].isa;
  swift_bridgeObjectRetain();
  uint64_t v47 = sub_10004A858(v42, v44, v46);
  swift_bridgeObjectRelease();
  uint64_t v48 = v110;
  swift_bridgeObjectRelease();
  uint64_t v49 = AuxiliaryMetadataUpdate.metadata.getter();
  if (v47)
  {
    uint64_t v50 = swift_bridgeObjectRetain();
    char v51 = sub_10004D660(v50, v49);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v52 = v103;
    if (v51)
    {
      os_log_type_t v53 = static os_log_type_t.default.getter();
      uint64_t v54 = *(NSObject **)(v108 + 16);
      uint64_t v55 = v107;
      unint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 16);
      uint64_t v57 = v109;
      v56(v17, v48, v109);
      uint64_t v58 = v101;
      v56(v101, v48, v57);
      if (os_log_type_enabled(v54, v53))
      {
        uint64_t v59 = swift_slowAlloc();
        uint64_t v110 = swift_slowAlloc();
        v111[0] = v110;
        *(_DWORD *)uint64_t v59 = 136315650;
        LODWORD(v108) = v53;
        uint64_t v60 = AuxiliaryMetadataUpdate.domain.getter();
        uint64_t v117 = sub_100010478(v60, v61, v111);
        os_log_t v106 = v54;
        os_log_t v105 = (os_log_t)&v118;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v62 = *(void (**)(void))(v55 + 8);
        sub_100016F38();
        v62();
        *(_WORD *)(v59 + 12) = 1024;
        LODWORD(v117) = v104;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v59 + 18) = 2080;
        AuxiliaryMetadataUpdate.metadata.getter();
        type metadata accessor for AuxiliaryMetadataItem();
        uint64_t v63 = Dictionary.description.getter();
        uint64_t v65 = v64;
        swift_bridgeObjectRelease();
        uint64_t v117 = sub_100010478(v63, v65, v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100016F38();
        v62();
        _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v108, "Received metadata update for domain %s from pid/%d but there is no change since last update: %s", (uint8_t *)v59, 0x1Cu);
        swift_arrayDestroy();
        sub_1000120B0();
        return sub_1000120B0();
      }
      else
      {
        uint64_t v99 = *(void (**)(void))(v55 + 8);
        sub_100016F38();
        v99();
        return ((uint64_t (*)(char *, uint64_t))v99)(v58, v57);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v52 = v103;
  }
  os_log_t v106 = v45;
  os_log_type_t v78 = static os_log_type_t.default.getter();
  uint64_t v79 = *(NSObject **)(v108 + 16);
  uint64_t v80 = v107;
  uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 16);
  uint64_t v82 = v109;
  v81(v21, v48, v109);
  v81(v52, v48, v82);
  int v83 = v78;
  os_log_t v105 = v79;
  if (os_log_type_enabled(v79, v78))
  {
    uint64_t v84 = swift_slowAlloc();
    uint64_t v103 = (char *)swift_slowAlloc();
    v111[0] = (uint64_t)v103;
    *(_DWORD *)uint64_t v84 = 136315650;
    uint64_t v85 = AuxiliaryMetadataUpdate.domain.getter();
    uint64_t v117 = sub_100010478(v85, v86, v111);
    LODWORD(v101) = v83;
    v100[1] = &v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v87 = *(void (**)(void))(v80 + 8);
    sub_100013968();
    v87();
    *(_WORD *)(v84 + 12) = 1024;
    LODWORD(v117) = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v84 + 18) = 2080;
    AuxiliaryMetadataUpdate.metadata.getter();
    type metadata accessor for AuxiliaryMetadataItem();
    uint64_t v88 = Dictionary.description.getter();
    uint64_t v90 = v89;
    swift_bridgeObjectRelease();
    uint64_t v117 = sub_100010478(v88, v90, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013968();
    v87();
    _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v101, "Received metadata update for domain %s from pid/%d: %s", (uint8_t *)v84, 0x1Cu);
    swift_arrayDestroy();
    sub_1000120B0();
    sub_1000120B0();
  }
  else
  {
    char v91 = *(void (**)(void))(v80 + 8);
    sub_100013968();
    v91();
    ((void (*)(char *, uint64_t))v91)(v52, v82);
  }
  uint64_t v92 = v108;
  uint64_t v93 = AuxiliaryMetadataUpdate.domain.getter();
  uint64_t v95 = v94;
  uint64_t v96 = AuxiliaryMetadataUpdate.metadata.getter();
  swift_beginAccess();
  sub_100066B24(v96, v93, v95);
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v97 = *(void (**)(uint64_t))(v92 + 56);
  if (v97)
  {
    uint64_t v98 = swift_retain();
    v97(v98);
    return sub_1000408C4((uint64_t)v97);
  }
  return result;
}

uint64_t sub_10004BD94()
{
  uint64_t v1 = type metadata accessor for XPCDictionary();
  sub_100013814();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100012078();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for XPCEventPublisher.Token();
  sub_100013814();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100010F00();
  char v40 = v12;
  sub_100013488();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = type metadata accessor for XPCEventPublisher.SubscriptionAction();
  sub_100013814();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  sub_100013C28();
  sub_100015CF0();
  v20();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v0, v16);
  if (result == enum case for XPCEventPublisher.SubscriptionAction.add(_:))
  {
    uint64_t v22 = sub_100015824();
    v23(v22);
    uint64_t v24 = v0 + *(int *)(sub_1000153C0(&qword_100096E48) + 48);
    uint64_t v25 = sub_1000161E4();
    v26(v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v7, v24, v1);
    sub_10004C0D0((uint64_t)v15, v7);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v8);
  }
  uint64_t v27 = v41;
  if (result == enum case for XPCEventPublisher.SubscriptionAction.remove(_:))
  {
    uint64_t v28 = sub_100015824();
    v29(v28);
    uint64_t v15 = v40;
    uint64_t v30 = sub_1000161E4();
    v31(v30);
    sub_1000134B8();
    uint64_t v32 = sub_100066540(v15);
    uint64_t v34 = v33;
    swift_endAccess();
    if (v34)
    {
      sub_1000134B8();
      sub_100066650(v32, v34);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void (**)(uint64_t))(v27 + 56);
      if (v35)
      {
        uint64_t v36 = swift_retain();
        v35(v36);
        sub_1000408C4((uint64_t)v35);
      }
    }
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v8);
  }
  if (result != enum case for XPCEventPublisher.SubscriptionAction.initialBarrier(_:)) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v0, v16);
  }
  *(unsigned char *)(v41 + 72) = 1;
  int v37 = *(void (**)(uint64_t))(v27 + 56);
  if (v37)
  {
    uint64_t v38 = swift_retain();
    v37(v38);
    return sub_1000408C4((uint64_t)v37);
  }
  return result;
}

uint64_t sub_10004C0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for XPCDictionary();
  sub_100013814();
  uint64_t v45 = v8;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v43 - v13;
  uint64_t v15 = sub_1000153C0(&qword_100096E40);
  __chkstk_darwin(v15 - 8);
  sub_100013C28();
  static AuxiliaryMetadataProvider.XPCKeys.domainKey.getter();
  uint64_t v16 = XPCDictionary.subscript.getter();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
  {
    sub_100013A48();
    if (*(void *)(*(void *)(v4 + 88) + 16)
      && (swift_bridgeObjectRetain(), sub_1000155A8(), char v20 = v19, swift_bridgeObjectRelease(), (v20 & 1) != 0))
    {
      os_log_type_t v21 = static os_log_type_t.fault.getter();
      uint64_t v22 = *(NSObject **)(v4 + 16);
      os_log_type_t v23 = v21;
      if (os_log_type_enabled(v22, v21))
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = (uint8_t *)sub_100014750();
        v47[0] = sub_100015720();
        *(_DWORD *)uint64_t v24 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v46 = sub_100010478(v16, v18, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Multiple subscribers have registered for ownership of domain %{public}s. Ignoring additional subscriber.", v24, 0xCu);
        swift_arrayDestroy();
LABEL_10:
        sub_1000120B0();
        return sub_1000120B0();
      }
    }
    else
    {
      sub_1000134B8();
      swift_bridgeObjectRetain();
      sub_100066A8C(v16, v18, a1, v25, v26, v27, v28, v29, v43, (uint64_t)v44);
      swift_endAccess();
      uint64_t v30 = type metadata accessor for XPCEventPublisher.Token();
      sub_100010EF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v3, a1, v30);
      sub_100015C34(v3, 0, 1, v30);
      sub_1000134B8();
      swift_bridgeObjectRetain();
      sub_10004A624(v3, v16, v18);
      swift_endAccess();
      sub_10004C4F4(a1, v16, v18);
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v33 = static os_log_type_t.fault.getter();
  uint64_t v34 = *(NSObject **)(v4 + 16);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
  v35(v14, a2, v7);
  if (os_log_type_enabled(v34, (os_log_type_t)v33))
  {
    uint64_t v36 = (uint8_t *)sub_100014750();
    v48[0] = sub_100015720();
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v44 = v36 + 4;
    v35(v12, (uint64_t)v14, v7);
    uint64_t v37 = String.init<A>(describing:)();
    v47[0] = sub_100010478(v37, v38, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v39 = sub_100016470();
    v40(v39);
    _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v33, "Invalid XPC event subscription descriptor. Could not read target domain from descriptor dictionary %s", v36, 0xCu);
    swift_arrayDestroy();
    goto LABEL_10;
  }
  uint64_t v41 = sub_100016470();
  return v42(v41);
}

uint64_t sub_10004C4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v48 = *v3;
  type metadata accessor for XPCEventPublisher.Token();
  sub_100013814();
  uint64_t v46 = v9;
  uint64_t v47 = v8;
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v8);
  uint64_t v45 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for XPCDictionary();
  sub_100013814();
  uint64_t v44 = v12;
  __chkstk_darwin(v13);
  sub_100010F00();
  uint64_t v51 = v14;
  sub_100013488();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v41 - v16;
  XPCDictionary.init()();
  static AuxiliaryMetadataProvider.XPCKeys.domainKey.getter();
  swift_bridgeObjectRetain();
  uint64_t v49 = a3;
  uint64_t v50 = a2;
  uint64_t v18 = v17;
  XPCDictionary.subscript.setter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  char v20 = v3[2];
  os_log_type_t v21 = v19;
  if (os_log_type_enabled(v20, v19))
  {
    uint64_t v22 = v49;
    swift_bridgeObjectRetain_n();
    os_log_type_t v23 = (uint8_t *)sub_100014750();
    uint64_t v24 = sub_100015720();
    uint64_t v42 = a1;
    uint64_t v54 = v24;
    *(_DWORD *)os_log_type_t v23 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v53 = sub_100010478(v50, v22, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Firing event to request metadata for domain %{public}s", v23, 0xCu);
    swift_arrayDestroy();
    sub_1000120B0();
    sub_1000120B0();
  }
  uint64_t v42 = v4[4];
  uint64_t v43 = v18;
  uint64_t v25 = v44;
  sub_100015CF0();
  v26();
  uint64_t v41 = v4[3];
  uint64_t v27 = swift_allocObject();
  swift_weakInit();
  uint64_t v28 = v45;
  uint64_t v29 = v46;
  uint64_t v30 = v47;
  sub_100015CF0();
  v31();
  unint64_t v32 = (*(unsigned __int8 *)(v29 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v33 = (v11 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = (char *)swift_allocObject();
  uint64_t v36 = v49;
  uint64_t v35 = v50;
  *((void *)v34 + 2) = v27;
  *((void *)v34 + 3) = v35;
  *((void *)v34 + 4) = v36;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v34[v32], v28, v30);
  *(void *)&v34[v33] = v48;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v37 = v51;
  dispatch thunk of XPCEventPublisher.fire(event:forToken:replyQueue:replyHandler:)();
  swift_release();
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  uint64_t v39 = v52;
  v38(v37, v52);
  v38((uint64_t)v43, v39);
  return swift_release();
}

uint64_t sub_10004C8A8(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v83 = a5;
  os_log_t v84 = a3;
  uint64_t v86 = a4;
  uint64_t v85 = type metadata accessor for XPCError();
  uint64_t v6 = *(void *)(v85 - 8);
  uint64_t v7 = __chkstk_darwin(v85);
  uint64_t v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v81 = (char *)&v78 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v80 = (char *)&v78 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v82 = (char *)&v78 - v15;
  __chkstk_darwin(v14);
  uint64_t v87 = (char *)&v78 - v16;
  uint64_t v17 = type metadata accessor for XPCDictionary();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  os_log_type_t v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  os_log_type_t v23 = (char *)&v78 - v22;
  uint64_t v24 = sub_1000153C0(&qword_100095A80);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v28 = result;
  sub_10001C61C(a1, (uint64_t)v26);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v26, v17);
    XPCDictionary.entitlements.getter();
    char v47 = XPCDictionary.subscript.getter();
    uint64_t v48 = *(void (**)(char *, uint64_t))(v18 + 8);
    v48(v21, v17);
    if (v47)
    {
      os_log_type_t v65 = static os_log_type_t.default.getter();
      uint64_t v50 = *(NSObject **)(v28 + 16);
      os_log_type_t v51 = v65;
      if (os_log_type_enabled(v50, v65))
      {
        uint64_t v66 = v86;
        swift_bridgeObjectRetain_n();
        uint64_t v67 = swift_slowAlloc();
        uint64_t v87 = (char *)v48;
        uint64_t v54 = (uint8_t *)v67;
        v90[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 136446210;
        uint64_t v85 = (uint64_t)(v54 + 4);
        swift_bridgeObjectRetain();
        uint64_t v89 = (char *)sub_100010478((uint64_t)v84, v66, v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v55 = "Received response to request for metadata for domain %{public}s";
        goto LABEL_15;
      }
    }
    else
    {
      os_log_type_t v49 = static os_log_type_t.fault.getter();
      uint64_t v50 = *(NSObject **)(v28 + 16);
      os_log_type_t v51 = v49;
      if (os_log_type_enabled(v50, v49))
      {
        uint64_t v52 = v86;
        swift_bridgeObjectRetain_n();
        uint64_t v53 = swift_slowAlloc();
        uint64_t v87 = (char *)v48;
        uint64_t v54 = (uint8_t *)v53;
        v90[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 136315138;
        uint64_t v85 = (uint64_t)(v54 + 4);
        swift_bridgeObjectRetain();
        uint64_t v89 = (char *)sub_100010478((uint64_t)v84, v52, v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v55 = "Binary registered as metadata provider for domain %s does not have required entitlement";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v50, v51, v55, v54, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        ((void (*)(char *, uint64_t))v87)(v23, v17);
        return swift_release();
      }
    }
    v48(v23, v17);
    return swift_release();
  }
  uint64_t v29 = v87;
  uint64_t v30 = v85;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v87, v26, v85);
  swift_beginAccess();
  if (!*(void *)(*(void *)(v28 + 80) + 16)
    || (swift_bridgeObjectRetain(), sub_1000623F0(), char v32 = v31, swift_bridgeObjectRelease(), (v32 & 1) == 0))
  {
    os_log_type_t v56 = static os_log_type_t.error.getter();
    uint64_t v57 = *(NSObject **)(v28 + 16);
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v58(v9, v29, v30);
    os_log_type_t v59 = v56;
    if (os_log_type_enabled(v57, v56))
    {
      uint64_t v83 = v6;
      uint64_t v60 = v86;
      swift_bridgeObjectRetain_n();
      uint64_t v61 = swift_slowAlloc();
      uint64_t v81 = (char *)swift_slowAlloc();
      uint64_t v89 = v81;
      *(_DWORD *)uint64_t v61 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v88 = sub_100010478((uint64_t)v84, v60, (uint64_t *)&v89);
      os_log_t v84 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v61 + 12) = 2080;
      v58(v82, v9, v30);
      uint64_t v62 = String.init<A>(describing:)();
      uint64_t v88 = sub_100010478(v62, v63, (uint64_t *)&v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v64 = *(void (**)(char *, uint64_t))(v83 + 8);
      v64(v9, v30);
      _os_log_impl((void *)&_mh_execute_header, v84, v59, "Received error response to request for metadata for domain %{public}s from now-unregistered subscriber: %s. Not retrying", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      v64(v87, v30);
    }
    else
    {
      Swift::String v68 = *(void (**)(char *, uint64_t))(v6 + 8);
      v68(v9, v30);
      v68(v29, v30);
    }
    return swift_release();
  }
  unint64_t v33 = v82;
  static XPCError.connectionInvalid.getter();
  sub_10004DD88(&qword_100096E38, (void (*)(uint64_t))&type metadata accessor for XPCError);
  char v34 = static _Error.~= infix(_:_:)();
  os_log_type_t v78 = *(void (**)(char *, uint64_t))(v6 + 8);
  v78(v33, v30);
  os_log_type_t v35 = static os_log_type_t.error.getter();
  os_log_t v79 = *(os_log_t *)(v28 + 16);
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  if (v34)
  {
    uint64_t v37 = v80;
    v36(v80, v29, v30);
    if (os_log_type_enabled(v79, v35))
    {
      LODWORD(v83) = v35;
      uint64_t v38 = v86;
      swift_bridgeObjectRetain_n();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v81 = (char *)swift_slowAlloc();
      uint64_t v89 = v81;
      *(_DWORD *)uint64_t v39 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v88 = sub_100010478((uint64_t)v84, v38, (uint64_t *)&v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v39 + 12) = 2080;
      char v40 = v37;
      uint64_t v41 = v37;
      uint64_t v42 = v85;
      v36(v33, v41, v85);
      uint64_t v43 = String.init<A>(describing:)();
      uint64_t v88 = sub_100010478(v43, v44, (uint64_t *)&v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = v40;
      uint64_t v46 = v78;
      v78(v45, v42);
      _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v83, "Received XPC_ERRROR_CONNECTION_INVALID response to request for metadata for domain %{public}s: %s. Not retrying", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      v46(v87, v42);
    }
    else
    {
      int v76 = v37;
      Swift::String v77 = v78;
      v78(v76, v30);
      v77(v29, v30);
    }
    return swift_release();
  }
  os_log_type_t v69 = v81;
  v36(v81, v29, v30);
  BOOL v70 = os_log_type_enabled(v79, v35);
  uint64_t v71 = v86;
  if (v70)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v72 = swift_slowAlloc();
    uint64_t v80 = (char *)swift_slowAlloc();
    uint64_t v89 = v80;
    *(_DWORD *)uint64_t v72 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v88 = sub_100010478((uint64_t)v84, v86, (uint64_t *)&v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v72 + 12) = 2080;
    v36(v33, v69, v85);
    uint64_t v73 = String.init<A>(describing:)();
    uint64_t v88 = sub_100010478(v73, v74, (uint64_t *)&v89);
    uint64_t v30 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v75 = (uint64_t (*)(char *, uint64_t))v78;
    v78(v69, v30);
    _os_log_impl((void *)&_mh_execute_header, v79, v35, "Received error response to request for metadata for domain %{public}s: %s. Retrying", (uint8_t *)v72, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v71 = v86;
    uint64_t v29 = v87;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v75 = (uint64_t (*)(char *, uint64_t))v78;
    v78(v69, v30);
  }
  sub_10004C4F4(v83, v84, v71);
  swift_release();
  return v75(v29, v30);
}

uint64_t sub_10004D45C()
{
  os_log_type_t v1 = static os_log_type_t.fault.getter();
  uint64_t v2 = *(NSObject **)(v0 + 16);
  os_log_type_t v3 = v1;
  uint64_t result = os_log_type_enabled(v2, v1);
  if (result)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = (uint8_t *)sub_100014750();
    uint64_t v8 = sub_100015720();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_errorRetain();
    sub_1000153C0(&qword_100095A00);
    uint64_t v6 = String.init<A>(describing:)();
    sub_100010478(v6, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received error from metadata XPC event publisher: %s", v5, 0xCu);
    swift_arrayDestroy();
    sub_1000120B0();
    return sub_1000120B0();
  }
  return result;
}

uint64_t sub_10004D5A8()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_1000408C4(*(void *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10004D600()
{
  sub_10004D5A8();

  return _swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for AuxiliaryMetadataService()
{
  return self;
}

uint64_t sub_10004D660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AuxiliaryMetadataItem();
  uint64_t v64 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v60 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v53 - v7;
  uint64_t v9 = sub_1000153C0(&qword_100096BB0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v53 - v14;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v61 = 0;
  uint64_t v56 = a1;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v17 = a1 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = 1 << *(unsigned char *)(v17 - 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v16;
  uint64_t v63 = v64 + 16;
  uint64_t v57 = (void (**)(char *, uint64_t))(v64 + 8);
  uint64_t v58 = (void (**)(char *, char *, uint64_t))(v64 + 32);
  uint64_t v54 = v17;
  int64_t v55 = (unint64_t)(v19 + 63) >> 6;
  int64_t v53 = v55 - 1;
  uint64_t v22 = (uint64_t *)&unk_100096BB8;
  uint64_t v59 = a2;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      uint64_t v24 = (v21 - 1) & v21;
      unint64_t v25 = v23 | (v61 << 6);
LABEL_8:
      uint64_t v26 = *(void *)(v56 + 56);
      uint64_t v27 = (void *)(*(void *)(v56 + 48) + 16 * v25);
      uint64_t v28 = v27[1];
      *(void *)uint64_t v12 = *v27;
      *((void *)v12 + 1) = v28;
      uint64_t v29 = v64;
      uint64_t v30 = v26 + *(void *)(v64 + 72) * v25;
      uint64_t v31 = sub_1000153C0(v22);
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(&v12[*(int *)(v31 + 48)], v30, v4);
      sub_100015C34((uint64_t)v12, 0, 1, v31);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    int64_t v32 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v32 < v55)
    {
      unint64_t v33 = *(void *)(v54 + 8 * v32);
      if (v33) {
        goto LABEL_12;
      }
      int64_t v34 = v61 + 2;
      ++v61;
      if (v32 + 1 < v55)
      {
        unint64_t v33 = *(void *)(v54 + 8 * v34);
        if (v33) {
          goto LABEL_15;
        }
        int64_t v61 = v32 + 1;
        if (v32 + 2 < v55)
        {
          unint64_t v33 = *(void *)(v54 + 8 * (v32 + 2));
          if (v33)
          {
            v32 += 2;
            goto LABEL_12;
          }
          int64_t v61 = v32 + 2;
          if (v32 + 3 < v55)
          {
            unint64_t v33 = *(void *)(v54 + 8 * (v32 + 3));
            if (v33)
            {
              v32 += 3;
              goto LABEL_12;
            }
            int64_t v34 = v32 + 4;
            int64_t v61 = v32 + 3;
            if (v32 + 4 < v55) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v35 = sub_1000153C0(v22);
    sub_100015C34((uint64_t)v12, 1, 1, v35);
    uint64_t v24 = 0;
LABEL_30:
    sub_100040B14((uint64_t)v12, (uint64_t)v15, &qword_100096BB0);
    uint64_t v36 = sub_1000153C0(v22);
    int v37 = sub_100015C0C((uint64_t)v15, 1, v36);
    BOOL v62 = v37 == 1;
    if (v37 == 1) {
      return v62;
    }
    unint64_t v38 = v24;
    uint64_t v39 = v22;
    char v40 = v15;
    (*v58)(v8, &v15[*(int *)(v36 + 48)], v4);
    uint64_t v41 = v59;
    uint64_t v42 = v8;
    unint64_t v43 = sub_1000155A8();
    char v45 = v44;
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0)
    {
      (*v57)(v42, v4);
      return 0;
    }
    uint64_t v46 = *(void *)(v41 + 56);
    uint64_t v47 = v4;
    uint64_t v48 = v12;
    uint64_t v49 = v64;
    uint64_t v50 = v60;
    (*(void (**)(char *, unint64_t, uint64_t))(v64 + 16))(v60, v46 + *(void *)(v64 + 72) * v43, v47);
    sub_10004DD88(&qword_100096E58, (void (*)(uint64_t))&type metadata accessor for AuxiliaryMetadataItem);
    char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v52 = *(void (**)(char *, uint64_t))(v49 + 8);
    uint64_t v12 = v48;
    uint64_t v4 = v47;
    v52(v50, v47);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v52)(v42, v47);
    uint64_t v8 = v42;
    uint64_t v15 = v40;
    uint64_t v22 = v39;
    unint64_t v21 = v38;
    if ((v51 & 1) == 0) {
      return v62;
    }
  }
  unint64_t v33 = *(void *)(v54 + 8 * v34);
  if (v33)
  {
LABEL_15:
    int64_t v32 = v34;
LABEL_12:
    uint64_t v24 = (v33 - 1) & v33;
    unint64_t v25 = __clz(__rbit64(v33)) + (v32 << 6);
    int64_t v61 = v32;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v32 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v32 >= v55)
    {
      int64_t v61 = v53;
      goto LABEL_29;
    }
    unint64_t v33 = *(void *)(v54 + 8 * v32);
    ++v34;
    if (v33) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10004DB88()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004DBC0()
{
  uint64_t v1 = type metadata accessor for XPCEventPublisher.Token();
  sub_100013814();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 40) & ~v6;
  uint64_t v8 = v6 | 7;
  unint64_t v9 = ((*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return _swift_deallocObject(v0, v9, v8);
}

uint64_t sub_10004DC78(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for XPCEventPublisher.Token() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10004C8A8(a1, v4, v5, v6, v7);
}

unint64_t sub_10004DD1C()
{
  unint64_t result = qword_100096990;
  if (!qword_100096990)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100096990);
  }
  return result;
}

uint64_t sub_10004DD5C()
{
  return sub_10004AE5C();
}

uint64_t sub_10004DD64()
{
  return sub_10004AEBC();
}

uint64_t sub_10004DD6C(uint64_t a1)
{
  return sub_10004AF1C(a1);
}

uint64_t sub_10004DD88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_10004DDD0()
{
  nw_error_domain_t error_domain = nw_error_get_error_domain(v0);
  if (error_domain - 2 >= 2)
  {
    if (error_domain != nw_error_domain_posix
      || (nw_error_get_error_code(v0), uint64_t v8 = POSIXErrorCode.init(rawValue:)(), (v8 & 0x100000000) != 0))
    {
      type metadata accessor for RemotePairingError();
      sub_10000D9E4((unint64_t *)&unk_1000959D0);
      uint64_t v14 = swift_allocError();
      sub_10000D9E4((unint64_t *)&unk_1000953D0);
      static Error<>.unknown.getter();
    }
    else
    {
      int v9 = v8;
      uint64_t v10 = type metadata accessor for POSIXError();
      uint64_t v11 = *(void *)(v10 - 8);
      __chkstk_darwin();
      uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      v15[3] = v9;
      sub_10004E880((uint64_t)&_swiftEmptyArrayStorage);
      sub_10004E9AC();
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v14 = POSIXError._nsError.getter();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    return (id)v14;
  }
  else
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;
    uint64_t error_code = nw_error_get_error_code(v0);
    id v6 = objc_allocWithZone((Class)NSError);
    return sub_10004E7D0(v2, v4, error_code, 0);
  }
}

void OS_nw_connection.send(content:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = NWCreateDispatchDataFromNSData();

  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a5;
  v13[3] = v5;
  v13[4] = a1;
  v13[5] = a2;
  void v13[6] = a3;
  v13[7] = a4;
  _DWORD v15[4] = sub_10004E560;
  v15[5] = v13;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10000CA98;
  v15[3] = &unk_10008C8B8;
  uint64_t v14 = _Block_copy(v15);
  swift_unknownObjectRetain();
  sub_100015BB4(a1, a2);
  swift_retain();
  swift_release();
  nw_connection_send(v5, v12, _nw_content_context_default_message, 1, v14);
  _Block_release(v14);
}

void OS_nw_connection.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v7[4] = sub_10004E7C8;
  v7[5] = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_10000D348;
  v7[3] = &unk_10008C958;
  id v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  nw_connection_receive_message(v2, v6);
  _Block_release(v6);
}

uint64_t sub_10004E1F4()
{
  uint64_t v1 = nw_protocol_copy_quic_definition();
  uint64_t v2 = nw_connection_copy_protocol_metadata(v0, v1);
  uint64_t result = swift_unknownObjectRelease();
  if (v2)
  {
    int stream_type = nw_quic_get_stream_type(v2);
    swift_unknownObjectRelease();
    return stream_type == 3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004E25C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, void (*a5)(id))
{
  if (a1)
  {
    swift_unknownObjectRetain();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    uint64_t v10 = qword_1000986F0;
    os_log_type_t v11 = v9;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v9))
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_100015BB4(a3, a4);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_100015BB4(a3, a4);
      uint64_t v12 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446722;
      id v13 = [a2 description];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      log = v10;
      uint64_t v16 = v15;

      sub_100010478(v14, v16, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2048;
      Data.count.getter();
      sub_1000158A8(a3, a4);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000158A8(a3, a4);
      *(_WORD *)(v12 + 22) = 2080;
      swift_unknownObjectRetain();
      sub_1000153C0(&qword_100096EA8);
      uint64_t v17 = String.init<A>(describing:)();
      sub_100010478(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v11, "%{public}s: Error sending %ld bytes of data %s", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_unknownObjectRelease();
    id v19 = sub_10004DDD0();
  }
  else
  {
    id v19 = 0;
  }
  a5(v19);
  return swift_errorRelease();
}

uint64_t sub_10004E518()
{
  swift_unknownObjectRelease();
  sub_1000158A8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10004E560(uint64_t a1)
{
  return sub_10004E25C(a1, *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void (**)(id))(v1 + 48));
}

uint64_t sub_10004E570()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004E5B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for RemotePairingError();
  __chkstk_darwin(v8);
  if (a1
    && (unint64_t v17 = sub_10000D9A4(),
        *(void *)&long long v16 = a1,
        sub_10001673C(&v16, v18),
        sub_10001673C(v18, &v16),
        id v9 = a1,
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v10 = 0;
    uint64_t v12 = v14;
    unint64_t v11 = v15;
  }
  else
  {
    if (a4)
    {
      swift_unknownObjectRetain();
      uint64_t v12 = (uint64_t)sub_10004DDD0();
      swift_unknownObjectRelease();
    }
    else
    {
      sub_10000D9E4((unint64_t *)&unk_1000953D0);
      static Error<>.dataCorrupted.getter();
      sub_10000D9E4((unint64_t *)&unk_1000959D0);
      uint64_t v12 = swift_allocError();
      Error<>.init(_:_:)();
    }
    unint64_t v11 = 0;
    uint64_t v10 = 1;
  }
  a5(v12, v11, v10);
  return sub_10000D998(v12, v11, v10);
}

uint64_t sub_10004E790()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004E7C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004E5B0(a1, a2, a3, a4, *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16));
}

id sub_10004E7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }
  id v9 = [v4 initWithDomain:v7 code:a3 userInfo:v8.super.isa];

  return v9;
}

unint64_t sub_10004E880(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000153C0(&qword_100096E88);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10004EA68(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10004E9F0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10001673C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004E9AC()
{
  unint64_t result = qword_1000959E0;
  if (!qword_1000959E0)
  {
    type metadata accessor for POSIXError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000959E0);
  }
  return result;
}

unint64_t sub_10004E9F0(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10004EAD0(a1, a2, v4);
}

uint64_t sub_10004EA68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0(&qword_100096E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004EAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

id sub_10004EC20()
{
  type metadata accessor for ControlChannelConnection();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = [self bundleForClass:ObjCClassFromMetadata];
  qword_100098718 = (uint64_t)result;
  return result;
}

uint64_t sub_10004EC78()
{
  return String.init(format:arguments:)();
}

BOOL sub_10004ECA0(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_10004ECAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_10004ED00()
{
  if (nw_connection_copy_current_path(*(nw_connection_t *)(v0
                                                          + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection)))
  {
    uint64_t v1 = nw_path_copy_interface();
    if (v1)
    {
      nw_interface_get_name(v1);
      String.init(cString:)();
      os_log_type_t v2 = static os_log_type_t.info.getter();
      uint64_t v3 = qword_1000986F0;
      os_log_type_t v4 = v2;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v2))
      {
        swift_bridgeObjectRetain_n();
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v6 = sub_10000D2E0();
        uint64_t v9 = sub_100010478(v6, v7, v8);
        sub_100010F70(v9, v10, v11, v12, v13, v14, v15, v16, v9);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Tunnel connection path interface name: %s", v5, 0xCu);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  return sub_10000D2E0();
}

uint64_t sub_10004EE88(uint64_t a1, char a2, uint64_t a3)
{
  *(_OWORD *)(v3 + 16) = xmmword_100075A70;
  *(void *)(v3 + 32) = static IPv6Header.minHeaderLength.getter();
  *(void *)(v3 + 40) = 0x80000;
  type metadata accessor for TunnelConnectionIdentifierCategory();
  Identifier.init()();
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection) = a1;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper__allowLocalConnectionsOnly) = a2;
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_peerConnectionsInfo) = a3;
  return v3;
}

void sub_10004EF24()
{
  sub_100016DF4();
  uint64_t ObjectType = swift_getObjectType();
  OS_nw_connection.send(content:completion:)(v3, v2, v1, v0, ObjectType);
}

void sub_10004EF80()
{
  sub_100016DF4();
  swift_getObjectType();
  OS_nw_connection.receive(minLength:maxLength:peerConnectionInfo:completion:)(v4, v3, *(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_peerConnectionsInfo), v2, v0);
}

void sub_10004EFEC()
{
  nw_connection_cancel(*(nw_connection_t *)(v0
                                          + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
}

void sub_10004F010(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(NSObject **)(v4 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection);
  uint64_t v9 = sub_100010E68();
  swift_weakInit();
  id v19 = sub_1000547DC;
  uint64_t v20 = (void *)v9;
  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256;
  long long v17 = sub_10004F3D4;
  uint64_t v18 = &unk_10008CA38;
  uint64_t v10 = _Block_copy(&v15);
  swift_release();
  nw_connection_set_viability_changed_handler(v8, v10);
  _Block_release(v10);
  uint64_t v11 = sub_100010E68();
  swift_weakInit();
  uint64_t v12 = sub_100010E68();
  swift_unknownObjectWeakInit();
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = v11;
  v13[3] = v12;
  v13[4] = a2;
  v13[5] = a3;
  id v19 = sub_100054854;
  uint64_t v20 = v13;
  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256;
  long long v17 = sub_100017414;
  uint64_t v18 = &unk_10008CAB0;
  uint64_t v14 = _Block_copy(&v15);
  swift_retain();
  swift_release();
  nw_connection_set_state_changed_handler(v8, v14);
  _Block_release(v14);
  nw_connection_set_queue(v8, a1);
  nw_connection_start(v8);
}

uint64_t sub_10004F1F8(char a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if ((a1 & 1) == 0)
    {
      os_log_type_t v4 = static os_log_type_t.error.getter();
      uint64_t v5 = qword_1000986F0;
      os_log_type_t v6 = v4;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v4))
      {
        swift_retain_n();
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v8 = swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 136446210;
        uint64_t v11 = v8;
        sub_1000153C0((uint64_t *)&unk_1000953A0);
        sub_100039728(&qword_1000970A8, (uint64_t *)&unk_1000953A0);
        uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
        sub_100010478(v9, v10, &v11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: Cancelling tunnel connection as it is no longer viable", v7, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      nw_connection_cancel(*(nw_connection_t *)(v3
                                              + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10004F3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_10004F428(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v8 = type metadata accessor for TunnelConnectionState();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v13 = result;
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v15 = Strong;
      switch(a1)
      {
        case 1:
        case 4:
          int v22 = static os_log_type_t.error.getter();
          v21[1] = qword_1000986F0;
          sub_1000153C0(&qword_100095570);
          uint64_t v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = xmmword_100075C50;
          uint64_t v23 = a2;
          swift_unknownObjectRetain();
          sub_1000153C0((uint64_t *)&unk_100096460);
          uint64_t v18 = String.init<A>(describing:)();
          uint64_t v20 = v19;
          *(void *)(v17 + 56) = &type metadata for String;
          *(void *)(v17 + 64) = sub_100016B8C();
          *(void *)(v17 + 32) = v18;
          *(void *)(v17 + 40) = v20;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          goto LABEL_13;
        case 3:
          swift_getObjectType();
          if (sub_10001097C()
            && *(unsigned char *)(v13
                        + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper__allowLocalConnectionsOnly) != 1)
          {
            static os_log_type_t.error.getter();
LABEL_12:
            os_log(_:dso:log:_:_:)();
LABEL_13:
            nw_connection_cancel(v15);
            uint64_t v16 = (unsigned int *)&enum case for TunnelConnectionState.stopped(_:);
          }
          else
          {
            static os_log_type_t.default.getter();
            os_log(_:dso:log:_:_:)();
            uint64_t v16 = (unsigned int *)&enum case for TunnelConnectionState.ready(_:);
          }
          (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *v16, v8);
          a5(v11);
          swift_unknownObjectRelease();
          swift_release();
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          break;
        case 5:
          static os_log_type_t.default.getter();
          goto LABEL_12;
        default:
          static os_log_type_t.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_unknownObjectRelease();
          return swift_release();
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10004F878()
{
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  swift_getMetatypeMetadata();
  v0._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  sub_1000153C0((uint64_t *)&unk_1000953A0);
  sub_100039728(&qword_1000970A8, (uint64_t *)&unk_1000953A0);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x800000010007DF20;
  v3._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  os_log_type_t v4 = (void *)nw_connection_copy_connected_remote_endpoint();
  if (v4)
  {
    id v5 = [v4 description];
    swift_unknownObjectRelease();
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = (void *)0xE600000000000000;
    uint64_t v6 = 0x3E656E6F6E3CLL;
  }
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 32032;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  return 60;
}

uint64_t sub_10004FA44()
{
  sub_100013BC4(*(void *)(v0 + 16), *(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_identifier;
  sub_1000153C0((uint64_t *)&unk_1000953A0);
  sub_100010EF0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10004FACC()
{
  return sub_10005286C((void (*)(void))sub_10004FA44);
}

uint64_t sub_10004FAE4()
{
  return type metadata accessor for NWObjcTunnelConnectionWrapper(0);
}

uint64_t type metadata accessor for NWObjcTunnelConnectionWrapper(uint64_t a1)
{
  return sub_1000314F8(a1, (uint64_t *)&unk_100096EE0);
}

void sub_10004FB0C()
{
  sub_10002041C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10004FBDC()
{
  return sub_10004F878();
}

uint64_t sub_10004FC00@<X0>(uint64_t a1@<X8>)
{
  return sub_100052BE4(&OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_identifier, a1);
}

uint64_t sub_10004FC0C()
{
  return StreamBasedTunnelConnection.send(packets:completion:)();
}

uint64_t sub_10004FC98()
{
  return StreamBasedTunnelConnection.send(controlMessage:completion:)();
}

uint64_t sub_10004FD24()
{
  return StreamBasedTunnelConnection.receivePackets(completion:)();
}

uint64_t sub_10004FDA0()
{
  return StreamBasedTunnelConnection.receiveControlMessage(completion:)();
}

void sub_10004FE1C()
{
}

void sub_10004FE40(NSObject *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10004FE64()
{
  return sub_10004ED00();
}

uint64_t sub_10004FE88(__int16 a1, __int16 a2)
{
  if (a1 == 2) {
    return a2 == 2;
  }
  if (a1 == 3) {
    return a2 == 3;
  }
  if ((a2 & 0xFE) == 2) {
    return 0;
  }
  if (((a1 & 1) == 0) == (a2 & 1)) {
    return 0;
  }
  else {
    return ((a1 & 0x100) == 0) ^ ((unsigned __int16)(a2 & 0x100) >> 8);
  }
}

uint64_t sub_10004FF00(__int16 *a1, __int16 *a2)
{
  return sub_10004FE88(*a1, *a2);
}

uint64_t sub_10004FF0C()
{
  uint64_t v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (!v1)
  {
    LOWORD(stream_usable_datagram_frame_size) = 1280;
    return (unsigned __int16)stream_usable_datagram_frame_size;
  }
  swift_unknownObjectRetain();
  uint64_t v2 = nw_protocol_copy_quic_definition();
  Swift::String v3 = nw_connection_copy_protocol_metadata(v1, v2);
  uint64_t result = swift_unknownObjectRelease();
  if (v3)
  {
    unsigned int stream_usable_datagram_frame_size = nw_quic_get_stream_usable_datagram_frame_size(v3);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    uint64_t v7 = qword_1000986F0;
    os_log_type_t v8 = v6;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v6))
    {
      Swift::String v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Swift::String v9 = 134217984;
      sub_100010F70((uint64_t)v9, v10, (uint64_t)(v9 + 4), (uint64_t)(v9 + 12), v11, v12, v13, v14, stream_usable_datagram_frame_size);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Tunnel MTU datagaram = %ld", v9, 0xCu);
      sub_1000120B0();
    }
    if (!stream_usable_datagram_frame_size)
    {
      type metadata accessor for VirtualInterface();
      LOWORD(stream_usable_datagram_frame_size) = static VirtualInterface.minSupportedMTU.getter();
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return (unsigned __int16)stream_usable_datagram_frame_size;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005004C()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream))
  {
    static os_log_type_t.fault.getter();
    os_log(_:dso:log:_:_:)();
    return 0;
  }
  uint64_t v1 = swift_unknownObjectRetain();
  if (!nw_connection_copy_current_path(v1))
  {
LABEL_9:
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v2 = nw_path_copy_interface();
  if (!v2)
  {
    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  nw_interface_get_name(v2);
  uint64_t v3 = String.init(cString:)();
  uint64_t v5 = v4;
  os_log_type_t v6 = static os_log_type_t.default.getter();
  uint64_t v7 = qword_1000986F0;
  os_log_type_t v8 = v6;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v6))
  {
    swift_bridgeObjectRetain_n();
    Swift::String v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)Swift::String v9 = 136315138;
    swift_bridgeObjectRetain();
    sub_100010478(v3, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Tunnel connection path interface name: %s", v9, 0xCu);
    swift_arrayDestroy();
    sub_1000120B0();
    sub_1000120B0();
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v3;
}

uint64_t sub_100050238()
{
  uint64_t v1 = type metadata accessor for TunnelConnectionState();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t result = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = *(unsigned __int8 *)(v0 + 16);
  if (v6 == 3)
  {
    os_log_type_t v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
    Swift::String v9 = *(void (**)(char *))(v0
                                       + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
    if (v9)
    {
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for TunnelConnectionState.stopped(_:), v1);
      swift_retain();
      v9(v5);
      sub_1000408C4((uint64_t)v9);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      uint64_t v10 = *v8;
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t *v8 = 0;
    v8[1] = 0;
    return sub_1000408C4(v10);
  }
  else if (v6 == 2)
  {
    uint64_t v7 = *(void (**)(char *))(v0
                                       + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
    if (v7)
    {
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for TunnelConnectionState.ready(_:), v1);
      swift_retain();
      v7(v5);
      sub_1000408C4((uint64_t)v7);
      return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }
  }
  return result;
}

uint64_t sub_100050400(uint64_t a1, char a2, uint64_t a3)
{
  type metadata accessor for TunnelConnectionIdentifierCategory();
  Identifier.init()();
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream) = 0;
  uint64_t v7 = (void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
  *uint64_t v7 = 0;
  v7[1] = 0;
  *(_WORD *)(v3 + 16) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group) = a1;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection__allowLocalConnectionsOnly) = a2;
  *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_peerConnectionsInfo) = a3;
  return v3;
}

void sub_1000504B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for TunnelPacket();
  sub_100013814();
  uint64_t v50 = v8;
  __chkstk_darwin(v9);
  sub_1000120E0();
  uint64_t v49 = v10;
  uint64_t v11 = sub_1000153C0(&qword_1000970E8);
  sub_100010EF0();
  __chkstk_darwin(v12);
  sub_1000120E0();
  uint64_t v47 = v13;
  uint64_t v14 = sub_1000153C0((uint64_t *)&unk_1000970F0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (unint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  int64_t v53 = (char *)&v43 - v18;
  uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (v19)
  {
    unint64_t v20 = *(void *)(a1 + 16);
    if (v20 >> 60)
    {
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      sub_100013898();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t v44 = a2;
      uint64_t v45 = a3;
      uint64_t v43 = v19;
      swift_unknownObjectRetain_n();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v46 = v50 + 16;
      uint64_t v54 = (void (**)(uint64_t, char *, uint64_t))(v50 + 32);
      char v51 = (void (**)(uint64_t, uint64_t))(v50 + 8);
      uint64_t v52 = v21;
      uint64_t v48 = a1;
      swift_bridgeObjectRetain();
      unint64_t v22 = 0;
      for (uint64_t i = v49; ; uint64_t i = v33)
      {
        uint64_t v24 = v53;
        if (v22 == v20)
        {
          uint64_t v25 = 1;
          unint64_t v22 = v20;
        }
        else
        {
          if (v22 >= v20)
          {
            __break(1u);
            goto LABEL_16;
          }
          uint64_t v26 = v50;
          uint64_t v27 = v47 + *(int *)(v11 + 48);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v50 + 16))(v27, v48+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v22, v7);
          uint64_t v28 = (char *)v17 + *(int *)(v11 + 48);
          *uint64_t v17 = v22;
          uint64_t v29 = v27;
          uint64_t i = v49;
          (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v28, v29, v7);
          uint64_t v25 = 0;
          ++v22;
        }
        sub_100015C34((uint64_t)v17, v25, 1, v11);
        sub_100054CF4((uint64_t)v17, (uint64_t)v24);
        if (sub_100015C0C((uint64_t)v24, 1, v11) == 1) {
          break;
        }
        unint64_t v30 = v20;
        uint64_t v31 = v24;
        uint64_t v32 = *(void *)v24;
        (*v54)(i, &v31[*(int *)(v11 + 48)], v7);
        uint64_t v33 = i;
        TunnelPacket.packetData.getter();
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v35 = sub_10000D2E0();
        sub_1000158A8(v35, v36);
        uint64_t v37 = NWCreateDispatchDataFromNSData();

        if (!v37) {
          goto LABEL_17;
        }
        unint64_t v38 = v51;
        *(void *)(v52 + 8 * v32) = v37;
        (*v38)(v33, v7);
        unint64_t v20 = v30;
      }
      uint64_t v39 = v48;
      swift_bridgeObjectRelease();
      if (HIDWORD(v20)) {
        goto LABEL_18;
      }
      char v40 = (void *)swift_allocObject();
      _OWORD v40[2] = v52;
      v40[3] = v39;
      uint64_t v41 = v45;
      v40[4] = v44;
      v40[5] = v41;
      void aBlock[4] = sub_100054D94;
      aBlock[5] = v40;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004ECAC;
      aBlock[3] = &unk_10008CD30;
      uint64_t v42 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      nw_connection_write_multiple();
      swift_unknownObjectRelease_n();
      _Block_release(v42);
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
  }
}

uint64_t sub_100050928(int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  sub_10000D9A4();
  swift_arrayDestroy();
  swift_slowDealloc();
  if (a1)
  {
    uint64_t v6 = type metadata accessor for POSIXError();
    uint64_t v7 = *(void *)(v6 - 8);
    __chkstk_darwin(v6);
    uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    Dictionary.init(dictionaryLiteral:)();
    POSIXError.init(uncheckedCode:userInfo:)();
    uint64_t v10 = POSIXError._nsError.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    uint64_t v10 = 0;
  }
  a4(v10);
  return swift_errorRelease();
}

uint64_t sub_100050A9C()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream))
  {
    sub_100015670();
    type metadata accessor for NWObjcTunnelConnectionWrapper(0);
    sub_100054860((unint64_t *)&unk_1000970C0, (void (*)(uint64_t))type metadata accessor for NWObjcTunnelConnectionWrapper);
    swift_retain();
    StreamBasedTunnelConnection.send(controlMessage:completion:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100050B6C()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream))
  {
    sub_100015670();
    uint64_t v3 = sub_100010E68();
    *(void *)(v3 + 16) = &_swiftEmptyArrayStorage;
    uint64_t v4 = sub_100010E68();
    swift_weakInit();
    uint64_t v5 = (void *)swift_allocObject();
    v5[2] = v4;
    v5[3] = v2;
    v5[4] = v1;
    v5[5] = v3;
    v8[4] = sub_100054CA0;
    void v8[5] = v5;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_10000D348;
    v8[3] = &unk_10008CCE0;
    uint64_t v6 = _Block_copy(v8);
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_release();
    nw_connection_receive_multiple();
    swift_unknownObjectRelease_n();
    _Block_release(v6);
    return swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    return os_log(_:dso:log:_:_:)();
  }
}

uint64_t sub_100050CF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v42 = a8;
  uint64_t v45 = a7;
  uint64_t v46 = a6;
  LODWORD(v44) = a3;
  uint64_t v10 = type metadata accessor for TunnelPacket();
  uint64_t v43 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for RemotePairingError();
  __chkstk_darwin(v13);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = result;
    if (a2 && nw_content_context_get_is_wake_packet())
    {
      os_log_type_t v16 = static os_log_type_t.default.getter();
      uint64_t v17 = powerLog.getter();
      if (os_log_type_enabled(v17, v16))
      {
        swift_retain_n();
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        v48[0] = v41;
        int v40 = v16;
        *(_DWORD *)uint64_t v18 = 136315138;
        v38[1] = v18 + 4;
        uint64_t v39 = v18;
        uint64_t v47 = *(void *)(v15 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_peerConnectionsInfo);
        swift_bridgeObjectRetain();
        sub_1000153C0(&qword_100096EA0);
        uint64_t v19 = String.init<A>(describing:)();
        uint64_t v47 = sub_100010478(v19, v20, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v40, "Received a wake packet from: %s", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    if (a4)
    {
      uint64_t v21 = type metadata accessor for NWError();
      uint64_t v22 = *(void *)(v21 - 8);
      __chkstk_darwin(v21);
      uint64_t v24 = (char *)v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_unknownObjectRetain_n();
      NWError.init(_:)();
      sub_100054CAC((unint64_t *)&unk_1000970D0, (void (*)(uint64_t))&type metadata accessor for NWError);
      uint64_t v25 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v26, v24, v21);
      v46(v25, 1);
      swift_errorRelease();
      swift_unknownObjectRelease();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    }
    else
    {
      uint64_t v27 = NWCreateNSDataFromDispatchData();
      if (v27)
      {
        uint64_t v28 = (void *)v27;
        uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        sub_100015BB4(v29, v31);
        TunnelPacket.init(data:)();
        uint64_t v33 = (uint64_t *)(v42 + 16);
        swift_beginAccess();
        sub_100052F60();
        uint64_t v34 = *(void *)(*v33 + 16);
        sub_1000530BC(v34);
        uint64_t v35 = *v33;
        *(void *)(v35 + 16) = v34 + 1;
        uint64_t v36 = v43;
        (*(void (**)(unint64_t, char *, uint64_t))(v43 + 16))(v35+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v34, v12, v10);
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v10);
        if (v44)
        {
          swift_beginAccess();
          uint64_t v37 = swift_bridgeObjectRetain();
          v46(v37, 0);
          swift_release();
          sub_1000158A8(v29, v31);
          return swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
          return sub_1000158A8(v29, v31);
        }
      }
      else
      {
        sub_100054860((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        static Error<>.dataCorrupted.getter();
        sub_100054860((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        uint64_t v32 = swift_allocError();
        Error<>.init(_:_:)();
        v46(v32, 1);
        swift_errorRelease();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_100051440()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream))
  {
    type metadata accessor for NWObjcTunnelConnectionWrapper(0);
    sub_100054860((unint64_t *)&unk_1000970C0, (void (*)(uint64_t))type metadata accessor for NWObjcTunnelConnectionWrapper);
    swift_retain();
    StreamBasedTunnelConnection.receiveControlMessage(completion:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10005150C()
{
  nw_connection_group_cancel(*(nw_connection_group_t *)(v0
                                                      + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group));
  uint64_t v1 = OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream);
  if (v2) {
    nw_connection_cancel(*(nw_connection_t *)(v2
  }
                                            + OBJC_IVAR____TtC20remotepairingdeviced29NWObjcTunnelConnectionWrapper_connection));
  uint64_t v3 = OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream;
  uint64_t v4 = *(NSObject **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream);
  if (v4) {
    nw_connection_cancel(v4);
  }
  *(void *)(v0 + v1) = 0;
  swift_release();
  *(void *)(v0 + v3) = 0;
  swift_unknownObjectRelease();
  *(_WORD *)(v0 + 16) = 3;

  return sub_100050238();
}

void sub_1000515A4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v7 + 2) = a1;
  *((void *)v7 + 3) = a2;
  *((void *)v7 + 4) = a3;
  uint64_t v8 = (uint64_t (**)(uint64_t))(v3
                                        + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
  uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler);
  uint64_t *v8 = sub_1000548E8;
  v8[1] = v7;
  id v10 = a1;
  swift_retain();
  sub_1000408C4(v9);
  uint64_t v11 = OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group;
  uint64_t v12 = *(NSObject **)(v3 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_group);
  uint64_t v13 = sub_100010E68();
  swift_weakInit();
  uint64_t v14 = sub_100010E68();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  *(void *)(v15 + 24) = v14;
  uint64_t v26 = sub_10005490C;
  uint64_t v27 = v15;
  uint64_t v22 = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_10005216C;
  uint64_t v25 = &unk_10008CB78;
  os_log_type_t v16 = _Block_copy(&v22);
  swift_unknownObjectRetain();
  swift_release();
  nw_connection_group_set_state_changed_handler(v12, v16);
  _Block_release(v16);
  swift_unknownObjectRelease();
  uint64_t v17 = *(NSObject **)(v3 + v11);
  uint64_t v18 = sub_100010E68();
  swift_weakInit();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = v10;
  uint64_t v26 = sub_100054954;
  uint64_t v27 = v19;
  uint64_t v22 = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_10000CA98;
  uint64_t v25 = &unk_10008CBC8;
  uint64_t v20 = _Block_copy(&v22);
  uint64_t v21 = v10;
  swift_unknownObjectRetain();
  swift_release();
  nw_connection_group_set_new_connection_handler(v17, v20);
  _Block_release(v20);
  swift_unknownObjectRelease();
  nw_connection_group_set_queue(*(nw_connection_group_t *)(v3 + v11), v21);
  nw_connection_group_start(*(nw_connection_group_t *)(v3 + v11));
}

uint64_t sub_100051820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[0] = a2;
  uint64_t v7 = type metadata accessor for TunnelConnectionState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  void aBlock[4] = sub_100054BC8;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008CC68;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  os_log_type_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = &_swiftEmptyArrayStorage;
  sub_100054CAC((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_100039728((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_100051B90(int a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = Strong;
      switch(a1)
      {
        case 0:
          if (a2)
          {
            swift_getObjectType();
            sub_10004DDD0();
          }
          else
          {
            type metadata accessor for RemotePairingError();
            sub_100054860((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
            swift_allocError();
            sub_100054860((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
            static Error<>.networkingError.getter();
          }
          os_log_type_t v21 = static os_log_type_t.error.getter();
          uint64_t v22 = qword_1000986F0;
          os_log_type_t v23 = v21;
          if (os_log_type_enabled((os_log_t)qword_1000986F0, v21))
          {
            swift_errorRetain();
            swift_errorRetain();
            uint64_t v24 = (uint8_t *)swift_slowAlloc();
            uint64_t v27 = swift_slowAlloc();
            *(_DWORD *)uint64_t v24 = 136315138;
            swift_errorRetain();
            sub_1000153C0(&qword_100095A00);
            uint64_t v25 = String.init<A>(describing:)();
            sub_100010478(v25, v26, &v27);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "Tunnel connection group invalid state %s", v24, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          nw_connection_group_cancel(v6);
          sub_10005150C();
          swift_unknownObjectRelease();
          swift_release();
          return swift_errorRelease();
        case 1:
        case 2:
          static os_log_type_t.default.getter();
          os_log(_:dso:log:_:_:)();
          goto LABEL_16;
        case 3:
          os_log_type_t v11 = static os_log_type_t.error.getter();
          uint64_t v12 = qword_1000986F0;
          os_log_type_t v13 = v11;
          if (!os_log_type_enabled((os_log_t)qword_1000986F0, v11)) {
            goto LABEL_15;
          }
          swift_unknownObjectRetain_n();
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          uint64_t v27 = swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 136315138;
          swift_unknownObjectRetain();
          sub_1000153C0((uint64_t *)&unk_100096460);
          uint64_t v15 = String.init<A>(describing:)();
          sub_100010478(v15, v16, &v27);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v17 = "Tunnel connection group failed %s";
          goto LABEL_13;
        case 4:
          os_log_type_t v18 = static os_log_type_t.default.getter();
          uint64_t v12 = qword_1000986F0;
          os_log_type_t v13 = v18;
          if (!os_log_type_enabled((os_log_t)qword_1000986F0, v18)) {
            goto LABEL_15;
          }
          swift_unknownObjectRetain_n();
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          uint64_t v27 = swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 136315138;
          swift_unknownObjectRetain();
          sub_1000153C0((uint64_t *)&unk_100096460);
          uint64_t v19 = String.init<A>(describing:)();
          sub_100010478(v19, v20, &v27);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v17 = "Tunnel connection group canceled %s";
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v12, v13, v17, v14, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          break;
        default:
          os_log_type_t v7 = static os_log_type_t.default.getter();
          uint64_t v8 = qword_1000986F0;
          os_log_type_t v9 = v7;
          if (!os_log_type_enabled((os_log_t)qword_1000986F0, v7)) {
            goto LABEL_15;
          }
          unint64_t v10 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)unint64_t v10 = 67109120;
          LODWORD(v27) = a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "Tunnel connection group unknown state %u", v10, 8u);
          break;
      }
      swift_slowDealloc();
LABEL_15:
      nw_connection_group_cancel(v6);
      sub_10005150C();
LABEL_16:
      swift_unknownObjectRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10005216C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000F774(a1, a2, a3);
}

uint64_t sub_100052174(NSObject *a1, uint64_t a2, NSObject *a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_100052218(a1, a3);
    return swift_release();
  }
  return result;
}

void sub_100052218(NSObject *a1, NSObject *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = v3;
  v8[4] = sub_1000549BC;
  void v8[5] = v6;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100017414;
  v8[3] = &unk_10008CC18;
  os_log_type_t v7 = _Block_copy(v8);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_set_state_changed_handler(a1, v7);
  _Block_release(v7);
  nw_connection_set_queue(a1, a2);
  nw_connection_start(a1);
}

uint64_t sub_100052318(int a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  switch(a1)
  {
    case 1:
      goto LABEL_2;
    case 2:
      static os_log_type_t.default.getter();
      return os_log(_:dso:log:_:_:)();
    case 3:
      swift_getObjectType();
      if (sub_10001097C()
        && *(unsigned char *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection__allowLocalConnectionsOnly) != 1)
      {
LABEL_2:
        static os_log_type_t.error.getter();
LABEL_21:
        os_log(_:dso:log:_:_:)();
LABEL_22:
        nw_connection_cancel(a3);
        return sub_10005150C();
      }
      else
      {
        char v12 = sub_10004E1F4();
        os_log_type_t v13 = static os_log_type_t.default.getter();
        uint64_t v14 = qword_1000986F0;
        os_log_type_t v15 = v13;
        if (os_log_type_enabled((os_log_t)qword_1000986F0, v13))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 67109120;
          LODWORD(v28) = v12 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Tunnel stream (datagram=%{BOOL}d) connection established", v16, 8u);
          swift_slowDealloc();
        }
        if (v12)
        {
          *(void *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_datagramStream) = a3;
          swift_unknownObjectRelease();
          if ((*(_WORD *)(a4 + 16) & 0xFE) != 2)
          {
            if ((*(_WORD *)(a4 + 16) & 0x100) != 0) {
              __int16 v17 = 2;
            }
            else {
              __int16 v17 = 1;
            }
            *(_WORD *)(a4 + 16) = v17;
          }
          swift_unknownObjectRetain();
        }
        else
        {
          type metadata accessor for NWObjcTunnelConnectionWrapper(0);
          uint64_t v24 = swift_allocObject();
          uint64_t v25 = swift_unknownObjectRetain();
          sub_10004EE88(v25, 0, 0);
          *(void *)(a4 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_nonDatagramStream) = v24;
          swift_release();
          __int16 v26 = *(_WORD *)(a4 + 16);
          if ((v26 & 0xFE) != 2)
          {
            if (v26) {
              __int16 v27 = 2;
            }
            else {
              __int16 v27 = 256;
            }
            *(_WORD *)(a4 + 16) = v27;
          }
        }
        return sub_100050238();
      }
    case 4:
      os_log_type_t v18 = static os_log_type_t.error.getter();
      uint64_t v19 = qword_1000986F0;
      os_log_type_t v20 = v18;
      if (!os_log_type_enabled((os_log_t)qword_1000986F0, v18)) {
        goto LABEL_22;
      }
      swift_unknownObjectRetain_n();
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v21 = 136315138;
      swift_unknownObjectRetain();
      sub_1000153C0((uint64_t *)&unk_100096460);
      uint64_t v22 = String.init<A>(describing:)();
      sub_100010478(v22, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Tunnel stream connection failed, error: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_19;
    case 5:
      static os_log_type_t.default.getter();
      goto LABEL_21;
    default:
      os_log_type_t v7 = static os_log_type_t.default.getter();
      uint64_t v8 = qword_1000986F0;
      os_log_type_t v9 = v7;
      if (!os_log_type_enabled((os_log_t)qword_1000986F0, v7)) {
        goto LABEL_22;
      }
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 67109120;
      LODWORD(v28) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Tunnel stream unknown connection state %u", v10, 8u);
LABEL_19:
      swift_slowDealloc();
      goto LABEL_22;
  }
}

uint64_t sub_1000527A0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_identifier;
  sub_1000153C0((uint64_t *)&unk_1000953A0);
  sub_100010EF0();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000408C4(*(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_stateChangeHandler));
  return v0;
}

uint64_t sub_100052854()
{
  return sub_10005286C((void (*)(void))sub_1000527A0);
}

uint64_t sub_10005286C(void (*a1)(void))
{
  a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return _swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_1000528C8()
{
  return type metadata accessor for NWQUICTunnelConnection(0);
}

uint64_t type metadata accessor for NWQUICTunnelConnection(uint64_t a1)
{
  return sub_1000314F8(a1, qword_100096FD8);
}

void sub_1000528F0()
{
  sub_10002041C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

_WORD *initializeBufferWithCopyOfBuffer for NWQUICTunnelConnection.State(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NWQUICTunnelConnection.State(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 65283;
    if (a2 + 65283 <= 0xFFFEFFFF) {
      unsigned int v3 = 2;
    }
    else {
      unsigned int v3 = 4;
    }
    if (v2 < 0xFF0000) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x10000) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = *((unsigned __int8 *)a1 + 2);
        if (!*((unsigned char *)a1 + 2)) {
          break;
        }
        return (*a1 | (v5 << 16)) - 65283;
      case 2:
        int v5 = a1[1];
        if (a1[1]) {
          return (*a1 | (v5 << 16)) - 65283;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100052A78);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 16)) - 65283;
      default:
        break;
    }
  }
  unsigned int v7 = *(unsigned __int8 *)a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 1;
  if (v8 <= 1) {
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NWQUICTunnelConnection.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 65283;
  if (a3 + 65283 <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 253;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        break;
      case 2:
        *(_WORD *)(result + 2) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x100052B60);
      case 4:
        *(_DWORD *)(result + 2) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *(unsigned char *)uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_100052B88(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

_WORD *sub_100052BA4(_WORD *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *uint64_t result = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for NWQUICTunnelConnection.State()
{
  return &type metadata for NWQUICTunnelConnection.State;
}

uint64_t sub_100052BD8@<X0>(uint64_t a1@<X8>)
{
  return sub_100052BE4(&OBJC_IVAR____TtC20remotepairingdeviced22NWQUICTunnelConnection_identifier, a1);
}

uint64_t sub_100052BE4@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2 + *a1;
  sub_1000153C0((uint64_t *)&unk_1000953A0);
  sub_100010EF0();
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);

  return v7(a2, v4, v5);
}

void sub_100052C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100052C78()
{
  return sub_100050A9C();
}

uint64_t sub_100052C9C()
{
  return sub_100050B6C();
}

uint64_t sub_100052CC0()
{
  return sub_100051440();
}

uint64_t sub_100052CE4()
{
  return sub_10005150C();
}

void sub_100052D08(void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100052D2C()
{
  return sub_10004FF0C() & 0x1FFFF;
}

uint64_t sub_100052D5C()
{
  return sub_10005004C();
}

uint64_t sub_100052D80()
{
  return sub_100054860((unint64_t *)&unk_100097098, (void (*)(uint64_t))type metadata accessor for NWObjcTunnelConnectionWrapper);
}

uint64_t sub_100052DC8(uint64_t result, unsigned char **a2)
{
  BOOL v2 = *a2;
  *BOOL v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100052DD8(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void sub_100052E14()
{
}

void sub_100052E20()
{
}

void sub_100052E54(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, void *))
{
  sub_100015670();
  uint64_t v7 = *v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *int v3 = v7;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100053308(0, *(void *)(v7 + 16) + 1, 1, v7, v5, v4, a3);
    *int v3 = v9;
  }
}

void sub_100052EC4()
{
}

void sub_100052EF8()
{
}

void sub_100052F04()
{
  uint64_t v1 = *v0;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000533E8();
    *unint64_t v0 = v3;
  }
}

uint64_t sub_100052F60()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v0 = v1;
  if (!result)
  {
    uint64_t result = sub_1000535DC(0, *(void *)(v1 + 16) + 1, 1, v1, &qword_1000970E0, (uint64_t (*)(uint64_t))&type metadata accessor for TunnelPacket, (void (*)(uint64_t))&type metadata accessor for TunnelPacket);
    *unint64_t v0 = result;
  }
  return result;
}

void sub_100052FCC()
{
}

void sub_100052FD8()
{
}

void sub_10005300C()
{
  sub_100013978();
  if (!(v8 ^ v9 | v7))
  {
    sub_100053308(v6 > 1, v1, 1, v3, v4, v2, v5);
    *unint64_t v0 = v10;
  }
}

void sub_100053048()
{
}

void sub_10005307C()
{
}

void sub_100053088()
{
  sub_100013978();
  if (!(v2 ^ v3 | v1))
  {
    sub_1000533E8();
    *unint64_t v0 = v4;
  }
}

uint64_t sub_1000530BC(uint64_t result)
{
  unint64_t v2 = *(void *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    uint64_t result = sub_1000535DC(v2 > 1, result + 1, 1, *v1, &qword_1000970E0, (uint64_t (*)(uint64_t))&type metadata accessor for TunnelPacket, (void (*)(uint64_t))&type metadata accessor for TunnelPacket);
    *char v1 = result;
  }
  return result;
}

void sub_10005311C()
{
  sub_1000160D0();
  if (v3)
  {
    sub_1000163BC();
    if (v4 != v5)
    {
      sub_10001583C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10001697C();
    }
  }
  sub_100015FB0();
  if (v2)
  {
    sub_1000153C0(&qword_100097130);
    unint64_t v6 = (const void *)swift_allocObject();
    sub_100016B28(v6);
    *(void *)(v2 + 16) = v1;
    *(void *)(v2 + 24) = 2 * (v7 / 40);
  }
  if (v0)
  {
    char v8 = (char *)sub_100013C9C();
    sub_100054018(v8, v9, v10);
    sub_100013AD0();
  }
  else
  {
    uint64_t v11 = sub_100015D34();
    sub_1000537E8(v11, v12, v13, v14);
  }
}

uint64_t sub_1000531D8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1000535DC(a1, a2, a3, a4, &qword_100097128, (uint64_t (*)(uint64_t))&type metadata accessor for PairedHostInfo, (void (*)(uint64_t))&type metadata accessor for PairedHostInfo);
}

void sub_1000531FC()
{
  sub_1000160D0();
  if (v2)
  {
    sub_1000163BC();
    if (v3 != v4)
    {
      sub_10001583C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10001697C();
    }
  }
  sub_100015FB0();
  if (v1)
  {
    sub_1000153C0(&qword_100097120);
    char v5 = (const void *)sub_1000147D0();
    sub_100016B28(v5);
    sub_100016F48(v6);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_100013C9C();
    sub_1000540B4(v7, v8, v9);
    sub_100013AD0();
  }
  else
  {
    uint64_t v10 = sub_100015D34();
    sub_100053908(v10, v11, v12, v13);
  }
}

void sub_1000532A0(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1000532D4(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100053308(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    sub_1000163BC();
    if (v12 != v13)
    {
      sub_10001583C();
      if (v12)
      {
        __break(1u);
        return;
      }
      sub_10001697C();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    sub_1000153C0(a5);
    uint64_t v16 = (void *)sub_1000147D0();
    size_t v17 = j__malloc_size(v16);
    v16[2] = v14;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 32);
  }
  else
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
  }
  os_log_type_t v18 = v16 + 4;
  if (a1)
  {
    a7(a4 + 32, v14, v18);
    sub_100013AD0();
  }
  else
  {
    a6(0, v14, v18, a4);
  }
}

void sub_1000533E8()
{
  sub_1000160D0();
  if (v2)
  {
    sub_1000163BC();
    if (v3 != v4)
    {
      sub_10001583C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10001697C();
    }
  }
  sub_100015FB0();
  if (v1)
  {
    sub_1000153C0(v5);
    uint64_t v6 = (const void *)sub_1000147D0();
    sub_100016B28(v6);
    sub_100016F48(v7);
  }
  if (v0)
  {
    uint64_t v8 = (char *)sub_100013C9C();
    sub_1000541A8(v8, v9, v10);
    sub_100013AD0();
  }
  else
  {
    uint64_t v11 = sub_100015D34();
    sub_100053BEC(v11, v12, v13, v14);
  }
}

void sub_100053488()
{
  sub_1000160D0();
  if (v3)
  {
    sub_1000163BC();
    if (v4 != v5)
    {
      sub_10001583C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_10001697C();
    }
  }
  sub_100015FB0();
  if (v2)
  {
    sub_1000153C0(&qword_100097110);
    uint64_t v6 = (void *)swift_allocObject();
    size_t v7 = j__malloc_size(v6);
    _OWORD v6[2] = v1;
    void v6[3] = 2 * v7 - 64;
  }
  if (v0)
  {
    uint64_t v8 = (char *)sub_100013C9C();
    sub_100054204(v8, v9, v10);
    sub_100013AD0();
  }
  else
  {
    uint64_t v11 = sub_100015D34();
    sub_100053CEC(v11, v12, v13, v14);
  }
}

void sub_100053538()
{
  sub_1000160D0();
  if (v2)
  {
    sub_1000163BC();
    if (v3 != v4)
    {
      sub_10001583C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_10001697C();
    }
  }
  sub_100015FB0();
  if (v1)
  {
    sub_1000153C0(&qword_100097118);
    char v5 = (const void *)sub_1000147D0();
    sub_100016B28(v5);
    sub_100016F48(v6);
  }
  if (v0)
  {
    size_t v7 = (char *)sub_100013C9C();
    sub_100054294(v7, v8, v9);
    sub_100013AD0();
  }
  else
  {
    uint64_t v10 = sub_100015D34();
    sub_100053DDC(v10, v11, v12, v13);
  }
}

uint64_t sub_1000535DC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t), void (*a7)(uint64_t))
{
  if (a3)
  {
    sub_1000163BC();
    if (v12 != v13)
    {
      sub_10001583C();
      if (v12)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_10001697C();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    os_log_type_t v20 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_1000153C0(a5);
  uint64_t v16 = sub_100054DD8();
  uint64_t v17 = *(void *)(a6(v16) - 8);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  os_log_type_t v20 = (void *)swift_allocObject();
  size_t v21 = j__malloc_size(v20);
  if (!v18 || (v21 - v19 == 0x8000000000000000 ? (BOOL v22 = v18 == -1) : (BOOL v22 = 0), v22))
  {
LABEL_23:
    sub_100013898();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v20[2] = v14;
  void v20[3] = 2 * ((uint64_t)(v21 - v19) / v18);
LABEL_18:
  uint64_t v23 = sub_100054DD8();
  uint64_t v24 = *(void *)(a6(v23) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v26 = (unint64_t)v20 + v25;
  if (a1)
  {
    sub_100054328(a4 + v25, v14, v26, a7);
    sub_100013AD0();
  }
  else
  {
    sub_100053ED0(0, v14, v26, a4);
  }
  return (uint64_t)v20;
}

uint64_t sub_1000537E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_1000153C0(&qword_100097138);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100053908(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000539FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100053AF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100053BEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_1000153C0(&qword_100096BD0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  sub_100013898();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100053CEC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100053DDC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    unint64_t v6 = &__dst[4 * v4];
    if (v5 >= v6 || &v5[4 * v4] <= __dst)
    {
      memcpy(__dst, v5, 4 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100053ED0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = sub_100054DD8();
    uint64_t v10 = *(void *)(v9(v8) - 8);
    uint64_t v11 = a4 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v12 = *(void *)(v10 + 72);
    unint64_t v13 = v11 + v12 * a1;
    unint64_t v14 = a3 + v12 * v4;
    if (v13 >= v14 || v13 + v12 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v14;
    }
  }
  sub_100013898();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100054018(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *sub_1000540B4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

char *sub_100054148(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100013898();
    uint64_t result = (char *)sub_100015A6C();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100015E1C(a3, result);
  }
  return result;
}

char *sub_1000541A8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100013898();
    uint64_t result = (char *)sub_100015A6C();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100015E1C(a3, result);
  }
  return result;
}

char *sub_100054204(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_100054294(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

void sub_100054328(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t))
{
  if (a2 < 0)
  {
    sub_100013898();
    uint64_t v10 = sub_100015A6C();
    __break(1u);
_swift_arrayInitWithTakeBackToFront:
    _swift_arrayInitWithTakeBackToFront(v10);
    return;
  }
  if (a3 < a1 || (uint64_t v8 = sub_100054DD8(), a4(v8), sub_100010EF0(), a1 + *(void *)(v9 + 72) * a2 <= a3))
  {
    uint64_t v11 = sub_100054DD8();
    a4(v11);
    uint64_t v12 = sub_100016A38();
    _swift_arrayInitWithTakeFrontToBack(v12);
  }
  else if (a3 != a1)
  {
    uint64_t v10 = sub_100016A38();
    goto _swift_arrayInitWithTakeBackToFront;
  }
}

uint64_t sub_10005441C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10005444C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

unsigned char **sub_100054474(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_100054484(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000544AC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100010478(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

void *sub_100054524(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_1000545FC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000153C0((uint64_t *)&unk_1000970B0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100054204(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000546D4(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1000546D4(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t sub_1000547AC()
{
  swift_weakDestroy();
  uint64_t v0 = sub_1000159BC();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000547DC(char a1)
{
  return sub_10004F1F8(a1);
}

uint64_t sub_1000547E4()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = sub_1000159BC();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100054814()
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v0 = sub_100054DE4();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100054854(int a1, uint64_t a2)
{
  return sub_10004F428(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(char *))(v2 + 32));
}

uint64_t sub_100054860(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000548A8()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000548E8(uint64_t a1)
{
  return sub_100051820(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000548F4()
{
  return sub_100054974((void (*)(void))&_swift_release);
}

uint64_t sub_10005490C(int a1, uint64_t a2)
{
  return sub_100051B90(a1, a2);
}

uint64_t sub_100054914()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100054954(NSObject *a1)
{
  return sub_100052174(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_10005495C()
{
  return sub_100054974((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_100054974(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_1000549BC(int a1, uint64_t a2)
{
  return sub_100052318(a1, a2, *(NSObject **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000549C4@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1000549F4(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_100054A20(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100054A48(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v13 = (void *)v6;
  uint64_t v14 = *a1;
  uint64_t v15 = *a1 + 8;
  if (v6) {
    sub_100010F70(v6, v7, v14, v8, v9, v10, v11, v12, v6);
  }
  else {
    sub_100010F70(0, v7, v14, v8, v9, v10, v11, v12, 0);
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v15;
  uint64_t v16 = *a2;
  if (*a2)
  {
    *uint64_t v16 = v13;
    *a2 = v16 + 1;
  }
  else
  {
  }
}

uint64_t sub_100054AF8@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100054B28()
{
  uint64_t v1 = type metadata accessor for TunnelConnectionState();
  sub_100013814();
  uint64_t v3 = v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = v4 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  uint64_t v7 = sub_10000D2E0();

  return _swift_deallocObject(v7, v8, v6);
}

uint64_t sub_100054BC8()
{
  uint64_t v1 = *(void *)(type metadata accessor for TunnelConnectionState() - 8);
  return (*(uint64_t (**)(unint64_t))(v0 + 16))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_100054C30()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_1000159BC();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100054C60()
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v0 = sub_100054DE4();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100054CA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100050CF8(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t, uint64_t))(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40));
}

uint64_t sub_100054CAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100054CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0((uint64_t *)&unk_1000970F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100054D5C()
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v0 = sub_100054DE4();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100054D94(int a1)
{
  return sub_100050928(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_100054DD8()
{
  return 0;
}

uint64_t sub_100054DE4()
{
  return v0;
}

void sub_100054DF4()
{
  sub_100016488();
  sub_10001211C();
  sub_10000D2EC();
  if (v1 == 1)
  {
    dispatch thunk of ControlChannelConnection.start()();
  }
  else
  {
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (sub_100013CA8(v2))
    {
      sub_100016B44();
      sub_100016F58();
      sub_100013990();
      sub_1000575F4();
      uint64_t v3 = sub_1000163CC(4.8751e-34);
      sub_100015848(v3);
      sub_100015A90();
      sub_1000147E8();
      sub_100015FC0((void *)&_mh_execute_header, v4, v5, "Deferring task \"%{public}s\" until after first unlock");
      sub_100013AE8();
      sub_1000120B0();
      sub_1000120B0();
    }
    uint64_t v6 = sub_10001567C();
    *(void *)(v6 + 16) = sub_1000569C0;
    *(void *)(v6 + 24) = v0;
    sub_100015E38();
    swift_retain();
    sub_100052E14();
    sub_100010F80();
    sub_1000161FC();
    *(void *)(v7 + 32) = sub_1000575CC;
    *(void *)(v7 + 40) = v6;
    swift_endAccess();
  }
  sub_100016A4C();
  sub_100013444();
}

void sub_100054F14()
{
  sub_100016488();
  sub_10001211C();
  sub_10000D2EC();
  if (v1 == 1)
  {
    sub_10001BB4C();
  }
  else
  {
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (sub_100013CA8(v2))
    {
      sub_100016B44();
      sub_100016F58();
      sub_100013990();
      sub_1000575F4();
      uint64_t v3 = sub_1000163CC(4.8751e-34);
      sub_100015848(v3);
      sub_100015A90();
      sub_1000147E8();
      sub_100015FC0((void *)&_mh_execute_header, v4, v5, "Deferring task \"%{public}s\" until after first unlock");
      sub_100013AE8();
      sub_1000120B0();
      sub_1000120B0();
    }
    uint64_t v6 = sub_10001567C();
    *(void *)(v6 + 16) = sub_1000575A8;
    *(void *)(v6 + 24) = v0;
    sub_100015E38();
    swift_retain();
    sub_100052E14();
    sub_100010F80();
    sub_1000161FC();
    *(void *)(v7 + 32) = sub_1000575CC;
    *(void *)(v7 + 40) = v6;
    swift_endAccess();
  }
  sub_100016A4C();
  sub_100013444();
}

void sub_100055034()
{
  sub_100016488();
  sub_10001211C();
  sub_10000D2EC();
  if (v1 == 1)
  {
    sub_100017128();
    sub_100045398();
  }
  else
  {
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (sub_100013CA8(v2))
    {
      sub_100016B44();
      sub_100016F58();
      sub_100013990();
      sub_1000575F4();
      uint64_t v3 = sub_1000163CC(4.8751e-34);
      sub_100015848(v3);
      sub_100015A90();
      sub_1000147E8();
      sub_100015FC0((void *)&_mh_execute_header, v4, v5, "Deferring task \"%{public}s\" until after first unlock");
      sub_100013AE8();
      sub_1000120B0();
      sub_1000120B0();
    }
    uint64_t v6 = sub_10001567C();
    *(void *)(v6 + 16) = sub_100057598;
    *(void *)(v6 + 24) = v0;
    sub_100015E38();
    swift_retain();
    sub_100052E14();
    sub_100010F80();
    sub_1000161FC();
    *(void *)(v7 + 32) = sub_1000575CC;
    *(void *)(v7 + 40) = v6;
    swift_endAccess();
  }
  sub_100016A4C();
  sub_100013444();
}

void sub_100055158()
{
  sub_100016488();
  sub_10001211C();
  sub_10000D2EC();
  if (v1 == 1)
  {
    sub_10003C22C();
  }
  else
  {
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (sub_100013CA8(v2))
    {
      sub_100016B44();
      sub_100016F58();
      sub_100013990();
      sub_1000575F4();
      uint64_t v3 = sub_1000163CC(4.8751e-34);
      sub_100015848(v3);
      sub_100015A90();
      sub_1000147E8();
      sub_100015FC0((void *)&_mh_execute_header, v4, v5, "Deferring task \"%{public}s\" until after first unlock");
      sub_100013AE8();
      sub_1000120B0();
      sub_1000120B0();
    }
    uint64_t v6 = sub_10001567C();
    *(void *)(v6 + 16) = sub_1000575A0;
    *(void *)(v6 + 24) = v0;
    sub_100015E38();
    swift_retain();
    sub_100052E14();
    sub_100010F80();
    sub_1000161FC();
    *(void *)(v7 + 32) = sub_1000575CC;
    *(void *)(v7 + 40) = v6;
    swift_endAccess();
  }
  sub_100016A4C();
  sub_100013444();
}

void sub_100055278()
{
  sub_100016488();
  sub_10001211C();
  sub_10000D2EC();
  if (v1 == 1)
  {
    dispatch thunk of ControlChannelConnection.start()();
  }
  else
  {
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (sub_100013CA8(v2))
    {
      sub_100016B44();
      sub_100016F58();
      sub_100013990();
      sub_1000575F4();
      uint64_t v3 = sub_1000163CC(4.8751e-34);
      sub_100015848(v3);
      sub_100015A90();
      sub_1000147E8();
      sub_100015FC0((void *)&_mh_execute_header, v4, v5, "Deferring task \"%{public}s\" until after first unlock");
      sub_100013AE8();
      sub_1000120B0();
      sub_1000120B0();
    }
    uint64_t v6 = sub_10001567C();
    *(void *)(v6 + 16) = sub_1000569C0;
    *(void *)(v6 + 24) = v0;
    sub_100015E38();
    swift_retain();
    sub_100052E14();
    sub_100010F80();
    sub_1000161FC();
    *(void *)(v7 + 32) = sub_1000575CC;
    *(void *)(v7 + 40) = v6;
    swift_endAccess();
  }
  sub_100016A4C();
  sub_100013444();
}

void sub_100055398()
{
  sub_100016488();
  sub_10001211C();
  sub_10000D2EC();
  if (v1 == 1)
  {
    dispatch thunk of ControlChannelConnection.start()();
  }
  else
  {
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (sub_100013CA8(v2))
    {
      sub_100016B44();
      sub_100016F58();
      sub_100013990();
      sub_1000575F4();
      uint64_t v3 = sub_1000163CC(4.8751e-34);
      sub_100015848(v3);
      sub_100015A90();
      sub_1000147E8();
      sub_100015FC0((void *)&_mh_execute_header, v4, v5, "Deferring task \"%{public}s\" until after first unlock");
      sub_100013AE8();
      sub_1000120B0();
      sub_1000120B0();
    }
    uint64_t v6 = sub_10001567C();
    *(void *)(v6 + 16) = sub_1000569C0;
    *(void *)(v6 + 24) = v0;
    sub_100015E38();
    swift_retain();
    sub_100052E14();
    sub_100010F80();
    sub_1000161FC();
    *(void *)(v7 + 32) = sub_100039AB8;
    *(void *)(v7 + 40) = v6;
    swift_endAccess();
  }
  sub_100016A4C();
  sub_100013444();
}

void sub_1000554B8()
{
  uint64_t v1 = OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted) & 1) == 0)
  {
    if (MKBDeviceUnlockedSinceBoot() == 1)
    {
      *(unsigned char *)(v0 + v1) = 1;
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      os_log_type_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__registeredFirstUnlockHandlers);
      swift_beginAccess();
      uint64_t v3 = *v2;
      uint64_t v4 = *(void *)(*v2 + 16);
      if (v4)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = v3 + 40;
        do
        {
          uint64_t v6 = *(void (**)(uint64_t))(v5 - 8);
          uint64_t v7 = swift_retain();
          v6(v7);
          swift_release();
          v5 += 16;
          --v4;
        }
        while (v4);
        swift_bridgeObjectRelease();
      }
      *os_log_type_t v2 = (uint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
    }
    else
    {
      static os_log_type_t.fault.getter();
      os_log(_:dso:log:_:_:)();
    }
  }
}

BOOL sub_1000555F8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  sub_100013814();
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v8);
  uint64_t v9 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000153C0(&qword_100096160);
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  __chkstk_darwin(v10);
  sub_100015954();
  uint64_t v12 = v1 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate;
  swift_beginAccess();
  sub_100056A00(v12, v1);
  if (sub_100015C0C(v1, 1, v3) == 1)
  {
    sub_100056A68(v1);
  }
  else
  {
    sub_100057634();
    v13();
    if (sub_100055FDC(a1))
    {
      uint64_t v14 = static os_log_type_t.debug.getter();
      os_log_type_t v15 = v14;
      uint64_t v16 = qword_1000986F0;
      __chkstk_darwin(v14);
      sub_100015954();
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
      os_log_type_t v17 = v15;
      if (os_log_type_enabled(v16, v15))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        unint64_t v19 = (void **)swift_slowAlloc();
        uint64_t v67 = &v62;
        long long aBlock = v19;
        *(_DWORD *)uint64_t v18 = 136446210;
        uint64_t v66 = (void **)(v18 + 4);
        sub_100057480((unint64_t *)&qword_100095598, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v68 = sub_100010478(v20, v21, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        BOOL v22 = *(void (**)(char *, uint64_t))(v5 + 8);
        v22(v9, v3);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Previously fetched last unlock date %{public}s is still recent", v18, 0xCu);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
        v22(v9, v3);
      }
      else
      {
        int v40 = *(void (**)(char *, uint64_t))(v5 + 8);
        v40(v9, v3);
        v40((char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
      }
      return 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))((char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  }
  unsigned int v23 = MKBGetDeviceLockState();
  if (v23 <= 3 && v23 != 1) {
    return 1;
  }
  if (!&_BiomeLibrary)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    return 0;
  }
  uint64_t v66 = (void **)a1;
  uint64_t v67 = (uint64_t *)v5;
  id v26 = [(id)BiomeLibrary() Device];
  swift_unknownObjectRelease();
  id v27 = [v26 KeybagLocked];
  swift_unknownObjectRelease();
  id v28 = [self reversed];
  id v29 = [v27 publisherWithOptions:v28];

  uint64_t v73 = sub_1000562C8;
  uint64_t v74 = 0;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v70 = 1107296256;
  uint64_t v71 = sub_100045CD4;
  uint64_t v72 = &unk_10008CDA0;
  unint64_t v30 = _Block_copy(&aBlock);
  uint64_t v73 = sub_100056AC8;
  uint64_t v74 = v1;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v70 = 1107296256;
  uint64_t v71 = sub_100056730;
  uint64_t v72 = &unk_10008CDC8;
  unint64_t v31 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v32 = [v29 sinkWithCompletion:v30 shouldContinue:v31];
  _Block_release(v31);
  _Block_release(v30);

  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  sub_100015954();
  sub_100056A00(v12, (uint64_t)v32);
  if (sub_100015C0C((uint64_t)v32, 1, v3) != 1)
  {
    os_log_type_t v65 = &v62;
    uint64_t v41 = v67;
    sub_100057634();
    v42();
    uint64_t v43 = (uint64_t)v66;
    if (!sub_100055FDC((uint64_t)v66))
    {
      os_log_type_t v53 = static os_log_type_t.default.getter();
      uint64_t v54 = qword_1000986F0;
      os_log_type_t v55 = v53;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v53))
      {
        swift_retain_n();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v64 = v35;
        uint64_t v57 = v56;
        uint64_t v58 = (void **)swift_slowAlloc();
        os_log_t v63 = v54;
        long long aBlock = v58;
        *(_DWORD *)uint64_t v57 = 136315394;
        uint64_t v62 = v57 + 4;
        __chkstk_darwin(v58);
        sub_100056A00(v12, (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v59 = String.init<A>(describing:)();
        uint64_t v68 = sub_100010478(v59, v60, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 12) = 2048;
        uint64_t v68 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v63, v55, "Last unlock was at date %s, which is not within %ld", (uint8_t *)v57, 0x16u);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
        ((void (*)(char *, uint64_t))v67[1])(v64, v3);
      }
      else
      {
        ((void (*)(char *, uint64_t))v67[1])(v35, v3);
      }
      return 0;
    }
    uint64_t v44 = static os_log_type_t.info.getter();
    os_log_type_t v45 = v44;
    uint64_t v46 = qword_1000986F0;
    __chkstk_darwin(v44);
    sub_100015954();
    ((void (*)(char *, char *, uint64_t))v41[2])((char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
    os_log_type_t v47 = v45;
    if (os_log_type_enabled(v46, v45))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = (void **)swift_slowAlloc();
      os_log_t v63 = v46;
      long long aBlock = v49;
      *(_DWORD *)uint64_t v48 = 136446466;
      sub_100057480((unint64_t *)&qword_100095598, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v64 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v68 = sub_100010478(v50, v51, (uint64_t *)&aBlock);
      uint64_t v62 = (uint64_t)&v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v52 = (void (*)(void))v41[1];
      sub_100011328();
      v52();
      *(_WORD *)(v48 + 12) = 2048;
      uint64_t v68 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v63, v47, "Last unlock date %{public}s is within %ld", (uint8_t *)v48, 0x16u);
      sub_100013AE8();
      sub_1000120B0();
      sub_1000120B0();
      sub_100011328();
      v52();
    }
    else
    {
      int64_t v61 = (void (*)(void))v41[1];
      sub_100011328();
      v61();
      ((void (*)(char *, uint64_t))v61)((char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
    }
    return 1;
  }
  sub_100056A68((uint64_t)v32);
  os_log_type_t v36 = static os_log_type_t.error.getter();
  uint64_t v37 = qword_1000986F0;
  os_log_type_t v38 = v36;
  BOOL result = os_log_type_enabled((os_log_t)qword_1000986F0, v36);
  if (result)
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 134217984;
    long long aBlock = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Could not find last unlock event. Unable to confirm whether device was unlocked within requested %ld hours. Will return false", v39, 0xCu);
    sub_1000120B0();
    return 0;
  }
  return result;
}

BOOL sub_100055FDC(uint64_t a1)
{
  uint64_t v32 = a1;
  uint64_t v33 = type metadata accessor for Calendar();
  sub_100013814();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Calendar.Identifier();
  sub_100013814();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100013460();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v1, enum case for Calendar.Identifier.gregorian(_:), v7);
  Calendar.init(identifier:)();
  uint64_t v11 = sub_100015F30();
  v12(v11);
  type metadata accessor for DateComponents();
  sub_100013814();
  __chkstk_darwin(v13);
  sub_100013460();
  sub_1000153C0(&qword_1000972A0);
  uint64_t v14 = type metadata accessor for Calendar.Component();
  sub_100013814();
  uint64_t v16 = v15;
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100075C50;
  (*(void (**)(unint64_t, void, uint64_t))(v16 + 104))(v18 + v17, enum case for Calendar.Component.hour(_:), v14);
  sub_10005714C(v18);
  uint64_t v19 = type metadata accessor for Date();
  sub_100013814();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v19);
  uint64_t v25 = DateComponents.hour.getter();
  if (v26)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    BOOL v27 = 0;
  }
  else
  {
    BOOL v27 = v25 < v32;
  }
  uint64_t v28 = sub_100015F30();
  v29(v28);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v33);
  return v27;
}

void sub_1000562C8(void *a1)
{
  id v1 = [a1 error];
  if (v1)
  {
    id v10 = v1;
    os_log_type_t v2 = static os_log_type_t.error.getter();
    uint64_t v3 = qword_1000986F0;
    os_log_type_t v4 = v2;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v2))
    {
      id v5 = v10;
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      id v7 = v5;
      sub_1000153C0(&qword_100095A00);
      uint64_t v8 = String.init<A>(describing:)();
      sub_100010478(v8, v9, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to subscribe for keybag events from Biome due to error: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_100056480(void *a1, uint64_t a2)
{
  id v4 = [a1 eventBody];
  if (!v4) {
    return 1;
  }
  id v5 = v4;
  if ([v4 starting])
  {

    return 1;
  }
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 timestamp];
  uint64_t v11 = Date.init(timeIntervalSinceReferenceDate:)();
  __chkstk_darwin(v11);
  static Date.now.getter();
  sub_100057480(&qword_1000972C0, (void (*)(uint64_t))&type metadata accessor for Date);
  LOBYTE(v9) = dispatch thunk of static Comparable.< infix(_:_:)();

  uint64_t v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  v12(v10, v7);
  if (v9)
  {
    v12(v10, v7);
    return 1;
  }
  else
  {
    uint64_t v13 = sub_1000153C0(&qword_100096160);
    uint64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
    __chkstk_darwin(v13 - 8);
    unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))((char *)&v18 - v15, v10, v7);
    uint64_t v16 = sub_100015C34((uint64_t)&v18 - v15, 0, 1, v7);
    __chkstk_darwin(v16);
    sub_1000574C8((uint64_t)&v18 - v15, (uint64_t)&v18 - v15);
    uint64_t v17 = a2 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate;
    swift_beginAccess();
    sub_100057530((uint64_t)&v18 - v15, v17);
    swift_endAccess();
    return 0;
  }
}

uint64_t sub_100056730(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

uint64_t sub_100056788()
{
  sub_100056A68(v0 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000567FC()
{
  return type metadata accessor for LockStateManager();
}

uint64_t type metadata accessor for LockStateManager()
{
  uint64_t result = qword_100097198;
  if (!qword_100097198) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10005684C()
{
  sub_1000568F4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000568F4()
{
  if (!qword_1000971A8)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000971A8);
    }
  }
}

uint64_t sub_10005694C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__lastUnlockDate;
  uint64_t v2 = type metadata accessor for Date();
  sub_100015C34(v1, 1, 1, v2);
  *(void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager__registeredFirstUnlockHandlers) = &_swiftEmptyArrayStorage;
  uint64_t v3 = OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted;
  *(unsigned char *)(v0 + v3) = MKBDeviceUnlockedSinceBoot() == 1;
  return v0;
}

uint64_t sub_1000569C0()
{
  return sub_100018CB0();
}

uint64_t sub_1000569C8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100056A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0(&qword_100096160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100056A68(uint64_t a1)
{
  uint64_t v2 = sub_1000153C0(&qword_100096160);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100056AC8(void *a1)
{
  return sub_100056480(a1, v1);
}

void sub_100056AD0(uint64_t a1)
{
  unint64_t v3 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_100057648();
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    sub_1000153C0(&qword_1000976D0);
    uint64_t v4 = (void *)sub_100015B6C();
    goto LABEL_9;
  }
  uint64_t v4 = &_swiftEmptySetSingleton;
LABEL_9:
  if (v3)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_100057648();
    if (!v6) {
      goto LABEL_31;
    }
  }
  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_31:
    swift_bridgeObjectRelease();
    return;
  }
  sub_1000160DC();
  while (1)
  {
    if (v13)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v1 >= *(void *)(v11 + 16)) {
        goto LABEL_34;
      }
      swift_retain();
    }
    BOOL v7 = __OFADD__(v1++, 1);
    if (v7) {
      break;
    }
    type metadata accessor for ControlChannelConnection();
    sub_100011FA0(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    sub_100016D40();
    sub_1000575D0();
    if (v9)
    {
LABEL_27:
      sub_100016E08(v8);
      if (v7) {
        goto LABEL_33;
      }
      _OWORD v4[2] = v10;
    }
    else
    {
      sub_100011FA0(&qword_1000972C8, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      while ((sub_1000134D0() & 1) == 0)
      {
        sub_100016578();
        if (v9) {
          goto LABEL_27;
        }
      }
      swift_release();
    }
    if (v1 == v12) {
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

void sub_100056CCC(uint64_t a1)
{
  unint64_t v3 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_100057648();
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    sub_1000153C0(&qword_1000972D0);
    uint64_t v4 = (void *)sub_100015B6C();
    goto LABEL_9;
  }
  uint64_t v4 = &_swiftEmptySetSingleton;
LABEL_9:
  if (v3)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_100057648();
    if (!v6) {
      goto LABEL_31;
    }
  }
  else if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_31:
    swift_bridgeObjectRelease();
    return;
  }
  sub_1000160DC();
  while (1)
  {
    if (v13)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v1 >= *(void *)(v11 + 16)) {
        goto LABEL_34;
      }
      swift_retain();
    }
    BOOL v7 = __OFADD__(v1++, 1);
    if (v7) {
      break;
    }
    type metadata accessor for SystemXPCPeerConnection();
    sub_100011FA0(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    sub_100016D40();
    sub_1000575D0();
    if (v9)
    {
LABEL_27:
      sub_100016E08(v8);
      if (v7) {
        goto LABEL_33;
      }
      _OWORD v4[2] = v10;
    }
    else
    {
      sub_100011FA0((unint64_t *)&unk_100097730, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
      while ((sub_1000134D0() & 1) == 0)
      {
        sub_100016578();
        if (v9) {
          goto LABEL_27;
        }
      }
      swift_release();
    }
    if (v1 == v12) {
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

void sub_100056EC8(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    unint64_t v3 = &_swiftEmptySetSingleton;
    goto LABEL_6;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_3:
  sub_1000153C0(&qword_100097780);
  unint64_t v3 = (unsigned char *)sub_100015B6C();
LABEL_6:
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      goto LABEL_25;
    }
  }
  unint64_t v6 = 0;
  uint64_t v20 = v5;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v6 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_28;
      }
      uint64_t v7 = *(void *)(a1 + 32 + 8 * v6);
      swift_retain();
    }
    BOOL v8 = __OFADD__(v6++, 1);
    if (v8) {
      break;
    }
    Hasher.init(_seed:)();
    type metadata accessor for PairableHostsBrowseRegistration();
    sub_100011FA0(&qword_1000966A8, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    HashableByObjectIdentity.hash(into:)();
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1 << v3[32];
    uint64_t v11 = v9 & ~v10;
    sub_100057600();
    if ((v14 & v13) != 0)
    {
      swift_retain();
      char v15 = sub_100057614();
      swift_release();
      if (v15)
      {
LABEL_21:
        swift_release();
        goto LABEL_24;
      }
      uint64_t v16 = ~v10;
      while (1)
      {
        uint64_t v11 = (v11 + 1) & v16;
        sub_100057600();
        if ((v13 & v14) == 0) {
          break;
        }
        swift_retain();
        char v17 = sub_100057614();
        swift_release();
        if (v17) {
          goto LABEL_21;
        }
      }
    }
    *(void *)&v3[8 * v12 + 56] = v14 | v13;
    *(void *)(*((void *)v3 + 6) + 8 * v11) = v7;
    uint64_t v18 = *((void *)v3 + 2);
    BOOL v8 = __OFADD__(v18, 1);
    uint64_t v19 = v18 + 1;
    if (v8) {
      goto LABEL_27;
    }
    *((void *)v3 + 2) = v19;
LABEL_24:
    if (v6 == v20) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t sub_10005714C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(a1 + 16))
  {
    unint64_t v3 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_1000153C0(&qword_1000972A8);
  uint64_t v2 = static _SetStorage.allocate(capacity:)();
  unint64_t v3 = (unsigned char *)v2;
  uint64_t v31 = *(void *)(v1 + 16);
  if (!v31)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  uint64_t v37 = v2 + 56;
  uint64_t result = type metadata accessor for Calendar.Component();
  uint64_t v5 = result;
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(result - 8);
  uint64_t v29 = v1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  uint64_t v30 = v7;
  uint64_t v36 = v7 + 16;
  uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t v27 = v1;
  uint64_t v28 = (uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32);
  while (v6 < *(void *)(v1 + 16))
  {
    uint64_t v8 = *(void *)(v30 + 64);
    uint64_t v38 = *(void *)(v30 + 72);
    __chkstk_darwin(result);
    unint64_t v35 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    Swift::Int v9 = (char *)&v26 - v35;
    uint64_t v11 = *(void (**)(char *))(v10 + 16);
    v11((char *)&v26 - v35);
    sub_100057480(&qword_1000972B0, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
    uint64_t v39 = v9;
    uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v13 = -1 << v3[32];
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    uint64_t v16 = *(void *)(v37 + 8 * (v14 >> 6));
    uint64_t v17 = 1 << v14;
    if (((1 << v14) & v16) != 0)
    {
      uint64_t v32 = &v26;
      unint64_t v33 = v6;
      uint64_t v18 = ~v13;
      while (1)
      {
        __chkstk_darwin(v12);
        uint64_t v19 = (char *)&v26 - v35;
        uint64_t v20 = v3;
        ((void (*)(char *, unint64_t, uint64_t))v11)((char *)&v26 - v35, *((void *)v3 + 6) + v14 * v38, v5);
        sub_100057480(&qword_1000972B8, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v22 = *v34;
        uint64_t v12 = (*v34)(v19, v5);
        if (v21) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v18;
        unint64_t v15 = v14 >> 6;
        uint64_t v16 = *(void *)(v37 + 8 * (v14 >> 6));
        uint64_t v17 = 1 << v14;
        unint64_t v3 = v20;
        if ((v16 & (1 << v14)) == 0)
        {
          uint64_t v1 = v27;
          unint64_t v6 = v33;
          goto LABEL_10;
        }
      }
      uint64_t result = v22(v39, v5);
      uint64_t v1 = v27;
      unint64_t v3 = v20;
      unint64_t v6 = v33;
    }
    else
    {
LABEL_10:
      *(void *)(v37 + 8 * v15) = v17 | v16;
      uint64_t result = (*v28)(*((void *)v3 + 6) + v14 * v38, v39, v5);
      uint64_t v23 = *((void *)v3 + 2);
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_18;
      }
      *((void *)v3 + 2) = v25;
    }
    if (++v6 == v31) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100057480(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000574C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0(&qword_100096160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057530(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000153C0(&qword_100096160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100057598()
{
}

uint64_t sub_1000575A0()
{
  return sub_10003C22C();
}

uint64_t sub_1000575A8()
{
  return sub_10001AA24();
}

uint64_t sub_100057614()
{
  return static HashableByObjectIdentity.== infix(_:_:)();
}

uint64_t sub_100057648()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100057660()
{
  os_log_type_t v0 = static os_log_type_t.default.getter();
  uint64_t v1 = qword_1000986F0;
  os_log_type_t v2 = v0;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000986F0, v0);
  if (result)
  {
    swift_retain();
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    swift_beginAccess();
    uint64_t v5 = swift_bridgeObjectRetain();
    sub_100012750(v5);
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Network pairing peers updated. Total count: %ld", v4, 0xCu);
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_100057774()
{
  return swift_bridgeObjectRetain();
}

void sub_1000577A4()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  sub_100013814();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100012078();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = v0 + 24;
  uint64_t v10 = *(void *)(v0 + 24);
  uint64_t v11 = *(void *)(v9 + 16);
  int v12 = *(unsigned __int8 *)(v9 + 24);
  if (*(unsigned char *)(v9 + 24))
  {
    if (v12 == 1)
    {
      swift_retain();
      NWListener.cancel()();
      swift_release();
      uint64_t v10 = *(void *)(v1 + 24);
      uint64_t v11 = *(void *)(v1 + 40);
      LOBYTE(v12) = *(unsigned char *)(v1 + 48);
    }
    else
    {
      if (v10 | *(void *)(v1 + 32) | v11) {
        uint64_t v10 = 1;
      }
      LOBYTE(v12) = 2;
    }
  }
  uint64_t v13 = *(void *)(v1 + 32);
  *(void *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(unsigned char *)(v1 + 48) = 2;
  sub_100059EC4(v10, v13, v11, v12);
  unint64_t v14 = (uint64_t *)(v1 + 16);
  unsigned int v25 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
  unint64_t v15 = (void (**)(uint64_t, void, uint64_t))(v4 + 104);
  for (uint64_t i = (void (**)(uint64_t, uint64_t))(v4 + 8); ; (*i)(v8, v2))
  {
    swift_beginAccess();
    uint64_t v17 = *v14;
    if ((*v14 & 0xC000000000000001) != 0)
    {
      if (__CocoaSet.count.getter())
      {
        uint64_t v18 = __CocoaSet.startIndex.getter();
        uint64_t v20 = v19;
        char v21 = 1;
LABEL_13:
        uint64_t v24 = sub_10005A464(v18, v20, v21);
        sub_10002A3FC(v18, v20, v21);
        goto LABEL_15;
      }
    }
    else if (*(void *)(v17 + 16))
    {
      uint64_t v18 = sub_10005A3CC(v17);
      uint64_t v20 = v22;
      char v21 = v23 & 1;
      goto LABEL_13;
    }
    uint64_t v24 = 0;
LABEL_15:
    swift_endAccess();
    sub_100057660();
    if (!v24) {
      break;
    }
    (*v15)(v8, v25, v2);
    dispatch thunk of ControlChannelConnection.invalidate(for:)();
    swift_release();
  }
  sub_100013918();
}

void sub_1000579B4()
{
  sub_1000139EC();
  uint64_t v2 = v0;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (*(unsigned __int8 *)(v0 + 48) < 2u || *(void *)(v0 + 40) | *(void *)(v0 + 24) | *(void *)(v0 + 32))
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
LABEL_4:
    sub_100013918();
    return;
  }
  uint64_t v3 = type metadata accessor for UUID();
  sub_100013814();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100013900();
  UUID.init()();
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  uint64_t v10 = type metadata accessor for String.Encoding();
  sub_100013814();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100012078();
  uint64_t v16 = v15 - v14;
  static String.Encoding.utf8.getter();
  uint64_t v17 = String.data(using:allowLossyConversion:)();
  unint64_t v19 = v18;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
  if (v19 >> 60 != 15)
  {
    uint64_t v20 = *(void *)(v2 + 24);
    uint64_t v21 = *(void *)(v2 + 32);
    uint64_t v22 = *(void *)(v2 + 40);
    *(void *)(v2 + 24) = v7;
    *(void *)(v2 + 32) = v9;
    *(void *)(v2 + 40) = 0;
    char v23 = *(unsigned char *)(v2 + 48);
    *(unsigned char *)(v2 + 48) = 0;
    sub_100059EC4(v20, v21, v22, v23);
    uint64_t v24 = (void *)swift_allocObject();
    void v24[2] = v2;
    v24[3] = v17;
    v24[4] = v19;
    sub_100020C9C(v17, v19);
    sub_100020C9C(v17, v19);
    unsigned int v25 = (void *)swift_allocObject();
    void v25[2] = v17;
    v25[3] = v19;
    v25[4] = sub_10005A33C;
    void v25[5] = v24;
    sub_100020C9C(v17, v19);
    swift_retain();
    sub_100020C9C(v17, v19);
    swift_retain();
    sub_100020C9C(v17, v19);
    swift_retain();
    swift_retain();
    sub_100016BCC();
    uint64_t v26 = sub_1000170B8();
    uint64_t v27 = CUPairingIdentity.authTag(for:type:)();
    unint64_t v29 = v28;
    sub_100057FBC();
    sub_10000D998(v27, v29, 0);
    swift_release();

    sub_100016F74();
    swift_release();
    sub_100016F74();
    swift_release();
    swift_release();
    sub_100016F74();
    sub_100016F74();
    goto LABEL_4;
  }
  __break(1u);
}

void sub_100057ECC()
{
}

uint64_t sub_100057F0C()
{
  if (*(unsigned char *)(v0 + 48) == 1)
  {
    uint64_t v0 = *(void *)(v0 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for RemotePairingError();
    sub_100011FE8((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    swift_allocError();
    static RemotePairingError.invalidOperation.getter();
    swift_willThrow();
  }
  return v0;
}

void sub_100057FBC()
{
  sub_1000139EC();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  type metadata accessor for BonjourService();
  sub_100013814();
  __chkstk_darwin(v7);
  sub_100012078();
  uint64_t v12 = v11 - v10;
  if (*(unsigned char *)(v0 + 48))
  {
    os_log_type_t v13 = static os_log_type_t.default.getter();
    uint64_t v14 = qword_1000986F0;
    os_log_type_t v15 = v13;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v13))
    {
      swift_retain_n();
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v108 = sub_100015720();
      *(_DWORD *)uint64_t v16 = 136446210;
      v106[0] = sub_100015FE0();
      v106[1] = v17;
      v106[2] = v18;
      char v107 = v19;
      sub_100059E60(v106[0], v17, v18, v19);
      uint64_t v20 = String.init<A>(describing:)();
      v106[0] = sub_100010478(v20, v21, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "NetworkPairingService finished auth tag generation, but current state (%{public}s) is not valid to use the data", v16, 0xCu);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
LABEL_18:
    sub_100013918();
    return;
  }
  LODWORD(v102) = v2;
  uint64_t v98 = v12;
  uint64_t v99 = v9;
  uint64_t v100 = v8;
  uint64_t v101 = (void *)v0;
  uint64_t v103 = v6;
  unint64_t v104 = v4;
  uint64_t v23 = *(void *)(v0 + 24);
  uint64_t v22 = *(void *)(v0 + 32);
  uint64_t v105 = *(void *)(v0 + 40);
  uint64_t v24 = type metadata accessor for String.Encoding();
  sub_100013814();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  sub_100013900();
  swift_bridgeObjectRetain();
  static String.Encoding.utf8.getter();
  uint64_t v28 = v23;
  uint64_t v29 = v22;
  uint64_t v30 = String.data(using:allowLossyConversion:)();
  unint64_t v32 = v31;
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v2, v24);
  if (v32 >> 60 != 15)
  {
    char v33 = static Data.== infix(_:_:)();
    sub_100013BC4(v30, v32);
    if (v33)
    {
      uint64_t v34 = v29;
      uint64_t v35 = v28;
      if (v102)
      {
        uint64_t v46 = sub_100013B04();
        sub_100059EC4(v46, v47, v48, v49);
        uint64_t v50 = v103;
        swift_errorRetain();
        os_log_type_t v51 = static os_log_type_t.error.getter();
        uint64_t v52 = qword_1000986F0;
        os_log_type_t v53 = v51;
        if (os_log_type_enabled((os_log_t)qword_1000986F0, v51))
        {
          sub_100021B1C(v103, v104, 1);
          sub_100021B1C(v103, v104, 1);
          uint64_t v54 = (uint8_t *)swift_slowAlloc();
          v106[0] = sub_100015720();
          *(_DWORD *)uint64_t v54 = 136446210;
          uint64_t v108 = v50;
          swift_errorRetain();
          sub_1000153C0(&qword_100095A00);
          uint64_t v55 = String.init<A>(describing:)();
          uint64_t v108 = sub_100010478(v55, v56, v106);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100015D44();
          sub_100015D44();
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unable to start network pairing service. Failed to generate auth tag with error: %{public}s", v54, 0xCu);
          swift_arrayDestroy();
          sub_1000120B0();
          sub_1000120B0();
        }
        sub_100015D44();
      }
      else
      {
        uint64_t v36 = type metadata accessor for NWTXTRecord();
        v95[4] = v95;
        sub_100013814();
        uint64_t v96 = v37;
        __chkstk_darwin(v38);
        v95[3] = v39;
        int v40 = (char *)v95 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v41 = v103;
        unint64_t v42 = v104;
        sub_100015BB4(v103, v104);
        sub_100015BB4(v41, v42);
        sub_10005A180((uint64_t)&_swiftEmptyArrayStorage);
        NWTXTRecord.init(_:)();
        static NetworkPairingKeys.identifier.getter();
        swift_bridgeObjectRetain();
        NWTXTRecord.subscript.setter();
        static NetworkPairingKeys.authTag.getter();
        Data.base64EncodedString(options:)(0);
        sub_10000D998(v41, v42, 0);
        uint64_t v43 = v40;
        NWTXTRecord.subscript.setter();
        static NetworkPairingKeys.model.getter();
        NSString v44 = String._bridgeToObjectiveC()();
        uint64_t v45 = MGCopyAnswer();

        if (v45)
        {
          uint64_t v108 = v45;
          sub_100013CC4();
        }
        NWTXTRecord.subscript.setter();
        static NetworkPairingKeys.name.getter();
        NSString v57 = String._bridgeToObjectiveC()();
        uint64_t v58 = MGCopyAnswer();

        uint64_t v102 = v36;
        if (v58)
        {
          uint64_t v108 = v58;
          sub_100013CC4();
        }
        NWTXTRecord.subscript.setter();
        type metadata accessor for ControlChannelConnectionWireProtocolVersion();
        uint64_t v59 = (void *)static ControlChannelConnectionWireProtocolVersion.current.getter();
        id v60 = [v59 description];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        static NetworkPairingKeys.wireProtocolVersion.getter();
        sub_1000139AC();
        NWTXTRecord.subscript.setter();
        int64_t v61 = (void *)static ControlChannelConnectionWireProtocolVersion.minimumSupportedForWirelessPairing.getter();
        id v62 = [v61 description];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        static NetworkPairingKeys.minimumSupportedWireProtocolVersion.getter();
        NWTXTRecord.subscript.setter();
        type metadata accessor for NWParameters();
        static NWParameters.tcp.getter();
        uint64_t v63 = type metadata accessor for NWEndpoint.Port();
        __chkstk_darwin(v63 - 8);
        sub_100012078();
        static NWEndpoint.Port.any.getter();
        v95[1] = type metadata accessor for NWListener();
        swift_allocObject();
        uint64_t v64 = NWListener.init(using:on:)();
        uint64_t v97 = v43;
        uint64_t v65 = v64;
        uint64_t v66 = v101;
        uint64_t v67 = v101[3];
        uint64_t v68 = v101[4];
        uint64_t v69 = v101[5];
        v101[3] = v64;
        v66[4] = v35;
        v66[5] = v34;
        char v70 = *((unsigned char *)v66 + 48);
        *((unsigned char *)v66 + 48) = 1;
        uint64_t v71 = sub_100013B04();
        sub_100059E60(v71, v72, v73, v74);
        swift_retain();
        sub_100059EC4(v67, v68, v69, v70);
        uint64_t v75 = sub_1000153C0(&qword_100097408);
        v95[2] = v95;
        __chkstk_darwin(v75 - 8);
        sub_100015778();
        (*(void (**)(uint64_t, void, uint64_t))(v99 + 104))(v98, enum case for BonjourService.pairSetup(_:), v100);
        BonjourService.rawValue.getter();
        uint64_t v76 = sub_1000139AC();
        uint64_t v78 = v77(v76);
        uint64_t v100 = v34;
        __chkstk_darwin(v78);
        uint64_t v80 = v96;
        (*(void (**)(char *, char *, uint64_t))(v96 + 16))((char *)v95 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0), v97, v102);
        NWListener.Service.init(name:type:domain:txtRecord:)();
        uint64_t v81 = type metadata accessor for NWListener.Service();
        sub_100015C34(v69, 0, 1, v81);
        NWListener.service.setter();
        sub_100040BDC((uint64_t)sub_100058BBC);
        NWListener.stateUpdateHandler.setter();
        uint64_t v82 = sub_100010E68();
        swift_weakInit();
        uint64_t v83 = sub_100010E68();
        swift_weakInit();
        uint64_t v84 = swift_allocObject();
        *(void *)(v84 + 16) = v82;
        *(void *)(v84 + 24) = v83;
        swift_retain();
        swift_retain();
        sub_100040BDC((uint64_t)sub_10005A2F4);
        sub_1000139AC();
        NWListener.newConnectionHandler.setter();
        swift_release();
        swift_release();
        swift_release();
        NWListener.start(queue:)();
        os_log_type_t v85 = static os_log_type_t.default.getter();
        uint64_t v86 = qword_1000986F0;
        os_log_type_t v87 = v85;
        if (os_log_type_enabled((os_log_t)qword_1000986F0, v85))
        {
          swift_retain();
          uint64_t v88 = v35;
          uint64_t v89 = v35;
          uint64_t v90 = v100;
          sub_100059E60(v88, v100, v105, 0);
          swift_retain();
          uint64_t v91 = swift_slowAlloc();
          v106[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v91 = 136315394;
          uint64_t v108 = v65;
          swift_retain();
          uint64_t v92 = String.init<A>(describing:)();
          uint64_t v108 = sub_100010478(v92, v93, v106);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v91 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v108 = sub_100010478(v89, v90, v106);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v94 = v105;
          sub_100059EC4(v89, v90, v105, 0);
          sub_100059EC4(v89, v90, v94, 0);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "Started listening for network pairing with listener %s, session ID: %s", (uint8_t *)v91, 0x16u);
          swift_arrayDestroy();
          sub_1000120B0();
          sub_1000120B0();
          sub_10000D998(v103, v104, 0);
          swift_release();
          (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v102);
        }
        else
        {
          swift_release();
          sub_100059EC4(v35, v100, v105, 0);
          sub_10000D998(v103, v104, 0);
          (*(void (**)(char *, uint64_t))(v80 + 8))(v97, v102);
        }
      }
    }
    else
    {
      sub_100059EC4(v28, v29, v105, 0);
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
    }
    goto LABEL_18;
  }
  __break(1u);
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_100058BBC(uint64_t a1)
{
  static os_log_type_t.default.getter();
  sub_1000153C0(&qword_100095570);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100075C50;
  uint64_t v3 = type metadata accessor for NWListener.State();
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_100016B8C();
  *(void *)(v2 + 32) = v6;
  *(void *)(v2 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100058D18()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (!Strong) {
      return swift_release();
    }
    if (*(unsigned char *)(v1 + 48) == 1)
    {
      if (Strong == swift_retain())
      {
        sub_100059200();
        swift_release();
        goto LABEL_9;
      }
      swift_release();
    }
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
LABEL_9:
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_100058E1C()
{
  sub_1000139EC();
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  sub_100013814();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100015778();
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = (void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  int v10 = *(unsigned __int8 *)(v2 + 48);
  if (!*(unsigned char *)(v2 + 48)) {
    goto LABEL_9;
  }
  if (v10 == 1)
  {
    swift_retain();
    NWListener.cancel()();
    swift_release();
    uint64_t v7 = *(void *)(v2 + 24);
    uint64_t v9 = *(void *)(v2 + 40);
    LOBYTE(v10) = *(unsigned char *)(v2 + 48);
    goto LABEL_9;
  }
  if (v7 != 1 || (*v8 | v9) != 0)
  {
    LOBYTE(v10) = 2;
LABEL_9:
    uint64_t v12 = *(void *)(v2 + 32);
    *(void *)(v2 + 24) = 1;
    void *v8 = 0;
    *(void *)(v2 + 40) = 0;
    *(unsigned char *)(v2 + 48) = 2;
    sub_100059EC4(v7, v12, v9, v10);
    sub_100013A48();
    uint64_t v13 = *(void *)(v2 + 16);
    if ((v13 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for ControlChannelConnection();
      sub_100011FE8(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      sub_1000139AC();
      Set.Iterator.init(_cocoa:)();
      uint64_t v13 = v32;
      uint64_t v29 = v33;
      uint64_t v14 = v34;
      int64_t v15 = v35;
      unint64_t v16 = v36;
    }
    else
    {
      uint64_t v29 = v13 + 56;
      uint64_t v14 = ~(-1 << *(unsigned char *)(v13 + 32));
      sub_100010E80();
      unint64_t v16 = v17 & v18;
      swift_bridgeObjectRetain();
      int64_t v15 = 0;
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    unsigned int v30 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
    char v19 = (void (**)(uint64_t, void, uint64_t))(v5 + 104);
    uint64_t v20 = (void (**)(uint64_t, uint64_t))(v5 + 8);
    if (v13 < 0) {
      goto LABEL_15;
    }
    while (1)
    {
      if (v16)
      {
        uint64_t v21 = (v16 - 1) & v16;
        unint64_t v22 = __clz(__rbit64(v16)) | (v15 << 6);
        int64_t v23 = v15;
      }
      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
          return;
        }
        if (v24 >= v28) {
          goto LABEL_35;
        }
        unint64_t v25 = *(void *)(v29 + 8 * v24);
        int64_t v23 = v15 + 1;
        if (!v25)
        {
          int64_t v23 = v15 + 2;
          if (v15 + 2 >= v28) {
            goto LABEL_35;
          }
          unint64_t v25 = *(void *)(v29 + 8 * v23);
          if (!v25)
          {
            int64_t v23 = v15 + 3;
            if (v15 + 3 >= v28) {
              goto LABEL_35;
            }
            unint64_t v25 = *(void *)(v29 + 8 * v23);
            if (!v25)
            {
              int64_t v23 = v15 + 4;
              if (v15 + 4 >= v28) {
                goto LABEL_35;
              }
              unint64_t v25 = *(void *)(v29 + 8 * v23);
              if (!v25)
              {
                int64_t v26 = v15 + 5;
                while (v26 < v28)
                {
                  unint64_t v25 = *(void *)(v29 + 8 * v26++);
                  if (v25)
                  {
                    int64_t v23 = v26 - 1;
                    goto LABEL_31;
                  }
                }
LABEL_35:
                sub_100019C54();
                goto LABEL_36;
              }
            }
          }
        }
LABEL_31:
        uint64_t v21 = (v25 - 1) & v25;
        unint64_t v22 = __clz(__rbit64(v25)) + (v23 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v13 + 48) + 8 * v22);
      swift_retain();
      if (!v27) {
        goto LABEL_35;
      }
      while (1)
      {
        (*v19)(v1, v30, v3);
        dispatch thunk of ControlChannelConnection.invalidate(for:)();
        swift_release();
        (*v20)(v1, v3);
        int64_t v15 = v23;
        unint64_t v16 = v21;
        if ((v13 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_15:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for ControlChannelConnection();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          swift_unknownObjectRelease();
          int64_t v23 = v15;
          uint64_t v21 = v16;
          if (v31) {
            continue;
          }
        }
        goto LABEL_35;
      }
    }
  }
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
LABEL_36:
  sub_100013918();
}

void sub_100059200()
{
  sub_1000139EC();
  uint64_t v2 = type metadata accessor for ControlChannelConnection.Options();
  sub_100013814();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100012078();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for ControlChannelConnection.Options.Device();
  sub_100013814();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100015778();
  if (*(unsigned char *)(v0 + 48) == 1)
  {
    ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)();
    uint64_t v13 = type metadata accessor for NWConnectionControlChannelTransport();
    long long v23 = 0u;
    uint64_t v24 = 0;
    swift_allocObject();
    swift_retain();
    uint64_t v25 = v13;
    int64_t v26 = &protocol witness table for NWConnectionControlChannelTransport;
    *(void *)&long long v23 = NWConnectionControlChannelTransport.init(connection:endpoint:netLinkManager:)();
    uint64_t v14 = *(void **)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v1, v9);
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v8, enum case for ControlChannelConnection.Options.device(_:), v2);
    type metadata accessor for SystemKeychainPairingManager();
    sub_100011FE8(&qword_100094F88, (void (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager);
    type metadata accessor for ControlChannelConnection();
    swift_retain();
    id v15 = v14;
    swift_retain();
    static ControlChannelConnection.defaultMaxReconnectionAttempts.getter();
    swift_allocObject();
    ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)();
    sub_100017194(v0 + 64, (uint64_t)&v23);
    dispatch thunk of ControlChannelConnection.userInteractionProvider.setter();
    swift_beginAccess();
    swift_retain();
    sub_10001101C();
    swift_endAccess();
    swift_release();
    sub_100057660();
    uint64_t v16 = sub_100010E68();
    swift_weakInit();
    uint64_t v17 = v9;
    uint64_t v18 = sub_100010E68();
    swift_weakInit();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v16;
    *(void *)(v19 + 24) = v18;
    swift_retain();
    swift_retain();
    dispatch thunk of ControlChannelConnection.invalidationHandler.setter();
    swift_release();
    swift_release();
    uint64_t v20 = sub_100010E68();
    swift_weakInit();
    uint64_t v21 = sub_100010E68();
    swift_weakInit();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v21;
    *(void *)(v22 + 24) = v20;
    swift_retain();
    swift_retain();
    dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter();
    swift_release();
    swift_release();
    dispatch thunk of ControlChannelConnection.start()();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v17);
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    NWConnection.cancel()();
  }
  sub_100013918();
}

uint64_t sub_100059630()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_beginAccess();
      sub_100011CF4();
      swift_endAccess();
      swift_release();
      sub_100057660();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1000596FC()
{
  uint64_t v0 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v5 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      if (v5)
      {
        uint64_t v6 = (void *)v5;
        sub_1000601D0();
        if ((v7 & 1) == 0)
        {
          (*(void (**)(unsigned char *, void, uint64_t))(v1 + 104))(v3, enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:), v0);
          dispatch thunk of ControlChannelConnection.invalidate(for:)();

          swift_release();
          swift_release();
          return (*(uint64_t (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
        }
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10005989C(NSObject *a1)
{
  os_log_type_t v3 = static os_log_type_t.default.getter();
  swift_retain_n();
  if (os_log_type_enabled(a1, v3))
  {
    swift_retain_n();
    uint64_t v4 = swift_slowAlloc();
    v34[0] = sub_100015720();
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v35 = sub_100015FE0();
    uint64_t v36 = v5;
    uint64_t v37 = v6;
    LOBYTE(v38) = v7;
    sub_100059E60(v35, v5, v6, v7);
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v35 = sub_100010478(v8, v9, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2048;
    sub_100013A48();
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = sub_100012750(v10);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v35 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, a1, v3, "State dump: NetworkPairingService xpc_activity_state_t state = %{public}s, connection count = %ld", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    sub_1000120B0();
    sub_1000120B0();
  }
  else
  {
    swift_release_n();
  }
  sub_100013A48();
  uint64_t v12 = *(void *)(v1 + 16);
  if ((v12 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ControlChannelConnection();
    sub_100011FE8(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v12 = v35;
    uint64_t v32 = v36;
    uint64_t v14 = v37;
    int64_t v15 = v38;
    unint64_t v16 = v39;
  }
  else
  {
    uint64_t v32 = v12 + 56;
    uint64_t v14 = ~(-1 << *(unsigned char *)(v12 + 32));
    sub_100010E80();
    unint64_t v16 = v17 & v18;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v15 = 0;
  }
  int64_t v31 = (unint64_t)(v14 + 64) >> 6;
  if (v12 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v16)
    {
      uint64_t v19 = (v16 - 1) & v16;
      unint64_t v20 = __clz(__rbit64(v16)) | (v15 << 6);
      int64_t v21 = v15;
      goto LABEL_27;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v23 >= v31) {
      return sub_100019C54();
    }
    unint64_t v24 = *(void *)(v32 + 8 * v23);
    int64_t v21 = v15 + 1;
    if (!v24)
    {
      int64_t v21 = v15 + 2;
      if (v15 + 2 >= v31) {
        return sub_100019C54();
      }
      unint64_t v24 = *(void *)(v32 + 8 * v21);
      if (!v24)
      {
        int64_t v21 = v15 + 3;
        if (v15 + 3 >= v31) {
          return sub_100019C54();
        }
        unint64_t v24 = *(void *)(v32 + 8 * v21);
        if (!v24)
        {
          int64_t v21 = v15 + 4;
          if (v15 + 4 >= v31) {
            return sub_100019C54();
          }
          unint64_t v24 = *(void *)(v32 + 8 * v21);
          if (!v24)
          {
            int64_t v25 = v15 + 5;
            while (v25 < v31)
            {
              unint64_t v24 = *(void *)(v32 + 8 * v25++);
              if (v24)
              {
                int64_t v21 = v25 - 1;
                goto LABEL_26;
              }
            }
            return sub_100019C54();
          }
        }
      }
    }
LABEL_26:
    uint64_t v19 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v21 << 6);
LABEL_27:
    uint64_t v26 = *(void *)(*(void *)(v12 + 48) + 8 * v20);
    swift_retain();
    if (!v26) {
      return sub_100019C54();
    }
    while (1)
    {
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(a1, v27))
      {
        swift_retain_n();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v33 = sub_100015720();
        *(_DWORD *)uint64_t v28 = 136446210;
        type metadata accessor for ControlChannelConnection();
        swift_retain();
        uint64_t v29 = String.init<A>(describing:)();
        *(void *)(v28 + 4) = sub_100010478(v29, v30, &v33);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, a1, v27, "State dump: NetworkPairingService control channel connection: %{public}s", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      uint64_t result = swift_release();
      int64_t v15 = v21;
      unint64_t v16 = v19;
      if ((v12 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ControlChannelConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v22 = v33;
        swift_unknownObjectRelease();
        int64_t v21 = v15;
        uint64_t v19 = v16;
        if (v22) {
          continue;
        }
      }
      return sub_100019C54();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100059DC8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_100015FE0();
  sub_100059EC4(v1, v2, v3, v4);

  sub_100010548(v0 + 64);
  swift_release();
  return v0;
}

uint64_t sub_100059E08()
{
  sub_100059DC8();

  return _swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for NetworkPairingService()
{
  return self;
}

uint64_t sub_100059E60(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 != 1) {
      return result;
    }
    swift_retain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for NetworkPairingService.State(uint64_t a1)
{
  return sub_100059EC4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_100059EC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 != 1) {
      return result;
    }
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_100059E60(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_100059E60(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_100059EC4(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NetworkPairingService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_100059EC4(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkPairingService.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkPairingService.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10005A0D0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 1u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10005A0E8(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 2;
    *(void *)__n128 result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NetworkPairingService.State()
{
  return &type metadata for NetworkPairingService.State;
}

uint64_t sub_10005A114()
{
  return sub_100057774();
}

void sub_10005A138()
{
}

uint64_t sub_10005A15C(NSObject *a1)
{
  return sub_10005989C(a1);
}

unint64_t sub_10005A180(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000153C0(&qword_100097410);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  char v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10004E9F0(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005A2A0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005A2DC()
{
  return sub_100059630();
}

uint64_t sub_10005A2E8()
{
  return sub_1000596FC();
}

uint64_t sub_10005A2F4()
{
  return sub_100058D18();
}

uint64_t sub_10005A2FC()
{
  swift_release();
  sub_1000158A8(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10005A33C()
{
}

uint64_t sub_10005A34C()
{
  sub_1000158A8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005A38C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005A3CC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 128;
  for (uint64_t i = 10; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10005A464(uint64_t result, int a2, char a3)
{
  char v4 = v3;
  unint64_t v7 = result;
  if ((*v4 & 0xC000000000000001) == 0)
  {
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    int v9 = result;
    uint64_t v10 = *v4;
    if ((a3 & 1) == 0)
    {
      if ((v7 & 0x8000000000000000) != 0 || 1 << *(unsigned char *)(v10 + 32) <= (uint64_t)v7)
      {
        __break(1u);
      }
      else if ((*(void *)(v10 + 8 * (v7 >> 6) + 56) >> v7))
      {
        if (*(_DWORD *)(v10 + 36) == a2)
        {
LABEL_17:
          *char v4 = 0x8000000000000000;
          if (!v9) {
            sub_1000645CC();
          }
          uint64_t v8 = *(void *)(*(void *)(v10 + 48) + 8 * v7);
          sub_100065A68(v7);
          *char v4 = v10;
          goto LABEL_20;
        }
        __break(1u);
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_23;
    }
LABEL_10:
    unint64_t result = __CocoaSet.Index.age.getter();
    if (result == *(_DWORD *)(v10 + 36))
    {
      __CocoaSet.Index.element.getter();
      type metadata accessor for ControlChannelConnection();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      sub_100011FE8(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v7 = v11 & ~v12;
      if ((*(void *)(v10 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
      {
        uint64_t v13 = ~v12;
        sub_100011FE8(&qword_1000972C8, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
        while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v13;
          if (((*(void *)(v10 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        swift_release();
        __break(1u);
      }
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v10 = *v4;
      goto LABEL_17;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a3)
  {
    __CocoaSet.member(for:)();
    type metadata accessor for ControlChannelConnection();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v8 = sub_100065430();
    swift_release();
LABEL_20:
    swift_bridgeObjectRelease();
    return v8;
  }
LABEL_24:
  __break(1u);
  return result;
}

void sub_10005A794(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_10005A80C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10005E6A0(a1);
  if (v6) {
    goto LABEL_9;
  }
  int v7 = v5;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = sub_1000153C0(&qword_100095DD0);
  uint64_t v11 = v10;
  if (v8 == v9)
  {
    return sub_100015C34(a2, 1, 1, v10);
  }
  else
  {
    __chkstk_darwin(v10);
    sub_100013460();
    uint64_t v12 = (uint64_t *)(v9 + *(int *)(v11 + 48));
    uint64_t v13 = sub_10005EFAC(v9, v8, v7, 0, a1);
    uint64_t v15 = v14;
    uint64_t *v12 = v13;
    v12[1] = v14;
    type metadata accessor for UUID();
    sub_100010EF0();
    (*(void (**)(uint64_t, uint64_t))(v16 + 16))(a2, v9);
    uint64_t v17 = (uint64_t *)(a2 + *(int *)(v11 + 48));
    *uint64_t v17 = v13;
    v17[1] = v15;
    swift_bridgeObjectRetain();
    sub_10002A49C(v9, &qword_100095DD0);
    return sub_100015C34(a2, 0, 1, v11);
  }
}

uint64_t sub_10005A9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10005E6A0(a1);
  if (v6) {
    goto LABEL_9;
  }
  int v7 = v5;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = sub_1000153C0(&qword_100097548);
  uint64_t v11 = v10;
  if (v8 == v9)
  {
    return sub_100015C34(a2, 1, 1, v10);
  }
  else
  {
    __chkstk_darwin(v10);
    uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v14 = *(int *)(v11 + 48);
    uint64_t v15 = sub_10005F080((uint64_t)v13, v8, v7, 0, a1);
    *(void *)&v13[v14] = v15;
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 16))(a2, v13, v16);
    *(void *)(a2 + *(int *)(v11 + 48)) = v15;
    swift_retain();
    sub_10002A49C((uint64_t)v13, &qword_100097548);
    return sub_100015C34(a2, 0, 1, v11);
  }
}

uint64_t sub_10005AB40(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 9; ; ++i)
  {
    uint64_t v5 = i - 7;
    if (__OFADD__(i - 8, 1)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == result;
    BOOL v3 = v6;
    BOOL v6 = v6 || v5 == v2;
    if (v6) {
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10005ABA0@<X0>(unint64_t a1@<X0>, char *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v8 = sub_1000153C0(&qword_1000950E8);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  sub_100015928();
  uint64_t v10 = type metadata accessor for XPCDictionary();
  sub_100013814();
  uint64_t v12 = v11;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = *(int *)(v9 + 56);
  uint64_t v20 = v4 + v19;
  uint64_t v21 = *(void *)a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v20, &a2[v19], v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v18, v20, v10);
  swift_retain();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  XPCDictionary.auditToken.getter();
  XPCDictionary.entitlements.getter();
  uint64_t v22 = v37;
  sub_10005DC94(a1, (uint64_t)v16, a4);
  int64_t v23 = (void (**)(void))(v12 + 8);
  if (v22)
  {
    uint64_t v37 = v21;
    unint64_t v24 = *v23;
    sub_100015900();
    v24();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    uint64_t v26 = qword_1000986F0;
    os_log_type_t v27 = v25;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v25))
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v36 = v24;
      uint64_t v29 = (uint8_t *)v28;
      uint64_t v35 = swift_slowAlloc();
      uint64_t v39 = v35;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v34 = v29 + 4;
      uint64_t v38 = v22;
      swift_errorRetain();
      sub_1000153C0(&qword_100095A00);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v38 = sub_100010478(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Pairing deletion failed with error: %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v24 = v36;
      swift_slowDealloc();
    }
    swift_willThrow();
    swift_release();
    sub_100015900();
    return ((uint64_t (*)(void))v24)();
  }
  else
  {
    swift_release();
    uint64_t v33 = *v23;
    sub_100015900();
    v33();
    return ((uint64_t (*)(char *, uint64_t))v33)(v18, v10);
  }
}

uint64_t sub_10005AEF0()
{
  return dispatch thunk of XPCConnection.activate()();
}

uint64_t sub_10005AF18(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v111 = a7;
  uint64_t v109 = a5;
  uint64_t v106 = a3;
  uint64_t v107 = a4;
  uint64_t v105 = a2;
  int v104 = a1;
  type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v13);
  sub_100012078();
  sub_1000153C0(&qword_100096178);
  sub_100010EF0();
  __chkstk_darwin(v14);
  sub_100013C28();
  uint64_t v15 = (void (*)())swift_allocObject();
  *((void *)v15 + 2) = a8;
  *((void *)v15 + 3) = a9;
  *((void *)v15 + 4) = a10;
  id v16 = a8;
  swift_retain();
  if (remotePairingIsEnabled())
  {
    id v110 = v16;
    if ((os_variant_is_darwinos() & 1) != 0
      || (*(unsigned char *)(*sub_100016C68((void *)(v111 + 40), *(void *)(v111 + 64))
                   + OBJC_IVAR____TtC20remotepairingdeviced16LockStateManager_firstUnlockHasCompleted) & 1) != 0
      && (sub_100016C68((void *)(v111 + 40), *(void *)(v111 + 64)), sub_1000555F8(24)))
    {
      uint64_t v99 = a6;
      uint64_t v17 = dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      if (v17)
      {
        uint64_t v18 = (void *)v17;
        uint64_t v19 = type metadata accessor for UUID();
        uint64_t v96 = &v85;
        sub_100013814();
        uint64_t v21 = v20;
        uint64_t v23 = *(void *)(v22 + 64);
        __chkstk_darwin(v24);
        UUID.init()();
        uint64_t v25 = static os_log_type_t.default.getter();
        int v26 = v25;
        uint64_t v91 = &v85;
        os_log_type_t v27 = qword_1000986F0;
        uint64_t v93 = v23;
        __chkstk_darwin(v25);
        uint64_t v28 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v29 = v21;
        uint64_t v30 = *(void (**)(void))(v21 + 16);
        uint64_t v108 = v28;
        uint64_t v103 = v19;
        uint64_t v100 = v30;
        uint64_t v101 = v21 + 16;
        ((void (*)(char *, char *, uint64_t))v30)(v28, v28, v19);
        uint64_t v95 = v18;
        id v31 = v18;
        LODWORD(v90) = v26;
        BOOL v32 = os_log_type_enabled(v27, (os_log_type_t)v26);
        uint64_t v97 = v15;
        uint64_t v98 = a10;
        id v92 = v31;
        if (v32)
        {
          os_log_t v89 = v27;
          swift_bridgeObjectRetain_n();
          id v33 = v31;
          uint64_t v34 = swift_slowAlloc();
          v113[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v34 = 136446978;
          uint64_t v35 = UUID.uuidString.getter();
          uint64_t v112 = sub_100010478(v35, v36, v113);
          sub_100010F9C();
          swift_bridgeObjectRelease();
          uint64_t v102 = (uint8_t *)v29;
          uint64_t v94 = *(void (**)(char *, uint64_t))(v29 + 8);
          v94(v28, v103);
          *(_WORD *)(v34 + 12) = 2080;
          id v37 = [v33 identifier];
          sub_1000153C0((uint64_t *)&unk_1000976C0);
          sub_100010EF0();
          __chkstk_darwin(v38);
          sub_100012078();
          uint64_t v41 = v40 - v39;
          if (v37)
          {
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v42 = 0;
          }
          else
          {
            uint64_t v42 = 1;
          }
          sub_100015C34(v41, v42, 1, v103);
          uint64_t v47 = String.init<A>(describing:)();
          uint64_t v112 = sub_100010478(v47, v48, v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v34 + 22) = 2080;
          uint64_t v49 = sub_100040940(v33);
          if (v50)
          {
            uint64_t v51 = v50;
          }
          else
          {
            uint64_t v49 = 0x6E776F6E6B6E553CLL;
            uint64_t v51 = 0xE90000000000003ELL;
          }
          uint64_t v112 = sub_100010478(v49, v51, v113);
          sub_100010F9C();

          swift_bridgeObjectRelease();
          *(_WORD *)(v34 + 32) = 2080;
          type metadata accessor for PeerConnectionInfo();
          swift_bridgeObjectRetain();
          uint64_t v52 = Array.description.getter();
          uint64_t v54 = v53;
          swift_bridgeObjectRelease();
          uint64_t v112 = sub_100010478(v52, v54, v113);
          sub_100010F9C();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v90, "Creating tunnel %{public}s for host %s (%s) with peer info: %s", (uint8_t *)v34, 0x2Au);
          swift_arrayDestroy();
          sub_1000120B0();
          sub_1000120B0();
          sub_100013B18();
          uint64_t v45 = v102;
        }
        else
        {
          uint64_t v45 = (uint8_t *)v21;
          uint64_t v46 = *(void (**)(char *, uint64_t))(v21 + 8);
          swift_bridgeObjectRetain_n();
          uint64_t v94 = v46;
          v46(v28, v103);

          sub_100013B18();
          swift_bridgeObjectRelease_n();
        }
        os_log_type_t v55 = static os_log_type_t.default.getter();
        uint64_t v56 = powerLog.getter();
        if (os_log_type_enabled(v56, v55))
        {
          swift_bridgeObjectRetain_n();
          NSString v57 = (uint8_t *)swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          *(_DWORD *)NSString v57 = 136315138;
          v113[0] = v58;
          uint64_t v102 = v57 + 4;
          type metadata accessor for PeerConnectionInfo();
          swift_bridgeObjectRetain();
          uint64_t v59 = Array.description.getter();
          id v60 = v45;
          uint64_t v62 = v61;
          swift_bridgeObjectRelease();
          uint64_t v112 = sub_100010478(v59, v62, v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          uint64_t v45 = v60;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v56, v55, "Will create a tunnel with peer info: %s", v57, 0xCu);
          swift_arrayDestroy();
          sub_1000120B0();
          sub_1000120B0();
        }

        uint64_t v63 = v111;
        uint64_t v91 = &v85;
        uint64_t v64 = v93;
        __chkstk_darwin(v65);
        unint64_t v86 = (v64 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v90 = (char *)&v85 - v86;
        uint64_t v66 = v108;
        uint64_t v67 = v103;
        uint64_t v68 = v100;
        v100();
        id v88 = *(id *)(v63 + 32);
        uint64_t v69 = swift_allocObject();
        uint64_t v70 = swift_weakInit();
        os_log_t v89 = (os_log_t)&v85;
        __chkstk_darwin(v70);
        uint64_t v71 = (char *)&v85 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
        ((void (*)(char *, char *, uint64_t))v68)(v71, v66, v67);
        uint64_t v72 = v45[80];
        uint64_t v73 = (v72 + 24) & ~v72;
        uint64_t v85 = v72 | 7;
        uint64_t v74 = swift_allocObject();
        *(void *)(v74 + 16) = v69;
        uint64_t v75 = (void (*)(uint64_t, char *, uint64_t))*((void *)v45 + 4);
        uint64_t v102 = v45 + 32;
        v75(v74 + v73, v71, v67);
        uint64_t v76 = (void (**)())(v74 + ((v73 + v64 + 7) & 0xFFFFFFFFFFFFFFF8));
        Swift::String v77 = v97;
        *uint64_t v76 = sub_10005F924;
        v76[1] = v77;
        uint64_t v78 = swift_allocObject();
        uint64_t v79 = swift_weakInit();
        os_log_type_t v87 = &v85;
        __chkstk_darwin(v79);
        uint64_t v80 = (char *)&v85 - v86;
        ((void (*)(char *, char *, uint64_t))v100)((char *)&v85 - v86, v108, v67);
        uint64_t v81 = swift_allocObject();
        *(void *)(v81 + 16) = v78;
        v75(v81 + v73, v80, v67);
        type metadata accessor for Tunnel();
        swift_allocObject();
        id v82 = v92;
        v88;
        swift_retain();
        sub_1000691F0();
        sub_100013B18();
        sub_100013B18();
        sub_100013B18();
        sub_100047F98();
        swift_retain();
        uint64_t v83 = v108;
        sub_1000669D4();
        swift_endAccess();
        OS_dispatch_queue.assertOnQueueHierarchy()();
        ControlChannelConnection.transport.getter();
        sub_100016C68(v113, v113[3]);
        dispatch thunk of ControlChannelTransport.physicallyConnected.getter();
        sub_100069C20();

        swift_release();
        v94(v83, v67);
        sub_100010548((uint64_t)v113);

        swift_release();
        sub_100013B18();
        return swift_release();
      }
      static RemotePairingError.tunnelError.getter();
      sub_10000DAB8((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      uint64_t v44 = sub_100015FF0();
      sub_10000DAB8((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_1000164A4();
      Error<>.init(_:_:)();
      uint64_t *v10 = v44;
      swift_storeEnumTagMultiPayload();
      sub_10005FB3C();
      sub_10002A49C((uint64_t)v10, &qword_100096178);
    }
    else
    {
      static os_log_type_t.error.getter();
      os_log(_:dso:log:_:_:)();
      static RemotePairingError.unlockRequired.getter();
      sub_10000DAB8((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      uint64_t v43 = sub_100015FF0();
      sub_10000DAB8((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_1000164A4();
      Error<>.init(_:_:)();
      uint64_t *v10 = v43;
      swift_storeEnumTagMultiPayload();
      sub_10005FB3C();
      sub_10002A49C((uint64_t)v10, &qword_100096178);
    }
    swift_release();
    return swift_release();
  }
  swift_release();

  swift_release();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005BCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6 = sub_1000153C0(&qword_100096178);
  __chkstk_darwin(v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000409B8(a1, (uint64_t)v8, &qword_100096178);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_beginAccess();
      sub_100065E98();
      swift_endAccess();
      OS_dispatch_queue.assertOnQueueHierarchy()();
      swift_release();
      swift_release();
    }
  }
  else
  {
    sub_10002A49C((uint64_t)v8, &qword_100096178);
  }
  return a4(a1);
}

void sub_10005BE04()
{
  uint64_t v1 = v0;
  uint64_t v9 = sub_1000327B4();
  uint64_t v10 = v2;
  unint64_t v15 = 0xD000000000000028;
  unint64_t v16 = 0x800000010007EB90;
  sub_100013B78();
  char v3 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if (v3) {
    char IsEnabled = remotePairingIsEnabled();
  }
  else {
    char IsEnabled = 0;
  }
  static RemoteServiceNames.deviceComputeService.getter();
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(unsigned char *)(v6 + 24) = IsEnabled;
  uint64_t v13 = sub_10005F1C0;
  uint64_t v14 = v6;
  uint64_t v9 = (uint64_t)_NSConcreteStackBlock;
  uint64_t v10 = 1107296256;
  uint64_t v11 = sub_1000609B0;
  uint64_t v12 = &unk_10008D130;
  uint64_t v7 = _Block_copy(&v9);
  swift_release();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  remote_service_listen_with_device();
  swift_release();
  _Block_release(v7);
  if (sub_10000E644())
  {
    static RemoteServiceNames.deviceComputeService.getter();
    uint64_t v13 = sub_10005F1CC;
    uint64_t v14 = v1;
    uint64_t v9 = (uint64_t)_NSConcreteStackBlock;
    uint64_t v10 = 1107296256;
    uint64_t v11 = sub_10005A794;
    uint64_t v12 = &unk_10008D158;
    uint64_t v8 = _Block_copy(&v9);
    swift_retain();
    swift_release();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    lockdown_checkin_xpc();
    swift_release();
    _Block_release(v8);
  }
}

uint64_t sub_10005C06C(uint64_t a1, int a2, uint64_t a3, int a4)
{
  sub_1000153C0((uint64_t *)&unk_100097560);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100075C80;
  *(_DWORD *)(inited + 32) = static remote_device_type_t.ncmHost.getter();
  *(_DWORD *)(inited + 36) = static remote_device_type_t.ncmDevice.getter();
  uint64_t type = remote_device_get_type();
  int v8 = sub_10005AB40(type, inited);
  swift_setDeallocating();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (a4 & v8)
    {
      uint64_t v57 = result;
      int v58 = a2;
      sub_100017F4C(0, (unint64_t *)&qword_100096250);
      uint64_t v10 = type metadata accessor for DispatchQoS();
      uint64_t v56 = &v48;
      __chkstk_darwin(v10 - 8);
      static DispatchQoS.userInteractive.getter();
      uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
      __chkstk_darwin(v11);
      (*(void (**)(char *, void))(v13 + 104))((char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
      uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes();
      __chkstk_darwin(v14);
      v60[0] = &_swiftEmptyArrayStorage;
      sub_10005F7EC((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
      sub_1000153C0(&qword_100095D80);
      sub_10000E5F4((unint64_t *)&unk_100096220, &qword_100095D80);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v54 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
      uint64_t v15 = type metadata accessor for UUID();
      uint64_t v56 = &v48;
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(void *)(v16 + 64);
      __chkstk_darwin(v15);
      UUID.init()();
      uint64_t v18 = static os_log_type_t.default.getter();
      os_log_type_t v19 = v18;
      uint64_t v20 = qword_1000986F0;
      __chkstk_darwin(v18);
      uint64_t v21 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      os_log_type_t v55 = v21;
      uint64_t v51 = v22;
      v22(v21, v21, v15);
      if (os_log_type_enabled(v20, v19))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v50 = &v48;
        uint64_t v24 = (uint8_t *)v23;
        id v49 = (id)swift_slowAlloc();
        v60[0] = v49;
        os_log_t v48 = v20;
        *(_DWORD *)uint64_t v24 = 136446210;
        uint64_t v25 = UUID.uuidString.getter();
        uint64_t v59 = sub_100010478(v25, v26, (uint64_t *)v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_type_t v27 = *(void (**)(char *, uint64_t))(v16 + 8);
        uint64_t v52 = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v53 = v27;
        v27(v21, v15);
        _os_log_impl((void *)&_mh_execute_header, v48, v19, "Received tunnel connection %{public}s through RSD for device compute connection", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v28 = swift_slowDealloc();
      }
      else
      {
        id v33 = *(void (**)(char *, uint64_t))(v16 + 8);
        uint64_t v52 = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v53 = v33;
        uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v33)(v21, v15);
      }
      uint64_t v50 = &v48;
      __chkstk_darwin(v28);
      unint64_t v34 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v35 = v55;
      uint64_t v36 = v51;
      v51((char *)&v48 - v34, v55, v15);
      id v49 = *(id *)(v57 + 32);
      uint64_t v37 = swift_allocObject();
      uint64_t v38 = swift_weakInit();
      os_log_t v48 = (os_log_t)&v48;
      __chkstk_darwin(v38);
      uint64_t v39 = (char *)&v48 - v34;
      v36(v39, v35, v15);
      unint64_t v40 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = v37;
      (*(void (**)(unint64_t, char *))(v16 + 32))(v41 + v40, v39);
      type metadata accessor for Tunnel();
      swift_allocObject();
      id v42 = v54;
      id v43 = v49;
      sub_1000691F0();
      uint64_t v45 = v44;
      swift_beginAccess();
      swift_retain();
      sub_1000669D4();
      swift_endAccess();
      OS_dispatch_queue.assertOnQueueHierarchy()();
      type metadata accessor for SocketTunnelConnection();
      swift_allocObject();
      id v46 = v42;
      uint64_t v47 = SocketTunnelConnection.init(socket:queue:logPrefix:)();
      sub_10005F1DC(v47, v45);

      swift_release();
      swift_release();
      v53(v35, v15);
      return swift_release();
    }
    else
    {
      os_log_type_t v29 = static os_log_type_t.error.getter();
      uint64_t v30 = qword_1000986F0;
      os_log_type_t v31 = v29;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v29))
      {
        uint64_t v32 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 67109376;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 8) = 1024;
        LODWORD(v60[0]) = v8 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "RSD tunnel listener not accepting connection, enabled: %{BOOL}d, NCM: %{BOOL}d", (uint8_t *)v32, 0xEu);
        swift_slowDealloc();
      }
      close(a2);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10005C89C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v45 = a3;
    uint64_t v46 = result;
    sub_100017F4C(0, (unint64_t *)&qword_100096250);
    uint64_t v3 = type metadata accessor for DispatchQoS();
    uint64_t v44 = &v35;
    __chkstk_darwin(v3 - 8);
    static DispatchQoS.userInteractive.getter();
    uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
    __chkstk_darwin(v4);
    (*(void (**)(char *, void))(v6 + 104))((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
    uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
    __chkstk_darwin(v7);
    os_log_t v48 = &_swiftEmptyArrayStorage;
    sub_10005F7EC((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_1000153C0(&qword_100095D80);
    sub_10000E5F4((unint64_t *)&unk_100096220, &qword_100095D80);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    id v42 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v44 = &v35;
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void *)(v9 + 64);
    __chkstk_darwin(v8);
    UUID.init()();
    uint64_t v11 = static os_log_type_t.default.getter();
    os_log_type_t v12 = v11;
    uint64_t v39 = &v35;
    uint64_t v13 = qword_1000986F0;
    __chkstk_darwin(v11);
    uint64_t v14 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    id v43 = v14;
    v15(v14, v14, v8);
    uint64_t v38 = v13;
    if (os_log_type_enabled(v13, v12))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v37 = (uint64_t *)v15;
      uint64_t v17 = (uint8_t *)v16;
      uint64_t v36 = (void *)swift_slowAlloc();
      os_log_t v48 = v36;
      *(_DWORD *)uint64_t v17 = 136446210;
      uint64_t v18 = UUID.uuidString.getter();
      uint64_t v47 = sub_100010478(v18, v19, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v40 = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v41 = v20;
      v20(v14, v8);
      _os_log_impl((void *)&_mh_execute_header, v38, v12, "Received tunnel connection %{public}s through lockdown", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v15 = (void (*)(char *, char *, uint64_t))v37;
      uint64_t v21 = swift_slowDealloc();
    }
    else
    {
      uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v40 = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v41 = v22;
      uint64_t v21 = ((uint64_t (*)(char *, uint64_t))v22)(v14, v8);
    }
    uint64_t v39 = &v35;
    __chkstk_darwin(v21);
    unint64_t v23 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v24 = v43;
    v15((char *)&v35 - v23, v43, v8);
    uint64_t v38 = *(NSObject **)(v45 + 32);
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = swift_weakInit();
    uint64_t v37 = &v35;
    __chkstk_darwin(v26);
    os_log_type_t v27 = (char *)&v35 - v23;
    v15(v27, v24, v8);
    unint64_t v28 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v29 + v28, v27, v8);
    type metadata accessor for Tunnel();
    swift_allocObject();
    id v30 = v42;
    v38;
    sub_1000691F0();
    uint64_t v32 = v31;
    swift_beginAccess();
    swift_retain();
    sub_1000669D4();
    swift_endAccess();
    OS_dispatch_queue.assertOnQueueHierarchy()();
    type metadata accessor for LockdownTunnelConnection();
    swift_allocObject();
    id v33 = v30;
    uint64_t v34 = sub_10001C724(v46, v33);
    sub_10005F4C4(v34, v32);

    swift_release();
    v41(v24, v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_10005CF48()
{
  sub_100013A48();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100047F98();
    sub_100065E98();
    swift_endAccess();
    OS_dispatch_queue.assertOnQueueHierarchy()();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10005CFD0()
{
  uint64_t v1 = v0;
  static os_log_type_t.default.getter();
  sub_100017F4C(0, (unint64_t *)&qword_100096990);
  uint64_t v2 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  sub_100013A48();
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_22:
    if (*(void *)(*(void *)(*(void *)(v3 + 56) + 8 * v12)
                   + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator))
    {
      swift_retain();
      sub_100069F5C();
      uint64_t result = swift_release();
    }
  }
  int64_t v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  ++v10;
  if (v14) {
    goto LABEL_21;
  }
  int64_t v10 = v13 + 1;
  if (v13 + 1 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14) {
    goto LABEL_21;
  }
  int64_t v10 = v13 + 2;
  if (v13 + 2 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14) {
    goto LABEL_21;
  }
  int64_t v10 = v13 + 3;
  if (v13 + 3 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14)
  {
LABEL_21:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_22;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10005D1BC()
{
  uint64_t v2 = v0;
  static os_log_type_t.default.getter();
  sub_100017F4C(0, (unint64_t *)&qword_100096990);
  uint64_t v3 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  uint64_t v4 = (uint64_t *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 32);
  v25[0] = v2 + 24;
  v25[1] = v5;
  uint64_t v6 = &qword_100097548;
  while (1)
  {
    uint64_t v7 = sub_1000153C0(v6);
    sub_100010EF0();
    __chkstk_darwin(v8);
    sub_100015928();
    uint64_t v9 = sub_1000153C0(&qword_100097540);
    uint64_t v10 = sub_100014774(v9);
    __chkstk_darwin(v10);
    sub_100012078();
    uint64_t v13 = v12 - v11;
    swift_beginAccess();
    if (*(void *)(*v4 + 16))
    {
      uint64_t v14 = sub_10005E6A0(*v4);
      void v25[2] = v25;
      int64_t v15 = v6;
      uint64_t v17 = v16;
      char v19 = v18 & 1;
      sub_1000153C0(&qword_100097558);
      Dictionary._Variant.remove(at:)();
      uint64_t v20 = v17;
      uint64_t v6 = v15;
      sub_10002A3FC(v14, v20, v19);
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = 1;
    }
    sub_100015C34(v13, v21, 1, v7);
    swift_endAccess();
    OS_dispatch_queue.assertOnQueueHierarchy()();
    if (sub_100015C0C(v13, 1, v7) == 1) {
      break;
    }
    uint64_t v22 = *(int *)(v7 + 48);
    type metadata accessor for UUID();
    sub_100010EF0();
    (*(void (**)(uint64_t, uint64_t))(v23 + 32))(v1, v13);
    *(void *)(v1 + v22) = *(void *)(v13 + v22);
    swift_retain();
    sub_100069F5C();
    swift_release();
    sub_10002A49C(v1, v6);
    uint64_t v4 = (uint64_t *)v25[0];
  }
  return sub_10002A49C(v13, &qword_100097540);
}

void sub_10005D440(uint64_t a1)
{
  uint64_t v70 = a1;
  uint64_t v62 = v1 + 24;
  sub_100013A48();
  uint64_t v63 = v1;
  uint64_t v67 = *(void *)(v1 + 24) + 64;
  sub_100016210();
  uint64_t v68 = v3;
  uint64_t v71 = v4;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  *(void *)&long long v6 = 136315138;
  long long v61 = v6;
  v60[1] = (char *)&type metadata for Any + 8;
  while (v2)
  {
    sub_100011338();
    uint64_t v8 = v7 | (v5 << 6);
LABEL_24:
    uint64_t v22 = *(void **)(*(void *)(*(void *)(v71 + 56) + 8 * v8)
                   + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator);
    if (v22)
    {
      uint64_t v78 = *(void *)(*(void *)(v71 + 56) + 8 * v8);
      swift_retain();
      id v23 = v22;
      id v24 = [v23 identifier];
      uint64_t v25 = sub_1000153C0((uint64_t *)&unk_1000976C0);
      uint64_t v26 = sub_100014774(v25);
      uint64_t v28 = *(void *)(v27 + 64);
      __chkstk_darwin(v26);
      uint64_t v76 = v2;
      uint64_t v77 = v5;
      uint64_t v74 = v29;
      id v75 = v23;
      if (v24)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v30 = type metadata accessor for UUID();
        uint64_t v31 = (char *)v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v32 = 0;
      }
      else
      {
        uint64_t v30 = type metadata accessor for UUID();
        uint64_t v31 = (char *)v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v32 = 1;
      }
      uint64_t v33 = sub_100015C34((uint64_t)v31, v32, 1, v30);
      uint64_t v73 = v60;
      __chkstk_darwin(v33);
      unint64_t v34 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v35 = (char *)v60 - v34;
      type metadata accessor for UUID();
      uint64_t v36 = *(void *)(v30 - 8);
      uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
      v69((char *)v60 - v34, v70, v30);
      sub_100015C34((uint64_t)v60 - v34, 0, 1, v30);
      uint64_t v37 = sub_1000153C0(&qword_100096168);
      uint64_t v72 = v60;
      uint64_t v38 = sub_100014774(v37);
      __chkstk_darwin(v38);
      sub_100015928();
      uint64_t v40 = (uint64_t)v23 + *(int *)(v39 + 56);
      sub_1000409B8((uint64_t)v60 - v34, (uint64_t)v23, (uint64_t *)&unk_1000976C0);
      sub_1000409B8((uint64_t)v60 - v34, v40, (uint64_t *)&unk_1000976C0);
      uint64_t v41 = sub_100016A64((uint64_t)v23);
      if (v43)
      {
        sub_10002A49C((uint64_t)v60 - v34, (uint64_t *)&unk_1000976C0);
        sub_10002A49C((uint64_t)v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_1000976C0);
        sub_100016A64(v40);
        if (!v43) {
          goto LABEL_36;
        }
        sub_10002A49C((uint64_t)v23, (uint64_t *)&unk_1000976C0);
        sub_100015E5C();
LABEL_38:
        uint64_t v48 = static os_log_type_t.default.getter();
        os_log_type_t v49 = v48;
        __chkstk_darwin(v48);
        sub_100012078();
        uint64_t v52 = v51 - v50;
        v69((char *)(v51 - v50), v70, v30);
        sub_100017F4C(0, (unint64_t *)&qword_100096990);
        uint64_t v53 = static OS_os_log.default.getter();
        os_log_type_t v54 = v49;
        if (os_log_type_enabled(v53, v49))
        {
          uint64_t v55 = swift_slowAlloc();
          v79[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v55 = v61;
          sub_10005F7EC(&qword_1000959C8, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v55 + 4) = sub_100010478(v56, v57, v79);
          swift_bridgeObjectRelease();
          uint64_t v58 = sub_100016F8C();
          v59(v58);
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Cancelling tunnel associated with host %s", (uint8_t *)v55, 0xCu);
          swift_arrayDestroy();
          sub_1000120B0();
          sub_1000120B0();
        }
        else
        {

          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v52, v30);
        }
        sub_100047F98();
        sub_100065E98();
        swift_endAccess();
        swift_release();
        OS_dispatch_queue.assertOnQueueHierarchy()();
        sub_100069F5C();
        goto LABEL_42;
      }
      uint64_t v66 = v60;
      __chkstk_darwin(v41);
      id v42 = (char *)v60 - v34;
      sub_1000409B8((uint64_t)v23, (uint64_t)v42, (uint64_t *)&unk_1000976C0);
      uint64_t v44 = sub_100016A64(v40);
      if (v43)
      {
        sub_10002A49C((uint64_t)v35, (uint64_t *)&unk_1000976C0);
        sub_10002A49C((uint64_t)v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_1000976C0);
        uint64_t v45 = sub_100016F8C();
        v46(v45);
LABEL_36:
        sub_10002A49C((uint64_t)v23, &qword_100096168);
        sub_100015E5C();
        goto LABEL_42;
      }
      uint64_t v65 = v60;
      __chkstk_darwin(v44);
      sub_100013460();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v28, v40, v30);
      sub_10005F7EC(&qword_100096170, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v64 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v47(v28, v30);
      sub_10002A49C((uint64_t)v35, (uint64_t *)&unk_1000976C0);
      sub_10002A49C((uint64_t)v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_1000976C0);
      v47((uint64_t)v42, v30);
      sub_10002A49C((uint64_t)v23, (uint64_t *)&unk_1000976C0);
      sub_100015E5C();
      if (v64) {
        goto LABEL_38;
      }
LABEL_42:

      swift_release();
      uint64_t v2 = v76;
      uint64_t v5 = v77;
    }
  }
  uint64_t v9 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v9 >= v68) {
    goto LABEL_43;
  }
  ++v5;
  if (*(void *)(v67 + 8 * v9)) {
    goto LABEL_23;
  }
  uint64_t v5 = v9 + 1;
  sub_100015694();
  if (v10 == v11) {
    goto LABEL_43;
  }
  sub_10000D304();
  if (v13) {
    goto LABEL_23;
  }
  uint64_t v5 = v12 + 2;
  sub_100015694();
  if (v10 == v11) {
    goto LABEL_43;
  }
  sub_10000D304();
  if (v15) {
    goto LABEL_23;
  }
  uint64_t v5 = v14 + 3;
  sub_100015694();
  if (v10 == v11) {
    goto LABEL_43;
  }
  sub_10000D304();
  if (v17)
  {
LABEL_23:
    sub_100016E24();
    uint64_t v8 = v21 + (v5 << 6);
    goto LABEL_24;
  }
  uint64_t v18 = v16 + 4;
  if (v18 >= v68)
  {
LABEL_43:
    swift_release();
    return;
  }
  if (*(void *)(v67 + 8 * v18))
  {
    uint64_t v5 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    sub_100015694();
    if (v10 == v11) {
      goto LABEL_43;
    }
    sub_10000D304();
    uint64_t v18 = v19 + 1;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_45:
  __break(1u);
}

uint64_t sub_10005DB4C()
{
  type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v0);
  sub_100010EB0();
  uint64_t result = XPCDictionary.subscript.getter();
  if ((result & 1) == 0)
  {
    sub_10000DAB8((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    static Error<>.permissionDenied.getter();
    sub_10000DAB8((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    sub_10001698C();
    Error<>.init(_:_:)();
    return swift_willThrow();
  }
  return result;
}

void sub_10005DC94(unint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  type metadata accessor for RemotePairingError();
  sub_100010EF0();
  __chkstk_darwin(v8);
  sub_100010EB0();
  sub_10005DB4C();
  if (!v4)
  {
    uint64_t v24 = a3;
    uint64_t v9 = sub_1000153C0(&qword_100097540);
    uint64_t v10 = sub_100014774(v9);
    __chkstk_darwin(v10);
    sub_100013C28();
    uint64_t v11 = swift_beginAccess();
    uint64_t v12 = *(void *)(v3 + 24);
    __chkstk_darwin(v11);
    void v21[2] = a1;
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_10005E738((uint64_t)sub_10005E67C, v21, v12);
    swift_bridgeObjectRelease();
    sub_10005A9A0((uint64_t)v13, a2);
    swift_release();
    uint64_t v14 = sub_1000153C0(&qword_100097548);
    if (sub_100015C0C(a2, 1, v14) == 1)
    {
      sub_10002A49C(a2, &qword_100097540);
      static RemotePairingError.deviceNotFound.getter();
      unint64_t v22 = 0;
      unint64_t v23 = 0xE000000000000000;
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v22 = 0xD00000000000001ALL;
      unint64_t v23 = 0x800000010007EA30;
      v15._countAndFlagsBits = RemoteUnlockDeviceKeyForTunnelRequest.tunnelDeviceName.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      sub_10000DAB8((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      sub_10001698C();
      sub_10000DAB8((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      Error<>.init(_:_:)();
      swift_willThrow();
    }
    else
    {
      uint64_t v16 = *(void *)(a2 + *(int *)(v14 + 48));
      type metadata accessor for UUID();
      sub_100010EF0();
      (*(void (**)(uint64_t))(v17 + 8))(a2);
      uint64_t v18 = *(void **)(v16 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator);
      if (v18)
      {
        id v19 = v18;
        CUPairedPeer.remoteUnlockKey.getter();
        if (v20 >> 60 == 15)
        {
          static RemotePairingError.pairingRecordMissingInfo.getter();
          sub_10000DAB8((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
          sub_10001698C();
          sub_10000DAB8((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
          sub_100015864();
          swift_willThrow();
        }
        else
        {
          RemoteUnlockDeviceKeyForTunnelResponse.init(deviceKey:)();
        }
        swift_release();
      }
      else
      {
        static RemotePairingError.invalidOperation.getter();
        sub_10000DAB8((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        sub_10001698C();
        sub_10000DAB8((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        sub_100015864();
        swift_willThrow();
        swift_release();
      }
    }
  }
}

uint64_t sub_10005E0F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v23[1] = a3;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_1000153C0(&qword_100097548);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  __chkstk_darwin(v5);
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = (char *)v23 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v12 = v11((char *)v23 - v8, a1, v10);
  uint64_t v13 = *(int *)(v6 + 56);
  *(void *)((char *)v23 + v13 - v8) = v4;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v23 - v8;
  uint64_t v25 = v10;
  v11((char *)v23 - v8, (uint64_t)v23 - v8, v10);
  *(void *)((char *)v23 + v13 - v8) = v4;
  swift_retain();
  uint64_t v15 = sub_100069118();
  uint64_t v17 = v16;
  uint64_t v18 = RemoteUnlockDeviceKeyForTunnelRequest.tunnelDeviceName.getter();
  if (v17)
  {
    if (v15 == v18 && v17 == v19) {
      char v21 = 1;
    }
    else {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    sub_10002A49C((uint64_t)v9, &qword_100097548);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10002A49C((uint64_t)v23 - v8, &qword_100097548);
    swift_bridgeObjectRelease();
    char v21 = 0;
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  return v21 & 1;
}

void sub_10005E2E4(NSObject *a1)
{
  sub_100013A48();
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v34 = v4 + 64;
  sub_100016210();
  uint64_t v35 = v5;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (v2)
  {
    sub_100011338();
    uint64_t v8 = v7 | (v6 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(*(void *)(v4 + 56) + 8 * v8);
    swift_retain();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    swift_retain_n();
    os_log_type_t v24 = v23;
    if (os_log_type_enabled(a1, v23))
    {
      swift_retain_n();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446722;
      uint64_t v26 = UUID.uuidString.getter();
      *(void *)(v25 + 4) = sub_100010478(v26, v27, &v36);
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2082;
      id v28 = *(id *)(v22 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator);
      uint64_t v29 = String.init<A>(describing:)();
      *(void *)(v25 + 14) = sub_100010478(v29, v30, &v36);
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 22) = 2082;
      uint64_t v31 = sub_100069118();
      if (v32)
      {
        uint64_t v33 = v32;
      }
      else
      {
        uint64_t v31 = 0x296C6C756E28;
        uint64_t v33 = 0xE600000000000000;
      }
      *(void *)(v25 + 24) = sub_100010478(v31, v33, &v36);
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, a1, v24, "State dump: %{public}s initiated by %{public}s, RSD name %{public}s", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
      swift_release();
    }
    else
    {
      swift_release_n();
    }
  }
  uint64_t v9 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v9 >= v35) {
    goto LABEL_30;
  }
  ++v6;
  if (*(void *)(v34 + 8 * v9)) {
    goto LABEL_23;
  }
  uint64_t v6 = v9 + 1;
  sub_100016594();
  if (v10 == v11) {
    goto LABEL_30;
  }
  sub_100014800();
  if (v13) {
    goto LABEL_23;
  }
  uint64_t v6 = v12 + 2;
  sub_100016594();
  if (v10 == v11) {
    goto LABEL_30;
  }
  sub_100014800();
  if (v15) {
    goto LABEL_23;
  }
  uint64_t v6 = v14 + 3;
  sub_100016594();
  if (v10 == v11) {
    goto LABEL_30;
  }
  sub_100014800();
  if (v17)
  {
LABEL_23:
    sub_100016E24();
    uint64_t v8 = v21 + (v6 << 6);
    goto LABEL_24;
  }
  uint64_t v18 = v16 + 4;
  if (v18 >= v35)
  {
LABEL_30:
    swift_release();
    return;
  }
  if (*(void *)(v34 + 8 * v18))
  {
    uint64_t v6 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    sub_100016594();
    if (v10 == v11) {
      goto LABEL_30;
    }
    sub_100014800();
    uint64_t v18 = v19 + 1;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_10005E5EC()
{
  swift_release();
  swift_bridgeObjectRelease();

  sub_100010548(v0 + 40);
  return v0;
}

uint64_t sub_10005E624()
{
  sub_10005E5EC();

  return _swift_deallocClassInstance(v0, 81, 7);
}

uint64_t type metadata accessor for DeviceTunnelManager()
{
  return self;
}

uint64_t sub_10005E67C(uint64_t a1, uint64_t *a2)
{
  return sub_10005E0F0(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_10005E6A0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 128;
  for (uint64_t i = 11; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

unint64_t *sub_10005E738(uint64_t isStackAllocationSafe, unint64_t *a2, uint64_t a3)
{
  unsigned int v6 = (uint64_t (*)(char *, uint64_t *))isStackAllocationSafe;
  char v7 = *(unsigned char *)(a3 + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v9 = (unint64_t *)((char *)&v13 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1000645B0(0, v8, v9);
    char v10 = sub_10005E8BC(v9, v8, a3, v6);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    char v11 = (unint64_t *)swift_slowAlloc();
    sub_1000645B0(0, v8, v11);
    a2 = sub_10005E8BC(v11, v8, a3, v6);
    swift_slowDealloc();
  }
  return a2;
}

unint64_t *sub_10005E8BC(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t *))
{
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  uint64_t v25 = a2;
  uint64_t v26 = result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a3 + 64);
  uint64_t v27 = 0;
  uint64_t v28 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v29 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    int64_t v32 = v4;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_17:
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v16 = *(void *)(v15 - 8);
    __chkstk_darwin(v15);
    uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v19 = v31;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v18, *(void *)(v31 + 48) + *(void *)(v20 + 72) * v10, v15);
    uint64_t v34 = *(void *)(*(void *)(v19 + 56) + 8 * v10);
    swift_retain();
    uint64_t v21 = v33;
    char v22 = v30(v18, &v34);
    uint64_t v33 = v21;
    if (v21)
    {
      swift_release();
      return (unint64_t *)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    }
    char v23 = v22;
    swift_release();
    uint64_t result = (unint64_t *)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    int64_t v4 = v32;
    if (v23)
    {
      *(unint64_t *)((char *)v26 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      BOOL v11 = __OFADD__(v27++, 1);
      if (v11) {
        goto LABEL_31;
      }
    }
  }
  BOOL v11 = __OFADD__(v4, 1);
  int64_t v12 = v4 + 1;
  if (v11)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 >= v29) {
    return (unint64_t *)sub_10005EBB8(v26, v25, v27, v31);
  }
  unint64_t v13 = *(void *)(v28 + 8 * v12);
  if (v13)
  {
LABEL_16:
    unint64_t v8 = (v13 - 1) & v13;
    int64_t v32 = v12;
    unint64_t v10 = __clz(__rbit64(v13)) + (v12 << 6);
    goto LABEL_17;
  }
  int64_t v14 = v12 + 1;
  if (v12 + 1 >= v29) {
    return (unint64_t *)sub_10005EBB8(v26, v25, v27, v31);
  }
  unint64_t v13 = *(void *)(v28 + 8 * v14);
  if (v13) {
    goto LABEL_15;
  }
  int64_t v14 = v12 + 2;
  if (v12 + 2 >= v29) {
    return (unint64_t *)sub_10005EBB8(v26, v25, v27, v31);
  }
  unint64_t v13 = *(void *)(v28 + 8 * v14);
  if (v13) {
    goto LABEL_15;
  }
  int64_t v14 = v12 + 3;
  if (v12 + 3 >= v29) {
    return (unint64_t *)sub_10005EBB8(v26, v25, v27, v31);
  }
  unint64_t v13 = *(void *)(v28 + 8 * v14);
  if (v13)
  {
LABEL_15:
    int64_t v12 = v14;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v12 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v12 >= v29) {
      return (unint64_t *)sub_10005EBB8(v26, v25, v27, v31);
    }
    unint64_t v13 = *(void *)(v28 + 8 * v12);
    ++v14;
    if (v13) {
      goto LABEL_16;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10005EBB8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1000153C0(&qword_100097550);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v46 = result;
  if (v39 < 1) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = *v38;
  }
  uint64_t v8 = 0;
  uint64_t v9 = v46 + 64;
  uint64_t v40 = v4;
  while (1)
  {
    if (v7)
    {
      uint64_t v42 = (v7 - 1) & v7;
      uint64_t v43 = v8;
      unint64_t v10 = __clz(__rbit64(v7)) | (v8 << 6);
    }
    else
    {
      uint64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_40;
      }
      if (v11 >= v39) {
        return v46;
      }
      unint64_t v12 = v38[v11];
      uint64_t v13 = v8 + 1;
      if (!v12)
      {
        uint64_t v13 = v8 + 2;
        if (v8 + 2 >= v39) {
          return v46;
        }
        unint64_t v12 = v38[v13];
        if (!v12)
        {
          uint64_t v13 = v8 + 3;
          if (v8 + 3 >= v39) {
            return v46;
          }
          unint64_t v12 = v38[v13];
          if (!v12)
          {
            uint64_t v14 = v8 + 4;
            if (v8 + 4 >= v39) {
              return v46;
            }
            unint64_t v12 = v38[v14];
            if (!v12)
            {
              while (1)
              {
                uint64_t v13 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v39) {
                  return v46;
                }
                unint64_t v12 = v38[v13];
                ++v14;
                if (v12) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v8 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v42 = (v12 - 1) & v12;
      uint64_t v43 = v13;
      unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    }
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v41 = &v37;
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(void *)(v16 + 64);
    __chkstk_darwin(v15);
    unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)(v4 + 48);
    uint64_t v44 = *(void *)(v20 + 72);
    uint64_t v22 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v16 + 16))((char *)&v37 - v18, v21 + v44 * v10, v15);
    uint64_t v45 = &v37;
    uint64_t v23 = *(void *)(*(void *)(v4 + 56) + 8 * v10);
    __chkstk_darwin(v22);
    uint64_t v24 = (char *)&v37 - v18;
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v25((char *)&v37 - v18, (char *)&v37 - v18, v15);
    uint64_t v26 = v46;
    sub_10005F7EC((unint64_t *)&qword_100096300, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v26 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v9 + 8 * (v28 >> 6))) == 0) {
      break;
    }
    unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v9 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v9 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    uint64_t v35 = v46;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v46 + 48) + v30 * v44, v24, v15);
    *(void *)(*(void *)(v35 + 56) + 8 * v30) = v23;
    ++*(void *)(v35 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_39;
    }
    uint64_t v4 = v40;
    unint64_t v7 = v42;
    uint64_t v8 = v43;
    if (!v5) {
      return v46;
    }
  }
  char v31 = 0;
  unint64_t v32 = (unint64_t)(63 - v27) >> 6;
  while (++v29 != v32 || (v31 & 1) == 0)
  {
    BOOL v33 = v29 == v32;
    if (v29 == v32) {
      unint64_t v29 = 0;
    }
    v31 |= v33;
    uint64_t v34 = *(void *)(v9 + 8 * v29);
    if (v34 != -1)
    {
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10005EFAC(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a5 + 48);
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v9);
    uint64_t v10 = *(void *)(*(void *)(a5 + 56) + 16 * a2);
    swift_bridgeObjectRetain();
    return v10;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10005F080(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(a5 + 48);
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a2, v8);

  return swift_retain();
}

uint64_t sub_10005F150()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005F188()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10005F1C0(uint64_t a1, int a2)
{
  return sub_10005C06C(a1, a2, *(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_10005F1CC(uint64_t a1, uint64_t a2)
{
  return sub_10005C89C(a1, a2, v2);
}

uint64_t sub_10005F1DC(uint64_t a1, uint64_t a2)
{
  void v18[3] = type metadata accessor for SocketTunnelConnection();
  v18[4] = &protocol witness table for SocketTunnelConnection;
  v18[0] = a1;
  v15[0] = *(void *)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_100017194((uint64_t)v18, (uint64_t)v17);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  sub_1000326F8(v17, v4 + 24);
  void aBlock[4] = sub_10005FB38;
  aBlock[5] = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008D248;
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = &_swiftEmptyArrayStorage;
  sub_10005F7EC((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_10000E5F4((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  return sub_100010548((uint64_t)v18);
}

uint64_t sub_10005F4C4(uint64_t a1, uint64_t a2)
{
  void v18[3] = type metadata accessor for LockdownTunnelConnection();
  v18[4] = sub_10000DAB8(&qword_100095398, (void (*)(uint64_t))type metadata accessor for LockdownTunnelConnection);
  v18[0] = a1;
  v15[0] = *(void *)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_100017194((uint64_t)v18, (uint64_t)v17);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  sub_1000326F8(v17, v4 + 24);
  void aBlock[4] = sub_10005F7E0;
  aBlock[5] = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008D1D0;
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = &_swiftEmptyArrayStorage;
  sub_10005F7EC((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_10000E5F4((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  return sub_100010548((uint64_t)v18);
}

void sub_10005F7E0()
{
}

uint64_t sub_10005F7EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005F838()
{
  return sub_10005CF48();
}

uint64_t sub_10005F8A4()
{
  swift_release();
  sub_100010548(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10005F8E4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10005F924()
{
}

uint64_t sub_10005F930()
{
  type metadata accessor for UUID();
  sub_100013814();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = v5 | 7;
  unint64_t v7 = ((*(void *)(v4 + 64) + ((v5 + 24) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v8 = sub_100013940();
  v9(v8);
  swift_release();

  return _swift_deallocObject(v0, v7, v6);
}

uint64_t sub_10005F9E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10005BCA0(a1, v5, v1 + v4, v6);
}

uint64_t sub_10005FA8C()
{
  type metadata accessor for UUID();
  sub_100013814();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 24) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_release();
  uint64_t v8 = sub_100013940();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

void sub_10005FB3C()
{
  sub_10003DE5C();
}

void sub_10005FB60()
{
  sub_1000684A4();
  uint64_t v2 = v1;
  swift_retain();
  sub_100023A1C();
  uint64_t v4 = v3;
  swift_release();
  id v5 = sub_1000121DC();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  id v10 = [v2 *(SEL *)(v0 + 1480)];
  if (!v10)
  {
    sub_1000684C4();
    if (!(!v13 & v12)) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000684C4();
  if (!v13 & v12)
  {
    sub_1000684B8();
    if (!(!v13 & v12))
    {
LABEL_14:
      sub_1000156A0();
      goto LABEL_15;
    }
LABEL_19:
    swift_retain();
    sub_100026BBC((unint64_t)v2);
    swift_release();

    goto LABEL_23;
  }
  sub_1000684B8();
  if (!v13 & v12) {
    goto LABEL_14;
  }
  sub_100015BB4(v7, v9);
  sub_10000D310();
  sub_100012130();
  if (v11) {
    goto LABEL_19;
  }
LABEL_15:
  os_log_type_t v14 = static os_log_type_t.default.getter();
  uint64_t v15 = qword_1000986F0;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v14))
  {
    uint64_t v16 = v2;
    sub_100014750();
    sub_10001588C();
    *uint64_t v2 = 136315138;
    id v17 = [v16 identifier];
    sub_1000153C0((uint64_t *)&unk_1000976C0);
    sub_100010EF0();
    __chkstk_darwin(v18);
    sub_100013C28();
    if (v17)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v21 = v19;
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v21 = v19;
      uint64_t v22 = 1;
    }
    uint64_t v23 = sub_100016104(v19, v22, v20, v21);
    uint64_t v25 = sub_10006854C(v23, v24);
    sub_100013B24(v25);

    swift_bridgeObjectRelease();
    sub_100015F48((void *)&_mh_execute_header, v15, v14, "Newly configured connection's resolved peer %s no longer exists in the keychain");
    sub_1000164B8();
    sub_1000120B0();
    sub_1000120B0();
  }

LABEL_23:
  sub_100013918();
}

void sub_10005FE98()
{
  sub_1000684A4();
  uint64_t v2 = v1;
  swift_retain();
  sub_100023A1C();
  uint64_t v4 = v3;
  swift_release();
  id v5 = sub_1000121DC();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  id v10 = [v2 *(SEL *)(v0 + 1480)];
  if (!v10)
  {
    sub_1000684C4();
    if (!(!v13 & v12)) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000684C4();
  if (!v13 & v12)
  {
    sub_1000684B8();
    if (!(!v13 & v12))
    {
LABEL_14:
      sub_1000156A0();
      goto LABEL_15;
    }
LABEL_19:
    swift_retain();
    sub_100026BBC((unint64_t)v2);
    swift_release();

    goto LABEL_23;
  }
  sub_1000684B8();
  if (!v13 & v12) {
    goto LABEL_14;
  }
  sub_100015BB4(v7, v9);
  sub_10000D310();
  sub_100012130();
  if (v11) {
    goto LABEL_19;
  }
LABEL_15:
  os_log_type_t v14 = static os_log_type_t.default.getter();
  uint64_t v15 = qword_1000986F0;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v14))
  {
    uint64_t v16 = v2;
    sub_100014750();
    sub_10001588C();
    *uint64_t v2 = 136315138;
    id v17 = [v16 identifier];
    sub_1000153C0((uint64_t *)&unk_1000976C0);
    sub_100010EF0();
    __chkstk_darwin(v18);
    sub_100013C28();
    if (v17)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v21 = v19;
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v21 = v19;
      uint64_t v22 = 1;
    }
    uint64_t v23 = sub_100016104(v19, v22, v20, v21);
    uint64_t v25 = sub_10006854C(v23, v24);
    sub_100013B24(v25);

    swift_bridgeObjectRelease();
    sub_100015F48((void *)&_mh_execute_header, v15, v14, "Newly configured connection's resolved peer %s no longer exists in the keychain");
    sub_1000164B8();
    sub_1000120B0();
    sub_1000120B0();
  }

LABEL_23:
  sub_100013918();
}

void sub_1000601D0()
{
  sub_1000684A4();
  uint64_t v2 = v1;
  swift_retain();
  sub_100023A1C();
  uint64_t v4 = v3;
  swift_release();
  id v5 = sub_1000121DC();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  id v10 = [v2 *(SEL *)(v0 + 1480)];
  if (!v10)
  {
    sub_1000684C4();
    if (!(!v13 & v12)) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  uint64_t v11 = v10;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000684C4();
  if (!v13 & v12)
  {
    sub_1000684B8();
    if (!(!v13 & v12))
    {
LABEL_14:
      sub_1000156A0();
      goto LABEL_15;
    }
LABEL_19:
    swift_retain();
    sub_100026BBC((unint64_t)v2);
    swift_release();

    goto LABEL_23;
  }
  sub_1000684B8();
  if (!v13 & v12) {
    goto LABEL_14;
  }
  sub_100015BB4(v7, v9);
  sub_10000D310();
  sub_100012130();
  if (v11) {
    goto LABEL_19;
  }
LABEL_15:
  os_log_type_t v14 = static os_log_type_t.default.getter();
  uint64_t v15 = qword_1000986F0;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v14))
  {
    uint64_t v16 = v2;
    sub_100014750();
    sub_10001588C();
    *uint64_t v2 = 136315138;
    id v17 = [v16 identifier];
    sub_1000153C0((uint64_t *)&unk_1000976C0);
    sub_100010EF0();
    __chkstk_darwin(v18);
    sub_100013C28();
    if (v17)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v21 = v19;
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v21 = v19;
      uint64_t v22 = 1;
    }
    uint64_t v23 = sub_100016104(v19, v22, v20, v21);
    uint64_t v25 = sub_10006854C(v23, v24);
    sub_100013B24(v25);

    swift_bridgeObjectRelease();
    sub_100015F48((void *)&_mh_execute_header, v15, v14, "Newly configured connection's resolved peer %s no longer exists in the keychain");
    sub_1000164B8();
    sub_1000120B0();
    sub_1000120B0();
  }

LABEL_23:
  sub_100013918();
}

uint64_t sub_100060508(void *a1)
{
  swift_retain();
  sub_100023A1C();
  uint64_t v3 = v2;
  swift_release();
  id v4 = [v3 publicKey];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = [a1 publicKey];
  if (!v9)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v11 = 0;
      unint64_t v13 = 0xF000000000000000;
      goto LABEL_11;
    }
LABEL_16:
    swift_retain();
    sub_100026BBC((unint64_t)a1);
    swift_release();

    return 1;
  }
  id v10 = v9;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  if (v8 >> 60 == 15)
  {
    if (v13 >> 60 == 15) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  if (v13 >> 60 != 15)
  {
    sub_100015BB4(v6, v8);
    char v24 = static Data.== infix(_:_:)();
    sub_100013BC4(v11, v13);
    sub_100013BC4(v6, v8);
    sub_100013BC4(v6, v8);
    if ((v24 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
LABEL_11:
  sub_100013BC4(v6, v8);
  sub_100013BC4(v11, v13);
LABEL_12:
  os_log_type_t v14 = static os_log_type_t.default.getter();
  uint64_t v15 = qword_1000986F0;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v14))
  {
    id v16 = a1;
    id v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)id v17 = 136315138;
    id v18 = [v16 identifier];
    uint64_t v19 = sub_1000153C0((uint64_t *)&unk_1000976C0);
    __chkstk_darwin(v19);
    uint64_t v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v18)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v22 = type metadata accessor for UUID();
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v22 = type metadata accessor for UUID();
      uint64_t v23 = 1;
    }
    sub_100015C34((uint64_t)v21, v23, 1, v22);
    uint64_t v26 = String.init<A>(describing:)();
    v28[1] = sub_100010478(v26, v27, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v14, "Newly configured connection's resolved peer %s no longer exists in the keychain", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return 0;
}

void sub_1000609B0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100060A24()
{
  os_log_type_t v0 = static os_log_type_t.default.getter();
  uint64_t v1 = qword_1000986F0;
  os_log_type_t v2 = v0;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1000986F0, v0);
  if (result)
  {
    swift_retain();
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v4 = 134217984;
    swift_beginAccess();
    uint64_t v5 = swift_bridgeObjectRetain();
    sub_100012730(v5);
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "RSD Peers updated. Total count: %ld", v4, 0xCu);
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_100060B38()
{
  return swift_bridgeObjectRetain();
}

void sub_100060B68()
{
  sub_1000684A4();
  uint64_t v46 = v1;
  uint64_t v47 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for ControlChannelConnection.Options();
  sub_100013814();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100012078();
  uint64_t v12 = v11 - v10;
  type metadata accessor for ControlChannelConnection.Options.Device();
  sub_100013814();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100012078();
  uint64_t v19 = v18 - v17;
  if ((*(unsigned char *)(v3 + 176) & 1) != 0
    || (uint64_t v38 = v16,
        sub_100013A48(),
        uint64_t v20 = swift_bridgeObjectRetain(),
        uint64_t v21 = sub_100012730(v20),
        swift_bridgeObjectRelease(),
        v21 > 49))
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    dispatch thunk of XPCConnection.cancel()();
  }
  else
  {
    swift_beginAccess();
    id v22 = v5;
    sub_100066B70((uint64_t)v22, (uint64_t)v22);
    swift_endAccess();
    ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)();
    uint64_t v23 = type metadata accessor for RemoteXPCControlChannelTransport();
    swift_allocObject();
    swift_retain();
    uint64_t v40 = (void *)v23;
    uint64_t v41 = (uint64_t (*)(uint64_t))&protocol witness table for RemoteXPCControlChannelTransport;
    v39[0] = RemoteXPCControlChannelTransport.init(xpcConnection:to:)();
    char v24 = *(void **)(v3 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v19, v38);
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v12, enum case for ControlChannelConnection.Options.device(_:), v6);
    uint64_t v25 = *(void *)(v3 + 184);
    uint64_t v44 = type metadata accessor for SystemKeychainPairingManager();
    uint64_t v45 = sub_100012030(&qword_100094F88, (void (*)(uint64_t))type metadata accessor for SystemKeychainPairingManager);
    uint64_t v43 = v25;
    type metadata accessor for ControlChannelConnection();
    swift_retain();
    id v26 = v24;
    swift_retain();
    static ControlChannelConnection.defaultMaxReconnectionAttempts.getter();
    swift_allocObject();
    ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)();
    type metadata accessor for MetadataService();
    sub_100012030(&qword_100096960, (void (*)(uint64_t))type metadata accessor for MetadataService);
    swift_retain();
    dispatch thunk of ControlChannelConnection.customDeviceMetadataProvider.setter();
    uint64_t v27 = sub_100010E68();
    swift_weakInit();
    uint64_t v28 = sub_100010E68();
    swift_weakInit();
    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = v22;
    void v29[3] = v27;
    v29[4] = v28;
    uint64_t v41 = sub_100066C38;
    uint64_t v42 = v29;
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 1107296256;
    void v39[2] = sub_100045CD4;
    uint64_t v40 = &unk_10008D3B8;
    unint64_t v30 = _Block_copy(v39);
    v22;
    swift_release();
    remote_device_set_disconnected_callback();
    _Block_release(v30);
    sub_100017194(v3 + 48, (uint64_t)v39);
    dispatch thunk of ControlChannelConnection.userInteractionProvider.setter();
    sub_100017194(v3 + 88, (uint64_t)v39);
    dispatch thunk of ControlChannelConnection.tunnelListenerCreator.setter();
    swift_beginAccess();
    swift_retain();
    sub_10001101C();
    swift_endAccess();
    swift_release();
    sub_100060A24();
    uint64_t v31 = sub_100010E68();
    swift_weakInit();
    uint64_t v32 = sub_100010E68();
    swift_weakInit();
    uint64_t v33 = sub_100010E68();
    swift_unknownObjectWeakInit();
    uint64_t v34 = (void *)swift_allocObject();
    _OWORD v34[2] = v31;
    uint64_t v34[3] = v32;
    uint64_t v34[4] = v33;
    swift_retain();
    swift_retain();
    swift_retain();
    dispatch thunk of ControlChannelConnection.invalidationHandler.setter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v35 = sub_100010E68();
    swift_weakInit();
    uint64_t v36 = sub_100010E68();
    swift_weakInit();
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v36;
    *(void *)(v37 + 24) = v35;
    swift_retain();
    swift_retain();
    dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter();
    swift_release();
    swift_release();
    sub_100016C68((void *)(v3 + 128), *(void *)(v3 + 152));
    swift_retain();
    sub_100055398();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v19, v38);
  }
  sub_100013918();
}

uint64_t sub_1000611F4(uint64_t a1, void *a2)
{
  remote_device_cancel();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_beginAccess();
    uint64_t v3 = (void *)sub_100066728((uint64_t)a2);
    swift_endAccess();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    os_log_type_t v5 = static os_log_type_t.default.getter();
    uint64_t v6 = qword_1000986F0;
    os_log_type_t v7 = v5;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v5))
    {
      id v8 = a2;
      swift_retain_n();
      id v9 = v8;
      uint64_t v10 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446466;
      remote_device_get_name();
      uint64_t v11 = String.init(cString:)();
      sub_100010478(v11, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2082;
      uint64_t v13 = dispatch thunk of RemoteXPCControlChannelTransport.id.getter();
      sub_100010478(v13, v14, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RSD device %{public}s associated with control channel %{public}s became disconnected. Invalidating control channel", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    dispatch thunk of RemoteXPCControlChannelTransport.invalidate()();
    return swift_release();
  }
  return result;
}

uint64_t sub_100061434()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_beginAccess();
      sub_100011CF4();
      swift_endAccess();
      swift_release();
      sub_100060A24();
      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v2 = (void *)Strong;
        remote_device_cancel();
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10006153C()
{
  uint64_t v0 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      os_log_type_t v5 = (void *)dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
      if (v5)
      {
        uint64_t v6 = v5;
        if ((sub_100060508(v5) & 1) == 0)
        {
          (*(void (**)(unsigned char *, void, uint64_t))(v1 + 104))(v3, enum case for ControlChannelConnection.InvalidationReason.peerUnpaired(_:), v0);
          dispatch thunk of ControlChannelConnection.invalidate(for:)();

          swift_release();
          swift_release();
          return (*(uint64_t (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
        }
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void sub_1000616DC()
{
  static RemoteServiceNames.tunnelService.getter();
  uint64_t v0 = sub_100010E68();
  swift_weakInit();
  v2[4] = sub_100062B2C;
  void v2[5] = v0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 1107296256;
  v2[2] = sub_1000609B0;
  v2[3] = &unk_10008D340;
  uint64_t v1 = _Block_copy(v2);
  swift_release();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  remote_service_listen_with_device();
  swift_release();
  _Block_release(v1);
}

uint64_t sub_1000617E0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t xpc_remote_connection_version_flags = remote_device_get_xpc_remote_connection_version_flags();
    if (xpc_remote_connection_version_flags)
    {
      if ((xpc_remote_connection_version_flags & 0x8000000000000000) == 0)
      {
LABEL_6:
        uint64_t v2 = (void *)xpc_remote_connection_create_with_connected_fd();
        xpc_remote_connection_set_local_service_version();
        type metadata accessor for RemoteXPCPeerConnection();
        static RemoteXPCConnection.unsafePeer(from:)();
        swift_dynamicCastClassUnconditional();
        swift_retain();
        sub_100060B68();

        swift_release_n();
        return swift_release();
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t result = _remotepairing_xpc_remote_connection_get_failsafe_version_flags();
    if (result < 0)
    {
      __break(1u);
      return result;
    }
    goto LABEL_6;
  }
  return result;
}

void sub_100061934()
{
  sub_1000684A4();
  uint64_t v1 = type metadata accessor for ControlChannelConnection.InvalidationReason();
  sub_100013814();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100012078();
  uint64_t v7 = v6 - v5;
  if ((*(unsigned char *)(v0 + 176) & 1) == 0)
  {
    *(unsigned char *)(v0 + 176) = 1;
    sub_100013A48();
    uint64_t v8 = *(void *)(v0 + 24);
    if ((v8 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for ControlChannelConnection();
      sub_100012030(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      sub_1000139AC();
      Set.Iterator.init(_cocoa:)();
      uint64_t v8 = v28;
      uint64_t v25 = v29;
      uint64_t v9 = v30;
      int64_t v10 = v31;
      unint64_t v11 = v32;
    }
    else
    {
      sub_100014740();
      uint64_t v25 = v8 + 56;
      uint64_t v9 = ~v12;
      sub_100010E80();
      unint64_t v11 = v13 & v14;
      swift_bridgeObjectRetain();
      int64_t v10 = 0;
    }
    int64_t v24 = (unint64_t)(v9 + 64) >> 6;
    unsigned int v26 = enum case for ControlChannelConnection.InvalidationReason.serviceShutdown(_:);
    uint64_t v15 = (void (**)(uint64_t, void, uint64_t))(v3 + 104);
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    if (v8 < 0) {
      goto LABEL_9;
    }
    while (1)
    {
      if (v11)
      {
        uint64_t v17 = (v11 - 1) & v11;
        unint64_t v18 = __clz(__rbit64(v11)) | (v10 << 6);
        int64_t v19 = v10;
      }
      else
      {
        int64_t v20 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          return;
        }
        if (v20 >= v24) {
          goto LABEL_29;
        }
        unint64_t v21 = *(void *)(v25 + 8 * v20);
        int64_t v19 = v10 + 1;
        if (!v21)
        {
          int64_t v19 = v10 + 2;
          if (v10 + 2 >= v24) {
            goto LABEL_29;
          }
          unint64_t v21 = *(void *)(v25 + 8 * v19);
          if (!v21)
          {
            int64_t v19 = v10 + 3;
            if (v10 + 3 >= v24) {
              goto LABEL_29;
            }
            unint64_t v21 = *(void *)(v25 + 8 * v19);
            if (!v21)
            {
              int64_t v19 = v10 + 4;
              if (v10 + 4 >= v24) {
                goto LABEL_29;
              }
              unint64_t v21 = *(void *)(v25 + 8 * v19);
              if (!v21)
              {
                int64_t v22 = v10 + 5;
                while (v22 < v24)
                {
                  unint64_t v21 = *(void *)(v25 + 8 * v22++);
                  if (v21)
                  {
                    int64_t v19 = v22 - 1;
                    goto LABEL_25;
                  }
                }
LABEL_29:
                sub_100019C54();
                goto LABEL_30;
              }
            }
          }
        }
LABEL_25:
        uint64_t v17 = (v21 - 1) & v21;
        unint64_t v18 = __clz(__rbit64(v21)) + (v19 << 6);
      }
      uint64_t v23 = *(void *)(*(void *)(v8 + 48) + 8 * v18);
      swift_retain();
      if (!v23) {
        goto LABEL_29;
      }
      while (1)
      {
        (*v15)(v7, v26, v1);
        dispatch thunk of ControlChannelConnection.invalidate(for:)();
        swift_release();
        (*v16)(v7, v1);
        int64_t v10 = v19;
        unint64_t v11 = v17;
        if ((v8 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_9:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for ControlChannelConnection();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          swift_unknownObjectRelease();
          int64_t v19 = v10;
          uint64_t v17 = v11;
          if (v27) {
            continue;
          }
        }
        goto LABEL_29;
      }
    }
  }
  static os_log_type_t.error.getter();
  os_log(_:dso:log:_:_:)();
LABEL_30:
  sub_100013918();
}

uint64_t sub_100061CB0(NSObject *a1)
{
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(a1, v3))
  {
    swift_retain();
    *(_DWORD *)sub_100014750() = 134217984;
    sub_100013A48();
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = sub_100012730(v4);
    swift_bridgeObjectRelease();
    uint64_t v28 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    sub_100015F48((void *)&_mh_execute_header, a1, v3, "State dump: NetworkPairingService connection count = %ld");
    sub_1000120B0();
  }
  sub_100013A48();
  uint64_t v6 = *(void *)(v1 + 24);
  if ((v6 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ControlChannelConnection();
    sub_100012030(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v6 = v28;
    uint64_t v26 = v29;
    uint64_t v8 = v30;
    int64_t v9 = v31;
    unint64_t v10 = v32;
  }
  else
  {
    uint64_t v26 = v6 + 56;
    uint64_t v8 = ~(-1 << *(unsigned char *)(v6 + 32));
    sub_100010E80();
    unint64_t v10 = v11 & v12;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v9 = 0;
  }
  int64_t v25 = (unint64_t)(v8 + 64) >> 6;
  if (v6 < 0) {
    goto LABEL_9;
  }
  while (1)
  {
    if (v10)
    {
      uint64_t v13 = (v10 - 1) & v10;
      unint64_t v14 = __clz(__rbit64(v10)) | (v9 << 6);
      int64_t v15 = v9;
      goto LABEL_26;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v17 >= v25) {
      return sub_100019C54();
    }
    unint64_t v18 = *(void *)(v26 + 8 * v17);
    int64_t v15 = v9 + 1;
    if (!v18)
    {
      int64_t v15 = v9 + 2;
      if (v9 + 2 >= v25) {
        return sub_100019C54();
      }
      unint64_t v18 = *(void *)(v26 + 8 * v15);
      if (!v18)
      {
        int64_t v15 = v9 + 3;
        if (v9 + 3 >= v25) {
          return sub_100019C54();
        }
        unint64_t v18 = *(void *)(v26 + 8 * v15);
        if (!v18)
        {
          int64_t v15 = v9 + 4;
          if (v9 + 4 >= v25) {
            return sub_100019C54();
          }
          unint64_t v18 = *(void *)(v26 + 8 * v15);
          if (!v18)
          {
            int64_t v19 = v9 + 5;
            while (v19 < v25)
            {
              unint64_t v18 = *(void *)(v26 + 8 * v19++);
              if (v18)
              {
                int64_t v15 = v19 - 1;
                goto LABEL_25;
              }
            }
            return sub_100019C54();
          }
        }
      }
    }
LABEL_25:
    uint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
LABEL_26:
    uint64_t v20 = *(void *)(*(void *)(v6 + 48) + 8 * v14);
    swift_retain();
    if (!v20) {
      return sub_100019C54();
    }
    while (1)
    {
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(a1, v21))
      {
        swift_retain_n();
        uint64_t v22 = sub_100014750();
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136446210;
        type metadata accessor for ControlChannelConnection();
        swift_retain();
        uint64_t v23 = String.init<A>(describing:)();
        *(void *)(v22 + 4) = sub_100010478(v23, v24, &v27);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, a1, v21, "State dump: RSDService control channel connection: %{public}s", (uint8_t *)v22, 0xCu);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      uint64_t result = swift_release();
      int64_t v9 = v15;
      unint64_t v10 = v13;
      if ((v6 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_9:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ControlChannelConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v16 = v27;
        swift_unknownObjectRelease();
        int64_t v15 = v9;
        uint64_t v13 = v10;
        if (v16) {
          continue;
        }
      }
      return sub_100019C54();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100062110()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_100010548(v0 + 48);
  sub_100010548(v0 + 88);
  sub_100010548(v0 + 128);
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100062168()
{
  sub_100062110();

  return _swift_deallocClassInstance(v0, 192, 7);
}

uint64_t type metadata accessor for RSDService()
{
  return self;
}

uint64_t sub_1000621C0()
{
  return sub_100060B38();
}

void sub_1000621E4()
{
}

void sub_100062208()
{
}

uint64_t sub_10006222C(NSObject *a1)
{
  return sub_100061CB0(a1);
}

unint64_t sub_100062250()
{
  sub_1000685F4();
  Swift::Int v2 = AnyHashable._rawHashValue(seed:)(*(void *)(v0 + 40));

  return sub_1000624C0(v1, v2);
}

unint64_t sub_100062290()
{
  sub_100068600();
  type metadata accessor for UUID();
  sub_100068390((unint64_t *)&qword_100096300);
  uint64_t v1 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100062588(v0, v1);
}

unint64_t sub_1000622FC(uint64_t a1)
{
  type metadata accessor for SystemXPCPeerConnection();
  sub_100012030(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100062700(a1, v2);
}

unint64_t sub_1000623A8(int a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_1000627FC(a1, v2);
}

unint64_t sub_1000623F0()
{
  sub_100068600();
  type metadata accessor for XPCEventPublisher.Token();
  sub_100012030(&qword_1000976F0, (void (*)(uint64_t))&type metadata accessor for XPCEventPublisher.Token);
  uint64_t v1 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100062898(v0, v1);
}

unint64_t sub_10006247C(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_100062A58(a1, v2);
}

unint64_t sub_1000624C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000683D4(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100027D34((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100062588(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a1;
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v15 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v14 = ~v3;
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = v5;
    uint64_t v7 = *(void **)(v5 - 8);
    uint64_t v8 = (void (*)(char *, unint64_t, uint64_t))v7[2];
    uint64_t v9 = v7[8];
    uint64_t v10 = v7[9];
    uint64_t v11 = (uint64_t (**)(char *, uint64_t))(v7 + 1);
    do
    {
      __chkstk_darwin(v5);
      v8((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), *(void *)(v17 + 48) + v10 * v4, v6);
      sub_100068390(&qword_100096170);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v5 = (*v11)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      if (v12) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v14;
    }
    while (((*(void *)(v15 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100062700(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    type metadata accessor for SystemXPCPeerConnection();
    sub_100012030((unint64_t *)&unk_100097730, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    do
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000627FC(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100062898(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for XPCEventPublisher.Token();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100012030(&qword_1000976F8, (void (*)(uint64_t))&type metadata accessor for XPCEventPublisher.Token);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_100062A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100062AF4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100062B2C()
{
  return sub_1000617E0();
}

uint64_t sub_100062B34(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    sub_100068484();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for PairableHostsBrowseRegistration();
      sub_1000685BC();
      uint64_t v9 = swift_dynamicCast();
      sub_100068508(v9, v10, v11, v12, v13, v14, v15, v16, v32, v33, v35);
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    sub_100063260(v3, result + 1);
    sub_100016D04();
    if (!v28 & v27)
    {
      uint64_t v31 = v26;
      swift_retain();
    }
    else
    {
      swift_retain();
      sub_100068628();
      sub_1000639E8();
      uint64_t v31 = v35;
    }
    sub_10006400C(a2, v31);
    *uint64_t v4 = v31;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)();
    type metadata accessor for PairableHostsBrowseRegistration();
    sub_100012030(&qword_1000966A8, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    swift_bridgeObjectRetain();
    HashableByObjectIdentity.hash(into:)();
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v19 = v17 & ~v18;
    sub_100068654();
    if (v20)
    {
      swift_retain();
      char v21 = sub_10006869C();
      swift_release();
      if (v21)
      {
LABEL_9:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v4 + 48) + 8 * v19);
        swift_retain();
        return 0;
      }
      uint64_t v22 = ~v18;
      while (1)
      {
        unint64_t v19 = (v19 + 1) & v22;
        sub_100068654();
        if ((v23 & 1) == 0) {
          break;
        }
        swift_retain();
        char v24 = sub_10006869C();
        swift_release();
        if (v24) {
          goto LABEL_9;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    Swift::Int v30 = swift_retain();
    sub_1000641C0(v30, v19, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v36;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_100062DE0()
{
  sub_1000684D0();
  if (v5)
  {
    unint64_t v15 = *(void *)(v3 + 40);
    type metadata accessor for SystemXPCPeerConnection();
    sub_100012030(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    swift_bridgeObjectRetain();
    sub_100068668();
    sub_100013500();
    if (v16)
    {
      sub_100012030((unint64_t *)&unk_100097730, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
      while ((sub_100016B5C() & 1) == 0)
      {
        sub_1000167D0();
        if ((v17 & 1) == 0) {
          goto LABEL_8;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      sub_100068634();
      return 0;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = sub_100015B88();
    sub_1000643C4(v18, v15, v2);
    *uint64_t v1 = v24;
    swift_bridgeObjectRelease();
    *uint64_t v0 = v3;
  }
  else
  {
    sub_100068484();
    swift_retain();
    uint64_t v6 = __CocoaSet.member(for:)();
    swift_release();
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for SystemXPCPeerConnection();
      sub_1000685BC();
      uint64_t v7 = sub_100016CD0();
      sub_100068508(v7, v8, v9, v10, v11, v12, v13, v14, v23, v6, v24);
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    sub_100063498(v4, result + 1);
    sub_100016D04();
    if (!v5 & v21)
    {
      uint64_t v22 = v20;
      swift_retain();
    }
    else
    {
      swift_retain();
      sub_100068628();
      sub_100063CE8();
      uint64_t v22 = v24;
    }
    sub_1000640F8();
    *uint64_t v1 = v22;
    swift_bridgeObjectRelease();
    *uint64_t v0 = v2;
  }
  return 1;
}

uint64_t sub_100063034(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  sub_1000153C0(&qword_1000976D0);
  uint64_t v2 = static _SetStorage.convert(_:capacity:)();
  uint64_t v14 = v2;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
    return v2;
  }
  type metadata accessor for ControlChannelConnection();
  while (1)
  {
    swift_dynamicCast();
    uint64_t v2 = v14;
    if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
    {
      sub_1000636C4();
      uint64_t v2 = v14;
    }
    sub_100012030(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v4 = v2 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = result & ~v5;
    unint64_t v7 = v6 >> 6;
    if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) == 0) {
      break;
    }
    unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
    ++*(void *)(v2 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v9 = 0;
  unint64_t v10 = (unint64_t)(63 - v5) >> 6;
  while (++v7 != v10 || (v9 & 1) == 0)
  {
    BOOL v11 = v7 == v10;
    if (v7 == v10) {
      unint64_t v7 = 0;
    }
    v9 |= v11;
    uint64_t v12 = *(void *)(v4 + 8 * v7);
    if (v12 != -1)
    {
      unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_100063260(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  sub_1000153C0(&qword_100097780);
  uint64_t v2 = static _SetStorage.convert(_:capacity:)();
  uint64_t v14 = v2;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
    return v2;
  }
  type metadata accessor for PairableHostsBrowseRegistration();
  while (1)
  {
    swift_dynamicCast();
    uint64_t v2 = v14;
    if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
    {
      sub_1000639E8();
      uint64_t v2 = v14;
    }
    Hasher.init(_seed:)();
    sub_100012030(&qword_1000966A8, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    HashableByObjectIdentity.hash(into:)();
    Swift::Int result = Hasher._finalize()();
    uint64_t v4 = v2 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = result & ~v5;
    unint64_t v7 = v6 >> 6;
    if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) == 0) {
      break;
    }
    unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
    ++*(void *)(v2 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v9 = 0;
  unint64_t v10 = (unint64_t)(63 - v5) >> 6;
  while (++v7 != v10 || (v9 & 1) == 0)
  {
    BOOL v11 = v7 == v10;
    if (v7 == v10) {
      unint64_t v7 = 0;
    }
    v9 |= v11;
    uint64_t v12 = *(void *)(v4 + 8 * v7);
    if (v12 != -1)
    {
      unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100063498(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  sub_1000153C0(&qword_1000972D0);
  uint64_t v2 = static _SetStorage.convert(_:capacity:)();
  uint64_t v14 = v2;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
    return v2;
  }
  type metadata accessor for SystemXPCPeerConnection();
  while (1)
  {
    swift_dynamicCast();
    uint64_t v2 = v14;
    if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
    {
      sub_100063CE8();
      uint64_t v2 = v14;
    }
    sub_100012030(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v4 = v2 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = result & ~v5;
    unint64_t v7 = v6 >> 6;
    if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) == 0) {
      break;
    }
    unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
    ++*(void *)(v2 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v9 = 0;
  unint64_t v10 = (unint64_t)(63 - v5) >> 6;
  while (++v7 != v10 || (v9 & 1) == 0)
  {
    BOOL v11 = v7 == v10;
    if (v7 == v10) {
      unint64_t v7 = 0;
    }
    v9 |= v11;
    uint64_t v12 = *(void *)(v4 + 8 * v7);
    if (v12 != -1)
    {
      unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000636C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000153C0(&qword_1000976D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      uint64_t v16 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      type metadata accessor for ControlChannelConnection();
      sub_100012030(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v18 = result & ~v17;
      unint64_t v19 = v18 >> 6;
      if (((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6))) == 0)
      {
        char v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v17) >> 6;
        while (++v19 != v22 || (v21 & 1) == 0)
        {
          BOOL v23 = v19 == v22;
          if (v19 == v22) {
            unint64_t v19 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v19);
          if (v24 != -1)
          {
            unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v8 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(void *)(*(void *)(v4 + 48) + 8 * v20) = v16;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_38;
      }
      if (v13 >= v26) {
        goto LABEL_32;
      }
      unint64_t v14 = v27[v13];
      ++v10;
      if (!v14)
      {
        int64_t v10 = v13 + 1;
        if (v13 + 1 >= v26) {
          goto LABEL_32;
        }
        unint64_t v14 = v27[v10];
        if (!v14)
        {
          int64_t v10 = v13 + 2;
          if (v13 + 2 >= v26) {
            goto LABEL_32;
          }
          unint64_t v14 = v27[v10];
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v26)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
              if (v25 > 63) {
                sub_1000645B0(0, (unint64_t)(v25 + 63) >> 6, v27);
              }
              else {
                *char v27 = -1 << v25;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v14 = v27[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_39;
                }
                if (v10 >= v26) {
                  goto LABEL_32;
                }
                unint64_t v14 = v27[v10];
                ++v15;
                if (v14) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v10 = v15;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v14 - 1) & v14;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000639E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000153C0(&qword_100097780);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      Hasher.init(_seed:)();
      type metadata accessor for PairableHostsBrowseRegistration();
      sub_100012030(&qword_1000966A8, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
      HashableByObjectIdentity.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          BOOL v25 = v21 == v24;
          if (v21 == v24) {
            unint64_t v21 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v21);
          if (v26 != -1)
          {
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v4 + 48) + 8 * v22) = v18;
      ++*(void *)(v4 + 16);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v9) {
        goto LABEL_32;
      }
      unint64_t v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v9) {
          goto LABEL_32;
        }
        unint64_t v16 = v6[v12];
        if (!v16)
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v9) {
            goto LABEL_32;
          }
          unint64_t v16 = v6[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
              if (v27 > 63) {
                sub_1000645B0(0, (unint64_t)(v27 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                *uint64_t v6 = -1 << v27;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_39;
                }
                if (v12 >= v9) {
                  goto LABEL_32;
                }
                unint64_t v16 = v6[v12];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v17;
          }
        }
      }
LABEL_20:
      unint64_t v8 = (v16 - 1) & v16;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100063CE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000153C0(&qword_1000972D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
    {
      uint64_t v16 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      type metadata accessor for SystemXPCPeerConnection();
      sub_100012030(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v18 = result & ~v17;
      unint64_t v19 = v18 >> 6;
      if (((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6))) == 0)
      {
        char v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v17) >> 6;
        while (++v19 != v22 || (v21 & 1) == 0)
        {
          BOOL v23 = v19 == v22;
          if (v19 == v22) {
            unint64_t v19 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v19);
          if (v24 != -1)
          {
            unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v8 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(void *)(*(void *)(v4 + 48) + 8 * v20) = v16;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_38;
      }
      if (v13 >= v26) {
        goto LABEL_32;
      }
      unint64_t v14 = v27[v13];
      ++v10;
      if (!v14)
      {
        int64_t v10 = v13 + 1;
        if (v13 + 1 >= v26) {
          goto LABEL_32;
        }
        unint64_t v14 = v27[v10];
        if (!v14)
        {
          int64_t v10 = v13 + 2;
          if (v13 + 2 >= v26) {
            goto LABEL_32;
          }
          unint64_t v14 = v27[v10];
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v26)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
              if (v25 > 63) {
                sub_1000645B0(0, (unint64_t)(v25 + 63) >> 6, v27);
              }
              else {
                *uint64_t v27 = -1 << v25;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v14 = v27[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_39;
                }
                if (v10 >= v26) {
                  goto LABEL_32;
                }
                unint64_t v14 = v27[v10];
                ++v15;
                if (v14) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v10 = v15;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v14 - 1) & v14;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_10006400C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for PairableHostsBrowseRegistration();
  sub_100012030(&qword_1000966A8, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
  HashableByObjectIdentity.hash(into:)();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void sub_1000640F8()
{
  sub_1000684A4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  v8(0);
  sub_100012030(v3, v1);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  sub_100014740();
  unint64_t v9 = _HashTable.nextHole(atOrAfter:)();
  *(void *)(v5 + 56 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
  *(void *)(*(void *)(v5 + 48) + 8 * v9) = v7;
  ++*(void *)(v5 + 16);
  sub_1000112A4();
}

Swift::Int sub_1000641C0(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000639E8();
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (Swift::Int)sub_1000645D8(&qword_100097780);
      goto LABEL_14;
    }
    sub_100064A78();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for PairableHostsBrowseRegistration();
  sub_100012030(&qword_1000966A8, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
  HashableByObjectIdentity.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    swift_retain();
    char v11 = static HashableByObjectIdentity.== infix(_:_:)();
    unint64_t result = swift_release();
    if (v11)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        swift_retain();
        char v13 = static HashableByObjectIdentity.== infix(_:_:)();
        unint64_t result = swift_release();
        if (v13) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

uint64_t sub_1000643C4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100063CE8();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_1000645D8(&qword_1000972D0);
      goto LABEL_12;
    }
    sub_100064D68();
  }
  uint64_t v8 = *v3;
  type metadata accessor for SystemXPCPeerConnection();
  sub_100012030(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    sub_100012030((unint64_t *)&unk_100097730, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    do
    {
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000645B0(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void *sub_1000645CC()
{
  return sub_1000645D8(&qword_1000976D0);
}

void *sub_1000645D8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000153C0(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = *(void *)(v3 + 56);
  uint64_t v13 = -1;
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  unint64_t v14 = v13 & v12;
  int64_t v15 = (unint64_t)(v11 + 63) >> 6;
  if ((v13 & v12) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v16 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v10 << 6))
  {
    *(void *)(*(void *)(v5 + 48) + 8 * i) = *(void *)(*(void *)(v3 + 48) + 8 * i);
    unint64_t result = (void *)swift_retain();
    if (v14) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v15) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v7 + 8 * v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v7 + 8 * v10);
        if (!v19) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v14 = (v19 - 1) & v19;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10006477C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000153C0(&qword_1000976D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    type metadata accessor for ControlChannelConnection();
    sub_100012030(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v17 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6))) == 0)
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        BOOL v23 = v19 == v22;
        if (v19 == v22) {
          unint64_t v19 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v19);
        if (v24 != -1)
        {
          unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v8 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(void *)(*(void *)(v4 + 48) + 8 * v20) = v16;
    ++*(void *)(v4 + 16);
    if (v7) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_36;
    }
    if (v13 >= v26) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v26) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v26) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v26)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v25 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100064A78()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000153C0(&qword_100097780);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    Hasher.init(_seed:)();
    type metadata accessor for PairableHostsBrowseRegistration();
    sub_100012030(&qword_1000966A8, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    swift_retain();
    HashableByObjectIdentity.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v9 + 8 * (v19 >> 6))) == 0)
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v9 + 8 * v20);
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v9 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v4 + 48) + 8 * v21) = v17;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v26) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100064D68()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000153C0(&qword_1000972D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    type metadata accessor for SystemXPCPeerConnection();
    sub_100012030(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v17 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6))) == 0)
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        BOOL v23 = v19 == v22;
        if (v19 == v22) {
          unint64_t v19 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v19);
        if (v24 != -1)
        {
          unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v8 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v8 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(void *)(*(void *)(v4 + 48) + 8 * v20) = v16;
    ++*(void *)(v4 + 16);
    if (v7) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_36;
    }
    if (v13 >= v26) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v26) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v26) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v10);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v26)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v25 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100065064()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if ((*v0 & 0xC000000000000001) == 0)
  {
    Hasher.init(_seed:)();
    type metadata accessor for PairableHostsBrowseRegistration();
    sub_100012030(&qword_1000966A8, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
    swift_bridgeObjectRetain();
    HashableByObjectIdentity.hash(into:)();
    Swift::Int v5 = Hasher._finalize()();
    uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v7 = v5 & ~v6;
    sub_100068688();
    if (v8)
    {
      swift_retain();
      char v9 = sub_1000686E8();
      swift_release();
      if (v9)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        swift_isUniquelyReferenced_nonNull_native();
        uint64_t v25 = *v1;
        sub_1000686DC();
        if (!v14)
        {
          sub_1000645D8(&qword_100097780);
          uint64_t v13 = v25;
        }
        uint64_t v4 = *(void *)(*(void *)(v13 + 48) + 8 * v7);
        unint64_t v15 = sub_100065AB0(v7);
        sub_1000163EC(v15, v16, v17, v18, v19, v20, v21, v22, v24, v25);
        goto LABEL_12;
      }
      uint64_t v10 = ~v6;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v10;
        sub_100068688();
        if ((v11 & 1) == 0) {
          break;
        }
        swift_retain();
        char v12 = sub_1000686E8();
        swift_release();
        if (v12) {
          goto LABEL_9;
        }
      }
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  char v3 = __CocoaSet.contains(_:)();
  swift_release();
  if ((v3 & 1) == 0) {
    goto LABEL_13;
  }
  sub_1000139AC();
  uint64_t v4 = sub_100065640();
LABEL_12:
  swift_bridgeObjectRelease();
  return v4;
}

void sub_10006525C()
{
  sub_1000684A4();
  sub_100068614();
  if (v2)
  {
    unint64_t v4 = *(void *)(v1 + 40);
    type metadata accessor for SystemXPCPeerConnection();
    sub_100012030(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    swift_bridgeObjectRetain();
    sub_100068708();
    sub_100013CE4();
    if (v5)
    {
      sub_100012030((unint64_t *)&unk_100097730, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
      while ((sub_100016E38() & 1) == 0)
      {
        sub_100016170();
        if ((v6 & 1) == 0) {
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRelease();
      swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *v0;
      sub_1000686DC();
      if ((v7 & 1) == 0) {
        sub_1000645D8(&qword_1000972D0);
      }
      sub_1000121F8(v4, (void (*)(void))&type metadata accessor for SystemXPCPeerConnection, &qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
      *uint64_t v0 = v8;
    }
  }
  else
  {
    sub_100068584();
    swift_retain();
    char v3 = __CocoaSet.contains(_:)();
    swift_release();
    if (v3) {
      sub_100065840();
    }
  }
LABEL_12:
  swift_bridgeObjectRelease();
  sub_1000112A4();
}

uint64_t sub_100065430()
{
  sub_1000685F4();
  swift_bridgeObjectRelease();
  __CocoaSet.count.getter();
  uint64_t v2 = sub_1000685BC();
  uint64_t v3 = sub_100063034(v2, v1);
  uint64_t v14 = v3;
  type metadata accessor for ControlChannelConnection();
  sub_100012030(&qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
  swift_retain();
  dispatch thunk of Hashable._rawHashValue(seed:)();
  sub_100014740();
  unint64_t v6 = v5 & ~v4;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v4;
    sub_100012030(&qword_1000972C8, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    unint64_t v9 = sub_100068628();
    sub_1000121F8(v9, v10, v11, v12);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      *uint64_t v0 = v14;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100065640()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  Swift::Int v4 = sub_100063260(v3, v2);
  Swift::Int v13 = v4;
  Hasher.init(_seed:)();
  type metadata accessor for PairableHostsBrowseRegistration();
  sub_100012030(&qword_1000966A8, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
  swift_retain();
  HashableByObjectIdentity.hash(into:)();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    swift_retain();
    char v8 = static HashableByObjectIdentity.== infix(_:_:)();
    swift_release();
    if (v8)
    {
LABEL_6:
      swift_release();
      uint64_t v11 = *(void *)(*(void *)(v4 + 48) + 8 * v7);
      sub_100065AB0(v7);
      if (static HashableByObjectIdentity.== infix(_:_:)())
      {
        *uint64_t v1 = v13;
        return v11;
      }
      __break(1u);
    }
    else
    {
      uint64_t v9 = ~v6;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          break;
        }
        swift_retain();
        char v10 = static HashableByObjectIdentity.== infix(_:_:)();
        swift_release();
        if (v10) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100065840()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_100063498(v2, v1);
  uint64_t v10 = v3;
  type metadata accessor for SystemXPCPeerConnection();
  sub_100012030(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
  swift_retain();
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100012030((unint64_t *)&unk_100097730, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_1000121F8(v6, (void (*)(void))&type metadata accessor for SystemXPCPeerConnection, &qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      *uint64_t v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_100065A68(unint64_t a1)
{
  return sub_1000121F8(a1, (void (*)(void))&type metadata accessor for ControlChannelConnection, &qword_100096130, (void (*)(uint64_t))&type metadata accessor for ControlChannelConnection);
}

unint64_t sub_100065AB0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        type metadata accessor for PairableHostsBrowseRegistration();
        sub_100012030(&qword_1000966A8, (void (*)(uint64_t))type metadata accessor for PairableHostsBrowseRegistration);
        swift_retain();
        HashableByObjectIdentity.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_release();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            unint64_t v15 = (void *)(v14 + 8 * v2);
            uint64_t v16 = (void *)(v14 + 8 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *unint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

#error "100065D20: call analysis failed (funcsize=58)"

#error "100065E00: call analysis failed (funcsize=59)"

void sub_100065E98()
{
}

#error "100065F00: call analysis failed (funcsize=56)"

void sub_100065FA4()
{
}

void sub_100065FC4()
{
  sub_1000684A4();
  int64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1000685F4();
  swift_bridgeObjectRetain();
  sub_100062290();
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v0;
    sub_1000686DC();
    Swift::Int v9 = *(void *)(v8 + 24);
    sub_1000153C0(v4);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
    type metadata accessor for UUID();
    sub_100010EF0();
    sub_10001219C();
    v10();
    v2(0);
    sub_100068390((unint64_t *)&qword_100096300);
    _NativeDictionary._delete(at:)();
    *uint64_t v0 = v11;
    swift_bridgeObjectRelease();
  }
  sub_1000112A4();
}

#error "100066258: call analysis failed (funcsize=130)"

#error "10006635C: call analysis failed (funcsize=58)"

#error "10006647C: call analysis failed (funcsize=78)"

#error "100066588: call analysis failed (funcsize=66)"

#error "1000666B0: call analysis failed (funcsize=52)"

uint64_t sub_100066728(uint64_t a1)
{
  int64_t v2 = v1;
  unint64_t v3 = sub_10006247C(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v1;
  uint64_t v7 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  sub_1000153C0((uint64_t *)&unk_1000976D8);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(*(void *)(v11 + 56) + 8 * v5);
  sub_1000672B4();
  _NativeDictionary._delete(at:)();
  *int64_t v2 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1000667FC()
{
  sub_1000685D4();
  uint64_t v1 = (_OWORD *)sub_10001134C();
  unint64_t v3 = sub_1000672F4(v1, v0, v2);
  sub_1000163EC((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10006684C(char a1, uint64_t a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_1000168D4();
  uint64_t v5 = sub_10006742C(a1, a2, v4);
  sub_1000163EC(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000668B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    if (v2 < 0) {
      uint64_t v3 = *v0;
    }
    else {
      uint64_t v3 = v2 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v1 = sub_100066D18(v3, result + 1);
  }
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  uint64_t v5 = sub_100068540();
  uint64_t v8 = sub_10006754C(v5, v6, v7);
  sub_1000163EC(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10006695C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_100066AA4(a1, a2, a3, (uint64_t)sub_100067664, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_100066974(uint64_t a1, int a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v3 = (_OWORD *)sub_10001134C();
  uint64_t v5 = sub_100067808(v3, a2, v4);
  sub_1000163EC((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000669D4()
{
  sub_1000685D4();
  uint64_t v15 = *v0;
  *uint64_t v0 = 0x8000000000000000;
  uint64_t v1 = sub_100068540();
  uint64_t v5 = sub_100067930(v1, v2, v3, v4);
  sub_1000163EC(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);

  return swift_bridgeObjectRelease();
}

#error "100066A64: call analysis failed (funcsize=19)"

uint64_t sub_100066A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_100066AA4(a1, a2, a3, (uint64_t)sub_100067BF0, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_100066AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000139B8();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_isUniquelyReferenced_nonNull_native();
  sub_1000168D4();
  v12(v18, v16, v14);
  void *v10 = a10;
  sub_100015D60();
  return swift_bridgeObjectRelease();
}

#error "100066B48: call analysis failed (funcsize=19)"

uint64_t sub_100066B70(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  sub_100067ED0(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v2 = v7;

  return swift_bridgeObjectRelease();
}

uint64_t sub_100066BF0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100066C38(uint64_t a1)
{
  return sub_1000611F4(a1, *(void **)(v1 + 16));
}

uint64_t sub_100066C44()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100066C7C()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100066CC4()
{
  return sub_100061434();
}

uint64_t sub_100066CD0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100066D10()
{
  return sub_10006153C();
}

uint64_t sub_100066D18(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000153C0((uint64_t *)&unk_100097760);
  uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
  uint64_t v17 = v2;
  __CocoaDictionary.makeIterator()();
  uint64_t v3 = __CocoaDictionary.Iterator.next()();
  if (!v3)
  {
LABEL_16:
    swift_release();
    return v2;
  }
  uint64_t v4 = v3;
  type metadata accessor for SystemXPCPeerConnection();
  while (1)
  {
    swift_dynamicCast();
    sub_1000153C0(&qword_100095A88);
    swift_dynamicCast();
    uint64_t v2 = v17;
    unint64_t v5 = *(void *)(v17 + 16);
    if (*(void *)(v17 + 24) <= v5)
    {
      sub_100066F7C(v5 + 1, 1);
      uint64_t v2 = v17;
    }
    sub_100012030(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v7 = v2 + 64;
    uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v9 = result & ~v8;
    unint64_t v10 = v9 >> 6;
    if (((-1 << v9) & ~*(void *)(v2 + 64 + 8 * (v9 >> 6))) == 0) {
      break;
    }
    unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*(void *)(v2 + 64 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v2 + 48) + 8 * v11) = v16;
    *(void *)(*(void *)(v2 + 56) + 8 * v11) = v4;
    ++*(void *)(v2 + 16);
    uint64_t v4 = __CocoaDictionary.Iterator.next()();
    if (!v4) {
      goto LABEL_16;
    }
  }
  char v12 = 0;
  unint64_t v13 = (unint64_t)(63 - v8) >> 6;
  while (++v10 != v13 || (v12 & 1) == 0)
  {
    BOOL v14 = v10 == v13;
    if (v10 == v13) {
      unint64_t v10 = 0;
    }
    v12 |= v14;
    uint64_t v15 = *(void *)(v7 + 8 * v10);
    if (v15 != -1)
    {
      unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100066F7C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000153C0((uint64_t *)&unk_100097760);
  char v33 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v32 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * i);
    uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v33 & 1) == 0)
    {
      swift_retain();
      swift_unknownObjectRetain();
    }
    type metadata accessor for SystemXPCPeerConnection();
    sub_100012030(&qword_1000959E8, (void (*)(uint64_t))&type metadata accessor for SystemXPCPeerConnection);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(void *)(*(void *)(v7 + 48) + 8 * v25) = v20;
    *(void *)(*(void *)(v7 + 56) + 8 * v25) = v21;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v31)
    {
      swift_release();
      uint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    uint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v32 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v32 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v31)
  {
    unint64_t v18 = *(void *)(v32 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v31) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v32 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
LABEL_34:
  if (v33)
  {
    uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
    if (v30 >= 64) {
      sub_1000645B0(0, (unint64_t)(v30 + 63) >> 6, v17);
    }
    else {
      *uint64_t v17 = -1 << v30;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_1000672B4()
{
  unint64_t result = qword_100096260;
  if (!qword_100096260)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100096260);
  }
  return result;
}

_OWORD *sub_1000672F4(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_100062250();
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1000153C0((uint64_t *)&unk_100097740);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100062250();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    int64_t v19 = (_OWORD *)(v18[7] + 32 * v14);
    sub_100010548((uint64_t)v19);
    return sub_10001673C(a1, v19);
  }
  else
  {
    sub_1000683D4(a2, (uint64_t)v21);
    return sub_100067FE0(v14, (uint64_t)v21, a1, v18);
  }
}

uint64_t sub_10006742C(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_1000622FC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1000153C0(&qword_100097788);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_1000622FC(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    type metadata accessor for SystemXPCPeerConnection();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    *(unsigned char *)(v18[7] + v14) = a1 & 1;
  }
  else
  {
    sub_10006805C(v14, a2, a1 & 1, v18);
    return swift_retain();
  }
  return result;
}

uint64_t sub_100067540(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100067930(a1, a2, a3, (uint64_t *)&unk_100097770);
}

uint64_t sub_10006754C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_1000622FC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1000153C0(&qword_100097758);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_1000622FC(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    type metadata accessor for SystemXPCPeerConnection();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = v18[7];
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    sub_1000680A0(v14, a2, a1, v18);
    return swift_retain();
  }
  return result;
}

uint64_t sub_100067664(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = sub_100062290();
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1000153C0(&qword_100097750);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100062290();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_10:
    type metadata accessor for UUID();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v20 + 56) + 16 * v16);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v21 = a1;
    v21[1] = a2;
  }
  else
  {
    uint64_t v23 = type metadata accessor for UUID();
    __chkstk_darwin(v23);
    unint64_t v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t))(v26 + 16))(v25, a3);
    return sub_10006829C(v16, (uint64_t)v25, a1, a2, v20);
  }
  return result;
}

_OWORD *sub_100067808(_OWORD *a1, int a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_1000623A8(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1000153C0((uint64_t *)&unk_100096E78);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_1000623A8(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_13:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    char v19 = (_OWORD *)(v18[7] + 32 * v14);
    sub_100010548((uint64_t)v19);
    return sub_10001673C(a1, v19);
  }
  else
  {
    return sub_1000680E4(v14, a2, a1, v18);
  }
}

uint64_t sub_100067930(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  Swift::Int v10 = *v4;
  sub_100062290();
  sub_1000685A8();
  if (v13)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v14 = v11;
  char v15 = v12;
  sub_1000153C0(a4);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v10)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100062290();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_10:
    type metadata accessor for UUID();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v6;
  if (v15)
  {
    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t result = swift_release();
    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    type metadata accessor for UUID();
    sub_100013814();
    __chkstk_darwin(v21);
    sub_100012078();
    uint64_t v24 = v23 - v22;
    (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v23 - v22, a2);
    return sub_10006814C(v14, v24, a1, v18);
  }
  return result;
}

uint64_t sub_100067A84(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  Swift::Int v10 = (void *)*v4;
  unint64_t v11 = sub_1000155A8();
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1000153C0(&qword_100097700);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000155A8();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t v22 = type metadata accessor for XPCEventPublisher.Token();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
    uint64_t v25 = v22;
    uint64_t v26 = v21 + *(void *)(v23 + 72) * v16;
    return v24(v26, a1, v25);
  }
  else
  {
    sub_1000681EC(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100067BF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for XPCEventPublisher.Token();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v4;
  unint64_t v14 = sub_1000623F0();
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v19 = v14;
  char v20 = v15;
  sub_1000153C0(&qword_100097708);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18)) {
    goto LABEL_5;
  }
  unint64_t v21 = sub_1000623F0();
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v19 = v21;
LABEL_5:
  uint64_t v23 = *v5;
  if (v20)
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v23 + 56) + 16 * v19);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v26 = v28;
    uint64_t *v24 = a1;
    v24[1] = v26;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    return sub_10006829C(v19, (uint64_t)v12, a1, v28, v23);
  }
  return result;
}

uint64_t sub_100067DA8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_1000155A8();
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_1000153C0((uint64_t *)&unk_100097710);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000155A8();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  char v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_100068348(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_100067ED0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_10006247C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_1000153C0((uint64_t *)&unk_1000976D8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_10006247C(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = v18[7];

    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    sub_1000680A0(v14, a2, a1, v18);
  }
}

_OWORD *sub_100067FE0(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_10001673C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t sub_10006805C(unint64_t result, uint64_t a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(unsigned char *)(a4[7] + result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_1000680A0(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

_OWORD *sub_1000680E4(unint64_t a1, int a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  uint64_t result = sub_10001673C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10006814C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000159CC(a1, a4 + 8 * (a1 >> 6));
  uint64_t v9 = *(void *)(v8 + 48);
  type metadata accessor for UUID();
  sub_100010EF0();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v10 + 32))(v9 + *(void *)(v10 + 72) * a1, a2);
  *(void *)(*(void *)(a4 + 56) + 8 * a1) = a3;
  uint64_t v12 = *(void *)(a4 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(a4 + 16) = v14;
  }
  return result;
}

uint64_t sub_1000681EC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for XPCEventPublisher.Token();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_10006829C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1000159CC(a1, a5 + 8 * (a1 >> 6));
  uint64_t v11 = *(void *)(v10 + 48);
  v12(0);
  sub_100010EF0();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v13 + 32))(v11 + *(void *)(v13 + 72) * a1, a2);
  char v15 = (void *)(*(void *)(a5 + 56) + 16 * a1);
  *char v15 = a3;
  v15[1] = a4;
  uint64_t v16 = *(void *)(a5 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v18;
  }
  return result;
}

unint64_t sub_100068348(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_100068390(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000683D4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100068440(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100068464(float a1)
{
  *uint64_t v1 = a1;
  return swift_errorRetain();
}

uint64_t sub_100068484()
{
  return swift_bridgeObjectRetain();
}

void sub_1000684EC()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_100068508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11 = a11;
  return swift_unknownObjectRelease();
}

uint64_t sub_100068524()
{
  return String.init<A>(describing:)();
}

uint64_t sub_100068540()
{
  return v0;
}

uint64_t sub_10006854C(uint64_t a1, uint64_t a2)
{
  return sub_100010478(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_100068568()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100068584()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000685BC()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000685D4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100068600()
{
  return 0;
}

uint64_t sub_100068628()
{
  return v0;
}

uint64_t sub_100068634()
{
  *uint64_t v0 = *(void *)(*(void *)(*(void *)v1 + 48) + 8 * v2);
  return swift_retain();
}

uint64_t sub_100068668()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t sub_10006869C()
{
  return static HashableByObjectIdentity.== infix(_:_:)();
}

uint64_t sub_1000686BC()
{
  return swift_bridgeObjectRelease();
}

void sub_1000686DC()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_1000686E8()
{
  return static HashableByObjectIdentity.== infix(_:_:)();
}

uint64_t sub_100068708()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t sub_100068728(uint64_t a1)
{
  uint64_t v2 = sub_1000153C0(&qword_100096160);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100056A00(a1, (uint64_t)v4);
  uint64_t v5 = type metadata accessor for Date();
  int v6 = sub_100015C0C((uint64_t)v4, 1, v5);
  if (v6 == 1)
  {
    sub_100033A38((uint64_t)v4, &qword_100096160);
    unint64_t v7 = 0;
  }
  else
  {
    Date.timeIntervalSince1970.getter();
    unint64_t v9 = v8;
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    unint64_t v7 = v9;
  }
  sub_100068D4C(v7, v6 == 1);
  return sub_100033A38(a1, &qword_100096160);
}

uint64_t sub_100068858@<X0>(uint64_t a1@<X8>)
{
  sub_100068A58();
  if (v2)
  {
    uint64_t v3 = 1;
  }
  else
  {
    Date.init(timeIntervalSince1970:)();
    uint64_t v3 = 0;
  }
  uint64_t v4 = type metadata accessor for Date();

  return sub_100015C34(a1, v3, 1, v4);
}

double sub_1000688C0()
{
  double v0 = 2592000.0;
  if (os_variant_allows_internal_security_policies())
  {
    uint64_t v1 = static Defaults.pairingRecordExpiryInterval.getter();
    if ((v2 & 1) == 0)
    {
      double v0 = *(double *)&v1;
      os_log_type_t v3 = static os_log_type_t.default.getter();
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v3))
      {
        uint64_t v4 = (float *)swift_slowAlloc();
        sub_1000138AC(v4, 3.852e-34);
        sub_100015AD4((void *)&_mh_execute_header, v5, v6, "Using custom pairing record expiry interval based on default: %f");
        swift_slowDealloc();
      }
    }
  }
  return v0;
}

double sub_10006898C()
{
  double v0 = 86400.0;
  if (os_variant_allows_internal_security_policies())
  {
    uint64_t UsedUpdate = static Defaults.pairingRecordLastUsedUpdateInterval.getter();
    if ((v2 & 1) == 0)
    {
      double v0 = *(double *)&UsedUpdate;
      os_log_type_t v3 = static os_log_type_t.default.getter();
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v3))
      {
        uint64_t v4 = (float *)swift_slowAlloc();
        sub_1000138AC(v4, 3.852e-34);
        sub_100015AD4((void *)&_mh_execute_header, v5, v6, "Using custom pairing record last used update interval based on default: %f");
        swift_slowDealloc();
      }
    }
  }
  return v0;
}

uint64_t sub_100068A58()
{
  uint64_t v1 = sub_1000408D4(v0);
  if (!v1)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    goto LABEL_6;
  }
  uint64_t v2 = v1;
  v18[1] = 0xD000000000000016;
  _OWORD v18[2] = 0x800000010007EF40;
  AnyHashable.init<A>(_:)();
  sub_10004A7B0(v2, &v20);
  sub_100027D34((uint64_t)v19);
  swift_bridgeObjectRelease();
  if (!*((void *)&v21 + 1))
  {
LABEL_6:
    sub_100033A38((uint64_t)&v20, &qword_100095588);
    goto LABEL_7;
  }
  if (swift_dynamicCast()) {
    return v19[0];
  }
LABEL_7:
  uint64_t v4 = sub_1000153C0(&qword_100096160);
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v7 = (char *)v18 - v6;
  id v8 = [v0 dateModified];
  if (__chkstk_darwin(v8))
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = (char *)v18 - v6;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = (char *)v18 - v6;
    uint64_t v11 = 1;
  }
  sub_100015C34((uint64_t)v10, v11, 1, v9);
  sub_1000574C8((uint64_t)v18 - v6, (uint64_t)v18 - v6);
  type metadata accessor for Date();
  uint64_t v12 = sub_100015C0C((uint64_t)v18 - v6, 1, v9);
  if (v12)
  {
    sub_100033A38((uint64_t)v18 - v6, &qword_100096160);
    return 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v9 - 8);
    __chkstk_darwin(v12);
    char v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v7, v9);
    sub_100033A38((uint64_t)v7, &qword_100096160);
    Date.timeIntervalSince1970.getter();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v9);
    return v17;
  }
}

void sub_100068D4C(unint64_t a1, char a2)
{
  os_log_type_t v3 = v2;
  uint64_t v6 = sub_1000408D4(v3);
  if (!v6) {
    uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
  }
  uint64_t v12 = v6;
  unint64_t v7 = 0xD000000000000016;
  unint64_t v8 = 0x800000010007EF40;
  AnyHashable.init<A>(_:)();
  if (a2)
  {
    a1 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = &type metadata for Double;
  }
  unint64_t v7 = a1;
  sub_10004A478((uint64_t)&v7, (uint64_t)v11);
  sub_100068E34(v12, v3);
}

void sub_100068E34(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setInfo:isa];
}

id sub_100068EB4()
{
  id result = [objc_allocWithZone((Class)NSLock) init];
  qword_100097798 = (uint64_t)result;
  return result;
}

uint64_t sub_100068EE8(uint64_t a1, unint64_t a2)
{
  v13[3] = &type metadata for Data;
  v13[4] = &protocol witness table for Data;
  v13[0] = a1;
  v13[1] = a2;
  uint64_t v4 = sub_100016C68(v13, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
        JUMPOUT(0x100069064);
      }
      sub_100071FA4();
      sub_100015BB4(v5, v6);
      sub_100070D64((int)v5, v5 >> 32, &v12);
      sub_1000158A8(v5, v6);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(v5 + 16);
      uint64_t v9 = *(void *)(v5 + 24);
      sub_100071FA4();
      swift_retain();
      swift_retain();
      sub_100070D64(v8, v9, &v12);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      sub_100071FA4();
      uint64_t v7 = 0;
      goto LABEL_7;
    default:
      sub_100071FA4();
      uint64_t v7 = BYTE6(v6);
LABEL_7:
      sub_100070F8C(v7, &v12);
      break;
  }
  sub_1000158A8(a1, a2);
  uint64_t v10 = v12;
  sub_100010548((uint64_t)v13);
  return v10;
}

uint64_t sub_100069074(uint64_t a1)
{
  uint64_t v9 = sub_1000153C0(&qword_100097920);
  unint64_t v10 = sub_1000715C4();
  v8[0] = a1;
  uint64_t v2 = sub_100016C68(v8, v9);
  uint64_t v3 = *v2 + 32;
  uint64_t v4 = v3 + *(void *)(*v2 + 16);
  swift_bridgeObjectRetain();
  sub_100070CEC(v3, v4, &v7);
  swift_bridgeObjectRelease();
  uint64_t v5 = v7;
  sub_100010548((uint64_t)v8);
  return v5;
}

uint64_t sub_100069118()
{
  sub_1000153C0(&qword_100095590);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_10006918C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 120);
  *a2 = *(void *)(v3 + 112);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

void sub_1000691F0()
{
  sub_1000139EC();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v39 = v12;
  uint64_t v40 = v11;
  uint64_t v44 = v13;
  uint64_t v41 = v0;
  uint64_t v14 = (void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state);
  bzero((void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state), 0xA0uLL);
  if (v8)
  {
    char v15 = (void *)swift_allocObject();
    void v15[2] = v10;
    v15[3] = v8;
    _DWORD v15[4] = v6;
    sub_10000D330();
    uint64_t v16 = v14[16];
    v14[16] = sub_100071CD8;
    v14[17] = v15;
    sub_100040BDC(v8);
    id v17 = v10;
    sub_1000408C4(v16);
  }
  uint64_t v42 = v8;
  uint64_t v43 = v6;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = v10;
  void v18[3] = v4;
  uint64_t v19 = v2;
  v18[4] = v2;
  sub_10000D330();
  uint64_t v20 = v14[18];
  v14[18] = sub_100071C80;
  v14[19] = v18;
  id v21 = v10;
  swift_retain();
  sub_1000408C4(v20);
  uint64_t v23 = v40;
  uint64_t v22 = v41;
  *(void *)(v41 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_initiator) = v40;
  uint64_t v24 = v22 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel_identifier;
  uint64_t v25 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v24, v44, v25);
  if (v39)
  {
    uint64_t v26 = v39;
    uint64_t v27 = v23;
    swift_release();
    sub_1000408C4(v42);

    sub_10001480C();
    v28();
  }
  else
  {
    unint64_t v38 = sub_1000394F0();
    uint64_t v29 = type metadata accessor for DispatchQoS();
    uint64_t v39 = v36;
    __chkstk_darwin(v29 - 8);
    sub_100012078();
    uint64_t v37 = v23;
    static DispatchQoS.userInteractive.getter();
    type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
    uint64_t v40 = v36;
    sub_100013814();
    __chkstk_darwin(v30);
    sub_100012078();
    v36[1] = v19;
    (*(void (**)(uint64_t, void))(v33 + 104))(v32 - v31, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
    type metadata accessor for OS_dispatch_queue.Attributes();
    _OWORD v36[2] = v36;
    sub_100010EF0();
    __chkstk_darwin(v34);
    sub_100012078();
    uint64_t v45 = &_swiftEmptyArrayStorage;
    sub_100071C8C((unint64_t *)&unk_100096210, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_1000153C0(&qword_100095D80);
    v36[0] = v21;
    sub_100039728((unint64_t *)&unk_100096220, &qword_100095D80);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    sub_100015B44();
    uint64_t v26 = (id *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    swift_release();
    sub_1000408C4(v42);

    sub_10001480C();
    v35();
  }
  *(void *)(v22 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue) = v26;
  sub_100013918();
}

uint64_t sub_100069614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[0] = a2;
  uint64_t v7 = sub_1000153C0(&qword_100096178);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  sub_100071CE4(a1, (uint64_t)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100096178);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a4;
  sub_100071E30((uint64_t)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, &qword_100096178);
  void aBlock[4] = sub_100071E78;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008D828;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = &_swiftEmptyArrayStorage;
  sub_100071C8C((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_100039728((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_100069968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[0] = a2;
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a1;
  void aBlock[4] = sub_1000217C0;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000CF80;
  aBlock[3] = &unk_10008D878;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = &_swiftEmptyArrayStorage;
  sub_100071C8C((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_100039728((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_100069C20()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  uint64_t v31 = v2;
  LODWORD(v33) = v3;
  LODWORD(v32) = v4;
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  uint64_t v10 = v9;
  char v12 = v11;
  uint64_t v13 = sub_1000153C0(&qword_100097958);
  uint64_t v14 = sub_100015A2C(v13);
  uint64_t v16 = v15;
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  sub_100071CE4(v6, (uint64_t)v19, &qword_100097958);
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v21 = v20 + v18;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v1;
  *(unsigned char *)(v22 + 24) = v12;
  *(void *)(v22 + 32) = v10;
  *(void *)(v22 + 40) = v8;
  sub_100071E30((uint64_t)v19, v22 + v20, &qword_100097958);
  uint64_t v23 = (unsigned char *)(v22 + v21);
  *uint64_t v23 = (_BYTE)v32;
  v23[1] = v33;
  *(void *)(v22 + ((v21 + 9) & 0xFFFFFFFFFFFFFFF8)) = v31;
  v36[4] = sub_100071BE4;
  void v36[5] = v22;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 1107296256;
  _OWORD v36[2] = sub_10000CF80;
  id v36[3] = &unk_10008D788;
  uint64_t v32 = _Block_copy(v36);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  sub_100013814();
  uint64_t v25 = v24;
  __chkstk_darwin(v26);
  sub_100013C28();
  swift_retain();
  sub_100015BB4(v10, v8);
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100013814();
  __chkstk_darwin(v27);
  sub_100071F2C();
  uint64_t v35 = &_swiftEmptyArrayStorage;
  sub_100071C8C((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_100039728((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v28 = v32;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  sub_1000112D0();
  v29();
  (*(void (**)(unint64_t, uint64_t))(v25 + 8))(v20, v33);
  swift_release();
  sub_100013918();
}

void sub_100069F34()
{
}

void sub_100069F5C()
{
  sub_1000139EC();
  v11[4] = sub_100071AE0;
  uint64_t v12 = v0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10000CF80;
  v11[3] = &unk_10008D738;
  uint64_t v1 = _Block_copy(v11);
  type metadata accessor for DispatchQoS();
  sub_100013814();
  __chkstk_darwin(v2);
  sub_100013900();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  sub_100013814();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100012078();
  uint64_t v9 = v8 - v7;
  sub_100071C8C((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000153C0(&qword_1000950F0);
  sub_100039728((unint64_t *)&qword_1000953C0, &qword_1000950F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
  sub_1000112D0();
  v10();
  swift_release();
  sub_100013918();
}

void sub_10006A174()
{
}

void sub_10006A19C()
{
  sub_1000139EC();
  uint64_t v135 = v1;
  LODWORD(v142) = v2;
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  int v140 = v7;
  sub_100016368();
  uint64_t v141 = v8;
  uint64_t v139 = type metadata accessor for RemotePairingError();
  sub_100013814();
  uint64_t v136 = v9;
  uint64_t v11 = __chkstk_darwin(v10);
  id v137 = (char *)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  sub_100071FBC((uint64_t)&v130 - v13);
  uint64_t v143 = sub_1000153C0(&qword_100096178);
  sub_100010EF0();
  __chkstk_darwin(v14);
  sub_1000120E0();
  sub_100071FBC(v15);
  type metadata accessor for BonjourService();
  sub_100013814();
  __chkstk_darwin(v16);
  sub_100071F2C();
  type metadata accessor for NetworkParamsType();
  sub_100013814();
  uint64_t v147 = v18;
  uint64_t v148 = v17;
  __chkstk_darwin(v17);
  sub_1000120E0();
  unint64_t v146 = v19;
  type metadata accessor for CertificateUtilities.RawTLSPublicKeyInfo();
  sub_100013814();
  uint64_t v149 = v21;
  uint64_t v150 = v20;
  uint64_t v23 = *(void *)(v22 + 64);
  __chkstk_darwin(v20);
  sub_100071FBC((uint64_t)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v130 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v130 - v28;
  CFStringRef v152 = *(NSObject **)((char *)v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  uint64_t v145 = v0;
  uint64_t v30 = (uint64_t)v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
  sub_10000D330();
  CFStringRef v151 = (uint64_t *)v30;
  sub_100071CE4(v30, (uint64_t)&v153, &qword_1000978D0);
  uint64_t v31 = v156;
  sub_100015C5C((uint64_t)&v153, &qword_1000978D0);
  if (!v31)
  {
    sub_100015B44();
    static CertificateUtilities.createTLSRawPublicKey(with:)();
    uint64_t v32 = *(void (**)(unint64_t, uint64_t, uint64_t))(v149 + 32);
    uint64_t v133 = v149 + 32;
    uint64_t v132 = v32;
    v32((unint64_t)v29, (uint64_t)v27, v150);
    uint64_t v131 = Data.count.getter();
    id v134 = v29;
    if (v131 == 32)
    {
      uint64_t v37 = v146;
      *unint64_t v146 = v6;
      v37[1] = v4;
      uint64_t v59 = sub_100013D0C();
      v60(v59);
      sub_100015BB4(v6, v4);
      UUID.uuidString.getter();
      uint64_t v61 = sub_100010FDC();
      v62(v61);
      BonjourService.rawValue.getter();
      sub_10001480C();
      v63();
      uint64_t v64 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v65 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      bonjour_service = nw_advertise_descriptor_create_bonjour_service((const char *)(v64 + 32), (const char *)(v65 + 32), 0);
      swift_release();
      swift_release();
      if (!bonjour_service)
      {
        os_log_type_t v98 = static os_log_type_t.error.getter();
        uint64_t v99 = qword_1000986F0;
        os_log_type_t v100 = v98;
        BOOL v101 = os_log_type_enabled((os_log_t)qword_1000986F0, v98);
        uint64_t v102 = v151;
        if (v101)
        {
          swift_retain_n();
          uint64_t v103 = (uint8_t *)sub_100014750();
          uint64_t v153 = sub_100015720();
          *(_DWORD *)uint64_t v103 = 136446210;
          uint64_t v104 = UUID.uuidString.getter();
          uint64_t v106 = sub_100010478(v104, v105, &v153);
          sub_1000156D4(v106);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v99, v100, "%{public}s: Unable to create network listener service for Tunnel connection", v103, 0xCu);
          swift_arrayDestroy();
          sub_1000120B0();
          sub_1000120B0();
        }
        uint64_t v107 = (void (*)(uint64_t))v102[16];
        uint64_t v108 = v134;
        if (v107)
        {
          uint64_t v109 = sub_10000DB00((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
          swift_retain();
          sub_100071F84();
          sub_10000DB00((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
          sub_100015F90();
          sub_100071F64();
          sub_1000164D4();
          v107(v109);
          sub_1000408C4((uint64_t)v107);
          sub_100015C5C(v109, &qword_100096178);
          uint64_t v110 = v102[16];
        }
        else
        {
          uint64_t v110 = 0;
        }
        v102[16] = 0;
        v102[17] = 0;
        sub_1000408C4(v110);
        OS_dispatch_queue.assertOnQueueHierarchy()();
        sub_100010EE4();
        v129();
        (*(void (**)(char *, uint64_t))(v149 + 8))(v108, v150);
        goto LABEL_29;
      }
    }
    else
    {
      sub_100015BB4(v6, v4);
      uint64_t v33 = CertificateUtilities.RawTLSPublicKeyInfo.publicKeyDERData.getter();
      uint64_t v35 = v34;
      uint64_t v36 = CertificateUtilities.RawTLSPublicKeyInfo.identity.getter();
      uint64_t v37 = v146;
      *unint64_t v146 = v6;
      v37[1] = v4;
      void v37[2] = v33;
      _OWORD v37[3] = v35;
      v37[4] = v36;
      uint64_t v38 = sub_100013D0C();
      v39(v38);
      UUID.uuidString.getter();
      uint64_t v40 = sub_100010FDC();
      v41(v40);
      BonjourService.rawValue.getter();
      sub_10001480C();
      v42();
      uint64_t v43 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v44 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      bonjour_service = nw_advertise_descriptor_create_bonjour_service((const char *)(v43 + 32), (const char *)(v44 + 32), 0);
      swift_release();
      swift_release();
      if (!bonjour_service)
      {
        os_log_type_t v46 = static os_log_type_t.error.getter();
        uint64_t v47 = qword_1000986F0;
        os_log_type_t v48 = v46;
        BOOL v49 = os_log_type_enabled((os_log_t)qword_1000986F0, v46);
        uint64_t v50 = v151;
        if (v49)
        {
          swift_retain_n();
          uint64_t v51 = (uint8_t *)sub_100014750();
          uint64_t v153 = sub_100015720();
          *(_DWORD *)uint64_t v51 = 136446210;
          uint64_t v52 = UUID.uuidString.getter();
          uint64_t v54 = sub_100010478(v52, v53, &v153);
          sub_1000156D4(v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "%{public}s: Unable to create network listener service for Tunnel connection", v51, 0xCu);
          swift_arrayDestroy();
          sub_1000120B0();
          sub_1000120B0();
        }
        uint64_t v55 = (void (*)(uint64_t))v50[16];
        uint64_t v56 = v134;
        if (v55)
        {
          uint64_t v57 = sub_10000DB00((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
          swift_retain();
          sub_100071F84();
          sub_10000DB00((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
          sub_100015F90();
          sub_100071F64();
          sub_1000164D4();
          v55(v57);
          sub_1000408C4((uint64_t)v55);
          sub_100015C5C(v57, &qword_100096178);
          uint64_t v58 = v50[16];
        }
        else
        {
          uint64_t v58 = 0;
        }
        v50[16] = 0;
        v50[17] = 0;
        sub_1000408C4(v58);
        OS_dispatch_queue.assertOnQueueHierarchy()();
        sub_100010EE4();
        v128();
        (*(void (**)(char *, uint64_t))(v149 + 8))(v56, v150);
        goto LABEL_29;
      }
    }
    char v66 = v142 & 1;
    sub_10006B5F4((uint64_t)v37, v140 & 1, v142 & 1);
    uint64_t v67 = NWParameters.nw.getter();
    swift_release();
    nw_listener_t v68 = nw_listener_create(v67);
    swift_unknownObjectRelease();
    uint64_t v69 = (uint64_t)v151;
    if (v68)
    {
      char v70 = v131 != 32;
      uint64_t v71 = type metadata accessor for NWObjcListener();
      swift_allocObject();
      uint64_t v72 = sub_100042E34((uint64_t)v68, v70);
      CFStringRef v156 = (void *)v71;
      CFStringRef v157 = (uint64_t (*)())&off_10008C020;
      uint64_t v153 = v72;
      swift_beginAccess();
      uint64_t v143 = (uint64_t)v68;
      swift_unknownObjectRetain();
      swift_retain();
      sub_100071A94((uint64_t)&v153, v69, &qword_1000978D0);
      swift_endAccess();
      uint64_t v73 = v152;
      OS_dispatch_queue.assertOnQueueHierarchy()();
      uint64_t v74 = *(NSObject **)(v72 + 32);
      uint64_t v144 = bonjour_service;
      nw_listener_set_advertise_descriptor(v74, bonjour_service);
      uint64_t v75 = swift_allocObject();
      swift_weakInit();
      uint64_t v76 = swift_allocObject();
      *(void *)(v76 + 16) = v75;
      *(unsigned char *)(v76 + 24) = v66;
      swift_retain();
      sub_100042E48((uint64_t)v73, (uint64_t)sub_100071684, v76);
      swift_release();
      swift_release();
      uint64_t v77 = swift_allocObject();
      swift_weakInit();
      uint64_t v78 = v150;
      uint64_t v79 = v149 + 16;
      uint64_t v80 = v138;
      (*(void (**)(uint64_t, char *, uint64_t))(v149 + 16))(v138, v134, v150);
      unint64_t v81 = (*(unsigned __int8 *)(v79 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 64);
      uint64_t v82 = swift_allocObject();
      *(void *)(v82 + 16) = v77;
      *(void *)(v82 + 24) = v72;
      v132(v82 + v81, v80, v78);
      swift_retain();
      swift_retain();
      uint64_t v142 = v72;
      sub_100042FD0(v73, (uint64_t)sub_10007173C, v82);
      swift_release();
      swift_release();
      os_log_type_t v83 = static os_log_type_t.default.getter();
      uint64_t v84 = powerLog.getter();
      if (os_log_type_enabled(v84, v83))
      {
        uint64_t v85 = v135;
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        uint64_t v86 = swift_slowAlloc();
        v159[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v86 = 136446466;
        uint64_t v87 = UUID.uuidString.getter();
        uint64_t v153 = sub_100010478(v87, v88, v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v86 + 12) = 2082;
        uint64_t v89 = 0;
        if (v85)
        {
          type metadata accessor for PeerConnectionInfo();
          uint64_t v89 = Array.description.getter();
        }
        else
        {
          uint64_t v90 = 0;
        }
        uint64_t v153 = v89;
        uint64_t v154 = v90;
        sub_1000153C0(&qword_100095590);
        uint64_t v112 = String.init<A>(describing:)();
        uint64_t v153 = sub_100010478(v112, v113, v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v84, v83, "%{public}s: Starting a tunnel listener due to a request from :%{public}s", (uint8_t *)v86, 0x16u);
        swift_arrayDestroy();
        sub_1000120B0();
        sub_1000120B0();
      }
      else
      {
      }
      uint64_t v114 = swift_allocObject();
      swift_weakInit();
      CFStringRef v157 = sub_100071790;
      uint64_t v158 = v114;
      uint64_t v153 = (uint64_t)_NSConcreteStackBlock;
      uint64_t v154 = 1107296256;
      CFStringRef v155 = sub_10000CF80;
      CFStringRef v156 = &unk_10008D698;
      _Block_copy(&v153);
      type metadata accessor for DispatchWorkItemFlags();
      sub_100010EF0();
      __chkstk_darwin(v115);
      sub_100013460();
      v159[0] = (uint64_t)&_swiftEmptyArrayStorage;
      sub_100071C8C((unint64_t *)&qword_1000953B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      swift_retain();
      sub_1000153C0(&qword_1000950F0);
      sub_100039728((unint64_t *)&qword_1000953C0, &qword_1000950F0);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      uint64_t v116 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      swift_release();
      v151[12] = v116;
      swift_retain();
      swift_release();
      OS_dispatch_queue.assertOnQueueHierarchy()();
      type metadata accessor for DispatchTime();
      CFStringRef v151 = &v130;
      sub_100013814();
      uint64_t v118 = v117;
      uint64_t v120 = __chkstk_darwin(v119);
      uint64_t v145 = &v130;
      __chkstk_darwin(v120);
      static DispatchTime.now()();
      uint64_t v121 = type metadata accessor for DispatchTimeInterval();
      sub_100013814();
      uint64_t v123 = v122;
      __chkstk_darwin(v124);
      sub_100013C28();
      qword_1000950F0 = 15;
      (*(void (**)(uint64_t *, void, uint64_t))(v123 + 104))(&qword_1000950F0, enum case for DispatchTimeInterval.seconds(_:), v121);
      + infix(_:_:)();
      (*(void (**)(uint64_t *, uint64_t))(v123 + 8))(&qword_1000950F0, v121);
      uint64_t v125 = *(void (**)(void))(v118 + 8);
      sub_1000112D0();
      v125();
      OS_dispatch_queue.asyncAfter(deadline:execute:)();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      sub_1000112D0();
      v125();
      sub_100010EE4();
      v126();
      sub_100010EE4();
      v127();
    }
    else
    {
      sub_10000DB00((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
      uint64_t v91 = v139;
      static Error<>.networkingError.getter();
      id v92 = v137;
      Error<>.init(_:_:)();
      uint64_t v93 = *(void (**)(char *))(v69 + 128);
      if (v93)
      {
        sub_10000DB00((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        swift_allocError();
        uint64_t v94 = v136;
        (*(void (**)(uint64_t, char *, uint64_t))(v136 + 16))(v95, v92, v91);
        sub_100013B4C();
        swift_retain();
        v93(v92);
        sub_1000408C4((uint64_t)v93);
        uint64_t v96 = (uint64_t)v92;
        id v92 = v137;
        sub_100015C5C(v96, &qword_100096178);
        uint64_t v97 = *(void *)(v69 + 128);
      }
      else
      {
        uint64_t v97 = 0;
        uint64_t v94 = v136;
      }
      *(void *)(v69 + 128) = 0;
      *(void *)(v69 + 136) = 0;
      sub_1000408C4(v97);
      OS_dispatch_queue.assertOnQueueHierarchy()();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v91);
      sub_100010EE4();
      v111();
      (*(void (**)(char *, uint64_t))(v149 + 8))(v134, v150);
    }
LABEL_29:
    sub_100013918();
    return;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10006B5F4(uint64_t a1, char a2, int a3)
{
  uint64_t v6 = type metadata accessor for NetworkParamsType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  int v10 = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 88))(v9, v6);
  int v57 = a3;
  if (v10 != enum case for NetworkParamsType.quic(_:))
  {
    if (v10 == enum case for NetworkParamsType.tcp(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v7 + 96))(v9, v6);
      uint64_t v33 = *v9;
      unint64_t v34 = v9[1];
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      switch(v34 >> 62)
      {
        case 1uLL:
          if (v33 >> 32 < (int)v33)
          {
            __break(1u);
LABEL_25:
            __break(1u);
          }
          else
          {
            char v35 = a2;
            swift_retain();
            dispatch_data_t v56 = (dispatch_data_t)sub_100070DF8((int)v33, v33 >> 32);
            sub_1000158A8(v33, v34);
LABEL_16:
            uint64_t v41 = type metadata accessor for String.Encoding();
            uint64_t v42 = *(void *)(v41 - 8);
            __chkstk_darwin(v41);
            uint64_t v44 = (char *)&v54 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
            static String.Encoding.utf8.getter();
            uint64_t v45 = String.data(using:allowLossyConversion:)();
            unint64_t v47 = v46;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
            if (v47 >> 60 != 15)
            {
              switch(v47 >> 62)
              {
                case 1uLL:
                  if (v45 >> 32 < (int)v45) {
                    goto LABEL_25;
                  }
                  swift_retain();
                  uint64_t v50 = sub_100070DF8((int)v45, v45 >> 32);
                  sub_100013BC4(v45, v47);
LABEL_22:
                  sub_100013BC4(v45, v47);
                  type metadata accessor for NWProtocolTLS.Options();
                  swift_allocObject();
                  NWProtocolTLS.Options.init()();
                  uint64_t v51 = dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
                  dispatch_data_t v52 = v56;
                  sec_protocol_options_add_pre_shared_key(v51, v56, v50);
                  swift_unknownObjectRelease();
                  uint64_t v53 = dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
                  sec_protocol_options_set_min_tls_protocol_version(v53, tls_protocol_version_TLSv12);
                  swift_unknownObjectRelease();
                  type metadata accessor for NWProtocolTCP.Options();
                  swift_allocObject();
                  NWProtocolTCP.Options.init()();
                  dispatch thunk of NWProtocolTCP.Options.connectionTimeout.setter();
                  dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter();
                  dispatch thunk of NWProtocolTCP.Options.keepaliveCount.setter();
                  dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter();
                  dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.setter();
                  type metadata accessor for NWParameters();
                  uint64_t v23 = NWParameters.__allocating_init(tls:tcp:)();

                  sub_1000158A8(v33, v34);
                  if ((v35 & 1) == 0) {
                    goto LABEL_4;
                  }
                  goto LABEL_3;
                case 2uLL:
                  uint64_t v48 = *(void *)(v45 + 16);
                  uint64_t v49 = *(void *)(v45 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v50 = sub_100070DF8(v48, v49);
                  swift_release();
                  swift_release();
                  goto LABEL_22;
                default:
                  uint64_t v50 = sub_1000710EC();
                  goto LABEL_22;
              }
            }
          }
          __break(1u);
          break;
        case 2uLL:
          char v35 = a2;
          uint64_t v39 = *(void *)(v33 + 16);
          uint64_t v40 = *(void *)(v33 + 24);
          swift_retain();
          swift_retain();
          dispatch_data_t v56 = (dispatch_data_t)sub_100070DF8(v39, v40);
          swift_release();
          swift_release();
          goto LABEL_16;
        case 3uLL:
          char v35 = a2;
          goto LABEL_13;
        default:
          char v35 = a2;
LABEL_13:
          dispatch_data_t v56 = (dispatch_data_t)sub_1000710EC();
          goto LABEL_16;
      }
    }
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    JUMPOUT(0x10006BEA4);
  }
  (*(void (**)(uint64_t *, uint64_t))(v7 + 96))(v9, v6);
  uint64_t v11 = *v9;
  unint64_t v12 = v9[1];
  uint64_t v13 = v9[2];
  unint64_t v14 = v9[3];
  uint64_t v55 = v9[4];
  uint64_t v15 = v55;
  dispatch_data_t v56 = v11;
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for NWProtocolQUIC.Options();
  NWProtocolQUIC.Options.__allocating_init(alpn:)();
  dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.setter();
  dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.setter();
  dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.setter();
  dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.setter();
  uint64_t v16 = dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter();
  sec_protocol_options_set_local_identity(v16, v15);
  swift_unknownObjectRelease();
  dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter();
  sub_1000153C0(&qword_100097950);
  uint64_t v17 = swift_allocObject();
  long long v54 = xmmword_100075C50;
  *(_OWORD *)(v17 + 16) = xmmword_100075C50;
  *(void *)(v17 + 32) = v13;
  *(void *)(v17 + 40) = v14;
  sub_100015BB4(v13, v14);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sec_protocol_options_set_server_raw_public_key_certificates();
  swift_unknownObjectRelease();

  dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v54;
  dispatch_data_t v20 = v56;
  *(void *)(v19 + 32) = v56;
  *(void *)(v19 + 40) = v12;
  sub_100015BB4((uint64_t)v20, v12);
  Class v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sec_protocol_options_set_client_raw_public_key_certificates();
  swift_unknownObjectRelease();

  uint64_t v22 = dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter();
  sec_protocol_options_set_peer_authentication_required(v22, 1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  uint64_t v23 = NWParameters.__allocating_init(quic:)();
  sub_1000158A8(v13, v14);
  sub_1000158A8((uint64_t)v20, v12);
  swift_unknownObjectRelease();
  if (a2)
  {
LABEL_3:
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v24 = NWParameters.nw.getter();
    nw_parameters_set_include_peer_to_peer(v24, 1);
    swift_unknownObjectRelease();
  }
LABEL_4:
  sub_1000153C0(&qword_100097948);
  uint64_t v25 = type metadata accessor for NWInterface.InterfaceType();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(void *)(v26 + 72);
  unint64_t v28 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_100075C50;
  uint64_t v30 = enum case for NWInterface.InterfaceType.cellular(_:);
  uint64_t v31 = *(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 104);
  v31(v29 + v28, enum case for NWInterface.InterfaceType.cellular(_:), v25);
  NWParameters.prohibitedInterfaceTypes.setter();
  NWParameters.nw.getter();
  nw_parameters_set_no_wake_from_sleep();
  swift_unknownObjectRelease();
  if (v57)
  {
    uint64_t v32 = NWParameters.nw.getter();
    nw_parameters_set_local_only(v32, 1);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_100075C80;
    unint64_t v37 = v36 + v28;
    v31(v36 + v28, v30, v25);
    v31(v37 + v27, enum case for NWInterface.InterfaceType.loopback(_:), v25);
    NWParameters.prohibitedInterfaceTypes.setter();
  }
  return v23;
}

uint64_t sub_10006BEC4(uint64_t a1, char a2, uint64_t a3, char a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    if (a2)
    {
      type metadata accessor for NWQUICTunnelConnection(0);
      swift_allocObject();
      uint64_t v10 = swift_unknownObjectRetain();
      uint64_t v11 = sub_100050400(v10, a4 & 1, 0);
      sub_1000718F0(v11, v7);
    }
    else
    {
      type metadata accessor for NWObjcTunnelConnectionWrapper(0);
      swift_allocObject();
      uint64_t v8 = swift_unknownObjectRetain();
      uint64_t v9 = sub_10004EE88(v8, a4 & 1, 0);
      sub_100071798(v9, v7);
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10006BFB0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000153C0(&qword_100096178);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = result;
    if (a1)
    {
      os_log_type_t v13 = static os_log_type_t.error.getter();
      unint64_t v14 = qword_1000986F0;
      os_log_type_t v15 = v13;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v13))
      {
        swift_retain_n();
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136446210;
        v21[0] = v17;
        uint64_t v18 = UUID.uuidString.getter();
        v21[3] = sub_100010478(v18, v19, v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s: Tunnel listener has stopped while starting", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    else
    {
      nw_listener_get_port(*(nw_listener_t *)(a3 + 32));
      uint64_t v10 = v9 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
      swift_beginAccess();
      uint64_t v11 = *(void (**)(char *))(v10 + 128);
      if (v11)
      {
        swift_retain();
        CertificateUtilities.RawTLSPublicKeyInfo.publicKeyDERData.getter();
        ListenerStartedResponse.init(port:deviceRawPublicKey:)();
        swift_storeEnumTagMultiPayload();
        v11(v7);
        sub_1000408C4((uint64_t)v11);
        sub_100015C5C((uint64_t)v7, &qword_100096178);
        uint64_t v12 = *(void *)(v10 + 128);
      }
      else
      {
        uint64_t v12 = 0;
      }
      *(void *)(v10 + 128) = 0;
      *(void *)(v10 + 136) = 0;
      sub_1000408C4(v12);
      OS_dispatch_queue.assertOnQueueHierarchy()();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10006C264()
{
  uint64_t v0 = type metadata accessor for RemotePairingError();
  __chkstk_darwin(v0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    os_log_type_t v2 = static os_log_type_t.error.getter();
    unint64_t v3 = qword_1000986F0;
    os_log_type_t v4 = v2;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v2))
    {
      swift_retain_n();
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      uint64_t v10 = v6;
      uint64_t v7 = UUID.uuidString.getter();
      sub_100010478(v7, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: Tunnel tunnelListenerTimeout", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    static RemotePairingError.tunnelError.getter();
    sub_10000DB00((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    uint64_t v9 = swift_allocError();
    sub_10000DB00((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
    Error<>.init(_:_:)();
    sub_10006FB88(v9);
    swift_errorRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10006C4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TunnelConnectionState();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = a3 + 16;
    swift_beginAccess();
    sub_100071CE4(v11, (uint64_t)&v49, &qword_100097938);
    if (!*((void *)&v50 + 1))
    {
      sub_100015C5C((uint64_t)&v49, &qword_100097938);
      uint64_t v51 = 0;
      long long v49 = 0u;
      long long v50 = 0u;
      swift_beginAccess();
      uint64_t v22 = v11;
LABEL_23:
      sub_100071A94((uint64_t)&v49, v22, &qword_100097938);
      return swift_release();
    }
    sub_1000326F8(&v49, (uint64_t)v53);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    int v12 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
    if (v12 == enum case for TunnelConnectionState.ready(_:))
    {
      uint64_t v13 = v10 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
      swift_beginAccess();
      sub_100070C30(v13, (uint64_t)&v49);
      sub_100071CE4((uint64_t)v52, (uint64_t)&v45, &qword_1000978D8);
      sub_100070C68(&v49);
      if (v46)
      {
        sub_1000326F8(&v45, (uint64_t)v47);
        os_log_type_t v14 = static os_log_type_t.default.getter();
        os_log_type_t v15 = qword_1000986F0;
        os_log_type_t v16 = v14;
        if (os_log_type_enabled((os_log_t)qword_1000986F0, v14))
        {
          swift_retain_n();
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          uint64_t v18 = swift_slowAlloc();
          *(_DWORD *)uint64_t v17 = 136446210;
          *(void *)&long long v49 = v18;
          uint64_t v19 = UUID.uuidString.getter();
          *(void *)&long long v45 = sub_100010478(v19, v20, (uint64_t *)&v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s: Additional connection completed setup. Injecting into tunnel", v17, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        sub_100016C68(v47, v48);
        dispatch thunk of AnyTunnelEndpoint.serverInjectAdditionalConnection(_:)();
        sub_100010548((uint64_t)v53);
        Class v21 = v47;
        goto LABEL_22;
      }
      sub_100015C5C((uint64_t)&v45, &qword_1000978D8);
      os_log_type_t v32 = static os_log_type_t.default.getter();
      uint64_t v33 = qword_1000986F0;
      os_log_type_t v34 = v32;
      if (os_log_type_enabled((os_log_t)qword_1000986F0, v32))
      {
        swift_retain_n();
        char v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)char v35 = 136446210;
        *(void *)&long long v49 = v36;
        uint64_t v44 = v35 + 4;
        uint64_t v37 = UUID.uuidString.getter();
        v47[0] = sub_100010478(v37, v38, (uint64_t *)&v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s: Initial connection completed setup. Proceeding to create tunnel", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      sub_10006CD9C();
      if (*(void *)(v13 + 96))
      {
        swift_retain();
        dispatch thunk of DispatchWorkItem.cancel()();
        swift_release();
      }
      *(void *)(v13 + 96) = 0;
      swift_release();
      OS_dispatch_queue.assertOnQueueHierarchy()();
    }
    else
    {
      if (v12 != enum case for TunnelConnectionState.stopped(_:))
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      uint64_t v23 = v10 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
      swift_beginAccess();
      sub_100070C30(v23, (uint64_t)&v49);
      sub_100071CE4((uint64_t)v52, (uint64_t)v47, &qword_1000978D8);
      sub_100070C68(&v49);
      uint64_t v24 = v48;
      sub_100015C5C((uint64_t)v47, &qword_1000978D8);
      os_log_type_t v25 = static os_log_type_t.default.getter();
      uint64_t v26 = qword_1000986F0;
      BOOL v27 = os_log_type_enabled((os_log_t)qword_1000986F0, v25);
      if (v24)
      {
        if (v27)
        {
          swift_retain_n();
          unint64_t v28 = (uint8_t *)swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          *(_DWORD *)unint64_t v28 = 136446210;
          *(void *)&long long v49 = v29;
          uint64_t v30 = UUID.uuidString.getter();
          v47[0] = sub_100010478(v30, v31, (uint64_t *)&v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v26, v25, "%{public}s: Not tearing down tunnel on connection failure since endpoint is up and running and will handle failure", v28, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
      }
      else
      {
        if (v27)
        {
          swift_retain_n();
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          uint64_t v40 = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136446210;
          *(void *)&long long v49 = v40;
          uint64_t v41 = UUID.uuidString.getter();
          v47[0] = sub_100010478(v41, v42, (uint64_t *)&v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v26, v25, "%{public}s: Tearing down tunnel on connection failure since endpoint is nil", v39, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        type metadata accessor for RemotePairingError();
        sub_10000DB00((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        uint64_t v43 = swift_allocError();
        sub_10000DB00((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
        static Error<>.networkingError.getter();
        sub_10006FB88(v43);
        swift_errorRelease();
      }
    }
    Class v21 = v53;
LABEL_22:
    sub_100010548((uint64_t)v21);
    uint64_t v51 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    swift_beginAccess();
    uint64_t v22 = v11;
    goto LABEL_23;
  }
  return result;
}

void sub_10006CD9C()
{
  sub_1000139EC();
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  uint64_t v76 = type metadata accessor for TunnelInterfaceParameters();
  sub_100013814();
  uint64_t v75 = v4;
  __chkstk_darwin(v5);
  sub_1000120E0();
  sub_100071FBC(v6);
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  type metadata accessor for SystemXPCConnection();
  sub_100015B44();
  uint64_t v8 = static SystemXPCConnection.connectionToMachService(name:privilegedService:targetQueue:)();
  uint64_t v10 = v9;
  uint64_t v11 = v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
  sub_10000D330();
  *(void *)(v11 + 80) = v8;
  *(void *)(v11 + 88) = v10;
  swift_retain();
  swift_release();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  swift_retain();
  uint64_t v72 = v10;
  dispatch thunk of XPCPeerConnection.setEventHandler(_:)();
  swift_release();
  swift_retain();
  dispatch thunk of XPCConnection.activate()();
  uint64_t v73 = v8;
  swift_release();
  char v12 = static Defaults.tunnelUseSkywalk.getter();
  UUID.uuidString.getter();
  uint64_t v71 = v3;
  sub_100017194((uint64_t)v3, (uint64_t)v90);
  if (v12)
  {
    uint64_t v13 = &qword_100097900;
    uint64_t v14 = sub_1000153C0(&qword_100097900);
    swift_allocObject();
    uint64_t v15 = sub_100016AA4((uint64_t)v7);
    os_log_type_t v16 = (unint64_t *)&unk_100097908;
  }
  else
  {
    uint64_t v13 = &qword_1000978E0;
    uint64_t v14 = sub_1000153C0(&qword_1000978E0);
    swift_allocObject();
    uint64_t v15 = sub_100016AA4((uint64_t)v7);
    os_log_type_t v16 = (unint64_t *)&unk_1000978E8;
  }
  uint64_t v17 = sub_100039728(v16, v13);
  uint64_t v90[3] = v14;
  v90[4] = v17;
  v90[0] = v15;
  sub_100017194((uint64_t)v90, (uint64_t)&v88);
  swift_beginAccess();
  sub_100071A94((uint64_t)&v88, v11 + 40, &qword_1000978D8);
  swift_endAccess();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  sub_100017194((uint64_t)v90, (uint64_t)&v88);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v1;
  uint64_t v70 = v18;
  sub_1000326F8(&v88, v18 + 24);
  uint64_t v74 = v1;
  swift_retain();
  uint64_t v19 = static Data.randomBytes(ofLength:)();
  unint64_t v21 = v20;
  uint64_t v22 = sub_100069074((uint64_t)&off_10008AB80);
  unint64_t v24 = v23;
  *(void *)&v87[0] = v22;
  *((void *)&v87[0] + 1) = v23;
  sub_100015BB4(v22, v23);
  sub_100015BB4(v19, v21);
  sub_100071310(v19, v21);
  uint64_t v69 = v19;
  unint64_t v68 = v21;
  sub_1000158A8(v19, v21);
  sub_1000158A8(v22, v24);
  long long v88 = v87[0];
  sub_100071310(0, 0x9000000000000uLL);
  long long v25 = v88;
  uint64_t v26 = type metadata accessor for IPv6Address();
  v67[1] = v67;
  sub_100013814();
  uint64_t v85 = v27;
  __chkstk_darwin(v28);
  uint64_t v86 = v29;
  unint64_t v81 = (char *)((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = (char *)((char *)v67 - v81);
  uint64_t v31 = sub_1000153C0(&qword_1000978F0);
  uint64_t v79 = v67;
  uint64_t v32 = *(void *)(*(void *)(v31 - 8) + 64);
  __chkstk_darwin(v31 - 8);
  unint64_t v80 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v33 = (char *)v67 - v80;
  uint64_t v34 = sub_100069074((uint64_t)&off_10008ABA8);
  unint64_t v36 = v35;
  long long v88 = v25;
  uint64_t v83 = *((void *)&v25 + 1);
  uint64_t v84 = v25;
  sub_100015BB4(v25, *((unint64_t *)&v25 + 1));
  sub_100071310(v34, v36);
  sub_1000158A8(v34, v36);
  uint64_t v37 = sub_1000153C0(&qword_1000978F8);
  uint64_t v38 = *(void *)(*(void *)(v37 - 8) + 64);
  __chkstk_darwin(v37 - 8);
  unint64_t v78 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v39 = (char *)v67 - v78;
  uint64_t v77 = type metadata accessor for NWInterface();
  sub_100015C34((uint64_t)v39, 1, 1, v77);
  IPv6Address.init(_:_:)();
  sub_100071F44((uint64_t)v33);
  if (v40)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v41 = (uint64_t (*)(void))v85[4];
  uint64_t v82 = v30;
  uint64_t v42 = v41;
  sub_10001613C();
  uint64_t v44 = v43();
  uint64_t v79 = v67;
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v46 = (char *)((char *)v67 - v81);
  unint64_t v81 = (char *)v67;
  __chkstk_darwin(v45);
  unint64_t v47 = (char *)v67 - v80;
  uint64_t v48 = sub_100069074((uint64_t)&off_10008ABD0);
  unint64_t v50 = v49;
  *(void *)&long long v88 = sub_10001136C();
  *((void *)&v88 + 1) = v51;
  sub_100015BB4(v88, v51);
  sub_100071310(v48, v50);
  uint64_t v52 = sub_1000158A8(v48, v50);
  __chkstk_darwin(v52);
  sub_100015C34((uint64_t)v67 - v78, 1, 1, v77);
  IPv6Address.init(_:_:)();
  sub_100071F44((uint64_t)v47);
  if (v40)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  unint64_t v80 = (unint64_t)v46;
  sub_10001613C();
  uint64_t v53 = v42();
  unint64_t v81 = (char *)v67;
  uint64_t v54 = __chkstk_darwin(v53);
  unint64_t v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF0;
  __chkstk_darwin(v54);
  sub_100015B44();
  IPv6Address.init(_:)();
  sub_100071F44((uint64_t)v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v40) {
    goto LABEL_12;
  }
  sub_10001613C();
  uint64_t v57 = v42();
  __chkstk_darwin(v57);
  uint64_t v58 = (uint64_t (*)(char *, char *, uint64_t))v85[2];
  uint64_t v59 = v58((char *)v67 - v56, v82, v26);
  __chkstk_darwin(v59);
  v58((char *)v67 - v56, (char *)v67 - v56, v26);
  sub_100016C68(v71, v71[3]);
  if ((dispatch thunk of TunnelConnection.maxSupportedMTU.getter() & 0x10000) != 0)
  {
    type metadata accessor for VirtualInterface();
    static VirtualInterface.defaultMTU.getter();
  }
  TunnelInterfaceParameters.init(address:netmask:mtu:)();
  sub_100017194((uint64_t)v90, (uint64_t)&v88);
  sub_100016C68(&v88, v89);
  sub_100017194((uint64_t)v90, (uint64_t)v87);
  id v60 = (void *)swift_allocObject();
  void v60[2] = v74;
  sub_1000326F8(v87, (uint64_t)(v60 + 3));
  uint64_t v61 = v72;
  v60[8] = v73;
  v60[9] = v61;
  uint64_t v62 = v70;
  v60[10] = sub_100070CE0;
  v60[11] = v62;
  swift_retain();
  swift_retain();
  swift_retain();
  dispatch thunk of AnyTunnelEndpoint.establishServerTunnel(localParameters:remoteAddress:completion:)();
  swift_release();
  uint64_t v63 = sub_10001136C();
  sub_1000158A8(v63, v64);
  sub_1000158A8(v69, v68);
  swift_release();
  swift_release();
  sub_100010EE4();
  v65();
  char v66 = (void (*)(void))v85[1];
  sub_1000165A0();
  v66();
  sub_1000165A0();
  v66();
  sub_1000165A0();
  v66();
  sub_100010548((uint64_t)v90);
  sub_100010548((uint64_t)&v88);
  sub_100013918();
}

uint64_t sub_10006D7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a2;
  uint64_t v3 = type metadata accessor for XPCDictionary();
  uint64_t v52 = *(void (**)(os_log_t, char *, uint64_t))(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v50 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v48 - v7;
  __chkstk_darwin(v6);
  unint64_t v51 = ((char *)&v48 - v9);
  uint64_t v10 = type metadata accessor for XPCError();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  os_log_t v49 = (os_log_t)((char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_type_t v16 = (char *)&v48 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v48 - v17;
  uint64_t v19 = sub_1000153C0(&qword_100095A80);
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071CE4(a1, (uint64_t)v21, &qword_100095A80);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v21, v10);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    unint64_t v23 = qword_1000986F0;
    unint64_t v24 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v24(v16, v18, v10);
    if (os_log_type_enabled(v23, v22))
    {
      swift_retain_n();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v52 = (void (*)(os_log_t, char *, uint64_t))v24;
      uint64_t v26 = v25;
      unint64_t v51 = swift_slowAlloc();
      os_log_t v55 = v51;
      *(_DWORD *)uint64_t v26 = 136446466;
      LODWORD(v50) = v22;
      os_log_t v48 = v23;
      uint64_t v27 = UUID.uuidString.getter();
      uint64_t v54 = sub_100010478(v27, v28, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      v52(v49, v16, v10);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v54 = sub_100010478(v29, v30, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
      v31(v16, v10);
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v50, "%{public}s: Tunnel recieved error on remoted XPC connection: %{public}s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v24 = (void (*)(char *, char *, uint64_t))v52;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
      v31(v16, v10);
    }
    sub_10000DB00(&qword_100097918, (void (*)(uint64_t))&type metadata accessor for XPCError);
    uint64_t v45 = swift_allocError();
    v24(v46, v18, v10);
    sub_10006FB88(v45);
    swift_errorRelease();
    return ((uint64_t (*)(char *, uint64_t))v31)(v18, v10);
  }
  else
  {
    uint64_t v32 = v51;
    uint64_t v33 = v52;
    (*((void (**)(NSObject *, char *, uint64_t))v52 + 4))(v51, v21, v3);
    os_log_type_t v34 = static os_log_type_t.error.getter();
    unint64_t v35 = qword_1000986F0;
    unint64_t v36 = (void (*)(char *, NSObject *, uint64_t))*((void *)v33 + 2);
    v36(v8, v32, v3);
    os_log_type_t v37 = v34;
    if (os_log_type_enabled(v35, v34))
    {
      os_log_t v49 = v35;
      swift_retain_n();
      uint64_t v38 = swift_slowAlloc();
      os_log_t v48 = (os_log_t)swift_slowAlloc();
      os_log_t v55 = v48;
      *(_DWORD *)uint64_t v38 = 136446466;
      uint64_t v39 = UUID.uuidString.getter();
      uint64_t v54 = sub_100010478(v39, v40, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2082;
      v36(v50, v8, v3);
      uint64_t v41 = String.init<A>(describing:)();
      uint64_t v54 = sub_100010478(v41, v42, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = (void (*)(char *, uint64_t))*((void *)v52 + 1);
      v43(v8, v3);
      _os_log_impl((void *)&_mh_execute_header, v49, v37, "%{public}s: Unexpected message on XPC connection: %{public}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      return ((uint64_t (*)(NSObject *, uint64_t))v43)(v51, v3);
    }
    else
    {
      unint64_t v47 = (void (*)(char *, uint64_t))*((void *)v52 + 1);
      v47(v8, v3);
      return ((uint64_t (*)(NSObject *, uint64_t))v47)(v51, v3);
    }
  }
}

uint64_t sub_10006DE88(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    swift_errorRetain();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    uint64_t v6 = qword_1000986F0;
    os_log_type_t v7 = v5;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v5))
    {
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      swift_retain();
      uint64_t v8 = swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446466;
      uint64_t v9 = UUID.uuidString.getter();
      sub_100010478(v9, v10, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2082;
      swift_errorRetain();
      sub_1000153C0(&qword_100095A00);
      uint64_t v11 = String.init<A>(describing:)();
      *(void *)&long long v54 = sub_100010478(v11, v12, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s: Tunnel setup error: %{public}s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_errorRetain();
    sub_10006FB88(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  sub_100016C68(a3, a3[3]);
  uint64_t result = dispatch thunk of AnyTunnelEndpoint.localTunnelInterface.getter();
  if (!v55)
  {
    __break(1u);
    goto LABEL_13;
  }
  sub_1000326F8(&v54, (uint64_t)v56);
  uint64_t v15 = type metadata accessor for IPv6Address();
  os_log_t v48 = &v41;
  uint64_t v50 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v49 = v16;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v18 = (char *)&v41 - v17;
  sub_100016C68(a3, a3[3]);
  uint64_t v19 = sub_1000153C0(&qword_1000978F0);
  __chkstk_darwin(v19 - 8);
  unint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of AnyTunnelEndpoint.remoteAddress.getter();
  uint64_t result = sub_100015C0C((uint64_t)v21, 1, v15);
  if (result == 1)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v22 = v50;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))((char *)&v41 - v17, v21, v15);
  os_log_type_t v23 = static os_log_type_t.default.getter();
  unint64_t v24 = qword_1000986F0;
  sub_100017194((uint64_t)v56, (uint64_t)&v54);
  uint64_t v25 = sub_100017194((uint64_t)v56, (uint64_t)v53);
  __chkstk_darwin(v25);
  uint64_t v26 = (char *)&v41 - v17;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v27((char *)&v41 - v17, v18, v15);
  if (os_log_type_enabled(v24, v23))
  {
    swift_retain_n();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v47 = a2;
    uint64_t v29 = v28;
    uint64_t v44 = swift_slowAlloc();
    uint64_t v52 = v44;
    *(_DWORD *)uint64_t v29 = 136446978;
    os_log_t v43 = v24;
    int v42 = v23;
    uint64_t v30 = UUID.uuidString.getter();
    uint64_t v51 = sub_100010478(v30, v31, &v52);
    uint64_t v46 = (char *)&v41 - v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2082;
    uint64_t v45 = &v41;
    uint64_t v41 = v27;
    sub_100016C68(&v54, v55);
    uint64_t v32 = dispatch thunk of TunnelInterface.interfaceName.getter();
    uint64_t v51 = sub_100010478(v32, v33, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100010548((uint64_t)&v54);
    *(_WORD *)(v29 + 22) = 2082;
    sub_100016C68(v53, v53[3]);
    dispatch thunk of TunnelInterface.address.getter();
    sub_1000153C0(&qword_100097930);
    uint64_t v34 = String.init<A>(describing:)();
    uint64_t v51 = sub_100010478(v34, v35, &v52);
    uint64_t v18 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = sub_100010548((uint64_t)v53);
    *(_WORD *)(v29 + 32) = 2082;
    __chkstk_darwin(v36);
    v41((char *)&v41 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v15);
    uint64_t v38 = String.init<A>(describing:)();
    uint64_t v51 = sub_100010478(v38, v39, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v50 + 8);
    v40(v26, v15);
    _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v42, "%{public}s: Tunnel established: %{public}s, local %{public}s -> remote %{public}s", (uint8_t *)v29, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100010548((uint64_t)&v54);
    sub_100010548((uint64_t)v53);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v50 + 8);
    v40(v26, v15);
  }
  sub_100016C68(a3, a3[3]);
  swift_retain();
  dispatch thunk of AnyTunnelEndpoint.startPacketTransfer(errorHandler:)();
  swift_release();
  v40(v18, v15);
  return sub_100010548((uint64_t)v56);
}

void sub_10006E648(uint64_t a1)
{
  os_log_type_t v2 = static os_log_type_t.default.getter();
  uint64_t v3 = qword_1000986F0;
  os_log_type_t v4 = v2;
  if (os_log_type_enabled((os_log_t)qword_1000986F0, v2))
  {
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v6 = UUID.uuidString.getter();
    sub_100010478(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    swift_errorRetain();
    sub_1000153C0(&qword_100095A00);
    uint64_t v8 = String.init<A>(describing:)();
    sub_100010478(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: Tunnel transfer error: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  sub_10006FB88(a1);
}

uint64_t sub_10006E82C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for XPCDictionary();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v41 - v18;
  if (a1)
  {
    swift_errorRetain();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    unint64_t v21 = qword_1000986F0;
    os_log_type_t v22 = v20;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v20))
    {
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      swift_retain();
      uint64_t v23 = swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446466;
      uint64_t v24 = UUID.uuidString.getter();
      *(void *)&long long v51 = sub_100010478(v24, v25, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2082;
      *(void *)&long long v51 = a1;
      swift_errorRetain();
      sub_1000153C0(&qword_100095A00);
      uint64_t v26 = String.init<A>(describing:)();
      *(void *)&long long v51 = sub_100010478(v26, v27, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: Server tunnel setup error: %{public}s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    swift_errorRetain();
    sub_10006FB88(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v47 = a6;
    uint64_t v48 = a7;
    uint64_t v29 = a3[3];
    uint64_t v46 = a3;
    sub_100016C68(a3, v29);
    uint64_t result = dispatch thunk of AnyTunnelEndpoint.localTunnelInterface.getter();
    if (v52)
    {
      sub_1000326F8(&v51, (uint64_t)v53);
      os_log_type_t v30 = static os_log_type_t.default.getter();
      uint64_t v31 = qword_1000986F0;
      sub_100017194((uint64_t)v53, (uint64_t)&v51);
      if (os_log_type_enabled(v31, v30))
      {
        swift_retain_n();
        uint64_t v32 = swift_slowAlloc();
        uint64_t v45 = a4;
        uint64_t v33 = v32;
        uint64_t v44 = swift_slowAlloc();
        uint64_t v50 = v44;
        *(_DWORD *)uint64_t v33 = 136446466;
        int v43 = v30;
        uint64_t v34 = UUID.uuidString.getter();
        uint64_t v49 = sub_100010478(v34, v35, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2082;
        v41[1] = v33 + 14;
        os_log_t v42 = v31;
        sub_100016C68(&v51, v52);
        uint64_t v36 = dispatch thunk of TunnelInterface.interfaceName.getter();
        uint64_t v49 = sub_100010478(v36, v37, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100010548((uint64_t)&v51);
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v43, "%{public}s: Server tunnel interface created: %{public}s, creating RSD listener...", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100010548((uint64_t)&v51);
      }
      XPCDictionary.init()();
      XPCDictionary.subscript.setter();
      sub_100016C68(v53, v53[3]);
      dispatch thunk of TunnelInterface.interfaceName.getter();
      XPCDictionary.subscript.setter();
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
      sub_100017194((uint64_t)v46, (uint64_t)&v51);
      uint64_t v38 = (void *)swift_allocObject();
      void v38[2] = a2;
      sub_1000326F8(&v51, (uint64_t)(v38 + 3));
      uint64_t v39 = v48;
      v38[8] = v47;
      v38[9] = v39;
      swift_retain();
      swift_retain();
      dispatch thunk of XPCConnection.send(message:replyQueue:replyHandler:)();
      swift_release();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v14 + 8);
      v40(v17, v13);
      v40(v19, v13);
      return sub_100010548((uint64_t)v53);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10006EE18(void (*a1)(os_log_t, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  uint64_t v93 = a3;
  uint64_t v102 = a2;
  uint64_t v6 = type metadata accessor for XPCDictionary();
  uint64_t v101 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v91 = ((char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_t v99 = (os_log_t)((char *)&v89 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_t v100 = (os_log_t)((char *)&v89 - v12);
  __chkstk_darwin(v11);
  uint64_t v14 = ((char *)&v89 - v13);
  uint64_t v15 = type metadata accessor for XPCError();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v96 = (char *)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v89 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v89 - v22;
  uint64_t v24 = sub_1000153C0(&qword_100095A80);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v92 = (uint64_t)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  os_log_type_t v98 = (uint64_t *)((char *)&v89 - v28);
  __chkstk_darwin(v27);
  os_log_type_t v30 = (char *)&v89 - v29;
  uint64_t v97 = a1;
  sub_100071CE4((uint64_t)a1, (uint64_t)&v89 - v29, &qword_100095A80);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, v30, v15);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    uint64_t v32 = qword_1000986F0;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v33(v21, v23, v15);
    if (os_log_type_enabled(v32, v31))
    {
      swift_retain_n();
      uint64_t v34 = swift_slowAlloc();
      os_log_t v100 = v32;
      uint64_t v35 = v34;
      uint64_t v101 = swift_slowAlloc();
      uint64_t v103 = (void (*)(void, void))v101;
      *(_DWORD *)uint64_t v35 = 136446466;
      uint64_t v97 = (void (*)(os_log_t, uint64_t))(v35 + 4);
      LODWORD(v99) = v31;
      uint64_t v36 = UUID.uuidString.getter();
      uint64_t v105 = sub_100010478(v36, v37, (uint64_t *)&v103);
      os_log_type_t v98 = &v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2082;
      v33(v96, v21, v15);
      uint64_t v38 = String.init<A>(describing:)();
      uint64_t v105 = sub_100010478(v38, v39, (uint64_t *)&v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v16 + 8);
      v40(v21, v15);
      _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v99, "%{public}s: Server XPC reply error: %{public}s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v40 = *(void (**)(char *, uint64_t))(v16 + 8);
      v40(v21, v15);
    }
    sub_10000DB00(&qword_100097918, (void (*)(uint64_t))&type metadata accessor for XPCError);
    uint64_t v57 = swift_allocError();
    v33(v58, v23, v15);
    sub_10006FB88(v57);
    swift_errorRelease();
    return ((uint64_t (*)(char *, uint64_t))v40)(v23, v15);
  }
  uint64_t v41 = v101;
  os_log_t v42 = *(void (**)(NSObject *, char *, uint64_t))(v101 + 16);
  v42(v14, v30, v6);
  uint64_t v43 = XPCDictionary.subscript.getter();
  uint64_t v45 = v14;
  if (v44)
  {
    if (v43 == 19279 && v44 == 0xE200000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v47 & 1) == 0) {
        goto LABEL_10;
      }
    }
    id v60 = v45;
    uint64_t v61 = *(void (**)(NSObject *, uint64_t))(v41 + 8);
    v61(v60, v6);
    os_log_t v62 = v100;
    (*(void (**)(os_log_t, char *, uint64_t))(v41 + 32))(v100, v30, v6);
    os_log_type_t v63 = static os_log_type_t.debug.getter();
    unint64_t v64 = qword_1000986F0;
    os_log_t v65 = v99;
    v42(v99, (char *)v62, v6);
    BOOL v66 = os_log_type_enabled(v64, v63);
    uint64_t v90 = v6;
    uint64_t v97 = v61;
    os_log_type_t v98 = (uint64_t *)(v41 + 8);
    if (v66)
    {
      swift_retain_n();
      uint64_t v67 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      uint64_t v103 = (void (*)(void, void))v101;
      *(_DWORD *)uint64_t v67 = 136446466;
      uint64_t v68 = UUID.uuidString.getter();
      uint64_t v105 = sub_100010478(v68, v69, (uint64_t *)&v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2082;
      os_log_t v70 = v99;
      v42(v91, (char *)v99, v6);
      uint64_t v71 = String.init<A>(describing:)();
      uint64_t v105 = sub_100010478(v71, v72, (uint64_t *)&v103);
      os_log_t v62 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v97(v70, v6);
      _os_log_impl((void *)&_mh_execute_header, v64, v63, "%{public}s: Server XPC reply: %{public}s", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v61(v65, v6);
    }
    uint64_t v75 = XPCDictionary.subscript.getter();
    if (v76)
    {
      uint64_t v77 = v75;
      uint64_t v78 = v76;
      sub_100071578();
      XPCDictionary.subscript.getter();
      if ((v104 & 1) == 0)
      {
        uint64_t v79 = v103;
        os_log_type_t v80 = static os_log_type_t.default.getter();
        unint64_t v81 = qword_1000986F0;
        os_log_type_t v82 = v80;
        BOOL v83 = os_log_type_enabled((os_log_t)qword_1000986F0, v80);
        uint64_t v84 = v102;
        if (v83)
        {
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v85 = swift_slowAlloc();
          uint64_t v103 = (void (*)(void, void))swift_slowAlloc();
          *(_DWORD *)uint64_t v85 = 136446722;
          uint64_t v86 = UUID.uuidString.getter();
          uint64_t v105 = sub_100010478(v86, v87, (uint64_t *)&v103);
          uint64_t v84 = v102;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v85 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v105 = sub_100010478(v77, v78, (uint64_t *)&v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v85 + 22) = 2048;
          uint64_t v105 = (uint64_t)v79;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v81, v82, "%{public}s: Created RSD server device name: %{public}s with listener on port: %lu", (uint8_t *)v85, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          os_log_t v62 = v100;
          swift_slowDealloc();
        }
        uint64_t v88 = v84 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state;
        swift_beginAccess();
        *(void *)(v88 + 112) = v77;
        *(void *)(v88 + 120) = v78;
        swift_bridgeObjectRelease();
        OS_dispatch_queue.assertOnQueueHierarchy()();
        sub_100016C68(v93, v93[3]);
        if ((unint64_t)v79 < 0x10000)
        {
          dispatch thunk of AnyTunnelEndpoint.finishEstablishingServerTunnel(serverRSDPort:completion:)();
          return ((uint64_t (*)(os_log_t, uint64_t))v97)(v62, v90);
        }
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_10:
  os_log_t v100 = v45;
  os_log_type_t v48 = static os_log_type_t.error.getter();
  uint64_t v49 = qword_1000986F0;
  uint64_t v50 = (uint64_t)v98;
  sub_100071CE4((uint64_t)v97, (uint64_t)v98, &qword_100095A80);
  if (os_log_type_enabled(v49, v48))
  {
    os_log_t v99 = v49;
    swift_retain_n();
    uint64_t v51 = swift_slowAlloc();
    uint64_t v90 = v6;
    uint64_t v52 = v51;
    uint64_t v97 = (void (*)(os_log_t, uint64_t))swift_slowAlloc();
    uint64_t v103 = (void (*)(void, void))v97;
    *(_DWORD *)uint64_t v52 = 136446466;
    uint64_t v53 = UUID.uuidString.getter();
    uint64_t v105 = sub_100010478(v53, v54, (uint64_t *)&v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v52 + 12) = 2082;
    sub_100071CE4(v50, v92, &qword_100095A80);
    uint64_t v55 = String.init<A>(describing:)();
    uint64_t v105 = sub_100010478(v55, v56, (uint64_t *)&v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100015C5C(v50, &qword_100095A80);
    _os_log_impl((void *)&_mh_execute_header, v99, v48, "%{public}s: Server XPC result not successful: %{public}s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v90;
    swift_slowDealloc();
  }
  else
  {
    sub_100015C5C(v50, &qword_100095A80);
  }
  type metadata accessor for RemotePairingError();
  sub_10000DB00((unint64_t *)&unk_1000959D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
  uint64_t v73 = swift_allocError();
  sub_10000DB00((unint64_t *)&unk_1000953D0, (void (*)(uint64_t))&type metadata accessor for RemotePairingError);
  static Error<>.dataCorrupted.getter();
  sub_10006FB88(v73);
  swift_errorRelease();
  uint64_t v74 = *(void (**)(os_log_t, uint64_t))(v101 + 8);
  v74(v100, v6);
  return ((uint64_t (*)(char *, uint64_t))v74)(v30, v6);
}

void sub_10006FB88(uint64_t a1)
{
  OS_dispatch_queue.assertOnQueueHierarchy()();
  if (a1)
  {
    swift_errorRetain();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    os_log_type_t v4 = qword_1000986F0;
    os_log_type_t v5 = v3;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v3))
    {
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      swift_retain();
      uint64_t v6 = swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      uint64_t v7 = UUID.uuidString.getter();
      sub_100010478(v7, v8, v24);
      sub_100012188();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2082;
      swift_errorRetain();
      sub_1000153C0(&qword_100095A00);
      uint64_t v9 = String.init<A>(describing:)();
      v22[0] = sub_100010478(v9, v10, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s: Cancelling tunnel with error: %{public}s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
    swift_errorRelease();
  }
  else
  {
    os_log_type_t v11 = static os_log_type_t.default.getter();
    uint64_t v12 = qword_1000986F0;
    os_log_type_t v13 = v11;
    if (os_log_type_enabled((os_log_t)qword_1000986F0, v11))
    {
      swift_retain_n();
      uint64_t v14 = (uint8_t *)sub_100014750();
      uint64_t v15 = sub_100015720();
      *(_DWORD *)uint64_t v14 = 136446210;
      v24[0] = v15;
      uint64_t v16 = UUID.uuidString.getter();
      sub_100010478(v16, v17, v24);
      sub_100012188();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: Cancelling tunnel", v14, 0xCu);
      swift_arrayDestroy();
      sub_1000120B0();
      sub_1000120B0();
    }
  }
  uint64_t v18 = (void *)(v1 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state);
  sub_10000D330();
  sub_100070C30((uint64_t)v18, (uint64_t)v24);
  if (v24[3])
  {
    sub_100017194((uint64_t)v24, (uint64_t)v22);
    sub_100070C68(v24);
    uint64_t v19 = sub_100016C68(v22, v23);
    nw_listener_cancel(*(nw_listener_t *)(*v19 + 32));
    sub_100010548((uint64_t)v22);
  }
  else
  {
    sub_100070C68(v24);
  }
  sub_100016FC0();
  sub_100071A94((uint64_t)v24, (uint64_t)v18, &qword_1000978D0);
  swift_endAccess();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  uint64_t v20 = (void (*)(uint64_t))v18[18];
  if (v20)
  {
    swift_retain();
    v20(a1);
    sub_1000408C4((uint64_t)v20);
    uint64_t v21 = v18[18];
  }
  else
  {
    uint64_t v21 = 0;
  }
  v18[18] = 0;
  v18[19] = 0;
  sub_1000408C4(v21);
  OS_dispatch_queue.assertOnQueueHierarchy()();
  sub_100070C30((uint64_t)v18, (uint64_t)v24);
  if (v25[3])
  {
    sub_100017194((uint64_t)v25, (uint64_t)v22);
    sub_100070C68(v24);
    sub_100016C68(v22, v23);
    dispatch thunk of AnyTunnelEndpoint.cancel()();
    sub_100010548((uint64_t)v22);
  }
  else
  {
    sub_100070C68(v24);
  }
  sub_100016FC0();
  sub_100071A94((uint64_t)v24, (uint64_t)(v18 + 5), &qword_1000978D8);
  swift_endAccess();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  if (v18[10])
  {
    swift_retain();
    dispatch thunk of XPCConnection.cancel()();
    swift_release();
  }
  v18[10] = 0;
  v18[11] = 0;
  swift_release();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  if (v18[13])
  {
    swift_retain();
    dispatch thunk of WiFiKeepAlive.cancel()();
    swift_release();
  }
  v18[13] = 0;
  swift_release();
  OS_dispatch_queue.assertOnQueueHierarchy()();
}

uint64_t sub_100070034()
{
  type metadata accessor for UUID();
  sub_100010EF0();
  sub_100010EE4();
  v1();

  sub_100070C68((void *)(v0 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__state));
  return v0;
}

uint64_t sub_1000700BC()
{
  sub_100070034();
  sub_100016368();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);

  return _swift_deallocClassInstance(v0, v2, v3);
}

uint64_t sub_1000700F4()
{
  return type metadata accessor for Tunnel();
}

uint64_t type metadata accessor for Tunnel()
{
  uint64_t result = qword_1000977D8;
  if (!qword_1000977D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100070144()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for Tunnel.MutableState(void *a1)
{
  if (a1[3]) {
    sub_100010548((uint64_t)a1);
  }
  if (a1[8]) {
    sub_100010548((uint64_t)(a1 + 5));
  }
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (a1[16]) {
    uint64_t result = swift_release();
  }
  if (a1[18])
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Tunnel.MutableState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  uint64_t v7 = (_OWORD *)(a1 + 40);
  uint64_t v8 = (_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 64);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 56);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  uint64_t v12 = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v13;
  uint64_t v14 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12)
  {
    uint64_t v15 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v12;
    *(void *)(a1 + 136) = v15;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  }
  uint64_t v16 = *(void *)(a2 + 144);
  if (v16)
  {
    uint64_t v17 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v16;
    *(void *)(a1 + 152) = v17;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  }
  return a1;
}

uint64_t assignWithCopy for Tunnel.MutableState(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      sub_100070644((uint64_t *)a1, (uint64_t *)a2);
      goto LABEL_8;
    }
    sub_100010548(a1);
  }
  else if (v4)
  {
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
    goto LABEL_8;
  }
  long long v5 = *a2;
  long long v6 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_8:
  uint64_t v7 = *((void *)a2 + 8);
  if (*(void *)(a1 + 64))
  {
    if (v7)
    {
      sub_100070644((uint64_t *)(a1 + 40), (uint64_t *)a2 + 5);
      goto LABEL_15;
    }
    sub_100010548(a1 + 40);
  }
  else if (v7)
  {
    *(void *)(a1 + 64) = v7;
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, (uint64_t)a2 + 40);
    goto LABEL_15;
  }
  long long v8 = *(long long *)((char *)a2 + 40);
  long long v9 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 56) = v9;
LABEL_15:
  uint64_t v10 = *((void *)a2 + 11);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  swift_retain();
  swift_release();
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)a2 + 16);
  if (*(void *)(a1 + 128))
  {
    if (v11)
    {
      uint64_t v12 = *((void *)a2 + 17);
      *(void *)(a1 + 128) = v11;
      *(void *)(a1 + 136) = v12;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v11)
  {
    uint64_t v13 = *((void *)a2 + 17);
    *(void *)(a1 + 128) = v11;
    *(void *)(a1 + 136) = v13;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 128) = a2[8];
LABEL_22:
  uint64_t v14 = *((void *)a2 + 18);
  if (!*(void *)(a1 + 144))
  {
    if (v14)
    {
      uint64_t v16 = *((void *)a2 + 19);
      *(void *)(a1 + 144) = v14;
      *(void *)(a1 + 152) = v16;
      swift_retain();
      return a1;
    }
LABEL_28:
    *(_OWORD *)(a1 + 144) = a2[9];
    return a1;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_28;
  }
  uint64_t v15 = *((void *)a2 + 19);
  *(void *)(a1 + 144) = v14;
  *(void *)(a1 + 152) = v15;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *sub_100070644(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

void *initializeWithTake for Tunnel.MutableState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA0uLL);
}

uint64_t assignWithTake for Tunnel.MutableState(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    sub_100010548(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (*(void *)(a1 + 64)) {
    sub_100010548(a1 + 40);
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = v7;
      *(void *)(a1 + 136) = v8;
      swift_release();
      goto LABEL_12;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v7;
    *(void *)(a1 + 136) = v9;
    goto LABEL_12;
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
LABEL_12:
  uint64_t v10 = *(void *)(a2 + 144);
  if (!*(void *)(a1 + 144))
  {
    if (v10)
    {
      uint64_t v12 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = v10;
      *(void *)(a1 + 152) = v12;
      return a1;
    }
LABEL_18:
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 152) = v11;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Tunnel.MutableState(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 160))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Tunnel.MutableState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Tunnel.MutableState()
{
  return &type metadata for Tunnel.MutableState;
}

void **initializeBufferWithCopyOfBuffer for Tunnel.Initiator(void **a1, void **a2)
{
  unint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for Tunnel.Initiator(id *a1)
{
}

void **assignWithCopy for Tunnel.Initiator(void **a1, void **a2)
{
  unint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void *initializeWithTake for Tunnel.Initiator(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for Tunnel.Initiator(void **a1, void **a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for Tunnel.Initiator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Tunnel.Initiator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

void *sub_100070C00(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for Tunnel.Initiator()
{
  return &type metadata for Tunnel.Initiator;
}

uint64_t sub_100070C30(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_100070C68(void *a1)
{
  return a1;
}

uint64_t sub_100070C98(uint64_t a1)
{
  return sub_10006D7A4(a1, v1);
}

uint64_t sub_100070CA0()
{
  swift_release();
  sub_100010548(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100070CE0(uint64_t a1)
{
  return sub_10006DE88(a1, *(void *)(v1 + 16), (void *)(v1 + 24));
}

uint64_t sub_100070CEC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100070D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  return sub_100070CEC(v7, v13, a3);
}

uint64_t sub_100070DF8(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      uint64_t v5 = type metadata accessor for DispatchData();
      sub_100013814();
      uint64_t v7 = v6;
      __chkstk_darwin(v8);
      sub_100013460();
      DispatchData.init(bytes:)();
      uint64_t v9 = DispatchData._bridgeToObjectiveC()();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v5);
      return v9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100070EF8(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100070F8C@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    if (a1 <= 14)
    {
      uint64_t result = Data.InlineData.init(_:)();
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v4 = __DataStorage.init(bytes:length:)();
      if ((unint64_t)a1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = a1;
        unint64_t v6 = v4 | 0x8000000000000000;
      }
      else
      {
        uint64_t result = a1 << 32;
        unint64_t v6 = v4 | 0x4000000000000000;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v6 = 0xC000000000000000;
  }
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1000710EC()
{
  uint64_t v1 = type metadata accessor for DispatchData();
  sub_100013814();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100013900();
  DispatchData.init(bytes:)();
  uint64_t v5 = DispatchData._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return v5;
}

uint64_t sub_10007123C()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t sub_100071310(uint64_t a1, unint64_t a2)
{
  v10[3] = &type metadata for Data;
  v10[4] = &protocol witness table for Data;
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = sub_100016C68(v10, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
        JUMPOUT(0x1000714ACLL);
      }
      sub_100015BB4(a1, a2);
      sub_100015BB4(v5, v6);
      sub_100070EF8((int)v5, v5 >> 32);
      sub_1000158A8(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_100015BB4(a1, a2);
      swift_retain();
      swift_retain();
      sub_100070EF8(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_100015BB4(a1, a2);
      sub_10007123C();
      break;
  }
  return sub_100010548((uint64_t)v10);
}

uint64_t sub_1000714BC()
{
  swift_release();
  sub_100010548(v0 + 24);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10007150C(uint64_t a1)
{
  return sub_10006E82C(a1, v1[2], v1 + 3, v1[8], v1[9], v1[10], v1[11]);
}

uint64_t sub_100071520()
{
  swift_release();
  sub_100010548(v0 + 24);
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100071568(void (*a1)(os_log_t, uint64_t))
{
  return sub_10006EE18(a1, v1[2], v1 + 3, v1[8], v1[9]);
}

unint64_t sub_100071578()
{
  unint64_t result = qword_100097910;
  if (!qword_100097910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100097910);
  }
  return result;
}

unint64_t sub_1000715C4()
{
  unint64_t result = qword_100097928;
  if (!qword_100097928)
  {
    sub_10001C510(&qword_100097920);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100097928);
  }
  return result;
}

void sub_10007160C(uint64_t a1)
{
}

uint64_t sub_100071614()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007164C()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100071684(uint64_t a1, char a2)
{
  return sub_10006BEC4(a1, a2 & 1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24));
}

uint64_t sub_100071694()
{
  type metadata accessor for CertificateUtilities.RawTLSPublicKeyInfo();
  sub_100013814();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 32) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_release();
  swift_release();
  sub_10001480C();
  v8();

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_10007173C(char a1)
{
  char v2 = a1 & 1;
  uint64_t v3 = type metadata accessor for CertificateUtilities.RawTLSPublicKeyInfo();
  sub_100016238(v3);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);

  return sub_10006BFB0(v2, v4, v5);
}

uint64_t sub_100071790()
{
  return sub_10006C264();
}

uint64_t sub_100071798(uint64_t a1, uint64_t a2)
{
  v9[3] = type metadata accessor for NWObjcTunnelConnectionWrapper(0);
  v9[4] = sub_10000DB00((unint64_t *)&unk_100097098, (void (*)(uint64_t))type metadata accessor for NWObjcTunnelConnectionWrapper);
  v9[0] = a1;
  uint64_t v4 = *(NSObject **)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  swift_retain();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  uint64_t v5 = swift_allocObject();
  sub_100017194((uint64_t)v9, v5 + 16);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  swift_retain();
  swift_retain();
  sub_10004F010(v4, (uint64_t)sub_100071A8C, v7);
  swift_release();
  swift_release();
  swift_release();
  return sub_100010548((uint64_t)v9);
}

uint64_t sub_1000718F0(uint64_t a1, uint64_t a2)
{
  v9[3] = type metadata accessor for NWQUICTunnelConnection(0);
  v9[4] = sub_10000DB00(&qword_100097940, (void (*)(uint64_t))type metadata accessor for NWQUICTunnelConnection);
  v9[0] = a1;
  uint64_t v4 = *(void **)(a2 + OBJC_IVAR____TtC20remotepairingdeviced6Tunnel__tunnelQueue);
  swift_retain();
  OS_dispatch_queue.assertOnQueueHierarchy()();
  uint64_t v5 = swift_allocObject();
  sub_100017194((uint64_t)v9, v5 + 16);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  swift_retain();
  swift_retain();
  sub_1000515A4(v4, (uint64_t)sub_100071F28, v7);
  swift_release();
  swift_release();
  swift_release();
  return sub_100010548((uint64_t)v9);
}

uint64_t sub_100071A48()
{
  if (*(void *)(v0 + 40)) {
    sub_100010548(v0 + 16);
  }

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100071A8C(uint64_t a1)
{
  return sub_10006C4FC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100071A94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100016E68(a1, a2, a3);
  sub_100010EF0();
  uint64_t v4 = sub_100013528();
  v5(v4);
  return v3;
}

void sub_100071AE0()
{
}

uint64_t sub_100071AE8()
{
  uint64_t v1 = sub_1000153C0(&qword_100097958);
  sub_100015A2C(v1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v6 = *(void *)(v5 + 64);
  swift_release();
  sub_1000158A8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  uint64_t v7 = type metadata accessor for TransportProtocolType();
  if (!sub_100015C0C(v0 + v4, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v4, v7);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v6 + v4 + 9) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_100071BE4()
{
  uint64_t v0 = sub_1000153C0(&qword_100097958);
  sub_100015A2C(v0);
  sub_10006A19C();
}

uint64_t sub_100071C60@<X0>(void *a1@<X8>)
{
  return sub_10006918C(v1, a1);
}

uint64_t sub_100071C80(uint64_t a1)
{
  return sub_100069968(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100071C8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100071CD8(uint64_t a1)
{
  return sub_100069614(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100071CE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100016E68(a1, a2, a3);
  sub_100010EF0();
  uint64_t v4 = sub_100013528();
  v5(v4);
  return v3;
}

uint64_t sub_100071D2C()
{
  uint64_t v1 = *(void *)(sub_1000153C0(&qword_100096178) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
  }
  else
  {
    type metadata accessor for ListenerStartedResponse();
    sub_100010EF0();
    (*(void (**)(uint64_t))(v5 + 8))(v0 + v3);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100071E30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100016E68(a1, a2, a3);
  sub_100010EF0();
  uint64_t v4 = sub_100013528();
  v5(v4);
  return v3;
}

uint64_t sub_100071E78()
{
  uint64_t v1 = sub_1000153C0(&qword_100096178);
  sub_100016238(v1);
  return (*(uint64_t (**)(unint64_t))(v0 + 16))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
}

uint64_t sub_100071EC4()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100071F44(uint64_t a1)
{
  return sub_100015C0C(a1, 1, v1);
}

uint64_t sub_100071F64()
{
  return Error<>.init(_:_:)();
}

uint64_t sub_100071F84()
{
  return static Error<>.networkingError.getter();
}

uint64_t sub_100071FA4()
{
  return sub_100015BB4(v1, v0);
}

void sub_100071FBC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

void sub_100071FC8()
{
  sub_1000137EC();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Pairing is restricted by FindMy", v1, 2u);
}

void sub_100072008()
{
  sub_1000137EC();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Unable to initialize FMDFMIPManager to check FindMy-managed restrictions", v1, 2u);
}

void sub_100072048()
{
  sub_1000137EC();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Unable to initialize MCProfileConnection to check ManagedConfiguration-managed restrictions", v1, 2u);
}

void sub_100072088(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unrecognized response '%d' from ManagedConfiguration. Will allow pairing with prompt.", (uint8_t *)v2, 8u);
}

void sub_100072100()
{
  sub_1000137EC();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Pairing is restricted by ManagedConfiguration", v1, 2u);
}

void sub_100072140()
{
  sub_1000137EC();
  sub_1000137F8((void *)&_mh_execute_header, v0, v1, "Failed to create array.", v2, v3, v4, v5, v6);
}

void sub_100072174()
{
  sub_1000137EC();
  sub_1000137F8((void *)&_mh_execute_header, v0, v1, "Invalid argument.", v2, v3, v4, v5, v6);
}

void sub_1000721A8()
{
  sub_1000137EC();
  sub_1000137F8((void *)&_mh_execute_header, v0, v1, "Failed to create RSD browser.", v2, v3, v4, v5, v6);
}

void sub_1000721DC()
{
  sub_1000137EC();
  sub_1000137F8((void *)&_mh_execute_header, v0, v1, "Failed to restart RSD browser.", v2, v3, v4, v5, v6);
}

uint64_t POSIXError.init(uncheckedCode:userInfo:)()
{
  return POSIXError.init(uncheckedCode:userInfo:)();
}

uint64_t static POSIXError.current.getter()
{
  return static POSIXError.current.getter();
}

uint64_t POSIXError._nsError.getter()
{
  return POSIXError._nsError.getter();
}

uint64_t type metadata accessor for POSIXError()
{
  return type metadata accessor for POSIXError();
}

uint64_t static CharacterSet.newlines.getter()
{
  return static CharacterSet.newlines.getter();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage.init(length:)()
{
  return __DataStorage.init(length:)();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t DateComponents.hour.getter()
{
  return DateComponents.hour.getter();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t Data.InlineData.init(_:)()
{
  return Data.InlineData.init(_:)();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.LargeSlice.init(_:)()
{
  return Data.LargeSlice.init(_:)();
}

uint64_t Data.InlineSlice.init(_:)()
{
  return Data.InlineSlice.init(_:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t Data._Representation.subscript.getter()
{
  return Data._Representation.subscript.getter();
}

uint64_t static Data.randomBytes(ofLength:)()
{
  return static Data.randomBytes(ofLength:)();
}

uint64_t Data.hexEncodedString(options:)()
{
  return Data.hexEncodedString(options:)();
}

uint64_t static Data.HexStringEncodingOptions.bluetoothAddress.getter()
{
  return static Data.HexStringEncodingOptions.bluetoothAddress.getter();
}

uint64_t type metadata accessor for Data.HexStringEncodingOptions()
{
  return type metadata accessor for Data.HexStringEncodingOptions();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data.== infix(_:_:)()
{
  return static Data.== infix(_:_:)();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.init(bytes:count:)()
{
  return Data.init(bytes:count:)();
}

uint64_t Data.count.getter()
{
  return Data.count.getter();
}

uint64_t Data.append(_:)()
{
  return Data.append(_:)();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return Date.init(timeIntervalSinceReferenceDate:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.distance(to:)()
{
  return Date.distance(to:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t type metadata accessor for Calendar.Identifier()
{
  return type metadata accessor for Calendar.Identifier();
}

uint64_t Calendar.init(identifier:)()
{
  return Calendar.init(identifier:)();
}

uint64_t Calendar.dateComponents(_:from:to:)()
{
  return Calendar.dateComponents(_:from:to:)();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t type metadata accessor for FetchNetworkPairingSessionIDRequest()
{
  return type metadata accessor for FetchNetworkPairingSessionIDRequest();
}

uint64_t FetchNetworkPairingSessionIDResponse.init(networkPairingSessionID:)()
{
  return FetchNetworkPairingSessionIDResponse.init(networkPairingSessionID:)();
}

uint64_t type metadata accessor for FetchNetworkPairingSessionIDResponse()
{
  return type metadata accessor for FetchNetworkPairingSessionIDResponse();
}

uint64_t CreateWirelessPairingSessionRequest.requestCustomPinHandler.getter()
{
  return CreateWirelessPairingSessionRequest.requestCustomPinHandler.getter();
}

uint64_t CreateWirelessPairingSessionRequest.endpoint.getter()
{
  return CreateWirelessPairingSessionRequest.endpoint.getter();
}

uint64_t type metadata accessor for CreateWirelessPairingSessionRequest()
{
  return type metadata accessor for CreateWirelessPairingSessionRequest();
}

uint64_t AllowPromptlessPairingWithHostRequest.associatedHostBUID.getter()
{
  return AllowPromptlessPairingWithHostRequest.associatedHostBUID.getter();
}

uint64_t AllowPromptlessPairingWithHostRequest.pairingShouldBeMarkedForAutomation.getter()
{
  return AllowPromptlessPairingWithHostRequest.pairingShouldBeMarkedForAutomation.getter();
}

uint64_t type metadata accessor for AllowPromptlessPairingWithHostRequest()
{
  return type metadata accessor for AllowPromptlessPairingWithHostRequest();
}

uint64_t type metadata accessor for PermittedPromptlessPairingMode()
{
  return type metadata accessor for PermittedPromptlessPairingMode();
}

uint64_t PeerDeviceInfo.init(name:model:udid:ecid:deviceKVSData:deviceKVSIncludesSensitiveInfo:)()
{
  return PeerDeviceInfo.init(name:model:udid:ecid:deviceKVSData:deviceKVSIncludesSensitiveInfo:)();
}

uint64_t type metadata accessor for PeerDeviceInfo()
{
  return type metadata accessor for PeerDeviceInfo();
}

uint64_t type metadata accessor for CancelPairingCommand()
{
  return type metadata accessor for CancelPairingCommand();
}

uint64_t AttemptPairingPinCommand.pinAttempt.getter()
{
  return AttemptPairingPinCommand.pinAttempt.getter();
}

uint64_t type metadata accessor for AttemptPairingPinCommand()
{
  return type metadata accessor for AttemptPairingPinCommand();
}

uint64_t static NetworkPairingKeys.identifier.getter()
{
  return static NetworkPairingKeys.identifier.getter();
}

uint64_t static NetworkPairingKeys.wireProtocolVersion.getter()
{
  return static NetworkPairingKeys.wireProtocolVersion.getter();
}

uint64_t static NetworkPairingKeys.minimumSupportedWireProtocolVersion.getter()
{
  return static NetworkPairingKeys.minimumSupportedWireProtocolVersion.getter();
}

uint64_t static NetworkPairingKeys.name.getter()
{
  return static NetworkPairingKeys.name.getter();
}

uint64_t static NetworkPairingKeys.flags.getter()
{
  return static NetworkPairingKeys.flags.getter();
}

uint64_t static NetworkPairingKeys.model.getter()
{
  return static NetworkPairingKeys.model.getter();
}

uint64_t static NetworkPairingKeys.authTag.getter()
{
  return static NetworkPairingKeys.authTag.getter();
}

uint64_t type metadata accessor for InitiatePairingWithHostCommand()
{
  return type metadata accessor for InitiatePairingWithHostCommand();
}

uint64_t generatePairingKeyPair()()
{
  return generatePairingKeyPair()();
}

uint64_t static RemoteServiceNames.deviceComputeService.getter()
{
  return static RemoteServiceNames.deviceComputeService.getter();
}

uint64_t static RemoteServiceNames.tunnelService.getter()
{
  return static RemoteServiceNames.tunnelService.getter();
}

uint64_t static RemoteServiceNames.lockdownService.getter()
{
  return static RemoteServiceNames.lockdownService.getter();
}

uint64_t dispatch thunk of RemoteXPCControlChannelTransport.invalidate()()
{
  return dispatch thunk of RemoteXPCControlChannelTransport.invalidate()();
}

uint64_t RemoteXPCControlChannelTransport.init(xpcConnection:to:)()
{
  return RemoteXPCControlChannelTransport.init(xpcConnection:to:)();
}

uint64_t dispatch thunk of RemoteXPCControlChannelTransport.id.getter()
{
  return dispatch thunk of RemoteXPCControlChannelTransport.id.getter();
}

uint64_t type metadata accessor for RemoteXPCControlChannelTransport()
{
  return type metadata accessor for RemoteXPCControlChannelTransport();
}

uint64_t PairingChallengeEvent.init(lastAttemptIncorrect:throttleSeconds:)()
{
  return PairingChallengeEvent.init(lastAttemptIncorrect:throttleSeconds:)();
}

uint64_t type metadata accessor for PairingChallengeEvent()
{
  return type metadata accessor for PairingChallengeEvent();
}

uint64_t PairingConsentCollectionOutcome.terminal.getter()
{
  return PairingConsentCollectionOutcome.terminal.getter();
}

uint64_t type metadata accessor for PairingConsentCollectionOutcome()
{
  return type metadata accessor for PairingConsentCollectionOutcome();
}

uint64_t type metadata accessor for PairingData.Kind()
{
  return type metadata accessor for PairingData.Kind();
}

uint64_t type metadata accessor for PairingOutcome()
{
  return type metadata accessor for PairingOutcome();
}

uint64_t type metadata accessor for DeviceServiceEvent()
{
  return type metadata accessor for DeviceServiceEvent();
}

uint64_t static DeviceKeyValueStore.keyValueStoreContainingStandardKeys()()
{
  return static DeviceKeyValueStore.keyValueStoreContainingStandardKeys()();
}

uint64_t dispatch thunk of DeviceKeyValueStore.setValue(_:_:_:sensitive:)()
{
  return dispatch thunk of DeviceKeyValueStore.setValue(_:_:_:sensitive:)();
}

uint64_t DeviceKeyValueStore.init(copyingValuesFrom:)()
{
  return DeviceKeyValueStore.init(copyingValuesFrom:)();
}

uint64_t dispatch thunk of DeviceKeyValueStore.data(includeSensitive:)()
{
  return dispatch thunk of DeviceKeyValueStore.data(includeSensitive:)();
}

uint64_t type metadata accessor for DeviceKeyValueStore()
{
  return type metadata accessor for DeviceKeyValueStore();
}

uint64_t RemoteUnlockDeviceKeyForTunnelRequest.tunnelDeviceName.getter()
{
  return RemoteUnlockDeviceKeyForTunnelRequest.tunnelDeviceName.getter();
}

uint64_t type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest()
{
  return type metadata accessor for RemoteUnlockDeviceKeyForTunnelRequest();
}

uint64_t RemoteUnlockDeviceKeyForTunnelResponse.init(deviceKey:)()
{
  return RemoteUnlockDeviceKeyForTunnelResponse.init(deviceKey:)();
}

uint64_t type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse()
{
  return type metadata accessor for RemoteUnlockDeviceKeyForTunnelResponse();
}

uint64_t type metadata accessor for RemotePairingErrorCodingWrapper()
{
  return type metadata accessor for RemotePairingErrorCodingWrapper();
}

uint64_t static RemotePairingError.userRejectedPairing.getter()
{
  return static RemotePairingError.userRejectedPairing.getter();
}

uint64_t static RemotePairingError.findMyRejectedPairing.getter()
{
  return static RemotePairingError.findMyRejectedPairing.getter();
}

uint64_t static RemotePairingError.deviceIsAlreadyPairingWithHost.getter()
{
  return static RemotePairingError.deviceIsAlreadyPairingWithHost.getter();
}

uint64_t static RemotePairingError.managedConfigurationRejectedPairing.getter()
{
  return static RemotePairingError.managedConfigurationRejectedPairing.getter();
}

uint64_t static RemotePairingError.mobileDeviceError.getter()
{
  return static RemotePairingError.mobileDeviceError.getter();
}

uint64_t static RemotePairingError.tunnelError.getter()
{
  return static RemotePairingError.tunnelError.getter();
}

uint64_t static RemotePairingError.invalidInput.getter()
{
  return static RemotePairingError.invalidInput.getter();
}

uint64_t static RemotePairingError.pairingFailed.getter()
{
  return static RemotePairingError.pairingFailed.getter();
}

uint64_t static RemotePairingError.deviceNotFound.getter()
{
  return static RemotePairingError.deviceNotFound.getter();
}

uint64_t static RemotePairingError.unlockRequired.getter()
{
  return static RemotePairingError.unlockRequired.getter();
}

uint64_t static RemotePairingError.connectionFailed.getter()
{
  return static RemotePairingError.connectionFailed.getter();
}

uint64_t static RemotePairingError.invalidOperation.getter()
{
  return static RemotePairingError.invalidOperation.getter();
}

uint64_t static RemotePairingError.pairingRecordNotFound.getter()
{
  return static RemotePairingError.pairingRecordNotFound.getter();
}

uint64_t static RemotePairingError.failedToAuthenticateUser.getter()
{
  return static RemotePairingError.failedToAuthenticateUser.getter();
}

uint64_t static RemotePairingError.pairingRecordMissingInfo.getter()
{
  return static RemotePairingError.pairingRecordMissingInfo.getter();
}

uint64_t static RemotePairingError.pairingRecordRemovalFailed.getter()
{
  return static RemotePairingError.pairingRecordRemovalFailed.getter();
}

uint64_t type metadata accessor for RemotePairingError()
{
  return type metadata accessor for RemotePairingError();
}

uint64_t static IPv6Header.minHeaderLength.getter()
{
  return static IPv6Header.minHeaderLength.getter();
}

uint64_t Identifier.init()()
{
  return Identifier.init()();
}

uint64_t type metadata accessor for Identifier()
{
  return type metadata accessor for Identifier();
}

uint64_t OPACKDecode(data:)()
{
  return OPACKDecode(data:)();
}

uint64_t dispatch thunk of IRKGenerator.generateIRK(completion:)()
{
  return dispatch thunk of IRKGenerator.generateIRK(completion:)();
}

uint64_t TunnelPacket.packetData.getter()
{
  return TunnelPacket.packetData.getter();
}

uint64_t TunnelPacket.init(data:)()
{
  return TunnelPacket.init(data:)();
}

uint64_t type metadata accessor for TunnelPacket()
{
  return type metadata accessor for TunnelPacket();
}

uint64_t dispatch thunk of AtomicCounter.next()()
{
  return dispatch thunk of AtomicCounter.next()();
}

uint64_t AtomicCounter.init()()
{
  return AtomicCounter.init()();
}

uint64_t type metadata accessor for AtomicCounter()
{
  return type metadata accessor for AtomicCounter();
}

uint64_t EmptyResponse.init()()
{
  return EmptyResponse.init()();
}

uint64_t type metadata accessor for EmptyResponse()
{
  return type metadata accessor for EmptyResponse();
}

uint64_t dispatch thunk of WiFiKeepAlive.cancel()()
{
  return dispatch thunk of WiFiKeepAlive.cancel()();
}

uint64_t WiFiKeepAlive.init(reason:)()
{
  return WiFiKeepAlive.init(reason:)();
}

uint64_t type metadata accessor for WiFiKeepAlive()
{
  return type metadata accessor for WiFiKeepAlive();
}

uint64_t dispatch thunk of BonjourBrowser.resultsChangedHandler.setter()
{
  return dispatch thunk of BonjourBrowser.resultsChangedHandler.setter();
}

uint64_t type metadata accessor for BonjourBrowser.Mode()
{
  return type metadata accessor for BonjourBrowser.Mode();
}

uint64_t dispatch thunk of BonjourBrowser.start(queue:)()
{
  return dispatch thunk of BonjourBrowser.start(queue:)();
}

uint64_t type metadata accessor for BonjourBrowser.Change.Kind()
{
  return type metadata accessor for BonjourBrowser.Change.Kind();
}

uint64_t type metadata accessor for BonjourBrowser.Change()
{
  return type metadata accessor for BonjourBrowser.Change();
}

uint64_t dispatch thunk of BonjourBrowser.cancel()()
{
  return dispatch thunk of BonjourBrowser.cancel()();
}

uint64_t BonjourBrowser.init(service:includePeerToPeer:netLinkManager:pairingManager:mode:)()
{
  return BonjourBrowser.init(service:includePeerToPeer:netLinkManager:pairingManager:mode:)();
}

uint64_t type metadata accessor for BonjourBrowser()
{
  return type metadata accessor for BonjourBrowser();
}

uint64_t BonjourService.rawValue.getter()
{
  return BonjourService.rawValue.getter();
}

uint64_t type metadata accessor for BonjourService()
{
  return type metadata accessor for BonjourService();
}

uint64_t PairedHostInfo.init(name:identifier:lastUsed:initialPairingTime:pairedForAutomation:model:serialNumber:)()
{
  return PairedHostInfo.init(name:identifier:lastUsed:initialPairingTime:pairedForAutomation:model:serialNumber:)();
}

uint64_t type metadata accessor for PairedHostInfo()
{
  return type metadata accessor for PairedHostInfo();
}

uint64_t dispatch thunk of TunnelInterface.interfaceName.getter()
{
  return dispatch thunk of TunnelInterface.interfaceName.getter();
}

uint64_t dispatch thunk of TunnelInterface.address.getter()
{
  return dispatch thunk of TunnelInterface.address.getter();
}

uint64_t static MachServiceNames.deviceInitiatedPairingService.getter()
{
  return static MachServiceNames.deviceInitiatedPairingService.getter();
}

uint64_t static MachServiceNames.tunnelManagementService.getter()
{
  return static MachServiceNames.tunnelManagementService.getter();
}

uint64_t static MachServiceNames.pairingManagementService.getter()
{
  return static MachServiceNames.pairingManagementService.getter();
}

uint64_t static MachServiceNames.auxiliaryMetadata.getter()
{
  return static MachServiceNames.auxiliaryMetadata.getter();
}

uint64_t PairableHostInfo.init(identifier:name:model:available:paired:monotonicIdentifier:endpoint:)()
{
  return PairableHostInfo.init(identifier:name:model:available:paired:monotonicIdentifier:endpoint:)();
}

uint64_t type metadata accessor for PairableHostInfo()
{
  return type metadata accessor for PairableHostInfo();
}

uint64_t dispatch thunk of TunnelConnection.maxSupportedMTU.getter()
{
  return dispatch thunk of TunnelConnection.maxSupportedMTU.getter();
}

uint64_t static VirtualInterface.defaultMTU.getter()
{
  return static VirtualInterface.defaultMTU.getter();
}

uint64_t static VirtualInterface.minSupportedMTU.getter()
{
  return static VirtualInterface.minSupportedMTU.getter();
}

uint64_t type metadata accessor for VirtualInterface()
{
  return type metadata accessor for VirtualInterface();
}

uint64_t dispatch thunk of AnyTunnelEndpoint.establishServerTunnel(localParameters:remoteAddress:completion:)()
{
  return dispatch thunk of AnyTunnelEndpoint.establishServerTunnel(localParameters:remoteAddress:completion:)();
}

uint64_t dispatch thunk of AnyTunnelEndpoint.finishEstablishingServerTunnel(serverRSDPort:completion:)()
{
  return dispatch thunk of AnyTunnelEndpoint.finishEstablishingServerTunnel(serverRSDPort:completion:)();
}

uint64_t dispatch thunk of AnyTunnelEndpoint.localTunnelInterface.getter()
{
  return dispatch thunk of AnyTunnelEndpoint.localTunnelInterface.getter();
}

uint64_t dispatch thunk of AnyTunnelEndpoint.remoteAddress.getter()
{
  return dispatch thunk of AnyTunnelEndpoint.remoteAddress.getter();
}

uint64_t dispatch thunk of AnyTunnelEndpoint.startPacketTransfer(errorHandler:)()
{
  return dispatch thunk of AnyTunnelEndpoint.startPacketTransfer(errorHandler:)();
}

uint64_t dispatch thunk of AnyTunnelEndpoint.serverInjectAdditionalConnection(_:)()
{
  return dispatch thunk of AnyTunnelEndpoint.serverInjectAdditionalConnection(_:)();
}

uint64_t dispatch thunk of AnyTunnelEndpoint.cancel()()
{
  return dispatch thunk of AnyTunnelEndpoint.cancel()();
}

uint64_t type metadata accessor for NetworkParamsType()
{
  return type metadata accessor for NetworkParamsType();
}

uint64_t static BonjourAdvertFlags.onDemand.getter()
{
  return static BonjourAdvertFlags.onDemand.getter();
}

uint64_t BonjourAdvertFlags.rawValue.getter()
{
  return BonjourAdvertFlags.rawValue.getter();
}

uint64_t type metadata accessor for BonjourAdvertFlags()
{
  return type metadata accessor for BonjourAdvertFlags();
}

uint64_t type metadata accessor for HostDeletionTarget()
{
  return type metadata accessor for HostDeletionTarget();
}

uint64_t type metadata accessor for PeerConnectionInfo()
{
  return type metadata accessor for PeerConnectionInfo();
}

uint64_t CertificateUtilities.RawTLSPublicKeyInfo.publicKeyDERData.getter()
{
  return CertificateUtilities.RawTLSPublicKeyInfo.publicKeyDERData.getter();
}

uint64_t CertificateUtilities.RawTLSPublicKeyInfo.identity.getter()
{
  return CertificateUtilities.RawTLSPublicKeyInfo.identity.getter();
}

uint64_t type metadata accessor for CertificateUtilities.RawTLSPublicKeyInfo()
{
  return type metadata accessor for CertificateUtilities.RawTLSPublicKeyInfo();
}

uint64_t static CertificateUtilities.createTLSRawPublicKey(with:)()
{
  return static CertificateUtilities.createTLSRawPublicKey(with:)();
}

uint64_t type metadata accessor for PinNotificationEvent()
{
  return type metadata accessor for PinNotificationEvent();
}

uint64_t type metadata accessor for AuxiliaryMetadataItem()
{
  return type metadata accessor for AuxiliaryMetadataItem();
}

uint64_t InProcessIRKGenerator.init()()
{
  return InProcessIRKGenerator.init()();
}

uint64_t type metadata accessor for InProcessIRKGenerator()
{
  return type metadata accessor for InProcessIRKGenerator();
}

uint64_t type metadata accessor for TransportProtocolType()
{
  return type metadata accessor for TransportProtocolType();
}

uint64_t type metadata accessor for TunnelConnectionState()
{
  return type metadata accessor for TunnelConnectionState();
}

uint64_t OPACKEncoderCreateData(from:)()
{
  return OPACKEncoderCreateData(from:)();
}

uint64_t SocketTunnelConnection.init(socket:queue:logPrefix:)()
{
  return SocketTunnelConnection.init(socket:queue:logPrefix:)();
}

uint64_t type metadata accessor for SocketTunnelConnection()
{
  return type metadata accessor for SocketTunnelConnection();
}

uint64_t AuxiliaryMetadataUpdate.domain.getter()
{
  return AuxiliaryMetadataUpdate.domain.getter();
}

uint64_t AuxiliaryMetadataUpdate.metadata.getter()
{
  return AuxiliaryMetadataUpdate.metadata.getter();
}

uint64_t type metadata accessor for AuxiliaryMetadataUpdate()
{
  return type metadata accessor for AuxiliaryMetadataUpdate();
}

uint64_t dispatch thunk of ControlChannelTransport.physicallyConnected.getter()
{
  return dispatch thunk of ControlChannelTransport.physicallyConnected.getter();
}

uint64_t DiscoveredBonjourAdvert.identifier.getter()
{
  return DiscoveredBonjourAdvert.identifier.getter();
}

uint64_t DiscoveredBonjourAdvert.createTransport(withTargetQueue:)()
{
  return DiscoveredBonjourAdvert.createTransport(withTargetQueue:)();
}

uint64_t DiscoveredBonjourAdvert.userAssignedName.getter()
{
  return DiscoveredBonjourAdvert.userAssignedName.getter();
}

uint64_t DiscoveredBonjourAdvert.model.getter()
{
  return DiscoveredBonjourAdvert.model.getter();
}

uint64_t type metadata accessor for DiscoveredBonjourAdvert()
{
  return type metadata accessor for DiscoveredBonjourAdvert();
}

uint64_t ListenerStartedResponse.init(port:deviceRawPublicKey:)()
{
  return ListenerStartedResponse.init(port:deviceRawPublicKey:)();
}

uint64_t type metadata accessor for ListenerStartedResponse()
{
  return type metadata accessor for ListenerStartedResponse();
}

uint64_t dispatch thunk of ControlChannelConnection.requireUserConsentForPairing.setter()
{
  return dispatch thunk of ControlChannelConnection.requireUserConsentForPairing.setter();
}

uint64_t dispatch thunk of ControlChannelConnection.pushDeviceInfoChangesToHost()()
{
  return dispatch thunk of ControlChannelConnection.pushDeviceInfoChangesToHost()();
}

uint64_t dispatch thunk of ControlChannelConnection.customDeviceMetadataProvider.setter()
{
  return dispatch thunk of ControlChannelConnection.customDeviceMetadataProvider.setter();
}

uint64_t dispatch thunk of ControlChannelConnection.initiatePairing(withOptions:pairingOutcomeHandler:)()
{
  return dispatch thunk of ControlChannelConnection.initiatePairing(withOptions:pairingOutcomeHandler:)();
}

uint64_t dispatch thunk of ControlChannelConnection.invalidate(for:)()
{
  return dispatch thunk of ControlChannelConnection.invalidate(for:)();
}

uint64_t dispatch thunk of ControlChannelConnection.resolvedIdentity.getter()
{
  return dispatch thunk of ControlChannelConnection.resolvedIdentity.getter();
}

uint64_t type metadata accessor for ControlChannelConnection.InvalidationReason()
{
  return type metadata accessor for ControlChannelConnection.InvalidationReason();
}

uint64_t dispatch thunk of ControlChannelConnection.invalidationReason.getter()
{
  return dispatch thunk of ControlChannelConnection.invalidationReason.getter();
}

uint64_t dispatch thunk of ControlChannelConnection.invalidationHandler.setter()
{
  return dispatch thunk of ControlChannelConnection.invalidationHandler.setter();
}

uint64_t dispatch thunk of ControlChannelConnection.tunnelListenerCreator.setter()
{
  return dispatch thunk of ControlChannelConnection.tunnelListenerCreator.setter();
}

uint64_t dispatch thunk of ControlChannelConnection.userInteractionProvider.setter()
{
  return dispatch thunk of ControlChannelConnection.userInteractionProvider.setter();
}

uint64_t dispatch thunk of ControlChannelConnection.id.getter()
{
  return dispatch thunk of ControlChannelConnection.id.getter();
}

uint64_t static ControlChannelConnection.defaultMaxReconnectionAttempts.getter()
{
  return static ControlChannelConnection.defaultMaxReconnectionAttempts.getter();
}

uint64_t dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter()
{
  return dispatch thunk of ControlChannelConnection._connectionSetupCompleteHandler.setter();
}

uint64_t type metadata accessor for ControlChannelConnection.State()
{
  return type metadata accessor for ControlChannelConnection.State();
}

uint64_t dispatch thunk of ControlChannelConnection.start()()
{
  return dispatch thunk of ControlChannelConnection.start()();
}

uint64_t dispatch thunk of ControlChannelConnection.state.getter()
{
  return dispatch thunk of ControlChannelConnection.state.getter();
}

uint64_t ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)()
{
  return ControlChannelConnection.Options.Device.init(allowsPairSetup:allowsPinlessPairing:allowsIncomingTunnelConnections:allowsPromptlessAutomationPairingUpgrade:allowsSharingSensitiveInfo:)();
}

uint64_t type metadata accessor for ControlChannelConnection.Options.Device()
{
  return type metadata accessor for ControlChannelConnection.Options.Device();
}

uint64_t ControlChannelConnection.Options.Host.init(attemptPairVerify:)()
{
  return ControlChannelConnection.Options.Host.init(attemptPairVerify:)();
}

uint64_t type metadata accessor for ControlChannelConnection.Options()
{
  return type metadata accessor for ControlChannelConnection.Options();
}

uint64_t dispatch thunk of ControlChannelConnection.attempt(pairingPIN:)()
{
  return dispatch thunk of ControlChannelConnection.attempt(pairingPIN:)();
}

uint64_t ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)()
{
  return ControlChannelConnection.init(transport:queue:options:maxReconnectionAttempts:pairingDataStorageProvider:peerWireProtocolVersion:)();
}

uint64_t ControlChannelConnection.transport.getter()
{
  return ControlChannelConnection.transport.getter();
}

uint64_t type metadata accessor for ControlChannelConnection()
{
  return type metadata accessor for ControlChannelConnection();
}

uint64_t static HashableByObjectIdentity.== infix(_:_:)()
{
  return static HashableByObjectIdentity.== infix(_:_:)();
}

uint64_t HashableByObjectIdentity.hash(into:)()
{
  return HashableByObjectIdentity.hash(into:)();
}

uint64_t static AuxiliaryMetadataProvider.XPCKeys.xpcEventStreamName.getter()
{
  return static AuxiliaryMetadataProvider.XPCKeys.xpcEventStreamName.getter();
}

uint64_t static AuxiliaryMetadataProvider.XPCKeys.domainKey.getter()
{
  return static AuxiliaryMetadataProvider.XPCKeys.domainKey.getter();
}

uint64_t SecureSocketDataTransport.init(physicallyConnected:underlyingConnectionSocket:bufferedReceiveSizeHandler:syncReceiveHandler:syncSendHandler:cleanupConnectionHandler:)()
{
  return SecureSocketDataTransport.init(physicallyConnected:underlyingConnectionSocket:bufferedReceiveSizeHandler:syncReceiveHandler:syncSendHandler:cleanupConnectionHandler:)();
}

uint64_t type metadata accessor for SecureSocketDataTransport()
{
  return type metadata accessor for SecureSocketDataTransport();
}

uint64_t TunnelInterfaceParameters.init(address:netmask:mtu:)()
{
  return TunnelInterfaceParameters.init(address:netmask:mtu:)();
}

uint64_t type metadata accessor for TunnelInterfaceParameters()
{
  return type metadata accessor for TunnelInterfaceParameters();
}

uint64_t type metadata accessor for ListPairedHostRecordRequest()
{
  return type metadata accessor for ListPairedHostRecordRequest();
}

uint64_t StreamBasedTunnelConnection.receivePackets(completion:)()
{
  return StreamBasedTunnelConnection.receivePackets(completion:)();
}

uint64_t StreamBasedTunnelConnection.receiveControlMessage(completion:)()
{
  return StreamBasedTunnelConnection.receiveControlMessage(completion:)();
}

uint64_t StreamBasedTunnelConnection.send(controlMessage:completion:)()
{
  return StreamBasedTunnelConnection.send(controlMessage:completion:)();
}

uint64_t StreamBasedTunnelConnection.send(packets:completion:)()
{
  return StreamBasedTunnelConnection.send(packets:completion:)();
}

uint64_t type metadata accessor for BrowseForPairableHostRequest()
{
  return type metadata accessor for BrowseForPairableHostRequest();
}

uint64_t type metadata accessor for ControlChannelTransportEvent()
{
  return type metadata accessor for ControlChannelTransportEvent();
}

uint64_t ListPairedHostRecordResponse.init(hosts:)()
{
  return ListPairedHostRecordResponse.init(hosts:)();
}

uint64_t type metadata accessor for ListPairedHostRecordResponse()
{
  return type metadata accessor for ListPairedHostRecordResponse();
}

uint64_t type metadata accessor for ControlChannelConnectionError.Code()
{
  return type metadata accessor for ControlChannelConnectionError.Code();
}

uint64_t ControlChannelConnectionError.code.getter()
{
  return ControlChannelConnectionError.code.getter();
}

uint64_t type metadata accessor for ControlChannelConnectionError()
{
  return type metadata accessor for ControlChannelConnectionError();
}

uint64_t DeletePairedHostRecordRequest.target.getter()
{
  return DeletePairedHostRecordRequest.target.getter();
}

uint64_t type metadata accessor for DeletePairedHostRecordRequest()
{
  return type metadata accessor for DeletePairedHostRecordRequest();
}

uint64_t type metadata accessor for TunnelConnectionIdentifierCategory()
{
  return type metadata accessor for TunnelConnectionIdentifierCategory();
}

uint64_t NWConnectionControlChannelTransport.init(connection:endpoint:netLinkManager:)()
{
  return NWConnectionControlChannelTransport.init(connection:endpoint:netLinkManager:)();
}

uint64_t type metadata accessor for NWConnectionControlChannelTransport()
{
  return type metadata accessor for NWConnectionControlChannelTransport();
}

uint64_t JSONDataBasedControlChannelTransport.startReceivingMessages(usingEventHandler:)()
{
  return JSONDataBasedControlChannelTransport.startReceivingMessages(usingEventHandler:)();
}

uint64_t JSONDataBasedControlChannelTransport.send(message:invokingCompletionHandlerOn:completion:)()
{
  return JSONDataBasedControlChannelTransport.send(message:invokingCompletionHandlerOn:completion:)();
}

uint64_t type metadata accessor for QueryUSBConnectedHostTrustStateRequest()
{
  return type metadata accessor for QueryUSBConnectedHostTrustStateRequest();
}

uint64_t static ControlChannelConnectionWireProtocolVersion.minimumSupportedForWirelessPairing.getter()
{
  return static ControlChannelConnectionWireProtocolVersion.minimumSupportedForWirelessPairing.getter();
}

uint64_t static ControlChannelConnectionWireProtocolVersion.minimumSupported.getter()
{
  return static ControlChannelConnectionWireProtocolVersion.minimumSupported.getter();
}

uint64_t static ControlChannelConnectionWireProtocolVersion.current.getter()
{
  return static ControlChannelConnectionWireProtocolVersion.current.getter();
}

uint64_t type metadata accessor for ControlChannelConnectionWireProtocolVersion()
{
  return type metadata accessor for ControlChannelConnectionWireProtocolVersion();
}

uint64_t static Defaults.deviceAllowBluetoothDeviceDiscovery.getter()
{
  return static Defaults.deviceAllowBluetoothDeviceDiscovery.getter();
}

uint64_t static Defaults.networkPairingEnabled.getter()
{
  return static Defaults.networkPairingEnabled.getter();
}

uint64_t static Defaults.tunnelUseSkywalk.getter()
{
  return static Defaults.tunnelUseSkywalk.getter();
}

uint64_t static Defaults.pairingRecordExpiryInterval.getter()
{
  return static Defaults.pairingRecordExpiryInterval.getter();
}

uint64_t static Defaults.deviceAllowTCPControlChannels.getter()
{
  return static Defaults.deviceAllowTCPControlChannels.getter();
}

uint64_t static Defaults.pairingRecordLastUsedUpdateInterval.getter()
{
  return static Defaults.pairingRecordLastUsedUpdateInterval.getter();
}

uint64_t powerLog.getter()
{
  return powerLog.getter();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t XPC_EVENT_KEY_NAME.getter()
{
  return XPC_EVENT_KEY_NAME.getter();
}

uint64_t POSIXErrorCode.init(rawValue:)()
{
  return POSIXErrorCode.init(rawValue:)();
}

uint64_t SIG_IGN.getter()
{
  return SIG_IGN.getter();
}

uint64_t dispatch thunk of XPCEndpoint.withUnsafeUnderlyingEndpoint<A>(_:)()
{
  return dispatch thunk of XPCEndpoint.withUnsafeUnderlyingEndpoint<A>(_:)();
}

uint64_t dispatch thunk of XPCConnection.setTargetQueue(_:)()
{
  return dispatch thunk of XPCConnection.setTargetQueue(_:)();
}

uint64_t static XPCConnection.== infix(_:_:)()
{
  return static XPCConnection.== infix(_:_:)();
}

uint64_t dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)()
{
  return dispatch thunk of XPCConnection.withUnsafeUnderlyingConnection<A>(_:)();
}

uint64_t XPCConnection.send<A>(value:)()
{
  return XPCConnection.send<A>(value:)();
}

uint64_t dispatch thunk of XPCConnection.send(message:replyQueue:replyHandler:)()
{
  return dispatch thunk of XPCConnection.send(message:replyQueue:replyHandler:)();
}

uint64_t dispatch thunk of XPCConnection.cancel()()
{
  return dispatch thunk of XPCConnection.cancel()();
}

uint64_t dispatch thunk of XPCConnection.activate()()
{
  return dispatch thunk of XPCConnection.activate()();
}

uint64_t type metadata accessor for XPCConnection()
{
  return type metadata accessor for XPCConnection();
}

uint64_t XPCDictionary.auditToken.getter()
{
  return XPCDictionary.auditToken.getter();
}

uint64_t XPCDictionary.entitlements.getter()
{
  return XPCDictionary.entitlements.getter();
}

uint64_t XPCDictionary.init(nsDictionary:)()
{
  return XPCDictionary.init(nsDictionary:)();
}

uint64_t XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)()
{
  return XPCDictionary.withUnsafeUnderlyingDictionary<A>(_:)();
}

uint64_t XPCDictionary.init()()
{
  return XPCDictionary.init()();
}

uint64_t type metadata accessor for XPCDictionary()
{
  return type metadata accessor for XPCDictionary();
}

uint64_t XPCDictionary.subscript.setter()
{
  return XPCDictionary.subscript.setter();
}

{
  return XPCDictionary.subscript.setter();
}

{
  return XPCDictionary.subscript.setter();
}

uint64_t XPCDictionary.subscript.getter()
{
  return XPCDictionary.subscript.getter();
}

{
  return XPCDictionary.subscript.getter();
}

{
  return XPCDictionary.subscript.getter();
}

uint64_t dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)()
{
  return dispatch thunk of CodableDispatcher.dispatch(encodedData:context:completion:)();
}

uint64_t dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)()
{
  return dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
}

{
  return dispatch thunk of CodableDispatcher.register<A, B, C>(errorWrapperType:handler:)();
}

uint64_t dispatch thunk of CodableDispatcher.register<A, B>(handler:)()
{
  return dispatch thunk of CodableDispatcher.register<A, B>(handler:)();
}

uint64_t dispatch thunk of XPCEventPublisher.setHandler(_:)()
{
  return dispatch thunk of XPCEventPublisher.setHandler(_:)();
}

uint64_t dispatch thunk of XPCEventPublisher.__allocating_init(streamName:queue:)()
{
  return dispatch thunk of XPCEventPublisher.__allocating_init(streamName:queue:)();
}

uint64_t dispatch thunk of XPCEventPublisher.setErrorHandler(_:)()
{
  return dispatch thunk of XPCEventPublisher.setErrorHandler(_:)();
}

uint64_t type metadata accessor for XPCEventPublisher.SubscriptionAction()
{
  return type metadata accessor for XPCEventPublisher.SubscriptionAction();
}

uint64_t dispatch thunk of XPCEventPublisher.fire(event:forToken:replyQueue:replyHandler:)()
{
  return dispatch thunk of XPCEventPublisher.fire(event:forToken:replyQueue:replyHandler:)();
}

uint64_t type metadata accessor for XPCEventPublisher.Token()
{
  return type metadata accessor for XPCEventPublisher.Token();
}

uint64_t dispatch thunk of XPCEventPublisher.activate()()
{
  return dispatch thunk of XPCEventPublisher.activate()();
}

uint64_t type metadata accessor for XPCEventPublisher()
{
  return type metadata accessor for XPCEventPublisher();
}

uint64_t dispatch thunk of XPCPeerConnection.setEventHandler(_:)()
{
  return dispatch thunk of XPCPeerConnection.setEventHandler(_:)();
}

uint64_t static XPCReplyProviding.passthrough.getter()
{
  return static XPCReplyProviding.passthrough.getter();
}

uint64_t type metadata accessor for XPCReplyProviding()
{
  return type metadata accessor for XPCReplyProviding();
}

uint64_t static RemoteXPCConnection.unsafePeer(from:)()
{
  return static RemoteXPCConnection.unsafePeer(from:)();
}

uint64_t static SystemXPCConnection.unsafePeer(from:)()
{
  return static SystemXPCConnection.unsafePeer(from:)();
}

uint64_t static SystemXPCConnection.connectionToMachService(name:privilegedService:targetQueue:)()
{
  return static SystemXPCConnection.connectionToMachService(name:privilegedService:targetQueue:)();
}

uint64_t static SystemXPCConnection.anonymousListenerConnection(targetQueue:)()
{
  return static SystemXPCConnection.anonymousListenerConnection(targetQueue:)();
}

uint64_t static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)()
{
  return static SystemXPCConnection.machServiceListenerConnection(name:targetQueue:)();
}

uint64_t type metadata accessor for SystemXPCConnection()
{
  return type metadata accessor for SystemXPCConnection();
}

uint64_t XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)()
{
  return XPCMessageDispatcher.init(xpcReplyProviding:inboundObserver:outboundObserver:)();
}

uint64_t type metadata accessor for RemoteXPCPeerConnection()
{
  return type metadata accessor for RemoteXPCPeerConnection();
}

uint64_t dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)()
{
  return dispatch thunk of SystemXPCPeerConnection.setEventHandler(_:)();
}

uint64_t type metadata accessor for SystemXPCPeerConnection()
{
  return type metadata accessor for SystemXPCPeerConnection();
}

uint64_t dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)()
{
  return dispatch thunk of SystemXPCListenerConnection.setPeerConnectionHandler(_:)();
}

uint64_t SystemXPCListenerConnection.createEndpoint()()
{
  return SystemXPCListenerConnection.createEndpoint()();
}

uint64_t type metadata accessor for SystemXPCListenerConnection()
{
  return type metadata accessor for SystemXPCListenerConnection();
}

uint64_t static _Error.~= infix(_:_:)()
{
  return static _Error.~= infix(_:_:)();
}

{
  return static _Error.~= infix(_:_:)();
}

uint64_t _Error.wrapping(_:)()
{
  return _Error.wrapping(_:)();
}

uint64_t static XPCError.connectionInvalid.getter()
{
  return static XPCError.connectionInvalid.getter();
}

uint64_t type metadata accessor for XPCError()
{
  return type metadata accessor for XPCError();
}

uint64_t static NWEndpoint.Port.any.getter()
{
  return static NWEndpoint.Port.any.getter();
}

uint64_t type metadata accessor for NWEndpoint.Port()
{
  return type metadata accessor for NWEndpoint.Port();
}

uint64_t NWListener.stateUpdateHandler.setter()
{
  return NWListener.stateUpdateHandler.setter();
}

uint64_t NWListener.newConnectionHandler.setter()
{
  return NWListener.newConnectionHandler.setter();
}

uint64_t type metadata accessor for NWListener.State()
{
  return type metadata accessor for NWListener.State();
}

uint64_t NWListener.start(queue:)()
{
  return NWListener.start(queue:)();
}

uint64_t NWListener.init(using:on:)()
{
  return NWListener.init(using:on:)();
}

Swift::Void __swiftcall NWListener.cancel()()
{
}

uint64_t NWListener.Service.init(name:type:domain:txtRecord:)()
{
  return NWListener.Service.init(name:type:domain:txtRecord:)();
}

uint64_t type metadata accessor for NWListener.Service()
{
  return type metadata accessor for NWListener.Service();
}

uint64_t NWListener.service.setter()
{
  return NWListener.service.setter();
}

uint64_t type metadata accessor for NWListener()
{
  return type metadata accessor for NWListener();
}

uint64_t type metadata accessor for IPv6Address()
{
  return type metadata accessor for IPv6Address();
}

uint64_t IPv6Address.init(_:_:)()
{
  return IPv6Address.init(_:_:)();
}

uint64_t IPv6Address.init(_:)()
{
  return IPv6Address.init(_:)();
}

uint64_t type metadata accessor for NWInterface.InterfaceType()
{
  return type metadata accessor for NWInterface.InterfaceType();
}

uint64_t type metadata accessor for NWInterface()
{
  return type metadata accessor for NWInterface();
}

uint64_t type metadata accessor for NWTXTRecord()
{
  return type metadata accessor for NWTXTRecord();
}

uint64_t NWTXTRecord.init(_:)()
{
  return NWTXTRecord.init(_:)();
}

uint64_t NWTXTRecord.subscript.setter()
{
  return NWTXTRecord.subscript.setter();
}

Swift::Void __swiftcall NWConnection.cancel()()
{
}

uint64_t NWParameters.prohibitedInterfaceTypes.setter()
{
  return NWParameters.prohibitedInterfaceTypes.setter();
}

uint64_t NWParameters.nw.getter()
{
  return NWParameters.nw.getter();
}

uint64_t static NWParameters.tcp.getter()
{
  return static NWParameters.tcp.getter();
}

uint64_t NWParameters.__allocating_init(tls:tcp:)()
{
  return NWParameters.__allocating_init(tls:tcp:)();
}

uint64_t NWParameters.__allocating_init(quic:)()
{
  return NWParameters.__allocating_init(quic:)();
}

uint64_t type metadata accessor for NWParameters()
{
  return type metadata accessor for NWParameters();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter()
{
  return dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveCount.setter()
{
  return dispatch thunk of NWProtocolTCP.Options.keepaliveCount.setter();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter()
{
  return dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionTimeout.setter()
{
  return dispatch thunk of NWProtocolTCP.Options.connectionTimeout.setter();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.setter()
{
  return dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.setter();
}

uint64_t NWProtocolTCP.Options.init()()
{
  return NWProtocolTCP.Options.init()();
}

uint64_t type metadata accessor for NWProtocolTCP.Options()
{
  return type metadata accessor for NWProtocolTCP.Options();
}

uint64_t dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter()
{
  return dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
}

uint64_t NWProtocolTLS.Options.init()()
{
  return NWProtocolTLS.Options.init()();
}

uint64_t type metadata accessor for NWProtocolTLS.Options()
{
  return type metadata accessor for NWProtocolTLS.Options();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter()
{
  return dispatch thunk of NWProtocolQUIC.Options.securityProtocolOptions.getter();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.setter()
{
  return dispatch thunk of NWProtocolQUIC.Options.initialPacketSize.setter();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.setter()
{
  return dispatch thunk of NWProtocolQUIC.Options.maxDatagramFrameSize.setter();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.setter()
{
  return dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsBidirectional.setter();
}

uint64_t dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.setter()
{
  return dispatch thunk of NWProtocolQUIC.Options.initialMaxStreamsUnidirectional.setter();
}

uint64_t NWProtocolQUIC.Options.__allocating_init(alpn:)()
{
  return NWProtocolQUIC.Options.__allocating_init(alpn:)();
}

uint64_t type metadata accessor for NWProtocolQUIC.Options()
{
  return type metadata accessor for NWProtocolQUIC.Options();
}

uint64_t type metadata accessor for NWError()
{
  return type metadata accessor for NWError();
}

uint64_t NWError.init(_:)()
{
  return NWError.init(_:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return static DispatchWorkItemFlags.barrier.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return static DispatchQoS.userInteractive.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t DispatchData._bridgeToObjectiveC()()
{
  return DispatchData._bridgeToObjectiveC()();
}

uint64_t DispatchData.init(bytes:)()
{
  return DispatchData.init(bytes:)();
}

uint64_t type metadata accessor for DispatchData()
{
  return type metadata accessor for DispatchData();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return dispatch thunk of DispatchWorkItem.cancel()();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Dictionary._Variant.remove(at:)()
{
  return Dictionary._Variant.remove(at:)();
}

Swift::Void __swiftcall Dictionary._Variant.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(format:arguments:)()
{
  return String.init(format:arguments:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(_:offsetBy:)()
{
  return String.index(_:offsetBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t CUPairedPeer.initialPairingTime.getter()
{
  return CUPairedPeer.initialPairingTime.getter();
}

uint64_t CUPairedPeer.initialPairingTime.setter()
{
  return CUPairedPeer.initialPairingTime.setter();
}

uint64_t CUPairedPeer.serialNumber.getter()
{
  return CUPairedPeer.serialNumber.getter();
}

uint64_t CUPairedPeer.remoteUnlockKey.getter()
{
  return CUPairedPeer.remoteUnlockKey.getter();
}

uint64_t static CUPairedPeer.serialNumberInfoKey.getter()
{
  return static CUPairedPeer.serialNumberInfoKey.getter();
}

uint64_t CUPairedPeer.isPairedForAutomation.getter()
{
  return CUPairedPeer.isPairedForAutomation.getter();
}

uint64_t CUPairedPeer.associatedLockdownHostBUID.getter()
{
  return CUPairedPeer.associatedLockdownHostBUID.getter();
}

uint64_t CUPairedPeer.verify(authTag:data:type:)()
{
  return CUPairedPeer.verify(authTag:data:type:)();
}

uint64_t NSDictionary.init(dictionaryLiteral:)()
{
  return NSDictionary.init(dictionaryLiteral:)();
}

uint64_t audit_token_t.processIdentifier.getter()
{
  return audit_token_t.processIdentifier.getter();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t CUPairingIdentity.authTag(for:type:)()
{
  return CUPairingIdentity.authTag(for:type:)();
}

uint64_t OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)()
{
  return OS_dispatch_queue.childQueue(label:qos:attributes:autoreleaseFrequency:)();
}

Swift::Void __swiftcall OS_dispatch_queue.assertOnQueueHierarchy()()
{
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return static OS_dispatch_queue.Attributes.concurrent.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t static OS_dispatch_source.makeReadSource(fileDescriptor:queue:)()
{
  return static OS_dispatch_source.makeReadSource(fileDescriptor:queue:)();
}

uint64_t static OS_dispatch_source.makeWriteSource(fileDescriptor:queue:)()
{
  return static OS_dispatch_source.makeWriteSource(fileDescriptor:queue:)();
}

uint64_t static OS_dispatch_source.makeSignalSource(signal:queue:)()
{
  return static OS_dispatch_source.makeSignalSource(signal:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

uint64_t OS_dispatch_source.setCancelHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setCancelHandler(qos:flags:handler:)();
}

uint64_t OS_dispatch_source.data.getter()
{
  return OS_dispatch_source.data.getter();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

Swift::Void __swiftcall OS_dispatch_source.suspend()()
{
}

uint64_t static remote_device_type_t.ncmHost.getter()
{
  return static remote_device_type_t.ncmHost.getter();
}

uint64_t static remote_device_type_t.ncmDevice.getter()
{
  return static remote_device_type_t.ncmDevice.getter();
}

uint64_t RPUSBConnectedHostTrustState.description.getter()
{
  return RPUSBConnectedHostTrustState.description.getter();
}

uint64_t static RPUSBConnectedHostTrustState.< infix(_:_:)()
{
  return static RPUSBConnectedHostTrustState.< infix(_:_:)();
}

uint64_t static NSError.setRemotePairingNormalizationProviders()()
{
  return static NSError.setRemotePairingNormalizationProviders()();
}

uint64_t static OS_os_log.default.getter()
{
  return static OS_os_log.default.getter();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t Optional.isNil.getter()
{
  return Optional.isNil.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return StringProtocol.components(separatedBy:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t BinaryInteger.description.getter()
{
  return BinaryInteger.description.getter();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

uint64_t _NativeDictionary._delete(at:)()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t static Error<>.networkingError.getter()
{
  return static Error<>.networkingError.getter();
}

uint64_t static Error<>.dataCorrupted.getter()
{
  return static Error<>.dataCorrupted.getter();
}

uint64_t static Error<>.permissionDenied.getter()
{
  return static Error<>.permissionDenied.getter();
}

uint64_t static Error<>.unknown.getter()
{
  return static Error<>.unknown.getter();
}

uint64_t Error<>.init(_:_:)()
{
  return Error<>.init(_:_:)();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t BYSetupAssistantHasCompletedInitialRun()
{
  return _BYSetupAssistantHasCompletedInitialRun();
}

uint64_t BiomeLibrary()
{
  return _BiomeLibrary();
}

void CFRelease(CFTypeRef cf)
{
}

void CFRunLoopRun(void)
{
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return _CFUserNotificationCancel(userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

IOReturn IOPMAssertionCreateWithDescription(CFStringRef AssertionType, CFStringRef Name, CFStringRef Details, CFStringRef HumanReadableReason, CFStringRef LocalizationBundlePath, CFTimeInterval Timeout, CFStringRef TimeoutAction, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithDescription(AssertionType, Name, Details, HumanReadableReason, LocalizationBundlePath, Timeout, TimeoutAction, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return _IOPMAssertionRelease(AssertionID);
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

uint64_t NWCreateDispatchDataFromNSData()
{
  return _NWCreateDispatchDataFromNSData();
}

uint64_t NWCreateNSDataFromDispatchData()
{
  return _NWCreateNSDataFromDispatchData();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return _SecItemUpdate(query, attributesToUpdate);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _RPIsAppleInternal()
{
  return __RPIsAppleInternal();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return _accept(a1, a2, a3);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return _close(a1);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return _getsockname(a1, a2, a3);
}

int launch_activate_socket(const char *name, int **fds, size_t *cnt)
{
  return _launch_activate_socket(name, fds, cnt);
}

uint64_t lockdown_checkin_xpc()
{
  return _lockdown_checkin_xpc();
}

uint64_t lockdown_connect()
{
  return _lockdown_connect();
}

uint64_t lockdown_connection_is_usb()
{
  return _lockdown_connection_is_usb();
}

uint64_t lockdown_copy_value()
{
  return _lockdown_copy_value();
}

uint64_t lockdown_disconnect()
{
  return _lockdown_disconnect();
}

uint64_t lockdown_get_buffered_read_size()
{
  return _lockdown_get_buffered_read_size();
}

uint64_t lockdown_get_socket()
{
  return _lockdown_get_socket();
}

uint64_t lockdown_recv()
{
  return _lockdown_recv();
}

uint64_t lockdown_send()
{
  return _lockdown_send();
}

uint64_t lockdown_unpair_host_by_id()
{
  return _lockdown_unpair_host_by_id();
}

uint64_t lockdown_wifi_debug_enabled()
{
  return _lockdown_wifi_debug_enabled();
}

uint64_t lockdown_wifi_sync_enabled()
{
  return _lockdown_wifi_sync_enabled();
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

nw_advertise_descriptor_t nw_advertise_descriptor_create_bonjour_service(const char *name, const char *type, const char *domain)
{
  return _nw_advertise_descriptor_create_bonjour_service(name, type, domain);
}

void nw_advertise_descriptor_set_txt_record_object(nw_advertise_descriptor_t advertise_descriptor, nw_txt_record_t txt_record)
{
}

void nw_connection_cancel(nw_connection_t connection)
{
}

uint64_t nw_connection_copy_connected_remote_endpoint()
{
  return _nw_connection_copy_connected_remote_endpoint();
}

nw_path_t nw_connection_copy_current_path(nw_connection_t connection)
{
  return _nw_connection_copy_current_path(connection);
}

nw_protocol_metadata_t nw_connection_copy_protocol_metadata(nw_connection_t connection, nw_protocol_definition_t definition)
{
  return _nw_connection_copy_protocol_metadata(connection, definition);
}

uint64_t nw_connection_create_with_connected_socket_and_parameters()
{
  return _nw_connection_create_with_connected_socket_and_parameters();
}

void nw_connection_group_cancel(nw_connection_group_t group)
{
}

void nw_connection_group_set_new_connection_handler(nw_connection_group_t group, nw_connection_group_new_connection_handler_t new_connection_handler)
{
}

void nw_connection_group_set_queue(nw_connection_group_t group, dispatch_queue_t queue)
{
}

void nw_connection_group_set_state_changed_handler(nw_connection_group_t group, nw_connection_group_state_changed_handler_t state_changed_handler)
{
}

void nw_connection_group_start(nw_connection_group_t group)
{
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
}

void nw_connection_receive_message(nw_connection_t connection, nw_connection_receive_completion_t completion)
{
}

uint64_t nw_connection_receive_multiple()
{
  return _nw_connection_receive_multiple();
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
}

void nw_connection_set_viability_changed_handler(nw_connection_t connection, nw_connection_BOOLean_event_handler_t handler)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

uint64_t nw_connection_write_multiple()
{
  return _nw_connection_write_multiple();
}

BOOL nw_content_context_get_is_final(nw_content_context_t context)
{
  return _nw_content_context_get_is_final(context);
}

uint64_t nw_content_context_get_is_wake_packet()
{
  return _nw_content_context_get_is_wake_packet();
}

int nw_error_get_error_code(nw_error_t error)
{
  return _nw_error_get_error_code(error);
}

nw_error_domain_t nw_error_get_error_domain(nw_error_t error)
{
  return _nw_error_get_error_domain(error);
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return _nw_interface_get_name(interface);
}

uint64_t nw_interface_get_subtype()
{
  return _nw_interface_get_subtype();
}

void nw_listener_cancel(nw_listener_t listener)
{
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return _nw_listener_create(parameters);
}

uint16_t nw_listener_get_port(nw_listener_t listener)
{
  return _nw_listener_get_port(listener);
}

void nw_listener_set_advertise_descriptor(nw_listener_t listener, nw_advertise_descriptor_t advertise_descriptor)
{
}

void nw_listener_set_new_connection_group_handler(nw_listener_t listener, nw_listener_new_connection_group_handler_t handler)
{
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
}

void nw_listener_start(nw_listener_t listener)
{
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return _nw_parameters_create_secure_tcp(configure_tls, configure_tcp);
}

void nw_parameters_prohibit_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
}

void nw_parameters_set_include_peer_to_peer(nw_parameters_t parameters, BOOL include_peer_to_peer)
{
}

void nw_parameters_set_local_only(nw_parameters_t parameters, BOOL local_only)
{
}

uint64_t nw_parameters_set_no_wake_from_sleep()
{
  return _nw_parameters_set_no_wake_from_sleep();
}

uint64_t nw_path_copy_interface()
{
  return _nw_path_copy_interface();
}

uint64_t nw_path_is_local()
{
  return _nw_path_is_local();
}

BOOL nw_path_uses_interface_type(nw_path_t path, nw_interface_type_t interface_type)
{
  return _nw_path_uses_interface_type(path, interface_type);
}

nw_protocol_definition_t nw_protocol_copy_quic_definition(void)
{
  return _nw_protocol_copy_quic_definition();
}

uint8_t nw_quic_get_stream_type(nw_protocol_metadata_t stream_metadata)
{
  return _nw_quic_get_stream_type(stream_metadata);
}

uint16_t nw_quic_get_stream_usable_datagram_frame_size(nw_protocol_metadata_t metadata)
{
  return _nw_quic_get_stream_usable_datagram_frame_size(metadata);
}

void nw_tcp_options_set_connection_timeout(nw_protocol_options_t options, uint32_t connection_timeout)
{
}

void nw_tcp_options_set_enable_keepalive(nw_protocol_options_t options, BOOL enable_keepalive)
{
}

void nw_tcp_options_set_keepalive_idle_time(nw_protocol_options_t options, uint32_t keepalive_idle_time)
{
}

void nw_tcp_options_set_keepalive_interval(nw_protocol_options_t options, uint32_t keepalive_interval)
{
}

void nw_tcp_options_set_retransmit_connection_drop_time(nw_protocol_options_t options, uint32_t retransmit_connection_drop_time)
{
}

BOOL nw_txt_record_access_bytes(nw_txt_record_t txt_record, nw_txt_record_access_bytes_t access_bytes)
{
  return _nw_txt_record_access_bytes(txt_record, access_bytes);
}

nw_txt_record_t nw_txt_record_create_dictionary(void)
{
  return _nw_txt_record_create_dictionary();
}

BOOL nw_txt_record_set_key(nw_txt_record_t txt_record, const char *key, const uint8_t *value, size_t value_len)
{
  return _nw_txt_record_set_key(txt_record, key, value, value_len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_state_remove_handler()
{
  return _os_state_remove_handler();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

uint64_t os_variant_allows_internal_security_policies()
{
  return _os_variant_allows_internal_security_policies();
}

uint64_t os_variant_is_darwinos()
{
  return _os_variant_is_darwinos();
}

uint64_t remotePairingIsEnabled()
{
  return _remotePairingIsEnabled();
}

uint64_t remote_device_browser_cancel()
{
  return _remote_device_browser_cancel();
}

uint64_t remote_device_cancel()
{
  return _remote_device_cancel();
}

uint64_t remote_device_get_name()
{
  return _remote_device_get_name();
}

uint64_t remote_device_get_type()
{
  return _remote_device_get_type();
}

uint64_t remote_device_get_xpc_remote_connection_version_flags()
{
  return _remote_device_get_xpc_remote_connection_version_flags();
}

uint64_t remote_device_set_disconnected_callback()
{
  return _remote_device_set_disconnected_callback();
}

uint64_t remote_device_start_browsing()
{
  return _remote_device_start_browsing();
}

uint64_t remote_service_listen_with_device()
{
  return _remote_service_listen_with_device();
}

void sec_protocol_options_add_pre_shared_key(sec_protocol_options_t options, dispatch_data_t psk, dispatch_data_t psk_identity)
{
}

uint64_t sec_protocol_options_set_client_raw_public_key_certificates()
{
  return _sec_protocol_options_set_client_raw_public_key_certificates();
}

void sec_protocol_options_set_local_identity(sec_protocol_options_t options, sec_identity_t identity)
{
}

void sec_protocol_options_set_min_tls_protocol_version(sec_protocol_options_t options, tls_protocol_version_t version)
{
}

void sec_protocol_options_set_peer_authentication_required(sec_protocol_options_t options, BOOL peer_authentication_required)
{
}

uint64_t sec_protocol_options_set_server_raw_public_key_certificates()
{
  return _sec_protocol_options_set_server_raw_public_key_certificates();
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return _setsockopt(a1, a2, a3, a4, a5);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return _swift_dynamicCastClassUnconditional();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getMetatypeMetadata()
{
  return _swift_getMetatypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout()
{
  return _swift_getTupleTypeLayout();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return _xpc_activity_should_defer(activity);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return _xpc_connection_create_from_endpoint(endpoint);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return _xpc_connection_get_pid(connection);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

uint64_t xpc_remote_connection_create_with_connected_fd()
{
  return _xpc_remote_connection_create_with_connected_fd();
}

uint64_t xpc_remote_connection_set_local_service_version()
{
  return _xpc_remote_connection_set_local_service_version();
}

uint64_t xpc_set_event()
{
  return _xpc_set_event();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t xpc_transaction_exit_clean()
{
  return _xpc_transaction_exit_clean();
}

id objc_msgSend_active(void *a1, const char *a2, ...)
{
  return _[a1 active];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_browser(void *a1, const char *a2, ...)
{
  return _[a1 browser];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return [a1 countByEnumeratingWithState:x0 objects:x1 count:x2];
}

id objc_msgSend_disconnectHandlers(void *a1, const char *a2, ...)
{
  return _[a1 disconnectHandlers];
}

id objc_msgSend_hostMayPairWithOptions_challenge_(void *a1, const char *a2, ...)
{
  return [a1 hostMayPairWithOptions:challenge];
}

id objc_msgSend_lockdownShouldDisableDevicePairing(void *a1, const char *a2, ...)
{
  return _[a1 lockdownShouldDisableDevicePairing];
}

id objc_msgSend_log(void *a1, const char *a2, ...)
{
  return _[a1 log];
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return [a1 setActive:];
}

id objc_msgSend_setBrowser_(void *a1, const char *a2, ...)
{
  return [a1 setBrowser:];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_startOnQueue_(void *a1, const char *a2, ...)
{
  return [a1 startOnQueue:];
}